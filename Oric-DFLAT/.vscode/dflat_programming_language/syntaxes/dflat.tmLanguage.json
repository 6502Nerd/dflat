{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "dflat",
	"patterns": [
	{
		"include": "#keywords"
	},
	{
		"include": "#strings"
	},
	{
		"include": "#comments"
	},
	{
		"include": "#numbers"
	},
	{
		"include": "#types"
	},
	{
		"include": "#identifiers"
	}
	],
	"repository": {
		"keywords": {
			"patterns": [
			{
				"name": "comment.line.semicolon.dflat",
				"match": ";.*$\\n?"
			},
			{
				"name": "keyword.control.dflat",
				"match": "\\b(if|elif|else|endif|while|wend|return|until|repeat|for|next)\\b"
			},
			{
				"name": "keyword.dflat",
				"match": "\\b(adc|and|cmp|eor|lda|ora|sbc|sta|asl|dec|inc|lsr|rol|ror|bit|brk|clc|cld|cli|clv|sec|sed|sei|cpx|cpy|dex|dey|inx|iny|ldx|ldy|stx|sty|bcc|bcs|beq|bmi|bne|bpl|bvc|bvs|jmp|jsr|nop|pha|php|pla|plp|rti|rts|tax|tay|tsx|txa|txs|tya)\\b"
			},
			{
				"name": "keyword.dflat",
				"match": "\\x2e(org|opt|db|dw|ds)\\b"
			},
			{
				"name": "keyword.dflat",
				"match": "\\b(def_\\w+|enddef|_\\w+)\\b"
			},
			{
				"name": "keyword.dflat",
				"match": "\\b(println|printat|print|def|enddef|return|abort|local|dim|repeat|until|for|next|while|wend|if|else|endif|elif|data|run|list|input|text|plot|cursor|cls|poke|doke|sound|music|play|save|load|read|new|renum|wait|reset|hires|point|line|lineto|pixmode|ink|paper|circle|himem|monitor|sprchar|sprpos|sprupd|sprinit|sprmulti|bsave|bload|tload|tsave|peek|deek|stick|get|chr|left|right|mid|len|mem|scrn|rnd|elapsed|call|hex|dec|asc|val|pixel|sprhit|sgn|addr)\\b"
			},
			{
				"name": "keyword.operator.comparison.dflat",
				"match": "\\b(<|<=|>|>=|==|<>)\\b"
			},
			{
				"name": "keyword.operator.assignment.dflat",
				"match": "\\b=\\b"
			},
			{
				"name": "keyword.operator.logical.dflat",
				"match": "\\b(&|\\^|\\|)\\b"
			},
			{
				"name": "keyword.operator.arithmetic.dflat",
				"match": "\\b(\\+|-|\\*|\\/|\\\\)\\b"
			},
			{
				"name": "keyword.operator.bitwise.shift.dflat",
				"match": "\\b(<<|>>)\\b"
			}
			]
			},
		"strings": {
			"patterns": [
			{
				"name": "string.quoted.double.dflat",
				"begin": "\"",
				"end": "\"",
				"patterns": [
				{
					"name": "constant.character.escape.dflat",
					"match": "\\\\."
				}
				]
			},
			{
				"name": "string.quoted.single.dflat",
				"match": "'.'"
			}
			]
		},
		"numbers": {
			"patterns": [
			{
				"match": "0x([a-f]|[0-9])+",
				"name": "constant.numeric.hexadecimal.dflat"
			},
			{
				"match": "0b[0-1]+",
				"name": "constant.numeric.binary.dflat"
			},
			{
				"match": "-?[0-9]+",
				"name": "constant.numeric.decimal.dflat"
			}
			]
		},
		"types": {
		},
		"identifiers": {
			"patterns": [
			{
				"match": "([a-z]|[A-Z])([a-z]|[A-Z]|[0-9])*(?=\\()",
				"name": "entity.name.function.dflat"
			},
			{
				"match": "([a-z]|[A-Z])([a-z]|[A-Z]|[0-9])*\\$?",
				"name": "variable.other.dflat"
			}
			]
		}
	},
	"scopeName": "source.dflat"
}
