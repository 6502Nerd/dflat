AS65 Assembler for R6502 [1.42].                                     Page    1
-------------------------------- bank\bank0.s --------------------------------

-------------------------------- Symbol Table --------------------------------

              Symbol   Value        Decimal

                 ACR : $000b             11   *
              AM_ABS : $0001              1   *
           AM_ABSIND : $000a             10   *
          AM_ABSINDX : $000b             11   *
             AM_ABSX : $0002              2   *
             AM_ABSY : $0003              3   *
              AM_ACC : $000d             13   *
              AM_DIR : $0010             16   *
              AM_IMM : $000c             12   *
              AM_IMP : $000d             13   *
             AM_NONE : $0000              0   *
              AM_REL : $000f             15   *
               AM_ZP : $0004              4   *
            AM_ZPIND : $0007              7   *
           AM_ZPINDX : $0008              8   *
           AM_ZPINDY : $0009              9   *
              AM_ZPX : $0005              5   *
              AM_ZPY : $0006              6   *
            asm_init : $ff96          65430
               BANK0 : $0001              1
             bcd_str : $c36a          50026
          bcd_to_str : $c35d          50013
      bin_to_bcd_bit : $c33f          49983
              buf_ef : $003c             60
              buf_hi : $003a             58
              buf_lo : $0039             57
              buf_sz : $003b             59
     CMD_ERR_NOERROR : $0000              0   *
    CMD_ERR_NOTFOUND : $0001              1   *
        CMD_ERR_PARM : $0002              2   *
         CMD_ERR_VAL : $0003              3   *
           CRSR_DOWN : $000a             10   *
           CRSR_LEFT : $0008              8   *
          CRSR_RIGHT : $0009              9   *
             CRSR_UP : $000b             11   *
           CTRL_CAPS : $0014             20   *
        call_irq_brk : $c0a2          49314
     call_irq_master : $c09f          49311
   call_irq_usercia0 : $c0a5          49317
       cmd_check_cmd : $d2b3          53939
         cmd_check_d : $d2c6          53958
         cmd_check_s : $d2cd          53965
         cmd_dumpmem : $d300          54016
    cmd_dumpmemASCII : $d326          54054
      cmd_dumpmemFin : $d35b          54107
   cmd_dumpmem_ascii : $d338          54072
   cmd_dumpmem_block : $d306          54022
    cmd_dumpmem_byte : $d317          54039
  cmd_dump_skip_ctrl : $d342          54082
   cmd_dump_skip_del : $d347          54087
           cmd_error : $d2bb          53947
       cmd_find_parm : $d3aa          54186
              cmd_hi : $0095            149   *
          cmd_incmem : $d362          54114
              cmd_lo : $0094            148   *
   cmd_next_parm_err : $d3b6          54198
       cmd_not_found : $d2d4          53972
           cmd_parse : $d2c5          53957
AS65 Assembler for R6502 [1.42].                                     Page    2
-------------------------------- bank\bank0.s --------------------------------

      cmd_parse_byte : $d37b          54139
  cmd_parse_byte_err : $d395          54165
 cmd_parse_byte_errp : $d394          54164
 cmd_parse_next_parm : $d3a9          54185
      cmd_parse_word : $d397          54167
            cmd_peek : $d369          54121
            cmd_poke : $d372          54130
           cmd_ready : $d29f          53919
          cmd_setmem : $d2da          53978
     cmd_setmem_byte : $d2df          53983
      cmd_setmem_err : $d2fe          54014
        cmd_word_err : $d3a7          54183
        command_line : $d29f          53919
       con_bin_digit : $c21b          49691
        con_bin_done : $c231          49713
         con_bin_err : $c23b          49723
         con_bin_jmp : $c1b9          49593
        con_bin_to_a : $c213          49683
    con_bin_to_a_int : $c217          49687
         con_dec_jmp : $c1ad          49581
        con_dec_to_a : $c23d          49725
    con_dec_to_a_int : $c241          49729
       con_hex_digit : $c1dc          49628
        con_hex_done : $c209          49673
         con_hex_err : $c207          49671
         con_hex_jmp : $c1b3          49587
  con_hex_skip_x_f_1 : $c1e9          49641
        con_hex_to_a : $c1d4          49620
    con_hex_to_a_int : $c1d8          49624
           con_n_err : $c1bc          49596
       con_n_not_dec : $c1b0          49584
       con_n_not_hex : $c1b6          49590
          con_n_to_a : $c19c          49564
   con_n_to_a_detect : $c1be          49598
                DDRA : $0003              3   *
                DDRB : $0002              2   *
         DFERR_ABORT : $0012             18   *
         DFERR_BREAK : $000d             13   *
           DFERR_DIM : $0003              3   *
         DFERR_FNAME : $000b             11   *
     DFERR_IMMEDIATE : $0007              7   *
       DFERR_NEXTFOR : $000a             10   *
        DFERR_NODATA : $000e             14   *
          DFERR_NOIF : $0009              9   *
        DFERR_NOLINE : $0010             16   *
         DFERR_NOORG : $0014             20   *
        DFERR_NOPROC : $0005              5   *
            DFERR_OK : $0000              0   *
      DFERR_PROCPARM : $0006              6   *
      DFERR_QUANTITY : $0013             19   *
        DFERR_RETURN : $0011             17   *
       DFERR_STRLONG : $000c             12   *
        DFERR_SYNTAX : $0001              1   *
      DFERR_TYPEMISM : $0002              2   *
    DFERR_UNCLOSEDIF : $0008              8   *
         DFERR_UNTIL : $0004              4   *
          DFERR_WEND : $000f             15   *
          DFRT_ABORT : $0089            137   *
            DFRT_ASM : $0097            151   *
           DFRT_DATA : $0096            150   *
            DFRT_DEF : $0086            134   *
           DFRT_ELSE : $0093            147   *
AS65 Assembler for R6502 [1.42].                                     Page    3
-------------------------------- bank\bank0.s --------------------------------

         DFRT_ELSEIF : $0095            149   *
         DFRT_ENDDEF : $0087            135   *
          DFRT_ENDIF : $0094            148   *
            DFRT_FOR : $008e            142   *
             DFRT_IF : $0092            146   *
           DFRT_NEXT : $008f            143   *
         DFRT_REPEAT : $008c            140   *
         DFRT_RETURN : $0088            136   *
           DFRT_WEND : $0091            145   *
          DFRT_WHILE : $0090            144   *
            DFST_INT : $0001              1   *
            DFST_STR : $0080            128   *
            DFTK_BYT : $0020             32   *
         DFTK_BYTBIN : $0007              7   *
         DFTK_BYTDEC : $0005              5   *
         DFTK_BYTHEX : $0006              6   *
            DFTK_CHR : $0000              0   *
            DFTK_EOL : $0000              0   *
         DFTK_ESCVAL : $0020             32   *
            DFTK_FLT : $0080            128   *
             DFTK_FN : $0002              2   *
            DFTK_INT : $0010             16   *
         DFTK_INTBIN : $000b             11   *
         DFTK_INTDEC : $0009              9   *
         DFTK_INTHEX : $000a             10   *
             DFTK_KW : $0001              1   *
         DFTK_LINLEN : $0000              0   *
         DFTK_LINNUM : $0001              1   *
             DFTK_OP : $0008              8   *
          DFTK_OPMSK : $0007              7   *
           DFTK_PROC : $0012             18   *
          DFTK_RESVC : $000c             12   *
          DFTK_RESVD : $000d             13   *
          DFTK_RESVE : $000e             14   *
          DFTK_RESVF : $000f             15   *
          DFTK_RESV1 : $0001              1   *
          DFTK_RESV2 : $0002              2   *
          DFTK_RESV3 : $0003              3   *
          DFTK_RESV4 : $0004              4   *
          DFTK_RESV8 : $0008              8   *
          DFTK_RTMSK : $00f8            248   *
          DFTK_STEND : $001f             31   *
            DFTK_STR : $0040             64   *
         DFTK_STRLIT : $0010             16   *
          DFTK_STROP : $0004              4   *
          DFTK_TOKEN : $0080            128   *
            DFTK_VAR : $0011             17   *
        DFTK_VARPARM : $0026             38   *
          DFVVT_ARRY : $0080            128   *
           DFVVT_BYT : $0002              2   *
          DFVVT_DIM1 : $0003              3   *
          DFVVT_DIM2 : $0004              4   *
           DFVVT_FLT : $0008              8   *
            DFVVT_HI : $0002              2   *
           DFVVT_INT : $0001              1   *
            DFVVT_LO : $0001              1   *
          DFVVT_PROC : $0040             64   *
           DFVVT_STR : $0004              4   *
            DFVVT_SZ : $0008              8   *
          DFVVT_TYPE : $0000              0   *
           DF_MEMTOP : $9800          38912   *
        DF_PROGSTART : $0713           1811   *
AS65 Assembler for R6502 [1.42].                                     Page    4
-------------------------------- bank\bank0.s --------------------------------

          dflat_zp_e : $00ab            171
          dflat_zp_s : $005b             91
     dflat_zp_save_e : $00a1            161
     dflat_zp_save_s : $005b             91
          df_asmadmd : $009c            156
           df_asmlen : $00a0            160
         df_asmopcde : $009d            157
         df_asmoprnd : $009e            158
           df_asmopt : $009b            155
            df_asmpc : $0099            153
  df_asm_altaddrmode : $fd45          64837
       df_asm_length : $fd34          64820
    df_asm_tokensyms : $fd56          64854
            df_brkpc : $0062             98
           df_brkval : $0064            100
         df_checkkey : $005b             91
         df_checkmsk : $005c             92
            df_clear : $f74b          63307
          df_currdat : $0094            148
          df_currlin : $0086            134
         df_curstidx : $0080            128
           df_datoff : $0096            150
           df_eolidx : $007e            126
           df_exeoff : $0088            136
           df_ifnest : $0093            147
            df_immed : $005e             94
             df_init : $f73d          63293
          df_initrun : $e007          57351
       df_lexer_line : $d962          55650
  df_lexer_skip_lnum : $d983          55683
          df_linbuff : $0400           1024
          df_lineidx : $0092            146
          df_lineptr : $0090            144
           df_linoff : $007c            124
           df_memtop : $0611           1553
          df_msg_acc : $f91f          63775
           df_msg_pc : $f91b          63771
         df_msg_xreg : $f922          63778
         df_msg_yreg : $f925          63781
          df_nextlin : $0089            137
        df_next_done : $e9bd          59837
         df_nxtstidx : $007f            127
     df_ost_peekType : $f713          63251
       df_ost_popInt : $f719          63257
     df_ost_popParmX : $f6f8          63224
       df_ost_popPtr : $f721          63265
       df_ost_popStr : $f71d          63261
      df_ost_pushInt : $f6e5          63205
     df_ost_pushIntA : $f6e9          63209
    df_ost_pushParmX : $f6cf          63183
      df_ost_pushPtr : $f6f4          63220
      df_ost_pushStr : $f6f0          63216
          df_parmtop : $0077            119
               df_pc : $0060             96
    df_pg_check_line : $de9c          56988
df_pg_check_next_line : $de85          56965
df_pg_copyinputtolinbuff : $df52          57170
  df_pg_delete_block : $df12          57106
   df_pg_delete_byte : $df16          57110
df_pg_delete_next_byte : $df39          57145
         df_pg_dflat : $df5c          57180
          df_pg_done : $df9b          57243
AS65 Assembler for R6502 [1.42].                                     Page    5
-------------------------------- bank\bank0.s --------------------------------

     df_pg_find_line : $de79          56953
    df_pg_getcommand : $df72          57202
     df_pg_inputline : $df49          57161
  df_pg_inputline_ok : $df52          57170
 df_pg_insertlinbyte : $dff7          57335
    df_pg_insertline : $dfd8          57304
  df_pg_insert_block : $ded6          57046
   df_pg_insert_byte : $dee2          57058
df_pg_insert_next_byte : $df02          57090
   df_pg_line_number : $dfb8          57272
       df_pg_nothing : $dfb7          57271
        df_pg_prompt : $df67          57191
    df_pg_prompt_msg : $e000          57344
 df_pg_skip_del_line : $dfce          57294
      df_pg_tokenise : $df9d          57245
           df_prgend : $0067            103
          df_prgstrt : $0065            101
         df_procargs : $008c            140
          df_procloc : $008d            141
         df_procmode : $008b            139
          df_procptr : $008e            142
df_pr_line_gt_target : $de91          56977
     df_pr_line_next : $dec4          57028
  df_pr_line_nomatch : $deb6          57014
              df_raw : $0400           1024
              df_rnd : $0097            151
     df_rst_peekByte : $f6ad          63149
      df_rst_popByte : $f6a4          63140
      df_rst_popWord : $f6c1          63169
     df_rst_pushByte : $f69b          63131
     df_rst_pushWord : $f6b3          63155
          df_rtspace : $0500           1280
           df_rtstck : $0500           1280
           df_rtstop : $0076            118
         df_rt_abort : $f4f2          62706
           df_rt_add : $e626          58918
          df_rt_addr : $f3e8          62440
         df_rt_aequb : $e702          59138
      df_rt_aequbFin : $e70c          59148
           df_rt_and : $e6d5          59093
  df_rt_array_exists : $e2fe          58110
     df_rt_arry_parm : $e202          57858
    df_rt_arry_parm2 : $e209          57865
df_rt_arry_parm2_arry2 : $e221          57889
df_rt_arry_parm2_skiparry2 : $e228          57896
df_rt_arry_parm2_term : $e211          57873
           df_rt_asc : $f4cb          62667
           df_rt_asl : $e6af          59055
        df_rt_aslbit : $e6b5          59061
       df_rt_asldone : $e6bf          59071
    df_rt_asm_ABSREL : $fc85          64645
    df_rt_asm_AM_ABS : $fc9c          64668
   df_rt_asm_AM_ABSX : $fca9          64681
   df_rt_asm_AM_ABSY : $fc97          64663
    df_rt_asm_AM_IMM : $fcae          64686
    df_rt_asm_AM_IMP : $fc80          64640
df_rt_asm_AM_INDIRECT : $fcb8          64696
    df_rt_asm_AM_REL : $fca6          64678
  df_rt_asm_AM_ZPIND : $fcde          64734
df_rt_asm_AM_ZPINDORY : $fcce          64718
  df_rt_asm_addrmode : $fc64          64612
  df_rt_asm_assemble : $fa1b          64027
AS65 Assembler for R6502 [1.42].                                     Page    6
-------------------------------- bank\bank0.s --------------------------------

df_rt_asm_assemble_done : $fa2f          64047
 df_rt_asm_check_alt : $fb2d          64301
   df_rt_asm_command : $fa30          64048
      df_rt_asm_data : $fa8f          64143
 df_rt_asm_data_done : $facd          64205
 df_rt_asm_data_next : $fac3          64195
df_rt_asm_data_write : $face          64206
df_rt_asm_data_write_err : $fafe          64254
df_rt_asm_data_write_hi : $faea          64234
df_rt_asm_data_write_skip1 : $fad1          64209
df_rt_asm_data_write_skip2 : $faee          64238
        df_rt_asm_db : $fa82          64130
  df_rt_asm_db_start : $fa87          64135
df_rt_asm_decode_token : $f052          61522
df_rt_asm_decode_token_done : $f0ae          61614
df_rt_asm_decode_token_found : $f069          61545
df_rt_asm_decode_token_keyword : $f070          61552
df_rt_asm_decode_token_ws : $f059          61529
       df_rt_asm_dir : $fa42          64066
  df_rt_asm_do_label : $fa2c          64044
        df_rt_asm_ds : $fb00          64256
        df_rt_asm_dw : $fa85          64133
    df_rt_asm_encode : $fb66          64358
df_rt_asm_encode_print : $fbd0          64464
df_rt_asm_encode_relfar : $fb9e          64414
df_rt_asm_encode_relpos : $fb9a          64410
df_rt_asm_encode_skiprel : $fba2          64418
df_rt_asm_encode_writebyte : $fbbe          64446
df_rt_asm_encode_writeword : $fbc6          64454
df_rt_asm_find_addr_mode : $fcec          64748
df_rt_asm_find_addr_mode_err : $fd01          64769
df_rt_asm_find_addr_mode_loop : $fcf2          64754
df_rt_asm_get_operand : $fce1          64737
     df_rt_asm_label : $fa54          64084
      df_rt_asm_mnem : $fb1e          64286
  df_rt_asm_mnem_chk : $fb41          64321
 df_rt_asm_mnem_done : $fb4f          64335
  df_rt_asm_mnem_err : $fb64          64356
  df_rt_asm_mnem_try : $fb24          64292
       df_rt_asm_opt : $fa7a          64122
       df_rt_asm_org : $fa67          64103
   df_rt_asm_printCH : $fc3e          64574
   df_rt_asm_printCR : $fc34          64564
 df_rt_asm_printline : $fc4c          64588
  df_rt_asm_printOPC : $fc03          64515
  df_rt_asm_printOPR : $fc19          64537
df_rt_asm_printOPR_1 : $fc2e          64558
   df_rt_asm_printPC : $fbf2          64498
  df_rt_asm_printSPC : $fc0f          64527
df_rt_asm_print_mmen : $fbe2          64482
 df_rt_asm_print_rts : $fbf1          64497
df_rt_asm_skip_to_sym : $fd04          64772
df_rt_asm_skip_to_sym_done : $fd33          64819
df_rt_asm_skip_to_sym_end : $fd22          64802
df_rt_asm_skip_to_sym_next : $fd13          64787
    df_rt_asm_string : $faa6          64166
 df_rt_asm_string_ch : $faad          64173
  df_rt_asm_tokenjmp : $ff8c          65420
        df_rt_assign : $ed3f          60735
    df_rt_assign_str : $ed4c          60748
         df_rt_asubb : $e70d          59149
      df_rt_asubbFin : $e71a          59162
AS65 Assembler for R6502 [1.42].                                     Page    7
-------------------------------- bank\bank0.s --------------------------------

   df_rt_binlen_skip : $f2c2          62146
         df_rt_bload : $f1bd          61885
    df_rt_bload_addr : $f1e0          61920
         df_rt_bsave : $f1f0          61936
   df_rt_bsave_parms : $f2a0          62112
         df_rt_bsuba : $e71b          59163
      df_rt_bsubaFin : $e728          59176
          df_rt_call : $f3b9          62393
       df_rt_calljsr : $f3c8          62408
     df_rt_check_pos : $e9b0          59824
   df_rt_check_while : $e854          59476
           df_rt_chr : $f430          62512
        df_rt_circle : $ec66          60518
           df_rt_cls : $ebb7          60343
         df_rt_comeq : $e783          59267
         df_rt_comgt : $e77a          59258
        df_rt_comgte : $e795          59285
         df_rt_comlt : $e771          59249
        df_rt_comlte : $e78c          59276
       df_rt_comment : $ed50          60752
         df_rt_comne : $e79e          59294
       df_rt_copyStr : $e1bd          57789
    df_rt_copyStr_ch : $e1bf          57791
  df_rt_copyStr_done : $e1c8          57800
       df_rt_copy_fn : $f154          61780
        df_rt_cursor : $ec2e          60462
          df_rt_data : $ed50          60752
 df_rt_datastatement : $ea1d          59933
   df_rt_datlinstart : $ea15          59925
    df_rt_datnextlin : $ea23          59939
      df_rt_datumerr : $ea4d          59981
    df_rt_dec_binlen : $f2bc          62140
          df_rt_deek : $f2de          62174
           df_rt_def : $f5d2          62930
        df_rt_deferr : $f52e          62766
  df_rt_def_find_var : $f5de          62942
   df_rt_def_got_var : $f5f2          62962
df_rt_def_got_varparm : $f5ef          62959
df_rt_def_initialise_parm : $f631          63025
  df_rt_def_load_var : $f610          62992
df_rt_def_load_var_done : $f64d          63053
df_rt_def_load_var_int : $f63f          63039
df_rt_def_load_var_int_skip : $f642          63042
 df_rt_def_parm_done : $f608          62984
           df_rt_dim : $eb2e          60206
     df_rt_dim2_mul2 : $eb95          60309
       df_rt_dim2_nz : $eb80          60288
     df_rt_dim_alloc : $eb6f          60271
      df_rt_dim_done : $ebb4          60340
       df_rt_dim_err : $ebb5          60341
   df_rt_dim_findesc : $eb31          60209
 df_rt_dim_next_byte : $ebaf          60335
           df_rt_div : $e66d          58989
      df_rt_doassign : $ed42          60738
          df_rt_doke : $f0af          61615
        df_rt_doline : $ec7f          60543
       df_rt_dosound : $f0f4          61684
       df_rt_do_else : $e922          59682
       df_rt_elapsed : $f39e          62366
          df_rt_else : $e8d0          59600
        df_rt_elseif : $e8d0          59600
        df_rt_enddef : $f654          63060
AS65 Assembler for R6502 [1.42].                                     Page    8
-------------------------------- bank\bank0.s --------------------------------

         df_rt_endif : $e8cb          59595
           df_rt_eor : $e6f3          59123
           df_rt_eos : $ed52          60754
      df_rt_eos_true : $ed64          60772
            df_rt_eq : $e75d          59229
        df_rt_escjmp : $e5f9          58873
      df_rt_eval_byt : $e319          58137
   df_rt_eval_bytbin : $e1d6          57814
   df_rt_eval_bytdec : $e1d6          57814
   df_rt_eval_bythex : $e1d6          57814
      df_rt_eval_chr : $e1d6          57814
      df_rt_eval_esc : $e103          57603
  df_rt_eval_esc_tab : $e112          57618
   df_rt_eval_intbin : $e1d6          57814
   df_rt_eval_intdec : $e1d6          57814
   df_rt_eval_inthex : $e1d6          57814
     df_rt_eval_lvar : $e266          57958
   df_rt_eval_lvskip : $e240          57920
     df_rt_eval_proc : $e32b          58155
 df_rt_eval_proc_err : $e338          58168
      df_rt_eval_ptr : $e324          58148
 df_rt_eval_reserved : $e1e2          57826
   df_rt_eval_strlit : $e1e4          57828
df_rt_eval_strlit_ch : $e1f8          57848
df_rt_eval_strlit_done : $e1ff          57855
      df_rt_eval_var : $e22d          57901
df_rt_eval_var_dim2adj : $e2b0          58032
df_rt_eval_var_dim2adjx : $e2ba          58042
df_rt_eval_var_dim2adjy : $e2b5          58037
df_rt_eval_var_do_arry : $e281          57985
df_rt_eval_var_nomult : $e2d3          58067
df_rt_eval_var_notarry : $e256          57942
 df_rt_eval_var_push : $e2ed          58093
df_rt_eval_var_simple : $e273          57971
  df_rt_eval_var_str : $e323          58147
   df_rt_exec_ctrl_c : $e437          58423
   df_rt_exec_ctrl_z : $e43b          58427
      df_rt_exec_end : $e435          58421
 df_rt_exec_find_tok : $e3e3          58339
df_rt_exec_found_tok : $e3e8          58344
 df_rt_exec_init_ptr : $e3dc          58332
     df_rt_exec_jump : $e43d          58429
   df_rt_exec_no_key : $e40e          58382
     df_rt_exec_proc : $f588          62856
     df_rt_exec_stat : $e3d6          58326
         df_rt_false : $e72f          59183
  df_rt_file_cleanup : $f17d          61821
     df_rt_file_errc : $f167          61799
 df_rt_findelseendif : $e893          59539
    df_rt_findescval : $e4f4          58612
df_rt_findescval_loop : $e4f7          58615
      df_rt_findproc : $e4ac          58540
  df_rt_findproc_cmd : $e4be          58558
  df_rt_findproc_err : $e4f2          58610
df_rt_findproc_nextstat : $e4de          58590
      df_rt_findwend : $e821          59425
    df_rt_fname_case : $f156          61782
           df_rt_for : $e925          59685
 df_rt_generate_lvar : $ed1c          60700
           df_rt_get : $f370          62320
  df_rt_getbin_parms : $f27f          62079
df_rt_getbin_parms_loop : $f281          62081
AS65 Assembler for R6502 [1.42].                                     Page    9
-------------------------------- bank\bank0.s --------------------------------

     df_rt_getdatatk : $ea33          59955
       df_rt_getlvar : $e50e          58638
       df_rt_getnval : $e076          57462
      df_rt_get2Ints : $e33a          58170
      df_rt_get2Strs : $e349          58185
      df_rt_get_push : $f381          62337
     df_rt_get_pushp : $f380          62336
      df_rt_get_sync : $f375          62325
            df_rt_gt : $e749          59209
           df_rt_gte : $e753          59219
      df_rt_gte_calc : $e756          59222
           df_rt_hex : $f444          62532
         df_rt_himem : $ec34          60468
         df_rt_hires : $ec43          60483
            df_rt_if : $e8e2          59618
         df_rt_ifcmd : $e896          59542
        df_rt_ifelse : $e8b4          59572
        df_rt_ifeval : $e8e4          59620
  df_rt_ifskipelseif : $e8ab          59563
       df_rt_if_done : $e8cf          59599
      df_rt_if_found : $e8c1          59585
      df_rt_if_match : $e88b          59531
       df_rt_if_stat : $e875          59509
   df_rt_if_stat_err : $e889          59529
     df_rt_init_done : $e075          57461
 df_rt_init_filename : $f148          61768
 df_rt_init_stat_ptr : $e3c1          58305
      df_rt_init_vvt : $e032          57394
 df_rt_init_vvt_skip : $e066          57446
 df_rt_init_vvt_slot : $e03c          57404
df_rt_init_vvt_slot_undim : $e048          57416
           df_rt_ink : $ec4c          60492
         df_rt_input : $eac2          60098
     df_rt_input_err : $eafc          60156
     df_rt_input_num : $eae5          60133
     df_rt_input_str : $eadd          60125
    df_rt_ldtokenise : $f1a5          61861
          df_rt_left : $f475          62581
           df_rt_len : $f4bf          62655
          df_rt_line : $ec86          60550
        df_rt_lineto : $ec78          60536
          df_rt_list : $ee51          61009
  df_rt_listcheckvnt : $edb7          60855
   df_rt_listgotnext : $ede6          60902
   df_rt_listnextvnt : $eddf          60895
   df_rt_listpn_done : $edf8          60920
       df_rt_listprg : $ee78          61048
    df_rt_listprgend : $ee80          61056
      df_rt_listproc : $edf9          60921
    df_rt_listprocch : $edc3          60867
    df_rt_listproccr : $edcf          60879
 df_rt_listprocnames : $edab          60843
 df_rt_listprocpause : $edd5          60885
    df_rt_listp_copy : $ee00          60928
    df_rt_listp_done : $ee45          60997
 df_rt_listp_findcmd : $ee2b          60971
 df_rt_listp_findend : $ee24          60964
df_rt_listp_notfound : $ee4f          61007
      df_rt_listwait : $eddc          60892
      df_rt_list_all : $ee64          61028
 df_rt_list_all_line : $eec9          61129
   df_rt_list_decode : $eed5          61141
AS65 Assembler for R6502 [1.42].                                     Page   10
-------------------------------- bank\bank0.s --------------------------------

df_rt_list_decode_esc : $ef07          61191
df_rt_list_decode_token : $f013          61459
df_rt_list_decode_token_normal : $f01a          61466
   df_rt_list_donvvt : $f005          61445
df_rt_list_do_decode_tkn : $f021          61473
   df_rt_list_escval : $eee5          61157
  df_rt_list_findvvt : $efad          61357
df_rt_list_find_asm_sym : $f07b          61563
 df_rt_list_find_sym : $f02a          61482
   df_rt_list_gotvvt : $efdc          61404
df_rt_list_gotvvtend : $efc6          61382
df_rt_list_got_asm_sym : $f09c          61596
df_rt_list_got_last_sym : $f03c          61500
  df_rt_list_got_sym : $f040          61504
     df_rt_list_line : $ee86          61062
df_rt_list_line_cont : $eea0          61088
 df_rt_list_line_fin : $eec6          61126
df_rt_list_line_only : $eecc          61132
df_rt_list_line_only_fin : $eec8          61128
    df_rt_list_linno : $ee6b          61035
   df_rt_list_linnum : $f006          61446
  df_rt_list_nexttok : $eeee          61166
df_rt_list_next_asm_ch : $f081          61569
  df_rt_list_next_ch : $f030          61488
df_rt_list_next_line : $eea7          61095
    df_rt_list_pause : $ee95          61077
  df_rt_list_synckey : $ee91          61073
    df_rt_list_token : $eeeb          61163
   df_rt_list_vvtend : $efb9          61369
          df_rt_load : $f263          62051
       df_rt_loadbin : $f28c          62092
  df_rt_loadbin_byte : $f28e          62094
   df_rt_loadbin_inc : $f298          62104
      df_rt_loadline : $f18b          61835
         df_rt_local : $eafe          60158
    df_rt_local_done : $eb2a          60202
 df_rt_local_findesc : $eb05          60165
           df_rt_lsr : $e6c2          59074
        df_rt_lsrbit : $e6c8          59080
       df_rt_lsrdone : $e6d2          59090
       df_rt_lst_bin : $ef73          61299
       df_rt_lst_bit : $ef7d          61309
 df_rt_lst_bit_skip0 : $ef85          61317
    df_rt_lst_bytbin : $ef68          61288
    df_rt_lst_bythex : $ef43          61251
       df_rt_lst_chr : $ef26          61222
df_rt_lst_const_done : $ef52          61266
   df_rt_lst_hex_pre : $ef39          61241
    df_rt_lst_intbin : $ef71          61297
    df_rt_lst_intdec : $ef8d          61325
    df_rt_lst_inthex : $ef56          61270
    df_rt_lst_lo_hex : $ef46          61254
      df_rt_lst_proc : $ef98          61336
  df_rt_lst_reserved : $ef25          61221
    df_rt_lst_strlit : $efec          61420
  df_rt_lst_strlitch : $eff3          61427
 df_rt_lst_strlitdon : $effe          61438
       df_rt_lst_var : $ef98          61336
            df_rt_lt : $e735          59189
           df_rt_lte : $e73f          59199
      df_rt_lte_calc : $e742          59202
           df_rt_mem : $f31c          62236
AS65 Assembler for R6502 [1.42].                                     Page   11
-------------------------------- bank\bank0.s --------------------------------

      df_rt_mem_calc : $f35d          62301
      df_rt_mem_free : $f327          62247
       df_rt_mem_prg : $f33a          62266
       df_rt_mem_var : $f34d          62285
           df_rt_mid : $f4a1          62625
           df_rt_mod : $e68e          59022
       df_rt_monitor : $e7f6          59382
          df_rt_mult : $e64c          58956
         df_rt_music : $f104          61700
       df_rt_nassign : $ecff          60671
            df_rt_ne : $e767          59239
         df_rt_neval : $e07c          57468
    df_rt_neval_done : $e0ca          57546
   df_rt_neval_donow : $e0ed          57581
     df_rt_neval_esc : $e0a9          57513
df_rt_neval_nextbyte : $e0d2          57554
    df_rt_neval_optk : $e07f          57471
 df_rt_neval_process : $e0c1          57537
  df_rt_neval_pushOp : $e0fe          57598
      df_rt_neval_tk : $e0af          57519
   df_rt_neval_tk_fn : $e0cb          57547
   df_rt_neval_tk_op : $e0d7          57559
  df_rt_neval_tk_opp : $e0d6          57558
           df_rt_new : $e7f9          59385
          df_rt_next : $e963          59747
     df_rt_nextdatum : $ea05          59909
      df_rt_nextstat : $e455          58453
   df_rt_nextstat_dn : $e47f          58495
  df_rt_nextstat_err : $e47b          58491
   df_rt_nextstat_ln : $e46a          58474
    df_rt_next_check : $e9b3          59827
      df_rt_next_err : $e9c0          59840
      df_rt_noif_err : $e8e0          59616
df_rt_openforbinload : $f1b4          61876
df_rt_openforbinsave : $f1ab          61867
            df_rt_or : $e6e4          59108
         df_rt_paper : $ec52          60498
    df_rt_parm_2ints : $e358          58200
    df_rt_parm_3ints : $e36f          58223
    df_rt_parm_4ints : $e392          58258
    df_rt_parse_file : $f15f          61791
          df_rt_peek : $f2e1          62177
         df_rt_pixel : $f391          62353
       df_rt_pixmode : $ec46          60486
          df_rt_play : $f119          61721
          df_rt_plot : $ebba          60346
       df_rt_plotstr : $ebed          60397
     df_rt_plotstrch : $ebfe          60414
   df_rt_plotstrdone : $ec2d          60461
    df_rt_plot_h_int : $ebe4          60388
    df_rt_plot_h_str : $ec1b          60443
         df_rt_point : $ec5c          60508
          df_rt_poke : $f0be          61630
      df_rt_pop_stat : $e493          58515
   df_rt_pop_stat_go : $e52a          58666
         df_rt_print : $ecba          60602
       df_rt_printat : $ecb0          60592
       df_rt_println : $ecf7          60663
    df_rt_print_done : $ecf4          60660
  df_rt_print_gotstr : $ece8          60648
     df_rt_print_num : $e9ea          59882
     df_rt_print_str : $e9f1          59889
AS65 Assembler for R6502 [1.42].                                     Page   12
-------------------------------- bank\bank0.s --------------------------------

  df_rt_print_string : $ecee          60654
  df_rt_print_str_ch : $e9fa          59898
df_rt_print_str_done : $ea04          59908
      df_rt_print_ws : $ecbd          60605
          df_rt_proc : $f530          62768
     df_rt_proc_addr : $f55a          62810
    df_rt_proc_local : $f687          63111
df_rt_proc_local_load : $f68e          63118
  df_rt_proc_parmerr : $f52e          62766
df_rt_proc_parm_done : $f579          62841
df_rt_proc_parm_none : $f57a          62842
df_rt_proc_push_parm : $f565          62821
df_rt_proc_unloadvar : $f666          63078
df_rt_proc_unload_done : $f686          63110
  df_rt_proc_unlocal : $f660          63072
     df_rt_push_int1 : $f3c5          62405
     df_rt_push_stat : $e487          58503
     df_rt_putintres : $e61f          58911
          df_rt_read : $eaa6          60070
      df_rt_readbyte : $f2e2          62178
 df_rt_readbyte_skip : $f2f7          62199
     df_rt_readdatum : $ea4f          59983
     df_rt_read_done : $eabf          60095
 df_rt_read_find_var : $eaa8          60072
         df_rt_renum : $ed66          60774
      df_rt_renum_do : $ed7a          60794
    df_rt_renum_next : $ed99          60825
      df_rt_renum_ok : $ed76          60790
  df_rt_renum_update : $ed81          60801
        df_rt_repeat : $e9c2          59842
         df_rt_reset : $f2c9          62153
        df_rt_return : $f659          63065
         df_rt_right : $f486          62598
           df_rt_rnd : $f2fa          62202
     df_rt_rnd_noeor : $f30e          62222
       df_rt_rnd_set : $f315          62229
           df_rt_run : $ed51          60753
     df_rt_run_token : $e446          58438
          df_rt_sadd : $e9e9          59881
       df_rt_sassign : $ed16          60694
          df_rt_save : $f211          61969
       df_rt_savebin : $f29e          62110
  df_rt_savebin_byte : $f2ac          62124
   df_rt_savebin_inc : $f2b6          62134
          df_rt_scrn : $f384          62340
           df_rt_seq : $e7d2          59346
         df_rt_seval : $e138          57656
    df_rt_seval_copy : $e196          57750
    df_rt_seval_done : $e1b9          57785
     df_rt_seval_esc : $e162          57698
df_rt_seval_esc_proc : $e1b7          57783
df_rt_seval_esc_strlit : $e1b1          57777
 df_rt_seval_esc_var : $e192          57746
df_rt_seval_nextbyte : $e1ac          57772
    df_rt_seval_optk : $e146          57670
      df_rt_seval_tk : $e170          57712
   df_rt_seval_tk_fn : $e189          57737
   df_rt_seval_tk_op : $e185          57733
           df_rt_sgn : $f3cb          62411
         df_rt_sgn_n : $f3de          62430
         df_rt_sgn_z : $f3e3          62435
           df_rt_sgt : $e7c9          59337
AS65 Assembler for R6502 [1.42].                                     Page   13
-------------------------------- bank\bank0.s --------------------------------

          df_rt_sgte : $e7b4          59316
df_rt_skipinitdataptr : $ea3d          59965
 df_rt_skipnestendif : $e8be          59582
    df_rt_skipnestif : $e8b1          59569
       df_rt_skip_ws : $e501          58625
  df_rt_skip_ws_loop : $e504          58628
           df_rt_slt : $e7c2          59330
          df_rt_slte : $e7a7          59303
    df_rt_snd_common : $f0c8          61640
           df_rt_sne : $e7bb          59323
         df_rt_sound : $f0f1          61681
df_rt_sound_env_skip : $f0ee          61678
   df_rt_sound_noise : $f0fb          61691
       df_rt_sprchar : $f4f4          62708
        df_rt_sprhit : $f51c          62748
df_rt_sprhit_inactive : $f528          62760
       df_rt_sprinit : $f513          62739
      df_rt_sprmulti : $f516          62742
        df_rt_sprpos : $f4fe          62718
        df_rt_sprupd : $f50a          62730
         df_rt_stick : $f36a          62314
 df_rt_strlen_common : $f3f0          62448
  df_rt_strlen_count : $f3f6          62454
      df_rt_str_comp : $e7d9          59353
 df_rt_str_comp_byte : $e7de          59358
   df_rt_str_comp_eq : $e7f3          59379
df_rt_str_comp_false : $e7ae          59310
   df_rt_str_comp_gt : $e7f0          59376
   df_rt_str_comp_lt : $e7ed          59373
 df_rt_str_comp_true : $e7b1          59313
    df_rt_str_cpy_ch : $f410          62480
   df_rt_str_extract : $f3fd          62461
           df_rt_sub : $e639          58937
          df_rt_sval : $e13c          57660
          df_rt_text : $ec40          60480
         df_rt_tload : $f183          61827
      df_rt_tokenjmp : $e533          58675
          df_rt_true : $e729          59177
         df_rt_tsave : $f169          61801
df_rt_unexpected_end : $e439          58425
         df_rt_until : $e9ca          59850
df_rt_untilnext_done : $e9df          59871
     df_rt_until_err : $e9e7          59879
           df_rt_val : $f4dc          62684
       df_rt_val_err : $f4f0          62704
          df_rt_wait : $ec97          60567
  df_rt_wait_counter : $ec9b          60571
   df_rt_wait_skiphi : $eca7          60583
     df_rt_wait_tick : $ec9d          60573
          df_rt_wend : $e85f          59487
      df_rt_wend_end : $e85d          59485
      df_rt_wend_err : $e873          59507
         df_rt_while : $e7fc          59388
     df_rt_while_cmd : $e832          59442
    df_rt_while_done : $e80c          59404
         df_sevalptr : $007a            122
    df_show_err_done : $f8cb          63691
     df_show_err_fin : $f8aa          63658
    df_show_err_find : $f855          63573
   df_show_err_found : $f871          63601
  df_show_err_linnum : $f891          63633
    df_show_err_skip : $f85d          63581
AS65 Assembler for R6502 [1.42].                                     Page   14
-------------------------------- bank\bank0.s --------------------------------

               df_sp : $005f             95
          df_starend : $0074            116
         df_starstrt : $0072            114
          df_strbuff : $0078            120
           df_stridx : $0079            121
      df_str_src_end : $f425          62501
        df_st_malloc : $f725          63269
df_st_typemismatcherr : $f711          63249
           df_symini : $0084            132
           df_symoff : $0083            131
           df_symtab : $0081            129
         df_tk_abort : $de51          56913
           df_tk_add : $de51          56913
          df_tk_addr : $de2e          56878
           df_tk_and : $de51          56913
        df_tk_arrvar : $d81f          55327
           df_tk_asc : $de24          56868
           df_tk_asl : $de51          56913
 df_tk_asm_addr_mode : $f9bc          63932
df_tk_asm_addr_mode_ok : $f9ab          63915
df_tk_asm_addr_mode_1 : $f9d1          63953
df_tk_asm_addr_mode_2 : $f9db          63963
df_tk_asm_checknexttok : $f964          63844
df_tk_asm_checktokch : $f966          63846
        df_tk_asm_db : $ddb8          56760
        df_tk_asm_ds : $de56          56918
        df_tk_asm_dw : $ddb8          56760
df_tk_asm_exec_parser : $f9ad          63917
df_tk_asm_foundsymend : $f98c          63884
  df_tk_asm_matchtok : $f956          63830
  df_tk_asm_mnemonic : $f94b          63819
       df_tk_asm_opt : $de56          56918
       df_tk_asm_org : $de56          56918
df_tk_asm_parse_command : $f928          63784
df_tk_asm_parse_command_err : $f94a          63818
df_tk_asm_parse_command_symbol : $f951          63825
  df_tk_asm_symfound : $f99f          63903
df_tk_asm_symnextentry : $f97d          63869
df_tk_asm_symnomatch : $f97b          63867
  df_tk_asm_tokenjmp : $ff82          65410
        df_tk_assign : $dd60          56672
         df_tk_bload : $de5c          56924
          df_tk_body : $d98b          55691
         df_tk_bsave : $de66          56934
          df_tk_call : $de43          56899
      df_tk_callproc : $de18          56856
          df_tk_char : $d777          55159
      df_tk_char_err : $d71d          55069
         df_tk_chdir : $de56          56918
  df_tk_checknexttok : $da08          55816
    df_tk_checktokch : $da25          55845
           df_tk_chr : $de24          56868
        df_tk_circle : $de66          56934
     df_tk_closebrkt : $de29          56873
           df_tk_cls : $de51          56913
        df_tk_colour : $de66          56934
       df_tk_comment : $dd69          56681
  df_tk_comment_done : $dd74          56692
         df_tk_const : $d7b5          55221
     df_tk_const_err : $d7d5          55253
df_tk_const_try_char : $d7ce          55246
 df_tk_const_try_num : $d7c4          55236
AS65 Assembler for R6502 [1.42].                                     Page   15
-------------------------------- bank\bank0.s --------------------------------

 df_tk_const_try_str : $d7c7          55239
        df_tk_cursor : $de56          56918
          df_tk_data : $ddb8          56760
     df_tk_data_done : $ddb6          56758
          df_tk_deek : $de24          56868
           df_tk_def : $ddfc          56828
           df_tk_del : $de56          56918
           df_tk_dim : $ddde          56798
           df_tk_dir : $de51          56913
           df_tk_div : $de51          56913
          df_tk_doke : $de5c          56924
          df_tk_done : $d9b2          55730
       df_tk_elapsed : $de2e          56878
          df_tk_else : $de51          56913
        df_tk_elseif : $de56          56918
        df_tk_enddef : $de51          56913
         df_tk_endif : $de51          56913
           df_tk_eor : $de51          56913
            df_tk_eq : $de51          56913
         df_tk_error : $dd5e          56670
      df_tk_errortab : $f782          63362
        df_tk_error2 : $de22          56866
   df_tk_error_atpos : $f829          63529
   df_tk_error_error : $f82f          63535
  df_tk_error_inline : $f81f          63519
   df_tk_exec_parser : $d9cd          55757
        df_tk_expect : $d711          55057
      df_tk_expectok : $d70f          55055
  df_tk_expecttokret : $d72a          55082
    df_tk_expect_tok : $d71f          55071
df_tk_expect_tok_err : $d72b          55083
df_tk_expect_tok_fatal : $d731          55089
    df_tk_expression : $d91e          55582
     df_tk_expre_err : $d929          55593
     df_tk_expr_more : $ddbd          56765
           df_tk_for : $de01          56833
   df_tk_foundsymend : $da54          55892
           df_tk_get : $de24          56868
       df_tk_get_buf : $d68c          54924
  df_tk_get_buf_null : $d696          54934
            df_tk_gt : $de51          56913
           df_tk_gte : $de51          56913
         df_tk_hchar : $de66          56934
           df_tk_hex : $de24          56868
         df_tk_himem : $de56          56918
         df_tk_hires : $de51          56913
            df_tk_if : $de56          56918
           df_tk_imm : $f9f1          63985
      df_tk_indirect : $f9f4          63988
 df_tk_indirect_done : $fa19          64025
    df_tk_indirect_y : $fa08          64008
           df_tk_ink : $de56          56918
         df_tk_input : $ddc6          56774
       df_tk_isalpha : $d6d4          54996
    df_tk_isalphanum : $d6e1          55009
 df_tk_isalpha_false : $d6d1          54993
         df_tk_isbin : $d6b5          54965
    df_tk_isbin_true : $d6be          54974
       df_tk_isdigit : $d6aa          54954
 df_tk_isdigit_false : $d6b3          54963
         df_tk_isEOS : $d930          55600
         df_tk_ishex : $d6bf          54975
AS65 Assembler for R6502 [1.42].                                     Page   16
-------------------------------- bank\bank0.s --------------------------------

   df_tk_ishex_false : $d6d1          54993
   df_tk_ishex_truep : $d6cf          54991
        df_tk_isproc : $d6e7          55015
   df_tk_isproc_true : $d6ec          55020
          df_tk_isws : $d70a          55050
    df_tk_isws_false : $d70f          55055
          df_tk_left : $de37          56887
           df_tk_len : $de24          56868
          df_tk_line : $de6e          56942
       df_tk_linenum : $d9dc          55772
        df_tk_lineto : $de5c          56924
    df_tk_line_empty : $d9c9          55753
          df_tk_list : $dd9a          56730
df_tk_listp_procname : $dd76          56694
df_tk_listp_procname_ch : $dd85          56709
df_tk_listp_procname_err : $dd98          56728
df_tk_listp_procname_ok : $dd96          56726
     df_tk_list_done : $ddaa          56746
     df_tk_list_line : $dda6          56742
    df_tk_list_procs : $dd9f          56735
          df_tk_load : $de56          56918
         df_tk_local : $dded          56813
      df_tk_localvar : $d809          55305
 df_tk_localvar_cont : $d80f          55311
           df_tk_lsr : $de51          56913
            df_tk_lt : $de51          56913
           df_tk_lte : $de51          56913
      df_tk_matchtok : $d9fb          55803
df_tk_matchtok_skip_op : $da21          55841
           df_tk_mem : $de24          56868
           df_tk_mid : $de3d          56893
           df_tk_mod : $de51          56913
       df_tk_monitor : $de51          56913
          df_tk_mult : $de51          56913
         df_tk_music : $de6e          56942
         df_tk_narry : $d89e          55454
     df_tk_narry_end : $d8ab          55467
         df_tk_nbrkt : $d8b0          55472
            df_tk_ne : $de51          56913
           df_tk_new : $de51          56913
          df_tk_next : $de51          56913
     df_tk_next_expr : $ddb8          56760
           df_tk_nop : $d909          55561
     df_tk_nop_false : $d8c8          55496
       df_tk_not_eos : $d928          55592
         df_tk_nterm : $d8bd          55485
    df_tk_nterm_cont : $d8ca          55498
    df_tk_nterm_done : $d8c8          55496
     df_tk_nterm_err : $d907          55559
    df_tk_nterm_proc : $d8b8          55480
   df_tk_nterm_tryfn : $d8d7          55511
df_tk_nterm_try_const : $d901          55553
df_tk_nterm_try_proc : $d8ed          55533
 df_tk_nterm_try_var : $d8f9          55545
           df_tk_num : $d733          55091
       df_tk_num_bin : $d762          55138
       df_tk_num_err : $d71d          55069
    df_tk_num_hexbin : $d754          55124
       df_tk_num_put : $d76a          55146
            df_tk_or : $de51          56913
         df_tk_paper : $de56          56918
          df_tk_parm : $d7f7          55287
AS65 Assembler for R6502 [1.42].                                     Page   17
-------------------------------- bank\bank0.s --------------------------------

 df_tk_parm_skip_var : $d804          55300
    df_tk_parseerror : $d9cb          55755
 df_tk_parse_command : $d94a          55626
df_tk_parse_command_done : $d960          55648
df_tk_parse_command_err : $d961          55649
df_tk_parse_user_proc : $d940          55616
          df_tk_peek : $de24          56868
      df_tk_peek_buf : $d686          54918
         df_tk_pixel : $de37          56887
       df_tk_pixmode : $de56          56918
          df_tk_play : $de6e          56942
          df_tk_plot : $de66          56934
         df_tk_point : $de5c          56924
          df_tk_poke : $de5c          56924
     df_tk_preassign : $dd4e          56654
         df_tk_print : $ddb1          56753
       df_tk_printat : $ddab          56747
       df_tk_println : $ddb1          56753
    df_tk_print_done : $ddb6          56758
          df_tk_proc : $d82a          55338
     df_tk_proc_call : $d866          55398
    df_tk_proc_comma : $d880          55424
      df_tk_proc_err : $d89c          55452
     df_tk_proc_errp : $d89b          55451
   df_tk_proc_noparm : $d889          55433
    df_tk_proc_parms : $d859          55385
df_tk_proc_skip_args : $d899          55449
df_tk_proc_skip_call : $d86f          55407
  df_tk_put_overflow : $d6a3          54947
       df_tk_put_tok : $d697          54935
          df_tk_read : $ddcf          56783
         df_tk_renum : $de66          56934
        df_tk_repeat : $de51          56913
         df_tk_reset : $de1a          56858
        df_tk_return : $de53          56915
         df_tk_right : $de37          56887
           df_tk_rnd : $de24          56868
           df_tk_run : $de51          56913
          df_tk_save : $de56          56918
          df_tk_scrn : $de37          56887
           df_tk_sgn : $de24          56868
       df_tk_skip_ws : $d6ed          55021
         df_tk_sound : $de66          56934
       df_tk_sprchar : $de5c          56924
        df_tk_sprhit : $de24          56868
       df_tk_sprinit : $de51          56913
     df_tk_spritepos : $de66          56934
      df_tk_sprmulti : $de5c          56924
        df_tk_sprpos : $de66          56934
        df_tk_sprupd : $de51          56913
         df_tk_stick : $de29          56873
           df_tk_str : $d793          55187
      df_tk_strip_ws : $d6fd          55037
        df_tk_str_ch : $d79b          55195
       df_tk_str_don : $d7ac          55212
       df_tk_str_err : $d7b3          55219
           df_tk_sub : $de51          56913
      df_tk_sws_done : $d709          55049
     df_tk_sws_loop1 : $d6fd          55037
      df_tk_symfound : $da65          55909
df_tk_symfound_final : $da75          55925
  df_tk_symnextentry : $da45          55877
AS65 Assembler for R6502 [1.42].                                     Page   18
-------------------------------- bank\bank0.s --------------------------------

    df_tk_symnomatch : $da43          55875
   df_tk_symnomatchp : $da42          55874
          df_tk_text : $de51          56913
         df_tk_tload : $de56          56918
      df_tk_tokenjmp : $dc17          56343
     df_tk_tokentype : $dcdd          56541
df_tk_tok_expression : $d92a          55594
    df_tk_try_assign : $d9ad          55725
   df_tk_try_command : $d9a6          55718
         df_tk_tsave : $de56          56918
         df_tk_until : $de56          56918
           df_tk_val : $de24          56868
           df_tk_var : $d7d7          55255
      df_tk_variable : $dd40          56640
        df_tk_var_ck : $d7ed          55277
      df_tk_var_cont : $d7dd          55261
    df_tk_var_noarry : $d7b1          55217
         df_tk_vpeek : $de24          56868
          df_tk_wait : $de56          56918
          df_tk_wend : $de51          56913
         df_tk_while : $de56          56918
       df_tk_ws_done : $d6fc          55036
      df_tk_ws_loop1 : $d6ed          55021
        df_tk_2parms : $de5c          56924
        df_tk_3parms : $de66          56934
        df_tk_4parms : $de6e          56942
          df_tmpptra : $00a1            161
          df_tmpptrb : $00a3            163
          df_tmpptrc : $00a5            165
          df_tmpptrd : $00a7            167
          df_tmpptre : $00a9            169
              df_tok : $0480           1152
          df_tokbuff : $0480           1152
        df_tokensyms : $da7d          55933
           df_tokoff : $007d            125
       df_trap_error : $f836          63542
  df_trap_go_monitor : $f850          63568
     df_trap_monitor : $f8d4          63700
      df_trap_normal : $f853          63571
           df_varcnt : $0071            113
      df_var_analyse : $d5bc          54716
df_var_analyse_chk_arry : $d603          54787
df_var_analyse_chk_dollar : $d5f4          54772
df_var_analyse_chk_post : $d5f4          54772
  df_var_analyse_err : $d5ea          54762
df_var_analyse_fatal_err : $d5f2          54770
   df_var_analyse_ok : $d649          54857
   df_var_check_type : $d527          54567
         df_var_find : $d4eb          54507
   df_var_findcreate : $d61d          54813
df_var_findcreate_copy : $d66d          54893
df_var_findcreate_create : $d636          54838
df_var_findcreate_err : $d647          54855
df_var_findcreate_errp : $d646          54854
df_var_findcreate_found : $d62f          54831
  df_var_find_no_vnt : $d553          54611
    df_var_find_true : $d559          54617
df_var_initialise_var : $d656          54870
 df_var_insert_space : $d561          54625
    df_var_match_vnt : $d4fb          54523
 df_var_match_vnt_do : $d507          54535
df_var_match_vnt_sym : $d50b          54539
AS65 Assembler for R6502 [1.42].                                     Page   19
-------------------------------- bank\bank0.s --------------------------------

    df_var_move_byte : $d584          54660
 df_var_move_byte_do : $d590          54672
df_var_move_byte_fin : $d5a1          54689
     df_var_not_arry : $d614          54804
     df_var_not_proc : $d5ce          54734
df_var_type_countlen : $d5d1          54737
df_var_type_countlen_alphanum : $d5e1          54753
df_var_type_countlen_done : $d5e6          54758
df_var_vnt_entry_end : $d53e          54590
df_var_vnt_sym_nomatch : $d531          54577
     df_var_zero_vnt : $d662          54882
           df_vntend : $006b            107
          df_vntstrt : $0069            105
           df_vvtend : $006f            111
          df_vvtstrt : $006d            109
               errno : $005d             93
 fd_cload_getname_pc : $c54b          50507
 fd_csave_getname_pc : $c5a0          50592
     fd_getname_addr : $0400           1024
               grc_d : $0043             67   *
               grc_r : $003f             63   *
               grc_x : $0040             64   *
              grc_x0 : $003d             61   *
               grc_y : $0042             66   *
              grc_y0 : $003e             62   *
              grl_dx : $0041             65   *
              grl_dy : $0042             66   *
               grl_p : $004b             75   *
            grl_sinx : $004a             74   *
            grl_siny : $004d             77   *
            grl_xyyx : $0043             67   *
              grl_x0 : $003d             61   *
              grl_x1 : $003f             63   *
              grl_y0 : $003e             62   *
              grl_y1 : $0040             64   *
             grl_2dx : $0044             68   *
            grl_2dxy : $0048             72   *
             grl_2dy : $0046             70   *
             gr_char : $0003              3
  gr_check_font_copy : $cc33          52275
gr_check_font_copy_done : $cc4a          52298
           gr_circle : $d032          53298
      gr_circle_done : $d06f          53359
    gr_circle_d_lte0 : $d062          53346
      gr_circle_plot : $d03f          53311
    gr_circle_points : $d070          53360
              gr_cls : $cd20          52512
          gr_cls_col : $cd40          52544
          gr_cls_row : $cd2c          52524
    gr_cls_skip_marg : $cd3c          52540
        gr_copy_byte : $cc0a          52234
         gr_copy_mem : $cc00          52224
         gr_cur_down : $ce6b          52843
         gr_cur_left : $ce4d          52813
          gr_cur_ptr : $000d             13
        gr_cur_right : $ce3b          52795
  gr_cur_skip_at_bot : $ce77          52855
 gr_cur_skip_at_left : $ce5c          52828
   gr_cur_skip_at_tl : $ce60          52832
           gr_cur_up : $ce61          52833
            gr_cur_x : $000b             11
            gr_cur_y : $000c             12
AS65 Assembler for R6502 [1.42].                                     Page   20
-------------------------------- bank\bank0.s --------------------------------

              gr_del : $ce78          52856
         gr_geom_tmp : $0016             22
        gr_geom_tmp2 : $0007              7
              gr_get : $cd89          52617
       gr_getXY_base : $cd66          52582
          gr_get_key : $ce80          52864
        gr_get_key_2 : $ce84          52868
            gr_hchar : $cf3b          53051
   gr_hchar_copyline : $cf95          53141
gr_hchar_copyline_nx : $cfd2          53202
 gr_hchar_copyline_0 : $cfbd          53181
 gr_hchar_copyline_2 : $cfad          53165
    gr_hchar_getfont : $cf70          53104
       gr_hchar_mask : $cf68          53096
    gr_hchar_rot1bit : $cf7a          53114
gr_hchar_rot1bit_bcc : $cf85          53125
 gr_hchar_rot1bit_nx : $cf8a          53130
            gr_hcode : $cf1f          53023
       gr_hcode_loop : $cf25          53029
          gr_hires_x : $0011             17
          gr_hires_y : $0012             18
         gr_hi_start : $0001              1
             gr_init : $cc1a          52250
        gr_init_font : $cbea          52202
        gr_init_geom : $cc4b          52299
   gr_init_geom_done : $cc4a          52298
       gr_init_hires : $cca1          52385
gr_init_hires_tables : $ccda          52442
  gr_init_screen_txt : $cc88          52360
     gr_init_tab_col : $cd08          52488
gr_init_tab_col_skip : $cd1a          52506
     gr_init_tab_row : $cce4          52452
              gr_ink : $0013             19
    gr_key_check_key : $ce90          52880
      gr_key_got_key : $cea7          52903
       gr_key_no_key : $ceb2          52914
    gr_key_skip_copy : $ce98          52888
      gr_key_tidy_up : $cea9          52905
             gr_line : $d0e8          53480
        gr_line_done : $d1c2          53698
       gr_line_neg_p : $d1b2          53682
       gr_line_pixel : $d17b          53627
 gr_line_skip_dx_neg : $d106          53510
 gr_line_skip_dy_neg : $d113          53523
   gr_line_skip_left : $d143          53571
gr_line_skip_xy_swap : $d133          53555
   gr_line_skip_y_up : $d14b          53579
     gr_line_yx_skip : $d187          53639
           gr_margin : $0015             21
             gr_mode : $0000              0
           gr_new_ln : $ce23          52771
       gr_nl_skip_nl : $ce38          52792
       gr_no_special : $cec7          52935
      gr_offset_40hi : $d1df          53727
      gr_offset_40lo : $d1c3          53699
            gr_paper : $0014             20
            gr_pitch : $0010             16
            gr_pixel : $cffd          53245
          gr_pixmode : $000f             15
             gr_plot : $cd76          52598
            gr_point : $d005          53253
       gr_point_done : $d031          53297
AS65 Assembler for R6502 [1.42].                                     Page   21
-------------------------------- bank\bank0.s --------------------------------

        gr_point_eor : $d02d          53293
      gr_point_setup : $cfe5          53221
      gr_point_write : $d02f          53295
        gr_printable : $ceeb          52971
        gr_print_msg : $cf0a          53002
   gr_print_msg_done : $cf1a          53018
   gr_print_msg_loop : $cf10          53008
  gr_process_special : $ced0          52944
              gr_put : $cd7e          52606
         gr_put_byte : $ceb6          52918
     gr_put_byte_low : $cec8          52936
           gr_screen : $0018             24
         gr_scrngeom : $0011             17
    gr_scrngeom_base : $cc5a          52314
   gr_scrngeom_hires : $cc6f          52335
    gr_scrngeom_text : $cc60          52320
      gr_scroll_char : $cde1          52705
    gr_scroll_cpy_ln : $cdde          52702
  gr_scroll_erase_ln : $ce19          52761
      gr_scroll_marg : $ce15          52757
   gr_scroll_routine : $ce2c          52780
        gr_scroll_up : $cdc2          52674
          gr_set_cur : $cd8f          52623
     gr_set_cur_init : $cd90          52624
     gr_set_cur_skip : $cda2          52642
    gr_set_hires_cur : $cff8          53240
       gr_special_ch : $cef1          52977
    gr_special_fn_hi : $cf02          52994
    gr_special_fn_lo : $cefa          52986
     gr_special_loop : $ced4          52948
         gr_spr_char : $d26e          53870
         gr_spr_draw : $d24d          53837
    gr_spr_draw_loop : $d24f          53839
    gr_spr_draw_next : $d25b          53851
        gr_spr_erase : $d209          53769
     gr_spr_erase_do : $d211          53777
   gr_spr_erase_loop : $d20b          53771
   gr_spr_erase_next : $d217          53783
          gr_spr_hit : $d274          53876
         gr_spr_init : $d1fb          53755
    gr_spr_init_loop : $d1fd          53757
   gr_spr_multi_loop : $d28f          53903
    gr_spr_multi_pos : $d28b          53899
          gr_spr_new : $d21b          53787
     gr_spr_new_loop : $d21d          53789
     gr_spr_new_next : $d249          53833
          gr_spr_pos : $d27e          53886
          gr_spr_put : $d25f          53855
           gr_text_h : $000a             10
       gr_text_start : $0005              5
           gr_text_w : $0009              9
              HICHAR : $9800          38912   *
              HISCRN : $a000          40960   *
              HITEXT : $bf68          49000   *
          hex_to_bcd : $c31f          49951
 hex_to_bcd_skip_neg : $c332          49970
           hires_col : $9d90          40336   *
          hires_mask : $9e80          40576   *
        hires_row_hi : $9cc8          40136   *
       hires_row_low : $9c00          39936   *
                 IER : $000e             14   *
                 IFR : $000d             13   *
AS65 Assembler for R6502 [1.42].                                     Page   22
-------------------------------- bank\bank0.s --------------------------------

             IFR_CA1 : $0002              2   *
             IFR_CA2 : $0001              1   *
             IFR_CB1 : $0010             16   *
                IO_0 : $0300            768   *
       inc_kb_timers : $c11f          49439
            infinity : $c034          49204
                init : $c497          50327
            init_irq : $c086          49286
       init_keyboard : $c726          50982
            init_ram : $c4c3          50371
       init_ram_fill : $c4cf          50383
       init_ram_skip : $c4d3          50387
          init_ram_1 : $c4cb          50379
            init_snd : $d3d3          54227
       init_snd_regs : $d3d5          54229
       init_tape_tab : $c50e          50446
           init_via0 : $c4e4          50404
      init_via0_done : $c4f6          50422
      init_via0_loop : $c4e6          50406
       init_via0_tab : $c4f7          50423
      init_via0_tape : $c4e1          50401
              init_2 : $c49c          50332
             int_add : $d407          54279
             int_div : $d488          54408
       int_div_cycle : $d4ba          54458
      int_div_noflip : $d4ea          54506
        int_div_skip : $d4d4          54484
   int_div_skip_negA : $d49f          54431
   int_div_skip_negB : $d4b2          54450
       int_fast_mult : $d434          54324
 int_fast_mult_cycle : $d444          54340
  int_fast_mult_next : $d455          54357
            int_mult : $d45d          54365
      int_mult_cycle : $d46d          54381
       int_mult_next : $d480          54400
             int_sub : $d415          54293
             int_swp : $d423          54307
         int_vdp_fin : $c114          49428
     int_vdp_handler : $c0f9          49401
    io_active_device : $c3e9          50153
          io_address : $0300            768
            io_block : $0601           1537
           io_buf_sz : $c475          50293
            io_close : $c41b          50203
          io_close_f : $0008              8
        io_copy_data : $c3f6          50166
          io_default : $0600           1536
           io_delete : $c41e          50206
            io_del_f : $000a             10
          io_devices : $c477          50295
          io_device0 : $c477          50295
          io_device1 : $c487          50311
          io_do_echo : $c43e          50238
             io_ext1 : $000c             12
             io_ext2 : $000e             14
         io_get_byte : $0000              0
           io_get_ch : $c40f          50191
    io_get_line_byte : $c42b          50219
    io_get_line_done : $c458          50264
             io_init : $c3de          50142
          io_null_op : $c473          50291
        io_open_ext1 : $c421          50209
AS65 Assembler for R6502 [1.42].                                     Page   23
-------------------------------- bank\bank0.s --------------------------------

        io_open_ext2 : $c424          50212
           io_open_r : $0004              4
        io_open_read : $c415          50197
           io_open_w : $0006              6
       io_open_write : $c418          50200
       io_print_done : $c471          50289
       io_print_line : $c460          50272
  io_print_line_byte : $c467          50279
         io_put_byte : $0002              2
           io_put_ch : $c412          50194
        io_read_line : $c427          50215
      io_set_default : $c3e6          50150
        io_skip_echo : $c441          50241
     io_skip_special : $c44c          50252
           io_struct : $0010             16
                 irq : $c0aa          49322
             irq_brk : $c0cc          49356
             irq_fin : $c0c6          49350
           KB_CAPSLK : $0001              1   *
         KB_DEBOUNCE : $0002              2   *
          KB_REP_DEL : $0014             20   *
          KB_REP_TIM : $0003              3   *
            KB_SENSE : $0008              8   *
          kb_any_key : $c758          51032
     kb_any_key_none : $c770          51056
  kb_any_key_pressed : $c772          51058
      kb_any_key_row : $c761          51041
              kb_brk : $c83d          51261
 kb_check_matrix_col : $c77d          51069
 kb_check_matrix_row : $c787          51079
      kb_check_skip4 : $c79d          51101
             kb_code : $002b             43
         kb_col_mask : $c8dd          51421
              kb_deb : $002d             45
          kb_deb_tim : $002e             46
        kb_do_repeat : $c82d          51245
          kb_get_key : $c83f          51263
          kb_get_try : $c843          51267
         kb_hw_delay : $c78c          51084
        kb_in_repeat : $c839          51257
             kb_last : $002a             42
      kb_process_new : $c7d4          51156
              kb_raw : $0029             41
         kb_rdel_tim : $0031             49
         kb_read_got : $c772          51058
     kb_read_noshift : $c7fd          51197
     kb_read_nothing : $c7a8          51112
         kb_read_raw : $c774          51060
   kb_read_raw_force : $c779          51065
     kb_read_raw_got : $c7ac          51116
              kb_rep : $002f             47
          kb_rep_tim : $0030             48
      kb_scan_decode : $c7ca          51146
     kb_scan_got_key : $c854          51284
         kb_scan_key : $c7b9          51129
        kb_scan_wait : $c7c8          51144
        kb_skip_ctrl : $c817          51223
             kb_stat : $002c             44
            kb_stick : $c737          50999
       kb_stick_mask : $c8e5          51429
        kb_stick_pos : $c743          51011
       kb_store_last : $c835          51253
AS65 Assembler for R6502 [1.42].                                     Page   24
-------------------------------- bank\bank0.s --------------------------------

      kb_table_shift : $c89d          51357
        kb_table_std : $c85d          51293
         kernel_init : $c4a5          50341
         kernel_test : $c4ae          50350
                main : $c01f          49183
           mem_start : $0713           1811
        mod_sz_asm_e : $ff9f          65439
        mod_sz_asm_s : $f928          63784
       mod_sz_bios_e : $d407          54279
       mod_sz_bios_s : $c000          49152
        mod_sz_cia_e : $c51d          50461
        mod_sz_cia_s : $c4e1          50401
      mod_sz_dflat_e : $f782          63362
      mod_sz_dflat_s : $d4eb          54507
      mod_sz_graph_e : $d29f          53919
      mod_sz_graph_s : $c8ea          51434
         mod_sz_io_e : $c497          50327
         mod_sz_io_s : $c3de          50142
     mod_sz_kernel_e : $c4e1          50401
     mod_sz_kernel_s : $c000          49152
   mod_sz_language_e : $ff9f          65439
   mod_sz_language_s : $d407          54279
       mod_sz_proc_e : $f69b          63131
       mod_sz_proc_s : $f52e          62766
   mod_sz_progedit_e : $e007          57351
   mod_sz_progedit_s : $de79          56953
      mod_sz_rtasm_e : $fd34          64820
      mod_sz_rtasm_s : $fa1b          64027
     mod_sz_rtsubs_e : $f52e          62766
     mod_sz_rtsubs_s : $e61f          58911
    mod_sz_runtime_e : $f69b          63131
    mod_sz_runtime_s : $e007          57351
      mod_sz_sound_e : $d407          54279
      mod_sz_sound_s : $d3bc          54204
     mod_sz_sprite_e : $d29f          53919
     mod_sz_sprite_s : $d1fb          53755
      mod_sz_tkasm_e : $fa1b          64027
      mod_sz_tkasm_s : $f928          63784
   mod_sz_tokenise_e : $de79          56953
   mod_sz_tokenise_s : $d686          54918
    mod_sz_toksubs_e : $de79          56953
    mod_sz_toksubs_s : $dd40          56640
        mod_sz_var_e : $d686          54918
        mod_sz_var_s : $d4eb          54507
          msg_errmsg : $d3b9          54201
     msg_hello_world : $c03a          49210
           msg_ready : $d3b7          54199
             NUM_ANY : $0000              0   *
             NUM_BIN : $0003              3   *
             NUM_DEC : $0001              1   *
             NUM_HEX : $0002              2   *
                 nmi : $c4e0          50400
        null_handler : $c0a9          49321
            null_irq : $c0a8          49320
               num_a : $003d             61
               num_b : $0041             65
             num_buf : $004d             77
             num_tmp : $0049             73
               num_x : $0045             69
             out_bcd : $c38c          50060
       out_bcd_digit : $c394          50068
         out_bcd_fin : $c3b5          50101
AS65 Assembler for R6502 [1.42].                                     Page   25
-------------------------------- bank\bank0.s --------------------------------

        out_bcd_next : $c3a6          50086
       out_bcd_print : $c3a2          50082
                 PCR : $000c             12   *
                 PRA : $0001              1   *
                PRAH : $000f             15   *
                 PRB : $0000              0   *
        print_a_to_d : $c3bb          50107
print_a_to_d_skip_neg : $c3d4          50132
           SND_ADBUS : $030f            783   *
        SND_DESELECT : $00dd            221   *
            SND_MODE : $030c            780   *
       SND_REG_CHAPH : $0001              1   *
       SND_REG_CHAPL : $0000              0   *
      SND_REG_CHAVOL : $0008              8   *
       SND_REG_CHBPH : $0003              3   *
       SND_REG_CHBPL : $0002              2   *
      SND_REG_CHBVOL : $000a             10   *
       SND_REG_CHCPH : $0005              5   *
       SND_REG_CHCPL : $0004              4   *
        SND_REG_CHNP : $0006              6   *
         SND_REG_CTL : $0007              7   *
      SND_REG_ENVCYC : $000d             13   *
       SND_REG_ENVPH : $000c             12   *
       SND_REG_ENVPL : $000b             11   *
         SND_REG_IOA : $000e             14   *
         SND_REG_IOB : $000f             15   *
         SND_SELREAD : $00df            223   *
      SND_SELSETADDR : $00ff            255   *
        SND_SELWRITE : $00fd            253   *
                  SR : $000a             10   *
               SWBRK : <macro>
             scratch : $0613           1555
          skip_a_f_1 : $c15d          49501
          skip_a_f_2 : $c16c          49516
         skip_kb_deb : $c125          49445
         skip_kb_rep : $c12b          49451
          skip_x_f_1 : $c179          49529
          skip_x_f_2 : $c18e          49550
        snd_get_note : $d3bc          54204
    snd_get_note_oct : $d3c7          54215
        snd_init_tab : $d3df          54239
       snd_music_tab : $d3ef          54255
       snd_note_done : $d3d0          54224
             snd_set : $c000          49152
        spr_baseadrh : $b4e0          46304   *
        spr_baseadrl : $b4c0          46272   *
            spr_bgnd : $b4a0          46240   *
             spr_chr : $b480          46208   *
            spr_curX : $b400          46080   *
            spr_curY : $b440          46144   *
            spr_newX : $b420          46112   *
            spr_newY : $b460          46176   *
          str_a_to_x : $c151          49489
   str_d_digits_done : $c28f          49807
         str_d_error : $c23b          49723
      str_d_find_end : $c24a          49738
     str_d_found_end : $c257          49751
        str_d_powers : $c2ac          49836
 str_d_process_digit : $c265          49765
      str_d_skip_neg : $c2a6          49830
          str_x_to_a : $c16e          49518
      str_x_to_a_err : $c19a          49562
AS65 Assembler for R6502 [1.42].                                     Page   26
-------------------------------- bank\bank0.s --------------------------------

     str_x_to_a_errl : $c199          49561
           TAPE_RATE : $00d0            208   *
            TEXTCHAR : $b400          46080   *
            TEXTSCRN : $bb80          48000   *
         TIMER1_RATE : $4e20          20000   *
                T1CH : $0005              5   *
                T1CL : $0004              4   *
                T1LH : $0007              7   *
                T1LL : $0006              6   *
                T2CH : $0009              9   *
                T2CL : $0008              8   *
             tmp_ahi : $0033             51
             tmp_alo : $0032             50
           tmp_bank1 : $0000              0
           tmp_bank2 : $0001              1
             tmp_bhi : $0035             53
             tmp_blo : $0034             52
             tmp_chi : $0037             55
             tmp_clo : $0036             54
               tmp_d : $0038             56
            tp_back4 : $c52e          50478
            tp_block : $0055             85
        tp_block_gap : $c658          50776
      tp_block_gap_1 : $c65c          50780
              tp_buf : $0200            512
            tp_close : $c57e          50558
   tp_close_no_flush : $c587          50567
            tp_delay : $0059             89
             tp_flag : $0058             88
        tp_get_block : $c6d8          50904
  tp_get_block_bytes : $c6e9          50921
         tp_get_byte : $c6bb          50875
     tp_get_byte_buf : $c6c8          50888
        tp_get_fname : $c564          50532
  tp_get_fname_start : $c555          50517
       tp_get_header : $c55e          50526
              tp_idx : $0057             87
             tp_init : $c533          50483
         tp_io_error : $c724          50980
       tp_open_bread : $c54b          50507
      tp_open_bwrite : $c596          50582
      tp_open_common : $c53b          50491
         tp_open_msg : $c51d          50461
        tp_open_read : $c54b          50507
       tp_open_write : $c59c          50588
 tp_open_write_start : $c5a0          50592
      tp_print_block : $c638          50744
        tp_put_block : $c614          50708
  tp_put_block_bytes : $c62a          50730
         tp_put_byte : $c5e2          50658
    tp_put_byte_done : $c605          50693
        tp_put_delay : $c60c          50700
         tp_read_bit : $c70b          50955
     tp_read_bit_cb1 : $c70f          50959
        tp_read_byte : $c6f7          50935
   tp_read_byte_bits : $c703          50947
     tp_read_byte_st : $c6f7          50935
         tp_save_msg : $c526          50470
        tp_write_bit : $c686          50822
   tp_write_bit_chk1 : $c697          50839
   tp_write_bit_chk2 : $c6af          50863
     tp_write_bit_t1 : $c6a6          50854
AS65 Assembler for R6502 [1.42].                                     Page   27
-------------------------------- bank\bank0.s --------------------------------

       tp_write_byte : $c663          50787
   tp_write_byte_bit : $c66f          50799
tp_write_byte_nodelay : $c684          50820
      tp_write_fname : $c5d4          50644
     tp_write_header : $c5cb          50635
     tt_csave_end_pc : $c594          50580
   tt_getsync_end_pc : $c57d          50557
  tt_getsync_loop_pc : $c70f          50959
       tt_getsync_pc : $c57d          50557
   tt_putbyte_end_pc : $c685          50821
       tt_putbyte_pc : $c663          50787
  tt_readbyte_end_pc : $c70a          50954
      tt_readbyte_pc : $c6f7          50935
tt_writeleader_end_pc : $c5bc          50620
   tt_writeleader_pc : $c5bc          50620
     twos_complement : $c310          49936
twos_complement_skip_X : $c31e          49950
             UTF_ACK : $0001              1   *
             UTF_BEL : $0007              7   *
             UTF_BRK : $001a             26   *
              UTF_CR : $000d             13   *
             UTF_DEL : $007f            127   *
             UTF_ETX : $0003              3   *
              UTF_FF : $000c             12   *
         UTF_SPECIAL : $0020             32   *
       update_timers : $c115          49429
          utilPrintA : $c13c          49468
       utilPrintCRLF : $c134          49460
        utilPrintSPC : $c12c          49452
           VDP_FLASH : $0010             16   *
           vdp_blank : $0010             16
             vdp_cnt : $0008              8
          vdp_cnt_hi : $0009              9
         vdp_cnt_hi2 : $000a             10
          vdp_curcnt : $000c             12
          vdp_curoff : $000d             13
         vdp_curstat : $000e             14
          vdp_curtim : $000b             11
          vdp_curval : $000f             15
  vdp_fill_vram_loop : $ccc2          52418
 vdp_fill_vram_noinc : $ccca          52426
            vdp_font : $c8ea          51434
          vdp_font_a : $c9f2          51698
             vec_brk : $0004              4
             vec_irq : $0002              2
        vec_usercia0 : $0006              6
             zp_tmp1 : $00ab            171
             zp_tmp2 : $00ac            172
             zp_tmp3 : $00ad            173
             zp_tmp4 : $00ae            174
             ztmp_24 : $003d             61
          _adcZPWord : <macro>
          _addZPWord : <macro>
           _code_end : $ff9f          65439
         _code_start : $c000          49152
          _cpu_stack : $0100            256
          _cpyZPWord : <macro>
              _debug : <macro>
          _decZPWord : <macro>
      _end_zero_page : $00af            175
          _incZPWord : <macro>
       _mod_sz_cmd_e : $d3bc          54204
AS65 Assembler for R6502 [1.42].                                     Page   28
-------------------------------- bank\bank0.s --------------------------------

       _mod_sz_cmd_s : $d29f          53919
       _PushFalseJmp : <macro>
        _PushTrueJmp : <macro>
             _printA : <macro>
             _printC : <macro>
            _printCA : <macro>
          _printCRLF : <macro>
            _println : <macro>
        _println_low : <macro>
          _printmsgA : <macro>
            _pullAXY : <macro>
            _pushAXY : <macro>
            _sendcmd : <macro>
          _subZPWord : <macro>
            __6502__ : $0001              1

1665 labels used

15626 lines read, no errors in pass 1.
AS65 Assembler for R6502 [1.42].                                     Page   29
-------------------------------- bank\bank0.s --------------------------------

c000 =                       	org 0xc000
c000 :                       mod_sz_bios_s
                             	include "kernel/kernel.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  KERNEL.S
                             ;*	Lol, I thought this would become more sophisti
                             ;*	hence the name 'kernel'. But no, it just initi
                             ;*	memory, VIA, sound and screen, before passing 
                             ;*	to main.
                             ;*	References to banks etc. are from ported code 
                             ;*	did do more stuff, namely helping with ROM ban
                             ;*
                             ;************************************************
                             
                             ;* Include all definition and code files in the r
                             	include "inc/includes.i"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  INCLUDES.S
                             ;*  Main include file for key definitions and mac
                             ;*  Many of the settings here are exremely machin
                             ;*  Defines : IO block addresses, VIA port usage,
                             ;*  settings, useful macros, sound chip registers
                             ;*  and ACIA registers.
                             ;*	Of course the Oric doesn't have a VDP or an AC
                             ;*	so this file could be optimised.
                             ;*
                             ;************************************************
                             
                             ;* The IO block is at 0x0300
0300 =                       IO_0		= 0x0300
                             
0010 =                       VDP_FLASH	= 16				;* 32/50 second flash
                             
4e20 =                       TIMER1_RATE	= 1000000 / 50		;* 50 times per secon
00d0 =                       TAPE_RATE	= 0xd0				;* Assumed required FM freque
                             
                             ;* Standard definitions of 6522 registers
                             ;* As found in the datasheets
0000 =                       PRB			= 0x00
0001 =                       PRA			= 0x01
0002 =                       DDRB		= 0x02
0003 =                       DDRA		= 0x03
0004 =                       T1CL		= 0x04
0005 =                       T1CH		= 0x05
0006 =                       T1LL		= 0x06
0007 =                       T1LH		= 0x07
0008 =                       T2CL		= 0x08
0009 =                       T2CH		= 0x09
AS65 Assembler for R6502 [1.42].                                     Page   30
-------------------------------- bank\bank0.s --------------------------------

000a =                       SR			= 0x0a
000b =                       ACR			= 0x0b
000c =                       PCR			= 0x0c
000d =                       IFR			= 0x0d
000e =                       IER			= 0x0e
000f =                       PRAH		= 0x0f
                             
0001 =                       IFR_CA2		= 0x01
0002 =                       IFR_CA1		= 0x02
0010 =                       IFR_CB1		= 0x10
                             
                             ;* AY-3-8912 definitions
                             ;* The sound chip is accessed through VIA Port A
030f =                       SND_ADBUS	= IO_0+PRAH
030c =                       SND_MODE	= IO_0+PCR
                             
                             ; Values for the PCR register - always enable CB1
00df =                       SND_SELREAD			= 0b11011111
00fd =                       SND_SELWRITE		= 0b11111101
00ff =                       SND_SELSETADDR		= 0b11111111
00dd =                       SND_DESELECT		= 0b11011101
                             
0000 =                       SND_REG_CHAPL	= 0x00
0001 =                       SND_REG_CHAPH	= 0x01
0002 =                       SND_REG_CHBPL	= 0x02
0003 =                       SND_REG_CHBPH	= 0x03
0004 =                       SND_REG_CHCPL	= 0x04
0005 =                       SND_REG_CHCPH	= 0x05
0006 =                       SND_REG_CHNP	= 0x06
0007 =                       SND_REG_CTL		= 0x07
0008 =                       SND_REG_CHAVOL	= 0x08
0009 =                       SND_REG_CHBVOL	= 0x09
000a =                       SND_REG_CHBVOL	= 0x0a
000b =                       SND_REG_ENVPL	= 0x0b
000c =                       SND_REG_ENVPH	= 0x0c
000d =                       SND_REG_ENVCYC	= 0x0d
                             
000e =                       SND_REG_IOA	= 0x0e
000f =                       SND_REG_IOB	= 0x0f
                             
                             
                             ;* Port B
0008 =                       KB_SENSE	= 0x08			; Input - Bit 3 port A
0001 =                       KB_CAPSLK	= 0x01			; Id of Caps Lock - maps to Le
                             
0003 =                       KB_REP_TIM	= 3 			; Number of VB periods for the 
0014 =                       KB_REP_DEL	= 20			; Number of VB periods before r
0002 =                       KB_DEBOUNCE	= 2				; Number of VB periods before 
                             
0003 =                       UTF_ETX		= 0x03			; Break character
0007 =                       UTF_BEL		= 0x07
0008 =                       CRSR_LEFT	= 0x08
0009 =                       CRSR_RIGHT	= 0x09
000a =                       CRSR_DOWN	= 0x0a
000b =                       CRSR_UP		= 0x0b
0014 =                       CTRL_CAPS	= 0x14			; CTRL-T to toggle caps
0001 =                       UTF_ACK		= 0x01			; Used for the CTRL-A copy in t
000c =                       UTF_FF		= 0x0c
000d =                       UTF_CR		= 0x0d
001a =                       UTF_BRK		= 0x1a			; Debug - drop in to monitor
007f =                       UTF_DEL		= 0x7f
0020 =                       UTF_SPECIAL = 0x20
AS65 Assembler for R6502 [1.42].                                     Page   31
-------------------------------- bank\bank0.s --------------------------------

                             
0000 =                       CMD_ERR_NOERROR			= 0x00
0001 =                       CMD_ERR_NOTFOUND		= 0x01
0002 =                       CMD_ERR_PARM			= 0x02
0003 =                       CMD_ERR_VAL				= 0x03
                             
                             ;* Number formats for conversion routines
0000 =                       NUM_ANY		= 0x00
0001 =                       NUM_DEC		= 0x01
0002 =                       NUM_HEX		= 0x02
0003 =                       NUM_BIN		= 0x03
                             
                             	
                             
                             ;* USEFUL MACROS HERE
                             
                             ;* Software break to throw errors
                             ;* use like this : SWBRK XX
                             ;* Where XX is the error code
                             SWBRK macro sig
                             	brk
                             	db sig
                             	endm
                             
                             _pushAXY macro
                             	pha
                             	sta tmp_d
                             	txa
                             	pha
                             	tya
                             	pha
                             	lda tmp_d
                             	endm
                             
                             _pullAXY macro
                             	pla
                             	tay
                             	pla
                             	tax
                             	pla
                             	endm
                             
                             _println macro msg
                             	_pushAXY
                             	ldx #lo(msg)
                             	lda #hi(msg)
                             	jsr io_print_line
                             	_pullAXY
                             	endm
                             
                             _println_low macro msg
                             	ldx #lo(msg)
                             	lda #hi(msg)
                             	jsr io_print_line
                             	endm
                             
                             _printmsgA macro msg
                             	_pushAXY
                             	ldx #lo(msg)
                             	lda #hi(msg)
                             	jsr io_print_line
                             	pla
AS65 Assembler for R6502 [1.42].                                     Page   32
-------------------------------- bank\bank0.s --------------------------------

                             	pha
                             	jsr str_a_to_x
                             	jsr _put_byte
                             	txa
                             	jsr _put_byte
                             	lda #UTF_CR
                             	jsr _put_byte
                             	_pullAXY
                             	endm
                             
                             _printA macro
                             	_pushAXY
                             	jsr str_a_to_x
                             	jsr io_put_ch
                             	txa
                             	jsr io_put_ch
                             	_pullAXY
                             	endm
                             
                             _printCRLF macro
                             	pha
                             	lda #UTF_CR
                             	jsr _put_byte
                             	pla
                             	endm
                             
                             _printC macro ch
                             	pha
                             	lda #ch
                             	jsr io_put_ch
                             	pla
                             	endm
                             
                             _printCA macro
                             	pha
                             	jsr _put_byte
                             	pla
                             	endm
                             
                             _sendcmd macro cmd
                             	_pushAXY
                             	ldx #lo(cmd)
                             	lda #hi(cmd)
                             	jsr sd_sendcmd
                             	_pullAXY
                             	endm
                             
                             _incZPWord macro wordp
                             	inc wordp
                             	db	0xd0, 0x02
                             	inc wordp+1
                             	endm
                             
                             _decZPWord macro wordp
                             	pha
                             	sec
                             	lda wordp
                             	sbc #1
                             	sta wordp
                             	lda wordp+1
                             	sbc #0
                             	sta wordp+1
AS65 Assembler for R6502 [1.42].                                     Page   33
-------------------------------- bank\bank0.s --------------------------------

                             	pla
                             	endm
                             
                             _cpyZPWord macro worda,wordb
                             	lda worda
                             	sta wordb
                             	lda worda+1
                             	sta wordb+1
                             	endm
                             	
                             _addZPWord macro worda, wordb
                             	clc
                             	lda worda
                             	adc wordb
                             	sta worda
                             	lda worda+1
                             	adc wordb+1
                             	sta worda+1
                             	endm
                             
                             _subZPWord macro worda, wordb
                             	sec
                             	lda worda
                             	sbc wordb
                             	sta worda
                             	lda worda+1
                             	sbc wordb+1
                             	sta worda+1
                             	endm
                             	
                             _adcZPWord macro worda,const
                             	clc
                             	lda worda
                             	adc #const
                             	sta worda
                             	lda worda+1
                             	adc #0
                             	sta worda+1
                             	endm
                             	
                             _debug macro ch
                             	pha
                             	lda #ch
                             	sta 48000
                             	pla
                             	endm
                             	
                             
                             
                             	include "inc/graph.i"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  GRAPH.I
                             ;*  This is the definition file for graphics, spe
                             ;*  The graphics screen handling module.  It is j
                             ;*  structure definition - but this structure is 
AS65 Assembler for R6502 [1.42].                                     Page   34
-------------------------------- bank\bank0.s --------------------------------

                             ;*  record the important attributes of a text scr
                             ;*	This was needed in the previous code due to 32
                             ;*	byte width screens, but Oric only  has 40, so 
                             ;*	could be optimised a little.
                             ;*
                             ;************************************************
                             
                             ; Important screen addresses for the Oric ULA
bb80 =                       TEXTSCRN	=	0xbb80
b400 =                       TEXTCHAR	=	0xb400
a000 =                       HISCRN		=	0xa000
9800 =                       HICHAR		=	0x9800
bf68 =                       HITEXT		=	0xbf68
                             
0000 =                       	struct gr_screen
0000 =                       	db gr_mode					; Text or Hires mode
0001 =                       	dw gr_hi_start				; Address fo hires screen
0003 =                       	dw gr_char					; Start address of charset
0005 =                       	dw gr_text_start			; Start of text memory
0007 =                       	dw gr_geom_tmp2				; (Not used, maintained for a
0009 =                       	db gr_text_w				; Number of columns
000a =                       	db gr_text_h				; Number of rows
000b =                       	db gr_cur_x					; Current X position of cursor
000c =                       	db gr_cur_y					; Current Y position of cursor
000d =                       	dw gr_cur_ptr				; VDP address of cursor
000f =                       	db gr_pixmode				; Pixel plot mode (0=Erase, 1=P
0010 =                       	db gr_pitch					; Pixel pitch for char plotting
0011 =                       	db gr_hires_x				; X pos of hires cursor
0012 =                       	db gr_hires_y				; Y pos of hires cursor
0013 =                       	db gr_ink					; Ink colour
0014 =                       	db gr_paper					; Paper colour
0015 =                       	db gr_margin				; Left margin
0016 =                       	dw gr_geom_tmp				; One word of temp storage for
                             	end struct
                             	
                             ; Sprite data stored in free 256 in font space
b400 =                       spr_curX	= TEXTCHAR			; Sprite current X pos
b420 =                       spr_newX	= TEXTCHAR+32		; Sprite new X pos
b440 =                       spr_curY	= TEXTCHAR+64		; Sprite current Y pos
b460 =                       spr_newY	= TEXTCHAR+96		; Sprite new Y pos
b480 =                       spr_chr		= TEXTCHAR+128		; Sprite character
b4a0 =                       spr_bgnd	= TEXTCHAR+160		; Background character u
b4c0 =                       spr_baseadrl= TEXTCHAR+192		; Y low address of sp
b4e0 =                       spr_baseadrh= TEXTCHAR+224		; Y high address of s
                             
                             ; Tables stored in alternate character set area
                             ; only used for high-resolution screen handling
9c00 =                       hires_row_low	=	HICHAR+0x400		; Low byte of row p
9cc8 =                       hires_row_hi	=	hires_row_low+200	; High byte of r
9d90 =                       hires_col		=	hires_row_hi+200	; Pixel to byte col
9e80 =                       hires_mask		=	hires_col+240		; Pixel column to pi
                             
                             
                             	include "io/io.i"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
AS65 Assembler for R6502 [1.42].                                     Page   35
-------------------------------- bank\bank0.s --------------------------------

                             ;*  IO.I
                             ;*  Definitions file for the IO module.  The key 
                             ;*  used by the IO system is defined here.
                             ;*	Some over-engineering here for future possibil
                             ;*
                             ;************************************************
                             
                             ;* General IO structure allows the system to swap
                             ;* different IO devices by using indirect calls t
                             ;* the appropriate routines.
0000 =                       	struct io_struct
0000 =                       	ds	io_get_byte,	2			;* Address of get byte
0002 =                       	ds	io_put_byte,	2			;* Address of put byte
0004 =                       	ds	io_open_r,		2			;* Address of open file for r
0006 =                       	ds	io_open_w,		2			;* Address of open file for w
0008 =                       	ds	io_close_f,		2			;* Address of close file
000a =                       	ds	io_del_f,		2			;* Address of delete file
000c =                       	ds	io_ext1,		2			;* Address of extended function
000e =                       	ds	io_ext2,		2			;* Address of extended function
                             	end struct
                             	include "dflat/dflat.i"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  DFLAT.I
                             ;*  This is the main definitions file for dflat. 
                             ;*  definitions are in here to access the data st
                             ;*  used by dflat.
                             ;*
                             ;************************************************
                             
                             ;* Start dflat program memory
0713 =                       DF_PROGSTART=	mem_start
                             ;* This is the top of usable dflat memory plus 1
9800 =                       DF_MEMTOP	=	0x9800
                             
                             ;* Offset in to tokenised line of length and line
0000 =                       DFTK_LINLEN	=	0x00
0001 =                       DFTK_LINNUM	=	0x01
                             
                             ;* Flags for token, escape value for data types a
0080 =                       DFTK_TOKEN	=	0x80
0020 =                       DFTK_ESCVAL	=	0x20
0000 =                       DFTK_EOL	=	0x00
                             
                             ;* Numeric constants are encoded based on size an
                             ;* user representation.
                             ;* For example the decimal value 16 will be encod
                             ;* DFTK_INTDEC followed by the bytes 0 and 16 to 
                             ;* The same value in binary will be encoded as DF
                             ;* followed by the same 0 and 16 bytes.  This is 
                             ;* tokenised value to be displayed in original re
                             ;* So in the two examples, they will be shown as 
                             ;* '0x0010' respectively.
0000 =                       DFTK_CHR	=	0x00
0001 =                       DFTK_RESV1	=	0x01
0002 =                       DFTK_RESV2	=	0x02
AS65 Assembler for R6502 [1.42].                                     Page   36
-------------------------------- bank\bank0.s --------------------------------

0003 =                       DFTK_RESV3	=	0x03
0004 =                       DFTK_RESV4	=	0x04
0005 =                       DFTK_BYTDEC	=	0x05
0006 =                       DFTK_BYTHEX = 	0x06
0007 =                       DFTK_BYTBIN =	0x07
0008 =                       DFTK_RESV8	=	0x08
0009 =                       DFTK_INTDEC	=	0x09
000a =                       DFTK_INTHEX =	0x0a
000b =                       DFTK_INTBIN	=	0x0b
000c =                       DFTK_RESVC	=	0x0c
000d =                       DFTK_RESVD	=	0x0d
000e =                       DFTK_RESVE	=	0x0e
000f =                       DFTK_RESVF	=	0x0f
                             
                             ;* String constant, variable and procedure tokens
0010 =                       DFTK_STRLIT	=	0x10
0011 =                       DFTK_VAR	=	0x11
0012 =                       DFTK_PROC	=	0x12
001f =                       DFTK_STEND	=	0x1f
                             
                             ;* Qualifier for non-local parameters passed to a
0026 =                       DFTK_VARPARM=	'&'
                             
                             ;* Variable Value Table (VVT) definitions
                             ;* The VVT records the values of variables define
                             ;* the Variable Name Table (VNT).  When a variabl
                             ;* used, it is added to the VNT, and the position
                             ;* VNT is used as an index in to the VVT.
                             ;* Every VVT entry is 8 bytes - so the VNT index 
                             ;* shifted left 3 bits to get the VVT offset.
                             ;* The VNT grows from top of memory down, the VVT
                             ;* grows from start of VNT down.
                             
                             ;* Index in to each entry of the VVT
0000 =                       DFVVT_TYPE	=	0x00
0001 =                       DFVVT_LO	=	0x01
0002 =                       DFVVT_HI	=	0x02
0003 =                       DFVVT_DIM1	=	0x03
0004 =                       DFVVT_DIM2	=	0x04
0008 =                       DFVVT_SZ	=	0x08	;VVT is aligned to 8 byte blocks
                             
                             ;* The meaning of the DFVVT_TYPE entry
0001 =                       DFVVT_INT	=	0x01
0002 =                       DFVVT_BYT	=	0x02
0004 =                       DFVVT_STR	=	0x04
0008 =                       DFVVT_FLT	=	0x08
0040 =                       DFVVT_PROC	=	0x40
0080 =                       DFVVT_ARRY	=	0x80
                             
                             ;* Flags indicating the meaning of a token
                             ;* A token has the top bit set (0x80), then the
                             ;* remaining bits indicate what it represents.
0001 =                       DFTK_KW		=	0x01
0002 =                       DFTK_FN		=	0x02
0004 =                       DFTK_STROP	=	0x04
0008 =                       DFTK_OP		=	0x08
0010 =                       DFTK_INT	=	0x10
0020 =                       DFTK_BYT	=	0x20
0040 =                       DFTK_STR	=	0x40
0080 =                       DFTK_FLT	=	0x80
0007 =                       DFTK_OPMSK	=	0x07
00f8 =                       DFTK_RTMSK	= 	0xf8
AS65 Assembler for R6502 [1.42].                                     Page   37
-------------------------------- bank\bank0.s --------------------------------

                             
                             ;* Defines what type of value is on the parameter
                             ;* All numerics are stored as INT, all STR
                             ;* are pointers to the actual string, thus
                             ;* all entries in the parmeter stack are 3 bytes
0001 =                       DFST_INT	=	0x01
0080 =                       DFST_STR	=	0x80
                             
                             ;* Token values of specific commands, used during
                             ;* command processing.
                             ;* ANY CHANGE TO THE ORDER OF KEYWORDS NEEDS TO R
0086 =                       DFRT_DEF	=	0x86
0087 =                       DFRT_ENDDEF	=	0x87
0088 =                       DFRT_RETURN	=	0x88
0089 =                       DFRT_ABORT	=	0x89
008c =                       DFRT_REPEAT	=	0x8c
008e =                       DFRT_FOR	=	0x8e
008f =                       DFRT_NEXT	=	0x8f
0090 =                       DFRT_WHILE	=	0x90
0091 =                       DFRT_WEND	=	0x91
0092 =                       DFRT_IF		=	0x92
0093 =                       DFRT_ELSE	=	0x93
0094 =                       DFRT_ENDIF	=	0x94
0095 =                       DFRT_ELSEIF	=	0x95
0096 =                       DFRT_DATA	=	0x96
0097 =                       DFRT_ASM	=	0x97
                             
                             _PushTrueJmp macro
                             	ldx #0xff
                             	txa
                             	jmp df_st_pushInt
                             	endm
                             
                             _PushFalseJmp macro
                             	ldx #0x00
                             	txa
                             	jmp df_st_pushInt
                             	endm
                             
                             	include "kernel/zeropage.i"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  ZEROPAGE.I
                             ;*  This module name is misleading it is not only
                             ;*  allocations, but also page 2, 3, 4, 5, 6, 7 a
                             ;*  memstart is a handy label that indicates the 
                             ;*  location that we can store dflat programs fro
                             ;*  Zero page is a valuable asset as the 6502 can
                             ;*  this page one cycle quicker than the rest of 
                             ;*  and infact some addressing modes can only use
                             ;*  Due to the value of zero page, a lot of syste
                             ;*  dflat variables are put here.  But we don't h
                             ;*  luxury for single use variables - so you will
                             ;*  see a lot of temporary sounding names which a
                             ;*  have multiple uses across the code base.
                             ;*
AS65 Assembler for R6502 [1.42].                                     Page   38
-------------------------------- bank\bank0.s --------------------------------

                             ;************************************************
                             
                             	; Zero page declarations
                             	bss
0000 =                       	org 0x0000
                             
0000 =                       tmp_bank1	ds	1		; Temp storage ONLY FOR USE BY BA
0001 =                       tmp_bank2	ds	1		; Temp storage ONLY FOR USE BY BA
                             
                             ; Interrupt routine addresses
0002 =                       vec_irq		 ds	2		; Master IRQ handler
0004 =                       vec_brk		 ds	2		; Master BRK handler
0006 =                       vec_usercia0 ds	2		; Where to jump for CIA0 inter
                             
                             ; VDP parameters
0008 =                       vdp_cnt		ds	1		; VDP interrupt counter
0009 =                       vdp_cnt_hi 	ds	1		; VDP counter high
000a =                       vdp_cnt_hi2	ds	1		; VDP counter high 2
000b =                       vdp_curtim	ds	1		; Cursor blink speed
000c =                       vdp_curcnt	ds	1		; Cursor blink countdown
000d =                       vdp_curoff	ds	1		; Cursor off (0 = On)
000e =                       vdp_curstat	ds	1		; Cursor status
000f =                       vdp_curval	ds	1		; Cursor value on screen
0010 =                       vdp_blank	ds	1		; Screen blank value normally 32
                             
                             ; Screen geometry
0011 =                       gr_scrngeom	ds	gr_screen
                             
                             ;Keyboard parameters
0029 =                       kb_raw  	ds	1		; Raw keyboard code
002a =                       kb_last		ds	1		; Code of last key
002b =                       kb_code 	ds	1		; Converted keyboard code
002c =                       kb_stat		ds	1		; Keyboard status for caps and shi
002d =                       kb_deb		ds	1		; Debounce timer
002e =                       kb_deb_tim  ds	1		; Default debounce delay
002f =                       kb_rep		ds	1		; Keyboard repeat speed timer
0030 =                       kb_rep_tim 	ds	1		; Default repeat speed
0031 =                       kb_rdel_tim	ds	1		; Default repeat delay (until s
                             
0032 =                       tmp_alo 	ds	1		; VDP addresses lo
0033 =                       tmp_ahi 	ds	1		; VDP addresses hi
0034 =                       tmp_blo 	ds	1		; Temp address lo
0035 =                       tmp_bhi		ds	1		; Temp address hi
0036 =                       tmp_clo		ds	1		; Temp address lo
0037 =                       tmp_chi		ds	1		; Temp address hi
0038 =                       tmp_d		ds	1		; Temp storage d
                             
                             ; Raw input/output parameters
0039 =                       buf_lo		ds	1		; Line buffer address low
003a =                       buf_hi		ds	1		; Line buffer address high
003b =                       buf_sz		ds	1		; Buffer size
003c =                       buf_ef		ds	1		; End file / line marker
                             
                             
                             ; ** Integer function storage **
003d =                       ztmp_24					; Start of 24 byte scratch area (all 
003d =                       num_a		ds	4		; 4 byte primary accumulator
0041 =                       num_b		ds	4		; 4 byte secondary accumulator
0045 =                       num_x		ds	4		; 4 byte x register
0049 =                       num_tmp		ds	4		; 4 byte temp space
004d =                       num_buf		ds	8		; 8 byte string buffer
                             
AS65 Assembler for R6502 [1.42].                                     Page   39
-------------------------------- bank\bank0.s --------------------------------

                             ; ** Tape function storage **
0055 =                       tp_block	ds	2		; Block number (int)
0057 =                       tp_idx		ds	1		; Current buffer index
0058 =                       tp_flag		ds	1		; zero = closed, 1=read, 2=write
0059 =                       tp_delay	ds	2		; Interblock delay
                             
                             ;
                             ; **** INTERPRETER ZERO PAGE ****
                             ;
005b =                       dflat_zp_s
005b =                       dflat_zp_save_s			; ZP save dflat from here
005b =                       df_checkkey	ds	1		; Key check interval counter
005c =                       df_checkmsk	ds	1		; Mask for check key
005d =                       errno		ds	1		; General error condition status
005e =                       df_immed	ds	1		; Immediate mode (0 = not immediat
005f =                       df_sp		ds	1		; Stack pointer after error to resto
0060 =                       df_pc		ds	2		; PC after error to return to
0062 =                       df_brkpc	ds	2		; PC pushed on the stack for BRK
0064 =                       df_brkval	ds	1		; Byte after BRK instruction
0065 =                       df_prgstrt	ds	2		; Start of program code
0067 =                       df_prgend	ds	2		; End of program code
0069 =                       df_vntstrt	ds	2		; Variable name table start
006b =                       df_vntend	ds	2		; Variable name table end
006d =                       df_vvtstrt	ds	2		; Variable value table start
006f =                       df_vvtend	ds	2		; Variable value table end
0071 =                       df_varcnt	ds	1		; Variable counter
0072 =                       df_starstrt	ds	2		; String and array table start
0074 =                       df_starend	ds	2		; String and array table end
0076 =                       df_rtstop	ds	1		; Runtime stack pointer
0077 =                       df_parmtop	ds	1		; Top of parameter stack (grows 
0078 =                       df_strbuff	ds	1		; String expression buffer
0079 =                       df_stridx	ds	1		; Top of string buffer (grows dow
007a =                       df_sevalptr	ds	2		; Pointer to next free char in 
                             
007c =                       df_linoff	ds	1		; Offset in to line buffer
007d =                       df_tokoff	ds	1		; Offset in to tokenised buffer
007e =                       df_eolidx	ds	1		; End of line index (i.e length)
007f =                       df_nxtstidx	ds	1		; Offset to the next statement 
0080 =                       df_curstidx	ds	1		; Offset to the start of curren
0081 =                       df_symtab	ds	2		; Pointer to next free symtab ent
0083 =                       df_symoff	ds	1		; Offset in to token table
0084 =                       df_symini	ds	2		; Start of symtab
0086 =                       df_currlin	ds	2		; Execution current line pointer
0088 =                       df_exeoff	ds	1		; Execution line buffer offset
0089 =                       df_nextlin	ds	2		; Next line to execute
008b =                       df_procmode	ds	1		; Only used during tokenisation
008c =                       df_procargs	ds	1		; Only used during tokenisation
008d =                       df_procloc	ds	1		; Counts the number of local par
008e =                       df_procptr	ds	2		; Pointer to proc vvt slot
0090 =                       df_lineptr	ds	2		; Pointer to line during searche
0092 =                       df_lineidx	ds	1		; Pointer to line index during s
0093 =                       df_ifnest	ds	1		; Global nested if counter
0094 =                       df_currdat	ds	2		; Data current line pointer
0096 =                       df_datoff	ds	1		; Data line buffer offset
0097 =                       df_rnd		ds	2		; Random number seed
                             
0099 =                       df_asmpc	ds	2		; Assembler program counter
009b =                       df_asmopt	ds	1		; Assembler current option
009c =                       df_asmadmd	ds	1		; Addressing mode
009d =                       df_asmopcde	ds	1		; Current opcode
009e =                       df_asmoprnd	ds	2		; Current operand
00a0 =                       df_asmlen	ds	1		; Instruction length
AS65 Assembler for R6502 [1.42].                                     Page   40
-------------------------------- bank\bank0.s --------------------------------

                             
00a1 =                       dflat_zp_save_e			; Save up to this place
                             
                             ; Temp space for dflat
00a1 =                       df_tmpptra	ds	2		; Temp pointer a
00a3 =                       df_tmpptrb	ds	2		; Temp pointer b
00a5 =                       df_tmpptrc	ds	2		; Temp pointer c
00a7 =                       df_tmpptrd	ds	2		; Temp pointer d
00a9 =                       df_tmpptre	ds	2		; Temp pointer e
                             
00ab =                       dflat_zp_e
                             
00ab =                       zp_tmp1		ds	1		; General zero page temporary
00ac =                       zp_tmp2		ds	1		; General zero page temporary
00ad =                       zp_tmp3		ds	1		; General zero page temporary
00ae =                       zp_tmp4		ds	1		; General zero page temporary
                             
                             ;***** END OF ZERO PAGE *****
00af =                       _end_zero_page
                             
                             ;***** Page 1 is CPU stack ****
0100 =                       	org 0x0100
0100 =                       _cpu_stack
0100 =                       			ds	256		; All of page 1
                             
                             ;***** Page 2 is tape buffer *****
0200 =                       	org 0x0200
0200 =                       tp_buf		ds	256		; Serial input / output line buff
                             
                             ;***** 3 is IO *****
0300 =                       	org 0x0300			; IO mapped to Page 3 on Oric
0300 =                       io_address	ds	256
                             
0400 =                       	org 0x0400			; Page 4 = dflat space
0400 =                       fd_getname_addr			; ** FOR ORICUTRON EMULATOR **
0400 =                       df_linbuff
0400 =                       df_raw		ds	128		; untokenised input line
0480 =                       df_tokbuff
0480 =                       df_tok		ds 	128		; tokenised output line
                             
0500 =                       	org 0x0500			; Page 5 = fixed space for interpre
0500 =                       df_rtstck				; operator stack grow up, runtime gr
0500 =                       df_rtspace	ds	256
                             
                             
                             ;***** NON-ZERO PAGE VARIABLES *****
                             
                             ; Acticve IO device settings
0600 =                       io_default	ds	1		; The default device number
0601 =                       io_block	ds	io_struct
                             
                             
                             ; Dflat top of memory+1 - initialised at boot tim
0611 =                       df_memtop	ds	2
                             
                             ; Scratch area e.g. string and numeric expression
0613 =                       scratch		ds	256
                             
                             ;***** THIS IS THE START OF FREE SPACE for DFLAT 
0713 =                       mem_start
                             
                             
AS65 Assembler for R6502 [1.42].                                     Page   41
-------------------------------- bank\bank0.s --------------------------------

                             	include "dflat/dflat.i"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  DFLAT.I
                             ;*  This is the main definitions file for dflat. 
                             ;*  definitions are in here to access the data st
                             ;*  used by dflat.
                             ;*
                             ;************************************************
                             
                             ;* Start dflat program memory
0713 =                       DF_PROGSTART=	mem_start
                             ;* This is the top of usable dflat memory plus 1
9800 =                       DF_MEMTOP	=	0x9800
                             
                             ;* Offset in to tokenised line of length and line
0000 =                       DFTK_LINLEN	=	0x00
0001 =                       DFTK_LINNUM	=	0x01
                             
                             ;* Flags for token, escape value for data types a
0080 =                       DFTK_TOKEN	=	0x80
0020 =                       DFTK_ESCVAL	=	0x20
0000 =                       DFTK_EOL	=	0x00
                             
                             ;* Numeric constants are encoded based on size an
                             ;* user representation.
                             ;* For example the decimal value 16 will be encod
                             ;* DFTK_INTDEC followed by the bytes 0 and 16 to 
                             ;* The same value in binary will be encoded as DF
                             ;* followed by the same 0 and 16 bytes.  This is 
                             ;* tokenised value to be displayed in original re
                             ;* So in the two examples, they will be shown as 
                             ;* '0x0010' respectively.
0000 =                       DFTK_CHR	=	0x00
0001 =                       DFTK_RESV1	=	0x01
0002 =                       DFTK_RESV2	=	0x02
0003 =                       DFTK_RESV3	=	0x03
0004 =                       DFTK_RESV4	=	0x04
0005 =                       DFTK_BYTDEC	=	0x05
0006 =                       DFTK_BYTHEX = 	0x06
0007 =                       DFTK_BYTBIN =	0x07
0008 =                       DFTK_RESV8	=	0x08
0009 =                       DFTK_INTDEC	=	0x09
000a =                       DFTK_INTHEX =	0x0a
000b =                       DFTK_INTBIN	=	0x0b
000c =                       DFTK_RESVC	=	0x0c
000d =                       DFTK_RESVD	=	0x0d
000e =                       DFTK_RESVE	=	0x0e
000f =                       DFTK_RESVF	=	0x0f
                             
                             ;* String constant, variable and procedure tokens
0010 =                       DFTK_STRLIT	=	0x10
0011 =                       DFTK_VAR	=	0x11
0012 =                       DFTK_PROC	=	0x12
001f =                       DFTK_STEND	=	0x1f
                             
AS65 Assembler for R6502 [1.42].                                     Page   42
-------------------------------- bank\bank0.s --------------------------------

                             ;* Qualifier for non-local parameters passed to a
0026 =                       DFTK_VARPARM=	'&'
                             
                             ;* Variable Value Table (VVT) definitions
                             ;* The VVT records the values of variables define
                             ;* the Variable Name Table (VNT).  When a variabl
                             ;* used, it is added to the VNT, and the position
                             ;* VNT is used as an index in to the VVT.
                             ;* Every VVT entry is 8 bytes - so the VNT index 
                             ;* shifted left 3 bits to get the VVT offset.
                             ;* The VNT grows from top of memory down, the VVT
                             ;* grows from start of VNT down.
                             
                             ;* Index in to each entry of the VVT
0000 =                       DFVVT_TYPE	=	0x00
0001 =                       DFVVT_LO	=	0x01
0002 =                       DFVVT_HI	=	0x02
0003 =                       DFVVT_DIM1	=	0x03
0004 =                       DFVVT_DIM2	=	0x04
0008 =                       DFVVT_SZ	=	0x08	;VVT is aligned to 8 byte blocks
                             
                             ;* The meaning of the DFVVT_TYPE entry
0001 =                       DFVVT_INT	=	0x01
0002 =                       DFVVT_BYT	=	0x02
0004 =                       DFVVT_STR	=	0x04
0008 =                       DFVVT_FLT	=	0x08
0040 =                       DFVVT_PROC	=	0x40
0080 =                       DFVVT_ARRY	=	0x80
                             
                             ;* Flags indicating the meaning of a token
                             ;* A token has the top bit set (0x80), then the
                             ;* remaining bits indicate what it represents.
0001 =                       DFTK_KW		=	0x01
0002 =                       DFTK_FN		=	0x02
0004 =                       DFTK_STROP	=	0x04
0008 =                       DFTK_OP		=	0x08
0010 =                       DFTK_INT	=	0x10
0020 =                       DFTK_BYT	=	0x20
0040 =                       DFTK_STR	=	0x40
0080 =                       DFTK_FLT	=	0x80
0007 =                       DFTK_OPMSK	=	0x07
00f8 =                       DFTK_RTMSK	= 	0xf8
                             
                             ;* Defines what type of value is on the parameter
                             ;* All numerics are stored as INT, all STR
                             ;* are pointers to the actual string, thus
                             ;* all entries in the parmeter stack are 3 bytes
0001 =                       DFST_INT	=	0x01
0080 =                       DFST_STR	=	0x80
                             
                             ;* Token values of specific commands, used during
                             ;* command processing.
                             ;* ANY CHANGE TO THE ORDER OF KEYWORDS NEEDS TO R
0086 =                       DFRT_DEF	=	0x86
0087 =                       DFRT_ENDDEF	=	0x87
0088 =                       DFRT_RETURN	=	0x88
0089 =                       DFRT_ABORT	=	0x89
008c =                       DFRT_REPEAT	=	0x8c
008e =                       DFRT_FOR	=	0x8e
008f =                       DFRT_NEXT	=	0x8f
0090 =                       DFRT_WHILE	=	0x90
0091 =                       DFRT_WEND	=	0x91
AS65 Assembler for R6502 [1.42].                                     Page   43
-------------------------------- bank\bank0.s --------------------------------

0092 =                       DFRT_IF		=	0x92
0093 =                       DFRT_ELSE	=	0x93
0094 =                       DFRT_ENDIF	=	0x94
0095 =                       DFRT_ELSEIF	=	0x95
0096 =                       DFRT_DATA	=	0x96
0097 =                       DFRT_ASM	=	0x97
                             
                             _PushTrueJmp macro
                             	ldx #0xff
                             	txa
                             	jmp df_st_pushInt
                             	endm
                             
                             _PushFalseJmp macro
                             	ldx #0x00
                             	txa
                             	jmp df_st_pushInt
                             	endm
                             
                             	include "dflat/error.i"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  ERROR.I
                             ;*  Error definitions file.
                             ;*  The macro to throw an error is elswhere, but 
                             ;*  It issues a 6502 BRK commmand with the next b
                             ;*  the error code.  The BRK handler then picks u
                             ;*  code and shows the appropriate message plus a
                             ;*  number if a program was running.
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code  
                             
                             ; Error message numbers
0000 =                       DFERR_OK		=	0
0001 =                       DFERR_SYNTAX	=	1
0002 =                       DFERR_TYPEMISM	=	2
0003 =                       DFERR_DIM		=	3
0004 =                       DFERR_UNTIL		=	4
0005 =                       DFERR_NOPROC	=	5
0006 =                       DFERR_PROCPARM	=	6
0007 =                       DFERR_IMMEDIATE	=	7
0008 =                       DFERR_UNCLOSEDIF=	8
0009 =                       DFERR_NOIF		=	9
000a =                       DFERR_NEXTFOR	=	10
000b =                       DFERR_FNAME		=	11
000c =                       DFERR_STRLONG	=	12
000d =                       DFERR_BREAK		=	13
000e =                       DFERR_NODATA	=	14
000f =                       DFERR_WEND		=	15
0010 =                       DFERR_NOLINE	=	16
0011 =                       DFERR_RETURN	=	17
0012 =                       DFERR_ABORT		=	18
0013 =                       DFERR_QUANTITY	=	19
AS65 Assembler for R6502 [1.42].                                     Page   44
-------------------------------- bank\bank0.s --------------------------------

0014 =                       DFERR_NOORG		=	20
                             
                             
                             
                             
                             
                             ;****************************************
                             ;*	Set 6502 default vectors	*
                             ;****************************************
                             	data				; Set vectors
fffa =                       	org 0xfffa			; Vectors are at these addresses
fffa : e0c4                  	fcw nmi				; 0xfffa : NMI Vector
fffc : 97c4                  	fcw init			; 0xfffc : Reset Vector
fffe : 9fc0                  	fcw call_irq_master	; 0xfffe : IRQ Vector
                             
                             	; ROM code
                             	code				;
c000 =                       	org 0xc000			; Start of ROM
                             
c000 :                       _code_start
                             	; Restore current bank always at address c001
c000 :                       mod_sz_kernel_s
                             
                             ;* Include all core code in the right order
                             	include "kernel/snd-low.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  SND-LOW.S
                             ;*	Routines to access the AY-3-8912, which is don
                             ;*	lines of the VIA - CB2 and CA2 for chip select
                             ;*	Port A for data interface. This makes accessin
                             ;*	8912 a bit slow..
                             ;*
                             ;* 	CB2		CA2		Function		CB2=BDIR, CA2=BC1
                             ;*	0		0		Not selected
                             ;*	0		1		Read register in to Port A
                             ;*	1		0		Write register from Port A
                             ;*	1		1		Select register # from Port A
                             ;************************************************
                             
                             ;****************************************
                             ;* snd_set
                             ;* Set AY register X to value A
                             ;* Input : X = Reg no, A = Value
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
c000 :                       snd_set
c000 : 48               [ 3] 	pha
                             
c001 : 8e0f03           [ 4] 	stx SND_ADBUS			; Put reg # on Port A (sound bus
                             
c004 : a9ff             [ 2] 	lda #SND_SELSETADDR		; Get ready to select the r
c006 : 8d0c03           [ 4] 	sta SND_MODE			; Latch the reg # on Port A
                             
c009 : a9dd             [ 2] 	lda #SND_DESELECT		; Deselect AY
AS65 Assembler for R6502 [1.42].                                     Page   45
-------------------------------- bank\bank0.s --------------------------------

c00b : 8d0c03           [ 4] 	sta SND_MODE
                             
c00e : 68               [ 4] 	pla						; Get value
c00f : 48               [ 3] 	pha						; but don't lose it
c010 : 8d0f03           [ 4] 	sta SND_ADBUS			; Put reg value on Port A (sound
c013 : a9fd             [ 2] 	lda #SND_SELWRITE		; Select mode for writing dat
c015 : 8d0c03           [ 4] 	sta SND_MODE			; Latch reg value on Port A
                             	
c018 : a9dd             [ 2] 	lda #SND_DESELECT		; Deselect AY
c01a : 8d0c03           [ 4] 	sta SND_MODE
                             
c01d : 68               [ 4] 	pla
                             	
c01e : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* snd_get
                             ;* Get AY register X value
                             ;* Input : X = Reg no
                             ;* Output : A = Value
                             ;* Regs affected : None
                             ;****************************************
                             ;snd_get
                             ;
                             ;	lda #0xff				; Set Port A to output
                             ;	sta IO_0+DDRA
                             ;
                             ;	stx SND_ADBUS			; Put X on the sound bus (X = r
                             ;
                             ;	lda #SND_SELSETADDR		; Get ready to select the 
                             ;	sta SND_MODE			; Latch the reg # on Port A
                             ;
                             ;	lda #SND_DESELECT		; Deselect AY
                             ;	sta SND_MODE
                             ;
                             ;	lda #0x00				; Set Port A to input
                             ;	sta IO_0+DDRA
                             ;
                             ;	lda #SND_SELREAD		; Select mode for reading dat
                             ;	sta SND_MODE			; Set read mode on AY
                             ;
                             ;	lda SND_ADBUS			; Get value in to Y from Port A
                             ;	pha						; Save it to stack
                             ;	
                             ;	lda #SND_DESELECT		; Deselect AY
                             ;	sta SND_MODE
                             ;
                             ;	lda #0xff				; Set Port A back to output
                             ;	sta IO_0+DDRA
                             ;
                             ;	pla						; Get the value off stack
                             ;	
                             ;	rts
                             
                             
                             	include "kernel/main.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
AS65 Assembler for R6502 [1.42].                                     Page   46
-------------------------------- bank\bank0.s --------------------------------

                             ;*  credit of original my authorship please!
                             ;*
                             ;*  MAIN.S
                             ;*  This is where the main user program is execut
                             ;*  the 'kernel' once the system is initialised a
                             ;*  Today, main does very little - first shows th
                             ;*  boot up message, and then passes control to d
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code
                             
c01f :                       main
                             	_println msg_hello_world
                             
                             
                             
c034 :                       infinity
c034 : 205cdf           [ 6] 	jsr df_pg_dflat
c037 : 4c34c0           [ 3] 	jmp infinity
                             
c03a :                       msg_hello_world
                             	;* build.s is generate by the assemble.bat file
                             	;* all it does is echo an assembler line to
                             	;* including the build date in the message.
                             	include "kernel/build.s"
c03a : 4f726963206466..       db "Oric dflat custom ROM\r" 
c050 : 42792040363530..       db "By @6502Nerd\r" 
c05d : 4275696c64203a..       db "Build : 0.13 [BETA]\r" 
c071 : 436f7079726967..       db "Copyright (c) 2021\r\r",0 
                             
                             
                             	include "kernel/irq.s"
                             	
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  IRQ.S
                             ;*	This is the IRQ handler
                             ;*	There is only one regular interrupt source whi
                             ;*	T1 timeout on a 50Hz cycle, whose main job is 
                             ;*	flash the cursor and decrement some timers.
                             ;*	But there are handlers for BRK, user and VIA s
                             ;*	By default the user and VIA do nothing, but ca
                             ;*	redirected to user routines.
                             ;*
                             ;************************************************
                             
                             ;* Obviously this can only be done with
                             ;* interrupts disabled!
c086 :                       init_irq
                             	; Core IRQ handler
c086 : a9aa             [ 2] 	lda #lo(irq)
c088 : 8502             [ 3] 	sta vec_irq
c08a : a9c0             [ 2] 	lda #hi(irq)
c08c : 8503             [ 3] 	sta vec_irq+1
AS65 Assembler for R6502 [1.42].                                     Page   47
-------------------------------- bank\bank0.s --------------------------------

                             	
                             	; Core BRK handler
c08e : a9cc             [ 2] 	lda #lo(irq_brk)
c090 : 8504             [ 3] 	sta vec_brk
c092 : a9c0             [ 2] 	lda #hi(irq_brk)
c094 : 8505             [ 3] 	sta vec_brk+1
                             
                             	; User handlers VIA0 interrupts
c096 : a9a9             [ 2] 	lda #lo(null_handler)
c098 : 8506             [ 3] 	sta vec_usercia0
c09a : a9c0             [ 2] 	lda #hi(null_handler)
c09c : 8507             [ 3] 	sta vec_usercia0+1
                             
c09e : 60               [ 6] 	rts
                             
                             
                             ;* Calls the master IRQ handler - from the ROM
c09f :                       call_irq_master
c09f : 6c0200           [ 6] 	jmp (vec_irq)
                             	
                             ;* Calls the BRK handler
c0a2 :                       call_irq_brk
c0a2 : 6c0400           [ 6] 	jmp (vec_brk)
                             
                             ;* Call the user CIA0 handler
c0a5 :                       call_irq_usercia0
c0a5 : 6c0600           [ 6] 	jmp (vec_usercia0)
                             
                             ;* null interrupt
c0a8 :                       null_irq
c0a8 : 40               [ 6] 	rti
                             
                             ;* null handler
c0a9 :                       null_handler
c0a9 : 60               [ 6] 	rts
                             	
                             
                             ;* Master IRQ handler
c0aa :                       irq
                             	; Don't use _pushAXY as it uses a temp location!
c0aa : 48               [ 3] 	pha
c0ab : 8a               [ 2] 	txa
c0ac : 48               [ 3] 	pha
c0ad : 98               [ 2] 	tya
c0ae : 48               [ 3] 	pha
                             
c0af : d8               [ 2] 	cld						; Just in case!
c0b0 : 18               [ 2] 	clc						; Standard behaviour
                             
                             	; Check if IRQ or BRK
                             	; load P from stack in to A
c0b1 : ba               [ 2] 	tsx
c0b2 : bd0401           [ 4] 	lda 0x104,x
                             	; BRK bit set?
c0b5 : 2910             [ 2] 	and #0x10
c0b7 : d0e9             [ 3] 	bne call_irq_brk
                             	
                             	;* Primary interrupt is timer 1
c0b9 : ad0d03           [ 4] 	lda IO_0 + IFR
c0bc : 2940             [ 2] 	and #0x40				; Bit 6 = Timer 1 interrupt
c0be : f006             [ 3] 	beq irq_fin				; If nothing then end
                             
AS65 Assembler for R6502 [1.42].                                     Page   48
-------------------------------- bank\bank0.s --------------------------------

                             	; Service the timer 1 interrupt
c0c0 : 8d0d03           [ 4] 	sta IO_0 + IFR			; Clear the interrupt
c0c3 : 20f9c0           [ 6] 	jsr int_vdp_handler
                             
c0c6 :                       irq_fin
                             	_pullAXY
                             
c0cb : 40               [ 6] 	rti
                             	
                             ;* Handle BRK
c0cc :                       irq_brk
                             	; Handle BRK
                             	; Get PCL,H minus 2 gives the BRK instruction ad
c0cc : 38               [ 2] 	sec
c0cd : bd0501           [ 4] 	lda 0x0105,x
c0d0 : e902             [ 2] 	sbc #2
c0d2 : 8562             [ 3] 	sta df_brkpc
c0d4 : bd0601           [ 4] 	lda 0x0106,x
c0d7 : e900             [ 2] 	sbc #0
c0d9 : 8563             [ 3] 	sta df_brkpc+1
                             	; Get the byte pointed to by old PC
                             	; which is 1 on from the BRK
c0db : a001             [ 2] 	ldy #1
c0dd : b162             [ 5] 	lda (df_brkpc),y
c0df : 8564             [ 3] 	sta df_brkval
c0e1 : 855d             [ 3] 	sta errno
                             	; now update the return address
c0e3 : a560             [ 3] 	lda df_pc
c0e5 : 9d0501           [ 5] 	sta 0x105,x
c0e8 : a561             [ 3] 	lda df_pc+1
c0ea : 9d0601           [ 5] 	sta 0x106,x
                             	
                             	_pullAXY
                             
                             	; Save the registers in temp area
c0f2 : 853d             [ 3] 	sta num_a
c0f4 : 863e             [ 3] 	stx num_a+1
c0f6 : 843f             [ 3] 	sty num_a+2
                             	; when RTI occurs:
                             	;  will return to error handler
                             	;  df_brkval will contain signature
c0f8 : 40               [ 6] 	rti
                             	
                             	
                             ;****************************************
                             ;* int_vdp_handler
                             ;* VDP interrupt handler
                             ;****************************************
c0f9 :                       int_vdp_handler
c0f9 : 2015c1           [ 6] 	jsr update_timers	; If it is then update system 
c0fc : a50d             [ 3] 	lda vdp_curoff		; Is cursor enabled?
c0fe : d014             [ 4] 	bne int_vdp_fin		; Skip if disabled
                             
c100 : c60c             [ 5] 	dec vdp_curcnt		; Decrement countdown
c102 : d010             [ 3] 	bne int_vdp_fin		; If not expired, do nothing
c104 : a50b             [ 3] 	lda vdp_curtim		; Reset cursor countdown
c106 : 850c             [ 3] 	sta vdp_curcnt
c108 : a50e             [ 3] 	lda vdp_curstat		; Get the flash status
c10a : 4980             [ 2] 	eor #0x80			; Invert top bit
c10c : 850e             [ 3] 	sta vdp_curstat
c10e : 450f             [ 3] 	eor vdp_curval		; EOR with whats under cursor
                             	; Use cursor address, write to screen
AS65 Assembler for R6502 [1.42].                                     Page   49
-------------------------------- bank\bank0.s --------------------------------

                             	; ptr is base, offset with X coord in Y register
c110 : a41c             [ 3] 	ldy gr_scrngeom+gr_cur_x
c112 : 911e             [ 5] 	sta (gr_scrngeom+gr_cur_ptr),y
                             
c114 :                       int_vdp_fin	
c114 : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* update_timers
                             ;* Update 24 bit timer and debounce counters
                             ;****************************************
c115 :                       update_timers
c115 : e608             [ 5] 	inc vdp_cnt
c117 : d006             [ 3] 	bne inc_kb_timers
c119 : e609             [ 5] 	inc vdp_cnt_hi
c11b : d002             [ 3] 	bne inc_kb_timers
c11d : e60a             [ 5] 	inc vdp_cnt_hi2
c11f :                       inc_kb_timers
c11f : a62d             [ 3] 	ldx kb_deb			; Is debounce 0?
c121 : f002             [ 3] 	beq skip_kb_deb
c123 : c62d             [ 5] 	dec kb_deb
c125 :                       skip_kb_deb
c125 : a62f             [ 3] 	ldx kb_rep			; Is repeat timer 0?
c127 : f002             [ 3] 	beq skip_kb_rep
c129 : c62f             [ 5] 	dec kb_rep
c12b :                       skip_kb_rep
c12b : 60               [ 6] 	rts
                             	
                             
                             	include "utils/utils.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  UTILS.S
                             ;*  This module implements various utility functi
                             ;*  converting from ASCII to binary form for numb
                             ;*  vice-versa to allow humans to actually be abl
                             ;*  and read numbers in their prefered form!
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code
                             
c12c :                       utilPrintSPC
c12c : 48               [ 3] 	pha
c12d : a920             [ 2] 	lda #' '
c12f : 2012c4           [ 6] 	jsr io_put_ch
c132 : 68               [ 4] 	pla
c133 : 60               [ 6] 	rts
                             
c134 :                       utilPrintCRLF
c134 : 48               [ 3] 	pha
c135 : a90d             [ 2] 	lda #UTF_CR
c137 : 2012c4           [ 6] 	jsr io_put_ch
c13a : 68               [ 4] 	pla
AS65 Assembler for R6502 [1.42].                                     Page   50
-------------------------------- bank\bank0.s --------------------------------

c13b : 60               [ 6] 	rts
                             
c13c :                       utilPrintA
c13c : 8538             [ 3] 	sta tmp_d
c13e : 48               [ 3] 	pha
c13f : 8a               [ 2] 	txa
c140 : 48               [ 3] 	pha
c141 : a538             [ 3] 	lda tmp_d
c143 : 2051c1           [ 6] 	jsr str_a_to_x
c146 : 2012c4           [ 6] 	jsr io_put_ch
c149 : 8a               [ 2] 	txa
c14a : 2012c4           [ 6] 	jsr io_put_ch
c14d : 68               [ 4] 	pla
c14e : aa               [ 2] 	tax
c14f : 68               [ 4] 	pla
c150 : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* str_a_to_x
                             ;* Convert accumulator to hex string
                             ;* Input : A = Byte to convert
                             ;* Output : A = High Char, X = Low Char
                             ;* Regs affected : P
                             ;****************************************
c151 :                       str_a_to_x
c151 : 48               [ 3] 	pha					; Save the byte using later on
c152 : 290f             [ 2] 	and #0x0f			; Mask low nibble
c154 : 18               [ 2] 	clc
c155 : 6930             [ 2] 	adc #'0'			; Convert to UTF
c157 : c93a             [ 2] 	cmp #('9'+1)		; If A greater than '9' then
c159 : 9002             [ 3] 	bcc skip_a_f_1		; skip a-f adjustment
c15b : 6926             [ 2] 	adc #0x26			; Add 27 (6+C) to get in to A-F rang
c15d :                       skip_a_f_1
c15d : aa               [ 2] 	tax					; Low char is in X
c15e : 68               [ 4] 	pla					; Get byte back
c15f : 4a               [ 2] 	lsr a				; Make high nibble low
c160 : 4a               [ 2] 	lsr a
c161 : 4a               [ 2] 	lsr a
c162 : 4a               [ 2] 	lsr a
c163 : 18               [ 2] 	clc
c164 : 6930             [ 2] 	adc #'0'			; Convert to UTF
c166 : c93a             [ 2] 	cmp #('9'+1)		; If A greater than '9' then
c168 : 9002             [ 3] 	bcc skip_a_f_2		; skip a-f adjustment
c16a : 6926             [ 2] 	adc #0x26			; Add 27 (6+C) to get in to A-F rang
c16c :                       skip_a_f_2
                             
c16c : 18               [ 2] 	clc					; No error
c16d : 60               [ 6] 	rts					; A high nibble
                             
                             ;****************************************
                             ;* str_x_to_a
                             ;* Convert hex string to accumulator
                             ;* Input : A = High Char, X = Low Char
                             ;* Output : A = Value
                             ;* Regs affected : P
                             ;****************************************
c16e :                       str_x_to_a
c16e : 0920             [ 2] 	ora #0x20			; Make alpha in to lower case
c170 : 38               [ 2] 	sec					; Process high char in A
c171 : e930             [ 2] 	sbc #'0'			; Convert to hex nibble
c173 : c90a             [ 2] 	cmp #10				; If A < 10 then
AS65 Assembler for R6502 [1.42].                                     Page   51
-------------------------------- bank\bank0.s --------------------------------

c175 : 9002             [ 3] 	bcc skip_x_f_1		; skip a-f adjustment
c177 : e927             [ 2] 	sbc #0x27			; Sub 7 to get in to A-F range
c179 :                       skip_x_f_1
c179 : c910             [ 2] 	cmp #0x10			; Nibble should be <= 0x0f
c17b : b01d             [ 3] 	bcs	str_x_to_a_err	; Error if not
                             
c17d : 0a               [ 2] 	asl a				; This is the high nibble
c17e : 0a               [ 2] 	asl a
c17f : 0a               [ 2] 	asl a
c180 : 0a               [ 2] 	asl a
c181 : 48               [ 3] 	pha					; Save the high nibble
c182 : 8a               [ 2] 	txa					; Now process the low char in X
c183 : 0920             [ 2] 	ora #0x20			; Make alpha in to lower case
c185 : 38               [ 2] 	sec
c186 : e930             [ 2] 	sbc #'0'			; Convert to hex nibble
c188 : c90a             [ 2] 	cmp #10				; If A < 10 then
c18a : 9002             [ 3] 	bcc skip_x_f_2		; skip a-f adjustment
c18c : e927             [ 2] 	sbc #0x27			; Sub 7 to get in to A-F range
c18e :                       skip_x_f_2
c18e : c910             [ 2] 	cmp #0x10			; Nibble should be <= 0x0f
c190 : b007             [ 3] 	bcs	str_x_to_a_errl	; Error if not
                             
c192 : 853d             [ 3] 	sta num_a			; Store low nibble in temp
c194 : 68               [ 4] 	pla					; Get high nibble
c195 : 053d             [ 3] 	ora num_a			; OR with low nibble
                             
c197 : 18               [ 2] 	clc					; No error
c198 : 60               [ 6] 	rts					; A contains value
                             
c199 :                       str_x_to_a_errl
c199 : 68               [ 4] 	pla
c19a :                       str_x_to_a_err
                             	SWBRK CMD_ERR_VAL
                             
                             
                             ;****************************************
                             ;* con_n_to_a
                             ;* Convert numeric string to accumulator (unsigne
                             ;* Input : Pointer to string (X=L, A=H), Y = Sour
                             ;* Output : num_a, num_a+1 contains word, X=numbe
                             ;* A = Source type detected
                             ;* Regs affected : CS = Error
                             ;****************************************
c19c :                       con_n_to_a
c19c : 8649             [ 3] 	stx num_tmp
c19e : 854a             [ 3] 	sta num_tmp+1
c1a0 : a900             [ 2] 	lda #0
c1a2 : 853d             [ 3] 	sta num_a
c1a4 : 853e             [ 3] 	sta num_a+1
c1a6 : c000             [ 2] 	cpy #NUM_ANY
c1a8 : f014             [ 3] 	beq con_n_to_a_detect
c1aa : 88               [ 2] 	dey
c1ab : d003             [ 3] 	bne con_n_not_dec
c1ad :                       con_dec_jmp
c1ad : 4c41c2           [ 3] 	jmp con_dec_to_a_int
c1b0 :                       con_n_not_dec
c1b0 : 88               [ 2] 	dey
c1b1 : d003             [ 3] 	bne con_n_not_hex
c1b3 :                       con_hex_jmp
c1b3 : 4cd8c1           [ 3] 	jmp con_hex_to_a_int
c1b6 :                       con_n_not_hex
c1b6 : 88               [ 2] 	dey
AS65 Assembler for R6502 [1.42].                                     Page   52
-------------------------------- bank\bank0.s --------------------------------

c1b7 : d003             [ 3] 	bne con_n_err
c1b9 :                       con_bin_jmp
c1b9 : 4c17c2           [ 3] 	jmp con_bin_to_a_int
c1bc :                       con_n_err
c1bc : 38               [ 2] 	sec
c1bd : 60               [ 6] 	rts
c1be :                       con_n_to_a_detect		; Y is zero on entry
c1be : b149             [ 5] 	lda (num_tmp),y
c1c0 : c930             [ 2] 	cmp #'0'
c1c2 : d0e9             [ 3] 	bne con_dec_jmp
c1c4 : a001             [ 2] 	ldy #1
c1c6 : b149             [ 5] 	lda (num_tmp),y
c1c8 : 0920             [ 2] 	ora #0x20
c1ca : c978             [ 2] 	cmp #'x'
c1cc : f0e5             [ 3] 	beq con_hex_jmp
c1ce : c962             [ 2] 	cmp #'b'
c1d0 : f0e7             [ 3] 	beq con_bin_jmp
c1d2 : d0d9             [ 3] 	bne con_dec_jmp		; Always branches
                             
                             ;****************************************
                             ;* con_hex_to_a
                             ;* Convert hex string to accumulator (unsigned)
                             ;* Input : Pointer to string (X=L, A=H)
                             ;* Output : num_a, num_a+1 contains word, X=numbe
                             ;* Regs affected : CS = Error
                             ;****************************************
c1d4 :                       con_hex_to_a
c1d4 : 8649             [ 3] 	stx num_tmp
c1d6 : 854a             [ 3] 	sta num_tmp+1
c1d8 :                       con_hex_to_a_int
c1d8 : a205             [ 2] 	ldx #5			; > 4 digits will cause error
c1da : a002             [ 2] 	ldy #2			; start at first digit
c1dc :                       con_hex_digit
c1dc : b149             [ 5] 	lda (num_tmp),y
c1de : 0920             [ 2] 	ora #0x20					; Make alpha in to lower case
c1e0 : 38               [ 2] 	sec							; Process high char in A
c1e1 : e930             [ 2] 	sbc #'0'					; Convert to hex nibble
c1e3 : c90a             [ 2] 	cmp #10						; If A < 10 then
c1e5 : 9002             [ 3] 	bcc con_hex_skip_x_f_1		; skip a-f adjustment
c1e7 : e927             [ 2] 	sbc #0x27					; Sub 7 to get in to A-F range
c1e9 :                       con_hex_skip_x_f_1
c1e9 : c910             [ 2] 	cmp #0x10					; Nibble should be <= 0x0f
c1eb : b01c             [ 4] 	bcs	con_hex_done			; Potentially done if not
c1ed : 48               [ 3] 	pha
c1ee : a53d             [ 3] 	lda num_a
                             	; make room for lo nibble
c1f0 : 0a               [ 2] 	asl a
c1f1 : 263e             [ 5] 	rol num_a+1
c1f3 : 0a               [ 2] 	asl a
c1f4 : 263e             [ 5] 	rol num_a+1
c1f6 : 0a               [ 2] 	asl a
c1f7 : 263e             [ 5] 	rol num_a+1
c1f9 : 0a               [ 2] 	asl a
c1fa : 263e             [ 5] 	rol num_a+1
c1fc : 853d             [ 3] 	sta num_a
                             	; save in low nibble
c1fe : 68               [ 4] 	pla
c1ff : 053d             [ 3] 	ora num_a
c201 : 853d             [ 3] 	sta num_a
c203 : c8               [ 2] 	iny
c204 : ca               [ 2] 	dex
c205 : d0d5             [ 4] 	bne con_hex_digit
AS65 Assembler for R6502 [1.42].                                     Page   53
-------------------------------- bank\bank0.s --------------------------------

                             	; if got to a 5th digit then error
c207 :                       con_hex_err
c207 : 38               [ 2] 	sec
c208 : 60               [ 6] 	rts
                             	; found a non-hex digit
c209 :                       con_hex_done
                             	; if no digits processed then error
c209 : c002             [ 2] 	cpy #2
c20b : f0fa             [ 3] 	beq con_hex_err
                             	; move y to x for digits processed
c20d : 98               [ 2] 	tya
c20e : aa               [ 2] 	tax
c20f : a902             [ 2] 	lda #NUM_HEX
c211 : 18               [ 2] 	clc
c212 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* con_bin_to_a
                             ;* Convert bin string to accumulator (unsigned)
                             ;* Input : Pointer to string (X=L, A=H)
                             ;* Output : num_a, num_a+1 contains word, X=numbe
                             ;* Regs affected : CS = Error
                             ;****************************************
c213 :                       con_bin_to_a
c213 : 8649             [ 3] 	stx num_tmp
c215 : 854a             [ 3] 	sta num_tmp+1
c217 :                       con_bin_to_a_int
c217 : a002             [ 2] 	ldy #2
c219 : a211             [ 2] 	ldx #17						; Max 16 binary digits allowed
c21b :                       con_bin_digit
c21b : b149             [ 5] 	lda (num_tmp),y
c21d : c930             [ 2] 	cmp #'0'
c21f : 9010             [ 3] 	bcc con_bin_done
c221 : c932             [ 2] 	cmp #'1'+1
c223 : b00c             [ 3] 	bcs con_bin_done
                             	; sets C if '1' else resets C
c225 : 69cf             [ 2] 	adc #0xff-'0'
                             	; shift in digit
c227 : 263d             [ 5] 	rol num_a
c229 : 263e             [ 5] 	rol num_a+1
c22b : c8               [ 2] 	iny
c22c : ca               [ 2] 	dex
c22d : d0ec             [ 3] 	bne con_bin_digit
                             	; on the 17th digit is too much, error
c22f : f00a             [ 3] 	beq con_bin_err
c231 :                       con_bin_done
                             	; didn't process any digit = error
c231 : c002             [ 2] 	cpy #2
c233 : f006             [ 3] 	beq con_bin_err
                             	; put digits processed in to X
c235 : 98               [ 2] 	tya
c236 : aa               [ 2] 	tax
c237 : a903             [ 2] 	lda #NUM_BIN
c239 : 18               [ 2] 	clc
c23a : 60               [ 6] 	rts
c23b :                       con_bin_err
c23b :                       str_d_error
c23b : 38               [ 2] 	sec
c23c : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* con_d_to_a
AS65 Assembler for R6502 [1.42].                                     Page   54
-------------------------------- bank\bank0.s --------------------------------

                             ;* Convert decimal string to accumulator (SIGNED)
                             ;* Input : Pointer to string (X=L, A=H)
                             ;* Output : num_a, num_a+1 contains word, X=numbe
                             ;* Regs affected : CS = Error
                             ;****************************************
c23d :                       con_dec_to_a
c23d : 8649             [ 3] 	stx num_tmp
c23f : 854a             [ 3] 	sta num_tmp+1
c241 :                       con_dec_to_a_int
c241 : a000             [ 2] 	ldy #0
                             	; Detect if leading minus sign
c243 : b149             [ 5] 	lda (num_tmp),y
c245 : c92d             [ 2] 	cmp #'-'
c247 : d001             [ 3] 	bne str_d_find_end
                             	; skip over minus if found
c249 : c8               [ 2] 	iny
c24a :                       str_d_find_end
c24a : b149             [ 5] 	lda (num_tmp),y
c24c : c930             [ 2] 	cmp #'0'
c24e : 9007             [ 3] 	bcc str_d_found_end
c250 : c93a             [ 2] 	cmp #'9'+1
c252 : b003             [ 3] 	bcs str_d_found_end
c254 : c8               [ 2] 	iny
c255 : d0f3             [ 3] 	bne str_d_find_end	; Possble wraparound but shou
c257 :                       str_d_found_end
c257 : c007             [ 2] 	cpy #7				; Biggest int is 6 chars
c259 : b0e0             [ 3] 	bcs str_d_error		; e.g. -32767
c25b : 844c             [ 3] 	sty num_tmp+3
c25d : a900             [ 2] 	lda #0
c25f : 854b             [ 3] 	sta num_tmp+2
c261 : 853d             [ 3] 	sta num_a
c263 : 853e             [ 3] 	sta num_a+1
c265 :                       str_d_process_digit
c265 : 88               [ 2] 	dey
c266 : 3027             [ 3] 	bmi str_d_digits_done
                             
c268 : b149             [ 5] 	lda (num_tmp),y
                             
c26a : c92d             [ 2] 	cmp #'-'			; Got to minus sign?
c26c : f021             [ 3] 	beq str_d_digits_done ; also done
                             
c26e : 38               [ 2] 	sec
c26f : e930             [ 2] 	sbc #'0'
                             	; Convert digit to number
                             	; and then offset in to
                             	; look up table of powers
c271 : 18               [ 2] 	clc
c272 : 0a               [ 2] 	asl a
c273 : 654b             [ 3] 	adc num_tmp+2
                             	; X contains index to powers
c275 : aa               [ 2] 	tax
c276 : a53d             [ 3] 	lda num_a
c278 : 7dacc2           [ 4] 	adc str_d_powers,x
c27b : 853d             [ 3] 	sta num_a
c27d : a53e             [ 3] 	lda num_a+1
c27f : 7dadc2           [ 4] 	adc str_d_powers+1,x
c282 : 853e             [ 3] 	sta num_a+1
c284 : b0b5             [ 3] 	bcs str_d_error
                             	; Move to next power of 10 index
c286 : a54b             [ 3] 	lda num_tmp+2
c288 : 6914             [ 2] 	adc #20
c28a : 854b             [ 3] 	sta num_tmp+2
AS65 Assembler for R6502 [1.42].                                     Page   55
-------------------------------- bank\bank0.s --------------------------------

c28c : 4c65c2           [ 3] 	jmp str_d_process_digit
c28f :                       str_d_digits_done
                             	; check if minus
c28f : b149             [ 5] 	lda (num_tmp),y
c291 : c92d             [ 2] 	cmp #'-'
c293 : d011             [ 3] 	bne str_d_skip_neg
c295 : a64c             [ 3] 	ldx num_tmp+3		; Must have >= 2 chars
c297 : e002             [ 2] 	cpx #2				; else it's an error
c299 : 90a0             [ 3] 	bcc str_d_error
c29b : a63d             [ 3] 	ldx num_a
c29d : a53e             [ 3] 	lda num_a+1
c29f : 2010c3           [ 6] 	jsr twos_complement
c2a2 : 863d             [ 3] 	stx num_a
c2a4 : 853e             [ 3] 	sta num_a+1
c2a6 :                       str_d_skip_neg
c2a6 : a64c             [ 3] 	ldx num_tmp+3
c2a8 : a901             [ 2] 	lda #NUM_DEC
c2aa : 18               [ 2] 	clc
c2ab : 60               [ 6] 	rts
                             
c2ac :                       str_d_powers
c2ac : 00000100020003..      	dw	0, 1, 2, 3, 4, 5, 6, 7, 8, 9
c2c0 : 00000a0014001e..      	dw	0, 10, 20, 30, 40, 50, 60, 70, 80, 90
c2d4 : 00006400c8002c..      	dw	0, 100, 200, 300, 400, 500, 600, 700, 800, 90
c2e8 : 0000e803d007b8..      	dw	0, 1000, 2000, 3000, 4000, 5000, 6000, 7000, 
c2fc : 00001027204e30..      	dw	0, 10000, 20000, 30000, 40000, 50000, 60000, 
                             	
                             
                             ;****************************************
                             ;* twos_complement
                             ;* Twos complement of X,A (X=low)
                             ;* Input : X = Low byte, A = High Byte to convert
                             ;* Output : X,A in 2's complement
                             ;* Regs affected : P
                             ;****************************************
c310 :                       twos_complement
c310 : 49ff             [ 2] 	eor #0xff
c312 : 48               [ 3] 	pha
c313 : 8a               [ 2] 	txa
c314 : 49ff             [ 2] 	eor #0xff
c316 : aa               [ 2] 	tax
c317 : 68               [ 4] 	pla
c318 : e8               [ 2] 	inx
c319 : d003             [ 3] 	bne twos_complement_skip_X
c31b : 38               [ 2] 	sec			; Add 1 to A
c31c : 6900             [ 2] 	adc #0
c31e :                       twos_complement_skip_X
c31e : 60               [ 6] 	rts
                             	
                             
                             ;****************************************
                             ;* hex_to_bcd
                             ;* Convert accumulator,X to BCD
                             ;* Input : X = Low byte, A = High Byte to convert
                             ;* Output : 3 bytes of num_a is updated
                             ;* Regs affected : P
                             ;****************************************
c31f :                       hex_to_bcd
c31f : 08               [ 3] 	php
c320 : 48               [ 3] 	pha
c321 : 8538             [ 3] 	sta tmp_d
c323 : 8a               [ 2] 	txa
AS65 Assembler for R6502 [1.42].                                     Page   56
-------------------------------- bank\bank0.s --------------------------------

c324 : 48               [ 3] 	pha
c325 : a538             [ 3] 	lda tmp_d
                             
c327 : 8649             [ 3] 	stx num_tmp
c329 : 854a             [ 3] 	sta num_tmp+1
c32b : c980             [ 2] 	cmp #0x80			; Negative?
c32d : 9003             [ 3] 	bcc hex_to_bcd_skip_neg
c32f : 2010c3           [ 6] 	jsr twos_complement
c332 :                       hex_to_bcd_skip_neg
c332 : a200             [ 2] 	ldx #0
c334 : 863d             [ 3] 	stx num_a
c336 : 863e             [ 3] 	stx num_a+1
c338 : 863f             [ 3] 	stx num_a+2
c33a : 8640             [ 3] 	stx num_a+3
c33c : a210             [ 2] 	ldx #16
c33e : f8               [ 2] 	sed
c33f :                       bin_to_bcd_bit
c33f : 0649             [ 5] 	asl num_tmp
c341 : 264a             [ 5] 	rol num_tmp+1
c343 : a53d             [ 3] 	lda num_a
c345 : 653d             [ 3] 	adc num_a
c347 : 853d             [ 3] 	sta num_a
c349 : a53e             [ 3] 	lda num_a+1
c34b : 653e             [ 3] 	adc num_a+1
c34d : 853e             [ 3] 	sta num_a+1
c34f : a53f             [ 3] 	lda num_a+2
c351 : 653f             [ 3] 	adc num_a+2
c353 : 853f             [ 3] 	sta num_a+2
c355 : ca               [ 2] 	dex
c356 : d0e7             [ 3] 	bne bin_to_bcd_bit
                             	
c358 : 68               [ 4] 	pla
c359 : aa               [ 2] 	tax
c35a : 68               [ 4] 	pla
c35b : 28               [ 4] 	plp
c35c : 60               [ 6] 	rts
                             	
                             ;****************************************
                             ;* bcd_to_str
                             ;* Convert num_buf to chars
                             ;* Input : num_a in BCD format
                             ;* Output : num_buf in ASCII 6 digits
                             ;* Output is big endian, input is not
                             ;* Regs affected : P
                             ;****************************************
c35d :                       bcd_to_str
                             	_pushAXY
                             
                             
c366 : a205             [ 2] 	ldx #5						; Index in to string
c368 : a000             [ 2] 	ldy #0						; Current BCD digit
c36a :                       bcd_str
c36a : b93d00           [ 4] 	lda num_a,y
                             	; Convert 1s digit of byte
c36d : 48               [ 3] 	pha
c36e : 290f             [ 2] 	and #0xf
c370 : 18               [ 2] 	clc
c371 : 6930             [ 2] 	adc #0x30
c373 : 954d             [ 4] 	sta num_buf,x
                             	; Convert 10s digit of byte
c375 : 68               [ 4] 	pla
c376 : 4a               [ 2] 	lsr a
AS65 Assembler for R6502 [1.42].                                     Page   57
-------------------------------- bank\bank0.s --------------------------------

c377 : 4a               [ 2] 	lsr a
c378 : 4a               [ 2] 	lsr a
c379 : 4a               [ 2] 	lsr a
c37a : 18               [ 2] 	clc
c37b : 6930             [ 2] 	adc #0x30					; Convert to ASCII
c37d : 954c             [ 4] 	sta num_buf-1,x
c37f : ca               [ 2] 	dex
c380 : ca               [ 2] 	dex
c381 : c8               [ 2] 	iny
c382 : c003             [ 2] 	cpy #3						; 3 BCD digits max
c384 : d0e4             [ 3] 	bne bcd_str
                             
                             	_pullAXY
                             
c38b : 60               [ 6] 	rts
                             	
                             ;****************************************
                             ;* out_bcd
                             ;* Output a bcd string in num_buf
                             ;* Input : num_buf has the ASCII
                             ;* Input : C=1 print leading zeros else not
                             ;* Output : num_buf in ASCII 6 digits
                             ;* Output is big endian, input is not, Y=digits p
                             ;* Regs affected : P
                             ;****************************************
c38c :                       out_bcd
c38c : 48               [ 3] 	pha
c38d : 8a               [ 2] 	txa
c38e : 48               [ 3] 	pha
c38f : 08               [ 3] 	php
c390 : a000             [ 2] 	ldy #0						; How many digits printed
c392 : a200             [ 2] 	ldx #0						; Index in to string
c394 :                       out_bcd_digit
c394 : b54d             [ 4] 	lda num_buf,x
c396 : c000             [ 2] 	cpy #0						; If not in leading zero mode
c398 : d008             [ 3] 	bne out_bcd_print			; No then go print
                             
c39a : c930             [ 2] 	cmp #'0'					; else check if zero
c39c : d004             [ 3] 	bne out_bcd_print			; No then go print
                             
c39e : 28               [ 4] 	plp
c39f : 08               [ 3] 	php
c3a0 : 9004             [ 3] 	bcc out_bcd_next			; If C=0 go to next digit, el
c3a2 :                       out_bcd_print
c3a2 : c8               [ 2] 	iny
c3a3 : 2012c4           [ 6] 	jsr io_put_ch
c3a6 :                       out_bcd_next
c3a6 : e8               [ 2] 	inx
c3a7 : e006             [ 2] 	cpx #6
c3a9 : d0e9             [ 3] 	bne out_bcd_digit
c3ab : c000             [ 2] 	cpy #0						; If nothing printed
c3ad : d006             [ 3] 	bne out_bcd_fin
c3af : a930             [ 2] 	lda #'0'					; Need to put out 1 zero
c3b1 : 2012c4           [ 6] 	jsr io_put_ch
c3b4 : c8               [ 2] 	iny
c3b5 :                       out_bcd_fin
c3b5 : 28               [ 4] 	plp
c3b6 : 68               [ 4] 	pla
c3b7 : aa               [ 2] 	tax
c3b8 : 68               [ 4] 	pla
c3b9 : 18               [ 2] 	clc
c3ba : 60               [ 6] 	rts
AS65 Assembler for R6502 [1.42].                                     Page   58
-------------------------------- bank\bank0.s --------------------------------

                             	
                             	
                             ;****************************************
                             ;* print_a_to_d
                             ;* Convert X,A to decimal string
                             ;* Input : X,A = number Low,High
                             ;* Input : C=1 print leading zeros else not
                             ;* Output : num_buf in ASCII max 6 digits
                             ;*          Y=digits printed including sign
                             ;* Output is big endian, input is not
                             ;* Regs affected : P
                             ;****************************************
c3bb :                       print_a_to_d
c3bb : 08               [ 3] 	php
c3bc : c980             [ 2] 	cmp #0x80					; Check if sign bit is set
c3be : 9014             [ 3] 	bcc print_a_to_d_skip_neg	; Skip if not (postive
c3c0 : 2010c3           [ 6] 	jsr twos_complement			; Flip from 2s complement
c3c3 : 201fc3           [ 6] 	jsr hex_to_bcd				; Convert to BCD
c3c6 : 205dc3           [ 6] 	jsr bcd_to_str				; Convert BCD to string
c3c9 : a92d             [ 2] 	lda #'-'
c3cb : 2012c4           [ 6] 	jsr io_put_ch
c3ce : 28               [ 4] 	plp							; Leading zeros preference
c3cf : 208cc3           [ 6] 	jsr out_bcd
c3d2 : c8               [ 2] 	iny							; Account for sign
c3d3 : 60               [ 6] 	rts
c3d4 :                       print_a_to_d_skip_neg
c3d4 : 201fc3           [ 6] 	jsr hex_to_bcd				; Convert to BCD
c3d7 : 205dc3           [ 6] 	jsr bcd_to_str				; Convert BCD to string
c3da : 28               [ 4] 	plp							; Leading zeros preference
c3db : 4c8cc3           [ 3] 	jmp out_bcd					; Print +ve string
                             	
                             	include "io/io.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  IO.S
                             ;*  General IO module.  Allows different IO devic
                             ;*  utilised transparently by the rest of the cod
                             ;*  Other code should use "io_" commands so that 
                             ;*  do not need to know what specific device is p
                             ;*  input and output capabilities.
                             ;*	On startup, the kernel defaults to keyboard an
                             ;*  examines the BBC DIP switch to decide whether
                             ;*	but when saving and loading points to tape rou
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code
                             
c3de :                       mod_sz_io_s
                             
                             ;****************************************
                             ;* io_init
                             ;* Initialise the default device and make active
                             ;* No keys pressed = serial (default)
                             ;* F0 pressed = KB/VDP
AS65 Assembler for R6502 [1.42].                                     Page   59
-------------------------------- bank\bank0.s --------------------------------

                             ;* F1 pressed = Serial
                             ;* Keyboard and screen or serial port
                             ;* Output : None
                             ;* Regs affected : P, A
                             ;****************************************
c3de :                       io_init
c3de : a901             [ 2] 	lda #1				; Default = KB/VDP
c3e0 : 8d0006           [ 4] 	sta io_default
c3e3 : 4ce9c3           [ 3] 	jmp io_active_device; Activate the device
                             
                             
                             ;****************************************
                             ;* io_set_default, io_active_device
                             ;* Activate device based on default or A
                             ;* Input : A = Device number
                             ;* Output : None
                             ;* Regs affected : P, A
                             ;****************************************
c3e6 :                       io_set_default			; Entry point for default
c3e6 : ad0006           [ 4] 	lda io_default
c3e9 :                       io_active_device		; Entry point for A set
c3e9 : aa               [ 2] 	tax					; X=buf size index
c3ea : 0a               [ 2] 	asl	a				; x16 the Block number
c3eb : 0a               [ 2] 	asl a
c3ec : 0a               [ 2] 	asl a
c3ed : 0a               [ 2] 	asl a
c3ee : a8               [ 2] 	tay					; Y=index in to device table
c3ef : bd75c4           [ 4] 	lda io_buf_sz,x
c3f2 : 853b             [ 3] 	sta buf_sz
c3f4 : a200             [ 2] 	ldx #0
                             	; Copy device settings to io block
c3f6 :                       io_copy_data
c3f6 : b977c4           [ 4] 	lda io_devices,y
c3f9 : 9d0106           [ 5] 	sta io_block,x
c3fc : c8               [ 2] 	iny
c3fd : e8               [ 2] 	inx
c3fe : e010             [ 2] 	cpx #16
c400 : d0f4             [ 4] 	bne io_copy_data
                             	
c402 : a913             [ 2] 	lda #lo(scratch)	; Initialise IO buffer and size
c404 : 8539             [ 3] 	sta buf_lo
c406 : a906             [ 2] 	lda #hi(scratch)
c408 : 853a             [ 3] 	sta buf_hi
c40a : a90d             [ 2] 	lda #UTF_CR			; Line terminator is CR
c40c : 853c             [ 3] 	sta buf_ef
c40e : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* io_get_ch
                             ;* Get a char (wait forever or just check)
                             ;* Input : C = 1 for synchronous, 0 for async
                             ;* Output : A = Byte code, C = 0 means A is inval
                             ;* Regs affected : P, A
                             ;****************************************
c40f :                       io_get_ch
c40f : 6c0106           [ 6] 	jmp (io_block+io_get_byte)
                             	
                             
                             ;****************************************
                             ;* io_put_ch
                             ;* Put a char
                             ;* Input : A = char
AS65 Assembler for R6502 [1.42].                                     Page   60
-------------------------------- bank\bank0.s --------------------------------

                             ;* Regs affected : P, A
                             ;****************************************
c412 :                       io_put_ch
c412 : 6c0306           [ 6] 	jmp (io_block+io_put_byte)
                             	
                             ;****************************************
                             ;* io_open_read
                             ;* Open for reading
                             ;* Input : X,A = pointer to filename (zero termin
                             ;* Output : C=0 success
                             ;* Regs affected : All
                             ;****************************************
c415 :                       io_open_read
c415 : 6c0506           [ 6] 	jmp (io_block+io_open_r)
                             	
                             ;****************************************
                             ;* io_open_write
                             ;* Open for reading
                             ;* Input : X,A = pointer to filename (zero termin
                             ;* Output : C=0 success
                             ;* Regs affected : All
                             ;****************************************
c418 :                       io_open_write
c418 : 6c0706           [ 6] 	jmp (io_block+io_open_w)
                             
                             ;****************************************
                             ;* io_close
                             ;* Close a file
                             ;* Input : 
                             ;* Output : C=0 success
                             ;* Regs affected : All
                             ;****************************************
c41b :                       io_close
c41b : 6c0906           [ 6] 	jmp (io_block+io_close_f)
                             	
                             ;****************************************
                             ;* io_delete
                             ;* Delete a file
                             ;* Input : 
                             ;* Output : C=0 success
                             ;* Regs affected : All
                             ;****************************************
c41e :                       io_delete
c41e : 6c0b06           [ 6] 	jmp (io_block+io_del_f)
                             
                             ;****************************************
                             ;* io_open_ext1
                             ;* Extended function 1
                             ;* Input : 
                             ;* Output : C=0 success
                             ;* Regs affected : All
                             ;****************************************
c421 :                       io_open_ext1
c421 : 6c0d06           [ 6] 	jmp (io_block+io_ext1)
                             	
                             ;****************************************
                             ;* io_open_ext2
                             ;* Extended function 2
                             ;* Input : 
                             ;* Output : C=0 success
                             ;* Regs affected : All
                             ;****************************************
AS65 Assembler for R6502 [1.42].                                     Page   61
-------------------------------- bank\bank0.s --------------------------------

c424 :                       io_open_ext2
c424 : 6c0f06           [ 6] 	jmp (io_block+io_ext2)
                             	
                             ;****************************************
                             ;* io_read_line
                             ;* Read a line, terminated by terminating char or
                             ;* Input : buf_(lo/hi/sz/ef) : Address, Max size,
                             ;* Output : Y = Line length C = Buffer limit reac
                             ;* Regs affected : None
                             ;****************************************
c427 :                       io_read_line
c427 : 48               [ 3] 	pha
                             
c428 : 08               [ 3] 	php					; Save echo state
                             	
c429 : a000             [ 2] 	ldy #0x00			; Starting at first byte
c42b :                       io_get_line_byte
c42b : 38               [ 2] 	sec					; Getting bytes synchronously
c42c : 200fc4           [ 6] 	jsr io_get_ch		; Get a byte
c42f : b027             [ 3] 	bcs io_get_line_done; Got nothing then finish
c431 : 28               [ 4] 	plp					; Get echo state
c432 : 08               [ 3] 	php					; Instantly save it back
c433 : 900c             [ 3] 	bcc io_skip_echo	; Carry not set = don't echo
c435 : c97f             [ 2] 	cmp #UTF_DEL		; Delete?
c437 : d005             [ 3] 	bne io_do_echo
c439 : c000             [ 2] 	cpy #0				; Already at beginning?
c43b : f004             [ 3] 	beq io_skip_echo	; Don't echo delete
c43d : 88               [ 2] 	dey					; Else decrement length
c43e :                       io_do_echo
c43e : 2012c4           [ 6] 	jsr io_put_ch		; Echo it
c441 :                       io_skip_echo
c441 : c920             [ 2] 	cmp #UTF_SPECIAL	; Special character?
c443 : 9007             [ 3] 	bcc io_skip_special	; Skip if so (don't add to b
c445 : c97f             [ 2] 	cmp #UTF_DEL		; Don't proces DEL either
c447 : f003             [ 3] 	beq io_skip_special
c449 : 9139             [ 5] 	sta (buf_lo),y		; Save it
c44b : c8               [ 2] 	iny					; Increase length
c44c :                       io_skip_special
c44c : c53c             [ 3] 	cmp buf_ef			; Is it the terminating char?
c44e : f008             [ 3] 	beq io_get_line_done	; If yes then done
c450 : c43b             [ 3] 	cpy buf_sz			; Reached the buffer max size?
c452 : d0d7             [ 3] 	bne io_get_line_byte	; No, get another byte
c454 : 28               [ 4] 	plp					; Remember to pull echo state off stack
c455 : 38               [ 2] 	sec					; Yes, set carry flag
c456 : 68               [ 4] 	pla
c457 : 60               [ 6] 	rts					; And done
c458 :                       io_get_line_done
c458 : a900             [ 2] 	lda #0
c45a : 9139             [ 5] 	sta (buf_lo),y		; Terminate with 0
c45c : 28               [ 4] 	plp					; Remember to pull echo state off stack
c45d : 18               [ 2] 	clc					; Clear carry flag
c45e : 68               [ 4] 	pla
c45f : 60               [ 6] 	rts					; Fin
                             
                             ;****************************************
                             ;* io_print_line
                             ;* Print a line (when data is not already in seri
                             ;* Input : X = Address Lo, A = Address Hi
                             ;* Output : Y=number chars output
                             ;* Regs affected : All
                             ;****************************************
c460 :                       io_print_line
AS65 Assembler for R6502 [1.42].                                     Page   62
-------------------------------- bank\bank0.s --------------------------------

c460 : 48               [ 3] 	pha
                             
c461 : 8636             [ 3] 	stx tmp_clo					; Store the string pointer
c463 : 8537             [ 3] 	sta tmp_chi					; lo and hi
c465 : a000             [ 2] 	ldy #0						; Start at the beginning!
c467 :                       io_print_line_byte
c467 : b136             [ 5] 	lda (tmp_clo),y				; Copy byte to
c469 : f006             [ 3] 	beq io_print_done			; If zero then done - print
c46b : 2012c4           [ 6] 	jsr io_put_ch				; Transmit
c46e : c8               [ 2] 	iny
c46f : d0f6             [ 3] 	bne io_print_line_byte		; Carry on until zero fo
c471 :                       io_print_done
c471 : 68               [ 4] 	pla
c472 : 60               [ 6] 	rts
                             
                             
                             ;*** Null operation just clc and return ***
c473 :                       io_null_op
c473 : 18               [ 2] 	clc
c474 : 60               [ 6] 	rts
                             	
                             ;* IO buffer sizes
c475 :                       io_buf_sz
c475 : ff                    	db 255					; Device 0 = Tape
c476 : 7f                    	db 127					; Device 1 = keyboard/screen
                             
                             ;* IO devices defined here
c477 :                       io_devices
                             ;* Device zero is the tape system
                             ;* only offers get and put
                             ;* This is a block based device
c477 :                       io_device0					; Tape device, input = Tape, outpu
c477 : bbc6                  	dw	tp_get_byte			; io_get_ch
c479 : e2c5                  	dw	tp_put_byte			; io_put_ch
c47b : 4bc5                  	dw	tp_open_read		; io_open_r
c47d : 9cc5                  	dw	tp_open_write		; io_open_w
c47f : 7ec5                  	dw	tp_close			; io_close_f
c481 : 73c4                  	dw	io_null_op			; io_del_f
c483 : 4bc5                  	dw	tp_open_bread		; io_ext1 - open for binary re
c485 : 96c5                  	dw	tp_open_bwrite		; io_ext2 - open for binary w
                             ;* Device one is keyboard / screen
                             ;* only offers get and put
                             ;* This is a char based device
c487 :                       io_device1					; Default device, input = screen e
c487 : 80ce                  	dw	gr_get_key			; io_get_ch
c489 : b6ce                  	dw	gr_put_byte			; io_put_ch
c48b : 73c4                  	dw	io_null_op			; io_open_r
c48d : 73c4                  	dw	io_null_op			; io_open_w
c48f : 73c4                  	dw	io_null_op			; io_close_f
c491 : 73c4                  	dw	io_null_op			; io_del_f
c493 : 73c4                  	dw	io_null_op			; io_ext1
c495 : 73c4                  	dw	io_null_op			; io_ext2
                             ;* Serial device using printer port ACK (input) a
                             ;* This is a char based device
                             ;io_device2					; Serial device, input = Ser, out
                             ;	dw	ser_get_byte		; io_get_ch
                             ;	dw	ser_put_byte		; io_put_ch
                             ;	dw	ser_open			; io_open_r
                             ;	dw	ser_open			; io_open_w
                             ;	dw	ser_close			; io_close_f
                             ;	dw	io_null_op			; io_del_f
                             ;	dw	io_null_op			; io_ext1
AS65 Assembler for R6502 [1.42].                                     Page   63
-------------------------------- bank\bank0.s --------------------------------

                             ;	dw	io_null_op			; io_ext2
                             
c497 :                       mod_sz_io_e
                             
                             
                             
                             ;* Reset vector points here - 6502 starts here
c497 :                       init
                             ;	jmp init_test
                             	; First clear ram
c497 : 78               [ 2] 	sei					; Need this for MOS 6502
c498 : d8               [ 2] 	cld					; Need this for MOS 6502
c499 : 4cc3c4           [ 3] 	jmp init_ram		; jmp not jsr to ram initialiser
c49c :                       init_2					; init_ram will jump back to here
c49c : a2ff             [ 2] 	ldx #0xff			; Initialise stack pointer
c49e : 9a               [ 2] 	txs
                             
c49f : 20a5c4           [ 6] 	jsr kernel_init
                             
c4a2 : 4c1fc0           [ 3] 	jmp main
                             
c4a5 :                       kernel_init
c4a5 : 2086c0           [ 6] 	jsr init_irq		; Initialise IRQ handling
                             
c4a8 : 20e4c4           [ 6] 	jsr init_via0		; initialise cia 0 - tape inactiv
c4ab : 2033c5           [ 6] 	jsr tp_init			; Initialise tape handling
                             
c4ae :                       kernel_test
c4ae : 20d3d3           [ 6] 	jsr init_snd		; initialise the sound chip
                             
c4b1 : 201acc           [ 6] 	jsr gr_init			; Initialise graphics, default is 
                             
c4b4 : 2026c7           [ 6] 	jsr init_keyboard	; initialise keyboard timer se
c4b7 : 20dec3           [ 6] 	jsr io_init			; Set default input/output device
                             
c4ba : a900             [ 2] 	lda #0
c4bc : 8508             [ 3] 	sta vdp_cnt
                             
c4be : 203df7           [ 6] 	jsr df_init			; Initialise interpreter
                             
c4c1 : 58               [ 2] 	cli					; irq interrupts enable
                             
c4c2 : 60               [ 6] 	rts
                             
                             
                             ;* Initialises RAM, skipping page 3 which is for 
                             ;* Zeroes all addressable RAM in the default bank
c4c3 :                       init_ram
c4c3 : a002             [ 2] 	ldy #0x02			; But Y initially at 2 to not overwr
c4c5 : a200             [ 2] 	ldx #0x00			; Page counter starts at zero
c4c7 : 8600             [ 3] 	stx 0x00			; Start at page 0
c4c9 : 8601             [ 3] 	stx 0x01
c4cb :                       init_ram_1
c4cb : e003             [ 2] 	cpx	#3				; Ignore page 3 (IO page)
c4cd : f004             [ 3] 	beq init_ram_skip
c4cf :                       init_ram_fill
c4cf : a900             [ 2] 	lda #0				; Normal RAM filled with zero
c4d1 : 9100             [ 5] 	sta (0x00),y		; Write byte to RAM (zero or copy 
c4d3 :                       init_ram_skip
c4d3 : c8               [ 2] 	iny
c4d4 : d0f5             [ 3] 	bne init_ram_1		; Do a whole page
c4d6 : e601             [ 5] 	inc 0x01			; Increase page pointer
AS65 Assembler for R6502 [1.42].                                     Page   64
-------------------------------- bank\bank0.s --------------------------------

c4d8 : e8               [ 2] 	inx					; Reduce page count
c4d9 : e0c0             [ 2] 	cpx #0xc0			; Do all pages until page until we g
c4db : d0ee             [ 3] 	bne init_ram_1
                             
c4dd : 4c9cc4           [ 3] 	jmp init_2			; Carry on initialisation
                             
                             ; 6502 Non-maskable interrupt come here
c4e0 :                       nmi
c4e0 : 40               [ 6] 	rti
                             
c4e1 :                       mod_sz_kernel_e
                             
                             
                             
                             ; Bank specific code goes here
                             	include "cia/cia.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  CIA.S
                             ;*  Code to initialise and utilise the 6522, whic
                             ;*	for various functions on the Oric including;
                             ;*		Port A:
                             ;*			[7..0] 	Printer data bits
                             ;*			[7..0] 	Interface to AY-3-8912
                             ;*		Port B:
                             ;*			[2..0] 	Keyboard matrix row selector
                             ;*			[7]	   	Tape output
                             ;*			[6]    	Tape player motor signal
                             ;*			[4]		Printer strobe
                             ;*		CA1:		Printer ACK
                             ;*		CB1: 		Tape input
                             ;*		CA2,CB2: 	Selecting the AY-3-8912
                             ;*
                             ;*  This file is called cia.s because code was or
                             ;*  for a MOS 6526 from a CMB64, but didn't get a
                             ;*	renaming this file ;-)
                             ;*
                             ;************************************************
                             
                             
                             	; ROM code
                             	code
                             
c4e1 :                       mod_sz_cia_s
                             	
                             
                             ;****************************************
                             ;* init_via0
                             ;* Initialise cia 0
                             ;* Input : None
                             ;* Output : None
                             ;* Regs affected : A
                             ;****************************************
c4e1 :                       init_via0_tape					; initialisation bytes for tap
c4e1 : a017             [ 2] 	ldy #init_tape_tab-init_via0_tab
c4e3 : 2c                    	db 0x2c						; Ignore next two bytes
AS65 Assembler for R6502 [1.42].                                     Page   65
-------------------------------- bank\bank0.s --------------------------------

c4e4 :                       init_via0
c4e4 : a000             [ 2] 	ldy #0						; Standard initialisation of VIA
c4e6 :                       init_via0_loop
c4e6 : b9f7c4           [ 4] 	lda init_via0_tab,y
c4e9 : 300b             [ 3] 	bmi init_via0_done
c4eb : aa               [ 2] 	tax
c4ec : c8               [ 2] 	iny
c4ed : b9f7c4           [ 4] 	lda init_via0_tab,y
c4f0 : 9d0003           [ 5] 	sta IO_0,x
c4f3 : c8               [ 2] 	iny
c4f4 : d0f0             [ 3] 	bne init_via0_loop
                             	
c4f6 :                       init_via0_done	
c4f6 : 60               [ 6] 	rts							; return from sub
                             	
c4f7 :                       init_via0_tab
c4f7 : 0e7f                  	db IER, 	0x7f
c4f9 : 03ff                  	db DDRA,	0xff			; Port A output by default
c4fb : 02f7                  	db DDRB,	0xf7			; Tape motor + KB select
c4fd : 00b7                  	db PRB,		0xb7			; Port B default = cassette moto
c4ff : 0cdd                  	db PCR,		0xdd			; Ensure AY is not selected (CB1
c501 : 0420                  	db T1CL,	lo(TIMER1_RATE)	; 50Hz
c503 : 0620                  	db T1LL,	lo(TIMER1_RATE)	; 50Hz
c505 : 054e                  	db T1CH,	hi(TIMER1_RATE)	; 50Hz
c507 : 074e                  	db T1LH,	hi(TIMER1_RATE)	; 50Hz
c509 : 0b40                  	db ACR,		0x40			; Timer 1 continuous
c50b : 0ec0                  	db IER,		0xc0			; Timer 1 interrupt enabled
c50d : ff                    	db -1
c50e :                       init_tape_tab
c50e : 0e7f                  	db IER,		0x7f			; Disable all interrupts
c510 : 08f4                  	db T2CL,	0xf4			; Timer 2 used for measuring CB1
c512 : 0c10                  	db PCR,		0x10			; Interrupt on CB1 positive edge
                             ;	db DDRB,	0xff			; Set port B output
c514 : 0bc0                  	db ACR,		0xc0			; T1 continuous and toggle PB7
c516 : 04a0                  	db T1CL,	lo(TAPE_RATE*2)	; Tape rate /2 = 0
c518 : 0501                  	db T1CH,	hi(TAPE_RATE*2)	; Tape rate /2 = 0
c51a : 0040                  	db PRB,		0x40			; Tape motor ON
c51c : ff                    	db -1
                             ;init_ser_tab
                             ;	db IER,		0x7f			; Disable all interrupts
                             ;	db T2CL,	0xf4			; Timer 2 used for measuring bi
                             ;	db PCR,		0xdd			; Ensure AY is not selected (CB
                             ;	db DDRB,	0xff			; Set port B output
                             ;	db -1
                             	
c51d :                       mod_sz_cia_e
                             
                             	include "tape/tape.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  TAPE.S
                             ;*	These routines allow for tape input/output
                             ;*	The tape format is not compatible with a regul
                             ;*	but is a block format as follows;
                             ;*	Some zero bits (64) start a block.
                             ;*	Then two bytes of data representing the block 
AS65 Assembler for R6502 [1.42].                                     Page   66
-------------------------------- bank\bank0.s --------------------------------

                             ;*	Then 256 bytes of block data.
                             ;*	Each byte above consists of two '1' start bits
                             ;*	one '0' stop bit.
                             ;*	After each block, 1 second of 4800Hz (seen as 
                             ;*	is transmitted to allow the CPU to deal with t
                             ;*	when subsequently loading.
                             ;*	A bit is 4800Hz half cycle then 4800Hz half cy
                             ;*	'1' or 2400Hz half cycle for a '0', except for
                             ;*	block which is one second of 2400Hz.
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code
                             
c51d :                       tp_open_msg
c51d : 4c6f6164696e67..      	db	"Loading:",0
c526 :                       tp_save_msg
c526 : 536176696e673a00      	db	"Saving:",0
c52e :                       tp_back4
c52e : 0808080800            	db	8,8,8,8,0
                             	
                             ;* tp_init
                             ;* Basic initialisation for tape handling
c533 :                       tp_init
c533 : a900             [ 2] 	lda #0
c535 : 8558             [ 3] 	sta tp_flag
c537 : 8557             [ 3] 	sta tp_idx
c539 : 18               [ 2] 	clc
c53a : 60               [ 6] 	rts
                             
                             ;* Common function to open tape
c53b :                       tp_open_common				; Used by open write too
c53b : 78               [ 2] 	sei						; Interrupts disabled from here..
c53c : 20e1c4           [ 6] 	jsr init_via0_tape		; Get ready to output (tape 
                             
                             
c53f : a200             [ 2] 	ldx #0
c541 : 8657             [ 3] 	stx tp_idx				; Initialise block
c543 : 8655             [ 3] 	stx tp_block
c545 : 8656             [ 3] 	stx tp_block+1
c547 : e8               [ 2] 	inx
c548 : 8658             [ 3] 	stx tp_flag				; assume 1 = Read mode
c54a : 60               [ 6] 	rts
                             
                             ;* tp_open_read
                             ;* Open tape settings
                             
c54b :                       fd_cload_getname_pc			; ** FOR ORICUTRON EMULATOR
                             
c54b :                       tp_open_bread
c54b :                       tp_open_read
c54b : a01d             [ 2] 	ldy #lo(tp_open_msg)
c54d : a9c5             [ 2] 	lda #hi(tp_open_msg)
c54f : 200acf           [ 6] 	jsr gr_print_msg
                             	
c552 : 203bc5           [ 6] 	jsr tp_open_common
                             
c555 :                       tp_get_fname_start
c555 : 20f7c6           [ 6] 	jsr tp_read_byte
c558 : c924             [ 2] 	cmp #'$'				; Find the $ symbol
c55a : d0f9             [ 3] 	bne tp_get_fname_start
AS65 Assembler for R6502 [1.42].                                     Page   67
-------------------------------- bank\bank0.s --------------------------------

                             	
c55c : a209             [ 2] 	ldx #9					; 9 byte header - skip
c55e :                       tp_get_header
c55e : 20f7c6           [ 6] 	jsr tp_read_byte
c561 : ca               [ 2] 	dex
c562 : d0fa             [ 3] 	bne tp_get_header
                             	
                             	; X= zero here, now get null terminated filename
c564 :                       tp_get_fname
c564 : 20f7c6           [ 6] 	jsr tp_read_byte
c567 : 9d0004           [ 5] 	sta df_linbuff,x
c56a : e8               [ 2] 	inx
c56b : c900             [ 2] 	cmp #0
c56d : d0f5             [ 3] 	bne tp_get_fname
                             
c56f : a000             [ 2] 	ldy #lo(df_linbuff)
c571 : a904             [ 2] 	lda #hi(df_linbuff)
c573 : 200acf           [ 6] 	jsr gr_print_msg
c576 : a920             [ 2] 	lda #' '
c578 : 20b6ce           [ 6] 	jsr gr_put_byte
                             
c57b : 18               [ 2] 	clc
c57c : 60               [ 6] 	rts
                             
c57d :                       tt_getsync_pc				; ** FOR ORICUTRON EMULATOR **
c57d :                       tt_getsync_end_pc			; ** FOR ORICUTRON EMULATOR *
                             
c57d : ea               [ 2] 	nop
                             	
                             
                             ;* tp_close
                             ;* Close tape settings
c57e :                       tp_close
c57e : a558             [ 3] 	lda tp_flag
c580 : c902             [ 2] 	cmp #2					; Write mode?
c582 : d003             [ 3] 	bne tp_close_no_flush	; If not no need to flush
c584 : 2014c6           [ 6] 	jsr tp_put_block		; Flush the current block
c587 :                       tp_close_no_flush
c587 : a90d             [ 2] 	lda #0x0d				; Line feed
c589 : 20b6ce           [ 6] 	jsr gr_put_byte
                             	
c58c : 20e4c4           [ 6] 	jsr init_via0			; Back to normal
c58f : 58               [ 2] 	cli
c590 : a900             [ 2] 	lda #0					; Zero tape flag
c592 : 8558             [ 3] 	sta tp_flag
                             
c594 :                       tt_csave_end_pc				; ** FOR ORICUTRON EMULATOR **
                             
c594 : 18               [ 2] 	clc
c595 : 60               [ 6] 	rts
                             
                             ;* tp_open_write
                             ;* Open tape settings
c596 :                       tp_open_bwrite
c596 : a001             [ 2] 	ldy #hi(0x101)
c598 : a201             [ 2] 	ldx #lo(0x101)
c59a : d004             [ 3] 	bne tp_open_write_start
c59c :                       tp_open_write
c59c : a018             [ 2] 	ldy #hi(6000+0x101)
c59e : a271             [ 2] 	ldx #lo(6000+0x101)
                             
c5a0 :                       fd_csave_getname_pc			; ** FOR ORICUTRON EMULATOR
AS65 Assembler for R6502 [1.42].                                     Page   68
-------------------------------- bank\bank0.s --------------------------------

                             
c5a0 :                       tp_open_write_start
c5a0 : 845a             [ 3] 	sty tp_delay+1
c5a2 : 8659             [ 3] 	stx tp_delay
c5a4 : a026             [ 2] 	ldy #lo(tp_save_msg)
c5a6 : a9c5             [ 2] 	lda #hi(tp_save_msg)
c5a8 : 200acf           [ 6] 	jsr gr_print_msg
c5ab : a000             [ 2] 	ldy #lo(df_linbuff)
c5ad : a904             [ 2] 	lda #hi(df_linbuff)
c5af : 200acf           [ 6] 	jsr gr_print_msg
c5b2 : a920             [ 2] 	lda #' '
c5b4 : 20b6ce           [ 6] 	jsr gr_put_byte
                             	
c5b7 : 203bc5           [ 6] 	jsr tp_open_common		; Same as reading but
c5ba : e658             [ 5] 	inc tp_flag				; Make flag = 2 for write mode
                             
c5bc :                       tt_writeleader_pc			; ** FOR ORICUTRON EMULATOR *
c5bc :                       tt_writeleader_end_pc		; ** FOR ORICUTRON EMULATO
c5bc : a280             [ 2] 	ldx #128				; 128 low bits
c5be : 200cc6           [ 6] 	jsr tp_put_delay
                             
c5c1 : a924             [ 2] 	lda #'$'				; Start of header symbol
c5c3 : 38               [ 2] 	sec
c5c4 : 2063c6           [ 6] 	jsr tp_write_byte
                             	
c5c7 : a209             [ 2] 	ldx #9					; Header, for future expansion
c5c9 : a9ff             [ 2] 	lda #0xff
c5cb :                       tp_write_header	
c5cb : 38               [ 2] 	sec
c5cc : 2063c6           [ 6] 	jsr tp_write_byte
c5cf : ca               [ 2] 	dex
c5d0 : d0f9             [ 3] 	bne tp_write_header
                             	
c5d2 : a200             [ 2] 	ldx #0
c5d4 :                       tp_write_fname
c5d4 : bd0004           [ 4] 	lda df_linbuff,x		; Put the filename
c5d7 : 38               [ 2] 	sec
c5d8 : 2063c6           [ 6] 	jsr tp_write_byte
c5db : e8               [ 2] 	inx
c5dc : c900             [ 2] 	cmp #0
c5de : d0f4             [ 3] 	bne tp_write_fname
                             	
c5e0 : 18               [ 2] 	clc
c5e1 : 60               [ 6] 	rts
                             
                             
                             ;* tp_put_byte
                             ;* Put to byte to tape - if got a block then save
                             
c5e2 :                       tp_put_byte
c5e2 : 48               [ 3] 	pha
c5e3 : 8538             [ 3] 	sta tmp_d
c5e5 : 8a               [ 2] 	txa
c5e6 : 48               [ 3] 	pha
c5e7 : 98               [ 2] 	tya
c5e8 : 48               [ 3] 	pha
c5e9 : a538             [ 3] 	lda tmp_d
                             	
c5eb : a457             [ 3] 	ldy tp_idx				; Save byte to buffer
c5ed : 990002           [ 5] 	sta tp_buf,y
c5f0 : c8               [ 2] 	iny
c5f1 : 8457             [ 3] 	sty tp_idx
AS65 Assembler for R6502 [1.42].                                     Page   69
-------------------------------- bank\bank0.s --------------------------------

c5f3 : d010             [ 4] 	bne tp_put_byte_done
c5f5 : 2014c6           [ 6] 	jsr tp_put_block		; Flush block to tape
c5f8 : 18               [ 2] 	clc						; Increment block #
c5f9 : a555             [ 3] 	lda tp_block
c5fb : 6901             [ 2] 	adc #1
c5fd : 8555             [ 3] 	sta tp_block
c5ff : a556             [ 3] 	lda tp_block+1
c601 : 6900             [ 2] 	adc #0
c603 : 8556             [ 3] 	sta tp_block+1
c605 :                       tp_put_byte_done
c605 : 68               [ 4] 	pla
c606 : a8               [ 2] 	tay
c607 : 68               [ 4] 	pla
c608 : aa               [ 2] 	tax
c609 : 68               [ 4] 	pla
c60a : 18               [ 2] 	clc
c60b : 60               [ 6] 	rts
                             
                             ; tp_put_delay
                             ;* X = number of zero bits to insert
c60c :                       tp_put_delay
c60c : 18               [ 2] 	clc
c60d : 2086c6           [ 6] 	jsr tp_write_bit
c610 : ca               [ 2] 	dex
c611 : d0f9             [ 3] 	bne tp_put_delay
c613 : 60               [ 6] 	rts
                             
                             ;* tp_put_block
                             ;* flush a block to tape
c614 :                       tp_put_block
c614 : 2038c6           [ 6] 	jsr tp_print_block
                             		
c617 : a280             [ 2] 	ldx #128				; 128 low bits
c619 : 200cc6           [ 6] 	jsr tp_put_delay
                             
c61c : a555             [ 3] 	lda tp_block			; Save block number low then high
c61e : 18               [ 2] 	clc
c61f : 2063c6           [ 6] 	jsr tp_write_byte
c622 : a556             [ 3] 	lda tp_block+1
c624 : 38               [ 2] 	sec
c625 : 2063c6           [ 6] 	jsr tp_write_byte
                             
c628 : a200             [ 2] 	ldx #0
c62a :                       tp_put_block_bytes
c62a : bd0002           [ 4] 	lda tp_buf,x			; Then write out all bytes in blo
c62d : 18               [ 2] 	clc
c62e : 2063c6           [ 6] 	jsr tp_write_byte
c631 : e8               [ 2] 	inx
c632 : d0f6             [ 3] 	bne tp_put_block_bytes	; Always 256 bytes
                             	
c634 : 2058c6           [ 6] 	jsr tp_block_gap		; Wait a while, still outputti
                             
c637 : 60               [ 6] 	rts
                             
                             ; tp_print_block
c638 :                       tp_print_block
c638 : a556             [ 3] 	lda tp_block+1			; Print block number hi byte
c63a : 2051c1           [ 6] 	jsr str_a_to_x
c63d : 20b6ce           [ 6] 	jsr gr_put_byte
c640 : 8a               [ 2] 	txa
c641 : 20b6ce           [ 6] 	jsr gr_put_byte
c644 : a555             [ 3] 	lda tp_block			; Print block number lo byte
AS65 Assembler for R6502 [1.42].                                     Page   70
-------------------------------- bank\bank0.s --------------------------------

c646 : 2051c1           [ 6] 	jsr str_a_to_x
c649 : 20b6ce           [ 6] 	jsr gr_put_byte
c64c : 8a               [ 2] 	txa
c64d : 20b6ce           [ 6] 	jsr gr_put_byte
c650 : a9c5             [ 2] 	lda #hi(tp_back4)		; Go back 4 characters to pri
c652 : a02e             [ 2] 	ldy #lo(tp_back4)
c654 : 200acf           [ 6] 	jsr gr_print_msg
c657 : 60               [ 6] 	rts
                             
                             ; tp_block_gap
                             ; Send 2400 bits of zero ~ 1.5 seconds
                             ; add 0x101 due to how counters decrement
                             ; For binary mode it is just 1 bit gap
c658 :                       tp_block_gap
c658 : a45a             [ 3] 	ldy tp_delay+1
c65a : a659             [ 3] 	ldx tp_delay
c65c :                       tp_block_gap_1
c65c : 200cc6           [ 6] 	jsr tp_put_delay
c65f : 88               [ 2] 	dey
c660 : d0fa             [ 3] 	bne tp_block_gap_1
c662 : 60               [ 6] 	rts	
                             
                             ;* tp_write_byte
                             ;* Write a byte to tape which looks like this
                             ;* 11xxxxxxxx0
c663 :                       tt_putbyte_pc				; ** FOR ORICUTRON EMULATOR **
c663 :                       tp_write_byte
c663 : 48               [ 3] 	pha
c664 : 08               [ 3] 	php
c665 : 38               [ 2] 	sec					; 1 for start bit
c666 : 2086c6           [ 6] 	jsr tp_write_bit
c669 : 38               [ 2] 	sec					; 1 for start bit
c66a : 2086c6           [ 6] 	jsr tp_write_bit
c66d : a008             [ 2] 	ldy #8				; 8 bits of data
c66f :                       tp_write_byte_bit
c66f : 6a               [ 2] 	ror a
c670 : 2086c6           [ 6] 	jsr tp_write_bit
c673 : 88               [ 2] 	dey
c674 : d0f9             [ 3] 	bne tp_write_byte_bit
c676 : 18               [ 2] 	clc					; 0 for stop bit
c677 : 2086c6           [ 6] 	jsr tp_write_bit
c67a : 28               [ 4] 	plp
c67b : 9007             [ 3] 	bcc tp_write_byte_nodelay
c67d : 8a               [ 2] 	txa
c67e : a220             [ 2] 	ldx #32					; Delays needed
c680 : 200cc6           [ 6] 	jsr tp_put_delay
c683 : aa               [ 2] 	tax
c684 :                       tp_write_byte_nodelay
c684 : 68               [ 4] 	pla
c685 :                       tt_putbyte_end_pc			; ** FOR ORICUTRON EMULATOR *
c685 : 60               [ 6] 	rts
                             	
                             
                             ;* tp_write_bit
                             ;* Write a bit in C to tape which looks like this
                             ;* Half cycle of 4800Hz, then
                             ;*		half cycle of 4800Hz for a 1
                             ;*		half cycle of 2400Hz for a 0
c686 :                       tp_write_bit
c686 : 48               [ 3] 	pha
c687 : 8a               [ 2] 	txa
c688 : 48               [ 3] 	pha
AS65 Assembler for R6502 [1.42].                                     Page   71
-------------------------------- bank\bank0.s --------------------------------

c689 : 08               [ 3] 	php						; Save the bit to be stored
                             
c68a : a9d0             [ 2] 	lda #TAPE_RATE			; Half cycle first of 4800Hz
c68c : a200             [ 2] 	ldx #0
c68e : 8d0603           [ 4] 	sta IO_0+T1LL
c691 : 8e0703           [ 4] 	stx IO_0+T1LH			; This starts the timer
c694 : ad0403           [ 4] 	lda IO_0+T1CL			; Clear any interrupt flag
c697 :                       tp_write_bit_chk1
c697 : 2c0d03           [ 4] 	bit IO_0+IFR			; Check IRF for bit 6
c69a : 50fb             [ 3] 	bvc tp_write_bit_chk1	; V=0? Keep checking
c69c : ad0403           [ 4] 	lda IO_0+T1CL			; Clear interrupt flag
                             	
c69f : 28               [ 4] 	plp						; Get the bit to be stored
c6a0 : a9d0             [ 2] 	lda #TAPE_RATE			; Assume putting out a 1 in 2nd
c6a2 : b002             [ 3] 	bcs tp_write_bit_t1		; A zero is half the rate (
c6a4 : 0a               [ 2] 	asl	a					; TAPE_RATE * 2 need to inc X
c6a5 : e8               [ 2] 	inx
c6a6 :                       tp_write_bit_t1
c6a6 : 8d0603           [ 4] 	sta IO_0+T1LL
c6a9 : 8e0703           [ 4] 	stx IO_0+T1LH			; This starts the timer
c6ac : ad0403           [ 4] 	lda IO_0+T1CL			; Clear any interrupt flag
c6af :                       tp_write_bit_chk2
c6af : 2c0d03           [ 4] 	bit IO_0+IFR			; Check IRF for bit 6
c6b2 : 50fb             [ 3] 	bvc tp_write_bit_chk2	; V=0? Keep checking
c6b4 : ad0403           [ 4] 	lda IO_0+T1CL			; Clear interrupt flag
c6b7 : 68               [ 4] 	pla
c6b8 : aa               [ 2] 	tax
c6b9 : 68               [ 4] 	pla
c6ba : 60               [ 6] 	rts
                             
                             
                             
                             ;* tp_get_byte
                             ;* Get a byte from buffer - load blocks as needed
c6bb :                       tp_get_byte
c6bb : 8a               [ 2] 	txa
c6bc : 48               [ 3] 	pha
c6bd : 98               [ 2] 	tya
c6be : 48               [ 3] 	pha
                             	
c6bf : a457             [ 3] 	ldy tp_idx				; Index in to buffer
c6c1 : d005             [ 3] 	bne tp_get_byte_buf		; No need to load from tape
c6c3 : 20d8c6           [ 6] 	jsr tp_get_block		; Else load a block from tape
c6c6 : a000             [ 2] 	ldy #0					; 0 index is now valid
c6c8 :                       tp_get_byte_buf
c6c8 : b90002           [ 4] 	lda tp_buf,y			; Get from memory buffer
c6cb : c8               [ 2] 	iny
c6cc : 8457             [ 3] 	sty tp_idx				; Never zero on leaving
c6ce : 8538             [ 3] 	sta tmp_d
c6d0 : 68               [ 4] 	pla
c6d1 : a8               [ 2] 	tay
c6d2 : 68               [ 4] 	pla
c6d3 : aa               [ 2] 	tax
c6d4 : a538             [ 3] 	lda tmp_d
c6d6 : 18               [ 2] 	clc
c6d7 : 60               [ 6] 	rts						; Except when buffer done
                             
                             ;* tp_get_block
                             ;* Load a block in to memory
c6d8 :                       tp_get_block
                             
c6d8 : 20f7c6           [ 6] 	jsr tp_read_byte		; Get block number
AS65 Assembler for R6502 [1.42].                                     Page   72
-------------------------------- bank\bank0.s --------------------------------

c6db : 8555             [ 3] 	sta tp_block
c6dd : 20f7c6           [ 6] 	jsr tp_read_byte
c6e0 : 8556             [ 3] 	sta tp_block+1
                             	
c6e2 : 2038c6           [ 6] 	jsr tp_print_block
                             	
c6e5 : a000             [ 2] 	ldy #0
c6e7 : 8457             [ 3] 	sty tp_idx
c6e9 :                       tp_get_block_bytes
c6e9 : 20f7c6           [ 6] 	jsr tp_read_byte		; Fill buffer
c6ec : a457             [ 3] 	ldy tp_idx
c6ee : 990002           [ 5] 	sta tp_buf,y
c6f1 : c8               [ 2] 	iny
c6f2 : 8457             [ 3] 	sty tp_idx
c6f4 : d0f3             [ 3] 	bne tp_get_block_bytes	; Always 256 bytes
                             
c6f6 : 60               [ 6] 	rts
                             	
                             
                             ;* tp_read_byte
                             ;* Read a byte from tape, always expects one '1' 
c6f7 :                       tt_readbyte_pc				; ** FOR ORICUTRON EMULATOR **
c6f7 :                       tp_read_byte
c6f7 :                       tp_read_byte_st
c6f7 : 200bc7           [ 6] 	jsr tp_read_bit			; Expecting a 1
c6fa : 90fb             [ 3] 	bcc tp_read_byte_st
c6fc : 200bc7           [ 6] 	jsr tp_read_bit			; Should be another 1
c6ff : 90f6             [ 3] 	bcc tp_read_byte_st
                             	; Ok got 2 start
                             	
c701 : a008             [ 2] 	ldy #8				; Get 8 bits
c703 :                       tp_read_byte_bits
c703 : 200bc7           [ 6] 	jsr tp_read_bit
c706 : 6a               [ 2] 	ror a
c707 : 88               [ 2] 	dey
c708 : d0f9             [ 3] 	bne tp_read_byte_bits
                             	; Byte is in A, stop bit is not waited for..
c70a :                       tt_readbyte_end_pc			; ** FOR ORICUTRON EMULATOR 
c70a : 60               [ 6] 	rts
                             
                             ;* tp_read_bit
                             ;* Get a CB1 transition and measure the time
                             ;* The measurement indicates a 1 or 0 received
c70b :                       tp_read_bit
c70b : 48               [ 3] 	pha
c70c : ad0003           [ 4] 	lda IO_0+PRB			; Clear CB1 interrupt flag by rea
c70f :                       tp_read_bit_cb1
c70f :                       tt_getsync_loop_pc			; ** FOR ORICUTRON EMULATOR 
c70f : ad0d03           [ 4] 	lda IO_0+IFR
c712 : 2910             [ 2] 	and #IFR_CB1
c714 : f0f9             [ 3] 	beq tp_read_bit_cb1		; Keep checking until CB1 a
                             
c716 : ad0903           [ 4] 	lda IO_0+T2CH			; Get the high byte of T2 counte
c719 : 48               [ 3] 	pha
c71a : a9ff             [ 2] 	lda #0xff				; Reset T2 counter high byte
c71c : 8d0903           [ 4] 	sta IO_0+T2CH			; Reset high byte of T2 counter
c71f : 68               [ 4] 	pla						; What was previous counter?
                             ;	beq tp_io_error			; If down to zero, then some 
c720 : c9fe             [ 2] 	cmp #0xfe				; C=1 if T2 >= 0xfe else C=0
c722 : 68               [ 4] 	pla
c723 : 60               [ 6] 	rts						; Carry contains the bit received
c724 :                       tp_io_error
AS65 Assembler for R6502 [1.42].                                     Page   73
-------------------------------- bank\bank0.s --------------------------------

                             	SWBRK DFERR_BREAK		; DEFINE A NEW ERROR!
                             
                             
                             
                             
                             	include "keyboard/keyboard.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  KEYBOARD.S
                             ;*	Keyboard driver code. It is very slow to scan 
                             ;*	routines here do a basic scan for any key befo
                             ;*	the specific key. Still, it has a noticeable i
                             ;*	CPU especially in dflat which checks the key a
                             ;*	keyword is executed.
                             ;*	Rather than working off interrupts these routi
                             ;*	need to be called as needed. The T1 interrupt 
                             ;*	track of keyboard timers for repeat delay and 
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code
                             
                             ;****************************************
                             ;* init_keyboard
                             ;* Initialise the keyboard settings
                             ;****************************************
c726 :                       init_keyboard
c726 : a914             [ 2] 	lda #KB_REP_DEL
c728 : 8531             [ 3] 	sta kb_rdel_tim
c72a : a903             [ 2] 	lda #KB_REP_TIM
c72c : 8530             [ 3] 	sta kb_rep_tim
c72e : a902             [ 2] 	lda #KB_DEBOUNCE
c730 : 852e             [ 3] 	sta kb_deb_tim
c732 : a900             [ 2] 	lda #0
c734 : 852c             [ 3] 	sta kb_stat
                             
c736 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* kb_stick
                             ;* Check for fire | down | up | right | left
                             ;*        bit  4     3      2     1       0
                             ;* Returns bit mask of keys pressed
                             ;****************************************
c737 :                       kb_stick
c737 : a900             [ 2] 	lda #0					; Result will be in A
c739 : 48               [ 3] 	pha	
                             	; Select Row 4 only, all keys on this row
c73a : a904             [ 2] 	lda #4
c73c : 8d0003           [ 4] 	sta IO_0+PRB
c73f : a004             [ 2] 	ldy #4
c741 : a20e             [ 2] 	ldx #SND_REG_IOA		; AY Port A for columns
c743 :                       kb_stick_pos
c743 : b9e5c8           [ 4] 	lda kb_stick_mask,y		; Get the column mask
c746 : 2000c0           [ 6] 	jsr snd_set				; Activate column
AS65 Assembler for R6502 [1.42].                                     Page   74
-------------------------------- bank\bank0.s --------------------------------

c749 : ad0003           [ 4] 	lda IO_0+PRB			; Read Port B
c74c : 2908             [ 2] 	and #KB_SENSE			; Something pressed?
c74e : c908             [ 2] 	cmp #KB_SENSE			; C=1 if set else 0
c750 : 68               [ 4] 	pla
c751 : 2a               [ 2] 	rol a					; Get C in to A
c752 : 48               [ 3] 	pha
c753 : 88               [ 2] 	dey
c754 : 10ed             [ 3] 	bpl kb_stick_pos		; Do all 5 positions
c756 : 68               [ 4] 	pla						; Result in A
c757 : 60               [ 6] 	rts
                             
                             	
                             ;****************************************
                             ;* kb_any_key
                             ;* Quick check for any key except shifts & ctrl
                             ;* Carry = 1 means key pressed
                             ;****************************************
c758 :                       kb_any_key
                             	; Select all columns except 4
c758 : a910             [ 2] 	lda #0b00010000			; Deselect only col 4
c75a : a20e             [ 2] 	ldx #SND_REG_IOA		; On AY port A
c75c : 2000c0           [ 6] 	jsr snd_set
                             
c75f : a007             [ 2] 	ldy #7					; Start from row 7
c761 :                       kb_any_key_row
c761 : 8c0003           [ 4] 	sty IO_0+PRB			; Select row on port B
c764 : ea               [ 2] 	nop
c765 : ea               [ 2] 	nop
                             	
c766 : ad0003           [ 4] 	lda IO_0+PRB			; Read Port B
c769 : 2908             [ 2] 	and #KB_SENSE			; Something pressed?
c76b : d005             [ 3] 	bne kb_any_key_pressed
c76d : 88               [ 2] 	dey						; If not then next row
c76e : 10f1             [ 3] 	bpl kb_any_key_row		; Until all rows done
c770 :                       kb_any_key_none
c770 : 18               [ 2] 	clc						; C=0 means not pressed
c771 : 60               [ 6] 	rts
c772 :                       kb_any_key_pressed
c772 :                       kb_read_got
c772 : 38               [ 2] 	sec						; C=1 means pressed
c773 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* kb_read_raw
                             ;* Read keyboard
                             ;* Y = Keyboard code
                             ;* Carry = 1 means key found, 0 = no keys found
                             ;****************************************
c774 :                       kb_read_raw
c774 : 2058c7           [ 6] 	jsr kb_any_key			; Quick check is anything down?
c777 : 902f             [ 3] 	bcc kb_read_nothing		; Don't bother if not
c779 :                       kb_read_raw_force
c779 : a200             [ 2] 	ldx #0					; Start at column 0	
c77b : 86ab             [ 3] 	stx zp_tmp1
c77d :                       kb_check_matrix_col
                             	; else set the col in the AY port A
c77d : bdddc8           [ 4] 	lda kb_col_mask,x
c780 : a20e             [ 2] 	ldx #SND_REG_IOA		; Select Port A of AY
c782 : 2000c0           [ 6] 	jsr snd_set				; Set Port A to column mask
c785 : a000             [ 2] 	ldy #0
c787 :                       kb_check_matrix_row
c787 : 8c0003           [ 4] 	sty IO_0+PRB			; Select row from Y
AS65 Assembler for R6502 [1.42].                                     Page   75
-------------------------------- bank\bank0.s --------------------------------

                             	
c78a : a202             [ 2] 	ldx #2
c78c :                       kb_hw_delay
c78c : ca               [ 2] 	dex
c78d : d0fd             [ 3] 	bne kb_hw_delay
                             
c78f : ad0003           [ 4] 	lda IO_0+PRB			; Read Port B
c792 : 2908             [ 2] 	and #KB_SENSE			; Bit 3 is the sense
c794 : d016             [ 3] 	bne kb_read_raw_got
                             	; No key for this row/col, next
c796 : c8               [ 2] 	iny
c797 : c008             [ 2] 	cpy #8					; Done 8 rows?
c799 : d0ec             [ 3] 	bne kb_check_matrix_row
                             	; ok check next row
c79b : a6ab             [ 3] 	ldx zp_tmp1
c79d :                       kb_check_skip4
c79d : e8               [ 2] 	inx
c79e : e004             [ 2] 	cpx #4					; Skip 4?
c7a0 : f0fb             [ 3] 	beq kb_check_skip4
c7a2 : 86ab             [ 3] 	stx zp_tmp1
c7a4 : e008             [ 2] 	cpx #8					; Done 8 cols?
c7a6 : d0d5             [ 3] 	bne kb_check_matrix_col
                             	; No key was sensed
c7a8 :                       kb_read_nothing
c7a8 : a000             [ 2] 	ldy #0					; Raw key codes
c7aa : 18               [ 2] 	clc						; No key sensed flag
c7ab : 60               [ 6] 	rts
c7ac :                       kb_read_raw_got
                             	;Y=row, zp_temp1=col
c7ac : a5ab             [ 3] 	lda zp_tmp1				; Get the column num
c7ae : 0a               [ 2] 	asl a					; Shift in to bits 5,4,3
c7af : 0a               [ 2] 	asl a
c7b0 : 0a               [ 2] 	asl a
c7b1 : 85ab             [ 3] 	sta zp_tmp1
c7b3 : 98               [ 2] 	tya						; Now or with row number
c7b4 : 05ab             [ 3] 	ora zp_tmp1
c7b6 : a8               [ 2] 	tay						; Put in to Y
c7b7 : 38               [ 2] 	sec
c7b8 : 60               [ 6] 	rts
                             	
                             ;****************************************
                             ;* kb_scan_key
                             ;* Scans for a key, returns zero for no key found
                             ;* Processes caps and shift lock but these don't 
                             ;* A = Key code
                             ;****************************************
c7b9 :                       kb_scan_key
c7b9 : 2074c7           [ 6] 	jsr kb_read_raw			; Check if a key is sensed
c7bc : b00c             [ 3] 	bcs kb_scan_decode		; go ahead and decode
                             	; If pressed nothing then reset timers
c7be : a9ff             [ 2] 	lda #255
c7c0 : 8529             [ 3] 	sta kb_raw				; Reset raw key settings
c7c2 : 852a             [ 3] 	sta kb_last				; And last key
c7c4 : a531             [ 3] 	lda kb_rdel_tim			; Reset repeat timer to initia
c7c6 : 852f             [ 3] 	sta kb_rep
c7c8 :                       kb_scan_wait
c7c8 : 38               [ 2] 	sec						; Code not valid
c7c9 : 60               [ 6] 	rts						; And done (A=0)	
c7ca :                       kb_scan_decode
                             	; If got here then raw key is good
c7ca : a52a             [ 3] 	lda kb_last				; Preload A with last decoded key
c7cc : c429             [ 3] 	cpy kb_raw				; Same as last raw key?
AS65 Assembler for R6502 [1.42].                                     Page   76
-------------------------------- bank\bank0.s --------------------------------

c7ce : 8429             [ 3] 	sty kb_raw				; Already save new raw key
c7d0 : d002             [ 3] 	bne kb_process_new		; If is new raw key, look at
c7d2 : f059             [ 4] 	beq kb_do_repeat		; Else go handle repeating wit
c7d4 :                       kb_process_new
c7d4 : a531             [ 3] 	lda kb_rdel_tim			; Reset repeat timer to initia
c7d6 : 852f             [ 3] 	sta kb_rep
                             	; Now to get a proper key code translated from r
                             	; Check for shift and ctrl (not debounced!)
c7d8 : a9ef             [ 2] 	lda #0b11101111			; Select column 4
c7da : a20e             [ 2] 	ldx #SND_REG_IOA		; On AY port A
c7dc : 2000c0           [ 6] 	jsr snd_set
                             
                             	; check shifted keys
c7df : a204             [ 2] 	ldx #4					; Row 4 (left shift)
c7e1 : 8e0003           [ 4] 	stx IO_0+PRB			; Select row on port B
c7e4 : ea               [ 2] 	nop
c7e5 : ea               [ 2] 	nop
                             
c7e6 : ad0003           [ 4] 	lda IO_0+PRB			; Read Port B
                             
c7e9 : a207             [ 2] 	ldx #7					; Row 7 (right shift)
c7eb : 8e0003           [ 4] 	stx IO_0+PRB			; Select row on port B
c7ee : ea               [ 2] 	nop
c7ef : ea               [ 2] 	nop
                             
c7f0 : 0d0003           [ 4] 	ora IO_0+PRB			; Combine Port B
c7f3 : be5dc8           [ 4] 	ldx kb_table_std,y		; Pre-load standard key code
c7f6 : 2908             [ 2] 	and #KB_SENSE			; Bit 3 is the sense
c7f8 : f003             [ 3] 	beq kb_read_noshift		; Skip over if no shift
c7fa : be9dc8           [ 4] 	ldx kb_table_shift,y	; Load up standard key code
c7fd :                       kb_read_noshift
c7fd : 862b             [ 3] 	stx kb_code				; Save the mapped keycode
                             	; check ctrl key
c7ff : a202             [ 2] 	ldx #2					; Row 2 (ctrl key)
c801 : 8e0003           [ 4] 	stx IO_0+PRB			; Select row on port B
c804 : ea               [ 2] 	nop
c805 : ea               [ 2] 	nop
                             
c806 : ad0003           [ 4] 	lda IO_0+PRB			; Read Port B
c809 : 2908             [ 2] 	and #KB_SENSE
c80b : f00a             [ 3] 	beq kb_skip_ctrl
c80d : a52b             [ 3] 	lda kb_code
c80f : 291f             [ 2] 	and #0x1f				; Ctrl will result in codes 0 to 31
c811 : 852b             [ 3] 	sta kb_code				; Override the keycode
c813 : f028             [ 3] 	beq kb_brk
c815 : 101e             [ 3] 	bpl	kb_store_last		; Check repeat (bpl is always
c817 :                       kb_skip_ctrl
c817 : a52c             [ 3] 	lda kb_stat				; Check caps lock
c819 : 2901             [ 2] 	and #KB_CAPSLK
c81b : f018             [ 3] 	beq kb_store_last
c81d : a52b             [ 3] 	lda kb_code
c81f : c961             [ 2] 	cmp #'a'				; If < 'a' then skip
c821 : 9012             [ 3] 	bcc kb_store_last
c823 : c97b             [ 2] 	cmp #'z'+1				; If > 'z' then skip
c825 : b00e             [ 3] 	bcs kb_store_last
c827 : a52b             [ 3] 	lda kb_code				; Get the actual code	
c829 : 4920             [ 2] 	eor #0x20				; Switch off bit 0x20
c82b : d008             [ 3] 	bne kb_store_last
c82d :                       kb_do_repeat
c82d : a62f             [ 3] 	ldx kb_rep				; Has repeat expired?
c82f : d008             [ 3] 	bne	kb_in_repeat		; If not then still in repeat
c831 : a630             [ 3] 	ldx kb_rep_tim			; Set repeat speed
AS65 Assembler for R6502 [1.42].                                     Page   77
-------------------------------- bank\bank0.s --------------------------------

c833 : 862f             [ 3] 	stx kb_rep
c835 :                       kb_store_last
c835 : 852a             [ 3] 	sta kb_last				; Make last code same as this
c837 : 18               [ 2] 	clc						; Code valid
c838 : 60               [ 6] 	rts	
c839 :                       kb_in_repeat
c839 : a900             [ 2] 	lda #0					; Don't emit a keycode
c83b : 38               [ 2] 	sec
c83c : 60               [ 6] 	rts
c83d :                       kb_brk
                             	SWBRK DFERR_OK
                             
                             
                             ;****************************************
                             ;* kb_get_key
                             ;* Waits for a key press, C=1 synchronous
                             ;* A = Key code, C=1 means valid
                             ;****************************************
c83f :                       kb_get_key
c83f : 8a               [ 2] 	txa
c840 : 48               [ 3] 	pha
c841 : 98               [ 2] 	tya
c842 : 48               [ 3] 	pha
                             
c843 :                       kb_get_try	
c843 : 08               [ 3] 	php
c844 : 20b9c7           [ 6] 	jsr kb_scan_key
c847 : 900b             [ 3] 	bcc kb_scan_got_key
c849 : 28               [ 4] 	plp						; No key, so check C
c84a : b0f7             [ 3] 	bcs kb_get_try			; Keep looking if C
c84c : 38               [ 2] 	sec						; Indicate key not valid
                             	
c84d : 68               [ 4] 	pla
c84e : a8               [ 2] 	tay
c84f : 68               [ 4] 	pla
c850 : aa               [ 2] 	tax
c851 : a900             [ 2] 	lda #0
                             	
c853 : 60               [ 6] 	rts
c854 :                       kb_scan_got_key
c854 : 28               [ 4] 	plp						; Pull stack
c855 : 18               [ 2] 	clc						; Indicate key valid
                             
c856 : 68               [ 4] 	pla
c857 : a8               [ 2] 	tay
c858 : 68               [ 4] 	pla
c859 : aa               [ 2] 	tax
                             	
c85a : a52b             [ 3] 	lda kb_code
                             	
c85c : 60               [ 6] 	rts
                             	
                             ;****************************************
                             ;* kb_table_std (no shift)
                             ;* Each line is one column
                             ;****************************************
c85d :                       kb_table_std
c85d : 376a6d6b20757938      	db '7' ,'j' ,'m' ,'k' ,' ' ,'u' ,'y' ,'8'
c865 : 6e7436392c69686c      	db 'n' ,'t' ,'6' ,'9' ,',' ,'i' ,'h' ,'l'
c86d : 3572623b2e6f6730      	db '5' ,'r' ,'b' ,';' ,'.' ,'o' ,'g' ,'0'
c875 : 7666342d0b70652f      	db 'v' ,'f' ,'4' ,'-' ,0x0b,'p' ,'e' ,'/'
c87d : 0000000000000000      	db 0,0,0,0,0,0,0,0 ; Column 4 is shift and ctrl 
AS65 Assembler for R6502 [1.42].                                     Page   78
-------------------------------- bank\bank0.s --------------------------------

c885 : 311b7a00087f610d      	db '1' ,0x1b,'z' ,0   ,0x08,0x7f,'a' ,0x0d
c88d : 7871325c0a5d7300      	db 'x' ,'q' ,'2' ,0x5c,0x0a,']' ,'s' ,0
c895 : 33646327095b773d      	db '3' ,'d' ,'c' ,0x27,0x09,'[' ,'w' ,'='
                             
                             ;* kb_table_shift (with shift)
c89d :                       kb_table_shift
c89d : 264a4d4b2055592a      	db '&' ,'J' ,'M' ,'K' ,' ' ,'U' ,'Y' ,'*'
c8a5 : 4e545e283c49484c      	db 'N' ,'T' ,'^' ,'(' ,'<' ,'I' ,'H' ,'L'
c8ad : 2552423a3e4f4729      	db '%' ,'R' ,'B' ,':' ,'>' ,'O' ,'G' ,')'
c8b5 : 5646245f0b50453f      	db 'V' ,'F' ,'$' ,'_' ,0x0b,'P' ,'E' ,'?'
c8bd : 0000000000000000      	db 0,0,0,0,0,0,0,0 ; Column 4 is shift and ctrl 
c8c5 : 211b5a00087f410d      	db '!' ,0x1b,'Z' ,0   ,0x08,0x7f,'A' ,0x0d
c8cd : 5851407c0a7d5300      	db 'X' ,'Q' ,'@' ,'|' ,0x0a,'}' ,'S' ,0
c8d5 : 23444322097b572b      	db '#' ,'D' ,'C' ,0x22,0x09,'{' ,'W' ,'+'
                             
c8dd :                       kb_col_mask
c8dd : fe                    	db 0b11111110
c8de : fd                    	db 0b11111101
c8df : fb                    	db 0b11111011
c8e0 : f7                    	db 0b11110111
c8e1 : ef                    	db 0b11101111
c8e2 : df                    	db 0b11011111
c8e3 : bf                    	db 0b10111111
c8e4 : 7f                    	db 0b01111111
                             
c8e5 :                       kb_stick_mask
c8e5 : df                    	db 0b11011111		; Left 	= Bit 0
c8e6 : 7f                    	db 0b01111111		; Right = Bit 1
c8e7 : f7                    	db 0b11110111		; Up	= Bit 2
c8e8 : bf                    	db 0b10111111		; Down	= Bit 3
c8e9 : fe                    	db 0b11111110		; Space	= Bit 4
                             
                             	include "vdp/graph.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  GRAPH.S
                             ;*  This is the graphics module, to handle text a
                             ;*  graphics.
                             ;*  For text modes, this module keeps track of wh
                             ;*  next put a character, and also takes care of 
                             ;*  to the next line as well as scrolling the con
                             ;*  when the cursor has reached the bottom right.
                             ;*  module also enables text input which is echoe
                             ;*  screen, to allow interactive input and editin
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code
                             
c8ea :                       mod_sz_graph_s
                             
                             
                             	include "vdp/font.s"
                             ;************************************************
                             ;*
AS65 Assembler for R6502 [1.42].                                     Page   79
-------------------------------- bank\bank0.s --------------------------------

                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  FONT.S
                             ;*  This is the font definition, used to initiali
                             ;*  character set.  This is the standard Oric-1 f
                             ;*	Still called vdp as this code was ported from 
                             ;*	machine using the TMS9918a.
                             ;*
                             ;************************************************
                             
c8ea :                       vdp_font
                             ; char 32
c8ea : 00                    	db %000000
c8eb : 00                    	db %000000
c8ec : 00                    	db %000000
c8ed : 00                    	db %000000
c8ee : 00                    	db %000000
c8ef : 00                    	db %000000
c8f0 : 00                    	db %000000
c8f1 : 00                    	db %000000
                             ; char 33
c8f2 : 0c                    	db %001100
c8f3 : 0c                    	db %001100
c8f4 : 0c                    	db %001100
c8f5 : 08                    	db %001000
c8f6 : 08                    	db %001000
c8f7 : 00                    	db %000000
c8f8 : 08                    	db %001000
c8f9 : 00                    	db %000000
                             ; char 34
c8fa : 36                    	db %110110
c8fb : 36                    	db %110110
c8fc : 12                    	db %010010
c8fd : 00                    	db %000000
c8fe : 00                    	db %000000
c8ff : 00                    	db %000000
c900 : 00                    	db %000000
c901 : 00                    	db %000000
                             ; char 35
c902 : 14                    	db %010100
c903 : 14                    	db %010100
c904 : 3e                    	db %111110
c905 : 14                    	db %010100
c906 : 3e                    	db %111110
c907 : 14                    	db %010100
c908 : 14                    	db %010100
c909 : 00                    	db %000000
                             ; char 36
c90a : 08                    	db %001000
c90b : 1e                    	db %011110
c90c : 28                    	db %101000
c90d : 1c                    	db %011100
c90e : 0a                    	db %001010
c90f : 3c                    	db %111100
c910 : 08                    	db %001000
c911 : 00                    	db %000000
                             ; char 37
c912 : 30                    	db %110000
AS65 Assembler for R6502 [1.42].                                     Page   80
-------------------------------- bank\bank0.s --------------------------------

c913 : 32                    	db %110010
c914 : 04                    	db %000100
c915 : 08                    	db %001000
c916 : 10                    	db %010000
c917 : 26                    	db %100110
c918 : 06                    	db %000110
c919 : 00                    	db %000000
                             ; char 38
c91a : 10                    	db %010000
c91b : 28                    	db %101000
c91c : 28                    	db %101000
c91d : 10                    	db %010000
c91e : 2a                    	db %101010
c91f : 24                    	db %100100
c920 : 1a                    	db %011010
c921 : 00                    	db %000000
                             ; char 39
c922 : 0c                    	db %001100
c923 : 0c                    	db %001100
c924 : 04                    	db %000100
c925 : 00                    	db %000000
c926 : 00                    	db %000000
c927 : 00                    	db %000000
c928 : 00                    	db %000000
c929 : 00                    	db %000000
                             ; char 40
c92a : 04                    	db %000100
c92b : 08                    	db %001000
c92c : 10                    	db %010000
c92d : 10                    	db %010000
c92e : 10                    	db %010000
c92f : 08                    	db %001000
c930 : 04                    	db %000100
c931 : 00                    	db %000000
                             ; char 41
c932 : 10                    	db %010000
c933 : 08                    	db %001000
c934 : 04                    	db %000100
c935 : 04                    	db %000100
c936 : 04                    	db %000100
c937 : 08                    	db %001000
c938 : 10                    	db %010000
c939 : 00                    	db %000000
                             ; char 42
c93a : 08                    	db %001000
c93b : 2a                    	db %101010
c93c : 1c                    	db %011100
c93d : 08                    	db %001000
c93e : 1c                    	db %011100
c93f : 2a                    	db %101010
c940 : 08                    	db %001000
c941 : 00                    	db %000000
                             ; char 43
c942 : 00                    	db %000000
c943 : 08                    	db %001000
c944 : 08                    	db %001000
c945 : 3e                    	db %111110
c946 : 08                    	db %001000
c947 : 08                    	db %001000
c948 : 00                    	db %000000
c949 : 00                    	db %000000
                             ; char 44
AS65 Assembler for R6502 [1.42].                                     Page   81
-------------------------------- bank\bank0.s --------------------------------

c94a : 00                    	db %000000
c94b : 00                    	db %000000
c94c : 00                    	db %000000
c94d : 00                    	db %000000
c94e : 00                    	db %000000
c94f : 08                    	db %001000
c950 : 08                    	db %001000
c951 : 10                    	db %010000
                             ; char 45
c952 : 00                    	db %000000
c953 : 00                    	db %000000
c954 : 00                    	db %000000
c955 : 3e                    	db %111110
c956 : 00                    	db %000000
c957 : 00                    	db %000000
c958 : 00                    	db %000000
c959 : 00                    	db %000000
                             ; char 46
c95a : 00                    	db %000000
c95b : 00                    	db %000000
c95c : 00                    	db %000000
c95d : 00                    	db %000000
c95e : 00                    	db %000000
c95f : 04                    	db %000100
c960 : 00                    	db %000000
c961 : 00                    	db %000000
                             ; char 47
c962 : 00                    	db %000000
c963 : 02                    	db %000010
c964 : 04                    	db %000100
c965 : 08                    	db %001000
c966 : 10                    	db %010000
c967 : 20                    	db %100000
c968 : 00                    	db %000000
c969 : 00                    	db %000000
                             ; char 48
c96a : 1c                    	db %011100
c96b : 22                    	db %100010
c96c : 26                    	db %100110
c96d : 2a                    	db %101010
c96e : 32                    	db %110010
c96f : 22                    	db %100010
c970 : 1c                    	db %011100
c971 : 00                    	db %000000
                             ; char 49
c972 : 08                    	db %001000
c973 : 18                    	db %011000
c974 : 08                    	db %001000
c975 : 08                    	db %001000
c976 : 08                    	db %001000
c977 : 08                    	db %001000
c978 : 1c                    	db %011100
c979 : 00                    	db %000000
                             ; char 50
c97a : 1c                    	db %011100
c97b : 22                    	db %100010
c97c : 02                    	db %000010
c97d : 04                    	db %000100
c97e : 08                    	db %001000
c97f : 10                    	db %010000
c980 : 3e                    	db %111110
c981 : 00                    	db %000000
AS65 Assembler for R6502 [1.42].                                     Page   82
-------------------------------- bank\bank0.s --------------------------------

                             ; char 51
c982 : 3e                    	db %111110
c983 : 02                    	db %000010
c984 : 04                    	db %000100
c985 : 0c                    	db %001100
c986 : 02                    	db %000010
c987 : 22                    	db %100010
c988 : 1c                    	db %011100
c989 : 00                    	db %000000
                             ; char 52
c98a : 04                    	db %000100
c98b : 0c                    	db %001100
c98c : 14                    	db %010100
c98d : 24                    	db %100100
c98e : 3e                    	db %111110
c98f : 04                    	db %000100
c990 : 04                    	db %000100
c991 : 00                    	db %000000
                             ; char 53
c992 : 3e                    	db %111110
c993 : 20                    	db %100000
c994 : 3c                    	db %111100
c995 : 02                    	db %000010
c996 : 02                    	db %000010
c997 : 22                    	db %100010
c998 : 1c                    	db %011100
c999 : 00                    	db %000000
                             ; char 54
c99a : 0c                    	db %001100
c99b : 10                    	db %010000
c99c : 20                    	db %100000
c99d : 3c                    	db %111100
c99e : 22                    	db %100010
c99f : 22                    	db %100010
c9a0 : 1c                    	db %011100
c9a1 : 00                    	db %000000
                             ; char 55
c9a2 : 3e                    	db %111110
c9a3 : 02                    	db %000010
c9a4 : 04                    	db %000100
c9a5 : 08                    	db %001000
c9a6 : 10                    	db %010000
c9a7 : 10                    	db %010000
c9a8 : 10                    	db %010000
c9a9 : 00                    	db %000000
                             ; char 56
c9aa : 1c                    	db %011100
c9ab : 22                    	db %100010
c9ac : 22                    	db %100010
c9ad : 1c                    	db %011100
c9ae : 22                    	db %100010
c9af : 22                    	db %100010
c9b0 : 1c                    	db %011100
c9b1 : 00                    	db %000000
                             ; char 57
c9b2 : 1c                    	db %011100
c9b3 : 22                    	db %100010
c9b4 : 22                    	db %100010
c9b5 : 1e                    	db %011110
c9b6 : 02                    	db %000010
c9b7 : 04                    	db %000100
c9b8 : 18                    	db %011000
AS65 Assembler for R6502 [1.42].                                     Page   83
-------------------------------- bank\bank0.s --------------------------------

c9b9 : 00                    	db %000000
                             ; char 58
c9ba : 00                    	db %000000
c9bb : 00                    	db %000000
c9bc : 08                    	db %001000
c9bd : 00                    	db %000000
c9be : 00                    	db %000000
c9bf : 08                    	db %001000
c9c0 : 00                    	db %000000
c9c1 : 00                    	db %000000
                             ; char 59
c9c2 : 00                    	db %000000
c9c3 : 00                    	db %000000
c9c4 : 08                    	db %001000
c9c5 : 00                    	db %000000
c9c6 : 00                    	db %000000
c9c7 : 08                    	db %001000
c9c8 : 08                    	db %001000
c9c9 : 10                    	db %010000
                             ; char 60
c9ca : 04                    	db %000100
c9cb : 08                    	db %001000
c9cc : 10                    	db %010000
c9cd : 20                    	db %100000
c9ce : 10                    	db %010000
c9cf : 08                    	db %001000
c9d0 : 04                    	db %000100
c9d1 : 00                    	db %000000
                             ; char 61
c9d2 : 00                    	db %000000
c9d3 : 00                    	db %000000
c9d4 : 3e                    	db %111110
c9d5 : 00                    	db %000000
c9d6 : 3e                    	db %111110
c9d7 : 00                    	db %000000
c9d8 : 00                    	db %000000
c9d9 : 00                    	db %000000
                             ; char 62
c9da : 10                    	db %010000
c9db : 08                    	db %001000
c9dc : 04                    	db %000100
c9dd : 02                    	db %000010
c9de : 04                    	db %000100
c9df : 08                    	db %001000
c9e0 : 10                    	db %010000
c9e1 : 00                    	db %000000
                             ; char 63
c9e2 : 1c                    	db %011100
c9e3 : 22                    	db %100010
c9e4 : 04                    	db %000100
c9e5 : 08                    	db %001000
c9e6 : 08                    	db %001000
c9e7 : 00                    	db %000000
c9e8 : 08                    	db %001000
c9e9 : 00                    	db %000000
                             ; char 64
c9ea : 1c                    	db %011100
c9eb : 22                    	db %100010
c9ec : 2a                    	db %101010
c9ed : 2e                    	db %101110
c9ee : 2c                    	db %101100
c9ef : 20                    	db %100000
AS65 Assembler for R6502 [1.42].                                     Page   84
-------------------------------- bank\bank0.s --------------------------------

c9f0 : 1e                    	db %011110
c9f1 : 00                    	db %000000
c9f2 :                       vdp_font_a
                             ; char 65
c9f2 : 1c                    	db %011100
c9f3 : 22                    	db %100010
c9f4 : 22                    	db %100010
c9f5 : 3e                    	db %111110
c9f6 : 22                    	db %100010
c9f7 : 22                    	db %100010
c9f8 : 22                    	db %100010
c9f9 : 00                    	db %000000
                             ; char 66
c9fa : 3c                    	db %111100
c9fb : 22                    	db %100010
c9fc : 22                    	db %100010
c9fd : 3c                    	db %111100
c9fe : 22                    	db %100010
c9ff : 22                    	db %100010
ca00 : 3c                    	db %111100
ca01 : 00                    	db %000000
                             ; char 67
ca02 : 1c                    	db %011100
ca03 : 22                    	db %100010
ca04 : 20                    	db %100000
ca05 : 20                    	db %100000
ca06 : 20                    	db %100000
ca07 : 22                    	db %100010
ca08 : 1c                    	db %011100
ca09 : 00                    	db %000000
                             ; char 68
ca0a : 3c                    	db %111100
ca0b : 22                    	db %100010
ca0c : 22                    	db %100010
ca0d : 22                    	db %100010
ca0e : 22                    	db %100010
ca0f : 22                    	db %100010
ca10 : 3c                    	db %111100
ca11 : 00                    	db %000000
                             ; char 69
ca12 : 3e                    	db %111110
ca13 : 20                    	db %100000
ca14 : 20                    	db %100000
ca15 : 3c                    	db %111100
ca16 : 20                    	db %100000
ca17 : 20                    	db %100000
ca18 : 3e                    	db %111110
ca19 : 00                    	db %000000
                             ; char 70
ca1a : 3e                    	db %111110
ca1b : 20                    	db %100000
ca1c : 20                    	db %100000
ca1d : 3c                    	db %111100
ca1e : 20                    	db %100000
ca1f : 20                    	db %100000
ca20 : 20                    	db %100000
ca21 : 00                    	db %000000
                             ; char 71
ca22 : 1e                    	db %011110
ca23 : 20                    	db %100000
ca24 : 20                    	db %100000
ca25 : 20                    	db %100000
AS65 Assembler for R6502 [1.42].                                     Page   85
-------------------------------- bank\bank0.s --------------------------------

ca26 : 26                    	db %100110
ca27 : 22                    	db %100010
ca28 : 1e                    	db %011110
ca29 : 00                    	db %000000
                             ; char 72
ca2a : 22                    	db %100010
ca2b : 22                    	db %100010
ca2c : 22                    	db %100010
ca2d : 3e                    	db %111110
ca2e : 22                    	db %100010
ca2f : 22                    	db %100010
ca30 : 22                    	db %100010
ca31 : 00                    	db %000000
                             ; char 73
ca32 : 1c                    	db %011100
ca33 : 08                    	db %001000
ca34 : 08                    	db %001000
ca35 : 08                    	db %001000
ca36 : 08                    	db %001000
ca37 : 08                    	db %001000
ca38 : 1c                    	db %011100
ca39 : 00                    	db %000000
                             ; char 74
ca3a : 02                    	db %000010
ca3b : 02                    	db %000010
ca3c : 02                    	db %000010
ca3d : 02                    	db %000010
ca3e : 02                    	db %000010
ca3f : 22                    	db %100010
ca40 : 1c                    	db %011100
ca41 : 00                    	db %000000
                             ; char 75
ca42 : 22                    	db %100010
ca43 : 24                    	db %100100
ca44 : 28                    	db %101000
ca45 : 30                    	db %110000
ca46 : 28                    	db %101000
ca47 : 24                    	db %100100
ca48 : 22                    	db %100010
ca49 : 00                    	db %000000
                             ; char 76
ca4a : 20                    	db %100000
ca4b : 20                    	db %100000
ca4c : 20                    	db %100000
ca4d : 20                    	db %100000
ca4e : 20                    	db %100000
ca4f : 20                    	db %100000
ca50 : 3e                    	db %111110
ca51 : 00                    	db %000000
                             ; char 77
ca52 : 22                    	db %100010
ca53 : 36                    	db %110110
ca54 : 2a                    	db %101010
ca55 : 2a                    	db %101010
ca56 : 22                    	db %100010
ca57 : 22                    	db %100010
ca58 : 22                    	db %100010
ca59 : 00                    	db %000000
                             ; char 78
ca5a : 22                    	db %100010
ca5b : 22                    	db %100010
ca5c : 32                    	db %110010
AS65 Assembler for R6502 [1.42].                                     Page   86
-------------------------------- bank\bank0.s --------------------------------

ca5d : 2a                    	db %101010
ca5e : 26                    	db %100110
ca5f : 22                    	db %100010
ca60 : 22                    	db %100010
ca61 : 00                    	db %000000
                             ; char 79
ca62 : 1c                    	db %011100
ca63 : 22                    	db %100010
ca64 : 22                    	db %100010
ca65 : 22                    	db %100010
ca66 : 22                    	db %100010
ca67 : 22                    	db %100010
ca68 : 1c                    	db %011100
ca69 : 00                    	db %000000
                             ; char 80
ca6a : 3c                    	db %111100
ca6b : 22                    	db %100010
ca6c : 22                    	db %100010
ca6d : 3c                    	db %111100
ca6e : 20                    	db %100000
ca6f : 20                    	db %100000
ca70 : 20                    	db %100000
ca71 : 00                    	db %000000
                             ; char 81
ca72 : 1c                    	db %011100
ca73 : 22                    	db %100010
ca74 : 22                    	db %100010
ca75 : 22                    	db %100010
ca76 : 2a                    	db %101010
ca77 : 24                    	db %100100
ca78 : 1a                    	db %011010
ca79 : 00                    	db %000000
                             ; char 82
ca7a : 3c                    	db %111100
ca7b : 22                    	db %100010
ca7c : 22                    	db %100010
ca7d : 3c                    	db %111100
ca7e : 28                    	db %101000
ca7f : 24                    	db %100100
ca80 : 22                    	db %100010
ca81 : 00                    	db %000000
                             ; char 83
ca82 : 1c                    	db %011100
ca83 : 22                    	db %100010
ca84 : 20                    	db %100000
ca85 : 1c                    	db %011100
ca86 : 02                    	db %000010
ca87 : 22                    	db %100010
ca88 : 1c                    	db %011100
ca89 : 00                    	db %000000
                             ; char 84
ca8a : 3e                    	db %111110
ca8b : 08                    	db %001000
ca8c : 08                    	db %001000
ca8d : 08                    	db %001000
ca8e : 08                    	db %001000
ca8f : 08                    	db %001000
ca90 : 08                    	db %001000
ca91 : 00                    	db %000000
                             ; char 85
ca92 : 22                    	db %100010
ca93 : 22                    	db %100010
AS65 Assembler for R6502 [1.42].                                     Page   87
-------------------------------- bank\bank0.s --------------------------------

ca94 : 22                    	db %100010
ca95 : 22                    	db %100010
ca96 : 22                    	db %100010
ca97 : 22                    	db %100010
ca98 : 1c                    	db %011100
ca99 : 00                    	db %000000
                             ; char 86
ca9a : 22                    	db %100010
ca9b : 22                    	db %100010
ca9c : 22                    	db %100010
ca9d : 22                    	db %100010
ca9e : 22                    	db %100010
ca9f : 14                    	db %010100
caa0 : 08                    	db %001000
caa1 : 00                    	db %000000
                             ; char 87
caa2 : 22                    	db %100010
caa3 : 22                    	db %100010
caa4 : 22                    	db %100010
caa5 : 2a                    	db %101010
caa6 : 2a                    	db %101010
caa7 : 36                    	db %110110
caa8 : 22                    	db %100010
caa9 : 00                    	db %000000
                             ; char 88
caaa : 22                    	db %100010
caab : 22                    	db %100010
caac : 14                    	db %010100
caad : 08                    	db %001000
caae : 14                    	db %010100
caaf : 22                    	db %100010
cab0 : 22                    	db %100010
cab1 : 00                    	db %000000
                             ; char 89
cab2 : 22                    	db %100010
cab3 : 22                    	db %100010
cab4 : 14                    	db %010100
cab5 : 08                    	db %001000
cab6 : 08                    	db %001000
cab7 : 08                    	db %001000
cab8 : 08                    	db %001000
cab9 : 00                    	db %000000
                             ; char 90
caba : 3e                    	db %111110
cabb : 02                    	db %000010
cabc : 04                    	db %000100
cabd : 08                    	db %001000
cabe : 10                    	db %010000
cabf : 20                    	db %100000
cac0 : 3e                    	db %111110
cac1 : 00                    	db %000000
                             ; char 91
cac2 : 1c                    	db %011100
cac3 : 10                    	db %010000
cac4 : 10                    	db %010000
cac5 : 10                    	db %010000
cac6 : 10                    	db %010000
cac7 : 10                    	db %010000
cac8 : 1c                    	db %011100
cac9 : 00                    	db %000000
                             ; char 92
caca : 00                    	db %000000
AS65 Assembler for R6502 [1.42].                                     Page   88
-------------------------------- bank\bank0.s --------------------------------

cacb : 20                    	db %100000
cacc : 10                    	db %010000
cacd : 08                    	db %001000
cace : 04                    	db %000100
cacf : 02                    	db %000010
cad0 : 00                    	db %000000
cad1 : 00                    	db %000000
                             ; char 93
cad2 : 1c                    	db %011100
cad3 : 04                    	db %000100
cad4 : 04                    	db %000100
cad5 : 04                    	db %000100
cad6 : 04                    	db %000100
cad7 : 04                    	db %000100
cad8 : 1c                    	db %011100
cad9 : 00                    	db %000000
                             ; char 94
cada : 08                    	db %001000
cadb : 1c                    	db %011100
cadc : 3e                    	db %111110
cadd : 08                    	db %001000
cade : 08                    	db %001000
cadf : 08                    	db %001000
cae0 : 08                    	db %001000
cae1 : 00                    	db %000000
                             ; char 95
cae2 : 00                    	db %000000
cae3 : 00                    	db %000000
cae4 : 00                    	db %000000
cae5 : 00                    	db %000000
cae6 : 00                    	db %000000
cae7 : 00                    	db %000000
cae8 : 3e                    	db %111110
cae9 : 00                    	db %000000
                             ; char 96
caea : 0e                    	db %001110
caeb : 10                    	db %010000
caec : 10                    	db %010000
caed : 3c                    	db %111100
caee : 10                    	db %010000
caef : 10                    	db %010000
caf0 : 3e                    	db %111110
caf1 : 00                    	db %000000
                             ; char 97
caf2 : 00                    	db %000000
caf3 : 00                    	db %000000
caf4 : 1c                    	db %011100
caf5 : 02                    	db %000010
caf6 : 1e                    	db %011110
caf7 : 22                    	db %100010
caf8 : 1e                    	db %011110
caf9 : 00                    	db %000000
                             ; char 98
cafa : 20                    	db %100000
cafb : 20                    	db %100000
cafc : 3c                    	db %111100
cafd : 22                    	db %100010
cafe : 22                    	db %100010
caff : 22                    	db %100010
cb00 : 3c                    	db %111100
cb01 : 00                    	db %000000
                             ; char 99
AS65 Assembler for R6502 [1.42].                                     Page   89
-------------------------------- bank\bank0.s --------------------------------

cb02 : 00                    	db %000000
cb03 : 00                    	db %000000
cb04 : 1e                    	db %011110
cb05 : 20                    	db %100000
cb06 : 20                    	db %100000
cb07 : 20                    	db %100000
cb08 : 1e                    	db %011110
cb09 : 00                    	db %000000
                             ; char 100
cb0a : 02                    	db %000010
cb0b : 02                    	db %000010
cb0c : 1e                    	db %011110
cb0d : 22                    	db %100010
cb0e : 22                    	db %100010
cb0f : 22                    	db %100010
cb10 : 1e                    	db %011110
cb11 : 00                    	db %000000
                             ; char 101
cb12 : 00                    	db %000000
cb13 : 00                    	db %000000
cb14 : 1c                    	db %011100
cb15 : 22                    	db %100010
cb16 : 3e                    	db %111110
cb17 : 20                    	db %100000
cb18 : 1e                    	db %011110
cb19 : 00                    	db %000000
                             ; char 102
cb1a : 0c                    	db %001100
cb1b : 12                    	db %010010
cb1c : 10                    	db %010000
cb1d : 3c                    	db %111100
cb1e : 10                    	db %010000
cb1f : 10                    	db %010000
cb20 : 10                    	db %010000
cb21 : 00                    	db %000000
                             ; char 103
cb22 : 00                    	db %000000
cb23 : 00                    	db %000000
cb24 : 1c                    	db %011100
cb25 : 22                    	db %100010
cb26 : 22                    	db %100010
cb27 : 1e                    	db %011110
cb28 : 02                    	db %000010
cb29 : 1c                    	db %011100
                             ; char 104
cb2a : 20                    	db %100000
cb2b : 20                    	db %100000
cb2c : 3c                    	db %111100
cb2d : 22                    	db %100010
cb2e : 22                    	db %100010
cb2f : 22                    	db %100010
cb30 : 22                    	db %100010
cb31 : 00                    	db %000000
                             ; char 105
cb32 : 08                    	db %001000
cb33 : 00                    	db %000000
cb34 : 18                    	db %011000
cb35 : 08                    	db %001000
cb36 : 08                    	db %001000
cb37 : 08                    	db %001000
cb38 : 1c                    	db %011100
cb39 : 00                    	db %000000
AS65 Assembler for R6502 [1.42].                                     Page   90
-------------------------------- bank\bank0.s --------------------------------

                             ; char 106
cb3a : 04                    	db %000100
cb3b : 00                    	db %000000
cb3c : 0c                    	db %001100
cb3d : 04                    	db %000100
cb3e : 04                    	db %000100
cb3f : 04                    	db %000100
cb40 : 24                    	db %100100
cb41 : 18                    	db %011000
                             ; char 107
cb42 : 20                    	db %100000
cb43 : 20                    	db %100000
cb44 : 22                    	db %100010
cb45 : 24                    	db %100100
cb46 : 38                    	db %111000
cb47 : 24                    	db %100100
cb48 : 22                    	db %100010
cb49 : 00                    	db %000000
                             ; char 108
cb4a : 18                    	db %011000
cb4b : 08                    	db %001000
cb4c : 08                    	db %001000
cb4d : 08                    	db %001000
cb4e : 08                    	db %001000
cb4f : 08                    	db %001000
cb50 : 1c                    	db %011100
cb51 : 00                    	db %000000
                             ; char 109
cb52 : 00                    	db %000000
cb53 : 00                    	db %000000
cb54 : 36                    	db %110110
cb55 : 2a                    	db %101010
cb56 : 2a                    	db %101010
cb57 : 2a                    	db %101010
cb58 : 22                    	db %100010
cb59 : 00                    	db %000000
                             ; char 110
cb5a : 00                    	db %000000
cb5b : 00                    	db %000000
cb5c : 3c                    	db %111100
cb5d : 22                    	db %100010
cb5e : 22                    	db %100010
cb5f : 22                    	db %100010
cb60 : 22                    	db %100010
cb61 : 00                    	db %000000
                             ; char 111
cb62 : 00                    	db %000000
cb63 : 00                    	db %000000
cb64 : 1c                    	db %011100
cb65 : 22                    	db %100010
cb66 : 22                    	db %100010
cb67 : 22                    	db %100010
cb68 : 1c                    	db %011100
cb69 : 00                    	db %000000
                             ; char 112
cb6a : 00                    	db %000000
cb6b : 00                    	db %000000
cb6c : 3c                    	db %111100
cb6d : 22                    	db %100010
cb6e : 22                    	db %100010
cb6f : 3c                    	db %111100
cb70 : 20                    	db %100000
AS65 Assembler for R6502 [1.42].                                     Page   91
-------------------------------- bank\bank0.s --------------------------------

cb71 : 20                    	db %100000
                             ; char 113
cb72 : 00                    	db %000000
cb73 : 00                    	db %000000
cb74 : 1e                    	db %011110
cb75 : 22                    	db %100010
cb76 : 22                    	db %100010
cb77 : 1e                    	db %011110
cb78 : 02                    	db %000010
cb79 : 02                    	db %000010
                             ; char 114
cb7a : 00                    	db %000000
cb7b : 00                    	db %000000
cb7c : 2e                    	db %101110
cb7d : 30                    	db %110000
cb7e : 20                    	db %100000
cb7f : 20                    	db %100000
cb80 : 20                    	db %100000
cb81 : 00                    	db %000000
                             ; char 115
cb82 : 00                    	db %000000
cb83 : 00                    	db %000000
cb84 : 1e                    	db %011110
cb85 : 20                    	db %100000
cb86 : 1c                    	db %011100
cb87 : 02                    	db %000010
cb88 : 3c                    	db %111100
cb89 : 00                    	db %000000
                             ; char 116
cb8a : 10                    	db %010000
cb8b : 10                    	db %010000
cb8c : 3c                    	db %111100
cb8d : 10                    	db %010000
cb8e : 10                    	db %010000
cb8f : 12                    	db %010010
cb90 : 0c                    	db %001100
cb91 : 00                    	db %000000
                             ; char 117
cb92 : 00                    	db %000000
cb93 : 00                    	db %000000
cb94 : 22                    	db %100010
cb95 : 22                    	db %100010
cb96 : 22                    	db %100010
cb97 : 26                    	db %100110
cb98 : 1a                    	db %011010
cb99 : 00                    	db %000000
                             ; char 118
cb9a : 00                    	db %000000
cb9b : 00                    	db %000000
cb9c : 22                    	db %100010
cb9d : 22                    	db %100010
cb9e : 22                    	db %100010
cb9f : 14                    	db %010100
cba0 : 08                    	db %001000
cba1 : 00                    	db %000000
                             ; char 119
cba2 : 00                    	db %000000
cba3 : 00                    	db %000000
cba4 : 22                    	db %100010
cba5 : 22                    	db %100010
cba6 : 2a                    	db %101010
cba7 : 2a                    	db %101010
AS65 Assembler for R6502 [1.42].                                     Page   92
-------------------------------- bank\bank0.s --------------------------------

cba8 : 36                    	db %110110
cba9 : 00                    	db %000000
                             ; char 120
cbaa : 00                    	db %000000
cbab : 00                    	db %000000
cbac : 22                    	db %100010
cbad : 14                    	db %010100
cbae : 08                    	db %001000
cbaf : 14                    	db %010100
cbb0 : 22                    	db %100010
cbb1 : 00                    	db %000000
                             ; char 121
cbb2 : 00                    	db %000000
cbb3 : 00                    	db %000000
cbb4 : 22                    	db %100010
cbb5 : 22                    	db %100010
cbb6 : 22                    	db %100010
cbb7 : 1e                    	db %011110
cbb8 : 02                    	db %000010
cbb9 : 1c                    	db %011100
                             ; char 122
cbba : 00                    	db %000000
cbbb : 00                    	db %000000
cbbc : 3e                    	db %111110
cbbd : 04                    	db %000100
cbbe : 08                    	db %001000
cbbf : 10                    	db %010000
cbc0 : 3e                    	db %111110
cbc1 : 00                    	db %000000
                             ; char 123
cbc2 : 0e                    	db %001110
cbc3 : 18                    	db %011000
cbc4 : 18                    	db %011000
cbc5 : 30                    	db %110000
cbc6 : 18                    	db %011000
cbc7 : 18                    	db %011000
cbc8 : 0e                    	db %001110
cbc9 : 00                    	db %000000
                             ; char 124
cbca : 08                    	db %001000
cbcb : 08                    	db %001000
cbcc : 08                    	db %001000
cbcd : 08                    	db %001000
cbce : 08                    	db %001000
cbcf : 08                    	db %001000
cbd0 : 08                    	db %001000
cbd1 : 00                    	db %000000
                             ; char 125
cbd2 : 38                    	db %111000
cbd3 : 0c                    	db %001100
cbd4 : 0c                    	db %001100
cbd5 : 06                    	db %000110
cbd6 : 0c                    	db %001100
cbd7 : 0c                    	db %001100
cbd8 : 38                    	db %111000
cbd9 : 00                    	db %000000
                             ; char 126
cbda : 00                    	db %000000
cbdb : 00                    	db %000000
cbdc : 10                    	db %010000
cbdd : 2a                    	db %101010
cbde : 04                    	db %000100
AS65 Assembler for R6502 [1.42].                                     Page   93
-------------------------------- bank\bank0.s --------------------------------

cbdf : 00                    	db %000000
cbe0 : 00                    	db %000000
cbe1 : 00                    	db %000000
                             ; char 127
cbe2 : 2a                    	db %101010
cbe3 : 15                    	db %010101
cbe4 : 2a                    	db %101010
cbe5 : 15                    	db %010101
cbe6 : 2a                    	db %101010
cbe7 : 15                    	db %010101
cbe8 : 2a                    	db %101010
cbe9 : 15                    	db %010101
                             	
                             	
                             
                             ;****************************************
                             ;* vdp_init_font
                             ;* Initialise fonts from ROM
                             ;* Input : None
                             ;* Output : None
                             ;* Regs affected : All
                             ;****************************************
cbea :                       gr_init_font
                             	; Get char base from vdp structure
cbea : a614             [ 3] 	ldx gr_scrngeom+gr_char
cbec : 8634             [ 3] 	stx tmp_blo
cbee : a615             [ 3] 	ldx gr_scrngeom+gr_char+1
cbf0 : e8               [ 2] 	inx						; ASCII patterns start 1 page later
cbf1 : 8635             [ 3] 	stx tmp_bhi
                             
cbf3 : a9ea             [ 2] 	lda #lo(vdp_font)		; Low byte of fonts source
cbf5 : 8536             [ 3] 	sta tmp_clo
cbf7 : a9c8             [ 2] 	lda #hi(vdp_font)		; High byte of fonts source
cbf9 : 8537             [ 3] 	sta tmp_chi
cbfb : a203             [ 2] 	ldx #3					; Copy 3 pages
cbfd : 4c00cc           [ 3] 	jmp gr_copy_mem
                             
                             
                             ;****************************************
                             ;* vdp_copy_mem
                             ;* Copy memory pages at a time
                             ;* Input :	clo/hi	=	source
                             ;*			blo/hi	=	dest
                             ;*			X		=	pages to copy
                             ;* Output : None
                             ;* Regs affected : All
                             ;****************************************
cc00 :                       gr_copy_mem
cc00 : a000             [ 2] 	ldy #0					; byte within page
cc02 : a536             [ 3] 	lda tmp_clo				; Low byte of source
cc04 : 8532             [ 3] 	sta tmp_alo
cc06 : a537             [ 3] 	lda tmp_chi				; High byte of source
cc08 : 8533             [ 3] 	sta tmp_ahi
cc0a :                       gr_copy_byte
cc0a : 98               [ 2] 	tya
cc0b : b132             [ 5] 	lda (tmp_alo),y			; Get byte from font table
cc0d : 9134             [ 5] 	sta (tmp_blo),y			; Put it to the memory
cc0f : c8               [ 2] 	iny
cc10 : d0f8             [ 3] 	bne gr_copy_byte		; keep going for 1 page
cc12 : e633             [ 5] 	inc tmp_ahi				; only need to increment high byt
cc14 : e635             [ 5] 	inc tmp_bhi				; source and destination ptr
cc16 : ca               [ 2] 	dex						; page counter
AS65 Assembler for R6502 [1.42].                                     Page   94
-------------------------------- bank\bank0.s --------------------------------

cc17 : d0f1             [ 3] 	bne gr_copy_byte		; keep going for X pages
cc19 : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* gr_init
                             ;* First initialisation of screen
                             ;****************************************
cc1a :                       gr_init
cc1a : a210             [ 2] 	ldx #VDP_FLASH			; Default cursor flash rate
cc1c : 860b             [ 3] 	stx vdp_curtim
cc1e : 860c             [ 3] 	stx vdp_curcnt
cc20 : a200             [ 2] 	ldx #0
cc22 : 860e             [ 3] 	stx vdp_curstat
                             
                             	; Hard reset initial geom values (X=0)
cc24 : 204bcc           [ 6] 	jsr gr_init_geom
                             
                             	; Copy font from ROM to char base
cc27 : 20eacb           [ 6] 	jsr gr_init_font
                             
                             	; Go in to hires mode to generate tables
cc2a : 20a1cc           [ 6] 	jsr gr_init_hires
cc2d : 20dacc           [ 6] 	jsr gr_init_hires_tables
                             
                             	; But start in text mode
cc30 : 4c88cc           [ 3] 	jmp gr_init_screen_txt
                             
                             
                             ;****************************************
                             ;* gr_check_font_copy
                             ;* check font needs to be copied from
                             ;* current location to another
                             ;* A=high byte of page aligned font addr
                             ;* that the font needs to be at
                             ;****************************************
cc33 :                       gr_check_font_copy
                             	; Compare with current high byte
cc33 : c515             [ 3] 	cmp gr_scrngeom+gr_char+1
cc35 : f013             [ 3] 	beq gr_check_font_copy_done
                             	; save A as high byte of destination
cc37 : 8535             [ 3] 	sta tmp_blo+1
                             	; destination low is 0
cc39 : a900             [ 2] 	lda #0
cc3b : 8534             [ 3] 	sta tmp_blo
                             
                             	; Get source from current vdp structure
cc3d : a515             [ 3] 	lda gr_scrngeom+gr_char+1
cc3f : 8537             [ 3] 	sta tmp_clo+1
cc41 : a514             [ 3] 	lda gr_scrngeom+gr_char
cc43 : 8536             [ 3] 	sta tmp_clo
                             
                             	; Copy all 8 pages of font (std + alt) data
cc45 : a208             [ 2] 	ldx #8
cc47 : 2000cc           [ 6] 	jsr gr_copy_mem
cc4a :                       gr_check_font_copy_done
cc4a :                       gr_init_geom_done
cc4a : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* gr_init_geom
AS65 Assembler for R6502 [1.42].                                     Page   95
-------------------------------- bank\bank0.s --------------------------------

                             ;* initialise geometry entries from X
                             ;* position from base until -1
                             ;****************************************
cc4b :                       gr_init_geom
                             	; Which geom entry to init = Y
cc4b : bc5acc           [ 4] 	ldy gr_scrngeom_base,x
cc4e : 30fa             [ 3] 	bmi gr_init_geom_done		; Just somewhere with an 
                             	; skip to data and put in A
cc50 : e8               [ 2] 	inx
cc51 : bd5acc           [ 4] 	lda gr_scrngeom_base,x
                             	; save it in Y
cc54 : 991100           [ 5] 	sta gr_scrngeom,y
                             	; next entry
cc57 : e8               [ 2] 	inx
cc58 : d0f1             [ 3] 	bne gr_init_geom	; Always
                             	; Hope we don't get here - will crash!
                             
                             ; Geometry initialisation tables
cc5a :                       gr_scrngeom_base
cc5a : 1300                  	db gr_ink, 0
cc5c : 1416                  	db gr_paper, 16+6
cc5e : 1502                  	db gr_margin, 2
                             	; Not terminated by -1 : continues in to _txt va
                             ;* Geometry for text/lores
cc60 :                       gr_scrngeom_text
cc60 : 0000                  	db gr_mode, 0
                             
cc62 : 0300                  	db gr_char,   lo(TEXTCHAR)
cc64 : 04b4                  	db gr_char+1, hi(TEXTCHAR)
                             
cc66 : 0580                  	db gr_text_start,   lo(TEXTSCRN)
cc68 : 06bb                  	db gr_text_start+1, hi(TEXTSCRN)
                             
cc6a : 0928                  	db gr_text_w, 40
cc6c : 0a1c                  	db gr_text_h, 28
cc6e : ff                    	db -1
                             ;* Geometry for hires
cc6f :                       gr_scrngeom_hires
cc6f : 0001                  	db gr_mode, 1
                             
cc71 : 0100                  	db gr_hi_start,   lo(HISCRN)
cc73 : 02a0                  	db gr_hi_start+1, hi(HISCRN)
cc75 : 0300                  	db gr_char,   lo(HICHAR)
cc77 : 0498                  	db gr_char+1, hi(HICHAR)
                             
cc79 : 0568                  	db gr_text_start,   lo(HITEXT)
cc7b : 06bf                  	db gr_text_start+1, hi(HITEXT)
                             
cc7d : 1100                  	db gr_hires_x, 0
cc7f : 1200                  	db gr_hires_y, 0
                             
                             	; Only need to initialise text height, width is 
cc81 : 0a03                  	db gr_text_h, 3
                             
cc83 : 0f01                  	db gr_pixmode, 1
cc85 : 1006                  	db gr_pitch, 6
cc87 : ff                    	db -1
                             
                             
                             
                             ;****************************************
                             ;* gr_init_screen_txt
AS65 Assembler for R6502 [1.42].                                     Page   96
-------------------------------- bank\bank0.s --------------------------------

                             ;* initialise the screen in text mode
                             ;****************************************
cc88 :                       gr_init_screen_txt
cc88 : e60d             [ 5] 	inc vdp_curoff
                             
                             	; Check if font copy needed to 0xb400
cc8a : a9b4             [ 2] 	lda #hi(TEXTCHAR)
cc8c : 2033cc           [ 6] 	jsr gr_check_font_copy
                             
                             	; Initialise geom for text
cc8f : a206             [ 2] 	ldx #gr_scrngeom_text-gr_scrngeom_base
cc91 : 204bcc           [ 6] 	jsr gr_init_geom
                             
cc94 : 20fbd1           [ 6] 	jsr gr_spr_init					; SW Sprites are reset
                             
cc97 : a920             [ 2] 	lda #' '						; Blank is SPACE
cc99 : 8510             [ 3] 	sta vdp_blank
cc9b : 2020cd           [ 6] 	jsr gr_cls
                             
cc9e : c60d             [ 5] 	dec vdp_curoff
                             
cca0 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* gr_init_hires
                             ;* Input : X = Colour table fill value
                             ;* initialise the screen in hires mode
                             ;****************************************
cca1 :                       gr_init_hires
cca1 : e60d             [ 5] 	inc vdp_curoff
                             	; Check if font copy needed to 0x9800
cca3 : a998             [ 2] 	lda #hi(HICHAR)
cca5 : 2033cc           [ 6] 	jsr gr_check_font_copy
                             
                             	; Initialise geom for hires
cca8 : a215             [ 2] 	ldx #gr_scrngeom_hires-gr_scrngeom_base
ccaa : 204bcc           [ 6] 	jsr gr_init_geom
                             
ccad : a920             [ 2] 	lda #' '						; Blank is SPACE
ccaf : 8510             [ 3] 	sta vdp_blank
ccb1 : 2020cd           [ 6] 	jsr gr_cls
                             
                             	; Zero out hires area 0xa000 for 8000 (0x1f40) b
ccb4 : a900             [ 2] 	lda #lo(HISCRN)
ccb6 : 8532             [ 3] 	sta tmp_alo
ccb8 : a9a0             [ 2] 	lda #hi(HISCRN)
ccba : 8533             [ 3] 	sta tmp_ahi
ccbc : a940             [ 2] 	lda #0x40						; Set bit 6
ccbe : a000             [ 2] 	ldy #0
ccc0 : a200             [ 2] 	ldx #0
ccc2 :                       vdp_fill_vram_loop
ccc2 : 9132             [ 5] 	sta (tmp_alo),y
ccc4 : c8               [ 2] 	iny
ccc5 : d003             [ 3] 	bne vdp_fill_vram_noinc
ccc7 : e633             [ 5] 	inc tmp_ahi
ccc9 : e8               [ 2] 	inx
ccca :                       vdp_fill_vram_noinc
ccca : e01f             [ 2] 	cpx #hi(0x1f40)			; Reached page count?
cccc : d0f4             [ 3] 	bne vdp_fill_vram_loop
ccce : c040             [ 2] 	cpy #lo(0x1f40)			; Reached byte in page?
ccd0 : d0f0             [ 3] 	bne vdp_fill_vram_loop
                             
AS65 Assembler for R6502 [1.42].                                     Page   97
-------------------------------- bank\bank0.s --------------------------------

                             	; Set hires attribute in the magic location
ccd2 : a91e             [ 2] 	lda #30			; Hires attribute
ccd4 : 8ddfbf           [ 4] 	sta 0xbfdf		; Last pos of screen memory
                             
ccd7 : c60d             [ 5] 	dec vdp_curoff
ccd9 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* gr_init_hires_tables
                             ;* Generate the hires tables
                             ;* Do this whilst in hires mode
                             ;****************************************
ccda :                       gr_init_hires_tables
                             	; Initialise address pointer to start of high re
ccda : a900             [ 2] 	lda #lo(HISCRN)
ccdc : 8532             [ 3] 	sta tmp_alo
ccde : a9a0             [ 2] 	lda #hi(HISCRN)
cce0 : 8533             [ 3] 	sta tmp_ahi
                             	; Starting from row zero, do 200 rows
cce2 : a000             [ 2] 	ldy #0
cce4 :                       gr_init_tab_row
                             	; Save low and high bytes of screen address in t
cce4 : a532             [ 3] 	lda tmp_alo
cce6 : 99009c           [ 5] 	sta hires_row_low,y
cce9 : a533             [ 3] 	lda tmp_ahi
cceb : 99c89c           [ 5] 	sta hires_row_hi,y
                             	; add 40 ready for next row
ccee : 18               [ 2] 	clc
ccef : a532             [ 3] 	lda tmp_alo
ccf1 : 6928             [ 2] 	adc #40
ccf3 : 8532             [ 3] 	sta tmp_alo
ccf5 : a533             [ 3] 	lda tmp_ahi
ccf7 : 6900             [ 2] 	adc #0
ccf9 : 8533             [ 3] 	sta tmp_ahi
                             	; Max 200 rows
ccfb : c8               [ 2] 	iny
ccfc : c0c8             [ 2] 	cpy #200
ccfe : d0e4             [ 3] 	bne gr_init_tab_row
                             	; From column 0, do 240 columns
                             	; Mask starts at 0x20, when shifts to 0 then
                             	; the column increments
cd00 : a920             [ 2] 	lda #0x20
cd02 : 8534             [ 3] 	sta tmp_blo			; Pixel mask
cd04 : a200             [ 2] 	ldx #0				; Pixel column
cd06 : a000             [ 2] 	ldy #0				; Byte column
cd08 :                       gr_init_tab_col
                             	; Save current mask and column
cd08 : a534             [ 3] 	lda tmp_blo
cd0a : 9d809e           [ 5] 	sta hires_mask,x
cd0d : 98               [ 2] 	tya
cd0e : 9d909d           [ 5] 	sta hires_col,x
                             	; shift mask, if zero then increment col and res
cd11 : 4634             [ 5] 	lsr tmp_blo
cd13 : d005             [ 3] 	bne gr_init_tab_col_skip
cd15 : a920             [ 2] 	lda #0x20
cd17 : 8534             [ 3] 	sta tmp_blo
cd19 : c8               [ 2] 	iny
cd1a :                       gr_init_tab_col_skip
cd1a : e8               [ 2] 	inx
cd1b : e0f0             [ 2] 	cpx #240
cd1d : d0e9             [ 3] 	bne gr_init_tab_col
cd1f : 60               [ 6] 	rts
AS65 Assembler for R6502 [1.42].                                     Page   98
-------------------------------- bank\bank0.s --------------------------------

                             
                             
                             
                             ;****************************************
                             ;* gr_cls
                             ;* Clear the text screen
                             ;****************************************
cd20 :                       gr_cls
cd20 : e60d             [ 5] 	inc vdp_curoff
                             	; Set screen address for text mode
cd22 : a516             [ 3] 	lda gr_scrngeom+gr_text_start
cd24 : 8527             [ 3] 	sta gr_scrngeom+gr_geom_tmp
cd26 : a517             [ 3] 	lda gr_scrngeom+gr_text_start+1
cd28 : 8528             [ 3] 	sta gr_scrngeom+gr_geom_tmp+1
                             
cd2a : a61b             [ 3] 	ldx gr_scrngeom+gr_text_h		; Count of rows to cl
                             
                             	; X and Y count bytes to fill
cd2c :                       gr_cls_row
cd2c : a000             [ 2] 	ldy #0							; Count of columns
cd2e : a526             [ 3] 	lda gr_scrngeom+gr_margin		; Is there a margin?
cd30 : f00a             [ 3] 	beq gr_cls_skip_marg
cd32 : a525             [ 3] 	lda gr_scrngeom+gr_paper		; Set Paper
cd34 : 9127             [ 5] 	sta (gr_scrngeom+gr_geom_tmp),y
cd36 : c8               [ 2] 	iny
cd37 : a524             [ 3] 	lda gr_scrngeom+gr_ink			; Set Ink
cd39 : 9127             [ 5] 	sta (gr_scrngeom+gr_geom_tmp),y
cd3b : c8               [ 2] 	iny
cd3c :                       gr_cls_skip_marg
cd3c : a510             [ 3] 	lda vdp_blank
cd3e : 850f             [ 3] 	sta vdp_curval					; Under cursor is also blank
cd40 :                       gr_cls_col
cd40 : 9127             [ 5] 	sta (gr_scrngeom+gr_geom_tmp),y
cd42 : c8               [ 2] 	iny
cd43 : c41a             [ 3] 	cpy gr_scrngeom+gr_text_w		; Done all columns?
cd45 : d0f9             [ 3] 	bne gr_cls_col
                             	; Update pointer
cd47 : 18               [ 2] 	clc
cd48 : a527             [ 3] 	lda gr_scrngeom+gr_geom_tmp
cd4a : 651a             [ 3] 	adc gr_scrngeom+gr_text_w
cd4c : 8527             [ 3] 	sta gr_scrngeom+gr_geom_tmp
cd4e : a528             [ 3] 	lda gr_scrngeom+gr_geom_tmp+1
cd50 : 6900             [ 2] 	adc #0
cd52 : 8528             [ 3] 	sta gr_scrngeom+gr_geom_tmp+1
cd54 : ca               [ 2] 	dex								; 1 row done
cd55 : d0d5             [ 3] 	bne gr_cls_row					; Done all rows?
                             
                             	; set cursror position to top left
cd57 : a510             [ 3] 	lda vdp_blank
cd59 : 850f             [ 3] 	sta vdp_curval
cd5b : a626             [ 3] 	ldx gr_scrngeom+gr_margin
cd5d : a000             [ 2] 	ldy #0
cd5f : 38               [ 2] 	sec								; Init mode
cd60 : 2090cd           [ 6] 	jsr gr_set_cur_init
                             
cd63 : c60d             [ 5] 	dec vdp_curoff
                             
cd65 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* gr_getXY_base
                             ;* Get base screen address using Y coord only
AS65 Assembler for R6502 [1.42].                                     Page   99
-------------------------------- bank\bank0.s --------------------------------

                             ;* Input : X = y coord
                             ;* Output :	gr_geom_tmp updated with base
                             ;* Regs affected : A
                             ;****************************************
cd66 :                       gr_getXY_base
                             	; Find y offset using **X register**
cd66 : 18               [ 2] 	clc
cd67 : bdc3d1           [ 4] 	lda gr_offset_40lo,x
cd6a : 6516             [ 3] 	adc gr_scrngeom+gr_text_start
cd6c : 8527             [ 3] 	sta gr_scrngeom+gr_geom_tmp
cd6e : bddfd1           [ 4] 	lda gr_offset_40hi,x
cd71 : 6517             [ 3] 	adc gr_scrngeom+gr_text_start+1
cd73 : 8528             [ 3] 	sta gr_scrngeom+gr_geom_tmp+1
                             
                             	; A = high byte of base address
cd75 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* gr_plot
                             ;* Write a byte in the screen pos
                             ;* Input :	Y,X = coord, A = Byte to put
                             ;*			X = Y COORDINATE
                             ;*			Y = X COORDINATE!!
                             ;* Output : None
                             ;* Regs affected : All
                             ;****************************************
cd76 :                       gr_plot
cd76 : 48               [ 3] 	pha					; Save byte to put
cd77 : 2066cd           [ 6] 	jsr gr_getXY_base	; base addre
cd7a : 68               [ 4] 	pla					; Get byte to put
cd7b : 9127             [ 5] 	sta (gr_scrngeom+gr_geom_tmp),y
cd7d : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* gr_put
                             ;* Write a byte in the current cursor position
                             ;* Input : A = Byte to put
                             ;* Output : None
                             ;* Regs affected : All
                             ;****************************************
cd7e :                       gr_put
cd7e : e60d             [ 5] 	inc vdp_curoff		; Disable cusror
cd80 : 850f             [ 3] 	sta vdp_curval		; Update cursor value
                             	; Base address plus X offset
cd82 : a41c             [ 3] 	ldy gr_scrngeom+gr_cur_x
cd84 : 911e             [ 5] 	sta (gr_scrngeom+gr_cur_ptr),y
cd86 : c60d             [ 5] 	dec vdp_curoff		; Allow cursor flashing
cd88 : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* gr_get
                             ;* Get the byte in the screen pos
                             ;* Input : Y,X = coord (**Y = X coordinate!!)
                             ;* Output : X,Y = address, A = peeked byte
                             ;* Regs affected : All
                             ;****************************************
cd89 :                       gr_get
cd89 : 2066cd           [ 6] 	jsr gr_getXY_base	; Base address
cd8c : b127             [ 5] 	lda (gr_scrngeom+gr_geom_tmp),y
cd8e : 60               [ 6] 	rts
                             
AS65 Assembler for R6502 [1.42].                                     Page  100
-------------------------------- bank\bank0.s --------------------------------

                             ;****************************************
                             ;* gr_set_cur
                             ;* Set the cursor position
                             ;* Input : X, Y = position
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
cd8f :                       gr_set_cur
cd8f : 18               [ 2] 	clc
cd90 :                       gr_set_cur_init
cd90 : e60d             [ 5] 	inc vdp_curoff				; Disable cursor
                             
cd92 : b00e             [ 3] 	bcs gr_set_cur_skip			; Skip restore if C=1
cd94 : 8632             [ 3] 	stx tmp_alo
cd96 : 8433             [ 3] 	sty tmp_ahi
                             	; First restore what is under the cursor
                             	; in case cursor is ON
cd98 : 8427             [ 3] 	sty gr_scrngeom+gr_geom_tmp
cd9a : a50f             [ 3] 	lda vdp_curval
cd9c : a41c             [ 3] 	ldy gr_scrngeom+gr_cur_x
cd9e : 911e             [ 5] 	sta (gr_scrngeom+gr_cur_ptr),y
cda0 : a427             [ 3] 	ldy gr_scrngeom+gr_geom_tmp
cda2 :                       gr_set_cur_skip
                             	; Save new cursor position
cda2 : 861c             [ 3] 	stx gr_scrngeom+gr_cur_x
cda4 : 841d             [ 3] 	sty gr_scrngeom+gr_cur_y
                             
                             	; Now calculate the new cursor vram address
cda6 : a61d             [ 3] 	ldx gr_scrngeom+gr_cur_y
cda8 : 2066cd           [ 6] 	jsr gr_getXY_base
                             	; Update pointer in tmp, A already has high byte
cdab : 851f             [ 3] 	sta gr_scrngeom+gr_cur_ptr+1
cdad : a527             [ 3] 	lda gr_scrngeom+gr_geom_tmp
cdaf : 851e             [ 3] 	sta gr_scrngeom+gr_cur_ptr
                             	; Read screen at this position, offset with X co
cdb1 : a41c             [ 3] 	ldy gr_scrngeom+gr_cur_x
cdb3 : b11e             [ 5] 	lda (gr_scrngeom+gr_cur_ptr),y
cdb5 : 850f             [ 3] 	sta vdp_curval
                             	; Reset cursor so it's visible
cdb7 : a900             [ 2] 	lda #0
cdb9 : 850e             [ 3] 	sta vdp_curstat
cdbb : a901             [ 2] 	lda #1
cdbd : 850c             [ 3] 	sta vdp_curcnt
                             
cdbf : c60d             [ 5] 	dec vdp_curoff
                             
cdc1 : 60               [ 6] 	rts
                             
                             
                             
                             ;****************************************
                             ;* gr_scroll_up
                             ;* Scroll screen one line up
                             ;****************************************
cdc2 :                       gr_scroll_up
cdc2 : e60d             [ 5] 	inc vdp_curoff
                             
                             	; Set source in a and dest in b
                             	; b is first line, source is second
cdc4 : 18               [ 2] 	clc
cdc5 : a516             [ 3] 	lda gr_scrngeom+gr_text_start
cdc7 : 8534             [ 3] 	sta tmp_blo
AS65 Assembler for R6502 [1.42].                                     Page  101
-------------------------------- bank\bank0.s --------------------------------

cdc9 : 651a             [ 3] 	adc gr_scrngeom+gr_text_w
cdcb : 8532             [ 3] 	sta tmp_alo
cdcd : a517             [ 3] 	lda gr_scrngeom+gr_text_start+1
cdcf : 8535             [ 3] 	sta tmp_bhi
cdd1 : 6900             [ 2] 	adc #0
cdd3 : 8533             [ 3] 	sta tmp_ahi
                             
                             	; Restore what was underneath cursor
cdd5 : a50f             [ 3] 	lda vdp_curval
cdd7 : a41c             [ 3] 	ldy gr_scrngeom+gr_cur_x
cdd9 : 911e             [ 5] 	sta (gr_scrngeom+gr_cur_ptr),y
                             
                             	; x = lines to scroll (1 less than screen height
cddb : a61b             [ 3] 	ldx gr_scrngeom+gr_text_h
cddd : ca               [ 2] 	dex
                             
cdde :                       gr_scroll_cpy_ln
                             	; Start from right hand edge (easier)
cdde : a41a             [ 3] 	ldy gr_scrngeom+gr_text_w
cde0 : 88               [ 2] 	dey
cde1 :                       gr_scroll_char
                             	; get char from source and copy to dest
cde1 : b132             [ 5] 	lda (tmp_alo),y
cde3 : 9134             [ 5] 	sta (tmp_blo),y
cde5 : 88               [ 2] 	dey
cde6 : 10f9             [ 3] 	bpl gr_scroll_char
                             
                             	; Update source address
cde8 : 18               [ 2] 	clc
cde9 : a532             [ 3] 	lda tmp_alo
cdeb : 651a             [ 3] 	adc gr_scrngeom+gr_text_w
cded : 8532             [ 3] 	sta tmp_alo
cdef : a533             [ 3] 	lda tmp_ahi
cdf1 : 6900             [ 2] 	adc #0
cdf3 : 8533             [ 3] 	sta tmp_ahi
                             	; Update destination address
cdf5 : 18               [ 2] 	clc
cdf6 : a534             [ 3] 	lda tmp_blo
cdf8 : 651a             [ 3] 	adc gr_scrngeom+gr_text_w
cdfa : 8534             [ 3] 	sta tmp_blo
cdfc : a535             [ 3] 	lda tmp_bhi
cdfe : 6900             [ 2] 	adc #0
ce00 : 8535             [ 3] 	sta tmp_bhi
                             
                             	; One line complete
ce02 : ca               [ 2] 	dex
ce03 : d0d9             [ 4] 	bne gr_scroll_cpy_ln
                             
                             	; Source is pointing at last line
                             	; Last line needs filling
ce05 : a000             [ 2] 	ldy #0							; Start from left
ce07 : a526             [ 3] 	lda gr_scrngeom+gr_margin		; Margin?
ce09 : f00a             [ 3] 	beq gr_scroll_marg				; Skip if not
ce0b : a525             [ 3] 	lda gr_scrngeom+gr_paper		; Set Paper
ce0d : 9127             [ 5] 	sta (gr_scrngeom+gr_geom_tmp),y
ce0f : c8               [ 2] 	iny
ce10 : a524             [ 3] 	lda gr_scrngeom+gr_ink			; Set Ink
ce12 : 9127             [ 5] 	sta (gr_scrngeom+gr_geom_tmp),y
ce14 : c8               [ 2] 	iny
ce15 :                       gr_scroll_marg
                             	; Needs to be filled with blank
ce15 : a510             [ 3] 	lda vdp_blank
AS65 Assembler for R6502 [1.42].                                     Page  102
-------------------------------- bank\bank0.s --------------------------------

ce17 : 850f             [ 3] 	sta vdp_curval			; Also this is the cursor value
ce19 :                       gr_scroll_erase_ln
ce19 : 9134             [ 5] 	sta (tmp_blo),y
ce1b : c8               [ 2] 	iny
ce1c : c41a             [ 3] 	cpy gr_scrngeom+gr_text_w
ce1e : d0f9             [ 3] 	bne gr_scroll_erase_ln
                             
ce20 : c60d             [ 5] 	dec vdp_curoff
                             
ce22 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* gr_new_ln
                             ;* Carry out a new line
                             ;* Input : None
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
ce23 :                       gr_new_ln
                             	; X pos is zero, Y needs to increment
ce23 : a626             [ 3] 	ldx gr_scrngeom+gr_margin
ce25 : a41d             [ 3] 	ldy gr_scrngeom+gr_cur_y
ce27 : c8               [ 2] 	iny
ce28 : c41b             [ 3] 	cpy gr_scrngeom+gr_text_h
ce2a : d00c             [ 3] 	bne gr_nl_skip_nl
                             	; If got here then screen needs to scroll
                             	; Common routine also used by cursor right
ce2c :                       gr_scroll_routine
ce2c : 88               [ 2] 	dey
ce2d : 8a               [ 2] 	txa
ce2e : 48               [ 3] 	pha
ce2f : 98               [ 2] 	tya
ce30 : 48               [ 3] 	pha
ce31 : 20c2cd           [ 6] 	jsr gr_scroll_up
ce34 : 68               [ 4] 	pla
ce35 : a8               [ 2] 	tay
ce36 : 68               [ 4] 	pla
ce37 : aa               [ 2] 	tax
ce38 :                       gr_nl_skip_nl
ce38 : 4c8fcd           [ 3] 	jmp gr_set_cur
                             
                             
                             ;****************************************
                             ;* gr_cur_right
                             ;* Advance cursor position
                             ;* Input : None
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
ce3b :                       gr_cur_right
                             	; Load cursor x,y position
ce3b : a61c             [ 3] 	ldx gr_scrngeom+gr_cur_x
ce3d : a41d             [ 3] 	ldy gr_scrngeom+gr_cur_y
                             
                             	; Move cursor right
ce3f : e8               [ 2] 	inx
                             	; Check if reached past edge of line
ce40 : e41a             [ 3] 	cpx gr_scrngeom+gr_text_w
ce42 : d0f4             [ 3] 	bne gr_nl_skip_nl
                             	; If got here then wrap to next line
ce44 : a626             [ 3] 	ldx gr_scrngeom+gr_margin
ce46 : c8               [ 2] 	iny
AS65 Assembler for R6502 [1.42].                                     Page  103
-------------------------------- bank\bank0.s --------------------------------

ce47 : c41b             [ 3] 	cpy gr_scrngeom+gr_text_h
ce49 : f0e1             [ 3] 	beq gr_scroll_routine		; Common scroll routine
ce4b : d0eb             [ 3] 	bne gr_nl_skip_nl			; Common set cursor
                             
                             ;****************************************
                             ;* gr_cur_left
                             ;* Advance cursor left
                             ;* Input : None
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
ce4d :                       gr_cur_left
                             	; Load cursor x,y position, load X last to check
ce4d : a41d             [ 3] 	ldy gr_scrngeom+gr_cur_y
ce4f : a61c             [ 3] 	ldx gr_scrngeom+gr_cur_x
                             
                             	; Decrement screen pointer
                             	; Move cursor left
ce51 : e426             [ 3] 	cpx gr_scrngeom+gr_margin	; Already at left marg
ce53 : d007             [ 3] 	bne gr_cur_skip_at_left		; No, then just go left
ce55 : c000             [ 2] 	cpy #0						; Else check if can wrap up
ce57 : f007             [ 3] 	beq gr_cur_skip_at_tl
ce59 : 88               [ 2] 	dey
ce5a : a61a             [ 3] 	ldx gr_scrngeom+gr_text_w
ce5c :                       gr_cur_skip_at_left
ce5c : ca               [ 2] 	dex
ce5d : 4c8fcd           [ 3] 	jmp gr_set_cur
                             
ce60 :                       gr_cur_skip_at_tl
ce60 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* gr_cur_up
                             ;* Advance cursor up
                             ;* Input : None
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
ce61 :                       gr_cur_up
                             	; Load cursor x,y position, load Y last to check
ce61 : a61c             [ 3] 	ldx gr_scrngeom+gr_cur_x
ce63 : a41d             [ 3] 	ldy gr_scrngeom+gr_cur_y
                             	; if y==0 then don't do anything
ce65 : f0f9             [ 3] 	beq gr_cur_skip_at_tl	; Just somewhere with an r
ce67 : 88               [ 2] 	dey
ce68 : 4c8fcd           [ 3] 	jmp gr_set_cur
                             
                             ;****************************************
                             ;* gr_cur_down
                             ;* Advance cursor down
                             ;* Input : None
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
ce6b :                       gr_cur_down
                             	; Load cursor x,y position
ce6b : a61c             [ 3] 	ldx gr_scrngeom+gr_cur_x
ce6d : a41d             [ 3] 	ldy gr_scrngeom+gr_cur_y
ce6f : c8               [ 2] 	iny
                             	; If already at  bottom then don't do anything
ce70 : c41b             [ 3] 	cpy gr_scrngeom+gr_text_h			
ce72 : f0ec             [ 3] 	beq gr_cur_skip_at_tl				; Just somewhere with a
AS65 Assembler for R6502 [1.42].                                     Page  104
-------------------------------- bank\bank0.s --------------------------------

ce74 : 208fcd           [ 6] 	jsr gr_set_cur
                             
ce77 :                       gr_cur_skip_at_bot
ce77 : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* gr_del
                             ;* Action del
                             ;* Input : None
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
ce78 :                       gr_del
ce78 : 204dce           [ 6] 	jsr gr_cur_left
ce7b : a920             [ 2] 	lda #' '							; Put a space
ce7d : 4c7ecd           [ 3] 	jmp gr_put
                             
                             ;****************************************
                             ;* gr_get_key
                             ;* Waits for a key press, C=1 synchronous
                             ;* A = Key code, C=0 means valid code
                             ;****************************************
ce80 :                       gr_get_key
                             	; save X,Y but A is ok to trample
ce80 : 8a               [ 2] 	txa
ce81 : 48               [ 3] 	pha
ce82 : 98               [ 2] 	tya
ce83 : 48               [ 3] 	pha
ce84 :                       gr_get_key_2
ce84 : 08               [ 3] 	php
ce85 : 203fc8           [ 6] 	jsr kb_get_key
ce88 : 9006             [ 3] 	bcc gr_key_check_key
ce8a : 28               [ 4] 	plp									; Get async pref
ce8b : b0f7             [ 3] 	bcs	gr_get_key_2					; Keep checking if sync
ce8d : 38               [ 2] 	sec
ce8e : b019             [ 3] 	bcs gr_key_tidy_up					; Finish if not
ce90 :                       gr_key_check_key						; Check the key pressed
ce90 : c901             [ 2] 	cmp #UTF_ACK						; Copy key pressed?
ce92 : d004             [ 3] 	bne gr_key_skip_copy
ce94 : a50f             [ 3] 	lda vdp_curval						; If yes the get char under 
ce96 : b00f             [ 3] 	bcs gr_key_got_key					; Always branches (n=1, c
ce98 :                       gr_key_skip_copy
ce98 : c914             [ 2] 	cmp #CTRL_CAPS
ce9a : d00b             [ 3] 	bne gr_key_got_key
ce9c : a52c             [ 3] 	lda kb_stat							; Toggle caps bit
ce9e : 4901             [ 2] 	eor #KB_CAPSLK
cea0 : 852c             [ 3] 	sta kb_stat
cea2 : 28               [ 4] 	plp									; Get back synchronous pref
cea3 : b0df             [ 3] 	bcs gr_get_key_2					; And check again for sync
cea5 : 900b             [ 3] 	bcc gr_key_no_key					; Else no key
cea7 :                       gr_key_got_key
cea7 : 28               [ 4] 	plp
cea8 : 18               [ 2] 	clc									; Ensure C=0 for valid key
cea9 :                       gr_key_tidy_up
                             	; restore X,Y but don't lose A
cea9 : 8538             [ 3] 	sta tmp_d
ceab : 68               [ 4] 	pla
ceac : a8               [ 2] 	tay
cead : 68               [ 4] 	pla
ceae : aa               [ 2] 	tax
ceaf : a538             [ 3] 	lda tmp_d
AS65 Assembler for R6502 [1.42].                                     Page  105
-------------------------------- bank\bank0.s --------------------------------

ceb1 : 60               [ 6] 	rts
ceb2 :                       gr_key_no_key
ceb2 : 28               [ 4] 	plp
ceb3 : 38               [ 2] 	sec									; Ensure C=1 for invalid key
ceb4 : b0f3             [ 3] 	bcs gr_key_tidy_up					; Always branches
                             
                             ;****************************************
                             ;* gr_put_byte
                             ;* Put a byte out
                             ;* Input : A = Byte to put
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
ceb6 :                       gr_put_byte
                             	_pushAXY
                             
cebf : 20c8ce           [ 6] 	jsr gr_put_byte_low
                             	_pullAXY
                             
cec7 :                       gr_no_special
cec7 : 60               [ 6] 	rts
                             
cec8 :                       gr_put_byte_low
cec8 : c97f             [ 2] 	cmp #UTF_DEL			; Del key
ceca : f004             [ 3] 	beq gr_process_special
cecc : c920             [ 2] 	cmp #32					; Special char?
cece : b01b             [ 3] 	bcs gr_printable		; >=32 == carry clear
ced0 :                       gr_process_special
                             	; Else find special behaviour to do
ced0 : a2ff             [ 2] 	ldx #-1
ced2 : 8532             [ 3] 	sta tmp_alo
ced4 :                       gr_special_loop
ced4 : e8               [ 2] 	inx
ced5 : bdf1ce           [ 4] 	lda gr_special_ch,x
ced8 : f0ed             [ 3] 	beq gr_no_special		; Somewhere with an rts!
ceda : c532             [ 3] 	cmp tmp_alo
cedc : d0f6             [ 3] 	bne gr_special_loop
cede : bdface           [ 4] 	lda gr_special_fn_lo,x
cee1 : 8532             [ 3] 	sta tmp_alo
cee3 : bd02cf           [ 4] 	lda gr_special_fn_hi,x
cee6 : 8533             [ 3] 	sta tmp_ahi
cee8 : 6c3200           [ 6] 	jmp (tmp_alo)
                             
                             	;	Normal caracter processing here.
ceeb :                       gr_printable
                             	; Place in current position and move right
ceeb : 207ecd           [ 6] 	jsr gr_put
ceee : 4c3bce           [ 3] 	jmp gr_cur_right
                             
cef1 :                       gr_special_ch
cef1 : 0d                    	db UTF_CR
cef2 : 7f                    	db UTF_DEL
cef3 : 08                    	db CRSR_LEFT
cef4 : 09                    	db CRSR_RIGHT
cef5 : 0b                    	db CRSR_UP
cef6 : 0a                    	db CRSR_DOWN
cef7 : 0c                    	db UTF_FF
cef8 : 07                    	db UTF_BEL
cef9 : 00                    	db 0
                             
cefa :                       gr_special_fn_lo
cefa : 23                    	db lo(gr_new_ln)
AS65 Assembler for R6502 [1.42].                                     Page  106
-------------------------------- bank\bank0.s --------------------------------

cefb : 78                    	db lo(gr_del)
cefc : 4d                    	db lo(gr_cur_left)
cefd : 3b                    	db lo(gr_cur_right)
cefe : 61                    	db lo(gr_cur_up)
ceff : 6b                    	db lo(gr_cur_down)
cf00 : 20                    	db lo(gr_cls)
cf01 : d3                    	db lo(init_snd)
                             
cf02 :                       gr_special_fn_hi
cf02 : ce                    	db hi(gr_new_ln)
cf03 : ce                    	db hi(gr_del)
cf04 : ce                    	db hi(gr_cur_left)
cf05 : ce                    	db hi(gr_cur_right)
cf06 : ce                    	db hi(gr_cur_up)
cf07 : ce                    	db hi(gr_cur_down)
cf08 : cd                    	db hi(gr_cls)
cf09 : d3                    	db hi(init_snd)
                             
                             ; Special command to print to the screen
                             ; Y,A=Message, zero terminated
cf0a :                       gr_print_msg
cf0a : 8449             [ 3] 	sty num_tmp
cf0c : 854a             [ 3] 	sta num_tmp+1
cf0e : a000             [ 2] 	ldy #0
cf10 :                       gr_print_msg_loop
cf10 : b149             [ 5] 	lda (num_tmp),y
cf12 : f006             [ 3] 	beq gr_print_msg_done
cf14 : 20b6ce           [ 6] 	jsr gr_put_byte
cf17 : c8               [ 2] 	iny
cf18 : d0f6             [ 3] 	bne gr_print_msg_loop
cf1a :                       gr_print_msg_done
cf1a : a54a             [ 3] 	lda num_tmp+1
cf1c : a449             [ 3] 	ldy num_tmp
cf1e : 60               [ 6] 	rts
                             
                             ;******* HIRES STUFF *****
                             
                             
                             ;****************************************
                             ;* gr_hcode
                             ;* Plot bytecode at hires X,Y coordinates with co
                             ;* Input : X,Y = coord, A = Char code
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
cf1f :                       gr_hcode
cf1f : 48               [ 3] 	pha
                             	; Set up destination position tmpalo,hi and Y
cf20 : 20e5cf           [ 6] 	jsr gr_point_setup
cf23 : a208             [ 2] 	ldx #8				; Always do 8 rows like a character
cf25 :                       gr_hcode_loop
cf25 : 68               [ 4] 	pla 				; Get the code to place
cf26 : 48               [ 3] 	pha					; Need to save it back
cf27 : 9132             [ 5] 	sta (tmp_alo),y		; Store it in destination
cf29 : 18               [ 2] 	clc
cf2a : a532             [ 3] 	lda tmp_alo			; Update base pointer
cf2c : 651a             [ 3] 	adc gr_scrngeom+gr_text_w
cf2e : 8532             [ 3] 	sta tmp_alo
cf30 : a533             [ 3] 	lda tmp_ahi
cf32 : 6900             [ 2] 	adc #0
cf34 : 8533             [ 3] 	sta tmp_ahi
cf36 : ca               [ 2] 	dex
AS65 Assembler for R6502 [1.42].                                     Page  107
-------------------------------- bank\bank0.s --------------------------------

cf37 : d0ec             [ 3] 	bne gr_hcode_loop
cf39 : 68               [ 4] 	pla
cf3a : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* gr_hchar
                             ;* Plot character to hires X,Y coordinates with c
                             ;* Input : X,Y = coord, A = Char code
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
cf3b :                       gr_hchar
                             	; If char code < 32 then plot attribute
cf3b : c91f             [ 2] 	cmp #31
cf3d : 90e0             [ 3] 	bcc gr_hcode
                             	; Multiply char code by 8
                             	; and add to char font base
                             	; tmp_clo contains base address
cf3f : 0a               [ 2] 	asl a
cf40 : 2637             [ 5] 	rol tmp_chi
cf42 : 0a               [ 2] 	asl a
cf43 : 2637             [ 5] 	rol tmp_chi
cf45 : 0a               [ 2] 	asl a
cf46 : 2637             [ 5] 	rol tmp_chi
cf48 : 18               [ 2] 	clc
cf49 : 6514             [ 3] 	adc gr_scrngeom+gr_char
cf4b : 8536             [ 3] 	sta tmp_clo
cf4d : a537             [ 3] 	lda tmp_chi
cf4f : 2907             [ 2] 	and #7
cf51 : 6515             [ 3] 	adc gr_scrngeom+gr_char+1
cf53 : 8537             [ 3] 	sta tmp_chi
                             
                             	; Set up destination position
cf55 : 20e5cf           [ 6] 	jsr gr_point_setup
                             	; tmp_alo contains address including column offs
cf58 : 18               [ 2] 	clc
cf59 : 98               [ 2] 	tya
cf5a : 6532             [ 3] 	adc tmp_alo
cf5c : 8532             [ 3] 	sta tmp_alo
cf5e : a533             [ 3] 	lda tmp_ahi
cf60 : 6900             [ 2] 	adc #0
cf62 : 8533             [ 3] 	sta tmp_ahi
                             
cf64 : a534             [ 3] 	lda tmp_blo					; Get the mask
cf66 : a207             [ 2] 	ldx #7
cf68 :                       gr_hchar_mask					; Calculate how many shifts to 
cf68 : ca               [ 2] 	dex
cf69 : 4a               [ 2] 	lsr a
cf6a : d0fc             [ 3] 	bne gr_hchar_mask
cf6c : 8634             [ 3] 	stx tmp_blo					; number between 1 and 6 : shift
                             
                             	; copy font bytes and shift the required number 
                             	; go from bottom to top as data gets stored on t
cf6e : a007             [ 2] 	ldy #7
cf70 :                       gr_hchar_getfont
cf70 : b136             [ 5] 	lda (tmp_clo),y
cf72 : 853d             [ 3] 	sta ztmp_24
cf74 : a900             [ 2] 	lda #0
cf76 : 853e             [ 3] 	sta ztmp_24+1
                             
                             	; shift right number of times
cf78 : a634             [ 3] 	ldx tmp_blo
AS65 Assembler for R6502 [1.42].                                     Page  108
-------------------------------- bank\bank0.s --------------------------------

cf7a :                       gr_hchar_rot1bit
cf7a : ca               [ 2] 	dex
cf7b : f00d             [ 3] 	beq gr_hchar_rot1bit_nx
cf7d : 463d             [ 5] 	lsr ztmp_24					; Rotate left hand side
cf7f : a53e             [ 3] 	lda ztmp_24+1				; Rotate right hand side
cf81 : 9002             [ 3] 	bcc gr_hchar_rot1bit_bcc
cf83 : 0940             [ 2] 	ora #0x40					; account for 6 bits per byte
cf85 :                       gr_hchar_rot1bit_bcc
cf85 : 4a               [ 2] 	lsr a
cf86 : 853e             [ 3] 	sta ztmp_24+1
cf88 : 10f0             [ 3] 	bpl gr_hchar_rot1bit		; Always as lsr sets N=0
cf8a :                       gr_hchar_rot1bit_nx
cf8a : a53e             [ 3] 	lda ztmp_24+1				; Get RHS
cf8c : 48               [ 3] 	pha							; Push RHS on to stack
cf8d : a53d             [ 3] 	lda ztmp_24					; Get LHS
cf8f : 48               [ 3] 	pha							; Push that too - LH gets pulled first
cf90 : 88               [ 2] 	dey							; Bottom to to lines
cf91 : 10dd             [ 3] 	bpl gr_hchar_getfont
                             
                             	; Now copy shift source to destination, accounti
cf93 : a200             [ 2] 	ldx #0
cf95 :                       gr_hchar_copyline
cf95 : a420             [ 3] 	ldy gr_scrngeom+gr_pixmode	; Mode determines how
cf97 : f024             [ 3] 	beq gr_hchar_copyline_0
cf99 : c002             [ 2] 	cpy #2
cf9b : f010             [ 3] 	beq gr_hchar_copyline_2
                             
                             	; Mode = 1 : OR
cf9d : a000             [ 2] 	ldy #0						; Get lh side source
cf9f : 68               [ 4] 	pla
cfa0 : 1132             [ 5] 	ora (tmp_alo),y
cfa2 : 9132             [ 5] 	sta (tmp_alo),y
cfa4 : c8               [ 2] 	iny							; Get rh side source
cfa5 : 68               [ 4] 	pla
cfa6 : 1132             [ 5] 	ora (tmp_alo),y
cfa8 : 9132             [ 5] 	sta (tmp_alo),y
cfaa : 4cd2cf           [ 3] 	jmp gr_hchar_copyline_nx
cfad :                       gr_hchar_copyline_2
                             	; Mode = 2 : EOR
cfad : a000             [ 2] 	ldy #0						; Get lh side source
cfaf : 68               [ 4] 	pla
cfb0 : 5132             [ 5] 	eor (tmp_alo),y
cfb2 : 9132             [ 5] 	sta (tmp_alo),y
cfb4 : c8               [ 2] 	iny							; Get rh side source
cfb5 : 68               [ 4] 	pla
cfb6 : 5132             [ 5] 	eor (tmp_alo),y
cfb8 : 9132             [ 5] 	sta (tmp_alo),y
cfba : 4cd2cf           [ 3] 	jmp gr_hchar_copyline_nx
cfbd :                       gr_hchar_copyline_0
                             	; Mode = 0 : erase
cfbd : a000             [ 2] 	ldy #0						; Get lh side source
cfbf : 68               [ 4] 	pla
cfc0 : 853d             [ 3] 	sta ztmp_24
cfc2 : 1132             [ 5] 	ora (tmp_alo),y
cfc4 : 453d             [ 3] 	eor ztmp_24
cfc6 : 9132             [ 5] 	sta (tmp_alo),y
cfc8 : c8               [ 2] 	iny							; Get rh side source
cfc9 : 68               [ 4] 	pla
cfca : 853d             [ 3] 	sta ztmp_24
cfcc : 1132             [ 5] 	ora (tmp_alo),y
cfce : 453d             [ 3] 	eor ztmp_24
cfd0 : 9132             [ 5] 	sta (tmp_alo),y
AS65 Assembler for R6502 [1.42].                                     Page  109
-------------------------------- bank\bank0.s --------------------------------

cfd2 :                       gr_hchar_copyline_nx
cfd2 : 18               [ 2] 	clc							; Next address
cfd3 : a532             [ 3] 	lda tmp_alo
cfd5 : 6928             [ 2] 	adc #40
cfd7 : 8532             [ 3] 	sta tmp_alo
cfd9 : a533             [ 3] 	lda tmp_alo+1
cfdb : 6900             [ 2] 	adc #0
cfdd : 8533             [ 3] 	sta tmp_alo+1
cfdf : e8               [ 2] 	inx
cfe0 : e008             [ 2] 	cpx #8
cfe2 : d0b1             [ 3] 	bne gr_hchar_copyline
cfe4 : 60               [ 6] 	rts							; Done after 8 lines
                             
                             ;****************************************
                             ;* gr_point_setup
                             ;* Calculate information about a pixel location
                             ;* Input : X,Y = coord
                             ;* Output : None
                             ;* Regs affected :
                             ;* tmp_alo,hi contains the row base address
                             ;* tmp_blo contains the mask index
                             ;* tmp_bhi contains the column offset in to row
                             ;* Y is same as tmp_bhi
                             ;* X is same as tmp_blo
                             ;****************************************
cfe5 :                       gr_point_setup
                             	; Get row address
cfe5 : b9009c           [ 4] 	lda hires_row_low,y
cfe8 : 8532             [ 3] 	sta tmp_alo
cfea : b9c89c           [ 4] 	lda hires_row_hi,y
cfed : 8533             [ 3] 	sta tmp_ahi
                             	; Get the pixel mask
cfef : bd809e           [ 4] 	lda hires_mask,x
cff2 : 8534             [ 3] 	sta tmp_blo
                             	; Get the column offset to Y
cff4 : bc909d           [ 4] 	ldy hires_col,x
cff7 : 60               [ 6] 	rts
                             
cff8 :                       gr_set_hires_cur
cff8 : 8622             [ 3] 	stx gr_scrngeom+gr_hires_x
cffa : 8423             [ 3] 	sty gr_scrngeom+gr_hires_y
cffc : 60               [ 6] 	rts
                             
                             ;* Get pixel value at X,Y in to A
cffd :                       gr_pixel
cffd : 20e5cf           [ 6] 	jsr gr_point_setup				; Set up mask and addresse
d000 : b132             [ 5] 	lda (tmp_alo),y					; Get screen byte
d002 : 2534             [ 3] 	and tmp_blo						; Check if pixel coincides with
d004 : 60               [ 6] 	rts
                             
                             ;* Plot a point based on X,Y coordinates
d005 :                       gr_point
d005 : e0f0             [ 2] 	cpx #240						; Check bounds
d007 : b028             [ 3] 	bcs gr_point_done
d009 : c0c8             [ 2] 	cpy #200
d00b : b024             [ 3] 	bcs gr_point_done
                             
                             	;** FOR SPEED COPYING THE POINT SETUP ROUTINE
                             	; Get row address
d00d : b9009c           [ 4] 	lda hires_row_low,y
d010 : 8532             [ 3] 	sta tmp_alo
d012 : b9c89c           [ 4] 	lda hires_row_hi,y
AS65 Assembler for R6502 [1.42].                                     Page  110
-------------------------------- bank\bank0.s --------------------------------

d015 : 8533             [ 3] 	sta tmp_ahi
                             	; Get the pixel mask
d017 : bd809e           [ 4] 	lda hires_mask,x
d01a : 8534             [ 3] 	sta tmp_blo
                             	; Get the column offset to Y
d01c : bc909d           [ 4] 	ldy hires_col,x
                             
                             ;	jsr gr_point_setup				; Set up mask and address
                             ;* Plot a point based on tmp_alo base, Y offset a
d01f : b132             [ 5] 	lda (tmp_alo),y					; Get screen byte
d021 : a620             [ 3] 	ldx gr_scrngeom+gr_pixmode		; Look at the mode
d023 : e002             [ 2] 	cpx #2							; If eor mode then go and write
d025 : f006             [ 3] 	beq gr_point_eor
d027 : 0534             [ 3] 	ora tmp_blo						; Or with MASK
d029 : e000             [ 2] 	cpx #0							; But if not then eor
d02b : d002             [ 3] 	bne gr_point_write
d02d :                       gr_point_eor
d02d : 4534             [ 3] 	eor tmp_blo						; EOR with MASK
d02f :                       gr_point_write
d02f : 9132             [ 5] 	sta (tmp_alo),y
d031 :                       gr_point_done
d031 : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* gr_circle
                             ;* Draw a circle centre x0,y0, radius r
                             ;* Input :	num_a   = x0
                             ;*			num_a+1 = y0
                             ;*			num_a+2 = r
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
d032 :                       gr_circle
                             ; Local definitions of temp space to make
                             ; the rest of the code easier to read
003d =                       grc_x0 	= (num_a)
003e =                       grc_y0 	= (num_a+1)
003f =                       grc_r 	= (num_a+2)
0040 =                       grc_x 	= (num_a+3)
0042 =                       grc_y	= (num_b+1)
0043 =                       grc_d	= (num_b+2)
                             
                             	;x = radius
d032 : a53f             [ 3] 	lda grc_r
d034 : 8540             [ 3] 	sta grc_x
                             	;decision = 1 - x
d036 : a900             [ 2] 	lda #0
                             	;y = 0
d038 : 8542             [ 3] 	sta grc_y
d03a : 18               [ 2] 	clc			; A=0 so CLC subtracts 1 :-)
d03b : e540             [ 3] 	sbc grc_x
d03d : 8543             [ 3] 	sta grc_d
d03f :                       gr_circle_plot
                             	;while(x >= y)
d03f : a540             [ 3] 	lda grc_x
d041 : c542             [ 3] 	cmp grc_y
d043 : 902a             [ 3] 	bcc gr_circle_done
                             	;plot 8 points on current x,y
d045 : 2070d0           [ 6] 	jsr gr_circle_points
                             	;y++
d048 : e642             [ 5] 	inc grc_y
AS65 Assembler for R6502 [1.42].                                     Page  111
-------------------------------- bank\bank0.s --------------------------------

                             	;if d<=0
d04a : a543             [ 3] 	lda grc_d
d04c : f014             [ 3] 	beq gr_circle_d_lte0
d04e : 3012             [ 3] 	bmi gr_circle_d_lte0
                             	;else
                             	;x--
d050 : c640             [ 5] 	dec grc_x
                             	;decision += 2 * (y - x) + 1
d052 : a542             [ 3] 	lda grc_y
d054 : 38               [ 2] 	sec
d055 : e540             [ 3] 	sbc grc_x
d057 : 0a               [ 2] 	asl a
d058 : 18               [ 2] 	clc
d059 : 6901             [ 2] 	adc #1
d05b : 6543             [ 3] 	adc grc_d
d05d : 8543             [ 3] 	sta grc_d
d05f : 4c3fd0           [ 3] 	jmp gr_circle_plot
d062 :                       gr_circle_d_lte0
                             	;decision += 2 * y + 1
d062 : a542             [ 3] 	lda grc_y
d064 : 0a               [ 2] 	asl a
d065 : 18               [ 2] 	clc
d066 : 6901             [ 2] 	adc #1
d068 : 6543             [ 3] 	adc grc_d
d06a : 8543             [ 3] 	sta grc_d
d06c : 4c3fd0           [ 3] 	jmp gr_circle_plot
d06f :                       gr_circle_done
d06f : 60               [ 6] 	rts
d070 :                       gr_circle_points
                             ; Local names of temp storage
                             ; to make code easier to read
                             	;DrawPixel( x + x0,  yh + y0);
d070 : a540             [ 3] 	lda grc_x
d072 : 18               [ 2] 	clc
d073 : 653d             [ 3] 	adc grc_x0
d075 : aa               [ 2] 	tax
d076 : a542             [ 3] 	lda grc_y
d078 : 18               [ 2] 	clc
d079 : 653e             [ 3] 	adc grc_y0
d07b : a8               [ 2] 	tay
d07c : 2005d0           [ 6] 	jsr gr_point
                             	;DrawPixel( y + x0,  xh + y0);
d07f : a542             [ 3] 	lda grc_y
d081 : 18               [ 2] 	clc
d082 : 653d             [ 3] 	adc grc_x0
d084 : aa               [ 2] 	tax
d085 : a540             [ 3] 	lda grc_x
d087 : 18               [ 2] 	clc
d088 : 653e             [ 3] 	adc grc_y0
d08a : a8               [ 2] 	tay
d08b : 2005d0           [ 6] 	jsr gr_point
                             	;DrawPixel(-x + x0,  yh + y0);
d08e : a53d             [ 3] 	lda grc_x0
d090 : 38               [ 2] 	sec
d091 : e540             [ 3] 	sbc grc_x
d093 : aa               [ 2] 	tax
d094 : a542             [ 3] 	lda grc_y
d096 : 18               [ 2] 	clc
d097 : 653e             [ 3] 	adc grc_y0
d099 : a8               [ 2] 	tay
d09a : 2005d0           [ 6] 	jsr gr_point
                             	;DrawPixel(-y + x0,  xh + y0);
AS65 Assembler for R6502 [1.42].                                     Page  112
-------------------------------- bank\bank0.s --------------------------------

d09d : a53d             [ 3] 	lda grc_x0
d09f : 38               [ 2] 	sec
d0a0 : e542             [ 3] 	sbc grc_y
d0a2 : aa               [ 2] 	tax
d0a3 : a540             [ 3] 	lda grc_x
d0a5 : 18               [ 2] 	clc
d0a6 : 653e             [ 3] 	adc grc_y0
d0a8 : a8               [ 2] 	tay
d0a9 : 2005d0           [ 6] 	jsr gr_point
                             	;DrawPixel(-x + x0, -yh + y0);
d0ac : a53d             [ 3] 	lda grc_x0
d0ae : 38               [ 2] 	sec
d0af : e540             [ 3] 	sbc grc_x
d0b1 : aa               [ 2] 	tax
d0b2 : a53e             [ 3] 	lda grc_y0
d0b4 : 38               [ 2] 	sec
d0b5 : e542             [ 3] 	sbc grc_y
d0b7 : a8               [ 2] 	tay
d0b8 : 2005d0           [ 6] 	jsr gr_point
                             	;DrawPixel(-y + x0, -xh + y0);
d0bb : a53d             [ 3] 	lda grc_x0
d0bd : 38               [ 2] 	sec
d0be : e542             [ 3] 	sbc grc_y
d0c0 : aa               [ 2] 	tax
d0c1 : a53e             [ 3] 	lda grc_y0
d0c3 : 38               [ 2] 	sec
d0c4 : e540             [ 3] 	sbc grc_x
d0c6 : a8               [ 2] 	tay
d0c7 : 2005d0           [ 6] 	jsr gr_point
                             	;DrawPixel( x + x0, -yh + y0);
d0ca : a540             [ 3] 	lda grc_x
d0cc : 18               [ 2] 	clc
d0cd : 653d             [ 3] 	adc grc_x0
d0cf : aa               [ 2] 	tax
d0d0 : a53e             [ 3] 	lda grc_y0
d0d2 : 38               [ 2] 	sec
d0d3 : e542             [ 3] 	sbc grc_y
d0d5 : a8               [ 2] 	tay
d0d6 : 2005d0           [ 6] 	jsr gr_point
                             	;DrawPixel( y + x0, -xh + y0);
d0d9 : a542             [ 3] 	lda grc_y
d0db : 18               [ 2] 	clc
d0dc : 653d             [ 3] 	adc grc_x0
d0de : aa               [ 2] 	tax
d0df : a53e             [ 3] 	lda grc_y0
d0e1 : 38               [ 2] 	sec
d0e2 : e540             [ 3] 	sbc grc_x
d0e4 : a8               [ 2] 	tay
d0e5 : 4c05d0           [ 3] 	jmp gr_point
                             
                             
                             
                             ;****************************************
                             ;* gr_line
                             ;* Draw a line from x0,y0 -> x1,y1
                             ;* Input :	num_a   = x0
                             ;*			num_a+1 = y0
                             ;*			num_a+2 = x1
                             ;*			num_a+3 = y1
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
AS65 Assembler for R6502 [1.42].                                     Page  113
-------------------------------- bank\bank0.s --------------------------------

d0e8 :                       gr_line
                             
                             ; Local definitions of temp space to make
                             ; the rest of the code easier to read
003d =                       grl_x0 	= (num_a)
003e =                       grl_y0 	= (num_a+1)
003f =                       grl_x1 	= (num_a+2)
0040 =                       grl_y1 	= (num_a+3)
0041 =                       grl_dx	= (ztmp_24+4)
0042 =                       grl_dy	= (ztmp_24+5)
0043 =                       grl_xyyx= (ztmp_24+6)
0044 =                       grl_2dx	= (ztmp_24+7)			; Word
0046 =                       grl_2dy	= (ztmp_24+9)			; Word
0048 =                       grl_2dxy= (ztmp_24+11)			; Word
004a =                       grl_sinx= (ztmp_24+13)
004b =                       grl_p	= (ztmp_24+14)			; Word
004d =                       grl_siny= (ztmp_24+16)
                             
                             	; Start from hires cursor position
                             	; New cursor pos = end of line pos
d0e8 : a522             [ 3] 	lda gr_scrngeom+gr_hires_x
d0ea : 853d             [ 3] 	sta grl_x0
d0ec : a523             [ 3] 	lda gr_scrngeom+gr_hires_y
d0ee : 853e             [ 3] 	sta grl_y0
d0f0 : a63f             [ 3] 	ldx grl_x1
d0f2 : a440             [ 3] 	ldy grl_y1
d0f4 : 20f8cf           [ 6] 	jsr gr_set_hires_cur
                             	
d0f7 : a900             [ 2] 	lda #0
d0f9 : 8543             [ 3] 	sta grl_xyyx				; Assume normal xy axis
                             
                             	; check if abs(dy)>abs(dx) if so need to swap xy
                             	; num_b = abs(x), num_b+1 = abs(dy)
d0fb : 38               [ 2] 	sec
d0fc : a53f             [ 3] 	lda grl_x1
d0fe : e53d             [ 3] 	sbc grl_x0
d100 : b004             [ 3] 	bcs gr_line_skip_dx_neg
d102 : 49ff             [ 2] 	eor #0xff
d104 : 6901             [ 2] 	adc #1
d106 :                       gr_line_skip_dx_neg
d106 : 8541             [ 3] 	sta grl_dx
d108 : 38               [ 2] 	sec
d109 : a540             [ 3] 	lda grl_y1
d10b : e53e             [ 3] 	sbc grl_y0
d10d : b004             [ 3] 	bcs gr_line_skip_dy_neg
d10f : 49ff             [ 2] 	eor #0xff
d111 : 6901             [ 2] 	adc #1
d113 :                       gr_line_skip_dy_neg
d113 : 8542             [ 3] 	sta grl_dy
d115 : c541             [ 3] 	cmp grl_dx
d117 : 901a             [ 3] 	bcc gr_line_skip_xy_swap
                             	; swap xy axes and also dx and dy
d119 : a53d             [ 3] 	lda grl_x0					; swap x0 and y0
d11b : a63e             [ 3] 	ldx grl_y0
d11d : 853e             [ 3] 	sta grl_y0
d11f : 863d             [ 3] 	stx grl_x0
d121 : a53f             [ 3] 	lda grl_x1					; swap x1 and y1
d123 : a640             [ 3] 	ldx grl_y1
d125 : 8540             [ 3] 	sta grl_y1
d127 : 863f             [ 3] 	stx grl_x1
d129 : a541             [ 3] 	lda grl_dx					; swap dy and dx
d12b : a642             [ 3] 	ldx grl_dy
AS65 Assembler for R6502 [1.42].                                     Page  114
-------------------------------- bank\bank0.s --------------------------------

d12d : 8542             [ 3] 	sta grl_dy
d12f : 8641             [ 3] 	stx grl_dx
d131 : e643             [ 5] 	inc grl_xyyx				; set flag to Not Z to know abou
                             
d133 :                       gr_line_skip_xy_swap
                             	; assume going from left to right and top to bot
d133 : a901             [ 2] 	lda #1
d135 : a0ff             [ 2] 	ldy #255					; -1
d137 : 854a             [ 3] 	sta grl_sinx
d139 : 854d             [ 3] 	sta grl_siny
                             
                             	; check going right to left
d13b : a53d             [ 3] 	lda grl_x0
d13d : c53f             [ 3] 	cmp grl_x1
d13f : 9002             [ 3] 	bcc gr_line_skip_left
d141 : 844a             [ 3] 	sty grl_sinx				; make -1
d143 :                       gr_line_skip_left
                             	; check going bottom to top
d143 : a53e             [ 3] 	lda grl_y0
d145 : c540             [ 3] 	cmp grl_y1
d147 : 9002             [ 3] 	bcc gr_line_skip_y_up
d149 : 844d             [ 3] 	sty grl_siny				; make -1
                             
d14b :                       gr_line_skip_y_up
d14b : a541             [ 3] 	lda grl_dx
d14d : 0a               [ 2] 	asl a
d14e : 8544             [ 3] 	sta grl_2dx					; 2*dx (word)
d150 : a900             [ 2] 	lda #0
d152 : 8545             [ 3] 	sta grl_2dx+1
d154 : 2645             [ 5] 	rol grl_2dx+1
                             
d156 : a542             [ 3] 	lda grl_dy
d158 : 0a               [ 2] 	asl a
d159 : 8546             [ 3] 	sta grl_2dy					; 2*dy (word)
d15b : a900             [ 2] 	lda #0
d15d : 8547             [ 3] 	sta grl_2dy+1
d15f : 2647             [ 5] 	rol grl_2dy+1
                             
                             ;    p=2*dy-dx;					; p (word)
d161 : 38               [ 2] 	sec
d162 : a546             [ 3] 	lda grl_2dy
d164 : e541             [ 3] 	sbc grl_dx
d166 : 854b             [ 3] 	sta grl_p
d168 : a547             [ 3] 	lda grl_2dy+1
d16a : e900             [ 2] 	sbc #0
d16c : 854c             [ 3] 	sta grl_p+1
                             
                             ;   2*(dy-dx)					; num_tmp+2 = 2*(dy-dx)
d16e : 38               [ 2] 	sec
d16f : a546             [ 3] 	lda grl_2dy
d171 : e544             [ 3] 	sbc grl_2dx
d173 : 8548             [ 3] 	sta grl_2dxy
d175 : a547             [ 3] 	lda grl_2dy+1
d177 : e545             [ 3] 	sbc grl_2dx+1
d179 : 8549             [ 3] 	sta grl_2dxy+1
                             
d17b :                       gr_line_pixel
d17b : a63d             [ 3] 	ldx grl_x0
d17d : a43e             [ 3] 	ldy grl_y0
d17f : a543             [ 3] 	lda grl_xyyx				; Swapped?
d181 : f004             [ 3] 	beq gr_line_yx_skip
d183 : a63e             [ 3] 	ldx grl_y0
AS65 Assembler for R6502 [1.42].                                     Page  115
-------------------------------- bank\bank0.s --------------------------------

d185 : a43d             [ 3] 	ldy grl_x0
d187 :                       gr_line_yx_skip
d187 : 2005d0           [ 6] 	jsr gr_point				; Plot point x,y
                             
d18a : a53d             [ 3] 	lda grl_x0					; Check if done
d18c : c53f             [ 3] 	cmp grl_x1
d18e : f032             [ 3] 	beq gr_line_done
                             
                             	; Increment x always
d190 : 18               [ 2] 	clc
d191 : a53d             [ 3] 	lda grl_x0
d193 : 654a             [ 3] 	adc grl_sinx
d195 : 853d             [ 3] 	sta grl_x0
                             
                             	; check sign of p
d197 : a54c             [ 3] 	lda grl_p+1
d199 : 3017             [ 3] 	bmi gr_line_neg_p
                             
                             	; if p >=0
                             
                             	; y=y+increment
d19b : 18               [ 2] 	clc
d19c : a53e             [ 3] 	lda grl_y0
d19e : 654d             [ 3] 	adc grl_siny
d1a0 : 853e             [ 3] 	sta grl_y0
                             
                             	; p=p+2*dy-2*dx
                             	_addZPWord grl_p,grl_2dxy
                             
d1af : 4c7bd1           [ 3] 	jmp gr_line_pixel
                             
d1b2 :                       gr_line_neg_p
                             	; if p < 0
                             	; p=p+2*dy
                             	_addZPWord grl_p,grl_2dy
                             
                             
d1bf : 4c7bd1           [ 3] 	jmp gr_line_pixel
d1c2 :                       gr_line_done
d1c2 : 60               [ 6] 	rts
                             
                             
                             ; Line drawing pseudo code
                             ;    while(x<x1)
                             ;    {
                             ;        putpixel(x,y);
                             ;        if(p>=0)
                             ;        {
                             ;            y=y+1;
                             ;            p=p+2*dy-2*dx;
                             ;        }
                             ;        else
                             ;        {
                             ;            p=p+2*dy;
                             ;        }
                             ;        x=x+1;
                             ;    }
                             
                             
                             ;* These tables are to speed up calculating the
                             ;* offset for plot commands
d1c3 :                       gr_offset_40lo
AS65 Assembler for R6502 [1.42].                                     Page  116
-------------------------------- bank\bank0.s --------------------------------

d1c3 : 00285078a0            	db lo(000*40), lo(001*40), lo(002*40), lo(003*40
d1c8 : c8f0184068            	db lo(005*40), lo(006*40), lo(007*40), lo(008*40
d1cd : 90b8e00830            	db lo(010*40), lo(011*40), lo(012*40), lo(013*40
d1d2 : 5880a8d0f8            	db lo(015*40), lo(016*40), lo(017*40), lo(018*40
d1d7 : 20487098c0            	db lo(020*40), lo(021*40), lo(022*40), lo(023*40
d1dc : e81038                	db lo(025*40), lo(026*40), lo(027*40)
d1df :                       gr_offset_40hi
d1df : 0000000000            	db hi(000*40), hi(001*40), hi(002*40), hi(003*40
d1e4 : 0000010101            	db hi(005*40), hi(006*40), hi(007*40), hi(008*40
d1e9 : 0101010202            	db hi(010*40), hi(011*40), hi(012*40), hi(013*40
d1ee : 0202020202            	db hi(015*40), hi(016*40), hi(017*40), hi(018*40
d1f3 : 0303030303            	db hi(020*40), hi(021*40), hi(022*40), hi(023*40
d1f8 : 030404                	db hi(025*40), hi(026*40), hi(027*40)
                             
                             
                             ;* Character based sprites for text mode only
d1fb :                       mod_sz_sprite_s
                             ;* Initialisation
d1fb :                       gr_spr_init
d1fb : a21f             [ 2] 	ldx #31							; Start at last sprite
d1fd :                       gr_spr_init_loop
d1fd : a9ff             [ 2] 	lda #-1							; Put -1 in the x coords
d1ff : 9d00b4           [ 5] 	sta spr_curX,x
d202 : 9d20b4           [ 5] 	sta spr_newX,x
d205 : ca               [ 2] 	dex								; Next sprite
d206 : 10f5             [ 4] 	bpl gr_spr_init_loop			; Until all 32 sprites in
d208 : 60               [ 6] 	rts
                             
                             
                             ;* Erase all active sprites
d209 :                       gr_spr_erase
                             	; First restore background from sprites
                             	; that are active and new pos is different from 
d209 : a21f             [ 2] 	ldx #31							; Start at last sprite
d20b :                       gr_spr_erase_loop
d20b : bd00b4           [ 4] 	lda spr_curX,x					; Is sprite active?
d20e : 3007             [ 3] 	bmi gr_spr_erase_next
d210 : a8               [ 2] 	tay								; x pos in to Y
d211 :                       gr_spr_erase_do
d211 : bda0b4           [ 4] 	lda spr_bgnd,x					; Get the background
d214 : 205fd2           [ 6] 	jsr gr_spr_put					; And restore it
d217 :                       gr_spr_erase_next
d217 : ca               [ 2] 	dex
d218 : 10f1             [ 3] 	bpl gr_spr_erase_loop
d21a : 60               [ 6] 	rts
                             
                             ;* Get ready for new position
d21b :                       gr_spr_new
d21b : a21f             [ 2] 	ldx #31							; Start at last sprite
d21d :                       gr_spr_new_loop
d21d : bd60b4           [ 4] 	lda spr_newY,x					; Get new Y
d220 : 9d40b4           [ 5] 	sta spr_curY,x					; Update new->cur Y
d223 : a8               [ 2] 	tay								; Used for address calc.
d224 : bd20b4           [ 4] 	lda spr_newX,x					; Get new X
d227 : 9d00b4           [ 5] 	sta spr_curX,x					; Update new->cur X
d22a : 301d             [ 3] 	bmi gr_spr_new_next				; Is the new position act
d22c : 48               [ 3] 	pha 							; x pos saved for later
                             	; Calculate screen address
                             	; save as part of sprite data and in zp area
d22d : 18               [ 2] 	clc
d22e : b9c3d1           [ 4] 	lda gr_offset_40lo,y
d231 : 6980             [ 2] 	adc #lo(TEXTSCRN)
AS65 Assembler for R6502 [1.42].                                     Page  117
-------------------------------- bank\bank0.s --------------------------------

d233 : 8527             [ 3] 	sta gr_scrngeom+gr_geom_tmp
d235 : 9dc0b4           [ 5] 	sta spr_baseadrl,x
d238 : b9dfd1           [ 4] 	lda gr_offset_40hi,y
d23b : 69bb             [ 2] 	adc #hi(TEXTSCRN)
d23d : 8528             [ 3] 	sta gr_scrngeom+gr_geom_tmp+1
d23f : 9de0b4           [ 5] 	sta spr_baseadrh,x
d242 : 68               [ 4] 	pla								; Get x pos back in to Y reg
d243 : a8               [ 2] 	tay
d244 : b127             [ 5] 	lda (gr_scrngeom+gr_geom_tmp),y	; Get background
d246 : 9da0b4           [ 5] 	sta spr_bgnd,x					; And save this
d249 :                       gr_spr_new_next
d249 : ca               [ 2] 	dex
d24a : 10d1             [ 3] 	bpl gr_spr_new_loop
d24c : 60               [ 6] 	rts
                             
                             
                             ; Draw all active sprites
                             ; Active sprites are always drawn - 0 = highest p
d24d :                       gr_spr_draw
d24d : a21f             [ 2] 	ldx #31							; Start at last sprite
d24f :                       gr_spr_draw_loop
d24f : bd20b4           [ 4] 	lda spr_newX,x					; Is sprite active?
d252 : 3007             [ 3] 	bmi gr_spr_draw_next
d254 : a8               [ 2] 	tay								; X pos in to Y
d255 : bd80b4           [ 4] 	lda spr_chr,x					; Get the sprite char
d258 : 205fd2           [ 6] 	jsr gr_spr_put
d25b :                       gr_spr_draw_next
d25b : ca               [ 2] 	dex
d25c : 10f1             [ 3] 	bpl gr_spr_draw_loop
d25e : 60               [ 6] 	rts
                             
                             
                             ;* Common routine to put A to screen address
                             ;* Used for erase and draw of sprites
                             ;* X=index in to sprite table
                             ;* Y=X offset from screen pointer
d25f :                       gr_spr_put
d25f : 48               [ 3] 	pha
d260 : bdc0b4           [ 4] 	lda spr_baseadrl,x		; Get the screen pointer
d263 : 8527             [ 3] 	sta gr_scrngeom+gr_geom_tmp
d265 : bde0b4           [ 4] 	lda spr_baseadrh,x
d268 : 8528             [ 3] 	sta gr_scrngeom+gr_geom_tmp+1
d26a : 68               [ 4] 	pla								; Get back the char to
d26b : 9127             [ 5] 	sta (gr_scrngeom+gr_geom_tmp),y	; put on to scre
d26d : 60               [ 6] 	rts
                             
                             
                             ;* Update spr A with char X
d26e :                       gr_spr_char
d26e : a8               [ 2] 	tay
d26f : 8a               [ 2] 	txa
d270 : 9980b4           [ 5] 	sta spr_chr,y
d273 : 60               [ 6] 	rts
                             
                             ;* Locate what is at the location of sprite A, re
                             ;* C=1 if sprite it not active
d274 :                       gr_spr_hit
d274 : aa               [ 2] 	tax
d275 : bd00b4           [ 4] 	lda spr_curX,x
d278 : c980             [ 2] 	cmp #0x80						; If A>=0x80 then C=1
d27a : bda0b4           [ 4] 	lda spr_bgnd,x
d27d : 60               [ 6] 	rts
AS65 Assembler for R6502 [1.42].                                     Page  118
-------------------------------- bank\bank0.s --------------------------------

                             
                             ;* Update spr A with coords X,Y
d27e :                       gr_spr_pos
d27e : 8432             [ 3] 	sty tmp_alo
d280 : a8               [ 2] 	tay
d281 : 8a               [ 2] 	txa								; X coord still in X reg
d282 : 9920b4           [ 5] 	sta spr_newX,y
d285 : a532             [ 3] 	lda tmp_alo						; Y coord from temp
d287 : 9960b4           [ 5] 	sta spr_newY,y
d28a : 60               [ 6] 	rts
                             
                             ;* Update all sprite positions from df_tmpptra, d
d28b :                       gr_spr_multi_pos
d28b : a03e             [ 2] 	ldy #62
d28d : a21f             [ 2] 	ldx #31
d28f :                       gr_spr_multi_loop
d28f : b1a1             [ 5] 	lda (df_tmpptra),y
d291 : 9d20b4           [ 5] 	sta spr_newX,x
d294 : b1a3             [ 5] 	lda (df_tmpptrb),y
d296 : 9d60b4           [ 5] 	sta spr_newY,x
d299 : 88               [ 2] 	dey
d29a : 88               [ 2] 	dey
d29b : ca               [ 2] 	dex
d29c : 10f1             [ 3] 	bpl gr_spr_multi_loop
d29e : 60               [ 6] 	rts
                             
d29f :                       mod_sz_sprite_e
d29f :                       mod_sz_graph_e
                             
                             ; Old version of point calculator - in case I nee
                             ;	; Calculate destination address
                             ;	lda #0
                             ;	sta tmp_ahi
                             ;
                             ;	tya				; Row number in A
                             ;	; Multiply 8
                             ;	asl a
                             ;	rol tmp_ahi
                             ;	asl a
                             ;	rol tmp_ahi
                             ;	asl a
                             ;	rol tmp_ahi
                             ;	sta tmp_alo
                             ;
                             ;	; Multiply 32
                             ;	; Use partial result from m8
                             ;	lda tmp_ahi
                             ;	sta tmp_bhi
                             ;	lda tmp_alo
                             ;	; Just two more rotates to get m32
                             ;	asl a
                             ;	rol tmp_bhi
                             ;	asl a
                             ;	rol tmp_bhi
                             ;	sta tmp_blo
                             ;	; Add m8 and m32 for m40
                             ;	clc
                             ;	lda tmp_alo
                             ;	adc tmp_blo
                             ;	sta tmp_alo
                             ;	lda tmp_ahi
                             ;	adc tmp_bhi
AS65 Assembler for R6502 [1.42].                                     Page  119
-------------------------------- bank\bank0.s --------------------------------

                             ;	; Add high byte of screen address
                             ;	adc gr_scrngeom+vdp_scrn+1
                             ;	sta tmp_ahi
                             ;	; Dest offset in tmp_alo
                             ;
                             ;	; pixel x coord in to A
                             ;	; We dvide by 48 doing trial subtracts
                             ;	; This leaves Y with a number 0..5
                             ;	; And A has the remainder 0..47
                             ;	; Use these to look up byte column and mask
                             ;	; We don't do more than 5 trial subtracts
                             ;	; plus the table size is much smaller
                             ;	; Comprimise of space vs speed
                             ;	txa
                             ;	ldy #0				; Start at segment 0
                             ;	sec
                             ;gr_point_d48
                             ;	sbc #48
                             ;	iny
                             ;	bcs gr_point_d48				; Keep going until underflo
                             ;
                             ;	dey								; Adjust segment count
                             ;	adc #48							; Get remainder in A
                             ;	tax								; Put remainder in to X (0..47)
                             ;	lda gr_col_seg,y				; Get the start column of s
                             ;	clc
                             ;	adc gr_col_offset,x				; Add segment offset usi
                             ;	tay								; We have the byte column in Y
                             ;	sty tmp_bhi						; Save in tmp, also still in Y
                             ;	stx tmp_blo						; Save remainder 0..47
                             ;	rts
                             
                             ;gr_point_mask
                             ;	db 0x20,0x10,0x08,0x04,0x02,0x01
                             ;	db 0x20,0x10,0x08,0x04,0x02,0x01
                             ;	db 0x20,0x10,0x08,0x04,0x02,0x01
                             ;	db 0x20,0x10,0x08,0x04,0x02,0x01
                             ;	db 0x20,0x10,0x08,0x04,0x02,0x01
                             ;	db 0x20,0x10,0x08,0x04,0x02,0x01
                             ;	db 0x20,0x10,0x08,0x04,0x02,0x01
                             ;	db 0x20,0x10,0x08,0x04,0x02,0x01
                             ;gr_col_offset
                             ;	db 0,0,0,0,0,0
                             ;	db 1,1,1,1,1,1
                             ;	db 2,2,2,2,2,2
                             ;	db 3,3,3,3,3,3
                             ;	db 4,4,4,4,4,4
                             ;	db 5,5,5,5,5,5
                             ;	db 6,6,6,6,6,6
                             ;	db 7,7,7,7,7,7
                             ;gr_col_seg
                             ;	db 0,8,16,24,32
                             
                             	include "monitor/cmd.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
AS65 Assembler for R6502 [1.42].                                     Page  120
-------------------------------- bank\bank0.s --------------------------------

                             ;*  CMD.S
                             ;*	A really simple monitor that needs to be impro
                             ;*	optimised.  Only has these commands;
                             ;*		dxxxx			Dump memory location xxxx
                             ;*						Press enter for more else stop
                             ;*		sxxxx [yy]		Set memory location xxxx with hex
                             ;*						bytes, respond with next location
                             ;*		q				Quit
                             ;*	Now you see why this needs optimising!
                             ;*
                             ;************************************************
                             
0094 =                       cmd_lo					= df_currdat
0095 =                       cmd_hi					= (df_currdat+1)
                             
                             	; ROM code
                             	code  
                             
d29f :                       _mod_sz_cmd_s
                             
d29f :                       command_line
                             
d29f :                       cmd_ready
                             	_println_low msg_ready
                             
                             
d2a6 : 38               [ 2] 	sec							; Set carry flag = echo characters
d2a7 : 2027c4           [ 6] 	jsr io_read_line			; Get a command line
d2aa : a000             [ 2] 	ldy #0
d2ac : b139             [ 5] 	lda (buf_lo),y
d2ae : c971             [ 2] 	cmp #'q'
d2b0 : d001             [ 3] 	bne cmd_check_cmd
d2b2 : 60               [ 6] 	rts
d2b3 :                       cmd_check_cmd
d2b3 : 20c5d2           [ 6] 	jsr cmd_parse				; Find command and execute
d2b6 : b003             [ 3] 	bcs cmd_error				; Carry set = error condition
d2b8 : 4c9fd2           [ 3] 	jmp cmd_ready
                             
d2bb :                       cmd_error
                             	_println_low msg_errmsg
                             
d2c2 : 4c9fd2           [ 3] 	jmp cmd_ready
                             
                             
                             ;****************************************
                             ;* cmd_parse
                             ;* Parse the command line in the io buffer
                             ;* Regs affected : 
                             ;****************************************
d2c5 :                       cmd_parse
d2c5 : c8               [ 2] 	iny						; Ready for next char
                             	
d2c6 :                       cmd_check_d
d2c6 : c964             [ 2] 	cmp #'d'				; Check for d
d2c8 : d003             [ 3] 	bne cmd_check_s
d2ca : 4c00d3           [ 3] 	jmp cmd_dumpmem
d2cd :                       cmd_check_s
d2cd : c973             [ 2] 	cmp #'s'				; Check for s
d2cf : d0ea             [ 3] 	bne cmd_error
d2d1 : 4cdad2           [ 3] 	jmp cmd_setmem
                             
d2d4 :                       cmd_not_found
AS65 Assembler for R6502 [1.42].                                     Page  121
-------------------------------- bank\bank0.s --------------------------------

d2d4 : a901             [ 2] 	lda #CMD_ERR_NOTFOUND
d2d6 : 855d             [ 3] 	sta errno
d2d8 : 38               [ 2] 	sec
d2d9 : 60               [ 6] 	rts
                             	
                             ;****************************************
                             ;* cmd_setmem
                             ;* Set the memory at address AAAA to byte string
                             ;* Input : buflo, bufhi
                             ;* Output : y = start of first parm byte
                             ;*          x = index to routine pointer
                             ;* Regs affected : A
                             ;****************************************
d2da :                       cmd_setmem
d2da : 2097d3           [ 6] 	jsr cmd_parse_word
d2dd : b01f             [ 3] 	bcs cmd_setmem_err
d2df :                       cmd_setmem_byte
d2df : 207bd3           [ 6] 	jsr cmd_parse_byte
d2e2 : b01a             [ 3] 	bcs cmd_setmem_err
d2e4 : 2072d3           [ 6] 	jsr cmd_poke				; Poke A in to cmd_lo, hi
d2e7 : 2062d3           [ 6] 	jsr cmd_incmem
d2ea : 20a9d3           [ 6] 	jsr cmd_parse_next_parm		; Try and find another 
d2ed : 90f0             [ 3] 	bcc cmd_setmem_byte			; Process if found, else f
d2ef : a595             [ 3] 	lda cmd_hi
d2f1 : 203cc1           [ 6] 	jsr utilPrintA
d2f4 : a594             [ 3] 	lda cmd_lo
d2f6 : 203cc1           [ 6] 	jsr utilPrintA
d2f9 : 2034c1           [ 6] 	jsr utilPrintCRLF
d2fc : 18               [ 2] 	clc
d2fd : 60               [ 6] 	rts
d2fe :                       cmd_setmem_err
d2fe : 38               [ 2] 	sec
d2ff : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* cmd_dumpmem
                             ;* Dump memory at address AAAA
                             ;* Input : buflo, bufhi
                             ;* Output : y = start of first parm byte
                             ;* Regs affected : A
                             ;****************************************
d300 :                       cmd_dumpmem
d300 : 2097d3           [ 6] 	jsr cmd_parse_word			; Get address to dump
d303 : 9001             [ 3] 	bcc cmd_dumpmem_block
d305 : 60               [ 6] 	rts							; C is set
d306 :                       cmd_dumpmem_block
d306 : a595             [ 3] 	lda cmd_hi					; Show the address
d308 : 203cc1           [ 6] 	jsr utilPrintA
d30b : a594             [ 3] 	lda cmd_lo
d30d : 203cc1           [ 6] 	jsr utilPrintA
d310 : a920             [ 2] 	lda #' '
d312 : 2012c4           [ 6] 	jsr io_put_ch
                             	
d315 : a008             [ 2] 	ldy #8						; 8 Bytes per line
d317 :                       cmd_dumpmem_byte
d317 : 2069d3           [ 6] 	jsr cmd_peek
d31a : 203cc1           [ 6] 	jsr utilPrintA
d31d : 202cc1           [ 6] 	jsr utilPrintSPC
d320 : 2062d3           [ 6] 	jsr cmd_incmem
d323 : 88               [ 2] 	dey
d324 : d0f1             [ 3] 	bne cmd_dumpmem_byte
AS65 Assembler for R6502 [1.42].                                     Page  122
-------------------------------- bank\bank0.s --------------------------------

d326 :                       cmd_dumpmemASCII
d326 : 38               [ 2] 	sec							; Move pointer back to start
d327 : a594             [ 3] 	lda cmd_lo
d329 : e908             [ 2] 	sbc #8
d32b : 8594             [ 3] 	sta cmd_lo
d32d : a595             [ 3] 	lda cmd_hi
d32f : e900             [ 2] 	sbc #0
d331 : 8595             [ 3] 	sta cmd_hi
                             	
d333 : 202cc1           [ 6] 	jsr utilPrintSPC
d336 : a008             [ 2] 	ldy #8						; 8 Bytes per line
d338 :                       cmd_dumpmem_ascii
d338 : a22e             [ 2] 	ldx #'.'					; Non-printable char
d33a : 2069d3           [ 6] 	jsr cmd_peek
d33d : c920             [ 2] 	cmp #' '					; <32 is unprintable
d33f : b001             [ 3] 	bcs cmd_dump_skip_ctrl
d341 : 8a               [ 2] 	txa							; Replace with dot
d342 :                       cmd_dump_skip_ctrl
d342 : c97f             [ 2] 	cmp #UTF_DEL				; >= DEL is unprintable
d344 : 9001             [ 3] 	bcc cmd_dump_skip_del
d346 : 8a               [ 2] 	txa							; Replace with dot
d347 :                       cmd_dump_skip_del	
d347 : 2012c4           [ 6] 	jsr io_put_ch
d34a : 2062d3           [ 6] 	jsr cmd_incmem
d34d : 88               [ 2] 	dey		
d34e : d0e8             [ 3] 	bne cmd_dumpmem_ascii		; Show 8 bytes
d350 : 38               [ 2] 	sec
d351 : 200fc4           [ 6] 	jsr io_get_ch				; Wait for key press
d354 : c90d             [ 2] 	cmp #UTF_CR		
d356 : d003             [ 3] 	bne cmd_dumpmemFin			; Any key but enter finishe
                             ;	jsr io_put_ch				; Do new line
d358 : 4c06d3           [ 3] 	jmp cmd_dumpmem_block
d35b :                       cmd_dumpmemFin
d35b : a90d             [ 2] 	lda #UTF_CR
d35d : 2012c4           [ 6] 	jsr io_put_ch
d360 : 18               [ 2] 	clc
d361 : 60               [ 6] 	rts
                             	
                             	
                             ;****************************************
                             ;* cmd_incmem
                             ;* Increment pointer
                             ;* Input : cmd_lo, cmd_hi
                             ;* Output : cmd_lo, cmd_hi
                             ;* Regs affected : 
                             ;****************************************
d362 :                       cmd_incmem
                             	_incZPWord cmd_lo
                             
d368 : 60               [ 6] 	rts
                             	
                             ;****************************************
                             ;* cmd_peek
                             ;* Read byte
                             ;* Input : cmd_lo, cmd_hi
                             ;* Output : A
                             ;* Regs affected : 
                             ;****************************************
d369 :                       cmd_peek
d369 : 8638             [ 3] 	stx tmp_d
d36b : a200             [ 2] 	ldx #0
d36d : a194             [ 6] 	lda (cmd_lo,x)
AS65 Assembler for R6502 [1.42].                                     Page  123
-------------------------------- bank\bank0.s --------------------------------

d36f : a638             [ 3] 	ldx tmp_d
d371 : 60               [ 6] 	rts
                             	
                             ;****************************************
                             ;* cmd_poke
                             ;* Read byte
                             ;* Input : cmd_lo, cmd_hi, A
                             ;* Output : A
                             ;* Regs affected : 
                             ;****************************************
d372 :                       cmd_poke
d372 : 8638             [ 3] 	stx tmp_d
d374 : a200             [ 2] 	ldx #0
d376 : 8194             [ 6] 	sta (cmd_lo,x)
d378 : a638             [ 3] 	ldx tmp_d
d37a : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* cmd_parse_byte
                             ;* Find 2 char hex byte
                             ;* Input : buflo, bufhi, y offset
                             ;* Output : y = char after hex byte, A = value
                             ;* Regs affected : A,Y
                             ;****************************************
d37b :                       cmd_parse_byte
d37b : 20a9d3           [ 6] 	jsr cmd_parse_next_parm	; Find the next paramete
d37e : b015             [ 3] 	bcs cmd_parse_byte_err
d380 : b139             [ 5] 	lda (buf_lo),y			; Get hi nibble of high byte
d382 : f011             [ 3] 	beq cmd_parse_byte_err	; If no char then error w
d384 : 48               [ 3] 	pha						; Save on stack
d385 : c8               [ 2] 	iny
d386 : b139             [ 5] 	lda (buf_lo),y			; Get lo nibble of high byte
d388 : f00a             [ 3] 	beq cmd_parse_byte_errp	; If no char then error 
d38a : aa               [ 2] 	tax						; Lo nibble goes to X
d38b : 68               [ 4] 	pla						; Restore hi nibble
d38c : 206ec1           [ 6] 	jsr str_x_to_a			; Convert from hex to A
d38f : b004             [ 3] 	bcs cmd_parse_byte_err	; If error then stop
d391 : c8               [ 2] 	iny						; Point to next char
d392 : 18               [ 2] 	clc
d393 : 60               [ 6] 	rts						; A contains the byte
d394 :                       cmd_parse_byte_errp
d394 : 68               [ 4] 	pla
d395 :                       cmd_parse_byte_err
d395 : aa               [ 2] 	tax
d396 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* cmd_parse_word
                             ;* Find 4 char hex word
                             ;* Input : buflo, bufhi, y offset
                             ;* Output : y = char after hex byte, A = hi, X = 
                             ;* Regs affected : A,X,Y
                             ;****************************************
d397 :                       cmd_parse_word
d397 : 207bd3           [ 6] 	jsr cmd_parse_byte			; Get hi byte of word
d39a : b00b             [ 3] 	bcs cmd_word_err
d39c : 8595             [ 3] 	sta cmd_hi					; Save hi byte of word
d39e : 207bd3           [ 6] 	jsr cmd_parse_byte			; Get lo byte of word
d3a1 : b004             [ 3] 	bcs cmd_word_err
d3a3 : 8594             [ 3] 	sta cmd_lo
d3a5 : 18               [ 2] 	clc
d3a6 : 60               [ 6] 	rts
AS65 Assembler for R6502 [1.42].                                     Page  124
-------------------------------- bank\bank0.s --------------------------------

d3a7 :                       cmd_word_err
d3a7 : 38               [ 2] 	sec
d3a8 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* cmd_parse_next_parm
                             ;* Find next non-white space
                             ;* Input : buflo, bufhi, y offset
                             ;* Output : y = start of first parm byte
                             ;* Regs affected : A
                             ;****************************************
d3a9 :                       cmd_parse_next_parm
d3a9 : 88               [ 2] 	dey
d3aa :                       cmd_find_parm
d3aa : c8               [ 2] 	iny
d3ab : b139             [ 5] 	lda (buf_lo),y
d3ad : c900             [ 2] 	cmp #0
d3af : f005             [ 3] 	beq cmd_next_parm_err	; If z then no parms, fin 
d3b1 : c920             [ 2] 	cmp #' '				; Ignore space
d3b3 : f0f5             [ 3] 	beq cmd_find_parm
d3b5 : 18               [ 2] 	clc						; else ok, C is cleared
d3b6 :                       cmd_next_parm_err
d3b6 : 60               [ 6] 	rts
                             
                             	
d3b7 : 3e00                  msg_ready				db ">\x0"
d3b9 : 3f0d00                msg_errmsg				db "?\xd\x0"
d3bc :                       _mod_sz_cmd_e
                             
                             	include "sound/sound.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  SOUND.S
                             ;*  Sound driver module - routines to access the 
                             ;*  This sound chip was found in a number of popu
                             ;*  in the early to mid 80s, including my first c
                             ;*  the Oric-1, as well as the MSX range.
                             ;*
                             ;************************************************
                             
                             
                             	; ROM code
                             	code
                             
d3bc :                       mod_sz_sound_s
                             
                             
                             ;****************************************
                             ;* snd_get_note
                             ;* Get a note from the music scale table
                             ;* Input : Octave in X, note in Y
                             ;* Output : A,X = Value hi,lo
                             ;* Regs affected : X
                             ;****************************************
d3bc :                       snd_get_note
d3bc : 98               [ 2] 	tya
AS65 Assembler for R6502 [1.42].                                     Page  125
-------------------------------- bank\bank0.s --------------------------------

d3bd : 0a               [ 2] 	asl a
d3be : a8               [ 2] 	tay
                             	; Get note for octave 0
d3bf : b9efd3           [ 4] 	lda snd_music_tab,y
d3c2 : 8532             [ 3] 	sta tmp_alo
d3c4 : b9f0d3           [ 4] 	lda snd_music_tab+1,y
                             	
d3c7 :                       snd_get_note_oct
d3c7 : ca               [ 2] 	dex
d3c8 : 3006             [ 3] 	bmi snd_note_done
                             	; Divide freq by 2 each octave
d3ca : 4a               [ 2] 	lsr a
d3cb : 6632             [ 5] 	ror tmp_alo
d3cd : 4cc7d3           [ 3] 	jmp snd_get_note_oct
d3d0 :                       snd_note_done
d3d0 : a632             [ 3] 	ldx tmp_alo
d3d2 : 60               [ 6] 	rts
                             
                             	
                             ;****************************************
                             ;* init_snd
                             ;* Initialise sound - after cia 1 has been initia
                             ;* Input : None
                             ;* Output : None
                             ;* Regs affected : All
                             ;****************************************
d3d3 :                       init_snd
d3d3 : a20f             [ 2] 	ldx #15
d3d5 :                       init_snd_regs
d3d5 : bddfd3           [ 4] 	lda snd_init_tab,x
d3d8 : 2000c0           [ 6] 	jsr snd_set				; Set X to A
d3db : ca               [ 2] 	dex
d3dc : 10f7             [ 3] 	bpl init_snd_regs		; 16 regs
                             	
d3de : 60               [ 6] 	rts						; return from sub
                             
                             	; Register array initialisation values
                             	; Assuming 1.34Mhz input clock
d3df :                       snd_init_tab
d3df : 40                    	db 0x40				; R0 = Channel A Tone Low
d3e0 : 00                    	db 0x00				; R1 = Channel A Tone High
d3e1 : 00                    	db 0x00				; R2 = Channel B Tone Low
d3e2 : 01                    	db 0x01				; R3 = Channel B Tone High
d3e3 : 00                    	db 0x00				; R4 = Channel C Tone Low
d3e4 : 02                    	db 0x02				; R5 = Channel C Tone High
d3e5 : 00                    	db 0x00				; R6 = Noise period
d3e6 : 7e                    	db 0b01111110		; R7 = Control : IOB input, IOA o
d3e7 : 1f                    	db 0x1f				; R8 = Channel A Vol
d3e8 : 1f                    	db 0x1f				; R9 = Channel B Vol
d3e9 : 1f                    	db 0x1f				; R10 = Channel C Vol
d3ea : 00                    	db 0x00				; R11 = Envelope Period Low
d3eb : 03                    	db 0x03				; R12 = Envelope Period High
d3ec : 00                    	db 0b00000000		; R13 = Envelope Shape : 0000
d3ed : ff                    	db 0xff				; R14 = IO Port A - KB lines disabled
d3ee : 00                    	db 0x00				; R15 = IO Port B ; Initialise to 0 (
                             
d3ef :                       snd_music_tab
d3ef : 7707                  	dw 1911				; C		0
d3f1 : 0c07                  	dw 1804				; C#	1
d3f3 : a706                  	dw 1703				; D		2
d3f5 : 4706                  	dw 1607				; D#	3
d3f7 : ed05                  	dw 1517				; E		4
AS65 Assembler for R6502 [1.42].                                     Page  126
-------------------------------- bank\bank0.s --------------------------------

d3f9 : 9805                  	dw 1432				; F		5
d3fb : 4705                  	dw 1351				; F#	6
d3fd : fc04                  	dw 1276				; G		7
d3ff : b404                  	dw 1204				; G#	8
d401 : 7004                  	dw 1136				; A		9
d403 : 3104                  	dw 1073				; A#	10
d405 : f403                  	dw 1012				; B		11
                             
d407 :                       mod_sz_sound_e
                             
d407 :                       mod_sz_bios_e
d407 :                       mod_sz_language_s
                             	include "utils/intmath.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  INTMATH.S
                             ;*  Core module for integer maths supported by df
                             ;*  Now supports signed integers in 2s complement
                             ;*  Uses the intmath registers: num_a, num_b, num
                             ;*  Most inputs are through num_a and num_b, with
                             ;*  num_a
                             ;*  Operations: add, sub, swap, 8 bit mult, mult,
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code
                             
                             ;****************************************
                             ;* Add : A + B result in A
                             ;****************************************
d407 :                       int_add
d407 : 18               [ 2] 	clc
d408 : a53d             [ 3] 	lda num_a
d40a : 6541             [ 3] 	adc num_b
d40c : 853d             [ 3] 	sta num_a
d40e : a53e             [ 3] 	lda num_a+1
d410 : 6542             [ 3] 	adc num_b+1
d412 : 853e             [ 3] 	sta num_a+1
d414 : 60               [ 6] 	rts
                             	
                             ;****************************************
                             ;* Sub : A - B result in A
                             ;****************************************
d415 :                       int_sub
d415 : 38               [ 2] 	sec
d416 : a53d             [ 3] 	lda num_a
d418 : e541             [ 3] 	sbc num_b
d41a : 853d             [ 3] 	sta num_a
d41c : a53e             [ 3] 	lda num_a+1
d41e : e542             [ 3] 	sbc num_b+1
d420 : 853e             [ 3] 	sta num_a+1
d422 : 60               [ 6] 	rts
                             	
                             ;****************************************
                             ;* Swp : A <-> B 
AS65 Assembler for R6502 [1.42].                                     Page  127
-------------------------------- bank\bank0.s --------------------------------

                             ;****************************************
d423 :                       int_swp
d423 : a53d             [ 3] 	lda num_a
d425 : a641             [ 3] 	ldx num_b
d427 : 8541             [ 3] 	sta num_b
d429 : 863d             [ 3] 	stx num_a
d42b : a53e             [ 3] 	lda num_a+1
d42d : a642             [ 3] 	ldx num_b+1
d42f : 8542             [ 3] 	sta num_b+1
d431 : 863e             [ 3] 	stx num_a+1
d433 : 60               [ 6] 	rts
                             	
                             ;****************************************
                             ;* Mult : A * B result in A
                             ;* B assumed to be an 8 bit quantity 
                             ;****************************************
d434 :                       int_fast_mult
                             	_cpyZPWord num_a,num_tmp
                             
d43c : a900             [ 2] 	lda #0
d43e : 853d             [ 3] 	sta num_a
d440 : 853e             [ 3] 	sta num_a+1
d442 : a008             [ 2] 	ldy #8
d444 :                       int_fast_mult_cycle
d444 : 4641             [ 5] 	lsr num_b
d446 : 900d             [ 3] 	bcc int_fast_mult_next
d448 : 18               [ 2] 	clc
d449 : a53d             [ 3] 	lda num_a
d44b : 6549             [ 3] 	adc num_tmp
d44d : 853d             [ 3] 	sta num_a
d44f : a53e             [ 3] 	lda num_a+1
d451 : 654a             [ 3] 	adc num_tmp+1
d453 : 853e             [ 3] 	sta num_a+1
d455 :                       int_fast_mult_next
d455 : 0649             [ 5] 	asl num_tmp
d457 : 264a             [ 5] 	rol num_tmp+1
d459 : 88               [ 2] 	dey
d45a : d0e8             [ 3] 	bne int_fast_mult_cycle
d45c : 60               [ 6] 	rts
                             	
                             ;****************************************
                             ;* Mult : A * B result in A
                             ;****************************************
d45d :                       int_mult
                             	_cpyZPWord num_a,num_tmp
                             
d465 : a900             [ 2] 	lda #0
d467 : 853d             [ 3] 	sta num_a
d469 : 853e             [ 3] 	sta num_a+1
d46b : a010             [ 2] 	ldy #16
d46d :                       int_mult_cycle
d46d : 4642             [ 5] 	lsr num_b+1
d46f : 6641             [ 5] 	ror num_b
d471 : 900d             [ 3] 	bcc int_mult_next
d473 : 18               [ 2] 	clc
d474 : a53d             [ 3] 	lda num_a
d476 : 6549             [ 3] 	adc num_tmp
d478 : 853d             [ 3] 	sta num_a
d47a : a53e             [ 3] 	lda num_a+1
d47c : 654a             [ 3] 	adc num_tmp+1
d47e : 853e             [ 3] 	sta num_a+1
d480 :                       int_mult_next
AS65 Assembler for R6502 [1.42].                                     Page  128
-------------------------------- bank\bank0.s --------------------------------

d480 : 0649             [ 5] 	asl num_tmp
d482 : 264a             [ 5] 	rol num_tmp+1
d484 : 88               [ 2] 	dey
d485 : d0e6             [ 3] 	bne int_mult_cycle
d487 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Div : A / B result in A, remainder X
                             ;****************************************
d488 :                       int_div
                             	; adjust signs
d488 : a900             [ 2] 	lda #0
d48a : 8549             [ 3] 	sta num_tmp				; Assume all +ve
d48c : a53e             [ 3] 	lda num_a+1				; Check A hi
d48e : 100f             [ 3] 	bpl int_div_skip_negA
d490 : e649             [ 5] 	inc num_tmp				; Record sign flip
d492 : 38               [ 2] 	sec						; 2's complement A
d493 : a900             [ 2] 	lda #0					; by 0-A
d495 : e53d             [ 3] 	sbc num_a				; A is now +ve
d497 : 853d             [ 3] 	sta num_a
d499 : a900             [ 2] 	lda #0
d49b : e53e             [ 3] 	sbc num_a+1
d49d : 853e             [ 3] 	sta num_a+1	
d49f :                       int_div_skip_negA
d49f : a542             [ 3] 	lda num_b+1				; Check B hi
d4a1 : 100f             [ 3] 	bpl int_div_skip_negB
d4a3 : e649             [ 5] 	inc num_tmp				; Record sign flip
d4a5 : 38               [ 2] 	sec						; 2's complement B
d4a6 : a900             [ 2] 	lda #0					; by 0-B
d4a8 : e541             [ 3] 	sbc num_b				; B is now +ve
d4aa : 8541             [ 3] 	sta num_b
d4ac : a900             [ 2] 	lda #0
d4ae : e542             [ 3] 	sbc num_b+1
d4b0 : 8542             [ 3] 	sta num_b+1
d4b2 :                       int_div_skip_negB			; num_tmp bit 0=1 for result 
                             	; x is the remainder
d4b2 : a900             [ 2] 	lda #0
d4b4 : 8545             [ 3] 	sta num_x
d4b6 : 8546             [ 3] 	sta num_x+1
                             	; 16 bit division
d4b8 : a010             [ 2] 	ldy #16
d4ba :                       int_div_cycle
                             	; shift a left 1 bit
d4ba : 063d             [ 5] 	asl num_a
d4bc : 263e             [ 5] 	rol num_a+1
                             	; shift in to remainder
d4be : 2645             [ 5] 	rol num_x
d4c0 : 2646             [ 5] 	rol num_x+1
                             	; try and subtract b from remainder
d4c2 : 38               [ 2] 	sec
d4c3 : a545             [ 3] 	lda num_x
d4c5 : e541             [ 3] 	sbc num_b
d4c7 : aa               [ 2] 	tax
d4c8 : a546             [ 3] 	lda num_x+1
d4ca : e542             [ 3] 	sbc num_b+1
d4cc : 9006             [ 3] 	bcc int_div_skip
                             	; so b did fit in to remainder, save it
d4ce : 8645             [ 3] 	stx num_x
d4d0 : 8546             [ 3] 	sta num_x+1
d4d2 : e63d             [ 5] 	inc num_a
d4d4 :                       int_div_skip
                             	; carry on for 16 bits
AS65 Assembler for R6502 [1.42].                                     Page  129
-------------------------------- bank\bank0.s --------------------------------

d4d4 : 88               [ 2] 	dey
d4d5 : d0e3             [ 3] 	bne int_div_cycle
                             	; result in a, remainder in x
                             	; check num_tmp bit 0
d4d7 : a549             [ 3] 	lda num_tmp
d4d9 : 2901             [ 2] 	and #1
d4db : f00d             [ 3] 	beq int_div_noflip
d4dd : 38               [ 2] 	sec						; 2's complement A
d4de : a900             [ 2] 	lda #0					; by 0-A
d4e0 : e53d             [ 3] 	sbc num_a				; A is now +ve
d4e2 : 853d             [ 3] 	sta num_a
d4e4 : a900             [ 2] 	lda #0
d4e6 : e53e             [ 3] 	sbc num_a+1
d4e8 : 853e             [ 3] 	sta num_a+1	
d4ea :                       int_div_noflip
d4ea : 60               [ 6] 	rts
                             	
                             
                             	include "dflat/dflat.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  DFLAT.S
                             ;*  This is the main controller code file for dfl
                             ;*  This file includes all the required dflat sou
                             ;*  needed:
                             ;*  - error.s is the error handling module
                             ;*  - var.s is the variable handling module
                             ;*  - tokenise.s is the tokenisation module
                             ;*  - progedit.s is the program editing module
                             ;*  - runtime.s is the runtime module
                             ;*  - stack.s is the stack handling module
                             ;*  The above modules include further source file
                             ;*  needed.
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code
                             
d4eb :                       mod_sz_dflat_s
                             
                             ;	include "dflat/error.s"  ** included in the mai
                             	include "dflat/var.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  VAR.S
                             ;*  This module handles all the variable manageme
                             ;*  When a new variable is detected during tokeni
                             ;*  is added to the variable tables.  Any subsequ
                             ;*  that variable is tokenised as an index in to 
AS65 Assembler for R6502 [1.42].                                     Page  130
-------------------------------- bank\bank0.s --------------------------------

                             ;*  table.  There are two variable tables:
                             ;*  Variable name table (VNT) keeps track of vari
                             ;*  Variable value table (VVT) maintains variable
                             ;*  including type, dimension (if array) and of c
                             ;*  actual values.  For an array, the value is a 
                             ;*  memory grabbed using the 'malloc' function (s
                             ;*  This approach to variable managemet is direct
                             ;*  Atari 8 bit.  The disadvantage is that during
                             ;*  session you may end up having a much larger v
                             ;*  table than you need.  Why?  Well because say 
                             ;*  %a as a new variable, but then later change i
                             ;*  In this case %a remains in the variable table
                             ;*  only ever adds to the table!  However it is e
                             ;*  solved - when you save and then reload from n
                             ;*  program, the variable table is built up as th
                             ;*  is loaded.
                             ;*  The VNT grows DOWN from the top of free memor
                             ;*  the VVT growing UP from just below the VNT.
                             ;*	This means that the VVT for a variable will al
                             ;*	found in a fixed place in the VVT table and me
                             ;*	For the VNT (names) it grows from vvstart at l
                             ;*
                             ;************************************************
                             
                             
                             	; ROM code
                             	code  
                             
d4eb :                       mod_sz_var_s
                             
                             
                             ;****************************************
                             ;* Find a variable
                             ;* CC if found, A has index
                             ;****************************************
d4eb :                       df_var_find
                             	; start at the beginning of the vnt table
                             	; vars are stored in reverse order
                             	_cpyZPWord df_vntstrt,df_tmpptrb
                             
                             	; start at end of VVT
                             	_cpyZPWord df_vvtend,df_tmpptra
                             
d4fb :                       df_var_match_vnt
                             	; If reached top of VVT then not found
d4fb : a5a1             [ 3] 	lda df_tmpptra
d4fd : c56d             [ 3] 	cmp df_vvtstrt
d4ff : d006             [ 4] 	bne df_var_match_vnt_do
d501 : a5a2             [ 3] 	lda df_tmpptra+1
d503 : c56e             [ 3] 	cmp df_vvtstrt+1
d505 : f04c             [ 3] 	beq df_var_find_no_vnt
d507 :                       df_var_match_vnt_do
                             	; match each char in buffer with vnt
d507 : a47c             [ 3] 	ldy df_linoff
d509 : a200             [ 2] 	ldx #0
d50b :                       df_var_match_vnt_sym
d50b : b90004           [ 4] 	lda df_linbuff,y
d50e : c1a3             [ 6] 	cmp (df_tmpptrb,x)
d510 : d01f             [ 3] 	bne df_var_vnt_sym_nomatch
                             	; if single char match then increment
                             	; source and search
d512 : c8               [ 2] 	iny
AS65 Assembler for R6502 [1.42].                                     Page  131
-------------------------------- bank\bank0.s --------------------------------

                             	_incZPWord df_tmpptrb
                             
                             	; if more chars in vnt entry then continue
d519 : a1a3             [ 6] 	lda (df_tmpptrb,x)
d51b : d0ee             [ 3] 	bne df_var_match_vnt_sym
                             	; if no more chars in vnt entry but
                             	; but chars in buffer then try next vnt
d51d : b90004           [ 4] 	lda df_linbuff,y
                             	; check for valid alpha-numeric
d520 : 20e1d6           [ 6] 	jsr df_tk_isalphanum
d523 : 9002             [ 3] 	bcc df_var_check_type
                             	; if there is a valid alpha-num then no match
d525 : b00a             [ 3] 	bcs df_var_vnt_sym_nomatch
d527 :                       df_var_check_type
                             	; if not alpha-num then check for type
                             	; string or int postfix didn't match with VNT
d527 : c925             [ 2] 	cmp #'%'
d529 : f006             [ 3] 	beq df_var_vnt_sym_nomatch
d52b : c924             [ 2] 	cmp #'$'
d52d : f002             [ 3] 	beq df_var_vnt_sym_nomatch
                             	; ok, all good got a match
d52f : d028             [ 3] 	bne df_var_find_true
d531 :                       df_var_vnt_sym_nomatch
                             	; find the zero terminator
d531 : a1a3             [ 6] 	lda (df_tmpptrb,x)
d533 : f009             [ 3] 	beq	df_var_vnt_entry_end
                             	_incZPWord df_tmpptrb
                             
d53b : 4c31d5           [ 3] 	jmp df_var_vnt_sym_nomatch
d53e :                       df_var_vnt_entry_end
                             	; skip over zero terminator
                             	_incZPWord df_tmpptrb
                             
                             	; update vvt address pointer
d544 : 18               [ 2] 	clc
d545 : a5a1             [ 3] 	lda df_tmpptra
d547 : 6908             [ 2] 	adc #8
d549 : 85a1             [ 3] 	sta df_tmpptra
d54b : a5a2             [ 3] 	lda df_tmpptra+1
d54d : 6900             [ 2] 	adc #0
d54f : 85a2             [ 3] 	sta df_tmpptra+1
d551 : d0a8             [ 4] 	bne df_var_match_vnt		; Always - high byte is no
                             
                             	; if at end of vnt then no matches found
d553 :                       df_var_find_no_vnt
d553 : a900             [ 2] 	lda #0
d555 : a200             [ 2] 	ldx #0
d557 : 38               [ 2] 	sec
d558 : 60               [ 6] 	rts
                             
d559 :                       df_var_find_true
                             	; Get slot address into x,a
d559 : a6a1             [ 3] 	ldx df_tmpptra
d55b : a5a2             [ 3] 	lda df_tmpptra+1
                             	
                             	; Consume characters found in source
d55d : 847c             [ 3] 	sty df_linoff
d55f : 18               [ 2] 	clc
d560 : 60               [ 6] 	rts
                             
                             	
                             ;****************************************
AS65 Assembler for R6502 [1.42].                                     Page  132
-------------------------------- bank\bank0.s --------------------------------

                             ;* Insert a variable name in to vnt
                             ;* X = number of bytes to make room
                             ;* Space allocated is;
                             ;*	8 bytes for the new VVT entry
                             ;*  X bytes for the new VNT entry
                             ;* df_vntstrt is new var name entry
                             ;* df_vvtend is new vvt entry
                             ;****************************************
d561 :                       df_var_insert_space
                             	; *** REMEMBER TO DO A SPACE CHECK EVENTUALLY! *
                             
                             	; adjust down the VNT start by VVT size (for ext
                             	; put it in tmpptrb
d561 : 38               [ 2] 	sec
d562 : a569             [ 3] 	lda df_vntstrt
d564 : e908             [ 2] 	sbc #DFVVT_SZ
d566 : 8569             [ 3] 	sta df_vntstrt
d568 : a56a             [ 3] 	lda df_vntstrt+1
d56a : e900             [ 2] 	sbc #0
d56c : 856a             [ 3] 	sta df_vntstrt+1
                             	
                             	; adjust VNT end by VVT size (for extra VVT entr
                             	; and put it in tmpptrc
d56e : 38               [ 2] 	sec
d56f : a56b             [ 3] 	lda df_vntend
d571 : e908             [ 2] 	sbc #DFVVT_SZ
d573 : 856b             [ 3] 	sta df_vntend
d575 : a56c             [ 3] 	lda df_vntend+1
d577 : e900             [ 2] 	sbc #0
d579 : 856c             [ 3] 	sta df_vntend+1
                             
                             	; Set copy point to new start of VNT
                             	_cpyZPWord df_vntstrt,df_tmpptra
                             
                             
                             	; Now move all bytes from old VNT (higher up) to
d583 : 18               [ 2] 	clc
d584 :                       df_var_move_byte
                             	; When pointer = vntend then done
d584 : a5a1             [ 3] 	lda df_tmpptra
d586 : c56b             [ 3] 	cmp df_vntend
d588 : d006             [ 3] 	bne df_var_move_byte_do
d58a : a5a2             [ 3] 	lda df_tmpptra+1
d58c : c56c             [ 3] 	cmp df_vntend+1
d58e : f011             [ 3] 	beq df_var_move_byte_fin
d590 :                       df_var_move_byte_do
                             	; First the source byte VVT size higher in memor
d590 : a008             [ 2] 	ldy #DFVVT_SZ
d592 : b1a1             [ 5] 	lda (df_tmpptra),y
                             	; And copy to new position lower in memory
d594 : a000             [ 2] 	ldy #0
d596 : 91a1             [ 5] 	sta (df_tmpptra),y
                             	; Increment memor pointer
                             	_incZPWord df_tmpptra
                             
d59e : 4c84d5           [ 3] 	jmp df_var_move_byte		; Always as C is not touch
d5a1 :                       df_var_move_byte_fin
                             	
                             	; Now subtract X bytes from VNT start to accommo
d5a1 : 8638             [ 3] 	stx tmp_d
d5a3 : 38               [ 2] 	sec
d5a4 : a569             [ 3] 	lda df_vntstrt
AS65 Assembler for R6502 [1.42].                                     Page  133
-------------------------------- bank\bank0.s --------------------------------

d5a6 : e538             [ 3] 	sbc tmp_d
d5a8 : 8569             [ 3] 	sta df_vntstrt
d5aa : a56a             [ 3] 	lda df_vntstrt+1
d5ac : e900             [ 2] 	sbc #0
d5ae : 856a             [ 3] 	sta df_vntstrt+1
                             
                             	; VVT end is the same as VNT end
                             	_cpyZPWord df_vntend,df_vvtend
                             
                             
                             	; Copy done increment variable count
d5b8 : e671             [ 5] 	inc df_varcnt
d5ba : 18               [ 2] 	clc
d5bb : 60               [ 6] 	rts
                             	
                             	
                             ;****************************************
                             ;* Analyse variable name
                             ;* Return type in A
                             ;* NOT C = It is a variable
                             ;* C = It is not a variable
                             ;* X = Length including pre-fixes
                             ;* Y = Offset to next char after var name
                             ;****************************************
d5bc :                       df_var_analyse
                             	; Default type is INT
d5bc : a901             [ 2] 	lda #DFVVT_INT
d5be : 85a1             [ 3] 	sta df_tmpptra
                             	
                             	; start at the current buffer position
d5c0 : a47c             [ 3] 	ldy df_linoff
                             	
                             	; check for PROC prefix
d5c2 : b90004           [ 4] 	lda df_linbuff,y
d5c5 : c95f             [ 2] 	cmp #'_'
                             	; if it is not proc then get the name
d5c7 : d005             [ 3] 	bne df_var_not_proc
                             	; else set type to PROC
d5c9 : a940             [ 2] 	lda #DFVVT_PROC
d5cb : 85a1             [ 3] 	sta df_tmpptra
                             	; skip over prefix
d5cd : c8               [ 2] 	iny
d5ce :                       df_var_not_proc
                             	; found the actual number of alpha nums
d5ce : a2ff             [ 2] 	ldx #0xff
                             	; go back on pos on index as loop always does in
d5d0 : 88               [ 2] 	dey
d5d1 :                       df_var_type_countlen
                             	; count alpha nums
d5d1 : c8               [ 2] 	iny
d5d2 : e8               [ 2] 	inx
d5d3 : b90004           [ 4] 	lda df_linbuff,y
                             	; first char has to be alpha, rest can be alpha-
d5d6 : e000             [ 2] 	cpx #0
d5d8 : d007             [ 3] 	bne df_var_type_countlen_alphanum
d5da : 20d4d6           [ 6] 	jsr df_tk_isalpha
d5dd : b0f2             [ 3] 	bcs df_var_type_countlen
d5df : 9005             [ 3] 	bcc df_var_type_countlen_done
d5e1 :                       df_var_type_countlen_alphanum
d5e1 : 20e1d6           [ 6] 	jsr df_tk_isalphanum
d5e4 : b0eb             [ 3] 	bcs df_var_type_countlen
d5e6 :                       df_var_type_countlen_done
AS65 Assembler for R6502 [1.42].                                     Page  134
-------------------------------- bank\bank0.s --------------------------------

d5e6 : e000             [ 2] 	cpx #0
d5e8 : d00a             [ 3] 	bne df_var_analyse_chk_post
                             	; if zero alphanums error but not fatal
d5ea :                       df_var_analyse_err
                             	; If already prefix of PROC then fatal error
d5ea : a5a1             [ 3] 	lda df_tmpptra
d5ec : c940             [ 2] 	cmp #DFVVT_PROC
d5ee : f002             [ 3] 	beq df_var_analyse_fatal_err
d5f0 : 38               [ 2] 	sec
d5f1 : 60               [ 6] 	rts
d5f2 :                       df_var_analyse_fatal_err
                             	SWBRK DFERR_SYNTAX
                             
d5f4 :                       df_var_analyse_chk_post
                             	; first see if the char is $
                             	; but cannot already have PROC prefix
                             ;	cmp #'%'
                             ;	bne df_var_analyse_chk_dollar
                             ;	ldx df_tmpptra
                             ;	cpx #DFVVT_PROC
                             ;	beq df_var_analyse_fatal_err
                             	; Set to INT type although it is the default alr
                             ;	lda #DFVVT_INT
                             ;	sta df_tmpptra
                             	; advance the buffer index
                             ;	iny
                             ;	bne df_var_analyse_chk_arry
d5f4 :                       df_var_analyse_chk_dollar
                             	; now see if the char is $
                             	; but cannot already have PROC prefix
d5f4 : c924             [ 2] 	cmp #'$'
d5f6 : d00b             [ 4] 	bne df_var_analyse_chk_arry
d5f8 : a6a1             [ 3] 	ldx df_tmpptra
d5fa : e040             [ 2] 	cpx #DFVVT_PROC
d5fc : f0f4             [ 3] 	beq df_var_analyse_fatal_err
                             	; Set to STRING type
d5fe : a904             [ 2] 	lda #DFVVT_STR
d600 : 85a1             [ 3] 	sta df_tmpptra
                             	; advance the buffer index
d602 : c8               [ 2] 	iny
d603 :                       df_var_analyse_chk_arry
                             	; Check for array type vs PROC
d603 : b90004           [ 4] 	lda df_linbuff,y
d606 : c95b             [ 2] 	cmp #'['
d608 : d00a             [ 3] 	bne df_var_not_arry
                             	; array and proc type not compatible
d60a : a5a1             [ 3] 	lda df_tmpptra
d60c : c940             [ 2] 	cmp #DFVVT_PROC
d60e : f0e2             [ 4] 	beq df_var_analyse_fatal_err
d610 : 0980             [ 2] 	ora #DFVVT_ARRY
d612 : 85a1             [ 3] 	sta df_tmpptra
d614 :                       df_var_not_arry
                             	; Ok got everything
                             	; calculate length from y
                             	; y is next char after var name
d614 : 98               [ 2] 	tya
d615 : 38               [ 2] 	sec
d616 : e57c             [ 3] 	sbc df_linoff			; where we started
                             	; put len in X
d618 : aa               [ 2] 	tax
                             	; put type in A
d619 : a5a1             [ 3] 	lda df_tmpptra
AS65 Assembler for R6502 [1.42].                                     Page  135
-------------------------------- bank\bank0.s --------------------------------

d61b : 18               [ 2] 	clc
d61c : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Find or create a variable
                             ;* If found then type needs to match mask
                             ;* Not a fatal error because could be part
                             ;* of a trial of different parsing options
                             ;****************************************
d61d :                       df_var_findcreate
                             	; save mask
d61d : 48               [ 3] 	pha
d61e : 20ebd4           [ 6] 	jsr df_var_find
d621 : b013             [ 3] 	bcs df_var_findcreate_create
                             	; restore mask to check for 0 then push
d623 : 68               [ 4] 	pla
d624 : 48               [ 3] 	pha
                             	; don't check mask if zero
d625 : f008             [ 3] 	beq df_var_findcreate_found
                             	; restore mask
d627 : 68               [ 4] 	pla
d628 : a000             [ 2] 	ldy #DFVVT_TYPE
d62a : 31a1             [ 5] 	and (df_tmpptra),y
                             	; but if mask is non zero then this must be non 
d62c : f019             [ 3] 	beq df_var_findcreate_err
d62e : 48               [ 3] 	pha		; Dummy push to match the pla
d62f :                       df_var_findcreate_found
                             	; discard mask
d62f : 68               [ 4] 	pla	
                             	; put slot address in x,a
d630 : a6a1             [ 3] 	ldx df_tmpptra
d632 : a5a2             [ 3] 	lda df_tmpptra+1
d634 : 18               [ 2] 	clc
d635 : 60               [ 6] 	rts
                             	
                             	;* If no existing variable found, add one to VNT
d636 :                       df_var_findcreate_create
                             	; find type (A) and length (X)
d636 : 20bcd5           [ 6] 	jsr df_var_analyse
                             	; keep A temporarily
d639 : 85a1             [ 3] 	sta df_tmpptra
                             	; if not a variable then return with C=1
d63b : b009             [ 3] 	bcs df_var_findcreate_errp
                             	; check if mask needs to be applied
d63d : 68               [ 4] 	pla
d63e : f009             [ 3] 	beq df_var_analyse_ok
                             	; else mask and check
d640 : 25a1             [ 3] 	and df_tmpptra
                             	; mask match is ok
d642 : d005             [ 3] 	bne df_var_analyse_ok
                             	; else return not found
d644 : f001             [ 3] 	beq df_var_findcreate_err
d646 :                       df_var_findcreate_errp
d646 : 68               [ 4] 	pla
d647 :                       df_var_findcreate_err
d647 : 38               [ 2] 	sec
d648 : 60               [ 6] 	rts
                             
d649 :                       df_var_analyse_ok
                             	; extra space for zero terminator
d649 : e8               [ 2] 	inx
                             	; save data in reverse order to when needed
AS65 Assembler for R6502 [1.42].                                     Page  136
-------------------------------- bank\bank0.s --------------------------------

                             	; by the initialise section x,a (var name sz, ty
                             	; insert space of X bytes
d64a : a5a1             [ 3] 	lda df_tmpptra
d64c : 48               [ 3] 	pha
d64d : 8a               [ 2] 	txa
d64e : 48               [ 3] 	pha
                             	
d64f : 2061d5           [ 6] 	jsr df_var_insert_space
d652 : 9002             [ 3] 	bcc df_var_initialise_var
                             	; error inserting space
                             	SWBRK DFERR_OK
                             
                             	
d656 :                       df_var_initialise_var
d656 : 68               [ 4] 	pla
d657 : 85a5             [ 3] 	sta df_tmpptrc				; var name size + 1
                             
d659 : 68               [ 4] 	pla							; type
d65a : a000             [ 2] 	ldy #DFVVT_TYPE
d65c : 916f             [ 5] 	sta (df_vvtend),y			; put type in vvt slot
d65e : a900             [ 2] 	lda #0						; zero the rest
d660 : a007             [ 2] 	ldy #7
d662 :                       df_var_zero_vnt
d662 : 916f             [ 5] 	sta (df_vvtend),y
d664 : 88               [ 2] 	dey
d665 : d0fb             [ 3] 	bne df_var_zero_vnt
                             
d667 : c6a5             [ 5] 	dec df_tmpptrc				; 1 less to copy variable name
                             
d669 : a67c             [ 3] 	ldx df_linoff				; Start at var name beginning
d66b : a000             [ 2] 	ldy #0
                             	; copy variable name to vnt slot
d66d :                       df_var_findcreate_copy
d66d : bd0004           [ 4] 	lda df_linbuff,x
d670 : 9169             [ 5] 	sta (df_vntstrt),y
d672 : e8               [ 2] 	inx
d673 : c8               [ 2] 	iny
d674 : c6a5             [ 5] 	dec df_tmpptrc
d676 : d0f5             [ 3] 	bne df_var_findcreate_copy
                             	; put in zero terminator
d678 : a900             [ 2] 	lda #0
d67a : 9169             [ 5] 	sta (df_vntstrt),y
                             
                             	; Put X in to Y
d67c : 8a               [ 2] 	txa
d67d : a8               [ 2] 	tay
                             
                             	; Return address of slot in X,A
d67e : a66f             [ 3] 	ldx df_vvtend
d680 : a570             [ 3] 	lda df_vvtend+1
                             	
d682 : 847c             [ 3] 	sty df_linoff				; Y is the main index used
                             
d684 : 18               [ 2] 	clc
d685 : 60               [ 6] 	rts
                             	
d686 :                       mod_sz_var_e
                             
                             	include "dflat/tokenise.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
AS65 Assembler for R6502 [1.42].                                     Page  137
-------------------------------- bank\bank0.s --------------------------------

                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  TOKENISE.S
                             ;*  Controlling module for tokenisation.  Basical
                             ;*  module is given a raw input buffer, which it 
                             ;*  attempt to tokenise fully.  Any syntax errors
                             ;*  thrown at the first point of detection.  If a
                             ;*  well, the parsed input will be in a tokenised
                             ;*  which can be executed in immediate mode or sa
                             ;*  line number order to memory.
                             ;*  dflat syntax is very simple - every statement
                             ;*  with a keyword.  The only exception is assign
                             ;*  procedure invocation - but even these scenari
                             ;*  tokenised so during runtime we just execute t
                             ;*  The raw buffer is consumed one byte at a time
                             ;*  tokenised buffer is written one byte at a tim
                             ;*  syntax means there is no need to undo reads o
                             ;*  or tokenised buffer.  The only refinement is 
                             ;*  allowed to peek a character in the raw buffer
                             ;*  consuming it.
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code
                             
d686 :                       mod_sz_tokenise_s
                             
                             
                             ;****************************************
                             ;* df_tk_peek_buf
                             ;* Return next char in A but no change to pointer
                             ;****************************************
d686 :                       df_tk_peek_buf
d686 : a47c             [ 3] 	ldy df_linoff
d688 : b90004           [ 4] 	lda df_linbuff,y
d68b : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* df_tk_get_buf
                             ;* Return next char in A and inc pointer
                             ;* Don't advance if null char found and Z=1
                             ;****************************************
d68c :                       df_tk_get_buf
d68c : a47c             [ 3] 	ldy df_linoff
d68e : b90004           [ 4] 	lda df_linbuff,y
d691 : f003             [ 3] 	beq df_tk_get_buf_null
d693 : c8               [ 2] 	iny
d694 : 847c             [ 3] 	sty df_linoff
d696 :                       df_tk_get_buf_null
d696 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* df_tk_put_tok
                             ;* Put A in token buffer and inc pointer
                             ;* C=Clear on exit
                             ;****************************************
d697 :                       df_tk_put_tok
d697 : a47d             [ 3] 	ldy df_tokoff
AS65 Assembler for R6502 [1.42].                                     Page  138
-------------------------------- bank\bank0.s --------------------------------

d699 : 998004           [ 5] 	sta df_tokbuff,y
d69c : c8               [ 2] 	iny
d69d : 3004             [ 3] 	bmi df_tk_put_overflow
d69f : 847d             [ 3] 	sty df_tokoff
d6a1 : 18               [ 2] 	clc
d6a2 : 60               [ 6] 	rts
d6a3 :                       df_tk_put_overflow
d6a3 : a958             [ 2] 	lda #'X'
d6a5 : 8d80bb           [ 4] 	sta 48000
                             	SWBRK DFERR_STRLONG
                             
                             
                             ;****************************************
                             ;* df_tk_isdigit
                             ;* Check char in A for number 0-9
                             ;* Return: CC = False, CS = True
                             ;****************************************
d6aa :                       df_tk_isdigit
d6aa : c93a             [ 2] 	cmp #'9'+1
d6ac : b005             [ 3] 	bcs df_tk_isdigit_false
d6ae : c930             [ 2] 	cmp #'0'
d6b0 : 9001             [ 3] 	bcc df_tk_isdigit_false
d6b2 : 60               [ 6] 	rts						; C must be 1
d6b3 :                       df_tk_isdigit_false
d6b3 : 18               [ 2] 	clc
d6b4 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* df_tk_isbin
                             ;* Check char in A for binary digit
                             ;* Return: CC = False, CS = True
                             ;****************************************
d6b5 :                       df_tk_isbin
d6b5 : c930             [ 2] 	cmp #'0'
d6b7 : f005             [ 3] 	beq df_tk_isbin_true	; C=1
d6b9 : c931             [ 2] 	cmp #'1'
d6bb : f001             [ 3] 	beq df_tk_isbin_true	; C=1
d6bd : 18               [ 2] 	clc
d6be :                       df_tk_isbin_true
d6be : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* df_tk_ishex
                             ;* Check char in A for number 0-9, A-F, a-f
                             ;* Return: CC = False, CS = True
                             ;****************************************
d6bf :                       df_tk_ishex
d6bf : 48               [ 3] 	pha
d6c0 : 20aad6           [ 6] 	jsr df_tk_isdigit
d6c3 : b00a             [ 3] 	bcs df_tk_ishex_truep
d6c5 : 0920             [ 2] 	ora #0x20
d6c7 : c967             [ 2] 	cmp #'f'+1
d6c9 : b006             [ 3] 	bcs df_tk_ishex_false
d6cb : c961             [ 2] 	cmp #'a'
d6cd : 9002             [ 3] 	bcc df_tk_ishex_false
                             	; C must be 1 here
d6cf :                       df_tk_ishex_truep
d6cf : 68               [ 4] 	pla
d6d0 : 60               [ 6] 	rts
d6d1 :                       df_tk_ishex_false
d6d1 :                       df_tk_isalpha_false
d6d1 : 18               [ 2] 	clc
AS65 Assembler for R6502 [1.42].                                     Page  139
-------------------------------- bank\bank0.s --------------------------------

d6d2 : 68               [ 4] 	pla
d6d3 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* df_tk_isalpha
                             ;* Check next char in A alpha a-z, A-Z
                             ;* Return: CC = False, CS = True
                             ;****************************************
d6d4 :                       df_tk_isalpha
d6d4 : 48               [ 3] 	pha
d6d5 : 0920             [ 2] 	ora #0x20					; Convert to lower case for checki
d6d7 : c97b             [ 2] 	cmp #'z'+1
d6d9 : b0f6             [ 3] 	bcs df_tk_isalpha_false
d6db : c961             [ 2] 	cmp #'a'
d6dd : 90f2             [ 3] 	bcc df_tk_isalpha_false
                             	; C must be 1 here
d6df : 68               [ 4] 	pla
d6e0 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* df_tk_isalphanum
                             ;* Check next char A for a-z,A-Z,0-9
                             ;* Return: CC = False, CS = True
                             ;****************************************
d6e1 :                       df_tk_isalphanum
d6e1 : 20d4d6           [ 6] 	jsr df_tk_isalpha
d6e4 : 90c4             [ 3] 	bcc df_tk_isdigit
d6e6 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* df_tk_isproc
                             ;* Check next char A for _
                             ;* Return: CC = False, CS = True
                             ;****************************************
d6e7 :                       df_tk_isproc
d6e7 : c95f             [ 2] 	cmp #'_'
d6e9 : f001             [ 3] 	beq df_tk_isproc_true	; C=1
d6eb : 18               [ 2] 	clc
d6ec :                       df_tk_isproc_true
d6ec : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* df_tk_skip_ws
                             ;* Skip ws in linbuff
                             ;* Return: linoff updated to next non-ws, A = cha
                             ;****************************************
d6ed :                       df_tk_skip_ws
d6ed :                       df_tk_ws_loop1
d6ed : 2086d6           [ 6] 	jsr df_tk_peek_buf
d6f0 : 200ad7           [ 6] 	jsr df_tk_isws
d6f3 : 9007             [ 3] 	bcc df_tk_ws_done
d6f5 : e67c             [ 5] 	inc df_linoff
d6f7 : 2097d6           [ 6] 	jsr df_tk_put_tok
d6fa : 90f1             [ 3] 	bcc df_tk_ws_loop1		; Always as put_tok clears C
d6fc :                       df_tk_ws_done
d6fc : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* df_tk_skip_ws
                             ;* Skip ws in linbuff
                             ;* Return: linoff updated to next non-ws, A = cha
                             ;****************************************
AS65 Assembler for R6502 [1.42].                                     Page  140
-------------------------------- bank\bank0.s --------------------------------

d6fd :                       df_tk_strip_ws
d6fd :                       df_tk_sws_loop1
d6fd : 2086d6           [ 6] 	jsr df_tk_peek_buf
d700 : 200ad7           [ 6] 	jsr df_tk_isws
d703 : 90f7             [ 4] 	bcc df_tk_ws_done
d705 : e67c             [ 5] 	inc df_linoff
d707 : 90f4             [ 4] 	bcc df_tk_sws_loop1		; Always as C is not touche
d709 :                       df_tk_sws_done
d709 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* df_tk_isws
                             ;* Check char is ws (only space is counted)
                             ;* Return: CC = False, CS = True
                             ;****************************************
d70a :                       df_tk_isws
d70a : c920             [ 2] 	cmp #' '
d70c : d001             [ 3] 	bne df_tk_isws_false
                             	; C must be 1 here
d70e : 60               [ 6] 	rts
d70f :                       df_tk_isws_false
d70f :                       df_tk_expectok
d70f : 18               [ 2] 	clc
d710 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Find a character expected ignoring ws
                             ;* Input A = expected char
                             ;* CC = found, CS = Error
                             ;****************************************
d711 :                       df_tk_expect
d711 : 48               [ 3] 	pha
                             	; skip ws
d712 : 20edd6           [ 6] 	jsr df_tk_skip_ws
                             	; peek the buffer
d715 : 68               [ 4] 	pla
d716 : a47c             [ 3] 	ldy df_linoff
d718 : d90004           [ 4] 	cmp df_linbuff,y
                             	; if expected char then ok
d71b : f0f2             [ 3] 	beq df_tk_expectok
                             	; else error
d71d :                       df_tk_num_err
d71d :                       df_tk_char_err
d71d : 38               [ 2] 	sec
d71e : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Find a character expected ignoring ws
                             ;* Input A = expected char
                             ;* Tokenises the character as well
                             ;* CC = found, CS = Error
                             ;****************************************
d71f :                       df_tk_expect_tok
d71f : 2011d7           [ 6] 	jsr df_tk_expect
d722 : b006             [ 3] 	bcs df_tk_expecttokret
d724 : 208cd6           [ 6] 	jsr df_tk_get_buf
d727 : 4c97d6           [ 3] 	jmp df_tk_put_tok
d72a :                       df_tk_expecttokret
d72a : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Find a character expected ignoring ws
AS65 Assembler for R6502 [1.42].                                     Page  141
-------------------------------- bank\bank0.s --------------------------------

                             ;* Input A = expected char
                             ;* Tokenises the character as well
                             ;* FATAL IF NOT FOUND
                             ;****************************************
d72b :                       df_tk_expect_tok_err
d72b : 201fd7           [ 6] 	jsr df_tk_expect_tok
d72e : b001             [ 3] 	bcs df_tk_expect_tok_fatal
                             	; C must be 0 here
d730 : 60               [ 6] 	rts
d731 :                       df_tk_expect_tok_fatal
                             	SWBRK DFERR_SYNTAX
                             
                             
                             ;****************************************
                             ;* Tokenise a constant number
                             ;****************************************
d733 :                       df_tk_num
                             	; X,A = address, linbuff must be on page boundar
d733 : 18               [ 2] 	clc
d734 : a900             [ 2] 	lda #lo(df_linbuff)
d736 : 657c             [ 3] 	adc df_linoff
d738 : aa               [ 2] 	tax
d739 : a904             [ 2] 	lda #hi(df_linbuff)
d73b : 6900             [ 2] 	adc #0
d73d : a000             [ 2] 	ldy #0				; any numeric format
d73f : 209cc1           [ 6] 	jsr con_n_to_a
d742 : b0d9             [ 3] 	bcs df_tk_num_err
                             	; A = format
                             	; X = how many digits processed
                             	; Jump over that many chars
d744 : a8               [ 2] 	tay
d745 : 18               [ 2] 	clc
d746 : 8a               [ 2] 	txa
d747 : 657c             [ 3] 	adc df_linoff
d749 : 857c             [ 3] 	sta df_linoff
                             	; Now tokenise an integer (always 2 bytes, but t
d74b : 98               [ 2] 	tya
d74c : c901             [ 2] 	cmp #NUM_DEC
d74e : d004             [ 3] 	bne df_tk_num_hexbin
d750 : a909             [ 2] 	lda #DFTK_INTDEC	; decimal always an int
d752 : d016             [ 3] 	bne df_tk_num_put
d754 :                       df_tk_num_hexbin
d754 : c902             [ 2] 	cmp #NUM_HEX
d756 : d00a             [ 3] 	bne df_tk_num_bin
d758 : a906             [ 2] 	lda #DFTK_BYTHEX	; Assume BYT
d75a : e005             [ 2] 	cpx #5				; If >4 chars then INT
d75c : 900c             [ 3] 	bcc df_tk_num_put
d75e : a90a             [ 2] 	lda #DFTK_INTHEX
d760 : d008             [ 3] 	bne df_tk_num_put
d762 :                       df_tk_num_bin
d762 : a907             [ 2] 	lda #DFTK_BYTBIN	; Assume BYT
d764 : e00b             [ 2] 	cpx #11				; If >10 chars then INT
d766 : 9002             [ 3] 	bcc df_tk_num_put
d768 : a90b             [ 2] 	lda #DFTK_INTBIN
d76a :                       df_tk_num_put
d76a : 2097d6           [ 6] 	jsr df_tk_put_tok	; Save number type (DEC,HEX,BI
d76d : a53d             [ 3] 	lda num_a
d76f : 2097d6           [ 6] 	jsr df_tk_put_tok
d772 : a53e             [ 3] 	lda num_a+1
d774 : 4c97d6           [ 3] 	jmp df_tk_put_tok
                             
                             ;****************************************
AS65 Assembler for R6502 [1.42].                                     Page  142
-------------------------------- bank\bank0.s --------------------------------

                             ;* Tokenise a constant char
                             ;****************************************
d777 :                       df_tk_char
                             	; skip the first quote
d777 : 208cd6           [ 6] 	jsr df_tk_get_buf
                             	; put in the token
d77a : a900             [ 2] 	lda #DFTK_CHR
d77c : 2097d6           [ 6] 	jsr df_tk_put_tok
                             	; get the char value and save
d77f : 208cd6           [ 6] 	jsr df_tk_get_buf
d782 : 2097d6           [ 6] 	jsr df_tk_put_tok
                             	; always put two bytes in, even for a BYTE type
d785 : a900             [ 2] 	lda #0
d787 : 2097d6           [ 6] 	jsr df_tk_put_tok
                             	; next byte must be single quote
d78a : 208cd6           [ 6] 	jsr df_tk_get_buf
d78d : c927             [ 2] 	cmp #0x27
d78f : d08c             [ 3] 	bne df_tk_char_err
d791 : 18               [ 2] 	clc
d792 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Tokenise a constant string
                             ;****************************************
d793 :                       df_tk_str
                             	; skip the first quote
d793 : 208cd6           [ 6] 	jsr df_tk_get_buf
                             	; put in the token
d796 : a910             [ 2] 	lda #DFTK_STRLIT
d798 : 2097d6           [ 6] 	jsr df_tk_put_tok
d79b :                       df_tk_str_ch
                             	; copy string chars in to token buffer
                             	; until another quote or end of line
d79b : 208cd6           [ 6] 	jsr df_tk_get_buf
d79e : c900             [ 2] 	cmp #0
d7a0 : f011             [ 3] 	beq df_tk_str_err
d7a2 : c922             [ 2] 	cmp #0x22
d7a4 : f006             [ 3] 	beq df_tk_str_don
d7a6 : 2097d6           [ 6] 	jsr df_tk_put_tok
d7a9 : 4c9bd7           [ 3] 	jmp df_tk_str_ch
d7ac :                       df_tk_str_don
                             	; zero terminated strings
d7ac : a900             [ 2] 	lda #0
d7ae : 4c97d6           [ 3] 	jmp df_tk_put_tok
d7b1 :                       df_tk_var_noarry
d7b1 : 18               [ 2] 	clc
d7b2 : 60               [ 6] 	rts
d7b3 :                       df_tk_str_err
                             	SWBRK DFERR_SYNTAX
                             
                             
                             ;****************************************
                             ;* Tokenise a constant (num, string, char)
                             ;****************************************
d7b5 :                       df_tk_const
d7b5 : 20edd6           [ 6] 	jsr df_tk_skip_ws
                             	; Check what constant it is
d7b8 : 2086d6           [ 6] 	jsr df_tk_peek_buf
                             	; Minus symbol could be start of a number
d7bb : c92d             [ 2] 	cmp #'-'
d7bd : f005             [ 3] 	beq df_tk_const_try_num
d7bf : 20aad6           [ 6] 	jsr df_tk_isdigit
AS65 Assembler for R6502 [1.42].                                     Page  143
-------------------------------- bank\bank0.s --------------------------------

d7c2 : 9003             [ 3] 	bcc df_tk_const_try_str
d7c4 :                       df_tk_const_try_num
d7c4 : 4c33d7           [ 3] 	jmp df_tk_num
d7c7 :                       df_tk_const_try_str
                             	; check for double quote
d7c7 : c922             [ 2] 	cmp #0x22
d7c9 : d003             [ 3] 	bne df_tk_const_try_char
d7cb : 4c93d7           [ 3] 	jmp df_tk_str
d7ce :                       df_tk_const_try_char
                             	; check for single apostrophe
d7ce : c927             [ 2] 	cmp #0x27
d7d0 : d003             [ 3] 	bne df_tk_const_err
d7d2 : 4c77d7           [ 3] 	jmp df_tk_char
d7d5 :                       df_tk_const_err
                             	SWBRK DFERR_SYNTAX
                             
                             
                             ;****************************************
                             ;* Tokenise a variable - A = mask
                             ;* Return : A = variable index
                             ;****************************************
d7d7 :                       df_tk_var
                             	; Find or create variable, address in X,A
d7d7 : 201dd6           [ 6] 	jsr df_var_findcreate
d7da : 9001             [ 3] 	bcc df_tk_var_cont
d7dc : 60               [ 6] 	rts
d7dd :                       df_tk_var_cont
                             	; Save X,A for later
d7dd : 48               [ 3] 	pha
d7de : 8a               [ 2] 	txa
d7df : 48               [ 3] 	pha
                             	; Put VAR escape in token buffer
d7e0 : a911             [ 2] 	lda #DFTK_VAR
d7e2 : 2097d6           [ 6] 	jsr df_tk_put_tok
                             	; Get variable address and put in token buffer
d7e5 : 68               [ 4] 	pla
d7e6 : 2097d6           [ 6] 	jsr df_tk_put_tok
d7e9 : 68               [ 4] 	pla
d7ea : 2097d6           [ 6] 	jsr df_tk_put_tok
                             	; count of any array indices
d7ed :                       df_tk_var_ck
                             	; check if array procesing needed
d7ed : a95b             [ 2] 	lda #'['
d7ef : 201fd7           [ 6] 	jsr df_tk_expect_tok
d7f2 : b0bd             [ 3] 	bcs df_tk_var_noarry
                             	; process numeric expression in bracket
d7f4 : 4c9ed8           [ 3] 	jmp df_tk_narry
                             
                             
                             ;****************************************
                             ;* Tokenise a parameter in proc definition
                             ;* Return : A = variable index
                             ;****************************************
d7f7 :                       df_tk_parm
                             	; if preceeding with non-local qualifier DFTK_VA
d7f7 : 2086d6           [ 6] 	jsr df_tk_peek_buf
d7fa : c926             [ 2] 	cmp #DFTK_VARPARM
d7fc : d006             [ 4] 	bne df_tk_parm_skip_var
                             	; get the qualifier and put in token buffer
d7fe : 208cd6           [ 6] 	jsr df_tk_get_buf
d801 : 2097d6           [ 6] 	jsr df_tk_put_tok
d804 :                       df_tk_parm_skip_var
AS65 Assembler for R6502 [1.42].                                     Page  144
-------------------------------- bank\bank0.s --------------------------------

                             	; don't have a certain type of var
d804 : a900             [ 2] 	lda #0
d806 : 4cd7d7           [ 3] 	jmp df_tk_var
                             
                             
                             ;****************************************
                             ;* Tokenise a variable to localise
                             ;* Return : A,X = variable index
                             ;****************************************
d809 :                       df_tk_localvar
                             	; Find or create variable, index in A
d809 : 201dd6           [ 6] 	jsr df_var_findcreate
d80c : 9001             [ 3] 	bcc df_tk_localvar_cont
d80e : 60               [ 6] 	rts
d80f :                       df_tk_localvar_cont
                             	; Save variable address for later
d80f : 48               [ 3] 	pha
d810 : 8a               [ 2] 	txa
d811 : 48               [ 3] 	pha
                             	; Put VAR escape in token buffer
d812 : a911             [ 2] 	lda #DFTK_VAR
d814 : 2097d6           [ 6] 	jsr df_tk_put_tok
                             	; Get variable index and put in token buffer
d817 : 68               [ 4] 	pla
d818 : 2097d6           [ 6] 	jsr df_tk_put_tok
d81b : 68               [ 4] 	pla
d81c : 4c97d6           [ 3] 	jmp df_tk_put_tok
                             
                             ;****************************************
                             ;* Tokenise array variable
                             ;* Return : A = variable index
                             ;****************************************
d81f :                       df_tk_arrvar
                             	; Like a local var at first
d81f : 2009d8           [ 6] 	jsr df_tk_localvar
                             	; but must be array
d822 : a95b             [ 2] 	lda #'['
d824 : 202bd7           [ 6] 	jsr df_tk_expect_tok_err
                             	; process numeric expression in bracket
d827 : 4c9ed8           [ 3] 	jmp df_tk_narry
                             
                             ;****************************************
                             ;* Tokenise call or def of proc
                             ;* Mode : A = 0 means def, else call
                             ;****************************************
d82a :                       df_tk_proc
d82a : 858b             [ 3] 	sta df_procmode
d82c : 20edd6           [ 6] 	jsr df_tk_skip_ws
                             	; Find or create proc, index in A
d82f : a940             [ 2] 	lda #DFVVT_PROC
d831 : 201dd6           [ 6] 	jsr df_var_findcreate
d834 : b066             [ 3] 	bcs df_tk_proc_err
                             
                             	; Save variable address for later
d836 : 868e             [ 3] 	stx df_procptr
d838 : 858f             [ 3] 	sta df_procptr+1
                             
                             	; Put PROC escape in token buffer
d83a : a912             [ 2] 	lda #DFTK_PROC
d83c : 2097d6           [ 6] 	jsr df_tk_put_tok
                             	; Get variable address and put in token buffer
d83f : a58e             [ 3] 	lda df_procptr
AS65 Assembler for R6502 [1.42].                                     Page  145
-------------------------------- bank\bank0.s --------------------------------

d841 : 2097d6           [ 6] 	jsr df_tk_put_tok
d844 : a58f             [ 3] 	lda df_procptr+1
d846 : 2097d6           [ 6] 	jsr df_tk_put_tok
                             
                             	; initially assume no args
d849 : a900             [ 2] 	lda #0
d84b : 858c             [ 3] 	sta df_procargs
                             
                             	; Must have an open bracket
d84d : a928             [ 2] 	lda #'('
d84f : 202bd7           [ 6] 	jsr df_tk_expect_tok_err
                             	; if immediately followed by close bracket then 
d852 : 2086d6           [ 6] 	jsr df_tk_peek_buf
d855 : c929             [ 2] 	cmp #')'
d857 : f030             [ 3] 	beq df_tk_proc_noparm
                             	; else tokenise parm variables
d859 :                       df_tk_proc_parms
d859 : 20edd6           [ 6] 	jsr df_tk_skip_ws
                             	; call appropriate routine for mode
d85c : a58b             [ 3] 	lda df_procmode
d85e : d006             [ 3] 	bne df_tk_proc_call
                             	; tokenise parameter variable in def mode
d860 : 20f7d7           [ 6] 	jsr df_tk_parm
d863 : 4c6fd8           [ 3] 	jmp df_tk_proc_skip_call
d866 :                       df_tk_proc_call
                             	; tokenise expression in call mode
                             	;**CHECK**
d866 : a58c             [ 3] 	lda df_procargs	; procargs could be impacted ins
d868 : 48               [ 3] 	pha
d869 : 201ed9           [ 6] 	jsr df_tk_expression
d86c : 68               [ 4] 	pla
d86d : 858c             [ 3] 	sta df_procargs
d86f :                       df_tk_proc_skip_call
d86f : b02a             [ 3] 	bcs df_tk_proc_errp
                             	; increment number of args
d871 : e68c             [ 5] 	inc df_procargs
                             	; what is next non ws char
d873 : 20edd6           [ 6] 	jsr df_tk_skip_ws
d876 : c92c             [ 2] 	cmp #','
d878 : f006             [ 3] 	beq df_tk_proc_comma
d87a : c929             [ 2] 	cmp #')'
d87c : d01d             [ 3] 	bne df_tk_proc_errp
d87e : f009             [ 3] 	beq df_tk_proc_noparm
                             	; comma found, more parms to process
d880 :                       df_tk_proc_comma
d880 : 208cd6           [ 6] 	jsr df_tk_get_buf
d883 : 2097d6           [ 6] 	jsr df_tk_put_tok
d886 : 4c59d8           [ 3] 	jmp df_tk_proc_parms
d889 :                       df_tk_proc_noparm
                             	; consume the close bracket
d889 : 208cd6           [ 6] 	jsr df_tk_get_buf
d88c : 2097d6           [ 6] 	jsr df_tk_put_tok
                             
                             	; update arg count if def mode
d88f : a68b             [ 3] 	ldx df_procmode
d891 : d006             [ 3] 	bne df_tk_proc_skip_args
                             	; use address of proc
                             	; put arg count in dim2
d893 : a004             [ 2] 	ldy #DFVVT_DIM2
d895 : a58c             [ 3] 	lda df_procargs
d897 : 918e             [ 5] 	sta (df_procptr),y
d899 :                       df_tk_proc_skip_args
AS65 Assembler for R6502 [1.42].                                     Page  146
-------------------------------- bank\bank0.s --------------------------------

d899 : 18               [ 2] 	clc
d89a : 60               [ 6] 	rts
d89b :                       df_tk_proc_errp
d89b : 68               [ 4] 	pla
d89c :                       df_tk_proc_err
                             	SWBRK DFERR_SYNTAX
                             
                             
                             ;****************************************
                             ;* Parse array index
                             ;****************************************
d89e :                       df_tk_narry
                             	; if array open bracket encountered
                             	; then tokenise a numeric expression
d89e : 201ed9           [ 6] 	jsr df_tk_expression
                             	; If a comma is next, then another expression
d8a1 : a92c             [ 2] 	lda #','
d8a3 : 201fd7           [ 6] 	jsr df_tk_expect_tok
d8a6 : b003             [ 3] 	bcs df_tk_narry_end
d8a8 : 201ed9           [ 6] 	jsr df_tk_expression
d8ab :                       df_tk_narry_end
                             	; after the second dimension, must be close sq b
d8ab : a95d             [ 2] 	lda #']'
d8ad : 4c2bd7           [ 3] 	jmp df_tk_expect_tok_err
                             
                             ;****************************************
                             ;* Parse bracket
                             ;****************************************
d8b0 :                       df_tk_nbrkt
                             	; if  open bracket encountered
                             	; then tokenise a numeric expression
d8b0 : 201ed9           [ 6] 	jsr df_tk_expression
d8b3 : a929             [ 2] 	lda #')'
d8b5 : 4c2bd7           [ 3] 	jmp df_tk_expect_tok_err
                             
                             ;****************************************
                             ;* Parse call to numeric proc
                             ;****************************************
d8b8 :                       df_tk_nterm_proc
                             	; call mode
d8b8 : a901             [ 2] 	lda #1
d8ba : 4c2ad8           [ 3] 	jmp df_tk_proc
                             
                             ;****************************************
                             ;* Parse numeric term
                             ;****************************************
d8bd :                       df_tk_nterm
                             	; skip any ws first, copying in to tokbuff
                             	; A containts the non-ws char
d8bd : 20edd6           [ 6] 	jsr df_tk_skip_ws
d8c0 : c900             [ 2] 	cmp #0
d8c2 : f004             [ 3] 	beq df_tk_nterm_done
d8c4 : c93a             [ 2] 	cmp #':'
d8c6 : d002             [ 3] 	bne df_tk_nterm_cont
d8c8 :                       df_tk_nterm_done
d8c8 :                       df_tk_nop_false
d8c8 : 38               [ 2] 	sec
d8c9 : 60               [ 6] 	rts
d8ca :                       df_tk_nterm_cont
                             	; if open bracket then process it
d8ca : c928             [ 2] 	cmp #'('
d8cc : d009             [ 3] 	bne df_tk_nterm_tryfn
AS65 Assembler for R6502 [1.42].                                     Page  147
-------------------------------- bank\bank0.s --------------------------------

                             	; get the bracket and put in token buffer
d8ce : 208cd6           [ 6] 	jsr df_tk_get_buf
d8d1 : 2097d6           [ 6] 	jsr df_tk_put_tok
                             	; go process the open bracket
d8d4 : 4cb0d8           [ 3] 	jmp df_tk_nbrkt
d8d7 :                       df_tk_nterm_tryfn
d8d7 : 48               [ 3] 	pha
                             	; try decoding a built-in function
d8d8 : a902             [ 2] 	lda #DFTK_FN
d8da : 20fbd9           [ 6] 	jsr df_tk_matchtok
d8dd : b00e             [ 3] 	bcs df_tk_nterm_try_proc
                             	; pull old A in to Y but don't use
d8df : 68               [ 4] 	pla
d8e0 : a8               [ 2] 	tay
                             	; restore A and put the token with MSB set
d8e1 : 8a               [ 2] 	txa
d8e2 : 0980             [ 2] 	ora #0x80
d8e4 : 2097d6           [ 6] 	jsr df_tk_put_tok
d8e7 : 20cdd9           [ 6] 	jsr df_tk_exec_parser
d8ea : b01b             [ 4] 	bcs df_tk_nterm_err
d8ec : 60               [ 6] 	rts
d8ed :                       df_tk_nterm_try_proc
d8ed : 68               [ 4] 	pla
                             	; if it's not a func then try proc
d8ee : 20e7d6           [ 6] 	jsr df_tk_isproc
d8f1 : 9006             [ 3] 	bcc df_tk_nterm_try_var
d8f3 : 20b8d8           [ 6] 	jsr df_tk_nterm_proc
d8f6 : b00f             [ 4] 	bcs df_tk_nterm_err
d8f8 : 60               [ 6] 	rts
d8f9 :                       df_tk_nterm_try_var
                             	; Non-zero mask means var must be this type
d8f9 : a900             [ 2] 	lda #0
d8fb : 20d7d7           [ 6] 	jsr df_tk_var
d8fe : b001             [ 4] 	bcs df_tk_nterm_try_const
d900 : 60               [ 6] 	rts
d901 :                       df_tk_nterm_try_const
                             	; Try decoding a constant
d901 : 20b5d7           [ 6] 	jsr df_tk_const
d904 : b001             [ 3] 	bcs df_tk_nterm_err
d906 : 60               [ 6] 	rts
d907 :                       df_tk_nterm_err
                             	SWBRK DFERR_SYNTAX
                             
                             
                             ;****************************************
                             ;* Parse numeric operator
                             ;****************************************
d909 :                       df_tk_nop
d909 : 20edd6           [ 6] 	jsr df_tk_skip_ws
d90c : c900             [ 2] 	cmp #0
d90e : f0b8             [ 4] 	beq df_tk_nop_false
                             	; must be an operator token for numeric
d910 : a90c             [ 2] 	lda #DFTK_OP | DFTK_STROP
d912 : 20fbd9           [ 6] 	jsr df_tk_matchtok
d915 : b0b1             [ 4] 	bcs df_tk_nop_false
                             	; got a token
d917 : 0980             [ 2] 	ora #DFTK_TOKEN
d919 : 2097d6           [ 6] 	jsr df_tk_put_tok
d91c : 18               [ 2] 	clc
d91d : 60               [ 6] 	rts
                             
                             	
AS65 Assembler for R6502 [1.42].                                     Page  148
-------------------------------- bank\bank0.s --------------------------------

                             ;****************************************
                             ;* Parse numeric expression
                             ;****************************************
d91e :                       df_tk_expression
                             	; Tokenise a numeric term
d91e : 20bdd8           [ 6] 	jsr df_tk_nterm
d921 : b006             [ 3] 	bcs df_tk_expre_err
                             	; Try and tokenise a numeric operator
d923 : 2009d9           [ 6] 	jsr df_tk_nop
                             	; If an operator was tokenised
                             	; then loop back for another term
d926 : 90f6             [ 3] 	bcc df_tk_expression
                             	; If no operator was found then
                             	; expression is done
d928 :                       df_tk_not_eos
d928 : 18               [ 2] 	clc
d929 :                       df_tk_expre_err
d929 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Find expected token and parse expression
                             ;****************************************
d92a :                       df_tk_tok_expression
d92a : 202bd7           [ 6] 	jsr df_tk_expect_tok_err
d92d : 4c1ed9           [ 3] 	jmp df_tk_expression
                             
                             
                             ;****************************************
                             ;* Check end of statement
                             ;****************************************
d930 :                       df_tk_isEOS
d930 : a93a             [ 2] 	lda #':'
d932 : 201fd7           [ 6] 	jsr df_tk_expect_tok
d935 : b0f1             [ 3] 	bcs df_tk_not_eos
                             	; this is the position of the next statement
d937 : a57d             [ 3] 	lda df_tokoff
                             	; put it in the last statement offset slot
d939 : a47f             [ 3] 	ldy df_nxtstidx
d93b : 998004           [ 5] 	sta df_tokbuff,y
d93e : 38               [ 2] 	sec
d93f : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* Parse user defined proc
                             ;****************************************
d940 :                       df_tk_parse_user_proc
                             	; put proc token in as a call
d940 : a981             [ 2] 	lda #0x81
d942 : 2097d6           [ 6] 	jsr df_tk_put_tok
d945 : a901             [ 2] 	lda #1
d947 : 4c2ad8           [ 3] 	jmp df_tk_proc
                             
                             
                             ;****************************************
                             ;* Parse a command
                             ;* Do not fatal error if this fails
                             ;****************************************
d94a :                       df_tk_parse_command
                             	; only looking for keywords
d94a : a901             [ 2] 	lda #DFTK_KW
d94c : 20fbd9           [ 6] 	jsr df_tk_matchtok
AS65 Assembler for R6502 [1.42].                                     Page  149
-------------------------------- bank\bank0.s --------------------------------

                             	; if didn't find regular keywords then try non f
d94f : b010             [ 3] 	bcs df_tk_parse_command_err
                             	; if match then store token in the line buffer
                             	; Set MSB
d951 : 0980             [ 2] 	ora #0x80
d953 : 2097d6           [ 6] 	jsr df_tk_put_tok
                             	; call the parser to do tokenise based on the st
d956 : a583             [ 3] 	lda df_symoff
d958 : 20cdd9           [ 6] 	jsr df_tk_exec_parser
d95b : b004             [ 3] 	bcs df_tk_parse_command_err
                             	; [1] ignore white space but keep it
d95d : 20edd6           [ 6] 	jsr df_tk_skip_ws
                             	; No error in parsing this command
d960 :                       df_tk_parse_command_done
d960 : 18               [ 2] 	clc
d961 :                       df_tk_parse_command_err
d961 : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* lexer
                             ;****************************************
d962 :                       df_lexer_line
d962 : a900             [ 2] 	lda #0
                             	; start at the beginning of the line buffer
d964 : 857c             [ 3] 	sta df_linoff
                             	; start at the beginning of the tokenised buffer
d966 : 857d             [ 3] 	sta df_tokoff
                             	; set current line to the token buffer
d968 : a980             [ 2] 	lda #lo(df_tokbuff)
d96a : 8586             [ 3] 	sta df_currlin
d96c : a904             [ 2] 	lda #hi(df_tokbuff)
d96e : 8587             [ 3] 	sta df_currlin+1
                             	; Set the line length to 0
d970 : a900             [ 2] 	lda #0
d972 : 2097d6           [ 6] 	jsr df_tk_put_tok
                             
                             	; any leading white space, ignore and discard
d975 : 20fdd6           [ 6] 	jsr df_tk_strip_ws
                             
                             	; if peek next character is a number then assume
                             	; else assume a statement
d978 : 20aad6           [ 6] 	jsr df_tk_isdigit
d97b : 9006             [ 3] 	bcc df_lexer_skip_lnum
                             	; if line number then capture the line number an
d97d : 20dcd9           [ 6] 	jsr df_tk_linenum
d980 : 4c8bd9           [ 3] 	jmp df_tk_body
d983 :                       df_lexer_skip_lnum
                             	; if no line number then zero out the line numbe
                             	; line zero will indicate an immediate mode comm
d983 : a900             [ 2] 	lda #0
d985 : 2097d6           [ 6] 	jsr df_tk_put_tok				; Line num low byte
d988 : 2097d6           [ 6] 	jsr df_tk_put_tok				; Line num high byte
d98b :                       df_tk_body
                             	; Offset for next statement
d98b : a57d             [ 3] 	lda df_tokoff
d98d : 857f             [ 3] 	sta df_nxtstidx
d98f : a900             [ 2] 	lda #0
d991 : 2097d6           [ 6] 	jsr df_tk_put_tok				; Offset to next statement
                             	; [1] capture white space from line buffer in to
d994 : 20edd6           [ 6] 	jsr df_tk_skip_ws
                             	; If next non ws is zero then this is an empty l
AS65 Assembler for R6502 [1.42].                                     Page  150
-------------------------------- bank\bank0.s --------------------------------

                             	; so return with length zero but line number fil
                             	; token buffer
d997 : c900             [ 2] 	cmp #0
d999 : f02e             [ 3] 	beq df_tk_line_empty
                             	; if next char is _ then parse a user defined pr
d99b : 20e7d6           [ 6] 	jsr df_tk_isproc
d99e : 9006             [ 3] 	bcc df_tk_try_command
d9a0 : 2040d9           [ 6] 	jsr df_tk_parse_user_proc
d9a3 : 4cb2d9           [ 3] 	jmp df_tk_done
d9a6 :                       df_tk_try_command
                             	; try  a keyword
d9a6 : 204ad9           [ 6] 	jsr df_tk_parse_command
d9a9 : b002             [ 3] 	bcs	df_tk_try_assign
d9ab : 9005             [ 3] 	bcc df_tk_done
d9ad :                       df_tk_try_assign
                             	; nothing but to try an assignment operation
d9ad : 2060dd           [ 6] 	jsr df_tk_assign
d9b0 : b019             [ 3] 	bcs	df_tk_parseerror
d9b2 :                       df_tk_done
                             	; put statement index stuff here in case of mult
                             	; check for : and if present tokenise plus updat
                             	; then go back to try and process another statem
d9b2 : 2030d9           [ 6] 	jsr df_tk_isEOS
d9b5 : b0d4             [ 3] 	bcs df_tk_body
                             	; if not at end of line, then must be error
d9b7 : 2086d6           [ 6] 	jsr df_tk_peek_buf
d9ba : c900             [ 2] 	cmp #0
d9bc : d00d             [ 3] 	bne df_tk_parseerror
                             	; Get line length length
d9be : a47d             [ 3] 	ldy df_tokoff
                             	; ensure there is always a zero after the last t
d9c0 : a900             [ 2] 	lda #0
d9c2 : 998004           [ 5] 	sta df_tokbuff,y
                             	; save the line length
d9c5 : 98               [ 2] 	tya
d9c6 : 8d8004           [ 4] 	sta df_tokbuff
d9c9 :                       df_tk_line_empty
d9c9 : 18               [ 2] 	clc
d9ca : 60               [ 6] 	rts
d9cb :                       df_tk_parseerror
                             	SWBRK DFERR_SYNTAX
                             
                             
                             ;****************************************
                             ;* df_tk_parsestatement
                             ;* Execute parse routine for this statement
                             ;* Input: df_tokoff is the token found
                             ;* Return: CC = Parsed ok, CS = Error
                             ;****************************************
d9cd :                       df_tk_exec_parser
d9cd : 0a               [ 2] 	asl a
d9ce : aa               [ 2] 	tax
d9cf : bd17dc           [ 4] 	lda df_tk_tokenjmp,x
d9d2 : 85a1             [ 3] 	sta df_tmpptra
d9d4 : bd18dc           [ 4] 	lda df_tk_tokenjmp+1,x
d9d7 : 85a2             [ 3] 	sta df_tmpptra+1
d9d9 : 6ca100           [ 6] 	jmp (df_tmpptra)
                             
                             
                             ;****************************************
                             ;* df_tk_linenum
                             ;* Tokenise line number
AS65 Assembler for R6502 [1.42].                                     Page  151
-------------------------------- bank\bank0.s --------------------------------

                             ;****************************************
d9dc :                       df_tk_linenum
                             	; Convert line number to 16 bit number
                             	; Save the line number
                             	; Increment the buffer pointer
d9dc : 18               [ 2] 	clc
d9dd : a900             [ 2] 	lda #lo(df_linbuff)
d9df : 657c             [ 3] 	adc df_linoff
d9e1 : aa               [ 2] 	tax
d9e2 : a904             [ 2] 	lda #hi(df_linbuff)
d9e4 : 6900             [ 2] 	adc #0
d9e6 : a001             [ 2] 	ldy #1			; Decimal format only
d9e8 : 209cc1           [ 6] 	jsr con_n_to_a
d9eb : 18               [ 2] 	clc
d9ec : 8a               [ 2] 	txa
d9ed : 657c             [ 3] 	adc df_linoff
d9ef : 857c             [ 3] 	sta df_linoff
                             	; Now save line number
d9f1 : a53d             [ 3] 	lda num_a
d9f3 : 2097d6           [ 6] 	jsr df_tk_put_tok
d9f6 : a53e             [ 3] 	lda num_a+1
d9f8 : 4c97d6           [ 3] 	jmp df_tk_put_tok
                             
                             ;****************************************
                             ;* df_tk_matchtok
                             ;* Try and find a token match against the table d
                             ;* Input:
                             ;*			Current df_linbuff and df_linoff
                             ;* Return: 	CC = No Error, CS = Error
                             ;*			df_linoff points to next char if CC else unc
                             ;*			df_symoff is the symbol table index
                             ;****************************************
d9fb :                       df_tk_matchtok
                             	; save the mask to check types against
d9fb : 48               [ 3] 	pha
                             	; Start at token symbols beginning
d9fc : a97d             [ 2] 	lda #lo(df_tokensyms)
d9fe : 8581             [ 3] 	sta df_symtab
da00 : a9da             [ 2] 	lda #hi(df_tokensyms)
da02 : 8582             [ 3] 	sta df_symtab+1
da04 : a900             [ 2] 	lda #0
da06 : 8583             [ 3] 	sta df_symoff
da08 :                       df_tk_checknexttok
                             	; check this token type first
da08 : 68               [ 4] 	pla
da09 : 48               [ 3] 	pha
da0a : a683             [ 3] 	ldx df_symoff
da0c : 3ddddc           [ 4] 	and df_tk_tokentype,x
da0f : f032             [ 3] 	beq df_tk_symnomatch
                             	; Special check for operator token
                             	; because of order of precedence fudge
                             	; ******FIX THIS ONE DAY!!!!!!******
                             	; if parm and token type = DFTK_OP then ok
                             	; if parm and token type <> DFTK_OP then not ok
da11 : bddddc           [ 4] 	lda df_tk_tokentype,x
da14 : 2908             [ 2] 	and #DFTK_OP
da16 : f009             [ 3] 	beq df_tk_matchtok_skip_op
da18 : 68               [ 4] 	pla
da19 : 48               [ 3] 	pha
da1a : 2908             [ 2] 	and #DFTK_OP
da1c : 3ddddc           [ 4] 	and df_tk_tokentype,x
da1f : f022             [ 3] 	beq df_tk_symnomatch
AS65 Assembler for R6502 [1.42].                                     Page  152
-------------------------------- bank\bank0.s --------------------------------

da21 :                       df_tk_matchtok_skip_op
                             	; From the line buffer current pointer
                             	; Check for a token match
da21 : a47c             [ 3] 	ldy df_linoff
da23 : a200             [ 2] 	ldx #0
da25 :                       df_tk_checktokch
                             	; Get symtable char
                             	; and mask off MSB
da25 : a181             [ 6] 	lda (df_symtab,x)
                             	; Save the value and mask off MSB
da27 : 48               [ 3] 	pha
da28 : 297f             [ 2] 	and #0x7f
                             	; Compare with current line buffer char
da2a : d90004           [ 4] 	cmp df_linbuff,y
                             	; If chars not match then this symbol fails
da2d : d013             [ 3] 	bne df_tk_symnomatchp
                             	; If match and symbol has MSB then
                             	; all of the symbol matched
da2f : 68               [ 4] 	pla
da30 : 3033             [ 3] 	bmi df_tk_symfound
                             	; else more chars to match
                             	; so increment line buffer pointers
                             	_incZPWord df_symtab
                             
da38 : c8               [ 2] 	iny
                             	; If buffer is '.' then let this be a match
da39 : b90004           [ 4] 	lda df_linbuff,y
da3c : c92e             [ 2] 	cmp #'.'
da3e : f025             [ 3] 	beq df_tk_symfound
da40 : d0e3             [ 3] 	bne df_tk_checktokch	; branch always
da42 :                       df_tk_symnomatchp
da42 : 68               [ 4] 	pla
da43 :                       df_tk_symnomatch
                             	; Increment symbol counter to next symbol
da43 : e683             [ 5] 	inc df_symoff
da45 :                       df_tk_symnextentry
da45 : a200             [ 2] 	ldx #0
da47 : a181             [ 6] 	lda (df_symtab,x)
                             	; End of symbol is MSB
da49 : 3009             [ 3] 	bmi  df_tk_foundsymend
                             	_incZPWord df_symtab
                             
da51 : 4c45da           [ 3] 	jmp df_tk_symnextentry
da54 :                       df_tk_foundsymend
                             	; Increment char to point to new symbol
                             	; for matching with line buffer
                             	_incZPWord df_symtab
                             
                             	; If next char is not zero then
                             	; try and match with line buffer
da5a : a181             [ 6] 	lda (df_symtab,x)
da5c : d0aa             [ 3] 	bne df_tk_checknexttok
                             	; else symbol table exhausted
                             	; so no match found
                             	; pop mask off stack
da5e : 68               [ 4] 	pla
                             	; Zero symbol counter
da5f : a900             [ 2] 	lda #0
da61 : 8583             [ 3] 	sta df_symoff
                             	; Set C to indicate error (no match)
da63 : 38               [ 2] 	sec
da64 : 60               [ 6] 	rts
AS65 Assembler for R6502 [1.42].                                     Page  153
-------------------------------- bank\bank0.s --------------------------------

da65 :                       df_tk_symfound
                             	; Full match with keyword in symtable but
                             	; if matching with something that ended in alpha
                             	; then check the next buffer char is not alphanu
                             	; as this could be part of a variable name
                             	; Point to next buffer char in any case
da65 : c8               [ 2] 	iny
                             	; First mask off MSB
da66 : 297f             [ 2] 	and #0x7f
                             	; Then check if alpha
da68 : 20d4d6           [ 6] 	jsr df_tk_isalpha
                             	; if not alpha then we're definitely done
da6b : 9008             [ 3] 	bcc df_tk_symfound_final
                             	; else check buffer
da6d : b90004           [ 4] 	lda df_linbuff,y
                             	; if it is an alphanum then
da70 : 20e1d6           [ 6] 	jsr df_tk_isalphanum
                             	; do not count as a match
da73 : b0ce             [ 3] 	bcs df_tk_symnomatch
da75 :                       df_tk_symfound_final
                             	; pop mask off stack
da75 : 68               [ 4] 	pla
                             	; Save line buffer pointer (points to next char)
                             	; Clear C to indicate success (match)
da76 : 847c             [ 3] 	sty df_linoff
da78 : a583             [ 3] 	lda df_symoff
da7a : aa               [ 2] 	tax
da7b : 18               [ 2] 	clc
da7c : 60               [ 6] 	rts
                             
                             	include "dflat/tksymtab.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  TKSYMTAB.S
                             ;*  Runtime token jump table.
                             ;*  dflat uses four key tables to tokenise and ru
                             ;*  - df_tokensyms    - table of token symbols
                             ;*  - df_tk_tokentype - table of token types
                             ;*  - df_tk_tokenjmp  - table of tokenising routi
                             ;*  - df_rt_tokenjmp  - table of runtime routines
                             ;*  The key is the token symbols.  When a line is
                             ;*  in to the raw (untokenised) buffer, df_tokens
                             ;*  used to identify tokens.  The position of the
                             ;*  token is used to then look up type and jump v
                             ;*  in the other tables.
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code  
                             
                             ; Statement Token table
                             ; keywords
da7d :                       df_tokensyms
da7d : 80                    	db	0x80						; Implicit numeric assign
da7e : 80                    	db	0x80						; Implicit call procedure
AS65 Assembler for R6502 [1.42].                                     Page  154
-------------------------------- bank\bank0.s --------------------------------

da7f : bb                    	db	";"+0x80					; Comment
da80 : 7072696e746cee        	db	"printl",'n'+0x80			; println exprlist
da87 : 7072696e7461f4        	db	"printa",'t'+0x80			; printat x,y,exprlist
da8e : 7072696ef4            	db	"prin",'t'+0x80				; print exprlist
da93 : 6465e6                	db	"de",'f'+0x80				; def_subname
da96 : 656e646465e6          	db	"endde",'f'+0x80			; enddef
da9c : 7265747572ee          	db	"retur",'n'+0x80			; return
daa2 : 61626f72f4            	db	"abor",'t'+0x80				; abort
daa7 : 6c6f6361ec            	db	"loca",'l'+0x80				; local varlist
daac : 6469ed                	db	"di",'m'+0x80				; dim varlist
daaf : 7265706561f4          	db	"repea",'t'+0x80			; repeat
dab5 : 756e7469ec            	db	"unti", 'l'+0x80			; until condition
daba : 666ff2                	db	"fo",'r'+0x80				; for var=start,end,incremen
dabd : 6e6578f4              	db	"nex",'t'+0x80				; next
dac1 : 7768696ce5            	db	"whil",'e'+0x80				; while condition
dac6 : 77656ee4              	db	"wen",'d'+0x80				; wend
daca : 69e6                  	db	"i",'f'+0x80				; if condition
dacc : 656c73e5              	db	"els",'e'+0x80				; else
dad0 : 656e6469e6            	db	"endi",'f'+0x80				; endif
dad5 : 656c69e6              	db	"eli",'f'+0x80				; elif condition
dad9 : 646174e1              	db	"dat",'a'+0x80				; data
dadd : ae                    	db	'.'+0x80					; assembler command
dade : 7275ee                	db	"ru",'n'+0x80				; run
dae1 : 6c6973f4              	db	"lis",'t'+0x80				; list _proc-|*|line,line
dae5 : 696e7075f4            	db	"inpu",'t'+0x80				; input var
daea : 746578f4              	db	"tex",'t'+0x80				; text
daee : 706c6ff4              	db	"plo",'t'+0x80				; plot x,y,char|string
daf2 : 637572736ff2          	db	"curso",'r'+0x80			; cursor n
daf8 : 636cf3                	db	"cl",'s'+0x80				; cls
dafb : 706f6be5              	db	"pok",'e'+0x80				; poke a,v
daff : 646f6be5              	db	"dok",'e'+0x80				; doke a,v
db03 : 736f756ee4            	db	"soun",'d'+0x80				; sound
db08 : 6d757369e3            	db	"musi",'c'+0x80				; music
db0d : 706c61f9              	db	"pla",'y'+0x80				; play
db11 : 736176e5              	db	"sav",'e'+0x80				; save "fname"
db15 : 6c6f61e4              	db	"loa",'d'+0x80				; load "fname"
db19 : 726561e4              	db	"rea",'d'+0x80				; read
db1d : 6e65f7                	db	"ne",'w'+0x80				; new
db20 : 72656e75ed            	db	"renu",'m'+0x80				; renum start,offset,incre
db25 : 776169f4              	db	"wai",'t'+0x80				; wait delay
db29 : 72657365f4            	db	"rese",'t'+0x80				; reset var
db2e : 68697265f3            	db	"hire",'s'+0x80				; hires col
db33 : 706f696ef4            	db	"poin",'t'+0x80				; point x,y
db38 : 6c696ee5              	db	"lin",'e'+0x80				; line x0,y0,x1,y1
db3c : 6c696e6574ef          	db	"linet",'o'+0x80			; lineto x1,y1
db42 : 7069786d6f64e5        	db	"pixmod",'e'+0x80			; pixmode n
db49 : 696eeb                	db	"in",'k'+0x80				; ink n
db4c : 70617065f2            	db	"pape",'r'+0x80				; paper n
db51 : 636972636ce5          	db	"circl",'e'+0x80			; circle x,y,r
                             ;	db	"fil",'l'+0x80				; fill x,y,w,h,v
db57 : 68696d65ed            	db	"hime",'m'+0x80				; himem addr
db5c : 6d6f6e69746ff2        	db	"monito",'r'+0x80			; monitor
db63 : 737072636861f2        	db	"sprcha",'r'+0x80			; sprchar sp,ch
db6a : 737072706ff3          	db	"sprpo",'s'+0x80			; sprpos sp,x,y
db70 : 7370727570e4          	db	"sprup",'d'+0x80			; sprupd
db76 : 737072696e69f4        	db	"sprini",'t'+0x80			; sprinit
db7d : 7370726d756c74e9      	db	"sprmult",'i'+0x80			; sprmulti x[],y[]
db85 : 62736176e5            	db	"bsav",'e'+0x80				; bsave addr,len,"fname"
db8a : 626c6f61e4            	db	"bloa",'d'+0x80				; bload addr,"fname"
db8f : 74736176e5            	db	"tsav",'e'+0x80				; tsave "fname"
db94 : 746c6f61e4            	db	"tloa",'d'+0x80				; tload "fname"
                             ; Functions
AS65 Assembler for R6502 [1.42].                                     Page  155
-------------------------------- bank\bank0.s --------------------------------

db99 : 7065656ba8            	db	"peek",'('+0x80				; peek(x)
db9e : 6465656ba8            	db	"deek",'('+0x80				; peek(x)
dba3 : 737469636ba8          	db	"stick",'('+0x80			; stick(x)
dba9 : 676574a8              	db	"get",'('+0x80				; get(x)
dbad : 636872a8              	db	"chr",'('+0x80				; chr(x)
dbb1 : 6c656674a8            	db	"left",'('+0x80				; left(x$,y)
dbb6 : 7269676874a8          	db	"right",'('+0x80			; right(x$,y)
dbbc : 6d6964a8              	db	"mid",'('+0x80				; mid(x$,y)
dbc0 : 6c656ea8              	db	"len",'('+0x80				; len(x$)
dbc4 : 6d656da8              	db	"mem",'('+0x80				; mem(x)
dbc8 : 7363726ea8            	db	"scrn",'('+0x80				; scrn(x,y)
dbcd : 726e64a8              	db	"rnd",'('+0x80				; rnd(x)
dbd1 : 656c6170736564a8      	db	"elapsed",'('+0x80			; elapsed(var)
dbd9 : 63616c6ca8            	db	"call",'('+0x80				; call(addr,A,X,Y)
dbde : 686578a8              	db	"hex",'('+0x80				; hex(x)
dbe2 : 617363a8              	db	"asc",'('+0x80				; asc(x$)
dbe6 : 76616ca8              	db	"val",'('+0x80				; val(x$)
dbea : 706978656ca8          	db	"pixel",'('+0x80			; pixel(x,y)
dbf0 : 737072686974a8        	db	"sprhit",'('+0x80			; sprhit(sp)
dbf7 : 73676ea8              	db	"sgn",'('+0x80				; sgn(x)
dbfb : 61646472a8            	db	"addr",'('+0x80				; addr(var)
                             ; Numeric operators, in priority
dc00 : aa                    	db	'*'+0x80					; Multiply
dc01 : af                    	db 	'/'+0x80					; Divide
dc02 : dc                    	db 	'\\'+0x80					; Modulus
dc03 : 3cbc                  	db	'<','<'+0x80				; Shift left
dc05 : 3ebe                  	db	'>','>'+0x80				; Shift right
dc07 : ab                    	db 	'+'+0x80					; Add
dc08 : ad                    	db	'-'+0x80					; Subtract
                             ; Bool and conditional operators, in priority
dc09 : a6                    	db '&'+0x80						; AND
dc0a : fc                    	db '|'+0x80						; OR
dc0b : de                    	db '^'+0x80						; EOR
dc0c : 3cbd                  	db "<",'='+0x80					; Less than or equal
dc0e : 3ebd                  	db ">",'='+0x80					; Greater than or equal
dc10 : 3cbe                  	db "<",'>'+0x80					; Not equal
dc12 : bc                    	db '<'+0x80						; Less than
dc13 : be                    	db '>'+0x80						; Greater than
dc14 : 3dbd                  	db "=",'='+0x80					; Equality (always last)
                             
dc16 : 00                    	db  0
                             
                             
                             	
                             	
                             	include "dflat/tkjmptab.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  TKJUMPTAB.S
                             ;*  Runtime token jump table.
                             ;*  dflat uses four key tables to tokenise and ru
                             ;*  - df_tokensyms    - table of token symbols
                             ;*  - df_tk_tokentype - table of token types
                             ;*  - df_tk_tokenjmp  - table of tokenising routi
                             ;*  - df_rt_tokenjmp  - table of runtime routines
                             ;*  The key is the token symbols.  When a line is
AS65 Assembler for R6502 [1.42].                                     Page  156
-------------------------------- bank\bank0.s --------------------------------

                             ;*  in to the raw (untokenised) buffer, df_tokens
                             ;*  used to identify tokens.  The position of the
                             ;*  token is used to then look up type and jump v
                             ;*  in the other tables.
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code  
                             
                             ; Tokeniser jump table
                             ; In token order of df_tokensyms
dc17 :                       df_tk_tokenjmp
dc17 : 60dd                  	dw	df_tk_assign
dc19 : 18de                  	dw	df_tk_callproc
dc1b : 69dd                  	dw	df_tk_comment
dc1d : b1dd                  	dw	df_tk_println
dc1f : abdd                  	dw	df_tk_printat
dc21 : b1dd                  	dw	df_tk_print
dc23 : fcdd                  	dw	df_tk_def
dc25 : 51de                  	dw	df_tk_enddef
dc27 : 53de                  	dw	df_tk_return
dc29 : 51de                  	dw	df_tk_abort
dc2b : eddd                  	dw	df_tk_local
dc2d : dedd                  	dw	df_tk_dim
dc2f : 51de                  	dw	df_tk_repeat
dc31 : 56de                  	dw	df_tk_until
dc33 : 01de                  	dw	df_tk_for
dc35 : 51de                  	dw	df_tk_next
dc37 : 56de                  	dw	df_tk_while
dc39 : 51de                  	dw	df_tk_wend
dc3b : 56de                  	dw	df_tk_if
dc3d : 51de                  	dw	df_tk_else
dc3f : 51de                  	dw	df_tk_endif
dc41 : 56de                  	dw	df_tk_elseif
dc43 : b8dd                  	dw	df_tk_data
dc45 : 28f9                  	dw	df_tk_asm_parse_command
dc47 : 51de                  	dw	df_tk_run
dc49 : 9add                  	dw	df_tk_list
dc4b : c6dd                  	dw	df_tk_input
dc4d : 51de                  	dw	df_tk_text
dc4f : 66de                  	dw	df_tk_plot
dc51 : 56de                  	dw	df_tk_cursor
dc53 : 51de                  	dw	df_tk_cls
dc55 : 5cde                  	dw	df_tk_poke
dc57 : 5cde                  	dw	df_tk_doke
dc59 : 66de                  	dw	df_tk_sound
dc5b : 6ede                  	dw	df_tk_music
dc5d : 6ede                  	dw	df_tk_play
dc5f : 56de                  	dw	df_tk_save
dc61 : 56de                  	dw	df_tk_load
dc63 : cfdd                  	dw	df_tk_read
dc65 : 51de                  	dw	df_tk_new
dc67 : 66de                  	dw	df_tk_renum
dc69 : 56de                  	dw	df_tk_wait
dc6b : 1ade                  	dw	df_tk_reset
dc6d : 51de                  	dw	df_tk_hires
dc6f : 5cde                  	dw	df_tk_point
dc71 : 6ede                  	dw	df_tk_line
dc73 : 5cde                  	dw	df_tk_lineto
dc75 : 56de                  	dw	df_tk_pixmode
dc77 : 56de                  	dw	df_tk_ink
AS65 Assembler for R6502 [1.42].                                     Page  157
-------------------------------- bank\bank0.s --------------------------------

dc79 : 56de                  	dw	df_tk_paper
dc7b : 66de                  	dw	df_tk_circle
                             ;	dw	df_tk_fill
dc7d : 56de                  	dw	df_tk_himem
dc7f : 51de                  	dw	df_tk_monitor
dc81 : 5cde                  	dw	df_tk_sprchar
dc83 : 66de                  	dw	df_tk_sprpos
dc85 : 51de                  	dw	df_tk_sprupd
dc87 : 51de                  	dw	df_tk_sprinit
dc89 : 5cde                  	dw	df_tk_sprmulti
dc8b : 66de                  	dw	df_tk_bsave
dc8d : 5cde                  	dw	df_tk_bload
dc8f : 56de                  	dw	df_tk_tsave
dc91 : 56de                  	dw	df_tk_tload
                             	
dc93 : 24de                  	dw	df_tk_peek
dc95 : 24de                  	dw	df_tk_deek
dc97 : 29de                  	dw	df_tk_stick
dc99 : 24de                  	dw	df_tk_get
dc9b : 24de                  	dw	df_tk_chr
dc9d : 37de                  	dw	df_tk_left
dc9f : 37de                  	dw	df_tk_right
dca1 : 3dde                  	dw	df_tk_mid
dca3 : 24de                  	dw	df_tk_len
dca5 : 24de                  	dw	df_tk_mem
dca7 : 37de                  	dw	df_tk_scrn
dca9 : 24de                  	dw	df_tk_rnd
dcab : 2ede                  	dw	df_tk_elapsed
dcad : 43de                  	dw	df_tk_call
dcaf : 24de                  	dw	df_tk_hex
dcb1 : 24de                  	dw	df_tk_asc
dcb3 : 24de                  	dw	df_tk_val
dcb5 : 37de                  	dw	df_tk_pixel
dcb7 : 24de                  	dw	df_tk_sprhit
dcb9 : 24de                  	dw	df_tk_sgn
dcbb : 2ede                  	dw	df_tk_addr
                             	
dcbd : 51de                  	dw	df_tk_mult
dcbf : 51de                  	dw	df_tk_div
dcc1 : 51de                  	dw	df_tk_mod
dcc3 : 51de                  	dw	df_tk_asl
dcc5 : 51de                  	dw	df_tk_lsr
dcc7 : 51de                  	dw	df_tk_add
dcc9 : 51de                  	dw	df_tk_sub
                             	
dccb : 51de                  	dw	df_tk_and
dccd : 51de                  	dw	df_tk_or
dccf : 51de                  	dw	df_tk_eor
dcd1 : 51de                  	dw	df_tk_lte
dcd3 : 51de                  	dw	df_tk_gte
dcd5 : 51de                  	dw	df_tk_ne
dcd7 : 51de                  	dw	df_tk_lt
dcd9 : 51de                  	dw	df_tk_gt
dcdb : 51de                  	dw	df_tk_eq
                             
                             
                             	
                             	
                             	
                             	
                             	
                             	include "dflat/tktyptab.s"
AS65 Assembler for R6502 [1.42].                                     Page  158
-------------------------------- bank\bank0.s --------------------------------

                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  RTJUMPTAB.S
                             ;*  Runtime token jump table.
                             ;*  dflat uses four key tables to tokenise and ru
                             ;*  - df_tokensyms    - table of token symbols
                             ;*  - df_tk_tokentype - table of token types
                             ;*  - df_tk_tokenjmp  - table of tokenising routi
                             ;*  - df_rt_tokenjmp  - table of runtime routines
                             ;*  The key is the token symbols.  When a line is
                             ;*  in to the raw (untokenised) buffer, df_tokens
                             ;*  used to identify tokens.  The position of the
                             ;*  token is used to then look up type and jump v
                             ;*  in the other tables.
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code  
                             
                             ; Tokeniser type table (is it a keyword, function
                             ; In token order of df_tokensyms
dcdd :                       df_tk_tokentype
dcdd : 01                    	db	DFTK_KW
dcde : 01                    	db	DFTK_KW
dcdf : 01                    	db	DFTK_KW
dce0 : 01                    	db	DFTK_KW
dce1 : 01                    	db	DFTK_KW
dce2 : 01                    	db	DFTK_KW
dce3 : 01                    	db	DFTK_KW
dce4 : 01                    	db	DFTK_KW
dce5 : 01                    	db	DFTK_KW
dce6 : 01                    	db	DFTK_KW
dce7 : 01                    	db	DFTK_KW
dce8 : 01                    	db	DFTK_KW
dce9 : 01                    	db	DFTK_KW
dcea : 01                    	db	DFTK_KW
dceb : 01                    	db	DFTK_KW
dcec : 01                    	db	DFTK_KW
dced : 01                    	db	DFTK_KW
dcee : 01                    	db	DFTK_KW
dcef : 01                    	db	DFTK_KW
dcf0 : 01                    	db	DFTK_KW
dcf1 : 01                    	db	DFTK_KW
dcf2 : 01                    	db	DFTK_KW
dcf3 : 01                    	db	DFTK_KW
dcf4 : 01                    	db	DFTK_KW
dcf5 : 01                    	db	DFTK_KW
dcf6 : 01                    	db	DFTK_KW
dcf7 : 01                    	db	DFTK_KW
dcf8 : 01                    	db	DFTK_KW
dcf9 : 01                    	db	DFTK_KW
dcfa : 01                    	db	DFTK_KW
dcfb : 01                    	db	DFTK_KW
dcfc : 01                    	db	DFTK_KW
dcfd : 01                    	db	DFTK_KW
AS65 Assembler for R6502 [1.42].                                     Page  159
-------------------------------- bank\bank0.s --------------------------------

dcfe : 01                    	db	DFTK_KW
dcff : 01                    	db	DFTK_KW
dd00 : 01                    	db	DFTK_KW
dd01 : 01                    	db	DFTK_KW
dd02 : 01                    	db	DFTK_KW
dd03 : 01                    	db	DFTK_KW
dd04 : 01                    	db	DFTK_KW
dd05 : 01                    	db	DFTK_KW
dd06 : 01                    	db	DFTK_KW
dd07 : 01                    	db	DFTK_KW
dd08 : 01                    	db	DFTK_KW
dd09 : 01                    	db	DFTK_KW
dd0a : 01                    	db	DFTK_KW
dd0b : 01                    	db	DFTK_KW
dd0c : 01                    	db	DFTK_KW
dd0d : 01                    	db	DFTK_KW
dd0e : 01                    	db	DFTK_KW
dd0f : 01                    	db	DFTK_KW
                             ;	db	DFTK_KW
dd10 : 01                    	db	DFTK_KW
dd11 : 01                    	db	DFTK_KW
dd12 : 01                    	db	DFTK_KW
dd13 : 01                    	db	DFTK_KW
dd14 : 01                    	db	DFTK_KW
dd15 : 01                    	db	DFTK_KW
dd16 : 01                    	db	DFTK_KW
dd17 : 01                    	db	DFTK_KW
dd18 : 01                    	db	DFTK_KW
dd19 : 01                    	db	DFTK_KW
dd1a : 01                    	db	DFTK_KW
                             
dd1b : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
dd1c : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
dd1d : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
dd1e : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
dd1f : 42                    	db 	DFTK_FN | DFTK_STR
dd20 : 42                    	db 	DFTK_FN | DFTK_STR
dd21 : 42                    	db 	DFTK_FN | DFTK_STR
dd22 : 42                    	db 	DFTK_FN | DFTK_STR
dd23 : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
dd24 : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
dd25 : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
dd26 : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
dd27 : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
dd28 : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
dd29 : 42                    	db 	DFTK_FN | DFTK_STR
dd2a : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
dd2b : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
dd2c : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
dd2d : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
dd2e : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
dd2f : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
                             	;* Operators add the order of precedence (0=high
dd30 : 38                    	db 	DFTK_OP | DFTK_INT | DFTK_BYT + 0
dd31 : 38                    	db 	DFTK_OP | DFTK_INT | DFTK_BYT + 0
dd32 : 38                    	db 	DFTK_OP | DFTK_INT | DFTK_BYT + 0
dd33 : 39                    	db 	DFTK_OP | DFTK_INT | DFTK_BYT + 1
dd34 : 39                    	db 	DFTK_OP | DFTK_INT | DFTK_BYT + 1
dd35 : 3e                    	db 	DFTK_OP | DFTK_STROP | DFTK_INT | DFTK_BYT +
dd36 : 3a                    	db 	DFTK_OP | DFTK_INT | DFTK_BYT + 2
                             
dd37 : 3d                    	db 	DFTK_OP | DFTK_INT | DFTK_BYT + 5
AS65 Assembler for R6502 [1.42].                                     Page  160
-------------------------------- bank\bank0.s --------------------------------

dd38 : 3d                    	db 	DFTK_OP | DFTK_INT | DFTK_BYT + 5
dd39 : 3d                    	db 	DFTK_OP | DFTK_INT | DFTK_BYT + 5
dd3a : 3c                    	db 	DFTK_OP | DFTK_INT | DFTK_BYT + 4
dd3b : 3c                    	db 	DFTK_OP | DFTK_INT | DFTK_BYT + 4
dd3c : 3c                    	db 	DFTK_OP | DFTK_INT | DFTK_BYT + 4
dd3d : 3c                    	db 	DFTK_OP | DFTK_INT | DFTK_BYT + 4
dd3e : 3c                    	db 	DFTK_OP | DFTK_INT | DFTK_BYT + 4
dd3f : 3f                    	db 	DFTK_OP | DFTK_INT | DFTK_BYT + 7
                             
                             
                             	
                             	
                             	
                             	
                             
                             	include "dflat/toksubs.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  TOKSUBS.S
                             ;*  Module that implements the tokenisation of ke
                             ;*  When a line is being parsed, the index of the
                             ;*  found in the symbol table is used to call a r
                             ;*  here.  The job of a routine here is then to f
                             ;*  parse the raw input e.g. a command that takes
                             ;*  parameters, need to do what it needs to ident
                             ;*  Despite the number of keywords in dflat, this
                             ;*  anywhere near the size of rtsubs.s (the runti
                             ;*  equivalent of this) because there is so much 
                             ;*  synactically.
                             ;*  The tokenised output is put in to its own buf
                             ;*  if the whole input was tokenised successfully
                             ;*  dflat will either try and execute (if in imme
                             ;*  mode), or save it to program memory in line n
                             ;*  order.
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code  
                             
dd40 :                       mod_sz_toksubs_s
                             
                             ;* General routine to tokenise a mandatory variab
dd40 :                       df_tk_variable
dd40 : 20edd6           [ 6] 	jsr df_tk_skip_ws
                             	; tokenise a variable
dd43 : 2086d6           [ 6] 	jsr df_tk_peek_buf
dd46 : 20d4d6           [ 6] 	jsr df_tk_isalpha
dd49 : 9013             [ 3] 	bcc df_tk_error
dd4b : a900             [ 2] 	lda #0
dd4d : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Parse assignment preamble
                             ;****************************************
dd4e :                       df_tk_preassign
AS65 Assembler for R6502 [1.42].                                     Page  161
-------------------------------- bank\bank0.s --------------------------------

                             	; Put assignment token
                             	; assume its a numeric int for now
dd4e : a980             [ 2] 	lda #0x80
dd50 : 2097d6           [ 6] 	jsr df_tk_put_tok
                             	
                             	; first find or create a variable
dd53 : 2040dd           [ 6] 	jsr df_tk_variable
dd56 : 20d7d7           [ 6] 	jsr df_tk_var
                             	; next char should be '='
dd59 : a93d             [ 2] 	lda #'='
dd5b : 4c2bd7           [ 3] 	jmp df_tk_expect_tok_err
                             
dd5e :                       df_tk_error
                             	SWBRK DFERR_SYNTAX
                             
                             
                             ;****************************************
                             ;* Parse numeric assignment
                             ;****************************************
dd60 :                       df_tk_assign
dd60 : 204edd           [ 6] 	jsr df_tk_preassign
                             	; tokenise an expression (int or byte)
dd63 : 201ed9           [ 6] 	jsr df_tk_expression
dd66 : b0f6             [ 3] 	bcs df_tk_error
dd68 : 60               [ 6] 	rts
                             
dd69 :                       df_tk_comment
                             	; copy all subsequent chars to token
dd69 : 208cd6           [ 6] 	jsr df_tk_get_buf
dd6c : f006             [ 3] 	beq df_tk_comment_done
dd6e : 2097d6           [ 6] 	jsr df_tk_put_tok
dd71 : 4c69dd           [ 3] 	jmp df_tk_comment
dd74 :                       df_tk_comment_done
dd74 : 18               [ 2] 	clc
dd75 : 60               [ 6] 	rts
                             
                             ; Utility to get procedure name with _
dd76 :                       df_tk_listp_procname
                             	; try and find the first proc
dd76 : a95f             [ 2] 	lda #'_'
dd78 : 201fd7           [ 6] 	jsr df_tk_expect_tok
dd7b : b01b             [ 3] 	bcs df_tk_listp_procname_err
                             	; now get first alpha then all alphanum
dd7d : 2086d6           [ 6] 	jsr df_tk_peek_buf
dd80 : 20d4d6           [ 6] 	jsr df_tk_isalpha
dd83 : 9013             [ 3] 	bcc df_tk_listp_procname_err
dd85 :                       df_tk_listp_procname_ch
dd85 : 2086d6           [ 6] 	jsr df_tk_peek_buf
dd88 : 20e1d6           [ 6] 	jsr df_tk_isalphanum
dd8b : 9009             [ 3] 	bcc df_tk_listp_procname_ok
dd8d : 208cd6           [ 6] 	jsr df_tk_get_buf
dd90 : 2097d6           [ 6] 	jsr df_tk_put_tok
dd93 : 4c85dd           [ 3] 	jmp df_tk_listp_procname_ch
dd96 :                       df_tk_listp_procname_ok
dd96 : 18               [ 2] 	clc
dd97 : 60               [ 6] 	rts
dd98 :                       df_tk_listp_procname_err
dd98 : 38               [ 2] 	sec
dd99 : 60               [ 6] 	rts
                             
                             ; list		: list whole program
                             ; list n	: list line n to end
AS65 Assembler for R6502 [1.42].                                     Page  162
-------------------------------- bank\bank0.s --------------------------------

                             ; list *	: list all procedures
                             ; list _proc: list _proc lines
dd9a :                       df_tk_list
dd9a : 2076dd           [ 6] 	jsr df_tk_listp_procname
dd9d : 900b             [ 3] 	bcc df_tk_list_done
                             	; if not found try '*' or normal list
dd9f :                       df_tk_list_procs
                             	; first try for list symbol
dd9f : a92a             [ 2] 	lda #'*'
dda1 : 201fd7           [ 6] 	jsr df_tk_expect_tok
dda4 : 9004             [ 3] 	bcc df_tk_list_done
                             	; else normal line number or nothing
dda6 :                       df_tk_list_line
                             	; tokenise an expression, nothing is ok
dda6 : 201ed9           [ 6] 	jsr df_tk_expression
dda9 : 18               [ 2] 	clc
ddaa :                       df_tk_list_done
ddaa : 60               [ 6] 	rts
                             
                             ; printat,print,println can have 0,1 or many expr
ddab :                       df_tk_printat
                             	; Must get 2 parms for x,y
ddab : 205cde           [ 6] 	jsr df_tk_2parms
                             	; try getting more parms
ddae : 4cbddd           [ 3] 	jmp df_tk_expr_more
ddb1 :                       df_tk_println
ddb1 :                       df_tk_print
                             	; tokenise an expression ok if null
ddb1 : 201ed9           [ 6] 	jsr df_tk_expression
ddb4 : 9007             [ 3] 	bcc df_tk_expr_more
ddb6 :                       df_tk_print_done
ddb6 :                       df_tk_data_done
ddb6 : 18               [ 2] 	clc
ddb7 : 60               [ 6] 	rts
                             
                             ; these must have 1 or more expressions
ddb8 :                       df_tk_data
ddb8 :                       df_tk_asm_db
ddb8 :                       df_tk_asm_dw
ddb8 :                       df_tk_next_expr
                             	; tokenise an expression
ddb8 : 201ed9           [ 6] 	jsr df_tk_expression
ddbb : b065             [ 4] 	bcs df_tk_error2
                             ; this loop keeps processing comma seprated exore
ddbd :                       df_tk_expr_more
                             	; is there more to come?
ddbd : a92c             [ 2] 	lda #','
ddbf : 201fd7           [ 6] 	jsr df_tk_expect_tok
ddc2 : b0f2             [ 3] 	bcs df_tk_data_done
ddc4 : 90f2             [ 3] 	bcc df_tk_next_expr
                             
ddc6 :                       df_tk_input
ddc6 : 20edd6           [ 6] 	jsr df_tk_skip_ws
                             	; tokenise a variable
ddc9 : 2040dd           [ 6] 	jsr df_tk_variable
ddcc : 4cd7d7           [ 3] 	jmp df_tk_var
                             	
ddcf :                       df_tk_read
                             	; tokenise a variable
ddcf : 2040dd           [ 6] 	jsr df_tk_variable
ddd2 : 20d7d7           [ 6] 	jsr df_tk_var
                             	; if not at the end then keep going
AS65 Assembler for R6502 [1.42].                                     Page  163
-------------------------------- bank\bank0.s --------------------------------

ddd5 : a92c             [ 2] 	lda #','
ddd7 : 201fd7           [ 6] 	jsr df_tk_expect_tok
ddda : 90f3             [ 3] 	bcc df_tk_read
dddc : 18               [ 2] 	clc
dddd : 60               [ 6] 	rts
                             
ddde :                       df_tk_dim
                             	; tokenise a variable
ddde : 2040dd           [ 6] 	jsr df_tk_variable
dde1 : 201fd8           [ 6] 	jsr df_tk_arrvar
                             	; if not at the end then keep going
dde4 : a92c             [ 2] 	lda #','
dde6 : 201fd7           [ 6] 	jsr df_tk_expect_tok
dde9 : 90f3             [ 3] 	bcc df_tk_dim
ddeb : 18               [ 2] 	clc
ddec : 60               [ 6] 	rts
                             
dded :                       df_tk_local
                             	; tokenise a variable
dded : 2040dd           [ 6] 	jsr df_tk_variable
ddf0 : 2009d8           [ 6] 	jsr df_tk_localvar
                             	; if not at the end then keep going
ddf3 : a92c             [ 2] 	lda #','
ddf5 : 201fd7           [ 6] 	jsr df_tk_expect_tok
ddf8 : 90f3             [ 3] 	bcc df_tk_local
ddfa : 18               [ 2] 	clc
ddfb : 60               [ 6] 	rts
                             
                             ; A = 0 : Def
                             ; A = 1 : Call
ddfc :                       df_tk_def
ddfc : a900             [ 2] 	lda #0
ddfe : 4c2ad8           [ 3] 	jmp df_tk_proc
                             
                             ; syntax : for a=1,10,1
de01 :                       df_tk_for
de01 : 20edd6           [ 6] 	jsr df_tk_skip_ws
                             
                             	; tokenise the for variable
de04 : a901             [ 2] 	lda #DFVVT_INT
de06 : 20d7d7           [ 6] 	jsr df_tk_var
                             
                             	; always expect '='
                             	; then starting value
de09 : a93d             [ 2] 	lda #'='
de0b : 202ad9           [ 6] 	jsr df_tk_tok_expression
                             	
                             	; always expect ',' separator
                             	; then ending value
de0e : a92c             [ 2] 	lda #','
de10 : 202ad9           [ 6] 	jsr df_tk_tok_expression
                             
                             	; always expect ',' separator
                             	; then step value
de13 : a92c             [ 2] 	lda #','
de15 : 4c2ad9           [ 3] 	jmp df_tk_tok_expression
                             
                             	
                             ; call to proc should not occur by itself
de18 :                       df_tk_callproc
de18 : 38               [ 2] 	sec
de19 : 60               [ 6] 	rts
AS65 Assembler for R6502 [1.42].                                     Page  164
-------------------------------- bank\bank0.s --------------------------------

                             
                             ; timer reset expects an int variable only
de1a :                       df_tk_reset
de1a : 20edd6           [ 6] 	jsr df_tk_skip_ws
                             
                             	; tokenise a variable
de1d : a901             [ 2] 	lda #DFVVT_INT
de1f : 4cd7d7           [ 3] 	jmp df_tk_var
                             
de22 :                       df_tk_error2
                             	SWBRK DFERR_SYNTAX
                             
                             
                             ; These functions expect 1 parmeter
de24 :                       df_tk_len
de24 :                       df_tk_chr
de24 :                       df_tk_get
de24 :                       df_tk_deek
de24 :                       df_tk_vpeek
de24 :                       df_tk_peek
de24 :                       df_tk_mem
de24 :                       df_tk_rnd
de24 :                       df_tk_hex
de24 :                       df_tk_asc
de24 :                       df_tk_val
de24 :                       df_tk_sprhit
de24 :                       df_tk_sgn
de24 : 201ed9           [ 6] 	jsr df_tk_expression
de27 : b0f9             [ 3] 	bcs df_tk_error2
de29 :                       df_tk_closebrkt
de29 :                       df_tk_stick				; This function needs no parms
de29 : a929             [ 2] 	lda #')'
de2b : 4c2bd7           [ 3] 	jmp df_tk_expect_tok_err
                             
                             ; These function expect a variable only
de2e :                       df_tk_addr
de2e :                       df_tk_elapsed
de2e : 2040dd           [ 6] 	jsr df_tk_variable
de31 : 20d7d7           [ 6] 	jsr df_tk_var
                             	; must have close braket
de34 : 4c29de           [ 3] 	jmp df_tk_closebrkt
                             
                             ; These functions expect 2 parameters
de37 :                       df_tk_left
de37 :                       df_tk_right
de37 :                       df_tk_scrn
de37 :                       df_tk_pixel
de37 : 205cde           [ 6] 	jsr df_tk_2parms
de3a : 4c29de           [ 3] 	jmp df_tk_closebrkt
                             
                             ; These functions expect 3 parameters
de3d :                       df_tk_mid
de3d : 2066de           [ 6] 	jsr df_tk_3parms
de40 : 4c29de           [ 3] 	jmp df_tk_closebrkt
                             
                             ; These functions expect 4 parameters
de43 :                       df_tk_call
de43 : 205cde           [ 6] 	jsr df_tk_2parms
de46 : a92c             [ 2] 	lda #','
de48 : 202bd7           [ 6] 	jsr df_tk_expect_tok_err
de4b : 205cde           [ 6] 	jsr df_tk_2parms
de4e : 4c29de           [ 3] 	jmp df_tk_closebrkt
AS65 Assembler for R6502 [1.42].                                     Page  165
-------------------------------- bank\bank0.s --------------------------------

                             
                             ;all these commands require no parameters
de51 :                       df_tk_else
de51 :                       df_tk_endif
de51 :                       df_tk_enddef
de51 :                       df_tk_abort
de51 :                       df_tk_repeat
de51 :                       df_tk_next
de51 :                       df_tk_wend
de51 :                       df_tk_run
de51 :                       df_tk_dir
de51 :                       df_tk_cls
de51 :                       df_tk_new
de51 :                       df_tk_mult
de51 :                       df_tk_div
de51 :                       df_tk_mod
de51 :                       df_tk_asl
de51 :                       df_tk_lsr
de51 :                       df_tk_add
de51 :                       df_tk_sub
de51 :                       df_tk_and
de51 :                       df_tk_or
de51 :                       df_tk_eor
de51 :                       df_tk_lte
de51 :                       df_tk_lt
de51 :                       df_tk_gte
de51 :                       df_tk_gt
de51 :                       df_tk_ne
de51 :                       df_tk_eq
de51 :                       df_tk_monitor
de51 :                       df_tk_sprupd
de51 :                       df_tk_sprinit
de51 :                       df_tk_text
de51 :                       df_tk_hires
de51 : 18               [ 2] 	clc
de52 : 60               [ 6] 	rts
                             
                             ; 0 or 1 parameter special!
de53 :                       df_tk_return
de53 : 4c1ed9           [ 3] 	jmp df_tk_expression
                             
                             
                             ; These commands expect 1 parameter	
de56 :                       df_tk_while
de56 :                       df_tk_until
de56 :                       df_tk_if
de56 :                       df_tk_elseif
de56 :                       df_tk_wait
de56 :                       df_tk_cursor
de56 :                       df_tk_del
de56 :                       df_tk_chdir
de56 :                       df_tk_load
de56 :                       df_tk_save
de56 :                       df_tk_tload
de56 :                       df_tk_tsave
de56 :                       df_tk_pixmode
de56 :                       df_tk_ink
de56 :                       df_tk_paper
de56 :                       df_tk_himem
                             
de56 :                       df_tk_asm_org
de56 :                       df_tk_asm_opt
AS65 Assembler for R6502 [1.42].                                     Page  166
-------------------------------- bank\bank0.s --------------------------------

de56 :                       df_tk_asm_ds
                             
                             	; first parm
de56 : 201ed9           [ 6] 	jsr df_tk_expression
de59 : b0c7             [ 3] 	bcs df_tk_error2
de5b : 60               [ 6] 	rts
                             
                             ; These commands expect 2 numeric parameters
de5c :                       df_tk_poke
de5c :                       df_tk_doke
de5c :                       df_tk_point
de5c :                       df_tk_sprchar
de5c :                       df_tk_sprmulti
de5c :                       df_tk_bload
de5c :                       df_tk_lineto
de5c :                       df_tk_2parms
                             	; first parm
de5c : 201ed9           [ 6] 	jsr df_tk_expression
de5f : b0c1             [ 3] 	bcs df_tk_error2
                             	; tokenise second parm
de61 : a92c             [ 2] 	lda #','
de63 : 4c2ad9           [ 3] 	jmp df_tk_tok_expression
                             
                             ; these commands expect 3 numeric parameters
de66 :                       df_tk_hchar
de66 :                       df_tk_plot
de66 :                       df_tk_circle
de66 :                       df_tk_sound
de66 :                       df_tk_colour
de66 :                       df_tk_spritepos
de66 :                       df_tk_renum
de66 :                       df_tk_sprpos
de66 :                       df_tk_bsave
de66 :                       df_tk_3parms
de66 : 205cde           [ 6] 	jsr df_tk_2parms
                             	; tokenise third parm
de69 : a92c             [ 2] 	lda #','
de6b : 4c2ad9           [ 3] 	jmp df_tk_tok_expression
                             
                             ; these commands expect 4 numeric parameters
de6e :                       df_tk_play
de6e :                       df_tk_music
de6e :                       df_tk_line
de6e :                       df_tk_4parms
de6e : 205cde           [ 6] 	jsr df_tk_2parms
de71 : a92c             [ 2] 	lda #','
de73 : 202bd7           [ 6] 	jsr df_tk_expect_tok_err
de76 : 4c5cde           [ 3] 	jmp df_tk_2parms
                             
                             ;df_tk_fill
                             ;df_tk_5parms
                             ;	jsr df_tk_3parms
                             ;	lda #','
                             ;	jsr df_tk_expect_tok_err
                             ;	jmp df_tk_2parms
                             
de79 :                       mod_sz_toksubs_e
                             
                             
de79 :                       mod_sz_tokenise_e
                             
                             
AS65 Assembler for R6502 [1.42].                                     Page  167
-------------------------------- bank\bank0.s --------------------------------

                             
                             	include "dflat/progedit.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  PROGEDIT.S
                             ;*  dflat module to enable editing of a dflat pro
                             ;*  dflat bascially starts here - waiting for use
                             ;*  when a line is entered, if it is not preceede
                             ;*  line number it is tokenised and attempted to 
                             ;*  immediatly.  If it is preceeded by a line num
                             ;*  number is used to save the tokenised line in 
                             ;*  position in memory.
                             ;*  So this is just like a good old editing sessi
                             ;*  nearly any common flavour of 80s basic. Howev
                             ;*  tokenises everything except whitespace and st
                             ;*  constants - even when saving.  Unlike my trus
                             ;*  where I could type in any garbage and it woul
                             ;*  saved with the line number, dflat needs to be
                             ;*  tokenise the line.  So it's actually a bit mo
                             ;*  Atari 8 bit BASIC.
                             ;*
                             ;************************************************
                             
de79 :                       mod_sz_progedit_s
                             
                             ;****************************************
                             ;* df_pg_find_line
                             ;* Find a line number in X(L), A(H)
                             ;* Return X(L), A(H) of line, Y = Length
                             ;* C=1 Exact match not found, C=0 Exact Found
                             ;* If not exact match then next highest line addr
                             ;* Will be in X and A
                             ;****************************************
de79 :                       df_pg_find_line
de79 : 863d             [ 3] 	stx num_a
de7b : 853e             [ 3] 	sta num_a+1
de7d : a565             [ 3] 	lda df_prgstrt
de7f : 8549             [ 3] 	sta num_tmp
de81 : a566             [ 3] 	lda df_prgstrt+1
de83 : 854a             [ 3] 	sta num_tmp+1
de85 :                       df_pg_check_next_line
de85 : a549             [ 3] 	lda num_tmp
de87 : c567             [ 3] 	cmp df_prgend
de89 : d011             [ 3] 	bne df_pg_check_line
de8b : a54a             [ 3] 	lda num_tmp+1
de8d : c568             [ 3] 	cmp df_prgend+1
de8f : d00b             [ 3] 	bne df_pg_check_line
de91 :                       df_pr_line_gt_target	
                             	; End of program or line > target
                             	; Load Y with the length
de91 : a200             [ 2] 	ldx #0
de93 : a149             [ 6] 	lda (num_tmp,x)
de95 : a8               [ 2] 	tay
de96 : a649             [ 3] 	ldx num_tmp
de98 : a54a             [ 3] 	lda num_tmp+1
de9a : 38               [ 2] 	sec
AS65 Assembler for R6502 [1.42].                                     Page  168
-------------------------------- bank\bank0.s --------------------------------

de9b : 60               [ 6] 	rts
de9c :                       df_pg_check_line
de9c : a001             [ 2] 	ldy #DFTK_LINNUM
de9e : a53d             [ 3] 	lda num_a
dea0 : d149             [ 5] 	cmp (num_tmp),y
dea2 : d012             [ 3] 	bne df_pr_line_nomatch
dea4 : c8               [ 2] 	iny
dea5 : a53e             [ 3] 	lda num_a+1
dea7 : d149             [ 5] 	cmp (num_tmp),y
dea9 : d00b             [ 3] 	bne df_pr_line_nomatch
                             	; Got an exact match
deab : a200             [ 2] 	ldx #0
dead : a149             [ 6] 	lda (num_tmp,x)
deaf : a8               [ 2] 	tay
deb0 : a649             [ 3] 	ldx num_tmp
deb2 : a54a             [ 3] 	lda num_tmp+1
deb4 : 18               [ 2] 	clc
deb5 : 60               [ 6] 	rts
deb6 :                       df_pr_line_nomatch
                             	; Check if this line > target
deb6 : 38               [ 2] 	sec
deb7 : a001             [ 2] 	ldy #DFTK_LINNUM
deb9 : a53d             [ 3] 	lda num_a
debb : f149             [ 5] 	sbc (num_tmp),y
debd : c8               [ 2] 	iny
debe : a53e             [ 3] 	lda num_a+1
dec0 : f149             [ 5] 	sbc (num_tmp),y
dec2 : 90cd             [ 3] 	bcc df_pr_line_gt_target
dec4 :                       df_pr_line_next
                             	; Else we go to next line
dec4 : a200             [ 2] 	ldx #0
dec6 : 18               [ 2] 	clc
dec7 : a549             [ 3] 	lda num_tmp
dec9 : 6149             [ 6] 	adc (num_tmp,x)
decb : 8549             [ 3] 	sta num_tmp
decd : a54a             [ 3] 	lda num_tmp+1
decf : 6900             [ 2] 	adc #0
ded1 : 854a             [ 3] 	sta num_tmp+1
ded3 : 4c85de           [ 3] 	jmp df_pg_check_next_line
                             	
                             ;****************************************
                             ;* df_pg_insert_block
                             ;* Insert a block at adr (X, A) of size Y
                             ;* df_prgend updated
                             ;* C=1 Error, C=0 Ok
                             ;****************************************
ded6 :                       df_pg_insert_block
                             	; Inserting requires a block copy from
                             	; end of program space to the insert address
                             	
                             	; Save address as this is the lowest address
ded6 : 863d             [ 3] 	stx num_a
ded8 : 853e             [ 3] 	sta num_a+1
                             	; End of program space is the first byte to move
deda : a567             [ 3] 	lda df_prgend
dedc : 8545             [ 3] 	sta num_x
dede : a568             [ 3] 	lda df_prgend+1
dee0 : 8546             [ 3] 	sta num_x+1	
dee2 :                       df_pg_insert_byte
                             	; Move a byte from the current top
dee2 : a200             [ 2] 	ldx #0
dee4 : a145             [ 6] 	lda (num_x,x)
AS65 Assembler for R6502 [1.42].                                     Page  169
-------------------------------- bank\bank0.s --------------------------------

                             	; To the new top (+Y)
dee6 : 9145             [ 5] 	sta (num_x),y
                             	; Compare current address with lowest
dee8 : a545             [ 3] 	lda num_x
deea : c53d             [ 3] 	cmp num_a
deec : d014             [ 4] 	bne df_pg_insert_next_byte
deee : a546             [ 3] 	lda num_x+1
def0 : c53e             [ 3] 	cmp num_a+1
def2 : d00e             [ 4] 	bne df_pg_insert_next_byte
                             	; Finished, update program end pointer
def4 : 18               [ 2] 	clc
def5 : 98               [ 2] 	tya
def6 : 6567             [ 3] 	adc df_prgend
def8 : 8567             [ 3] 	sta df_prgend
defa : a568             [ 3] 	lda df_prgend+1
defc : 6900             [ 2] 	adc #0
defe : 8568             [ 3] 	sta df_prgend+1
df00 : 18               [ 2] 	clc
df01 : 60               [ 6] 	rts
df02 :                       df_pg_insert_next_byte
                             	; Decrement current address
df02 : 38               [ 2] 	sec
df03 : a545             [ 3] 	lda num_x
df05 : e901             [ 2] 	sbc #1
df07 : 8545             [ 3] 	sta num_x
df09 : a546             [ 3] 	lda num_x+1
df0b : e900             [ 2] 	sbc #0
df0d : 8546             [ 3] 	sta num_x+1
df0f : 4ce2de           [ 3] 	jmp df_pg_insert_byte
                             
                             ;****************************************
                             ;* df_pg_delete_block
                             ;* Delete a block at adr (X, A) of size Y
                             ;* df_prgend updated
                             ;* C=1 Error, C=0 Ok
                             ;****************************************
df12 :                       df_pg_delete_block
                             	; Deleting requires a block copy from
                             	; deletion address to end of program
                             	
                             	; Save address as this is the start address
df12 : 863d             [ 3] 	stx num_a
df14 : 853e             [ 3] 	sta num_a+1
df16 :                       df_pg_delete_byte
                             	; Move a byte from current+Y
df16 : b13d             [ 5] 	lda (num_a),y
                             	; Down to current
df18 : a200             [ 2] 	ldx #0
df1a : 813d             [ 6] 	sta (num_a,x)
                             	; Compare current address with lowest
df1c : a53d             [ 3] 	lda num_a
df1e : c567             [ 3] 	cmp df_prgend
df20 : d017             [ 3] 	bne df_pg_delete_next_byte
df22 : a53e             [ 3] 	lda num_a+1
df24 : c568             [ 3] 	cmp df_prgend+1
df26 : d011             [ 3] 	bne df_pg_delete_next_byte
                             	; Finished, update program end pointer
df28 : 843d             [ 3] 	sty num_a
df2a : 38               [ 2] 	sec
df2b : a567             [ 3] 	lda df_prgend
df2d : e53d             [ 3] 	sbc num_a
df2f : 8567             [ 3] 	sta df_prgend
AS65 Assembler for R6502 [1.42].                                     Page  170
-------------------------------- bank\bank0.s --------------------------------

df31 : a568             [ 3] 	lda df_prgend+1
df33 : e900             [ 2] 	sbc #0
df35 : 8568             [ 3] 	sta df_prgend+1
df37 : 18               [ 2] 	clc
df38 : 60               [ 6] 	rts
df39 :                       df_pg_delete_next_byte
                             	; Decrement current address
df39 : 18               [ 2] 	clc
df3a : a53d             [ 3] 	lda num_a
df3c : 6901             [ 2] 	adc #1
df3e : 853d             [ 3] 	sta num_a
df40 : a53e             [ 3] 	lda num_a+1
df42 : 6900             [ 2] 	adc #0
df44 : 853e             [ 3] 	sta num_a+1
df46 : 4c16df           [ 3] 	jmp df_pg_delete_byte
                             
                             
                             ;****************************************
                             ;* Get a line of input
                             ;* Input: C=1 for echo, 0 for no echo
                             ;* Output: C=0 means linbuff is valid
                             ;****************************************
df49 :                       df_pg_inputline
                             	; C is set on input for echo or not
                             	; Read a line of input
df49 : 2027c4           [ 6] 	jsr io_read_line
                             	
                             	; If nothing entered then sec
df4c : c000             [ 2] 	cpy #0
df4e : d002             [ 3] 	bne df_pg_inputline_ok
df50 : 38               [ 2] 	sec
df51 : 60               [ 6] 	rts
df52 :                       df_pg_inputline_ok
                             	; Copy input bytes to line buffer
                             	; for lexical analysis
df52 :                       df_pg_copyinputtolinbuff
df52 : b139             [ 5] 	lda (buf_lo),y
df54 : 990004           [ 5] 	sta df_linbuff,y
df57 : 88               [ 2] 	dey
df58 : 10f8             [ 3] 	bpl df_pg_copyinputtolinbuff
df5a : 18               [ 2] 	clc
df5b : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* df_pg_dflat
                             ;* Start a dflat editing session
                             ;****************************************
df5c :                       df_pg_dflat
                             	; stack pointer
df5c : ba               [ 2] 	tsx
df5d : 865f             [ 3] 	stx df_sp
                             	; error handler address
df5f : a936             [ 2] 	lda #lo(df_trap_error)
df61 : 8560             [ 3] 	sta df_pc
df63 : a9f8             [ 2] 	lda #hi(df_trap_error)
df65 : 8561             [ 3] 	sta df_pc+1
                             	
                             	; make sure normal I/O is resumed
                             	;jsr io_init_default
df67 :                       df_pg_prompt
df67 : a200             [ 2] 	ldx #lo(df_pg_prompt_msg)
AS65 Assembler for R6502 [1.42].                                     Page  171
-------------------------------- bank\bank0.s --------------------------------

df69 : a9e0             [ 2] 	lda #hi(df_pg_prompt_msg)
df6b : 2060c4           [ 6] 	jsr io_print_line
df6e : a900             [ 2] 	lda #0
df70 : 855e             [ 3] 	sta df_immed
df72 :                       df_pg_getcommand
                             	; current line is the token buffer when editing
df72 : a980             [ 2] 	lda #lo(df_tokbuff)
df74 : 8586             [ 3] 	sta df_currlin
df76 : a904             [ 2] 	lda #hi(df_tokbuff)
df78 : 8587             [ 3] 	sta df_currlin+1
df7a : 38               [ 2] 	sec
df7b : 2049df           [ 6] 	jsr df_pg_inputline
df7e : b01b             [ 3] 	bcs df_pg_done
df80 : 209ddf           [ 6] 	jsr df_pg_tokenise
df83 : a55e             [ 3] 	lda df_immed
df85 : f0eb             [ 3] 	beq df_pg_getcommand
                             	; clear variables ready to run the statement
df87 : 2007e0           [ 6] 	jsr df_initrun
                             	; run from tokbuff
df8a : a280             [ 2] 	ldx #lo(df_tokbuff)
df8c : a904             [ 2] 	lda #hi(df_tokbuff)
                             	; always skip length and line number
df8e : a003             [ 2] 	ldy #3
df90 : 8488             [ 3] 	sty df_exeoff
                             	; init currlin
df92 : 20c1e3           [ 6] 	jsr df_rt_init_stat_ptr
                             	; start execution
df95 : 20d6e3           [ 6] 	jsr df_rt_exec_stat
                             	; Go and get another line of input
df98 : 4c67df           [ 3] 	jmp df_pg_prompt
                             	; if blank line then return to cmd
df9b :                       df_pg_done
df9b : 18               [ 2] 	clc
df9c : 60               [ 6] 	rts
                             
                             	; tokenise the line
df9d :                       df_pg_tokenise
df9d : a900             [ 2] 	lda #0
df9f : 855d             [ 3] 	sta errno
dfa1 : 2062d9           [ 6] 	jsr df_lexer_line
                             	; check if line number == 0
dfa4 : ad8104           [ 4] 	lda df_tokbuff+DFTK_LINNUM
dfa7 : d00f             [ 3] 	bne df_pg_line_number
dfa9 : ad8204           [ 4] 	lda df_tokbuff+DFTK_LINNUM+1
dfac : d00a             [ 3] 	bne df_pg_line_number
                             	; check if line empty
dfae : ad8004           [ 4] 	lda df_tokbuff
dfb1 : f004             [ 3] 	beq df_pg_nothing
                             	
                             	; line number == 0 so in immediate mode from tok
                             	; don't zero out the line length as some routine
                             	; run the line in immediate mode
dfb3 : a901             [ 2] 	lda #1
dfb5 : 855e             [ 3] 	sta df_immed
dfb7 :                       df_pg_nothing
dfb7 : 60               [ 6] 	rts
                             
                             	; put the numbered line in to the right bit of m
dfb8 :                       df_pg_line_number
                             	; Check if this line exists
dfb8 : ad8104           [ 4] 	lda df_tokbuff+DFTK_LINNUM
dfbb : aa               [ 2] 	tax
AS65 Assembler for R6502 [1.42].                                     Page  172
-------------------------------- bank\bank0.s --------------------------------

dfbc : ad8204           [ 4] 	lda df_tokbuff+DFTK_LINNUM+1
dfbf : 2079de           [ 6] 	jsr df_pg_find_line
                             	; Save line address for later X then A
dfc2 : 8538             [ 3] 	sta tmp_d
dfc4 : 8a               [ 2] 	txa
dfc5 : 48               [ 3] 	pha
dfc6 : a538             [ 3] 	lda tmp_d
dfc8 : 48               [ 3] 	pha
                             	; If line exists then it needs deleting
dfc9 : b003             [ 3] 	bcs df_pg_skip_del_line
                             
                             	; delete line from program
dfcb : 2012df           [ 6] 	jsr df_pg_delete_block
dfce :                       df_pg_skip_del_line
                             	; If line length is zero
                             	; then nothing else to do (i.e. line was deleted
dfce : ad8004           [ 4] 	lda df_tokbuff+DFTK_LINLEN
                             	; save the tokenised line length
dfd1 : 48               [ 3] 	pha
dfd2 : d004             [ 3] 	bne df_pg_insertline
                             	; Length was zero, so get temp stuff off stack
dfd4 : 68               [ 4] 	pla
dfd5 : 68               [ 4] 	pla
dfd6 : 68               [ 4] 	pla
dfd7 : 60               [ 6] 	rts
                             
                             	; insert a program line unless it is immediate
dfd8 :                       df_pg_insertline
                             	; Restore previously saved length
dfd8 : 68               [ 4] 	pla
dfd9 : a8               [ 2] 	tay
                             	; Restore previously saved address to reinsert t
dfda : 68               [ 4] 	pla
dfdb : 8538             [ 3] 	sta tmp_d
dfdd : 68               [ 4] 	pla
dfde : aa               [ 2] 	tax
dfdf : a538             [ 3] 	lda tmp_d
                             	; And save it all back to stack again A,X,Y
                             	_pushAXY
                             
                             	; We now have insert address and length
dfea : 20d6de           [ 6] 	jsr df_pg_insert_block
                             	; Restore length and sub 1 to get index in to th
dfed : 68               [ 4] 	pla
dfee : a8               [ 2] 	tay
dfef : 88               [ 2] 	dey
                             	; Restore address to a pointer, X is pulled firs
dff0 : 68               [ 4] 	pla
dff1 : aa               [ 2] 	tax
dff2 : 863d             [ 3] 	stx num_a
dff4 : 68               [ 4] 	pla
dff5 : 853e             [ 3] 	sta num_a+1
                             	; num_a is destination, tokbuff is source, Y is 
dff7 :                       df_pg_insertlinbyte
dff7 : b98004           [ 4] 	lda df_tokbuff,y
dffa : 913d             [ 5] 	sta (num_a),y
dffc : 88               [ 2] 	dey
dffd : 10f8             [ 3] 	bpl df_pg_insertlinbyte
dfff : 60               [ 6] 	rts
                             	
e000 :                       df_pg_prompt_msg
e000 : 52656164790d00        	db "Ready",UTF_CR,0
AS65 Assembler for R6502 [1.42].                                     Page  173
-------------------------------- bank\bank0.s --------------------------------

                             
e007 :                       mod_sz_progedit_e
                             
                             	include "dflat/runtime.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  RUNTIME.S
                             ;*  This module is the runtime coordinator.  When
                             ;*  wants to run a program, execution of statemen
                             ;*  required procedure starts and proceeds from t
                             ;*  according to normal program flow.
                             ;*  This module also contains critical routines f
                             ;*  evaluation of expressions (numeric and string
                             ;*  Whilst the code to implement a specific comma
                             ;*  rtsubs.s, this is the key module that control
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code
                             
e007 :                       mod_sz_runtime_s
                             
                             ;****************************************
                             ;* df_initrun
                             ;* Initialise program space for runtime
                             ;****************************************
e007 :                       df_initrun
                             	; Set the key mask to check every 16 instruction
e007 : a910             [ 2] 	lda #0x10
e009 : 855c             [ 3] 	sta df_checkmsk
e00b : 855b             [ 3] 	sta df_checkkey
                             
                             	; String and array heap initialisation
                             	; Grows up from end of prog space PLUS 1
                             	; Initially empty (dim will allocate)
                             	_cpyZPWord df_prgend,df_starstrt
                             
                             	_incZPWord df_starstrt
                             
                             	_cpyZPWord df_starstrt,df_starend
                             
                             
e023 : a2ff             [ 2] 	ldx #0xff
                             	; Reset runtime stack (grows down)
e025 : 8676             [ 3] 	stx df_rtstop
                             	; make X=0
e027 : e8               [ 2] 	inx
                             	; Reset parameter stack (grows up)
e028 : 8677             [ 3] 	stx df_parmtop
                             	; Reset data pointer high byte
e02a : 8695             [ 3] 	stx df_currdat+1
                             	; if nest counter zeroed
e02c : 8693             [ 3] 	stx df_ifnest
                             
                             	; clear proc addresses
AS65 Assembler for R6502 [1.42].                                     Page  174
-------------------------------- bank\bank0.s --------------------------------

e02e : 2032e0           [ 6] 	jsr df_rt_init_vvt
                             
                             ;	clc
e031 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Initialise vvt
                             ;****************************************
e032 :                       df_rt_init_vvt
                             	; starting at beginning of vvt
                             	_cpyZPWord df_vvtend,df_tmpptra
                             
e03a : a200             [ 2] 	ldx #0
e03c :                       df_rt_init_vvt_slot
e03c : a5a1             [ 3] 	lda df_tmpptra
e03e : c56d             [ 3] 	cmp df_vvtstrt
e040 : d006             [ 3] 	bne df_rt_init_vvt_slot_undim
e042 : a5a2             [ 3] 	lda df_tmpptra+1
e044 : c56e             [ 3] 	cmp df_vvtstrt+1
e046 : f02d             [ 3] 	beq df_rt_init_done
e048 :                       df_rt_init_vvt_slot_undim
                             	; Only zero out proc and array pointers
                             	; Scalar variables are not initialised
e048 : a000             [ 2] 	ldy #0
e04a : b1a1             [ 5] 	lda (df_tmpptra),y
e04c : 29c0             [ 2] 	and #DFVVT_PROC|DFVVT_ARRY
e04e : f016             [ 3] 	beq df_rt_init_vvt_skip
                             	; skip over the first byte which is variable typ
e050 : c8               [ 2] 	iny
                             	; zero out first 3 bytes for proc and arrays
e051 : a900             [ 2] 	lda #0
e053 : 91a1             [ 5] 	sta (df_tmpptra),y
e055 : c8               [ 2] 	iny
e056 : 91a1             [ 5] 	sta (df_tmpptra),y
e058 : c8               [ 2] 	iny
e059 : 91a1             [ 5] 	sta (df_tmpptra),y
e05b : c8               [ 2] 	iny
                             	; before doing dim2 check if proc
                             	; as we don't want to erase the parm count
e05c : a1a1             [ 6] 	lda (df_tmpptra,x)
e05e : 2940             [ 2] 	and #DFVVT_PROC
e060 : d004             [ 3] 	bne df_rt_init_vvt_skip
                             	; if not proc then zero dim2
e062 : a900             [ 2] 	lda #0
e064 : 91a1             [ 5] 	sta (df_tmpptra),y
e066 :                       df_rt_init_vvt_skip
                             	; increment pointer to next slot
                             	_adcZPWord df_tmpptra,8
                             
e073 : 90c7             [ 3] 	bcc df_rt_init_vvt_slot 	; Always branches
e075 :                       df_rt_init_done
e075 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Evaluate a numeric expression
                             ;* pop  X,A result from operator stack
                             ;****************************************
e076 :                       df_rt_getnval
                             	; evaluate the expression
e076 : 207ce0           [ 6] 	jsr df_rt_neval
                             	; get X,A off operator stack
e079 : 4c19f7           [ 3] 	jmp df_ost_popInt
AS65 Assembler for R6502 [1.42].                                     Page  175
-------------------------------- bank\bank0.s --------------------------------

                             
                             
                             ;****************************************
                             ;* Evaluate a numeric expression
                             ;* Push result to operator stack
                             ;****************************************
e07c :                       df_rt_neval
                             	; push terminator on cpu stack
                             	; so we know where we are
e07c : a900             [ 2] 	lda #0
e07e : 48               [ 3] 	pha
                             
                             	; find escape token or keyword token
                             	; if escape token push on to operand stack
                             	; if keyword token push on to operator stack
e07f :                       df_rt_neval_optk
e07f : a488             [ 3] 	ldy df_exeoff
                             	; check end of line
                             
e081 : c47e             [ 3] 	cpy df_eolidx
e083 : f03c             [ 3] 	beq df_rt_neval_process
e085 : c47f             [ 3] 	cpy df_nxtstidx
e087 : f038             [ 3] 	beq df_rt_neval_process
e089 : b186             [ 5] 	lda (df_currlin),y
e08b : 3022             [ 3] 	bmi df_rt_neval_tk
e08d : c920             [ 2] 	cmp #DFTK_ESCVAL
e08f : 9018             [ 3] 	bcc df_rt_neval_esc
                             	; check for evaluation terminators
                             	; specifically ',' and ']'
e091 : c92c             [ 2] 	cmp #','
e093 : f02c             [ 3] 	beq df_rt_neval_process
e095 : c95d             [ 2] 	cmp #']'
e097 : f028             [ 3] 	beq df_rt_neval_process
                             	; check for brackets
                             	; if close bracket then process
e099 : c929             [ 2] 	cmp #')'
e09b : f024             [ 3] 	beq df_rt_neval_process
                             	; if bracket then evaluate expression recursivel
e09d : c928             [ 2] 	cmp #'('
e09f : d031             [ 3] 	bne df_rt_neval_nextbyte
                             	; move past open bracket
e0a1 : e688             [ 5] 	inc df_exeoff
                             	; call evaluation function recursively
e0a3 : 207ce0           [ 6] 	jsr df_rt_neval
e0a6 : 4cd2e0           [ 3] 	jmp df_rt_neval_nextbyte
e0a9 :                       df_rt_neval_esc
e0a9 : 2003e1           [ 6] 	jsr df_rt_eval_esc
e0ac : 4cd2e0           [ 3] 	jmp df_rt_neval_nextbyte
                             	; if a token then push on operator stack
e0af :                       df_rt_neval_tk
e0af : 297f             [ 2] 	and #0x7f
                             	; check if op (look up type using X as index)
                             	; X contains the current operator index
                             
e0b1 : aa               [ 2] 	tax
e0b2 : bddddc           [ 4] 	lda df_tk_tokentype,x
                             	; A contains token type
e0b5 : 48               [ 3] 	pha
e0b6 : 2908             [ 2] 	and #DFTK_OP
e0b8 : d01c             [ 3] 	bne df_rt_neval_tk_opp
                             	; check if fn
e0ba : 68               [ 4] 	pla
AS65 Assembler for R6502 [1.42].                                     Page  176
-------------------------------- bank\bank0.s --------------------------------

e0bb : 2902             [ 2] 	and #DFTK_FN
e0bd : d00c             [ 3] 	bne df_rt_neval_tk_fn
                             
                             	; If got here then something wrong
                             	SWBRK DFERR_OK
                             
                             
e0c1 :                       df_rt_neval_process
                             	; pop operator off stack and execute
                             	; keep popping until reached the terminator
e0c1 : 68               [ 4] 	pla
e0c2 : f006             [ 3] 	beq df_rt_neval_done
                             	; run the token code
e0c4 : 2046e4           [ 6] 	jsr df_rt_run_token
                             	; top two bytes on ost stack is the result
e0c7 : 4cc1e0           [ 3] 	jmp df_rt_neval_process
e0ca :                       df_rt_neval_done
e0ca : 60               [ 6] 	rts
                             
e0cb :                       df_rt_neval_tk_fn
e0cb : 18               [ 2] 	clc
e0cc : 8a               [ 2] 	txa
                             	; run a fn token - returns a value on stack
e0cd : e688             [ 5] 	inc df_exeoff
e0cf : 2046e4           [ 6] 	jsr df_rt_run_token
                             	; move to next byte
e0d2 :                       df_rt_neval_nextbyte
e0d2 : e688             [ 5] 	inc df_exeoff
e0d4 : d0a9             [ 3] 	bne df_rt_neval_optk		; ALWAYS as exeoff != 0
                             
e0d6 :                       df_rt_neval_tk_opp
e0d6 : 68               [ 4] 	pla				; Get A off stack which is the type
e0d7 :                       df_rt_neval_tk_op
                             	; X=Op, A=Type
                             	; if this op < current top of op stack
                             	; then do the op as it is higher priority so sho
                             	; not be pushed
                             	; what is top of the op stack?
                             	; save current op token value
                             	; C=0 means process the op now, else don't
                             	; save current operator index
e0d7 : 86a1             [ 3] 	stx df_tmpptra				; Index in to token table not 
                             	; mask off to keep priority
e0d9 : 2907             [ 2] 	and #DFTK_OPMSK
e0db : 85a3             [ 3] 	sta df_tmpptrb
                             	; peek top of op stack - pull and push X
e0dd : 68               [ 4] 	pla
e0de : 48               [ 3] 	pha
e0df : aa               [ 2] 	tax
                             	; if 0 then nothing so push op
e0e0 : f01c             [ 3] 	beq df_rt_neval_pushOp
                             	; use it to index in to type table
e0e2 : bddddc           [ 4] 	lda df_tk_tokentype,x
                             	; mask off to keep priority
e0e5 : 2907             [ 2] 	and #DFTK_OPMSK
                             	; compare with the saved token type which includ
e0e7 : c5a3             [ 3] 	cmp df_tmpptrb
                             	; if top of stack >= current then C=1
                             	; else C=0
                             	; what is the state of C?
                             	; if 1 then just pushOp
e0e9 : f002             [ 3] 	beq df_rt_neval_donow
AS65 Assembler for R6502 [1.42].                                     Page  177
-------------------------------- bank\bank0.s --------------------------------

e0eb : b011             [ 3] 	bcs df_rt_neval_pushOp
e0ed :                       df_rt_neval_donow
                             	; was C=0 so process now before pushing the new 
                             	; get operator off cpu stack
e0ed : 68               [ 4] 	pla
e0ee : a8               [ 2] 	tay		; Save whilst need to push other things
                             	; save the current op on cpu stack
e0ef : a5a1             [ 3] 	lda df_tmpptra
e0f1 : 48               [ 3] 	pha
e0f2 : aa               [ 2] 	tax		; X = current op
e0f3 : 98               [ 2] 	tya		; Get A back from Y (new op)
                             	; now run the token in A that came off the stack
e0f4 : 2046e4           [ 6] 	jsr df_rt_run_token
                             	; get current op off cpu stack in to X
e0f7 : 68               [ 4] 	pla
e0f8 : aa               [ 2] 	tax
                             	; get the token type in to A
e0f9 : bddddc           [ 4] 	lda df_tk_tokentype,x
                             	; now go back around again to check whether to p
e0fc : d0d9             [ 3] 	bne df_rt_neval_tk_op		; ALWAYS as type never ze
e0fe :                       df_rt_neval_pushOp
                             	; push the operator
e0fe : a5a1             [ 3] 	lda df_tmpptra
e100 : 48               [ 3] 	pha
e101 : d0cf             [ 4] 	bne df_rt_neval_nextbyte	; ALWAYS as token index
                             
                             
                             
                             
                             ; jump to escape evaluation routine
e103 :                       df_rt_eval_esc
e103 : 0a               [ 2] 	asl a
e104 : aa               [ 2] 	tax
e105 : bd12e1           [ 4] 	lda df_rt_eval_esc_tab,x
e108 : 85a1             [ 3] 	sta df_tmpptra
e10a : bd13e1           [ 4] 	lda df_rt_eval_esc_tab+1,x
e10d : 85a2             [ 3] 	sta df_tmpptra+1
e10f : 6ca100           [ 6] 	jmp (df_tmpptra)
                             
e112 :                       df_rt_eval_esc_tab
e112 : d6e1                  	dw df_rt_eval_chr
e114 : e2e1                  	dw df_rt_eval_reserved
e116 : e2e1                  	dw df_rt_eval_reserved
e118 : e2e1                  	dw df_rt_eval_reserved
e11a : e2e1                  	dw df_rt_eval_reserved
e11c : e2e1                  	dw df_rt_eval_reserved	; no such thing as bytdec
e11e : d6e1                  	dw df_rt_eval_bythex
e120 : d6e1                  	dw df_rt_eval_bytbin
e122 : e2e1                  	dw df_rt_eval_reserved
e124 : d6e1                  	dw df_rt_eval_intdec
e126 : d6e1                  	dw df_rt_eval_inthex
e128 : d6e1                  	dw df_rt_eval_intbin
e12a : e2e1                  	dw df_rt_eval_reserved
e12c : e2e1                  	dw df_rt_eval_reserved
e12e : e2e1                  	dw df_rt_eval_reserved
e130 : e2e1                  	dw df_rt_eval_reserved
e132 : e4e1                  	dw df_rt_eval_strlit
e134 : 2de2                  	dw df_rt_eval_var
e136 : 2be3                  	dw df_rt_eval_proc
                             
                             
                             ;****************************************
AS65 Assembler for R6502 [1.42].                                     Page  178
-------------------------------- bank\bank0.s --------------------------------

                             ;* Evaluate a string expression
                             ;* X, A = Destination is string accumulator
                             ;****************************************
e138 :                       df_rt_seval
e138 : a67a             [ 3] 	ldx df_sevalptr
e13a : a57b             [ 3] 	lda df_sevalptr+1
                             ;****************************************
                             ;* Evaluate a string expression
                             ;* X, A = Destination buffer / space
                             ;****************************************
e13c :                       df_rt_sval
                             	; keep X,A on the stack - will be modified
e13c : 8538             [ 3] 	sta tmp_d
e13e : 48               [ 3] 	pha
e13f : 8a               [ 2] 	txa
e140 : 48               [ 3] 	pha
e141 : a538             [ 3] 	lda tmp_d
                             	; push original destination
e143 : 20f0f6           [ 6] 	jsr df_ost_pushStr
                             	; Push the destination to the 6502 stack
                             	; hi byte first then lo
                             	; push string idx so we know our starting positi
                             	; in the string buffer
                             	; this limits all evaluations to 255 bytes
                             ;	lda df_stridx
                             ;	jsr df_st_pushOp
                             
                             	; find escape token or keyword token
                             	; if escape token push on to operand stack
                             	; if keyword operator token push on to operator 
                             	; if keyword function token run it
                             
e146 :                       df_rt_seval_optk
e146 : a488             [ 3] 	ldy df_exeoff
                             	; check end of line
e148 : c47e             [ 3] 	cpy df_eolidx
e14a : f06d             [ 3] 	beq df_rt_seval_done
e14c : c47f             [ 3] 	cpy df_nxtstidx
e14e : f069             [ 3] 	beq df_rt_seval_done
                             
e150 : b186             [ 5] 	lda (df_currlin),y
e152 : 301c             [ 3] 	bmi df_rt_seval_tk
                             
e154 : c920             [ 2] 	cmp #DFTK_ESCVAL
e156 : 900a             [ 3] 	bcc df_rt_seval_esc
                             	; check for evaluation terminators
                             	; specifically ',' and ')'
e158 : c92c             [ 2] 	cmp #','
e15a : f05d             [ 3] 	beq df_rt_seval_done
e15c : c929             [ 2] 	cmp #')'
e15e : f059             [ 3] 	beq df_rt_seval_done
e160 : d04a             [ 3] 	bne df_rt_seval_nextbyte
e162 :                       df_rt_seval_esc
                             	; the only escape char is STRLIT, VAR or PROC
e162 : c910             [ 2] 	cmp #DFTK_STRLIT
e164 : f04b             [ 3] 	beq	df_rt_seval_esc_strlit
e166 : c911             [ 2] 	cmp #DFTK_VAR
e168 : f028             [ 3] 	beq	df_rt_seval_esc_var
e16a : c912             [ 2] 	cmp #DFTK_PROC
e16c : f049             [ 3] 	beq	df_rt_seval_esc_proc
                             
                             	; error if got here
AS65 Assembler for R6502 [1.42].                                     Page  179
-------------------------------- bank\bank0.s --------------------------------

                             	SWBRK DFERR_SYNTAX
                             
                             
                             	; if a token then push on operator stack
e170 :                       df_rt_seval_tk
e170 : 8488             [ 3] 	sty df_exeoff
e172 : 297f             [ 2] 	and #0x7f
                             	; check if op
e174 : aa               [ 2] 	tax
e175 : bddddc           [ 4] 	lda df_tk_tokentype,x
e178 : 2904             [ 2] 	and #DFTK_STROP
e17a : d009             [ 3] 	bne df_rt_seval_tk_op
                             	; check if fn
e17c : bddddc           [ 4] 	lda df_tk_tokentype,x
e17f : 2902             [ 2] 	and #DFTK_FN
e181 : d006             [ 3] 	bne df_rt_seval_tk_fn
                             
                             	; token type mismatch if got here
                             	SWBRK DFERR_TYPEMISM
                             
                             
e185 :                       df_rt_seval_tk_op
                             	; the only op is $+
                             	; so just ignore!
e185 : 8a               [ 2] 	txa
e186 : 4cace1           [ 3] 	jmp df_rt_seval_nextbyte
                             
e189 :                       df_rt_seval_tk_fn
e189 : 8a               [ 2] 	txa
e18a : e688             [ 5] 	inc df_exeoff
e18c : 2046e4           [ 6] 	jsr df_rt_run_token
e18f : 4c96e1           [ 3] 	jmp df_rt_seval_copy
                             
e192 :                       df_rt_seval_esc_var
                             	; go process the variable as a normal RVAL
e192 : 18               [ 2] 	clc
e193 : 202de2           [ 6] 	jsr df_rt_eval_var
                             	; copy source off rt stack to destination
e196 :                       df_rt_seval_copy
                             	; pull destination pointer
e196 : 68               [ 4] 	pla
e197 : 85a1             [ 3] 	sta df_tmpptra
e199 : 68               [ 4] 	pla
e19a : 85a2             [ 3] 	sta df_tmpptra+1
                             	; pop source string pointer off stack
e19c : 201df7           [ 6] 	jsr df_ost_popStr
e19f : 86a3             [ 3] 	stx df_tmpptrb
e1a1 : 85a4             [ 3] 	sta df_tmpptrb+1
                             	; go and copy the string
e1a3 : 20bde1           [ 6] 	jsr df_rt_copyStr
                             	; now save the destination
e1a6 : a5a2             [ 3] 	lda df_tmpptra+1
e1a8 : 48               [ 3] 	pha
e1a9 : a5a1             [ 3] 	lda df_tmpptra
e1ab : 48               [ 3] 	pha
                             
                             ;	jmp df_rt_seval_nextbyte
e1ac :                       df_rt_seval_nextbyte
e1ac : e688             [ 5] 	inc df_exeoff
e1ae : 4c46e1           [ 3] 	jmp df_rt_seval_optk
                             
e1b1 :                       df_rt_seval_esc_strlit
AS65 Assembler for R6502 [1.42].                                     Page  180
-------------------------------- bank\bank0.s --------------------------------

                             	; evaluate string literal
e1b1 : 20e4e1           [ 6] 	jsr df_rt_eval_strlit
e1b4 : 4c96e1           [ 3] 	jmp df_rt_seval_copy
                             
e1b7 :                       df_rt_seval_esc_proc
                             	; not yet suported *******
                             	SWBRK DFERR_OK
                             
                             
                             	; keep going until non-ws char found or end of l
e1b9 :                       df_rt_seval_done
                             	;
e1b9 : 68               [ 4] 	pla
e1ba : 68               [ 4] 	pla
                             
e1bb : 18               [ 2] 	clc
e1bc : 60               [ 6] 	rts
                             
                             
                             ; Copy string from ptrb to ptra
e1bd :                       df_rt_copyStr
e1bd : a000             [ 2] 	ldy #0
e1bf :                       df_rt_copyStr_ch
e1bf : b1a3             [ 5] 	lda (df_tmpptrb),y
e1c1 : 91a1             [ 5] 	sta (df_tmpptra),y
e1c3 : f003             [ 3] 	beq df_rt_copyStr_done
e1c5 : c8               [ 2] 	iny
e1c6 : d0f7             [ 3] 	bne df_rt_copyStr_ch	; Always relying in Y never
e1c8 :                       df_rt_copyStr_done
e1c8 : 98               [ 2] 	tya
e1c9 : 18               [ 2] 	clc
e1ca : 65a1             [ 3] 	adc df_tmpptra
e1cc : 85a1             [ 3] 	sta df_tmpptra
e1ce : a5a2             [ 3] 	lda df_tmpptra+1
e1d0 : 6900             [ 2] 	adc #0
e1d2 : 85a2             [ 3] 	sta df_tmpptra+1
e1d4 : 18               [ 2] 	clc
e1d5 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Evaluate and push numeric value
                             ;****************************************
e1d6 :                       df_rt_eval_intdec
e1d6 :                       df_rt_eval_bytdec
e1d6 :                       df_rt_eval_inthex
e1d6 :                       df_rt_eval_bythex
e1d6 :                       df_rt_eval_intbin
e1d6 :                       df_rt_eval_bytbin
e1d6 :                       df_rt_eval_chr
                             	; numeric constant
e1d6 : c8               [ 2] 	iny
e1d7 : b186             [ 5] 	lda (df_currlin),y
e1d9 : aa               [ 2] 	tax
e1da : c8               [ 2] 	iny
e1db : b186             [ 5] 	lda (df_currlin),y
                             	; save offset before calling any routine
e1dd : 8488             [ 3] 	sty df_exeoff
                             	; push number on to stack
e1df : 4ce5f6           [ 3] 	jmp df_ost_pushInt
                             
e1e2 :                       df_rt_eval_reserved
                             	; should not get here
AS65 Assembler for R6502 [1.42].                                     Page  181
-------------------------------- bank\bank0.s --------------------------------

                             	SWBRK DFERR_OK
                             
                             
                             ;****************************************
                             ;* Evaluate and push string constant
                             ;****************************************
e1e4 :                       df_rt_eval_strlit
e1e4 : 8488             [ 3] 	sty df_exeoff
                             	; calculate the effective address
                             	; y + currlin
e1e6 : 98               [ 2] 	tya
                             	; set carry to add one extra
e1e7 : 38               [ 2] 	sec
e1e8 : 6586             [ 3] 	adc df_currlin
e1ea : 85a1             [ 3] 	sta df_tmpptra
e1ec : aa               [ 2] 	tax
e1ed : a587             [ 3] 	lda df_currlin+1
e1ef : 6900             [ 2] 	adc #0
e1f1 : 85a2             [ 3] 	sta df_tmpptra+1
                             
                             	; push string on to stack
e1f3 : 20f0f6           [ 6] 	jsr df_ost_pushStr
                             	; now proceed until end of string found
e1f6 : a488             [ 3] 	ldy df_exeoff
e1f8 :                       df_rt_eval_strlit_ch
e1f8 : b186             [ 5] 	lda (df_currlin),y
e1fa : f003             [ 3] 	beq df_rt_eval_strlit_done
e1fc : c8               [ 2] 	iny
e1fd : d0f9             [ 3] 	bne df_rt_eval_strlit_ch
e1ff :                       df_rt_eval_strlit_done	; Always relying on Y neve
e1ff : 8488             [ 3] 	sty df_exeoff
e201 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Return array parameter
                             ;* A has parm
                             ;****************************************
e202 :                       df_rt_arry_parm
                             	; move past open bracket or comma
e202 : e688             [ 5] 	inc df_exeoff
                             	; evaluate expression inside bracket
e204 : 2076e0           [ 6] 	jsr df_rt_getnval
e207 : 8a               [ 2] 	txa
                             ;	clc
e208 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Return double array parameter
                             ;* X = dim1, Y = dim2
                             ;****************************************
e209 :                       df_rt_arry_parm2
                             	; go get array parm 1
e209 : 2002e2           [ 6] 	jsr df_rt_arry_parm
e20c : 48               [ 3] 	pha
e20d : a200             [ 2] 	ldx #0
e20f : a488             [ 3] 	ldy df_exeoff
e211 :                       df_rt_arry_parm2_term
e211 : b186             [ 5] 	lda (df_currlin),y
e213 : c95d             [ 2] 	cmp #']'
e215 : f011             [ 3] 	beq df_rt_arry_parm2_skiparry2
e217 : c92c             [ 2] 	cmp #','
e219 : f006             [ 3] 	beq df_rt_arry_parm2_arry2
AS65 Assembler for R6502 [1.42].                                     Page  182
-------------------------------- bank\bank0.s --------------------------------

e21b : 8488             [ 3] 	sty df_exeoff
e21d : c8               [ 2] 	iny
e21e : 4c11e2           [ 3] 	jmp df_rt_arry_parm2_term
e221 :                       df_rt_arry_parm2_arry2
                             	; get second dimension and put in Y
e221 : 2002e2           [ 6] 	jsr df_rt_arry_parm
e224 : a8               [ 2] 	tay
e225 : 68               [ 4] 	pla
e226 : aa               [ 2] 	tax
                             ;	clc
e227 : 60               [ 6] 	rts
e228 :                       df_rt_arry_parm2_skiparry2
e228 : a000             [ 2] 	ldy #0
e22a : 68               [ 4] 	pla
e22b : aa               [ 2] 	tax
                             ;	clc
e22c : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* Evaluate and push variable
                             ;* The actual value is pushed if numeric
                             ;* The pointer is pushed if string
                             ;* Carry Set = LVAR else normal RVAR
                             ;* LVAR : Y = line index, A=vvt type, tmpptra = v
                             ;****************************************
e22d :                       df_rt_eval_var
                             	; save carry bit
e22d : 08               [ 3] 	php
                             	; if lvar mode then already passed escape token
e22e : b010             [ 3] 	bcs df_rt_eval_lvskip
                             	; move past var escape token
e230 : c8               [ 2] 	iny
                             	; get var vvt address
e231 : b186             [ 5] 	lda (df_currlin),y
e233 : 85a1             [ 3] 	sta df_tmpptra
e235 : c8               [ 2] 	iny
e236 : 8488             [ 3] 	sty df_exeoff
e238 : b186             [ 5] 	lda (df_currlin),y
e23a : 85a2             [ 3] 	sta df_tmpptra+1
                             	; push vvt type first as this is the last thing 
e23c : a200             [ 2] 	ldx #0
e23e : a1a1             [ 6] 	lda (df_tmpptra,x)
e240 :                       df_rt_eval_lvskip
e240 : 48               [ 3] 	pha
                             	; Test A
e241 : aa               [ 2] 	tax
                             	; simple variable
e242 : 1012             [ 3] 	bpl df_rt_eval_var_notarry
                             	; even if an array if no dimensions then return 
                             	; if at end of statement or line then simple cop
e244 : c47e             [ 3] 	cpy df_eolidx
e246 : f02b             [ 3] 	beq df_rt_eval_var_simple
e248 : c47f             [ 3] 	cpy df_nxtstidx
e24a : f027             [ 3] 	beq df_rt_eval_var_simple
                             	; if next ch is not [ then simple copy
e24c : c8               [ 2] 	iny
e24d : b186             [ 5] 	lda (df_currlin),y
e24f : 88               [ 2] 	dey
e250 : c95b             [ 2] 	cmp #'['
e252 : d01f             [ 3] 	bne df_rt_eval_var_simple
                             	; go do array handling
AS65 Assembler for R6502 [1.42].                                     Page  183
-------------------------------- bank\bank0.s --------------------------------

e254 : f02b             [ 3] 	beq df_rt_eval_var_do_arry
e256 :                       df_rt_eval_var_notarry
                             	; pull the type, not needed here
e256 : 68               [ 4] 	pla
                             	; pull C and check if lvar wanted rather than rv
e257 : 28               [ 4] 	plp
e258 : b00c             [ 3] 	bcs df_rt_eval_lvar
                             	; just push the vvt lo,hi value
e25a : a001             [ 2] 	ldy #DFVVT_LO
e25c : b1a1             [ 5] 	lda (df_tmpptra),y
e25e : aa               [ 2] 	tax
e25f : a002             [ 2] 	ldy #DFVVT_HI
e261 : b1a1             [ 5] 	lda (df_tmpptra),y
                             
e263 : 4ce5f6           [ 3] 	jmp df_ost_pushInt
                             
e266 :                       df_rt_eval_lvar
                             	; it's not an array, push the address of DFVVT_L
                             	; add DFVVT_LO offset to slot address in X,A
e266 : 18               [ 2] 	clc
e267 : a901             [ 2] 	lda #DFVVT_LO
e269 : 65a1             [ 3] 	adc df_tmpptra
e26b : aa               [ 2] 	tax
e26c : a5a2             [ 3] 	lda df_tmpptra+1
e26e : 6900             [ 2] 	adc #0
                             
                             	; push pointer to lo,hi
e270 : 4cf4f6           [ 3] 	jmp df_ost_pushPtr
                             
e273 :                       df_rt_eval_var_simple
                             	; clean up stack
e273 : 68               [ 4] 	pla
e274 : 68               [ 4] 	pla
                             	; simply get lo,hi and push ptr on stack
e275 : a001             [ 2] 	ldy #DFVVT_LO
e277 : b1a1             [ 5] 	lda (df_tmpptra),y
e279 : aa               [ 2] 	tax
e27a : a002             [ 2] 	ldy #DFVVT_HI
e27c : b1a1             [ 5] 	lda (df_tmpptra),y
e27e : 4cf4f6           [ 3] 	jmp df_ost_pushPtr
                             
e281 :                       df_rt_eval_var_do_arry
                             	; move past var index
e281 : e688             [ 5] 	inc df_exeoff
                             	; zero out x,y as they have dimension info
e283 : a200             [ 2] 	ldx #0
e285 : a000             [ 2] 	ldy #0
                             
                             	; ** Array handling routine **
                             	; A on stack = type
                             	; save vvt address
e287 : a5a2             [ 3] 	lda df_tmpptra+1
e289 : 48               [ 3] 	pha
e28a : a5a1             [ 3] 	lda df_tmpptra
e28c : 48               [ 3] 	pha
                             
                             	; get array parms in X,Y
e28d : 2009e2           [ 6] 	jsr df_rt_arry_parm2
                             	; restore vvt address
e290 : 68               [ 4] 	pla
e291 : 85a1             [ 3] 	sta df_tmpptra
e293 : 68               [ 4] 	pla
AS65 Assembler for R6502 [1.42].                                     Page  184
-------------------------------- bank\bank0.s --------------------------------

e294 : 85a2             [ 3] 	sta df_tmpptra+1
                             	; save dimension indices for later
                             	; save x last as needed first
                             	; A ok to trample
e296 : 98               [ 2] 	tya
e297 : 48               [ 3] 	pha
e298 : 8a               [ 2] 	txa
e299 : 48               [ 3] 	pha
                             	; if y is zero then need to decide some stuff
e29a : c000             [ 2] 	cpy #0
e29c : d012             [ 3] 	bne df_rt_eval_var_dim2adj
                             	; if dim2 > 0 then swap x,y
e29e : a004             [ 2] 	ldy #DFVVT_DIM2
e2a0 : b1a1             [ 5] 	lda (df_tmpptra),y
e2a2 : a000             [ 2] 	ldy #0
e2a4 : c900             [ 2] 	cmp #0
e2a6 : f008             [ 3] 	beq df_rt_eval_var_dim2adj
                             	; pop from stack in swapped order
e2a8 : 68               [ 4] 	pla
e2a9 : a8               [ 2] 	tay
e2aa : 68               [ 4] 	pla
e2ab : aa               [ 2] 	tax
                             	; save back on stack, A ok to trample
e2ac : 98               [ 2] 	tya
e2ad : 48               [ 3] 	pha
e2ae : 8a               [ 2] 	txa
e2af : 48               [ 3] 	pha
                             
e2b0 :                       df_rt_eval_var_dim2adj
                             	; don't let y=0
e2b0 : c000             [ 2] 	cpy #0
e2b2 : d001             [ 3] 	bne df_rt_eval_var_dim2adjy
e2b4 : c8               [ 2] 	iny
e2b5 :                       df_rt_eval_var_dim2adjy
                             	; don't let x=0
e2b5 : e000             [ 2] 	cpx #0
e2b7 : d001             [ 3] 	bne df_rt_eval_var_dim2adjx
e2b9 : e8               [ 2] 	inx
e2ba :                       df_rt_eval_var_dim2adjx
                             	;calculate offset
                             	;(y-1)*dim1 + (x-1)
e2ba : ca               [ 2] 	dex
e2bb : 88               [ 2] 	dey
                             	; (y-1)
e2bc : 843d             [ 3] 	sty num_a
e2be : a900             [ 2] 	lda #0
e2c0 : 853e             [ 3] 	sta num_a+1
                             	; if y is 0 then no need to multiply
e2c2 : c000             [ 2] 	cpy #0
e2c4 : f00d             [ 3] 	beq df_rt_eval_var_nomult
                             	; (dim1)
e2c6 : a003             [ 2] 	ldy #DFVVT_DIM1
e2c8 : a900             [ 2] 	lda #0
e2ca : 8542             [ 3] 	sta num_b+1
e2cc : b1a1             [ 5] 	lda (df_tmpptra),y
e2ce : 8541             [ 3] 	sta num_b
                             	; (y-1)*dim1 num_a has result
e2d0 : 2034d4           [ 6] 	jsr int_fast_mult
e2d3 :                       df_rt_eval_var_nomult
                             	; move x to a
e2d3 : 8a               [ 2] 	txa
                             	; add x to num_a
AS65 Assembler for R6502 [1.42].                                     Page  185
-------------------------------- bank\bank0.s --------------------------------

e2d4 : 18               [ 2] 	clc
e2d5 : 653d             [ 3] 	adc num_a
e2d7 : 853d             [ 3] 	sta num_a
e2d9 : a53e             [ 3] 	lda num_a+1
e2db : 6900             [ 2] 	adc #0
e2dd : 853e             [ 3] 	sta num_a+1
                             	; now have element offset in num_a
                             	; dimensions in x and y
e2df : 68               [ 4] 	pla
e2e0 : aa               [ 2] 	tax
e2e1 : 68               [ 4] 	pla
e2e2 : a8               [ 2] 	tay
                             	; get type of variable originally found
e2e3 : 68               [ 4] 	pla
e2e4 : 48               [ 3] 	pha
e2e5 : 2901             [ 2] 	and #DFVVT_INT
e2e7 : f004             [ 3] 	beq df_rt_eval_var_push
                             	; if it is int then multiply offset by 2
e2e9 : 063d             [ 5] 	asl num_a
e2eb : 263e             [ 5] 	rol num_a+1
e2ed :                       df_rt_eval_var_push
                             	; add pointer in lo,hi to num_a
e2ed : 18               [ 2] 	clc
e2ee : a001             [ 2] 	ldy #DFVVT_LO
e2f0 : b1a1             [ 5] 	lda (df_tmpptra),y
e2f2 : 653d             [ 3] 	adc num_a
e2f4 : 853d             [ 3] 	sta num_a
e2f6 : a002             [ 2] 	ldy #DFVVT_HI
e2f8 : b1a1             [ 5] 	lda (df_tmpptra),y
e2fa : d002             [ 3] 	bne df_rt_array_exists
                             	; if vvt address hi is zero then array not dimen
                             	SWBRK DFERR_DIM
                             
e2fe :                       df_rt_array_exists
e2fe : 653e             [ 3] 	adc num_a+1
e300 : 853e             [ 3] 	sta num_a+1
                             	; get the type
e302 : 68               [ 4] 	pla
                             	; if not int or byte then push string
e303 : 2903             [ 2] 	and #DFVVT_INT|DFVVT_BYT
e305 : f01c             [ 3] 	beq df_rt_eval_var_str
                             	; get LVAR preference
e307 : 28               [ 4] 	plp
e308 : b01a             [ 3] 	bcs df_rt_eval_ptr
                             	; need to load lo and hi for int
                             	; but only lo for byt
e30a : 2901             [ 2] 	and #DFVVT_INT
e30c : f00b             [ 3] 	beq df_rt_eval_byt
                             	; push the contents pointed to by num_a
e30e : a000             [ 2] 	ldy #0
e310 : b13d             [ 5] 	lda (num_a),y
e312 : aa               [ 2] 	tax
e313 : c8               [ 2] 	iny
e314 : b13d             [ 5] 	lda (num_a),y
e316 : 4ce5f6           [ 3] 	jmp df_ost_pushInt
e319 :                       df_rt_eval_byt
e319 : a000             [ 2] 	ldy #0
e31b : b13d             [ 5] 	lda (num_a),y
e31d : aa               [ 2] 	tax
e31e : a900             [ 2] 	lda #0
e320 : 4ce5f6           [ 3] 	jmp df_ost_pushInt
e323 :                       df_rt_eval_var_str
AS65 Assembler for R6502 [1.42].                                     Page  186
-------------------------------- bank\bank0.s --------------------------------

e323 : 28               [ 4] 	plp
e324 :                       df_rt_eval_ptr
                             ;	clc
                             	; put num_a not contents
e324 : a63d             [ 3] 	ldx num_a
e326 : a53e             [ 3] 	lda num_a+1
e328 : 4cf4f6           [ 3] 	jmp df_ost_pushPtr
                             
e32b :                       df_rt_eval_proc
e32b : a577             [ 3] 	lda df_parmtop				; Save current position of par
e32d : 48               [ 3] 	pha
e32e : 2030f5           [ 6] 	jsr df_rt_proc				; Go and call the user functio
e331 : 68               [ 4] 	pla							; Get back the original parameter stac
e332 : c577             [ 3] 	cmp df_parmtop				; if it is the same, then no r
e334 : f002             [ 3] 	beq df_rt_eval_proc_err
e336 : 18               [ 2] 	clc
e337 : 60               [ 6] 	rts
e338 :                       df_rt_eval_proc_err
                             	; if no return value then report an errror
                             	SWBRK DFERR_RETURN
                             
                             
                             
                             
                             ;****************************************
                             ;* get two ints off the runtime stack
                             ;* first parm in ptrb, second in ptra
                             ;****************************************
e33a :                       df_rt_get2Ints
                             	; the first int popped is actually the second pa
e33a : 2019f7           [ 6] 	jsr df_ost_popInt
e33d : 86a3             [ 3] 	stx df_tmpptrb
e33f : 85a4             [ 3] 	sta df_tmpptrb+1
                             
e341 : 2019f7           [ 6] 	jsr df_ost_popInt
e344 : 86a1             [ 3] 	stx df_tmpptra
e346 : 85a2             [ 3] 	sta df_tmpptra+1
e348 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* get two strings off the runtime stack
                             ;* first parm in ptrb, second in ptra
                             ;****************************************
e349 :                       df_rt_get2Strs
                             	; the first int popped is actually the second pa
e349 : 201df7           [ 6] 	jsr df_ost_popStr
e34c : 86a3             [ 3] 	stx df_tmpptrb
e34e : 85a4             [ 3] 	sta df_tmpptrb+1
                             
e350 : 201df7           [ 6] 	jsr df_ost_popStr
e353 : 86a1             [ 3] 	stx df_tmpptra
e355 : 85a2             [ 3] 	sta df_tmpptra+1
e357 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ; common code for 2 ints runtime parsing
                             ;****************************************
e358 :                       df_rt_parm_2ints
                             	; evaluate 1st parm
e358 : 207ce0           [ 6] 	jsr df_rt_neval
                             	; jump over comma
e35b : e688             [ 5] 	inc df_exeoff
AS65 Assembler for R6502 [1.42].                                     Page  187
-------------------------------- bank\bank0.s --------------------------------

                             	; evaluate the 2nd parm
e35d : 207ce0           [ 6] 	jsr df_rt_neval
                             
                             	; pop 2nd parm
e360 : 2019f7           [ 6] 	jsr df_ost_popInt
e363 : 86a3             [ 3] 	stx df_tmpptrb
e365 : 85a4             [ 3] 	sta df_tmpptrb+1
                             	; pop 1st parm
e367 : 2019f7           [ 6] 	jsr df_ost_popInt
e36a : 86a1             [ 3] 	stx df_tmpptra
e36c : 85a2             [ 3] 	sta df_tmpptra+1
e36e : 60               [ 6] 	rts
                             
                             ;****************************************
                             ; common code for 3 ints runtime parsing
                             ;****************************************
e36f :                       df_rt_parm_3ints
                             	; evaluate 1st parm
e36f : 207ce0           [ 6] 	jsr df_rt_neval
e372 : e688             [ 5] 	inc df_exeoff
                             	; evaluate the 2nd parm
e374 : 207ce0           [ 6] 	jsr df_rt_neval
e377 : e688             [ 5] 	inc df_exeoff
                             	; evaluate the 3rd parm
e379 : 207ce0           [ 6] 	jsr df_rt_neval
                             
                             	; pop 3rd parm
e37c : 2019f7           [ 6] 	jsr df_ost_popInt
e37f : 86a5             [ 3] 	stx df_tmpptrc
e381 : 85a6             [ 3] 	sta df_tmpptrc+1
                             	; pop 2nd parm
e383 : 2019f7           [ 6] 	jsr df_ost_popInt
e386 : 86a3             [ 3] 	stx df_tmpptrb
e388 : 85a4             [ 3] 	sta df_tmpptrb+1
                             	; pop 1st parm
e38a : 2019f7           [ 6] 	jsr df_ost_popInt
e38d : 86a1             [ 3] 	stx df_tmpptra
e38f : 85a2             [ 3] 	sta df_tmpptra+1
e391 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ; common code for 4 ints runtime parsing
                             ;****************************************
e392 :                       df_rt_parm_4ints
                             	; evaluate 1st parm
e392 : 207ce0           [ 6] 	jsr df_rt_neval
e395 : e688             [ 5] 	inc df_exeoff
                             	; evaluate the 2nd parm
e397 : 207ce0           [ 6] 	jsr df_rt_neval
e39a : e688             [ 5] 	inc df_exeoff
                             	; evaluate the 3rd parm
e39c : 207ce0           [ 6] 	jsr df_rt_neval
e39f : e688             [ 5] 	inc df_exeoff
                             	; evaluate the 4th parm
e3a1 : 207ce0           [ 6] 	jsr df_rt_neval
                             
                             	; pop 4th parm
e3a4 : 2019f7           [ 6] 	jsr df_ost_popInt
e3a7 : 86a7             [ 3] 	stx df_tmpptrd
e3a9 : 85a8             [ 3] 	sta df_tmpptrd+1
                             	; pop 3rd parm
e3ab : 2019f7           [ 6] 	jsr df_ost_popInt
AS65 Assembler for R6502 [1.42].                                     Page  188
-------------------------------- bank\bank0.s --------------------------------

e3ae : 86a5             [ 3] 	stx df_tmpptrc
e3b0 : 85a6             [ 3] 	sta df_tmpptrc+1
                             	; pop 2nd parm
e3b2 : 2019f7           [ 6] 	jsr df_ost_popInt
e3b5 : 86a3             [ 3] 	stx df_tmpptrb
e3b7 : 85a4             [ 3] 	sta df_tmpptrb+1
                             	; pop 1st parm
e3b9 : 2019f7           [ 6] 	jsr df_ost_popInt
e3bc : 86a1             [ 3] 	stx df_tmpptra
e3be : 85a2             [ 3] 	sta df_tmpptra+1
e3c0 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ; common code for 5 ints runtime parsing
                             ;****************************************
                             ;df_rt_parm_5ints
                             ;	; evaluate 1st parm
                             ;	jsr df_rt_neval
                             ;	inc df_exeoff
                             ;	; evaluate the 2nd parm
                             ;	jsr df_rt_neval
                             ;	inc df_exeoff
                             ;	; evaluate the 3rd parm
                             ;	jsr df_rt_neval
                             ;	inc df_exeoff
                             ;	; evaluate the 4th parm
                             ;	jsr df_rt_neval
                             ;	inc df_exeoff
                             ;	; evaluate the 5th parm
                             ;	jsr df_rt_neval
                             ;
                             ;	; pop 5th parm
                             ;	jsr df_ost_popInt
                             ;	stx df_tmpptre
                             ;	sta df_tmpptre+1
                             ;	; pop 4th parm
                             ;	jsr df_ost_popInt
                             ;	stx df_tmpptrd
                             ;	sta df_tmpptrd+1
                             ;	; pop 3rd parm
                             ;	jsr df_ost_popInt
                             ;	stx df_tmpptrc
                             ;	sta df_tmpptrc+1
                             ;	; pop 2nd parm
                             ;	jsr df_ost_popInt
                             ;	stx df_tmpptrb
                             ;	sta df_tmpptrb+1
                             ;	; pop 1st parm
                             ;	jsr df_ost_popInt
                             ;	stx df_tmpptra
                             ;	sta df_tmpptra+1
                             ;
                             ;	rts
                             
                             ;****************************************
                             ;* initialise statement to be executed
                             ;* X,A = line pointer, Y=statement offset
                             ;****************************************
e3c1 :                       df_rt_init_stat_ptr
                             	; save current line
e3c1 : 8686             [ 3] 	stx df_currlin
e3c3 : 8587             [ 3] 	sta df_currlin+1
AS65 Assembler for R6502 [1.42].                                     Page  189
-------------------------------- bank\bank0.s --------------------------------

e3c5 : 8480             [ 3] 	sty df_curstidx
e3c7 : 8488             [ 3] 	sty df_exeoff
e3c9 : a000             [ 2] 	ldy #0
e3cb : b186             [ 5] 	lda (df_currlin),y
e3cd : 857e             [ 3] 	sta df_eolidx
e3cf : a480             [ 3] 	ldy df_curstidx
e3d1 : b186             [ 5] 	lda (df_currlin),y
e3d3 : 857f             [ 3] 	sta df_nxtstidx
e3d5 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Execute from a statement pointed to
                             ;* by currlin and exeoff
                             ;****************************************
e3d6 :                       df_rt_exec_stat
e3d6 : a686             [ 3] 	ldx df_currlin
e3d8 : a587             [ 3] 	lda df_currlin+1
e3da : a488             [ 3] 	ldy df_exeoff
e3dc :                       df_rt_exec_init_ptr
e3dc : 20c1e3           [ 6] 	jsr df_rt_init_stat_ptr
                             	; assume normal flow of control if next line hi 
                             	; this means no line can execute below page 1, n
e3df : a900             [ 2] 	lda #0
e3e1 : 858a             [ 3] 	sta df_nextlin+1
                             
                             	; find first token in statement
e3e3 :                       df_rt_exec_find_tok
e3e3 : c8               [ 2] 	iny
e3e4 : b186             [ 5] 	lda (df_currlin),y
e3e6 : 10fb             [ 3] 	bpl df_rt_exec_find_tok
e3e8 :                       df_rt_exec_found_tok
                             	; skip past token to next byte in readiness
e3e8 : c8               [ 2] 	iny
e3e9 : 8488             [ 3] 	sty df_exeoff
                             	; save the token
e3eb : 48               [ 3] 	pha
                             	; Run that statement
e3ec : 2046e4           [ 6] 	jsr df_rt_run_token
                             	; what token was run, if it was enddef or return
e3ef : 68               [ 4] 	pla
e3f0 : c987             [ 2] 	cmp #DFRT_ENDDEF
e3f2 : f041             [ 4] 	beq df_rt_exec_end
e3f4 : c988             [ 2] 	cmp #DFRT_RETURN
e3f6 : f03d             [ 4] 	beq df_rt_exec_end
                             
                             	; check for break, asynch get
e3f8 : c65b             [ 5] 	dec df_checkkey
e3fa : d012             [ 4] 	bne df_rt_exec_no_key
e3fc : a55c             [ 3] 	lda df_checkmsk
e3fe : 855b             [ 3] 	sta df_checkkey
e400 : 18               [ 2] 	clc
e401 : 200fc4           [ 6] 	jsr io_get_ch
e404 : b008             [ 3] 	bcs df_rt_exec_no_key
e406 : c903             [ 2] 	cmp #UTF_ETX					; CTRL-C?
e408 : f02d             [ 3] 	beq df_rt_exec_ctrl_c
e40a : c91a             [ 2] 	cmp #UTF_BRK					; CTRK-Z?
e40c : f02d             [ 3] 	beq df_rt_exec_ctrl_z
e40e :                       df_rt_exec_no_key
                             	; check if normal flow of control
e40e : a58a             [ 3] 	lda df_nextlin+1
e410 : d02b             [ 3] 	bne df_rt_exec_jump
                             	; try and execute another statement
AS65 Assembler for R6502 [1.42].                                     Page  190
-------------------------------- bank\bank0.s --------------------------------

e412 : a47f             [ 3] 	ldy df_nxtstidx
e414 : 8488             [ 3] 	sty df_exeoff
e416 : d0be             [ 4] 	bne df_rt_exec_stat
                             
                             	; reached end of line, move to next
e418 : a200             [ 2] 	ldx #0
e41a : 18               [ 2] 	clc
e41b : a186             [ 6] 	lda (df_currlin,x)
e41d : 6586             [ 3] 	adc df_currlin
e41f : 8586             [ 3] 	sta df_currlin
e421 : a587             [ 3] 	lda df_currlin+1
e423 : 6900             [ 2] 	adc #0
e425 : 8587             [ 3] 	sta df_currlin+1
                             
                             	; start from first statement in new line
e427 : a003             [ 2] 	ldy #3
e429 : 8488             [ 3] 	sty df_exeoff
                             
                             	; check if this line has any content (length >0)
e42b : a186             [ 6] 	lda (df_currlin,x)
e42d : 857e             [ 3] 	sta df_eolidx
                             	; no more lines (len = 0), program done
e42f : d0a5             [ 4] 	bne df_rt_exec_stat
                             	; else done
                             	; normally wouldn't get here except immediate mo
                             	; if line number <> 0 then error
e431 : a55e             [ 3] 	lda df_immed
e433 : f004             [ 3] 	beq df_rt_unexpected_end
e435 :                       df_rt_exec_end
e435 : 18               [ 2] 	clc
e436 : 60               [ 6] 	rts
e437 :                       df_rt_exec_ctrl_c
                             	SWBRK DFERR_BREAK
                             
e439 :                       df_rt_unexpected_end
                             	SWBRK DFERR_IMMEDIATE
                             
e43b :                       df_rt_exec_ctrl_z
                             	; Force a break with zero error number
                             	; this will drop in to the monitor
e43b : 0000                  	db 0,0
                             
                             	; if hi byte of nextline is not zero then
                             	; current line = next line
e43d :                       df_rt_exec_jump
                             	; initialise statement pointer from nextlin,toks
e43d : a689             [ 3] 	ldx df_nextlin
e43f : a58a             [ 3] 	lda df_nextlin+1
e441 : a47f             [ 3] 	ldy df_nxtstidx
e443 : 4cdce3           [ 3] 	jmp df_rt_exec_init_ptr
                             
                             
                             ;****************************************
                             ;* Run statement in A
                             ;****************************************
e446 :                       df_rt_run_token
                             	; mask off MSB
                             ;	and #0x7f
                             	; multiply by 2
e446 : 0a               [ 2] 	asl a
e447 : aa               [ 2] 	tax
e448 : bd33e5           [ 4] 	lda df_rt_tokenjmp,x
AS65 Assembler for R6502 [1.42].                                     Page  191
-------------------------------- bank\bank0.s --------------------------------

e44b : 85a1             [ 3] 	sta df_tmpptra
e44d : bd34e5           [ 4] 	lda df_rt_tokenjmp+1,x
e450 : 85a2             [ 3] 	sta df_tmpptra+1
                             	; execution code finishes with rts
e452 : 6ca100           [ 6] 	jmp (df_tmpptra)
                             
                             
                             ;****************************************
                             ;* X,A : Line Address, Y = Index
                             ;* C=0 Found next statement
                             ;* C=1 No statement found
                             ;****************************************
e455 :                       df_rt_nextstat
                             	; save pointer
e455 : 8690             [ 3] 	stx df_lineptr
e457 : 8591             [ 3] 	sta df_lineptr+1
                             	; if end of program then err
e459 : a200             [ 2] 	ldx #0
e45b : a190             [ 6] 	lda (df_lineptr,x)
e45d : f01c             [ 3] 	beq df_rt_nextstat_err
                             	; if next statement idx 0
e45f : b190             [ 5] 	lda (df_lineptr),y
                             	; then go to next line
e461 : f007             [ 3] 	beq df_rt_nextstat_ln
                             	; else make this Y
e463 : a8               [ 2] 	tay
                             	; X = line low
e464 : a690             [ 3] 	ldx df_lineptr
                             	; A = line high
e466 : a591             [ 3] 	lda df_lineptr+1
e468 : 18               [ 2] 	clc
e469 : 60               [ 6] 	rts
e46a :                       df_rt_nextstat_ln
                             	; for next line, add line length to ptr
e46a : 18               [ 2] 	clc
e46b : a190             [ 6] 	lda (df_lineptr,x)
e46d : 6590             [ 3] 	adc df_lineptr
e46f : 8590             [ 3] 	sta df_lineptr
e471 : a591             [ 3] 	lda df_lineptr+1
e473 : 6900             [ 2] 	adc #0
e475 : 8591             [ 3] 	sta df_lineptr+1
                             	; if end of program set C
e477 : a190             [ 6] 	lda (df_lineptr,x)
e479 : d004             [ 3] 	bne df_rt_nextstat_dn
e47b :                       df_rt_nextstat_err
e47b : a000             [ 2] 	ldy #0
e47d : 38               [ 2] 	sec
e47e : 60               [ 6] 	rts
e47f :                       df_rt_nextstat_dn
e47f : a690             [ 3] 	ldx df_lineptr
e481 : a591             [ 3] 	lda df_lineptr+1
                             	; always skip line number and length for start o
e483 : a003             [ 2] 	ldy #3
e485 : 18               [ 2] 	clc
e486 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Push current line and statement to runtime sta
                             ;****************************************
e487 :                       df_rt_push_stat
e487 : a580             [ 3] 	lda df_curstidx
e489 : 209bf6           [ 6] 	jsr df_rst_pushByte
AS65 Assembler for R6502 [1.42].                                     Page  192
-------------------------------- bank\bank0.s --------------------------------

e48c : a587             [ 3] 	lda df_currlin+1
e48e : a686             [ 3] 	ldx df_currlin
e490 : 4cb3f6           [ 3] 	jmp df_rst_pushWord
                             ;	clc
                             ;	rts
                             
                             ;****************************************
                             ;* Pop line and statement from runtime stack
                             ;* And transfer control to next statement
                             ;****************************************
e493 :                       df_rt_pop_stat
e493 : 20c1f6           [ 6] 	jsr df_rst_popWord
e496 : 8689             [ 3] 	stx	df_nextlin
e498 : 858a             [ 3] 	sta df_nextlin+1
e49a : 20a4f6           [ 6] 	jsr df_rst_popByte
e49d : a8               [ 2] 	tay
e49e : a689             [ 3] 	ldx df_nextlin
e4a0 : a58a             [ 3] 	lda df_nextlin+1
e4a2 : 2055e4           [ 6] 	jsr df_rt_nextstat
e4a5 : 8689             [ 3] 	stx df_nextlin
e4a7 : 858a             [ 3] 	sta df_nextlin+1
e4a9 : 847f             [ 3] 	sty df_nxtstidx
                             ;	clc
e4ab : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Find proc definition in procptr
                             ;* Only call if proc not found before
                             ;****************************************
e4ac :                       df_rt_findproc
                             	; start at program beginning
                             	_cpyZPWord df_prgstrt,df_lineptr
                             
e4b4 : a003             [ 2] 	ldy #3
e4b6 : 8492             [ 3] 	sty df_lineidx
e4b8 : a200             [ 2] 	ldx #0
e4ba : a190             [ 6] 	lda (df_lineptr,x)
e4bc : f034             [ 3] 	beq df_rt_findproc_err
e4be :                       df_rt_findproc_cmd
e4be : c8               [ 2] 	iny
e4bf : b190             [ 5] 	lda (df_lineptr),y
e4c1 : 10fb             [ 3] 	bpl df_rt_findproc_cmd
e4c3 : c986             [ 2] 	cmp #DFRT_DEF
e4c5 : d017             [ 3] 	bne df_rt_findproc_nextstat
                             	; skip def token
e4c7 : c8               [ 2] 	iny
                             	; skip proc escape token
e4c8 : c8               [ 2] 	iny
                             	; now check the proc address against procptr
e4c9 : b190             [ 5] 	lda (df_lineptr),y
e4cb : c58e             [ 3] 	cmp df_procptr
e4cd : d00f             [ 3] 	bne df_rt_findproc_nextstat
e4cf : c8               [ 2] 	iny
e4d0 : b190             [ 5] 	lda (df_lineptr),y
e4d2 : c58f             [ 3] 	cmp df_procptr+1
e4d4 : d008             [ 3] 	bne df_rt_findproc_nextstat
                             
                             	; found it, return AXY with line details
e4d6 : a690             [ 3] 	ldx df_lineptr
e4d8 : a591             [ 3] 	lda df_lineptr+1
e4da : a492             [ 3] 	ldy df_lineidx
e4dc : 18               [ 2] 	clc
AS65 Assembler for R6502 [1.42].                                     Page  193
-------------------------------- bank\bank0.s --------------------------------

e4dd : 60               [ 6] 	rts
e4de :                       df_rt_findproc_nextstat
                             	; restore AXY line details and find next stateme
e4de : a690             [ 3] 	ldx df_lineptr
e4e0 : a591             [ 3] 	lda df_lineptr+1
e4e2 : a492             [ 3] 	ldy df_lineidx
e4e4 : 2055e4           [ 6] 	jsr df_rt_nextstat
e4e7 : b009             [ 3] 	bcs df_rt_findproc_err
e4e9 : 8690             [ 3] 	stx df_lineptr
e4eb : 8591             [ 3] 	sta df_lineptr+1
e4ed : 8492             [ 3] 	sty df_lineidx
e4ef : 4cbee4           [ 3] 	jmp df_rt_findproc_cmd
                             	; error
e4f2 :                       df_rt_findproc_err
                             	SWBRK DFERR_NOPROC
                             
                             
                             ;****************************************
                             ;* Find an escape value
                             ;* Does not check for end of line or statement
                             ;****************************************
e4f4 :                       df_rt_findescval
e4f4 : a488             [ 3] 	ldy df_exeoff
e4f6 : 88               [ 2] 	dey
e4f7 :                       df_rt_findescval_loop
e4f7 : c8               [ 2] 	iny
e4f8 : b186             [ 5] 	lda (df_currlin),y
e4fa : c920             [ 2] 	cmp #DFTK_ESCVAL
e4fc : b0f9             [ 3] 	bcs df_rt_findescval_loop
e4fe : 8488             [ 3] 	sty df_exeoff
e500 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Skip white space
                             ;* Does not check for end of line or statement
                             ;* A contains non-ws char, df_exeoff updated
                             ;****************************************
e501 :                       df_rt_skip_ws
e501 : a488             [ 3] 	ldy df_exeoff
e503 : 88               [ 2] 	dey
e504 :                       df_rt_skip_ws_loop
e504 : c8               [ 2] 	iny
e505 : b186             [ 5] 	lda (df_currlin),y
e507 : c920             [ 2] 	cmp #' '
e509 : f0f9             [ 3] 	beq df_rt_skip_ws_loop
e50b : 8488             [ 3] 	sty df_exeoff
e50d : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Get an lvar
                             ;* Assumes next token will be escape DFTK_VAR
                             ;* tmpptra contains vvt slot address
                             ;* X,A is the lvar pointer
                             ;****************************************
e50e :                       df_rt_getlvar
e50e : 20f4e4           [ 6] 	jsr df_rt_findescval
                             	; move past the escape value
e511 : c8               [ 2] 	iny
                             
                             	; get variable address
e512 : b186             [ 5] 	lda (df_currlin),y
e514 : 85a1             [ 3] 	sta df_tmpptra
AS65 Assembler for R6502 [1.42].                                     Page  194
-------------------------------- bank\bank0.s --------------------------------

e516 : c8               [ 2] 	iny
e517 : b186             [ 5] 	lda (df_currlin),y
e519 : 85a2             [ 3] 	sta df_tmpptra+1
                             
e51b : 8488             [ 3] 	sty df_exeoff
                             	; get the type
e51d : a000             [ 2] 	ldy #0
e51f : b1a1             [ 5] 	lda (df_tmpptra),y
                             	; set carry flag to return pointer (lvar)
e521 : 38               [ 2] 	sec
e522 : a488             [ 3] 	ldy df_exeoff
e524 : 202de2           [ 6] 	jsr df_rt_eval_var
e527 : 4c21f7           [ 3] 	jmp df_ost_popPtr
                             ;	rts
                             
                             ;****************************************
                             ;* Pop stat from rt stack and continue
                             ;* Y MUST BE ON THE CPU STACK AS IT GETS PLYed HE
                             ;****************************************
e52a :                       df_rt_pop_stat_go
e52a : 2093e4           [ 6] 	jsr df_rt_pop_stat
                             	; restore stack pointer so we don't lose this en
e52d : 68               [ 4] 	pla
e52e : a8               [ 2] 	tay
e52f : 8476             [ 3] 	sty df_rtstop
e531 : 18               [ 2] 	clc
e532 : 60               [ 6] 	rts
                             
                             	include "dflat/rtjmptab.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  RTJUMPTAB.S
                             ;*  Runtime token jump table.
                             ;*  dflat uses four key tables to tokenise and ru
                             ;*  - df_tokensyms    - table of token symbols
                             ;*  - df_tk_tokentype - table of token types
                             ;*  - df_tk_tokenjmp  - table of tokenising routi
                             ;*  - df_rt_tokenjmp  - table of runtime token an
                             ;*  The key is the token symbols.  When a line is
                             ;*  in to the raw (untokenised) buffer, df_tokens
                             ;*  used to identify tokens.  The position of the
                             ;*  token is used to then look up type and jump v
                             ;*  in the other tables.
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code  
                             
                             ; Tokeniser jump table
                             ; In token order of df_tokensyms
e533 :                       df_rt_tokenjmp
e533 : 3fed                  	dw	df_rt_assign
e535 : 30f5                  	dw	df_rt_proc
e537 : 50ed                  	dw	df_rt_comment
e539 : f7ec                  	dw	df_rt_println
AS65 Assembler for R6502 [1.42].                                     Page  195
-------------------------------- bank\bank0.s --------------------------------

e53b : b0ec                  	dw	df_rt_printat
e53d : baec                  	dw	df_rt_print
e53f : d2f5                  	dw	df_rt_def			; 0x86
e541 : 54f6                  	dw	df_rt_enddef		; 0x87
e543 : 59f6                  	dw	df_rt_return		; 0x88
e545 : f2f4                  	dw	df_rt_abort			; 0x89
e547 : feea                  	dw	df_rt_local
e549 : 2eeb                  	dw	df_rt_dim
e54b : c2e9                  	dw	df_rt_repeat		; 0x8c
e54d : cae9                  	dw	df_rt_until
e54f : 25e9                  	dw	df_rt_for			; 0x8e
e551 : 63e9                  	dw	df_rt_next			; 0x8f
e553 : fce7                  	dw	df_rt_while			; 0x90
e555 : 5fe8                  	dw	df_rt_wend			; 0x81
e557 : e2e8                  	dw	df_rt_if			; 0x92
e559 : d0e8                  	dw	df_rt_else			; 0x93
e55b : cbe8                  	dw	df_rt_endif			; 0x94
e55d : d0e8                  	dw	df_rt_elseif		; 0x95
e55f : 50ed                  	dw	df_rt_data			; 0x96
e561 : 1bfa                  	dw	df_rt_asm_assemble	; 0x97 df_rt_asm_assemble
e563 : 51ed                  	dw	df_rt_run
e565 : 51ee                  	dw	df_rt_list
e567 : c2ea                  	dw	df_rt_input
e569 : 40ec                  	dw	df_rt_text
e56b : baeb                  	dw	df_rt_plot
e56d : 2eec                  	dw	df_rt_cursor
e56f : b7eb                  	dw	df_rt_cls
e571 : bef0                  	dw	df_rt_poke
e573 : aff0                  	dw	df_rt_doke
e575 : f1f0                  	dw	df_rt_sound
e577 : 04f1                  	dw	df_rt_music
e579 : 19f1                  	dw	df_rt_play
e57b : 11f2                  	dw	df_rt_save
e57d : 63f2                  	dw	df_rt_load
e57f : a6ea                  	dw	df_rt_read
e581 : f9e7                  	dw	df_rt_new
e583 : 66ed                  	dw	df_rt_renum
e585 : 97ec                  	dw	df_rt_wait
e587 : c9f2                  	dw	df_rt_reset
e589 : 43ec                  	dw	df_rt_hires
e58b : 5cec                  	dw	df_rt_point
e58d : 86ec                  	dw	df_rt_line
e58f : 78ec                  	dw	df_rt_lineto
e591 : 46ec                  	dw	df_rt_pixmode
e593 : 4cec                  	dw	df_rt_ink
e595 : 52ec                  	dw	df_rt_paper
e597 : 66ec                  	dw	df_rt_circle
                             ;	dw	df_rt_fill
e599 : 34ec                  	dw	df_rt_himem
e59b : f6e7                  	dw	df_rt_monitor
e59d : f4f4                  	dw	df_rt_sprchar
e59f : fef4                  	dw	df_rt_sprpos
e5a1 : 0af5                  	dw	df_rt_sprupd
e5a3 : 13f5                  	dw	df_rt_sprinit
e5a5 : 16f5                  	dw	df_rt_sprmulti
e5a7 : f0f1                  	dw	df_rt_bsave
e5a9 : bdf1                  	dw	df_rt_bload
e5ab : 69f1                  	dw	df_rt_tsave
e5ad : 83f1                  	dw	df_rt_tload
                             
e5af : e1f2                  	dw	df_rt_peek
e5b1 : def2                  	dw	df_rt_deek
AS65 Assembler for R6502 [1.42].                                     Page  196
-------------------------------- bank\bank0.s --------------------------------

e5b3 : 6af3                  	dw	df_rt_stick
e5b5 : 70f3                  	dw	df_rt_get
e5b7 : 30f4                  	dw	df_rt_chr
e5b9 : 75f4                  	dw	df_rt_left
e5bb : 86f4                  	dw	df_rt_right
e5bd : a1f4                  	dw	df_rt_mid
e5bf : bff4                  	dw	df_rt_len
e5c1 : 1cf3                  	dw	df_rt_mem
e5c3 : 84f3                  	dw	df_rt_scrn
e5c5 : faf2                  	dw	df_rt_rnd
e5c7 : 9ef3                  	dw	df_rt_elapsed
e5c9 : b9f3                  	dw	df_rt_call
e5cb : 44f4                  	dw	df_rt_hex
e5cd : cbf4                  	dw	df_rt_asc
e5cf : dcf4                  	dw	df_rt_val
e5d1 : 91f3                  	dw	df_rt_pixel
e5d3 : 1cf5                  	dw	df_rt_sprhit
e5d5 : cbf3                  	dw	df_rt_sgn
e5d7 : e8f3                  	dw	df_rt_addr
                             	
e5d9 : 4ce6                  	dw	df_rt_mult
e5db : 6de6                  	dw	df_rt_div
e5dd : 8ee6                  	dw	df_rt_mod
e5df : afe6                  	dw	df_rt_asl
e5e1 : c2e6                  	dw	df_rt_lsr
e5e3 : 26e6                  	dw	df_rt_add
e5e5 : 39e6                  	dw	df_rt_sub
                             	
e5e7 : d5e6                  	dw	df_rt_and
e5e9 : e4e6                  	dw	df_rt_or
e5eb : f3e6                  	dw	df_rt_eor
e5ed : 8ce7                  	dw	df_rt_comlte
e5ef : 95e7                  	dw	df_rt_comgte
e5f1 : 9ee7                  	dw	df_rt_comne
e5f3 : 71e7                  	dw	df_rt_comlt
e5f5 : 7ae7                  	dw	df_rt_comgt
e5f7 : 83e7                  	dw	df_rt_comeq
                             
                             
                             ; escape sequence handlers
                             ; to do the reverse of tokenising during the list
                             ; command which is also used to save to disk.
e5f9 :                       df_rt_escjmp
e5f9 : 26ef                  	dw df_rt_lst_chr
e5fb : 25ef                  	dw df_rt_lst_reserved
e5fd : 25ef                  	dw df_rt_lst_reserved
e5ff : 25ef                  	dw df_rt_lst_reserved
e601 : 25ef                  	dw df_rt_lst_reserved	
e603 : 25ef                  	dw df_rt_lst_reserved	; no such thing as bytdec
e605 : 43ef                  	dw df_rt_lst_bythex
e607 : 68ef                  	dw df_rt_lst_bytbin
e609 : 25ef                  	dw df_rt_lst_reserved	
e60b : 8def                  	dw df_rt_lst_intdec
e60d : 56ef                  	dw df_rt_lst_inthex
e60f : 71ef                  	dw df_rt_lst_intbin
e611 : 25ef                  	dw df_rt_lst_reserved
e613 : 25ef                  	dw df_rt_lst_reserved
e615 : 25ef                  	dw df_rt_lst_reserved
e617 : 25ef                  	dw df_rt_lst_reserved	
e619 : ecef                  	dw df_rt_lst_strlit
e61b : 98ef                  	dw df_rt_lst_var
e61d : 98ef                  	dw df_rt_lst_proc
AS65 Assembler for R6502 [1.42].                                     Page  197
-------------------------------- bank\bank0.s --------------------------------

                             
                             	include "dflat/rtsubs.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  RTSUBS.S
                             ;*  Module that implements the runtime execution 
                             ;*  keywords and functions.
                             ;*  So this is where most of the action is for ru
                             ;*  a line is being executed, the dflat runtime c
                             ;*  jumps through the runtime table to routines h
                             ;*  Every dflat statement begins with a token (ig
                             ;*  whitespace), even the implicit assignment and
                             ;*  invocation.
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code
                             
e61f :                       mod_sz_rtsubs_s
                             
                             	include "dflat/numop.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  NUMOP.S
                             ;*	Dflat number AND string operators.
                             ;*  Uses the operator stack to get parameters, le
                             ;*  result on the operator stack.
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code  
                             
                             ; common pushint code
e61f :                       df_rt_putintres
e61f : a6a1             [ 3] 	ldx df_tmpptra
e621 : a5a2             [ 3] 	lda df_tmpptra+1
e623 : 4ce5f6           [ 3] 	jmp df_ost_pushInt
                             
                             ; add two numbers
e626 :                       df_rt_add
e626 : 203ae3           [ 6] 	jsr df_rt_get2Ints
                             	_addZPWord df_tmpptra,df_tmpptrb
                             
e636 : 4c1fe6           [ 3] 	jmp df_rt_putintres
                             	
                             ; subtract
e639 :                       df_rt_sub
e639 : 203ae3           [ 6] 	jsr df_rt_get2Ints
AS65 Assembler for R6502 [1.42].                                     Page  198
-------------------------------- bank\bank0.s --------------------------------

                             	_subZPWord df_tmpptra,df_tmpptrb
                             
e649 : 4c1fe6           [ 3] 	jmp df_rt_putintres
                             
                             ; multiply
e64c :                       df_rt_mult
e64c : 203ae3           [ 6] 	jsr df_rt_get2Ints
                             	_cpyZPWord df_tmpptra,num_a
                             
                             	_cpyZPWord df_tmpptrb,num_b
                             
e65f : 205dd4           [ 6] 	jsr int_mult
                             	_cpyZPWord num_a,df_tmpptra
                             
e66a : 4c1fe6           [ 3] 	jmp df_rt_putintres
                             
                             ; divide
e66d :                       df_rt_div
e66d : 203ae3           [ 6] 	jsr df_rt_get2Ints
                             	_cpyZPWord df_tmpptra,num_a
                             
                             	_cpyZPWord df_tmpptrb,num_b
                             
e680 : 2088d4           [ 6] 	jsr int_div
                             	_cpyZPWord num_a,df_tmpptra
                             
e68b : 4c1fe6           [ 3] 	jmp df_rt_putintres
                             
                             ; mod
e68e :                       df_rt_mod
e68e : 203ae3           [ 6] 	jsr df_rt_get2Ints
                             	_cpyZPWord df_tmpptra,num_a
                             
                             	_cpyZPWord df_tmpptrb,num_b
                             
e6a1 : 2088d4           [ 6] 	jsr int_div
                             	_cpyZPWord num_x,df_tmpptra
                             
e6ac : 4c1fe6           [ 3] 	jmp df_rt_putintres
                             
                             ; shift left
e6af :                       df_rt_asl
e6af : 203ae3           [ 6] 	jsr df_rt_get2Ints
                             	; use low byte only for # of shifts
e6b2 : a6a3             [ 3] 	ldx df_tmpptrb
e6b4 : e8               [ 2] 	inx
e6b5 :                       df_rt_aslbit
e6b5 : ca               [ 2] 	dex
e6b6 : f007             [ 3] 	beq df_rt_asldone
e6b8 : 06a1             [ 5] 	asl df_tmpptra
e6ba : 26a2             [ 5] 	rol df_tmpptra+1
e6bc : 4cb5e6           [ 3] 	jmp df_rt_aslbit
e6bf :                       df_rt_asldone
e6bf : 4c1fe6           [ 3] 	jmp df_rt_putintres
                             
                             ; shift right
e6c2 :                       df_rt_lsr
e6c2 : 203ae3           [ 6] 	jsr df_rt_get2Ints
                             	; use low byte only for # of shifts
e6c5 : a6a3             [ 3] 	ldx df_tmpptrb
e6c7 : e8               [ 2] 	inx
e6c8 :                       df_rt_lsrbit
AS65 Assembler for R6502 [1.42].                                     Page  199
-------------------------------- bank\bank0.s --------------------------------

e6c8 : ca               [ 2] 	dex
e6c9 : f007             [ 3] 	beq df_rt_lsrdone
e6cb : 46a2             [ 5] 	lsr df_tmpptra+1
e6cd : 66a1             [ 5] 	ror df_tmpptra
e6cf : 4cc8e6           [ 3] 	jmp df_rt_lsrbit
e6d2 :                       df_rt_lsrdone
e6d2 : 4c1fe6           [ 3] 	jmp df_rt_putintres
                             
                             ; logical and
e6d5 :                       df_rt_and
e6d5 : 203ae3           [ 6] 	jsr df_rt_get2Ints
e6d8 : a5a1             [ 3] 	lda df_tmpptra
e6da : 25a3             [ 3] 	and df_tmpptrb
e6dc : aa               [ 2] 	tax
e6dd : a5a2             [ 3] 	lda df_tmpptra+1
e6df : 25a4             [ 3] 	and df_tmpptrb+1
e6e1 : 4ce5f6           [ 3] 	jmp df_ost_pushInt
                             	
                             ; logical or
e6e4 :                       df_rt_or
e6e4 : 203ae3           [ 6] 	jsr df_rt_get2Ints
e6e7 : a5a1             [ 3] 	lda df_tmpptra
e6e9 : 05a3             [ 3] 	ora df_tmpptrb
e6eb : aa               [ 2] 	tax
e6ec : a5a2             [ 3] 	lda df_tmpptra+1
e6ee : 05a4             [ 3] 	ora df_tmpptrb+1
e6f0 : 4ce5f6           [ 3] 	jmp df_ost_pushInt
                             
                             ; logical eor
e6f3 :                       df_rt_eor
e6f3 : 203ae3           [ 6] 	jsr df_rt_get2Ints
e6f6 : a5a1             [ 3] 	lda df_tmpptra
e6f8 : 45a3             [ 3] 	eor df_tmpptrb
e6fa : aa               [ 2] 	tax
e6fb : a5a2             [ 3] 	lda df_tmpptra+1
e6fd : 45a4             [ 3] 	eor df_tmpptrb+1
e6ff : 4ce5f6           [ 3] 	jmp df_ost_pushInt
                             
                             ; a==b common function
e702 :                       df_rt_aequb
e702 : a5a1             [ 3] 	lda df_tmpptra
e704 : c5a3             [ 3] 	cmp df_tmpptrb
e706 : d004             [ 3] 	bne df_rt_aequbFin
e708 : a5a2             [ 3] 	lda df_tmpptra+1
e70a : c5a4             [ 3] 	cmp df_tmpptrb+1
e70c :                       df_rt_aequbFin
e70c : 60               [ 6] 	rts
                             
                             ; a-b common function
e70d :                       df_rt_asubb
e70d : 38               [ 2] 	sec
e70e : a5a1             [ 3] 	lda df_tmpptra
e710 : e5a3             [ 3] 	sbc df_tmpptrb
e712 : a5a2             [ 3] 	lda df_tmpptra+1
e714 : e5a4             [ 3] 	sbc df_tmpptrb+1
e716 : 5002             [ 3] 	bvc df_rt_asubbFin
e718 : 4980             [ 2] 	eor #0x80
e71a :                       df_rt_asubbFin
e71a : 60               [ 6] 	rts
                             
                             ; b-a common function
e71b :                       df_rt_bsuba
AS65 Assembler for R6502 [1.42].                                     Page  200
-------------------------------- bank\bank0.s --------------------------------

e71b : 38               [ 2] 	sec
e71c : a5a3             [ 3] 	lda df_tmpptrb
e71e : e5a1             [ 3] 	sbc df_tmpptra
e720 : a5a4             [ 3] 	lda df_tmpptrb+1
e722 : e5a2             [ 3] 	sbc df_tmpptra+1
e724 : 5002             [ 3] 	bvc df_rt_bsubaFin
e726 : 4980             [ 2] 	eor #0x80
e728 :                       df_rt_bsubaFin
e728 : 60               [ 6] 	rts
                             
                             ; common routine push true
e729 :                       df_rt_true
e729 : a2ff             [ 2] 	ldx #0xff
e72b : 8a               [ 2] 	txa
e72c : 4ce5f6           [ 3] 	jmp df_ost_pushInt
                             
                             ; common routine push false
e72f :                       df_rt_false
e72f : a200             [ 2] 	ldx #0x00
e731 : 8a               [ 2] 	txa
e732 : 4ce5f6           [ 3] 	jmp df_ost_pushInt
                             
                             ; a < b == (a-b) < 0
e735 :                       df_rt_lt
e735 : 203ae3           [ 6] 	jsr df_rt_get2Ints
e738 : 200de7           [ 6] 	jsr df_rt_asubb
e73b : 30ec             [ 3] 	bmi df_rt_true
e73d : 10f0             [ 3] 	bpl df_rt_false
                             
                             ; a <=b == !(b-a > 0)
e73f :                       df_rt_lte
e73f : 203ae3           [ 6] 	jsr df_rt_get2Ints
e742 :                       df_rt_lte_calc
e742 : 201be7           [ 6] 	jsr df_rt_bsuba
e745 : 30e8             [ 3] 	bmi df_rt_false
e747 : 10e0             [ 3] 	bpl df_rt_true
                             
                             ; a > b == (b-a) < 0
e749 :                       df_rt_gt
e749 : 203ae3           [ 6] 	jsr df_rt_get2Ints
e74c : 201be7           [ 6] 	jsr df_rt_bsuba
e74f : 30d8             [ 3] 	bmi df_rt_true
e751 : 10dc             [ 3] 	bpl df_rt_false
                             
                             ; a >= b == (a-b >=0)
e753 :                       df_rt_gte
e753 : 203ae3           [ 6] 	jsr df_rt_get2Ints
e756 :                       df_rt_gte_calc
e756 : 200de7           [ 6] 	jsr df_rt_asubb
e759 : 10ce             [ 3] 	bpl df_rt_true
e75b : 30d2             [ 3] 	bmi df_rt_false
                             
                             ; a == b
e75d :                       df_rt_eq
e75d : 203ae3           [ 6] 	jsr df_rt_get2Ints
e760 : 2002e7           [ 6] 	jsr df_rt_aequb
e763 : d0ca             [ 3] 	bne df_rt_false
e765 : f0c2             [ 3] 	beq df_rt_true
                             
                             ; a <> b
e767 :                       df_rt_ne
e767 : 203ae3           [ 6] 	jsr df_rt_get2Ints
AS65 Assembler for R6502 [1.42].                                     Page  201
-------------------------------- bank\bank0.s --------------------------------

e76a : 2002e7           [ 6] 	jsr df_rt_aequb
e76d : f0c0             [ 3] 	beq df_rt_false
e76f : d0b8             [ 3] 	bne df_rt_true
                             
                             ; Common usage of boolean operators for num and s
                             
e771 :                       df_rt_comlt
                             	; First find the data type on the stack
e771 : 2013f7           [ 6] 	jsr df_ost_peekType
e774 : 2980             [ 2] 	and #DFST_STR
e776 : d04a             [ 3] 	bne df_rt_slt
                             	; If not string then assume number
e778 : f0bb             [ 3] 	beq df_rt_lt
                             
e77a :                       df_rt_comgt
                             	; First find the data type on the stack
e77a : 2013f7           [ 6] 	jsr df_ost_peekType
e77d : 2980             [ 2] 	and #DFST_STR
e77f : d048             [ 3] 	bne df_rt_sgt
                             	; If not string then assume number
e781 : f0c6             [ 3] 	beq df_rt_gt
                             
e783 :                       df_rt_comeq
                             	; First find the data type on the stack
e783 : 2013f7           [ 6] 	jsr df_ost_peekType
e786 : 2980             [ 2] 	and #DFST_STR
e788 : d048             [ 3] 	bne df_rt_seq
                             	; If not string then assume number
e78a : f0d1             [ 3] 	beq df_rt_eq
                             
e78c :                       df_rt_comlte
                             	; First find the data type on the stack
e78c : 2013f7           [ 6] 	jsr df_ost_peekType
e78f : 2980             [ 2] 	and #DFST_STR
e791 : d014             [ 3] 	bne df_rt_slte
                             	; If not string then assume number
e793 : f0aa             [ 3] 	beq df_rt_lte
                             	
e795 :                       df_rt_comgte
                             	; First find the data type on the stack
e795 : 2013f7           [ 6] 	jsr df_ost_peekType
e798 : 2980             [ 2] 	and #DFST_STR
e79a : d018             [ 3] 	bne df_rt_sgte
                             	; If not string then assume number
e79c : f0b5             [ 3] 	beq df_rt_gte
                             
e79e :                       df_rt_comne
                             	; First find the data type on the stack
e79e : 2013f7           [ 6] 	jsr df_ost_peekType
e7a1 : 2980             [ 2] 	and #DFST_STR
e7a3 : d016             [ 3] 	bne df_rt_sne
                             	; If not string then assume number
e7a5 : f0c0             [ 3] 	beq df_rt_ne
                             
                             
                             ;********** STRING OPS **********
                             
                             ; string less than or equal
e7a7 :                       df_rt_slte
e7a7 : 20d9e7           [ 6] 	jsr df_rt_str_comp
e7aa : 3005             [ 3] 	bmi df_rt_str_comp_true
e7ac : f003             [ 3] 	beq df_rt_str_comp_true
AS65 Assembler for R6502 [1.42].                                     Page  202
-------------------------------- bank\bank0.s --------------------------------

e7ae :                       df_rt_str_comp_false
e7ae : 4c2fe7           [ 3] 	jmp df_rt_false
e7b1 :                       df_rt_str_comp_true
e7b1 : 4c29e7           [ 3] 	jmp df_rt_true	
                             
                             ; string greater then or equal	
e7b4 :                       df_rt_sgte
e7b4 : 20d9e7           [ 6] 	jsr df_rt_str_comp
e7b7 : 10f8             [ 3] 	bpl df_rt_str_comp_true
e7b9 : 30f3             [ 3] 	bmi df_rt_str_comp_false
                             
                             ; string not equal
e7bb :                       df_rt_sne
e7bb : 20d9e7           [ 6] 	jsr df_rt_str_comp
e7be : d0f1             [ 3] 	bne df_rt_str_comp_true
e7c0 : f0ec             [ 3] 	beq df_rt_str_comp_false
                             
                             ; string less than
e7c2 :                       df_rt_slt
e7c2 : 20d9e7           [ 6] 	jsr df_rt_str_comp
e7c5 : 30ea             [ 3] 	bmi df_rt_str_comp_true
e7c7 : 10e5             [ 3] 	bpl df_rt_str_comp_false
                             
                             ; string greater than
e7c9 :                       df_rt_sgt
e7c9 : 20d9e7           [ 6] 	jsr df_rt_str_comp
e7cc : 30e0             [ 3] 	bmi df_rt_str_comp_false
e7ce : f0de             [ 3] 	beq df_rt_str_comp_false
e7d0 : d0df             [ 3] 	bne df_rt_str_comp_true
                             
                             ; string equal
e7d2 :                       df_rt_seq
e7d2 : 20d9e7           [ 6] 	jsr df_rt_str_comp
e7d5 : f0da             [ 3] 	beq df_rt_str_comp_true
e7d7 : d0d5             [ 3] 	bne df_rt_str_comp_false
                             
                             ; common string comparator
                             ; N=1 means <
                             ; Z=0 means >
                             ; Z=1 means ==
e7d9 :                       df_rt_str_comp
e7d9 : 2049e3           [ 6] 	jsr df_rt_get2Strs
e7dc : a000             [ 2] 	ldy #0
e7de :                       df_rt_str_comp_byte
e7de : b1a1             [ 5] 	lda (df_tmpptra),y
e7e0 : aa               [ 2] 	tax							; Save op1 char in X
e7e1 : d1a3             [ 5] 	cmp (df_tmpptrb),y
                             	; if c=0 then <
e7e3 : 9008             [ 3] 	bcc df_rt_str_comp_lt
                             	; if c=1 and nz then >
e7e5 : d009             [ 3] 	bne df_rt_str_comp_gt
                             	; if here then both strings still the same
e7e7 : 8a               [ 2] 	txa							; What was op1 char
                             	; if char is zero then end
e7e8 : f009             [ 3] 	beq df_rt_str_comp_eq
                             	; else do next char
e7ea : c8               [ 2] 	iny
e7eb : d0f1             [ 3] 	bne df_rt_str_comp_byte ; Always - relying on Y 
e7ed :                       df_rt_str_comp_lt
e7ed : a9ff             [ 2] 	lda #0xff
e7ef : 60               [ 6] 	rts
e7f0 :                       df_rt_str_comp_gt
AS65 Assembler for R6502 [1.42].                                     Page  203
-------------------------------- bank\bank0.s --------------------------------

e7f0 : a901             [ 2] 	lda #0x01
e7f2 : 60               [ 6] 	rts
e7f3 :                       df_rt_str_comp_eq
e7f3 : a900             [ 2] 	lda #0x00
e7f5 : 60               [ 6] 	rts
                             
                             
                             
                             
e7f6 :                       df_rt_monitor
e7f6 : 4c9fd2           [ 3] 	jmp command_line
                             
e7f9 :                       df_rt_new
e7f9 : 4c4bf7           [ 3] 	jmp df_clear
                             
e7fc :                       df_rt_while
                             	; push statement address
e7fc : 2087e4           [ 6] 	jsr df_rt_push_stat
                             	; DFRT_WHILE token
e7ff : a990             [ 2] 	lda #DFRT_WHILE
e801 : 209bf6           [ 6] 	jsr df_rst_pushByte
                             
                             	; get value in A,X
e804 : 2076e0           [ 6] 	jsr df_rt_getnval
                             
                             	; if value<>0 then continue
e807 : e000             [ 2] 	cpx #0
e809 : f001             [ 3] 	beq df_rt_while_done
e80b : 60               [ 6] 	rts
e80c :                       df_rt_while_done
                             	; pop while data off stack as not needed
e80c : 20c1f6           [ 6] 	jsr df_rst_popWord
e80f : 20c1f6           [ 6] 	jsr df_rst_popWord
                             	; while evaluated false so find wend
                             	; but check for any nested while/wends
                             	; nest = 1 to start
e812 : a593             [ 3] 	lda df_ifnest
e814 : 48               [ 3] 	pha
e815 : a901             [ 2] 	lda #1
e817 : 8593             [ 3] 	sta df_ifnest
                             	; find the matching else/elseif/endif
                             	; start from current statement
                             	_cpyZPWord df_currlin,df_nextlin
                             
e821 :                       df_rt_findwend
e821 : a689             [ 3] 	ldx df_nextlin
e823 : a58a             [ 3] 	lda df_nextlin+1
e825 : a480             [ 3] 	ldy df_curstidx
e827 : 2055e4           [ 6] 	jsr df_rt_nextstat
                             	; got to end of program, then a problem
e82a : b031             [ 3] 	bcs df_rt_wend_end
e82c : 8689             [ 3] 	stx df_nextlin
e82e : 858a             [ 3] 	sta df_nextlin+1
e830 : 8480             [ 3] 	sty df_curstidx
                             	; find the command token
e832 :                       df_rt_while_cmd
e832 : c8               [ 2] 	iny
e833 : b189             [ 5] 	lda (df_nextlin),y
e835 : 10fb             [ 3] 	bpl df_rt_while_cmd
                             	; check for wend
e837 : c991             [ 2] 	cmp #DFRT_WEND
e839 : d019             [ 3] 	bne df_rt_check_while
AS65 Assembler for R6502 [1.42].                                     Page  204
-------------------------------- bank\bank0.s --------------------------------

                             	; decrement nest
e83b : c693             [ 5] 	dec df_ifnest
                             	; if not zero then go find more commands
e83d : d0e2             [ 3] 	bne df_rt_findwend
                             	; else found it, restore if nest
                             	; and skip the wend statement
e83f : 68               [ 4] 	pla
e840 : 8593             [ 3] 	sta df_ifnest
e842 : a689             [ 3] 	ldx df_nextlin
e844 : a58a             [ 3] 	lda df_nextlin+1
e846 : a480             [ 3] 	ldy df_curstidx
e848 : 2055e4           [ 6] 	jsr df_rt_nextstat
                             	; got to end of program, then a problem
e84b : b010             [ 3] 	bcs df_rt_wend_end
                             	; need to update nxtstidx to transfer control
e84d : 8689             [ 3] 	stx df_nextlin
e84f : 858a             [ 3] 	sta df_nextlin+1
e851 : 847f             [ 3] 	sty df_nxtstidx
e853 : 60               [ 6] 	rts
e854 :                       df_rt_check_while
                             	; check for while
e854 : c990             [ 2] 	cmp #DFRT_WHILE
e856 : d0c9             [ 3] 	bne df_rt_findwend
                             	; if while found then increment nest
e858 : e693             [ 5] 	inc df_ifnest
e85a : 4c21e8           [ 3] 	jmp df_rt_findwend
e85d :                       df_rt_wend_end
                             	SWBRK DFERR_IMMEDIATE
                             
                             
e85f :                       df_rt_wend
e85f : 20a4f6           [ 6] 	jsr df_rst_popByte
e862 : c990             [ 2] 	cmp #DFRT_WHILE
e864 : d00d             [ 3] 	bne df_rt_wend_err
                             	; pop the stat and continue
e866 : 20c1f6           [ 6] 	jsr df_rst_popWord
e869 : 8689             [ 3] 	stx	df_nextlin
e86b : 858a             [ 3] 	sta df_nextlin+1
e86d : 20a4f6           [ 6] 	jsr df_rst_popByte
e870 : 857f             [ 3] 	sta df_nxtstidx
e872 : 60               [ 6] 	rts
e873 :                       df_rt_wend_err
                             	SWBRK DFERR_WEND
                             
                             
                             ;move to next statement during if/else matching
                             ;end of program is an error
e875 :                       df_rt_if_stat
e875 : a689             [ 3] 	ldx df_nextlin
e877 : a58a             [ 3] 	lda df_nextlin+1
e879 : a480             [ 3] 	ldy df_curstidx
e87b : 2055e4           [ 6] 	jsr df_rt_nextstat
                             	; got to end of program, then a problem
e87e : b009             [ 3] 	bcs df_rt_if_stat_err
e880 : 8689             [ 3] 	stx df_nextlin
e882 : 858a             [ 3] 	sta df_nextlin+1
e884 : 8480             [ 3] 	sty df_curstidx
e886 : 847f             [ 3] 	sty df_nxtstidx
e888 : 60               [ 6] 	rts
                             ; program ended with no match
e889 :                       df_rt_if_stat_err
                             	SWBRK DFERR_UNCLOSEDIF
AS65 Assembler for R6502 [1.42].                                     Page  205
-------------------------------- bank\bank0.s --------------------------------

                             
                             
                             ; find matching else/elseif/endif
                             ; C = 0 match else/elseif/endif
                             ; C = 1 match endif only
                             ; endif is always matched
                             ; ** MAKE SURE NEXTLIN IS POPULATED! **
e88b :                       df_rt_if_match
                             	; save the current if nest level
e88b : a593             [ 3] 	lda df_ifnest
e88d : 48               [ 3] 	pha
                             	; local if nest level is zero to start with
e88e : a900             [ 2] 	lda #0
e890 : 8593             [ 3] 	sta df_ifnest
                             	; save match pref
e892 : 08               [ 3] 	php
                             	; find the matching else/elseif/endif
                             	; start from df_nextlin, df_curstidx
e893 :                       df_rt_findelseendif
e893 : 2075e8           [ 6] 	jsr df_rt_if_stat
                             	; find command
e896 :                       df_rt_ifcmd
e896 : c8               [ 2] 	iny
e897 : b189             [ 5] 	lda (df_nextlin),y
e899 : 10fb             [ 3] 	bpl df_rt_ifcmd
                             	; check for endif
e89b : c994             [ 2] 	cmp #DFRT_ENDIF
e89d : f015             [ 3] 	beq df_rt_ifelse
                             
e89f : 28               [ 4] 	plp
e8a0 : 08               [ 3] 	php
                             
e8a1 : b008             [ 3] 	bcs df_rt_ifskipelseif
e8a3 : c993             [ 2] 	cmp #DFRT_ELSE
e8a5 : f00d             [ 3] 	beq df_rt_ifelse
e8a7 : c995             [ 2] 	cmp #DFRT_ELSEIF
e8a9 : f009             [ 3] 	beq df_rt_ifelse
e8ab :                       df_rt_ifskipelseif
                             	; another if token found - increment lcoal if ne
e8ab : c992             [ 2] 	cmp #DFRT_IF
e8ad : d002             [ 3] 	bne df_rt_skipnestif
e8af : e693             [ 5] 	inc df_ifnest
e8b1 :                       df_rt_skipnestif
                             	; no tokens of interest found, so next statement
e8b1 : 4c93e8           [ 3] 	jmp df_rt_findelseendif
                             
                             	; found else/elseif/endif
                             	; but check if this is nested
e8b4 :                       df_rt_ifelse
                             	; nest counter zero then found matching else/els
e8b4 : a693             [ 3] 	ldx df_ifnest
e8b6 : f009             [ 3] 	beq df_rt_if_found
                             	; endif token found so decrement local nest
e8b8 : c994             [ 2] 	cmp #DFRT_ENDIF
e8ba : d002             [ 3] 	bne df_rt_skipnestendif
e8bc : c693             [ 5] 	dec df_ifnest
e8be :                       df_rt_skipnestendif
                             	; continue to search for else/endif
e8be : 4c93e8           [ 3] 	jmp df_rt_findelseendif
                             	; ok got a match
e8c1 :                       df_rt_if_found
                             	; remove pref
AS65 Assembler for R6502 [1.42].                                     Page  206
-------------------------------- bank\bank0.s --------------------------------

e8c1 : 28               [ 4] 	plp
                             	; restore global if nest
e8c2 : 8538             [ 3] 	sta tmp_d			; Using as a temp place!
e8c4 : 68               [ 4] 	pla					; Get nest from stack
e8c5 : aa               [ 2] 	tax					; And put in X
e8c6 : a538             [ 3] 	lda tmp_d			; Get a back from temp!
e8c8 : 8693             [ 3] 	stx df_ifnest		; Now restore the nest counter
                             
                             	;A contains the token found, Y is index in to df
                             ;	clc
e8ca : 60               [ 6] 	rts
                             
e8cb :                       df_rt_endif
                             	; decrement if next level
e8cb : c693             [ 5] 	dec df_ifnest
e8cd : 3011             [ 3] 	bmi df_rt_noif_err
e8cf :                       df_rt_if_done
e8cf : 60               [ 6] 	rts
                             
                             	; else and ifelse encountered in a normal sequen
                             	; only happens when the clause has been executed
                             	; so we only now need to find the endif
e8d0 :                       df_rt_elseif
e8d0 :                       df_rt_else
                             	; not in if mode then error
e8d0 : a593             [ 3] 	lda df_ifnest
e8d2 : f00c             [ 3] 	beq df_rt_noif_err
                             	; find endif only
                             	; starting from current line and curstidx
                             	_cpyZPWord df_currlin,df_nextlin
                             
e8dc : 38               [ 2] 	sec
e8dd : 4c8be8           [ 3] 	jmp df_rt_if_match
                             
                             ; endif/else/elseif encountered outside of an if
e8e0 :                       df_rt_noif_err
                             	SWBRK DFERR_NOIF
                             
                             
                             	; when if is encountered, the job of this routin
                             	; to determine which clause to execute, then tra
                             	; program control to that point.  in normal prog
                             	; sequence else/elseif statements will signify t
                             	; of an if construct.
e8e2 :                       df_rt_if
                             	; increment global if nest counter
e8e2 : e693             [ 5] 	inc df_ifnest
e8e4 :                       df_rt_ifeval
                             	; get value
e8e4 : 2076e0           [ 6] 	jsr df_rt_getnval
                             	; if value<>0 if is successful then continue nor
e8e7 : c900             [ 2] 	cmp #0
e8e9 : d0e4             [ 3] 	bne df_rt_if_done
e8eb : e000             [ 2] 	cpx #0
e8ed : d0e0             [ 3] 	bne df_rt_if_done
                             	; got here then if clause evaluated to false
                             	; match with else/elseif/endif
                             	; df_nextlin is used to find the clause to execu
                             	_cpyZPWord df_currlin,df_nextlin
                             
e8f7 : 18               [ 2] 	clc
e8f8 : 208be8           [ 6] 	jsr df_rt_if_match
AS65 Assembler for R6502 [1.42].                                     Page  207
-------------------------------- bank\bank0.s --------------------------------

                             	; A contains the token found, Y is index of this
                             
e8fb : c993             [ 2] 	cmp #DFRT_ELSE
                             	; else: df_nextlin and df_nxtstidx points to the
e8fd : f023             [ 4] 	beq df_rt_do_else
                             
e8ff : c994             [ 2] 	cmp #DFRT_ENDIF
                             	; else: df_nextlin and df_nxtstidx points to the
e901 : f0cc             [ 4] 	beq df_rt_if_done
                             
                             	; elif detected - increment past the token and e
                             	; make this the current line and token index
                             	_cpyZPWord df_nextlin,df_currlin
                             
                             	; move past the token and save position
e90b : c8               [ 2] 	iny
e90c : 98               [ 2] 	tya
e90d : 48               [ 3] 	pha
                             	; initialise statement pointer
e90e : a480             [ 3] 	ldy df_curstidx
e910 : a686             [ 3] 	ldx df_currlin
e912 : a587             [ 3] 	lda df_currlin+1
e914 : 20c1e3           [ 6] 	jsr df_rt_init_stat_ptr
                             	; restore Y (one byte past the token) and save i
e917 : 68               [ 4] 	pla
e918 : a8               [ 2] 	tay
e919 : 8488             [ 3] 	sty df_exeoff
                             	; don't force a jump as we've initalised all var
e91b : a900             [ 2] 	lda #0
e91d : 858a             [ 3] 	sta df_nextlin+1
                             	; now everyting is set up to evaluate the elif c
e91f : 4ce4e8           [ 3] 	jmp df_rt_ifeval
                             
e922 :                       df_rt_do_else
                             	; we need to point to the next statement not thi
e922 : 4c75e8           [ 3] 	jmp df_rt_if_stat
                             
e925 :                       df_rt_for
                             	; push statement address to rt stack
e925 : 2087e4           [ 6] 	jsr df_rt_push_stat
                             	; get lvar
e928 : 200ee5           [ 6] 	jsr df_rt_getlvar
                             	; Save lvar pointer, A is fine to trample
e92b : 48               [ 3] 	pha
e92c : 8a               [ 2] 	txa
e92d : 48               [ 3] 	pha
                             
                             	; find starting value
                             	; evaluate the starting value
                             	; can't use df_rt_getnval as need to use A,X fir
e92e : e688             [ 5] 	inc df_exeoff
e930 : 207ce0           [ 6] 	jsr df_rt_neval
                             	; get ready to update the counter using pointer
e933 : 68               [ 4] 	pla
e934 : aa               [ 2] 	tax
e935 : 86a1             [ 3] 	stx df_tmpptra
e937 : 68               [ 4] 	pla
e938 : 85a2             [ 3] 	sta df_tmpptra+1
                             	; But remember lvar pointer for later A is ok to
e93a : 48               [ 3] 	pha
e93b : 8a               [ 2] 	txa
e93c : 48               [ 3] 	pha
AS65 Assembler for R6502 [1.42].                                     Page  208
-------------------------------- bank\bank0.s --------------------------------

                             
                             	; get the starting value from op stack
e93d : 2019f7           [ 6] 	jsr df_ost_popInt
                             	; save it to counter slot
e940 : a001             [ 2] 	ldy #1
e942 : 91a1             [ 5] 	sta (df_tmpptra),y
e944 : 8a               [ 2] 	txa
e945 : 88               [ 2] 	dey
e946 : 91a1             [ 5] 	sta (df_tmpptra),y
                             
                             	; find end value
                             	; evaluate the end value
e948 : e688             [ 5] 	inc df_exeoff
e94a : 2076e0           [ 6] 	jsr df_rt_getnval
                             	; and put on rt stack
e94d : 20b3f6           [ 6] 	jsr df_rst_pushWord
                             
                             	; find step value
                             	; evaluate the end value
e950 : e688             [ 5] 	inc df_exeoff
e952 : 2076e0           [ 6] 	jsr df_rt_getnval
                             	; and push on rt stack
e955 : 20b3f6           [ 6] 	jsr df_rst_pushWord
                             	; save the counter lvar pointer
e958 : 68               [ 4] 	pla
e959 : aa               [ 2] 	tax
e95a : 68               [ 4] 	pla
e95b : 20b3f6           [ 6] 	jsr df_rst_pushWord
                             	; all done - counter set to start
                             	; stack contains counter slot, step val, end val
                             	; now push for token
e95e : a98e             [ 2] 	lda #DFRT_FOR
e960 : 4c9bf6           [ 3] 	jmp df_rst_pushByte
                             
e963 :                       df_rt_next
                             	; remember stack position
e963 : a476             [ 3] 	ldy df_rtstop
e965 : 98               [ 2] 	tya
e966 : 48               [ 3] 	pha
e967 : 20a4f6           [ 6] 	jsr df_rst_popByte
e96a : c98e             [ 2] 	cmp #DFRT_FOR
e96c : d052             [ 3] 	bne df_rt_next_err
                             	; get the slot address
e96e : 20c1f6           [ 6] 	jsr df_rst_popWord
                             	; save address to ptrd, contents to ptra
e971 : 86a7             [ 3] 	stx df_tmpptrd
e973 : 85a8             [ 3] 	sta df_tmpptrd+1
e975 : a000             [ 2] 	ldy #0
e977 : b1a7             [ 5] 	lda (df_tmpptrd),y
e979 : 85a1             [ 3] 	sta df_tmpptra
e97b : c8               [ 2] 	iny
e97c : b1a7             [ 5] 	lda (df_tmpptrd),y
e97e : 85a2             [ 3] 	sta df_tmpptra+1
                             
                             	; get step value, save in ptrb
e980 : 20c1f6           [ 6] 	jsr df_rst_popWord
e983 : 86a3             [ 3] 	stx df_tmpptrb
e985 : 85a4             [ 3] 	sta df_tmpptrb+1
e987 : 48               [ 3] 	pha					; Push A to check for -ve step
                             
                             	; add step to counter and save back to counter
                             	_addZPWord df_tmpptra,df_tmpptrb
AS65 Assembler for R6502 [1.42].                                     Page  209
-------------------------------- bank\bank0.s --------------------------------

                             
e995 : a5a1             [ 3] 	lda df_tmpptra
e997 : a000             [ 2] 	ldy #0
e999 : 91a7             [ 5] 	sta (df_tmpptrd),y
e99b : a5a2             [ 3] 	lda df_tmpptra+1
e99d : c8               [ 2] 	iny
e99e : 91a7             [ 5] 	sta (df_tmpptrd),y
                             
                             	; get end value, save in ptrb
e9a0 : 20c1f6           [ 6] 	jsr df_rst_popWord
e9a3 : 86a3             [ 3] 	stx df_tmpptrb
e9a5 : 85a4             [ 3] 	sta df_tmpptrb+1
e9a7 : 68               [ 4] 	pla					; check if if +ve or -ve step
e9a8 : 1006             [ 3] 	bpl df_rt_check_pos
                             	; call gte operation but no need to get ints
                             	; as already in ptra and ptrb
e9aa : 2056e7           [ 6] 	jsr df_rt_gte_calc
e9ad : 4cb3e9           [ 3] 	jmp df_rt_next_check
e9b0 :                       df_rt_check_pos
                             	; call lte operation but no need to get ints
                             	; as already in ptra and ptrb
e9b0 : 2042e7           [ 6] 	jsr df_rt_lte_calc
e9b3 :                       df_rt_next_check
                             	; check if true or false
e9b3 : 2019f7           [ 6] 	jsr df_ost_popInt
e9b6 : e000             [ 2] 	cpx #0
                             	; if false then next is done
e9b8 : f003             [ 3] 	beq df_next_done
                             	; else we continue
e9ba : 4c2ae5           [ 3] 	jmp df_rt_pop_stat_go
                             	; if done, then continue with next statement
e9bd :                       df_next_done
e9bd : 4cdfe9           [ 3] 	jmp df_rt_untilnext_done
                             
e9c0 :                       df_rt_next_err
                             	SWBRK DFERR_NEXTFOR
                             
                             
                             
e9c2 :                       df_rt_repeat
                             	; push statement address
e9c2 : 2087e4           [ 6] 	jsr df_rt_push_stat
                             	; DFRT_REPEAT token
e9c5 : a98c             [ 2] 	lda #DFRT_REPEAT
e9c7 : 4c9bf6           [ 3] 	jmp df_rst_pushByte
                             
e9ca :                       df_rt_until
                             	; remember stack position
e9ca : a476             [ 3] 	ldy df_rtstop
e9cc : 98               [ 2] 	tya
e9cd : 48               [ 3] 	pha
e9ce : 20a4f6           [ 6] 	jsr df_rst_popByte
e9d1 : c98c             [ 2] 	cmp #DFRT_REPEAT
e9d3 : d012             [ 3] 	bne df_rt_until_err
                             	; evaluate expression in to A,X
e9d5 : 2076e0           [ 6] 	jsr df_rt_getnval
                             	; if value<>0 then continue
e9d8 : e000             [ 2] 	cpx #0
e9da : d003             [ 3] 	bne df_rt_untilnext_done
                             
                             	; pop the stat and continue
e9dc : 4c2ae5           [ 3] 	jmp df_rt_pop_stat_go
AS65 Assembler for R6502 [1.42].                                     Page  210
-------------------------------- bank\bank0.s --------------------------------

                             
e9df :                       df_rt_untilnext_done
e9df : 68               [ 4] 	pla
e9e0 : a8               [ 2] 	tay
                             	; pop 2 items off stack (line address, index)
                             	; and continue
e9e1 : 20c1f6           [ 6] 	jsr df_rst_popWord
e9e4 : 4ca4f6           [ 3] 	jmp df_rst_popByte
                             
e9e7 :                       df_rt_until_err
                             	SWBRK DFERR_UNTIL
                             
                             
e9e9 :                       df_rt_sadd
e9e9 : 60               [ 6] 	rts
                             
e9ea :                       df_rt_print_num
e9ea : 2019f7           [ 6] 	jsr df_ost_popInt
e9ed : 18               [ 2] 	clc
e9ee : 4cbbc3           [ 3] 	jmp print_a_to_d
                             
e9f1 :                       df_rt_print_str
e9f1 : 201df7           [ 6] 	jsr df_ost_popStr
e9f4 : 86a1             [ 3] 	stx df_tmpptra
e9f6 : 85a2             [ 3] 	sta df_tmpptra+1
e9f8 : a000             [ 2] 	ldy #0
e9fa :                       df_rt_print_str_ch
e9fa : b1a1             [ 5] 	lda (df_tmpptra),y
e9fc : f006             [ 4] 	beq df_rt_print_str_done
e9fe : 2012c4           [ 6] 	jsr io_put_ch
ea01 : c8               [ 2] 	iny
ea02 : d0f6             [ 4] 	bne df_rt_print_str_ch		; Rely on y not wrapping
ea04 :                       df_rt_print_str_done
ea04 : 60               [ 6] 	rts
                             
                             ; * Find the position of the next data item to re
ea05 :                       df_rt_nextdatum
ea05 : a200             [ 2] 	ldx #0
                             	; load data line offset
ea07 : a496             [ 3] 	ldy df_datoff
                             	; if data pointer unitialised (because high byte
ea09 : a595             [ 3] 	lda df_currdat+1
ea0b : d030             [ 3] 	bne df_rt_skipinitdataptr
                             	; then start at program beginning
                             	_cpyZPWord df_prgstrt,df_currdat
                             
ea15 :                       df_rt_datlinstart
                             	; if end of program then error
ea15 : a194             [ 6] 	lda (df_currdat,x)
ea17 : f034             [ 3] 	beq df_rt_datumerr
                             	; index in to first line byte
ea19 : a003             [ 2] 	ldy #3
ea1b : 8496             [ 3] 	sty df_datoff
                             	; find first 'data' statement
ea1d :                       df_rt_datastatement
ea1d : c8               [ 2] 	iny
ea1e : 98               [ 2] 	tya
                             	; end of line reached?
ea1f : c194             [ 6] 	cmp (df_currdat,x)
                             	; if not find data token
ea21 : d010             [ 3] 	bne df_rt_getdatatk
ea23 :                       df_rt_datnextlin
AS65 Assembler for R6502 [1.42].                                     Page  211
-------------------------------- bank\bank0.s --------------------------------

                             	; if so then go to next line
ea23 : 18               [ 2] 	clc
ea24 : a594             [ 3] 	lda df_currdat
ea26 : 6194             [ 6] 	adc (df_currdat,x)
ea28 : 8594             [ 3] 	sta df_currdat
ea2a : a595             [ 3] 	lda df_currdat+1
ea2c : 6900             [ 2] 	adc #0
ea2e : 8595             [ 3] 	sta df_currdat+1
ea30 : 4c15ea           [ 3] 	jmp df_rt_datlinstart
ea33 :                       df_rt_getdatatk
ea33 : b194             [ 5] 	lda (df_currdat),y
ea35 : 10e6             [ 3] 	bpl df_rt_datastatement
                             	; found data statement?
ea37 : c996             [ 2] 	cmp #DFRT_DATA
                             	; if not then go to next line
ea39 : d0e8             [ 3] 	bne df_rt_datnextlin
ea3b : 8496             [ 3] 	sty df_datoff
ea3d :                       df_rt_skipinitdataptr
ea3d : 98               [ 2] 	tya
                             	; end of line reached?
ea3e : c194             [ 6] 	cmp (df_currdat,x)
                             	; if so go to next line
ea40 : f0e1             [ 3] 	beq df_rt_datnextlin
                             	; else see if escape value
ea42 : b194             [ 5] 	lda (df_currdat),y
ea44 : c920             [ 2] 	cmp #DFTK_ESCVAL
ea46 : c8               [ 2] 	iny
ea47 : b0f4             [ 3] 	bcs df_rt_skipinitdataptr
                             	; ok found an escape value
                             	; save position and return
ea49 : 88               [ 2] 	dey
ea4a : 8496             [ 3] 	sty df_datoff
ea4c : 60               [ 6] 	rts
ea4d :                       df_rt_datumerr
                             	SWBRK DFERR_NODATA
                             
                             
                             ; read a datum
ea4f :                       df_rt_readdatum
                             	; update data pointer to next data item
ea4f : 2005ea           [ 6] 	jsr df_rt_nextdatum
                             
                             	; now get lvar X,A from current statement
ea52 : 200ee5           [ 6] 	jsr df_rt_getlvar
                             	; save lvar in tmpb, vvt ptr in tmpa
ea55 : 86a3             [ 3] 	stx df_tmpptrb
ea57 : 85a4             [ 3] 	sta df_tmpptrb+1
                             
                             	; first save save current prgoram line and offse
ea59 : a586             [ 3] 	lda df_currlin
ea5b : 48               [ 3] 	pha
ea5c : a587             [ 3] 	lda df_currlin+1
ea5e : 48               [ 3] 	pha
ea5f : a588             [ 3] 	lda df_exeoff
ea61 : 48               [ 3] 	pha
ea62 : a57e             [ 3] 	lda df_eolidx
ea64 : 48               [ 3] 	pha
ea65 : a57f             [ 3] 	lda df_nxtstidx
ea67 : 48               [ 3] 	pha
ea68 : a580             [ 3] 	lda df_curstidx
ea6a : 48               [ 3] 	pha
                             
AS65 Assembler for R6502 [1.42].                                     Page  212
-------------------------------- bank\bank0.s --------------------------------

                             	; use data pointer as current position for evalu
                             	_cpyZPWord df_currdat,df_currlin
                             
ea73 : a596             [ 3] 	lda df_datoff
ea75 : 8588             [ 3] 	sta df_exeoff
ea77 : a200             [ 2] 	ldx #0
ea79 : a194             [ 6] 	lda (df_currdat,x)
ea7b : 857e             [ 3] 	sta df_eolidx
ea7d : a900             [ 2] 	lda #0
ea7f : 857f             [ 3] 	sta df_nxtstidx
ea81 : a903             [ 2] 	lda #3
ea83 : 8580             [ 3] 	sta df_curstidx
                             
                             	; get type from vvt ptr in tmpa
ea85 : a1a1             [ 6] 	lda (df_tmpptra,x)
ea87 : a8               [ 2] 	tay
                             	; get lvar point from tmpb
ea88 : a6a3             [ 3] 	ldx df_tmpptrb
ea8a : a5a4             [ 3] 	lda df_tmpptrb+1
                             
                             	; X,A and Y set up, now evaluate and perform ass
ea8c : 2042ed           [ 6] 	jsr df_rt_doassign
                             
                             	; update data offset as data has been consumed
ea8f : a588             [ 3] 	lda df_exeoff
ea91 : 8596             [ 3] 	sta df_datoff
                             	; restore line settings
ea93 : 68               [ 4] 	pla
ea94 : 8580             [ 3] 	sta df_curstidx
ea96 : 68               [ 4] 	pla
ea97 : 857f             [ 3] 	sta df_nxtstidx
ea99 : 68               [ 4] 	pla
ea9a : 857e             [ 3] 	sta df_eolidx
ea9c : 68               [ 4] 	pla
ea9d : 8588             [ 3] 	sta df_exeoff
ea9f : 68               [ 4] 	pla
eaa0 : 8587             [ 3] 	sta df_currlin+1
eaa2 : 68               [ 4] 	pla
eaa3 : 8586             [ 3] 	sta df_currlin
eaa5 : 60               [ 6] 	rts
                             
                             
eaa6 :                       df_rt_read
                             	; find variable to read in to from current posit
eaa6 : a488             [ 3] 	ldy df_exeoff
eaa8 :                       df_rt_read_find_var
eaa8 : c8               [ 2] 	iny
                             	; if end of line or statement then done
eaa9 : c47e             [ 3] 	cpy df_eolidx
eaab : f012             [ 3] 	beq df_rt_read_done
eaad : c47f             [ 3] 	cpy df_nxtstidx
eaaf : f00e             [ 3] 	beq df_rt_read_done
                             	; if not found escape then next byte
eab1 : b186             [ 5] 	lda (df_currlin),y
eab3 : c920             [ 2] 	cmp #DFTK_ESCVAL
eab5 : b0f1             [ 3] 	bcs df_rt_read_find_var
                             	; ok found escape, save position
eab7 : 8488             [ 3] 	sty df_exeoff
                             	; go and read in the value
eab9 : 204fea           [ 6] 	jsr df_rt_readdatum
                             	; try find another variable
eabc : 4ca6ea           [ 3] 	jmp df_rt_read
AS65 Assembler for R6502 [1.42].                                     Page  213
-------------------------------- bank\bank0.s --------------------------------

                             
eabf :                       df_rt_read_done
                             	; save position
eabf : 8488             [ 3] 	sty df_exeoff
eac1 : 60               [ 6] 	rts
                             
eac2 :                       df_rt_input
                             	; df_tmpptra has the vvt address, X,A is the lva
eac2 : 200ee5           [ 6] 	jsr df_rt_getlvar
                             	; Save lvar pointer
eac5 : 86a3             [ 3] 	stx df_tmpptrb
eac7 : 85a4             [ 3] 	sta df_tmpptrb+1
                             	; go read a line of input
                             	; buf_lo ptr has the input, Y is size
eac9 : 38               [ 2] 	sec
eaca : 2027c4           [ 6] 	jsr io_read_line
                             	; check the type
eacd : a200             [ 2] 	ldx #0
eacf : a1a1             [ 6] 	lda (df_tmpptra,x)
ead1 : 2904             [ 2] 	and #DFVVT_STR
ead3 : d008             [ 3] 	bne df_rt_input_str
ead5 : a1a1             [ 6] 	lda (df_tmpptra,x)
ead7 : 2903             [ 2] 	and #DFVVT_INT|DFVVT_BYT
ead9 : d00a             [ 3] 	bne df_rt_input_num
                             	; if not int or byte then error
eadb : f01f             [ 3] 	beq df_rt_input_err
eadd :                       df_rt_input_str
eadd : b139             [ 5] 	lda (buf_lo),y
eadf : 91a3             [ 5] 	sta (df_tmpptrb),y
eae1 : 88               [ 2] 	dey
eae2 : 10f9             [ 3] 	bpl df_rt_input_str
eae4 : 60               [ 6] 	rts
                             
eae5 :                       df_rt_input_num
                             	; X,A = address, linbuff must be on page boundar
eae5 : a53a             [ 3] 	lda buf_lo+1
eae7 : a639             [ 3] 	ldx buf_lo
eae9 : a000             [ 2] 	ldy #0				; any numeric format
eaeb : 209cc1           [ 6] 	jsr con_n_to_a
eaee : b00c             [ 3] 	bcs df_rt_input_err
eaf0 : a000             [ 2] 	ldy #0
eaf2 : a53d             [ 3] 	lda num_a
eaf4 : 91a3             [ 5] 	sta (df_tmpptrb),y
eaf6 : c8               [ 2] 	iny
eaf7 : a53e             [ 3] 	lda num_a+1
eaf9 : 91a3             [ 5] 	sta (df_tmpptrb),y
eafb : 60               [ 6] 	rts
eafc :                       df_rt_input_err
                             	SWBRK DFERR_TYPEMISM
                             
                             
eafe :                       df_rt_local
                             	; get current local count off rt stack
eafe : 20a4f6           [ 6] 	jsr df_rst_popByte
                             	; save on pc stack for incrmenting
eb01 : 48               [ 3] 	pha
eb02 : a488             [ 3] 	ldy df_exeoff
eb04 : 88               [ 2] 	dey
eb05 :                       df_rt_local_findesc
eb05 : c8               [ 2] 	iny
                             	; check end of line
eb06 : c47e             [ 3] 	cpy df_eolidx
AS65 Assembler for R6502 [1.42].                                     Page  214
-------------------------------- bank\bank0.s --------------------------------

eb08 : f020             [ 3] 	beq df_rt_local_done
eb0a : c47f             [ 3] 	cpy df_nxtstidx
eb0c : f01c             [ 3] 	beq df_rt_local_done
                             	; find a var
eb0e : b186             [ 5] 	lda (df_currlin),y
eb10 : c911             [ 2] 	cmp #DFTK_VAR
eb12 : d0f1             [ 3] 	bne df_rt_local_findesc
                             	; jump over escape value
eb14 : c8               [ 2] 	iny
                             	; get var slot in A,X
eb15 : b186             [ 5] 	lda (df_currlin),y
eb17 : aa               [ 2] 	tax
eb18 : c8               [ 2] 	iny
eb19 : b186             [ 5] 	lda (df_currlin),y
eb1b : 8488             [ 3] 	sty df_exeoff
                             	; localise this variable
eb1d : 2087f6           [ 6] 	jsr df_rt_proc_local
                             	; increment local counter
eb20 : 68               [ 4] 	pla
eb21 : 18               [ 2] 	clc
eb22 : 6901             [ 2] 	adc #1
eb24 : 48               [ 3] 	pha
eb25 : a488             [ 3] 	ldy df_exeoff
eb27 : 4c05eb           [ 3] 	jmp df_rt_local_findesc
eb2a :                       df_rt_local_done
                             	; get the local counter
                             	; put on to rt stack
eb2a : 68               [ 4] 	pla
eb2b : 4c9bf6           [ 3] 	jmp df_rst_pushByte
                             
                             
eb2e :                       df_rt_dim
eb2e : a488             [ 3] 	ldy df_exeoff
eb30 : 88               [ 2] 	dey
eb31 :                       df_rt_dim_findesc
                             	; check end of line
eb31 : c8               [ 2] 	iny
eb32 : c47e             [ 3] 	cpy df_eolidx
eb34 : f07e             [ 3] 	beq df_rt_dim_done
eb36 : c47f             [ 3] 	cpy df_nxtstidx
eb38 : f07a             [ 3] 	beq df_rt_dim_done
                             	; find a var
eb3a : b186             [ 5] 	lda (df_currlin),y
eb3c : c911             [ 2] 	cmp #DFTK_VAR
eb3e : d0f1             [ 3] 	bne df_rt_dim_findesc
                             	; jump over escape value
eb40 : c8               [ 2] 	iny
                             	; get var address
eb41 : b186             [ 5] 	lda (df_currlin),y
eb43 : 85a1             [ 3] 	sta df_tmpptra
eb45 : c8               [ 2] 	iny
eb46 : b186             [ 5] 	lda (df_currlin),y
eb48 : 85a2             [ 3] 	sta df_tmpptra+1
                             	; move to open bracket
eb4a : c8               [ 2] 	iny
eb4b : 8488             [ 3] 	sty df_exeoff
                             	; check if already dim'd
eb4d : a003             [ 2] 	ldy #DFVVT_DIM1
eb4f : b1a1             [ 5] 	lda (df_tmpptra),y
eb51 : d062             [ 3] 	bne df_rt_dim_err
                             	; Save slot address found earlier
eb53 : a5a1             [ 3] 	lda df_tmpptra
AS65 Assembler for R6502 [1.42].                                     Page  215
-------------------------------- bank\bank0.s --------------------------------

eb55 : 48               [ 3] 	pha
eb56 : a5a2             [ 3] 	lda df_tmpptra+1
eb58 : 48               [ 3] 	pha
eb59 : 2009e2           [ 6] 	jsr df_rt_arry_parm2
                             	; Restore slot address
eb5c : 68               [ 4] 	pla
eb5d : 85a2             [ 3] 	sta df_tmpptra+1
eb5f : 68               [ 4] 	pla
eb60 : 85a1             [ 3] 	sta df_tmpptra
                             ;	bcs df_rt_dim_err
                             	; save x,y to dim1,2
eb62 : 98               [ 2] 	tya
eb63 : 48               [ 3] 	pha
eb64 : 8a               [ 2] 	txa
eb65 : 48               [ 3] 	pha
eb66 : a003             [ 2] 	ldy #DFVVT_DIM1
eb68 : 68               [ 4] 	pla
eb69 : 91a1             [ 5] 	sta (df_tmpptra),y
eb6b : c8               [ 2] 	iny
eb6c : 68               [ 4] 	pla
eb6d : 91a1             [ 5] 	sta (df_tmpptra),y
eb6f :                       df_rt_dim_alloc
                             	; ok we have up to 2 dimensions
                             	; mult dim 1 and 2 if dim 2 <> 0
eb6f : a003             [ 2] 	ldy #DFVVT_DIM1
eb71 : b1a1             [ 5] 	lda (df_tmpptra),y
eb73 : 853d             [ 3] 	sta num_a
eb75 : a900             [ 2] 	lda #0
eb77 : 853e             [ 3] 	sta num_a+1
eb79 : c8               [ 2] 	iny
eb7a : b1a1             [ 5] 	lda (df_tmpptra),y
eb7c : d002             [ 3] 	bne df_rt_dim2_nz
eb7e : a901             [ 2] 	lda #1
eb80 :                       df_rt_dim2_nz
eb80 : 8541             [ 3] 	sta num_b
eb82 : a900             [ 2] 	lda #0
eb84 : 8542             [ 3] 	sta num_b+1
eb86 : 2034d4           [ 6] 	jsr int_fast_mult
                             	; check the type if int then mult2
eb89 : a200             [ 2] 	ldx #0
eb8b : a1a1             [ 6] 	lda (df_tmpptra,x)
eb8d : 2901             [ 2] 	and #DFVVT_INT
eb8f : f004             [ 3] 	beq df_rt_dim2_mul2
eb91 : 063d             [ 5] 	asl num_a
eb93 : 263e             [ 5] 	rol num_a+1
eb95 :                       df_rt_dim2_mul2
                             	; finally, we have a size of array
eb95 : a63d             [ 3] 	ldx num_a
eb97 : a53e             [ 3] 	lda num_a+1
                             
                             	; get a block of that size from heap
eb99 : 2025f7           [ 6] 	jsr df_st_malloc
                             	; save pointer to block in var
eb9c : a002             [ 2] 	ldy #DFVVT_HI
eb9e : 91a1             [ 5] 	sta (df_tmpptra),y
eba0 : 8a               [ 2] 	txa
eba1 : 88               [ 2] 	dey
eba2 : 91a1             [ 5] 	sta (df_tmpptra),y
                             	; finally, update the type to indicate array
eba4 : a200             [ 2] 	ldx #0
eba6 : a1a1             [ 6] 	lda (df_tmpptra,x)
eba8 : 0980             [ 2] 	ora #DFVVT_ARRY
AS65 Assembler for R6502 [1.42].                                     Page  216
-------------------------------- bank\bank0.s --------------------------------

ebaa : 81a1             [ 6] 	sta (df_tmpptra,x)
                             	; don't increment byte again - go check for more
ebac : 4c2eeb           [ 3] 	jmp df_rt_dim
ebaf :                       df_rt_dim_next_byte
ebaf : e688             [ 5] 	inc df_exeoff
ebb1 : 4c2eeb           [ 3] 	jmp df_rt_dim
ebb4 :                       df_rt_dim_done
ebb4 : 60               [ 6] 	rts
ebb5 :                       df_rt_dim_err
                             	SWBRK DFERR_DIM
                             
                             
                             
ebb7 :                       df_rt_cls
ebb7 : 4c20cd           [ 3] 	jmp gr_cls
                             
                             
ebba :                       df_rt_plot
                             	; evaluate the expression
ebba : 2076e0           [ 6] 	jsr df_rt_getnval
                             	; save lo byte
ebbd : 8a               [ 2] 	txa
ebbe : 48               [ 3] 	pha
                             	; jump over comma
ebbf : e688             [ 5] 	inc df_exeoff
                             	; evaluate the expression
ebc1 : 2076e0           [ 6] 	jsr df_rt_getnval
                             	; save lo byte
ebc4 : 8a               [ 2] 	txa
ebc5 : 48               [ 3] 	pha
                             	; jump over comma
ebc6 : e688             [ 5] 	inc df_exeoff
                             	; evaluate the expression
ebc8 : 207ce0           [ 6] 	jsr df_rt_neval
                             	; check the type on the stack
ebcb : 2013f7           [ 6] 	jsr df_ost_peekType
                             	; if >=0x80 then a pointer / string
ebce : c980             [ 2] 	cmp #0x80
ebd0 : b01b             [ 3] 	bcs df_rt_plotstr
                             	; else it is int
ebd2 : 2019f7           [ 6] 	jsr df_ost_popInt
                             	; save  low byte of pop result in a temp
ebd5 : 86a1             [ 3] 	stx df_tmpptra
ebd7 : a511             [ 3] 	lda gr_scrngeom+gr_mode			; Check screen mode
ebd9 : d009             [ 3] 	bne df_rt_plot_h_int
                             	; get X and Y coord in that order
                             	; but Y coord goes in X register!!!
ebdb : 68               [ 4] 	pla
ebdc : aa               [ 2] 	tax
ebdd : 68               [ 4] 	pla
ebde : a8               [ 2] 	tay
ebdf : a5a1             [ 3] 	lda df_tmpptra	; Get pop result in to A
ebe1 : 4c76cd           [ 3] 	jmp gr_plot
ebe4 :                       df_rt_plot_h_int
ebe4 : 68               [ 4] 	pla
ebe5 : a8               [ 2] 	tay
ebe6 : 68               [ 4] 	pla
ebe7 : aa               [ 2] 	tax
ebe8 : a5a1             [ 3] 	lda df_tmpptra	; Get pop result in to A
ebea : 4c3bcf           [ 3] 	jmp gr_hchar
                             
                             
AS65 Assembler for R6502 [1.42].                                     Page  217
-------------------------------- bank\bank0.s --------------------------------

ebed :                       df_rt_plotstr
                             	; pop string pointer
ebed : 2021f7           [ 6] 	jsr df_ost_popPtr
                             	; save pointer to tmpa
ebf0 : 86a1             [ 3] 	stx df_tmpptra
ebf2 : 85a2             [ 3] 	sta df_tmpptra+1
                             	; get y and x in that order
                             	; but X register is Y coord!!
ebf4 : 68               [ 4] 	pla
ebf5 : 85a5             [ 3] 	sta df_tmpptrc			; Y coord in C
ebf7 : 68               [ 4] 	pla
ebf8 : 85a3             [ 3] 	sta df_tmpptrb			; X coord in B
                             	; set cursror position
ebfa : a000             [ 2] 	ldy #0
ebfc : 84a9             [ 3] 	sty df_tmpptre
ebfe :                       df_rt_plotstrch
ebfe : a4a9             [ 3] 	ldy df_tmpptre
ec00 : b1a1             [ 5] 	lda (df_tmpptra),y
ec02 : 85a7             [ 3] 	sta df_tmpptrd			; char in D
ec04 : c900             [ 2] 	cmp #0
ec06 : f025             [ 3] 	beq df_rt_plotstrdone
ec08 : e6a9             [ 5] 	inc df_tmpptre
ec0a : a511             [ 3] 	lda gr_scrngeom+gr_mode; Check screen mode
ec0c : d00d             [ 3] 	bne df_rt_plot_h_str
ec0e : a5a7             [ 3] 	lda df_tmpptrd			; Get char to plot
ec10 : a6a5             [ 3] 	ldx df_tmpptrc			; Get Y coord
ec12 : a4a3             [ 3] 	ldy df_tmpptrb			; Get X coord
ec14 : 2076cd           [ 6] 	jsr gr_plot
ec17 : e6a3             [ 5] 	inc df_tmpptrb			; Increment X coord
ec19 : d0e3             [ 4] 	bne df_rt_plotstrch		; Always - assume x is neve
ec1b :                       df_rt_plot_h_str
ec1b : a5a7             [ 3] 	lda df_tmpptrd			; Get char to plot
ec1d : a6a3             [ 3] 	ldx df_tmpptrb			; Get X coord
ec1f : a4a5             [ 3] 	ldy df_tmpptrc			; Get Y coord
ec21 : 203bcf           [ 6] 	jsr gr_hchar
ec24 : 18               [ 2] 	clc
ec25 : a5a3             [ 3] 	lda df_tmpptrb
ec27 : 6521             [ 3] 	adc gr_scrngeom+gr_pitch
ec29 : 85a3             [ 3] 	sta df_tmpptrb
ec2b : d0d1             [ 4] 	bne df_rt_plotstrch		; Always - assume adding pi
ec2d :                       df_rt_plotstrdone
ec2d : 60               [ 6] 	rts
                             
ec2e :                       df_rt_cursor
                             	; evaluate the expression
ec2e : 2076e0           [ 6] 	jsr df_rt_getnval
                             	; write low byte of vdp_curoff
                             	; by writing a zero then cursor on else not
ec31 : 860d             [ 3] 	stx vdp_curoff
ec33 : 60               [ 6] 	rts
                             
ec34 :                       df_rt_himem
                             	; evaluate the expression
ec34 : 2076e0           [ 6] 	jsr df_rt_getnval
                             	; write X,A to df_memtop
ec37 : 8e1106           [ 4] 	stx df_memtop
ec3a : 8d1206           [ 4] 	sta df_memtop+1
                             	; now clear everything down
ec3d : 4c4bf7           [ 3] 	jmp df_clear
                             
ec40 :                       df_rt_text
ec40 : 4c88cc           [ 3] 	jmp gr_init_screen_txt
AS65 Assembler for R6502 [1.42].                                     Page  218
-------------------------------- bank\bank0.s --------------------------------

                             
ec43 :                       df_rt_hires
ec43 : 4ca1cc           [ 3] 	jmp gr_init_hires
                             
ec46 :                       df_rt_pixmode
                             	; evaluate the expression X = mode
ec46 : 2076e0           [ 6] 	jsr df_rt_getnval
ec49 : 8620             [ 3] 	stx gr_scrngeom+gr_pixmode
ec4b : 60               [ 6] 	rts
                             
ec4c :                       df_rt_ink
                             	; evaluate the expression X = col
ec4c : 2076e0           [ 6] 	jsr df_rt_getnval
ec4f : 8624             [ 3] 	stx gr_scrngeom+gr_ink
ec51 : 60               [ 6] 	rts
                             
ec52 :                       df_rt_paper
                             	; evaluate the expression X = col
ec52 : 2076e0           [ 6] 	jsr df_rt_getnval
                             	; Add 16 to get paper colour
ec55 : 8a               [ 2] 	txa
ec56 : 18               [ 2] 	clc
ec57 : 6910             [ 2] 	adc #16
ec59 : 8525             [ 3] 	sta gr_scrngeom+gr_paper
ec5b : 60               [ 6] 	rts
                             
ec5c :                       df_rt_point
ec5c : 2058e3           [ 6] 	jsr df_rt_parm_2ints
ec5f : a6a1             [ 3] 	ldx df_tmpptra
ec61 : a4a3             [ 3] 	ldy df_tmpptrb
ec63 : 4c05d0           [ 3] 	jmp gr_point
                             
ec66 :                       df_rt_circle
ec66 : 206fe3           [ 6] 	jsr df_rt_parm_3ints
ec69 : a5a1             [ 3] 	lda df_tmpptra				; load x0
ec6b : 853d             [ 3] 	sta num_a
ec6d : a5a3             [ 3] 	lda	df_tmpptrb				; load y0
ec6f : 853e             [ 3] 	sta num_a+1
ec71 : a5a5             [ 3] 	lda df_tmpptrc				; load r
ec73 : 853f             [ 3] 	sta num_a+2
ec75 : 4c32d0           [ 3] 	jmp gr_circle
                             
ec78 :                       df_rt_lineto
ec78 : 2058e3           [ 6] 	jsr df_rt_parm_2ints
ec7b : a6a1             [ 3] 	ldx df_tmpptra				; load x1
ec7d : a4a3             [ 3] 	ldy df_tmpptrb				; load y1
ec7f :                       df_rt_doline
ec7f : 863f             [ 3] 	stx num_a+2
ec81 : 8440             [ 3] 	sty num_a+3
ec83 : 4ce8d0           [ 3] 	jmp gr_line
ec86 :                       df_rt_line
ec86 : 2092e3           [ 6] 	jsr df_rt_parm_4ints
ec89 : a6a1             [ 3] 	ldx df_tmpptra				; load x0
ec8b : a4a3             [ 3] 	ldy	df_tmpptrb				; load y0
ec8d : 20f8cf           [ 6] 	jsr gr_set_hires_cur		; Start from x,y
ec90 : a6a5             [ 3] 	ldx df_tmpptrc				; load x1
ec92 : a4a7             [ 3] 	ldy df_tmpptrd				; load y1
ec94 : 4c7fec           [ 3] 	jmp df_rt_doline
                             
ec97 :                       df_rt_wait
                             	; evaluate the expression
ec97 : 2076e0           [ 6] 	jsr df_rt_getnval
AS65 Assembler for R6502 [1.42].                                     Page  219
-------------------------------- bank\bank0.s --------------------------------

                             	; put high byte in to Y (X,Y)=16 bits
ec9a : a8               [ 2] 	tay
ec9b :                       df_rt_wait_counter
                             	; get vdp low byte timer val in A
ec9b : a508             [ 3] 	lda vdp_cnt
ec9d :                       df_rt_wait_tick
                             	; check if a tick has occurred (i.e. val <> A)
ec9d : c508             [ 3] 	cmp vdp_cnt
ec9f : f0fc             [ 3] 	beq df_rt_wait_tick
                             	; countdown tick
eca1 : ca               [ 2] 	dex
eca2 : e0ff             [ 2] 	cpx #0xff
eca4 : d001             [ 3] 	bne df_rt_wait_skiphi
eca6 : 88               [ 2] 	dey
eca7 :                       df_rt_wait_skiphi
eca7 : e000             [ 2] 	cpx #0
eca9 : d0f0             [ 3] 	bne df_rt_wait_counter
ecab : c000             [ 2] 	cpy #0
ecad : d0ec             [ 3] 	bne df_rt_wait_counter
ecaf : 60               [ 6] 	rts
                             
ecb0 :                       df_rt_printat
                             	; Get x,y
ecb0 : 2058e3           [ 6] 	jsr df_rt_parm_2ints
ecb3 : a6a1             [ 3] 	ldx df_tmpptra
ecb5 : a4a3             [ 3] 	ldy df_tmpptrb
                             	; Set the cursror here
ecb7 : 208fcd           [ 6] 	jsr gr_set_cur
                             	; and continue to normal print command
ecba :                       df_rt_print
ecba : a488             [ 3] 	ldy df_exeoff
ecbc : 88               [ 2] 	dey
ecbd :                       df_rt_print_ws
ecbd : c8               [ 2] 	iny
                             
                             	; evaluate an expression
ecbe : c47e             [ 3] 	cpy df_eolidx
ecc0 : f032             [ 3] 	beq df_rt_print_done
ecc2 : c47f             [ 3] 	cpy df_nxtstidx
ecc4 : f02e             [ 3] 	beq df_rt_print_done
ecc6 : b186             [ 5] 	lda (df_currlin),y
ecc8 : c93a             [ 2] 	cmp #':'
ecca : f028             [ 3] 	beq df_rt_print_done
eccc : c920             [ 2] 	cmp #' '
ecce : f0ed             [ 3] 	beq df_rt_print_ws
ecd0 : c92c             [ 2] 	cmp #','
ecd2 : f0e9             [ 3] 	beq df_rt_print_ws
                             	; save index
ecd4 : 8488             [ 3] 	sty df_exeoff
                             
                             	; if starts with string literal then process sev
ecd6 : c910             [ 2] 	cmp #DFTK_STRLIT
ecd8 : f014             [ 3] 	beq df_rt_print_string
                             	; else evaluate a numeric
ecda : 207ce0           [ 6] 	jsr df_rt_neval
                             	; check what is on the argument stack
ecdd : 2013f7           [ 6] 	jsr df_ost_peekType
ece0 : 3006             [ 3] 	bmi df_rt_print_gotstr
ece2 : 20eae9           [ 6] 	jsr df_rt_print_num
ece5 : 4cbaec           [ 3] 	jmp df_rt_print
ece8 :                       df_rt_print_gotstr
ece8 : 20f1e9           [ 6] 	jsr df_rt_print_str
AS65 Assembler for R6502 [1.42].                                     Page  220
-------------------------------- bank\bank0.s --------------------------------

eceb : 4cbaec           [ 3] 	jmp df_rt_print
ecee :                       df_rt_print_string
ecee : 2038e1           [ 6] 	jsr df_rt_seval
ecf1 : 4ce8ec           [ 3] 	jmp df_rt_print_gotstr
ecf4 :                       df_rt_print_done
ecf4 : 8488             [ 3] 	sty df_exeoff
ecf6 : 60               [ 6] 	rts
                             
ecf7 :                       df_rt_println
ecf7 : 20baec           [ 6] 	jsr df_rt_print
ecfa : a90d             [ 2] 	lda #UTF_CR
ecfc : 4c12c4           [ 3] 	jmp io_put_ch
                             
                             
                             ; assign to a number variable
                             ; X,A must have lvar
ecff :                       df_rt_nassign
                             	; push var address, A ok to trample
ecff : 48               [ 3] 	pha
ed00 : 8a               [ 2] 	txa
ed01 : 48               [ 3] 	pha
                             
                             	; now go evaluate expression in to A,X
ed02 : 2076e0           [ 6] 	jsr df_rt_getnval
                             	; restore variable address to write to to df_tmp
                             	; but don't lose current A
ed05 : a8               [ 2] 	tay					; Save A in Y
ed06 : 68               [ 4] 	pla
ed07 : 85a1             [ 3] 	sta df_tmpptra
ed09 : 68               [ 4] 	pla
ed0a : 85a2             [ 3] 	sta df_tmpptra+1
ed0c : 98               [ 2] 	tya					; Get A back from Y
                             
                             	; save X,A int in contents section
ed0d : a001             [ 2] 	ldy #1
ed0f : 91a1             [ 5] 	sta (df_tmpptra),y
ed11 : 8a               [ 2] 	txa
ed12 : 88               [ 2] 	dey
ed13 : 91a1             [ 5] 	sta (df_tmpptra),y
                             
ed15 : 60               [ 6] 	rts
                             
                             ; assign to a string variable
                             ; X,A must have lvar
ed16 :                       df_rt_sassign
                             	; now go evaluate expression
                             	; with the destination being already in X,A
ed16 : 203ce1           [ 6] 	jsr df_rt_sval
                             
                             	; get string pointer from top of runtime stack
ed19 : 4c1df7           [ 3] 	jmp df_ost_popStr
                             
                             
                             ; generate lvar from a var token ready for assign
ed1c :                       df_rt_generate_lvar
                             	; move past escape val
ed1c : a488             [ 3] 	ldy df_exeoff
ed1e : c8               [ 2] 	iny
                             	; pointing to variable index
ed1f : b186             [ 5] 	lda (df_currlin),y
ed21 : 85a1             [ 3] 	sta df_tmpptra
ed23 : c8               [ 2] 	iny
AS65 Assembler for R6502 [1.42].                                     Page  221
-------------------------------- bank\bank0.s --------------------------------

ed24 : b186             [ 5] 	lda (df_currlin),y
ed26 : 8488             [ 3] 	sty df_exeoff
ed28 : 85a2             [ 3] 	sta df_tmpptra+1
                             
                             	; get the type and save
ed2a : a200             [ 2] 	ldx #0
ed2c : a1a1             [ 6] 	lda (df_tmpptra,x)
ed2e : 48               [ 3] 	pha
                             
                             	; set carry flag to return pointer (lvar)
ed2f : 38               [ 2] 	sec
ed30 : 202de2           [ 6] 	jsr df_rt_eval_var
ed33 : 2021f7           [ 6] 	jsr df_ost_popPtr
                             
                             	; pull the type previously saved into Y
ed36 : 8538             [ 3] 	sta tmp_d		; Save A
ed38 : 68               [ 4] 	pla
ed39 : a8               [ 2] 	tay
ed3a : a538             [ 3] 	lda tmp_d
                             	; move past the lvar variable index
ed3c : e688             [ 5] 	inc df_exeoff
ed3e : 60               [ 6] 	rts
                             
                             ; general assignment execution
                             ; generate lvar first
ed3f :                       df_rt_assign
ed3f : 201ced           [ 6] 	jsr df_rt_generate_lvar
                             ; X,A,Y contain lvar pointer and type
ed42 :                       df_rt_doassign
                             	; save A and put type Y in to A to check for str
ed42 : 48               [ 3] 	pha
ed43 : 98               [ 2] 	tya
ed44 : 2904             [ 2] 	and #DFVVT_STR
                             	; if a string then string expression
ed46 : d004             [ 3] 	bne df_rt_assign_str
                             	;  jump to numeric expression evaluator
                             	; remember to restore A
ed48 : 68               [ 4] 	pla
ed49 : 4cffec           [ 3] 	jmp df_rt_nassign
ed4c :                       df_rt_assign_str
                             	; else jump to string expression evaluator
                             	; remember to restore A
ed4c : 68               [ 4] 	pla
ed4d : 4c16ed           [ 3] 	jmp df_rt_sassign
                             
                             ; comment or data token is ignored by runtime
ed50 :                       df_rt_comment
ed50 :                       df_rt_data
ed50 : 60               [ 6] 	rts
                             
                             
                             ; run token - future expansion
ed51 :                       df_rt_run
ed51 : 60               [ 6] 	rts
                             
                             ; end of line / statement indicator
                             ; CS = End, CC = not end
ed52 :                       df_rt_eos
ed52 : a488             [ 3] 	ldy df_exeoff
ed54 : c47e             [ 3] 	cpy df_eolidx
ed56 : f00c             [ 3] 	beq df_rt_eos_true
ed58 : b186             [ 5] 	lda (df_currlin),y
AS65 Assembler for R6502 [1.42].                                     Page  222
-------------------------------- bank\bank0.s --------------------------------

ed5a : c93a             [ 2] 	cmp #':'
ed5c : f006             [ 3] 	beq df_rt_eos_true
ed5e : c47f             [ 3] 	cpy df_nxtstidx
ed60 : f002             [ 3] 	beq df_rt_eos_true
ed62 : 18               [ 2] 	clc
ed63 : 60               [ 6] 	rts
ed64 :                       df_rt_eos_true
ed64 : 38               [ 2] 	sec
ed65 : 60               [ 6] 	rts
                             
                             ; renum startLine,newStart,increment
                             ; renumbers from the first matching line to end o
ed66 :                       df_rt_renum
ed66 : e688             [ 5] 	inc df_exeoff
ed68 : 206fe3           [ 6] 	jsr df_rt_parm_3ints
                             	; starting line number
ed6b : a6a1             [ 3] 	ldx df_tmpptra
ed6d : a5a2             [ 3] 	lda df_tmpptra+1
ed6f : 2079de           [ 6] 	jsr df_pg_find_line
ed72 : 9002             [ 3] 	bcc df_rt_renum_ok
                             	SWBRK DFERR_NOLINE
                             
ed76 :                       df_rt_renum_ok
                             	; save starting position pointer in ptrd
ed76 : 86a7             [ 3] 	stx df_tmpptrd
ed78 : 85a8             [ 3] 	sta df_tmpptrd+1
ed7a :                       df_rt_renum_do
                             	; if not end of program
ed7a : a000             [ 2] 	ldy #0
ed7c : b1a7             [ 5] 	lda (df_tmpptrd),y
                             	; then renumber this line
ed7e : d001             [ 3] 	bne df_rt_renum_update
                             	; else done
ed80 : 60               [ 6] 	rts
ed81 :                       df_rt_renum_update
                             	; so set this line number to new line number
ed81 : a001             [ 2] 	ldy #DFTK_LINNUM
ed83 : a5a3             [ 3] 	lda df_tmpptrb
ed85 : 91a7             [ 5] 	sta (df_tmpptrd),y
ed87 : c8               [ 2] 	iny
ed88 : a5a4             [ 3] 	lda df_tmpptrb+1
ed8a : 91a7             [ 5] 	sta (df_tmpptrd),y
                             	; add increment to new line
                             	_addZPWord df_tmpptrb,df_tmpptrc
                             
ed99 :                       df_rt_renum_next
                             	; point ptrd to the next line
ed99 : 18               [ 2] 	clc
ed9a : a5a7             [ 3] 	lda df_tmpptrd
ed9c : a200             [ 2] 	ldx #0
ed9e : 61a7             [ 6] 	adc (df_tmpptrd,x)
eda0 : 85a7             [ 3] 	sta df_tmpptrd
eda2 : a5a8             [ 3] 	lda df_tmpptrd+1
eda4 : 6900             [ 2] 	adc #0
eda6 : 85a8             [ 3] 	sta df_tmpptrd+1
eda8 : 4c7aed           [ 3] 	jmp df_rt_renum_do
                             
                             
                             ; * List all procs in VNT
edab :                       df_rt_listprocnames
                             	; start at the beginning of the vnt table
                             	_cpyZPWord df_vntstrt,df_tmpptra
AS65 Assembler for R6502 [1.42].                                     Page  223
-------------------------------- bank\bank0.s --------------------------------

                             
                             	; start at varcnt
edb3 : a571             [ 3] 	lda df_varcnt
edb5 : 85a3             [ 3] 	sta df_tmpptrb
edb7 :                       df_rt_listcheckvnt
                             	; If reached 0 then not found
edb7 : a5a3             [ 3] 	lda df_tmpptrb
edb9 : f03d             [ 3] 	beq df_rt_listpn_done
edbb : a000             [ 2] 	ldy #0
edbd : b1a1             [ 5] 	lda (df_tmpptra),y
edbf : c95f             [ 2] 	cmp #'_'
edc1 : d01c             [ 3] 	bne df_rt_listnextvnt
edc3 :                       df_rt_listprocch
edc3 : b1a1             [ 5] 	lda (df_tmpptra),y
edc5 : 2012c4           [ 6] 	jsr io_put_ch
edc8 : c900             [ 2] 	cmp #0
edca : f003             [ 3] 	beq df_rt_listproccr
edcc : c8               [ 2] 	iny
edcd : d0f4             [ 3] 	bne df_rt_listprocch		; Always
edcf :                       df_rt_listproccr
edcf : a90d             [ 2] 	lda #UTF_CR
edd1 : 2012c4           [ 6] 	jsr io_put_ch
edd4 : 18               [ 2] 	clc
edd5 :                       df_rt_listprocpause
edd5 : 200fc4           [ 6] 	jsr io_get_ch
edd8 : c920             [ 2] 	cmp #' '
edda : d003             [ 3] 	bne df_rt_listnextvnt
eddc :                       df_rt_listwait
eddc : 38               [ 2] 	sec
eddd : b0f6             [ 3] 	bcs df_rt_listprocpause
eddf :                       df_rt_listnextvnt
eddf : b1a1             [ 5] 	lda (df_tmpptra),y
ede1 : f003             [ 3] 	beq df_rt_listgotnext
ede3 : c8               [ 2] 	iny
ede4 : d0f9             [ 3] 	bne df_rt_listnextvnt		; Always
ede6 :                       df_rt_listgotnext
                             	; dec vnt #
ede6 : c6a3             [ 5] 	dec df_tmpptrb
                             	; skip past zero terminator
ede8 : c8               [ 2] 	iny
                             	; add this to vnt pointer
ede9 : 18               [ 2] 	clc
edea : 98               [ 2] 	tya
edeb : 65a1             [ 3] 	adc df_tmpptra
eded : 85a1             [ 3] 	sta df_tmpptra
edef : a5a2             [ 3] 	lda df_tmpptra+1
edf1 : 6900             [ 2] 	adc #0
edf3 : 85a2             [ 3] 	sta df_tmpptra+1
edf5 : 4cb7ed           [ 3] 	jmp df_rt_listcheckvnt
edf8 :                       df_rt_listpn_done
edf8 : 60               [ 6] 	rts
                             
edf9 :                       df_rt_listproc
                             	; A already contains '_'
edf9 : 8d0004           [ 4] 	sta df_linbuff
edfc : a200             [ 2] 	ldx #0
edfe : a488             [ 3] 	ldy df_exeoff
ee00 :                       df_rt_listp_copy
ee00 : c8               [ 2] 	iny
ee01 : e8               [ 2] 	inx
ee02 : b186             [ 5] 	lda (df_currlin),y
ee04 : 9d0004           [ 5] 	sta df_linbuff,x
AS65 Assembler for R6502 [1.42].                                     Page  224
-------------------------------- bank\bank0.s --------------------------------

ee07 : 20e1d6           [ 6] 	jsr df_tk_isalphanum
ee0a : b0f4             [ 3] 	bcs df_rt_listp_copy
                             	; zero the line index
ee0c : a200             [ 2] 	ldx #0
ee0e : 867c             [ 3] 	stx df_linoff
                             	; save runtime pos
ee10 : 8488             [ 3] 	sty df_exeoff
                             	; Now try and find in VNT
ee12 : 20ebd4           [ 6] 	jsr df_var_find
ee15 : b038             [ 3] 	bcs df_rt_listp_notfound
                             	; Ok we have got a match in X,A find the proc
ee17 : 868e             [ 3] 	stx df_procptr
ee19 : 858f             [ 3] 	sta df_procptr+1
ee1b : 20ace4           [ 6] 	jsr df_rt_findproc
                             	; Save the line pointer
ee1e : 86a1             [ 3] 	stx df_tmpptra
ee20 : 85a2             [ 3] 	sta df_tmpptra+1
                             	; save statement index in to line
ee22 : 8492             [ 3] 	sty df_lineidx
                             ;	; Check if '-' option used
                             ;	ldy df_exeoff
                             ;	lda (df_currlin),y
                             ;	cmp #'-'
                             ;	; if so, list to end of program
                             ;	beq df_rt_listprgend
                             	; Now try and find the end of this procedure
                             	; enddef or another def
                             	; A,X=Line ptr, Y=line idx
                             ;	ldx df_tmpptra
                             ;	lda df_tmpptra+1
                             ;	ldy df_lineidx
ee24 :                       df_rt_listp_findend
                             	; Go to next stat
ee24 : 2055e4           [ 6] 	jsr df_rt_nextstat
ee27 : b057             [ 3] 	bcs df_rt_listprgend
                             	; save y (a,x in lineptr), A is ok to trample
ee29 : 98               [ 2] 	tya
ee2a : 48               [ 3] 	pha
                             	; find the command
ee2b :                       df_rt_listp_findcmd
ee2b : c8               [ 2] 	iny
ee2c : b190             [ 5] 	lda (df_lineptr),y
ee2e : 10fb             [ 3] 	bpl df_rt_listp_findcmd
                             	; restore y to stat beginning
ee30 : 8538             [ 3] 	sta tmp_d
ee32 : 68               [ 4] 	pla
ee33 : a8               [ 2] 	tay
ee34 : a538             [ 3] 	lda tmp_d
                             	; check A - looking for enddef or def
ee36 : c987             [ 2] 	cmp #DFRT_ENDDEF
ee38 : f00b             [ 3] 	beq df_rt_listp_done
ee3a : c986             [ 2] 	cmp #DFRT_DEF
ee3c : f007             [ 3] 	beq df_rt_listp_done
                             	; if neither then next stat from current
ee3e : a690             [ 3] 	ldx df_lineptr
ee40 : a591             [ 3] 	lda df_lineptr+1
ee42 : 4c24ee           [ 3] 	jmp df_rt_listp_findend
ee45 :                       df_rt_listp_done
                             	; Push end line on to stack
ee45 : a591             [ 3] 	lda df_lineptr+1
ee47 : 48               [ 3] 	pha
ee48 : 8a               [ 2] 	txa
AS65 Assembler for R6502 [1.42].                                     Page  225
-------------------------------- bank\bank0.s --------------------------------

ee49 : 48               [ 3] 	pha
ee4a : a591             [ 3] 	lda df_lineptr+1
ee4c : 4c86ee           [ 3] 	jmp df_rt_list_line
ee4f :                       df_rt_listp_notfound
                             	; Fatal error if proc not found
                             	SWBRK DFERR_NOPROC
                             
                             
                             ; list token
ee51 :                       df_rt_list
ee51 : a900             [ 2] 	lda #0
ee53 : 85a9             [ 3] 	sta df_tmpptre		; Zero means in normal list mode
                             	; find non-ws
ee55 : 2001e5           [ 6] 	jsr df_rt_skip_ws
                             	; if end of statement then no line specifiers
ee58 : 2052ed           [ 6] 	jsr df_rt_eos
                             	; so list whole program
ee5b : b01b             [ 3] 	bcs df_rt_listprg
                             
                             	;if '_' then use procnames
ee5d : c95f             [ 2] 	cmp #'_'
ee5f : d003             [ 3] 	bne df_rt_list_all
ee61 : 4cf9ed           [ 3] 	jmp df_rt_listproc
ee64 :                       df_rt_list_all
                             	;if '*' then display all procnames
ee64 : c92a             [ 2] 	cmp #'*'
ee66 : d003             [ 3] 	bne df_rt_list_linno
ee68 : 4cabed           [ 3] 	jmp df_rt_listprocnames
ee6b :                       df_rt_list_linno
                             	; else get 1st parameter
ee6b : 2076e0           [ 6] 	jsr df_rt_getnval
                             	; find the starting line number in X,A
ee6e : 2079de           [ 6] 	jsr df_pg_find_line
                             	; save start in ptra
ee71 : 86a1             [ 3] 	stx df_tmpptra
ee73 : 85a2             [ 3] 	sta df_tmpptra+1
ee75 : 4c80ee           [ 3] 	jmp df_rt_listprgend
                             	; NO ability to choose and ending line number!
                             
                             ; Common listing routine used by LIST and SAVE
                             ; tmpe = 0 means in LIST mode else SAVE mode
                             ; can stop the listing in LIST mode with CTRL-C
ee78 :                       df_rt_listprg
                             	; program start and end as for pointer value
                             	_cpyZPWord df_prgstrt, df_tmpptra
                             
ee80 :                       df_rt_listprgend
ee80 : a568             [ 3] 	lda df_prgend+1
ee82 : 48               [ 3] 	pha
ee83 : a567             [ 3] 	lda df_prgend
ee85 : 48               [ 3] 	pha
ee86 :                       df_rt_list_line
                             	; if line length = 0 then end of program
ee86 : a000             [ 2] 	ldy #0
ee88 : b1a1             [ 5] 	lda (df_tmpptra),y
ee8a : f03a             [ 3] 	beq df_rt_list_line_fin
                             	; if in list mode and CTRL-C then also stop
ee8c : a5a9             [ 3] 	lda df_tmpptre
ee8e : d010             [ 3] 	bne df_rt_list_line_cont
                             	; check for break, asynch get
ee90 : 18               [ 2] 	clc
ee91 :                       df_rt_list_synckey
AS65 Assembler for R6502 [1.42].                                     Page  226
-------------------------------- bank\bank0.s --------------------------------

ee91 : a5a9             [ 3] 	lda df_tmpptre					; Ignore keys on save mode
ee93 : d00b             [ 3] 	bne df_rt_list_line_cont
ee95 :                       df_rt_list_pause
ee95 : 200fc4           [ 6] 	jsr io_get_ch
ee98 : c920             [ 2] 	cmp #' '						; Space = PAUSE
ee9a : f0f9             [ 3] 	beq df_rt_list_pause			; C=1 for synchronouse ke
ee9c : c903             [ 2] 	cmp #UTF_ETX					; CTRL-C?
ee9e : f026             [ 3] 	beq df_rt_list_line_fin
eea0 :                       df_rt_list_line_cont
eea0 : a000             [ 2] 	ldy #0
eea2 : 8488             [ 3] 	sty df_exeoff
eea4 : 20c9ee           [ 6] 	jsr df_rt_list_all_line
eea7 :                       df_rt_list_next_line
                             	; new line
eea7 : 2034c1           [ 6] 	jsr utilPrintCRLF
                             	; increment pointer to next line
eeaa : 18               [ 2] 	clc
eeab : a5a1             [ 3] 	lda df_tmpptra
eead : a000             [ 2] 	ldy #0
eeaf : 71a1             [ 5] 	adc (df_tmpptra),y
eeb1 : 85a1             [ 3] 	sta df_tmpptra
eeb3 : a5a2             [ 3] 	lda df_tmpptra+1
eeb5 : 6900             [ 2] 	adc #0
eeb7 : 85a2             [ 3] 	sta df_tmpptra+1
                             	; if pointer > end then listing is done
eeb9 : 38               [ 2] 	sec
eeba : 68               [ 4] 	pla
eebb : aa               [ 2] 	tax
eebc : e5a1             [ 3] 	sbc df_tmpptra
eebe : 68               [ 4] 	pla
eebf : 48               [ 3] 	pha
eec0 : e5a2             [ 3] 	sbc df_tmpptra+1
eec2 : 8a               [ 2] 	txa
eec3 : 48               [ 3] 	pha
eec4 : b0c0             [ 3] 	bcs df_rt_list_line
eec6 :                       df_rt_list_line_fin
                             	; if got here then reached tmpb
eec6 : 68               [ 4] 	pla
eec7 : 68               [ 4] 	pla
eec8 :                       df_rt_list_line_only_fin
eec8 : 60               [ 6] 	rts
                             
                             ;Using df_tmpptra as line pointer
                             ;Print decode an entire line
eec9 :                       df_rt_list_all_line				; Start here to include nu
eec9 : 2006f0           [ 6] 	jsr df_rt_list_linnum
eecc :                       df_rt_list_line_only			; Start here for just the 
eecc : a003             [ 2] 	ldy #3
eece : b1a1             [ 5] 	lda (df_tmpptra),y
eed0 : 857f             [ 3] 	sta df_nxtstidx
eed2 : c8               [ 2] 	iny
eed3 : 8488             [ 3] 	sty df_exeoff
eed5 :                       df_rt_list_decode
eed5 : a488             [ 3] 	ldy df_exeoff
eed7 : b1a1             [ 5] 	lda (df_tmpptra),y
eed9 : 3010             [ 3] 	bmi df_rt_list_token
eedb : c920             [ 2] 	cmp #DFTK_ESCVAL
eedd : 9006             [ 3] 	bcc df_rt_list_escval
                             	; normal char just print it
eedf : 2012c4           [ 6] 	jsr io_put_ch
eee2 : 4ceeee           [ 3] 	jmp df_rt_list_nexttok
eee5 :                       df_rt_list_escval
AS65 Assembler for R6502 [1.42].                                     Page  227
-------------------------------- bank\bank0.s --------------------------------

                             	; A and Y need to be valid on entry
eee5 : 2007ef           [ 6] 	jsr df_rt_list_decode_esc
eee8 : 4ceeee           [ 3] 	jmp df_rt_list_nexttok
eeeb :                       df_rt_list_token
eeeb : 2013f0           [ 6] 	jsr df_rt_list_decode_token
eeee :                       df_rt_list_nexttok
                             	; advance the line offset
eeee : e688             [ 5] 	inc df_exeoff
eef0 : a588             [ 3] 	lda df_exeoff
                             	; check if at end of line
eef2 : a200             [ 2] 	ldx #0
eef4 : c1a1             [ 6] 	cmp (df_tmpptra,x)
eef6 : f0d0             [ 3] 	beq df_rt_list_line_only_fin
                             	; check if at end of statement
eef8 : c57f             [ 3] 	cmp df_nxtstidx
eefa : d0d9             [ 3] 	bne df_rt_list_decode
eefc : a8               [ 2] 	tay
                             	; save the next statement offset
eefd : b1a1             [ 5] 	lda (df_tmpptra),y
eeff : 857f             [ 3] 	sta df_nxtstidx
ef01 : c8               [ 2] 	iny
ef02 : 8488             [ 3] 	sty df_exeoff
ef04 : 4cd5ee           [ 3] 	jmp df_rt_list_decode
                             
                             
                             ; decode escape sequences
                             ; Input: A contains the esc val and Y is char lin
ef07 :                       df_rt_list_decode_esc
                             	; jump over esc byte
ef07 : c8               [ 2] 	iny
ef08 : 8488             [ 3] 	sty df_exeoff
ef0a : 48               [ 3] 	pha
                             	; get the next two bytes in case needed
ef0b : b1a1             [ 5] 	lda (df_tmpptra),y
ef0d : 85a3             [ 3] 	sta df_tmpptrb
ef0f : c8               [ 2] 	iny
ef10 : b1a1             [ 5] 	lda (df_tmpptra),y
ef12 : 85a4             [ 3] 	sta df_tmpptrb+1
ef14 : 88               [ 2] 	dey				; Y is on byte after esc byte
ef15 : 68               [ 4] 	pla
                             	; x2 to get jmp offset
ef16 : 0a               [ 2] 	asl a
ef17 : aa               [ 2] 	tax
ef18 : bdf9e5           [ 4] 	lda df_rt_escjmp,x
ef1b : 85a5             [ 3] 	sta df_tmpptrc
ef1d : bdfae5           [ 4] 	lda df_rt_escjmp+1,x
ef20 : 85a6             [ 3] 	sta df_tmpptrc+1
                             	; now jump to decoder
ef22 : 6ca500           [ 6] 	jmp (df_tmpptrc)
                             
                             ; reserved
ef25 :                       df_rt_lst_reserved
ef25 : 60               [ 6] 	rts
                             
                             ; decode a byte char
ef26 :                       df_rt_lst_chr
ef26 : a927             [ 2] 	lda #0x27			; Single quote
ef28 : 2012c4           [ 6] 	jsr io_put_ch
ef2b : a5a3             [ 3] 	lda df_tmpptrb
ef2d : 2012c4           [ 6] 	jsr io_put_ch
ef30 : a927             [ 2] 	lda #0x27			; Single quote
ef32 : 2012c4           [ 6] 	jsr io_put_ch
AS65 Assembler for R6502 [1.42].                                     Page  228
-------------------------------- bank\bank0.s --------------------------------

ef35 : c8               [ 2] 	iny
ef36 : 8488             [ 3] 	sty df_exeoff
ef38 : 60               [ 6] 	rts
                             
                             ; Output 0x for hex chars
ef39 :                       df_rt_lst_hex_pre
ef39 : a930             [ 2] 	lda #'0'
ef3b : 2012c4           [ 6] 	jsr io_put_ch
ef3e : a978             [ 2] 	lda #'x'
ef40 : 4c12c4           [ 3] 	jmp io_put_ch
                             
                             
                             ; Decode a byte hex
ef43 :                       df_rt_lst_bythex
ef43 : 2039ef           [ 6] 	jsr df_rt_lst_hex_pre
ef46 :                       df_rt_lst_lo_hex
ef46 : a5a3             [ 3] 	lda df_tmpptrb
ef48 : 2051c1           [ 6] 	jsr str_a_to_x
ef4b : 2012c4           [ 6] 	jsr io_put_ch
ef4e : 8a               [ 2] 	txa
ef4f : 2012c4           [ 6] 	jsr io_put_ch
ef52 :                       df_rt_lst_const_done
ef52 : c8               [ 2] 	iny
ef53 : 8488             [ 3] 	sty df_exeoff
ef55 : 60               [ 6] 	rts
                             
                             ; Decode an int hex
ef56 :                       df_rt_lst_inthex
ef56 : 2039ef           [ 6] 	jsr df_rt_lst_hex_pre
ef59 : a5a4             [ 3] 	lda df_tmpptrb+1
ef5b : 2051c1           [ 6] 	jsr str_a_to_x
ef5e : 2012c4           [ 6] 	jsr io_put_ch
ef61 : 8a               [ 2] 	txa
ef62 : 2012c4           [ 6] 	jsr io_put_ch
ef65 : 4c46ef           [ 3] 	jmp df_rt_lst_lo_hex
                             
                             ; Decode a byte binary
ef68 :                       df_rt_lst_bytbin
ef68 : a208             [ 2] 	ldx #8
ef6a : a5a3             [ 3] 	lda df_tmpptrb
ef6c : 85a4             [ 3] 	sta df_tmpptrb+1
ef6e : 4c73ef           [ 3] 	jmp df_rt_lst_bin
                             
                             ; Decode a int binary
ef71 :                       df_rt_lst_intbin
ef71 : a210             [ 2] 	ldx #16
                             	; FALL THROUGH
                             ; Main 01 decoding of binary
ef73 :                       df_rt_lst_bin
ef73 : a930             [ 2] 	lda #'0'
ef75 : 2012c4           [ 6] 	jsr io_put_ch
ef78 : a962             [ 2] 	lda #'b'
ef7a : 2012c4           [ 6] 	jsr io_put_ch
ef7d :                       df_rt_lst_bit
ef7d : a930             [ 2] 	lda #'0'
ef7f : 06a3             [ 5] 	asl df_tmpptrb
ef81 : 26a4             [ 5] 	rol df_tmpptrb+1
ef83 : 6900             [ 2] 	adc #0				; If C=1 then '0' becomes '1'
ef85 :                       df_rt_lst_bit_skip0
ef85 : 2012c4           [ 6] 	jsr io_put_ch
ef88 : ca               [ 2] 	dex
ef89 : d0f2             [ 3] 	bne df_rt_lst_bit
AS65 Assembler for R6502 [1.42].                                     Page  229
-------------------------------- bank\bank0.s --------------------------------

ef8b : f0c5             [ 3] 	beq df_rt_lst_const_done
                             
                             ; Decode a decimal integer
ef8d :                       df_rt_lst_intdec
ef8d : a6a3             [ 3] 	ldx df_tmpptrb
ef8f : a5a4             [ 3] 	lda df_tmpptrb+1
ef91 : c8               [ 2] 	iny
ef92 : 8488             [ 3] 	sty df_exeoff
ef94 : 18               [ 2] 	clc
ef95 : 4cbbc3           [ 3] 	jmp print_a_to_d
                             
                             
                             ; decode a variable or procedure
                             ; Slot address to decode in ptrb
ef98 :                       df_rt_lst_var
ef98 :                       df_rt_lst_proc
                             	; jump over the address bytes
ef98 : c8               [ 2] 	iny
ef99 : 8488             [ 3] 	sty df_exeoff
                             
                             	; ptrc starts at VNT start
                             	_cpyZPWord df_vntstrt,df_tmpptrc
                             
                             
                             	; ptrd starts at end of VVT
                             	_cpyZPWord df_vvtend,df_tmpptrd
                             
efab : a000             [ 2] 	ldy #0
efad :                       df_rt_list_findvvt
                             	; Check have we reached target addr in vvt?
efad : a5a7             [ 3] 	lda df_tmpptrd
efaf : c5a3             [ 3] 	cmp df_tmpptrb
efb1 : d006             [ 3] 	bne df_rt_list_vvtend
efb3 : a5a8             [ 3] 	lda df_tmpptrd+1
efb5 : c5a4             [ 3] 	cmp df_tmpptrb+1
efb7 : f023             [ 3] 	beq df_rt_list_gotvvt
efb9 :                       df_rt_list_vvtend
efb9 : b1a5             [ 5] 	lda (df_tmpptrc),y
efbb : f009             [ 3] 	beq df_rt_list_gotvvtend
                             	_incZPWord df_tmpptrc
                             
efc3 : 4cb9ef           [ 3] 	jmp df_rt_list_vvtend
efc6 :                       df_rt_list_gotvvtend
                             	_incZPWord df_tmpptrc
                             
                             	; move target slot address towards top of mem
efcc : 18               [ 2] 	clc
efcd : a5a7             [ 3] 	lda df_tmpptrd
efcf : 6908             [ 2] 	adc #DFVVT_SZ
efd1 : 85a7             [ 3] 	sta df_tmpptrd
efd3 : a5a8             [ 3] 	lda df_tmpptrd+1
efd5 : 6900             [ 2] 	adc #0
efd7 : 85a8             [ 3] 	sta df_tmpptrd+1
                             	; go back and check again
efd9 : 4cadef           [ 3] 	jmp df_rt_list_findvvt
efdc :                       df_rt_list_gotvvt
efdc : b1a5             [ 5] 	lda (df_tmpptrc),y
efde : f025             [ 4] 	beq df_rt_list_donvvt
efe0 : 2012c4           [ 6] 	jsr io_put_ch
                             	_incZPWord df_tmpptrc
                             
efe9 : 4cdcef           [ 3] 	jmp df_rt_list_gotvvt
AS65 Assembler for R6502 [1.42].                                     Page  230
-------------------------------- bank\bank0.s --------------------------------

                             
efec :                       df_rt_lst_strlit
efec : a922             [ 2] 	lda #0x22
efee : 2012c4           [ 6] 	jsr io_put_ch
eff1 : a488             [ 3] 	ldy df_exeoff
eff3 :                       df_rt_lst_strlitch
eff3 : b1a1             [ 5] 	lda (df_tmpptra),y
eff5 : f007             [ 3] 	beq df_rt_lst_strlitdon
eff7 : 2012c4           [ 6] 	jsr io_put_ch
effa : c8               [ 2] 	iny
effb : 4cf3ef           [ 3] 	jmp df_rt_lst_strlitch
effe :                       df_rt_lst_strlitdon
effe : a922             [ 2] 	lda #0x22
f000 : 2012c4           [ 6] 	jsr io_put_ch
f003 : 8488             [ 3] 	sty df_exeoff
f005 :                       df_rt_list_donvvt
f005 : 60               [ 6] 	rts
                             
f006 :                       df_rt_list_linnum
f006 : a001             [ 2] 	ldy #1
f008 : b1a1             [ 5] 	lda (df_tmpptra),y
f00a : aa               [ 2] 	tax
f00b : a002             [ 2] 	ldy #2
f00d : b1a1             [ 5] 	lda (df_tmpptra),y
f00f : 18               [ 2] 	clc
f010 : 4cbbc3           [ 3] 	jmp print_a_to_d
                             
                             ; decode a token value with MSB set
f013 :                       df_rt_list_decode_token
                             	; if not assembler then normal listing
f013 : c997             [ 2] 	cmp #DFRT_ASM
f015 : d003             [ 3] 	bne df_rt_list_decode_token_normal
f017 : 4c52f0           [ 3] 	jmp df_rt_asm_decode_token
f01a :                       df_rt_list_decode_token_normal
f01a : 297f             [ 2] 	and #0x7f
                             	; token 0 and 1 don't get decoded they are impli
f01c : c902             [ 2] 	cmp #2
f01e : b001             [ 3] 	bcs df_rt_list_do_decode_tkn
f020 : 60               [ 6] 	rts
f021 :                       df_rt_list_do_decode_tkn
f021 : aa               [ 2] 	tax
f022 : a97d             [ 2] 	lda #lo(df_tokensyms)
f024 : 85a3             [ 3] 	sta df_tmpptrb
f026 : a9da             [ 2] 	lda #hi(df_tokensyms)
f028 : 85a4             [ 3] 	sta df_tmpptrb+1
f02a :                       df_rt_list_find_sym
f02a : e000             [ 2] 	cpx #0
f02c : f012             [ 3] 	beq df_rt_list_got_sym
f02e : a000             [ 2] 	ldy #0
f030 :                       df_rt_list_next_ch
f030 : b1a3             [ 5] 	lda (df_tmpptrb),y
f032 : 48               [ 3] 	pha
                             	_incZPWord df_tmpptrb
                             
f039 : 68               [ 4] 	pla
f03a : 10f4             [ 3] 	bpl df_rt_list_next_ch
f03c :                       df_rt_list_got_last_sym
                             	; ok got to the last ch
                             	; advance to next sym
f03c : ca               [ 2] 	dex
f03d : 4c2af0           [ 3] 	jmp df_rt_list_find_sym
f040 :                       df_rt_list_got_sym
AS65 Assembler for R6502 [1.42].                                     Page  231
-------------------------------- bank\bank0.s --------------------------------

f040 : a1a3             [ 6] 	lda (df_tmpptrb,x)		; Relies on X=0 from branch
f042 : 08               [ 3] 	php
f043 : 297f             [ 2] 	and #0x7f
f045 : 2012c4           [ 6] 	jsr io_put_ch
                             	_incZPWord df_tmpptrb
                             
f04e : 28               [ 4] 	plp
f04f : 10ef             [ 3] 	bpl df_rt_list_got_sym
f051 : 60               [ 6] 	rts
                             
                             ;** Decode assembler token in A **
f052 :                       df_rt_asm_decode_token
f052 : a92e             [ 2] 	lda #'.'			;Always put out the . symbol
f054 : 2012c4           [ 6] 	jsr io_put_ch
f057 : a488             [ 3] 	ldy df_exeoff		;Print out any whitespace
f059 :                       df_rt_asm_decode_token_ws
f059 : c8               [ 2] 	iny					;Point to char after the asm token
f05a : 8488             [ 3] 	sty df_exeoff
f05c : b1a1             [ 5] 	lda (df_tmpptra),y	;What is the char?
f05e : 200ad7           [ 6] 	jsr df_tk_isws		;If not then found the keyword
f061 : 9006             [ 3] 	bcc df_rt_asm_decode_token_found
f063 : 2012c4           [ 6] 	jsr io_put_ch		;Print the space
f066 : 4c59f0           [ 3] 	jmp df_rt_asm_decode_token_ws
f069 :                       df_rt_asm_decode_token_found
f069 : c911             [ 2] 	cmp #DFTK_VAR		; If is a label variable?
f06b : d003             [ 3] 	bne df_rt_asm_decode_token_keyword
                             	; if so then process as normal escape handling
f06d : 4c07ef           [ 3] 	jmp df_rt_list_decode_esc
f070 :                       df_rt_asm_decode_token_keyword
f070 : 297f             [ 2] 	and #0x7f			; Mask off MSB
f072 : aa               [ 2] 	tax					;Put it in to X as the counter
                             	; Point to asm symbol table
f073 : a956             [ 2] 	lda #lo(df_asm_tokensyms)
f075 : 85a3             [ 3] 	sta df_tmpptrb
f077 : a9fd             [ 2] 	lda #hi(df_asm_tokensyms)
f079 : 85a4             [ 3] 	sta df_tmpptrb+1
f07b :                       df_rt_list_find_asm_sym
f07b : e000             [ 2] 	cpx #0
f07d : f01d             [ 3] 	beq df_rt_list_got_asm_sym
f07f : a000             [ 2] 	ldy #0
f081 :                       df_rt_list_next_asm_ch
                             	_incZPWord df_tmpptrb
                             
f087 : b1a3             [ 5] 	lda (df_tmpptrb),y
f089 : c920             [ 2] 	cmp #' '			; Skip all chars >=' '
f08b : b0f4             [ 3] 	bcs df_rt_list_next_asm_ch
f08d : 38               [ 2] 	sec					; Skip offset and mode bytes
f08e : 65a3             [ 3] 	adc df_tmpptrb
f090 : 85a3             [ 3] 	sta df_tmpptrb
f092 : a5a4             [ 3] 	lda df_tmpptrb+1
f094 : 6900             [ 2] 	adc #0
f096 : 85a4             [ 3] 	sta df_tmpptrb+1
f098 : ca               [ 2] 	dex					; One less symbol to skip over
f099 : 4c7bf0           [ 3] 	jmp df_rt_list_find_asm_sym
f09c :                       df_rt_list_got_asm_sym
f09c : a1a3             [ 6] 	lda (df_tmpptrb,x)	; Relies on X=0 from branch
f09e : c920             [ 2] 	cmp #' '
f0a0 : 900c             [ 3] 	bcc df_rt_asm_decode_token_done
f0a2 : 2012c4           [ 6] 	jsr io_put_ch
                             	_incZPWord df_tmpptrb
                             
f0ab : 4c9cf0           [ 3] 	jmp df_rt_list_got_asm_sym
AS65 Assembler for R6502 [1.42].                                     Page  232
-------------------------------- bank\bank0.s --------------------------------

f0ae :                       df_rt_asm_decode_token_done
f0ae : 60               [ 6] 	rts
                             
                             
f0af :                       df_rt_doke
f0af : 2058e3           [ 6] 	jsr df_rt_parm_2ints
f0b2 : a5a3             [ 3] 	lda df_tmpptrb
f0b4 : a000             [ 2] 	ldy #0
f0b6 : 91a1             [ 5] 	sta (df_tmpptra),y
                             	; get high byte to doke
f0b8 : a5a4             [ 3] 	lda df_tmpptrb+1
f0ba : c8               [ 2] 	iny
                             	; poke hi byte
f0bb : 91a1             [ 5] 	sta (df_tmpptra),y
f0bd : 60               [ 6] 	rts
                             
f0be :                       df_rt_poke
f0be : 2058e3           [ 6] 	jsr df_rt_parm_2ints
f0c1 : a5a3             [ 3] 	lda df_tmpptrb
f0c3 : a000             [ 2] 	ldy #0
f0c5 : 91a1             [ 5] 	sta (df_tmpptra),y
f0c7 : 60               [ 6] 	rts
                             
f0c8 :                       df_rt_snd_common
                             	; 3 inputs
                             	; tmpa = channel (1,2,3), tmpb = period, tmpc = 
f0c8 : a5a1             [ 3] 	lda df_tmpptra
                             	; tone channel addressing is 0 to 2
f0ca : 38               [ 2] 	sec
f0cb : e901             [ 2] 	sbc #1
f0cd : 2903             [ 2] 	and #3
                             	; ok doing a tone channel, get reg index for per
f0cf : 0a               [ 2] 	asl a
f0d0 : aa               [ 2] 	tax
                             	; get low byte of period
f0d1 : a5a3             [ 3] 	lda df_tmpptrb
f0d3 : 2000c0           [ 6] 	jsr snd_set
                             	; increment reg number to high byte
f0d6 : e8               [ 2] 	inx
                             	; get high byte of period
f0d7 : a5a4             [ 3] 	lda df_tmpptrb+1
f0d9 : 290f             [ 2] 	and #0x0f
                             	; set period
f0db : 2000c0           [ 6] 	jsr snd_set
                             	; get volume register index (8 = channel 1)
f0de : 18               [ 2] 	clc
f0df : a5a1             [ 3] 	lda df_tmpptra
f0e1 : 2903             [ 2] 	and #3
f0e3 : 6907             [ 2] 	adc #7
f0e5 : aa               [ 2] 	tax
                             	; get volume
f0e6 : a5a5             [ 3] 	lda df_tmpptrc
f0e8 : 290f             [ 2] 	and #0x0f
f0ea : d002             [ 3] 	bne df_rt_sound_env_skip
                             	; envelope mode
f0ec : 0910             [ 2] 	ora #0x10
f0ee :                       df_rt_sound_env_skip
f0ee : 4c00c0           [ 3] 	jmp snd_set
                             
                             ; sound chan,period,volume
f0f1 :                       df_rt_sound
f0f1 : 206fe3           [ 6] 	jsr df_rt_parm_3ints
AS65 Assembler for R6502 [1.42].                                     Page  233
-------------------------------- bank\bank0.s --------------------------------

f0f4 :                       df_rt_dosound
                             	; check which channel (0 = noise)
f0f4 : a5a1             [ 3] 	lda df_tmpptra
f0f6 : f003             [ 3] 	beq df_rt_sound_noise
f0f8 : 4cc8f0           [ 3] 	jmp df_rt_snd_common
f0fb :                       df_rt_sound_noise
                             	; ok update the noise channel, volume is irrelev
f0fb : a206             [ 2] 	ldx #6
f0fd : a5a3             [ 3] 	lda df_tmpptrb
f0ff : 291f             [ 2] 	and #0x1f
f101 : 4c00c0           [ 3] 	jmp snd_set
                             
                             ; music chan,octave,note,volume
f104 :                       df_rt_music
f104 : 2092e3           [ 6] 	jsr df_rt_parm_4ints
                             	; parm 2 = octave, need to x 12word = 24
                             	; get period A,X (hi/lo)
                             	; pass in octave # in X and note # in Y
f107 : a6a3             [ 3] 	ldx df_tmpptrb
f109 : a4a5             [ 3] 	ldy df_tmpptrc
f10b : 20bcd3           [ 6] 	jsr snd_get_note
                             	; store note period in b
f10e : 86a3             [ 3] 	stx df_tmpptrb
f110 : 85a4             [ 3] 	sta df_tmpptrb+1
                             	; put vol in tmpc
f112 : a5a7             [ 3] 	lda df_tmpptrd
f114 : 85a5             [ 3] 	sta df_tmpptrc
                             	; tmpa,b,c contain chan,per,vol
f116 : 4cf4f0           [ 3] 	jmp df_rt_dosound
                             
                             
                             ; play tonemask,noisemask,envelope,period
f119 :                       df_rt_play
f119 : 2092e3           [ 6] 	jsr df_rt_parm_4ints
                             	; parm 1 = tone enable
f11c : a5a1             [ 3] 	lda df_tmpptra
f11e : 2907             [ 2] 	and #7
f120 : 85a1             [ 3] 	sta df_tmpptra
                             	; parm 2 = noise enable
f122 : a5a3             [ 3] 	lda df_tmpptrb
f124 : 2907             [ 2] 	and #7
f126 : 0a               [ 2] 	asl a
f127 : 0a               [ 2] 	asl a
f128 : 0a               [ 2] 	asl a
f129 : 05a1             [ 3] 	ora df_tmpptra
                             	; we now have bits set for channels to enable
                             	; but need to invert for the 8910
                             	; top 2 bits are 0 and 1 as these are port b (in
f12b : 497f             [ 2] 	eor #0x7f
                             	; reg 7 is control register
f12d : a207             [ 2] 	ldx #7
f12f : 2000c0           [ 6] 	jsr snd_set
                             	; parm 3 = envelope mode
f132 : a5a5             [ 3] 	lda df_tmpptrc
f134 : 290f             [ 2] 	and #0xf
                             	; 13 is envelope shape register
f136 : a20d             [ 2] 	ldx #13
f138 : 2000c0           [ 6] 	jsr snd_set
                             	; parm 4 = envelope period
                             	; 11 is envelope period register
f13b : a20b             [ 2] 	ldx #11
                             	; get low
AS65 Assembler for R6502 [1.42].                                     Page  234
-------------------------------- bank\bank0.s --------------------------------

f13d : a5a7             [ 3] 	lda df_tmpptrd
f13f : 2000c0           [ 6] 	jsr snd_set
                             	; get high
f142 : e8               [ 2] 	inx
f143 : a5a8             [ 3] 	lda df_tmpptrd+1
f145 : 4c00c0           [ 3] 	jmp snd_set
                             
                             ;df_rt_fill
                             ;	jsr df_rt_parm_5ints
                             ;	rts
                             	
                             ;* common filename procesing routine
                             ;*
f148 :                       df_rt_init_filename
                             	; evaluate string
f148 : 207ce0           [ 6] 	jsr df_rt_neval
f14b : 201df7           [ 6] 	jsr df_ost_popStr
                             
                             	; save string address
f14e : 86a5             [ 3] 	stx df_tmpptrc
f150 : 85a6             [ 3] 	sta df_tmpptrc+1
                             
                             	; copy string to fhandle
f152 : a000             [ 2] 	ldy #0
f154 :                       df_rt_copy_fn
f154 : b1a5             [ 5] 	lda (df_tmpptrc),y
f156 :                       df_rt_fname_case
f156 : 990004           [ 5] 	sta df_linbuff,y				; Put filename in line buffe
f159 : c8               [ 2] 	iny
f15a : c900             [ 2] 	cmp #0
f15c : d0f6             [ 3] 	bne df_rt_copy_fn
f15e : 60               [ 6] 	rts
                             
                             ;* common file parsing routine
f15f :                       df_rt_parse_file
                             	; now process filename
f15f : 2048f1           [ 6] 	jsr df_rt_init_filename
f162 : a900             [ 2] 	lda #0						; Initialise tape system
f164 : 4ce9c3           [ 3] 	jmp io_active_device
f167 :                       df_rt_file_errc
                             	SWBRK DFERR_FNAME
                             
                             
                             ; save "file" as text
f169 :                       df_rt_tsave
f169 : 205ff1           [ 6] 	jsr df_rt_parse_file
f16c : 2018c4           [ 6] 	jsr io_open_write
f16f : b0f6             [ 3] 	bcs df_rt_file_errc
                             	; ok now have redirected output to device
                             	; go and list the program in save mode
f171 : a901             [ 2] 	lda #1
f173 : 85a9             [ 3] 	sta df_tmpptre
f175 : 2078ee           [ 6] 	jsr df_rt_listprg
                             	; final CR to end the save
f178 : a90d             [ 2] 	lda #UTF_CR
f17a : 2012c4           [ 6] 	jsr io_put_ch
f17d :                       df_rt_file_cleanup
                             	; close the file
f17d : 201bc4           [ 6] 	jsr io_close
                             	; restore to default device io
f180 : 4ce6c3           [ 3] 	jmp io_set_default
                             
AS65 Assembler for R6502 [1.42].                                     Page  235
-------------------------------- bank\bank0.s --------------------------------

                             
                             ; load "file" from text
f183 :                       df_rt_tload
f183 : 205ff1           [ 6] 	jsr df_rt_parse_file
f186 : 2015c4           [ 6] 	jsr io_open_read
f189 : b0dc             [ 3] 	bcs df_rt_file_errc
                             	; no echo - very important
                             	; else might try and write to a device
                             	; only open for reading (i.e. SD CARD)
f18b :                       df_rt_loadline
f18b : 18               [ 2] 	clc					; NO ECHO!
f18c : 2049df           [ 6] 	jsr df_pg_inputline
                             	; if C clear then tokenise line
f18f : 9014             [ 3] 	bcc df_rt_ldtokenise
                             	; else done
                             	; clear dflat runtime else will try to execute
                             	; the last tokenised line!
f191 : a900             [ 2] 	lda #0
f193 : 8d8004           [ 4] 	sta df_tokbuff			; Offset to next line
f196 : 8d8104           [ 4] 	sta df_tokbuff+1		; Clear line low
f199 : 8d8204           [ 4] 	sta df_tokbuff+2		; Clear line high
f19c : 857f             [ 3] 	sta df_nxtstidx			; Clear next statement
f19e : a901             [ 2] 	lda #1					; Set immediate mode
f1a0 : 855e             [ 3] 	sta df_immed
f1a2 : 4c7df1           [ 3] 	jmp df_rt_file_cleanup	; Ok now can close and do
f1a5 :                       df_rt_ldtokenise
f1a5 : 209ddf           [ 6] 	jsr df_pg_tokenise		; Tokenise loaded string
f1a8 : 4c8bf1           [ 3] 	jmp df_rt_loadline		; Continue with next until b
                             
                             
                             ; Utility to open in binary mode save
f1ab :                       df_rt_openforbinsave
f1ab : 205ff1           [ 6] 	jsr df_rt_parse_file
f1ae : 2024c4           [ 6] 	jsr io_open_ext2		; Ext2 is binary file save
f1b1 : b0b4             [ 3] 	bcs df_rt_file_errc
f1b3 : 60               [ 6] 	rts
                             
                             ; Utility to open in binary mode load
f1b4 :                       df_rt_openforbinload
                             	; Get filename and open file for binary read
f1b4 : 205ff1           [ 6] 	jsr df_rt_parse_file
f1b7 : 2021c4           [ 6] 	jsr io_open_ext1		; Ext1 is binary file read
f1ba : b0ab             [ 3] 	bcs df_rt_file_errc
f1bc : 60               [ 6] 	rts
                             
                             ; bload addr,"file"
f1bd :                       df_rt_bload
                             	; Get address but keep on stack
f1bd : e688             [ 5] 	inc df_exeoff
f1bf : 207ce0           [ 6] 	jsr df_rt_neval
                             
                             	; Get filename and open file for binary read
f1c2 : e688             [ 5] 	inc df_exeoff
f1c4 : 20b4f1           [ 6] 	jsr df_rt_openforbinload
                             
                             	; Get address from stack in to ptra
f1c7 : 2019f7           [ 6] 	jsr df_ost_popInt
f1ca : 86a1             [ 3] 	stx df_tmpptra
f1cc : 85a2             [ 3] 	sta df_tmpptra+1
                             
                             	; Get file address to X,Y
f1ce : 200fc4           [ 6] 	jsr io_get_ch
AS65 Assembler for R6502 [1.42].                                     Page  236
-------------------------------- bank\bank0.s --------------------------------

f1d1 : aa               [ 2] 	tax
f1d2 : 200fc4           [ 6] 	jsr io_get_ch
f1d5 : a8               [ 2] 	tay
                             
                             	; Check if user address is zero
f1d6 : a5a1             [ 3] 	lda df_tmpptra
f1d8 : 05a2             [ 3] 	ora df_tmpptra+1
f1da : d004             [ 3] 	bne df_rt_bload_addr
                             	; If it is zero then use address from file
f1dc : 86a1             [ 3] 	stx df_tmpptra
f1de : 84a2             [ 3] 	sty df_tmpptra+1
f1e0 :                       df_rt_bload_addr
                             	; Get file length
f1e0 : 200fc4           [ 6] 	jsr io_get_ch
f1e3 : 85a3             [ 3] 	sta df_tmpptrb
f1e5 : 200fc4           [ 6] 	jsr io_get_ch
f1e8 : 85a4             [ 3] 	sta df_tmpptrb+1
                             
                             	; Go and load the bytes
f1ea : 208cf2           [ 6] 	jsr df_rt_loadbin
                             	; Close the file
f1ed : 4c7df1           [ 3] 	jmp df_rt_file_cleanup
                             
                             ; Save a binary file
                             ; addr,length,fname
f1f0 :                       df_rt_bsave
                             	; Get source address and length but leave on sta
                             	; evaluate 1st parm
f1f0 : 207ce0           [ 6] 	jsr df_rt_neval
                             	; jump over comma
f1f3 : e688             [ 5] 	inc df_exeoff
                             	; evaluate the 2nd parm
f1f5 : 207ce0           [ 6] 	jsr df_rt_neval
                             
                             	; Process file and open for binary save
f1f8 : e688             [ 5] 	inc df_exeoff
f1fa : 20abf1           [ 6] 	jsr df_rt_openforbinsave
                             
                             	; Get length in to ptrb
f1fd : 2019f7           [ 6] 	jsr df_ost_popInt
f200 : 86a3             [ 3] 	stx df_tmpptrb
f202 : 85a4             [ 3] 	sta df_tmpptrb+1
                             
                             	; Get address in to ptra
f204 : 2019f7           [ 6] 	jsr df_ost_popInt
f207 : 86a1             [ 3] 	stx df_tmpptra
f209 : 85a2             [ 3] 	sta df_tmpptra+1
                             
                             	; now save bytes
f20b : 209ef2           [ 6] 	jsr df_rt_savebin
                             	; Close the file
f20e : 4c7df1           [ 3] 	jmp df_rt_file_cleanup
                             
                             
                             ; save dflat tokenised program as binary
f211 :                       df_rt_save
                             	; Process file and open for binary save
f211 : 20abf1           [ 6] 	jsr df_rt_openforbinsave
                             
                             	; first save zero page stuff
                             	; ok this saves a bit more than needed
                             	; but it's no biggie and doesn't
AS65 Assembler for R6502 [1.42].                                     Page  237
-------------------------------- bank\bank0.s --------------------------------

                             	; clobber temp space
f214 : a95b             [ 2] 	lda #lo(dflat_zp_save_s)
f216 : 85a1             [ 3] 	sta df_tmpptra
f218 : a900             [ 2] 	lda #hi(dflat_zp_save_s)
f21a : 85a2             [ 3] 	sta df_tmpptra+1
                             	; save length
f21c : 38               [ 2] 	sec
f21d : a9a1             [ 2] 	lda #lo(dflat_zp_save_e)
f21f : e95b             [ 2] 	sbc #lo(dflat_zp_save_s)
f221 : 85a3             [ 3] 	sta df_tmpptrb
f223 : a900             [ 2] 	lda #hi(dflat_zp_save_e)
f225 : e900             [ 2] 	sbc #hi(dflat_zp_save_s)
f227 : 85a4             [ 3] 	sta df_tmpptrb+1
                             	; now save bytes
f229 : 209ef2           [ 6] 	jsr df_rt_savebin
                             
                             	; now save the dflat program
f22c : a565             [ 3] 	lda df_prgstrt
f22e : 85a1             [ 3] 	sta df_tmpptra
f230 : a566             [ 3] 	lda df_prgstrt+1
f232 : 85a2             [ 3] 	sta df_tmpptra+1
                             	; save length
f234 : 38               [ 2] 	sec
f235 : a567             [ 3] 	lda df_prgend
f237 : e565             [ 3] 	sbc df_prgstrt
f239 : 85a3             [ 3] 	sta df_tmpptrb
f23b : a568             [ 3] 	lda df_prgend+1
f23d : e566             [ 3] 	sbc df_prgstrt+1
f23f : 85a4             [ 3] 	sta df_tmpptrb+1
                             	; now save bytes
f241 : 209ef2           [ 6] 	jsr df_rt_savebin
                             
                             	; now save the variables VVT and VNT
f244 : a569             [ 3] 	lda df_vntstrt
f246 : 85a1             [ 3] 	sta df_tmpptra
f248 : a56a             [ 3] 	lda df_vntstrt+1
f24a : 85a2             [ 3] 	sta df_tmpptra+1
                             	; save length
f24c : 38               [ 2] 	sec
f24d : a56d             [ 3] 	lda df_vvtstrt
f24f : e569             [ 3] 	sbc df_vntstrt
f251 : 85a3             [ 3] 	sta df_tmpptrb
f253 : a56e             [ 3] 	lda df_vvtstrt+1
f255 : e56a             [ 3] 	sbc df_vntstrt+1
f257 : 85a4             [ 3] 	sta df_tmpptrb+1
                             	; now save bytes
f259 : 209ef2           [ 6] 	jsr df_rt_savebin
                             
                             	; close the file
f25c : 201bc4           [ 6] 	jsr io_close
f25f : 18               [ 2] 	clc
                             	; Close the file
f260 : 4c7df1           [ 3] 	jmp df_rt_file_cleanup
                             
                             
                             ; load dflat tokenised program as binary
f263 :                       df_rt_load
f263 : 20b4f1           [ 6] 	jsr df_rt_openforbinload
                             
                             	; Get zero page header
f266 : 207ff2           [ 6] 	jsr df_rt_getbin_parms
                             	; and get bytes
AS65 Assembler for R6502 [1.42].                                     Page  238
-------------------------------- bank\bank0.s --------------------------------

f269 : 208cf2           [ 6] 	jsr df_rt_loadbin
                             
                             	; Get program header
f26c : 207ff2           [ 6] 	jsr df_rt_getbin_parms
                             	; and get bytes
f26f : 208cf2           [ 6] 	jsr df_rt_loadbin
                             
                             	; Get variables header
f272 : 207ff2           [ 6] 	jsr df_rt_getbin_parms
                             	; and get bytes
f275 : 208cf2           [ 6] 	jsr df_rt_loadbin
                             
                             	; close the file
f278 : 201bc4           [ 6] 	jsr io_close
f27b : 18               [ 2] 	clc
                             	; Close the file
f27c : 4c7df1           [ 3] 	jmp df_rt_file_cleanup
                             
                             
                             ; Utility to get 4 parms from binary header
f27f :                       df_rt_getbin_parms
f27f : a200             [ 2] 	ldx #0
f281 :                       df_rt_getbin_parms_loop
f281 : 200fc4           [ 6] 	jsr io_get_ch
f284 : 95a1             [ 4] 	sta df_tmpptra,x
f286 : e8               [ 2] 	inx
f287 : e004             [ 2] 	cpx #4
f289 : d0f6             [ 3] 	bne df_rt_getbin_parms_loop
f28b : 60               [ 6] 	rts
                             
                             ; Utility to load a bin file in address ptra
                             ; Length in ptr b
f28c :                       df_rt_loadbin
                             	; Now load all bytes
f28c : a000             [ 2] 	ldy #0
f28e :                       df_rt_loadbin_byte
                             	; Get a byte from tape
f28e : 200fc4           [ 6] 	jsr io_get_ch
                             	; Save it to destination
f291 : 91a1             [ 5] 	sta (df_tmpptra),y
                             	; Increment destination
f293 : c8               [ 2] 	iny
f294 : d002             [ 3] 	bne df_rt_loadbin_inc
f296 : e6a2             [ 5] 	inc df_tmpptra+1
f298 :                       df_rt_loadbin_inc
                             	; Decrement length remaining
f298 : 20bcf2           [ 6] 	jsr df_rt_dec_binlen
                             	; Not done, do another byte
f29b : d0f1             [ 3] 	bne df_rt_loadbin_byte
                             	; Yes the close the file
f29d : 60               [ 6] 	rts
                             
                             ; Utility to save a bin file from address ptra
                             ; Length in ptr b
f29e :                       df_rt_savebin
                             	; Save dest and length to tape
f29e : a200             [ 2] 	ldx #0
f2a0 :                       df_rt_bsave_parms
f2a0 : b5a1             [ 4] 	lda df_tmpptra,x
f2a2 : 2012c4           [ 6] 	jsr io_put_ch
f2a5 : e8               [ 2] 	inx
f2a6 : e004             [ 2] 	cpx #4
AS65 Assembler for R6502 [1.42].                                     Page  239
-------------------------------- bank\bank0.s --------------------------------

f2a8 : d0f6             [ 3] 	bne df_rt_bsave_parms
                             
                             	; Now save all bytes
f2aa : a000             [ 2] 	ldy #0
f2ac :                       df_rt_savebin_byte
                             	; Get byte from memory
f2ac : b1a1             [ 5] 	lda (df_tmpptra),y
                             	; Put byte to tape
f2ae : 2012c4           [ 6] 	jsr io_put_ch
                             	; Increment destination
f2b1 : c8               [ 2] 	iny
f2b2 : d002             [ 3] 	bne df_rt_savebin_inc
f2b4 : e6a2             [ 5] 	inc df_tmpptra+1
f2b6 :                       df_rt_savebin_inc
                             	; Decrement length remaining
f2b6 : 20bcf2           [ 6] 	jsr df_rt_dec_binlen
                             	; Not done, do another byte
f2b9 : d0f1             [ 3] 	bne df_rt_savebin_byte
f2bb : 60               [ 6] 	rts
                             
                             ; Decrement length in ptrb
f2bc :                       df_rt_dec_binlen
                             	; Decrement length remaining
f2bc : a5a3             [ 3] 	lda df_tmpptrb
f2be : d002             [ 3] 	bne df_rt_binlen_skip
f2c0 : c6a4             [ 5] 	dec df_tmpptrb+1
f2c2 :                       df_rt_binlen_skip
f2c2 : c6a3             [ 5] 	dec df_tmpptrb
                             	; Reached zero?
f2c4 : a5a3             [ 3] 	lda df_tmpptrb
f2c6 : 05a4             [ 3] 	ora df_tmpptrb+1
f2c8 : 60               [ 6] 	rts
                             
                             
                             ; reset var
f2c9 :                       df_rt_reset
                             	; now get lvar X,A from current statement
f2c9 : 200ee5           [ 6] 	jsr df_rt_getlvar
                             	; save lvar in tmpb, vvt ptr in tmpa
f2cc : 86a3             [ 3] 	stx df_tmpptrb
f2ce : 85a4             [ 3] 	sta df_tmpptrb+1
                             	; load the vdp count as the reset value of timer
                             	; turn off interrupts while reading vdp lo,hi
f2d0 : a000             [ 2] 	ldy #0	; This is in readiness to read high byte 
                             	; clear interrupts to access 3 byte vdp counter 
f2d2 : 78               [ 2] 	sei
f2d3 : a508             [ 3] 	lda vdp_cnt
f2d5 : 91a3             [ 5] 	sta (df_tmpptrb),y
f2d7 : a509             [ 3] 	lda vdp_cnt+1
f2d9 : c8               [ 2] 	iny
f2da : 91a3             [ 5] 	sta (df_tmpptrb),y
                             	; restore interrupts asap
f2dc : 58               [ 2] 	cli
f2dd : 60               [ 6] 	rts
                             
                             ;***** FUNCTIONS *****
                             
f2de :                       df_rt_deek
f2de : 38               [ 2] 	sec
f2df : b001             [ 3] 	bcs df_rt_readbyte
f2e1 :                       df_rt_peek
f2e1 : 18               [ 2] 	clc
AS65 Assembler for R6502 [1.42].                                     Page  240
-------------------------------- bank\bank0.s --------------------------------

f2e2 :                       df_rt_readbyte
f2e2 : 08               [ 3] 	php
                             ;	inc df_exeoff
f2e3 : 2076e0           [ 6] 	jsr df_rt_getnval
f2e6 : 86a1             [ 3] 	stx df_tmpptra
f2e8 : 85a2             [ 3] 	sta df_tmpptra+1
f2ea : a000             [ 2] 	ldy #0
f2ec : b1a1             [ 5] 	lda (df_tmpptra),y
f2ee : aa               [ 2] 	tax
f2ef : a900             [ 2] 	lda #0
f2f1 : 28               [ 4] 	plp
f2f2 : 9003             [ 3] 	bcc df_rt_readbyte_skip
f2f4 : c8               [ 2] 	iny
f2f5 : b1a1             [ 5] 	lda (df_tmpptra),y
f2f7 :                       df_rt_readbyte_skip
f2f7 : 4ce5f6           [ 3] 	jmp df_ost_pushInt
                             
                             ; Random number generator
                             ; rnd(0) = get next number
                             ; rnd(>0) = set seed
f2fa :                       df_rt_rnd
                             ;	inc df_exeoff
f2fa : 2076e0           [ 6] 	jsr df_rt_getnval
                             	; if input is 0 then generate next random number
f2fd : e000             [ 2] 	cpx #0
f2ff : d014             [ 4] 	bne df_rt_rnd_set
f301 : c900             [ 2] 	cmp #0
f303 : d010             [ 3] 	bne df_rt_rnd_set
                             	; generate next number
f305 : a598             [ 3] 	lda df_rnd+1
f307 : 4a               [ 2] 	lsr a
f308 : 2697             [ 5] 	rol df_rnd
f30a : 9002             [ 3] 	bcc df_rt_rnd_noeor
f30c : 49b4             [ 2] 	eor #0xb4
f30e :                       df_rt_rnd_noeor
f30e : 8598             [ 3] 	sta df_rnd+1
f310 : 4597             [ 3] 	eor df_rnd
f312 : 4ce9f6           [ 3] 	jmp df_ost_pushIntA
                             	; else set the seed to that number and done
f315 :                       df_rt_rnd_set
f315 : 8697             [ 3] 	stx df_rnd
f317 : 8598             [ 3] 	sta df_rnd+1
f319 : 4ce5f6           [ 3] 	jmp df_ost_pushInt
                             
                             
                             ;* Return memory footprint as follows:
                             ;* 0	Return free memory (start of vvt - end of he
                             ;* 1	Return program size (end of prg - start of p
                             ;* 2	Return size of vars (end of vnt - start of v
f31c :                       df_rt_mem
                             ;	inc df_exeoff
f31c : 2076e0           [ 6] 	jsr df_rt_getnval
                             	; only low byte is used
f31f : e001             [ 2] 	cpx #1
f321 : f017             [ 3] 	beq df_rt_mem_prg
f323 : e002             [ 2] 	cpx #2
f325 : f026             [ 3] 	beq df_rt_mem_var
                             	; default is free memory
f327 :                       df_rt_mem_free
                             	_cpyZPWord df_vvtstrt,df_tmpptra
                             
                             	_cpyZPWord df_starend,df_tmpptrb
AS65 Assembler for R6502 [1.42].                                     Page  241
-------------------------------- bank\bank0.s --------------------------------

                             
f337 : 4c5df3           [ 3] 	jmp df_rt_mem_calc
f33a :                       df_rt_mem_prg
                             	_cpyZPWord df_prgend,df_tmpptra
                             
                             	_cpyZPWord df_prgstrt,df_tmpptrb
                             
f34a : 4c5df3           [ 3] 	jmp df_rt_mem_calc
f34d :                       df_rt_mem_var
                             	_cpyZPWord df_vvtstrt,df_tmpptra
                             
                             	_cpyZPWord df_vntstrt,df_tmpptrb
                             
f35d :                       df_rt_mem_calc
                             	; tmpa-tmpb result in X,A
f35d : 38               [ 2] 	sec
f35e : a5a1             [ 3] 	lda df_tmpptra
f360 : e5a3             [ 3] 	sbc df_tmpptrb
f362 : aa               [ 2] 	tax
f363 : a5a2             [ 3] 	lda df_tmpptra+1
f365 : e5a4             [ 3] 	sbc df_tmpptrb+1
f367 : 4ce5f6           [ 3] 	jmp df_ost_pushInt
                             
                             ;* a=stick()
                             ;* returns bit condition of joystick positions
                             ;* no actual joystick support so this is
                             ;* Check for fire | down | up | right | left
                             ;*        bit  4     3      2     1       0
f36a :                       df_rt_stick
                             ;	inc df_exeoff
f36a : 2037c7           [ 6] 	jsr kb_stick				; Get pos in to A
f36d : 4ce9f6           [ 3] 	jmp df_ost_pushIntA
                             
                             ; k=get(sync) sync>=1 means sync
f370 :                       df_rt_get
                             ;	inc df_exeoff
f370 : 2076e0           [ 6] 	jsr df_rt_getnval
                             	; only low byte is used, check for sync or async
                             	; c=0 if x<1 else x>=1 makes c=1
f373 : e001             [ 2] 	cpx #1
f375 :                       df_rt_get_sync
f375 : 08               [ 3] 	php
f376 : 200fc4           [ 6] 	jsr io_get_ch				; Return in A, C=0 is good
f379 : 9005             [ 3] 	bcc df_rt_get_pushp			; Push A (and do plp)
f37b : 28               [ 4] 	plp
f37c : b0f7             [ 3] 	bcs df_rt_get_sync			; If sync then check again
f37e : 9001             [ 3] 	bcc df_rt_get_push			; Else push zero (no plp)
f380 :                       df_rt_get_pushp
f380 : 28               [ 4] 	plp
f381 :                       df_rt_get_push
f381 : 4ce9f6           [ 3] 	jmp df_ost_pushIntA
                             
                             ; s = scrn(x,y)
f384 :                       df_rt_scrn
                             ;	inc df_exeoff
f384 : 2058e3           [ 6] 	jsr df_rt_parm_2ints
f387 : a4a1             [ 3] 	ldy df_tmpptra			; Y is the x coord!
f389 : a6a3             [ 3] 	ldx df_tmpptrb			; X is the y coord!
f38b : 2089cd           [ 6] 	jsr gr_get
f38e : 4ce9f6           [ 3] 	jmp df_ost_pushIntA
                             
                             ; p = pixel(x,y)
AS65 Assembler for R6502 [1.42].                                     Page  242
-------------------------------- bank\bank0.s --------------------------------

f391 :                       df_rt_pixel
                             ;	inc df_exeoff
f391 : 2058e3           [ 6] 	jsr df_rt_parm_2ints
f394 : a6a1             [ 3] 	ldx df_tmpptra
f396 : a4a3             [ 3] 	ldy df_tmpptrb
f398 : 20fdcf           [ 6] 	jsr gr_pixel
f39b : 4ce9f6           [ 3] 	jmp df_ost_pushIntA
                             
                             
                             ; e=elapsed(var)
f39e :                       df_rt_elapsed
                             	; now get lvar X,A from current statement
f39e : 200ee5           [ 6] 	jsr df_rt_getlvar
f3a1 : e688             [ 5] 	inc df_exeoff
                             	; save lvar in tmpb, vvt ptr in tmpa
f3a3 : 86a3             [ 3] 	stx df_tmpptrb
f3a5 : 85a4             [ 3] 	sta df_tmpptrb+1
                             	; subtract vdp counter from value
                             	; turn off interrupts while reading vdp lo,hi
f3a7 : a000             [ 2] 	ldy #0	; This is in readiness to read high byte 
f3a9 : 38               [ 2] 	sec
                             	; disable interrupts to access vdp counter
f3aa : 78               [ 2] 	sei
f3ab : a508             [ 3] 	lda vdp_cnt
f3ad : f1a3             [ 5] 	sbc (df_tmpptrb),y
f3af : aa               [ 2] 	tax
f3b0 : a509             [ 3] 	lda vdp_cnt+1
                             	; restore interrupts asap
f3b2 : 58               [ 2] 	cli
f3b3 : c8               [ 2] 	iny
f3b4 : f1a3             [ 5] 	sbc (df_tmpptrb),y
f3b6 : 4ce5f6           [ 3] 	jmp df_ost_pushInt
                             
f3b9 :                       df_rt_call
                             ;	inc df_exeoff
f3b9 : 2092e3           [ 6] 	jsr df_rt_parm_4ints
f3bc : a5a3             [ 3] 	lda df_tmpptrb				; load A
f3be : a6a5             [ 3] 	ldx	df_tmpptrc				; load X
f3c0 : a4a7             [ 3] 	ldy df_tmpptrd				; load Y
f3c2 : 20c8f3           [ 6] 	jsr df_rt_calljsr
f3c5 :                       df_rt_push_int1
f3c5 : 4ce5f6           [ 3] 	jmp df_ost_pushInt			; A,X pair is return value
f3c8 :                       df_rt_calljsr
f3c8 : 6ca100           [ 6] 	jmp (df_tmpptra)			; tmpptra is address, return 
                             
f3cb :                       df_rt_sgn
                             ;	inc df_exeoff
f3cb : 2076e0           [ 6] 	jsr df_rt_getnval
f3ce : 86a1             [ 3] 	stx df_tmpptra
f3d0 : 05a1             [ 3] 	ora df_tmpptra
f3d2 : f00f             [ 3] 	beq df_rt_sgn_z
f3d4 : 2980             [ 2] 	and #0x80
f3d6 : d006             [ 3] 	bne df_rt_sgn_n
f3d8 : a201             [ 2] 	ldx #1
f3da : a900             [ 2] 	lda #0
f3dc : f0e7             [ 3] 	beq df_rt_push_int1			; Always
f3de :                       df_rt_sgn_n
f3de : a2ff             [ 2] 	ldx #0xff
f3e0 : 8a               [ 2] 	txa
f3e1 : d0e2             [ 3] 	bne df_rt_push_int1			; Always
f3e3 :                       df_rt_sgn_z
f3e3 : a200             [ 2] 	ldx #0
AS65 Assembler for R6502 [1.42].                                     Page  243
-------------------------------- bank\bank0.s --------------------------------

f3e5 : 8a               [ 2] 	txa
f3e6 : f0dd             [ 3] 	beq df_rt_push_int1			; Always
                             
                             ; addr(X)
f3e8 :                       df_rt_addr
                             	; get lvar X,A from current statement
f3e8 : 200ee5           [ 6] 	jsr df_rt_getlvar
f3eb : e688             [ 5] 	inc df_exeoff
f3ed : 4ce5f6           [ 3] 	jmp df_ost_pushInt
                             
                             ; string length calculator
                             ; X,A = source
                             ; A = length not including zero
f3f0 :                       df_rt_strlen_common
f3f0 : 86a1             [ 3] 	stx df_tmpptra
f3f2 : 85a2             [ 3] 	sta df_tmpptra+1
f3f4 : a0ff             [ 2] 	ldy #0xff
f3f6 :                       df_rt_strlen_count
f3f6 : c8               [ 2] 	iny
f3f7 : b1a1             [ 5] 	lda (df_tmpptra),y
f3f9 : d0fb             [ 3] 	bne df_rt_strlen_count
f3fb : 98               [ 2] 	tya
f3fc : 60               [ 6] 	rts
                             
                             
                             ; common routine to extract a string
                             ; tmpa = source string
                             ; tmpb = dest string
                             ; tmpc = start pos
                             ; tmpd = endpos
f3fd :                       df_rt_str_extract
                             	; source string
f3fd : 201df7           [ 6] 	jsr df_ost_popStr
f400 : 86a1             [ 3] 	stx df_tmpptra
f402 : 85a2             [ 3] 	sta df_tmpptra+1
                             	; destination is string accumulator
f404 : a57a             [ 3] 	lda df_sevalptr
f406 : 85a3             [ 3] 	sta df_tmpptrb
f408 : a57b             [ 3] 	lda df_sevalptr+1
f40a : 85a4             [ 3] 	sta df_tmpptrb+1
                             	; start pos
f40c : a4a5             [ 3] 	ldy df_tmpptrc
f40e : a200             [ 2] 	ldx #0
f410 :                       df_rt_str_cpy_ch
f410 : c4a7             [ 3] 	cpy df_tmpptrd
f412 : f011             [ 3] 	beq df_str_src_end
f414 : b1a1             [ 5] 	lda (df_tmpptra),y
f416 : f00d             [ 3] 	beq df_str_src_end
f418 : 81a3             [ 6] 	sta (df_tmpptrb,x)
                             	_incZPWord df_tmpptrb
                             
f420 : c8               [ 2] 	iny
f421 : d0ed             [ 3] 	bne df_rt_str_cpy_ch
                             	SWBRK DFERR_STRLONG
                             
f425 :                       df_str_src_end
f425 : a900             [ 2] 	lda #0
f427 : 81a3             [ 6] 	sta (df_tmpptrb,x)
f429 : a67a             [ 3] 	ldx df_sevalptr
f42b : a57b             [ 3] 	lda df_sevalptr+1
f42d : 4cf0f6           [ 3] 	jmp df_ost_pushStr
                             
AS65 Assembler for R6502 [1.42].                                     Page  244
-------------------------------- bank\bank0.s --------------------------------

                             ; $c = chr(x)
f430 :                       df_rt_chr
                             ;	inc df_exeoff
                             	; get char in X
f430 : 2076e0           [ 6] 	jsr df_rt_getnval
f433 : a000             [ 2] 	ldy #0
                             	; transfer lo byte to A
f435 : 8a               [ 2] 	txa
f436 : 917a             [ 5] 	sta (df_sevalptr),y
f438 : c8               [ 2] 	iny
                             	; zero terminator
f439 : a900             [ 2] 	lda #0
f43b : 917a             [ 5] 	sta (df_sevalptr),y
                             	; point to seval scratch area
f43d : a67a             [ 3] 	ldx df_sevalptr
f43f : a57b             [ 3] 	lda df_sevalptr+1
f441 : 4cf0f6           [ 3] 	jmp df_ost_pushStr
                             
                             ; $c = hex(x)
f444 :                       df_rt_hex
                             ;	inc df_exeoff
                             	; create hex digits
f444 : 2076e0           [ 6] 	jsr df_rt_getnval
f447 : 85a1             [ 3] 	sta df_tmpptra	; Save the high byte
f449 : 8a               [ 2] 	txa				; Convert low byte first
f44a : 2051c1           [ 6] 	jsr str_a_to_x	; Hex digits in A,X
f44d : 85a3             [ 3] 	sta df_tmpptrb
f44f : 8a               [ 2] 	txa				; Push low digit of low byte from X
f450 : 48               [ 3] 	pha
f451 : a5a3             [ 3] 	lda df_tmpptrb	; Get A back from temp
f453 : 48               [ 3] 	pha				; Push high digit of low byte
f454 : a5a1             [ 3] 	lda df_tmpptra	; Get the high byte
f456 : 2051c1           [ 6] 	jsr str_a_to_x	; Hex digits in A,X
                             	; create string
f459 : a000             [ 2] 	ldy #0			; Index in to string temp area
                             	; hi/hi
f45b : 917a             [ 5] 	sta (df_sevalptr),y
f45d : c8               [ 2] 	iny
                             	; hi/lo
f45e : 8a               [ 2] 	txa
f45f : 917a             [ 5] 	sta (df_sevalptr),y
f461 : c8               [ 2] 	iny
                             	; lo/hi
f462 : 68               [ 4] 	pla
f463 : 917a             [ 5] 	sta (df_sevalptr),y
f465 : c8               [ 2] 	iny
                             	; lo/lo
f466 : 68               [ 4] 	pla
f467 : 917a             [ 5] 	sta (df_sevalptr),y
f469 : c8               [ 2] 	iny
                             	; zero terminator
f46a : a900             [ 2] 	lda #0
f46c : 917a             [ 5] 	sta (df_sevalptr),y
                             	; point to seval scratch area
f46e : a67a             [ 3] 	ldx df_sevalptr
f470 : a57b             [ 3] 	lda df_sevalptr+1
f472 : 4cf0f6           [ 3] 	jmp df_ost_pushStr
                             
                             ; $l = left($s, x)
f475 :                       df_rt_left
                             ;	inc df_exeoff
                             
AS65 Assembler for R6502 [1.42].                                     Page  245
-------------------------------- bank\bank0.s --------------------------------

                             	; first get the string to act on
                             	; point to string accumulator
f475 : 2038e1           [ 6] 	jsr df_rt_seval
                             	; now get the num of chars
f478 : e688             [ 5] 	inc df_exeoff
f47a : 2076e0           [ 6] 	jsr df_rt_getnval
                             	; number of chars to extract
f47d : 86a7             [ 3] 	stx df_tmpptrd
                             	; start position
f47f : a000             [ 2] 	ldy #0
f481 : 84a5             [ 3] 	sty df_tmpptrc
f483 : 4cfdf3           [ 3] 	jmp df_rt_str_extract
                             
                             ; $r = right($s, x)
f486 :                       df_rt_right
                             ;	inc df_exeoff
                             	; first get the string to act on
                             	; point to string accumulator
f486 : 2038e1           [ 6] 	jsr df_rt_seval
                             	; now get the num of chars from the right
f489 : e688             [ 5] 	inc df_exeoff
f48b : 2076e0           [ 6] 	jsr df_rt_getnval
                             	; number of chars to extract from the right
f48e : 86a5             [ 3] 	stx df_tmpptrc
                             	; end pos = len
f490 : a67a             [ 3] 	ldx df_sevalptr
f492 : a57b             [ 3] 	lda df_sevalptr+1
f494 : 20f0f3           [ 6] 	jsr df_rt_strlen_common
f497 : 85a7             [ 3] 	sta df_tmpptrd
                             	; subtract num chars to extract to get start pos
f499 : 38               [ 2] 	sec
f49a : e5a5             [ 3] 	sbc df_tmpptrc
f49c : 85a5             [ 3] 	sta df_tmpptrc
f49e : 4cfdf3           [ 3] 	jmp df_rt_str_extract
                             
                             ; $m = mid($s, x, y)
f4a1 :                       df_rt_mid
                             ;	inc df_exeoff
                             	; first get the string to act on
                             	; point to string accumulator
f4a1 : 2038e1           [ 6] 	jsr df_rt_seval
                             	; now get start of string segment
f4a4 : e688             [ 5] 	inc df_exeoff
f4a6 : 207ce0           [ 6] 	jsr df_rt_neval
                             	; number of chars to extract
f4a9 : e688             [ 5] 	inc df_exeoff
f4ab : 2076e0           [ 6] 	jsr df_rt_getnval
f4ae : 86a7             [ 3] 	stx df_tmpptrd
                             	; start position
f4b0 : 2019f7           [ 6] 	jsr df_ost_popInt
f4b3 : ca               [ 2] 	dex					; zero offset rather than 1
f4b4 : 86a5             [ 3] 	stx df_tmpptrc
                             	; update end pos by adding start pos
f4b6 : 8a               [ 2] 	txa
f4b7 : 18               [ 2] 	clc
f4b8 : 65a7             [ 3] 	adc df_tmpptrd
f4ba : 85a7             [ 3] 	sta df_tmpptrd
f4bc : 4cfdf3           [ 3] 	jmp df_rt_str_extract
                             
                             ; %l = len($s)
f4bf :                       df_rt_len
                             ;	inc df_exeoff
AS65 Assembler for R6502 [1.42].                                     Page  246
-------------------------------- bank\bank0.s --------------------------------

                             	; evaluate the string in the string accumulator
f4bf : 2038e1           [ 6] 	jsr df_rt_seval
f4c2 : 201df7           [ 6] 	jsr df_ost_popStr
                             	; now calculate the length of this string
f4c5 : 20f0f3           [ 6] 	jsr df_rt_strlen_common
f4c8 : 4ce9f6           [ 3] 	jmp df_ost_pushIntA
                             
                             ; %l = asc($s)
f4cb :                       df_rt_asc
                             ;	inc df_exeoff
                             	; Evaluate string in the string accumulator
f4cb : 2038e1           [ 6] 	jsr df_rt_seval
f4ce : 201df7           [ 6] 	jsr df_ost_popStr
                             	; Store point in ZP
f4d1 : 86a1             [ 3] 	stx df_tmpptra
f4d3 : 85a2             [ 3] 	sta df_tmpptra+1
                             	; Find the character at beginning
f4d5 : a200             [ 2] 	ldx #0
f4d7 : a1a1             [ 6] 	lda (df_tmpptra,x)
f4d9 : 4ce9f6           [ 3] 	jmp df_ost_pushIntA
                             
                             ; %l = val($s)
f4dc :                       df_rt_val
                             ;	inc df_exeoff
                             	; evaluate the string
f4dc : 2038e1           [ 6] 	jsr df_rt_seval
f4df : 201df7           [ 6] 	jsr df_ost_popStr
f4e2 : a000             [ 2] 	ldy #0				; any numeric format
f4e4 : 209cc1           [ 6] 	jsr con_n_to_a		; result in num_a
f4e7 : b007             [ 3] 	bcs df_rt_val_err
f4e9 : a63d             [ 3] 	ldx num_a
f4eb : a53e             [ 3] 	lda num_a+1
                             	; Save as an int
f4ed : 4ce5f6           [ 3] 	jmp df_ost_pushInt
f4f0 :                       df_rt_val_err
                             	SWBRK DFERR_TYPEMISM
                             
                             
                             ; stop execution
f4f2 :                       df_rt_abort
                             	SWBRK DFERR_ABORT
                             
                             
f4f4 :                       df_rt_sprchar
f4f4 : 2058e3           [ 6] 	jsr df_rt_parm_2ints
f4f7 : a5a1             [ 3] 	lda df_tmpptra
f4f9 : a6a3             [ 3] 	ldx df_tmpptrb
f4fb : 4c6ed2           [ 3] 	jmp gr_spr_char
                             
f4fe :                       df_rt_sprpos
f4fe : 206fe3           [ 6] 	jsr df_rt_parm_3ints
f501 : a5a1             [ 3] 	lda df_tmpptra
f503 : a6a3             [ 3] 	ldx df_tmpptrb
f505 : a4a5             [ 3] 	ldy df_tmpptrc
f507 : 4c7ed2           [ 3] 	jmp gr_spr_pos
                             
f50a :                       df_rt_sprupd
f50a : 2009d2           [ 6] 	jsr gr_spr_erase
f50d : 201bd2           [ 6] 	jsr gr_spr_new
f510 : 4c4dd2           [ 3] 	jmp gr_spr_draw
                             
f513 :                       df_rt_sprinit
AS65 Assembler for R6502 [1.42].                                     Page  247
-------------------------------- bank\bank0.s --------------------------------

f513 : 4cfbd1           [ 3] 	jmp gr_spr_init
                             
f516 :                       df_rt_sprmulti
f516 : 2058e3           [ 6] 	jsr df_rt_parm_2ints
f519 : 4c8bd2           [ 3] 	jmp gr_spr_multi_pos
                             
f51c :                       df_rt_sprhit
                             ;	inc df_exeoff
f51c : 2076e0           [ 6] 	jsr df_rt_getnval
f51f : 8a               [ 2] 	txa
f520 : 2074d2           [ 6] 	jsr gr_spr_hit
f523 : b003             [ 3] 	bcs df_rt_sprhit_inactive
                             	; Active sprite hit = background
f525 : 4ce9f6           [ 3] 	jmp df_ost_pushIntA
f528 :                       df_rt_sprhit_inactive
                             	; Inactive sprite hit = -1
f528 : a2ff             [ 2] 	ldx #0xff
f52a : 8a               [ 2] 	txa
f52b : 4ce5f6           [ 3] 	jmp df_ost_pushInt
                             
                             
f52e :                       mod_sz_rtsubs_e
                             
                             
                             	include "dflat/proc.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  PROC.S
                             ;*  dflat module to handle procedures:
                             ;*  - executing a procedure
                             ;*  - find a proc, pass local and non-local param
                             ;*  - return from a proc, unload locals
                             ;*  - save the definition of a proc in the VNT an
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code  
                             
f52e :                       mod_sz_proc_s
                             
f52e :                       df_rt_proc_parmerr
f52e :                       df_rt_deferr
                             	SWBRK DFERR_PROCPARM
                             
                             
                             
                             ; call procedure
f530 :                       df_rt_proc
                             	; move past escape token
f530 : a488             [ 3] 	ldy df_exeoff
f532 : c8               [ 2] 	iny
                             	; Get VVT address X,A and procptr
f533 : b186             [ 5] 	lda (df_currlin),y
f535 : aa               [ 2] 	tax
f536 : c8               [ 2] 	iny
AS65 Assembler for R6502 [1.42].                                     Page  248
-------------------------------- bank\bank0.s --------------------------------

f537 : b186             [ 5] 	lda (df_currlin),y
f539 : c8               [ 2] 	iny
f53a : 8488             [ 3] 	sty df_exeoff
f53c : 868e             [ 3] 	stx df_procptr
f53e : 858f             [ 3] 	sta df_procptr+1
                             	
                             	; is index 0 (held in dim1)
                             	; then need to find the procedure
f540 : a003             [ 2] 	ldy #DFVVT_DIM1
f542 : b18e             [ 5] 	lda (df_procptr),y
f544 : d014             [ 3] 	bne df_rt_proc_addr
                             	; find proc
f546 : 20ace4           [ 6] 	jsr df_rt_findproc
                             	; save y (line index)
f549 : 8438             [ 3] 	sty tmp_d
                             	; now go and update the proc vvt address
f54b : a002             [ 2] 	ldy #DFVVT_HI
f54d : 918e             [ 5] 	sta (df_procptr),y
f54f : a001             [ 2] 	ldy #DFVVT_LO
f551 : 8a               [ 2] 	txa
f552 : 918e             [ 5] 	sta (df_procptr),y
f554 : a003             [ 2] 	ldy #DFVVT_DIM1
                             	; get back line index in to A
f556 : a538             [ 3] 	lda tmp_d
f558 : 918e             [ 5] 	sta (df_procptr),y
f55a :                       df_rt_proc_addr
                             	; move past first open bracket
f55a : e688             [ 5] 	inc df_exeoff
                             	
                             	; get parm count
f55c : a004             [ 2] 	ldy #DFVVT_DIM2
f55e : b18e             [ 5] 	lda (df_procptr),y	
f560 : f018             [ 3] 	beq df_rt_proc_parm_none
                             	; push the right number of parms on
f562 : 48               [ 3] 	pha
                             
f563 : c688             [ 5] 	dec df_exeoff		; Pre-adjust
f565 :                       df_rt_proc_push_parm
                             	; move past comma or opening bracket
f565 : e688             [ 5] 	inc df_exeoff
                             	; if at end then error!
f567 : a488             [ 3] 	ldy df_exeoff
f569 : b186             [ 5] 	lda (df_currlin),y
f56b : c929             [ 2] 	cmp #')'
f56d : f0bf             [ 3] 	beq df_rt_proc_parmerr
                             	; else try and evaluate
f56f : 207ce0           [ 6] 	jsr df_rt_neval
                             	; get parm count off stack
f572 : 68               [ 4] 	pla
                             	; decrement
f573 : 38               [ 2] 	sec
f574 : e901             [ 2] 	sbc #1
                             	; and put back on stack
f576 : 48               [ 3] 	pha
                             	; go back and do all required parms
f577 : d0ec             [ 3] 	bne df_rt_proc_push_parm
                             	; remove parm counter from stack
f579 :                       df_rt_proc_parm_done
f579 : 68               [ 4] 	pla
f57a :                       df_rt_proc_parm_none
                             	; should be at close bracket
f57a : a488             [ 3] 	ldy df_exeoff
AS65 Assembler for R6502 [1.42].                                     Page  249
-------------------------------- bank\bank0.s --------------------------------

f57c : b186             [ 5] 	lda (df_currlin),y
f57e : c929             [ 2] 	cmp #')'
f580 : d0ac             [ 3] 	bne df_rt_proc_parmerr
                             	; should be no more parms
                             	; ok, finally we have all parms on rt stack
                             	; now execute the procedure
                             	; get back the proc address
f582 : a68e             [ 3] 	ldx df_procptr
f584 : a58f             [ 3] 	lda df_procptr+1
f586 : d000             [ 3] 	bne df_rt_exec_proc		; ALWAYS as procptr+1 !=0
                             	
                             ; executing a procedure in VVT slot A,X
f588 :                       df_rt_exec_proc
                             	; save slot address
f588 : 86a1             [ 3] 	stx df_tmpptra
f58a : 85a2             [ 3] 	sta df_tmpptra+1
                             	
                             	; need to save all important vars
f58c : a586             [ 3] 	lda df_currlin
f58e : 48               [ 3] 	pha
f58f : a587             [ 3] 	lda df_currlin+1
f591 : 48               [ 3] 	pha
f592 : a588             [ 3] 	lda df_exeoff
f594 : 48               [ 3] 	pha
f595 : a57f             [ 3] 	lda df_nxtstidx
f597 : 48               [ 3] 	pha
f598 : a580             [ 3] 	lda df_curstidx
f59a : 48               [ 3] 	pha
f59b : a57e             [ 3] 	lda df_eolidx
f59d : 48               [ 3] 	pha
f59e : a593             [ 3] 	lda df_ifnest
f5a0 : 48               [ 3] 	pha
                             
                             	; now initialise the data
f5a1 : a001             [ 2] 	ldy #DFVVT_LO
f5a3 : b1a1             [ 5] 	lda (df_tmpptra),y
f5a5 : 8586             [ 3] 	sta df_currlin
f5a7 : c8               [ 2] 	iny
f5a8 : b1a1             [ 5] 	lda (df_tmpptra),y
f5aa : 8587             [ 3] 	sta df_currlin+1
f5ac : c8               [ 2] 	iny
f5ad : b1a1             [ 5] 	lda (df_tmpptra),y
f5af : 8588             [ 3] 	sta df_exeoff
f5b1 : 8580             [ 3] 	sta df_curstidx
f5b3 : a000             [ 2] 	ldy #0
f5b5 : b186             [ 5] 	lda (df_currlin),y
f5b7 : 857f             [ 3] 	sta df_nxtstidx
                             	; now execute statements
f5b9 : 20d6e3           [ 6] 	jsr df_rt_exec_stat
                             ;	bcs df_rt_exec_proc_err
                             	; now restore the position
f5bc : 68               [ 4] 	pla
f5bd : 8593             [ 3] 	sta df_ifnest
f5bf : 68               [ 4] 	pla
f5c0 : 857e             [ 3] 	sta df_eolidx
f5c2 : 68               [ 4] 	pla
f5c3 : 8580             [ 3] 	sta df_curstidx
f5c5 : 68               [ 4] 	pla
f5c6 : 857f             [ 3] 	sta df_nxtstidx
f5c8 : 68               [ 4] 	pla
f5c9 : 8588             [ 3] 	sta df_exeoff
f5cb : 68               [ 4] 	pla
AS65 Assembler for R6502 [1.42].                                     Page  250
-------------------------------- bank\bank0.s --------------------------------

f5cc : 8587             [ 3] 	sta df_currlin+1
f5ce : 68               [ 4] 	pla
f5cf : 8586             [ 3] 	sta df_currlin
                             	; should be all restored, so return
f5d1 : 60               [ 6] 	rts
                             
                             
f5d2 :                       df_rt_def
                             	; line offset pointing at DFTK_PROC
                             	; skip over PROC address and open bracket
f5d2 : e688             [ 5] 	inc df_exeoff
f5d4 : e688             [ 5] 	inc df_exeoff
f5d6 : e688             [ 5] 	inc df_exeoff
                             	; parms on stack in reverse order to parm list
                             	; so get each parm and type and save to scratch
f5d8 : a201             [ 2] 	ldx #1									; index in to scratch
f5da : 868c             [ 3] 	stx df_procargs							; Proc args is the #args-1
f5dc : a488             [ 3] 	ldy df_exeoff
f5de :                       df_rt_def_find_var
f5de : c8               [ 2] 	iny
f5df : b186             [ 5] 	lda (df_currlin),y
                             	; check if end of parm list
f5e1 : c929             [ 2] 	cmp #')'
f5e3 : f023             [ 4] 	beq df_rt_def_parm_done
                             	; else check if found a variable escape token (<
f5e5 : c911             [ 2] 	cmp #DFTK_VAR
f5e7 : f009             [ 3] 	beq df_rt_def_got_var
                             	; else check if non-local specifier
f5e9 : c926             [ 2] 	cmp #DFTK_VARPARM						; This is a regular ASCII
f5eb : f002             [ 3] 	beq df_rt_def_got_varparm
f5ed : d0ef             [ 3] 	bne df_rt_def_find_var
f5ef :                       df_rt_def_got_varparm
                             	; set high bit
f5ef : 0980             [ 2] 	ora #0x80
                             	; advance over non-local specifier
f5f1 : c8               [ 2] 	iny
f5f2 :                       df_rt_def_got_var
f5f2 : 4980             [ 2] 	eor #0x80			; If was set by '&' qualifier then w
f5f4 : 9d1306           [ 5] 	sta scratch,x		; Save parm type (by value or ref
                             	; get address and save in scratch
f5f7 : c8               [ 2] 	iny
f5f8 : b186             [ 5] 	lda (df_currlin),y
f5fa : 9d3306           [ 5] 	sta scratch+32,x	; Hope 32 params is enough! :-)
f5fd : c8               [ 2] 	iny
f5fe : b186             [ 5] 	lda (df_currlin),y
f600 : 9d5306           [ 5] 	sta scratch+64,x
f603 : e8               [ 2] 	inx
f604 : e68c             [ 5] 	inc df_procargs
f606 : d0d6             [ 4] 	bne df_rt_def_find_var  ; always - relies not ze
f608 :                       df_rt_def_parm_done
                             	; save index that we got to
f608 : 8488             [ 3] 	sty df_exeoff
                             	; save def param list position in temp
f60a : 868b             [ 3] 	stx df_procmode
                             	; all var indices on the operator stack
                             	; now load up variables with parameters
                             	; initially assume no locals
f60c : a900             [ 2] 	lda #0
f60e : 858d             [ 3] 	sta df_procloc
f610 :                       df_rt_def_load_var
f610 : c68c             [ 5] 	dec df_procargs
f612 : f039             [ 3] 	beq df_rt_def_load_var_done
AS65 Assembler for R6502 [1.42].                                     Page  251
-------------------------------- bank\bank0.s --------------------------------

                             	; get var address
f614 : a68b             [ 3] 	ldx df_procmode
f616 : ca               [ 2] 	dex
f617 : bd3306           [ 4] 	lda scratch+32,x
f61a : 85a1             [ 3] 	sta df_tmpptra
f61c : bd5306           [ 4] 	lda scratch+64,x
f61f : 85a2             [ 3] 	sta df_tmpptra+1
f621 : 868b             [ 3] 	stx df_procmode
                             	
f623 : bd1306           [ 4] 	lda scratch,x
                             	; if MSB is clear then this is not a local varia
                             	; so just go an initialise with stacking
f626 : 1009             [ 3] 	bpl df_rt_def_initialise_parm
                             	; else call the local handling code to 
                             	; push the var address on to the runtime stack
f628 : a6a1             [ 3] 	ldx df_tmpptra
f62a : a5a2             [ 3] 	lda df_tmpptra+1
f62c : 2087f6           [ 6] 	jsr df_rt_proc_local
                             	; increment number of locals
f62f : e68d             [ 5] 	inc df_procloc
f631 :                       df_rt_def_initialise_parm
                             	; load type
f631 : a000             [ 2] 	ldy #DFVVT_TYPE
f633 : b1a1             [ 5] 	lda (df_tmpptra),y
                             	; if array or string type then pop pointer from 
f635 : 2984             [ 2] 	and #DFVVT_STR|DFVVT_ARRY
f637 : f006             [ 3] 	beq df_rt_def_load_var_int
f639 : 2021f7           [ 6] 	jsr df_ost_popPtr
f63c : 4c42f6           [ 3] 	jmp df_rt_def_load_var_int_skip
f63f :                       df_rt_def_load_var_int
                             	; must be int pop it from operator stack
f63f : 2019f7           [ 6] 	jsr df_ost_popInt
f642 :                       df_rt_def_load_var_int_skip
                             	; update the variable
f642 : a002             [ 2] 	ldy #DFVVT_HI
f644 : 91a1             [ 5] 	sta (df_tmpptra),y
f646 : 88               [ 2] 	dey
f647 : 8a               [ 2] 	txa
f648 : 91a1             [ 5] 	sta (df_tmpptra),y
                             	
f64a : 4c10f6           [ 3] 	jmp df_rt_def_load_var
f64d :                       df_rt_def_load_var_done
                             	; save the number of local parameters found so t
                             	; be unloaded when the proc ends
f64d : a58d             [ 3] 	lda df_procloc
f64f : 209bf6           [ 6] 	jsr df_rst_pushByte
                             	; continue with next statement
f652 : 18               [ 2] 	clc
f653 : 60               [ 6] 	rts
                             
                             	
                             ; end def for a proc
f654 :                       df_rt_enddef
                             	; unload any locals
f654 : 2060f6           [ 6] 	jsr df_rt_proc_unlocal
                             	; nothing to do - main loop will terminate
f657 : 18               [ 2] 	clc
f658 : 60               [ 6] 	rts
                             	
                             ; return a value
f659 :                       df_rt_return
                             	; evaluate the return and put on the parameter s
AS65 Assembler for R6502 [1.42].                                     Page  252
-------------------------------- bank\bank0.s --------------------------------

f659 : 207ce0           [ 6] 	jsr df_rt_neval
                             	; process this like an end of procedure
f65c : 2054f6           [ 6] 	jsr df_rt_enddef
f65f : 60               [ 6] 	rts
                             	
                             	
                             ; unload any local variables from runtime stack
f660 :                       df_rt_proc_unlocal
f660 : 20a4f6           [ 6] 	jsr df_rst_popByte
f663 : aa               [ 2] 	tax
f664 : f020             [ 3] 	beq df_rt_proc_unload_done
f666 :                       df_rt_proc_unloadvar
f666 : 8a               [ 2] 	txa
f667 : 48               [ 3] 	pha
                             	; var value is popped first then index
                             	; get a word and put in tmpb
f668 : 20c1f6           [ 6] 	jsr df_rst_popWord
f66b : 86a3             [ 3] 	stx df_tmpptrb
f66d : 85a4             [ 3] 	sta df_tmpptrb+1
                             	; get the var address
f66f : 20c1f6           [ 6] 	jsr df_rst_popWord
f672 : 86a1             [ 3] 	stx df_tmpptra
f674 : 85a2             [ 3] 	sta df_tmpptra+1
                             	; store lo byte first
f676 : a001             [ 2] 	ldy #DFVVT_LO
f678 : a5a3             [ 3] 	lda df_tmpptrb
f67a : 91a1             [ 5] 	sta (df_tmpptra),y
                             	; then hi
f67c : c8               [ 2] 	iny
f67d : a5a4             [ 3] 	lda df_tmpptrb+1
f67f : 91a1             [ 5] 	sta (df_tmpptra),y
                             	; restore counter
f681 : 68               [ 4] 	pla
f682 : aa               [ 2] 	tax
f683 : ca               [ 2] 	dex
f684 : d0e0             [ 3] 	bne df_rt_proc_unloadvar
f686 :                       df_rt_proc_unload_done
f686 : 60               [ 6] 	rts
                             	
                             ; push a local variable to the runtime stack
                             ; X,A = var slot
f687 :                       df_rt_proc_local
                             	; save address
f687 : 86a1             [ 3] 	stx df_tmpptra
f689 : 85a2             [ 3] 	sta df_tmpptra+1
                             	; push var slot on rt stack
f68b : 20b3f6           [ 6] 	jsr df_rst_pushWord
f68e :                       df_rt_proc_local_load	
                             	; load x,a with var value lo,hi
f68e : a001             [ 2] 	ldy #DFVVT_LO
f690 : b1a1             [ 5] 	lda (df_tmpptra),y
f692 : aa               [ 2] 	tax
f693 : c8               [ 2] 	iny
f694 : b1a1             [ 5] 	lda (df_tmpptra),y
                             	; push word on to rt stack
f696 : 20b3f6           [ 6] 	jsr df_rst_pushWord
f699 : 18               [ 2] 	clc
f69a : 60               [ 6] 	rts
                             		
f69b :                       mod_sz_proc_e
                             
                             
AS65 Assembler for R6502 [1.42].                                     Page  253
-------------------------------- bank\bank0.s --------------------------------

f69b :                       mod_sz_runtime_e
                             
                             
                             
                             	include "dflat/stack.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  STACK.S
                             ;*  This module implements the dflat software sta
                             ;*  needs a few stacks:
                             ;*  - 6502 stack for expression parsing and reent
                             ;*  - dflat runtime stack for things like for/nex
                             ;*  - dflat parameter stack for passing parameter
                             ;*  The two software stacks are implemented in th
                             ;*  with the runtime stack growing up from 0 and 
                             ;*  operator stack growing down from 255.  Hopefu
                             ;*  don't meet as there are no checks for this at
                             ;*  purely because I want speed over friendliness
                             ;*  I may come to regret this.
                             ;*  I have also added the only runtime memory all
                             ;*  needed by dflat here.  Humourously I have cal
                             ;*  which is taken from the C language, but it on
                             ;*  grab some memory after the of dflat program c
                             ;*  arrays - which of course cannot have storage 
                             ;*  tokenisation time (e.g. because I dimension a
                             ;*  a size from a variable).
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code  
                             
                             
                             ;****************************************
                             ;* Push a byte on to runtime stack
                             ;* A = byte
                             ;****************************************
f69b :                       df_rst_pushByte
f69b : a476             [ 3] 	ldy df_rtstop
f69d : 990005           [ 5] 	sta df_rtstck,y
f6a0 : 88               [ 2] 	dey
f6a1 : 8476             [ 3] 	sty df_rtstop
f6a3 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Pop a byte off runtime stack
                             ;* A = byte
                             ;****************************************
f6a4 :                       df_rst_popByte
f6a4 : a476             [ 3] 	ldy df_rtstop
f6a6 : c8               [ 2] 	iny
f6a7 : b90005           [ 4] 	lda df_rtstck,y
f6aa : 8476             [ 3] 	sty df_rtstop
f6ac : 60               [ 6] 	rts
                             
                             ;****************************************
AS65 Assembler for R6502 [1.42].                                     Page  254
-------------------------------- bank\bank0.s --------------------------------

                             ;* Peek a byte off runtime stack
                             ;* A = byte
                             ;****************************************
f6ad :                       df_rst_peekByte
f6ad : a476             [ 3] 	ldy df_rtstop
                             	; Look at what is below top of stack
                             	; below means the next address up as
                             	; this stack grows downwards like 6502
f6af : b90105           [ 4] 	lda df_rtstck+1,y
f6b2 : 60               [ 6] 	rts
                             	
                             ;****************************************
                             ;* Push a word on to runtime stack
                             ;* X,A = word lo,hi
                             ;****************************************
f6b3 :                       df_rst_pushWord
f6b3 : a476             [ 3] 	ldy df_rtstop
f6b5 : 990005           [ 5] 	sta df_rtstck,y
f6b8 : 88               [ 2] 	dey
f6b9 : 8a               [ 2] 	txa
f6ba : 990005           [ 5] 	sta df_rtstck,y
f6bd : 88               [ 2] 	dey
f6be : 8476             [ 3] 	sty df_rtstop
f6c0 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Pop a word off runtime stack
                             ;* X,A = word lo,hi
                             ;****************************************
f6c1 :                       df_rst_popWord
f6c1 : a476             [ 3] 	ldy df_rtstop
f6c3 : c8               [ 2] 	iny
f6c4 : b90005           [ 4] 	lda df_rtstck,y
f6c7 : aa               [ 2] 	tax
f6c8 : c8               [ 2] 	iny
f6c9 : b90005           [ 4] 	lda df_rtstck,y
f6cc : 8476             [ 3] 	sty df_rtstop
f6ce : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Push a parameter on to parm stack
                             ;* X,A - int
                             ;* Y - type
                             ;****************************************
f6cf :                       df_ost_pushParmX
f6cf : 8438             [ 3] 	sty tmp_d		; Save Type
f6d1 : a477             [ 3] 	ldy df_parmtop	; Get stack index
                             	; push high byte first (A)
f6d3 : 990005           [ 5] 	sta df_rtstck,y
f6d6 : c8               [ 2] 	iny
                             	; push low byte next (X)
f6d7 : 8a               [ 2] 	txa
f6d8 : 990005           [ 5] 	sta df_rtstck,y
f6db : c8               [ 2] 	iny
f6dc : a538             [ 3] 	lda tmp_d		; get Type
f6de : 990005           [ 5] 	sta df_rtstck,y
f6e1 : c8               [ 2] 	iny
                             	; save new top of stack
f6e2 : 8477             [ 3] 	sty df_parmtop
f6e4 : 60               [ 6] 	rts
                             
                             ;****************************************
AS65 Assembler for R6502 [1.42].                                     Page  255
-------------------------------- bank\bank0.s --------------------------------

                             ;* Push an int on to parm stack
                             ;* X,A - int
                             ;****************************************
f6e5 :                       df_ost_pushInt
f6e5 : a001             [ 2] 	ldy #DFST_INT
f6e7 : d0e6             [ 3] 	bne df_ost_pushParmX		; ALWAYS!
                             
                             ;****************************************
                             ;* Push A on to parm stack
                             ;* X,A - int
                             ;****************************************
f6e9 :                       df_ost_pushIntA
f6e9 : a001             [ 2] 	ldy #DFST_INT
f6eb : aa               [ 2] 	tax
f6ec : a900             [ 2] 	lda #0
f6ee : f0df             [ 3] 	beq df_ost_pushParmX		; ALWAYS!
                             
                             ;****************************************
                             ;* Push a string pointer on to parm stack
                             ;* X,A - int
                             ;****************************************
f6f0 :                       df_ost_pushStr
f6f0 : a080             [ 2] 	ldy #DFST_STR
f6f2 : d0db             [ 3] 	bne df_ost_pushParmX		; ALWAYS!
                             
                             ;****************************************
                             ;* Push a general pointer on to parm stack
                             ;* X,A - int
                             ;****************************************
f6f4 :                       df_ost_pushPtr
f6f4 : a0ff             [ 2] 	ldy #0xff
f6f6 : d0d7             [ 3] 	bne df_ost_pushParmX		; ALWAYS!
                             	
                             ;****************************************
                             ;* Pop parameter from the stack
                             ;* X,A - int
                             ;* Y - type expected
                             ;****************************************
f6f8 :                       df_ost_popParmX
f6f8 : 8438             [ 3] 	sty tmp_d
f6fa : a477             [ 3] 	ldy df_parmtop
                             	; pull type first
f6fc : a538             [ 3] 	lda tmp_d
f6fe : 88               [ 2] 	dey
f6ff : 390005           [ 4] 	and df_rtstck,y
f702 : f00d             [ 3] 	beq df_st_typemismatcherr
                             	; pull low byte first
f704 : 88               [ 2] 	dey
f705 : b90005           [ 4] 	lda df_rtstck,y
f708 : aa               [ 2] 	tax
                             	; pull high byte next
f709 : 88               [ 2] 	dey
f70a : b90005           [ 4] 	lda df_rtstck,y
                             	; save new top of stack
f70d : 8477             [ 3] 	sty df_parmtop
f70f : 18               [ 2] 	clc
f710 : 60               [ 6] 	rts
f711 :                       df_st_typemismatcherr
                             	SWBRK DFERR_TYPEMISM
                             
                             
                             ;****************************************
AS65 Assembler for R6502 [1.42].                                     Page  256
-------------------------------- bank\bank0.s --------------------------------

                             ;* Return type on top of stack
                             ;* Y - type
                             ;****************************************
f713 :                       df_ost_peekType
f713 : a477             [ 3] 	ldy df_parmtop
f715 : b9ff04           [ 4] 	lda df_rtstck-1,y
                             ;	tay NO LONGER NEEDED - EVERYWHERE USES A
f718 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Pop an int off parm stack
                             ;* X,A - int
                             ;****************************************
f719 :                       df_ost_popInt
f719 : a001             [ 2] 	ldy #DFST_INT
f71b : d0db             [ 4] 	bne df_ost_popParmX			; ALWAYS!
                             
                             ;****************************************
                             ;* Pop a string pointer off parm stack
                             ;* X,A - int
                             ;****************************************
f71d :                       df_ost_popStr
f71d : a080             [ 2] 	ldy #DFST_STR
f71f : d0d7             [ 4] 	bne df_ost_popParmX			; ALWAYS!
                             	
                             ;****************************************
                             ;* Pop a general pointer off parm stack
                             ;* X,A - int
                             ;****************************************
f721 :                       df_ost_popPtr
f721 : a0ff             [ 2] 	ldy #0xff
f723 : d0d3             [ 4] 	bne df_ost_popParmX			; ALWAYS!
                             	
                             	
                             ;****************************************
                             ;* Allocate space on the heap
                             ;* X, A = Number of bytes to allocate
                             ;* X, A return address of allocated space
                             ;****************************************
f725 :                       df_st_malloc
                             	; save A in Y
f725 : a8               [ 2] 	tay
                             	; save old starend
f726 : a575             [ 3] 	lda df_starend+1
f728 : 48               [ 3] 	pha
f729 : a574             [ 3] 	lda df_starend
f72b : 48               [ 3] 	pha
                             	; restore A from Y
f72c : 98               [ 2] 	tya
                             	; add X,A to starend
f72d : 48               [ 3] 	pha
f72e : 8a               [ 2] 	txa
f72f : 18               [ 2] 	clc
f730 : 6574             [ 3] 	adc df_starend
f732 : 8574             [ 3] 	sta df_starend
f734 : 68               [ 4] 	pla
f735 : 6575             [ 3] 	adc df_starend+1
f737 : 8575             [ 3] 	sta df_starend+1
                             	; return old starend as start of space
f739 : 68               [ 4] 	pla
f73a : aa               [ 2] 	tax
f73b : 68               [ 4] 	pla
AS65 Assembler for R6502 [1.42].                                     Page  257
-------------------------------- bank\bank0.s --------------------------------

f73c : 60               [ 6] 	rts
                             	
                             
                             ;****************************************
                             ;* df_init
                             ;* Initialise dflat language settings
                             ;****************************************
f73d :                       df_init
                             	; Initialise top of memory to default
                             	; This can be overridden by himem command
f73d : a900             [ 2] 	lda #lo(DF_MEMTOP)
f73f : 8d1106           [ 4] 	sta df_memtop
f742 : a998             [ 2] 	lda #hi(DF_MEMTOP)
f744 : 8d1206           [ 4] 	sta df_memtop+1
                             
                             	; Init program space
f747 : 204bf7           [ 6] 	jsr df_clear
                             
                             	; Initialise assembler
                             ;	jsr asm_init
                             
f74a : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* df_clear
                             ;* Initialise program space
                             ;****************************************
f74b :                       df_clear
                             	; Start of program space
f74b : a913             [ 2] 	lda #lo(DF_PROGSTART)
f74d : 8565             [ 3] 	sta df_prgstrt
f74f : 8567             [ 3] 	sta df_prgend
f751 : a907             [ 2] 	lda #hi(DF_PROGSTART)
f753 : 8566             [ 3] 	sta df_prgstrt+1
f755 : 8568             [ 3] 	sta df_prgend+1
                             	; Terminal value in prog space
f757 : a900             [ 2] 	lda #0
f759 : a000             [ 2] 	ldy #0
f75b : 9165             [ 5] 	sta (df_prgstrt),y
                             	; No variables - zero the count
f75d : 8571             [ 3] 	sta df_varcnt
                             
                             	; Variable value table
                             	; Grows down from mem top
f75f : ad1106           [ 4] 	lda df_memtop
f762 : 856d             [ 3] 	sta df_vvtstrt
f764 : 856f             [ 3] 	sta df_vvtend
f766 : ad1206           [ 4] 	lda df_memtop+1
f769 : 856e             [ 3] 	sta df_vvtstrt+1
f76b : 8570             [ 3] 	sta df_vvtend+1
                             
                             	; Variable name table
                             	; Grows down from mem top
f76d : a56d             [ 3] 	lda df_vvtstrt
f76f : 8569             [ 3] 	sta df_vntstrt
f771 : 856b             [ 3] 	sta df_vntend
f773 : a56e             [ 3] 	lda df_vvtstrt+1
f775 : 856a             [ 3] 	sta df_vntstrt+1
f777 : 856c             [ 3] 	sta df_vntend+1
                             
                             	; String accumulator
AS65 Assembler for R6502 [1.42].                                     Page  258
-------------------------------- bank\bank0.s --------------------------------

f779 : a900             [ 2] 	lda #lo(df_raw)
f77b : 857a             [ 3] 	sta df_sevalptr
f77d : a904             [ 2] 	lda #hi(df_raw)
f77f : 857b             [ 3] 	sta df_sevalptr+1
                             
f781 : 60               [ 6] 	rts
                             
f782 :                       mod_sz_dflat_e
                             
                             	include "dflat/error.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  ERROR.S
                             ;*  Error handling module.
                             ;*  Whan an error is thrown using BRK, this modul
                             ;*  displaying the error plus any associated line
                             ;*  if it was running a program.  It then resets 
                             ;*  settings and takes the system back to program
                             ;*  mode.  The message uses the general IO handle
                             ;*  output must be set to the right place else fo
                             ;*	the error message will be written to tape!
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code
                             	include "dflat/error.i"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  ERROR.I
                             ;*  Error definitions file.
                             ;*  The macro to throw an error is elswhere, but 
                             ;*  It issues a 6502 BRK commmand with the next b
                             ;*  the error code.  The BRK handler then picks u
                             ;*  code and shows the appropriate message plus a
                             ;*  number if a program was running.
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code  
                             
                             ; Error message numbers
0000 =                       DFERR_OK		=	0
0001 =                       DFERR_SYNTAX	=	1
0002 =                       DFERR_TYPEMISM	=	2
0003 =                       DFERR_DIM		=	3
0004 =                       DFERR_UNTIL		=	4
0005 =                       DFERR_NOPROC	=	5
0006 =                       DFERR_PROCPARM	=	6
AS65 Assembler for R6502 [1.42].                                     Page  259
-------------------------------- bank\bank0.s --------------------------------

0007 =                       DFERR_IMMEDIATE	=	7
0008 =                       DFERR_UNCLOSEDIF=	8
0009 =                       DFERR_NOIF		=	9
000a =                       DFERR_NEXTFOR	=	10
000b =                       DFERR_FNAME		=	11
000c =                       DFERR_STRLONG	=	12
000d =                       DFERR_BREAK		=	13
000e =                       DFERR_NODATA	=	14
000f =                       DFERR_WEND		=	15
0010 =                       DFERR_NOLINE	=	16
0011 =                       DFERR_RETURN	=	17
0012 =                       DFERR_ABORT		=	18
0013 =                       DFERR_QUANTITY	=	19
0014 =                       DFERR_NOORG		=	20
                             
                             
                             
                             
                             
                             ; Error message table, each msg null terminated
f782 :                       df_tk_errortab
f782 : 4f6b00                	db	"Ok", 0
f785 : 53796e74617800        	db	"Syntax", 0
f78c : 5479706500            	db	"Type", 0
f791 : 52652d64696d00        	db	"Re-dim", 0
f798 : 4e6f2072657065..      	db	"No repeat", 0
f7a2 : 4e6f206465666e00      	db	"No defn", 0
f7aa : 5061726d00            	db	"Parm", 0
f7af : 456e64656400          	db	"Ended", 0
f7b5 : 4e6f20656e6469..      	db	"No endif", 0
f7be : 4e6f20696600          	db	"No if", 0
f7c4 : 4e6f20666f7200        	db	"No for", 0
f7cb : 4e6f7420666f75..      	db	"Not found", 0
f7d5 : 546f6f206c6f6e..      	db	"Too long", 0
f7de : 427265616b00          	db	"Break", 0
f7e4 : 4e6f206461746100      	db	"No data", 0
f7ec : 4e6f207768696c..      	db	"No while", 0
f7f5 : 4e6f206c696e6500      	db	"No line", 0
f7fd : 4e6f2072657475..      	db	"No return ", 0
f808 : 41626f7274656400      	db	"Aborted", 0
f810 : 426f756e647300        	db	"Bounds", 0
f817 : 4e6f206f726700        	db	"No org", 0
f81e : 00                    	db	0
                             
f81f :                       df_tk_error_inline
f81f : 20696e206c696e..      	db	" in line ", 0
f829 :                       df_tk_error_atpos
f829 : 20706f732000          	db	" pos ", 0
f82f :                       df_tk_error_error
f82f : 206572726f7200        	db	" error", 0
                             
                             ;****************************************
                             ;* df_trap_error
                             ;* Show an error message
                             ;* errno is error number
                             ;* currlin = Line number
                             ;* exeoff = offset
                             ;* at the end jump to program editor
                             ;****************************************
f836 :                       df_trap_error
                             	; reset SP
f836 : a65f             [ 3] 	ldx df_sp
AS65 Assembler for R6502 [1.42].                                     Page  260
-------------------------------- bank\bank0.s --------------------------------

f838 : 9a               [ 2] 	txs
                             	; set IO back to normal
f839 : 20e4c4           [ 6] 	jsr init_via0
f83c : 20e6c3           [ 6] 	jsr io_set_default
f83f : 58               [ 2] 	cli
                             
f840 : a982             [ 2] 	lda #lo(df_tk_errortab)
f842 : 85a1             [ 3] 	sta df_tmpptra
f844 : a9f7             [ 2] 	lda #hi(df_tk_errortab)
f846 : 85a2             [ 3] 	sta df_tmpptra+1
f848 : a65d             [ 3] 	ldx errno				; 0 or >=128 goes to monitor
f84a : f004             [ 3] 	beq df_trap_go_monitor
f84c : 3002             [ 3] 	bmi df_trap_go_monitor
f84e : 1003             [ 3] 	bpl df_trap_normal
f850 :                       df_trap_go_monitor
f850 : 4cd4f8           [ 3] 	jmp df_trap_monitor
f853 :                       df_trap_normal
f853 : a000             [ 2] 	ldy #0
f855 :                       df_show_err_find
f855 : e000             [ 2] 	cpx #0
f857 : f018             [ 3] 	beq df_show_err_found
                             	; If on a zero, then error table exhausted
                             	; so drop in to the monitor
f859 : b1a1             [ 5] 	lda (df_tmpptra),y
f85b : f077             [ 3] 	beq df_trap_monitor
f85d :                       df_show_err_skip
                             	_incZPWord df_tmpptra
                             
f863 : b1a1             [ 5] 	lda (df_tmpptra),y
f865 : d0f6             [ 3] 	bne df_show_err_skip
                             	_incZPWord df_tmpptra
                             
f86d : ca               [ 2] 	dex
f86e : 4c55f8           [ 3] 	jmp df_show_err_find
f871 :                       df_show_err_found
f871 : a6a1             [ 3] 	ldx df_tmpptra
f873 : a5a2             [ 3] 	lda df_tmpptra+1
f875 : 2060c4           [ 6] 	jsr io_print_line
f878 : a22f             [ 2] 	ldx #lo(df_tk_error_error)
f87a : a9f8             [ 2] 	lda #hi(df_tk_error_error)
f87c : 2060c4           [ 6] 	jsr io_print_line
                             	; if line number <> 0 then print it
f87f : a001             [ 2] 	ldy #DFTK_LINNUM
f881 : b186             [ 5] 	lda (df_currlin),y
f883 : aa               [ 2] 	tax
f884 : c8               [ 2] 	iny
f885 : b186             [ 5] 	lda (df_currlin),y
f887 : c900             [ 2] 	cmp #0x00
f889 : d006             [ 3] 	bne df_show_err_linnum
f88b : e000             [ 2] 	cpx #0x00
f88d : d002             [ 3] 	bne df_show_err_linnum
f88f : f019             [ 3] 	beq df_show_err_fin
f891 :                       df_show_err_linnum
                             	_println df_tk_error_inline
                             
f8a6 : 18               [ 2] 	clc
f8a7 : 20bbc3           [ 6] 	jsr print_a_to_d
f8aa :                       df_show_err_fin
f8aa : a488             [ 3] 	ldy df_exeoff
f8ac : f01d             [ 3] 	beq df_show_err_done
                             	_println df_tk_error_atpos
                             
AS65 Assembler for R6502 [1.42].                                     Page  261
-------------------------------- bank\bank0.s --------------------------------

f8c3 : 98               [ 2] 	tya
f8c4 : aa               [ 2] 	tax
f8c5 : a900             [ 2] 	lda #0
f8c7 : 18               [ 2] 	clc
f8c8 : 20bbc3           [ 6] 	jsr print_a_to_d
f8cb :                       df_show_err_done
f8cb : a90d             [ 2] 	lda #UTF_CR
f8cd : 2012c4           [ 6] 	jsr io_put_ch
f8d0 : 18               [ 2] 	clc
                             	; back to editor
f8d1 : 4c5cdf           [ 3] 	jmp df_pg_dflat
                             
                             
                             ; For unknown errors, jump to monitor
f8d4 :                       df_trap_monitor
                             	; Print PC
                             	_println_low df_msg_pc
                             
f8db : a563             [ 3] 	lda df_brkpc+1
f8dd : 203cc1           [ 6] 	jsr utilPrintA
f8e0 : a562             [ 3] 	lda df_brkpc
f8e2 : 203cc1           [ 6] 	jsr utilPrintA
f8e5 : 202cc1           [ 6] 	jsr utilPrintSPC
                             
                             	; Print A
                             	_println_low df_msg_acc
                             
f8ef : a53d             [ 3] 	lda num_a
f8f1 : 203cc1           [ 6] 	jsr utilPrintA
f8f4 : 202cc1           [ 6] 	jsr utilPrintSPC
                             
                             	; Print X
                             	_println_low df_msg_xreg
                             
f8fe : a53e             [ 3] 	lda num_a+1
f900 : 203cc1           [ 6] 	jsr utilPrintA
f903 : 202cc1           [ 6] 	jsr utilPrintSPC
                             
                             	; Print Y
                             	_println_low df_msg_yreg
                             
f90d : a53f             [ 3] 	lda num_a+2
f90f : 203cc1           [ 6] 	jsr utilPrintA
f912 : 2034c1           [ 6] 	jsr utilPrintCRLF
                             
f915 : 20f6e7           [ 6] 	jsr df_rt_monitor
                             	; back to editor
f918 : 4c5cdf           [ 3] 	jmp df_pg_dflat
                             
f91b :                       df_msg_pc
f91b : 50433a00              	db "PC:\x0"
f91f :                       df_msg_acc
f91f : 413a00                	db "A:\x0"
f922 :                       df_msg_xreg
f922 : 583a00                	db "X:\x0"
f925 :                       df_msg_yreg
f925 : 593a00                	db "Y:\x0"
                             
                             	include	"dflat/asm.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
AS65 Assembler for R6502 [1.42].                                     Page  262
-------------------------------- bank\bank0.s --------------------------------

                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  ASM.S
                             ;*  This is the main controller code file for the
                             ;*  This file includes all the required source fi
                             ;*	in addition to dflat.s
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code
                             
f928 :                       mod_sz_asm_s
                             
                             	;	dflat.s is already included, so just the addit
                             	include "dflat/asm.i"
                             ;* Addressing modes - 15 in total, 16 with direct
                             ;*  0   Nothing
                             ;*	1 	Absolute			XXX <word>
                             ;*	2 	Absolute,X			XXX <word>,x
                             ;*	3 	Absolute,Y			XXX <word>,y
                             ;*	4	Zeropage			XXX	<byte>
                             ;*	5	Zeropage,X			XXX	<byte>,x
                             ;*	6	Zeropage,Y			XXX	<byte>,y
                             ;*	7	Indirect			XXX	(<byte>)
                             ;*	8	Indirect,X			XXX	(<byte>,x)
                             ;*	9	Indirect,Y			XXX	(<byte>),y
                             ;*	A	Absolute indirect	XXX	(<word>)
                             ;*	B	Absolute indirect,x	XXX	(<word>,x)
                             ;*	C	Immediate			XXX #<byte>
                             ;*	D	Accumulator			XXX (same as implied)
                             ;*	E	Implied				XXX
                             ;*	F	Relative			XXX	<byte>
                             ;*	10	Assembler directive	XXX .......
                             
0000 =                       AM_NONE		= 0
0001 =                       AM_ABS	 	= 1
0002 =                       AM_ABSX		= 2
0003 =                       AM_ABSY		= 3
0004 =                       AM_ZP		= 4
0005 =                       AM_ZPX		= 5
0006 =                       AM_ZPY		= 6
0007 =                       AM_ZPIND	= 7
0008 =                       AM_ZPINDX	= 8
0009 =                       AM_ZPINDY	= 9
000a =                       AM_ABSIND	= 10
000b =                       AM_ABSINDX	= 11
000c =                       AM_IMM		= 12
000d =                       AM_ACC		= 13
000d =                       AM_IMP		= AM_ACC
000f =                       AM_REL		= 15
0010 =                       AM_DIR		= 16
                             
                             
                             
                             	include "dflat/tkasm.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
AS65 Assembler for R6502 [1.42].                                     Page  263
-------------------------------- bank\bank0.s --------------------------------

                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  ASM.S
                             ;*	Module that implements tokenisation of the ass
                             ;* 	The assembler is an extension to dflat, almos
                             ;*	almost a language within a language, as it has
                             ;*	own symbol tables to allow adding new keywords
                             ;*	running out of space in the main symtol table 
                             ;*	for normal 6502 asembler syntax which is at od
                             ;*	regular dflat.
                             ;*	Hence, this module has to do its own additiona
                             ;*	to tokenise the assembly.
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code  
                             
f928 :                       mod_sz_tkasm_s
                             
                             	; if didn't find regular keywords then try assen
f928 :                       df_tk_asm_parse_command
                             	; skip the white space after the dot
f928 : 20edd6           [ 6] 	jsr df_tk_skip_ws
                             	; find the assembler symbol
f92b : 2056f9           [ 6] 	jsr df_tk_asm_matchtok
                             	; if not found then must be a label assignment
f92e : b021             [ 3] 	bcs df_tk_asm_parse_command_symbol
                             	; Get the assembler symbol and put the token
f930 : a583             [ 3] 	lda df_symoff
                             	; Set the MSB
f932 : 0980             [ 2] 	ora #0x80
f934 : 2097d6           [ 6] 	jsr df_tk_put_tok
                             	; check the first addressing mode code
                             	; remember to jump over the offset byte
f937 : a001             [ 2] 	ldy #1
f939 : b181             [ 5] 	lda (df_symtab),y
                             	; Directive?
f93b : c910             [ 2] 	cmp #AM_DIR
f93d : d00c             [ 3] 	bne df_tk_asm_mnemonic
                             	; if directive then process it
f93f : a583             [ 3] 	lda df_symoff
f941 : 20adf9           [ 6] 	jsr df_tk_asm_exec_parser
f944 : b004             [ 3] 	bcs df_tk_asm_parse_command_err
                             	; [1] ignore white space but keep it
f946 : 20edd6           [ 6] 	jsr df_tk_skip_ws
                             	; No error in parsing this command
f949 : 18               [ 2] 	clc
f94a :                       df_tk_asm_parse_command_err
f94a : 60               [ 6] 	rts
f94b :                       df_tk_asm_mnemonic
                             	; for all nmemonics, work out the addressing mod
f94b : 20bcf9           [ 6] 	jsr df_tk_asm_addr_mode
f94e : b0fa             [ 3] 	bcs df_tk_asm_parse_command_err
f950 : 60               [ 6] 	rts
f951 :                       df_tk_asm_parse_command_symbol
                             	; No mask
f951 : a900             [ 2] 	lda #0
f953 : 4cd7d7           [ 3] 	jmp df_tk_var
AS65 Assembler for R6502 [1.42].                                     Page  264
-------------------------------- bank\bank0.s --------------------------------

                             
                             
                             ;****************************************
                             ;* df_tk_asm_matchtok
                             ;* Try and find a token match against the table d
                             ;* Input:
                             ;*			Current df_linbuff and df_linoff
                             ;* Return: 	CC = No Error, CS = Error
                             ;*			df_linoff points to next char if CC else unc
                             ;****************************************
f956 :                       df_tk_asm_matchtok
                             	; Start at token symbols beginning
f956 : a956             [ 2] 	lda #lo(df_asm_tokensyms)
f958 : 8581             [ 3] 	sta df_symtab
f95a : a9fd             [ 2] 	lda #hi(df_asm_tokensyms)
f95c : 8582             [ 3] 	sta df_symtab+1
f95e : a900             [ 2] 	lda #0
f960 : 8583             [ 3] 	sta df_symoff
f962 : a200             [ 2] 	ldx #0
f964 :                       df_tk_asm_checknexttok
                             	; From the line buffer current pointer
                             	; Check for a token match
f964 : a47c             [ 3] 	ldy df_linoff
f966 :                       df_tk_asm_checktokch
                             	; Get symtable char
f966 : a181             [ 6] 	lda (df_symtab,x)
                             	; if less than ascii ' ' then reached end of
                             	; this symbol and everything matched so found!
f968 : c920             [ 2] 	cmp #' '
f96a : 9033             [ 3] 	bcc df_tk_asm_symfound
                             	; Else compare with current line buffer char
f96c : d90004           [ 4] 	cmp df_linbuff,y
                             	; If chars not match then this symbol fails
f96f : d00a             [ 3] 	bne df_tk_asm_symnomatch
                             	; else more chars to match
                             	; so increment line buffer pointers
                             	_incZPWord df_symtab
                             
f977 : c8               [ 2] 	iny
f978 : 4c66f9           [ 3] 	jmp df_tk_asm_checktokch
f97b :                       df_tk_asm_symnomatch
                             	; Increment symbol counter to next symbol
f97b : e683             [ 5] 	inc df_symoff
f97d :                       df_tk_asm_symnextentry
f97d : a181             [ 6] 	lda (df_symtab,x)
                             	; End of symbol is < ' '
f97f : c920             [ 2] 	cmp #' '
f981 : 9009             [ 3] 	bcc  df_tk_asm_foundsymend
                             	_incZPWord df_symtab
                             
f989 : 4c7df9           [ 3] 	jmp df_tk_asm_symnextentry
f98c :                       df_tk_asm_foundsymend
                             	; Now at the offset to jump over addressing
                             	; mode and opcode values. Add offset to ptr
                             	; remember than C is clear and A has offset
                             	; set C so always jump over the offset
f98c : 38               [ 2] 	sec
f98d : 6581             [ 3] 	adc df_symtab
f98f : 8581             [ 3] 	sta df_symtab
f991 : a582             [ 3] 	lda df_symtab+1
f993 : 6900             [ 2] 	adc #0
f995 : 8582             [ 3] 	sta df_symtab+1
AS65 Assembler for R6502 [1.42].                                     Page  265
-------------------------------- bank\bank0.s --------------------------------

                             	; If next char is not zero then
                             	; try and match with line buffer
f997 : a181             [ 6] 	lda (df_symtab,x)
f999 : d0c9             [ 3] 	bne df_tk_asm_checknexttok
                             	; else symbol table exhausted
                             	; so no match found
                             	; Zero symbol counter
f99b : 8583             [ 3] 	sta df_symoff		; Relies on A=0
                             	; Set C to indicate error (no match)
f99d : 38               [ 2] 	sec
f99e : 60               [ 6] 	rts
f99f :                       df_tk_asm_symfound
                             	; Full match with keyword in symtable but
                             	; check the next buffer char is not alphanum
                             	; as this could be part of a symbol
                             	; Point to next buffer char in any case
                             	; y already points to char after keyword
f99f : b90004           [ 4] 	lda df_linbuff,y
                             	; if it is an alphanum then
f9a2 : 20e1d6           [ 6] 	jsr df_tk_isalphanum
                             	; do not count as a match
f9a5 : b0d4             [ 3] 	bcs df_tk_asm_symnomatch
                             	; Save line buffer pointer (points to next char)
                             	; Clear C to indicate success (match)
f9a7 : 847c             [ 3] 	sty df_linoff
f9a9 : a583             [ 3] 	lda df_symoff
                             	; df_symtab points to the offset
f9ab :                       df_tk_asm_addr_mode_ok
f9ab : 18               [ 2] 	clc
f9ac : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* df_tk_asm_exec_parser
                             ;* Execute parse routine for this statement
                             ;* Input: a is the token found
                             ;* Return: CC = Parsed ok, CS = Error
                             ;****************************************
f9ad :                       df_tk_asm_exec_parser
f9ad : 0a               [ 2] 	asl a
f9ae : aa               [ 2] 	tax
f9af : bd82ff           [ 4] 	lda df_tk_asm_tokenjmp,x
f9b2 : 85a1             [ 3] 	sta df_tmpptra
f9b4 : bd83ff           [ 4] 	lda df_tk_asm_tokenjmp+1,x
f9b7 : 85a2             [ 3] 	sta df_tmpptra+1
f9b9 : 6ca100           [ 6] 	jmp (df_tmpptra)
                             
                             
                             ;****************************************
                             ;* df_tk_asm_addr_mode
                             ;* Tokenise the addressing mode
                             ;* Input: a is the token found
                             ;* Return: CC = Parsed ok, CS = Error
                             ;****************************************
f9bc :                       df_tk_asm_addr_mode
f9bc : 20edd6           [ 6] 	jsr df_tk_skip_ws		;Skip whitespace
f9bf : c900             [ 2] 	cmp #0					;End of line?
f9c1 : f0e8             [ 3] 	beq df_tk_asm_addr_mode_ok
f9c3 : c93a             [ 2] 	cmp #':'				;End of statement?
f9c5 : f0e4             [ 3] 	beq df_tk_asm_addr_mode_ok
f9c7 : a923             [ 2] 	lda #'#'				; Check for immediate
f9c9 : 201fd7           [ 6] 	jsr df_tk_expect_tok
f9cc : b003             [ 3] 	bcs df_tk_asm_addr_mode_1
AS65 Assembler for R6502 [1.42].                                     Page  266
-------------------------------- bank\bank0.s --------------------------------

f9ce : 4cf1f9           [ 3] 	jmp df_tk_imm		; Process immediate
f9d1 :                       df_tk_asm_addr_mode_1
f9d1 : a928             [ 2] 	lda #'('				; One of indirect modes?
f9d3 : 201fd7           [ 6] 	jsr df_tk_expect_tok
f9d6 : b003             [ 3] 	bcs df_tk_asm_addr_mode_2
f9d8 : 4cf4f9           [ 3] 	jmp df_tk_indirect
f9db :                       df_tk_asm_addr_mode_2
                             	; here just a regular address
                             	; Just one expression expected
f9db : 201ed9           [ 6] 	jsr df_tk_expression
                             	; Is there a comma after the expression
f9de : a92c             [ 2] 	lda #','
f9e0 : 201fd7           [ 6] 	jsr df_tk_expect_tok
f9e3 : b0c6             [ 3] 	bcs df_tk_asm_addr_mode_ok
                             	; must be x or y
f9e5 : a978             [ 2] 	lda #'x'
f9e7 : 201fd7           [ 6] 	jsr df_tk_expect_tok
f9ea : 90bf             [ 3] 	bcc df_tk_asm_addr_mode_ok
                             	; got to here, must be y
f9ec : a979             [ 2] 	lda #'y'
f9ee : 4c2bd7           [ 3] 	jmp df_tk_expect_tok_err
                             	
                             	
                             ;* Tokenise immediate addressing mode	
f9f1 :                       df_tk_imm
                             	; Just one expression expected
f9f1 : 4c1ed9           [ 3] 	jmp df_tk_expression
                             	
                             ;* Tokenise indirect
f9f4 :                       df_tk_indirect
                             	; Just one expression expected
f9f4 : 201ed9           [ 6] 	jsr df_tk_expression
                             	; Is there a comma after the expression
f9f7 : a92c             [ 2] 	lda #','
f9f9 : 201fd7           [ 6] 	jsr df_tk_expect_tok
                             	; if not then might be indirect Y
f9fc : b00a             [ 4] 	bcs df_tk_indirect_y
                             	; Else must have be indirect "x)"
f9fe : a978             [ 2] 	lda #'x'
fa00 : 202bd7           [ 6] 	jsr df_tk_expect_tok_err
fa03 : a929             [ 2] 	lda #')'
fa05 : 4c2bd7           [ 3] 	jmp df_tk_expect_tok_err
                             	
fa08 :                       df_tk_indirect_y
                             	; Definitely has a close bracket
fa08 : a929             [ 2] 	lda #')'
fa0a : 202bd7           [ 6] 	jsr df_tk_expect_tok_err
                             	; Is there a comma after the expression
fa0d : a92c             [ 2] 	lda #','
fa0f : 201fd7           [ 6] 	jsr df_tk_expect_tok
fa12 : b005             [ 3] 	bcs df_tk_indirect_done
                             	; if comma then must be indirect y
fa14 : a979             [ 2] 	lda #'y'
fa16 : 4c2bd7           [ 3] 	jmp df_tk_expect_tok_err
                             
fa19 :                       df_tk_indirect_done
fa19 : 18               [ 2] 	clc
fa1a : 60               [ 6] 	rts
                             	
                             
                             	
                             
AS65 Assembler for R6502 [1.42].                                     Page  267
-------------------------------- bank\bank0.s --------------------------------

                             
                             ;************************************************
                             ;*           TOKENISATION SUBROUTINES
                             ;************************************************
                             
                             
                             ;* HANDLE DIRECTIVES
                             
                             ;* All tokenisation is part of regular toksub rou
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
fa1b :                       mod_sz_tkasm_e
                             
                             
                             	include "dflat/rtasm.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  RTASM.S
                             ;*  Module that implements the runtime execution 
                             ;*  assembler.
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code  
                             
fa1b :                       mod_sz_rtasm_s
                             
fa1b :                       df_rt_asm_assemble
                             	; check if >=0x80 (directive or mnemonic)
AS65 Assembler for R6502 [1.42].                                     Page  268
-------------------------------- bank\bank0.s --------------------------------

fa1b : a488             [ 3] 	ldy df_exeoff
fa1d : b186             [ 5] 	lda (df_currlin),y
fa1f : c980             [ 2] 	cmp #0x80
fa21 : 9009             [ 3] 	bcc df_rt_asm_do_label
fa23 : 2030fa           [ 6] 	jsr df_rt_asm_command
fa26 : 2034fc           [ 6] 	jsr df_rt_asm_printCR
fa29 : 4c2ffa           [ 3] 	jmp df_rt_asm_assemble_done
fa2c :                       df_rt_asm_do_label
fa2c : 2054fa           [ 6] 	jsr df_rt_asm_label
fa2f :                       df_rt_asm_assemble_done
                             	; any clean up here
fa2f : 60               [ 6] 	rts
                             
                             ; Jump to mnemonic or 
                             ; directive with index in A ignoring MSB
fa30 :                       df_rt_asm_command
fa30 : 297f             [ 2] 	and #0x7f
fa32 : 48               [ 3] 	pha
fa33 : aa               [ 2] 	tax
                             	; Point to Xth symtable entry of addr modes and 
fa34 : 2004fd           [ 6] 	jsr df_rt_asm_skip_to_sym
                             
                             	; Get first addressing mode (ignoring offset byt
fa37 : a001             [ 2] 	ldy #1
fa39 : b181             [ 5] 	lda (df_symtab),y
                             	; is it a directive?
fa3b : c910             [ 2] 	cmp #AM_DIR
                             	; if directive
fa3d : f003             [ 3] 	beq df_rt_asm_dir
                             	; Else must be a normal mnemonic
fa3f : 4c1efb           [ 3] 	jmp df_rt_asm_mnem
                             
                             ; Jump to the appropriate directive
fa42 :                       df_rt_asm_dir
                             	; Get the index and *2
                             	; to get jump vector
fa42 : 68               [ 4] 	pla
fa43 : 0a               [ 2] 	asl a
fa44 : aa               [ 2] 	tax
                             	; jump over directive code
fa45 : e688             [ 5] 	inc df_exeoff
                             	; jump to directive handler
fa47 : bd8cff           [ 4] 	lda df_rt_asm_tokenjmp,x
fa4a : 85a1             [ 3] 	sta df_tmpptra
fa4c : bd8dff           [ 4] 	lda df_rt_asm_tokenjmp+1,x
fa4f : 85a2             [ 3] 	sta df_tmpptra+1
fa51 : 6ca100           [ 6] 	jmp (df_tmpptra)
                             
                             ; Process label
                             ; Set the label to the PC
fa54 :                       df_rt_asm_label
                             	; Get the address of the variable in A,X
fa54 : 201ced           [ 6] 	jsr df_rt_generate_lvar
fa57 : 869e             [ 3] 	stx df_asmoprnd
fa59 : 859f             [ 3] 	sta df_asmoprnd+1
                             	; Assign to value of PC
fa5b : a000             [ 2] 	ldy #0
fa5d : a599             [ 3] 	lda df_asmpc
fa5f : 919e             [ 5] 	sta (df_asmoprnd),y
fa61 : a59a             [ 3] 	lda df_asmpc+1
fa63 : c8               [ 2] 	iny
fa64 : 919e             [ 5] 	sta (df_asmoprnd),y
AS65 Assembler for R6502 [1.42].                                     Page  269
-------------------------------- bank\bank0.s --------------------------------

fa66 : 60               [ 6] 	rts	
                             
                             ;* Set the code origin
fa67 :                       df_rt_asm_org
                             	; Get the address from expression
fa67 : 20e1fc           [ 6] 	jsr df_rt_asm_get_operand
                             	; Put this in to PC
fa6a : a59e             [ 3] 	lda df_asmoprnd
fa6c : 8599             [ 3] 	sta df_asmpc
fa6e : a59f             [ 3] 	lda df_asmoprnd+1
fa70 : 859a             [ 3] 	sta df_asmpc+1
fa72 : a903             [ 2] 	lda #3
fa74 : 85a0             [ 3] 	sta df_asmlen
fa76 : 20f2fb           [ 6] 	jsr df_rt_asm_printPC
fa79 : 60               [ 6] 	rts
                             
                             ; Set the assembly option
                             ; Bit 0 set = Print code to console
                             ; But 1 set = Write code to memory
                             ; Be sure to run 2 non-write passes
                             ; before a write pass
                             ; First pass may result in ZP used a lot
                             ; Second pass resolves forward refs to ABS
                             ; Final write pass then stores the code
fa7a :                       df_rt_asm_opt
                             	; Get the value from expression
fa7a : 20e1fc           [ 6] 	jsr df_rt_asm_get_operand
                             	; Put this in to OPT
fa7d : a59e             [ 3] 	lda df_asmoprnd
fa7f : 859b             [ 3] 	sta df_asmopt
fa81 : 60               [ 6] 	rts
                             
                             ; dw and db handled here
                             ; keep going through comma separated
                             ; list and write bytes or words
                             ; string expansion also handled
fa82 :                       df_rt_asm_db
fa82 : a902             [ 2] 	lda #2
fa84 : 2c                    	db	0x2c			; BIT abs to ignore next 2 bytes
fa85 :                       df_rt_asm_dw
fa85 : a903             [ 2] 	lda #3
fa87 :                       df_rt_asm_db_start
fa87 : 85a0             [ 3] 	sta df_asmlen
fa89 : 20f2fb           [ 6] 	jsr df_rt_asm_printPC
fa8c : 200ffc           [ 6] 	jsr df_rt_asm_printSPC
fa8f :                       df_rt_asm_data
fa8f : 207ce0           [ 6] 	jsr df_rt_neval		; Evaluate expression
fa92 : 2013f7           [ 6] 	jsr df_ost_peekType	; What is the type
fa95 : c980             [ 2] 	cmp #0x80			; If string
fa97 : b00d             [ 3] 	bcs df_rt_asm_string
fa99 : 2019f7           [ 6] 	jsr df_ost_popInt	; else get number in A,X
fa9c : 869e             [ 3] 	stx df_asmoprnd		; store low value
fa9e : 859f             [ 3] 	sta df_asmoprnd+1	; store high value
faa0 : 20cefa           [ 6] 	jsr df_rt_asm_data_write
faa3 : 4cc3fa           [ 3] 	jmp df_rt_asm_data_next
faa6 :                       df_rt_asm_string
faa6 : 2021f7           [ 6] 	jsr df_ost_popPtr	; pop string pointer
faa9 : 86a1             [ 3] 	stx df_tmpptra		; save pointer to tmpa
faab : 85a2             [ 3] 	sta df_tmpptra+1
faad :                       df_rt_asm_string_ch
faad : a000             [ 2] 	ldy #0
faaf : b1a1             [ 5] 	lda (df_tmpptra),y	; Get string char, 0=done
AS65 Assembler for R6502 [1.42].                                     Page  270
-------------------------------- bank\bank0.s --------------------------------

fab1 : f010             [ 3] 	beq df_rt_asm_data_next
fab3 : 859e             [ 3] 	sta df_asmoprnd		; Save as operand
fab5 : 849f             [ 3] 	sty df_asmoprnd+1	; High is always zero
fab7 : 20cefa           [ 6] 	jsr df_rt_asm_data_write
                             	_incZPWord df_tmpptra
                             
fac0 : 4cadfa           [ 3] 	jmp df_rt_asm_string_ch
fac3 :                       df_rt_asm_data_next
fac3 : 2052ed           [ 6] 	jsr df_rt_eos		; End?
fac6 : b005             [ 3] 	bcs df_rt_asm_data_done
fac8 : e688             [ 5] 	inc df_exeoff		; Jump over ','
faca : 4c8ffa           [ 3] 	jmp df_rt_asm_data
facd :                       df_rt_asm_data_done
facd : 60               [ 6] 	rts	
                             
                             ; Write one db or dw value
                             ; Check for value too big for db
                             ; Advance PC by df_asmlen
face :                       df_rt_asm_data_write
face : 2019fc           [ 6] 	jsr df_rt_asm_printOPR
fad1 :                       df_rt_asm_data_write_skip1
fad1 : a902             [ 2] 	lda #2
fad3 : 259b             [ 3] 	and df_asmopt
fad5 : f017             [ 3] 	beq df_rt_asm_data_write_skip2
fad7 : a59e             [ 3] 	lda df_asmoprnd
fad9 : a000             [ 2] 	ldy #0
fadb : 9199             [ 5] 	sta (df_asmpc),y
fadd : c8               [ 2] 	iny
fade : a902             [ 2] 	lda #2
fae0 : c5a0             [ 3] 	cmp df_asmlen
fae2 : d006             [ 3] 	bne df_rt_asm_data_write_hi
fae4 : a59f             [ 3] 	lda df_asmoprnd+1
fae6 : d016             [ 3] 	bne df_rt_asm_data_write_err
fae8 : f004             [ 3] 	beq df_rt_asm_data_write_skip2
faea :                       df_rt_asm_data_write_hi
faea : a59f             [ 3] 	lda df_asmoprnd+1
faec : 9199             [ 5] 	sta (df_asmpc),y
faee :                       df_rt_asm_data_write_skip2
faee : a4a0             [ 3] 	ldy df_asmlen
faf0 : 88               [ 2] 	dey					; Add 1 less!
faf1 : 98               [ 2] 	tya
faf2 : 18               [ 2] 	clc
faf3 : 6599             [ 3] 	adc df_asmpc
faf5 : 8599             [ 3] 	sta df_asmpc
faf7 : a59a             [ 3] 	lda df_asmpc+1
faf9 : 6900             [ 2] 	adc #0
fafb : 859a             [ 3] 	sta df_asmpc+1
fafd : 60               [ 6] 	rts
fafe :                       df_rt_asm_data_write_err	
                             	SWBRK DFERR_QUANTITY
                             
                             	
                             	
fb00 :                       df_rt_asm_ds
fb00 : 20f2fb           [ 6] 	jsr df_rt_asm_printPC
fb03 : 200ffc           [ 6] 	jsr df_rt_asm_printSPC
                             	; Get the address from expression
fb06 : 20e1fc           [ 6] 	jsr df_rt_asm_get_operand
                             	; ADD this in to PC
fb09 : 18               [ 2] 	clc
fb0a : a59e             [ 3] 	lda df_asmoprnd
fb0c : 6599             [ 3] 	adc df_asmpc
AS65 Assembler for R6502 [1.42].                                     Page  271
-------------------------------- bank\bank0.s --------------------------------

fb0e : 8599             [ 3] 	sta df_asmpc
fb10 : a59f             [ 3] 	lda df_asmoprnd+1
fb12 : 659a             [ 3] 	adc df_asmpc+1
fb14 : 859a             [ 3] 	sta df_asmpc+1
                             	; len=1 for printing
fb16 : a903             [ 2] 	lda #3
fb18 : 85a0             [ 3] 	sta df_asmlen
fb1a : 2019fc           [ 6] 	jsr df_rt_asm_printOPR
fb1d : 60               [ 6] 	rts
                             
                             
                             ; Process a normal assembler mnemonic
fb1e :                       df_rt_asm_mnem
fb1e : 68               [ 4] 	pla				; Throw away previous temp variable
                             	; jump over mnemonic code
fb1f : e688             [ 5] 	inc df_exeoff
                             	; work out the addressing mode and get operand
fb21 : 2064fc           [ 6] 	jsr df_rt_asm_addrmode
                             
fb24 :                       df_rt_asm_mnem_try
fb24 : a59c             [ 3] 	lda df_asmadmd					; With the addressing mode
fb26 : 20ecfc           [ 6] 	jsr df_rt_asm_find_addr_mode	; Find it for this 
fb29 : c900             [ 2] 	cmp #AM_NONE					; Exists?
fb2b : d014             [ 3] 	bne	df_rt_asm_mnem_chk			; If does then check it
fb2d :                       df_rt_asm_check_alt
fb2d : a69c             [ 3] 	ldx df_asmadmd					; Use ad mode as an index
fb2f : bd45fd           [ 4] 	lda df_asm_altaddrmode,x		; Else get alternate
fb32 : c900             [ 2] 	cmp #AM_NONE					; Is there an alternate?
fb34 : f02e             [ 3] 	beq df_rt_asm_mnem_err			; If no then error
fb36 : 20ecfc           [ 6] 	jsr df_rt_asm_find_addr_mode	; Check does mode e
fb39 : c900             [ 2] 	cmp #AM_NONE					; this instruction
fb3b : f027             [ 3] 	beq df_rt_asm_mnem_err			; if no then error
fb3d : c59c             [ 3] 	cmp df_asmadmd					; Same as the original?
fb3f : f00e             [ 3] 	beq df_rt_asm_mnem_done			; if so then done
fb41 :                       df_rt_asm_mnem_chk
fb41 : 859c             [ 3] 	sta df_asmadmd					; This is the final mode
fb43 : aa               [ 2] 	tax								; Get the length
fb44 : bd34fd           [ 4] 	lda df_asm_length,x
fb47 : a69f             [ 3] 	ldx df_asmoprnd+1				; Is operand hi non-zero?
fb49 : f004             [ 3] 	beq df_rt_asm_mnem_done			; If zero then done
fb4b : c903             [ 2] 	cmp #3							; Else must be len 3?
fb4d : d0de             [ 3] 	bne df_rt_asm_check_alt			; Try an alternate
fb4f :                       df_rt_asm_mnem_done
fb4f : a69c             [ 3] 	ldx df_asmadmd					; Get the final mode index
fb51 : bd34fd           [ 4] 	lda df_asm_length,x				; Get the length
fb54 : 85a0             [ 3] 	sta df_asmlen
fb56 : a59c             [ 3] 	lda df_asmadmd					; Get the final mode
fb58 : 20ecfc           [ 6] 	jsr df_rt_asm_find_addr_mode	; Get the Y index o
                             	; Ok now get the opcode
fb5b : c8               [ 2] 	iny
fb5c : b181             [ 5] 	lda (df_symtab),y
fb5e : 859d             [ 3] 	sta df_asmopcde
                             	; Now have all information to assemble
fb60 : 2066fb           [ 6] 	jsr df_rt_asm_encode
                             	
fb63 : 60               [ 6] 	rts
fb64 :                       df_rt_asm_mnem_err
                             	SWBRK DFERR_SYNTAX
                             
                             	
                             ; Take assembler data and encode it
                             ; depending on the current option
AS65 Assembler for R6502 [1.42].                                     Page  272
-------------------------------- bank\bank0.s --------------------------------

                             ; Option 0 = No write
                             ; Option 1 = No write, Print
                             ; Option 2 = Write
                             ; Option 3 = Write, Print
fb66 :                       df_rt_asm_encode
                             	; If relative then need to calculate offset
fb66 : a59c             [ 3] 	lda df_asmadmd
fb68 : c90f             [ 2] 	cmp #AM_REL
fb6a : d036             [ 3] 	bne df_rt_asm_encode_skiprel
                             	; If high byte is 0 then do nothing
fb6c : a59f             [ 3] 	lda df_asmoprnd+1
fb6e : f032             [ 3] 	beq df_rt_asm_encode_skiprel
                             	; else calculate distance from PC
                             	; first take 2 off operand
fb70 : 38               [ 2] 	sec
fb71 : a59e             [ 3] 	lda df_asmoprnd
fb73 : e902             [ 2] 	sbc #2
fb75 : 859e             [ 3] 	sta df_asmoprnd
fb77 : a59f             [ 3] 	lda df_asmoprnd+1
fb79 : e900             [ 2] 	sbc #0
fb7b : 859f             [ 3] 	sta df_asmoprnd+1
                             	; now calculate current operand-PC
fb7d : 38               [ 2] 	sec
fb7e : a59e             [ 3] 	lda df_asmoprnd
fb80 : e599             [ 3] 	sbc df_asmpc
fb82 : 859e             [ 3] 	sta df_asmoprnd
fb84 : a59f             [ 3] 	lda df_asmoprnd+1
fb86 : e59a             [ 3] 	sbc df_asmpc+1
                             	; put 0 in high operand storage
                             	; but A contains result of subtraction
                             	; so check that for out of range
fb88 : a000             [ 2] 	ldy #0
fb8a : 849f             [ 3] 	sty df_asmoprnd+1
                             	; detect too far; high byte is either 0 or 255
                             	; else it's an error
fb8c : c900             [ 2] 	cmp #0
fb8e : f00a             [ 3] 	beq df_rt_asm_encode_relpos
fb90 : c9ff             [ 2] 	cmp #0xff
fb92 : d00a             [ 3] 	bne df_rt_asm_encode_relfar
                             	; if high is ff then low must be same -ve
fb94 : a59e             [ 3] 	lda df_asmoprnd
fb96 : 300a             [ 3] 	bmi df_rt_asm_encode_skiprel
                             	; else error
fb98 : 1004             [ 3] 	bpl df_rt_asm_encode_relfar
fb9a :                       df_rt_asm_encode_relpos
                             	; if high is 00 then low must be same +ve
fb9a : a59e             [ 3] 	lda df_asmoprnd
fb9c : 1004             [ 3] 	bpl df_rt_asm_encode_skiprel
                             	; else error
fb9e :                       df_rt_asm_encode_relfar
                             	; set to non-zero value
fb9e : a9ff             [ 2] 	lda #0xff
fba0 : 859f             [ 3] 	sta df_asmoprnd+1
fba2 :                       df_rt_asm_encode_skiprel
                             	; Only write the code if bit 1=1
fba2 : a902             [ 2] 	lda #0x02
fba4 : 259b             [ 3] 	and df_asmopt
fba6 : f028             [ 3] 	beq df_rt_asm_encode_print
fba8 : a000             [ 2] 	ldy #0
fbaa : a59d             [ 3] 	lda df_asmopcde
fbac : 9199             [ 5] 	sta (df_asmpc),y
fbae : a5a0             [ 3] 	lda df_asmlen
AS65 Assembler for R6502 [1.42].                                     Page  273
-------------------------------- bank\bank0.s --------------------------------

fbb0 : c901             [ 2] 	cmp #1						; No operand
fbb2 : f01c             [ 3] 	beq df_rt_asm_encode_print
fbb4 : c903             [ 2] 	cmp #3						; Word operand
fbb6 : f00e             [ 3] 	beq df_rt_asm_encode_writeword
                             	; byte operand, high byte must be zero
fbb8 : a59f             [ 3] 	lda df_asmoprnd+1
fbba : f002             [ 3] 	beq df_rt_asm_encode_writebyte
                             	SWBRK DFERR_QUANTITY
                             
fbbe :                       df_rt_asm_encode_writebyte
fbbe : c8               [ 2] 	iny 
fbbf : a59e             [ 3] 	lda df_asmoprnd
fbc1 : 9199             [ 5] 	sta (df_asmpc),y
fbc3 : 4cd0fb           [ 3] 	jmp df_rt_asm_encode_print
fbc6 :                       df_rt_asm_encode_writeword
fbc6 : c8               [ 2] 	iny 
fbc7 : a59e             [ 3] 	lda df_asmoprnd
fbc9 : 9199             [ 5] 	sta (df_asmpc),y
fbcb : c8               [ 2] 	iny 
fbcc : a59f             [ 3] 	lda df_asmoprnd+1
fbce : 9199             [ 5] 	sta (df_asmpc),y	
fbd0 :                       df_rt_asm_encode_print
fbd0 : 20e2fb           [ 6] 	jsr df_rt_asm_print_mmen
                             	; advance pc
fbd3 : 18               [ 2] 	clc
fbd4 : a599             [ 3] 	lda df_asmpc
fbd6 : 65a0             [ 3] 	adc df_asmlen
fbd8 : 8599             [ 3] 	sta df_asmpc
fbda : a59a             [ 3] 	lda df_asmpc+1
fbdc : 6900             [ 2] 	adc #0
fbde : 859a             [ 3] 	sta df_asmpc+1
fbe0 : 18               [ 2] 	clc
fbe1 : 60               [ 6] 	rts
                             
                             
                             ; Print the full 1,2,3 byte instruction
                             ; depends on df_asmopt
fbe2 :                       df_rt_asm_print_mmen
fbe2 : 20f2fb           [ 6] 	jsr df_rt_asm_printPC
fbe5 : 200ffc           [ 6] 	jsr df_rt_asm_printSPC
fbe8 : 2003fc           [ 6] 	jsr df_rt_asm_printOPC
fbeb : 200ffc           [ 6] 	jsr df_rt_asm_printSPC
fbee : 2019fc           [ 6] 	jsr df_rt_asm_printOPR
fbf1 :                       df_rt_asm_print_rts			; Hopefull subs can get her
fbf1 : 60               [ 6] 	rts
                             
fbf2 :                       df_rt_asm_printPC
                             	; Check the option bit 0 (Print)
fbf2 : a901             [ 2] 	lda #0x01
fbf4 : 259b             [ 3] 	and df_asmopt
fbf6 : f0f9             [ 3] 	beq df_rt_asm_print_rts
                             	; Print current PC
fbf8 : a59a             [ 3] 	lda df_asmpc+1
fbfa : 203cc1           [ 6] 	jsr utilPrintA
fbfd : a599             [ 3] 	lda df_asmpc
fbff : 203cc1           [ 6] 	jsr utilPrintA
fc02 : 60               [ 6] 	rts
                             
fc03 :                       df_rt_asm_printOPC
                             	; Check the option bit 0 (Print)
fc03 : a901             [ 2] 	lda #0x01
fc05 : 259b             [ 3] 	and df_asmopt
AS65 Assembler for R6502 [1.42].                                     Page  274
-------------------------------- bank\bank0.s --------------------------------

fc07 : f0e8             [ 4] 	beq df_rt_asm_print_rts
fc09 : a59d             [ 3] 	lda df_asmopcde
fc0b : 203cc1           [ 6] 	jsr utilPrintA
fc0e : 60               [ 6] 	rts
                             
fc0f :                       df_rt_asm_printSPC
                             	; Check the option bit 0 (Print)
fc0f : a901             [ 2] 	lda #0x01
fc11 : 259b             [ 3] 	and df_asmopt
fc13 : f0dc             [ 4] 	beq df_rt_asm_print_rts
fc15 : 202cc1           [ 6] 	jsr utilPrintSPC
fc18 : 60               [ 6] 	rts
                             	
                             	
fc19 :                       df_rt_asm_printOPR
                             	; Check the option bit 0 (Print)
fc19 : a901             [ 2] 	lda #0x01
fc1b : 259b             [ 3] 	and df_asmopt
fc1d : f0d2             [ 4] 	beq df_rt_asm_print_rts	
fc1f : a5a0             [ 3] 	lda df_asmlen				; check how may operand bytes
fc21 : c901             [ 2] 	cmp #1						; if only opcode, done
fc23 : f0cc             [ 4] 	beq df_rt_asm_print_rts	
fc25 : c902             [ 2] 	cmp #2
fc27 : f005             [ 3] 	beq df_rt_asm_printOPR_1	; if only 2 do low byte
fc29 : a59f             [ 3] 	lda df_asmoprnd+1
fc2b : 203cc1           [ 6] 	jsr utilPrintA
fc2e :                       df_rt_asm_printOPR_1
fc2e : a59e             [ 3] 	lda df_asmoprnd
fc30 : 203cc1           [ 6] 	jsr utilPrintA
fc33 : 60               [ 6] 	rts
                             
fc34 :                       df_rt_asm_printCR
                             	; Check the option bit 0 (Print)
fc34 : a901             [ 2] 	lda #0x01
fc36 : 259b             [ 3] 	and df_asmopt
fc38 : f0b7             [ 4] 	beq df_rt_asm_print_rts
fc3a : 2034c1           [ 6] 	jsr utilPrintCRLF
fc3d : 60               [ 6] 	rts
                             
fc3e :                       df_rt_asm_printCH
fc3e : 8538             [ 3] 	sta tmp_d
                             	; Check the option bit 0 (Print)
fc40 : a901             [ 2] 	lda #0x01
fc42 : 259b             [ 3] 	and df_asmopt
fc44 : f0ab             [ 4] 	beq df_rt_asm_print_rts
fc46 : a538             [ 3] 	lda tmp_d
fc48 : 4c12c4           [ 3] 	jmp io_put_ch
fc4b : 60               [ 6] 	rts
                             
                             ; Print an entire line, but save df_exeoff
fc4c :                       df_rt_asm_printline
                             	; Check the option bit 0 (Print)
fc4c : a901             [ 2] 	lda #0x01
fc4e : 259b             [ 3] 	and df_asmopt
fc50 : f09f             [ 4] 	beq df_rt_asm_print_rts
fc52 : a588             [ 3] 	lda df_exeoff
fc54 : 48               [ 3] 	pha
                             	; use df_tmpptra
                             	_cpyZPWord df_currlin, df_tmpptra
                             
fc5d : 20ccee           [ 6] 	jsr df_rt_list_line_only
fc60 : 68               [ 4] 	pla
AS65 Assembler for R6502 [1.42].                                     Page  275
-------------------------------- bank\bank0.s --------------------------------

fc61 : 8588             [ 3] 	sta df_exeoff
fc63 : 60               [ 6] 	rts
                             
                             
                             ; Calculate the addressing mode
                             ; Populate the operand as needed
                             ; A and df_asmadmd contain Addressing Mode
fc64 :                       df_rt_asm_addrmode	
                             	; Store nothing in address mode
fc64 : a900             [ 2] 	lda #AM_NONE
fc66 : 859c             [ 3] 	sta df_asmadmd
                             	; zero out the operand
fc68 : a900             [ 2] 	lda #0
fc6a : 859e             [ 3] 	sta df_asmoprnd
fc6c : 859f             [ 3] 	sta df_asmoprnd+1
fc6e : 2052ed           [ 6] 	jsr df_rt_eos			; End of statement?
fc71 : b00d             [ 3] 	bcs df_rt_asm_AM_IMP
                             	; jump over whitespace
fc73 : 2001e5           [ 6] 	jsr df_rt_skip_ws
                             	; Check what it is
fc76 : c923             [ 2] 	cmp #'#'				; Immediate?
fc78 : f034             [ 3] 	beq df_rt_asm_AM_IMM
fc7a : c928             [ 2] 	cmp #'('				; Indirect something?
fc7c : f03a             [ 3] 	beq df_rt_asm_AM_INDIRECT
                             	; Must be ABS,ZP or REL
fc7e : d005             [ 3] 	bne df_rt_asm_ABSREL
                             ; Process IMP/ACC
fc80 :                       df_rt_asm_AM_IMP
fc80 : a90d             [ 2] 	lda #AM_IMP
fc82 : 859c             [ 3] 	sta df_asmadmd
fc84 : 60               [ 6] 	rts
                             ; Process ABS or REL
fc85 :                       df_rt_asm_ABSREL	
                             	; Evaluate operand
fc85 : 20e1fc           [ 6] 	jsr df_rt_asm_get_operand
                             
fc88 : 2052ed           [ 6] 	jsr df_rt_eos			; End of statement?
fc8b : b00f             [ 3] 	bcs df_rt_asm_AM_ABS
fc8d : c8               [ 2] 	iny						; Jump over ","
fc8e : b186             [ 5] 	lda (df_currlin),y		; Load X or Y
fc90 : c8               [ 2] 	iny						; Jump over index reg
fc91 : 8588             [ 3] 	sta df_exeoff			; Save exe offset
fc93 : c978             [ 2] 	cmp #'x'				; Indirect X?
fc95 : f012             [ 3] 	beq df_rt_asm_AM_ABSX
                             ; Process ABSY
fc97 :                       df_rt_asm_AM_ABSY
fc97 : a906             [ 2] 	lda #AM_ZPY				; Go for smallest modes
fc99 : 859c             [ 3] 	sta df_asmadmd
fc9b : 60               [ 6] 	rts
                             ; Process what looks like pure ABS, could be REL
fc9c :                       df_rt_asm_AM_ABS
fc9c : a001             [ 2] 	ldy #1					; Check first addressing mode
fc9e : b181             [ 5] 	lda (df_symtab),y
fca0 : c90f             [ 2] 	cmp #AM_REL
fca2 : f002             [ 3] 	beq df_rt_asm_AM_REL
fca4 : a904             [ 2] 	lda #AM_ZP				; Go for smallest modes
fca6 :                       df_rt_asm_AM_REL
fca6 : 859c             [ 3] 	sta df_asmadmd
fca8 : 60               [ 6] 	rts
                             ; Process ABSX
fca9 :                       df_rt_asm_AM_ABSX
fca9 : a905             [ 2] 	lda #AM_ZPX				; Go for smallest modes
AS65 Assembler for R6502 [1.42].                                     Page  276
-------------------------------- bank\bank0.s --------------------------------

fcab : 859c             [ 3] 	sta df_asmadmd
fcad : 60               [ 6] 	rts
                             ; Process Immediate
fcae :                       df_rt_asm_AM_IMM
                             	; skip over #
fcae : e688             [ 5] 	inc df_exeoff
                             	; Get operand
fcb0 : 20e1fc           [ 6] 	jsr df_rt_asm_get_operand
                             	; Mark as immediate
fcb3 : a90c             [ 2] 	lda #AM_IMM
fcb5 : 859c             [ 3] 	sta df_asmadmd
fcb7 : 60               [ 6] 	rts
                             ; Process indirect
fcb8 :                       df_rt_asm_AM_INDIRECT
                             	; skip over (
fcb8 : e688             [ 5] 	inc df_exeoff
                             	; Calculate the operand
fcba : 20e1fc           [ 6] 	jsr df_rt_asm_get_operand
                             	; what is next char?
fcbd : a488             [ 3] 	ldy df_exeoff
fcbf : b186             [ 5] 	lda (df_currlin),y
fcc1 : c929             [ 2] 	cmp #')'			; Could be IND or INDY
fcc3 : f009             [ 3] 	beq df_rt_asm_AM_ZPINDORY
                             	; else must be INDX
                             	; skip 'x)'
fcc5 : c8               [ 2] 	iny
fcc6 : c8               [ 2] 	iny
fcc7 : 8488             [ 3] 	sty df_exeoff
fcc9 : a908             [ 2] 	lda #AM_ZPINDX
fccb : 859c             [ 3] 	sta df_asmadmd
fccd : 60               [ 6] 	rts
                             ; Pure indirect mode found
fcce :                       df_rt_asm_AM_ZPINDORY
fcce : a907             [ 2] 	lda #AM_ZPIND			; Assume ZPIND
fcd0 : c8               [ 2] 	iny
fcd1 : 8488             [ 3] 	sty df_exeoff
                             	; if at end of line/statement then pure indirect
fcd3 : 2052ed           [ 6] 	jsr df_rt_eos			; End of statement?
fcd6 : b006             [ 3] 	bcs df_rt_asm_AM_ZPIND
                             	; else must be INDY
fcd8 : a909             [ 2] 	lda #AM_ZPINDY
                             	; skip ',Y'
fcda : c8               [ 2] 	iny
fcdb : c8               [ 2] 	iny
fcdc : 8488             [ 3] 	sty df_exeoff
fcde :                       df_rt_asm_AM_ZPIND
fcde : 859c             [ 3] 	sta df_asmadmd
fce0 : 60               [ 6] 	rts
                             
                             ; Get and save the operand
                             ; df_asmoprnd contains the result
fce1 :                       df_rt_asm_get_operand
                             	; evaluate
fce1 : 207ce0           [ 6] 	jsr df_rt_neval
                             	; Get the parameter from stack
fce4 : 2019f7           [ 6] 	jsr df_ost_popInt
                             	; put in the operand
fce7 : 869e             [ 3] 	stx df_asmoprnd
fce9 : 859f             [ 3] 	sta df_asmoprnd+1
fceb : 60               [ 6] 	rts
                             	
                             ; From current symtab entry, find addressing
AS65 Assembler for R6502 [1.42].                                     Page  277
-------------------------------- bank\bank0.s --------------------------------

                             ; mode in A.  AM_NONE=Not found, Y=index
fcec :                       df_rt_asm_find_addr_mode
                             	; save A in tmp
fcec : 8538             [ 3] 	sta tmp_d
                             	; Start first entry (1) - 2 = 0xff
fcee : a0ff             [ 2] 	ldy #0xff
fcf0 : a200             [ 2] 	ldx #0
fcf2 :                       df_rt_asm_find_addr_mode_loop
                             	; next entry
fcf2 : c8               [ 2] 	iny
fcf3 : c8               [ 2] 	iny
                             	; if current index > num entries then error
fcf4 : 98               [ 2] 	tya
fcf5 : 38               [ 2] 	sec
fcf6 : e181             [ 6] 	sbc (df_symtab,x)
fcf8 : b007             [ 4] 	bcs df_rt_asm_find_addr_mode_err
                             	; is symtab addressing mode what we want?
fcfa : b181             [ 5] 	lda (df_symtab),y
fcfc : c538             [ 3] 	cmp tmp_d
fcfe : d0f2             [ 3] 	bne df_rt_asm_find_addr_mode_loop
                             	; done A=mode, y=index in to df_symtab
fd00 : 60               [ 6] 	rts
fd01 :                       df_rt_asm_find_addr_mode_err
fd01 : a900             [ 2] 	lda #AM_NONE
fd03 : 60               [ 6] 	rts
                             
                             
                             ; Skip X amount of symbols in table
                             ; A contains how many addr mode and op code bytes
                             ; df_symtab points to offset byte
fd04 :                       df_rt_asm_skip_to_sym
fd04 : e8               [ 2] 	inx				; so done when X=0
                             	; Start at token symbols beginning
fd05 : a956             [ 2] 	lda #lo(df_asm_tokensyms)
fd07 : 8581             [ 3] 	sta df_symtab
fd09 : a9fd             [ 2] 	lda #hi(df_asm_tokensyms)
fd0b : 8582             [ 3] 	sta df_symtab+1
fd0d : a900             [ 2] 	lda #0
fd0f : 8583             [ 3] 	sta df_symoff
fd11 : a000             [ 2] 	ldy #0
fd13 :                       df_rt_asm_skip_to_sym_next
                             	; Get symtable char
fd13 : b181             [ 5] 	lda (df_symtab),y
                             	; if < ' ' then jumped over symbol chars
fd15 : c920             [ 2] 	cmp #' '
fd17 : 9009             [ 3] 	bcc df_rt_asm_skip_to_sym_end
                             	;else next smy tab char
                             	_incZPWord df_symtab
                             
fd1f : 4c13fd           [ 3] 	jmp df_rt_asm_skip_to_sym_next
                             	; Found end of symbol
fd22 :                       df_rt_asm_skip_to_sym_end
                             	;if done then return
fd22 : ca               [ 2] 	dex
fd23 : f00e             [ 3] 	beq df_rt_asm_skip_to_sym_done
                             	;jump over addr and op code by A bytes
fd25 : 38               [ 2] 	sec
fd26 : 6581             [ 3] 	adc df_symtab
fd28 : 8581             [ 3] 	sta df_symtab
fd2a : a582             [ 3] 	lda df_symtab+1
fd2c : 6900             [ 2] 	adc #0
fd2e : 8582             [ 3] 	sta df_symtab+1
AS65 Assembler for R6502 [1.42].                                     Page  278
-------------------------------- bank\bank0.s --------------------------------

fd30 : 4c13fd           [ 3] 	jmp df_rt_asm_skip_to_sym_next
                             	
fd33 :                       df_rt_asm_skip_to_sym_done
fd33 : 60               [ 6] 	rts
                             
fd34 :                       mod_sz_rtasm_e
                             
                             
                             	include "dflat/asmsymtab.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  ASMSYMTAB.S
                             ;*	Mainly this contains the symbol table for asse
                             ;*	mnemonics but also meta data like what address
                             ;*	and the length of opcodes.
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code  
                             
                             	;* Length of each addressing mode
                             	;* ORDER significant!
fd34 :                       df_asm_length
fd34 : 00030303020202..      	db	0,3,3,3,2,2,2,2,2,2,3,3,2,1,1,2,0
                             
                             	; Always try for lowest addressing mode, but
                             	; this table maps to alternative
fd45 :                       df_asm_altaddrmode
fd45 : 00                    	db AM_NONE		;AM_NONE	= 0
fd46 : 00                    	db AM_NONE		;AM_ABS	 	= 1
fd47 : 00                    	db AM_NONE		;AM_ABSX	= 2
fd48 : 00                    	db AM_NONE		;AM_ABSY	= 3
fd49 : 01                    	db AM_ABS		;AM_ZP		= 4
fd4a : 02                    	db AM_ABSX		;AM_ZPX		= 5
fd4b : 03                    	db AM_ABSY		;AM_ZPY		= 6
fd4c : 0a                    	db AM_ABSIND	;AM_ZPIND	= 7
fd4d : 0b                    	db AM_ABSINDX	;AM_ZPINDX	= 8
fd4e : 09                    	db AM_ZPINDY	;AM_ZPINDY	= 9
fd4f : 00                    	db AM_NONE		;AM_ABSIND	= 10
fd50 : 00                    	db AM_NONE		;AM_ABSINDX	= 11
fd51 : 00                    	db AM_NONE		;AM_IMM		= 12
fd52 : 00                    	db AM_NONE		;AM_ACC		= 13
fd53 : 00                    	db AM_NONE		;AM_IMP		= AM_ACC
fd54 : 0f                    	db AM_REL		;AM_REL		= 15
fd55 : 00                    	db AM_NONE		;AM_DIR		= 16
                             
                             
                             	;*	Mnemonic/	How many addressing modes /
                             	;* 	Mode		Opcode for mode
fd56 :                       df_asm_tokensyms
                             	;* Start with directives
fd56 : 6f726702              	db	"org",		1*2
fd5a : 1000                  	db	AM_DIR,		0x00
fd5c : 6f707402              	db	"opt",		1*2
fd60 : 1000                  	db	AM_DIR,		0x00
AS65 Assembler for R6502 [1.42].                                     Page  279
-------------------------------- bank\bank0.s --------------------------------

fd62 : 646202                	db	"db",		1*2
fd65 : 1000                  	db	AM_DIR,		0x00
fd67 : 647702                	db	"dw",		1*2
fd6a : 1000                  	db	AM_DIR,		0x00
fd6c : 647302                	db	"ds",		1*2
fd6f : 1000                  	db	AM_DIR,		0x00	
                             
fd71 : 61646310              	db	"adc",		8*2
fd75 : 0c69                  	db	AM_IMM,		0x69
fd77 : 0465                  	db	AM_ZP,		0x65
fd79 : 0575                  	db	AM_ZPX,		0x75
fd7b : 016d                  	db	AM_ABS,		0x6d
fd7d : 027d                  	db	AM_ABSX,	0x7d
fd7f : 0379                  	db	AM_ABSY,	0x79
fd81 : 0861                  	db	AM_ZPINDX,	0x61
fd83 : 0971                  	db	AM_ZPINDY,	0x71
                             	
fd85 : 616e6410              	db	"and",		8*2
fd89 : 0c29                  	db	AM_IMM,		0x29
fd8b : 0425                  	db	AM_ZP,		0x25
fd8d : 0535                  	db	AM_ZPX,		0x35
fd8f : 012d                  	db	AM_ABS,		0x2d
fd91 : 023d                  	db	AM_ABSX,	0x3d
fd93 : 0339                  	db	AM_ABSY,	0x39
fd95 : 0821                  	db	AM_ZPINDX,	0x21
fd97 : 0931                  	db	AM_ZPINDY,	0x31
                             
fd99 : 636d7010              	db	"cmp",		8*2
fd9d : 0cc9                  	db	AM_IMM,		0xc9
fd9f : 04c5                  	db	AM_ZP,		0xc5
fda1 : 05d5                  	db	AM_ZPX,		0xd5
fda3 : 01cd                  	db	AM_ABS,		0xcd
fda5 : 02dd                  	db	AM_ABSX,	0xdd
fda7 : 03d9                  	db	AM_ABSY,	0xd9
fda9 : 08c1                  	db	AM_ZPINDX,	0xc1
fdab : 09d1                  	db	AM_ZPINDY,	0xd1
                             
fdad : 656f7210              	db	"eor",		8*2
fdb1 : 0c49                  	db	AM_IMM,		0x49
fdb3 : 0445                  	db	AM_ZP,		0x45
fdb5 : 0555                  	db	AM_ZPX,		0x55
fdb7 : 014d                  	db	AM_ABS,		0x4d
fdb9 : 025d                  	db	AM_ABSX,	0x5d
fdbb : 0359                  	db	AM_ABSY,	0x59
fdbd : 0841                  	db	AM_ZPINDX,	0x41
fdbf : 0951                  	db	AM_ZPINDY,	0x51
                             
fdc1 : 6c646110              	db	"lda",		8*2
fdc5 : 0ca9                  	db	AM_IMM,		0xa9
fdc7 : 04a5                  	db	AM_ZP,		0xa5
fdc9 : 05b5                  	db	AM_ZPX,		0xb5
fdcb : 01ad                  	db	AM_ABS,		0xad
fdcd : 02bd                  	db	AM_ABSX,	0xbd
fdcf : 03b9                  	db	AM_ABSY,	0xb9
fdd1 : 08a1                  	db	AM_ZPINDX,	0xa1
fdd3 : 09b1                  	db	AM_ZPINDY,	0xb1
                             
fdd5 : 6f726110              	db	"ora",		8*2
fdd9 : 0c09                  	db	AM_IMM,		0x09
fddb : 0405                  	db	AM_ZP,		0x05
fddd : 0515                  	db	AM_ZPX,		0x15
fddf : 010d                  	db	AM_ABS,		0x0d
AS65 Assembler for R6502 [1.42].                                     Page  280
-------------------------------- bank\bank0.s --------------------------------

fde1 : 021d                  	db	AM_ABSX,	0x1d
fde3 : 0319                  	db	AM_ABSY,	0x19
fde5 : 0801                  	db	AM_ZPINDX,	0x01
fde7 : 0911                  	db	AM_ZPINDY,	0x11
                             
fde9 : 73626310              	db	"sbc",		8*2
fded : 0ce9                  	db	AM_IMM,		0xe9
fdef : 04e5                  	db	AM_ZP,		0xe5
fdf1 : 05f5                  	db	AM_ZPX,		0xf5
fdf3 : 01ed                  	db	AM_ABS,		0xed
fdf5 : 02fd                  	db	AM_ABSX,	0xfd
fdf7 : 03f9                  	db	AM_ABSY,	0xf9
fdf9 : 08e1                  	db	AM_ZPINDX,	0xe1
fdfb : 09f1                  	db	AM_ZPINDY,	0xf1
                             
fdfd : 73746110              	db	"sta",		8*2
fe01 : 0485                  	db	AM_ZP,		0x85
fe03 : 0595                  	db	AM_ZPX,		0x95
fe05 : 018d                  	db	AM_ABS,		0x8d
fe07 : 029d                  	db	AM_ABSX,	0x9d
fe09 : 0399                  	db	AM_ABSY,	0x99
fe0b : 0881                  	db	AM_ZPINDX,	0x81
fe0d : 0991                  	db	AM_ZPINDY,	0x91
fe0f : 0792                  	db	AM_ZPIND,	0x92
                             
fe11 : 61736c0a              	db	"asl",		5*2
fe15 : 0d0a                  	db	AM_IMP,		0x0a
fe17 : 0406                  	db	AM_ZP,		0x06
fe19 : 0516                  	db	AM_ZPX,		0x16
fe1b : 010e                  	db	AM_ABS,		0x0e
fe1d : 021e                  	db	AM_ABSX,	0x1e
fe1f : 64656308              	db	"dec",		4*2
fe23 : 04c6                  	db	AM_ZP,		0xc6
fe25 : 05d6                  	db	AM_ZPX,		0xd6
fe27 : 01ce                  	db	AM_ABS,		0xce
fe29 : 02de                  	db	AM_ABSX,	0xde
fe2b : 696e6308              	db	"inc",		4*2
fe2f : 04e6                  	db	AM_ZP,		0xe6
fe31 : 05f6                  	db	AM_ZPX,		0xf6
fe33 : 01ee                  	db	AM_ABS,		0xee
fe35 : 02fe                  	db	AM_ABSX,	0xfe
fe37 : 6c73720a              	db	"lsr",		5*2
fe3b : 0d4a                  	db	AM_IMP,		0x4a
fe3d : 0446                  	db	AM_ZP,		0x46
fe3f : 0556                  	db	AM_ZPX,		0x56
fe41 : 014e                  	db	AM_ABS,		0x4e
fe43 : 025e                  	db	AM_ABSX,	0x5e
fe45 : 726f6c0a              	db	"rol",		5*2
fe49 : 0d2a                  	db	AM_IMP,		0x2a
fe4b : 0426                  	db	AM_ZP,		0x26
fe4d : 0536                  	db	AM_ZPX,		0x36
fe4f : 012e                  	db	AM_ABS,		0x2e
fe51 : 023e                  	db	AM_ABSX,	0x3e
fe53 : 726f720a              	db	"ror",		5*2
fe57 : 0d6a                  	db	AM_IMP,		0x6a
fe59 : 0466                  	db	AM_ZP,		0x66
fe5b : 0576                  	db	AM_ZPX,		0x76
fe5d : 016e                  	db	AM_ABS,		0x6e
fe5f : 027e                  	db	AM_ABSX,	0x7e
                             
fe61 : 62697404              	db	"bit",		2*2
fe65 : 0424                  	db	AM_ZP,		0x24
AS65 Assembler for R6502 [1.42].                                     Page  281
-------------------------------- bank\bank0.s --------------------------------

fe67 : 012c                  	db	AM_ABS,		0x2c
                             	
fe69 : 62726b02              	db	"brk",		1*2
fe6d : 0d00                  	db	AM_IMP,		0x00
                             	
fe6f : 636c6302              	db	"clc",		1*2
fe73 : 0d18                  	db	AM_IMP,		0x18
fe75 : 636c6402              	db	"cld",		1*2
fe79 : 0dd8                  	db	AM_IMP,		0xd8
fe7b : 636c6902              	db	"cli",		1*2
fe7f : 0d58                  	db	AM_IMP,		0x58
fe81 : 636c7602              	db	"clv",		1*2
fe85 : 0db8                  	db	AM_IMP,		0xb8
fe87 : 73656302              	db	"sec",		1*2
fe8b : 0d38                  	db	AM_IMP,		0x38
fe8d : 73656402              	db	"sed",		1*2
fe91 : 0df8                  	db	AM_IMP,		0xf8
fe93 : 73656902              	db	"sei",		1*2
fe97 : 0d78                  	db	AM_IMP,		0x78
                             	
fe99 : 63707806              	db	"cpx",		3*2
fe9d : 0ce0                  	db	AM_IMM,		0xe0
fe9f : 04e4                  	db	AM_ZP,		0xe4
fea1 : 01ec                  	db	AM_ABS,		0xec
fea3 : 63707906              	db	"cpy",		3*2
fea7 : 0cc0                  	db	AM_IMM,		0xc0
fea9 : 04c4                  	db	AM_ZP,		0xc4
feab : 01cc                  	db	AM_ABS,		0xcc
fead : 64657802              	db	"dex",		1*2
feb1 : 0dca                  	db	AM_IMP,		0xca
feb3 : 64657902              	db	"dey",		1*2
feb7 : 0d88                  	db	AM_IMP,		0x88
feb9 : 696e7802              	db	"inx",		1*2
febd : 0de8                  	db	AM_IMP,		0xe8
febf : 696e7902              	db	"iny",		1*2
fec3 : 0dc8                  	db	AM_IMP,		0xc8
fec5 : 6c64780a              	db	"ldx",		5*2
fec9 : 0ca2                  	db	AM_IMM,		0xa2
fecb : 04a6                  	db	AM_ZP,		0xa6
fecd : 06b6                  	db	AM_ZPY,		0xb6
fecf : 01ae                  	db	AM_ABS,		0xae
fed1 : 03be                  	db	AM_ABSY,	0xbe
fed3 : 6c64790a              	db	"ldy",		5*2
fed7 : 0ca0                  	db	AM_IMM,		0xa0
fed9 : 04a4                  	db	AM_ZP,		0xa4
fedb : 05b4                  	db	AM_ZPX,		0xb4
fedd : 01ac                  	db	AM_ABS,		0xac
fedf : 02bc                  	db	AM_ABSX,	0xbc
fee1 : 73747806              	db	"stx",		3*2
fee5 : 0486                  	db	AM_ZP,		0x86
fee7 : 0696                  	db	AM_ZPY,		0x96
fee9 : 018e                  	db	AM_ABS,		0x8e
feeb : 73747906              	db	"sty",		3*2
feef : 0484                  	db	AM_ZP,		0x84
fef1 : 0594                  	db	AM_ZPX,		0x94
fef3 : 018c                  	db	AM_ABS,		0x8c
                             
fef5 : 62636302              	db	"bcc",		1*2
fef9 : 0f90                  	db	AM_REL,		0x90
fefb : 62637302              	db	"bcs",		1*2
feff : 0fb0                  	db	AM_REL,		0xb0
ff01 : 62657102              	db	"beq",		1*2
AS65 Assembler for R6502 [1.42].                                     Page  282
-------------------------------- bank\bank0.s --------------------------------

ff05 : 0ff0                  	db	AM_REL,		0xf0
ff07 : 626d6902              	db	"bmi",		1*2
ff0b : 0f30                  	db	AM_REL,		0x30
ff0d : 626e6502              	db	"bne",		1*2
ff11 : 0fd0                  	db	AM_REL,		0xd0
ff13 : 62706c02              	db	"bpl",		1*2
ff17 : 0f10                  	db	AM_REL,		0x10
ff19 : 62766302              	db	"bvc",		1*2
ff1d : 0f50                  	db	AM_REL,		0x50
ff1f : 62767302              	db	"bvs",		1*2
ff23 : 0f70                  	db	AM_REL,		0x70
ff25 : 6a6d7004              	db	"jmp",		2*2
ff29 : 014c                  	db	AM_ABS,		0x4c
ff2b : 0a6c                  	db	AM_ABSIND,	0x6c
ff2d : 6a737202              	db	"jsr",		1*2
ff31 : 0120                  	db	AM_ABS,		0x20
                             	
ff33 : 6e6f7002              	db	"nop",		1*2
ff37 : 0dea                  	db	AM_IMP,		0xea
ff39 : 70686102              	db	"pha",		1*2
ff3d : 0d48                  	db	AM_IMP,		0x48
ff3f : 70687002              	db	"php",		1*2
ff43 : 0d08                  	db	AM_IMP,		0x08
ff45 : 706c6102              	db	"pla",		1*2
ff49 : 0d68                  	db	AM_IMP,		0x68
ff4b : 706c7002              	db	"plp",		1*2
ff4f : 0d28                  	db	AM_IMP,		0x28
ff51 : 72746902              	db	"rti",		1*2
ff55 : 0d40                  	db	AM_IMP,		0x40
ff57 : 72747302              	db	"rts",		1*2
ff5b : 0d60                  	db	AM_IMP,		0x60
ff5d : 74617802              	db	"tax",		1*2
ff61 : 0daa                  	db	AM_IMP,		0xaa
ff63 : 74617902              	db	"tay",		1*2
ff67 : 0da8                  	db	AM_IMP,		0xa8
ff69 : 74737802              	db	"tsx",		1*2
ff6d : 0dba                  	db	AM_IMP,		0xba
ff6f : 74786102              	db	"txa",		1*2
ff73 : 0d8a                  	db	AM_IMP,		0x8a
ff75 : 74787302              	db	"txs",		1*2
ff79 : 0d9a                  	db	AM_IMP,		0x9a
ff7b : 74796102              	db	"tya",		1*2
ff7f : 0d98                  	db	AM_IMP,		0x98	
                             	
                             	;* Terminates with a zero
ff81 : 00                    	db	0
                             
                             	include	"dflat/asmjmptab.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  ASMJUMPTAB.S
                             ;*  Runtime token jump table for assembler.
                             ;*  dflat uses four key tables to tokenise and ru
                             ;*  - df_tokensyms    - table of token symbols
                             ;*  - df_tk_tokentype - table of token types
                             ;*  - df_tk_tokenjmp  - table of tokenising routi
AS65 Assembler for R6502 [1.42].                                     Page  283
-------------------------------- bank\bank0.s --------------------------------

                             ;*  - df_rt_tokenjmp  - table of runtime routines
                             ;*  The key is the token symbols.  When a line is
                             ;*  in to the raw (untokenised) buffer, df_tokens
                             ;*  used to identify tokens.  The position of the
                             ;*  token is used to then look up type and jump v
                             ;*  in the other tables.
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code  
                             
                             ; Tokeniser jump table
                             ; Only directives needed as all opcodes are handl
                             ; through a single routine
ff82 :                       df_tk_asm_tokenjmp
ff82 : 56de                  	dw	df_tk_asm_org
ff84 : 56de                  	dw	df_tk_asm_opt
ff86 : b8dd                  	dw	df_tk_asm_db
ff88 : b8dd                  	dw	df_tk_asm_dw
ff8a : 56de                  	dw	df_tk_asm_ds
                             
ff8c :                       df_rt_asm_tokenjmp
ff8c : 67fa                  	dw	df_rt_asm_org
ff8e : 7afa                  	dw	df_rt_asm_opt
ff90 : 82fa                  	dw	df_rt_asm_db
ff92 : 85fa                  	dw	df_rt_asm_dw
ff94 : 00fb                  	dw	df_rt_asm_ds
                             
                             
                             ;****************************************
                             ;* as_init
                             ;* Initialise assembler settings
                             ;****************************************
ff96 :                       asm_init
                             	; Zero the PC
ff96 : a900             [ 2] 	lda #0
ff98 : 8599             [ 3] 	sta df_asmpc
ff9a : 859a             [ 3] 	sta df_asmpc+1
                             	; Zero the option
ff9c : 859b             [ 3] 	sta df_asmopt
ff9e : 60               [ 6] 	rts
                             
ff9f :                       mod_sz_asm_e
                             
ff9f :                       mod_sz_language_e
                             	; End of Code
ff9f :                       _code_end
                             
No errors in pass 2.
Wrote binary from address $c000 through $ffff.
Total size 16384 bytes.
