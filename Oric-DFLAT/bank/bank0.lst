AS65 Assembler for R6502 [1.42].                                     Page    1
-------------------------------- bank\bank0.s --------------------------------

-------------------------------- Symbol Table --------------------------------

              Symbol   Value        Decimal

                 ACR : $000b             11   *
              AM_ABS : $0001              1   *
           AM_ABSIND : $000a             10   *
          AM_ABSINDX : $000b             11   *
             AM_ABSX : $0002              2   *
             AM_ABSY : $0003              3   *
              AM_ACC : $000d             13   *
              AM_DIR : $0010             16   *
              AM_IMM : $000c             12   *
              AM_IMP : $000d             13   *
             AM_NONE : $0000              0   *
              AM_REL : $000f             15   *
               AM_ZP : $0004              4   *
            AM_ZPIND : $0007              7   *
           AM_ZPINDX : $0008              8   *
           AM_ZPINDY : $0009              9   *
              AM_ZPX : $0005              5   *
              AM_ZPY : $0006              6   *
            asm_init : $ffbd          65469
               BANK0 : $0001              1
             bcd_str : $c396          50070
          bcd_to_str : $c389          50057
      bin_to_bcd_bit : $c36b          50027
              buf_ef : $003c             60
              buf_hi : $003a             58
              buf_lo : $0039             57
              buf_sz : $003b             59
     CMD_ERR_NOERROR : $0000              0   *
    CMD_ERR_NOTFOUND : $0001              1   *
        CMD_ERR_PARM : $0002              2   *
         CMD_ERR_VAL : $0003              3   *
           CRSR_DOWN : $000a             10   *
           CRSR_LEFT : $0008              8   *
          CRSR_RIGHT : $0009              9   *
             CRSR_UP : $000b             11   *
           CTRL_CAPS : $0014             20   *
        call_irq_brk : $c0ce          49358
     call_irq_master : $c0cb          49355
   call_irq_usercia0 : $c0d1          49361
       cmd_check_cmd : $d2c5          53957
         cmd_check_d : $d2d8          53976
         cmd_check_s : $d2df          53983
         cmd_dumpmem : $d312          54034
    cmd_dumpmemASCII : $d338          54072
      cmd_dumpmemFin : $d36d          54125
   cmd_dumpmem_ascii : $d34a          54090
   cmd_dumpmem_block : $d318          54040
    cmd_dumpmem_byte : $d329          54057
  cmd_dump_skip_ctrl : $d354          54100
   cmd_dump_skip_del : $d359          54105
           cmd_error : $d2cd          53965
       cmd_find_parm : $d3bc          54204
              cmd_hi : $0095            149   *
          cmd_incmem : $d374          54132
              cmd_lo : $0094            148   *
   cmd_next_parm_err : $d3c8          54216
       cmd_not_found : $d2e6          53990
           cmd_parse : $d2d7          53975
AS65 Assembler for R6502 [1.42].                                     Page    2
-------------------------------- bank\bank0.s --------------------------------

      cmd_parse_byte : $d38d          54157
  cmd_parse_byte_err : $d3a7          54183
 cmd_parse_byte_errp : $d3a6          54182
 cmd_parse_next_parm : $d3bb          54203
      cmd_parse_word : $d3a9          54185
            cmd_peek : $d37b          54139
            cmd_poke : $d384          54148
           cmd_ready : $d2b1          53937
          cmd_setmem : $d2ec          53996
     cmd_setmem_byte : $d2f1          54001
      cmd_setmem_err : $d310          54032
        cmd_word_err : $d3b9          54201
        command_line : $d2b1          53937
       con_bin_digit : $c247          49735
        con_bin_done : $c25d          49757
         con_bin_err : $c267          49767
         con_bin_jmp : $c1e5          49637
        con_bin_to_a : $c23f          49727
    con_bin_to_a_int : $c243          49731
         con_dec_jmp : $c1d9          49625
        con_dec_to_a : $c269          49769
    con_dec_to_a_int : $c26d          49773
       con_hex_digit : $c208          49672
        con_hex_done : $c235          49717
         con_hex_err : $c233          49715
         con_hex_jmp : $c1df          49631
  con_hex_skip_x_f_1 : $c215          49685
        con_hex_to_a : $c200          49664
    con_hex_to_a_int : $c204          49668
           con_n_err : $c1e8          49640
       con_n_not_dec : $c1dc          49628
       con_n_not_hex : $c1e2          49634
          con_n_to_a : $c1c8          49608
   con_n_to_a_detect : $c1ea          49642
                DDRA : $0003              3   *
                DDRB : $0002              2   *
         DFERR_ABORT : $0012             18   *
         DFERR_BREAK : $000d             13   *
           DFERR_DIM : $0003              3   *
         DFERR_FNAME : $000b             11   *
     DFERR_IMMEDIATE : $0007              7   *
       DFERR_NEXTFOR : $000a             10   *
        DFERR_NODATA : $000e             14   *
          DFERR_NOIF : $0009              9   *
        DFERR_NOLINE : $0010             16   *
         DFERR_NOORG : $0014             20   *
        DFERR_NOPROC : $0005              5   *
            DFERR_OK : $0000              0   *
      DFERR_PROCPARM : $0006              6   *
      DFERR_QUANTITY : $0013             19   *
        DFERR_RETURN : $0011             17   *
       DFERR_STRLONG : $000c             12   *
        DFERR_SYNTAX : $0001              1   *
      DFERR_TYPEMISM : $0002              2   *
    DFERR_UNCLOSEDIF : $0008              8   *
         DFERR_UNTIL : $0004              4   *
          DFERR_WEND : $000f             15   *
          DFRT_ABORT : $0089            137   *
            DFRT_ASM : $0097            151   *
           DFRT_DATA : $0096            150   *
            DFRT_DEF : $0086            134   *
           DFRT_ELSE : $0093            147   *
AS65 Assembler for R6502 [1.42].                                     Page    3
-------------------------------- bank\bank0.s --------------------------------

         DFRT_ELSEIF : $0095            149   *
         DFRT_ENDDEF : $0087            135   *
          DFRT_ENDIF : $0094            148   *
            DFRT_FOR : $008e            142   *
             DFRT_IF : $0092            146   *
           DFRT_NEXT : $008f            143   *
         DFRT_REPEAT : $008c            140   *
         DFRT_RETURN : $0088            136   *
           DFRT_WEND : $0091            145   *
          DFRT_WHILE : $0090            144   *
            DFST_INT : $0001              1   *
            DFST_STR : $0080            128   *
            DFTK_BYT : $0020             32   *
         DFTK_BYTBIN : $0007              7   *
         DFTK_BYTDEC : $0005              5   *
         DFTK_BYTHEX : $0006              6   *
            DFTK_CHR : $0000              0   *
            DFTK_EOL : $0000              0   *
         DFTK_ESCVAL : $0020             32   *
            DFTK_FLT : $0080            128   *
             DFTK_FN : $0002              2   *
            DFTK_INT : $0010             16   *
         DFTK_INTBIN : $000b             11   *
         DFTK_INTDEC : $0009              9   *
         DFTK_INTHEX : $000a             10   *
             DFTK_KW : $0001              1   *
         DFTK_LINLEN : $0000              0   *
         DFTK_LINNUM : $0001              1   *
             DFTK_OP : $0008              8   *
          DFTK_OPMSK : $0007              7   *
           DFTK_PROC : $0012             18   *
          DFTK_RESVC : $000c             12   *
          DFTK_RESVD : $000d             13   *
          DFTK_RESVE : $000e             14   *
          DFTK_RESVF : $000f             15   *
          DFTK_RESV1 : $0001              1   *
          DFTK_RESV2 : $0002              2   *
          DFTK_RESV3 : $0003              3   *
          DFTK_RESV4 : $0004              4   *
          DFTK_RESV8 : $0008              8   *
          DFTK_RTMSK : $00f8            248   *
          DFTK_STEND : $001f             31   *
            DFTK_STR : $0040             64   *
         DFTK_STRLIT : $0010             16   *
          DFTK_STROP : $0004              4   *
          DFTK_TOKEN : $0080            128   *
            DFTK_VAR : $0011             17   *
        DFTK_VARPARM : $0026             38   *
          DFVVT_ARRY : $0080            128   *
           DFVVT_BYT : $0002              2   *
          DFVVT_DIM1 : $0003              3   *
          DFVVT_DIM2 : $0004              4   *
           DFVVT_FLT : $0008              8   *
            DFVVT_HI : $0002              2   *
           DFVVT_INT : $0001              1   *
            DFVVT_LO : $0001              1   *
          DFVVT_PROC : $0040             64   *
           DFVVT_STR : $0004              4   *
            DFVVT_SZ : $0008              8   *
          DFVVT_TYPE : $0000              0   *
           DF_MEMTOP : $9800          38912   *
        DF_PROGSTART : $0713           1811   *
AS65 Assembler for R6502 [1.42].                                     Page    4
-------------------------------- bank\bank0.s --------------------------------

          dflat_zp_e : $00ab            171
          dflat_zp_s : $005b             91
     dflat_zp_save_e : $00a1            161
     dflat_zp_save_s : $005b             91
          df_asmadmd : $009c            156
           df_asmlen : $00a0            160
         df_asmopcde : $009d            157
         df_asmoprnd : $009e            158
           df_asmopt : $009b            155
            df_asmpc : $0099            153
  df_asm_altaddrmode : $fd6c          64876
       df_asm_length : $fd5b          64859
    df_asm_tokensyms : $fd7d          64893
            df_brkpc : $0062             98
           df_brkval : $0064            100
         df_checkkey : $005b             91
         df_checkmsk : $005c             92
            df_clear : $f773          63347
          df_currdat : $0094            148
          df_currlin : $0086            134
         df_curstidx : $0080            128
           df_datoff : $0096            150
           df_eolidx : $007e            126
           df_exeoff : $0088            136
           df_ifnest : $0093            147
            df_immed : $005e             94
             df_init : $f765          63333
          df_initrun : $e000          57344
       df_lexer_line : $d97a          55674
  df_lexer_skip_lnum : $d99b          55707
          df_linbuff : $0400           1024
          df_lineidx : $0092            146
          df_lineptr : $0090            144
           df_linoff : $007c            124
           df_memtop : $0611           1553
          df_msg_acc : $f947          63815
           df_msg_pc : $f943          63811
         df_msg_xreg : $f94a          63818
         df_msg_yreg : $f94d          63821
          df_nextlin : $0089            137
        df_next_done : $e9ed          59885
         df_nxtstidx : $007f            127
     df_ost_peekType : $f73b          63291
       df_ost_popInt : $f741          63297
     df_ost_popParmX : $f720          63264
       df_ost_popPtr : $f749          63305
       df_ost_popStr : $f745          63301
      df_ost_pushInt : $f70d          63245
     df_ost_pushIntA : $f711          63249
    df_ost_pushParmX : $f6f7          63223
      df_ost_pushPtr : $f71c          63260
      df_ost_pushStr : $f718          63256
          df_parmtop : $0077            119
               df_pc : $0060             96
    df_pg_check_line : $de95          56981
df_pg_check_next_line : $de7e          56958
df_pg_copyinputtolinbuff : $df4b          57163
  df_pg_delete_block : $df0b          57099
   df_pg_delete_byte : $df0f          57103
df_pg_delete_next_byte : $df32          57138
         df_pg_dflat : $df55          57173
          df_pg_done : $df94          57236
AS65 Assembler for R6502 [1.42].                                     Page    5
-------------------------------- bank\bank0.s --------------------------------

     df_pg_find_line : $de72          56946
    df_pg_getcommand : $df6b          57195
     df_pg_inputline : $df42          57154
  df_pg_inputline_ok : $df4b          57163
 df_pg_insertlinbyte : $dff0          57328
    df_pg_insertline : $dfd1          57297
  df_pg_insert_block : $decf          57039
   df_pg_insert_byte : $dedb          57051
df_pg_insert_next_byte : $defb          57083
   df_pg_line_number : $dfb1          57265
       df_pg_nothing : $dfb0          57264
        df_pg_prompt : $df60          57184
    df_pg_prompt_msg : $dff9          57337
 df_pg_skip_del_line : $dfc7          57287
      df_pg_tokenise : $df96          57238
           df_prgend : $0067            103
          df_prgstrt : $0065            101
         df_procargs : $008c            140
          df_procloc : $008d            141
         df_procmode : $008b            139
          df_procptr : $008e            142
df_pr_line_gt_target : $de8a          56970
     df_pr_line_next : $debd          57021
  df_pr_line_nomatch : $deaf          57007
              df_raw : $0400           1024
              df_rnd : $0097            151
     df_rst_peekByte : $f6d5          63189
      df_rst_popByte : $f6cc          63180
      df_rst_popWord : $f6e9          63209
     df_rst_pushByte : $f6c3          63171
     df_rst_pushWord : $f6db          63195
          df_rtspace : $0500           1280
           df_rtstck : $0500           1280
           df_rtstop : $0076            118
         df_rt_abort : $f51a          62746
           df_rt_add : $e656          58966
         df_rt_aequb : $e732          59186
      df_rt_aequbFin : $e73c          59196
           df_rt_and : $e705          59141
  df_rt_array_exists : $e2f7          58103
     df_rt_arry_parm : $e1fb          57851
    df_rt_arry_parm2 : $e202          57858
df_rt_arry_parm2_arry2 : $e21a          57882
df_rt_arry_parm2_skiparry2 : $e221          57889
df_rt_arry_parm2_term : $e20a          57866
           df_rt_asc : $f4f3          62707
           df_rt_asl : $e6df          59103
        df_rt_aslbit : $e6e5          59109
       df_rt_asldone : $e6ef          59119
    df_rt_asm_ABSREL : $fcac          64684
    df_rt_asm_AM_ABS : $fcc3          64707
   df_rt_asm_AM_ABSX : $fcd0          64720
   df_rt_asm_AM_ABSY : $fcbe          64702
    df_rt_asm_AM_IMM : $fcd5          64725
    df_rt_asm_AM_IMP : $fca7          64679
df_rt_asm_AM_INDIRECT : $fcdf          64735
    df_rt_asm_AM_REL : $fccd          64717
  df_rt_asm_AM_ZPIND : $fd05          64773
df_rt_asm_AM_ZPINDORY : $fcf5          64757
  df_rt_asm_addrmode : $fc8b          64651
  df_rt_asm_assemble : $fa43          64067
df_rt_asm_assemble_done : $fa57          64087
AS65 Assembler for R6502 [1.42].                                     Page    6
-------------------------------- bank\bank0.s --------------------------------

 df_rt_asm_check_alt : $fb54          64340
   df_rt_asm_command : $fa58          64088
      df_rt_asm_data : $fab7          64183
 df_rt_asm_data_done : $faf5          64245
 df_rt_asm_data_next : $faeb          64235
df_rt_asm_data_write : $faf6          64246
df_rt_asm_data_write_err : $fb25          64293
df_rt_asm_data_write_hi : $fb10          64272
df_rt_asm_data_write_skip1 : $faf9          64249
df_rt_asm_data_write_skip2 : $fb14          64276
        df_rt_asm_db : $faaa          64170
  df_rt_asm_db_start : $faaf          64175
df_rt_asm_decode_token : $f082          61570
df_rt_asm_decode_token_done : $f0de          61662
df_rt_asm_decode_token_found : $f099          61593
df_rt_asm_decode_token_keyword : $f0a0          61600
df_rt_asm_decode_token_ws : $f089          61577
       df_rt_asm_dir : $fa6a          64106
  df_rt_asm_do_label : $fa54          64084
        df_rt_asm_ds : $fb27          64295
        df_rt_asm_dw : $faad          64173
    df_rt_asm_encode : $fb8d          64397
df_rt_asm_encode_print : $fbf7          64503
df_rt_asm_encode_relfar : $fbc5          64453
df_rt_asm_encode_relpos : $fbc1          64449
df_rt_asm_encode_skiprel : $fbc9          64457
df_rt_asm_encode_writebyte : $fbe5          64485
df_rt_asm_encode_writeword : $fbed          64493
df_rt_asm_find_addr_mode : $fd13          64787
df_rt_asm_find_addr_mode_err : $fd28          64808
df_rt_asm_find_addr_mode_loop : $fd19          64793
df_rt_asm_get_operand : $fd08          64776
     df_rt_asm_label : $fa7c          64124
      df_rt_asm_mnem : $fb45          64325
  df_rt_asm_mnem_chk : $fb68          64360
 df_rt_asm_mnem_done : $fb76          64374
  df_rt_asm_mnem_err : $fb8b          64395
  df_rt_asm_mnem_try : $fb4b          64331
       df_rt_asm_opt : $faa2          64162
       df_rt_asm_org : $fa8f          64143
   df_rt_asm_printCH : $fc65          64613
   df_rt_asm_printCR : $fc5b          64603
 df_rt_asm_printline : $fc73          64627
  df_rt_asm_printOPC : $fc2a          64554
  df_rt_asm_printOPR : $fc40          64576
df_rt_asm_printOPR_1 : $fc55          64597
   df_rt_asm_printPC : $fc19          64537
  df_rt_asm_printSPC : $fc36          64566
df_rt_asm_print_mmen : $fc09          64521
 df_rt_asm_print_rts : $fc18          64536
df_rt_asm_skip_to_sym : $fd2b          64811
df_rt_asm_skip_to_sym_done : $fd5a          64858
df_rt_asm_skip_to_sym_end : $fd49          64841
df_rt_asm_skip_to_sym_next : $fd3a          64826
    df_rt_asm_string : $face          64206
 df_rt_asm_string_ch : $fad5          64213
  df_rt_asm_tokenjmp : $ffb3          65459
        df_rt_assign : $ed6f          60783
    df_rt_assign_str : $ed7c          60796
         df_rt_asubb : $e73d          59197
      df_rt_asubbFin : $e74a          59210
   df_rt_binlen_skip : $f2f2          62194
AS65 Assembler for R6502 [1.42].                                     Page    7
-------------------------------- bank\bank0.s --------------------------------

         df_rt_bload : $f1ed          61933
    df_rt_bload_addr : $f210          61968
         df_rt_bsave : $f220          61984
   df_rt_bsave_parms : $f2d0          62160
         df_rt_bsuba : $e74b          59211
      df_rt_bsubaFin : $e758          59224
          df_rt_call : $f3e9          62441
       df_rt_calljsr : $f3f8          62456
     df_rt_check_pos : $e9e0          59872
   df_rt_check_while : $e884          59524
           df_rt_chr : $f458          62552
        df_rt_circle : $ec96          60566
           df_rt_cls : $ebe7          60391
         df_rt_comeq : $e7b3          59315
         df_rt_comgt : $e7aa          59306
        df_rt_comgte : $e7c5          59333
         df_rt_comlt : $e7a1          59297
        df_rt_comlte : $e7bc          59324
       df_rt_comment : $ed80          60800
         df_rt_comne : $e7ce          59342
       df_rt_copyStr : $e1b6          57782
    df_rt_copyStr_ch : $e1b8          57784
  df_rt_copyStr_done : $e1c1          57793
       df_rt_copy_fn : $f184          61828
        df_rt_cursor : $ec5e          60510
          df_rt_data : $ed80          60800
 df_rt_datastatement : $ea4d          59981
   df_rt_datlinstart : $ea45          59973
    df_rt_datnextlin : $ea53          59987
      df_rt_datumerr : $ea7d          60029
    df_rt_dec_binlen : $f2ec          62188
          df_rt_deek : $f30e          62222
           df_rt_def : $f5fa          62970
        df_rt_deferr : $f556          62806
  df_rt_def_find_var : $f606          62982
   df_rt_def_got_var : $f61a          63002
df_rt_def_got_varparm : $f617          62999
df_rt_def_initialise_parm : $f659          63065
  df_rt_def_load_var : $f638          63032
df_rt_def_load_var_done : $f675          63093
df_rt_def_load_var_int : $f667          63079
df_rt_def_load_var_int_skip : $f66a          63082
 df_rt_def_parm_done : $f630          63024
           df_rt_dim : $eb5e          60254
     df_rt_dim2_mul2 : $ebc5          60357
       df_rt_dim2_nz : $ebb0          60336
     df_rt_dim_alloc : $eb9f          60319
      df_rt_dim_done : $ebe4          60388
       df_rt_dim_err : $ebe5          60389
   df_rt_dim_findesc : $eb61          60257
 df_rt_dim_next_byte : $ebdf          60383
           df_rt_div : $e69d          59037
      df_rt_doassign : $ed72          60786
          df_rt_doke : $f0df          61663
        df_rt_doline : $ecaf          60591
       df_rt_dosound : $f124          61732
       df_rt_do_else : $e952          59730
       df_rt_elapsed : $f3ce          62414
          df_rt_else : $e900          59648
        df_rt_elseif : $e900          59648
        df_rt_enddef : $f67c          63100
         df_rt_endif : $e8fb          59643
AS65 Assembler for R6502 [1.42].                                     Page    8
-------------------------------- bank\bank0.s --------------------------------

           df_rt_eor : $e723          59171
           df_rt_eos : $ed82          60802
      df_rt_eos_true : $ed94          60820
            df_rt_eq : $e78d          59277
        df_rt_escjmp : $e629          58921
      df_rt_eval_byt : $e312          58130
   df_rt_eval_bytbin : $e1cf          57807
   df_rt_eval_bytdec : $e1cf          57807
   df_rt_eval_bythex : $e1cf          57807
      df_rt_eval_chr : $e1cf          57807
      df_rt_eval_esc : $e0fc          57596
  df_rt_eval_esc_tab : $e10b          57611
   df_rt_eval_intbin : $e1cf          57807
   df_rt_eval_intdec : $e1cf          57807
   df_rt_eval_inthex : $e1cf          57807
     df_rt_eval_lvar : $e25f          57951
   df_rt_eval_lvskip : $e239          57913
     df_rt_eval_proc : $e324          58148
 df_rt_eval_proc_err : $e331          58161
      df_rt_eval_ptr : $e31d          58141
 df_rt_eval_reserved : $e1db          57819
   df_rt_eval_strlit : $e1dd          57821
df_rt_eval_strlit_ch : $e1f1          57841
df_rt_eval_strlit_done : $e1f8          57848
      df_rt_eval_var : $e226          57894
df_rt_eval_var_dim2adj : $e2a9          58025
df_rt_eval_var_dim2adjx : $e2b3          58035
df_rt_eval_var_dim2adjy : $e2ae          58030
df_rt_eval_var_do_arry : $e27a          57978
df_rt_eval_var_nomult : $e2cc          58060
df_rt_eval_var_notarry : $e24f          57935
 df_rt_eval_var_push : $e2e6          58086
df_rt_eval_var_simple : $e26c          57964
  df_rt_eval_var_str : $e31c          58140
   df_rt_exec_ctrl_c : $e46b          58475
   df_rt_exec_ctrl_z : $e46f          58479
      df_rt_exec_end : $e469          58473
 df_rt_exec_find_tok : $e417          58391
df_rt_exec_found_tok : $e41c          58396
 df_rt_exec_init_ptr : $e410          58384
     df_rt_exec_jump : $e471          58481
   df_rt_exec_no_key : $e442          58434
     df_rt_exec_proc : $f5b0          62896
     df_rt_exec_stat : $e40a          58378
         df_rt_false : $e75f          59231
  df_rt_file_cleanup : $f1ad          61869
     df_rt_file_errc : $f197          61847
 df_rt_findelseendif : $e8c3          59587
    df_rt_findescval : $e528          58664
df_rt_findescval_loop : $e52b          58667
      df_rt_findproc : $e4e0          58592
  df_rt_findproc_cmd : $e4f2          58610
  df_rt_findproc_err : $e526          58662
df_rt_findproc_nextstat : $e512          58642
      df_rt_findwend : $e851          59473
    df_rt_fname_case : $f186          61830
           df_rt_for : $e955          59733
 df_rt_generate_lvar : $ed4c          60748
           df_rt_get : $f3a0          62368
  df_rt_getbin_parms : $f2af          62127
df_rt_getbin_parms_loop : $f2b1          62129
     df_rt_getdatatk : $ea63          60003
AS65 Assembler for R6502 [1.42].                                     Page    9
-------------------------------- bank\bank0.s --------------------------------

       df_rt_getlvar : $e542          58690
       df_rt_getnval : $e06f          57455
      df_rt_get2Ints : $e333          58163
      df_rt_get2Strs : $e342          58178
      df_rt_get_push : $f3b1          62385
     df_rt_get_pushp : $f3b0          62384
      df_rt_get_sync : $f3a5          62373
            df_rt_gt : $e779          59257
           df_rt_gte : $e783          59267
      df_rt_gte_calc : $e786          59270
           df_rt_hex : $f46c          62572
         df_rt_himem : $ec64          60516
         df_rt_hires : $ec73          60531
            df_rt_if : $e912          59666
         df_rt_ifcmd : $e8c6          59590
        df_rt_ifelse : $e8e4          59620
        df_rt_ifeval : $e914          59668
  df_rt_ifskipelseif : $e8db          59611
       df_rt_if_done : $e8ff          59647
      df_rt_if_found : $e8f1          59633
      df_rt_if_match : $e8bb          59579
       df_rt_if_stat : $e8a5          59557
   df_rt_if_stat_err : $e8b9          59577
     df_rt_init_done : $e06e          57454
 df_rt_init_filename : $f178          61816
 df_rt_init_stat_ptr : $e3f5          58357
      df_rt_init_vvt : $e02b          57387
 df_rt_init_vvt_skip : $e05f          57439
 df_rt_init_vvt_slot : $e035          57397
df_rt_init_vvt_slot_undim : $e041          57409
           df_rt_ink : $ec7c          60540
         df_rt_input : $eaf2          60146
     df_rt_input_err : $eb2c          60204
     df_rt_input_num : $eb15          60181
     df_rt_input_str : $eb0d          60173
    df_rt_ldtokenise : $f1d5          61909
          df_rt_left : $f49d          62621
           df_rt_len : $f4e7          62695
          df_rt_line : $ecb6          60598
        df_rt_lineto : $eca8          60584
          df_rt_list : $ee81          61057
  df_rt_listcheckvnt : $ede7          60903
   df_rt_listgotnext : $ee16          60950
   df_rt_listnextvnt : $ee0f          60943
   df_rt_listpn_done : $ee28          60968
       df_rt_listprg : $eea8          61096
    df_rt_listprgend : $eeb0          61104
      df_rt_listproc : $ee29          60969
    df_rt_listprocch : $edf3          60915
    df_rt_listproccr : $edff          60927
 df_rt_listprocnames : $eddb          60891
 df_rt_listprocpause : $ee05          60933
    df_rt_listp_copy : $ee30          60976
    df_rt_listp_done : $ee75          61045
 df_rt_listp_findcmd : $ee5b          61019
 df_rt_listp_findend : $ee54          61012
df_rt_listp_notfound : $ee7f          61055
      df_rt_listwait : $ee0c          60940
      df_rt_list_all : $ee94          61076
 df_rt_list_all_line : $eef9          61177
   df_rt_list_decode : $ef05          61189
df_rt_list_decode_esc : $ef37          61239
AS65 Assembler for R6502 [1.42].                                     Page   10
-------------------------------- bank\bank0.s --------------------------------

df_rt_list_decode_token : $f043          61507
df_rt_list_decode_token_normal : $f04a          61514
   df_rt_list_donvvt : $f035          61493
df_rt_list_do_decode_tkn : $f051          61521
   df_rt_list_escval : $ef15          61205
  df_rt_list_findvvt : $efdd          61405
df_rt_list_find_asm_sym : $f0ab          61611
 df_rt_list_find_sym : $f05a          61530
   df_rt_list_gotvvt : $f00c          61452
df_rt_list_gotvvtend : $eff6          61430
df_rt_list_got_asm_sym : $f0cc          61644
df_rt_list_got_last_sym : $f06c          61548
  df_rt_list_got_sym : $f070          61552
     df_rt_list_line : $eeb6          61110
df_rt_list_line_cont : $eed0          61136
 df_rt_list_line_fin : $eef6          61174
df_rt_list_line_only : $eefc          61180
df_rt_list_line_only_fin : $eef8          61176
    df_rt_list_linno : $ee9b          61083
   df_rt_list_linnum : $f036          61494
  df_rt_list_nexttok : $ef1e          61214
df_rt_list_next_asm_ch : $f0b1          61617
  df_rt_list_next_ch : $f060          61536
df_rt_list_next_line : $eed7          61143
    df_rt_list_pause : $eec5          61125
  df_rt_list_synckey : $eec1          61121
    df_rt_list_token : $ef1b          61211
   df_rt_list_vvtend : $efe9          61417
          df_rt_load : $f293          62099
       df_rt_loadbin : $f2bc          62140
  df_rt_loadbin_byte : $f2be          62142
   df_rt_loadbin_inc : $f2c8          62152
      df_rt_loadline : $f1bb          61883
         df_rt_local : $eb2e          60206
    df_rt_local_done : $eb5a          60250
 df_rt_local_findesc : $eb35          60213
           df_rt_lsr : $e6f2          59122
        df_rt_lsrbit : $e6f8          59128
       df_rt_lsrdone : $e702          59138
       df_rt_lst_bin : $efa3          61347
       df_rt_lst_bit : $efad          61357
 df_rt_lst_bit_skip0 : $efb5          61365
    df_rt_lst_bytbin : $ef98          61336
    df_rt_lst_bythex : $ef73          61299
       df_rt_lst_chr : $ef56          61270
df_rt_lst_const_done : $ef82          61314
   df_rt_lst_hex_pre : $ef69          61289
    df_rt_lst_intbin : $efa1          61345
    df_rt_lst_intdec : $efbd          61373
    df_rt_lst_inthex : $ef86          61318
    df_rt_lst_lo_hex : $ef76          61302
      df_rt_lst_proc : $efc8          61384
  df_rt_lst_reserved : $ef55          61269
    df_rt_lst_strlit : $f01c          61468
  df_rt_lst_strlitch : $f023          61475
 df_rt_lst_strlitdon : $f02e          61486
       df_rt_lst_var : $efc8          61384
            df_rt_lt : $e765          59237
           df_rt_lte : $e76f          59247
      df_rt_lte_calc : $e772          59250
           df_rt_mem : $f34c          62284
      df_rt_mem_calc : $f38d          62349
AS65 Assembler for R6502 [1.42].                                     Page   11
-------------------------------- bank\bank0.s --------------------------------

      df_rt_mem_free : $f357          62295
       df_rt_mem_prg : $f36a          62314
       df_rt_mem_var : $f37d          62333
           df_rt_mid : $f4c9          62665
           df_rt_mod : $e6be          59070
       df_rt_monitor : $e826          59430
          df_rt_mult : $e67c          59004
         df_rt_music : $f134          61748
       df_rt_nassign : $ed2f          60719
            df_rt_ne : $e797          59287
         df_rt_neval : $e075          57461
    df_rt_neval_done : $e0c3          57539
   df_rt_neval_donow : $e0e6          57574
     df_rt_neval_esc : $e0a2          57506
df_rt_neval_nextbyte : $e0cb          57547
    df_rt_neval_optk : $e078          57464
 df_rt_neval_process : $e0ba          57530
  df_rt_neval_pushOp : $e0f7          57591
      df_rt_neval_tk : $e0a8          57512
   df_rt_neval_tk_fn : $e0c4          57540
   df_rt_neval_tk_op : $e0d0          57552
  df_rt_neval_tk_opp : $e0cf          57551
           df_rt_new : $e829          59433
          df_rt_next : $e993          59795
     df_rt_nextdatum : $ea35          59957
      df_rt_nextstat : $e489          58505
   df_rt_nextstat_dn : $e4b3          58547
  df_rt_nextstat_err : $e4af          58543
   df_rt_nextstat_ln : $e49e          58526
    df_rt_next_check : $e9e3          59875
      df_rt_next_err : $e9f0          59888
      df_rt_noif_err : $e910          59664
df_rt_openforbinload : $f1e4          61924
df_rt_openforbinsave : $f1db          61915
            df_rt_or : $e714          59156
         df_rt_paper : $ec82          60546
    df_rt_parm_2ints : $e351          58193
    df_rt_parm_3ints : $e368          58216
    df_rt_parm_4ints : $e38b          58251
    df_rt_parm_5ints : $e3ba          58298
    df_rt_parse_file : $f18f          61839
          df_rt_peek : $f311          62225
         df_rt_pixel : $f3c1          62401
       df_rt_pixmode : $ec76          60534
          df_rt_play : $f149          61769
          df_rt_plot : $ebea          60394
       df_rt_plotstr : $ec1d          60445
     df_rt_plotstrch : $ec2e          60462
   df_rt_plotstrdone : $ec5d          60509
    df_rt_plot_h_int : $ec14          60436
    df_rt_plot_h_str : $ec4b          60491
         df_rt_point : $ec8c          60556
          df_rt_poke : $f0ee          61678
      df_rt_pop_stat : $e4c7          58567
   df_rt_pop_stat_go : $e55e          58718
         df_rt_print : $ecea          60650
       df_rt_printat : $ece0          60640
       df_rt_println : $ed27          60711
    df_rt_print_done : $ed24          60708
  df_rt_print_gotstr : $ed18          60696
     df_rt_print_num : $ea1a          59930
     df_rt_print_str : $ea21          59937
AS65 Assembler for R6502 [1.42].                                     Page   12
-------------------------------- bank\bank0.s --------------------------------

  df_rt_print_string : $ed1e          60702
  df_rt_print_str_ch : $ea2a          59946
df_rt_print_str_done : $ea34          59956
      df_rt_print_ws : $eced          60653
          df_rt_proc : $f558          62808
     df_rt_proc_addr : $f582          62850
    df_rt_proc_local : $f6af          63151
df_rt_proc_local_load : $f6b6          63158
  df_rt_proc_parmerr : $f556          62806
df_rt_proc_parm_done : $f5a1          62881
df_rt_proc_parm_none : $f5a2          62882
df_rt_proc_push_parm : $f58d          62861
df_rt_proc_unloadvar : $f68e          63118
df_rt_proc_unload_done : $f6ae          63150
  df_rt_proc_unlocal : $f688          63112
     df_rt_push_int1 : $f3f5          62453
     df_rt_push_stat : $e4bb          58555
     df_rt_putintres : $e64f          58959
          df_rt_read : $ead6          60118
      df_rt_readbyte : $f312          62226
 df_rt_readbyte_skip : $f327          62247
     df_rt_readdatum : $ea7f          60031
     df_rt_read_done : $eaef          60143
 df_rt_read_find_var : $ead8          60120
         df_rt_renum : $ed96          60822
      df_rt_renum_do : $edaa          60842
    df_rt_renum_next : $edc9          60873
      df_rt_renum_ok : $eda6          60838
  df_rt_renum_update : $edb1          60849
        df_rt_repeat : $e9f2          59890
         df_rt_reset : $f2f9          62201
        df_rt_return : $f681          63105
         df_rt_right : $f4ae          62638
           df_rt_rnd : $f32a          62250
     df_rt_rnd_noeor : $f33e          62270
       df_rt_rnd_set : $f345          62277
           df_rt_run : $ed81          60801
     df_rt_run_token : $e47a          58490
          df_rt_sadd : $ea19          59929
       df_rt_sassign : $ed46          60742
          df_rt_save : $f241          62017
       df_rt_savebin : $f2ce          62158
  df_rt_savebin_byte : $f2dc          62172
   df_rt_savebin_inc : $f2e6          62182
          df_rt_scrn : $f3b4          62388
           df_rt_seq : $e802          59394
         df_rt_seval : $e131          57649
    df_rt_seval_copy : $e18f          57743
    df_rt_seval_done : $e1b2          57778
     df_rt_seval_esc : $e15b          57691
df_rt_seval_esc_proc : $e1b0          57776
df_rt_seval_esc_strlit : $e1aa          57770
 df_rt_seval_esc_var : $e18b          57739
df_rt_seval_nextbyte : $e1a5          57765
    df_rt_seval_optk : $e13f          57663
      df_rt_seval_tk : $e169          57705
   df_rt_seval_tk_fn : $e182          57730
   df_rt_seval_tk_op : $e17e          57726
           df_rt_sgn : $f3fb          62459
         df_rt_sgn_n : $f40e          62478
         df_rt_sgn_z : $f413          62483
           df_rt_sgt : $e7f9          59385
AS65 Assembler for R6502 [1.42].                                     Page   13
-------------------------------- bank\bank0.s --------------------------------

          df_rt_sgte : $e7e4          59364
df_rt_skipinitdataptr : $ea6d          60013
 df_rt_skipnestendif : $e8ee          59630
    df_rt_skipnestif : $e8e1          59617
       df_rt_skip_ws : $e535          58677
  df_rt_skip_ws_loop : $e538          58680
           df_rt_slt : $e7f2          59378
          df_rt_slte : $e7d7          59351
    df_rt_snd_common : $f0f8          61688
           df_rt_sne : $e7eb          59371
         df_rt_sound : $f121          61729
df_rt_sound_env_skip : $f11e          61726
   df_rt_sound_noise : $f12b          61739
       df_rt_sprchar : $f51c          62748
        df_rt_sprhit : $f544          62788
df_rt_sprhit_inactive : $f550          62800
       df_rt_sprinit : $f53b          62779
      df_rt_sprmulti : $f53e          62782
        df_rt_sprpos : $f526          62758
        df_rt_sprupd : $f532          62770
         df_rt_stick : $f39a          62362
 df_rt_strlen_common : $f418          62488
  df_rt_strlen_count : $f41e          62494
      df_rt_str_comp : $e809          59401
 df_rt_str_comp_byte : $e80e          59406
   df_rt_str_comp_eq : $e823          59427
df_rt_str_comp_false : $e7de          59358
   df_rt_str_comp_gt : $e820          59424
   df_rt_str_comp_lt : $e81d          59421
 df_rt_str_comp_true : $e7e1          59361
    df_rt_str_cpy_ch : $f438          62520
   df_rt_str_extract : $f425          62501
           df_rt_sub : $e669          58985
          df_rt_sval : $e135          57653
          df_rt_text : $ec70          60528
         df_rt_tload : $f1b3          61875
      df_rt_tokenjmp : $e567          58727
          df_rt_true : $e759          59225
         df_rt_tsave : $f199          61849
df_rt_unexpected_end : $e46d          58477
         df_rt_until : $e9fa          59898
df_rt_untilnext_done : $ea0f          59919
     df_rt_until_err : $ea17          59927
           df_rt_val : $f504          62724
       df_rt_val_err : $f518          62744
          df_rt_wait : $ecc7          60615
  df_rt_wait_counter : $eccb          60619
   df_rt_wait_skiphi : $ecd7          60631
     df_rt_wait_tick : $eccd          60621
          df_rt_wend : $e88f          59535
      df_rt_wend_end : $e88d          59533
      df_rt_wend_err : $e8a3          59555
         df_rt_while : $e82c          59436
     df_rt_while_cmd : $e862          59490
    df_rt_while_done : $e83c          59452
         df_sevalptr : $007a            122
    df_show_err_done : $f8f3          63731
     df_show_err_fin : $f8d2          63698
    df_show_err_find : $f87d          63613
   df_show_err_found : $f899          63641
  df_show_err_linnum : $f8b9          63673
    df_show_err_skip : $f885          63621
AS65 Assembler for R6502 [1.42].                                     Page   14
-------------------------------- bank\bank0.s --------------------------------

               df_sp : $005f             95
          df_starend : $0074            116
         df_starstrt : $0072            114
          df_strbuff : $0078            120
           df_stridx : $0079            121
      df_str_src_end : $f44d          62541
        df_st_malloc : $f74d          63309
df_st_typemismatcherr : $f739          63289
           df_symini : $0084            132
           df_symoff : $0083            131
           df_symtab : $0081            129
         df_tk_abort : $de47          56903
           df_tk_add : $de47          56903
           df_tk_and : $de47          56903
           df_tk_asc : $de17          56855
           df_tk_asl : $de47          56903
 df_tk_asm_addr_mode : $f9e4          63972
df_tk_asm_addr_mode_ok : $f9d3          63955
df_tk_asm_addr_mode_1 : $f9f9          63993
df_tk_asm_addr_mode_2 : $fa03          64003
df_tk_asm_checknexttok : $f98c          63884
df_tk_asm_checktokch : $f98e          63886
        df_tk_asm_db : $ddb2          56754
        df_tk_asm_ds : $de4d          56909
        df_tk_asm_dw : $ddb2          56754
df_tk_asm_exec_parser : $f9d5          63957
df_tk_asm_foundsymend : $f9b4          63924
  df_tk_asm_matchtok : $f97e          63870
  df_tk_asm_mnemonic : $f973          63859
       df_tk_asm_opt : $de4d          56909
       df_tk_asm_org : $de4d          56909
df_tk_asm_parse_command : $f950          63824
df_tk_asm_parse_command_err : $f972          63858
df_tk_asm_parse_command_symbol : $f979          63865
  df_tk_asm_symfound : $f9c7          63943
df_tk_asm_symnextentry : $f9a5          63909
df_tk_asm_symnomatch : $f9a3          63907
  df_tk_asm_tokenjmp : $ffa9          65449
        df_tk_assign : $dd5a          56666
         df_tk_bload : $de53          56915
          df_tk_body : $d9a3          55715
         df_tk_bsave : $de5d          56925
          df_tk_call : $de39          56889
      df_tk_callproc : $de0a          56842
          df_tk_char : $d79a          55194
      df_tk_char_err : $d740          55104
         df_tk_chdir : $de4d          56909
  df_tk_checknexttok : $da20          55840
    df_tk_checktokch : $da3d          55869
           df_tk_chr : $de17          56855
        df_tk_circle : $de5d          56925
     df_tk_closebrkt : $de1c          56860
           df_tk_cls : $de47          56903
        df_tk_colour : $de5d          56925
       df_tk_comment : $dd63          56675
  df_tk_comment_done : $dd6e          56686
         df_tk_const : $d7d8          55256
     df_tk_const_err : $d7f8          55288
df_tk_const_try_char : $d7f1          55281
 df_tk_const_try_num : $d7e7          55271
 df_tk_const_try_str : $d7ea          55274
        df_tk_cursor : $de4d          56909
AS65 Assembler for R6502 [1.42].                                     Page   15
-------------------------------- bank\bank0.s --------------------------------

          df_tk_data : $ddb2          56754
     df_tk_data_done : $ddb0          56752
          df_tk_deek : $de17          56855
           df_tk_def : $ddeb          56811
           df_tk_del : $de4d          56909
           df_tk_dim : $ddc9          56777
           df_tk_dir : $de47          56903
           df_tk_div : $de47          56903
          df_tk_doke : $de53          56915
          df_tk_done : $d9ca          55754
       df_tk_elapsed : $de22          56866
          df_tk_else : $de47          56903
        df_tk_elseif : $de4d          56909
        df_tk_enddef : $de47          56903
         df_tk_endif : $de47          56903
           df_tk_eor : $de47          56903
            df_tk_eq : $de47          56903
         df_tk_error : $dd58          56664
      df_tk_errortab : $f7aa          63402
        df_tk_error2 : $de15          56853
   df_tk_error_atpos : $f851          63569
   df_tk_error_error : $f857          63575
  df_tk_error_inline : $f847          63559
   df_tk_exec_parser : $d9e5          55781
        df_tk_expect : $d734          55092
      df_tk_expectok : $d732          55090
  df_tk_expecttokret : $d74d          55117
    df_tk_expect_tok : $d742          55106
df_tk_expect_tok_err : $d74e          55118
df_tk_expect_tok_fatal : $d754          55124
    df_tk_expression : $d936          55606
     df_tk_expre_err : $d941          55617
     df_tk_expr_more : $ddb7          56759
           df_tk_for : $ddf1          56817
      df_tk_for_done : $de08          56840
   df_tk_foundsymend : $da6c          55916
           df_tk_get : $de17          56855
       df_tk_get_buf : $d6af          54959
  df_tk_get_buf_null : $d6b9          54969
            df_tk_gt : $de47          56903
           df_tk_gte : $de47          56903
         df_tk_hchar : $de5d          56925
           df_tk_hex : $de17          56855
         df_tk_himem : $de4d          56909
         df_tk_hires : $de47          56903
            df_tk_if : $de4d          56909
           df_tk_imm : $fa19          64025
      df_tk_indirect : $fa1c          64028
 df_tk_indirect_done : $fa41          64065
    df_tk_indirect_y : $fa30          64048
           df_tk_ink : $de4d          56909
         df_tk_input : $ddc0          56768
       df_tk_isalpha : $d6f7          55031
    df_tk_isalphanum : $d704          55044
 df_tk_isalpha_false : $d6f4          55028
         df_tk_isbin : $d6d8          55000
    df_tk_isbin_true : $d6e1          55009
       df_tk_isdigit : $d6cd          54989
 df_tk_isdigit_false : $d6d6          54998
         df_tk_isEOS : $d948          55624
         df_tk_ishex : $d6e2          55010
   df_tk_ishex_false : $d6f4          55028
AS65 Assembler for R6502 [1.42].                                     Page   16
-------------------------------- bank\bank0.s --------------------------------

   df_tk_ishex_truep : $d6f2          55026
        df_tk_isproc : $d70a          55050
   df_tk_isproc_true : $d70f          55055
          df_tk_isws : $d72d          55085
    df_tk_isws_false : $d732          55090
          df_tk_left : $de2d          56877
           df_tk_len : $de17          56855
          df_tk_line : $de66          56934
       df_tk_linenum : $d9f4          55796
        df_tk_lineto : $de53          56915
    df_tk_line_empty : $d9e1          55777
          df_tk_list : $dd94          56724
df_tk_listp_procname : $dd70          56688
df_tk_listp_procname_ch : $dd7f          56703
df_tk_listp_procname_err : $dd92          56722
df_tk_listp_procname_ok : $dd90          56720
     df_tk_list_done : $dda3          56739
     df_tk_list_line : $dda0          56736
    df_tk_list_procs : $dd99          56729
          df_tk_load : $de4d          56909
         df_tk_local : $ddda          56794
      df_tk_localvar : $d82c          55340
 df_tk_localvar_cont : $d832          55346
           df_tk_lsr : $de47          56903
            df_tk_lt : $de47          56903
           df_tk_lte : $de47          56903
      df_tk_matchtok : $da13          55827
df_tk_matchtok_skip_op : $da39          55865
           df_tk_mem : $de17          56855
           df_tk_mid : $de33          56883
           df_tk_mod : $de47          56903
       df_tk_monitor : $de47          56903
          df_tk_mult : $de47          56903
         df_tk_music : $de66          56934
         df_tk_narry : $d8b6          55478
     df_tk_narry_end : $d8c3          55491
         df_tk_nbrkt : $d8c8          55496
            df_tk_ne : $de47          56903
           df_tk_new : $de47          56903
          df_tk_next : $de47          56903
     df_tk_next_expr : $ddb2          56754
           df_tk_nop : $d921          55585
     df_tk_nop_false : $d8e0          55520
       df_tk_not_eos : $d940          55616
         df_tk_nterm : $d8d5          55509
    df_tk_nterm_cont : $d8e2          55522
    df_tk_nterm_done : $d8e0          55520
     df_tk_nterm_err : $d91f          55583
    df_tk_nterm_proc : $d8d0          55504
   df_tk_nterm_tryfn : $d8ef          55535
df_tk_nterm_try_const : $d919          55577
df_tk_nterm_try_proc : $d905          55557
 df_tk_nterm_try_var : $d911          55569
           df_tk_num : $d756          55126
       df_tk_num_bin : $d785          55173
       df_tk_num_err : $d740          55104
    df_tk_num_hexbin : $d777          55159
       df_tk_num_put : $d78d          55181
            df_tk_or : $de47          56903
         df_tk_paper : $de4d          56909
          df_tk_parm : $d81a          55322
 df_tk_parm_skip_var : $d827          55335
AS65 Assembler for R6502 [1.42].                                     Page   17
-------------------------------- bank\bank0.s --------------------------------

    df_tk_parseerror : $d9e3          55779
 df_tk_parse_command : $d962          55650
df_tk_parse_command_done : $d978          55672
df_tk_parse_command_err : $d979          55673
df_tk_parse_user_proc : $d958          55640
          df_tk_peek : $de17          56855
      df_tk_peek_buf : $d6a9          54953
         df_tk_pixel : $de2d          56877
       df_tk_pixmode : $de4d          56909
          df_tk_play : $de66          56934
          df_tk_plot : $de5d          56925
         df_tk_point : $de53          56915
          df_tk_poke : $de53          56915
     df_tk_preassign : $dd49          56649
         df_tk_print : $ddab          56747
       df_tk_printat : $dda5          56741
       df_tk_println : $ddab          56747
    df_tk_print_done : $ddb0          56752
          df_tk_proc : $d842          55362
     df_tk_proc_call : $d87e          55422
    df_tk_proc_comma : $d898          55448
      df_tk_proc_err : $d8b4          55476
     df_tk_proc_errp : $d8b3          55475
   df_tk_proc_noparm : $d8a1          55457
    df_tk_proc_parms : $d871          55409
df_tk_proc_skip_args : $d8b1          55473
df_tk_proc_skip_call : $d887          55431
  df_tk_put_overflow : $d6c6          54982
       df_tk_put_tok : $d6ba          54970
          df_tk_read : $ddc9          56777
         df_tk_renum : $de5d          56925
        df_tk_repeat : $de47          56903
         df_tk_reset : $de0c          56844
        df_tk_return : $de49          56905
         df_tk_right : $de2d          56877
           df_tk_rnd : $de17          56855
           df_tk_run : $de47          56903
          df_tk_save : $de4d          56909
          df_tk_scrn : $de2d          56877
           df_tk_sgn : $de17          56855
       df_tk_skip_ws : $d710          55056
         df_tk_sound : $de5d          56925
       df_tk_sprchar : $de53          56915
        df_tk_sprhit : $de17          56855
       df_tk_sprinit : $de47          56903
     df_tk_spritepos : $de5d          56925
      df_tk_sprmulti : $de53          56915
        df_tk_sprpos : $de5d          56925
        df_tk_sprupd : $de47          56903
         df_tk_stick : $de1c          56860
           df_tk_str : $d7b6          55222
      df_tk_strip_ws : $d720          55072
        df_tk_str_ch : $d7be          55230
       df_tk_str_don : $d7cf          55247
       df_tk_str_err : $d7d6          55254
           df_tk_sub : $de47          56903
      df_tk_sws_done : $d72c          55084
     df_tk_sws_loop1 : $d720          55072
      df_tk_symfound : $da7d          55933
df_tk_symfound_final : $da8d          55949
  df_tk_symnextentry : $da5d          55901
    df_tk_symnomatch : $da5b          55899
AS65 Assembler for R6502 [1.42].                                     Page   18
-------------------------------- bank\bank0.s --------------------------------

   df_tk_symnomatchp : $da5a          55898
          df_tk_text : $de47          56903
         df_tk_tload : $de4d          56909
      df_tk_tokenjmp : $dc26          56358
     df_tk_tokentype : $dce8          56552
df_tk_tok_expression : $d942          55618
    df_tk_try_assign : $d9c5          55749
   df_tk_try_command : $d9be          55742
         df_tk_tsave : $de4d          56909
         df_tk_until : $de4d          56909
           df_tk_val : $de17          56855
           df_tk_var : $d7fa          55290
        df_tk_var_ck : $d810          55312
      df_tk_var_cont : $d800          55296
    df_tk_var_noarry : $d7d4          55252
         df_tk_vpeek : $de17          56855
          df_tk_wait : $de4d          56909
          df_tk_wend : $de47          56903
         df_tk_while : $de4d          56909
       df_tk_ws_done : $d71f          55071
      df_tk_ws_loop1 : $d710          55056
        df_tk_2parms : $de53          56915
        df_tk_3parms : $de5d          56925
        df_tk_4parms : $de66          56934
          df_tmpptra : $00a1            161
          df_tmpptrb : $00a3            163
          df_tmpptrc : $00a5            165
          df_tmpptrd : $00a7            167
          df_tmpptre : $00a9            169
              df_tok : $0480           1152
          df_tokbuff : $0480           1152
        df_tokensyms : $da95          55957
           df_tokoff : $007d            125
       df_trap_error : $f85e          63582
  df_trap_go_monitor : $f878          63608
     df_trap_monitor : $f8fc          63740
      df_trap_normal : $f87b          63611
           df_varcnt : $0071            113
      df_var_analyse : $d5ce          54734
df_var_analyse_chk_arry : $d626          54822
df_var_analyse_chk_dollar : $d617          54807
df_var_analyse_chk_post : $d606          54790
  df_var_analyse_err : $d5fc          54780
df_var_analyse_fatal_err : $d604          54788
   df_var_analyse_ok : $d66c          54892
   df_var_check_type : $d539          54585
         df_var_find : $d4fd          54525
   df_var_findcreate : $d640          54848
df_var_findcreate_copy : $d690          54928
df_var_findcreate_create : $d659          54873
df_var_findcreate_err : $d66a          54890
df_var_findcreate_errp : $d669          54889
df_var_findcreate_found : $d652          54866
  df_var_find_no_vnt : $d565          54629
    df_var_find_true : $d56b          54635
df_var_initialise_var : $d679          54905
 df_var_insert_space : $d573          54643
    df_var_match_vnt : $d50d          54541
 df_var_match_vnt_do : $d519          54553
df_var_match_vnt_sym : $d51d          54557
    df_var_move_byte : $d596          54678
 df_var_move_byte_do : $d5a2          54690
AS65 Assembler for R6502 [1.42].                                     Page   19
-------------------------------- bank\bank0.s --------------------------------

df_var_move_byte_fin : $d5b3          54707
     df_var_not_arry : $d637          54839
     df_var_not_proc : $d5e0          54752
df_var_type_countlen : $d5e3          54755
df_var_type_countlen_alphanum : $d5f3          54771
df_var_type_countlen_done : $d5f8          54776
df_var_vnt_entry_end : $d550          54608
df_var_vnt_sym_nomatch : $d543          54595
     df_var_zero_vnt : $d685          54917
           df_vntend : $006b            107
          df_vntstrt : $0069            105
           df_vvtend : $006f            111
          df_vvtstrt : $006d            109
               errno : $005d             93
 fd_cload_getname_pc : $c577          50551
 fd_csave_getname_pc : $c5cc          50636
     fd_getname_addr : $0400           1024
               grc_d : $0043             67   *
               grc_r : $003f             63   *
               grc_x : $0040             64   *
              grc_x0 : $003d             61   *
               grc_y : $0042             66   *
              grc_y0 : $003e             62   *
              grl_dx : $0041             65   *
              grl_dy : $0042             66   *
               grl_p : $004b             75   *
            grl_sinx : $004a             74   *
            grl_siny : $004d             77   *
            grl_xyyx : $0043             67   *
              grl_x0 : $003d             61   *
              grl_x1 : $003f             63   *
              grl_y0 : $003e             62   *
              grl_y1 : $0040             64   *
             grl_2dx : $0044             68   *
            grl_2dxy : $0048             72   *
             grl_2dy : $0046             70   *
             gr_char : $0003              3
  gr_check_font_copy : $cc5f          52319
gr_check_font_copy_done : $cc76          52342
           gr_circle : $d03e          53310
      gr_circle_done : $d07b          53371
    gr_circle_d_lte0 : $d06e          53358
      gr_circle_plot : $d04b          53323
    gr_circle_points : $d07c          53372
              gr_cls : $cd4c          52556
          gr_cls_col : $cd6c          52588
          gr_cls_row : $cd58          52568
    gr_cls_skip_marg : $cd68          52584
        gr_copy_byte : $cc36          52278
         gr_copy_mem : $cc2c          52268
         gr_cur_down : $ce97          52887
         gr_cur_left : $ce79          52857
          gr_cur_ptr : $000d             13
        gr_cur_right : $ce67          52839
  gr_cur_skip_at_bot : $cea3          52899
 gr_cur_skip_at_left : $ce88          52872
   gr_cur_skip_at_tl : $ce8c          52876
           gr_cur_up : $ce8d          52877
            gr_cur_x : $000b             11
            gr_cur_y : $000c             12
              gr_del : $cea4          52900
         gr_geom_tmp : $0016             22
AS65 Assembler for R6502 [1.42].                                     Page   20
-------------------------------- bank\bank0.s --------------------------------

        gr_geom_tmp2 : $0007              7
              gr_get : $cdb5          52661
       gr_getXY_base : $cd92          52626
          gr_get_key : $ceac          52908
        gr_get_key_2 : $ceb0          52912
            gr_hchar : $cf4b          53067
   gr_hchar_copyline : $cfa1          53153
gr_hchar_copyline_nx : $cfde          53214
 gr_hchar_copyline_0 : $cfc9          53193
 gr_hchar_copyline_2 : $cfb9          53177
    gr_hchar_getfont : $cf7c          53116
       gr_hchar_mask : $cf74          53108
    gr_hchar_rot1bit : $cf86          53126
gr_hchar_rot1bit_bcc : $cf91          53137
 gr_hchar_rot1bit_nx : $cf96          53142
          gr_hires_x : $0011             17
          gr_hires_y : $0012             18
         gr_hi_start : $0001              1
             gr_init : $cc46          52294
        gr_init_font : $cc16          52246
        gr_init_geom : $cc77          52343
   gr_init_geom_done : $cc76          52342
       gr_init_hires : $cccd          52429
gr_init_hires_tables : $cd06          52486
  gr_init_screen_txt : $ccb4          52404
     gr_init_tab_col : $cd34          52532
gr_init_tab_col_skip : $cd46          52550
     gr_init_tab_row : $cd10          52496
              gr_ink : $0013             19
    gr_key_check_key : $cebc          52924
      gr_key_got_key : $ced3          52947
       gr_key_no_key : $cede          52958
    gr_key_skip_copy : $cec4          52932
      gr_key_tidy_up : $ced5          52949
             gr_line : $d0f4          53492
        gr_line_done : $d1ce          53710
       gr_line_neg_p : $d1be          53694
       gr_line_pixel : $d187          53639
 gr_line_skip_dx_neg : $d112          53522
 gr_line_skip_dy_neg : $d11f          53535
   gr_line_skip_left : $d14f          53583
gr_line_skip_xy_swap : $d13f          53567
   gr_line_skip_y_up : $d157          53591
     gr_line_yx_skip : $d193          53651
           gr_margin : $0015             21
             gr_mode : $0000              0
           gr_new_ln : $ce4f          52815
       gr_nl_skip_nl : $ce64          52836
       gr_no_special : $cef3          52979
      gr_offset_40hi : $d1eb          53739
      gr_offset_40lo : $d1cf          53711
            gr_paper : $0014             20
            gr_pitch : $0010             16
            gr_pixel : $d009          53257
          gr_pixmode : $000f             15
             gr_plot : $cda2          52642
            gr_point : $d011          53265
       gr_point_done : $d03d          53309
        gr_point_eor : $d039          53305
      gr_point_setup : $cff1          53233
      gr_point_write : $d03b          53307
        gr_printable : $cf17          53015
AS65 Assembler for R6502 [1.42].                                     Page   21
-------------------------------- bank\bank0.s --------------------------------

        gr_print_msg : $cf36          53046
   gr_print_msg_done : $cf46          53062
   gr_print_msg_loop : $cf3c          53052
  gr_process_special : $cefc          52988
              gr_put : $cdaa          52650
         gr_put_byte : $cee2          52962
     gr_put_byte_low : $cef4          52980
           gr_screen : $0018             24
         gr_scrngeom : $0011             17
    gr_scrngeom_base : $cc86          52358
   gr_scrngeom_hires : $cc9b          52379
    gr_scrngeom_text : $cc8c          52364
      gr_scroll_char : $ce0d          52749
    gr_scroll_cpy_ln : $ce0a          52746
  gr_scroll_erase_ln : $ce45          52805
      gr_scroll_marg : $ce41          52801
   gr_scroll_routine : $ce58          52824
        gr_scroll_up : $cdee          52718
          gr_set_cur : $cdbb          52667
     gr_set_cur_init : $cdbc          52668
     gr_set_cur_skip : $cdce          52686
    gr_set_hires_cur : $d004          53252
       gr_special_ch : $cf1d          53021
    gr_special_fn_hi : $cf2e          53038
    gr_special_fn_lo : $cf26          53030
     gr_special_loop : $cf00          52992
         gr_spr_char : $d280          53888
         gr_spr_draw : $d25c          53852
    gr_spr_draw_loop : $d25e          53854
    gr_spr_draw_next : $d26b          53867
        gr_spr_erase : $d215          53781
     gr_spr_erase_do : $d21e          53790
   gr_spr_erase_loop : $d217          53783
   gr_spr_erase_next : $d224          53796
          gr_spr_hit : $d286          53894
         gr_spr_init : $d207          53767
    gr_spr_init_loop : $d209          53769
   gr_spr_multi_loop : $d2a1          53921
    gr_spr_multi_pos : $d29d          53917
          gr_spr_new : $d228          53800
     gr_spr_new_loop : $d22a          53802
     gr_spr_new_next : $d258          53848
      gr_spr_new_pos : $d231          53809
          gr_spr_pos : $d290          53904
          gr_spr_put : $d26f          53871
           gr_text_h : $000a             10
       gr_text_start : $0005              5
           gr_text_w : $0009              9
              HICHAR : $9800          38912   *
              HISCRN : $a000          40960   *
              HITEXT : $bf68          49000   *
          hex_to_bcd : $c34b          49995
 hex_to_bcd_skip_neg : $c35e          50014
           hires_col : $9d90          40336   *
          hires_mask : $9e80          40576   *
        hires_row_hi : $9cc8          40136   *
       hires_row_low : $9c00          39936   *
                 IER : $000e             14   *
                 IFR : $000d             13   *
             IFR_CA1 : $0002              2   *
             IFR_CA2 : $0001              1   *
             IFR_CB1 : $0010             16   *
AS65 Assembler for R6502 [1.42].                                     Page   22
-------------------------------- bank\bank0.s --------------------------------

                IO_0 : $0300            768   *
       inc_kb_timers : $c14b          49483
            infinity : $c060          49248
                init : $c4c3          50371
            init_irq : $c0b2          49330
       init_keyboard : $c752          51026
            init_ram : $c4ef          50415
       init_ram_fill : $c4fb          50427
       init_ram_skip : $c4ff          50431
          init_ram_1 : $c4f7          50423
            init_snd : $d3e5          54245
       init_snd_regs : $d3e7          54247
       init_tape_tab : $c53a          50490
           init_via0 : $c510          50448
      init_via0_done : $c522          50466
      init_via0_loop : $c512          50450
       init_via0_tab : $c523          50467
      init_via0_tape : $c50d          50445
              init_2 : $c4c8          50376
             int_add : $d419          54297
             int_div : $d49a          54426
       int_div_cycle : $d4cc          54476
      int_div_noflip : $d4fc          54524
        int_div_skip : $d4e6          54502
   int_div_skip_negA : $d4b1          54449
   int_div_skip_negB : $d4c4          54468
       int_fast_mult : $d446          54342
 int_fast_mult_cycle : $d456          54358
  int_fast_mult_next : $d467          54375
            int_mult : $d46f          54383
      int_mult_cycle : $d47f          54399
       int_mult_next : $d492          54418
             int_sub : $d427          54311
             int_swp : $d435          54325
         int_vdp_fin : $c140          49472
     int_vdp_handler : $c125          49445
    io_active_device : $c415          50197
          io_address : $0300            768
            io_block : $0601           1537
           io_buf_sz : $c4a1          50337
            io_close : $c447          50247
          io_close_f : $0008              8
        io_copy_data : $c422          50210
          io_default : $0600           1536
           io_delete : $c44a          50250
            io_del_f : $000a             10
          io_devices : $c4a3          50339
          io_device0 : $c4a3          50339
          io_device1 : $c4b3          50355
          io_do_echo : $c46a          50282
             io_ext1 : $000c             12
             io_ext2 : $000e             14
         io_get_byte : $0000              0
           io_get_ch : $c43b          50235
    io_get_line_byte : $c457          50263
    io_get_line_done : $c484          50308
             io_init : $c40a          50186
          io_null_op : $c49f          50335
        io_open_ext1 : $c44d          50253
        io_open_ext2 : $c450          50256
           io_open_r : $0004              4
        io_open_read : $c441          50241
AS65 Assembler for R6502 [1.42].                                     Page   23
-------------------------------- bank\bank0.s --------------------------------

           io_open_w : $0006              6
       io_open_write : $c444          50244
       io_print_done : $c49d          50333
       io_print_line : $c48c          50316
  io_print_line_byte : $c493          50323
         io_put_byte : $0002              2
           io_put_ch : $c43e          50238
        io_read_line : $c453          50259
      io_set_default : $c412          50194
        io_skip_echo : $c46d          50285
     io_skip_special : $c478          50296
           io_struct : $0010             16
                 irq : $c0d6          49366
             irq_brk : $c0f8          49400
             irq_fin : $c0f2          49394
           KB_CAPSLK : $0001              1   *
         KB_DEBOUNCE : $0002              2   *
          KB_REP_DEL : $0014             20   *
          KB_REP_TIM : $0003              3   *
            KB_SENSE : $0008              8   *
          kb_any_key : $c784          51076
     kb_any_key_none : $c79c          51100
  kb_any_key_pressed : $c79e          51102
      kb_any_key_row : $c78d          51085
              kb_brk : $c869          51305
 kb_check_matrix_col : $c7a9          51113
 kb_check_matrix_row : $c7b3          51123
      kb_check_skip4 : $c7c9          51145
             kb_code : $002b             43
         kb_col_mask : $c909          51465
              kb_deb : $002d             45
          kb_deb_tim : $002e             46
        kb_do_repeat : $c859          51289
          kb_get_key : $c86b          51307
          kb_get_try : $c86f          51311
         kb_hw_delay : $c7b8          51128
        kb_in_repeat : $c865          51301
             kb_last : $002a             42
      kb_process_new : $c800          51200
              kb_raw : $0029             41
         kb_rdel_tim : $0031             49
         kb_read_got : $c79e          51102
     kb_read_noshift : $c829          51241
     kb_read_nothing : $c7d4          51156
         kb_read_raw : $c7a0          51104
   kb_read_raw_force : $c7a5          51109
     kb_read_raw_got : $c7d8          51160
              kb_rep : $002f             47
          kb_rep_tim : $0030             48
      kb_scan_decode : $c7f6          51190
     kb_scan_got_key : $c880          51328
         kb_scan_key : $c7e5          51173
        kb_scan_wait : $c7f4          51188
        kb_skip_ctrl : $c843          51267
             kb_stat : $002c             44
            kb_stick : $c763          51043
       kb_stick_mask : $c911          51473
        kb_stick_pos : $c76f          51055
       kb_store_last : $c861          51297
      kb_table_shift : $c8c9          51401
        kb_table_std : $c889          51337
         kernel_init : $c4d1          50385
AS65 Assembler for R6502 [1.42].                                     Page   24
-------------------------------- bank\bank0.s --------------------------------

         kernel_test : $c4da          50394
                main : $c04b          49227
           mem_start : $0713           1811
        mod_sz_asm_e : $ffc6          65478
        mod_sz_asm_s : $f950          63824
       mod_sz_bios_e : $d419          54297
       mod_sz_bios_s : $c000          49152
        mod_sz_cia_e : $c549          50505
        mod_sz_cia_s : $c50d          50445
      mod_sz_dflat_e : $f7aa          63402
      mod_sz_dflat_s : $d4fd          54525
      mod_sz_graph_e : $d2b1          53937
      mod_sz_graph_s : $c916          51478
         mod_sz_io_e : $c4c3          50371
         mod_sz_io_s : $c40a          50186
     mod_sz_kernel_e : $c50d          50445
     mod_sz_kernel_s : $c000          49152
   mod_sz_language_e : $ffc6          65478
   mod_sz_language_s : $d419          54297
       mod_sz_proc_e : $f6c3          63171
       mod_sz_proc_s : $f556          62806
   mod_sz_progedit_e : $e000          57344
   mod_sz_progedit_s : $de72          56946
      mod_sz_rtasm_e : $fd5b          64859
      mod_sz_rtasm_s : $fa43          64067
     mod_sz_rtsubs_e : $f556          62806
     mod_sz_rtsubs_s : $e64f          58959
    mod_sz_runtime_e : $f6c3          63171
    mod_sz_runtime_s : $e000          57344
      mod_sz_sound_e : $d419          54297
      mod_sz_sound_s : $d3ce          54222
     mod_sz_sprite_e : $d2b1          53937
     mod_sz_sprite_s : $d207          53767
      mod_sz_tkasm_e : $fa43          64067
      mod_sz_tkasm_s : $f950          63824
   mod_sz_tokenise_e : $de72          56946
   mod_sz_tokenise_s : $d6a9          54953
    mod_sz_toksubs_e : $de72          56946
    mod_sz_toksubs_s : $dd49          56649
        mod_sz_var_e : $d6a9          54953
        mod_sz_var_s : $d4fd          54525
          msg_errmsg : $d3cb          54219
     msg_hello_world : $c066          49254
           msg_ready : $d3c9          54217
             NUM_ANY : $0000              0   *
             NUM_BIN : $0003              3   *
             NUM_DEC : $0001              1   *
             NUM_HEX : $0002              2   *
                 nmi : $c50c          50444
        null_handler : $c0d5          49365
            null_irq : $c0d4          49364
               num_a : $003d             61
               num_b : $0041             65
             num_buf : $004d             77
             num_tmp : $0049             73
               num_x : $0045             69
             out_bcd : $c3b8          50104
       out_bcd_digit : $c3c0          50112
         out_bcd_fin : $c3e1          50145
        out_bcd_next : $c3d2          50130
       out_bcd_print : $c3ce          50126
                 PCR : $000c             12   *
AS65 Assembler for R6502 [1.42].                                     Page   25
-------------------------------- bank\bank0.s --------------------------------

                 PRA : $0001              1   *
                PRAH : $000f             15   *
                 PRB : $0000              0   *
        print_a_to_d : $c3e7          50151
print_a_to_d_skip_neg : $c400          50176
           SND_ADBUS : $030f            783   *
        SND_DESELECT : $00dd            221   *
            SND_MODE : $030c            780   *
       SND_REG_CHAPH : $0001              1   *
       SND_REG_CHAPL : $0000              0   *
      SND_REG_CHAVOL : $0008              8   *
       SND_REG_CHBPH : $0003              3   *
       SND_REG_CHBPL : $0002              2   *
      SND_REG_CHBVOL : $000a             10   *
       SND_REG_CHCPH : $0005              5   *
       SND_REG_CHCPL : $0004              4   *
        SND_REG_CHNP : $0006              6   *
         SND_REG_CTL : $0007              7   *
      SND_REG_ENVCYC : $000d             13   *
       SND_REG_ENVPH : $000c             12   *
       SND_REG_ENVPL : $000b             11   *
         SND_REG_IOA : $000e             14   *
         SND_REG_IOB : $000f             15   *
         SND_SELREAD : $00df            223   *
      SND_SELSETADDR : $00ff            255   *
        SND_SELWRITE : $00fd            253   *
                  SR : $000a             10   *
               SWBRK : <macro>
             scratch : $0613           1555
          skip_a_f_1 : $c189          49545
          skip_a_f_2 : $c198          49560
         skip_kb_deb : $c151          49489
         skip_kb_rep : $c157          49495
          skip_x_f_1 : $c1a5          49573
          skip_x_f_2 : $c1ba          49594
             snd_get : $c024          49188
        snd_get_note : $d3ce          54222
    snd_get_note_oct : $d3d9          54233
        snd_init_tab : $d3f1          54257
       snd_music_tab : $d401          54273
       snd_note_done : $d3e2          54242
             snd_set : $c000          49152
        spr_baseadrh : $b4e0          46304   *
        spr_baseadrl : $b4c0          46272   *
            spr_bgnd : $b4a0          46240   *
             spr_chr : $b480          46208   *
            spr_curX : $b400          46080   *
            spr_curY : $b440          46144   *
            spr_newX : $b420          46112   *
            spr_newY : $b460          46176   *
          str_a_to_x : $c17d          49533
   str_d_digits_done : $c2bb          49851
         str_d_error : $c267          49767
      str_d_find_end : $c276          49782
     str_d_found_end : $c283          49795
        str_d_powers : $c2d8          49880
 str_d_process_digit : $c291          49809
      str_d_skip_neg : $c2d2          49874
          str_x_to_a : $c19a          49562
      str_x_to_a_err : $c1c6          49606
     str_x_to_a_errl : $c1c5          49605
           TAPE_RATE : $00d0            208   *
AS65 Assembler for R6502 [1.42].                                     Page   26
-------------------------------- bank\bank0.s --------------------------------

            TEXTCHAR : $b400          46080   *
            TEXTSCRN : $bb80          48000   *
         TIMER1_RATE : $4e20          20000   *
                T1CH : $0005              5   *
                T1CL : $0004              4   *
                T1LH : $0007              7   *
                T1LL : $0006              6   *
                T2CH : $0009              9   *
                T2CL : $0008              8   *
             tmp_ahi : $0033             51
             tmp_alo : $0032             50
           tmp_bank1 : $0000              0
           tmp_bank2 : $0001              1
             tmp_bhi : $0035             53
             tmp_blo : $0034             52
             tmp_chi : $0037             55
             tmp_clo : $0036             54
               tmp_d : $0038             56
            tp_back4 : $c55a          50522
            tp_block : $0055             85
        tp_block_gap : $c684          50820
      tp_block_gap_1 : $c688          50824
              tp_buf : $0200            512
            tp_close : $c5aa          50602
   tp_close_no_flush : $c5b3          50611
            tp_delay : $0059             89
             tp_flag : $0058             88
        tp_get_block : $c704          50948
  tp_get_block_bytes : $c715          50965
         tp_get_byte : $c6e7          50919
     tp_get_byte_buf : $c6f4          50932
        tp_get_fname : $c590          50576
  tp_get_fname_start : $c581          50561
       tp_get_header : $c58a          50570
              tp_idx : $0057             87
             tp_init : $c55f          50527
         tp_io_error : $c750          51024
       tp_open_bread : $c577          50551
      tp_open_bwrite : $c5c2          50626
      tp_open_common : $c567          50535
         tp_open_msg : $c549          50505
        tp_open_read : $c577          50551
       tp_open_write : $c5c8          50632
 tp_open_write_start : $c5cc          50636
      tp_print_block : $c664          50788
        tp_put_block : $c640          50752
  tp_put_block_bytes : $c656          50774
         tp_put_byte : $c60e          50702
    tp_put_byte_done : $c631          50737
        tp_put_delay : $c638          50744
         tp_read_bit : $c737          50999
     tp_read_bit_cb1 : $c73b          51003
        tp_read_byte : $c723          50979
   tp_read_byte_bits : $c72f          50991
     tp_read_byte_st : $c723          50979
         tp_save_msg : $c552          50514
        tp_write_bit : $c6b2          50866
   tp_write_bit_chk1 : $c6c3          50883
   tp_write_bit_chk2 : $c6db          50907
     tp_write_bit_t1 : $c6d2          50898
       tp_write_byte : $c68f          50831
   tp_write_byte_bit : $c69b          50843
AS65 Assembler for R6502 [1.42].                                     Page   27
-------------------------------- bank\bank0.s --------------------------------

tp_write_byte_nodelay : $c6b0          50864
      tp_write_fname : $c600          50688
     tp_write_header : $c5f7          50679
     tt_csave_end_pc : $c5c0          50624
   tt_getsync_end_pc : $c5a9          50601
  tt_getsync_loop_pc : $c73b          51003
       tt_getsync_pc : $c5a9          50601
   tt_putbyte_end_pc : $c6b1          50865
       tt_putbyte_pc : $c68f          50831
  tt_readbyte_end_pc : $c736          50998
      tt_readbyte_pc : $c723          50979
tt_writeleader_end_pc : $c5e8          50664
   tt_writeleader_pc : $c5e8          50664
     twos_complement : $c33c          49980
twos_complement_skip_X : $c34a          49994
             UTF_ACK : $0001              1   *
             UTF_BEL : $0007              7   *
             UTF_BRK : $001a             26   *
              UTF_CR : $000d             13   *
             UTF_DEL : $007f            127   *
             UTF_ETX : $0003              3   *
              UTF_FF : $000c             12   *
         UTF_SPECIAL : $0020             32   *
       update_timers : $c141          49473
          utilPrintA : $c168          49512
       utilPrintCRLF : $c160          49504
        utilPrintSPC : $c158          49496
           VDP_FLASH : $0010             16   *
           vdp_blank : $0010             16
             vdp_cnt : $0008              8
          vdp_cnt_hi : $0009              9
         vdp_cnt_hi2 : $000a             10
          vdp_curcnt : $000c             12
          vdp_curoff : $000d             13
         vdp_curstat : $000e             14
          vdp_curtim : $000b             11
          vdp_curval : $000f             15
  vdp_fill_vram_loop : $ccee          52462
 vdp_fill_vram_noinc : $ccf6          52470
            vdp_font : $c916          51478
          vdp_font_a : $ca1e          51742
             vec_brk : $0004              4
             vec_irq : $0002              2
        vec_usercia0 : $0006              6
             zp_tmp1 : $00ab            171
             zp_tmp2 : $00ac            172
             zp_tmp3 : $00ad            173
             zp_tmp4 : $00ae            174
             ztmp_24 : $003d             61
          _adcZPWord : <macro>
          _addZPWord : <macro>
           _code_end : $ffc6          65478
         _code_start : $c000          49152
          _cpu_stack : $0100            256
          _cpyZPWord : <macro>
              _debug : <macro>
          _decZPWord : <macro>
      _end_zero_page : $00af            175
          _incZPWord : <macro>
       _mod_sz_cmd_e : $d3ce          54222
       _mod_sz_cmd_s : $d2b1          53937
       _PushFalseJmp : <macro>
AS65 Assembler for R6502 [1.42].                                     Page   28
-------------------------------- bank\bank0.s --------------------------------

        _PushTrueJmp : <macro>
             _printA : <macro>
             _printC : <macro>
            _printCA : <macro>
          _printCRLF : <macro>
            _println : <macro>
        _println_low : <macro>
          _printmsgA : <macro>
            _pullAXY : <macro>
            _pushAXY : <macro>
            _sendcmd : <macro>
          _subZPWord : <macro>
            __6502__ : $0001              1

1663 labels used

15563 lines read, no errors in pass 1.
AS65 Assembler for R6502 [1.42].                                     Page   29
-------------------------------- bank\bank0.s --------------------------------

c000 =                       	org 0xc000
c000 :                       mod_sz_bios_s
                             	include "kernel/kernel.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  KERNEL.S
                             ;*	Lol, I thought this would become more sophisti
                             ;*	hence the name 'kernel'. But no, it just initi
                             ;*	memory, VIA, sound and screen, before passing 
                             ;*	to main.
                             ;*	References to banks etc. are from ported code 
                             ;*	did do more stuff, namely helping with ROM ban
                             ;*
                             ;************************************************
                             
                             ;* Include all definition and code files in the r
                             	include "inc/includes.i"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  INCLUDES.S
                             ;*  Main include file for key definitions and mac
                             ;*  Many of the settings here are exremely machin
                             ;*  Defines : IO block addresses, VIA port usage,
                             ;*  settings, useful macros, sound chip registers
                             ;*  and ACIA registers.
                             ;*	Of course the Oric doesn't have a VDP or an AC
                             ;*	so this file could be optimised.
                             ;*
                             ;************************************************
                             
                             ;* The IO block is at 0x04000 and decodes up to
                             ;* eight IO addresses, at 0x0080 intervals
                             ;* All eight are not used at the present time:
                             ;* - 0 : VIA 1 (Keyboard)
                             ;* - 1 : VIA 2 (Sound and SD card interface)
                             ;* - 2 : VDP (Video)
                             ;* - 3 : ACIA (Serial)
0300 =                       IO_0		= 0x0300
                             
0010 =                       VDP_FLASH	= 16				;* 32/50 second flash
                             
4e20 =                       TIMER1_RATE	= 1000000 / 50		;* 50 times per secon
00d0 =                       TAPE_RATE	= 0xd0				;* Assumed required FM freque
                             
                             ;* Standard definitions of 6522 registers
                             ;* As found in the datasheets
0000 =                       PRB			= 0x00
0001 =                       PRA			= 0x01
0002 =                       DDRB		= 0x02
0003 =                       DDRA		= 0x03
AS65 Assembler for R6502 [1.42].                                     Page   30
-------------------------------- bank\bank0.s --------------------------------

0004 =                       T1CL		= 0x04
0005 =                       T1CH		= 0x05
0006 =                       T1LL		= 0x06
0007 =                       T1LH		= 0x07
0008 =                       T2CL		= 0x08
0009 =                       T2CH		= 0x09
000a =                       SR			= 0x0a
000b =                       ACR			= 0x0b
000c =                       PCR			= 0x0c
000d =                       IFR			= 0x0d
000e =                       IER			= 0x0e
000f =                       PRAH		= 0x0f
                             
0001 =                       IFR_CA2		= 0x01
0002 =                       IFR_CA1		= 0x02
0010 =                       IFR_CB1		= 0x10
                             
                             ;* AY-3-8910 definitions
                             ;* The sound chip is accessed through VIA 2
030f =                       SND_ADBUS	= IO_0+PRAH
030c =                       SND_MODE	= IO_0+PCR
                             
                             ; Values for the PCR register - always enable CB1
00df =                       SND_SELREAD			= 0b11011111
00fd =                       SND_SELWRITE		= 0b11111101
00ff =                       SND_SELSETADDR		= 0b11111111
00dd =                       SND_DESELECT		= 0b11011101
                             
0000 =                       SND_REG_CHAPL	= 0x00
0001 =                       SND_REG_CHAPH	= 0x01
0002 =                       SND_REG_CHBPL	= 0x02
0003 =                       SND_REG_CHBPH	= 0x03
0004 =                       SND_REG_CHCPL	= 0x04
0005 =                       SND_REG_CHCPH	= 0x05
0006 =                       SND_REG_CHNP	= 0x06
0007 =                       SND_REG_CTL		= 0x07
0008 =                       SND_REG_CHAVOL	= 0x08
0009 =                       SND_REG_CHBVOL	= 0x09
000a =                       SND_REG_CHBVOL	= 0x0a
000b =                       SND_REG_ENVPL	= 0x0b
000c =                       SND_REG_ENVPH	= 0x0c
000d =                       SND_REG_ENVCYC	= 0x0d
                             
000e =                       SND_REG_IOA	= 0x0e
000f =                       SND_REG_IOB	= 0x0f
                             
                             
                             ;* Port B
0008 =                       KB_SENSE	= 0x08			; Input - Bit 3 port A
0001 =                       KB_CAPSLK	= 0x01			; Id of Caps Lock - maps to Le
                             
0003 =                       KB_REP_TIM	= 3 			; Number of VB periods for the 
0014 =                       KB_REP_DEL	= 20			; Number of VB periods before r
0002 =                       KB_DEBOUNCE	= 2				; Number of VB periods before 
                             
0003 =                       UTF_ETX		= 0x03			; Break character
0007 =                       UTF_BEL		= 0x07
0008 =                       CRSR_LEFT	= 0x08
0009 =                       CRSR_RIGHT	= 0x09
000a =                       CRSR_DOWN	= 0x0a
000b =                       CRSR_UP		= 0x0b
0014 =                       CTRL_CAPS	= 0x14			; CTRL-T to toggle caps
AS65 Assembler for R6502 [1.42].                                     Page   31
-------------------------------- bank\bank0.s --------------------------------

0001 =                       UTF_ACK		= 0x01			; Used for the CTRL-A copy in t
000c =                       UTF_FF		= 0x0c
000d =                       UTF_CR		= 0x0d
001a =                       UTF_BRK		= 0x1a			; Debug - drop in to monitor
007f =                       UTF_DEL		= 0x7f
0020 =                       UTF_SPECIAL = 0x20
                             
0000 =                       CMD_ERR_NOERROR			= 0x00
0001 =                       CMD_ERR_NOTFOUND		= 0x01
0002 =                       CMD_ERR_PARM			= 0x02
0003 =                       CMD_ERR_VAL				= 0x03
                             
                             ;* Number formats for conversion routines
0000 =                       NUM_ANY		= 0x00
0001 =                       NUM_DEC		= 0x01
0002 =                       NUM_HEX		= 0x02
0003 =                       NUM_BIN		= 0x03
                             
                             	
                             
                             ;* USEFUL MACROS HERE
                             
                             ;* Software break to throw errors
                             ;* use like this : SWBRK XX
                             ;* Where XX is the error code
                             SWBRK macro sig
                             	brk
                             	db sig
                             	endm
                             
                             _pushAXY macro
                             	pha
                             	sta tmp_d
                             	txa
                             	pha
                             	tya
                             	pha
                             	lda tmp_d
                             	endm
                             
                             _pullAXY macro
                             	pla
                             	tay
                             	pla
                             	tax
                             	pla
                             	endm
                             
                             _println macro msg
                             	_pushAXY
                             	ldx #lo(msg)
                             	lda #hi(msg)
                             	jsr io_print_line
                             	_pullAXY
                             	endm
                             
                             _println_low macro msg
                             	ldx #lo(msg)
                             	lda #hi(msg)
                             	jsr io_print_line
                             	endm
                             
AS65 Assembler for R6502 [1.42].                                     Page   32
-------------------------------- bank\bank0.s --------------------------------

                             _printmsgA macro msg
                             	_pushAXY
                             	ldx #lo(msg)
                             	lda #hi(msg)
                             	jsr io_print_line
                             	pla
                             	pha
                             	jsr str_a_to_x
                             	jsr _put_byte
                             	txa
                             	jsr _put_byte
                             	lda #UTF_CR
                             	jsr _put_byte
                             	_pullAXY
                             	endm
                             
                             _printA macro
                             	_pushAXY
                             	jsr str_a_to_x
                             	jsr io_put_ch
                             	txa
                             	jsr io_put_ch
                             	_pullAXY
                             	endm
                             
                             _printCRLF macro
                             	pha
                             	lda #UTF_CR
                             	jsr _put_byte
                             	pla
                             	endm
                             
                             _printC macro ch
                             	pha
                             	lda #ch
                             	jsr io_put_ch
                             	pla
                             	endm
                             
                             _printCA macro
                             	pha
                             	jsr _put_byte
                             	pla
                             	endm
                             
                             _sendcmd macro cmd
                             	_pushAXY
                             	ldx #lo(cmd)
                             	lda #hi(cmd)
                             	jsr sd_sendcmd
                             	_pullAXY
                             	endm
                             
                             _incZPWord macro wordp
                             	inc wordp
                             	db	0xd0, 0x02
                             	inc wordp+1
                             	endm
                             
                             _decZPWord macro wordp
                             	pha
                             	sec
AS65 Assembler for R6502 [1.42].                                     Page   33
-------------------------------- bank\bank0.s --------------------------------

                             	lda wordp
                             	sbc #1
                             	sta wordp
                             	lda wordp+1
                             	sbc #0
                             	sta wordp+1
                             	pla
                             	endm
                             
                             _cpyZPWord macro worda,wordb
                             	lda worda
                             	sta wordb
                             	lda worda+1
                             	sta wordb+1
                             	endm
                             	
                             _addZPWord macro worda, wordb
                             	clc
                             	lda worda
                             	adc wordb
                             	sta worda
                             	lda worda+1
                             	adc wordb+1
                             	sta worda+1
                             	endm
                             
                             _subZPWord macro worda, wordb
                             	sec
                             	lda worda
                             	sbc wordb
                             	sta worda
                             	lda worda+1
                             	sbc wordb+1
                             	sta worda+1
                             	endm
                             	
                             _adcZPWord macro worda,const
                             	clc
                             	lda worda
                             	adc #const
                             	sta worda
                             	lda worda+1
                             	adc #0
                             	sta worda+1
                             	endm
                             	
                             _debug macro ch
                             	pha
                             	lda #ch
                             	sta 48000
                             	pla
                             	endm
                             	
                             
                             
                             	include "inc/graph.i"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
AS65 Assembler for R6502 [1.42].                                     Page   34
-------------------------------- bank\bank0.s --------------------------------

                             ;*  credit of original my authorship please!
                             ;*
                             ;*  GRAPH.I
                             ;*  This is the definition file for graphics, spe
                             ;*  The graphics screen handling module.  It is j
                             ;*  structure definition - but this structure is 
                             ;*  record the important attributes of a text scr
                             ;*	This was needed in the previous code due to 32
                             ;*	byte width screens, but Oric only  has 40, so 
                             ;*	could be optimised a little.
                             ;*
                             ;************************************************
                             
                             ; Important screen addresses for the Oric ULA
bb80 =                       TEXTSCRN	=	0xbb80
b400 =                       TEXTCHAR	=	0xb400
a000 =                       HISCRN		=	0xa000
9800 =                       HICHAR		=	0x9800
bf68 =                       HITEXT		=	0xbf68
                             
0000 =                       	struct gr_screen
0000 =                       	db gr_mode					; Text or Hires mode
0001 =                       	dw gr_hi_start				; Address fo hires screen
0003 =                       	dw gr_char					; Start address of charset
0005 =                       	dw gr_text_start			; Start of text memory
0007 =                       	dw gr_geom_tmp2				; (Not used, maintained for a
0009 =                       	db gr_text_w				; Number of columns
000a =                       	db gr_text_h				; Number of rows
000b =                       	db gr_cur_x					; Current X position of cursor
000c =                       	db gr_cur_y					; Current Y position of cursor
000d =                       	dw gr_cur_ptr				; VDP address of cursor
000f =                       	db gr_pixmode				; Pixel plot mode (0=Erase, 1=P
0010 =                       	db gr_pitch					; Pixel pitch for char plotting
0011 =                       	db gr_hires_x				; X pos of hires cursor
0012 =                       	db gr_hires_y				; Y pos of hires cursor
0013 =                       	db gr_ink					; Ink colour
0014 =                       	db gr_paper					; Paper colour
0015 =                       	db gr_margin				; Left margin
0016 =                       	dw gr_geom_tmp				; One word of temp storage for
                             	end struct
                             	
                             ; Sprite data stored in free 256 in font space
b400 =                       spr_curX	= TEXTCHAR			; Sprite current X pos
b420 =                       spr_newX	= TEXTCHAR+32		; Sprite new X pos
b440 =                       spr_curY	= TEXTCHAR+64		; Sprite current Y pos
b460 =                       spr_newY	= TEXTCHAR+96		; Sprite new Y pos
b480 =                       spr_chr		= TEXTCHAR+128		; Sprite character
b4a0 =                       spr_bgnd	= TEXTCHAR+160		; Background character u
b4c0 =                       spr_baseadrl= TEXTCHAR+192		; Y low address of sp
b4e0 =                       spr_baseadrh= TEXTCHAR+224		; Y high address of s
                             
                             ; Tables stored in alternate character set area
                             ; only used for high-resolution screen handling
9c00 =                       hires_row_low	=	HICHAR+0x400		; Low byte of row p
9cc8 =                       hires_row_hi	=	hires_row_low+200	; High byte of r
9d90 =                       hires_col		=	hires_row_hi+200	; Pixel to byte col
9e80 =                       hires_mask		=	hires_col+240		; Pixel column to pi
                             
                             
                             	include "io/io.i"
                             ;************************************************
                             ;*
AS65 Assembler for R6502 [1.42].                                     Page   35
-------------------------------- bank\bank0.s --------------------------------

                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  IO.I
                             ;*  Definitions file for the IO module.  The key 
                             ;*  used by the IO system is defined here.
                             ;*	Some over-engineering here for future possibil
                             ;*
                             ;************************************************
                             
                             ;* General IO structure allows the system to swap
                             ;* different IO devices by using indirect calls t
                             ;* the appropriate routines.
0000 =                       	struct io_struct
0000 =                       	ds	io_get_byte,	2			;* Address of get byte
0002 =                       	ds	io_put_byte,	2			;* Address of put byte
0004 =                       	ds	io_open_r,		2			;* Address of open file for r
0006 =                       	ds	io_open_w,		2			;* Address of open file for w
0008 =                       	ds	io_close_f,		2			;* Address of close file
000a =                       	ds	io_del_f,		2			;* Address of delete file
000c =                       	ds	io_ext1,		2			;* Address of extended function
000e =                       	ds	io_ext2,		2			;* Address of extended function
                             	end struct
                             	include "dflat/dflat.i"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  DFLAT.I
                             ;*  This is the main definitions file for dflat. 
                             ;*  definitions are in here to access the data st
                             ;*  used by dflat.
                             ;*
                             ;************************************************
                             
                             ;* Start dflat program memory
0713 =                       DF_PROGSTART=	mem_start
                             ;* This is the top of usable dflat memory plus 1
9800 =                       DF_MEMTOP	=	0x9800
                             
                             ;* Offset in to tokenised line of length and line
0000 =                       DFTK_LINLEN	=	0x00
0001 =                       DFTK_LINNUM	=	0x01
                             
                             ;* Flags for token, escape value for data types a
0080 =                       DFTK_TOKEN	=	0x80
0020 =                       DFTK_ESCVAL	=	0x20
0000 =                       DFTK_EOL	=	0x00
                             
                             ;* Numeric constants are encoded based on size an
                             ;* user representation.
                             ;* For example the decimal value 16 will be encod
                             ;* DFTK_INTDEC followed by the bytes 0 and 16 to 
                             ;* The same value in binary will be encoded as DF
                             ;* followed by the same 0 and 16 bytes.  This is 
AS65 Assembler for R6502 [1.42].                                     Page   36
-------------------------------- bank\bank0.s --------------------------------

                             ;* tokenised value to be displayed in original re
                             ;* So in the two examples, they will be shown as 
                             ;* '0x0010' respectively.
0000 =                       DFTK_CHR	=	0x00
0001 =                       DFTK_RESV1	=	0x01
0002 =                       DFTK_RESV2	=	0x02
0003 =                       DFTK_RESV3	=	0x03
0004 =                       DFTK_RESV4	=	0x04
0005 =                       DFTK_BYTDEC	=	0x05
0006 =                       DFTK_BYTHEX = 	0x06
0007 =                       DFTK_BYTBIN =	0x07
0008 =                       DFTK_RESV8	=	0x08
0009 =                       DFTK_INTDEC	=	0x09
000a =                       DFTK_INTHEX =	0x0a
000b =                       DFTK_INTBIN	=	0x0b
000c =                       DFTK_RESVC	=	0x0c
000d =                       DFTK_RESVD	=	0x0d
000e =                       DFTK_RESVE	=	0x0e
000f =                       DFTK_RESVF	=	0x0f
                             
                             ;* String constant, variable and procedure tokens
0010 =                       DFTK_STRLIT	=	0x10
0011 =                       DFTK_VAR	=	0x11
0012 =                       DFTK_PROC	=	0x12
001f =                       DFTK_STEND	=	0x1f
                             
                             ;* Qualifier for non-local parameters passed to a
0026 =                       DFTK_VARPARM=	'&'
                             
                             ;* Variable Value Table (VVT) definitions
                             ;* The VVT records the values of variables define
                             ;* the Variable Name Table (VNT).  When a variabl
                             ;* used, it is added to the VNT, and the position
                             ;* VNT is used as an index in to the VVT.
                             ;* Every VVT entry is 8 bytes - so the VNT index 
                             ;* shifted left 3 bits to get the VVT offset.
                             ;* The VNT grows from top of memory down, the VVT
                             ;* grows from start of VNT down.
                             
                             ;* Index in to each entry of the VVT
0000 =                       DFVVT_TYPE	=	0x00
0001 =                       DFVVT_LO	=	0x01
0002 =                       DFVVT_HI	=	0x02
0003 =                       DFVVT_DIM1	=	0x03
0004 =                       DFVVT_DIM2	=	0x04
0008 =                       DFVVT_SZ	=	0x08	;VVT is aligned to 8 byte blocks
                             
                             ;* The meaning of the DFVVT_TYPE entry
0001 =                       DFVVT_INT	=	0x01
0002 =                       DFVVT_BYT	=	0x02
0004 =                       DFVVT_STR	=	0x04
0008 =                       DFVVT_FLT	=	0x08
0040 =                       DFVVT_PROC	=	0x40
0080 =                       DFVVT_ARRY	=	0x80
                             
                             ;* Flags indicating the meaning of a token
                             ;* A token has the top bit set (0x80), then the
                             ;* remaining bits indicate what it represents.
0001 =                       DFTK_KW		=	0x01
0002 =                       DFTK_FN		=	0x02
0004 =                       DFTK_STROP	=	0x04
0008 =                       DFTK_OP		=	0x08
AS65 Assembler for R6502 [1.42].                                     Page   37
-------------------------------- bank\bank0.s --------------------------------

0010 =                       DFTK_INT	=	0x10
0020 =                       DFTK_BYT	=	0x20
0040 =                       DFTK_STR	=	0x40
0080 =                       DFTK_FLT	=	0x80
0007 =                       DFTK_OPMSK	=	0x07
00f8 =                       DFTK_RTMSK	= 	0xf8
                             
                             ;* Defines what type of value is on the parameter
                             ;* All numerics are stored as INT, all STR
                             ;* are pointers to the actual string, thus
                             ;* all entries in the parmeter stack are 3 bytes
0001 =                       DFST_INT	=	0x01
0080 =                       DFST_STR	=	0x80
                             
                             ;* Token values of specific commands, used during
                             ;* command processing.
                             ;* ANY CHANGE TO THE ORDER OF KEYWORDS NEEDS TO R
0086 =                       DFRT_DEF	=	0x86
0087 =                       DFRT_ENDDEF	=	0x87
0088 =                       DFRT_RETURN	=	0x88
0089 =                       DFRT_ABORT	=	0x89
008c =                       DFRT_REPEAT	=	0x8c
008e =                       DFRT_FOR	=	0x8e
008f =                       DFRT_NEXT	=	0x8f
0090 =                       DFRT_WHILE	=	0x90
0091 =                       DFRT_WEND	=	0x91
0092 =                       DFRT_IF		=	0x92
0093 =                       DFRT_ELSE	=	0x93
0094 =                       DFRT_ENDIF	=	0x94
0095 =                       DFRT_ELSEIF	=	0x95
0096 =                       DFRT_DATA	=	0x96
0097 =                       DFRT_ASM	=	0x97
                             
                             _PushTrueJmp macro
                             	ldx #0xff
                             	txa
                             	jmp df_st_pushInt
                             	endm
                             
                             _PushFalseJmp macro
                             	ldx #0x00
                             	txa
                             	jmp df_st_pushInt
                             	endm
                             
                             	include "kernel/zeropage.i"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  ZEROPAGE.I
                             ;*  This module name is misleading it is not only
                             ;*  allocations, but also page 2, 3, 4, 5, 6, 7 a
                             ;*  memstart is a handy label that indicates the 
                             ;*  location that we can store dflat programs fro
                             ;*  Zero page is a valuable asset as the 6502 can
                             ;*  this page one cycle quicker than the rest of 
                             ;*  and infact some addressing modes can only use
AS65 Assembler for R6502 [1.42].                                     Page   38
-------------------------------- bank\bank0.s --------------------------------

                             ;*  Due to the value of zero page, a lot of syste
                             ;*  dflat variables are put here.  But we don't h
                             ;*  luxury for single use variables - so you will
                             ;*  see a lot of temporary sounding names which a
                             ;*  have multiple uses across the code base.
                             ;*
                             ;************************************************
                             
                             	; Zero page declarations
                             	bss
0000 =                       	org 0x0000
                             
0000 =                       tmp_bank1	ds	1		; Temp storage ONLY FOR USE BY BA
0001 =                       tmp_bank2	ds	1		; Temp storage ONLY FOR USE BY BA
                             
                             ; Interrupt routine addresses
0002 =                       vec_irq		 ds	2		; Master IRQ handler
0004 =                       vec_brk		 ds	2		; Master BRK handler
0006 =                       vec_usercia0 ds	2		; Where to jump for CIA0 inter
                             
                             ; VDP parameters
0008 =                       vdp_cnt		ds	1		; VDP interrupt counter
0009 =                       vdp_cnt_hi 	ds	1		; VDP counter high
000a =                       vdp_cnt_hi2	ds	1		; VDP counter high 2
000b =                       vdp_curtim	ds	1		; Cursor blink speed
000c =                       vdp_curcnt	ds	1		; Cursor blink countdown
000d =                       vdp_curoff	ds	1		; Cursor off (0 = On)
000e =                       vdp_curstat	ds	1		; Cursor status
000f =                       vdp_curval	ds	1		; Cursor value on screen
0010 =                       vdp_blank	ds	1		; Screen blank value normally 32
                             
                             ; Screen geometry
0011 =                       gr_scrngeom	ds	gr_screen
                             
                             ;Keyboard parameters
0029 =                       kb_raw  	ds	1		; Raw keyboard code
002a =                       kb_last		ds	1		; Code of last key
002b =                       kb_code 	ds	1		; Converted keyboard code
002c =                       kb_stat		ds	1		; Keyboard status for caps and shi
002d =                       kb_deb		ds	1		; Debounce timer
002e =                       kb_deb_tim  ds	1		; Default debounce delay
002f =                       kb_rep		ds	1		; Keyboard repeat speed timer
0030 =                       kb_rep_tim 	ds	1		; Default repeat speed
0031 =                       kb_rdel_tim	ds	1		; Default repeat delay (until s
                             
0032 =                       tmp_alo 	ds	1		; VDP addresses lo
0033 =                       tmp_ahi 	ds	1		; VDP addresses hi
0034 =                       tmp_blo 	ds	1		; Temp address lo
0035 =                       tmp_bhi		ds	1		; Temp address hi
0036 =                       tmp_clo		ds	1		; Temp address lo
0037 =                       tmp_chi		ds	1		; Temp address hi
0038 =                       tmp_d		ds	1		; Temp storage d
                             
                             ; Raw input/output parameters
0039 =                       buf_lo		ds	1		; Line buffer address low
003a =                       buf_hi		ds	1		; Line buffer address high
003b =                       buf_sz		ds	1		; Buffer size
003c =                       buf_ef		ds	1		; End file / line marker
                             
                             
                             ; ** Integer function storage **
003d =                       ztmp_24					; Start of 24 byte scratch area (all 
AS65 Assembler for R6502 [1.42].                                     Page   39
-------------------------------- bank\bank0.s --------------------------------

003d =                       num_a		ds	4		; 4 byte primary accumulator
0041 =                       num_b		ds	4		; 4 byte secondary accumulator
0045 =                       num_x		ds	4		; 4 byte x register
0049 =                       num_tmp		ds	4		; 4 byte temp space
004d =                       num_buf		ds	8		; 8 byte string buffer
                             
                             ; ** Tape function storage **
0055 =                       tp_block	ds	2		; Block number (int)
0057 =                       tp_idx		ds	1		; Current buffer index
0058 =                       tp_flag		ds	1		; zero = closed, 1=read, 2=write
0059 =                       tp_delay	ds	2		; Interblock delay
                             
                             ;
                             ; **** INTERPRETER ZERO PAGE ****
                             ;
005b =                       dflat_zp_s
005b =                       dflat_zp_save_s			; ZP save dflat from here
005b =                       df_checkkey	ds	1		; Key check interval counter
005c =                       df_checkmsk	ds	1		; Mask for check key
005d =                       errno		ds	1		; General error condition status
005e =                       df_immed	ds	1		; Immediate mode (0 = not immediat
005f =                       df_sp		ds	1		; Stack pointer after error to resto
0060 =                       df_pc		ds	2		; PC after error to return to
0062 =                       df_brkpc	ds	2		; PC pushed on the stack for BRK
0064 =                       df_brkval	ds	1		; Byte after BRK instruction
0065 =                       df_prgstrt	ds	2		; Start of program code
0067 =                       df_prgend	ds	2		; End of program code
0069 =                       df_vntstrt	ds	2		; Variable name table start
006b =                       df_vntend	ds	2		; Variable name table end
006d =                       df_vvtstrt	ds	2		; Variable value table start
006f =                       df_vvtend	ds	2		; Variable value table end
0071 =                       df_varcnt	ds	1		; Variable counter
0072 =                       df_starstrt	ds	2		; String and array table start
0074 =                       df_starend	ds	2		; String and array table end
0076 =                       df_rtstop	ds	1		; Runtime stack pointer
0077 =                       df_parmtop	ds	1		; Top of parameter stack (grows 
0078 =                       df_strbuff	ds	1		; String expression buffer
0079 =                       df_stridx	ds	1		; Top of string buffer (grows dow
007a =                       df_sevalptr	ds	2		; Pointer to next free char in 
                             
007c =                       df_linoff	ds	1		; Offset in to line buffer
007d =                       df_tokoff	ds	1		; Offset in to tokenised buffer
007e =                       df_eolidx	ds	1		; End of line index (i.e length)
007f =                       df_nxtstidx	ds	1		; Offset to the next statement 
0080 =                       df_curstidx	ds	1		; Offset to the start of curren
0081 =                       df_symtab	ds	2		; Pointer to next free symtab ent
0083 =                       df_symoff	ds	1		; Offset in to token table
0084 =                       df_symini	ds	2		; Start of symtab
0086 =                       df_currlin	ds	2		; Execution current line pointer
0088 =                       df_exeoff	ds	1		; Execution line buffer offset
0089 =                       df_nextlin	ds	2		; Next line to execute
008b =                       df_procmode	ds	1		; Only used during tokenisation
008c =                       df_procargs	ds	1		; Only used during tokenisation
008d =                       df_procloc	ds	1		; Counts the number of local par
008e =                       df_procptr	ds	2		; Pointer to proc vvt slot
0090 =                       df_lineptr	ds	2		; Pointer to line during searche
0092 =                       df_lineidx	ds	1		; Pointer to line index during s
0093 =                       df_ifnest	ds	1		; Global nested if counter
0094 =                       df_currdat	ds	2		; Data current line pointer
0096 =                       df_datoff	ds	1		; Data line buffer offset
0097 =                       df_rnd		ds	2		; Random number seed
                             
AS65 Assembler for R6502 [1.42].                                     Page   40
-------------------------------- bank\bank0.s --------------------------------

0099 =                       df_asmpc	ds	2		; Assembler program counter
009b =                       df_asmopt	ds	1		; Assembler current option
009c =                       df_asmadmd	ds	1		; Addressing mode
009d =                       df_asmopcde	ds	1		; Current opcode
009e =                       df_asmoprnd	ds	2		; Current operand
00a0 =                       df_asmlen	ds	1		; Instruction length
                             
00a1 =                       dflat_zp_save_e			; Save up to this place
                             
                             ; Temp space for dflat
00a1 =                       df_tmpptra	ds	2		; Temp pointer a
00a3 =                       df_tmpptrb	ds	2		; Temp pointer b
00a5 =                       df_tmpptrc	ds	2		; Temp pointer c
00a7 =                       df_tmpptrd	ds	2		; Temp pointer d
00a9 =                       df_tmpptre	ds	2		; Temp pointer e
                             
00ab =                       dflat_zp_e
                             
00ab =                       zp_tmp1		ds	1		; General zero page temporary
00ac =                       zp_tmp2		ds	1		; General zero page temporary
00ad =                       zp_tmp3		ds	1		; General zero page temporary
00ae =                       zp_tmp4		ds	1		; General zero page temporary
                             
                             ;***** END OF ZERO PAGE *****
00af =                       _end_zero_page
                             
                             ;***** Page 1 is CPU stack ****
0100 =                       	org 0x0100
0100 =                       _cpu_stack
0100 =                       			ds	256		; All of page 1
                             
                             ;***** Page 2 is tape buffer *****
0200 =                       	org 0x0200
0200 =                       tp_buf		ds	256		; Serial input / output line buff
                             
                             ;***** 3 is IO *****
0300 =                       	org 0x0300			; IO mapped to Page 3 on Oric
0300 =                       io_address	ds	256
                             
0400 =                       	org 0x0400			; Page 4 = dflat space
0400 =                       fd_getname_addr			; ** FOR ORICUTRON EMULATOR **
0400 =                       df_linbuff
0400 =                       df_raw		ds	128		; untokenised input line
0480 =                       df_tokbuff
0480 =                       df_tok		ds 	128		; tokenised output line
                             
0500 =                       	org 0x0500			; Page 5 = fixed space for interpre
0500 =                       df_rtstck				; operator stack grow up, runtime gr
0500 =                       df_rtspace	ds	256
                             
                             
                             ;***** NON-ZERO PAGE VARIABLES *****
                             
                             ; Acticve IO device settings
0600 =                       io_default	ds	1		; The default device number
0601 =                       io_block	ds	io_struct
                             
                             
                             ; Dflat top of memory+1 - initialised at boot tim
0611 =                       df_memtop	ds	2
                             
                             ; Scratch area e.g. string and numeric expression
AS65 Assembler for R6502 [1.42].                                     Page   41
-------------------------------- bank\bank0.s --------------------------------

0613 =                       scratch		ds	256
                             
                             ;***** THIS IS THE START OF FREE SPACE for DFLAT 
0713 =                       mem_start
                             
                             
                             	include "dflat/dflat.i"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  DFLAT.I
                             ;*  This is the main definitions file for dflat. 
                             ;*  definitions are in here to access the data st
                             ;*  used by dflat.
                             ;*
                             ;************************************************
                             
                             ;* Start dflat program memory
0713 =                       DF_PROGSTART=	mem_start
                             ;* This is the top of usable dflat memory plus 1
9800 =                       DF_MEMTOP	=	0x9800
                             
                             ;* Offset in to tokenised line of length and line
0000 =                       DFTK_LINLEN	=	0x00
0001 =                       DFTK_LINNUM	=	0x01
                             
                             ;* Flags for token, escape value for data types a
0080 =                       DFTK_TOKEN	=	0x80
0020 =                       DFTK_ESCVAL	=	0x20
0000 =                       DFTK_EOL	=	0x00
                             
                             ;* Numeric constants are encoded based on size an
                             ;* user representation.
                             ;* For example the decimal value 16 will be encod
                             ;* DFTK_INTDEC followed by the bytes 0 and 16 to 
                             ;* The same value in binary will be encoded as DF
                             ;* followed by the same 0 and 16 bytes.  This is 
                             ;* tokenised value to be displayed in original re
                             ;* So in the two examples, they will be shown as 
                             ;* '0x0010' respectively.
0000 =                       DFTK_CHR	=	0x00
0001 =                       DFTK_RESV1	=	0x01
0002 =                       DFTK_RESV2	=	0x02
0003 =                       DFTK_RESV3	=	0x03
0004 =                       DFTK_RESV4	=	0x04
0005 =                       DFTK_BYTDEC	=	0x05
0006 =                       DFTK_BYTHEX = 	0x06
0007 =                       DFTK_BYTBIN =	0x07
0008 =                       DFTK_RESV8	=	0x08
0009 =                       DFTK_INTDEC	=	0x09
000a =                       DFTK_INTHEX =	0x0a
000b =                       DFTK_INTBIN	=	0x0b
000c =                       DFTK_RESVC	=	0x0c
000d =                       DFTK_RESVD	=	0x0d
000e =                       DFTK_RESVE	=	0x0e
000f =                       DFTK_RESVF	=	0x0f
                             
AS65 Assembler for R6502 [1.42].                                     Page   42
-------------------------------- bank\bank0.s --------------------------------

                             ;* String constant, variable and procedure tokens
0010 =                       DFTK_STRLIT	=	0x10
0011 =                       DFTK_VAR	=	0x11
0012 =                       DFTK_PROC	=	0x12
001f =                       DFTK_STEND	=	0x1f
                             
                             ;* Qualifier for non-local parameters passed to a
0026 =                       DFTK_VARPARM=	'&'
                             
                             ;* Variable Value Table (VVT) definitions
                             ;* The VVT records the values of variables define
                             ;* the Variable Name Table (VNT).  When a variabl
                             ;* used, it is added to the VNT, and the position
                             ;* VNT is used as an index in to the VVT.
                             ;* Every VVT entry is 8 bytes - so the VNT index 
                             ;* shifted left 3 bits to get the VVT offset.
                             ;* The VNT grows from top of memory down, the VVT
                             ;* grows from start of VNT down.
                             
                             ;* Index in to each entry of the VVT
0000 =                       DFVVT_TYPE	=	0x00
0001 =                       DFVVT_LO	=	0x01
0002 =                       DFVVT_HI	=	0x02
0003 =                       DFVVT_DIM1	=	0x03
0004 =                       DFVVT_DIM2	=	0x04
0008 =                       DFVVT_SZ	=	0x08	;VVT is aligned to 8 byte blocks
                             
                             ;* The meaning of the DFVVT_TYPE entry
0001 =                       DFVVT_INT	=	0x01
0002 =                       DFVVT_BYT	=	0x02
0004 =                       DFVVT_STR	=	0x04
0008 =                       DFVVT_FLT	=	0x08
0040 =                       DFVVT_PROC	=	0x40
0080 =                       DFVVT_ARRY	=	0x80
                             
                             ;* Flags indicating the meaning of a token
                             ;* A token has the top bit set (0x80), then the
                             ;* remaining bits indicate what it represents.
0001 =                       DFTK_KW		=	0x01
0002 =                       DFTK_FN		=	0x02
0004 =                       DFTK_STROP	=	0x04
0008 =                       DFTK_OP		=	0x08
0010 =                       DFTK_INT	=	0x10
0020 =                       DFTK_BYT	=	0x20
0040 =                       DFTK_STR	=	0x40
0080 =                       DFTK_FLT	=	0x80
0007 =                       DFTK_OPMSK	=	0x07
00f8 =                       DFTK_RTMSK	= 	0xf8
                             
                             ;* Defines what type of value is on the parameter
                             ;* All numerics are stored as INT, all STR
                             ;* are pointers to the actual string, thus
                             ;* all entries in the parmeter stack are 3 bytes
0001 =                       DFST_INT	=	0x01
0080 =                       DFST_STR	=	0x80
                             
                             ;* Token values of specific commands, used during
                             ;* command processing.
                             ;* ANY CHANGE TO THE ORDER OF KEYWORDS NEEDS TO R
0086 =                       DFRT_DEF	=	0x86
0087 =                       DFRT_ENDDEF	=	0x87
0088 =                       DFRT_RETURN	=	0x88
AS65 Assembler for R6502 [1.42].                                     Page   43
-------------------------------- bank\bank0.s --------------------------------

0089 =                       DFRT_ABORT	=	0x89
008c =                       DFRT_REPEAT	=	0x8c
008e =                       DFRT_FOR	=	0x8e
008f =                       DFRT_NEXT	=	0x8f
0090 =                       DFRT_WHILE	=	0x90
0091 =                       DFRT_WEND	=	0x91
0092 =                       DFRT_IF		=	0x92
0093 =                       DFRT_ELSE	=	0x93
0094 =                       DFRT_ENDIF	=	0x94
0095 =                       DFRT_ELSEIF	=	0x95
0096 =                       DFRT_DATA	=	0x96
0097 =                       DFRT_ASM	=	0x97
                             
                             _PushTrueJmp macro
                             	ldx #0xff
                             	txa
                             	jmp df_st_pushInt
                             	endm
                             
                             _PushFalseJmp macro
                             	ldx #0x00
                             	txa
                             	jmp df_st_pushInt
                             	endm
                             
                             	include "dflat/error.i"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  ERROR.I
                             ;*  Error definitions file.
                             ;*  The macro to throw an error is elswhere, but 
                             ;*  It issues a 6502 BRK commmand with the next b
                             ;*  the error code.  The BRK handler then picks u
                             ;*  code and shows the appropriate message plus a
                             ;*  number if a program was running.
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code  
                             
                             ; Error message numbers
0000 =                       DFERR_OK		=	0
0001 =                       DFERR_SYNTAX	=	1
0002 =                       DFERR_TYPEMISM	=	2
0003 =                       DFERR_DIM		=	3
0004 =                       DFERR_UNTIL		=	4
0005 =                       DFERR_NOPROC	=	5
0006 =                       DFERR_PROCPARM	=	6
0007 =                       DFERR_IMMEDIATE	=	7
0008 =                       DFERR_UNCLOSEDIF=	8
0009 =                       DFERR_NOIF		=	9
000a =                       DFERR_NEXTFOR	=	10
000b =                       DFERR_FNAME		=	11
000c =                       DFERR_STRLONG	=	12
000d =                       DFERR_BREAK		=	13
AS65 Assembler for R6502 [1.42].                                     Page   44
-------------------------------- bank\bank0.s --------------------------------

000e =                       DFERR_NODATA	=	14
000f =                       DFERR_WEND		=	15
0010 =                       DFERR_NOLINE	=	16
0011 =                       DFERR_RETURN	=	17
0012 =                       DFERR_ABORT		=	18
0013 =                       DFERR_QUANTITY	=	19
0014 =                       DFERR_NOORG		=	20
                             
                             
                             
                             
                             
                             ;****************************************
                             ;*	Set 6502 default vectors	*
                             ;****************************************
                             	data				; Set vectors
fffa =                       	org 0xfffa			; Vectors are at these addresses
fffa : 0cc5                  	fcw nmi				; 0xfffa : NMI Vector
fffc : c3c4                  	fcw init			; 0xfffc : Reset Vector
fffe : cbc0                  	fcw call_irq_master	; 0xfffe : IRQ Vector
                             
                             	; ROM code
                             	code				;
c000 =                       	org 0xc000			; Start of ROM
                             
c000 :                       _code_start
                             	; Restore current bank always at address c001
c000 :                       mod_sz_kernel_s
                             
                             ;* Include all core code in the right order
                             	include "kernel/snd-low.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  SND-LOW.S
                             ;*	Routines to access the AY-3-8912, which is don
                             ;*	lines of the VIA - CB2 and CA2 for chip select
                             ;*	Port A for data interface. This makes accessin
                             ;*	8912 a bit slow..
                             ;*
                             ;* 	CB2		CA2		Function		CB2=BDIR, CA2=BC1
                             ;*	0		0		Not selected
                             ;*	0		1		Read register in to Port A
                             ;*	1		0		Write register from Port A
                             ;*	1		1		Select register # from Port A
                             ;************************************************
                             
                             ;****************************************
                             ;* snd_set
                             ;* Set AY register X to value A
                             ;* Input : X = Reg no, A = Value
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
c000 :                       snd_set
c000 : 48               [ 3] 	pha
                             
AS65 Assembler for R6502 [1.42].                                     Page   45
-------------------------------- bank\bank0.s --------------------------------

c001 : a9ff             [ 2] 	lda #0xff				; Set Port A to output
c003 : 8d0303           [ 4] 	sta IO_0+DDRA
                             
c006 : 8e0f03           [ 4] 	stx SND_ADBUS			; Put reg # on Port A (sound bus
                             
c009 : a9ff             [ 2] 	lda #SND_SELSETADDR		; Get ready to select the r
c00b : 8d0c03           [ 4] 	sta SND_MODE			; Latch the reg # on Port A
                             
c00e : a9dd             [ 2] 	lda #SND_DESELECT		; Deselect AY
c010 : 8d0c03           [ 4] 	sta SND_MODE
                             
c013 : 68               [ 4] 	pla						; Get value
c014 : 48               [ 3] 	pha						; but don't lose it
c015 : 8d0f03           [ 4] 	sta SND_ADBUS			; Put reg value on Port A (sound
c018 : a9fd             [ 2] 	lda #SND_SELWRITE		; Select mode for writing dat
c01a : 8d0c03           [ 4] 	sta SND_MODE			; Latch reg value on Port A
                             	
c01d : a9dd             [ 2] 	lda #SND_DESELECT		; Deselect AY
c01f : 8d0c03           [ 4] 	sta SND_MODE
                             
c022 : 68               [ 4] 	pla
                             	
c023 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* snd_get
                             ;* Get AY register X value
                             ;* Input : X = Reg no
                             ;* Output : A = Value
                             ;* Regs affected : None
                             ;****************************************
c024 :                       snd_get
                             
c024 : a9ff             [ 2] 	lda #0xff				; Set Port A to output
c026 : 8d0303           [ 4] 	sta IO_0+DDRA
                             
c029 : 8e0f03           [ 4] 	stx SND_ADBUS			; Put X on the sound bus (X = re
                             
c02c : a9ff             [ 2] 	lda #SND_SELSETADDR		; Get ready to select the r
c02e : 8d0c03           [ 4] 	sta SND_MODE			; Latch the reg # on Port A
                             
c031 : a9dd             [ 2] 	lda #SND_DESELECT		; Deselect AY
c033 : 8d0c03           [ 4] 	sta SND_MODE
                             
c036 : a900             [ 2] 	lda #0x00				; Set Port A to input
c038 : 8d0303           [ 4] 	sta IO_0+DDRA
                             
c03b : a9df             [ 2] 	lda #SND_SELREAD		; Select mode for reading data
c03d : 8d0c03           [ 4] 	sta SND_MODE			; Set read mode on AY
                             
c040 : ad0f03           [ 4] 	lda SND_ADBUS			; Get value in to Y from Port A
c043 : 48               [ 3] 	pha						; Save it to stack
                             	
c044 : a9dd             [ 2] 	lda #SND_DESELECT		; Deselect AY
c046 : 8d0c03           [ 4] 	sta SND_MODE
                             
c049 : 68               [ 4] 	pla						; Get the value off stack
                             	
c04a : 60               [ 6] 	rts
                             
                             
                             	include "kernel/main.s"
AS65 Assembler for R6502 [1.42].                                     Page   46
-------------------------------- bank\bank0.s --------------------------------

                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  MAIN.S
                             ;*  This is where the main user program is execut
                             ;*  the 'kernel' once the system is initialised a
                             ;*  Today, main does very little - first shows th
                             ;*  boot up message, and then passes control to d
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code
                             
c04b :                       main
                             	_println msg_hello_world
                             
                             
                             
c060 :                       infinity
c060 : 2055df           [ 6] 	jsr df_pg_dflat
c063 : 4c60c0           [ 3] 	jmp infinity
                             
c066 :                       msg_hello_world
                             	;* build.s is generate by the assemble.bat file
                             	;* all it does is echo an assembler line to
                             	;* including the build date in the message.
                             	include "kernel/build.s"
c066 : 4f726963206466..       db "Oric dflat custom ROM\r" 
c07c : 42792040363530..       db "By @6502Nerd\r" 
c089 : 4275696c64203a..       db "Build : 0.13 [BETA]\r" 
c09d : 436f7079726967..       db "Copyright (c) 2021\r\r",0 
                             
                             
                             	include "kernel/irq.s"
                             	
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  IRQ.S
                             ;*	This is the IRQ handler
                             ;*	There is only one regular interrupt source whi
                             ;*	T1 timeout on a 50Hz cycle, whose main job is 
                             ;*	flash the cursor and decrement some timers.
                             ;*	But there are handlers for BRK, user and VIA s
                             ;*	By default the user and VIA do nothing, but ca
                             ;*	redirected to user routines.
                             ;*
                             ;************************************************
                             
                             ;* Obviously this can only be done with
                             ;* interrupts disabled!
AS65 Assembler for R6502 [1.42].                                     Page   47
-------------------------------- bank\bank0.s --------------------------------

c0b2 :                       init_irq
                             	; Core IRQ handler
c0b2 : a9d6             [ 2] 	lda #lo(irq)
c0b4 : 8502             [ 3] 	sta vec_irq
c0b6 : a9c0             [ 2] 	lda #hi(irq)
c0b8 : 8503             [ 3] 	sta vec_irq+1
                             	
                             	; Core BRK handler
c0ba : a9f8             [ 2] 	lda #lo(irq_brk)
c0bc : 8504             [ 3] 	sta vec_brk
c0be : a9c0             [ 2] 	lda #hi(irq_brk)
c0c0 : 8505             [ 3] 	sta vec_brk+1
                             
                             	; User handlers VIA0 interrupts
c0c2 : a9d5             [ 2] 	lda #lo(null_handler)
c0c4 : 8506             [ 3] 	sta vec_usercia0
c0c6 : a9c0             [ 2] 	lda #hi(null_handler)
c0c8 : 8507             [ 3] 	sta vec_usercia0+1
                             
c0ca : 60               [ 6] 	rts
                             
                             
                             ;* Calls the master IRQ handler - from the ROM
c0cb :                       call_irq_master
c0cb : 6c0200           [ 6] 	jmp (vec_irq)
                             	
                             ;* Calls the BRK handler
c0ce :                       call_irq_brk
c0ce : 6c0400           [ 6] 	jmp (vec_brk)
                             
                             ;* Call the user CIA0 handler
c0d1 :                       call_irq_usercia0
c0d1 : 6c0600           [ 6] 	jmp (vec_usercia0)
                             
                             ;* null interrupt
c0d4 :                       null_irq
c0d4 : 40               [ 6] 	rti
                             
                             ;* null handler
c0d5 :                       null_handler
c0d5 : 60               [ 6] 	rts
                             	
                             
                             ;* Master IRQ handler
c0d6 :                       irq
                             	; Don't use _pushAXY as it uses a temp location!
c0d6 : 48               [ 3] 	pha
c0d7 : 8a               [ 2] 	txa
c0d8 : 48               [ 3] 	pha
c0d9 : 98               [ 2] 	tya
c0da : 48               [ 3] 	pha
                             
c0db : d8               [ 2] 	cld						; Just in case!
c0dc : 18               [ 2] 	clc						; Standard behaviour
                             
                             	; Check if IRQ or BRK
                             	; load P from stack in to A
c0dd : ba               [ 2] 	tsx
c0de : bd0401           [ 4] 	lda 0x104,x
                             	; BRK bit set?
c0e1 : 2910             [ 2] 	and #0x10
c0e3 : d0e9             [ 3] 	bne call_irq_brk
AS65 Assembler for R6502 [1.42].                                     Page   48
-------------------------------- bank\bank0.s --------------------------------

                             	
                             	;* Primary interrupt is timer 1
c0e5 : ad0d03           [ 4] 	lda IO_0 + IFR
c0e8 : 2940             [ 2] 	and #0x40				; Bit 6 = Timer 1 interrupt
c0ea : f006             [ 3] 	beq irq_fin				; If nothing then end
                             
                             	; Service the timer 1 interrupt
c0ec : 8d0d03           [ 4] 	sta IO_0 + IFR			; Clear the interrupt
c0ef : 2025c1           [ 6] 	jsr int_vdp_handler
                             
c0f2 :                       irq_fin
                             	_pullAXY
                             
c0f7 : 40               [ 6] 	rti
                             	
                             ;* Handle BRK
c0f8 :                       irq_brk
                             	; Handle BRK
                             	; Get PCL,H minus 2 gives the BRK instruction ad
c0f8 : 38               [ 2] 	sec
c0f9 : bd0501           [ 4] 	lda 0x0105,x
c0fc : e902             [ 2] 	sbc #2
c0fe : 8562             [ 3] 	sta df_brkpc
c100 : bd0601           [ 4] 	lda 0x0106,x
c103 : e900             [ 2] 	sbc #0
c105 : 8563             [ 3] 	sta df_brkpc+1
                             	; Get the byte pointed to by old PC
                             	; which is 1 on from the BRK
c107 : a001             [ 2] 	ldy #1
c109 : b162             [ 5] 	lda (df_brkpc),y
c10b : 8564             [ 3] 	sta df_brkval
c10d : 855d             [ 3] 	sta errno
                             	; now update the return address
c10f : a560             [ 3] 	lda df_pc
c111 : 9d0501           [ 5] 	sta 0x105,x
c114 : a561             [ 3] 	lda df_pc+1
c116 : 9d0601           [ 5] 	sta 0x106,x
                             	
                             	_pullAXY
                             
                             	; Save the registers in temp area
c11e : 853d             [ 3] 	sta num_a
c120 : 863e             [ 3] 	stx num_a+1
c122 : 843f             [ 3] 	sty num_a+2
                             	; when RTI occurs:
                             	;  will return to error handler
                             	;  df_brkval will contain signature
c124 : 40               [ 6] 	rti
                             	
                             	
                             ;****************************************
                             ;* int_vdp_handler
                             ;* VDP interrupt handler
                             ;****************************************
c125 :                       int_vdp_handler
c125 : 2041c1           [ 6] 	jsr update_timers	; If it is then update system 
c128 : a50d             [ 3] 	lda vdp_curoff		; Is cursor enabled?
c12a : d014             [ 3] 	bne int_vdp_fin		; Skip if disabled
                             
c12c : c60c             [ 5] 	dec vdp_curcnt		; Decrement countdown
c12e : d010             [ 3] 	bne int_vdp_fin		; If not expired, do nothing
c130 : a50b             [ 3] 	lda vdp_curtim		; Reset cursor countdown
AS65 Assembler for R6502 [1.42].                                     Page   49
-------------------------------- bank\bank0.s --------------------------------

c132 : 850c             [ 3] 	sta vdp_curcnt
c134 : a50e             [ 3] 	lda vdp_curstat		; Get the flash status
c136 : 4980             [ 2] 	eor #0x80			; Invert top bit
c138 : 850e             [ 3] 	sta vdp_curstat
c13a : 450f             [ 3] 	eor vdp_curval		; EOR with whats under cursor
                             	; Use cursor address, write to screen
                             	; ptr is base, offset with X coord in Y register
c13c : a41c             [ 3] 	ldy gr_scrngeom+gr_cur_x
c13e : 911e             [ 5] 	sta (gr_scrngeom+gr_cur_ptr),y
                             
c140 :                       int_vdp_fin	
c140 : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* update_timers
                             ;* Update 24 bit timer and debounce counters
                             ;****************************************
c141 :                       update_timers
c141 : e608             [ 5] 	inc vdp_cnt
c143 : d006             [ 3] 	bne inc_kb_timers
c145 : e609             [ 5] 	inc vdp_cnt_hi
c147 : d002             [ 3] 	bne inc_kb_timers
c149 : e60a             [ 5] 	inc vdp_cnt_hi2
c14b :                       inc_kb_timers
c14b : a62d             [ 3] 	ldx kb_deb			; Is debounce 0?
c14d : f002             [ 3] 	beq skip_kb_deb
c14f : c62d             [ 5] 	dec kb_deb
c151 :                       skip_kb_deb
c151 : a62f             [ 3] 	ldx kb_rep			; Is repeat timer 0?
c153 : f002             [ 3] 	beq skip_kb_rep
c155 : c62f             [ 5] 	dec kb_rep
c157 :                       skip_kb_rep
c157 : 60               [ 6] 	rts
                             	
                             
                             	include "utils/utils.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  UTILS.S
                             ;*  This module implements various utility functi
                             ;*  converting from ASCII to binary form for numb
                             ;*  vice-versa to allow humans to actually be abl
                             ;*  and read numbers in their prefered form!
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code
                             
c158 :                       utilPrintSPC
c158 : 48               [ 3] 	pha
c159 : a920             [ 2] 	lda #' '
c15b : 203ec4           [ 6] 	jsr io_put_ch
c15e : 68               [ 4] 	pla
c15f : 60               [ 6] 	rts
AS65 Assembler for R6502 [1.42].                                     Page   50
-------------------------------- bank\bank0.s --------------------------------

                             
c160 :                       utilPrintCRLF
c160 : 48               [ 3] 	pha
c161 : a90d             [ 2] 	lda #UTF_CR
c163 : 203ec4           [ 6] 	jsr io_put_ch
c166 : 68               [ 4] 	pla
c167 : 60               [ 6] 	rts
                             
c168 :                       utilPrintA
c168 : 8538             [ 3] 	sta tmp_d
c16a : 48               [ 3] 	pha
c16b : 8a               [ 2] 	txa
c16c : 48               [ 3] 	pha
c16d : a538             [ 3] 	lda tmp_d
c16f : 207dc1           [ 6] 	jsr str_a_to_x
c172 : 203ec4           [ 6] 	jsr io_put_ch
c175 : 8a               [ 2] 	txa
c176 : 203ec4           [ 6] 	jsr io_put_ch
c179 : 68               [ 4] 	pla
c17a : aa               [ 2] 	tax
c17b : 68               [ 4] 	pla
c17c : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* str_a_to_x
                             ;* Convert accumulator to hex string
                             ;* Input : A = Byte to convert
                             ;* Output : A = High Char, X = Low Char
                             ;* Regs affected : P
                             ;****************************************
c17d :                       str_a_to_x
c17d : 48               [ 3] 	pha					; Save the byte using later on
c17e : 290f             [ 2] 	and #0x0f			; Mask low nibble
c180 : 18               [ 2] 	clc
c181 : 6930             [ 2] 	adc #'0'			; Convert to UTF
c183 : c93a             [ 2] 	cmp #('9'+1)		; If A greater than '9' then
c185 : 9002             [ 3] 	bcc skip_a_f_1		; skip a-f adjustment
c187 : 6926             [ 2] 	adc #0x26			; Add 27 (6+C) to get in to A-F rang
c189 :                       skip_a_f_1
c189 : aa               [ 2] 	tax					; Low char is in X
c18a : 68               [ 4] 	pla					; Get byte back
c18b : 4a               [ 2] 	lsr a				; Make high nibble low
c18c : 4a               [ 2] 	lsr a
c18d : 4a               [ 2] 	lsr a
c18e : 4a               [ 2] 	lsr a
c18f : 18               [ 2] 	clc
c190 : 6930             [ 2] 	adc #'0'			; Convert to UTF
c192 : c93a             [ 2] 	cmp #('9'+1)		; If A greater than '9' then
c194 : 9002             [ 3] 	bcc skip_a_f_2		; skip a-f adjustment
c196 : 6926             [ 2] 	adc #0x26			; Add 27 (6+C) to get in to A-F rang
c198 :                       skip_a_f_2
                             
c198 : 18               [ 2] 	clc					; No error
c199 : 60               [ 6] 	rts					; A high nibble
                             
                             ;****************************************
                             ;* str_x_to_a
                             ;* Convert hex string to accumulator
                             ;* Input : A = High Char, X = Low Char
                             ;* Output : A = Value
                             ;* Regs affected : P
AS65 Assembler for R6502 [1.42].                                     Page   51
-------------------------------- bank\bank0.s --------------------------------

                             ;****************************************
c19a :                       str_x_to_a
c19a : 0920             [ 2] 	ora #0x20			; Make alpha in to lower case
c19c : 38               [ 2] 	sec					; Process high char in A
c19d : e930             [ 2] 	sbc #'0'			; Convert to hex nibble
c19f : c90a             [ 2] 	cmp #10				; If A < 10 then
c1a1 : 9002             [ 3] 	bcc skip_x_f_1		; skip a-f adjustment
c1a3 : e927             [ 2] 	sbc #0x27			; Sub 7 to get in to A-F range
c1a5 :                       skip_x_f_1
c1a5 : c910             [ 2] 	cmp #0x10			; Nibble should be <= 0x0f
c1a7 : b01d             [ 3] 	bcs	str_x_to_a_err	; Error if not
                             
c1a9 : 0a               [ 2] 	asl a				; This is the high nibble
c1aa : 0a               [ 2] 	asl a
c1ab : 0a               [ 2] 	asl a
c1ac : 0a               [ 2] 	asl a
c1ad : 48               [ 3] 	pha					; Save the high nibble
c1ae : 8a               [ 2] 	txa					; Now process the low char in X
c1af : 0920             [ 2] 	ora #0x20			; Make alpha in to lower case
c1b1 : 38               [ 2] 	sec
c1b2 : e930             [ 2] 	sbc #'0'			; Convert to hex nibble
c1b4 : c90a             [ 2] 	cmp #10				; If A < 10 then
c1b6 : 9002             [ 3] 	bcc skip_x_f_2		; skip a-f adjustment
c1b8 : e927             [ 2] 	sbc #0x27			; Sub 7 to get in to A-F range
c1ba :                       skip_x_f_2
c1ba : c910             [ 2] 	cmp #0x10			; Nibble should be <= 0x0f
c1bc : b007             [ 3] 	bcs	str_x_to_a_errl	; Error if not
                             
c1be : 853d             [ 3] 	sta num_a			; Store low nibble in temp
c1c0 : 68               [ 4] 	pla					; Get high nibble
c1c1 : 053d             [ 3] 	ora num_a			; OR with low nibble
                             
c1c3 : 18               [ 2] 	clc					; No error
c1c4 : 60               [ 6] 	rts					; A contains value
                             
c1c5 :                       str_x_to_a_errl
c1c5 : 68               [ 4] 	pla
c1c6 :                       str_x_to_a_err
                             	SWBRK CMD_ERR_VAL
                             
                             
                             ;****************************************
                             ;* con_n_to_a
                             ;* Convert numeric string to accumulator (unsigne
                             ;* Input : Pointer to string (X=L, A=H), Y = Sour
                             ;* Output : num_a, num_a+1 contains word, X=numbe
                             ;* A = Source type detected
                             ;* Regs affected : CS = Error
                             ;****************************************
c1c8 :                       con_n_to_a
c1c8 : 8649             [ 3] 	stx num_tmp
c1ca : 854a             [ 3] 	sta num_tmp+1
c1cc : a900             [ 2] 	lda #0
c1ce : 853d             [ 3] 	sta num_a
c1d0 : 853e             [ 3] 	sta num_a+1
c1d2 : c000             [ 2] 	cpy #NUM_ANY
c1d4 : f014             [ 3] 	beq con_n_to_a_detect
c1d6 : 88               [ 2] 	dey
c1d7 : d003             [ 3] 	bne con_n_not_dec
c1d9 :                       con_dec_jmp
c1d9 : 4c6dc2           [ 3] 	jmp con_dec_to_a_int
c1dc :                       con_n_not_dec
AS65 Assembler for R6502 [1.42].                                     Page   52
-------------------------------- bank\bank0.s --------------------------------

c1dc : 88               [ 2] 	dey
c1dd : d003             [ 3] 	bne con_n_not_hex
c1df :                       con_hex_jmp
c1df : 4c04c2           [ 3] 	jmp con_hex_to_a_int
c1e2 :                       con_n_not_hex
c1e2 : 88               [ 2] 	dey
c1e3 : d003             [ 3] 	bne con_n_err
c1e5 :                       con_bin_jmp
c1e5 : 4c43c2           [ 3] 	jmp con_bin_to_a_int
c1e8 :                       con_n_err
c1e8 : 38               [ 2] 	sec
c1e9 : 60               [ 6] 	rts
c1ea :                       con_n_to_a_detect		; Y is zero on entry
c1ea : b149             [ 5] 	lda (num_tmp),y
c1ec : c930             [ 2] 	cmp #'0'
c1ee : d0e9             [ 3] 	bne con_dec_jmp
c1f0 : a001             [ 2] 	ldy #1
c1f2 : b149             [ 5] 	lda (num_tmp),y
c1f4 : 0920             [ 2] 	ora #0x20
c1f6 : c978             [ 2] 	cmp #'x'
c1f8 : f0e5             [ 3] 	beq con_hex_jmp
c1fa : c962             [ 2] 	cmp #'b'
c1fc : f0e7             [ 3] 	beq con_bin_jmp
c1fe : d0d9             [ 3] 	bne con_dec_jmp		; Always branches
                             
                             ;****************************************
                             ;* con_hex_to_a
                             ;* Convert hex string to accumulator (unsigned)
                             ;* Input : Pointer to string (X=L, A=H)
                             ;* Output : num_a, num_a+1 contains word, X=numbe
                             ;* Regs affected : CS = Error
                             ;****************************************
c200 :                       con_hex_to_a
c200 : 8649             [ 3] 	stx num_tmp
c202 : 854a             [ 3] 	sta num_tmp+1
c204 :                       con_hex_to_a_int
c204 : a205             [ 2] 	ldx #5			; > 4 digits will cause error
c206 : a002             [ 2] 	ldy #2			; start at first digit
c208 :                       con_hex_digit
c208 : b149             [ 5] 	lda (num_tmp),y
c20a : 0920             [ 2] 	ora #0x20					; Make alpha in to lower case
c20c : 38               [ 2] 	sec							; Process high char in A
c20d : e930             [ 2] 	sbc #'0'					; Convert to hex nibble
c20f : c90a             [ 2] 	cmp #10						; If A < 10 then
c211 : 9002             [ 3] 	bcc con_hex_skip_x_f_1		; skip a-f adjustment
c213 : e927             [ 2] 	sbc #0x27					; Sub 7 to get in to A-F range
c215 :                       con_hex_skip_x_f_1
c215 : c910             [ 2] 	cmp #0x10					; Nibble should be <= 0x0f
c217 : b01c             [ 3] 	bcs	con_hex_done			; Potentially done if not
c219 : 48               [ 3] 	pha
c21a : a53d             [ 3] 	lda num_a
                             	; make room for lo nibble
c21c : 0a               [ 2] 	asl a
c21d : 263e             [ 5] 	rol num_a+1
c21f : 0a               [ 2] 	asl a
c220 : 263e             [ 5] 	rol num_a+1
c222 : 0a               [ 2] 	asl a
c223 : 263e             [ 5] 	rol num_a+1
c225 : 0a               [ 2] 	asl a
c226 : 263e             [ 5] 	rol num_a+1
c228 : 853d             [ 3] 	sta num_a
                             	; save in low nibble
AS65 Assembler for R6502 [1.42].                                     Page   53
-------------------------------- bank\bank0.s --------------------------------

c22a : 68               [ 4] 	pla
c22b : 053d             [ 3] 	ora num_a
c22d : 853d             [ 3] 	sta num_a
c22f : c8               [ 2] 	iny
c230 : ca               [ 2] 	dex
c231 : d0d5             [ 3] 	bne con_hex_digit
                             	; if got to a 5th digit then error
c233 :                       con_hex_err
c233 : 38               [ 2] 	sec
c234 : 60               [ 6] 	rts
                             	; found a non-hex digit
c235 :                       con_hex_done
                             	; if no digits processed then error
c235 : c002             [ 2] 	cpy #2
c237 : f0fa             [ 3] 	beq con_hex_err
                             	; move y to x for digits processed
c239 : 98               [ 2] 	tya
c23a : aa               [ 2] 	tax
c23b : a902             [ 2] 	lda #NUM_HEX
c23d : 18               [ 2] 	clc
c23e : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* con_bin_to_a
                             ;* Convert bin string to accumulator (unsigned)
                             ;* Input : Pointer to string (X=L, A=H)
                             ;* Output : num_a, num_a+1 contains word, X=numbe
                             ;* Regs affected : CS = Error
                             ;****************************************
c23f :                       con_bin_to_a
c23f : 8649             [ 3] 	stx num_tmp
c241 : 854a             [ 3] 	sta num_tmp+1
c243 :                       con_bin_to_a_int
c243 : a002             [ 2] 	ldy #2
c245 : a211             [ 2] 	ldx #17						; Max 16 binary digits allowed
c247 :                       con_bin_digit
c247 : b149             [ 5] 	lda (num_tmp),y
c249 : c930             [ 2] 	cmp #'0'
c24b : 9010             [ 3] 	bcc con_bin_done
c24d : c932             [ 2] 	cmp #'1'+1
c24f : b00c             [ 3] 	bcs con_bin_done
                             	; sets C if '1' else resets C
c251 : 69cf             [ 2] 	adc #0xff-'0'
                             	; shift in digit
c253 : 263d             [ 5] 	rol num_a
c255 : 263e             [ 5] 	rol num_a+1
c257 : c8               [ 2] 	iny
c258 : ca               [ 2] 	dex
c259 : d0ec             [ 3] 	bne con_bin_digit
                             	; on the 17th digit is too much, error
c25b : f00a             [ 3] 	beq con_bin_err
c25d :                       con_bin_done
                             	; didn't process any digit = error
c25d : c002             [ 2] 	cpy #2
c25f : f006             [ 3] 	beq con_bin_err
                             	; put digits processed in to X
c261 : 98               [ 2] 	tya
c262 : aa               [ 2] 	tax
c263 : a903             [ 2] 	lda #NUM_BIN
c265 : 18               [ 2] 	clc
c266 : 60               [ 6] 	rts
c267 :                       con_bin_err
AS65 Assembler for R6502 [1.42].                                     Page   54
-------------------------------- bank\bank0.s --------------------------------

c267 :                       str_d_error
c267 : 38               [ 2] 	sec
c268 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* con_d_to_a
                             ;* Convert decimal string to accumulator (SIGNED)
                             ;* Input : Pointer to string (X=L, A=H)
                             ;* Output : num_a, num_a+1 contains word, X=numbe
                             ;* Regs affected : CS = Error
                             ;****************************************
c269 :                       con_dec_to_a
c269 : 8649             [ 3] 	stx num_tmp
c26b : 854a             [ 3] 	sta num_tmp+1
c26d :                       con_dec_to_a_int
c26d : a000             [ 2] 	ldy #0
                             	; Detect if leading minus sign
c26f : b149             [ 5] 	lda (num_tmp),y
c271 : c92d             [ 2] 	cmp #'-'
c273 : d001             [ 3] 	bne str_d_find_end
                             	; skip over minus if found
c275 : c8               [ 2] 	iny
c276 :                       str_d_find_end
c276 : b149             [ 5] 	lda (num_tmp),y
c278 : c930             [ 2] 	cmp #'0'
c27a : 9007             [ 3] 	bcc str_d_found_end
c27c : c93a             [ 2] 	cmp #'9'+1
c27e : b003             [ 3] 	bcs str_d_found_end
c280 : c8               [ 2] 	iny
c281 : d0f3             [ 3] 	bne str_d_find_end	; Possble wraparound but shou
c283 :                       str_d_found_end
c283 : c007             [ 2] 	cpy #7				; Biggest int is 6 chars
c285 : b0e0             [ 3] 	bcs str_d_error		; e.g. -32767
c287 : 844c             [ 3] 	sty num_tmp+3
c289 : a900             [ 2] 	lda #0
c28b : 854b             [ 3] 	sta num_tmp+2
c28d : 853d             [ 3] 	sta num_a
c28f : 853e             [ 3] 	sta num_a+1
c291 :                       str_d_process_digit
c291 : 88               [ 2] 	dey
c292 : 3027             [ 3] 	bmi str_d_digits_done
                             
c294 : b149             [ 5] 	lda (num_tmp),y
                             
c296 : c92d             [ 2] 	cmp #'-'			; Got to minus sign?
c298 : f021             [ 3] 	beq str_d_digits_done ; also done
                             
c29a : 38               [ 2] 	sec
c29b : e930             [ 2] 	sbc #'0'
                             	; Convert digit to number
                             	; and then offset in to
                             	; look up table of powers
c29d : 18               [ 2] 	clc
c29e : 0a               [ 2] 	asl a
c29f : 654b             [ 3] 	adc num_tmp+2
                             	; X contains index to powers
c2a1 : aa               [ 2] 	tax
c2a2 : a53d             [ 3] 	lda num_a
c2a4 : 7dd8c2           [ 4] 	adc str_d_powers,x
c2a7 : 853d             [ 3] 	sta num_a
c2a9 : a53e             [ 3] 	lda num_a+1
c2ab : 7dd9c2           [ 4] 	adc str_d_powers+1,x
AS65 Assembler for R6502 [1.42].                                     Page   55
-------------------------------- bank\bank0.s --------------------------------

c2ae : 853e             [ 3] 	sta num_a+1
c2b0 : b0b5             [ 3] 	bcs str_d_error
                             	; Move to next power of 10 index
c2b2 : a54b             [ 3] 	lda num_tmp+2
c2b4 : 6914             [ 2] 	adc #20
c2b6 : 854b             [ 3] 	sta num_tmp+2
c2b8 : 4c91c2           [ 3] 	jmp str_d_process_digit
c2bb :                       str_d_digits_done
                             	; check if minus
c2bb : b149             [ 5] 	lda (num_tmp),y
c2bd : c92d             [ 2] 	cmp #'-'
c2bf : d011             [ 3] 	bne str_d_skip_neg
c2c1 : a64c             [ 3] 	ldx num_tmp+3		; Must have >= 2 chars
c2c3 : e002             [ 2] 	cpx #2				; else it's an error
c2c5 : 90a0             [ 3] 	bcc str_d_error
c2c7 : a63d             [ 3] 	ldx num_a
c2c9 : a53e             [ 3] 	lda num_a+1
c2cb : 203cc3           [ 6] 	jsr twos_complement
c2ce : 863d             [ 3] 	stx num_a
c2d0 : 853e             [ 3] 	sta num_a+1
c2d2 :                       str_d_skip_neg
c2d2 : a64c             [ 3] 	ldx num_tmp+3
c2d4 : a901             [ 2] 	lda #NUM_DEC
c2d6 : 18               [ 2] 	clc
c2d7 : 60               [ 6] 	rts
                             
c2d8 :                       str_d_powers
c2d8 : 00000100020003..      	dw	0, 1, 2, 3, 4, 5, 6, 7, 8, 9
c2ec : 00000a0014001e..      	dw	0, 10, 20, 30, 40, 50, 60, 70, 80, 90
c300 : 00006400c8002c..      	dw	0, 100, 200, 300, 400, 500, 600, 700, 800, 90
c314 : 0000e803d007b8..      	dw	0, 1000, 2000, 3000, 4000, 5000, 6000, 7000, 
c328 : 00001027204e30..      	dw	0, 10000, 20000, 30000, 40000, 50000, 60000, 
                             	
                             
                             ;****************************************
                             ;* twos_complement
                             ;* Twos complement of X,A (X=low)
                             ;* Input : X = Low byte, A = High Byte to convert
                             ;* Output : X,A in 2's complement
                             ;* Regs affected : P
                             ;****************************************
c33c :                       twos_complement
c33c : 49ff             [ 2] 	eor #0xff
c33e : 48               [ 3] 	pha
c33f : 8a               [ 2] 	txa
c340 : 49ff             [ 2] 	eor #0xff
c342 : aa               [ 2] 	tax
c343 : 68               [ 4] 	pla
c344 : e8               [ 2] 	inx
c345 : d003             [ 3] 	bne twos_complement_skip_X
c347 : 38               [ 2] 	sec			; Add 1 to A
c348 : 6900             [ 2] 	adc #0
c34a :                       twos_complement_skip_X
c34a : 60               [ 6] 	rts
                             	
                             
                             ;****************************************
                             ;* hex_to_bcd
                             ;* Convert accumulator,X to BCD
                             ;* Input : X = Low byte, A = High Byte to convert
                             ;* Output : 3 bytes of num_a is updated
                             ;* Regs affected : P
AS65 Assembler for R6502 [1.42].                                     Page   56
-------------------------------- bank\bank0.s --------------------------------

                             ;****************************************
c34b :                       hex_to_bcd
c34b : 08               [ 3] 	php
c34c : 48               [ 3] 	pha
c34d : 8538             [ 3] 	sta tmp_d
c34f : 8a               [ 2] 	txa
c350 : 48               [ 3] 	pha
c351 : a538             [ 3] 	lda tmp_d
                             
c353 : 8649             [ 3] 	stx num_tmp
c355 : 854a             [ 3] 	sta num_tmp+1
c357 : c980             [ 2] 	cmp #0x80			; Negative?
c359 : 9003             [ 3] 	bcc hex_to_bcd_skip_neg
c35b : 203cc3           [ 6] 	jsr twos_complement
c35e :                       hex_to_bcd_skip_neg
c35e : a200             [ 2] 	ldx #0
c360 : 863d             [ 3] 	stx num_a
c362 : 863e             [ 3] 	stx num_a+1
c364 : 863f             [ 3] 	stx num_a+2
c366 : 8640             [ 3] 	stx num_a+3
c368 : a210             [ 2] 	ldx #16
c36a : f8               [ 2] 	sed
c36b :                       bin_to_bcd_bit
c36b : 0649             [ 5] 	asl num_tmp
c36d : 264a             [ 5] 	rol num_tmp+1
c36f : a53d             [ 3] 	lda num_a
c371 : 653d             [ 3] 	adc num_a
c373 : 853d             [ 3] 	sta num_a
c375 : a53e             [ 3] 	lda num_a+1
c377 : 653e             [ 3] 	adc num_a+1
c379 : 853e             [ 3] 	sta num_a+1
c37b : a53f             [ 3] 	lda num_a+2
c37d : 653f             [ 3] 	adc num_a+2
c37f : 853f             [ 3] 	sta num_a+2
c381 : ca               [ 2] 	dex
c382 : d0e7             [ 3] 	bne bin_to_bcd_bit
                             	
c384 : 68               [ 4] 	pla
c385 : aa               [ 2] 	tax
c386 : 68               [ 4] 	pla
c387 : 28               [ 4] 	plp
c388 : 60               [ 6] 	rts
                             	
                             ;****************************************
                             ;* bcd_to_str
                             ;* Convert num_buf to chars
                             ;* Input : num_a in BCD format
                             ;* Output : num_buf in ASCII 6 digits
                             ;* Output is big endian, input is not
                             ;* Regs affected : P
                             ;****************************************
c389 :                       bcd_to_str
                             	_pushAXY
                             
                             
c392 : a205             [ 2] 	ldx #5						; Index in to string
c394 : a000             [ 2] 	ldy #0						; Current BCD digit
c396 :                       bcd_str
c396 : b93d00           [ 4] 	lda num_a,y
                             	; Convert 1s digit of byte
c399 : 48               [ 3] 	pha
c39a : 290f             [ 2] 	and #0xf
AS65 Assembler for R6502 [1.42].                                     Page   57
-------------------------------- bank\bank0.s --------------------------------

c39c : 18               [ 2] 	clc
c39d : 6930             [ 2] 	adc #0x30
c39f : 954d             [ 4] 	sta num_buf,x
                             	; Convert 10s digit of byte
c3a1 : 68               [ 4] 	pla
c3a2 : 4a               [ 2] 	lsr a
c3a3 : 4a               [ 2] 	lsr a
c3a4 : 4a               [ 2] 	lsr a
c3a5 : 4a               [ 2] 	lsr a
c3a6 : 18               [ 2] 	clc
c3a7 : 6930             [ 2] 	adc #0x30					; Convert to ASCII
c3a9 : 954c             [ 4] 	sta num_buf-1,x
c3ab : ca               [ 2] 	dex
c3ac : ca               [ 2] 	dex
c3ad : c8               [ 2] 	iny
c3ae : c003             [ 2] 	cpy #3						; 3 BCD digits max
c3b0 : d0e4             [ 3] 	bne bcd_str
                             
                             	_pullAXY
                             
c3b7 : 60               [ 6] 	rts
                             	
                             ;****************************************
                             ;* out_bcd
                             ;* Output a bcd string in num_buf
                             ;* Input : num_buf has the ASCII
                             ;* Input : C=1 print leading zeros else not
                             ;* Output : num_buf in ASCII 6 digits
                             ;* Output is big endian, input is not, Y=digits p
                             ;* Regs affected : P
                             ;****************************************
c3b8 :                       out_bcd
c3b8 : 48               [ 3] 	pha
c3b9 : 8a               [ 2] 	txa
c3ba : 48               [ 3] 	pha
c3bb : 08               [ 3] 	php
c3bc : a000             [ 2] 	ldy #0						; How many digits printed
c3be : a200             [ 2] 	ldx #0						; Index in to string
c3c0 :                       out_bcd_digit
c3c0 : b54d             [ 4] 	lda num_buf,x
c3c2 : c000             [ 2] 	cpy #0						; If not in leading zero mode
c3c4 : d008             [ 3] 	bne out_bcd_print			; No then go print
                             
c3c6 : c930             [ 2] 	cmp #'0'					; else check if zero
c3c8 : d004             [ 3] 	bne out_bcd_print			; No then go print
                             
c3ca : 28               [ 4] 	plp
c3cb : 08               [ 3] 	php
c3cc : 9004             [ 3] 	bcc out_bcd_next			; If C=0 go to next digit, el
c3ce :                       out_bcd_print
c3ce : c8               [ 2] 	iny
c3cf : 203ec4           [ 6] 	jsr io_put_ch
c3d2 :                       out_bcd_next
c3d2 : e8               [ 2] 	inx
c3d3 : e006             [ 2] 	cpx #6
c3d5 : d0e9             [ 3] 	bne out_bcd_digit
c3d7 : c000             [ 2] 	cpy #0						; If nothing printed
c3d9 : d006             [ 3] 	bne out_bcd_fin
c3db : a930             [ 2] 	lda #'0'					; Need to put out 1 zero
c3dd : 203ec4           [ 6] 	jsr io_put_ch
c3e0 : c8               [ 2] 	iny
c3e1 :                       out_bcd_fin
AS65 Assembler for R6502 [1.42].                                     Page   58
-------------------------------- bank\bank0.s --------------------------------

c3e1 : 28               [ 4] 	plp
c3e2 : 68               [ 4] 	pla
c3e3 : aa               [ 2] 	tax
c3e4 : 68               [ 4] 	pla
c3e5 : 18               [ 2] 	clc
c3e6 : 60               [ 6] 	rts
                             	
                             	
                             ;****************************************
                             ;* print_a_to_d
                             ;* Convert X,A to decimal string
                             ;* Input : X,A = number Low,High
                             ;* Input : C=1 print leading zeros else not
                             ;* Output : num_buf in ASCII max 6 digits
                             ;*          Y=digits printed including sign
                             ;* Output is big endian, input is not
                             ;* Regs affected : P
                             ;****************************************
c3e7 :                       print_a_to_d
c3e7 : 08               [ 3] 	php
c3e8 : c980             [ 2] 	cmp #0x80					; Check if sign bit is set
c3ea : 9014             [ 4] 	bcc print_a_to_d_skip_neg	; Skip if not (postive
c3ec : 203cc3           [ 6] 	jsr twos_complement			; Flip from 2s complement
c3ef : 204bc3           [ 6] 	jsr hex_to_bcd				; Convert to BCD
c3f2 : 2089c3           [ 6] 	jsr bcd_to_str				; Convert BCD to string
c3f5 : a92d             [ 2] 	lda #'-'
c3f7 : 203ec4           [ 6] 	jsr io_put_ch
c3fa : 28               [ 4] 	plp							; Leading zeros preference
c3fb : 20b8c3           [ 6] 	jsr out_bcd
c3fe : c8               [ 2] 	iny							; Account for sign
c3ff : 60               [ 6] 	rts
c400 :                       print_a_to_d_skip_neg
c400 : 204bc3           [ 6] 	jsr hex_to_bcd				; Convert to BCD
c403 : 2089c3           [ 6] 	jsr bcd_to_str				; Convert BCD to string
c406 : 28               [ 4] 	plp							; Leading zeros preference
c407 : 4cb8c3           [ 3] 	jmp out_bcd					; Print +ve string
                             	
                             	include "io/io.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  IO.S
                             ;*  General IO module.  Allows different IO devic
                             ;*  utilised transparently by the rest of the cod
                             ;*  Other code should use "io_" commands so that 
                             ;*  do not need to know what specific device is p
                             ;*  input and output capabilities.
                             ;*	On startup, the kernel defaults to keyboard an
                             ;*  examines the BBC DIP switch to decide whether
                             ;*	but when saving and loading points to tape rou
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code
                             
c40a :                       mod_sz_io_s
AS65 Assembler for R6502 [1.42].                                     Page   59
-------------------------------- bank\bank0.s --------------------------------

                             
                             ;****************************************
                             ;* io_init
                             ;* Initialise the default device and make active
                             ;* No keys pressed = serial (default)
                             ;* F0 pressed = KB/VDP
                             ;* F1 pressed = Serial
                             ;* Keyboard and screen or serial port
                             ;* Output : None
                             ;* Regs affected : P, A
                             ;****************************************
c40a :                       io_init
c40a : a901             [ 2] 	lda #1				; Default = KB/VDP
c40c : 8d0006           [ 4] 	sta io_default
c40f : 4c15c4           [ 3] 	jmp io_active_device; Activate the device
                             
                             
                             ;****************************************
                             ;* io_set_default, io_active_device
                             ;* Activate device based on default or A
                             ;* Input : A = Device number
                             ;* Output : None
                             ;* Regs affected : P, A
                             ;****************************************
c412 :                       io_set_default			; Entry point for default
c412 : ad0006           [ 4] 	lda io_default
c415 :                       io_active_device		; Entry point for A set
c415 : aa               [ 2] 	tax					; X=buf size index
c416 : 0a               [ 2] 	asl	a				; x16 the Block number
c417 : 0a               [ 2] 	asl a
c418 : 0a               [ 2] 	asl a
c419 : 0a               [ 2] 	asl a
c41a : a8               [ 2] 	tay					; Y=index in to device table
c41b : bda1c4           [ 4] 	lda io_buf_sz,x
c41e : 853b             [ 3] 	sta buf_sz
c420 : a200             [ 2] 	ldx #0
                             	; Copy device settings to io block
c422 :                       io_copy_data
c422 : b9a3c4           [ 4] 	lda io_devices,y
c425 : 9d0106           [ 5] 	sta io_block,x
c428 : c8               [ 2] 	iny
c429 : e8               [ 2] 	inx
c42a : e010             [ 2] 	cpx #16
c42c : d0f4             [ 3] 	bne io_copy_data
                             	
c42e : a913             [ 2] 	lda #lo(scratch)	; Initialise IO buffer and size
c430 : 8539             [ 3] 	sta buf_lo
c432 : a906             [ 2] 	lda #hi(scratch)
c434 : 853a             [ 3] 	sta buf_hi
c436 : a90d             [ 2] 	lda #UTF_CR			; Line terminator is CR
c438 : 853c             [ 3] 	sta buf_ef
c43a : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* io_get_ch
                             ;* Get a char (wait forever or just check)
                             ;* Input : C = 1 for synchronous, 0 for async
                             ;* Output : A = Byte code, C = 0 means A is inval
                             ;* Regs affected : P, A
                             ;****************************************
c43b :                       io_get_ch
c43b : 6c0106           [ 6] 	jmp (io_block+io_get_byte)
AS65 Assembler for R6502 [1.42].                                     Page   60
-------------------------------- bank\bank0.s --------------------------------

                             	
                             
                             ;****************************************
                             ;* io_put_ch
                             ;* Put a char
                             ;* Input : A = char
                             ;* Regs affected : P, A
                             ;****************************************
c43e :                       io_put_ch
c43e : 6c0306           [ 6] 	jmp (io_block+io_put_byte)
                             	
                             ;****************************************
                             ;* io_open_read
                             ;* Open for reading
                             ;* Input : X,A = pointer to filename (zero termin
                             ;* Output : C=0 success
                             ;* Regs affected : All
                             ;****************************************
c441 :                       io_open_read
c441 : 6c0506           [ 6] 	jmp (io_block+io_open_r)
                             	
                             ;****************************************
                             ;* io_open_write
                             ;* Open for reading
                             ;* Input : X,A = pointer to filename (zero termin
                             ;* Output : C=0 success
                             ;* Regs affected : All
                             ;****************************************
c444 :                       io_open_write
c444 : 6c0706           [ 6] 	jmp (io_block+io_open_w)
                             
                             ;****************************************
                             ;* io_close
                             ;* Close a file
                             ;* Input : 
                             ;* Output : C=0 success
                             ;* Regs affected : All
                             ;****************************************
c447 :                       io_close
c447 : 6c0906           [ 6] 	jmp (io_block+io_close_f)
                             	
                             ;****************************************
                             ;* io_delete
                             ;* Delete a file
                             ;* Input : 
                             ;* Output : C=0 success
                             ;* Regs affected : All
                             ;****************************************
c44a :                       io_delete
c44a : 6c0b06           [ 6] 	jmp (io_block+io_del_f)
                             
                             ;****************************************
                             ;* io_open_ext1
                             ;* Extended function 1
                             ;* Input : 
                             ;* Output : C=0 success
                             ;* Regs affected : All
                             ;****************************************
c44d :                       io_open_ext1
c44d : 6c0d06           [ 6] 	jmp (io_block+io_ext1)
                             	
                             ;****************************************
AS65 Assembler for R6502 [1.42].                                     Page   61
-------------------------------- bank\bank0.s --------------------------------

                             ;* io_open_ext2
                             ;* Extended function 2
                             ;* Input : 
                             ;* Output : C=0 success
                             ;* Regs affected : All
                             ;****************************************
c450 :                       io_open_ext2
c450 : 6c0f06           [ 6] 	jmp (io_block+io_ext2)
                             	
                             ;****************************************
                             ;* io_read_line
                             ;* Read a line, terminated by terminating char or
                             ;* Input : buf_(lo/hi/sz/ef) : Address, Max size,
                             ;* Output : Y = Line length C = Buffer limit reac
                             ;* Regs affected : None
                             ;****************************************
c453 :                       io_read_line
c453 : 48               [ 3] 	pha
                             
c454 : 08               [ 3] 	php					; Save echo state
                             	
c455 : a000             [ 2] 	ldy #0x00			; Starting at first byte
c457 :                       io_get_line_byte
c457 : 38               [ 2] 	sec					; Getting bytes synchronously
c458 : 203bc4           [ 6] 	jsr io_get_ch		; Get a byte
c45b : b027             [ 3] 	bcs io_get_line_done; Got nothing then finish
c45d : 28               [ 4] 	plp					; Get echo state
c45e : 08               [ 3] 	php					; Instantly save it back
c45f : 900c             [ 3] 	bcc io_skip_echo	; Carry not set = don't echo
c461 : c97f             [ 2] 	cmp #UTF_DEL		; Delete?
c463 : d005             [ 3] 	bne io_do_echo
c465 : c000             [ 2] 	cpy #0				; Already at beginning?
c467 : f004             [ 3] 	beq io_skip_echo	; Don't echo delete
c469 : 88               [ 2] 	dey					; Else decrement length
c46a :                       io_do_echo
c46a : 203ec4           [ 6] 	jsr io_put_ch		; Echo it
c46d :                       io_skip_echo
c46d : c920             [ 2] 	cmp #UTF_SPECIAL	; Special character?
c46f : 9007             [ 3] 	bcc io_skip_special	; Skip if so (don't add to b
c471 : c97f             [ 2] 	cmp #UTF_DEL		; Don't proces DEL either
c473 : f003             [ 3] 	beq io_skip_special
c475 : 9139             [ 5] 	sta (buf_lo),y		; Save it
c477 : c8               [ 2] 	iny					; Increase length
c478 :                       io_skip_special
c478 : c53c             [ 3] 	cmp buf_ef			; Is it the terminating char?
c47a : f008             [ 3] 	beq io_get_line_done	; If yes then done
c47c : c43b             [ 3] 	cpy buf_sz			; Reached the buffer max size?
c47e : d0d7             [ 3] 	bne io_get_line_byte	; No, get another byte
c480 : 28               [ 4] 	plp					; Remember to pull echo state off stack
c481 : 38               [ 2] 	sec					; Yes, set carry flag
c482 : 68               [ 4] 	pla
c483 : 60               [ 6] 	rts					; And done
c484 :                       io_get_line_done
c484 : a900             [ 2] 	lda #0
c486 : 9139             [ 5] 	sta (buf_lo),y		; Terminate with 0
c488 : 28               [ 4] 	plp					; Remember to pull echo state off stack
c489 : 18               [ 2] 	clc					; Clear carry flag
c48a : 68               [ 4] 	pla
c48b : 60               [ 6] 	rts					; Fin
                             
                             ;****************************************
                             ;* io_print_line
AS65 Assembler for R6502 [1.42].                                     Page   62
-------------------------------- bank\bank0.s --------------------------------

                             ;* Print a line (when data is not already in seri
                             ;* Input : X = Address Lo, A = Address Hi
                             ;* Output : Y=number chars output
                             ;* Regs affected : All
                             ;****************************************
c48c :                       io_print_line
c48c : 48               [ 3] 	pha
                             
c48d : 8636             [ 3] 	stx tmp_clo					; Store the string pointer
c48f : 8537             [ 3] 	sta tmp_chi					; lo and hi
c491 : a000             [ 2] 	ldy #0						; Start at the beginning!
c493 :                       io_print_line_byte
c493 : b136             [ 5] 	lda (tmp_clo),y				; Copy byte to
c495 : f006             [ 3] 	beq io_print_done			; If zero then done - print
c497 : 203ec4           [ 6] 	jsr io_put_ch				; Transmit
c49a : c8               [ 2] 	iny
c49b : d0f6             [ 3] 	bne io_print_line_byte		; Carry on until zero fo
c49d :                       io_print_done
c49d : 68               [ 4] 	pla
c49e : 60               [ 6] 	rts
                             
                             
                             ;*** Null operation just clc and return ***
c49f :                       io_null_op
c49f : 18               [ 2] 	clc
c4a0 : 60               [ 6] 	rts
                             	
                             ;* IO buffer sizes
c4a1 :                       io_buf_sz
c4a1 : ff                    	db 255					; Device 0 = Tape
c4a2 : 7f                    	db 127					; Device 1 = keyboard/screen
                             
                             ;* IO devices defined here
c4a3 :                       io_devices
                             ;* Device zero is the tape system
                             ;* only offers get and put
                             ;* This is a block based device
c4a3 :                       io_device0					; Tape device, input = Tape, outpu
c4a3 : e7c6                  	dw	tp_get_byte			; io_get_ch
c4a5 : 0ec6                  	dw	tp_put_byte			; io_put_ch
c4a7 : 77c5                  	dw	tp_open_read		; io_open_r
c4a9 : c8c5                  	dw	tp_open_write		; io_open_w
c4ab : aac5                  	dw	tp_close			; io_close_f
c4ad : 9fc4                  	dw	io_null_op			; io_del_f
c4af : 77c5                  	dw	tp_open_bread		; io_ext1 - open for binary re
c4b1 : c2c5                  	dw	tp_open_bwrite		; io_ext2 - open for binary w
                             ;* Device one is keyboard / screen
                             ;* only offers get and put
                             ;* This is a char based device
c4b3 :                       io_device1					; Default device, input = screen e
c4b3 : acce                  	dw	gr_get_key			; io_get_ch
c4b5 : e2ce                  	dw	gr_put_byte			; io_put_ch
c4b7 : 9fc4                  	dw	io_null_op			; io_open_r
c4b9 : 9fc4                  	dw	io_null_op			; io_open_w
c4bb : 9fc4                  	dw	io_null_op			; io_close_f
c4bd : 9fc4                  	dw	io_null_op			; io_del_f
c4bf : 9fc4                  	dw	io_null_op			; io_ext1
c4c1 : 9fc4                  	dw	io_null_op			; io_ext2
                             ;* Serial device using printer port ACK (input) a
                             ;* This is a char based device
                             ;io_device2					; Serial device, input = Ser, out
                             ;	dw	ser_get_byte		; io_get_ch
AS65 Assembler for R6502 [1.42].                                     Page   63
-------------------------------- bank\bank0.s --------------------------------

                             ;	dw	ser_put_byte		; io_put_ch
                             ;	dw	ser_open			; io_open_r
                             ;	dw	ser_open			; io_open_w
                             ;	dw	ser_close			; io_close_f
                             ;	dw	io_null_op			; io_del_f
                             ;	dw	io_null_op			; io_ext1
                             ;	dw	io_null_op			; io_ext2
                             
c4c3 :                       mod_sz_io_e
                             
                             
                             
                             ;* Reset vector points here - 6502 starts here
c4c3 :                       init
                             ;	jmp init_test
                             	; First clear ram
c4c3 : 78               [ 2] 	sei					; Need this for MOS 6502
c4c4 : d8               [ 2] 	cld					; Need this for MOS 6502
c4c5 : 4cefc4           [ 3] 	jmp init_ram		; jmp not jsr to ram initialiser
c4c8 :                       init_2					; init_ram will jump back to here
c4c8 : a2ff             [ 2] 	ldx #0xff			; Initialise stack pointer
c4ca : 9a               [ 2] 	txs
                             
c4cb : 20d1c4           [ 6] 	jsr kernel_init
                             
c4ce : 4c4bc0           [ 3] 	jmp main
                             
c4d1 :                       kernel_init
c4d1 : 20b2c0           [ 6] 	jsr init_irq		; Initialise IRQ handling
                             
c4d4 : 2010c5           [ 6] 	jsr init_via0		; initialise cia 0 - tape inactiv
c4d7 : 205fc5           [ 6] 	jsr tp_init			; Initialise tape handling
                             
c4da :                       kernel_test
c4da : 20e5d3           [ 6] 	jsr init_snd		; initialise the sound chip
                             
c4dd : 2046cc           [ 6] 	jsr gr_init			; Initialise graphics, default is 
                             
c4e0 : 2052c7           [ 6] 	jsr init_keyboard	; initialise keyboard timer se
c4e3 : 200ac4           [ 6] 	jsr io_init			; Set default input/output device
                             
c4e6 : a900             [ 2] 	lda #0
c4e8 : 8508             [ 3] 	sta vdp_cnt
                             
c4ea : 2065f7           [ 6] 	jsr df_init			; Initialise interpreter
                             
c4ed : 58               [ 2] 	cli					; irq interrupts enable
                             
c4ee : 60               [ 6] 	rts
                             
                             
                             ;* Initialises RAM, skipping page 3 which is for 
                             ;* Zeroes all addressable RAM in the default bank
c4ef :                       init_ram
c4ef : a002             [ 2] 	ldy #0x02			; But Y initially at 2 to not overwr
c4f1 : a200             [ 2] 	ldx #0x00			; Page counter starts at zero
c4f3 : 8600             [ 3] 	stx 0x00			; Start at page 0
c4f5 : 8601             [ 3] 	stx 0x01
c4f7 :                       init_ram_1
c4f7 : e003             [ 2] 	cpx	#3				; Ignore page 3 (IO page)
c4f9 : f004             [ 3] 	beq init_ram_skip
c4fb :                       init_ram_fill
AS65 Assembler for R6502 [1.42].                                     Page   64
-------------------------------- bank\bank0.s --------------------------------

c4fb : a900             [ 2] 	lda #0				; Normal RAM filled with zero
c4fd : 9100             [ 5] 	sta (0x00),y		; Write byte to RAM (zero or copy 
c4ff :                       init_ram_skip
c4ff : c8               [ 2] 	iny
c500 : d0f5             [ 4] 	bne init_ram_1		; Do a whole page
c502 : e601             [ 5] 	inc 0x01			; Increase page pointer
c504 : e8               [ 2] 	inx					; Reduce page count
c505 : e0c0             [ 2] 	cpx #0xc0			; Do all pages until page until we g
c507 : d0ee             [ 4] 	bne init_ram_1
                             
c509 : 4cc8c4           [ 3] 	jmp init_2			; Carry on initialisation
                             
                             ; 6502 Non-maskable interrupt come here
c50c :                       nmi
c50c : 40               [ 6] 	rti
                             
c50d :                       mod_sz_kernel_e
                             
                             
                             
                             ; Bank specific code goes here
                             	include "cia/cia.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  CIA.S
                             ;*  Code to initialise and utilise the 6522, whic
                             ;*	for various functions on the Oric including;
                             ;*		Port A:
                             ;*			[7..0] 	Printer data bits
                             ;*			[7..0] 	Interface to AY-3-8912
                             ;*		Port B:
                             ;*			[2..0] 	Keyboard matrix row selector
                             ;*			[7]	   	Tape output
                             ;*			[6]    	Tape player motor signal
                             ;*			[4]		Printer strobe
                             ;*		CA1:		Printer ACK
                             ;*		CB1: 		Tape input
                             ;*		CA2,CB2: 	Selecting the AY-3-8912
                             ;*
                             ;*  This file is called cia.s because code was or
                             ;*  for a MOS 6526 from a CMB64, but didn't get a
                             ;*	renaming this file ;-)
                             ;*
                             ;************************************************
                             
                             
                             	; ROM code
                             	code
                             
c50d :                       mod_sz_cia_s
                             	
                             
                             ;****************************************
                             ;* init_via0
                             ;* Initialise cia 0
                             ;* Input : None
AS65 Assembler for R6502 [1.42].                                     Page   65
-------------------------------- bank\bank0.s --------------------------------

                             ;* Output : None
                             ;* Regs affected : A
                             ;****************************************
c50d :                       init_via0_tape					; initialisation bytes for tap
c50d : a017             [ 2] 	ldy #init_tape_tab-init_via0_tab
c50f : 2c                    	db 0x2c						; Ignore next two bytes
c510 :                       init_via0
c510 : a000             [ 2] 	ldy #0						; Standard initialisation of VIA
c512 :                       init_via0_loop
c512 : b923c5           [ 4] 	lda init_via0_tab,y
c515 : 300b             [ 3] 	bmi init_via0_done
c517 : aa               [ 2] 	tax
c518 : c8               [ 2] 	iny
c519 : b923c5           [ 4] 	lda init_via0_tab,y
c51c : 9d0003           [ 5] 	sta IO_0,x
c51f : c8               [ 2] 	iny
c520 : d0f0             [ 3] 	bne init_via0_loop
                             	
c522 :                       init_via0_done	
c522 : 60               [ 6] 	rts							; return from sub
                             	
c523 :                       init_via0_tab
c523 : 0e7f                  	db IER, 	0x7f
c525 : 03ff                  	db DDRA,	0xff
c527 : 02f7                  	db DDRB,	0xf7			; Tape motor + KB select
c529 : 00b7                  	db PRB,		0xb7			; Port B default = cassette moto
c52b : 0cdd                  	db PCR,		0xdd			; Ensure AY is not selected (CB1
c52d : 0420                  	db T1CL,	lo(TIMER1_RATE)	; 50Hz
c52f : 0620                  	db T1LL,	lo(TIMER1_RATE)	; 50Hz
c531 : 054e                  	db T1CH,	hi(TIMER1_RATE)	; 50Hz
c533 : 074e                  	db T1LH,	hi(TIMER1_RATE)	; 50Hz
c535 : 0b40                  	db ACR,		0x40			; Timer 1 continuous
c537 : 0ec0                  	db IER,		0xc0			; Timer 1 interrupt enabled
c539 : ff                    	db -1
c53a :                       init_tape_tab
c53a : 0e7f                  	db IER,		0x7f			; Disable all interrupts
c53c : 08f4                  	db T2CL,	0xf4			; Timer 2 used for measuring CB1
c53e : 0c10                  	db PCR,		0x10			; Interrupt on CB1 positive edge
                             ;	db DDRB,	0xff			; Set port B output
c540 : 0bc0                  	db ACR,		0xc0			; T1 continuous and toggle PB7
c542 : 04a0                  	db T1CL,	lo(TAPE_RATE*2)	; Tape rate /2 = 0
c544 : 0501                  	db T1CH,	hi(TAPE_RATE*2)	; Tape rate /2 = 0
c546 : 0040                  	db PRB,		0x40			; Tape motor ON
c548 : ff                    	db -1
                             ;init_ser_tab
                             ;	db IER,		0x7f			; Disable all interrupts
                             ;	db T2CL,	0xf4			; Timer 2 used for measuring bi
                             ;	db PCR,		0xdd			; Ensure AY is not selected (CB
                             ;	db DDRB,	0xff			; Set port B output
                             ;	db -1
                             	
c549 :                       mod_sz_cia_e
                             
                             	include "tape/tape.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
AS65 Assembler for R6502 [1.42].                                     Page   66
-------------------------------- bank\bank0.s --------------------------------

                             ;*  TAPE.S
                             ;*	These routines allow for tape input/output
                             ;*	The tape format is not compatible with a regul
                             ;*	but is a block format as follows;
                             ;*	Some zero bits (64) start a block.
                             ;*	Then two bytes of data representing the block 
                             ;*	Then 256 bytes of block data.
                             ;*	Each byte above consists of two '1' start bits
                             ;*	one '0' stop bit.
                             ;*	After each block, 1 second of 4800Hz (seen as 
                             ;*	is transmitted to allow the CPU to deal with t
                             ;*	when subsequently loading.
                             ;*	A bit is 4800Hz half cycle then 4800Hz half cy
                             ;*	'1' or 2400Hz half cycle for a '0', except for
                             ;*	block which is one second of 2400Hz.
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code
                             
c549 :                       tp_open_msg
c549 : 4c6f6164696e67..      	db	"Loading:",0
c552 :                       tp_save_msg
c552 : 536176696e673a00      	db	"Saving:",0
c55a :                       tp_back4
c55a : 0808080800            	db	8,8,8,8,0
                             	
                             ;* tp_init
                             ;* Basic initialisation for tape handling
c55f :                       tp_init
c55f : a900             [ 2] 	lda #0
c561 : 8558             [ 3] 	sta tp_flag
c563 : 8557             [ 3] 	sta tp_idx
c565 : 18               [ 2] 	clc
c566 : 60               [ 6] 	rts
                             
                             ;* Common function to open tape
c567 :                       tp_open_common				; Used by open write too
c567 : 78               [ 2] 	sei						; Interrupts disabled from here..
c568 : 200dc5           [ 6] 	jsr init_via0_tape		; Get ready to output (tape 
                             
                             
c56b : a200             [ 2] 	ldx #0
c56d : 8657             [ 3] 	stx tp_idx				; Initialise block
c56f : 8655             [ 3] 	stx tp_block
c571 : 8656             [ 3] 	stx tp_block+1
c573 : e8               [ 2] 	inx
c574 : 8658             [ 3] 	stx tp_flag				; assume 1 = Read mode
c576 : 60               [ 6] 	rts
                             
                             ;* tp_open_read
                             ;* Open tape settings
                             
c577 :                       fd_cload_getname_pc			; ** FOR ORICUTRON EMULATOR
                             
c577 :                       tp_open_bread
c577 :                       tp_open_read
c577 : a049             [ 2] 	ldy #lo(tp_open_msg)
c579 : a9c5             [ 2] 	lda #hi(tp_open_msg)
c57b : 2036cf           [ 6] 	jsr gr_print_msg
                             	
AS65 Assembler for R6502 [1.42].                                     Page   67
-------------------------------- bank\bank0.s --------------------------------

c57e : 2067c5           [ 6] 	jsr tp_open_common
                             
c581 :                       tp_get_fname_start
c581 : 2023c7           [ 6] 	jsr tp_read_byte
c584 : c924             [ 2] 	cmp #'$'				; Find the $ symbol
c586 : d0f9             [ 3] 	bne tp_get_fname_start
                             	
c588 : a209             [ 2] 	ldx #9					; 9 byte header - skip
c58a :                       tp_get_header
c58a : 2023c7           [ 6] 	jsr tp_read_byte
c58d : ca               [ 2] 	dex
c58e : d0fa             [ 3] 	bne tp_get_header
                             	
                             	; X= zero here, now get null terminated filename
c590 :                       tp_get_fname
c590 : 2023c7           [ 6] 	jsr tp_read_byte
c593 : 9d0004           [ 5] 	sta df_linbuff,x
c596 : e8               [ 2] 	inx
c597 : c900             [ 2] 	cmp #0
c599 : d0f5             [ 3] 	bne tp_get_fname
                             
c59b : a000             [ 2] 	ldy #lo(df_linbuff)
c59d : a904             [ 2] 	lda #hi(df_linbuff)
c59f : 2036cf           [ 6] 	jsr gr_print_msg
c5a2 : a920             [ 2] 	lda #' '
c5a4 : 20e2ce           [ 6] 	jsr gr_put_byte
                             
c5a7 : 18               [ 2] 	clc
c5a8 : 60               [ 6] 	rts
                             
c5a9 :                       tt_getsync_pc				; ** FOR ORICUTRON EMULATOR **
c5a9 :                       tt_getsync_end_pc			; ** FOR ORICUTRON EMULATOR *
                             
c5a9 : ea               [ 2] 	nop
                             	
                             
                             ;* tp_close
                             ;* Close tape settings
c5aa :                       tp_close
c5aa : a558             [ 3] 	lda tp_flag
c5ac : c902             [ 2] 	cmp #2					; Write mode?
c5ae : d003             [ 3] 	bne tp_close_no_flush	; If not no need to flush
c5b0 : 2040c6           [ 6] 	jsr tp_put_block		; Flush the current block
c5b3 :                       tp_close_no_flush
c5b3 : a90d             [ 2] 	lda #0x0d				; Line feed
c5b5 : 20e2ce           [ 6] 	jsr gr_put_byte
                             	
c5b8 : 2010c5           [ 6] 	jsr init_via0			; Back to normal
c5bb : 58               [ 2] 	cli
c5bc : a900             [ 2] 	lda #0					; Zero tape flag
c5be : 8558             [ 3] 	sta tp_flag
                             
c5c0 :                       tt_csave_end_pc				; ** FOR ORICUTRON EMULATOR **
                             
c5c0 : 18               [ 2] 	clc
c5c1 : 60               [ 6] 	rts
                             
                             ;* tp_open_write
                             ;* Open tape settings
c5c2 :                       tp_open_bwrite
c5c2 : a001             [ 2] 	ldy #hi(0x101)
c5c4 : a201             [ 2] 	ldx #lo(0x101)
AS65 Assembler for R6502 [1.42].                                     Page   68
-------------------------------- bank\bank0.s --------------------------------

c5c6 : d004             [ 3] 	bne tp_open_write_start
c5c8 :                       tp_open_write
c5c8 : a018             [ 2] 	ldy #hi(6000+0x101)
c5ca : a271             [ 2] 	ldx #lo(6000+0x101)
                             
c5cc :                       fd_csave_getname_pc			; ** FOR ORICUTRON EMULATOR
                             
c5cc :                       tp_open_write_start
c5cc : 845a             [ 3] 	sty tp_delay+1
c5ce : 8659             [ 3] 	stx tp_delay
c5d0 : a052             [ 2] 	ldy #lo(tp_save_msg)
c5d2 : a9c5             [ 2] 	lda #hi(tp_save_msg)
c5d4 : 2036cf           [ 6] 	jsr gr_print_msg
c5d7 : a000             [ 2] 	ldy #lo(df_linbuff)
c5d9 : a904             [ 2] 	lda #hi(df_linbuff)
c5db : 2036cf           [ 6] 	jsr gr_print_msg
c5de : a920             [ 2] 	lda #' '
c5e0 : 20e2ce           [ 6] 	jsr gr_put_byte
                             	
c5e3 : 2067c5           [ 6] 	jsr tp_open_common		; Same as reading but
c5e6 : e658             [ 5] 	inc tp_flag				; Make flag = 2 for write mode
                             
c5e8 :                       tt_writeleader_pc			; ** FOR ORICUTRON EMULATOR *
c5e8 :                       tt_writeleader_end_pc		; ** FOR ORICUTRON EMULATO
c5e8 : a280             [ 2] 	ldx #128				; 128 low bits
c5ea : 2038c6           [ 6] 	jsr tp_put_delay
                             
c5ed : a924             [ 2] 	lda #'$'				; Start of header symbol
c5ef : 38               [ 2] 	sec
c5f0 : 208fc6           [ 6] 	jsr tp_write_byte
                             	
c5f3 : a209             [ 2] 	ldx #9					; Header, for future expansion
c5f5 : a9ff             [ 2] 	lda #0xff
c5f7 :                       tp_write_header	
c5f7 : 38               [ 2] 	sec
c5f8 : 208fc6           [ 6] 	jsr tp_write_byte
c5fb : ca               [ 2] 	dex
c5fc : d0f9             [ 3] 	bne tp_write_header
                             	
c5fe : a200             [ 2] 	ldx #0
c600 :                       tp_write_fname
c600 : bd0004           [ 4] 	lda df_linbuff,x		; Put the filename
c603 : 38               [ 2] 	sec
c604 : 208fc6           [ 6] 	jsr tp_write_byte
c607 : e8               [ 2] 	inx
c608 : c900             [ 2] 	cmp #0
c60a : d0f4             [ 3] 	bne tp_write_fname
                             	
c60c : 18               [ 2] 	clc
c60d : 60               [ 6] 	rts
                             
                             
                             ;* tp_put_byte
                             ;* Put to byte to tape - if got a block then save
                             
c60e :                       tp_put_byte
c60e : 48               [ 3] 	pha
c60f : 8538             [ 3] 	sta tmp_d
c611 : 8a               [ 2] 	txa
c612 : 48               [ 3] 	pha
c613 : 98               [ 2] 	tya
c614 : 48               [ 3] 	pha
AS65 Assembler for R6502 [1.42].                                     Page   69
-------------------------------- bank\bank0.s --------------------------------

c615 : a538             [ 3] 	lda tmp_d
                             	
c617 : a457             [ 3] 	ldy tp_idx				; Save byte to buffer
c619 : 990002           [ 5] 	sta tp_buf,y
c61c : c8               [ 2] 	iny
c61d : 8457             [ 3] 	sty tp_idx
c61f : d010             [ 3] 	bne tp_put_byte_done
c621 : 2040c6           [ 6] 	jsr tp_put_block		; Flush block to tape
c624 : 18               [ 2] 	clc						; Increment block #
c625 : a555             [ 3] 	lda tp_block
c627 : 6901             [ 2] 	adc #1
c629 : 8555             [ 3] 	sta tp_block
c62b : a556             [ 3] 	lda tp_block+1
c62d : 6900             [ 2] 	adc #0
c62f : 8556             [ 3] 	sta tp_block+1
c631 :                       tp_put_byte_done
c631 : 68               [ 4] 	pla
c632 : a8               [ 2] 	tay
c633 : 68               [ 4] 	pla
c634 : aa               [ 2] 	tax
c635 : 68               [ 4] 	pla
c636 : 18               [ 2] 	clc
c637 : 60               [ 6] 	rts
                             
                             ; tp_put_delay
                             ;* X = number of zero bits to insert
c638 :                       tp_put_delay
c638 : 18               [ 2] 	clc
c639 : 20b2c6           [ 6] 	jsr tp_write_bit
c63c : ca               [ 2] 	dex
c63d : d0f9             [ 3] 	bne tp_put_delay
c63f : 60               [ 6] 	rts
                             
                             ;* tp_put_block
                             ;* flush a block to tape
c640 :                       tp_put_block
c640 : 2064c6           [ 6] 	jsr tp_print_block
                             		
c643 : a280             [ 2] 	ldx #128				; 128 low bits
c645 : 2038c6           [ 6] 	jsr tp_put_delay
                             
c648 : a555             [ 3] 	lda tp_block			; Save block number low then high
c64a : 18               [ 2] 	clc
c64b : 208fc6           [ 6] 	jsr tp_write_byte
c64e : a556             [ 3] 	lda tp_block+1
c650 : 38               [ 2] 	sec
c651 : 208fc6           [ 6] 	jsr tp_write_byte
                             
c654 : a200             [ 2] 	ldx #0
c656 :                       tp_put_block_bytes
c656 : bd0002           [ 4] 	lda tp_buf,x			; Then write out all bytes in blo
c659 : 18               [ 2] 	clc
c65a : 208fc6           [ 6] 	jsr tp_write_byte
c65d : e8               [ 2] 	inx
c65e : d0f6             [ 3] 	bne tp_put_block_bytes	; Always 256 bytes
                             	
c660 : 2084c6           [ 6] 	jsr tp_block_gap		; Wait a while, still outputti
                             
c663 : 60               [ 6] 	rts
                             
                             ; tp_print_block
c664 :                       tp_print_block
AS65 Assembler for R6502 [1.42].                                     Page   70
-------------------------------- bank\bank0.s --------------------------------

c664 : a556             [ 3] 	lda tp_block+1			; Print block number hi byte
c666 : 207dc1           [ 6] 	jsr str_a_to_x
c669 : 20e2ce           [ 6] 	jsr gr_put_byte
c66c : 8a               [ 2] 	txa
c66d : 20e2ce           [ 6] 	jsr gr_put_byte
c670 : a555             [ 3] 	lda tp_block			; Print block number lo byte
c672 : 207dc1           [ 6] 	jsr str_a_to_x
c675 : 20e2ce           [ 6] 	jsr gr_put_byte
c678 : 8a               [ 2] 	txa
c679 : 20e2ce           [ 6] 	jsr gr_put_byte
c67c : a9c5             [ 2] 	lda #hi(tp_back4)		; Go back 4 characters to pri
c67e : a05a             [ 2] 	ldy #lo(tp_back4)
c680 : 2036cf           [ 6] 	jsr gr_print_msg
c683 : 60               [ 6] 	rts
                             
                             ; tp_block_gap
                             ; Send 2400 bits of zero ~ 1.5 seconds
                             ; add 0x101 due to how counters decrement
                             ; For binary mode it is just 1 bit gap
c684 :                       tp_block_gap
c684 : a45a             [ 3] 	ldy tp_delay+1
c686 : a659             [ 3] 	ldx tp_delay
c688 :                       tp_block_gap_1
c688 : 2038c6           [ 6] 	jsr tp_put_delay
c68b : 88               [ 2] 	dey
c68c : d0fa             [ 3] 	bne tp_block_gap_1
c68e : 60               [ 6] 	rts	
                             
                             ;* tp_write_byte
                             ;* Write a byte to tape which looks like this
                             ;* 11xxxxxxxx0
c68f :                       tt_putbyte_pc				; ** FOR ORICUTRON EMULATOR **
c68f :                       tp_write_byte
c68f : 48               [ 3] 	pha
c690 : 08               [ 3] 	php
c691 : 38               [ 2] 	sec					; 1 for start bit
c692 : 20b2c6           [ 6] 	jsr tp_write_bit
c695 : 38               [ 2] 	sec					; 1 for start bit
c696 : 20b2c6           [ 6] 	jsr tp_write_bit
c699 : a008             [ 2] 	ldy #8				; 8 bits of data
c69b :                       tp_write_byte_bit
c69b : 6a               [ 2] 	ror a
c69c : 20b2c6           [ 6] 	jsr tp_write_bit
c69f : 88               [ 2] 	dey
c6a0 : d0f9             [ 3] 	bne tp_write_byte_bit
c6a2 : 18               [ 2] 	clc					; 0 for stop bit
c6a3 : 20b2c6           [ 6] 	jsr tp_write_bit
c6a6 : 28               [ 4] 	plp
c6a7 : 9007             [ 3] 	bcc tp_write_byte_nodelay
c6a9 : 8a               [ 2] 	txa
c6aa : a220             [ 2] 	ldx #32					; Delays needed
c6ac : 2038c6           [ 6] 	jsr tp_put_delay
c6af : aa               [ 2] 	tax
c6b0 :                       tp_write_byte_nodelay
c6b0 : 68               [ 4] 	pla
c6b1 :                       tt_putbyte_end_pc			; ** FOR ORICUTRON EMULATOR *
c6b1 : 60               [ 6] 	rts
                             	
                             
                             ;* tp_write_bit
                             ;* Write a bit in C to tape which looks like this
                             ;* Half cycle of 4800Hz, then
AS65 Assembler for R6502 [1.42].                                     Page   71
-------------------------------- bank\bank0.s --------------------------------

                             ;*		half cycle of 4800Hz for a 1
                             ;*		half cycle of 2400Hz for a 0
c6b2 :                       tp_write_bit
c6b2 : 48               [ 3] 	pha
c6b3 : 8a               [ 2] 	txa
c6b4 : 48               [ 3] 	pha
c6b5 : 08               [ 3] 	php						; Save the bit to be stored
                             
c6b6 : a9d0             [ 2] 	lda #TAPE_RATE			; Half cycle first of 4800Hz
c6b8 : a200             [ 2] 	ldx #0
c6ba : 8d0603           [ 4] 	sta IO_0+T1LL
c6bd : 8e0703           [ 4] 	stx IO_0+T1LH			; This starts the timer
c6c0 : ad0403           [ 4] 	lda IO_0+T1CL			; Clear any interrupt flag
c6c3 :                       tp_write_bit_chk1
c6c3 : 2c0d03           [ 4] 	bit IO_0+IFR			; Check IRF for bit 6
c6c6 : 50fb             [ 3] 	bvc tp_write_bit_chk1	; V=0? Keep checking
c6c8 : ad0403           [ 4] 	lda IO_0+T1CL			; Clear interrupt flag
                             	
c6cb : 28               [ 4] 	plp						; Get the bit to be stored
c6cc : a9d0             [ 2] 	lda #TAPE_RATE			; Assume putting out a 1 in 2nd
c6ce : b002             [ 3] 	bcs tp_write_bit_t1		; A zero is half the rate (
c6d0 : 0a               [ 2] 	asl	a					; TAPE_RATE * 2 need to inc X
c6d1 : e8               [ 2] 	inx
c6d2 :                       tp_write_bit_t1
c6d2 : 8d0603           [ 4] 	sta IO_0+T1LL
c6d5 : 8e0703           [ 4] 	stx IO_0+T1LH			; This starts the timer
c6d8 : ad0403           [ 4] 	lda IO_0+T1CL			; Clear any interrupt flag
c6db :                       tp_write_bit_chk2
c6db : 2c0d03           [ 4] 	bit IO_0+IFR			; Check IRF for bit 6
c6de : 50fb             [ 3] 	bvc tp_write_bit_chk2	; V=0? Keep checking
c6e0 : ad0403           [ 4] 	lda IO_0+T1CL			; Clear interrupt flag
c6e3 : 68               [ 4] 	pla
c6e4 : aa               [ 2] 	tax
c6e5 : 68               [ 4] 	pla
c6e6 : 60               [ 6] 	rts
                             
                             
                             
                             ;* tp_get_byte
                             ;* Get a byte from buffer - load blocks as needed
c6e7 :                       tp_get_byte
c6e7 : 8a               [ 2] 	txa
c6e8 : 48               [ 3] 	pha
c6e9 : 98               [ 2] 	tya
c6ea : 48               [ 3] 	pha
                             	
c6eb : a457             [ 3] 	ldy tp_idx				; Index in to buffer
c6ed : d005             [ 3] 	bne tp_get_byte_buf		; No need to load from tape
c6ef : 2004c7           [ 6] 	jsr tp_get_block		; Else load a block from tape
c6f2 : a000             [ 2] 	ldy #0					; 0 index is now valid
c6f4 :                       tp_get_byte_buf
c6f4 : b90002           [ 4] 	lda tp_buf,y			; Get from memory buffer
c6f7 : c8               [ 2] 	iny
c6f8 : 8457             [ 3] 	sty tp_idx				; Never zero on leaving
c6fa : 8538             [ 3] 	sta tmp_d
c6fc : 68               [ 4] 	pla
c6fd : a8               [ 2] 	tay
c6fe : 68               [ 4] 	pla
c6ff : aa               [ 2] 	tax
c700 : a538             [ 3] 	lda tmp_d
c702 : 18               [ 2] 	clc
c703 : 60               [ 6] 	rts						; Except when buffer done
AS65 Assembler for R6502 [1.42].                                     Page   72
-------------------------------- bank\bank0.s --------------------------------

                             
                             ;* tp_get_block
                             ;* Load a block in to memory
c704 :                       tp_get_block
                             
c704 : 2023c7           [ 6] 	jsr tp_read_byte		; Get block number
c707 : 8555             [ 3] 	sta tp_block
c709 : 2023c7           [ 6] 	jsr tp_read_byte
c70c : 8556             [ 3] 	sta tp_block+1
                             	
c70e : 2064c6           [ 6] 	jsr tp_print_block
                             	
c711 : a000             [ 2] 	ldy #0
c713 : 8457             [ 3] 	sty tp_idx
c715 :                       tp_get_block_bytes
c715 : 2023c7           [ 6] 	jsr tp_read_byte		; Fill buffer
c718 : a457             [ 3] 	ldy tp_idx
c71a : 990002           [ 5] 	sta tp_buf,y
c71d : c8               [ 2] 	iny
c71e : 8457             [ 3] 	sty tp_idx
c720 : d0f3             [ 3] 	bne tp_get_block_bytes	; Always 256 bytes
                             
c722 : 60               [ 6] 	rts
                             	
                             
                             ;* tp_read_byte
                             ;* Read a byte from tape, always expects one '1' 
c723 :                       tt_readbyte_pc				; ** FOR ORICUTRON EMULATOR **
c723 :                       tp_read_byte
c723 :                       tp_read_byte_st
c723 : 2037c7           [ 6] 	jsr tp_read_bit			; Expecting a 1
c726 : 90fb             [ 3] 	bcc tp_read_byte_st
c728 : 2037c7           [ 6] 	jsr tp_read_bit			; Should be another 1
c72b : 90f6             [ 3] 	bcc tp_read_byte_st
                             	; Ok got 2 start
                             	
c72d : a008             [ 2] 	ldy #8				; Get 8 bits
c72f :                       tp_read_byte_bits
c72f : 2037c7           [ 6] 	jsr tp_read_bit
c732 : 6a               [ 2] 	ror a
c733 : 88               [ 2] 	dey
c734 : d0f9             [ 3] 	bne tp_read_byte_bits
                             	; Byte is in A, stop bit is not waited for..
c736 :                       tt_readbyte_end_pc			; ** FOR ORICUTRON EMULATOR 
c736 : 60               [ 6] 	rts
                             
                             ;* tp_read_bit
                             ;* Get a CB1 transition and measure the time
                             ;* The measurement indicates a 1 or 0 received
c737 :                       tp_read_bit
c737 : 48               [ 3] 	pha
c738 : ad0003           [ 4] 	lda IO_0+PRB			; Clear CB1 interrupt flag by rea
c73b :                       tp_read_bit_cb1
c73b :                       tt_getsync_loop_pc			; ** FOR ORICUTRON EMULATOR 
c73b : ad0d03           [ 4] 	lda IO_0+IFR
c73e : 2910             [ 2] 	and #IFR_CB1
c740 : f0f9             [ 3] 	beq tp_read_bit_cb1		; Keep checking until CB1 a
                             
c742 : ad0903           [ 4] 	lda IO_0+T2CH			; Get the high byte of T2 counte
c745 : 48               [ 3] 	pha
c746 : a9ff             [ 2] 	lda #0xff				; Reset T2 counter high byte
c748 : 8d0903           [ 4] 	sta IO_0+T2CH			; Reset high byte of T2 counter
AS65 Assembler for R6502 [1.42].                                     Page   73
-------------------------------- bank\bank0.s --------------------------------

c74b : 68               [ 4] 	pla						; What was previous counter?
                             ;	beq tp_io_error			; If down to zero, then some 
c74c : c9fe             [ 2] 	cmp #0xfe				; C=1 if T2 >= 0xfe else C=0
c74e : 68               [ 4] 	pla
c74f : 60               [ 6] 	rts						; Carry contains the bit received
c750 :                       tp_io_error
                             	SWBRK DFERR_BREAK		; DEFINE A NEW ERROR!
                             
                             
                             
                             
                             	include "keyboard/keyboard.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  KEYBOARD.S
                             ;*	Keyboard driver code. It is very slow to scan 
                             ;*	routines here do a basic scan for any key befo
                             ;*	the specific key. Still, it has a noticeable i
                             ;*	CPU especially in dflat which checks the key a
                             ;*	keyword is executed.
                             ;*	Rather than working off interrupts these routi
                             ;*	need to be called as needed. The T1 interrupt 
                             ;*	track of keyboard timers for repeat delay and 
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code
                             
                             ;****************************************
                             ;* init_keyboard
                             ;* Initialise the keyboard settings
                             ;****************************************
c752 :                       init_keyboard
c752 : a914             [ 2] 	lda #KB_REP_DEL
c754 : 8531             [ 3] 	sta kb_rdel_tim
c756 : a903             [ 2] 	lda #KB_REP_TIM
c758 : 8530             [ 3] 	sta kb_rep_tim
c75a : a902             [ 2] 	lda #KB_DEBOUNCE
c75c : 852e             [ 3] 	sta kb_deb_tim
c75e : a900             [ 2] 	lda #0
c760 : 852c             [ 3] 	sta kb_stat
                             
c762 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* kb_stick
                             ;* Check for fire | down | up | right | left
                             ;*        bit  4     3      2     1       0
                             ;* Returns bit mask of keys pressed
                             ;****************************************
c763 :                       kb_stick
c763 : a900             [ 2] 	lda #0					; Result will be in A
c765 : 48               [ 3] 	pha	
                             	; Select Row 4 only, all keys on this row
c766 : a904             [ 2] 	lda #4
AS65 Assembler for R6502 [1.42].                                     Page   74
-------------------------------- bank\bank0.s --------------------------------

c768 : 8d0003           [ 4] 	sta IO_0+PRB
c76b : a004             [ 2] 	ldy #4
c76d : a20e             [ 2] 	ldx #SND_REG_IOA		; AY Port A for columns
c76f :                       kb_stick_pos
c76f : b911c9           [ 4] 	lda kb_stick_mask,y		; Get the column mask
c772 : 2000c0           [ 6] 	jsr snd_set				; Activate column
c775 : ad0003           [ 4] 	lda IO_0+PRB			; Read Port B
c778 : 2908             [ 2] 	and #KB_SENSE			; Something pressed?
c77a : c908             [ 2] 	cmp #KB_SENSE			; C=1 if set else 0
c77c : 68               [ 4] 	pla
c77d : 2a               [ 2] 	rol a					; Get C in to A
c77e : 48               [ 3] 	pha
c77f : 88               [ 2] 	dey
c780 : 10ed             [ 3] 	bpl kb_stick_pos		; Do all 5 positions
c782 : 68               [ 4] 	pla						; Result in A
c783 : 60               [ 6] 	rts
                             
                             	
                             ;****************************************
                             ;* kb_any_key
                             ;* Quick check for any key except shifts & ctrl
                             ;* Carry = 1 means key pressed
                             ;****************************************
c784 :                       kb_any_key
                             	; Select all columns except 4
c784 : a910             [ 2] 	lda #0b00010000			; Deselect only col 4
c786 : a20e             [ 2] 	ldx #SND_REG_IOA		; On AY port A
c788 : 2000c0           [ 6] 	jsr snd_set
                             
c78b : a007             [ 2] 	ldy #7					; Start from row 7
c78d :                       kb_any_key_row
c78d : 8c0003           [ 4] 	sty IO_0+PRB			; Select row on port B
c790 : ea               [ 2] 	nop
c791 : ea               [ 2] 	nop
                             	
c792 : ad0003           [ 4] 	lda IO_0+PRB			; Read Port B
c795 : 2908             [ 2] 	and #KB_SENSE			; Something pressed?
c797 : d005             [ 3] 	bne kb_any_key_pressed
c799 : 88               [ 2] 	dey						; If not then next row
c79a : 10f1             [ 3] 	bpl kb_any_key_row		; Until all rows done
c79c :                       kb_any_key_none
c79c : 18               [ 2] 	clc						; C=0 means not pressed
c79d : 60               [ 6] 	rts
c79e :                       kb_any_key_pressed
c79e :                       kb_read_got
c79e : 38               [ 2] 	sec						; C=1 means pressed
c79f : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* kb_read_raw
                             ;* Read keyboard
                             ;* Y = Keyboard code
                             ;* Carry = 1 means key found, 0 = no keys found
                             ;****************************************
c7a0 :                       kb_read_raw
c7a0 : 2084c7           [ 6] 	jsr kb_any_key			; Quick check is anything down?
c7a3 : 902f             [ 3] 	bcc kb_read_nothing		; Don't bother if not
c7a5 :                       kb_read_raw_force
c7a5 : a200             [ 2] 	ldx #0					; Start at column 0	
c7a7 : 86ab             [ 3] 	stx zp_tmp1
c7a9 :                       kb_check_matrix_col
                             	; else set the col in the AY port A
AS65 Assembler for R6502 [1.42].                                     Page   75
-------------------------------- bank\bank0.s --------------------------------

c7a9 : bd09c9           [ 4] 	lda kb_col_mask,x
c7ac : a20e             [ 2] 	ldx #SND_REG_IOA		; Select Port A of AY
c7ae : 2000c0           [ 6] 	jsr snd_set				; Set Port A to column mask
c7b1 : a000             [ 2] 	ldy #0
c7b3 :                       kb_check_matrix_row
c7b3 : 8c0003           [ 4] 	sty IO_0+PRB			; Select row from Y
                             	
c7b6 : a202             [ 2] 	ldx #2
c7b8 :                       kb_hw_delay
c7b8 : ca               [ 2] 	dex
c7b9 : d0fd             [ 3] 	bne kb_hw_delay
                             
c7bb : ad0003           [ 4] 	lda IO_0+PRB			; Read Port B
c7be : 2908             [ 2] 	and #KB_SENSE			; Bit 3 is the sense
c7c0 : d016             [ 3] 	bne kb_read_raw_got
                             	; No key for this row/col, next
c7c2 : c8               [ 2] 	iny
c7c3 : c008             [ 2] 	cpy #8					; Done 8 rows?
c7c5 : d0ec             [ 3] 	bne kb_check_matrix_row
                             	; ok check next row
c7c7 : a6ab             [ 3] 	ldx zp_tmp1
c7c9 :                       kb_check_skip4
c7c9 : e8               [ 2] 	inx
c7ca : e004             [ 2] 	cpx #4					; Skip 4?
c7cc : f0fb             [ 3] 	beq kb_check_skip4
c7ce : 86ab             [ 3] 	stx zp_tmp1
c7d0 : e008             [ 2] 	cpx #8					; Done 8 cols?
c7d2 : d0d5             [ 3] 	bne kb_check_matrix_col
                             	; No key was sensed
c7d4 :                       kb_read_nothing
c7d4 : a000             [ 2] 	ldy #0					; Raw key codes
c7d6 : 18               [ 2] 	clc						; No key sensed flag
c7d7 : 60               [ 6] 	rts
c7d8 :                       kb_read_raw_got
                             	;Y=row, zp_temp1=col
c7d8 : a5ab             [ 3] 	lda zp_tmp1				; Get the column num
c7da : 0a               [ 2] 	asl a					; Shift in to bits 5,4,3
c7db : 0a               [ 2] 	asl a
c7dc : 0a               [ 2] 	asl a
c7dd : 85ab             [ 3] 	sta zp_tmp1
c7df : 98               [ 2] 	tya						; Now or with row number
c7e0 : 05ab             [ 3] 	ora zp_tmp1
c7e2 : a8               [ 2] 	tay						; Put in to Y
c7e3 : 38               [ 2] 	sec
c7e4 : 60               [ 6] 	rts
                             	
                             ;****************************************
                             ;* kb_scan_key
                             ;* Scans for a key, returns zero for no key found
                             ;* Processes caps and shift lock but these don't 
                             ;* A = Key code
                             ;****************************************
c7e5 :                       kb_scan_key
c7e5 : 20a0c7           [ 6] 	jsr kb_read_raw			; Check if a key is sensed
c7e8 : b00c             [ 3] 	bcs kb_scan_decode		; go ahead and decode
                             	; If pressed nothing then reset timers
c7ea : a9ff             [ 2] 	lda #255
c7ec : 8529             [ 3] 	sta kb_raw				; Reset raw key settings
c7ee : 852a             [ 3] 	sta kb_last				; And last key
c7f0 : a531             [ 3] 	lda kb_rdel_tim			; Reset repeat timer to initia
c7f2 : 852f             [ 3] 	sta kb_rep
c7f4 :                       kb_scan_wait
AS65 Assembler for R6502 [1.42].                                     Page   76
-------------------------------- bank\bank0.s --------------------------------

c7f4 : 38               [ 2] 	sec						; Code not valid
c7f5 : 60               [ 6] 	rts						; And done (A=0)	
c7f6 :                       kb_scan_decode
                             	; If got here then raw key is good
c7f6 : a52a             [ 3] 	lda kb_last				; Preload A with last decoded key
c7f8 : c429             [ 3] 	cpy kb_raw				; Same as last raw key?
c7fa : 8429             [ 3] 	sty kb_raw				; Already save new raw key
c7fc : d002             [ 4] 	bne kb_process_new		; If is new raw key, look at
c7fe : f059             [ 4] 	beq kb_do_repeat		; Else go handle repeating wit
c800 :                       kb_process_new
c800 : a531             [ 3] 	lda kb_rdel_tim			; Reset repeat timer to initia
c802 : 852f             [ 3] 	sta kb_rep
                             	; Now to get a proper key code translated from r
                             	; Check for shift and ctrl (not debounced!)
c804 : a9ef             [ 2] 	lda #0b11101111			; Select column 4
c806 : a20e             [ 2] 	ldx #SND_REG_IOA		; On AY port A
c808 : 2000c0           [ 6] 	jsr snd_set
                             
                             	; check shifted keys
c80b : a204             [ 2] 	ldx #4					; Row 4 (left shift)
c80d : 8e0003           [ 4] 	stx IO_0+PRB			; Select row on port B
c810 : ea               [ 2] 	nop
c811 : ea               [ 2] 	nop
                             
c812 : ad0003           [ 4] 	lda IO_0+PRB			; Read Port B
                             
c815 : a207             [ 2] 	ldx #7					; Row 7 (right shift)
c817 : 8e0003           [ 4] 	stx IO_0+PRB			; Select row on port B
c81a : ea               [ 2] 	nop
c81b : ea               [ 2] 	nop
                             
c81c : 0d0003           [ 4] 	ora IO_0+PRB			; Combine Port B
c81f : be89c8           [ 4] 	ldx kb_table_std,y		; Pre-load standard key code
c822 : 2908             [ 2] 	and #KB_SENSE			; Bit 3 is the sense
c824 : f003             [ 3] 	beq kb_read_noshift		; Skip over if no shift
c826 : bec9c8           [ 4] 	ldx kb_table_shift,y	; Load up standard key code
c829 :                       kb_read_noshift
c829 : 862b             [ 3] 	stx kb_code				; Save the mapped keycode
                             	; check ctrl key
c82b : a202             [ 2] 	ldx #2					; Row 2 (ctrl key)
c82d : 8e0003           [ 4] 	stx IO_0+PRB			; Select row on port B
c830 : ea               [ 2] 	nop
c831 : ea               [ 2] 	nop
                             
c832 : ad0003           [ 4] 	lda IO_0+PRB			; Read Port B
c835 : 2908             [ 2] 	and #KB_SENSE
c837 : f00a             [ 3] 	beq kb_skip_ctrl
c839 : a52b             [ 3] 	lda kb_code
c83b : 291f             [ 2] 	and #0x1f				; Ctrl will result in codes 0 to 31
c83d : 852b             [ 3] 	sta kb_code				; Override the keycode
c83f : f028             [ 3] 	beq kb_brk
c841 : 101e             [ 3] 	bpl	kb_store_last		; Check repeat (bpl is always
c843 :                       kb_skip_ctrl
c843 : a52c             [ 3] 	lda kb_stat				; Check caps lock
c845 : 2901             [ 2] 	and #KB_CAPSLK
c847 : f018             [ 3] 	beq kb_store_last
c849 : a52b             [ 3] 	lda kb_code
c84b : c961             [ 2] 	cmp #'a'				; If < 'a' then skip
c84d : 9012             [ 3] 	bcc kb_store_last
c84f : c97b             [ 2] 	cmp #'z'+1				; If > 'z' then skip
c851 : b00e             [ 3] 	bcs kb_store_last
c853 : a52b             [ 3] 	lda kb_code				; Get the actual code	
AS65 Assembler for R6502 [1.42].                                     Page   77
-------------------------------- bank\bank0.s --------------------------------

c855 : 4920             [ 2] 	eor #0x20				; Switch off bit 0x20
c857 : d008             [ 3] 	bne kb_store_last
c859 :                       kb_do_repeat
c859 : a62f             [ 3] 	ldx kb_rep				; Has repeat expired?
c85b : d008             [ 3] 	bne	kb_in_repeat		; If not then still in repeat
c85d : a630             [ 3] 	ldx kb_rep_tim			; Set repeat speed
c85f : 862f             [ 3] 	stx kb_rep
c861 :                       kb_store_last
c861 : 852a             [ 3] 	sta kb_last				; Make last code same as this
c863 : 18               [ 2] 	clc						; Code valid
c864 : 60               [ 6] 	rts	
c865 :                       kb_in_repeat
c865 : a900             [ 2] 	lda #0					; Don't emit a keycode
c867 : 38               [ 2] 	sec
c868 : 60               [ 6] 	rts
c869 :                       kb_brk
                             	SWBRK DFERR_OK
                             
                             
                             ;****************************************
                             ;* kb_get_key
                             ;* Waits for a key press, C=1 synchronous
                             ;* A = Key code, C=1 means valid
                             ;****************************************
c86b :                       kb_get_key
c86b : 8a               [ 2] 	txa
c86c : 48               [ 3] 	pha
c86d : 98               [ 2] 	tya
c86e : 48               [ 3] 	pha
                             
c86f :                       kb_get_try	
c86f : 08               [ 3] 	php
c870 : 20e5c7           [ 6] 	jsr kb_scan_key
c873 : 900b             [ 3] 	bcc kb_scan_got_key
c875 : 28               [ 4] 	plp						; No key, so check C
c876 : b0f7             [ 3] 	bcs kb_get_try			; Keep looking if C
c878 : 38               [ 2] 	sec						; Indicate key not valid
                             	
c879 : 68               [ 4] 	pla
c87a : a8               [ 2] 	tay
c87b : 68               [ 4] 	pla
c87c : aa               [ 2] 	tax
c87d : a900             [ 2] 	lda #0
                             	
c87f : 60               [ 6] 	rts
c880 :                       kb_scan_got_key
c880 : 28               [ 4] 	plp						; Pull stack
c881 : 18               [ 2] 	clc						; Indicate key valid
                             
c882 : 68               [ 4] 	pla
c883 : a8               [ 2] 	tay
c884 : 68               [ 4] 	pla
c885 : aa               [ 2] 	tax
                             	
c886 : a52b             [ 3] 	lda kb_code
                             	
c888 : 60               [ 6] 	rts
                             	
                             ;****************************************
                             ;* kb_table_std (no shift)
                             ;* Each line is one column
                             ;****************************************
AS65 Assembler for R6502 [1.42].                                     Page   78
-------------------------------- bank\bank0.s --------------------------------

c889 :                       kb_table_std
c889 : 376a6d6b20757938      	db '7' ,'j' ,'m' ,'k' ,' ' ,'u' ,'y' ,'8'
c891 : 6e7436392c69686c      	db 'n' ,'t' ,'6' ,'9' ,',' ,'i' ,'h' ,'l'
c899 : 3572623b2e6f6730      	db '5' ,'r' ,'b' ,';' ,'.' ,'o' ,'g' ,'0'
c8a1 : 7666342d0b70652f      	db 'v' ,'f' ,'4' ,'-' ,0x0b,'p' ,'e' ,'/'
c8a9 : 0000000000000000      	db 0,0,0,0,0,0,0,0 ; Column 4 is shift and ctrl 
c8b1 : 311b7a00087f610d      	db '1' ,0x1b,'z' ,0   ,0x08,0x7f,'a' ,0x0d
c8b9 : 7871325c0a5d7300      	db 'x' ,'q' ,'2' ,0x5c,0x0a,']' ,'s' ,0
c8c1 : 33646327095b773d      	db '3' ,'d' ,'c' ,0x27,0x09,'[' ,'w' ,'='
                             
                             ;* kb_table_shift (with shift)
c8c9 :                       kb_table_shift
c8c9 : 264a4d4b2055592a      	db '&' ,'J' ,'M' ,'K' ,' ' ,'U' ,'Y' ,'*'
c8d1 : 4e545e283c49484c      	db 'N' ,'T' ,'^' ,'(' ,'<' ,'I' ,'H' ,'L'
c8d9 : 2552423a3e4f4729      	db '%' ,'R' ,'B' ,':' ,'>' ,'O' ,'G' ,')'
c8e1 : 5646245f0b50453f      	db 'V' ,'F' ,'$' ,'_' ,0x0b,'P' ,'E' ,'?'
c8e9 : 0000000000000000      	db 0,0,0,0,0,0,0,0 ; Column 4 is shift and ctrl 
c8f1 : 211b5a00087f410d      	db '!' ,0x1b,'Z' ,0   ,0x08,0x7f,'A' ,0x0d
c8f9 : 5851407c0a7d5300      	db 'X' ,'Q' ,'@' ,'|' ,0x0a,'}' ,'S' ,0
c901 : 23444322097b572b      	db '#' ,'D' ,'C' ,0x22,0x09,'{' ,'W' ,'+'
                             
c909 :                       kb_col_mask
c909 : fe                    	db 0b11111110
c90a : fd                    	db 0b11111101
c90b : fb                    	db 0b11111011
c90c : f7                    	db 0b11110111
c90d : ef                    	db 0b11101111
c90e : df                    	db 0b11011111
c90f : bf                    	db 0b10111111
c910 : 7f                    	db 0b01111111
                             
c911 :                       kb_stick_mask
c911 : df                    	db 0b11011111		; Left 	= Bit 0
c912 : 7f                    	db 0b01111111		; Right = Bit 1
c913 : f7                    	db 0b11110111		; Up	= Bit 2
c914 : bf                    	db 0b10111111		; Down	= Bit 3
c915 : fe                    	db 0b11111110		; Space	= Bit 4
                             
                             	include "vdp/graph.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  GRAPH.S
                             ;*  This is the graphics module, to handle text a
                             ;*  graphics.
                             ;*  For text modes, this module keeps track of wh
                             ;*  next put a character, and also takes care of 
                             ;*  to the next line as well as scrolling the con
                             ;*  when the cursor has reached the bottom right.
                             ;*  module also enables text input which is echoe
                             ;*  screen, to allow interactive input and editin
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code
                             
AS65 Assembler for R6502 [1.42].                                     Page   79
-------------------------------- bank\bank0.s --------------------------------

c916 :                       mod_sz_graph_s
                             
                             
                             	include "vdp/font.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  FONT.S
                             ;*  This is the font definition, used to initiali
                             ;*  character set.  This is the standard Oric-1 f
                             ;*	Still called vdp as this code was ported from 
                             ;*	machine using the TMS9918a.
                             ;*
                             ;************************************************
                             
c916 :                       vdp_font
                             ; char 32
c916 : 00                    	db %000000
c917 : 00                    	db %000000
c918 : 00                    	db %000000
c919 : 00                    	db %000000
c91a : 00                    	db %000000
c91b : 00                    	db %000000
c91c : 00                    	db %000000
c91d : 00                    	db %000000
                             ; char 33
c91e : 0c                    	db %001100
c91f : 0c                    	db %001100
c920 : 0c                    	db %001100
c921 : 08                    	db %001000
c922 : 08                    	db %001000
c923 : 00                    	db %000000
c924 : 08                    	db %001000
c925 : 00                    	db %000000
                             ; char 34
c926 : 36                    	db %110110
c927 : 36                    	db %110110
c928 : 12                    	db %010010
c929 : 00                    	db %000000
c92a : 00                    	db %000000
c92b : 00                    	db %000000
c92c : 00                    	db %000000
c92d : 00                    	db %000000
                             ; char 35
c92e : 14                    	db %010100
c92f : 14                    	db %010100
c930 : 3e                    	db %111110
c931 : 14                    	db %010100
c932 : 3e                    	db %111110
c933 : 14                    	db %010100
c934 : 14                    	db %010100
c935 : 00                    	db %000000
                             ; char 36
c936 : 08                    	db %001000
c937 : 1e                    	db %011110
c938 : 28                    	db %101000
c939 : 1c                    	db %011100
AS65 Assembler for R6502 [1.42].                                     Page   80
-------------------------------- bank\bank0.s --------------------------------

c93a : 0a                    	db %001010
c93b : 3c                    	db %111100
c93c : 08                    	db %001000
c93d : 00                    	db %000000
                             ; char 37
c93e : 30                    	db %110000
c93f : 32                    	db %110010
c940 : 04                    	db %000100
c941 : 08                    	db %001000
c942 : 10                    	db %010000
c943 : 26                    	db %100110
c944 : 06                    	db %000110
c945 : 00                    	db %000000
                             ; char 38
c946 : 10                    	db %010000
c947 : 28                    	db %101000
c948 : 28                    	db %101000
c949 : 10                    	db %010000
c94a : 2a                    	db %101010
c94b : 24                    	db %100100
c94c : 1a                    	db %011010
c94d : 00                    	db %000000
                             ; char 39
c94e : 0c                    	db %001100
c94f : 0c                    	db %001100
c950 : 04                    	db %000100
c951 : 00                    	db %000000
c952 : 00                    	db %000000
c953 : 00                    	db %000000
c954 : 00                    	db %000000
c955 : 00                    	db %000000
                             ; char 40
c956 : 04                    	db %000100
c957 : 08                    	db %001000
c958 : 10                    	db %010000
c959 : 10                    	db %010000
c95a : 10                    	db %010000
c95b : 08                    	db %001000
c95c : 04                    	db %000100
c95d : 00                    	db %000000
                             ; char 41
c95e : 10                    	db %010000
c95f : 08                    	db %001000
c960 : 04                    	db %000100
c961 : 04                    	db %000100
c962 : 04                    	db %000100
c963 : 08                    	db %001000
c964 : 10                    	db %010000
c965 : 00                    	db %000000
                             ; char 42
c966 : 08                    	db %001000
c967 : 2a                    	db %101010
c968 : 1c                    	db %011100
c969 : 08                    	db %001000
c96a : 1c                    	db %011100
c96b : 2a                    	db %101010
c96c : 08                    	db %001000
c96d : 00                    	db %000000
                             ; char 43
c96e : 00                    	db %000000
c96f : 08                    	db %001000
c970 : 08                    	db %001000
AS65 Assembler for R6502 [1.42].                                     Page   81
-------------------------------- bank\bank0.s --------------------------------

c971 : 3e                    	db %111110
c972 : 08                    	db %001000
c973 : 08                    	db %001000
c974 : 00                    	db %000000
c975 : 00                    	db %000000
                             ; char 44
c976 : 00                    	db %000000
c977 : 00                    	db %000000
c978 : 00                    	db %000000
c979 : 00                    	db %000000
c97a : 00                    	db %000000
c97b : 08                    	db %001000
c97c : 08                    	db %001000
c97d : 10                    	db %010000
                             ; char 45
c97e : 00                    	db %000000
c97f : 00                    	db %000000
c980 : 00                    	db %000000
c981 : 3e                    	db %111110
c982 : 00                    	db %000000
c983 : 00                    	db %000000
c984 : 00                    	db %000000
c985 : 00                    	db %000000
                             ; char 46
c986 : 00                    	db %000000
c987 : 00                    	db %000000
c988 : 00                    	db %000000
c989 : 00                    	db %000000
c98a : 00                    	db %000000
c98b : 04                    	db %000100
c98c : 00                    	db %000000
c98d : 00                    	db %000000
                             ; char 47
c98e : 00                    	db %000000
c98f : 02                    	db %000010
c990 : 04                    	db %000100
c991 : 08                    	db %001000
c992 : 10                    	db %010000
c993 : 20                    	db %100000
c994 : 00                    	db %000000
c995 : 00                    	db %000000
                             ; char 48
c996 : 1c                    	db %011100
c997 : 22                    	db %100010
c998 : 26                    	db %100110
c999 : 2a                    	db %101010
c99a : 32                    	db %110010
c99b : 22                    	db %100010
c99c : 1c                    	db %011100
c99d : 00                    	db %000000
                             ; char 49
c99e : 08                    	db %001000
c99f : 18                    	db %011000
c9a0 : 08                    	db %001000
c9a1 : 08                    	db %001000
c9a2 : 08                    	db %001000
c9a3 : 08                    	db %001000
c9a4 : 1c                    	db %011100
c9a5 : 00                    	db %000000
                             ; char 50
c9a6 : 1c                    	db %011100
c9a7 : 22                    	db %100010
AS65 Assembler for R6502 [1.42].                                     Page   82
-------------------------------- bank\bank0.s --------------------------------

c9a8 : 02                    	db %000010
c9a9 : 04                    	db %000100
c9aa : 08                    	db %001000
c9ab : 10                    	db %010000
c9ac : 3e                    	db %111110
c9ad : 00                    	db %000000
                             ; char 51
c9ae : 3e                    	db %111110
c9af : 02                    	db %000010
c9b0 : 04                    	db %000100
c9b1 : 0c                    	db %001100
c9b2 : 02                    	db %000010
c9b3 : 22                    	db %100010
c9b4 : 1c                    	db %011100
c9b5 : 00                    	db %000000
                             ; char 52
c9b6 : 04                    	db %000100
c9b7 : 0c                    	db %001100
c9b8 : 14                    	db %010100
c9b9 : 24                    	db %100100
c9ba : 3e                    	db %111110
c9bb : 04                    	db %000100
c9bc : 04                    	db %000100
c9bd : 00                    	db %000000
                             ; char 53
c9be : 3e                    	db %111110
c9bf : 20                    	db %100000
c9c0 : 3c                    	db %111100
c9c1 : 02                    	db %000010
c9c2 : 02                    	db %000010
c9c3 : 22                    	db %100010
c9c4 : 1c                    	db %011100
c9c5 : 00                    	db %000000
                             ; char 54
c9c6 : 0c                    	db %001100
c9c7 : 10                    	db %010000
c9c8 : 20                    	db %100000
c9c9 : 3c                    	db %111100
c9ca : 22                    	db %100010
c9cb : 22                    	db %100010
c9cc : 1c                    	db %011100
c9cd : 00                    	db %000000
                             ; char 55
c9ce : 3e                    	db %111110
c9cf : 02                    	db %000010
c9d0 : 04                    	db %000100
c9d1 : 08                    	db %001000
c9d2 : 10                    	db %010000
c9d3 : 10                    	db %010000
c9d4 : 10                    	db %010000
c9d5 : 00                    	db %000000
                             ; char 56
c9d6 : 1c                    	db %011100
c9d7 : 22                    	db %100010
c9d8 : 22                    	db %100010
c9d9 : 1c                    	db %011100
c9da : 22                    	db %100010
c9db : 22                    	db %100010
c9dc : 1c                    	db %011100
c9dd : 00                    	db %000000
                             ; char 57
c9de : 1c                    	db %011100
AS65 Assembler for R6502 [1.42].                                     Page   83
-------------------------------- bank\bank0.s --------------------------------

c9df : 22                    	db %100010
c9e0 : 22                    	db %100010
c9e1 : 1e                    	db %011110
c9e2 : 02                    	db %000010
c9e3 : 04                    	db %000100
c9e4 : 18                    	db %011000
c9e5 : 00                    	db %000000
                             ; char 58
c9e6 : 00                    	db %000000
c9e7 : 00                    	db %000000
c9e8 : 08                    	db %001000
c9e9 : 00                    	db %000000
c9ea : 00                    	db %000000
c9eb : 08                    	db %001000
c9ec : 00                    	db %000000
c9ed : 00                    	db %000000
                             ; char 59
c9ee : 00                    	db %000000
c9ef : 00                    	db %000000
c9f0 : 08                    	db %001000
c9f1 : 00                    	db %000000
c9f2 : 00                    	db %000000
c9f3 : 08                    	db %001000
c9f4 : 08                    	db %001000
c9f5 : 10                    	db %010000
                             ; char 60
c9f6 : 04                    	db %000100
c9f7 : 08                    	db %001000
c9f8 : 10                    	db %010000
c9f9 : 20                    	db %100000
c9fa : 10                    	db %010000
c9fb : 08                    	db %001000
c9fc : 04                    	db %000100
c9fd : 00                    	db %000000
                             ; char 61
c9fe : 00                    	db %000000
c9ff : 00                    	db %000000
ca00 : 3e                    	db %111110
ca01 : 00                    	db %000000
ca02 : 3e                    	db %111110
ca03 : 00                    	db %000000
ca04 : 00                    	db %000000
ca05 : 00                    	db %000000
                             ; char 62
ca06 : 10                    	db %010000
ca07 : 08                    	db %001000
ca08 : 04                    	db %000100
ca09 : 02                    	db %000010
ca0a : 04                    	db %000100
ca0b : 08                    	db %001000
ca0c : 10                    	db %010000
ca0d : 00                    	db %000000
                             ; char 63
ca0e : 1c                    	db %011100
ca0f : 22                    	db %100010
ca10 : 04                    	db %000100
ca11 : 08                    	db %001000
ca12 : 08                    	db %001000
ca13 : 00                    	db %000000
ca14 : 08                    	db %001000
ca15 : 00                    	db %000000
                             ; char 64
AS65 Assembler for R6502 [1.42].                                     Page   84
-------------------------------- bank\bank0.s --------------------------------

ca16 : 1c                    	db %011100
ca17 : 22                    	db %100010
ca18 : 2a                    	db %101010
ca19 : 2e                    	db %101110
ca1a : 2c                    	db %101100
ca1b : 20                    	db %100000
ca1c : 1e                    	db %011110
ca1d : 00                    	db %000000
ca1e :                       vdp_font_a
                             ; char 65
ca1e : 1c                    	db %011100
ca1f : 22                    	db %100010
ca20 : 22                    	db %100010
ca21 : 3e                    	db %111110
ca22 : 22                    	db %100010
ca23 : 22                    	db %100010
ca24 : 22                    	db %100010
ca25 : 00                    	db %000000
                             ; char 66
ca26 : 3c                    	db %111100
ca27 : 22                    	db %100010
ca28 : 22                    	db %100010
ca29 : 3c                    	db %111100
ca2a : 22                    	db %100010
ca2b : 22                    	db %100010
ca2c : 3c                    	db %111100
ca2d : 00                    	db %000000
                             ; char 67
ca2e : 1c                    	db %011100
ca2f : 22                    	db %100010
ca30 : 20                    	db %100000
ca31 : 20                    	db %100000
ca32 : 20                    	db %100000
ca33 : 22                    	db %100010
ca34 : 1c                    	db %011100
ca35 : 00                    	db %000000
                             ; char 68
ca36 : 3c                    	db %111100
ca37 : 22                    	db %100010
ca38 : 22                    	db %100010
ca39 : 22                    	db %100010
ca3a : 22                    	db %100010
ca3b : 22                    	db %100010
ca3c : 3c                    	db %111100
ca3d : 00                    	db %000000
                             ; char 69
ca3e : 3e                    	db %111110
ca3f : 20                    	db %100000
ca40 : 20                    	db %100000
ca41 : 3c                    	db %111100
ca42 : 20                    	db %100000
ca43 : 20                    	db %100000
ca44 : 3e                    	db %111110
ca45 : 00                    	db %000000
                             ; char 70
ca46 : 3e                    	db %111110
ca47 : 20                    	db %100000
ca48 : 20                    	db %100000
ca49 : 3c                    	db %111100
ca4a : 20                    	db %100000
ca4b : 20                    	db %100000
ca4c : 20                    	db %100000
AS65 Assembler for R6502 [1.42].                                     Page   85
-------------------------------- bank\bank0.s --------------------------------

ca4d : 00                    	db %000000
                             ; char 71
ca4e : 1e                    	db %011110
ca4f : 20                    	db %100000
ca50 : 20                    	db %100000
ca51 : 20                    	db %100000
ca52 : 26                    	db %100110
ca53 : 22                    	db %100010
ca54 : 1e                    	db %011110
ca55 : 00                    	db %000000
                             ; char 72
ca56 : 22                    	db %100010
ca57 : 22                    	db %100010
ca58 : 22                    	db %100010
ca59 : 3e                    	db %111110
ca5a : 22                    	db %100010
ca5b : 22                    	db %100010
ca5c : 22                    	db %100010
ca5d : 00                    	db %000000
                             ; char 73
ca5e : 1c                    	db %011100
ca5f : 08                    	db %001000
ca60 : 08                    	db %001000
ca61 : 08                    	db %001000
ca62 : 08                    	db %001000
ca63 : 08                    	db %001000
ca64 : 1c                    	db %011100
ca65 : 00                    	db %000000
                             ; char 74
ca66 : 02                    	db %000010
ca67 : 02                    	db %000010
ca68 : 02                    	db %000010
ca69 : 02                    	db %000010
ca6a : 02                    	db %000010
ca6b : 22                    	db %100010
ca6c : 1c                    	db %011100
ca6d : 00                    	db %000000
                             ; char 75
ca6e : 22                    	db %100010
ca6f : 24                    	db %100100
ca70 : 28                    	db %101000
ca71 : 30                    	db %110000
ca72 : 28                    	db %101000
ca73 : 24                    	db %100100
ca74 : 22                    	db %100010
ca75 : 00                    	db %000000
                             ; char 76
ca76 : 20                    	db %100000
ca77 : 20                    	db %100000
ca78 : 20                    	db %100000
ca79 : 20                    	db %100000
ca7a : 20                    	db %100000
ca7b : 20                    	db %100000
ca7c : 3e                    	db %111110
ca7d : 00                    	db %000000
                             ; char 77
ca7e : 22                    	db %100010
ca7f : 36                    	db %110110
ca80 : 2a                    	db %101010
ca81 : 2a                    	db %101010
ca82 : 22                    	db %100010
ca83 : 22                    	db %100010
AS65 Assembler for R6502 [1.42].                                     Page   86
-------------------------------- bank\bank0.s --------------------------------

ca84 : 22                    	db %100010
ca85 : 00                    	db %000000
                             ; char 78
ca86 : 22                    	db %100010
ca87 : 22                    	db %100010
ca88 : 32                    	db %110010
ca89 : 2a                    	db %101010
ca8a : 26                    	db %100110
ca8b : 22                    	db %100010
ca8c : 22                    	db %100010
ca8d : 00                    	db %000000
                             ; char 79
ca8e : 1c                    	db %011100
ca8f : 22                    	db %100010
ca90 : 22                    	db %100010
ca91 : 22                    	db %100010
ca92 : 22                    	db %100010
ca93 : 22                    	db %100010
ca94 : 1c                    	db %011100
ca95 : 00                    	db %000000
                             ; char 80
ca96 : 3c                    	db %111100
ca97 : 22                    	db %100010
ca98 : 22                    	db %100010
ca99 : 3c                    	db %111100
ca9a : 20                    	db %100000
ca9b : 20                    	db %100000
ca9c : 20                    	db %100000
ca9d : 00                    	db %000000
                             ; char 81
ca9e : 1c                    	db %011100
ca9f : 22                    	db %100010
caa0 : 22                    	db %100010
caa1 : 22                    	db %100010
caa2 : 2a                    	db %101010
caa3 : 24                    	db %100100
caa4 : 1a                    	db %011010
caa5 : 00                    	db %000000
                             ; char 82
caa6 : 3c                    	db %111100
caa7 : 22                    	db %100010
caa8 : 22                    	db %100010
caa9 : 3c                    	db %111100
caaa : 28                    	db %101000
caab : 24                    	db %100100
caac : 22                    	db %100010
caad : 00                    	db %000000
                             ; char 83
caae : 1c                    	db %011100
caaf : 22                    	db %100010
cab0 : 20                    	db %100000
cab1 : 1c                    	db %011100
cab2 : 02                    	db %000010
cab3 : 22                    	db %100010
cab4 : 1c                    	db %011100
cab5 : 00                    	db %000000
                             ; char 84
cab6 : 3e                    	db %111110
cab7 : 08                    	db %001000
cab8 : 08                    	db %001000
cab9 : 08                    	db %001000
caba : 08                    	db %001000
AS65 Assembler for R6502 [1.42].                                     Page   87
-------------------------------- bank\bank0.s --------------------------------

cabb : 08                    	db %001000
cabc : 08                    	db %001000
cabd : 00                    	db %000000
                             ; char 85
cabe : 22                    	db %100010
cabf : 22                    	db %100010
cac0 : 22                    	db %100010
cac1 : 22                    	db %100010
cac2 : 22                    	db %100010
cac3 : 22                    	db %100010
cac4 : 1c                    	db %011100
cac5 : 00                    	db %000000
                             ; char 86
cac6 : 22                    	db %100010
cac7 : 22                    	db %100010
cac8 : 22                    	db %100010
cac9 : 22                    	db %100010
caca : 22                    	db %100010
cacb : 14                    	db %010100
cacc : 08                    	db %001000
cacd : 00                    	db %000000
                             ; char 87
cace : 22                    	db %100010
cacf : 22                    	db %100010
cad0 : 22                    	db %100010
cad1 : 2a                    	db %101010
cad2 : 2a                    	db %101010
cad3 : 36                    	db %110110
cad4 : 22                    	db %100010
cad5 : 00                    	db %000000
                             ; char 88
cad6 : 22                    	db %100010
cad7 : 22                    	db %100010
cad8 : 14                    	db %010100
cad9 : 08                    	db %001000
cada : 14                    	db %010100
cadb : 22                    	db %100010
cadc : 22                    	db %100010
cadd : 00                    	db %000000
                             ; char 89
cade : 22                    	db %100010
cadf : 22                    	db %100010
cae0 : 14                    	db %010100
cae1 : 08                    	db %001000
cae2 : 08                    	db %001000
cae3 : 08                    	db %001000
cae4 : 08                    	db %001000
cae5 : 00                    	db %000000
                             ; char 90
cae6 : 3e                    	db %111110
cae7 : 02                    	db %000010
cae8 : 04                    	db %000100
cae9 : 08                    	db %001000
caea : 10                    	db %010000
caeb : 20                    	db %100000
caec : 3e                    	db %111110
caed : 00                    	db %000000
                             ; char 91
caee : 1c                    	db %011100
caef : 10                    	db %010000
caf0 : 10                    	db %010000
caf1 : 10                    	db %010000
AS65 Assembler for R6502 [1.42].                                     Page   88
-------------------------------- bank\bank0.s --------------------------------

caf2 : 10                    	db %010000
caf3 : 10                    	db %010000
caf4 : 1c                    	db %011100
caf5 : 00                    	db %000000
                             ; char 92
caf6 : 00                    	db %000000
caf7 : 20                    	db %100000
caf8 : 10                    	db %010000
caf9 : 08                    	db %001000
cafa : 04                    	db %000100
cafb : 02                    	db %000010
cafc : 00                    	db %000000
cafd : 00                    	db %000000
                             ; char 93
cafe : 1c                    	db %011100
caff : 04                    	db %000100
cb00 : 04                    	db %000100
cb01 : 04                    	db %000100
cb02 : 04                    	db %000100
cb03 : 04                    	db %000100
cb04 : 1c                    	db %011100
cb05 : 00                    	db %000000
                             ; char 94
cb06 : 08                    	db %001000
cb07 : 1c                    	db %011100
cb08 : 3e                    	db %111110
cb09 : 08                    	db %001000
cb0a : 08                    	db %001000
cb0b : 08                    	db %001000
cb0c : 08                    	db %001000
cb0d : 00                    	db %000000
                             ; char 95
cb0e : 00                    	db %000000
cb0f : 00                    	db %000000
cb10 : 00                    	db %000000
cb11 : 00                    	db %000000
cb12 : 00                    	db %000000
cb13 : 00                    	db %000000
cb14 : 3e                    	db %111110
cb15 : 00                    	db %000000
                             ; char 96
cb16 : 0e                    	db %001110
cb17 : 10                    	db %010000
cb18 : 10                    	db %010000
cb19 : 3c                    	db %111100
cb1a : 10                    	db %010000
cb1b : 10                    	db %010000
cb1c : 3e                    	db %111110
cb1d : 00                    	db %000000
                             ; char 97
cb1e : 00                    	db %000000
cb1f : 00                    	db %000000
cb20 : 1c                    	db %011100
cb21 : 02                    	db %000010
cb22 : 1e                    	db %011110
cb23 : 22                    	db %100010
cb24 : 1e                    	db %011110
cb25 : 00                    	db %000000
                             ; char 98
cb26 : 20                    	db %100000
cb27 : 20                    	db %100000
cb28 : 3c                    	db %111100
AS65 Assembler for R6502 [1.42].                                     Page   89
-------------------------------- bank\bank0.s --------------------------------

cb29 : 22                    	db %100010
cb2a : 22                    	db %100010
cb2b : 22                    	db %100010
cb2c : 3c                    	db %111100
cb2d : 00                    	db %000000
                             ; char 99
cb2e : 00                    	db %000000
cb2f : 00                    	db %000000
cb30 : 1e                    	db %011110
cb31 : 20                    	db %100000
cb32 : 20                    	db %100000
cb33 : 20                    	db %100000
cb34 : 1e                    	db %011110
cb35 : 00                    	db %000000
                             ; char 100
cb36 : 02                    	db %000010
cb37 : 02                    	db %000010
cb38 : 1e                    	db %011110
cb39 : 22                    	db %100010
cb3a : 22                    	db %100010
cb3b : 22                    	db %100010
cb3c : 1e                    	db %011110
cb3d : 00                    	db %000000
                             ; char 101
cb3e : 00                    	db %000000
cb3f : 00                    	db %000000
cb40 : 1c                    	db %011100
cb41 : 22                    	db %100010
cb42 : 3e                    	db %111110
cb43 : 20                    	db %100000
cb44 : 1e                    	db %011110
cb45 : 00                    	db %000000
                             ; char 102
cb46 : 0c                    	db %001100
cb47 : 12                    	db %010010
cb48 : 10                    	db %010000
cb49 : 3c                    	db %111100
cb4a : 10                    	db %010000
cb4b : 10                    	db %010000
cb4c : 10                    	db %010000
cb4d : 00                    	db %000000
                             ; char 103
cb4e : 00                    	db %000000
cb4f : 00                    	db %000000
cb50 : 1c                    	db %011100
cb51 : 22                    	db %100010
cb52 : 22                    	db %100010
cb53 : 1e                    	db %011110
cb54 : 02                    	db %000010
cb55 : 1c                    	db %011100
                             ; char 104
cb56 : 20                    	db %100000
cb57 : 20                    	db %100000
cb58 : 3c                    	db %111100
cb59 : 22                    	db %100010
cb5a : 22                    	db %100010
cb5b : 22                    	db %100010
cb5c : 22                    	db %100010
cb5d : 00                    	db %000000
                             ; char 105
cb5e : 08                    	db %001000
cb5f : 00                    	db %000000
AS65 Assembler for R6502 [1.42].                                     Page   90
-------------------------------- bank\bank0.s --------------------------------

cb60 : 18                    	db %011000
cb61 : 08                    	db %001000
cb62 : 08                    	db %001000
cb63 : 08                    	db %001000
cb64 : 1c                    	db %011100
cb65 : 00                    	db %000000
                             ; char 106
cb66 : 04                    	db %000100
cb67 : 00                    	db %000000
cb68 : 0c                    	db %001100
cb69 : 04                    	db %000100
cb6a : 04                    	db %000100
cb6b : 04                    	db %000100
cb6c : 24                    	db %100100
cb6d : 18                    	db %011000
                             ; char 107
cb6e : 20                    	db %100000
cb6f : 20                    	db %100000
cb70 : 22                    	db %100010
cb71 : 24                    	db %100100
cb72 : 38                    	db %111000
cb73 : 24                    	db %100100
cb74 : 22                    	db %100010
cb75 : 00                    	db %000000
                             ; char 108
cb76 : 18                    	db %011000
cb77 : 08                    	db %001000
cb78 : 08                    	db %001000
cb79 : 08                    	db %001000
cb7a : 08                    	db %001000
cb7b : 08                    	db %001000
cb7c : 1c                    	db %011100
cb7d : 00                    	db %000000
                             ; char 109
cb7e : 00                    	db %000000
cb7f : 00                    	db %000000
cb80 : 36                    	db %110110
cb81 : 2a                    	db %101010
cb82 : 2a                    	db %101010
cb83 : 2a                    	db %101010
cb84 : 22                    	db %100010
cb85 : 00                    	db %000000
                             ; char 110
cb86 : 00                    	db %000000
cb87 : 00                    	db %000000
cb88 : 3c                    	db %111100
cb89 : 22                    	db %100010
cb8a : 22                    	db %100010
cb8b : 22                    	db %100010
cb8c : 22                    	db %100010
cb8d : 00                    	db %000000
                             ; char 111
cb8e : 00                    	db %000000
cb8f : 00                    	db %000000
cb90 : 1c                    	db %011100
cb91 : 22                    	db %100010
cb92 : 22                    	db %100010
cb93 : 22                    	db %100010
cb94 : 1c                    	db %011100
cb95 : 00                    	db %000000
                             ; char 112
cb96 : 00                    	db %000000
AS65 Assembler for R6502 [1.42].                                     Page   91
-------------------------------- bank\bank0.s --------------------------------

cb97 : 00                    	db %000000
cb98 : 3c                    	db %111100
cb99 : 22                    	db %100010
cb9a : 22                    	db %100010
cb9b : 3c                    	db %111100
cb9c : 20                    	db %100000
cb9d : 20                    	db %100000
                             ; char 113
cb9e : 00                    	db %000000
cb9f : 00                    	db %000000
cba0 : 1e                    	db %011110
cba1 : 22                    	db %100010
cba2 : 22                    	db %100010
cba3 : 1e                    	db %011110
cba4 : 02                    	db %000010
cba5 : 02                    	db %000010
                             ; char 114
cba6 : 00                    	db %000000
cba7 : 00                    	db %000000
cba8 : 2e                    	db %101110
cba9 : 30                    	db %110000
cbaa : 20                    	db %100000
cbab : 20                    	db %100000
cbac : 20                    	db %100000
cbad : 00                    	db %000000
                             ; char 115
cbae : 00                    	db %000000
cbaf : 00                    	db %000000
cbb0 : 1e                    	db %011110
cbb1 : 20                    	db %100000
cbb2 : 1c                    	db %011100
cbb3 : 02                    	db %000010
cbb4 : 3c                    	db %111100
cbb5 : 00                    	db %000000
                             ; char 116
cbb6 : 10                    	db %010000
cbb7 : 10                    	db %010000
cbb8 : 3c                    	db %111100
cbb9 : 10                    	db %010000
cbba : 10                    	db %010000
cbbb : 12                    	db %010010
cbbc : 0c                    	db %001100
cbbd : 00                    	db %000000
                             ; char 117
cbbe : 00                    	db %000000
cbbf : 00                    	db %000000
cbc0 : 22                    	db %100010
cbc1 : 22                    	db %100010
cbc2 : 22                    	db %100010
cbc3 : 26                    	db %100110
cbc4 : 1a                    	db %011010
cbc5 : 00                    	db %000000
                             ; char 118
cbc6 : 00                    	db %000000
cbc7 : 00                    	db %000000
cbc8 : 22                    	db %100010
cbc9 : 22                    	db %100010
cbca : 22                    	db %100010
cbcb : 14                    	db %010100
cbcc : 08                    	db %001000
cbcd : 00                    	db %000000
                             ; char 119
AS65 Assembler for R6502 [1.42].                                     Page   92
-------------------------------- bank\bank0.s --------------------------------

cbce : 00                    	db %000000
cbcf : 00                    	db %000000
cbd0 : 22                    	db %100010
cbd1 : 22                    	db %100010
cbd2 : 2a                    	db %101010
cbd3 : 2a                    	db %101010
cbd4 : 36                    	db %110110
cbd5 : 00                    	db %000000
                             ; char 120
cbd6 : 00                    	db %000000
cbd7 : 00                    	db %000000
cbd8 : 22                    	db %100010
cbd9 : 14                    	db %010100
cbda : 08                    	db %001000
cbdb : 14                    	db %010100
cbdc : 22                    	db %100010
cbdd : 00                    	db %000000
                             ; char 121
cbde : 00                    	db %000000
cbdf : 00                    	db %000000
cbe0 : 22                    	db %100010
cbe1 : 22                    	db %100010
cbe2 : 22                    	db %100010
cbe3 : 1e                    	db %011110
cbe4 : 02                    	db %000010
cbe5 : 1c                    	db %011100
                             ; char 122
cbe6 : 00                    	db %000000
cbe7 : 00                    	db %000000
cbe8 : 3e                    	db %111110
cbe9 : 04                    	db %000100
cbea : 08                    	db %001000
cbeb : 10                    	db %010000
cbec : 3e                    	db %111110
cbed : 00                    	db %000000
                             ; char 123
cbee : 0e                    	db %001110
cbef : 18                    	db %011000
cbf0 : 18                    	db %011000
cbf1 : 30                    	db %110000
cbf2 : 18                    	db %011000
cbf3 : 18                    	db %011000
cbf4 : 0e                    	db %001110
cbf5 : 00                    	db %000000
                             ; char 124
cbf6 : 08                    	db %001000
cbf7 : 08                    	db %001000
cbf8 : 08                    	db %001000
cbf9 : 08                    	db %001000
cbfa : 08                    	db %001000
cbfb : 08                    	db %001000
cbfc : 08                    	db %001000
cbfd : 00                    	db %000000
                             ; char 125
cbfe : 38                    	db %111000
cbff : 0c                    	db %001100
cc00 : 0c                    	db %001100
cc01 : 06                    	db %000110
cc02 : 0c                    	db %001100
cc03 : 0c                    	db %001100
cc04 : 38                    	db %111000
cc05 : 00                    	db %000000
AS65 Assembler for R6502 [1.42].                                     Page   93
-------------------------------- bank\bank0.s --------------------------------

                             ; char 126
cc06 : 00                    	db %000000
cc07 : 00                    	db %000000
cc08 : 10                    	db %010000
cc09 : 2a                    	db %101010
cc0a : 04                    	db %000100
cc0b : 00                    	db %000000
cc0c : 00                    	db %000000
cc0d : 00                    	db %000000
                             ; char 127
cc0e : 2a                    	db %101010
cc0f : 15                    	db %010101
cc10 : 2a                    	db %101010
cc11 : 15                    	db %010101
cc12 : 2a                    	db %101010
cc13 : 15                    	db %010101
cc14 : 2a                    	db %101010
cc15 : 15                    	db %010101
                             	
                             	
                             
                             ;****************************************
                             ;* vdp_init_font
                             ;* Initialise fonts from ROM
                             ;* Input : None
                             ;* Output : None
                             ;* Regs affected : All
                             ;****************************************
cc16 :                       gr_init_font
                             	; Get char base from vdp structure
cc16 : a614             [ 3] 	ldx gr_scrngeom+gr_char
cc18 : 8634             [ 3] 	stx tmp_blo
cc1a : a615             [ 3] 	ldx gr_scrngeom+gr_char+1
cc1c : e8               [ 2] 	inx						; ASCII patterns start 1 page later
cc1d : 8635             [ 3] 	stx tmp_bhi
                             
cc1f : a916             [ 2] 	lda #lo(vdp_font)		; Low byte of fonts source
cc21 : 8536             [ 3] 	sta tmp_clo
cc23 : a9c9             [ 2] 	lda #hi(vdp_font)		; High byte of fonts source
cc25 : 8537             [ 3] 	sta tmp_chi
cc27 : a203             [ 2] 	ldx #3					; Copy 3 pages
cc29 : 4c2ccc           [ 3] 	jmp gr_copy_mem
                             
                             
                             ;****************************************
                             ;* vdp_copy_mem
                             ;* Copy memory pages at a time
                             ;* Input :	clo/hi	=	source
                             ;*			blo/hi	=	dest
                             ;*			X		=	pages to copy
                             ;* Output : None
                             ;* Regs affected : All
                             ;****************************************
cc2c :                       gr_copy_mem
cc2c : a000             [ 2] 	ldy #0					; byte within page
cc2e : a536             [ 3] 	lda tmp_clo				; Low byte of source
cc30 : 8532             [ 3] 	sta tmp_alo
cc32 : a537             [ 3] 	lda tmp_chi				; High byte of source
cc34 : 8533             [ 3] 	sta tmp_ahi
cc36 :                       gr_copy_byte
cc36 : 98               [ 2] 	tya
cc37 : b132             [ 5] 	lda (tmp_alo),y			; Get byte from font table
AS65 Assembler for R6502 [1.42].                                     Page   94
-------------------------------- bank\bank0.s --------------------------------

cc39 : 9134             [ 5] 	sta (tmp_blo),y			; Put it to the memory
cc3b : c8               [ 2] 	iny
cc3c : d0f8             [ 3] 	bne gr_copy_byte		; keep going for 1 page
cc3e : e633             [ 5] 	inc tmp_ahi				; only need to increment high byt
cc40 : e635             [ 5] 	inc tmp_bhi				; source and destination ptr
cc42 : ca               [ 2] 	dex						; page counter
cc43 : d0f1             [ 3] 	bne gr_copy_byte		; keep going for X pages
cc45 : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* gr_init
                             ;* First initialisation of screen
                             ;****************************************
cc46 :                       gr_init
cc46 : a210             [ 2] 	ldx #VDP_FLASH			; Default cursor flash rate
cc48 : 860b             [ 3] 	stx vdp_curtim
cc4a : 860c             [ 3] 	stx vdp_curcnt
cc4c : a200             [ 2] 	ldx #0
cc4e : 860e             [ 3] 	stx vdp_curstat
                             
                             	; Hard reset initial geom values (X=0)
cc50 : 2077cc           [ 6] 	jsr gr_init_geom
                             
                             	; Copy font from ROM to char base
cc53 : 2016cc           [ 6] 	jsr gr_init_font
                             
                             	; Go in to hires mode to generate tables
cc56 : 20cdcc           [ 6] 	jsr gr_init_hires
cc59 : 2006cd           [ 6] 	jsr gr_init_hires_tables
                             
                             	; But start in text mode
cc5c : 4cb4cc           [ 3] 	jmp gr_init_screen_txt
                             
                             
                             ;****************************************
                             ;* gr_check_font_copy
                             ;* check font needs to be copied from
                             ;* current location to another
                             ;* A=high byte of page aligned font addr
                             ;* that the font needs to be at
                             ;****************************************
cc5f :                       gr_check_font_copy
                             	; Compare with current high byte
cc5f : c515             [ 3] 	cmp gr_scrngeom+gr_char+1
cc61 : f013             [ 3] 	beq gr_check_font_copy_done
                             	; save A as high byte of destination
cc63 : 8535             [ 3] 	sta tmp_blo+1
                             	; destination low is 0
cc65 : a900             [ 2] 	lda #0
cc67 : 8534             [ 3] 	sta tmp_blo
                             
                             	; Get source from current vdp structure
cc69 : a515             [ 3] 	lda gr_scrngeom+gr_char+1
cc6b : 8537             [ 3] 	sta tmp_clo+1
cc6d : a514             [ 3] 	lda gr_scrngeom+gr_char
cc6f : 8536             [ 3] 	sta tmp_clo
                             
                             	; Copy all 8 pages of font (std + alt) data
cc71 : a208             [ 2] 	ldx #8
cc73 : 202ccc           [ 6] 	jsr gr_copy_mem
cc76 :                       gr_check_font_copy_done
AS65 Assembler for R6502 [1.42].                                     Page   95
-------------------------------- bank\bank0.s --------------------------------

cc76 :                       gr_init_geom_done
cc76 : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* gr_init_geom
                             ;* initialise geometry entries from X
                             ;* position from base until -1
                             ;****************************************
cc77 :                       gr_init_geom
                             	; Which geom entry to init = Y
cc77 : bc86cc           [ 4] 	ldy gr_scrngeom_base,x
cc7a : 30fa             [ 3] 	bmi gr_init_geom_done		; Just somewhere with an 
                             	; skip to data and put in A
cc7c : e8               [ 2] 	inx
cc7d : bd86cc           [ 4] 	lda gr_scrngeom_base,x
                             	; save it in Y
cc80 : 991100           [ 5] 	sta gr_scrngeom,y
                             	; next entry
cc83 : e8               [ 2] 	inx
cc84 : d0f1             [ 3] 	bne gr_init_geom	; Always
                             	; Hope we don't get here - will crash!
                             
                             ; Geometry initialisation tables
cc86 :                       gr_scrngeom_base
cc86 : 1300                  	db gr_ink, 0
cc88 : 1416                  	db gr_paper, 16+6
cc8a : 1502                  	db gr_margin, 2
                             	; Not terminated by -1 : continues in to _txt va
                             ;* Geometry for text/lores
cc8c :                       gr_scrngeom_text
cc8c : 0000                  	db gr_mode, 0
                             
cc8e : 0300                  	db gr_char,   lo(TEXTCHAR)
cc90 : 04b4                  	db gr_char+1, hi(TEXTCHAR)
                             
cc92 : 0580                  	db gr_text_start,   lo(TEXTSCRN)
cc94 : 06bb                  	db gr_text_start+1, hi(TEXTSCRN)
                             
cc96 : 0928                  	db gr_text_w, 40
cc98 : 0a1c                  	db gr_text_h, 28
cc9a : ff                    	db -1
                             ;* Geometry for hires
cc9b :                       gr_scrngeom_hires
cc9b : 0001                  	db gr_mode, 1
                             
cc9d : 0100                  	db gr_hi_start,   lo(HISCRN)
cc9f : 02a0                  	db gr_hi_start+1, hi(HISCRN)
cca1 : 0300                  	db gr_char,   lo(HICHAR)
cca3 : 0498                  	db gr_char+1, hi(HICHAR)
                             
cca5 : 0568                  	db gr_text_start,   lo(HITEXT)
cca7 : 06bf                  	db gr_text_start+1, hi(HITEXT)
                             
cca9 : 1100                  	db gr_hires_x, 0
ccab : 1200                  	db gr_hires_y, 0
                             
                             	; Only need to initialise text height, width is 
ccad : 0a03                  	db gr_text_h, 3
                             
ccaf : 0f01                  	db gr_pixmode, 1
ccb1 : 1006                  	db gr_pitch, 6
AS65 Assembler for R6502 [1.42].                                     Page   96
-------------------------------- bank\bank0.s --------------------------------

ccb3 : ff                    	db -1
                             
                             
                             
                             ;****************************************
                             ;* gr_init_screen_txt
                             ;* initialise the screen in text mode
                             ;****************************************
ccb4 :                       gr_init_screen_txt
ccb4 : e60d             [ 5] 	inc vdp_curoff
                             
                             	; Check if font copy needed to 0xb400
ccb6 : a9b4             [ 2] 	lda #hi(TEXTCHAR)
ccb8 : 205fcc           [ 6] 	jsr gr_check_font_copy
                             
                             	; Initialise geom for text
ccbb : a206             [ 2] 	ldx #gr_scrngeom_text-gr_scrngeom_base
ccbd : 2077cc           [ 6] 	jsr gr_init_geom
                             
ccc0 : 2007d2           [ 6] 	jsr gr_spr_init					; SW Sprites are reset
                             
ccc3 : a920             [ 2] 	lda #' '						; Blank is SPACE
ccc5 : 8510             [ 3] 	sta vdp_blank
ccc7 : 204ccd           [ 6] 	jsr gr_cls
                             
ccca : c60d             [ 5] 	dec vdp_curoff
                             
cccc : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* gr_init_hires
                             ;* Input : X = Colour table fill value
                             ;* initialise the screen in hires mode
                             ;****************************************
cccd :                       gr_init_hires
cccd : e60d             [ 5] 	inc vdp_curoff
                             	; Check if font copy needed to 0x9800
cccf : a998             [ 2] 	lda #hi(HICHAR)
ccd1 : 205fcc           [ 6] 	jsr gr_check_font_copy
                             
                             	; Initialise geom for hires
ccd4 : a215             [ 2] 	ldx #gr_scrngeom_hires-gr_scrngeom_base
ccd6 : 2077cc           [ 6] 	jsr gr_init_geom
                             
ccd9 : a920             [ 2] 	lda #' '						; Blank is SPACE
ccdb : 8510             [ 3] 	sta vdp_blank
ccdd : 204ccd           [ 6] 	jsr gr_cls
                             
                             	; Zero out hires area 0xa000 for 8000 (0x1f40) b
cce0 : a900             [ 2] 	lda #lo(HISCRN)
cce2 : 8532             [ 3] 	sta tmp_alo
cce4 : a9a0             [ 2] 	lda #hi(HISCRN)
cce6 : 8533             [ 3] 	sta tmp_ahi
cce8 : a940             [ 2] 	lda #0x40						; Set bit 6
ccea : a000             [ 2] 	ldy #0
ccec : a200             [ 2] 	ldx #0
ccee :                       vdp_fill_vram_loop
ccee : 9132             [ 5] 	sta (tmp_alo),y
ccf0 : c8               [ 2] 	iny
ccf1 : d003             [ 3] 	bne vdp_fill_vram_noinc
ccf3 : e633             [ 5] 	inc tmp_ahi
ccf5 : e8               [ 2] 	inx
AS65 Assembler for R6502 [1.42].                                     Page   97
-------------------------------- bank\bank0.s --------------------------------

ccf6 :                       vdp_fill_vram_noinc
ccf6 : e01f             [ 2] 	cpx #hi(0x1f40)			; Reached page count?
ccf8 : d0f4             [ 3] 	bne vdp_fill_vram_loop
ccfa : c040             [ 2] 	cpy #lo(0x1f40)			; Reached byte in page?
ccfc : d0f0             [ 3] 	bne vdp_fill_vram_loop
                             
                             	; Set hires attribute in the magic location
ccfe : a91e             [ 2] 	lda #30			; Hires attribute
cd00 : 8ddfbf           [ 4] 	sta 0xbfdf		; Last pos of screen memory
                             
cd03 : c60d             [ 5] 	dec vdp_curoff
cd05 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* gr_init_hires_tables
                             ;* Generate the hires tables
                             ;* Do this whilst in hires mode
                             ;****************************************
cd06 :                       gr_init_hires_tables
                             	; Initialise address pointer to start of high re
cd06 : a900             [ 2] 	lda #lo(HISCRN)
cd08 : 8532             [ 3] 	sta tmp_alo
cd0a : a9a0             [ 2] 	lda #hi(HISCRN)
cd0c : 8533             [ 3] 	sta tmp_ahi
                             	; Starting from row zero, do 200 rows
cd0e : a000             [ 2] 	ldy #0
cd10 :                       gr_init_tab_row
                             	; Save low and high bytes of screen address in t
cd10 : a532             [ 3] 	lda tmp_alo
cd12 : 99009c           [ 5] 	sta hires_row_low,y
cd15 : a533             [ 3] 	lda tmp_ahi
cd17 : 99c89c           [ 5] 	sta hires_row_hi,y
                             	; add 40 ready for next row
cd1a : 18               [ 2] 	clc
cd1b : a532             [ 3] 	lda tmp_alo
cd1d : 6928             [ 2] 	adc #40
cd1f : 8532             [ 3] 	sta tmp_alo
cd21 : a533             [ 3] 	lda tmp_ahi
cd23 : 6900             [ 2] 	adc #0
cd25 : 8533             [ 3] 	sta tmp_ahi
                             	; Max 200 rows
cd27 : c8               [ 2] 	iny
cd28 : c0c8             [ 2] 	cpy #200
cd2a : d0e4             [ 3] 	bne gr_init_tab_row
                             	; From column 0, do 240 columns
                             	; Mask starts at 0x20, when shifts to 0 then
                             	; the column increments
cd2c : a920             [ 2] 	lda #0x20
cd2e : 8534             [ 3] 	sta tmp_blo			; Pixel mask
cd30 : a200             [ 2] 	ldx #0				; Pixel column
cd32 : a000             [ 2] 	ldy #0				; Byte column
cd34 :                       gr_init_tab_col
                             	; Save current mask and column
cd34 : a534             [ 3] 	lda tmp_blo
cd36 : 9d809e           [ 5] 	sta hires_mask,x
cd39 : 98               [ 2] 	tya
cd3a : 9d909d           [ 5] 	sta hires_col,x
                             	; shift mask, if zero then increment col and res
cd3d : 4634             [ 5] 	lsr tmp_blo
cd3f : d005             [ 3] 	bne gr_init_tab_col_skip
cd41 : a920             [ 2] 	lda #0x20
cd43 : 8534             [ 3] 	sta tmp_blo
AS65 Assembler for R6502 [1.42].                                     Page   98
-------------------------------- bank\bank0.s --------------------------------

cd45 : c8               [ 2] 	iny
cd46 :                       gr_init_tab_col_skip
cd46 : e8               [ 2] 	inx
cd47 : e0f0             [ 2] 	cpx #240
cd49 : d0e9             [ 3] 	bne gr_init_tab_col
cd4b : 60               [ 6] 	rts
                             
                             
                             
                             ;****************************************
                             ;* gr_cls
                             ;* Clear the text screen
                             ;****************************************
cd4c :                       gr_cls
cd4c : e60d             [ 5] 	inc vdp_curoff
                             	; Set screen address for text mode
cd4e : a516             [ 3] 	lda gr_scrngeom+gr_text_start
cd50 : 8527             [ 3] 	sta gr_scrngeom+gr_geom_tmp
cd52 : a517             [ 3] 	lda gr_scrngeom+gr_text_start+1
cd54 : 8528             [ 3] 	sta gr_scrngeom+gr_geom_tmp+1
                             
cd56 : a61b             [ 3] 	ldx gr_scrngeom+gr_text_h		; Count of rows to cl
                             
                             	; X and Y count bytes to fill
cd58 :                       gr_cls_row
cd58 : a000             [ 2] 	ldy #0							; Count of columns
cd5a : a526             [ 3] 	lda gr_scrngeom+gr_margin		; Is there a margin?
cd5c : f00a             [ 3] 	beq gr_cls_skip_marg
cd5e : a525             [ 3] 	lda gr_scrngeom+gr_paper		; Set Paper
cd60 : 9127             [ 5] 	sta (gr_scrngeom+gr_geom_tmp),y
cd62 : c8               [ 2] 	iny
cd63 : a524             [ 3] 	lda gr_scrngeom+gr_ink			; Set Ink
cd65 : 9127             [ 5] 	sta (gr_scrngeom+gr_geom_tmp),y
cd67 : c8               [ 2] 	iny
cd68 :                       gr_cls_skip_marg
cd68 : a510             [ 3] 	lda vdp_blank
cd6a : 850f             [ 3] 	sta vdp_curval					; Under cursor is also blank
cd6c :                       gr_cls_col
cd6c : 9127             [ 5] 	sta (gr_scrngeom+gr_geom_tmp),y
cd6e : c8               [ 2] 	iny
cd6f : c41a             [ 3] 	cpy gr_scrngeom+gr_text_w		; Done all columns?
cd71 : d0f9             [ 3] 	bne gr_cls_col
                             	; Update pointer
cd73 : 18               [ 2] 	clc
cd74 : a527             [ 3] 	lda gr_scrngeom+gr_geom_tmp
cd76 : 651a             [ 3] 	adc gr_scrngeom+gr_text_w
cd78 : 8527             [ 3] 	sta gr_scrngeom+gr_geom_tmp
cd7a : a528             [ 3] 	lda gr_scrngeom+gr_geom_tmp+1
cd7c : 6900             [ 2] 	adc #0
cd7e : 8528             [ 3] 	sta gr_scrngeom+gr_geom_tmp+1
cd80 : ca               [ 2] 	dex								; 1 row done
cd81 : d0d5             [ 3] 	bne gr_cls_row					; Done all rows?
                             
                             	; set cursror position to top left
cd83 : a510             [ 3] 	lda vdp_blank
cd85 : 850f             [ 3] 	sta vdp_curval
cd87 : a626             [ 3] 	ldx gr_scrngeom+gr_margin
cd89 : a000             [ 2] 	ldy #0
cd8b : 38               [ 2] 	sec								; Init mode
cd8c : 20bccd           [ 6] 	jsr gr_set_cur_init
                             
cd8f : c60d             [ 5] 	dec vdp_curoff
AS65 Assembler for R6502 [1.42].                                     Page   99
-------------------------------- bank\bank0.s --------------------------------

                             
cd91 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* gr_getXY_base
                             ;* Get base screen address using Y coord only
                             ;* Input : X = y coord
                             ;* Output :	gr_geom_tmp updated with base
                             ;* Regs affected : A
                             ;****************************************
cd92 :                       gr_getXY_base
                             	; Find y offset using **X register**
cd92 : 18               [ 2] 	clc
cd93 : bdcfd1           [ 4] 	lda gr_offset_40lo,x
cd96 : 6516             [ 3] 	adc gr_scrngeom+gr_text_start
cd98 : 8527             [ 3] 	sta gr_scrngeom+gr_geom_tmp
cd9a : bdebd1           [ 4] 	lda gr_offset_40hi,x
cd9d : 6517             [ 3] 	adc gr_scrngeom+gr_text_start+1
cd9f : 8528             [ 3] 	sta gr_scrngeom+gr_geom_tmp+1
                             
                             	; A = high byte of base address
cda1 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* gr_plot
                             ;* Write a byte in the screen pos
                             ;* Input :	Y,X = coord, A = Byte to put
                             ;*			X = Y COORDINATE
                             ;*			Y = X COORDINATE!!
                             ;* Output : None
                             ;* Regs affected : All
                             ;****************************************
cda2 :                       gr_plot
cda2 : 48               [ 3] 	pha					; Save byte to put
cda3 : 2092cd           [ 6] 	jsr gr_getXY_base	; base addre
cda6 : 68               [ 4] 	pla					; Get byte to put
cda7 : 9127             [ 5] 	sta (gr_scrngeom+gr_geom_tmp),y
cda9 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* gr_put
                             ;* Write a byte in the current cursor position
                             ;* Input : A = Byte to put
                             ;* Output : None
                             ;* Regs affected : All
                             ;****************************************
cdaa :                       gr_put
cdaa : e60d             [ 5] 	inc vdp_curoff		; Disable cusror
cdac : 850f             [ 3] 	sta vdp_curval		; Update cursor value
                             	; Base address plus X offset
cdae : a41c             [ 3] 	ldy gr_scrngeom+gr_cur_x
cdb0 : 911e             [ 5] 	sta (gr_scrngeom+gr_cur_ptr),y
cdb2 : c60d             [ 5] 	dec vdp_curoff		; Allow cursor flashing
cdb4 : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* gr_get
                             ;* Get the byte in the screen pos
                             ;* Input : Y,X = coord (**Y = X coordinate!!)
                             ;* Output : X,Y = address, A = peeked byte
                             ;* Regs affected : All
AS65 Assembler for R6502 [1.42].                                     Page  100
-------------------------------- bank\bank0.s --------------------------------

                             ;****************************************
cdb5 :                       gr_get
cdb5 : 2092cd           [ 6] 	jsr gr_getXY_base	; Base address
cdb8 : b127             [ 5] 	lda (gr_scrngeom+gr_geom_tmp),y
cdba : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* gr_set_cur
                             ;* Set the cursor position
                             ;* Input : X, Y = position
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
cdbb :                       gr_set_cur
cdbb : 18               [ 2] 	clc
cdbc :                       gr_set_cur_init
cdbc : e60d             [ 5] 	inc vdp_curoff				; Disable cursor
                             
cdbe : b00e             [ 3] 	bcs gr_set_cur_skip			; Skip restore if C=1
cdc0 : 8632             [ 3] 	stx tmp_alo
cdc2 : 8433             [ 3] 	sty tmp_ahi
                             	; First restore what is under the cursor
                             	; in case cursor is ON
cdc4 : 8427             [ 3] 	sty gr_scrngeom+gr_geom_tmp
cdc6 : a50f             [ 3] 	lda vdp_curval
cdc8 : a41c             [ 3] 	ldy gr_scrngeom+gr_cur_x
cdca : 911e             [ 5] 	sta (gr_scrngeom+gr_cur_ptr),y
cdcc : a427             [ 3] 	ldy gr_scrngeom+gr_geom_tmp
cdce :                       gr_set_cur_skip
                             	; Save new cursor position
cdce : 861c             [ 3] 	stx gr_scrngeom+gr_cur_x
cdd0 : 841d             [ 3] 	sty gr_scrngeom+gr_cur_y
                             
                             	; Now calculate the new cursor vram address
cdd2 : a61d             [ 3] 	ldx gr_scrngeom+gr_cur_y
cdd4 : 2092cd           [ 6] 	jsr gr_getXY_base
                             	; Update pointer in tmp, A already has high byte
cdd7 : 851f             [ 3] 	sta gr_scrngeom+gr_cur_ptr+1
cdd9 : a527             [ 3] 	lda gr_scrngeom+gr_geom_tmp
cddb : 851e             [ 3] 	sta gr_scrngeom+gr_cur_ptr
                             	; Read screen at this position, offset with X co
cddd : a41c             [ 3] 	ldy gr_scrngeom+gr_cur_x
cddf : b11e             [ 5] 	lda (gr_scrngeom+gr_cur_ptr),y
cde1 : 850f             [ 3] 	sta vdp_curval
                             	; Reset cursor so it's visible
cde3 : a900             [ 2] 	lda #0
cde5 : 850e             [ 3] 	sta vdp_curstat
cde7 : a901             [ 2] 	lda #1
cde9 : 850c             [ 3] 	sta vdp_curcnt
                             
cdeb : c60d             [ 5] 	dec vdp_curoff
                             
cded : 60               [ 6] 	rts
                             
                             
                             
                             ;****************************************
                             ;* gr_scroll_up
                             ;* Scroll screen one line up
                             ;****************************************
cdee :                       gr_scroll_up
cdee : e60d             [ 5] 	inc vdp_curoff
AS65 Assembler for R6502 [1.42].                                     Page  101
-------------------------------- bank\bank0.s --------------------------------

                             
                             	; Set source in a and dest in b
                             	; b is first line, source is second
cdf0 : 18               [ 2] 	clc
cdf1 : a516             [ 3] 	lda gr_scrngeom+gr_text_start
cdf3 : 8534             [ 3] 	sta tmp_blo
cdf5 : 651a             [ 3] 	adc gr_scrngeom+gr_text_w
cdf7 : 8532             [ 3] 	sta tmp_alo
cdf9 : a517             [ 3] 	lda gr_scrngeom+gr_text_start+1
cdfb : 8535             [ 3] 	sta tmp_bhi
cdfd : 6900             [ 2] 	adc #0
cdff : 8533             [ 3] 	sta tmp_ahi
                             
                             	; Restore what was underneath cursor
ce01 : a50f             [ 3] 	lda vdp_curval
ce03 : a41c             [ 3] 	ldy gr_scrngeom+gr_cur_x
ce05 : 911e             [ 5] 	sta (gr_scrngeom+gr_cur_ptr),y
                             
                             	; x = lines to scroll (1 less than screen height
ce07 : a61b             [ 3] 	ldx gr_scrngeom+gr_text_h
ce09 : ca               [ 2] 	dex
                             
ce0a :                       gr_scroll_cpy_ln
                             	; Start from right hand edge (easier)
ce0a : a41a             [ 3] 	ldy gr_scrngeom+gr_text_w
ce0c : 88               [ 2] 	dey
ce0d :                       gr_scroll_char
                             	; get char from source and copy to dest
ce0d : b132             [ 5] 	lda (tmp_alo),y
ce0f : 9134             [ 5] 	sta (tmp_blo),y
ce11 : 88               [ 2] 	dey
ce12 : 10f9             [ 3] 	bpl gr_scroll_char
                             
                             	; Update source address
ce14 : 18               [ 2] 	clc
ce15 : a532             [ 3] 	lda tmp_alo
ce17 : 651a             [ 3] 	adc gr_scrngeom+gr_text_w
ce19 : 8532             [ 3] 	sta tmp_alo
ce1b : a533             [ 3] 	lda tmp_ahi
ce1d : 6900             [ 2] 	adc #0
ce1f : 8533             [ 3] 	sta tmp_ahi
                             	; Update destination address
ce21 : 18               [ 2] 	clc
ce22 : a534             [ 3] 	lda tmp_blo
ce24 : 651a             [ 3] 	adc gr_scrngeom+gr_text_w
ce26 : 8534             [ 3] 	sta tmp_blo
ce28 : a535             [ 3] 	lda tmp_bhi
ce2a : 6900             [ 2] 	adc #0
ce2c : 8535             [ 3] 	sta tmp_bhi
                             
                             	; One line complete
ce2e : ca               [ 2] 	dex
ce2f : d0d9             [ 3] 	bne gr_scroll_cpy_ln
                             
                             	; Source is pointing at last line
                             	; Last line needs filling
ce31 : a000             [ 2] 	ldy #0							; Start from left
ce33 : a526             [ 3] 	lda gr_scrngeom+gr_margin		; Margin?
ce35 : f00a             [ 3] 	beq gr_scroll_marg				; Skip if not
ce37 : a525             [ 3] 	lda gr_scrngeom+gr_paper		; Set Paper
ce39 : 9127             [ 5] 	sta (gr_scrngeom+gr_geom_tmp),y
ce3b : c8               [ 2] 	iny
AS65 Assembler for R6502 [1.42].                                     Page  102
-------------------------------- bank\bank0.s --------------------------------

ce3c : a524             [ 3] 	lda gr_scrngeom+gr_ink			; Set Ink
ce3e : 9127             [ 5] 	sta (gr_scrngeom+gr_geom_tmp),y
ce40 : c8               [ 2] 	iny
ce41 :                       gr_scroll_marg
                             	; Needs to be filled with blank
ce41 : a510             [ 3] 	lda vdp_blank
ce43 : 850f             [ 3] 	sta vdp_curval			; Also this is the cursor value
ce45 :                       gr_scroll_erase_ln
ce45 : 9134             [ 5] 	sta (tmp_blo),y
ce47 : c8               [ 2] 	iny
ce48 : c41a             [ 3] 	cpy gr_scrngeom+gr_text_w
ce4a : d0f9             [ 3] 	bne gr_scroll_erase_ln
                             
ce4c : c60d             [ 5] 	dec vdp_curoff
                             
ce4e : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* gr_new_ln
                             ;* Carry out a new line
                             ;* Input : None
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
ce4f :                       gr_new_ln
                             	; X pos is zero, Y needs to increment
ce4f : a626             [ 3] 	ldx gr_scrngeom+gr_margin
ce51 : a41d             [ 3] 	ldy gr_scrngeom+gr_cur_y
ce53 : c8               [ 2] 	iny
ce54 : c41b             [ 3] 	cpy gr_scrngeom+gr_text_h
ce56 : d00c             [ 3] 	bne gr_nl_skip_nl
                             	; If got here then screen needs to scroll
                             	; Common routine also used by cursor right
ce58 :                       gr_scroll_routine
ce58 : 88               [ 2] 	dey
ce59 : 8a               [ 2] 	txa
ce5a : 48               [ 3] 	pha
ce5b : 98               [ 2] 	tya
ce5c : 48               [ 3] 	pha
ce5d : 20eecd           [ 6] 	jsr gr_scroll_up
ce60 : 68               [ 4] 	pla
ce61 : a8               [ 2] 	tay
ce62 : 68               [ 4] 	pla
ce63 : aa               [ 2] 	tax
ce64 :                       gr_nl_skip_nl
ce64 : 4cbbcd           [ 3] 	jmp gr_set_cur
                             
                             
                             ;****************************************
                             ;* gr_cur_right
                             ;* Advance cursor position
                             ;* Input : None
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
ce67 :                       gr_cur_right
                             	; Load cursor x,y position
ce67 : a61c             [ 3] 	ldx gr_scrngeom+gr_cur_x
ce69 : a41d             [ 3] 	ldy gr_scrngeom+gr_cur_y
                             
                             	; Move cursor right
ce6b : e8               [ 2] 	inx
AS65 Assembler for R6502 [1.42].                                     Page  103
-------------------------------- bank\bank0.s --------------------------------

                             	; Check if reached past edge of line
ce6c : e41a             [ 3] 	cpx gr_scrngeom+gr_text_w
ce6e : d0f4             [ 3] 	bne gr_nl_skip_nl
                             	; If got here then wrap to next line
ce70 : a626             [ 3] 	ldx gr_scrngeom+gr_margin
ce72 : c8               [ 2] 	iny
ce73 : c41b             [ 3] 	cpy gr_scrngeom+gr_text_h
ce75 : f0e1             [ 3] 	beq gr_scroll_routine		; Common scroll routine
ce77 : d0eb             [ 3] 	bne gr_nl_skip_nl			; Common set cursor
                             
                             ;****************************************
                             ;* gr_cur_left
                             ;* Advance cursor left
                             ;* Input : None
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
ce79 :                       gr_cur_left
                             	; Load cursor x,y position, load X last to check
ce79 : a41d             [ 3] 	ldy gr_scrngeom+gr_cur_y
ce7b : a61c             [ 3] 	ldx gr_scrngeom+gr_cur_x
                             
                             	; Decrement screen pointer
                             	; Move cursor left
ce7d : e426             [ 3] 	cpx gr_scrngeom+gr_margin	; Already at left marg
ce7f : d007             [ 3] 	bne gr_cur_skip_at_left		; No, then just go left
ce81 : c000             [ 2] 	cpy #0						; Else check if can wrap up
ce83 : f007             [ 3] 	beq gr_cur_skip_at_tl
ce85 : 88               [ 2] 	dey
ce86 : a61a             [ 3] 	ldx gr_scrngeom+gr_text_w
ce88 :                       gr_cur_skip_at_left
ce88 : ca               [ 2] 	dex
ce89 : 4cbbcd           [ 3] 	jmp gr_set_cur
                             
ce8c :                       gr_cur_skip_at_tl
ce8c : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* gr_cur_up
                             ;* Advance cursor up
                             ;* Input : None
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
ce8d :                       gr_cur_up
                             	; Load cursor x,y position, load Y last to check
ce8d : a61c             [ 3] 	ldx gr_scrngeom+gr_cur_x
ce8f : a41d             [ 3] 	ldy gr_scrngeom+gr_cur_y
                             	; if y==0 then don't do anything
ce91 : f0f9             [ 3] 	beq gr_cur_skip_at_tl	; Just somewhere with an r
ce93 : 88               [ 2] 	dey
ce94 : 4cbbcd           [ 3] 	jmp gr_set_cur
                             
                             ;****************************************
                             ;* gr_cur_down
                             ;* Advance cursor down
                             ;* Input : None
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
ce97 :                       gr_cur_down
                             	; Load cursor x,y position
AS65 Assembler for R6502 [1.42].                                     Page  104
-------------------------------- bank\bank0.s --------------------------------

ce97 : a61c             [ 3] 	ldx gr_scrngeom+gr_cur_x
ce99 : a41d             [ 3] 	ldy gr_scrngeom+gr_cur_y
ce9b : c8               [ 2] 	iny
                             	; If already at  bottom then don't do anything
ce9c : c41b             [ 3] 	cpy gr_scrngeom+gr_text_h			
ce9e : f0ec             [ 3] 	beq gr_cur_skip_at_tl				; Just somewhere with a
cea0 : 20bbcd           [ 6] 	jsr gr_set_cur
                             
cea3 :                       gr_cur_skip_at_bot
cea3 : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* gr_del
                             ;* Action del
                             ;* Input : None
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
cea4 :                       gr_del
cea4 : 2079ce           [ 6] 	jsr gr_cur_left
cea7 : a920             [ 2] 	lda #' '							; Put a space
cea9 : 4caacd           [ 3] 	jmp gr_put
                             
                             ;****************************************
                             ;* gr_get_key
                             ;* Waits for a key press, C=1 synchronous
                             ;* A = Key code, C=0 means valid code
                             ;****************************************
ceac :                       gr_get_key
                             	; save X,Y but A is ok to trample
ceac : 8a               [ 2] 	txa
cead : 48               [ 3] 	pha
ceae : 98               [ 2] 	tya
ceaf : 48               [ 3] 	pha
ceb0 :                       gr_get_key_2
ceb0 : 08               [ 3] 	php
ceb1 : 206bc8           [ 6] 	jsr kb_get_key
ceb4 : 9006             [ 3] 	bcc gr_key_check_key
ceb6 : 28               [ 4] 	plp									; Get async pref
ceb7 : b0f7             [ 3] 	bcs	gr_get_key_2					; Keep checking if sync
ceb9 : 38               [ 2] 	sec
ceba : b019             [ 3] 	bcs gr_key_tidy_up					; Finish if not
cebc :                       gr_key_check_key						; Check the key pressed
cebc : c901             [ 2] 	cmp #UTF_ACK						; Copy key pressed?
cebe : d004             [ 3] 	bne gr_key_skip_copy
cec0 : a50f             [ 3] 	lda vdp_curval						; If yes the get char under 
cec2 : b00f             [ 3] 	bcs gr_key_got_key					; Always branches (n=1, c
cec4 :                       gr_key_skip_copy
cec4 : c914             [ 2] 	cmp #CTRL_CAPS
cec6 : d00b             [ 3] 	bne gr_key_got_key
cec8 : a52c             [ 3] 	lda kb_stat							; Toggle caps bit
ceca : 4901             [ 2] 	eor #KB_CAPSLK
cecc : 852c             [ 3] 	sta kb_stat
cece : 28               [ 4] 	plp									; Get back synchronous pref
cecf : b0df             [ 3] 	bcs gr_get_key_2					; And check again for sync
ced1 : 900b             [ 3] 	bcc gr_key_no_key					; Else no key
ced3 :                       gr_key_got_key
ced3 : 28               [ 4] 	plp
ced4 : 18               [ 2] 	clc									; Ensure C=0 for valid key
ced5 :                       gr_key_tidy_up
                             	; restore X,Y but don't lose A
AS65 Assembler for R6502 [1.42].                                     Page  105
-------------------------------- bank\bank0.s --------------------------------

ced5 : 8538             [ 3] 	sta tmp_d
ced7 : 68               [ 4] 	pla
ced8 : a8               [ 2] 	tay
ced9 : 68               [ 4] 	pla
ceda : aa               [ 2] 	tax
cedb : a538             [ 3] 	lda tmp_d
cedd : 60               [ 6] 	rts
cede :                       gr_key_no_key
cede : 28               [ 4] 	plp
cedf : 38               [ 2] 	sec									; Ensure C=1 for invalid key
cee0 : b0f3             [ 3] 	bcs gr_key_tidy_up					; Always branches
                             
                             ;****************************************
                             ;* gr_put_byte
                             ;* Put a byte out
                             ;* Input : A = Byte to put
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
cee2 :                       gr_put_byte
                             	_pushAXY
                             
ceeb : 20f4ce           [ 6] 	jsr gr_put_byte_low
                             	_pullAXY
                             
cef3 :                       gr_no_special
cef3 : 60               [ 6] 	rts
                             
cef4 :                       gr_put_byte_low
cef4 : c97f             [ 2] 	cmp #UTF_DEL			; Del key
cef6 : f004             [ 3] 	beq gr_process_special
cef8 : c920             [ 2] 	cmp #32					; Special char?
cefa : b01b             [ 4] 	bcs gr_printable		; >=32 == carry clear
cefc :                       gr_process_special
                             	; Else find special behaviour to do
cefc : a2ff             [ 2] 	ldx #-1
cefe : 8532             [ 3] 	sta tmp_alo
cf00 :                       gr_special_loop
cf00 : e8               [ 2] 	inx
cf01 : bd1dcf           [ 4] 	lda gr_special_ch,x
cf04 : f0ed             [ 4] 	beq gr_no_special		; Somewhere with an rts!
cf06 : c532             [ 3] 	cmp tmp_alo
cf08 : d0f6             [ 3] 	bne gr_special_loop
cf0a : bd26cf           [ 4] 	lda gr_special_fn_lo,x
cf0d : 8532             [ 3] 	sta tmp_alo
cf0f : bd2ecf           [ 4] 	lda gr_special_fn_hi,x
cf12 : 8533             [ 3] 	sta tmp_ahi
cf14 : 6c3200           [ 6] 	jmp (tmp_alo)
                             
                             	;	Normal caracter processing here.
cf17 :                       gr_printable
                             	; Place in current position and move right
cf17 : 20aacd           [ 6] 	jsr gr_put
cf1a : 4c67ce           [ 3] 	jmp gr_cur_right
                             
cf1d :                       gr_special_ch
cf1d : 0d                    	db UTF_CR
cf1e : 7f                    	db UTF_DEL
cf1f : 08                    	db CRSR_LEFT
cf20 : 09                    	db CRSR_RIGHT
cf21 : 0b                    	db CRSR_UP
cf22 : 0a                    	db CRSR_DOWN
AS65 Assembler for R6502 [1.42].                                     Page  106
-------------------------------- bank\bank0.s --------------------------------

cf23 : 0c                    	db UTF_FF
cf24 : 07                    	db UTF_BEL
cf25 : 00                    	db 0
                             
cf26 :                       gr_special_fn_lo
cf26 : 4f                    	db lo(gr_new_ln)
cf27 : a4                    	db lo(gr_del)
cf28 : 79                    	db lo(gr_cur_left)
cf29 : 67                    	db lo(gr_cur_right)
cf2a : 8d                    	db lo(gr_cur_up)
cf2b : 97                    	db lo(gr_cur_down)
cf2c : 4c                    	db lo(gr_cls)
cf2d : e5                    	db lo(init_snd)
                             
cf2e :                       gr_special_fn_hi
cf2e : ce                    	db hi(gr_new_ln)
cf2f : ce                    	db hi(gr_del)
cf30 : ce                    	db hi(gr_cur_left)
cf31 : ce                    	db hi(gr_cur_right)
cf32 : ce                    	db hi(gr_cur_up)
cf33 : ce                    	db hi(gr_cur_down)
cf34 : cd                    	db hi(gr_cls)
cf35 : d3                    	db hi(init_snd)
                             
                             ; Special command to print to the screen
                             ; Y,A=Message, zero terminated
cf36 :                       gr_print_msg
cf36 : 8449             [ 3] 	sty num_tmp
cf38 : 854a             [ 3] 	sta num_tmp+1
cf3a : a000             [ 2] 	ldy #0
cf3c :                       gr_print_msg_loop
cf3c : b149             [ 5] 	lda (num_tmp),y
cf3e : f006             [ 3] 	beq gr_print_msg_done
cf40 : 20e2ce           [ 6] 	jsr gr_put_byte
cf43 : c8               [ 2] 	iny
cf44 : d0f6             [ 3] 	bne gr_print_msg_loop
cf46 :                       gr_print_msg_done
cf46 : a54a             [ 3] 	lda num_tmp+1
cf48 : a449             [ 3] 	ldy num_tmp
cf4a : 60               [ 6] 	rts
                             
                             ;******* HIRES STUFF *****
                             
                             ;****************************************
                             ;* gr_fill
                             ;* Fill bytes X,Y coordinates with char code A
                             ;* Input : X,Y = coord, A = Char code
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
                             
                             ;****************************************
                             ;* gr_hchar
                             ;* Plot character to hires X,Y coordinates with c
                             ;* Input : X,Y = coord, A = Char code
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
cf4b :                       gr_hchar
                             	; Multiply char code by 8
                             	; and add to char font base
                             	; tmp_clo contains base address
AS65 Assembler for R6502 [1.42].                                     Page  107
-------------------------------- bank\bank0.s --------------------------------

cf4b : 0a               [ 2] 	asl a
cf4c : 2637             [ 5] 	rol tmp_chi
cf4e : 0a               [ 2] 	asl a
cf4f : 2637             [ 5] 	rol tmp_chi
cf51 : 0a               [ 2] 	asl a
cf52 : 2637             [ 5] 	rol tmp_chi
cf54 : 18               [ 2] 	clc
cf55 : 6514             [ 3] 	adc gr_scrngeom+gr_char
cf57 : 8536             [ 3] 	sta tmp_clo
cf59 : a537             [ 3] 	lda tmp_chi
cf5b : 2907             [ 2] 	and #7
cf5d : 6515             [ 3] 	adc gr_scrngeom+gr_char+1
cf5f : 8537             [ 3] 	sta tmp_chi
                             
                             	; Set up destination position
cf61 : 20f1cf           [ 6] 	jsr gr_point_setup
                             	; tmp_alo contains address including column offs
cf64 : 18               [ 2] 	clc
cf65 : 98               [ 2] 	tya
cf66 : 6532             [ 3] 	adc tmp_alo
cf68 : 8532             [ 3] 	sta tmp_alo
cf6a : a533             [ 3] 	lda tmp_ahi
cf6c : 6900             [ 2] 	adc #0
cf6e : 8533             [ 3] 	sta tmp_ahi
                             
cf70 : a534             [ 3] 	lda tmp_blo					; Get the mask
cf72 : a207             [ 2] 	ldx #7
cf74 :                       gr_hchar_mask					; Calculate how many shifts to 
cf74 : ca               [ 2] 	dex
cf75 : 4a               [ 2] 	lsr a
cf76 : d0fc             [ 3] 	bne gr_hchar_mask
cf78 : 8634             [ 3] 	stx tmp_blo					; number between 1 and 6 : shift
                             
                             	; copy font bytes and shift the required number 
                             	; go from bottom to top as data gets stored on t
cf7a : a007             [ 2] 	ldy #7
cf7c :                       gr_hchar_getfont
cf7c : b136             [ 5] 	lda (tmp_clo),y
cf7e : 853d             [ 3] 	sta ztmp_24
cf80 : a900             [ 2] 	lda #0
cf82 : 853e             [ 3] 	sta ztmp_24+1
                             
                             	; shift right number of times
cf84 : a634             [ 3] 	ldx tmp_blo
cf86 :                       gr_hchar_rot1bit
cf86 : ca               [ 2] 	dex
cf87 : f00d             [ 3] 	beq gr_hchar_rot1bit_nx
cf89 : 463d             [ 5] 	lsr ztmp_24					; Rotate left hand side
cf8b : a53e             [ 3] 	lda ztmp_24+1				; Rotate right hand side
cf8d : 9002             [ 3] 	bcc gr_hchar_rot1bit_bcc
cf8f : 0940             [ 2] 	ora #0x40					; account for 6 bits per byte
cf91 :                       gr_hchar_rot1bit_bcc
cf91 : 4a               [ 2] 	lsr a
cf92 : 853e             [ 3] 	sta ztmp_24+1
cf94 : 10f0             [ 3] 	bpl gr_hchar_rot1bit		; Always as lsr sets N=0
cf96 :                       gr_hchar_rot1bit_nx
cf96 : a53e             [ 3] 	lda ztmp_24+1				; Get RHS
cf98 : 48               [ 3] 	pha							; Push RHS on to stack
cf99 : a53d             [ 3] 	lda ztmp_24					; Get LHS
cf9b : 48               [ 3] 	pha							; Push that too - LH gets pulled first
cf9c : 88               [ 2] 	dey							; Bottom to to lines
cf9d : 10dd             [ 3] 	bpl gr_hchar_getfont
AS65 Assembler for R6502 [1.42].                                     Page  108
-------------------------------- bank\bank0.s --------------------------------

                             
                             	; Now copy shift source to destination, accounti
cf9f : a200             [ 2] 	ldx #0
cfa1 :                       gr_hchar_copyline
cfa1 : a420             [ 3] 	ldy gr_scrngeom+gr_pixmode	; Mode determines how
cfa3 : f024             [ 3] 	beq gr_hchar_copyline_0
cfa5 : c002             [ 2] 	cpy #2
cfa7 : f010             [ 3] 	beq gr_hchar_copyline_2
                             
                             	; Mode = 1 : OR
cfa9 : a000             [ 2] 	ldy #0						; Get lh side source
cfab : 68               [ 4] 	pla
cfac : 1132             [ 5] 	ora (tmp_alo),y
cfae : 9132             [ 5] 	sta (tmp_alo),y
cfb0 : c8               [ 2] 	iny							; Get rh side source
cfb1 : 68               [ 4] 	pla
cfb2 : 1132             [ 5] 	ora (tmp_alo),y
cfb4 : 9132             [ 5] 	sta (tmp_alo),y
cfb6 : 4cdecf           [ 3] 	jmp gr_hchar_copyline_nx
cfb9 :                       gr_hchar_copyline_2
                             	; Mode = 2 : EOR
cfb9 : a000             [ 2] 	ldy #0						; Get lh side source
cfbb : 68               [ 4] 	pla
cfbc : 5132             [ 5] 	eor (tmp_alo),y
cfbe : 9132             [ 5] 	sta (tmp_alo),y
cfc0 : c8               [ 2] 	iny							; Get rh side source
cfc1 : 68               [ 4] 	pla
cfc2 : 5132             [ 5] 	eor (tmp_alo),y
cfc4 : 9132             [ 5] 	sta (tmp_alo),y
cfc6 : 4cdecf           [ 3] 	jmp gr_hchar_copyline_nx
cfc9 :                       gr_hchar_copyline_0
                             	; Mode = 0 : erase
cfc9 : a000             [ 2] 	ldy #0						; Get lh side source
cfcb : 68               [ 4] 	pla
cfcc : 853d             [ 3] 	sta ztmp_24
cfce : 1132             [ 5] 	ora (tmp_alo),y
cfd0 : 453d             [ 3] 	eor ztmp_24
cfd2 : 9132             [ 5] 	sta (tmp_alo),y
cfd4 : c8               [ 2] 	iny							; Get rh side source
cfd5 : 68               [ 4] 	pla
cfd6 : 853d             [ 3] 	sta ztmp_24
cfd8 : 1132             [ 5] 	ora (tmp_alo),y
cfda : 453d             [ 3] 	eor ztmp_24
cfdc : 9132             [ 5] 	sta (tmp_alo),y
cfde :                       gr_hchar_copyline_nx
cfde : 18               [ 2] 	clc							; Next address
cfdf : a532             [ 3] 	lda tmp_alo
cfe1 : 6928             [ 2] 	adc #40
cfe3 : 8532             [ 3] 	sta tmp_alo
cfe5 : a533             [ 3] 	lda tmp_alo+1
cfe7 : 6900             [ 2] 	adc #0
cfe9 : 8533             [ 3] 	sta tmp_alo+1
cfeb : e8               [ 2] 	inx
cfec : e008             [ 2] 	cpx #8
cfee : d0b1             [ 3] 	bne gr_hchar_copyline
cff0 : 60               [ 6] 	rts							; Done after 8 lines
                             
                             ;****************************************
                             ;* gr_point_setup
                             ;* Calculate information about a pixel location
                             ;* Input : X,Y = coord
                             ;* Output : None
AS65 Assembler for R6502 [1.42].                                     Page  109
-------------------------------- bank\bank0.s --------------------------------

                             ;* Regs affected :
                             ;* tmp_alo,hi contains the row base address
                             ;* tmp_blo contains the mask index
                             ;* tmp_bhi contains the column offset in to row
                             ;* Y is same as tmp_bhi
                             ;* X is same as tmp_blo
                             ;****************************************
cff1 :                       gr_point_setup
                             	; Get row address
cff1 : b9009c           [ 4] 	lda hires_row_low,y
cff4 : 8532             [ 3] 	sta tmp_alo
cff6 : b9c89c           [ 4] 	lda hires_row_hi,y
cff9 : 8533             [ 3] 	sta tmp_ahi
                             	; Get the pixel mask
cffb : bd809e           [ 4] 	lda hires_mask,x
cffe : 8534             [ 3] 	sta tmp_blo
                             	; Get the column offset to Y
d000 : bc909d           [ 4] 	ldy hires_col,x
d003 : 60               [ 6] 	rts
                             
d004 :                       gr_set_hires_cur
d004 : 8622             [ 3] 	stx gr_scrngeom+gr_hires_x
d006 : 8423             [ 3] 	sty gr_scrngeom+gr_hires_y
d008 : 60               [ 6] 	rts
                             
                             ;* Get pixel value at X,Y in to A
d009 :                       gr_pixel
d009 : 20f1cf           [ 6] 	jsr gr_point_setup				; Set up mask and addresse
d00c : b132             [ 5] 	lda (tmp_alo),y					; Get screen byte
d00e : 2534             [ 3] 	and tmp_blo						; Check if pixel coincides with
d010 : 60               [ 6] 	rts
                             
                             ;* Plot a point based on X,Y coordinates
d011 :                       gr_point
d011 : e0f0             [ 2] 	cpx #240						; Check bounds
d013 : b028             [ 3] 	bcs gr_point_done
d015 : c0c8             [ 2] 	cpy #200
d017 : b024             [ 3] 	bcs gr_point_done
                             
                             	;** FOR SPEED COPYING THE POINT SETUP ROUTINE
                             	; Get row address
d019 : b9009c           [ 4] 	lda hires_row_low,y
d01c : 8532             [ 3] 	sta tmp_alo
d01e : b9c89c           [ 4] 	lda hires_row_hi,y
d021 : 8533             [ 3] 	sta tmp_ahi
                             	; Get the pixel mask
d023 : bd809e           [ 4] 	lda hires_mask,x
d026 : 8534             [ 3] 	sta tmp_blo
                             	; Get the column offset to Y
d028 : bc909d           [ 4] 	ldy hires_col,x
                             
                             ;	jsr gr_point_setup				; Set up mask and address
                             ;* Plot a point based on tmp_alo base, Y offset a
d02b : b132             [ 5] 	lda (tmp_alo),y					; Get screen byte
d02d : a620             [ 3] 	ldx gr_scrngeom+gr_pixmode		; Look at the mode
d02f : e002             [ 2] 	cpx #2							; If eor mode then go and write
d031 : f006             [ 3] 	beq gr_point_eor
d033 : 0534             [ 3] 	ora tmp_blo						; Or with MASK
d035 : e000             [ 2] 	cpx #0							; But if not then eor
d037 : d002             [ 3] 	bne gr_point_write
d039 :                       gr_point_eor
d039 : 4534             [ 3] 	eor tmp_blo						; EOR with MASK
AS65 Assembler for R6502 [1.42].                                     Page  110
-------------------------------- bank\bank0.s --------------------------------

d03b :                       gr_point_write
d03b : 9132             [ 5] 	sta (tmp_alo),y
d03d :                       gr_point_done
d03d : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* gr_circle
                             ;* Draw a circle centre x0,y0, radius r
                             ;* Input :	num_a   = x0
                             ;*			num_a+1 = y0
                             ;*			num_a+2 = r
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
d03e :                       gr_circle
                             ; Local definitions of temp space to make
                             ; the rest of the code easier to read
003d =                       grc_x0 	= (num_a)
003e =                       grc_y0 	= (num_a+1)
003f =                       grc_r 	= (num_a+2)
0040 =                       grc_x 	= (num_a+3)
0042 =                       grc_y	= (num_b+1)
0043 =                       grc_d	= (num_b+2)
                             
                             	;x = radius
d03e : a53f             [ 3] 	lda grc_r
d040 : 8540             [ 3] 	sta grc_x
                             	;decision = 1 - x
d042 : a900             [ 2] 	lda #0
                             	;y = 0
d044 : 8542             [ 3] 	sta grc_y
d046 : 18               [ 2] 	clc			; A=0 so CLC subtracts 1 :-)
d047 : e540             [ 3] 	sbc grc_x
d049 : 8543             [ 3] 	sta grc_d
d04b :                       gr_circle_plot
                             	;while(x >= y)
d04b : a540             [ 3] 	lda grc_x
d04d : c542             [ 3] 	cmp grc_y
d04f : 902a             [ 3] 	bcc gr_circle_done
                             	;plot 8 points on current x,y
d051 : 207cd0           [ 6] 	jsr gr_circle_points
                             	;y++
d054 : e642             [ 5] 	inc grc_y
                             	;if d<=0
d056 : a543             [ 3] 	lda grc_d
d058 : f014             [ 3] 	beq gr_circle_d_lte0
d05a : 3012             [ 3] 	bmi gr_circle_d_lte0
                             	;else
                             	;x--
d05c : c640             [ 5] 	dec grc_x
                             	;decision += 2 * (y - x) + 1
d05e : a542             [ 3] 	lda grc_y
d060 : 38               [ 2] 	sec
d061 : e540             [ 3] 	sbc grc_x
d063 : 0a               [ 2] 	asl a
d064 : 18               [ 2] 	clc
d065 : 6901             [ 2] 	adc #1
d067 : 6543             [ 3] 	adc grc_d
d069 : 8543             [ 3] 	sta grc_d
d06b : 4c4bd0           [ 3] 	jmp gr_circle_plot
d06e :                       gr_circle_d_lte0
AS65 Assembler for R6502 [1.42].                                     Page  111
-------------------------------- bank\bank0.s --------------------------------

                             	;decision += 2 * y + 1
d06e : a542             [ 3] 	lda grc_y
d070 : 0a               [ 2] 	asl a
d071 : 18               [ 2] 	clc
d072 : 6901             [ 2] 	adc #1
d074 : 6543             [ 3] 	adc grc_d
d076 : 8543             [ 3] 	sta grc_d
d078 : 4c4bd0           [ 3] 	jmp gr_circle_plot
d07b :                       gr_circle_done
d07b : 60               [ 6] 	rts
d07c :                       gr_circle_points
                             ; Local names of temp storage
                             ; to make code easier to read
                             	;DrawPixel( x + x0,  yh + y0);
d07c : a540             [ 3] 	lda grc_x
d07e : 18               [ 2] 	clc
d07f : 653d             [ 3] 	adc grc_x0
d081 : aa               [ 2] 	tax
d082 : a542             [ 3] 	lda grc_y
d084 : 18               [ 2] 	clc
d085 : 653e             [ 3] 	adc grc_y0
d087 : a8               [ 2] 	tay
d088 : 2011d0           [ 6] 	jsr gr_point
                             	;DrawPixel( y + x0,  xh + y0);
d08b : a542             [ 3] 	lda grc_y
d08d : 18               [ 2] 	clc
d08e : 653d             [ 3] 	adc grc_x0
d090 : aa               [ 2] 	tax
d091 : a540             [ 3] 	lda grc_x
d093 : 18               [ 2] 	clc
d094 : 653e             [ 3] 	adc grc_y0
d096 : a8               [ 2] 	tay
d097 : 2011d0           [ 6] 	jsr gr_point
                             	;DrawPixel(-x + x0,  yh + y0);
d09a : a53d             [ 3] 	lda grc_x0
d09c : 38               [ 2] 	sec
d09d : e540             [ 3] 	sbc grc_x
d09f : aa               [ 2] 	tax
d0a0 : a542             [ 3] 	lda grc_y
d0a2 : 18               [ 2] 	clc
d0a3 : 653e             [ 3] 	adc grc_y0
d0a5 : a8               [ 2] 	tay
d0a6 : 2011d0           [ 6] 	jsr gr_point
                             	;DrawPixel(-y + x0,  xh + y0);
d0a9 : a53d             [ 3] 	lda grc_x0
d0ab : 38               [ 2] 	sec
d0ac : e542             [ 3] 	sbc grc_y
d0ae : aa               [ 2] 	tax
d0af : a540             [ 3] 	lda grc_x
d0b1 : 18               [ 2] 	clc
d0b2 : 653e             [ 3] 	adc grc_y0
d0b4 : a8               [ 2] 	tay
d0b5 : 2011d0           [ 6] 	jsr gr_point
                             	;DrawPixel(-x + x0, -yh + y0);
d0b8 : a53d             [ 3] 	lda grc_x0
d0ba : 38               [ 2] 	sec
d0bb : e540             [ 3] 	sbc grc_x
d0bd : aa               [ 2] 	tax
d0be : a53e             [ 3] 	lda grc_y0
d0c0 : 38               [ 2] 	sec
d0c1 : e542             [ 3] 	sbc grc_y
d0c3 : a8               [ 2] 	tay
AS65 Assembler for R6502 [1.42].                                     Page  112
-------------------------------- bank\bank0.s --------------------------------

d0c4 : 2011d0           [ 6] 	jsr gr_point
                             	;DrawPixel(-y + x0, -xh + y0);
d0c7 : a53d             [ 3] 	lda grc_x0
d0c9 : 38               [ 2] 	sec
d0ca : e542             [ 3] 	sbc grc_y
d0cc : aa               [ 2] 	tax
d0cd : a53e             [ 3] 	lda grc_y0
d0cf : 38               [ 2] 	sec
d0d0 : e540             [ 3] 	sbc grc_x
d0d2 : a8               [ 2] 	tay
d0d3 : 2011d0           [ 6] 	jsr gr_point
                             	;DrawPixel( x + x0, -yh + y0);
d0d6 : a540             [ 3] 	lda grc_x
d0d8 : 18               [ 2] 	clc
d0d9 : 653d             [ 3] 	adc grc_x0
d0db : aa               [ 2] 	tax
d0dc : a53e             [ 3] 	lda grc_y0
d0de : 38               [ 2] 	sec
d0df : e542             [ 3] 	sbc grc_y
d0e1 : a8               [ 2] 	tay
d0e2 : 2011d0           [ 6] 	jsr gr_point
                             	;DrawPixel( y + x0, -xh + y0);
d0e5 : a542             [ 3] 	lda grc_y
d0e7 : 18               [ 2] 	clc
d0e8 : 653d             [ 3] 	adc grc_x0
d0ea : aa               [ 2] 	tax
d0eb : a53e             [ 3] 	lda grc_y0
d0ed : 38               [ 2] 	sec
d0ee : e540             [ 3] 	sbc grc_x
d0f0 : a8               [ 2] 	tay
d0f1 : 4c11d0           [ 3] 	jmp gr_point
                             
                             
                             
                             ;****************************************
                             ;* gr_line
                             ;* Draw a line from x0,y0 -> x1,y1
                             ;* Input :	num_a   = x0
                             ;*			num_a+1 = y0
                             ;*			num_a+2 = x1
                             ;*			num_a+3 = y1
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
d0f4 :                       gr_line
                             
                             ; Local definitions of temp space to make
                             ; the rest of the code easier to read
003d =                       grl_x0 	= (num_a)
003e =                       grl_y0 	= (num_a+1)
003f =                       grl_x1 	= (num_a+2)
0040 =                       grl_y1 	= (num_a+3)
0041 =                       grl_dx	= (ztmp_24+4)
0042 =                       grl_dy	= (ztmp_24+5)
0043 =                       grl_xyyx= (ztmp_24+6)
0044 =                       grl_2dx	= (ztmp_24+7)			; Word
0046 =                       grl_2dy	= (ztmp_24+9)			; Word
0048 =                       grl_2dxy= (ztmp_24+11)			; Word
004a =                       grl_sinx= (ztmp_24+13)
004b =                       grl_p	= (ztmp_24+14)			; Word
004d =                       grl_siny= (ztmp_24+16)
                             
AS65 Assembler for R6502 [1.42].                                     Page  113
-------------------------------- bank\bank0.s --------------------------------

                             	; Start from hires cursor position
                             	; New cursor pos = end of line pos
d0f4 : a522             [ 3] 	lda gr_scrngeom+gr_hires_x
d0f6 : 853d             [ 3] 	sta grl_x0
d0f8 : a523             [ 3] 	lda gr_scrngeom+gr_hires_y
d0fa : 853e             [ 3] 	sta grl_y0
d0fc : a63f             [ 3] 	ldx grl_x1
d0fe : a440             [ 3] 	ldy grl_y1
d100 : 2004d0           [ 6] 	jsr gr_set_hires_cur
                             	
d103 : a900             [ 2] 	lda #0
d105 : 8543             [ 3] 	sta grl_xyyx				; Assume normal xy axis
                             
                             	; check if abs(dy)>abs(dx) if so need to swap xy
                             	; num_b = abs(x), num_b+1 = abs(dy)
d107 : 38               [ 2] 	sec
d108 : a53f             [ 3] 	lda grl_x1
d10a : e53d             [ 3] 	sbc grl_x0
d10c : b004             [ 3] 	bcs gr_line_skip_dx_neg
d10e : 49ff             [ 2] 	eor #0xff
d110 : 6901             [ 2] 	adc #1
d112 :                       gr_line_skip_dx_neg
d112 : 8541             [ 3] 	sta grl_dx
d114 : 38               [ 2] 	sec
d115 : a540             [ 3] 	lda grl_y1
d117 : e53e             [ 3] 	sbc grl_y0
d119 : b004             [ 3] 	bcs gr_line_skip_dy_neg
d11b : 49ff             [ 2] 	eor #0xff
d11d : 6901             [ 2] 	adc #1
d11f :                       gr_line_skip_dy_neg
d11f : 8542             [ 3] 	sta grl_dy
d121 : c541             [ 3] 	cmp grl_dx
d123 : 901a             [ 3] 	bcc gr_line_skip_xy_swap
                             	; swap xy axes and also dx and dy
d125 : a53d             [ 3] 	lda grl_x0					; swap x0 and y0
d127 : a63e             [ 3] 	ldx grl_y0
d129 : 853e             [ 3] 	sta grl_y0
d12b : 863d             [ 3] 	stx grl_x0
d12d : a53f             [ 3] 	lda grl_x1					; swap x1 and y1
d12f : a640             [ 3] 	ldx grl_y1
d131 : 8540             [ 3] 	sta grl_y1
d133 : 863f             [ 3] 	stx grl_x1
d135 : a541             [ 3] 	lda grl_dx					; swap dy and dx
d137 : a642             [ 3] 	ldx grl_dy
d139 : 8542             [ 3] 	sta grl_dy
d13b : 8641             [ 3] 	stx grl_dx
d13d : e643             [ 5] 	inc grl_xyyx				; set flag to Not Z to know abou
                             
d13f :                       gr_line_skip_xy_swap
                             	; assume going from left to right and top to bot
d13f : a901             [ 2] 	lda #1
d141 : a0ff             [ 2] 	ldy #255					; -1
d143 : 854a             [ 3] 	sta grl_sinx
d145 : 854d             [ 3] 	sta grl_siny
                             
                             	; check going right to left
d147 : a53d             [ 3] 	lda grl_x0
d149 : c53f             [ 3] 	cmp grl_x1
d14b : 9002             [ 3] 	bcc gr_line_skip_left
d14d : 844a             [ 3] 	sty grl_sinx				; make -1
d14f :                       gr_line_skip_left
                             	; check going bottom to top
AS65 Assembler for R6502 [1.42].                                     Page  114
-------------------------------- bank\bank0.s --------------------------------

d14f : a53e             [ 3] 	lda grl_y0
d151 : c540             [ 3] 	cmp grl_y1
d153 : 9002             [ 3] 	bcc gr_line_skip_y_up
d155 : 844d             [ 3] 	sty grl_siny				; make -1
                             
d157 :                       gr_line_skip_y_up
d157 : a541             [ 3] 	lda grl_dx
d159 : 0a               [ 2] 	asl a
d15a : 8544             [ 3] 	sta grl_2dx					; 2*dx (word)
d15c : a900             [ 2] 	lda #0
d15e : 8545             [ 3] 	sta grl_2dx+1
d160 : 2645             [ 5] 	rol grl_2dx+1
                             
d162 : a542             [ 3] 	lda grl_dy
d164 : 0a               [ 2] 	asl a
d165 : 8546             [ 3] 	sta grl_2dy					; 2*dy (word)
d167 : a900             [ 2] 	lda #0
d169 : 8547             [ 3] 	sta grl_2dy+1
d16b : 2647             [ 5] 	rol grl_2dy+1
                             
                             ;    p=2*dy-dx;					; p (word)
d16d : 38               [ 2] 	sec
d16e : a546             [ 3] 	lda grl_2dy
d170 : e541             [ 3] 	sbc grl_dx
d172 : 854b             [ 3] 	sta grl_p
d174 : a547             [ 3] 	lda grl_2dy+1
d176 : e900             [ 2] 	sbc #0
d178 : 854c             [ 3] 	sta grl_p+1
                             
                             ;   2*(dy-dx)					; num_tmp+2 = 2*(dy-dx)
d17a : 38               [ 2] 	sec
d17b : a546             [ 3] 	lda grl_2dy
d17d : e544             [ 3] 	sbc grl_2dx
d17f : 8548             [ 3] 	sta grl_2dxy
d181 : a547             [ 3] 	lda grl_2dy+1
d183 : e545             [ 3] 	sbc grl_2dx+1
d185 : 8549             [ 3] 	sta grl_2dxy+1
                             
d187 :                       gr_line_pixel
d187 : a63d             [ 3] 	ldx grl_x0
d189 : a43e             [ 3] 	ldy grl_y0
d18b : a543             [ 3] 	lda grl_xyyx				; Swapped?
d18d : f004             [ 3] 	beq gr_line_yx_skip
d18f : a63e             [ 3] 	ldx grl_y0
d191 : a43d             [ 3] 	ldy grl_x0
d193 :                       gr_line_yx_skip
d193 : 2011d0           [ 6] 	jsr gr_point				; Plot point x,y
                             
d196 : a53d             [ 3] 	lda grl_x0					; Check if done
d198 : c53f             [ 3] 	cmp grl_x1
d19a : f032             [ 3] 	beq gr_line_done
                             
                             	; Increment x always
d19c : 18               [ 2] 	clc
d19d : a53d             [ 3] 	lda grl_x0
d19f : 654a             [ 3] 	adc grl_sinx
d1a1 : 853d             [ 3] 	sta grl_x0
                             
                             	; check sign of p
d1a3 : a54c             [ 3] 	lda grl_p+1
d1a5 : 3017             [ 3] 	bmi gr_line_neg_p
                             
AS65 Assembler for R6502 [1.42].                                     Page  115
-------------------------------- bank\bank0.s --------------------------------

                             	; if p >=0
                             
                             	; y=y+increment
d1a7 : 18               [ 2] 	clc
d1a8 : a53e             [ 3] 	lda grl_y0
d1aa : 654d             [ 3] 	adc grl_siny
d1ac : 853e             [ 3] 	sta grl_y0
                             
                             	; p=p+2*dy-2*dx
                             	_addZPWord grl_p,grl_2dxy
                             
d1bb : 4c87d1           [ 3] 	jmp gr_line_pixel
                             
d1be :                       gr_line_neg_p
                             	; if p < 0
                             	; p=p+2*dy
                             	_addZPWord grl_p,grl_2dy
                             
                             
d1cb : 4c87d1           [ 3] 	jmp gr_line_pixel
d1ce :                       gr_line_done
d1ce : 60               [ 6] 	rts
                             
                             
                             ; Line drawing pseudo code
                             ;    while(x<x1)
                             ;    {
                             ;        putpixel(x,y);
                             ;        if(p>=0)
                             ;        {
                             ;            y=y+1;
                             ;            p=p+2*dy-2*dx;
                             ;        }
                             ;        else
                             ;        {
                             ;            p=p+2*dy;
                             ;        }
                             ;        x=x+1;
                             ;    }
                             
                             
                             ;* These tables are to speed up calculating the
                             ;* offset for plot commands
d1cf :                       gr_offset_40lo
d1cf : 00285078a0            	db lo(000*40), lo(001*40), lo(002*40), lo(003*40
d1d4 : c8f0184068            	db lo(005*40), lo(006*40), lo(007*40), lo(008*40
d1d9 : 90b8e00830            	db lo(010*40), lo(011*40), lo(012*40), lo(013*40
d1de : 5880a8d0f8            	db lo(015*40), lo(016*40), lo(017*40), lo(018*40
d1e3 : 20487098c0            	db lo(020*40), lo(021*40), lo(022*40), lo(023*40
d1e8 : e81038                	db lo(025*40), lo(026*40), lo(027*40)
d1eb :                       gr_offset_40hi
d1eb : 0000000000            	db hi(000*40), hi(001*40), hi(002*40), hi(003*40
d1f0 : 0000010101            	db hi(005*40), hi(006*40), hi(007*40), hi(008*40
d1f5 : 0101010202            	db hi(010*40), hi(011*40), hi(012*40), hi(013*40
d1fa : 0202020202            	db hi(015*40), hi(016*40), hi(017*40), hi(018*40
d1ff : 0303030303            	db hi(020*40), hi(021*40), hi(022*40), hi(023*40
d204 : 030404                	db hi(025*40), hi(026*40), hi(027*40)
                             
                             
                             ;* Character based sprites for text mode only
d207 :                       mod_sz_sprite_s
                             ;* Initialisation
AS65 Assembler for R6502 [1.42].                                     Page  116
-------------------------------- bank\bank0.s --------------------------------

d207 :                       gr_spr_init
d207 : a21f             [ 2] 	ldx #31							; Start at last sprite
d209 :                       gr_spr_init_loop
d209 : a9ff             [ 2] 	lda #-1							; Put -1 in the x coords
d20b : 9d00b4           [ 5] 	sta spr_curX,x
d20e : 9d20b4           [ 5] 	sta spr_newX,x
d211 : ca               [ 2] 	dex								; Next sprite
d212 : 10f5             [ 3] 	bpl gr_spr_init_loop			; Until all 32 sprites in
d214 : 60               [ 6] 	rts
                             
                             
                             ;* Erase all active sprites
d215 :                       gr_spr_erase
                             	; First restore background from sprites
                             	; that are active and new pos is different from 
d215 : a21f             [ 2] 	ldx #31							; Start at last sprite
d217 :                       gr_spr_erase_loop
d217 : bd00b4           [ 4] 	lda spr_curX,x					; Is sprite active?
d21a : 3008             [ 3] 	bmi gr_spr_erase_next
d21c : 8532             [ 3] 	sta tmp_alo						; x pos saved for later
d21e :                       gr_spr_erase_do
d21e : bda0b4           [ 4] 	lda spr_bgnd,x					; Get the background
d221 : 206fd2           [ 6] 	jsr gr_spr_put					; And restore it
d224 :                       gr_spr_erase_next
d224 : ca               [ 2] 	dex
d225 : 10f0             [ 3] 	bpl gr_spr_erase_loop
d227 : 60               [ 6] 	rts
                             
                             ;* Get ready for new position
d228 :                       gr_spr_new
d228 : a21f             [ 2] 	ldx #31							; Start at last sprite
d22a :                       gr_spr_new_loop
d22a : bd20b4           [ 4] 	lda spr_newX,x					; Is the new position active?
d22d : 3029             [ 3] 	bmi gr_spr_new_next
d22f : 8532             [ 3] 	sta tmp_alo						; x pos saved for later
d231 :                       gr_spr_new_pos
d231 : bd60b4           [ 4] 	lda spr_newY,x					; Get new Y
d234 : 9d40b4           [ 5] 	sta spr_curY,x					; Update new->cur Y
                             	; Calculate screen address
                             	; save as part of sprite data and in zp area
d237 : a8               [ 2] 	tay
d238 : 18               [ 2] 	clc
d239 : b9cfd1           [ 4] 	lda gr_offset_40lo,y
d23c : 6980             [ 2] 	adc #lo(TEXTSCRN)
d23e : 8527             [ 3] 	sta gr_scrngeom+gr_geom_tmp
d240 : 9dc0b4           [ 5] 	sta spr_baseadrl,x
d243 : b9ebd1           [ 4] 	lda gr_offset_40hi,y
d246 : 69bb             [ 2] 	adc #hi(TEXTSCRN)
d248 : 8528             [ 3] 	sta gr_scrngeom+gr_geom_tmp+1
d24a : 9de0b4           [ 5] 	sta spr_baseadrh,x
d24d : a432             [ 3] 	ldy tmp_alo						; Get x pos back in to Y reg
d24f : 98               [ 2] 	tya
d250 : 9d00b4           [ 5] 	sta spr_curX,x					; Update new->cur X
d253 : b127             [ 5] 	lda (gr_scrngeom+gr_geom_tmp),y	; Get background
d255 : 9da0b4           [ 5] 	sta spr_bgnd,x					; And save this
d258 :                       gr_spr_new_next
d258 : ca               [ 2] 	dex
d259 : 10cf             [ 3] 	bpl gr_spr_new_loop
d25b : 60               [ 6] 	rts
                             
                             
                             ; Draw all active sprites
AS65 Assembler for R6502 [1.42].                                     Page  117
-------------------------------- bank\bank0.s --------------------------------

                             ; Active sprites are always drawn - 0 = lowest pr
d25c :                       gr_spr_draw
d25c : a21f             [ 2] 	ldx #31							; Start at last sprite
d25e :                       gr_spr_draw_loop
d25e : bd20b4           [ 4] 	lda spr_newX,x					; Is sprite active?
d261 : 8532             [ 3] 	sta tmp_alo
d263 : 3006             [ 3] 	bmi gr_spr_draw_next
d265 : bd80b4           [ 4] 	lda spr_chr,x					; Get the sprite char
d268 : 206fd2           [ 6] 	jsr gr_spr_put
d26b :                       gr_spr_draw_next
d26b : ca               [ 2] 	dex
d26c : 10f0             [ 3] 	bpl gr_spr_draw_loop
d26e : 60               [ 6] 	rts
                             
                             
                             ;* Common routine to put A to screen address
                             ;* Used for erase and draw of sprites
d26f :                       gr_spr_put
d26f : 48               [ 3] 	pha
d270 : bdc0b4           [ 4] 	lda spr_baseadrl,x		; Get the screen pointer
d273 : 8527             [ 3] 	sta gr_scrngeom+gr_geom_tmp
d275 : bde0b4           [ 4] 	lda spr_baseadrh,x
d278 : 8528             [ 3] 	sta gr_scrngeom+gr_geom_tmp+1
d27a : a432             [ 3] 	ldy tmp_alo						; Y reg is in tmp_alo
d27c : 68               [ 4] 	pla								; Get back the char to
d27d : 9127             [ 5] 	sta (gr_scrngeom+gr_geom_tmp),y	; put on to scre
d27f : 60               [ 6] 	rts
                             
                             
                             ;* Update spr A with char X
d280 :                       gr_spr_char
d280 : a8               [ 2] 	tay
d281 : 8a               [ 2] 	txa
d282 : 9980b4           [ 5] 	sta spr_chr,y
d285 : 60               [ 6] 	rts
                             
                             ;* Locate what is at the location of sprite A, re
                             ;* C=1 if sprite it not active
d286 :                       gr_spr_hit
d286 : aa               [ 2] 	tax
d287 : bd00b4           [ 4] 	lda spr_curX,x
d28a : c980             [ 2] 	cmp #0x80						; If A>=0x80 then C=1
d28c : bda0b4           [ 4] 	lda spr_bgnd,x
d28f : 60               [ 6] 	rts
                             
                             ;* Update spr A with coords X,Y
d290 :                       gr_spr_pos
d290 : 8432             [ 3] 	sty tmp_alo
d292 : a8               [ 2] 	tay
d293 : 8a               [ 2] 	txa								; X coord still in X reg
d294 : 9920b4           [ 5] 	sta spr_newX,y
d297 : a532             [ 3] 	lda tmp_alo						; Y coord from temp
d299 : 9960b4           [ 5] 	sta spr_newY,y
d29c : 60               [ 6] 	rts
                             
                             ;* Update all sprite positions from df_tmpptra, d
d29d :                       gr_spr_multi_pos
d29d : a03e             [ 2] 	ldy #62
d29f : a21f             [ 2] 	ldx #31
d2a1 :                       gr_spr_multi_loop
d2a1 : b1a1             [ 5] 	lda (df_tmpptra),y
d2a3 : 9d20b4           [ 5] 	sta spr_newX,x
AS65 Assembler for R6502 [1.42].                                     Page  118
-------------------------------- bank\bank0.s --------------------------------

d2a6 : b1a3             [ 5] 	lda (df_tmpptrb),y
d2a8 : 9d60b4           [ 5] 	sta spr_newY,x
d2ab : 88               [ 2] 	dey
d2ac : 88               [ 2] 	dey
d2ad : ca               [ 2] 	dex
d2ae : 10f1             [ 3] 	bpl gr_spr_multi_loop
d2b0 : 60               [ 6] 	rts
                             
d2b1 :                       mod_sz_sprite_e
d2b1 :                       mod_sz_graph_e
                             
                             ; Old version of point calculator - in case I nee
                             ;	; Calculate destination address
                             ;	lda #0
                             ;	sta tmp_ahi
                             ;
                             ;	tya				; Row number in A
                             ;	; Multiply 8
                             ;	asl a
                             ;	rol tmp_ahi
                             ;	asl a
                             ;	rol tmp_ahi
                             ;	asl a
                             ;	rol tmp_ahi
                             ;	sta tmp_alo
                             ;
                             ;	; Multiply 32
                             ;	; Use partial result from m8
                             ;	lda tmp_ahi
                             ;	sta tmp_bhi
                             ;	lda tmp_alo
                             ;	; Just two more rotates to get m32
                             ;	asl a
                             ;	rol tmp_bhi
                             ;	asl a
                             ;	rol tmp_bhi
                             ;	sta tmp_blo
                             ;	; Add m8 and m32 for m40
                             ;	clc
                             ;	lda tmp_alo
                             ;	adc tmp_blo
                             ;	sta tmp_alo
                             ;	lda tmp_ahi
                             ;	adc tmp_bhi
                             ;	; Add high byte of screen address
                             ;	adc gr_scrngeom+vdp_scrn+1
                             ;	sta tmp_ahi
                             ;	; Dest offset in tmp_alo
                             ;
                             ;	; pixel x coord in to A
                             ;	; We dvide by 48 doing trial subtracts
                             ;	; This leaves Y with a number 0..5
                             ;	; And A has the remainder 0..47
                             ;	; Use these to look up byte column and mask
                             ;	; We don't do more than 5 trial subtracts
                             ;	; plus the table size is much smaller
                             ;	; Comprimise of space vs speed
                             ;	txa
                             ;	ldy #0				; Start at segment 0
                             ;	sec
                             ;gr_point_d48
                             ;	sbc #48
AS65 Assembler for R6502 [1.42].                                     Page  119
-------------------------------- bank\bank0.s --------------------------------

                             ;	iny
                             ;	bcs gr_point_d48				; Keep going until underflo
                             ;
                             ;	dey								; Adjust segment count
                             ;	adc #48							; Get remainder in A
                             ;	tax								; Put remainder in to X (0..47)
                             ;	lda gr_col_seg,y				; Get the start column of s
                             ;	clc
                             ;	adc gr_col_offset,x				; Add segment offset usi
                             ;	tay								; We have the byte column in Y
                             ;	sty tmp_bhi						; Save in tmp, also still in Y
                             ;	stx tmp_blo						; Save remainder 0..47
                             ;	rts
                             
                             ;gr_point_mask
                             ;	db 0x20,0x10,0x08,0x04,0x02,0x01
                             ;	db 0x20,0x10,0x08,0x04,0x02,0x01
                             ;	db 0x20,0x10,0x08,0x04,0x02,0x01
                             ;	db 0x20,0x10,0x08,0x04,0x02,0x01
                             ;	db 0x20,0x10,0x08,0x04,0x02,0x01
                             ;	db 0x20,0x10,0x08,0x04,0x02,0x01
                             ;	db 0x20,0x10,0x08,0x04,0x02,0x01
                             ;	db 0x20,0x10,0x08,0x04,0x02,0x01
                             ;gr_col_offset
                             ;	db 0,0,0,0,0,0
                             ;	db 1,1,1,1,1,1
                             ;	db 2,2,2,2,2,2
                             ;	db 3,3,3,3,3,3
                             ;	db 4,4,4,4,4,4
                             ;	db 5,5,5,5,5,5
                             ;	db 6,6,6,6,6,6
                             ;	db 7,7,7,7,7,7
                             ;gr_col_seg
                             ;	db 0,8,16,24,32
                             
                             	include "monitor/cmd.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  CMD.S
                             ;*	A really simple monitor that needs to be impro
                             ;*	optimised.  Only has these commands;
                             ;*		dxxxx			Dump memory location xxxx
                             ;*						Press enter for more else stop
                             ;*		sxxxx [yy]		Set memory location xxxx with hex
                             ;*						bytes, respond with next location
                             ;*		q				Quit
                             ;*	Now you see why this needs optimising!
                             ;*
                             ;************************************************
                             
0094 =                       cmd_lo					= df_currdat
0095 =                       cmd_hi					= (df_currdat+1)
                             
                             	; ROM code
                             	code  
                             
AS65 Assembler for R6502 [1.42].                                     Page  120
-------------------------------- bank\bank0.s --------------------------------

d2b1 :                       _mod_sz_cmd_s
                             
d2b1 :                       command_line
                             
d2b1 :                       cmd_ready
                             	_println_low msg_ready
                             
                             
d2b8 : 38               [ 2] 	sec							; Set carry flag = echo characters
d2b9 : 2053c4           [ 6] 	jsr io_read_line			; Get a command line
d2bc : a000             [ 2] 	ldy #0
d2be : b139             [ 5] 	lda (buf_lo),y
d2c0 : c971             [ 2] 	cmp #'q'
d2c2 : d001             [ 3] 	bne cmd_check_cmd
d2c4 : 60               [ 6] 	rts
d2c5 :                       cmd_check_cmd
d2c5 : 20d7d2           [ 6] 	jsr cmd_parse				; Find command and execute
d2c8 : b003             [ 3] 	bcs cmd_error				; Carry set = error condition
d2ca : 4cb1d2           [ 3] 	jmp cmd_ready
                             
d2cd :                       cmd_error
                             	_println_low msg_errmsg
                             
d2d4 : 4cb1d2           [ 3] 	jmp cmd_ready
                             
                             
                             ;****************************************
                             ;* cmd_parse
                             ;* Parse the command line in the io buffer
                             ;* Regs affected : 
                             ;****************************************
d2d7 :                       cmd_parse
d2d7 : c8               [ 2] 	iny						; Ready for next char
                             	
d2d8 :                       cmd_check_d
d2d8 : c964             [ 2] 	cmp #'d'				; Check for d
d2da : d003             [ 3] 	bne cmd_check_s
d2dc : 4c12d3           [ 3] 	jmp cmd_dumpmem
d2df :                       cmd_check_s
d2df : c973             [ 2] 	cmp #'s'				; Check for s
d2e1 : d0ea             [ 3] 	bne cmd_error
d2e3 : 4cecd2           [ 3] 	jmp cmd_setmem
                             
d2e6 :                       cmd_not_found
d2e6 : a901             [ 2] 	lda #CMD_ERR_NOTFOUND
d2e8 : 855d             [ 3] 	sta errno
d2ea : 38               [ 2] 	sec
d2eb : 60               [ 6] 	rts
                             	
                             ;****************************************
                             ;* cmd_setmem
                             ;* Set the memory at address AAAA to byte string
                             ;* Input : buflo, bufhi
                             ;* Output : y = start of first parm byte
                             ;*          x = index to routine pointer
                             ;* Regs affected : A
                             ;****************************************
d2ec :                       cmd_setmem
d2ec : 20a9d3           [ 6] 	jsr cmd_parse_word
d2ef : b01f             [ 4] 	bcs cmd_setmem_err
d2f1 :                       cmd_setmem_byte
d2f1 : 208dd3           [ 6] 	jsr cmd_parse_byte
AS65 Assembler for R6502 [1.42].                                     Page  121
-------------------------------- bank\bank0.s --------------------------------

d2f4 : b01a             [ 4] 	bcs cmd_setmem_err
d2f6 : 2084d3           [ 6] 	jsr cmd_poke				; Poke A in to cmd_lo, hi
d2f9 : 2074d3           [ 6] 	jsr cmd_incmem
d2fc : 20bbd3           [ 6] 	jsr cmd_parse_next_parm		; Try and find another 
d2ff : 90f0             [ 3] 	bcc cmd_setmem_byte			; Process if found, else f
d301 : a595             [ 3] 	lda cmd_hi
d303 : 2068c1           [ 6] 	jsr utilPrintA
d306 : a594             [ 3] 	lda cmd_lo
d308 : 2068c1           [ 6] 	jsr utilPrintA
d30b : 2060c1           [ 6] 	jsr utilPrintCRLF
d30e : 18               [ 2] 	clc
d30f : 60               [ 6] 	rts
d310 :                       cmd_setmem_err
d310 : 38               [ 2] 	sec
d311 : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* cmd_dumpmem
                             ;* Dump memory at address AAAA
                             ;* Input : buflo, bufhi
                             ;* Output : y = start of first parm byte
                             ;* Regs affected : A
                             ;****************************************
d312 :                       cmd_dumpmem
d312 : 20a9d3           [ 6] 	jsr cmd_parse_word			; Get address to dump
d315 : 9001             [ 3] 	bcc cmd_dumpmem_block
d317 : 60               [ 6] 	rts							; C is set
d318 :                       cmd_dumpmem_block
d318 : a595             [ 3] 	lda cmd_hi					; Show the address
d31a : 2068c1           [ 6] 	jsr utilPrintA
d31d : a594             [ 3] 	lda cmd_lo
d31f : 2068c1           [ 6] 	jsr utilPrintA
d322 : a920             [ 2] 	lda #' '
d324 : 203ec4           [ 6] 	jsr io_put_ch
                             	
d327 : a008             [ 2] 	ldy #8						; 8 Bytes per line
d329 :                       cmd_dumpmem_byte
d329 : 207bd3           [ 6] 	jsr cmd_peek
d32c : 2068c1           [ 6] 	jsr utilPrintA
d32f : 2058c1           [ 6] 	jsr utilPrintSPC
d332 : 2074d3           [ 6] 	jsr cmd_incmem
d335 : 88               [ 2] 	dey
d336 : d0f1             [ 3] 	bne cmd_dumpmem_byte
d338 :                       cmd_dumpmemASCII
d338 : 38               [ 2] 	sec							; Move pointer back to start
d339 : a594             [ 3] 	lda cmd_lo
d33b : e908             [ 2] 	sbc #8
d33d : 8594             [ 3] 	sta cmd_lo
d33f : a595             [ 3] 	lda cmd_hi
d341 : e900             [ 2] 	sbc #0
d343 : 8595             [ 3] 	sta cmd_hi
                             	
d345 : 2058c1           [ 6] 	jsr utilPrintSPC
d348 : a008             [ 2] 	ldy #8						; 8 Bytes per line
d34a :                       cmd_dumpmem_ascii
d34a : a22e             [ 2] 	ldx #'.'					; Non-printable char
d34c : 207bd3           [ 6] 	jsr cmd_peek
d34f : c920             [ 2] 	cmp #' '					; <32 is unprintable
d351 : b001             [ 3] 	bcs cmd_dump_skip_ctrl
d353 : 8a               [ 2] 	txa							; Replace with dot
d354 :                       cmd_dump_skip_ctrl
AS65 Assembler for R6502 [1.42].                                     Page  122
-------------------------------- bank\bank0.s --------------------------------

d354 : c97f             [ 2] 	cmp #UTF_DEL				; >= DEL is unprintable
d356 : 9001             [ 3] 	bcc cmd_dump_skip_del
d358 : 8a               [ 2] 	txa							; Replace with dot
d359 :                       cmd_dump_skip_del	
d359 : 203ec4           [ 6] 	jsr io_put_ch
d35c : 2074d3           [ 6] 	jsr cmd_incmem
d35f : 88               [ 2] 	dey		
d360 : d0e8             [ 3] 	bne cmd_dumpmem_ascii		; Show 8 bytes
d362 : 38               [ 2] 	sec
d363 : 203bc4           [ 6] 	jsr io_get_ch				; Wait for key press
d366 : c90d             [ 2] 	cmp #UTF_CR		
d368 : d003             [ 3] 	bne cmd_dumpmemFin			; Any key but enter finishe
                             ;	jsr io_put_ch				; Do new line
d36a : 4c18d3           [ 3] 	jmp cmd_dumpmem_block
d36d :                       cmd_dumpmemFin
d36d : a90d             [ 2] 	lda #UTF_CR
d36f : 203ec4           [ 6] 	jsr io_put_ch
d372 : 18               [ 2] 	clc
d373 : 60               [ 6] 	rts
                             	
                             	
                             ;****************************************
                             ;* cmd_incmem
                             ;* Increment pointer
                             ;* Input : cmd_lo, cmd_hi
                             ;* Output : cmd_lo, cmd_hi
                             ;* Regs affected : 
                             ;****************************************
d374 :                       cmd_incmem
                             	_incZPWord cmd_lo
                             
d37a : 60               [ 6] 	rts
                             	
                             ;****************************************
                             ;* cmd_peek
                             ;* Read byte
                             ;* Input : cmd_lo, cmd_hi
                             ;* Output : A
                             ;* Regs affected : 
                             ;****************************************
d37b :                       cmd_peek
d37b : 8638             [ 3] 	stx tmp_d
d37d : a200             [ 2] 	ldx #0
d37f : a194             [ 6] 	lda (cmd_lo,x)
d381 : a638             [ 3] 	ldx tmp_d
d383 : 60               [ 6] 	rts
                             	
                             ;****************************************
                             ;* cmd_poke
                             ;* Read byte
                             ;* Input : cmd_lo, cmd_hi, A
                             ;* Output : A
                             ;* Regs affected : 
                             ;****************************************
d384 :                       cmd_poke
d384 : 8638             [ 3] 	stx tmp_d
d386 : a200             [ 2] 	ldx #0
d388 : 8194             [ 6] 	sta (cmd_lo,x)
d38a : a638             [ 3] 	ldx tmp_d
d38c : 60               [ 6] 	rts
                             
                             ;****************************************
AS65 Assembler for R6502 [1.42].                                     Page  123
-------------------------------- bank\bank0.s --------------------------------

                             ;* cmd_parse_byte
                             ;* Find 2 char hex byte
                             ;* Input : buflo, bufhi, y offset
                             ;* Output : y = char after hex byte, A = value
                             ;* Regs affected : A,Y
                             ;****************************************
d38d :                       cmd_parse_byte
d38d : 20bbd3           [ 6] 	jsr cmd_parse_next_parm	; Find the next paramete
d390 : b015             [ 3] 	bcs cmd_parse_byte_err
d392 : b139             [ 5] 	lda (buf_lo),y			; Get hi nibble of high byte
d394 : f011             [ 3] 	beq cmd_parse_byte_err	; If no char then error w
d396 : 48               [ 3] 	pha						; Save on stack
d397 : c8               [ 2] 	iny
d398 : b139             [ 5] 	lda (buf_lo),y			; Get lo nibble of high byte
d39a : f00a             [ 3] 	beq cmd_parse_byte_errp	; If no char then error 
d39c : aa               [ 2] 	tax						; Lo nibble goes to X
d39d : 68               [ 4] 	pla						; Restore hi nibble
d39e : 209ac1           [ 6] 	jsr str_x_to_a			; Convert from hex to A
d3a1 : b004             [ 3] 	bcs cmd_parse_byte_err	; If error then stop
d3a3 : c8               [ 2] 	iny						; Point to next char
d3a4 : 18               [ 2] 	clc
d3a5 : 60               [ 6] 	rts						; A contains the byte
d3a6 :                       cmd_parse_byte_errp
d3a6 : 68               [ 4] 	pla
d3a7 :                       cmd_parse_byte_err
d3a7 : aa               [ 2] 	tax
d3a8 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* cmd_parse_word
                             ;* Find 4 char hex word
                             ;* Input : buflo, bufhi, y offset
                             ;* Output : y = char after hex byte, A = hi, X = 
                             ;* Regs affected : A,X,Y
                             ;****************************************
d3a9 :                       cmd_parse_word
d3a9 : 208dd3           [ 6] 	jsr cmd_parse_byte			; Get hi byte of word
d3ac : b00b             [ 3] 	bcs cmd_word_err
d3ae : 8595             [ 3] 	sta cmd_hi					; Save hi byte of word
d3b0 : 208dd3           [ 6] 	jsr cmd_parse_byte			; Get lo byte of word
d3b3 : b004             [ 3] 	bcs cmd_word_err
d3b5 : 8594             [ 3] 	sta cmd_lo
d3b7 : 18               [ 2] 	clc
d3b8 : 60               [ 6] 	rts
d3b9 :                       cmd_word_err
d3b9 : 38               [ 2] 	sec
d3ba : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* cmd_parse_next_parm
                             ;* Find next non-white space
                             ;* Input : buflo, bufhi, y offset
                             ;* Output : y = start of first parm byte
                             ;* Regs affected : A
                             ;****************************************
d3bb :                       cmd_parse_next_parm
d3bb : 88               [ 2] 	dey
d3bc :                       cmd_find_parm
d3bc : c8               [ 2] 	iny
d3bd : b139             [ 5] 	lda (buf_lo),y
d3bf : c900             [ 2] 	cmp #0
d3c1 : f005             [ 3] 	beq cmd_next_parm_err	; If z then no parms, fin 
AS65 Assembler for R6502 [1.42].                                     Page  124
-------------------------------- bank\bank0.s --------------------------------

d3c3 : c920             [ 2] 	cmp #' '				; Ignore space
d3c5 : f0f5             [ 3] 	beq cmd_find_parm
d3c7 : 18               [ 2] 	clc						; else ok, C is cleared
d3c8 :                       cmd_next_parm_err
d3c8 : 60               [ 6] 	rts
                             
                             	
d3c9 : 3e00                  msg_ready				db ">\x0"
d3cb : 3f0d00                msg_errmsg				db "?\xd\x0"
d3ce :                       _mod_sz_cmd_e
                             
                             	include "sound/sound.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  SOUND.S
                             ;*  Sound driver module - routines to access the 
                             ;*  This sound chip was found in a number of popu
                             ;*  in the early to mid 80s, including my first c
                             ;*  the Oric-1, as well as the MSX range.
                             ;*
                             ;************************************************
                             
                             
                             	; ROM code
                             	code
                             
d3ce :                       mod_sz_sound_s
                             
                             
                             ;****************************************
                             ;* snd_get_note
                             ;* Get a note from the music scale table
                             ;* Input : Octave in X, note in Y
                             ;* Output : A,X = Value hi,lo
                             ;* Regs affected : X
                             ;****************************************
d3ce :                       snd_get_note
d3ce : 98               [ 2] 	tya
d3cf : 0a               [ 2] 	asl a
d3d0 : a8               [ 2] 	tay
                             	; Get note for octave 0
d3d1 : b901d4           [ 4] 	lda snd_music_tab,y
d3d4 : 8532             [ 3] 	sta tmp_alo
d3d6 : b902d4           [ 4] 	lda snd_music_tab+1,y
                             	
d3d9 :                       snd_get_note_oct
d3d9 : ca               [ 2] 	dex
d3da : 3006             [ 3] 	bmi snd_note_done
                             	; Divide freq by 2 each octave
d3dc : 4a               [ 2] 	lsr a
d3dd : 6632             [ 5] 	ror tmp_alo
d3df : 4cd9d3           [ 3] 	jmp snd_get_note_oct
d3e2 :                       snd_note_done
d3e2 : a632             [ 3] 	ldx tmp_alo
d3e4 : 60               [ 6] 	rts
                             
AS65 Assembler for R6502 [1.42].                                     Page  125
-------------------------------- bank\bank0.s --------------------------------

                             	
                             ;****************************************
                             ;* init_snd
                             ;* Initialise sound - after cia 1 has been initia
                             ;* Input : None
                             ;* Output : None
                             ;* Regs affected : All
                             ;****************************************
d3e5 :                       init_snd
d3e5 : a20f             [ 2] 	ldx #15
d3e7 :                       init_snd_regs
d3e7 : bdf1d3           [ 4] 	lda snd_init_tab,x
d3ea : 2000c0           [ 6] 	jsr snd_set				; Set X to A
d3ed : ca               [ 2] 	dex
d3ee : 10f7             [ 3] 	bpl init_snd_regs		; 16 regs
                             	
d3f0 : 60               [ 6] 	rts						; return from sub
                             
                             	; Register array initialisation values
                             	; Assuming 1.34Mhz input clock
d3f1 :                       snd_init_tab
d3f1 : 40                    	db 0x40				; R0 = Channel A Tone Low
d3f2 : 00                    	db 0x00				; R1 = Channel A Tone High
d3f3 : 00                    	db 0x00				; R2 = Channel B Tone Low
d3f4 : 01                    	db 0x01				; R3 = Channel B Tone High
d3f5 : 00                    	db 0x00				; R4 = Channel C Tone Low
d3f6 : 02                    	db 0x02				; R5 = Channel C Tone High
d3f7 : 00                    	db 0x00				; R6 = Noise period
d3f8 : 7e                    	db 0b01111110		; R7 = Control : IOB input, IOA o
d3f9 : 1f                    	db 0x1f				; R8 = Channel A Vol
d3fa : 1f                    	db 0x1f				; R9 = Channel B Vol
d3fb : 1f                    	db 0x1f				; R10 = Channel C Vol
d3fc : 00                    	db 0x00				; R11 = Envelope Period Low
d3fd : 03                    	db 0x03				; R12 = Envelope Period High
d3fe : 00                    	db 0b00000000		; R13 = Envelope Shape : 0000
d3ff : ff                    	db 0xff				; R14 = IO Port A - KB lines disabled
d400 : 00                    	db 0x00				; R15 = IO Port B ; Initialise to 0 (
                             
d401 :                       snd_music_tab
d401 : 7707                  	dw 1911				; C		0
d403 : 0c07                  	dw 1804				; C#	1
d405 : a706                  	dw 1703				; D		2
d407 : 4706                  	dw 1607				; D#	3
d409 : ed05                  	dw 1517				; E		4
d40b : 9805                  	dw 1432				; F		5
d40d : 4705                  	dw 1351				; F#	6
d40f : fc04                  	dw 1276				; G		7
d411 : b404                  	dw 1204				; G#	8
d413 : 7004                  	dw 1136				; A		9
d415 : 3104                  	dw 1073				; A#	10
d417 : f403                  	dw 1012				; B		11
                             
d419 :                       mod_sz_sound_e
                             
d419 :                       mod_sz_bios_e
d419 :                       mod_sz_language_s
                             	include "utils/intmath.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
AS65 Assembler for R6502 [1.42].                                     Page  126
-------------------------------- bank\bank0.s --------------------------------

                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  INTMATH.S
                             ;*  Core module for integer maths supported by df
                             ;*  Now supports signed integers in 2s complement
                             ;*  Uses the intmath registers: num_a, num_b, num
                             ;*  Most inputs are through num_a and num_b, with
                             ;*  num_a
                             ;*  Operations: add, sub, swap, 8 bit mult, mult,
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code
                             
                             ;****************************************
                             ;* Add : A + B result in A
                             ;****************************************
d419 :                       int_add
d419 : 18               [ 2] 	clc
d41a : a53d             [ 3] 	lda num_a
d41c : 6541             [ 3] 	adc num_b
d41e : 853d             [ 3] 	sta num_a
d420 : a53e             [ 3] 	lda num_a+1
d422 : 6542             [ 3] 	adc num_b+1
d424 : 853e             [ 3] 	sta num_a+1
d426 : 60               [ 6] 	rts
                             	
                             ;****************************************
                             ;* Sub : A - B result in A
                             ;****************************************
d427 :                       int_sub
d427 : 38               [ 2] 	sec
d428 : a53d             [ 3] 	lda num_a
d42a : e541             [ 3] 	sbc num_b
d42c : 853d             [ 3] 	sta num_a
d42e : a53e             [ 3] 	lda num_a+1
d430 : 6542             [ 3] 	adc num_b+1
d432 : 853e             [ 3] 	sta num_a+1
d434 : 60               [ 6] 	rts
                             	
                             ;****************************************
                             ;* Swp : A <-> B 
                             ;****************************************
d435 :                       int_swp
d435 : a53d             [ 3] 	lda num_a
d437 : a641             [ 3] 	ldx num_b
d439 : 8541             [ 3] 	sta num_b
d43b : 863d             [ 3] 	stx num_a
d43d : a53e             [ 3] 	lda num_a+1
d43f : a642             [ 3] 	ldx num_b+1
d441 : 8542             [ 3] 	sta num_b+1
d443 : 863e             [ 3] 	stx num_a+1
d445 : 60               [ 6] 	rts
                             	
                             ;****************************************
                             ;* Mult : A * B result in A
                             ;* B assumed to be an 8 bit quantity 
                             ;****************************************
d446 :                       int_fast_mult
                             	_cpyZPWord num_a,num_tmp
AS65 Assembler for R6502 [1.42].                                     Page  127
-------------------------------- bank\bank0.s --------------------------------

                             
d44e : a900             [ 2] 	lda #0
d450 : 853d             [ 3] 	sta num_a
d452 : 853e             [ 3] 	sta num_a+1
d454 : a008             [ 2] 	ldy #8
d456 :                       int_fast_mult_cycle
d456 : 4641             [ 5] 	lsr num_b
d458 : 900d             [ 3] 	bcc int_fast_mult_next
d45a : 18               [ 2] 	clc
d45b : a53d             [ 3] 	lda num_a
d45d : 6549             [ 3] 	adc num_tmp
d45f : 853d             [ 3] 	sta num_a
d461 : a53e             [ 3] 	lda num_a+1
d463 : 654a             [ 3] 	adc num_tmp+1
d465 : 853e             [ 3] 	sta num_a+1
d467 :                       int_fast_mult_next
d467 : 0649             [ 5] 	asl num_tmp
d469 : 264a             [ 5] 	rol num_tmp+1
d46b : 88               [ 2] 	dey
d46c : d0e8             [ 3] 	bne int_fast_mult_cycle
d46e : 60               [ 6] 	rts
                             	
                             ;****************************************
                             ;* Mult : A * B result in A
                             ;****************************************
d46f :                       int_mult
                             	_cpyZPWord num_a,num_tmp
                             
d477 : a900             [ 2] 	lda #0
d479 : 853d             [ 3] 	sta num_a
d47b : 853e             [ 3] 	sta num_a+1
d47d : a010             [ 2] 	ldy #16
d47f :                       int_mult_cycle
d47f : 4642             [ 5] 	lsr num_b+1
d481 : 6641             [ 5] 	ror num_b
d483 : 900d             [ 3] 	bcc int_mult_next
d485 : 18               [ 2] 	clc
d486 : a53d             [ 3] 	lda num_a
d488 : 6549             [ 3] 	adc num_tmp
d48a : 853d             [ 3] 	sta num_a
d48c : a53e             [ 3] 	lda num_a+1
d48e : 654a             [ 3] 	adc num_tmp+1
d490 : 853e             [ 3] 	sta num_a+1
d492 :                       int_mult_next
d492 : 0649             [ 5] 	asl num_tmp
d494 : 264a             [ 5] 	rol num_tmp+1
d496 : 88               [ 2] 	dey
d497 : d0e6             [ 3] 	bne int_mult_cycle
d499 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Div : A / B result in A, remainder X
                             ;****************************************
d49a :                       int_div
                             	; adjust signs
d49a : a900             [ 2] 	lda #0
d49c : 8549             [ 3] 	sta num_tmp				; Assume all +ve
d49e : a53e             [ 3] 	lda num_a+1				; Check A hi
d4a0 : 100f             [ 3] 	bpl int_div_skip_negA
d4a2 : e649             [ 5] 	inc num_tmp				; Record sign flip
d4a4 : 38               [ 2] 	sec						; 2's complement A
d4a5 : a900             [ 2] 	lda #0					; by 0-A
AS65 Assembler for R6502 [1.42].                                     Page  128
-------------------------------- bank\bank0.s --------------------------------

d4a7 : e53d             [ 3] 	sbc num_a				; A is now +ve
d4a9 : 853d             [ 3] 	sta num_a
d4ab : a900             [ 2] 	lda #0
d4ad : e53e             [ 3] 	sbc num_a+1
d4af : 853e             [ 3] 	sta num_a+1	
d4b1 :                       int_div_skip_negA
d4b1 : a542             [ 3] 	lda num_b+1				; Check B hi
d4b3 : 100f             [ 3] 	bpl int_div_skip_negB
d4b5 : e649             [ 5] 	inc num_tmp				; Record sign flip
d4b7 : 38               [ 2] 	sec						; 2's complement B
d4b8 : a900             [ 2] 	lda #0					; by 0-B
d4ba : e541             [ 3] 	sbc num_b				; B is now +ve
d4bc : 8541             [ 3] 	sta num_b
d4be : a900             [ 2] 	lda #0
d4c0 : e542             [ 3] 	sbc num_b+1
d4c2 : 8542             [ 3] 	sta num_b+1
d4c4 :                       int_div_skip_negB			; num_tmp bit 0=1 for result 
                             	; x is the remainder
d4c4 : a900             [ 2] 	lda #0
d4c6 : 8545             [ 3] 	sta num_x
d4c8 : 8546             [ 3] 	sta num_x+1
                             	; 16 bit division
d4ca : a010             [ 2] 	ldy #16
d4cc :                       int_div_cycle
                             	; shift a left 1 bit
d4cc : 063d             [ 5] 	asl num_a
d4ce : 263e             [ 5] 	rol num_a+1
                             	; shift in to remainder
d4d0 : 2645             [ 5] 	rol num_x
d4d2 : 2646             [ 5] 	rol num_x+1
                             	; try and subtract b from remainder
d4d4 : 38               [ 2] 	sec
d4d5 : a545             [ 3] 	lda num_x
d4d7 : e541             [ 3] 	sbc num_b
d4d9 : aa               [ 2] 	tax
d4da : a546             [ 3] 	lda num_x+1
d4dc : e542             [ 3] 	sbc num_b+1
d4de : 9006             [ 3] 	bcc int_div_skip
                             	; so b did fit in to remainder, save it
d4e0 : 8645             [ 3] 	stx num_x
d4e2 : 8546             [ 3] 	sta num_x+1
d4e4 : e63d             [ 5] 	inc num_a
d4e6 :                       int_div_skip
                             	; carry on for 16 bits
d4e6 : 88               [ 2] 	dey
d4e7 : d0e3             [ 3] 	bne int_div_cycle
                             	; result in a, remainder in x
                             	; check num_tmp bit 0
d4e9 : a549             [ 3] 	lda num_tmp
d4eb : 2901             [ 2] 	and #1
d4ed : f00d             [ 3] 	beq int_div_noflip
d4ef : 38               [ 2] 	sec						; 2's complement A
d4f0 : a900             [ 2] 	lda #0					; by 0-A
d4f2 : e53d             [ 3] 	sbc num_a				; A is now +ve
d4f4 : 853d             [ 3] 	sta num_a
d4f6 : a900             [ 2] 	lda #0
d4f8 : e53e             [ 3] 	sbc num_a+1
d4fa : 853e             [ 3] 	sta num_a+1	
d4fc :                       int_div_noflip
d4fc : 60               [ 6] 	rts
                             	
                             
AS65 Assembler for R6502 [1.42].                                     Page  129
-------------------------------- bank\bank0.s --------------------------------

                             	include "dflat/dflat.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  DFLAT.S
                             ;*  This is the main controller code file for dfl
                             ;*  This file includes all the required dflat sou
                             ;*  needed:
                             ;*  - error.s is the error handling module
                             ;*  - var.s is the variable handling module
                             ;*  - tokenise.s is the tokenisation module
                             ;*  - progedit.s is the program editing module
                             ;*  - runtime.s is the runtime module
                             ;*  - stack.s is the stack handling module
                             ;*  The above modules include further source file
                             ;*  needed.
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code
                             
d4fd :                       mod_sz_dflat_s
                             
                             ;	include "dflat/error.s"  ** included in the mai
                             	include "dflat/var.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  VAR.S
                             ;*  This module handles all the variable manageme
                             ;*  When a new variable is detected during tokeni
                             ;*  is added to the variable tables.  Any subsequ
                             ;*  that variable is tokenised as an index in to 
                             ;*  table.  There are two variable tables:
                             ;*  Variable name table (VNT) keeps track of vari
                             ;*  Variable value table (VVT) maintains variable
                             ;*  including type, dimension (if array) and of c
                             ;*  actual values.  For an array, the value is a 
                             ;*  memory grabbed using the 'malloc' function (s
                             ;*  This approach to variable managemet is direct
                             ;*  Atari 8 bit.  The disadvantage is that during
                             ;*  session you may end up having a much larger v
                             ;*  table than you need.  Why?  Well because say 
                             ;*  %a as a new variable, but then later change i
                             ;*  In this case %a remains in the variable table
                             ;*  only ever adds to the table!  However it is e
                             ;*  solved - when you save and then reload from n
                             ;*  program, the variable table is built up as th
                             ;*  is loaded.
                             ;*  The VNT grows DOWN from the top of free memor
                             ;*  the VVT growing UP from just below the VNT.
AS65 Assembler for R6502 [1.42].                                     Page  130
-------------------------------- bank\bank0.s --------------------------------

                             ;*	This means that the VVT for a variable will al
                             ;*	found in a fixed place in the VVT table and me
                             ;*	For the VNT (names) it grows from vvstart at l
                             ;*
                             ;************************************************
                             
                             
                             	; ROM code
                             	code  
                             
d4fd :                       mod_sz_var_s
                             
                             
                             ;****************************************
                             ;* Find a variable
                             ;* CC if found, A has index
                             ;****************************************
d4fd :                       df_var_find
                             	; start at the beginning of the vnt table
                             	; vars are stored in reverse order
                             	_cpyZPWord df_vntstrt,df_tmpptrb
                             
                             	; start at end of VVT
                             	_cpyZPWord df_vvtend,df_tmpptra
                             
d50d :                       df_var_match_vnt
                             	; If reached top of VVT then not found
d50d : a5a1             [ 3] 	lda df_tmpptra
d50f : c56d             [ 3] 	cmp df_vvtstrt
d511 : d006             [ 3] 	bne df_var_match_vnt_do
d513 : a5a2             [ 3] 	lda df_tmpptra+1
d515 : c56e             [ 3] 	cmp df_vvtstrt+1
d517 : f04c             [ 3] 	beq df_var_find_no_vnt
d519 :                       df_var_match_vnt_do
                             	; match each char in buffer with vnt
d519 : a47c             [ 3] 	ldy df_linoff
d51b : a200             [ 2] 	ldx #0
d51d :                       df_var_match_vnt_sym
d51d : b90004           [ 4] 	lda df_linbuff,y
d520 : c1a3             [ 6] 	cmp (df_tmpptrb,x)
d522 : d01f             [ 3] 	bne df_var_vnt_sym_nomatch
                             	; if single char match then increment
                             	; source and search
d524 : c8               [ 2] 	iny
                             	_incZPWord df_tmpptrb
                             
                             	; if more chars in vnt entry then continue
d52b : a1a3             [ 6] 	lda (df_tmpptrb,x)
d52d : d0ee             [ 3] 	bne df_var_match_vnt_sym
                             	; if no more chars in vnt entry but
                             	; but chars in buffer then try next vnt
d52f : b90004           [ 4] 	lda df_linbuff,y
                             	; check for valid alpha-numeric
d532 : 2004d7           [ 6] 	jsr df_tk_isalphanum
d535 : 9002             [ 3] 	bcc df_var_check_type
                             	; if there is a valid alpha-num then no match
d537 : b00a             [ 3] 	bcs df_var_vnt_sym_nomatch
d539 :                       df_var_check_type
                             	; if not alpha-num then check for type
                             	; string or int postfix didn't match with VNT
d539 : c925             [ 2] 	cmp #'%'
d53b : f006             [ 3] 	beq df_var_vnt_sym_nomatch
AS65 Assembler for R6502 [1.42].                                     Page  131
-------------------------------- bank\bank0.s --------------------------------

d53d : c924             [ 2] 	cmp #'$'
d53f : f002             [ 3] 	beq df_var_vnt_sym_nomatch
                             	; ok, all good got a match
d541 : d028             [ 3] 	bne df_var_find_true
d543 :                       df_var_vnt_sym_nomatch
                             	; find the zero terminator
d543 : a1a3             [ 6] 	lda (df_tmpptrb,x)
d545 : f009             [ 3] 	beq	df_var_vnt_entry_end
                             	_incZPWord df_tmpptrb
                             
d54d : 4c43d5           [ 3] 	jmp df_var_vnt_sym_nomatch
d550 :                       df_var_vnt_entry_end
                             	; skip over zero terminator
                             	_incZPWord df_tmpptrb
                             
                             	; update vvt address pointer
d556 : 18               [ 2] 	clc
d557 : a5a1             [ 3] 	lda df_tmpptra
d559 : 6908             [ 2] 	adc #8
d55b : 85a1             [ 3] 	sta df_tmpptra
d55d : a5a2             [ 3] 	lda df_tmpptra+1
d55f : 6900             [ 2] 	adc #0
d561 : 85a2             [ 3] 	sta df_tmpptra+1
d563 : d0a8             [ 3] 	bne df_var_match_vnt		; Always - high byte is no
                             
                             	; if at end of vnt then no matches found
d565 :                       df_var_find_no_vnt
d565 : a900             [ 2] 	lda #0
d567 : a200             [ 2] 	ldx #0
d569 : 38               [ 2] 	sec
d56a : 60               [ 6] 	rts
                             
d56b :                       df_var_find_true
                             	; Get slot address into x,a
d56b : a6a1             [ 3] 	ldx df_tmpptra
d56d : a5a2             [ 3] 	lda df_tmpptra+1
                             	
                             	; Consume characters found in source
d56f : 847c             [ 3] 	sty df_linoff
d571 : 18               [ 2] 	clc
d572 : 60               [ 6] 	rts
                             
                             	
                             ;****************************************
                             ;* Insert a variable name in to vnt
                             ;* X = number of bytes to make room
                             ;* Space allocated is;
                             ;*	8 bytes for the new VVT entry
                             ;*  X bytes for the new VNT entry
                             ;* df_vntstrt is new var name entry
                             ;* df_vvtend is new vvt entry
                             ;****************************************
d573 :                       df_var_insert_space
                             	; *** REMEMBER TO DO A SPACE CHECK EVENTUALLY! *
                             
                             	; adjust down the VNT start by VVT size (for ext
                             	; put it in tmpptrb
d573 : 38               [ 2] 	sec
d574 : a569             [ 3] 	lda df_vntstrt
d576 : e908             [ 2] 	sbc #DFVVT_SZ
d578 : 8569             [ 3] 	sta df_vntstrt
d57a : a56a             [ 3] 	lda df_vntstrt+1
AS65 Assembler for R6502 [1.42].                                     Page  132
-------------------------------- bank\bank0.s --------------------------------

d57c : e900             [ 2] 	sbc #0
d57e : 856a             [ 3] 	sta df_vntstrt+1
                             	
                             	; adjust VNT end by VVT size (for extra VVT entr
                             	; and put it in tmpptrc
d580 : 38               [ 2] 	sec
d581 : a56b             [ 3] 	lda df_vntend
d583 : e908             [ 2] 	sbc #DFVVT_SZ
d585 : 856b             [ 3] 	sta df_vntend
d587 : a56c             [ 3] 	lda df_vntend+1
d589 : e900             [ 2] 	sbc #0
d58b : 856c             [ 3] 	sta df_vntend+1
                             
                             	; Set copy point to new start of VNT
                             	_cpyZPWord df_vntstrt,df_tmpptra
                             
                             
                             	; Now move all bytes from old VNT (higher up) to
d595 : 18               [ 2] 	clc
d596 :                       df_var_move_byte
                             	; When pointer = vntend then done
d596 : a5a1             [ 3] 	lda df_tmpptra
d598 : c56b             [ 3] 	cmp df_vntend
d59a : d006             [ 3] 	bne df_var_move_byte_do
d59c : a5a2             [ 3] 	lda df_tmpptra+1
d59e : c56c             [ 3] 	cmp df_vntend+1
d5a0 : f011             [ 3] 	beq df_var_move_byte_fin
d5a2 :                       df_var_move_byte_do
                             	; First the source byte VVT size higher in memor
d5a2 : a008             [ 2] 	ldy #DFVVT_SZ
d5a4 : b1a1             [ 5] 	lda (df_tmpptra),y
                             	; And copy to new position lower in memory
d5a6 : a000             [ 2] 	ldy #0
d5a8 : 91a1             [ 5] 	sta (df_tmpptra),y
                             	; Increment memor pointer
                             	_incZPWord df_tmpptra
                             
d5b0 : 4c96d5           [ 3] 	jmp df_var_move_byte		; Always as C is not touch
d5b3 :                       df_var_move_byte_fin
                             	
                             	; Now subtract X bytes from VNT start to accommo
d5b3 : 8638             [ 3] 	stx tmp_d
d5b5 : 38               [ 2] 	sec
d5b6 : a569             [ 3] 	lda df_vntstrt
d5b8 : e538             [ 3] 	sbc tmp_d
d5ba : 8569             [ 3] 	sta df_vntstrt
d5bc : a56a             [ 3] 	lda df_vntstrt+1
d5be : e900             [ 2] 	sbc #0
d5c0 : 856a             [ 3] 	sta df_vntstrt+1
                             
                             	; VVT end is the same as VNT end
                             	_cpyZPWord df_vntend,df_vvtend
                             
                             
                             	; Copy done increment variable count
d5ca : e671             [ 5] 	inc df_varcnt
d5cc : 18               [ 2] 	clc
d5cd : 60               [ 6] 	rts
                             	
                             	
                             ;****************************************
                             ;* Analyse variable name
AS65 Assembler for R6502 [1.42].                                     Page  133
-------------------------------- bank\bank0.s --------------------------------

                             ;* Return type in A
                             ;* NOT C = It is a variable
                             ;* C = It is not a variable
                             ;* X = Length including pre-fixes
                             ;* Y = Offset to next char after var name
                             ;****************************************
d5ce :                       df_var_analyse
                             	; Default type is INT
d5ce : a901             [ 2] 	lda #DFVVT_INT
d5d0 : 85a1             [ 3] 	sta df_tmpptra
                             	
                             	; start at the current buffer position
d5d2 : a47c             [ 3] 	ldy df_linoff
                             	
                             	; check for PROC prefix
d5d4 : b90004           [ 4] 	lda df_linbuff,y
d5d7 : c95f             [ 2] 	cmp #'_'
                             	; if it is not proc then get the name
d5d9 : d005             [ 3] 	bne df_var_not_proc
                             	; else set type to PROC
d5db : a940             [ 2] 	lda #DFVVT_PROC
d5dd : 85a1             [ 3] 	sta df_tmpptra
                             	; skip over prefix
d5df : c8               [ 2] 	iny
d5e0 :                       df_var_not_proc
                             	; found the actual number of alpha nums
d5e0 : a2ff             [ 2] 	ldx #0xff
                             	; go back on pos on index as loop always does in
d5e2 : 88               [ 2] 	dey
d5e3 :                       df_var_type_countlen
                             	; count alpha nums
d5e3 : c8               [ 2] 	iny
d5e4 : e8               [ 2] 	inx
d5e5 : b90004           [ 4] 	lda df_linbuff,y
                             	; first char has to be alpha, rest can be alpha-
d5e8 : e000             [ 2] 	cpx #0
d5ea : d007             [ 3] 	bne df_var_type_countlen_alphanum
d5ec : 20f7d6           [ 6] 	jsr df_tk_isalpha
d5ef : b0f2             [ 3] 	bcs df_var_type_countlen
d5f1 : 9005             [ 3] 	bcc df_var_type_countlen_done
d5f3 :                       df_var_type_countlen_alphanum
d5f3 : 2004d7           [ 6] 	jsr df_tk_isalphanum
d5f6 : b0eb             [ 3] 	bcs df_var_type_countlen
d5f8 :                       df_var_type_countlen_done
d5f8 : e000             [ 2] 	cpx #0
d5fa : d00a             [ 4] 	bne df_var_analyse_chk_post
                             	; if zero alphanums error but not fatal
d5fc :                       df_var_analyse_err
                             	; If already prefix of PROC then fatal error
d5fc : a5a1             [ 3] 	lda df_tmpptra
d5fe : c940             [ 2] 	cmp #DFVVT_PROC
d600 : f002             [ 3] 	beq df_var_analyse_fatal_err
d602 : 38               [ 2] 	sec
d603 : 60               [ 6] 	rts
d604 :                       df_var_analyse_fatal_err
                             	SWBRK DFERR_SYNTAX
                             
d606 :                       df_var_analyse_chk_post
                             	; first see if the char is % or $
                             	; but cannot already have PROC prefix
d606 : c925             [ 2] 	cmp #'%'
d608 : d00d             [ 3] 	bne df_var_analyse_chk_dollar
AS65 Assembler for R6502 [1.42].                                     Page  134
-------------------------------- bank\bank0.s --------------------------------

d60a : a6a1             [ 3] 	ldx df_tmpptra
d60c : e040             [ 2] 	cpx #DFVVT_PROC
d60e : f0f4             [ 3] 	beq df_var_analyse_fatal_err
                             	; Set to INT type although it is the default alr
d610 : a901             [ 2] 	lda #DFVVT_INT
d612 : 85a1             [ 3] 	sta df_tmpptra
                             	; advance the buffer index
d614 : c8               [ 2] 	iny
d615 : d00f             [ 3] 	bne df_var_analyse_chk_arry
d617 :                       df_var_analyse_chk_dollar
                             	; now see if the char is $
                             	; but cannot already have PROC prefix
d617 : c924             [ 2] 	cmp #'$'
d619 : d00b             [ 3] 	bne df_var_analyse_chk_arry
d61b : a6a1             [ 3] 	ldx df_tmpptra
d61d : e040             [ 2] 	cpx #DFVVT_PROC
d61f : f0e3             [ 3] 	beq df_var_analyse_fatal_err
                             	; Set to STRING type
d621 : a904             [ 2] 	lda #DFVVT_STR
d623 : 85a1             [ 3] 	sta df_tmpptra
                             	; advance the buffer index
d625 : c8               [ 2] 	iny
d626 :                       df_var_analyse_chk_arry
                             	; Check for array type vs PROC
d626 : b90004           [ 4] 	lda df_linbuff,y
d629 : c95b             [ 2] 	cmp #'['
d62b : d00a             [ 3] 	bne df_var_not_arry
                             	; array and proc type not compatible
d62d : a5a1             [ 3] 	lda df_tmpptra
d62f : c940             [ 2] 	cmp #DFVVT_PROC
d631 : f0d1             [ 3] 	beq df_var_analyse_fatal_err
d633 : 0980             [ 2] 	ora #DFVVT_ARRY
d635 : 85a1             [ 3] 	sta df_tmpptra
d637 :                       df_var_not_arry
                             	; Ok got everything
                             	; calculate length from y
                             	; y is next char after var name
d637 : 98               [ 2] 	tya
d638 : 38               [ 2] 	sec
d639 : e57c             [ 3] 	sbc df_linoff			; where we started
                             	; put len in X
d63b : aa               [ 2] 	tax
                             	; put type in A
d63c : a5a1             [ 3] 	lda df_tmpptra
d63e : 18               [ 2] 	clc
d63f : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Find or create a variable
                             ;* If found then type needs to match mask
                             ;* Not a fatal error because could be part
                             ;* of a trial of different parsing options
                             ;****************************************
d640 :                       df_var_findcreate
                             	; save mask
d640 : 48               [ 3] 	pha
d641 : 20fdd4           [ 6] 	jsr df_var_find
d644 : b013             [ 3] 	bcs df_var_findcreate_create
                             	; restore mask to check for 0 then push
d646 : 68               [ 4] 	pla
d647 : 48               [ 3] 	pha
                             	; don't check mask if zero
AS65 Assembler for R6502 [1.42].                                     Page  135
-------------------------------- bank\bank0.s --------------------------------

d648 : f008             [ 3] 	beq df_var_findcreate_found
                             	; restore mask
d64a : 68               [ 4] 	pla
d64b : a000             [ 2] 	ldy #DFVVT_TYPE
d64d : 31a1             [ 5] 	and (df_tmpptra),y
                             	; but if mask is non zero then this must be non 
d64f : f019             [ 3] 	beq df_var_findcreate_err
d651 : 48               [ 3] 	pha		; Dummy push to match the pla
d652 :                       df_var_findcreate_found
                             	; discard mask
d652 : 68               [ 4] 	pla	
                             	; put slot address in x,a
d653 : a6a1             [ 3] 	ldx df_tmpptra
d655 : a5a2             [ 3] 	lda df_tmpptra+1
d657 : 18               [ 2] 	clc
d658 : 60               [ 6] 	rts
                             	
                             	;* If no existing variable found, add one to VNT
d659 :                       df_var_findcreate_create
                             	; find type (A) and length (X)
d659 : 20ced5           [ 6] 	jsr df_var_analyse
                             	; keep A temporarily
d65c : 85a1             [ 3] 	sta df_tmpptra
                             	; if not a variable then return with C=1
d65e : b009             [ 3] 	bcs df_var_findcreate_errp
                             	; check if mask needs to be applied
d660 : 68               [ 4] 	pla
d661 : f009             [ 3] 	beq df_var_analyse_ok
                             	; else mask and check
d663 : 25a1             [ 3] 	and df_tmpptra
                             	; mask match is ok
d665 : d005             [ 3] 	bne df_var_analyse_ok
                             	; else return not found
d667 : f001             [ 3] 	beq df_var_findcreate_err
d669 :                       df_var_findcreate_errp
d669 : 68               [ 4] 	pla
d66a :                       df_var_findcreate_err
d66a : 38               [ 2] 	sec
d66b : 60               [ 6] 	rts
                             
d66c :                       df_var_analyse_ok
                             	; extra space for zero terminator
d66c : e8               [ 2] 	inx
                             	; save data in reverse order to when needed
                             	; by the initialise section x,a (var name sz, ty
                             	; insert space of X bytes
d66d : a5a1             [ 3] 	lda df_tmpptra
d66f : 48               [ 3] 	pha
d670 : 8a               [ 2] 	txa
d671 : 48               [ 3] 	pha
                             	
d672 : 2073d5           [ 6] 	jsr df_var_insert_space
d675 : 9002             [ 3] 	bcc df_var_initialise_var
                             	; error inserting space
                             	SWBRK DFERR_OK
                             
                             	
d679 :                       df_var_initialise_var
d679 : 68               [ 4] 	pla
d67a : 85a5             [ 3] 	sta df_tmpptrc				; var name size + 1
                             
d67c : 68               [ 4] 	pla							; type
AS65 Assembler for R6502 [1.42].                                     Page  136
-------------------------------- bank\bank0.s --------------------------------

d67d : a000             [ 2] 	ldy #DFVVT_TYPE
d67f : 916f             [ 5] 	sta (df_vvtend),y			; put type in vvt slot
d681 : a900             [ 2] 	lda #0						; zero the rest
d683 : a007             [ 2] 	ldy #7
d685 :                       df_var_zero_vnt
d685 : 916f             [ 5] 	sta (df_vvtend),y
d687 : 88               [ 2] 	dey
d688 : d0fb             [ 3] 	bne df_var_zero_vnt
                             
d68a : c6a5             [ 5] 	dec df_tmpptrc				; 1 less to copy variable name
                             
d68c : a67c             [ 3] 	ldx df_linoff				; Start at var name beginning
d68e : a000             [ 2] 	ldy #0
                             	; copy variable name to vnt slot
d690 :                       df_var_findcreate_copy
d690 : bd0004           [ 4] 	lda df_linbuff,x
d693 : 9169             [ 5] 	sta (df_vntstrt),y
d695 : e8               [ 2] 	inx
d696 : c8               [ 2] 	iny
d697 : c6a5             [ 5] 	dec df_tmpptrc
d699 : d0f5             [ 3] 	bne df_var_findcreate_copy
                             	; put in zero terminator
d69b : a900             [ 2] 	lda #0
d69d : 9169             [ 5] 	sta (df_vntstrt),y
                             
                             	; Put X in to Y
d69f : 8a               [ 2] 	txa
d6a0 : a8               [ 2] 	tay
                             
                             	; Return address of slot in X,A
d6a1 : a66f             [ 3] 	ldx df_vvtend
d6a3 : a570             [ 3] 	lda df_vvtend+1
                             	
d6a5 : 847c             [ 3] 	sty df_linoff				; Y is the main index used
                             
d6a7 : 18               [ 2] 	clc
d6a8 : 60               [ 6] 	rts
                             	
d6a9 :                       mod_sz_var_e
                             
                             	include "dflat/tokenise.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  TOKENISE.S
                             ;*  Controlling module for tokenisation.  Basical
                             ;*  module is given a raw input buffer, which it 
                             ;*  attempt to tokenise fully.  Any syntax errors
                             ;*  thrown at the first point of detection.  If a
                             ;*  well, the parsed input will be in a tokenised
                             ;*  which can be executed in immediate mode or sa
                             ;*  line number order to memory.
                             ;*  dflat syntax is very simple - every statement
                             ;*  with a keyword.  The only exception is assign
                             ;*  procedure invocation - but even these scenari
                             ;*  tokenised so during runtime we just execute t
                             ;*  The raw buffer is consumed one byte at a time
AS65 Assembler for R6502 [1.42].                                     Page  137
-------------------------------- bank\bank0.s --------------------------------

                             ;*  tokenised buffer is written one byte at a tim
                             ;*  syntax means there is no need to undo reads o
                             ;*  or tokenised buffer.  The only refinement is 
                             ;*  allowed to peek a character in the raw buffer
                             ;*  consuming it.
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code
                             
d6a9 :                       mod_sz_tokenise_s
                             
                             
                             ;****************************************
                             ;* df_tk_peek_buf
                             ;* Return next char in A but no change to pointer
                             ;****************************************
d6a9 :                       df_tk_peek_buf
d6a9 : a47c             [ 3] 	ldy df_linoff
d6ab : b90004           [ 4] 	lda df_linbuff,y
d6ae : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* df_tk_get_buf
                             ;* Return next char in A and inc pointer
                             ;* Don't advance if null char found and Z=1
                             ;****************************************
d6af :                       df_tk_get_buf
d6af : a47c             [ 3] 	ldy df_linoff
d6b1 : b90004           [ 4] 	lda df_linbuff,y
d6b4 : f003             [ 3] 	beq df_tk_get_buf_null
d6b6 : c8               [ 2] 	iny
d6b7 : 847c             [ 3] 	sty df_linoff
d6b9 :                       df_tk_get_buf_null
d6b9 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* df_tk_put_tok
                             ;* Put A in token buffer and inc pointer
                             ;* C=Clear on exit
                             ;****************************************
d6ba :                       df_tk_put_tok
d6ba : a47d             [ 3] 	ldy df_tokoff
d6bc : 998004           [ 5] 	sta df_tokbuff,y
d6bf : c8               [ 2] 	iny
d6c0 : 3004             [ 3] 	bmi df_tk_put_overflow
d6c2 : 847d             [ 3] 	sty df_tokoff
d6c4 : 18               [ 2] 	clc
d6c5 : 60               [ 6] 	rts
d6c6 :                       df_tk_put_overflow
d6c6 : a958             [ 2] 	lda #'X'
d6c8 : 8d80bb           [ 4] 	sta 48000
                             	SWBRK DFERR_STRLONG
                             
                             
                             ;****************************************
                             ;* df_tk_isdigit
                             ;* Check char in A for number 0-9
                             ;* Return: CC = False, CS = True
                             ;****************************************
d6cd :                       df_tk_isdigit
AS65 Assembler for R6502 [1.42].                                     Page  138
-------------------------------- bank\bank0.s --------------------------------

d6cd : c93a             [ 2] 	cmp #'9'+1
d6cf : b005             [ 3] 	bcs df_tk_isdigit_false
d6d1 : c930             [ 2] 	cmp #'0'
d6d3 : 9001             [ 3] 	bcc df_tk_isdigit_false
d6d5 : 60               [ 6] 	rts						; C must be 1
d6d6 :                       df_tk_isdigit_false
d6d6 : 18               [ 2] 	clc
d6d7 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* df_tk_isbin
                             ;* Check char in A for binary digit
                             ;* Return: CC = False, CS = True
                             ;****************************************
d6d8 :                       df_tk_isbin
d6d8 : c930             [ 2] 	cmp #'0'
d6da : f005             [ 3] 	beq df_tk_isbin_true	; C=1
d6dc : c931             [ 2] 	cmp #'1'
d6de : f001             [ 3] 	beq df_tk_isbin_true	; C=1
d6e0 : 18               [ 2] 	clc
d6e1 :                       df_tk_isbin_true
d6e1 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* df_tk_ishex
                             ;* Check char in A for number 0-9, A-F, a-f
                             ;* Return: CC = False, CS = True
                             ;****************************************
d6e2 :                       df_tk_ishex
d6e2 : 48               [ 3] 	pha
d6e3 : 20cdd6           [ 6] 	jsr df_tk_isdigit
d6e6 : b00a             [ 3] 	bcs df_tk_ishex_truep
d6e8 : 0920             [ 2] 	ora #0x20
d6ea : c967             [ 2] 	cmp #'f'+1
d6ec : b006             [ 3] 	bcs df_tk_ishex_false
d6ee : c961             [ 2] 	cmp #'a'
d6f0 : 9002             [ 3] 	bcc df_tk_ishex_false
                             	; C must be 1 here
d6f2 :                       df_tk_ishex_truep
d6f2 : 68               [ 4] 	pla
d6f3 : 60               [ 6] 	rts
d6f4 :                       df_tk_ishex_false
d6f4 :                       df_tk_isalpha_false
d6f4 : 18               [ 2] 	clc
d6f5 : 68               [ 4] 	pla
d6f6 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* df_tk_isalpha
                             ;* Check next char in A alpha a-z, A-Z
                             ;* Return: CC = False, CS = True
                             ;****************************************
d6f7 :                       df_tk_isalpha
d6f7 : 48               [ 3] 	pha
d6f8 : 0920             [ 2] 	ora #0x20					; Convert to lower case for checki
d6fa : c97b             [ 2] 	cmp #'z'+1
d6fc : b0f6             [ 3] 	bcs df_tk_isalpha_false
d6fe : c961             [ 2] 	cmp #'a'
d700 : 90f2             [ 4] 	bcc df_tk_isalpha_false
                             	; C must be 1 here
d702 : 68               [ 4] 	pla
d703 : 60               [ 6] 	rts
AS65 Assembler for R6502 [1.42].                                     Page  139
-------------------------------- bank\bank0.s --------------------------------

                             
                             ;****************************************
                             ;* df_tk_isalphanum
                             ;* Check next char A for a-z,A-Z,0-9
                             ;* Return: CC = False, CS = True
                             ;****************************************
d704 :                       df_tk_isalphanum
d704 : 20f7d6           [ 6] 	jsr df_tk_isalpha
d707 : 90c4             [ 4] 	bcc df_tk_isdigit
d709 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* df_tk_isproc
                             ;* Check next char A for _
                             ;* Return: CC = False, CS = True
                             ;****************************************
d70a :                       df_tk_isproc
d70a : c95f             [ 2] 	cmp #'_'
d70c : f001             [ 3] 	beq df_tk_isproc_true	; C=1
d70e : 18               [ 2] 	clc
d70f :                       df_tk_isproc_true
d70f : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* df_tk_skip_ws
                             ;* Skip ws in linbuff
                             ;* Return: linoff updated to next non-ws, A = cha
                             ;****************************************
d710 :                       df_tk_skip_ws
d710 :                       df_tk_ws_loop1
d710 : 20a9d6           [ 6] 	jsr df_tk_peek_buf
d713 : 202dd7           [ 6] 	jsr df_tk_isws
d716 : 9007             [ 3] 	bcc df_tk_ws_done
d718 : e67c             [ 5] 	inc df_linoff
d71a : 20bad6           [ 6] 	jsr df_tk_put_tok
d71d : 90f1             [ 3] 	bcc df_tk_ws_loop1		; Always as put_tok clears C
d71f :                       df_tk_ws_done
d71f : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* df_tk_skip_ws
                             ;* Skip ws in linbuff
                             ;* Return: linoff updated to next non-ws, A = cha
                             ;****************************************
d720 :                       df_tk_strip_ws
d720 :                       df_tk_sws_loop1
d720 : 20a9d6           [ 6] 	jsr df_tk_peek_buf
d723 : 202dd7           [ 6] 	jsr df_tk_isws
d726 : 90f7             [ 3] 	bcc df_tk_ws_done
d728 : e67c             [ 5] 	inc df_linoff
d72a : 90f4             [ 3] 	bcc df_tk_sws_loop1		; Always as C is not touche
d72c :                       df_tk_sws_done
d72c : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* df_tk_isws
                             ;* Check char is ws (only space is counted)
                             ;* Return: CC = False, CS = True
                             ;****************************************
d72d :                       df_tk_isws
d72d : c920             [ 2] 	cmp #' '
d72f : d001             [ 3] 	bne df_tk_isws_false
AS65 Assembler for R6502 [1.42].                                     Page  140
-------------------------------- bank\bank0.s --------------------------------

                             	; C must be 1 here
d731 : 60               [ 6] 	rts
d732 :                       df_tk_isws_false
d732 :                       df_tk_expectok
d732 : 18               [ 2] 	clc
d733 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Find a character expected ignoring ws
                             ;* Input A = expected char
                             ;* CC = found, CS = Error
                             ;****************************************
d734 :                       df_tk_expect
d734 : 48               [ 3] 	pha
                             	; skip ws
d735 : 2010d7           [ 6] 	jsr df_tk_skip_ws
                             	; peek the buffer
d738 : 68               [ 4] 	pla
d739 : a47c             [ 3] 	ldy df_linoff
d73b : d90004           [ 4] 	cmp df_linbuff,y
                             	; if expected char then ok
d73e : f0f2             [ 3] 	beq df_tk_expectok
                             	; else error
d740 :                       df_tk_num_err
d740 :                       df_tk_char_err
d740 : 38               [ 2] 	sec
d741 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Find a character expected ignoring ws
                             ;* Input A = expected char
                             ;* Tokenises the character as well
                             ;* CC = found, CS = Error
                             ;****************************************
d742 :                       df_tk_expect_tok
d742 : 2034d7           [ 6] 	jsr df_tk_expect
d745 : b006             [ 3] 	bcs df_tk_expecttokret
d747 : 20afd6           [ 6] 	jsr df_tk_get_buf
d74a : 4cbad6           [ 3] 	jmp df_tk_put_tok
d74d :                       df_tk_expecttokret
d74d : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Find a character expected ignoring ws
                             ;* Input A = expected char
                             ;* Tokenises the character as well
                             ;* FATAL IF NOT FOUND
                             ;****************************************
d74e :                       df_tk_expect_tok_err
d74e : 2042d7           [ 6] 	jsr df_tk_expect_tok
d751 : b001             [ 3] 	bcs df_tk_expect_tok_fatal
                             	; C must be 0 here
d753 : 60               [ 6] 	rts
d754 :                       df_tk_expect_tok_fatal
                             	SWBRK DFERR_SYNTAX
                             
                             
                             ;****************************************
                             ;* Tokenise a constant number
                             ;****************************************
d756 :                       df_tk_num
                             	; X,A = address, linbuff must be on page boundar
AS65 Assembler for R6502 [1.42].                                     Page  141
-------------------------------- bank\bank0.s --------------------------------

d756 : 18               [ 2] 	clc
d757 : a900             [ 2] 	lda #lo(df_linbuff)
d759 : 657c             [ 3] 	adc df_linoff
d75b : aa               [ 2] 	tax
d75c : a904             [ 2] 	lda #hi(df_linbuff)
d75e : 6900             [ 2] 	adc #0
d760 : a000             [ 2] 	ldy #0				; any numeric format
d762 : 20c8c1           [ 6] 	jsr con_n_to_a
d765 : b0d9             [ 3] 	bcs df_tk_num_err
                             	; A = format
                             	; X = how many digits processed
                             	; Jump over that many chars
d767 : a8               [ 2] 	tay
d768 : 18               [ 2] 	clc
d769 : 8a               [ 2] 	txa
d76a : 657c             [ 3] 	adc df_linoff
d76c : 857c             [ 3] 	sta df_linoff
                             	; Now tokenise an integer (always 2 bytes, but t
d76e : 98               [ 2] 	tya
d76f : c901             [ 2] 	cmp #NUM_DEC
d771 : d004             [ 3] 	bne df_tk_num_hexbin
d773 : a909             [ 2] 	lda #DFTK_INTDEC	; decimal always an int
d775 : d016             [ 3] 	bne df_tk_num_put
d777 :                       df_tk_num_hexbin
d777 : c902             [ 2] 	cmp #NUM_HEX
d779 : d00a             [ 3] 	bne df_tk_num_bin
d77b : a906             [ 2] 	lda #DFTK_BYTHEX	; Assume BYT
d77d : e005             [ 2] 	cpx #5				; If >4 chars then INT
d77f : 900c             [ 3] 	bcc df_tk_num_put
d781 : a90a             [ 2] 	lda #DFTK_INTHEX
d783 : d008             [ 3] 	bne df_tk_num_put
d785 :                       df_tk_num_bin
d785 : a907             [ 2] 	lda #DFTK_BYTBIN	; Assume BYT
d787 : e00b             [ 2] 	cpx #11				; If >10 chars then INT
d789 : 9002             [ 3] 	bcc df_tk_num_put
d78b : a90b             [ 2] 	lda #DFTK_INTBIN
d78d :                       df_tk_num_put
d78d : 20bad6           [ 6] 	jsr df_tk_put_tok	; Save number type (DEC,HEX,BI
d790 : a53d             [ 3] 	lda num_a
d792 : 20bad6           [ 6] 	jsr df_tk_put_tok
d795 : a53e             [ 3] 	lda num_a+1
d797 : 4cbad6           [ 3] 	jmp df_tk_put_tok
                             
                             ;****************************************
                             ;* Tokenise a constant char
                             ;****************************************
d79a :                       df_tk_char
                             	; skip the first quote
d79a : 20afd6           [ 6] 	jsr df_tk_get_buf
                             	; put in the token
d79d : a900             [ 2] 	lda #DFTK_CHR
d79f : 20bad6           [ 6] 	jsr df_tk_put_tok
                             	; get the char value and save
d7a2 : 20afd6           [ 6] 	jsr df_tk_get_buf
d7a5 : 20bad6           [ 6] 	jsr df_tk_put_tok
                             	; always put two bytes in, even for a BYTE type
d7a8 : a900             [ 2] 	lda #0
d7aa : 20bad6           [ 6] 	jsr df_tk_put_tok
                             	; next byte must be single quote
d7ad : 20afd6           [ 6] 	jsr df_tk_get_buf
d7b0 : c927             [ 2] 	cmp #0x27
d7b2 : d08c             [ 3] 	bne df_tk_char_err
AS65 Assembler for R6502 [1.42].                                     Page  142
-------------------------------- bank\bank0.s --------------------------------

d7b4 : 18               [ 2] 	clc
d7b5 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Tokenise a constant string
                             ;****************************************
d7b6 :                       df_tk_str
                             	; skip the first quote
d7b6 : 20afd6           [ 6] 	jsr df_tk_get_buf
                             	; put in the token
d7b9 : a910             [ 2] 	lda #DFTK_STRLIT
d7bb : 20bad6           [ 6] 	jsr df_tk_put_tok
d7be :                       df_tk_str_ch
                             	; copy string chars in to token buffer
                             	; until another quote or end of line
d7be : 20afd6           [ 6] 	jsr df_tk_get_buf
d7c1 : c900             [ 2] 	cmp #0
d7c3 : f011             [ 3] 	beq df_tk_str_err
d7c5 : c922             [ 2] 	cmp #0x22
d7c7 : f006             [ 3] 	beq df_tk_str_don
d7c9 : 20bad6           [ 6] 	jsr df_tk_put_tok
d7cc : 4cbed7           [ 3] 	jmp df_tk_str_ch
d7cf :                       df_tk_str_don
                             	; zero terminated strings
d7cf : a900             [ 2] 	lda #0
d7d1 : 4cbad6           [ 3] 	jmp df_tk_put_tok
d7d4 :                       df_tk_var_noarry
d7d4 : 18               [ 2] 	clc
d7d5 : 60               [ 6] 	rts
d7d6 :                       df_tk_str_err
                             	SWBRK DFERR_SYNTAX
                             
                             
                             ;****************************************
                             ;* Tokenise a constant (num, string, char)
                             ;****************************************
d7d8 :                       df_tk_const
d7d8 : 2010d7           [ 6] 	jsr df_tk_skip_ws
                             	; Check what constant it is
d7db : 20a9d6           [ 6] 	jsr df_tk_peek_buf
                             	; Minus symbol could be start of a number
d7de : c92d             [ 2] 	cmp #'-'
d7e0 : f005             [ 3] 	beq df_tk_const_try_num
d7e2 : 20cdd6           [ 6] 	jsr df_tk_isdigit
d7e5 : 9003             [ 3] 	bcc df_tk_const_try_str
d7e7 :                       df_tk_const_try_num
d7e7 : 4c56d7           [ 3] 	jmp df_tk_num
d7ea :                       df_tk_const_try_str
                             	; check for double quote
d7ea : c922             [ 2] 	cmp #0x22
d7ec : d003             [ 3] 	bne df_tk_const_try_char
d7ee : 4cb6d7           [ 3] 	jmp df_tk_str
d7f1 :                       df_tk_const_try_char
                             	; check for single apostrophe
d7f1 : c927             [ 2] 	cmp #0x27
d7f3 : d003             [ 3] 	bne df_tk_const_err
d7f5 : 4c9ad7           [ 3] 	jmp df_tk_char
d7f8 :                       df_tk_const_err
                             	SWBRK DFERR_SYNTAX
                             
                             
                             ;****************************************
AS65 Assembler for R6502 [1.42].                                     Page  143
-------------------------------- bank\bank0.s --------------------------------

                             ;* Tokenise a variable - A = mask
                             ;* Return : A = variable index
                             ;****************************************
d7fa :                       df_tk_var
                             	; Find or create variable, address in X,A
d7fa : 2040d6           [ 6] 	jsr df_var_findcreate
d7fd : 9001             [ 4] 	bcc df_tk_var_cont
d7ff : 60               [ 6] 	rts
d800 :                       df_tk_var_cont
                             	; Save X,A for later
d800 : 48               [ 3] 	pha
d801 : 8a               [ 2] 	txa
d802 : 48               [ 3] 	pha
                             	; Put VAR escape in token buffer
d803 : a911             [ 2] 	lda #DFTK_VAR
d805 : 20bad6           [ 6] 	jsr df_tk_put_tok
                             	; Get variable address and put in token buffer
d808 : 68               [ 4] 	pla
d809 : 20bad6           [ 6] 	jsr df_tk_put_tok
d80c : 68               [ 4] 	pla
d80d : 20bad6           [ 6] 	jsr df_tk_put_tok
                             	; count of any array indices
d810 :                       df_tk_var_ck
                             	; check if array procesing needed
d810 : a95b             [ 2] 	lda #'['
d812 : 2042d7           [ 6] 	jsr df_tk_expect_tok
d815 : b0bd             [ 4] 	bcs df_tk_var_noarry
                             	; process numeric expression in bracket
d817 : 4cb6d8           [ 3] 	jmp df_tk_narry
                             
                             ;****************************************
                             ;* Tokenise a parameter in proc definition
                             ;* Return : A = variable index
                             ;****************************************
d81a :                       df_tk_parm
                             	; if preceeding with non-local qualifier DFTK_VA
d81a : 20a9d6           [ 6] 	jsr df_tk_peek_buf
d81d : c926             [ 2] 	cmp #DFTK_VARPARM
d81f : d006             [ 3] 	bne df_tk_parm_skip_var
                             	; get the qualifier and put in token buffer
d821 : 20afd6           [ 6] 	jsr df_tk_get_buf
d824 : 20bad6           [ 6] 	jsr df_tk_put_tok
d827 :                       df_tk_parm_skip_var
                             	; don't have a certain type of var
d827 : a900             [ 2] 	lda #0
d829 : 4cfad7           [ 3] 	jmp df_tk_var
                             
                             
                             ;****************************************
                             ;* Tokenise a variable to localise
                             ;* Return : A,X = variable index
                             ;****************************************
d82c :                       df_tk_localvar
                             	; Find or create variable, index in A
d82c : 2040d6           [ 6] 	jsr df_var_findcreate
d82f : 9001             [ 3] 	bcc df_tk_localvar_cont
d831 : 60               [ 6] 	rts
d832 :                       df_tk_localvar_cont
                             	; Save variable address for later
d832 : 48               [ 3] 	pha
d833 : 8a               [ 2] 	txa
d834 : 48               [ 3] 	pha
AS65 Assembler for R6502 [1.42].                                     Page  144
-------------------------------- bank\bank0.s --------------------------------

                             	; Put VAR escape in token buffer
d835 : a911             [ 2] 	lda #DFTK_VAR
d837 : 20bad6           [ 6] 	jsr df_tk_put_tok
                             	; Get variable index and put in token buffer
d83a : 68               [ 4] 	pla
d83b : 20bad6           [ 6] 	jsr df_tk_put_tok
d83e : 68               [ 4] 	pla
d83f : 4cbad6           [ 3] 	jmp df_tk_put_tok
                             
                             ;****************************************
                             ;* Tokenise call or def of proc
                             ;* Mode : A = 0 means def, else call
                             ;****************************************
d842 :                       df_tk_proc
d842 : 858b             [ 3] 	sta df_procmode
d844 : 2010d7           [ 6] 	jsr df_tk_skip_ws
                             	; Find or create proc, index in A
d847 : a940             [ 2] 	lda #DFVVT_PROC
d849 : 2040d6           [ 6] 	jsr df_var_findcreate
d84c : b066             [ 3] 	bcs df_tk_proc_err
                             
                             	; Save variable address for later
d84e : 868e             [ 3] 	stx df_procptr
d850 : 858f             [ 3] 	sta df_procptr+1
                             
                             	; Put PROC escape in token buffer
d852 : a912             [ 2] 	lda #DFTK_PROC
d854 : 20bad6           [ 6] 	jsr df_tk_put_tok
                             	; Get variable address and put in token buffer
d857 : a58e             [ 3] 	lda df_procptr
d859 : 20bad6           [ 6] 	jsr df_tk_put_tok
d85c : a58f             [ 3] 	lda df_procptr+1
d85e : 20bad6           [ 6] 	jsr df_tk_put_tok
                             
                             	; initially assume no args
d861 : a900             [ 2] 	lda #0
d863 : 858c             [ 3] 	sta df_procargs
                             
                             	; Must have an open bracket
d865 : a928             [ 2] 	lda #'('
d867 : 204ed7           [ 6] 	jsr df_tk_expect_tok_err
                             	; if immediately followed by close bracket then 
d86a : 20a9d6           [ 6] 	jsr df_tk_peek_buf
d86d : c929             [ 2] 	cmp #')'
d86f : f030             [ 3] 	beq df_tk_proc_noparm
                             	; else tokenise parm variables
d871 :                       df_tk_proc_parms
d871 : 2010d7           [ 6] 	jsr df_tk_skip_ws
                             	; call appropriate routine for mode
d874 : a58b             [ 3] 	lda df_procmode
d876 : d006             [ 3] 	bne df_tk_proc_call
                             	; tokenise parameter variable in def mode
d878 : 201ad8           [ 6] 	jsr df_tk_parm
d87b : 4c87d8           [ 3] 	jmp df_tk_proc_skip_call
d87e :                       df_tk_proc_call
                             	; tokenise expression in call mode
                             	;**CHECK**
d87e : a58c             [ 3] 	lda df_procargs	; procargs could be impacted ins
d880 : 48               [ 3] 	pha
d881 : 2036d9           [ 6] 	jsr df_tk_expression
d884 : 68               [ 4] 	pla
d885 : 858c             [ 3] 	sta df_procargs
AS65 Assembler for R6502 [1.42].                                     Page  145
-------------------------------- bank\bank0.s --------------------------------

d887 :                       df_tk_proc_skip_call
d887 : b02a             [ 3] 	bcs df_tk_proc_errp
                             	; increment number of args
d889 : e68c             [ 5] 	inc df_procargs
                             	; what is next non ws char
d88b : 2010d7           [ 6] 	jsr df_tk_skip_ws
d88e : c92c             [ 2] 	cmp #','
d890 : f006             [ 3] 	beq df_tk_proc_comma
d892 : c929             [ 2] 	cmp #')'
d894 : d01d             [ 3] 	bne df_tk_proc_errp
d896 : f009             [ 3] 	beq df_tk_proc_noparm
                             	; comma found, more parms to process
d898 :                       df_tk_proc_comma
d898 : 20afd6           [ 6] 	jsr df_tk_get_buf
d89b : 20bad6           [ 6] 	jsr df_tk_put_tok
d89e : 4c71d8           [ 3] 	jmp df_tk_proc_parms
d8a1 :                       df_tk_proc_noparm
                             	; consume the close bracket
d8a1 : 20afd6           [ 6] 	jsr df_tk_get_buf
d8a4 : 20bad6           [ 6] 	jsr df_tk_put_tok
                             
                             	; update arg count if def mode
d8a7 : a68b             [ 3] 	ldx df_procmode
d8a9 : d006             [ 3] 	bne df_tk_proc_skip_args
                             	; use address of proc
                             	; put arg count in dim2
d8ab : a004             [ 2] 	ldy #DFVVT_DIM2
d8ad : a58c             [ 3] 	lda df_procargs
d8af : 918e             [ 5] 	sta (df_procptr),y
d8b1 :                       df_tk_proc_skip_args
d8b1 : 18               [ 2] 	clc
d8b2 : 60               [ 6] 	rts
d8b3 :                       df_tk_proc_errp
d8b3 : 68               [ 4] 	pla
d8b4 :                       df_tk_proc_err
                             	SWBRK DFERR_SYNTAX
                             
                             
                             ;****************************************
                             ;* Parse array index
                             ;****************************************
d8b6 :                       df_tk_narry
                             	; if array open bracket encountered
                             	; then tokenise a numeric expression
d8b6 : 2036d9           [ 6] 	jsr df_tk_expression
                             	; If a comma is next, then another expression
d8b9 : a92c             [ 2] 	lda #','
d8bb : 2042d7           [ 6] 	jsr df_tk_expect_tok
d8be : b003             [ 3] 	bcs df_tk_narry_end
d8c0 : 2036d9           [ 6] 	jsr df_tk_expression
d8c3 :                       df_tk_narry_end
                             	; after the second dimension, must be close sq b
d8c3 : a95d             [ 2] 	lda #']'
d8c5 : 4c4ed7           [ 3] 	jmp df_tk_expect_tok_err
                             
                             ;****************************************
                             ;* Parse bracket
                             ;****************************************
d8c8 :                       df_tk_nbrkt
                             	; if  open bracket encountered
                             	; then tokenise a numeric expression
d8c8 : 2036d9           [ 6] 	jsr df_tk_expression
AS65 Assembler for R6502 [1.42].                                     Page  146
-------------------------------- bank\bank0.s --------------------------------

d8cb : a929             [ 2] 	lda #')'
d8cd : 4c4ed7           [ 3] 	jmp df_tk_expect_tok_err
                             
                             ;****************************************
                             ;* Parse call to numeric proc
                             ;****************************************
d8d0 :                       df_tk_nterm_proc
                             	; call mode
d8d0 : a901             [ 2] 	lda #1
d8d2 : 4c42d8           [ 3] 	jmp df_tk_proc
                             
                             ;****************************************
                             ;* Parse numeric term
                             ;****************************************
d8d5 :                       df_tk_nterm
                             	; skip any ws first, copying in to tokbuff
                             	; A containts the non-ws char
d8d5 : 2010d7           [ 6] 	jsr df_tk_skip_ws
d8d8 : c900             [ 2] 	cmp #0
d8da : f004             [ 3] 	beq df_tk_nterm_done
d8dc : c93a             [ 2] 	cmp #':'
d8de : d002             [ 3] 	bne df_tk_nterm_cont
d8e0 :                       df_tk_nterm_done
d8e0 :                       df_tk_nop_false
d8e0 : 38               [ 2] 	sec
d8e1 : 60               [ 6] 	rts
d8e2 :                       df_tk_nterm_cont
                             	; if open bracket then process it
d8e2 : c928             [ 2] 	cmp #'('
d8e4 : d009             [ 3] 	bne df_tk_nterm_tryfn
                             	; get the bracket and put in token buffer
d8e6 : 20afd6           [ 6] 	jsr df_tk_get_buf
d8e9 : 20bad6           [ 6] 	jsr df_tk_put_tok
                             	; go process the open bracket
d8ec : 4cc8d8           [ 3] 	jmp df_tk_nbrkt
d8ef :                       df_tk_nterm_tryfn
d8ef : 48               [ 3] 	pha
                             	; try decoding a built-in function
d8f0 : a902             [ 2] 	lda #DFTK_FN
d8f2 : 2013da           [ 6] 	jsr df_tk_matchtok
d8f5 : b00e             [ 4] 	bcs df_tk_nterm_try_proc
                             	; pull old A in to Y but don't use
d8f7 : 68               [ 4] 	pla
d8f8 : a8               [ 2] 	tay
                             	; restore A and put the token with MSB set
d8f9 : 8a               [ 2] 	txa
d8fa : 0980             [ 2] 	ora #0x80
d8fc : 20bad6           [ 6] 	jsr df_tk_put_tok
d8ff : 20e5d9           [ 6] 	jsr df_tk_exec_parser
d902 : b01b             [ 3] 	bcs df_tk_nterm_err
d904 : 60               [ 6] 	rts
d905 :                       df_tk_nterm_try_proc
d905 : 68               [ 4] 	pla
                             	; if it's not a func then try proc
d906 : 200ad7           [ 6] 	jsr df_tk_isproc
d909 : 9006             [ 3] 	bcc df_tk_nterm_try_var
d90b : 20d0d8           [ 6] 	jsr df_tk_nterm_proc
d90e : b00f             [ 3] 	bcs df_tk_nterm_err
d910 : 60               [ 6] 	rts
d911 :                       df_tk_nterm_try_var
                             	; Non-zero mask means var must be this type
d911 : a900             [ 2] 	lda #0
AS65 Assembler for R6502 [1.42].                                     Page  147
-------------------------------- bank\bank0.s --------------------------------

d913 : 20fad7           [ 6] 	jsr df_tk_var
d916 : b001             [ 3] 	bcs df_tk_nterm_try_const
d918 : 60               [ 6] 	rts
d919 :                       df_tk_nterm_try_const
                             	; Try decoding a constant
d919 : 20d8d7           [ 6] 	jsr df_tk_const
d91c : b001             [ 3] 	bcs df_tk_nterm_err
d91e : 60               [ 6] 	rts
d91f :                       df_tk_nterm_err
                             	SWBRK DFERR_SYNTAX
                             
                             
                             ;****************************************
                             ;* Parse numeric operator
                             ;****************************************
d921 :                       df_tk_nop
d921 : 2010d7           [ 6] 	jsr df_tk_skip_ws
d924 : c900             [ 2] 	cmp #0
d926 : f0b8             [ 4] 	beq df_tk_nop_false
                             	; must be an operator token for numeric
d928 : a90c             [ 2] 	lda #DFTK_OP | DFTK_STROP
d92a : 2013da           [ 6] 	jsr df_tk_matchtok
d92d : b0b1             [ 4] 	bcs df_tk_nop_false
                             	; got a token
d92f : 0980             [ 2] 	ora #DFTK_TOKEN
d931 : 20bad6           [ 6] 	jsr df_tk_put_tok
d934 : 18               [ 2] 	clc
d935 : 60               [ 6] 	rts
                             
                             	
                             ;****************************************
                             ;* Parse numeric expression
                             ;****************************************
d936 :                       df_tk_expression
                             	; Tokenise a numeric term
d936 : 20d5d8           [ 6] 	jsr df_tk_nterm
d939 : b006             [ 3] 	bcs df_tk_expre_err
                             	; Try and tokenise a numeric operator
d93b : 2021d9           [ 6] 	jsr df_tk_nop
                             	; If an operator was tokenised
                             	; then loop back for another term
d93e : 90f6             [ 3] 	bcc df_tk_expression
                             	; If no operator was found then
                             	; expression is done
d940 :                       df_tk_not_eos
d940 : 18               [ 2] 	clc
d941 :                       df_tk_expre_err
d941 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Find expected token and parse expression
                             ;****************************************
d942 :                       df_tk_tok_expression
d942 : 204ed7           [ 6] 	jsr df_tk_expect_tok_err
d945 : 4c36d9           [ 3] 	jmp df_tk_expression
                             
                             
                             ;****************************************
                             ;* Check end of statement
                             ;****************************************
d948 :                       df_tk_isEOS
d948 : a93a             [ 2] 	lda #':'
AS65 Assembler for R6502 [1.42].                                     Page  148
-------------------------------- bank\bank0.s --------------------------------

d94a : 2042d7           [ 6] 	jsr df_tk_expect_tok
d94d : b0f1             [ 3] 	bcs df_tk_not_eos
                             	; this is the position of the next statement
d94f : a57d             [ 3] 	lda df_tokoff
                             	; put it in the last statement offset slot
d951 : a47f             [ 3] 	ldy df_nxtstidx
d953 : 998004           [ 5] 	sta df_tokbuff,y
d956 : 38               [ 2] 	sec
d957 : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* Parse user defined proc
                             ;****************************************
d958 :                       df_tk_parse_user_proc
                             	; put proc token in as a call
d958 : a981             [ 2] 	lda #0x81
d95a : 20bad6           [ 6] 	jsr df_tk_put_tok
d95d : a901             [ 2] 	lda #1
d95f : 4c42d8           [ 3] 	jmp df_tk_proc
                             
                             
                             ;****************************************
                             ;* Parse a command
                             ;* Do not fatal error if this fails
                             ;****************************************
d962 :                       df_tk_parse_command
                             	; only looking for keywords
d962 : a901             [ 2] 	lda #DFTK_KW
d964 : 2013da           [ 6] 	jsr df_tk_matchtok
                             	; if didn't find regular keywords then try non f
d967 : b010             [ 3] 	bcs df_tk_parse_command_err
                             	; if match then store token in the line buffer
                             	; Set MSB
d969 : 0980             [ 2] 	ora #0x80
d96b : 20bad6           [ 6] 	jsr df_tk_put_tok
                             	; call the parser to do tokenise based on the st
d96e : a583             [ 3] 	lda df_symoff
d970 : 20e5d9           [ 6] 	jsr df_tk_exec_parser
d973 : b004             [ 3] 	bcs df_tk_parse_command_err
                             	; [1] ignore white space but keep it
d975 : 2010d7           [ 6] 	jsr df_tk_skip_ws
                             	; No error in parsing this command
d978 :                       df_tk_parse_command_done
d978 : 18               [ 2] 	clc
d979 :                       df_tk_parse_command_err
d979 : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* lexer
                             ;****************************************
d97a :                       df_lexer_line
d97a : a900             [ 2] 	lda #0
                             	; start at the beginning of the line buffer
d97c : 857c             [ 3] 	sta df_linoff
                             	; start at the beginning of the tokenised buffer
d97e : 857d             [ 3] 	sta df_tokoff
                             	; set current line to the token buffer
d980 : a980             [ 2] 	lda #lo(df_tokbuff)
d982 : 8586             [ 3] 	sta df_currlin
d984 : a904             [ 2] 	lda #hi(df_tokbuff)
AS65 Assembler for R6502 [1.42].                                     Page  149
-------------------------------- bank\bank0.s --------------------------------

d986 : 8587             [ 3] 	sta df_currlin+1
                             	; Set the line length to 0
d988 : a900             [ 2] 	lda #0
d98a : 20bad6           [ 6] 	jsr df_tk_put_tok
                             
                             	; any leading white space, ignore and discard
d98d : 2020d7           [ 6] 	jsr df_tk_strip_ws
                             
                             	; if peek next character is a number then assume
                             	; else assume a statement
d990 : 20cdd6           [ 6] 	jsr df_tk_isdigit
d993 : 9006             [ 3] 	bcc df_lexer_skip_lnum
                             	; if line number then capture the line number an
d995 : 20f4d9           [ 6] 	jsr df_tk_linenum
d998 : 4ca3d9           [ 3] 	jmp df_tk_body
d99b :                       df_lexer_skip_lnum
                             	; if no line number then zero out the line numbe
                             	; line zero will indicate an immediate mode comm
d99b : a900             [ 2] 	lda #0
d99d : 20bad6           [ 6] 	jsr df_tk_put_tok				; Line num low byte
d9a0 : 20bad6           [ 6] 	jsr df_tk_put_tok				; Line num high byte
d9a3 :                       df_tk_body
                             	; Offset for next statement
d9a3 : a57d             [ 3] 	lda df_tokoff
d9a5 : 857f             [ 3] 	sta df_nxtstidx
d9a7 : a900             [ 2] 	lda #0
d9a9 : 20bad6           [ 6] 	jsr df_tk_put_tok				; Offset to next statement
                             	; [1] capture white space from line buffer in to
d9ac : 2010d7           [ 6] 	jsr df_tk_skip_ws
                             	; If next non ws is zero then this is an empty l
                             	; so return with length zero but line number fil
                             	; token buffer
d9af : c900             [ 2] 	cmp #0
d9b1 : f02e             [ 3] 	beq df_tk_line_empty
                             	; if next char is _ then parse a user defined pr
d9b3 : 200ad7           [ 6] 	jsr df_tk_isproc
d9b6 : 9006             [ 3] 	bcc df_tk_try_command
d9b8 : 2058d9           [ 6] 	jsr df_tk_parse_user_proc
d9bb : 4ccad9           [ 3] 	jmp df_tk_done
d9be :                       df_tk_try_command
                             	; try  a keyword
d9be : 2062d9           [ 6] 	jsr df_tk_parse_command
d9c1 : b002             [ 3] 	bcs	df_tk_try_assign
d9c3 : 9005             [ 3] 	bcc df_tk_done
d9c5 :                       df_tk_try_assign
                             	; nothing but to try an assignment operation
d9c5 : 205add           [ 6] 	jsr df_tk_assign
d9c8 : b019             [ 3] 	bcs	df_tk_parseerror
d9ca :                       df_tk_done
                             	; put statement index stuff here in case of mult
                             	; check for : and if present tokenise plus updat
                             	; then go back to try and process another statem
d9ca : 2048d9           [ 6] 	jsr df_tk_isEOS
d9cd : b0d4             [ 3] 	bcs df_tk_body
                             	; if not at end of line, then must be error
d9cf : 20a9d6           [ 6] 	jsr df_tk_peek_buf
d9d2 : c900             [ 2] 	cmp #0
d9d4 : d00d             [ 3] 	bne df_tk_parseerror
                             	; Get line length length
d9d6 : a47d             [ 3] 	ldy df_tokoff
                             	; ensure there is always a zero after the last t
d9d8 : a900             [ 2] 	lda #0
AS65 Assembler for R6502 [1.42].                                     Page  150
-------------------------------- bank\bank0.s --------------------------------

d9da : 998004           [ 5] 	sta df_tokbuff,y
                             	; save the line length
d9dd : 98               [ 2] 	tya
d9de : 8d8004           [ 4] 	sta df_tokbuff
d9e1 :                       df_tk_line_empty
d9e1 : 18               [ 2] 	clc
d9e2 : 60               [ 6] 	rts
d9e3 :                       df_tk_parseerror
                             	SWBRK DFERR_SYNTAX
                             
                             
                             ;****************************************
                             ;* df_tk_parsestatement
                             ;* Execute parse routine for this statement
                             ;* Input: df_tokoff is the token found
                             ;* Return: CC = Parsed ok, CS = Error
                             ;****************************************
d9e5 :                       df_tk_exec_parser
d9e5 : 0a               [ 2] 	asl a
d9e6 : aa               [ 2] 	tax
d9e7 : bd26dc           [ 4] 	lda df_tk_tokenjmp,x
d9ea : 85a1             [ 3] 	sta df_tmpptra
d9ec : bd27dc           [ 4] 	lda df_tk_tokenjmp+1,x
d9ef : 85a2             [ 3] 	sta df_tmpptra+1
d9f1 : 6ca100           [ 6] 	jmp (df_tmpptra)
                             
                             
                             ;****************************************
                             ;* df_tk_linenum
                             ;* Tokenise line number
                             ;****************************************
d9f4 :                       df_tk_linenum
                             	; Convert line number to 16 bit number
                             	; Save the line number
                             	; Increment the buffer pointer
d9f4 : 18               [ 2] 	clc
d9f5 : a900             [ 2] 	lda #lo(df_linbuff)
d9f7 : 657c             [ 3] 	adc df_linoff
d9f9 : aa               [ 2] 	tax
d9fa : a904             [ 2] 	lda #hi(df_linbuff)
d9fc : 6900             [ 2] 	adc #0
d9fe : a001             [ 2] 	ldy #1			; Decimal format only
da00 : 20c8c1           [ 6] 	jsr con_n_to_a
da03 : 18               [ 2] 	clc
da04 : 8a               [ 2] 	txa
da05 : 657c             [ 3] 	adc df_linoff
da07 : 857c             [ 3] 	sta df_linoff
                             	; Now save line number
da09 : a53d             [ 3] 	lda num_a
da0b : 20bad6           [ 6] 	jsr df_tk_put_tok
da0e : a53e             [ 3] 	lda num_a+1
da10 : 4cbad6           [ 3] 	jmp df_tk_put_tok
                             
                             ;****************************************
                             ;* df_tk_matchtok
                             ;* Try and find a token match against the table d
                             ;* Input:
                             ;*			Current df_linbuff and df_linoff
                             ;* Return: 	CC = No Error, CS = Error
                             ;*			df_linoff points to next char if CC else unc
                             ;*			df_symoff is the symbol table index
                             ;****************************************
AS65 Assembler for R6502 [1.42].                                     Page  151
-------------------------------- bank\bank0.s --------------------------------

da13 :                       df_tk_matchtok
                             	; save the mask to check types against
da13 : 48               [ 3] 	pha
                             	; Start at token symbols beginning
da14 : a995             [ 2] 	lda #lo(df_tokensyms)
da16 : 8581             [ 3] 	sta df_symtab
da18 : a9da             [ 2] 	lda #hi(df_tokensyms)
da1a : 8582             [ 3] 	sta df_symtab+1
da1c : a900             [ 2] 	lda #0
da1e : 8583             [ 3] 	sta df_symoff
da20 :                       df_tk_checknexttok
                             	; check this token type first
da20 : 68               [ 4] 	pla
da21 : 48               [ 3] 	pha
da22 : a683             [ 3] 	ldx df_symoff
da24 : 3de8dc           [ 4] 	and df_tk_tokentype,x
da27 : f032             [ 3] 	beq df_tk_symnomatch
                             	; Special check for operator token
                             	; because of order of precedence fudge
                             	; ******FIX THIS ONE DAY!!!!!!******
                             	; if parm and token type = DFTK_OP then ok
                             	; if parm and token type <> DFTK_OP then not ok
da29 : bde8dc           [ 4] 	lda df_tk_tokentype,x
da2c : 2908             [ 2] 	and #DFTK_OP
da2e : f009             [ 3] 	beq df_tk_matchtok_skip_op
da30 : 68               [ 4] 	pla
da31 : 48               [ 3] 	pha
da32 : 2908             [ 2] 	and #DFTK_OP
da34 : 3de8dc           [ 4] 	and df_tk_tokentype,x
da37 : f022             [ 3] 	beq df_tk_symnomatch
da39 :                       df_tk_matchtok_skip_op
                             	; From the line buffer current pointer
                             	; Check for a token match
da39 : a47c             [ 3] 	ldy df_linoff
da3b : a200             [ 2] 	ldx #0
da3d :                       df_tk_checktokch
                             	; Get symtable char
                             	; and mask off MSB
da3d : a181             [ 6] 	lda (df_symtab,x)
                             	; Save the value and mask off MSB
da3f : 48               [ 3] 	pha
da40 : 297f             [ 2] 	and #0x7f
                             	; Compare with current line buffer char
da42 : d90004           [ 4] 	cmp df_linbuff,y
                             	; If chars not match then this symbol fails
da45 : d013             [ 3] 	bne df_tk_symnomatchp
                             	; If match and symbol has MSB then
                             	; all of the symbol matched
da47 : 68               [ 4] 	pla
da48 : 3033             [ 3] 	bmi df_tk_symfound
                             	; else more chars to match
                             	; so increment line buffer pointers
                             	_incZPWord df_symtab
                             
da50 : c8               [ 2] 	iny
                             	; If buffer is '.' then let this be a match
da51 : b90004           [ 4] 	lda df_linbuff,y
da54 : c92e             [ 2] 	cmp #'.'
da56 : f025             [ 3] 	beq df_tk_symfound
da58 : d0e3             [ 3] 	bne df_tk_checktokch	; branch always
da5a :                       df_tk_symnomatchp
da5a : 68               [ 4] 	pla
AS65 Assembler for R6502 [1.42].                                     Page  152
-------------------------------- bank\bank0.s --------------------------------

da5b :                       df_tk_symnomatch
                             	; Increment symbol counter to next symbol
da5b : e683             [ 5] 	inc df_symoff
da5d :                       df_tk_symnextentry
da5d : a200             [ 2] 	ldx #0
da5f : a181             [ 6] 	lda (df_symtab,x)
                             	; End of symbol is MSB
da61 : 3009             [ 3] 	bmi  df_tk_foundsymend
                             	_incZPWord df_symtab
                             
da69 : 4c5dda           [ 3] 	jmp df_tk_symnextentry
da6c :                       df_tk_foundsymend
                             	; Increment char to point to new symbol
                             	; for matching with line buffer
                             	_incZPWord df_symtab
                             
                             	; If next char is not zero then
                             	; try and match with line buffer
da72 : a181             [ 6] 	lda (df_symtab,x)
da74 : d0aa             [ 3] 	bne df_tk_checknexttok
                             	; else symbol table exhausted
                             	; so no match found
                             	; pop mask off stack
da76 : 68               [ 4] 	pla
                             	; Zero symbol counter
da77 : a900             [ 2] 	lda #0
da79 : 8583             [ 3] 	sta df_symoff
                             	; Set C to indicate error (no match)
da7b : 38               [ 2] 	sec
da7c : 60               [ 6] 	rts
da7d :                       df_tk_symfound
                             	; Full match with keyword in symtable but
                             	; if matching with something that ended in alpha
                             	; then check the next buffer char is not alphanu
                             	; as this could be part of a variable name
                             	; Point to next buffer char in any case
da7d : c8               [ 2] 	iny
                             	; First mask off MSB
da7e : 297f             [ 2] 	and #0x7f
                             	; Then check if alpha
da80 : 20f7d6           [ 6] 	jsr df_tk_isalpha
                             	; if not alpha then we're definitely done
da83 : 9008             [ 3] 	bcc df_tk_symfound_final
                             	; else check buffer
da85 : b90004           [ 4] 	lda df_linbuff,y
                             	; if it is an alphanum then
da88 : 2004d7           [ 6] 	jsr df_tk_isalphanum
                             	; do not count as a match
da8b : b0ce             [ 3] 	bcs df_tk_symnomatch
da8d :                       df_tk_symfound_final
                             	; pop mask off stack
da8d : 68               [ 4] 	pla
                             	; Save line buffer pointer (points to next char)
                             	; Clear C to indicate success (match)
da8e : 847c             [ 3] 	sty df_linoff
da90 : a583             [ 3] 	lda df_symoff
da92 : aa               [ 2] 	tax
da93 : 18               [ 2] 	clc
da94 : 60               [ 6] 	rts
                             
                             	include "dflat/tksymtab.s"
                             ;************************************************
AS65 Assembler for R6502 [1.42].                                     Page  153
-------------------------------- bank\bank0.s --------------------------------

                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  TKSYMTAB.S
                             ;*  Runtime token jump table.
                             ;*  dflat uses four key tables to tokenise and ru
                             ;*  - df_tokensyms    - table of token symbols
                             ;*  - df_tk_tokentype - table of token types
                             ;*  - df_tk_tokenjmp  - table of tokenising routi
                             ;*  - df_rt_tokenjmp  - table of runtime routines
                             ;*  The key is the token symbols.  When a line is
                             ;*  in to the raw (untokenised) buffer, df_tokens
                             ;*  used to identify tokens.  The position of the
                             ;*  token is used to then look up type and jump v
                             ;*  in the other tables.
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code  
                             
                             ; Statement Token table
                             ; keywords
da95 :                       df_tokensyms
da95 : 80                    	db	0x80						; Implicit numeric assign
da96 : 80                    	db	0x80						; Implicit call procedure
da97 : bb                    	db	";"+0x80					; Comment
da98 : 7072696e746cee        	db	"printl",'n'+0x80			; println exprlist
da9f : 7072696e7461f4        	db	"printa",'t'+0x80			; printat x,y,exprlist
daa6 : 7072696ef4            	db	"prin",'t'+0x80				; print exprlist
daab : 6465e6                	db	"de",'f'+0x80				; def_subname
daae : 656e646465e6          	db	"endde",'f'+0x80			; enddef
dab4 : 7265747572ee          	db	"retur",'n'+0x80			; return
daba : 61626f72f4            	db	"abor",'t'+0x80				; abort
dabf : 6c6f6361ec            	db	"loca",'l'+0x80				; local varlist
dac4 : 6469ed                	db	"di",'m'+0x80				; dim varlist
dac7 : 7265706561f4          	db	"repea",'t'+0x80			; repeat
dacd : 756e7469ec            	db	"unti", 'l'+0x80			; until condition
dad2 : 666ff2                	db	"fo",'r'+0x80				; for var=start,end,incremen
dad5 : 6e6578f4              	db	"nex",'t'+0x80				; next
dad9 : 7768696ce5            	db	"whil",'e'+0x80				; while condition
dade : 77656ee4              	db	"wen",'d'+0x80				; wend
dae2 : 69e6                  	db	"i",'f'+0x80				; if condition
dae4 : 656c73e5              	db	"els",'e'+0x80				; else
dae8 : 656e6469e6            	db	"endi",'f'+0x80				; endif
daed : 656c69e6              	db	"eli",'f'+0x80				; elif condition
daf1 : 646174e1              	db	"dat",'a'+0x80				; data
daf5 : ae                    	db	'.'+0x80					; assembler command
daf6 : 7275ee                	db	"ru",'n'+0x80				; run
daf9 : 6c6973f4              	db	"lis",'t'+0x80				; list _proc-|*|line,line
dafd : 696e7075f4            	db	"inpu",'t'+0x80				; input var
db02 : 746578f4              	db	"tex",'t'+0x80				; text
db06 : 706c6ff4              	db	"plo",'t'+0x80				; plot x,y,char|string
db0a : 637572736ff2          	db	"curso",'r'+0x80			; cursor n
db10 : 636cf3                	db	"cl",'s'+0x80				; cls
db13 : 706f6be5              	db	"pok",'e'+0x80				; poke a,v
db17 : 646f6be5              	db	"dok",'e'+0x80				; doke a,v
db1b : 736f756ee4            	db	"soun",'d'+0x80				; sound
AS65 Assembler for R6502 [1.42].                                     Page  154
-------------------------------- bank\bank0.s --------------------------------

db20 : 6d757369e3            	db	"musi",'c'+0x80				; music
db25 : 706c61f9              	db	"pla",'y'+0x80				; play
db29 : 736176e5              	db	"sav",'e'+0x80				; save "fname"
db2d : 6c6f61e4              	db	"loa",'d'+0x80				; load "fname"
db31 : 726561e4              	db	"rea",'d'+0x80				; read
db35 : 6e65f7                	db	"ne",'w'+0x80				; new
db38 : 72656e75ed            	db	"renu",'m'+0x80				; renum start,offset,incre
db3d : 776169f4              	db	"wai",'t'+0x80				; wait delay
db41 : 72657365f4            	db	"rese",'t'+0x80				; reset var
db46 : 68697265f3            	db	"hire",'s'+0x80				; hires col
db4b : 706f696ef4            	db	"poin",'t'+0x80				; point x,y
db50 : 6c696ee5              	db	"lin",'e'+0x80				; line x0,y0,x1,y1
db54 : 6c696e6574ef          	db	"linet",'o'+0x80			; lineto x1,y1
db5a : 7069786d6f64e5        	db	"pixmod",'e'+0x80			; pixmode n
db61 : 696eeb                	db	"in",'k'+0x80				; ink n
db64 : 70617065f2            	db	"pape",'r'+0x80				; paper n
db69 : 636972636ce5          	db	"circl",'e'+0x80			; circle x,y,r
db6f : 68696d65ed            	db	"hime",'m'+0x80				; himem addr
db74 : 6d6f6e69746ff2        	db	"monito",'r'+0x80			; monitor
db7b : 737072636861f2        	db	"sprcha",'r'+0x80			; sprchar sp,ch
db82 : 737072706ff3          	db	"sprpo",'s'+0x80			; sprpos sp,x,y
db88 : 7370727570e4          	db	"sprup",'d'+0x80			; sprupd
db8e : 737072696e69f4        	db	"sprini",'t'+0x80			; sprinit
db95 : 7370726d756c74e9      	db	"sprmult",'i'+0x80			; sprmulti x[],y[]
db9d : 62736176e5            	db	"bsav",'e'+0x80				; bsave addr,len,"fname"
dba2 : 626c6f61e4            	db	"bloa",'d'+0x80				; bload addr,"fname"
dba7 : 74736176e5            	db	"tsav",'e'+0x80				; tsave "fname"
dbac : 746c6f61e4            	db	"tloa",'d'+0x80				; tload "fname"
                             ; Functions
dbb1 : 7065656ba8            	db	"peek",'('+0x80				; peek(x)
dbb6 : 6465656ba8            	db	"deek",'('+0x80				; peek(x)
dbbb : 737469636ba8          	db	"stick",'('+0x80			; stick(x)
dbc1 : 676574a8              	db	"get",'('+0x80				; get(x)
dbc5 : 636872a8              	db	"chr",'('+0x80				; chr(x)
dbc9 : 6c656674a8            	db	"left",'('+0x80				; left(x$,y)
dbce : 7269676874a8          	db	"right",'('+0x80			; right(x$,y)
dbd4 : 6d6964a8              	db	"mid",'('+0x80				; mid(x$,y)
dbd8 : 6c656ea8              	db	"len",'('+0x80				; len(x$)
dbdc : 6d656da8              	db	"mem",'('+0x80				; mem(x)
dbe0 : 7363726ea8            	db	"scrn",'('+0x80				; scrn(x,y)
dbe5 : 726e64a8              	db	"rnd",'('+0x80				; rnd(x)
dbe9 : 656c6170736564a8      	db	"elapsed",'('+0x80			; elapsed(var)
dbf1 : 63616c6ca8            	db	"call",'('+0x80				; call(addr,A,X,Y)
dbf6 : 686578a8              	db	"hex",'('+0x80				; hex(x)
dbfa : 617363a8              	db	"asc",'('+0x80				; asc(x$)
dbfe : 76616ca8              	db	"val",'('+0x80				; val(x$)
dc02 : 706978656ca8          	db	"pixel",'('+0x80			; pixel(x,y)
dc08 : 737072686974a8        	db	"sprhit",'('+0x80			; sprhit(sp)
                             ;	db	"sgn",'('+0x80				; sgn(x)
                             ; Numeric operators, in priority
dc0f : aa                    	db	'*'+0x80					; Multiply
dc10 : af                    	db 	'/'+0x80					; Divide
dc11 : dc                    	db 	'\\'+0x80					; Modulus
dc12 : 3cbc                  	db	'<','<'+0x80				; Shift left
dc14 : 3ebe                  	db	'>','>'+0x80				; Shift right
dc16 : ab                    	db 	'+'+0x80					; Add
dc17 : ad                    	db	'-'+0x80					; Subtract
                             ; Bool and conditional operators, in priority
dc18 : a6                    	db '&'+0x80						; AND
dc19 : fc                    	db '|'+0x80						; OR
dc1a : de                    	db '^'+0x80						; EOR
dc1b : 3cbd                  	db "<",'='+0x80					; Less than or equal
AS65 Assembler for R6502 [1.42].                                     Page  155
-------------------------------- bank\bank0.s --------------------------------

dc1d : 3ebd                  	db ">",'='+0x80					; Greater than or equal
dc1f : 3cbe                  	db "<",'>'+0x80					; Not equal
dc21 : bc                    	db '<'+0x80						; Less than
dc22 : be                    	db '>'+0x80						; Greater than
dc23 : 3dbd                  	db "=",'='+0x80					; Equality (always last)
                             
dc25 : 00                    	db  0
                             
                             
                             	
                             	
                             	include "dflat/tkjmptab.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  TKJUMPTAB.S
                             ;*  Runtime token jump table.
                             ;*  dflat uses four key tables to tokenise and ru
                             ;*  - df_tokensyms    - table of token symbols
                             ;*  - df_tk_tokentype - table of token types
                             ;*  - df_tk_tokenjmp  - table of tokenising routi
                             ;*  - df_rt_tokenjmp  - table of runtime routines
                             ;*  The key is the token symbols.  When a line is
                             ;*  in to the raw (untokenised) buffer, df_tokens
                             ;*  used to identify tokens.  The position of the
                             ;*  token is used to then look up type and jump v
                             ;*  in the other tables.
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code  
                             
                             ; Tokeniser jump table
                             ; In token order of df_tokensyms
dc26 :                       df_tk_tokenjmp
dc26 : 5add                  	dw	df_tk_assign
dc28 : 0ade                  	dw	df_tk_callproc
dc2a : 63dd                  	dw	df_tk_comment
dc2c : abdd                  	dw	df_tk_println
dc2e : a5dd                  	dw	df_tk_printat
dc30 : abdd                  	dw	df_tk_print
dc32 : ebdd                  	dw	df_tk_def
dc34 : 47de                  	dw	df_tk_enddef
dc36 : 49de                  	dw	df_tk_return
dc38 : 47de                  	dw	df_tk_abort
dc3a : dadd                  	dw	df_tk_local
dc3c : c9dd                  	dw	df_tk_dim
dc3e : 47de                  	dw	df_tk_repeat
dc40 : 4dde                  	dw	df_tk_until
dc42 : f1dd                  	dw	df_tk_for
dc44 : 47de                  	dw	df_tk_next
dc46 : 4dde                  	dw	df_tk_while
dc48 : 47de                  	dw	df_tk_wend
dc4a : 4dde                  	dw	df_tk_if
dc4c : 47de                  	dw	df_tk_else
dc4e : 47de                  	dw	df_tk_endif
AS65 Assembler for R6502 [1.42].                                     Page  156
-------------------------------- bank\bank0.s --------------------------------

dc50 : 4dde                  	dw	df_tk_elseif
dc52 : b2dd                  	dw	df_tk_data
dc54 : 50f9                  	dw	df_tk_asm_parse_command
dc56 : 47de                  	dw	df_tk_run
dc58 : 94dd                  	dw	df_tk_list
dc5a : c0dd                  	dw	df_tk_input
dc5c : 47de                  	dw	df_tk_text
dc5e : 5dde                  	dw	df_tk_plot
dc60 : 4dde                  	dw	df_tk_cursor
dc62 : 47de                  	dw	df_tk_cls
dc64 : 53de                  	dw	df_tk_poke
dc66 : 53de                  	dw	df_tk_doke
dc68 : 5dde                  	dw	df_tk_sound
dc6a : 66de                  	dw	df_tk_music
dc6c : 66de                  	dw	df_tk_play
dc6e : 4dde                  	dw	df_tk_save
dc70 : 4dde                  	dw	df_tk_load
dc72 : c9dd                  	dw	df_tk_read
dc74 : 47de                  	dw	df_tk_new
dc76 : 5dde                  	dw	df_tk_renum
dc78 : 4dde                  	dw	df_tk_wait
dc7a : 0cde                  	dw	df_tk_reset
dc7c : 47de                  	dw	df_tk_hires
dc7e : 53de                  	dw	df_tk_point
dc80 : 66de                  	dw	df_tk_line
dc82 : 53de                  	dw	df_tk_lineto
dc84 : 4dde                  	dw	df_tk_pixmode
dc86 : 4dde                  	dw	df_tk_ink
dc88 : 4dde                  	dw	df_tk_paper
dc8a : 5dde                  	dw	df_tk_circle
dc8c : 4dde                  	dw	df_tk_himem
dc8e : 47de                  	dw	df_tk_monitor
dc90 : 53de                  	dw	df_tk_sprchar
dc92 : 5dde                  	dw	df_tk_sprpos
dc94 : 47de                  	dw	df_tk_sprupd
dc96 : 47de                  	dw	df_tk_sprinit
dc98 : 53de                  	dw	df_tk_sprmulti
dc9a : 5dde                  	dw	df_tk_bsave
dc9c : 53de                  	dw	df_tk_bload
dc9e : 4dde                  	dw	df_tk_tsave
dca0 : 4dde                  	dw	df_tk_tload
                             	
dca2 : 17de                  	dw	df_tk_peek
dca4 : 17de                  	dw	df_tk_deek
dca6 : 1cde                  	dw	df_tk_stick
dca8 : 17de                  	dw	df_tk_get
dcaa : 17de                  	dw	df_tk_chr
dcac : 2dde                  	dw	df_tk_left
dcae : 2dde                  	dw	df_tk_right
dcb0 : 33de                  	dw	df_tk_mid
dcb2 : 17de                  	dw	df_tk_len
dcb4 : 17de                  	dw	df_tk_mem
dcb6 : 2dde                  	dw	df_tk_scrn
dcb8 : 17de                  	dw	df_tk_rnd
dcba : 22de                  	dw	df_tk_elapsed
dcbc : 39de                  	dw	df_tk_call
dcbe : 17de                  	dw	df_tk_hex
dcc0 : 17de                  	dw	df_tk_asc
dcc2 : 17de                  	dw	df_tk_val
dcc4 : 2dde                  	dw	df_tk_pixel
dcc6 : 17de                  	dw	df_tk_sprhit
                             ;	dw	df_tk_sgn
AS65 Assembler for R6502 [1.42].                                     Page  157
-------------------------------- bank\bank0.s --------------------------------

                             	
dcc8 : 47de                  	dw	df_tk_mult
dcca : 47de                  	dw	df_tk_div
dccc : 47de                  	dw	df_tk_mod
dcce : 47de                  	dw	df_tk_asl
dcd0 : 47de                  	dw	df_tk_lsr
dcd2 : 47de                  	dw	df_tk_add
dcd4 : 47de                  	dw	df_tk_sub
                             	
dcd6 : 47de                  	dw	df_tk_and
dcd8 : 47de                  	dw	df_tk_or
dcda : 47de                  	dw	df_tk_eor
dcdc : 47de                  	dw	df_tk_lte
dcde : 47de                  	dw	df_tk_gte
dce0 : 47de                  	dw	df_tk_ne
dce2 : 47de                  	dw	df_tk_lt
dce4 : 47de                  	dw	df_tk_gt
dce6 : 47de                  	dw	df_tk_eq
                             
                             
                             	
                             	
                             	
                             	
                             	
                             	include "dflat/tktyptab.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  RTJUMPTAB.S
                             ;*  Runtime token jump table.
                             ;*  dflat uses four key tables to tokenise and ru
                             ;*  - df_tokensyms    - table of token symbols
                             ;*  - df_tk_tokentype - table of token types
                             ;*  - df_tk_tokenjmp  - table of tokenising routi
                             ;*  - df_rt_tokenjmp  - table of runtime routines
                             ;*  The key is the token symbols.  When a line is
                             ;*  in to the raw (untokenised) buffer, df_tokens
                             ;*  used to identify tokens.  The position of the
                             ;*  token is used to then look up type and jump v
                             ;*  in the other tables.
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code  
                             
                             ; Tokeniser type table (is it a keyword, function
                             ; In token order of df_tokensyms
dce8 :                       df_tk_tokentype
dce8 : 01                    	db	DFTK_KW
dce9 : 01                    	db	DFTK_KW
dcea : 01                    	db	DFTK_KW
dceb : 01                    	db	DFTK_KW
dcec : 01                    	db	DFTK_KW
dced : 01                    	db	DFTK_KW
dcee : 01                    	db	DFTK_KW
AS65 Assembler for R6502 [1.42].                                     Page  158
-------------------------------- bank\bank0.s --------------------------------

dcef : 01                    	db	DFTK_KW
dcf0 : 01                    	db	DFTK_KW
dcf1 : 01                    	db	DFTK_KW
dcf2 : 01                    	db	DFTK_KW
dcf3 : 01                    	db	DFTK_KW
dcf4 : 01                    	db	DFTK_KW
dcf5 : 01                    	db	DFTK_KW
dcf6 : 01                    	db	DFTK_KW
dcf7 : 01                    	db	DFTK_KW
dcf8 : 01                    	db	DFTK_KW
dcf9 : 01                    	db	DFTK_KW
dcfa : 01                    	db	DFTK_KW
dcfb : 01                    	db	DFTK_KW
dcfc : 01                    	db	DFTK_KW
dcfd : 01                    	db	DFTK_KW
dcfe : 01                    	db	DFTK_KW
dcff : 01                    	db	DFTK_KW
dd00 : 01                    	db	DFTK_KW
dd01 : 01                    	db	DFTK_KW
dd02 : 01                    	db	DFTK_KW
dd03 : 01                    	db	DFTK_KW
dd04 : 01                    	db	DFTK_KW
dd05 : 01                    	db	DFTK_KW
dd06 : 01                    	db	DFTK_KW
dd07 : 01                    	db	DFTK_KW
dd08 : 01                    	db	DFTK_KW
dd09 : 01                    	db	DFTK_KW
dd0a : 01                    	db	DFTK_KW
dd0b : 01                    	db	DFTK_KW
dd0c : 01                    	db	DFTK_KW
dd0d : 01                    	db	DFTK_KW
dd0e : 01                    	db	DFTK_KW
dd0f : 01                    	db	DFTK_KW
dd10 : 01                    	db	DFTK_KW
dd11 : 01                    	db	DFTK_KW
dd12 : 01                    	db	DFTK_KW
dd13 : 01                    	db	DFTK_KW
dd14 : 01                    	db	DFTK_KW
dd15 : 01                    	db	DFTK_KW
dd16 : 01                    	db	DFTK_KW
dd17 : 01                    	db	DFTK_KW
dd18 : 01                    	db	DFTK_KW
dd19 : 01                    	db	DFTK_KW
dd1a : 01                    	db	DFTK_KW
dd1b : 01                    	db	DFTK_KW
dd1c : 01                    	db	DFTK_KW
dd1d : 01                    	db	DFTK_KW
dd1e : 01                    	db	DFTK_KW
dd1f : 01                    	db	DFTK_KW
dd20 : 01                    	db	DFTK_KW
dd21 : 01                    	db	DFTK_KW
dd22 : 01                    	db	DFTK_KW
dd23 : 01                    	db	DFTK_KW
dd24 : 01                    	db	DFTK_KW
dd25 : 01                    	db	DFTK_KW
                             
dd26 : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
dd27 : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
dd28 : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
dd29 : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
dd2a : 42                    	db 	DFTK_FN | DFTK_STR
dd2b : 42                    	db 	DFTK_FN | DFTK_STR
AS65 Assembler for R6502 [1.42].                                     Page  159
-------------------------------- bank\bank0.s --------------------------------

dd2c : 42                    	db 	DFTK_FN | DFTK_STR
dd2d : 42                    	db 	DFTK_FN | DFTK_STR
dd2e : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
dd2f : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
dd30 : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
dd31 : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
dd32 : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
dd33 : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
dd34 : 42                    	db 	DFTK_FN | DFTK_STR
dd35 : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
dd36 : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
dd37 : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
dd38 : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
                             ;	db 	DFTK_FN | DFTK_INT | DFTK_BYT
                             	;* Operators add the order of precedence (0=high
dd39 : 38                    	db 	DFTK_OP | DFTK_INT | DFTK_BYT + 0
dd3a : 38                    	db 	DFTK_OP | DFTK_INT | DFTK_BYT + 0
dd3b : 38                    	db 	DFTK_OP | DFTK_INT | DFTK_BYT + 0
dd3c : 39                    	db 	DFTK_OP | DFTK_INT | DFTK_BYT + 1
dd3d : 39                    	db 	DFTK_OP | DFTK_INT | DFTK_BYT + 1
dd3e : 3e                    	db 	DFTK_OP | DFTK_STROP | DFTK_INT | DFTK_BYT +
dd3f : 3a                    	db 	DFTK_OP | DFTK_INT | DFTK_BYT + 2
                             
dd40 : 3d                    	db 	DFTK_OP | DFTK_INT | DFTK_BYT + 5
dd41 : 3d                    	db 	DFTK_OP | DFTK_INT | DFTK_BYT + 5
dd42 : 3d                    	db 	DFTK_OP | DFTK_INT | DFTK_BYT + 5
dd43 : 3c                    	db 	DFTK_OP | DFTK_INT | DFTK_BYT + 4
dd44 : 3c                    	db 	DFTK_OP | DFTK_INT | DFTK_BYT + 4
dd45 : 3c                    	db 	DFTK_OP | DFTK_INT | DFTK_BYT + 4
dd46 : 3c                    	db 	DFTK_OP | DFTK_INT | DFTK_BYT + 4
dd47 : 3c                    	db 	DFTK_OP | DFTK_INT | DFTK_BYT + 4
dd48 : 3f                    	db 	DFTK_OP | DFTK_INT | DFTK_BYT + 7
                             
                             
                             	
                             	
                             	
                             	
                             
                             	include "dflat/toksubs.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  TOKSUBS.S
                             ;*  Module that implements the tokenisation of ke
                             ;*  When a line is being parsed, the index of the
                             ;*  found in the symbol table is used to call a r
                             ;*  here.  The job of a routine here is then to f
                             ;*  parse the raw input e.g. a command that takes
                             ;*  parameters, need to do what it needs to ident
                             ;*  Despite the number of keywords in dflat, this
                             ;*  anywhere near the size of rtsubs.s (the runti
                             ;*  equivalent of this) because there is so much 
                             ;*  synactically.
                             ;*  The tokenised output is put in to its own buf
                             ;*  if the whole input was tokenised successfully
                             ;*  dflat will either try and execute (if in imme
AS65 Assembler for R6502 [1.42].                                     Page  160
-------------------------------- bank\bank0.s --------------------------------

                             ;*  mode), or save it to program memory in line n
                             ;*  order.
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code  
                             
dd49 :                       mod_sz_toksubs_s
                             
                             ;****************************************
                             ;* Parse assignment preamble
                             ;****************************************
dd49 :                       df_tk_preassign
                             	; Put assignment token
                             	; assume its a numeric int for now
dd49 : a980             [ 2] 	lda #0x80
dd4b : 20bad6           [ 6] 	jsr df_tk_put_tok
                             	
                             	; first find or create a variable
dd4e : a900             [ 2] 	lda #0	
dd50 : 20fad7           [ 6] 	jsr df_tk_var
                             	; next char should be '='
dd53 : a93d             [ 2] 	lda #'='
dd55 : 4c4ed7           [ 3] 	jmp df_tk_expect_tok_err
                             
dd58 :                       df_tk_error
                             	SWBRK DFERR_SYNTAX
                             
                             
                             ;****************************************
                             ;* Parse numeric assignment
                             ;****************************************
dd5a :                       df_tk_assign
dd5a : 2049dd           [ 6] 	jsr df_tk_preassign
                             	; tokenise an expression (int or byte)
dd5d : 2036d9           [ 6] 	jsr df_tk_expression
dd60 : b0f6             [ 3] 	bcs df_tk_error
dd62 : 60               [ 6] 	rts
                             
                             
dd63 :                       df_tk_comment
                             	; copy all subsequent chars to token
dd63 : 20afd6           [ 6] 	jsr df_tk_get_buf
dd66 : f006             [ 3] 	beq df_tk_comment_done
dd68 : 20bad6           [ 6] 	jsr df_tk_put_tok
dd6b : 4c63dd           [ 3] 	jmp df_tk_comment
dd6e :                       df_tk_comment_done
dd6e : 18               [ 2] 	clc
dd6f : 60               [ 6] 	rts
                             
                             ; Utility to get procedure name with _
dd70 :                       df_tk_listp_procname
                             	; try and find the first proc
dd70 : a95f             [ 2] 	lda #'_'
dd72 : 2042d7           [ 6] 	jsr df_tk_expect_tok
dd75 : b01b             [ 3] 	bcs df_tk_listp_procname_err
                             	; now get first alpha then all alphanum
dd77 : 20a9d6           [ 6] 	jsr df_tk_peek_buf
dd7a : 20f7d6           [ 6] 	jsr df_tk_isalpha
dd7d : 9013             [ 3] 	bcc df_tk_listp_procname_err
dd7f :                       df_tk_listp_procname_ch
AS65 Assembler for R6502 [1.42].                                     Page  161
-------------------------------- bank\bank0.s --------------------------------

dd7f : 20a9d6           [ 6] 	jsr df_tk_peek_buf
dd82 : 2004d7           [ 6] 	jsr df_tk_isalphanum
dd85 : 9009             [ 3] 	bcc df_tk_listp_procname_ok
dd87 : 20afd6           [ 6] 	jsr df_tk_get_buf
dd8a : 20bad6           [ 6] 	jsr df_tk_put_tok
dd8d : 4c7fdd           [ 3] 	jmp df_tk_listp_procname_ch
dd90 :                       df_tk_listp_procname_ok
dd90 : 18               [ 2] 	clc
dd91 : 60               [ 6] 	rts
dd92 :                       df_tk_listp_procname_err
dd92 : 38               [ 2] 	sec
dd93 : 60               [ 6] 	rts
                             
                             ; list		: list whole program
                             ; list n	: list line n to end
                             ; list *	: list all procedures
                             ; list _proc: list _proc lines
dd94 :                       df_tk_list
dd94 : 2070dd           [ 6] 	jsr df_tk_listp_procname
dd97 : 900a             [ 3] 	bcc df_tk_list_done
                             	; if not found try '*' or normal list
dd99 :                       df_tk_list_procs
                             	; first try for list symbol
dd99 : a92a             [ 2] 	lda #'*'
dd9b : 2042d7           [ 6] 	jsr df_tk_expect_tok
dd9e : 9003             [ 3] 	bcc df_tk_list_done
                             	; else normal line number or nothing
dda0 :                       df_tk_list_line
                             	; tokenise an expression
dda0 : 2036d9           [ 6] 	jsr df_tk_expression
dda3 :                       df_tk_list_done
dda3 : 18               [ 2] 	clc
dda4 : 60               [ 6] 	rts
                             
                             ; printat,print,println can have 0,1 or many expr
dda5 :                       df_tk_printat
                             	; Must get 2 parms for x,y
dda5 : 2053de           [ 6] 	jsr df_tk_2parms
                             	; try getting more parms
dda8 : 4cb7dd           [ 3] 	jmp df_tk_expr_more
ddab :                       df_tk_println
ddab :                       df_tk_print
                             	; tokenise an expression ok if null
ddab : 2036d9           [ 6] 	jsr df_tk_expression
ddae : 9007             [ 3] 	bcc df_tk_expr_more
ddb0 :                       df_tk_print_done
ddb0 :                       df_tk_data_done
ddb0 : 18               [ 2] 	clc
ddb1 : 60               [ 6] 	rts
                             
                             ; these must have 1 or more expressions
ddb2 :                       df_tk_data
ddb2 :                       df_tk_asm_db
ddb2 :                       df_tk_asm_dw
ddb2 :                       df_tk_next_expr
                             	; tokenise an expression
ddb2 : 2036d9           [ 6] 	jsr df_tk_expression
ddb5 : b05e             [ 4] 	bcs df_tk_error2
                             ; this loop keeps processing comma seprated exore
ddb7 :                       df_tk_expr_more
                             	; is there more to come?
ddb7 : a92c             [ 2] 	lda #','
AS65 Assembler for R6502 [1.42].                                     Page  162
-------------------------------- bank\bank0.s --------------------------------

ddb9 : 2042d7           [ 6] 	jsr df_tk_expect_tok
ddbc : b0f2             [ 3] 	bcs df_tk_data_done
ddbe : 90f2             [ 3] 	bcc df_tk_next_expr
                             
ddc0 :                       df_tk_input
ddc0 : 2010d7           [ 6] 	jsr df_tk_skip_ws
                             	; tokenise a variable
ddc3 : a900             [ 2] 	lda #0
ddc5 : 20fad7           [ 6] 	jsr df_tk_var
                             	; either cc or cs depending on error condition
ddc8 : 60               [ 6] 	rts
                             	
ddc9 :                       df_tk_read
ddc9 :                       df_tk_dim
ddc9 : 2010d7           [ 6] 	jsr df_tk_skip_ws
                             	; tokenise a variable
ddcc : a900             [ 2] 	lda #0
ddce : 20fad7           [ 6] 	jsr df_tk_var
                             	; if not at the end then keep going
ddd1 : a92c             [ 2] 	lda #','
ddd3 : 2042d7           [ 6] 	jsr df_tk_expect_tok
ddd6 : 90f1             [ 3] 	bcc df_tk_dim
ddd8 : 18               [ 2] 	clc
ddd9 : 60               [ 6] 	rts
                             
ddda :                       df_tk_local
ddda : 2010d7           [ 6] 	jsr df_tk_skip_ws
                             	; tokenise a variable
dddd : a900             [ 2] 	lda #0
dddf : 202cd8           [ 6] 	jsr df_tk_localvar
                             	; if not at the end then keep going
dde2 : a92c             [ 2] 	lda #','
dde4 : 2042d7           [ 6] 	jsr df_tk_expect_tok
dde7 : 90f1             [ 3] 	bcc df_tk_local
dde9 : 18               [ 2] 	clc
ddea : 60               [ 6] 	rts
                             
                             ; A = 0 : Def
                             ; A = 1 : Call
ddeb :                       df_tk_def
ddeb : a900             [ 2] 	lda #0
dded : 2042d8           [ 6] 	jsr df_tk_proc
ddf0 : 60               [ 6] 	rts
                             
                             
                             ; syntax : for a=1,10,1
ddf1 :                       df_tk_for
ddf1 : 2010d7           [ 6] 	jsr df_tk_skip_ws
                             
                             	; tokenise the for variable
ddf4 : a901             [ 2] 	lda #DFVVT_INT
ddf6 : 20fad7           [ 6] 	jsr df_tk_var
                             
                             	; always expect '='
                             	; then starting value
ddf9 : a93d             [ 2] 	lda #'='
ddfb : 2042d9           [ 6] 	jsr df_tk_tok_expression
                             	
                             	; always expect ',' separator
                             	; then ending value
ddfe : a92c             [ 2] 	lda #','
de00 : 2042d9           [ 6] 	jsr df_tk_tok_expression
AS65 Assembler for R6502 [1.42].                                     Page  163
-------------------------------- bank\bank0.s --------------------------------

                             
                             	; always expect ',' separator
                             	; then step value
de03 : a92c             [ 2] 	lda #','
de05 : 2042d9           [ 6] 	jsr df_tk_tok_expression
                             
de08 :                       df_tk_for_done
de08 : 18               [ 2] 	clc
de09 : 60               [ 6] 	rts
                             	
                             ; call to proc should not occur by itself
de0a :                       df_tk_callproc
de0a : 38               [ 2] 	sec
de0b : 60               [ 6] 	rts
                             
                             ; timer reset expects an int variable only
de0c :                       df_tk_reset
de0c : 2010d7           [ 6] 	jsr df_tk_skip_ws
                             
                             	; tokenise a variable
de0f : a901             [ 2] 	lda #DFVVT_INT
de11 : 20fad7           [ 6] 	jsr df_tk_var
de14 : 60               [ 6] 	rts
                             
de15 :                       df_tk_error2
                             	SWBRK DFERR_SYNTAX
                             
                             
                             ; These functions expect 1 parmeter
de17 :                       df_tk_len
de17 :                       df_tk_chr
de17 :                       df_tk_get
de17 :                       df_tk_deek
de17 :                       df_tk_vpeek
de17 :                       df_tk_peek
de17 :                       df_tk_mem
de17 :                       df_tk_rnd
de17 :                       df_tk_hex
de17 :                       df_tk_asc
de17 :                       df_tk_val
de17 :                       df_tk_sprhit
de17 :                       df_tk_sgn
de17 : 2036d9           [ 6] 	jsr df_tk_expression
de1a : b0f9             [ 3] 	bcs df_tk_error2
de1c :                       df_tk_closebrkt
de1c :                       df_tk_stick				; This function needs no parms
de1c : a929             [ 2] 	lda #')'
de1e : 204ed7           [ 6] 	jsr df_tk_expect_tok_err
de21 : 60               [ 6] 	rts
                             
                             ; This function expects a variable only
de22 :                       df_tk_elapsed
de22 : 2010d7           [ 6] 	jsr df_tk_skip_ws
                             
                             	; tokenise a variable
de25 : a901             [ 2] 	lda #DFVVT_INT
de27 : 20fad7           [ 6] 	jsr df_tk_var
                             	; must have close braket
de2a : 4c1cde           [ 3] 	jmp df_tk_closebrkt
                             
                             ; These functions expect 2 parameters
de2d :                       df_tk_left
AS65 Assembler for R6502 [1.42].                                     Page  164
-------------------------------- bank\bank0.s --------------------------------

de2d :                       df_tk_right
de2d :                       df_tk_scrn
de2d :                       df_tk_pixel
de2d : 2053de           [ 6] 	jsr df_tk_2parms
de30 : 4c1cde           [ 3] 	jmp df_tk_closebrkt
                             
                             ; These functions expect 3 parameters
de33 :                       df_tk_mid
de33 : 205dde           [ 6] 	jsr df_tk_3parms
de36 : 4c1cde           [ 3] 	jmp df_tk_closebrkt
                             
                             ; These functions expect 4 parameters
de39 :                       df_tk_call
de39 : 2053de           [ 6] 	jsr df_tk_2parms
de3c : a92c             [ 2] 	lda #','
de3e : 204ed7           [ 6] 	jsr df_tk_expect_tok_err
de41 : 2053de           [ 6] 	jsr df_tk_2parms
de44 : 4c1cde           [ 3] 	jmp df_tk_closebrkt
                             
                             ;all these commands require no parameters
de47 :                       df_tk_else
de47 :                       df_tk_endif
de47 :                       df_tk_enddef
de47 :                       df_tk_abort
de47 :                       df_tk_repeat
de47 :                       df_tk_next
de47 :                       df_tk_wend
de47 :                       df_tk_run
de47 :                       df_tk_dir
de47 :                       df_tk_cls
de47 :                       df_tk_new
de47 :                       df_tk_mult
de47 :                       df_tk_div
de47 :                       df_tk_mod
de47 :                       df_tk_asl
de47 :                       df_tk_lsr
de47 :                       df_tk_add
de47 :                       df_tk_sub
de47 :                       df_tk_and
de47 :                       df_tk_or
de47 :                       df_tk_eor
de47 :                       df_tk_lte
de47 :                       df_tk_lt
de47 :                       df_tk_gte
de47 :                       df_tk_gt
de47 :                       df_tk_ne
de47 :                       df_tk_eq
de47 :                       df_tk_monitor
de47 :                       df_tk_sprupd
de47 :                       df_tk_sprinit
de47 :                       df_tk_text
de47 :                       df_tk_hires
de47 : 18               [ 2] 	clc
de48 : 60               [ 6] 	rts
                             
                             ; 0 or 1 parameter special!
de49 :                       df_tk_return
de49 : 2036d9           [ 6] 	jsr df_tk_expression
de4c : 60               [ 6] 	rts
                             
                             
                             ; These commands expect 1 parameter	
AS65 Assembler for R6502 [1.42].                                     Page  165
-------------------------------- bank\bank0.s --------------------------------

de4d :                       df_tk_while
de4d :                       df_tk_until
de4d :                       df_tk_if
de4d :                       df_tk_elseif
de4d :                       df_tk_wait
de4d :                       df_tk_cursor
de4d :                       df_tk_del
de4d :                       df_tk_chdir
de4d :                       df_tk_load
de4d :                       df_tk_save
de4d :                       df_tk_tload
de4d :                       df_tk_tsave
de4d :                       df_tk_pixmode
de4d :                       df_tk_ink
de4d :                       df_tk_paper
de4d :                       df_tk_himem
                             
de4d :                       df_tk_asm_org
de4d :                       df_tk_asm_opt
de4d :                       df_tk_asm_ds
                             
                             	; first parm
de4d : 2036d9           [ 6] 	jsr df_tk_expression
de50 : b0c3             [ 3] 	bcs df_tk_error2
de52 : 60               [ 6] 	rts
                             
                             ; These commands expect 2 numeric parameters
de53 :                       df_tk_poke
de53 :                       df_tk_doke
de53 :                       df_tk_point
de53 :                       df_tk_sprchar
de53 :                       df_tk_sprmulti
de53 :                       df_tk_bload
de53 :                       df_tk_lineto
de53 :                       df_tk_2parms
                             	; first parm
de53 : 2036d9           [ 6] 	jsr df_tk_expression
de56 : b0bd             [ 3] 	bcs df_tk_error2
                             	; tokenise second parm
de58 : a92c             [ 2] 	lda #','
de5a : 4c42d9           [ 3] 	jmp df_tk_tok_expression
                             
                             ; these commands expect 3 numeric parameters
de5d :                       df_tk_hchar
de5d :                       df_tk_plot
de5d :                       df_tk_circle
de5d :                       df_tk_sound
de5d :                       df_tk_colour
de5d :                       df_tk_spritepos
de5d :                       df_tk_renum
de5d :                       df_tk_sprpos
de5d :                       df_tk_bsave
de5d :                       df_tk_3parms
de5d : 2053de           [ 6] 	jsr df_tk_2parms
                             	; tokenise third parm
de60 : a92c             [ 2] 	lda #','
de62 : 2042d9           [ 6] 	jsr df_tk_tok_expression
de65 : 60               [ 6] 	rts
                             
                             ; these commands expect 4 numeric parameters
de66 :                       df_tk_play
de66 :                       df_tk_music
AS65 Assembler for R6502 [1.42].                                     Page  166
-------------------------------- bank\bank0.s --------------------------------

de66 :                       df_tk_line
de66 :                       df_tk_4parms
de66 : 2053de           [ 6] 	jsr df_tk_2parms
de69 : a92c             [ 2] 	lda #','
de6b : 204ed7           [ 6] 	jsr df_tk_expect_tok_err
de6e : 2053de           [ 6] 	jsr df_tk_2parms
de71 : 60               [ 6] 	rts
                             
de72 :                       mod_sz_toksubs_e
                             
                             
de72 :                       mod_sz_tokenise_e
                             
                             
                             
                             	include "dflat/progedit.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  PROGEDIT.S
                             ;*  dflat module to enable editing of a dflat pro
                             ;*  dflat bascially starts here - waiting for use
                             ;*  when a line is entered, if it is not preceede
                             ;*  line number it is tokenised and attempted to 
                             ;*  immediatly.  If it is preceeded by a line num
                             ;*  number is used to save the tokenised line in 
                             ;*  position in memory.
                             ;*  So this is just like a good old editing sessi
                             ;*  nearly any common flavour of 80s basic. Howev
                             ;*  tokenises everything except whitespace and st
                             ;*  constants - even when saving.  Unlike my trus
                             ;*  where I could type in any garbage and it woul
                             ;*  saved with the line number, dflat needs to be
                             ;*  tokenise the line.  So it's actually a bit mo
                             ;*  Atari 8 bit BASIC.
                             ;*
                             ;************************************************
                             
de72 :                       mod_sz_progedit_s
                             
                             ;****************************************
                             ;* df_pg_find_line
                             ;* Find a line number in X(L), A(H)
                             ;* Return X(L), A(H) of line, Y = Length
                             ;* C=1 Exact match not found, C=0 Exact Found
                             ;* If not exact match then next highest line addr
                             ;* Will be in X and A
                             ;****************************************
de72 :                       df_pg_find_line
de72 : 863d             [ 3] 	stx num_a
de74 : 853e             [ 3] 	sta num_a+1
de76 : a565             [ 3] 	lda df_prgstrt
de78 : 8549             [ 3] 	sta num_tmp
de7a : a566             [ 3] 	lda df_prgstrt+1
de7c : 854a             [ 3] 	sta num_tmp+1
de7e :                       df_pg_check_next_line
de7e : a549             [ 3] 	lda num_tmp
AS65 Assembler for R6502 [1.42].                                     Page  167
-------------------------------- bank\bank0.s --------------------------------

de80 : c567             [ 3] 	cmp df_prgend
de82 : d011             [ 3] 	bne df_pg_check_line
de84 : a54a             [ 3] 	lda num_tmp+1
de86 : c568             [ 3] 	cmp df_prgend+1
de88 : d00b             [ 3] 	bne df_pg_check_line
de8a :                       df_pr_line_gt_target	
                             	; End of program or line > target
                             	; Load Y with the length
de8a : a200             [ 2] 	ldx #0
de8c : a149             [ 6] 	lda (num_tmp,x)
de8e : a8               [ 2] 	tay
de8f : a649             [ 3] 	ldx num_tmp
de91 : a54a             [ 3] 	lda num_tmp+1
de93 : 38               [ 2] 	sec
de94 : 60               [ 6] 	rts
de95 :                       df_pg_check_line
de95 : a001             [ 2] 	ldy #DFTK_LINNUM
de97 : a53d             [ 3] 	lda num_a
de99 : d149             [ 5] 	cmp (num_tmp),y
de9b : d012             [ 3] 	bne df_pr_line_nomatch
de9d : c8               [ 2] 	iny
de9e : a53e             [ 3] 	lda num_a+1
dea0 : d149             [ 5] 	cmp (num_tmp),y
dea2 : d00b             [ 3] 	bne df_pr_line_nomatch
                             	; Got an exact match
dea4 : a200             [ 2] 	ldx #0
dea6 : a149             [ 6] 	lda (num_tmp,x)
dea8 : a8               [ 2] 	tay
dea9 : a649             [ 3] 	ldx num_tmp
deab : a54a             [ 3] 	lda num_tmp+1
dead : 18               [ 2] 	clc
deae : 60               [ 6] 	rts
deaf :                       df_pr_line_nomatch
                             	; Check if this line > target
deaf : 38               [ 2] 	sec
deb0 : a001             [ 2] 	ldy #DFTK_LINNUM
deb2 : a53d             [ 3] 	lda num_a
deb4 : f149             [ 5] 	sbc (num_tmp),y
deb6 : c8               [ 2] 	iny
deb7 : a53e             [ 3] 	lda num_a+1
deb9 : f149             [ 5] 	sbc (num_tmp),y
debb : 90cd             [ 3] 	bcc df_pr_line_gt_target
debd :                       df_pr_line_next
                             	; Else we go to next line
debd : a200             [ 2] 	ldx #0
debf : 18               [ 2] 	clc
dec0 : a549             [ 3] 	lda num_tmp
dec2 : 6149             [ 6] 	adc (num_tmp,x)
dec4 : 8549             [ 3] 	sta num_tmp
dec6 : a54a             [ 3] 	lda num_tmp+1
dec8 : 6900             [ 2] 	adc #0
deca : 854a             [ 3] 	sta num_tmp+1
decc : 4c7ede           [ 3] 	jmp df_pg_check_next_line
                             	
                             ;****************************************
                             ;* df_pg_insert_block
                             ;* Insert a block at adr (X, A) of size Y
                             ;* df_prgend updated
                             ;* C=1 Error, C=0 Ok
                             ;****************************************
decf :                       df_pg_insert_block
                             	; Inserting requires a block copy from
AS65 Assembler for R6502 [1.42].                                     Page  168
-------------------------------- bank\bank0.s --------------------------------

                             	; end of program space to the insert address
                             	
                             	; Save address as this is the lowest address
decf : 863d             [ 3] 	stx num_a
ded1 : 853e             [ 3] 	sta num_a+1
                             	; End of program space is the first byte to move
ded3 : a567             [ 3] 	lda df_prgend
ded5 : 8545             [ 3] 	sta num_x
ded7 : a568             [ 3] 	lda df_prgend+1
ded9 : 8546             [ 3] 	sta num_x+1	
dedb :                       df_pg_insert_byte
                             	; Move a byte from the current top
dedb : a200             [ 2] 	ldx #0
dedd : a145             [ 6] 	lda (num_x,x)
                             	; To the new top (+Y)
dedf : 9145             [ 5] 	sta (num_x),y
                             	; Compare current address with lowest
dee1 : a545             [ 3] 	lda num_x
dee3 : c53d             [ 3] 	cmp num_a
dee5 : d014             [ 3] 	bne df_pg_insert_next_byte
dee7 : a546             [ 3] 	lda num_x+1
dee9 : c53e             [ 3] 	cmp num_a+1
deeb : d00e             [ 3] 	bne df_pg_insert_next_byte
                             	; Finished, update program end pointer
deed : 18               [ 2] 	clc
deee : 98               [ 2] 	tya
deef : 6567             [ 3] 	adc df_prgend
def1 : 8567             [ 3] 	sta df_prgend
def3 : a568             [ 3] 	lda df_prgend+1
def5 : 6900             [ 2] 	adc #0
def7 : 8568             [ 3] 	sta df_prgend+1
def9 : 18               [ 2] 	clc
defa : 60               [ 6] 	rts
defb :                       df_pg_insert_next_byte
                             	; Decrement current address
defb : 38               [ 2] 	sec
defc : a545             [ 3] 	lda num_x
defe : e901             [ 2] 	sbc #1
df00 : 8545             [ 3] 	sta num_x
df02 : a546             [ 3] 	lda num_x+1
df04 : e900             [ 2] 	sbc #0
df06 : 8546             [ 3] 	sta num_x+1
df08 : 4cdbde           [ 3] 	jmp df_pg_insert_byte
                             
                             ;****************************************
                             ;* df_pg_delete_block
                             ;* Delete a block at adr (X, A) of size Y
                             ;* df_prgend updated
                             ;* C=1 Error, C=0 Ok
                             ;****************************************
df0b :                       df_pg_delete_block
                             	; Deleting requires a block copy from
                             	; deletion address to end of program
                             	
                             	; Save address as this is the start address
df0b : 863d             [ 3] 	stx num_a
df0d : 853e             [ 3] 	sta num_a+1
df0f :                       df_pg_delete_byte
                             	; Move a byte from current+Y
df0f : b13d             [ 5] 	lda (num_a),y
                             	; Down to current
df11 : a200             [ 2] 	ldx #0
AS65 Assembler for R6502 [1.42].                                     Page  169
-------------------------------- bank\bank0.s --------------------------------

df13 : 813d             [ 6] 	sta (num_a,x)
                             	; Compare current address with lowest
df15 : a53d             [ 3] 	lda num_a
df17 : c567             [ 3] 	cmp df_prgend
df19 : d017             [ 3] 	bne df_pg_delete_next_byte
df1b : a53e             [ 3] 	lda num_a+1
df1d : c568             [ 3] 	cmp df_prgend+1
df1f : d011             [ 3] 	bne df_pg_delete_next_byte
                             	; Finished, update program end pointer
df21 : 843d             [ 3] 	sty num_a
df23 : 38               [ 2] 	sec
df24 : a567             [ 3] 	lda df_prgend
df26 : e53d             [ 3] 	sbc num_a
df28 : 8567             [ 3] 	sta df_prgend
df2a : a568             [ 3] 	lda df_prgend+1
df2c : e900             [ 2] 	sbc #0
df2e : 8568             [ 3] 	sta df_prgend+1
df30 : 18               [ 2] 	clc
df31 : 60               [ 6] 	rts
df32 :                       df_pg_delete_next_byte
                             	; Decrement current address
df32 : 18               [ 2] 	clc
df33 : a53d             [ 3] 	lda num_a
df35 : 6901             [ 2] 	adc #1
df37 : 853d             [ 3] 	sta num_a
df39 : a53e             [ 3] 	lda num_a+1
df3b : 6900             [ 2] 	adc #0
df3d : 853e             [ 3] 	sta num_a+1
df3f : 4c0fdf           [ 3] 	jmp df_pg_delete_byte
                             
                             
                             ;****************************************
                             ;* Get a line of input
                             ;* Input: C=1 for echo, 0 for no echo
                             ;* Output: C=0 means linbuff is valid
                             ;****************************************
df42 :                       df_pg_inputline
                             	; C is set on input for echo or not
                             	; Read a line of input
df42 : 2053c4           [ 6] 	jsr io_read_line
                             	
                             	; If nothing entered then sec
df45 : c000             [ 2] 	cpy #0
df47 : d002             [ 3] 	bne df_pg_inputline_ok
df49 : 38               [ 2] 	sec
df4a : 60               [ 6] 	rts
df4b :                       df_pg_inputline_ok
                             	; Copy input bytes to line buffer
                             	; for lexical analysis
df4b :                       df_pg_copyinputtolinbuff
df4b : b139             [ 5] 	lda (buf_lo),y
df4d : 990004           [ 5] 	sta df_linbuff,y
df50 : 88               [ 2] 	dey
df51 : 10f8             [ 3] 	bpl df_pg_copyinputtolinbuff
df53 : 18               [ 2] 	clc
df54 : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* df_pg_dflat
                             ;* Start a dflat editing session
                             ;****************************************
AS65 Assembler for R6502 [1.42].                                     Page  170
-------------------------------- bank\bank0.s --------------------------------

df55 :                       df_pg_dflat
                             	; stack pointer
df55 : ba               [ 2] 	tsx
df56 : 865f             [ 3] 	stx df_sp
                             	; error handler address
df58 : a95e             [ 2] 	lda #lo(df_trap_error)
df5a : 8560             [ 3] 	sta df_pc
df5c : a9f8             [ 2] 	lda #hi(df_trap_error)
df5e : 8561             [ 3] 	sta df_pc+1
                             	
                             	; make sure normal I/O is resumed
                             	;jsr io_init_default
df60 :                       df_pg_prompt
df60 : a2f9             [ 2] 	ldx #lo(df_pg_prompt_msg)
df62 : a9df             [ 2] 	lda #hi(df_pg_prompt_msg)
df64 : 208cc4           [ 6] 	jsr io_print_line
df67 : a900             [ 2] 	lda #0
df69 : 855e             [ 3] 	sta df_immed
df6b :                       df_pg_getcommand
                             	; current line is the token buffer when editing
df6b : a980             [ 2] 	lda #lo(df_tokbuff)
df6d : 8586             [ 3] 	sta df_currlin
df6f : a904             [ 2] 	lda #hi(df_tokbuff)
df71 : 8587             [ 3] 	sta df_currlin+1
df73 : 38               [ 2] 	sec
df74 : 2042df           [ 6] 	jsr df_pg_inputline
df77 : b01b             [ 3] 	bcs df_pg_done
df79 : 2096df           [ 6] 	jsr df_pg_tokenise
df7c : a55e             [ 3] 	lda df_immed
df7e : f0eb             [ 3] 	beq df_pg_getcommand
                             	; clear variables ready to run the statement
df80 : 2000e0           [ 6] 	jsr df_initrun
                             	; run from tokbuff
df83 : a280             [ 2] 	ldx #lo(df_tokbuff)
df85 : a904             [ 2] 	lda #hi(df_tokbuff)
                             	; always skip length and line number
df87 : a003             [ 2] 	ldy #3
df89 : 8488             [ 3] 	sty df_exeoff
                             	; init currlin
df8b : 20f5e3           [ 6] 	jsr df_rt_init_stat_ptr
                             	; start execution
df8e : 200ae4           [ 6] 	jsr df_rt_exec_stat
                             	; Go and get another line of input
df91 : 4c60df           [ 3] 	jmp df_pg_prompt
                             	; if blank line then return to cmd
df94 :                       df_pg_done
df94 : 18               [ 2] 	clc
df95 : 60               [ 6] 	rts
                             
                             	; tokenise the line
df96 :                       df_pg_tokenise
df96 : a900             [ 2] 	lda #0
df98 : 855d             [ 3] 	sta errno
df9a : 207ad9           [ 6] 	jsr df_lexer_line
                             	; check if line number == 0
df9d : ad8104           [ 4] 	lda df_tokbuff+DFTK_LINNUM
dfa0 : d00f             [ 3] 	bne df_pg_line_number
dfa2 : ad8204           [ 4] 	lda df_tokbuff+DFTK_LINNUM+1
dfa5 : d00a             [ 3] 	bne df_pg_line_number
                             	; check if line empty
dfa7 : ad8004           [ 4] 	lda df_tokbuff
dfaa : f004             [ 3] 	beq df_pg_nothing
AS65 Assembler for R6502 [1.42].                                     Page  171
-------------------------------- bank\bank0.s --------------------------------

                             	
                             	; line number == 0 so in immediate mode from tok
                             	; don't zero out the line length as some routine
                             	; run the line in immediate mode
dfac : a901             [ 2] 	lda #1
dfae : 855e             [ 3] 	sta df_immed
dfb0 :                       df_pg_nothing
dfb0 : 60               [ 6] 	rts
                             
                             	; put the numbered line in to the right bit of m
dfb1 :                       df_pg_line_number
                             	; Check if this line exists
dfb1 : ad8104           [ 4] 	lda df_tokbuff+DFTK_LINNUM
dfb4 : aa               [ 2] 	tax
dfb5 : ad8204           [ 4] 	lda df_tokbuff+DFTK_LINNUM+1
dfb8 : 2072de           [ 6] 	jsr df_pg_find_line
                             	; Save line address for later X then A
dfbb : 8538             [ 3] 	sta tmp_d
dfbd : 8a               [ 2] 	txa
dfbe : 48               [ 3] 	pha
dfbf : a538             [ 3] 	lda tmp_d
dfc1 : 48               [ 3] 	pha
                             	; If line exists then it needs deleting
dfc2 : b003             [ 3] 	bcs df_pg_skip_del_line
                             
                             	; delete line from program
dfc4 : 200bdf           [ 6] 	jsr df_pg_delete_block
dfc7 :                       df_pg_skip_del_line
                             	; If line length is zero
                             	; then nothing else to do (i.e. line was deleted
dfc7 : ad8004           [ 4] 	lda df_tokbuff+DFTK_LINLEN
                             	; save the tokenised line length
dfca : 48               [ 3] 	pha
dfcb : d004             [ 3] 	bne df_pg_insertline
                             	; Length was zero, so get temp stuff off stack
dfcd : 68               [ 4] 	pla
dfce : 68               [ 4] 	pla
dfcf : 68               [ 4] 	pla
dfd0 : 60               [ 6] 	rts
                             
                             	; insert a program line unless it is immediate
dfd1 :                       df_pg_insertline
                             	; Restore previously saved length
dfd1 : 68               [ 4] 	pla
dfd2 : a8               [ 2] 	tay
                             	; Restore previously saved address to reinsert t
dfd3 : 68               [ 4] 	pla
dfd4 : 8538             [ 3] 	sta tmp_d
dfd6 : 68               [ 4] 	pla
dfd7 : aa               [ 2] 	tax
dfd8 : a538             [ 3] 	lda tmp_d
                             	; And save it all back to stack again A,X,Y
                             	_pushAXY
                             
                             	; We now have insert address and length
dfe3 : 20cfde           [ 6] 	jsr df_pg_insert_block
                             	; Restore length and sub 1 to get index in to th
dfe6 : 68               [ 4] 	pla
dfe7 : a8               [ 2] 	tay
dfe8 : 88               [ 2] 	dey
                             	; Restore address to a pointer, X is pulled firs
dfe9 : 68               [ 4] 	pla
AS65 Assembler for R6502 [1.42].                                     Page  172
-------------------------------- bank\bank0.s --------------------------------

dfea : aa               [ 2] 	tax
dfeb : 863d             [ 3] 	stx num_a
dfed : 68               [ 4] 	pla
dfee : 853e             [ 3] 	sta num_a+1
                             	; num_a is destination, tokbuff is source, Y is 
dff0 :                       df_pg_insertlinbyte
dff0 : b98004           [ 4] 	lda df_tokbuff,y
dff3 : 913d             [ 5] 	sta (num_a),y
dff5 : 88               [ 2] 	dey
dff6 : 10f8             [ 3] 	bpl df_pg_insertlinbyte
dff8 : 60               [ 6] 	rts
                             	
dff9 :                       df_pg_prompt_msg
dff9 : 52656164790d00        	db "Ready",UTF_CR,0
                             
e000 :                       mod_sz_progedit_e
                             
                             	include "dflat/runtime.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  RUNTIME.S
                             ;*  This module is the runtime coordinator.  When
                             ;*  wants to run a program, execution of statemen
                             ;*  required procedure starts and proceeds from t
                             ;*  according to normal program flow.
                             ;*  This module also contains critical routines f
                             ;*  evaluation of expressions (numeric and string
                             ;*  Whilst the code to implement a specific comma
                             ;*  rtsubs.s, this is the key module that control
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code
                             
e000 :                       mod_sz_runtime_s
                             
                             ;****************************************
                             ;* df_initrun
                             ;* Initialise program space for runtime
                             ;****************************************
e000 :                       df_initrun
                             	; Set the key mask to check every 16 instruction
e000 : a910             [ 2] 	lda #0x10
e002 : 855c             [ 3] 	sta df_checkmsk
e004 : 855b             [ 3] 	sta df_checkkey
                             
                             	; String and array heap initialisation
                             	; Grows up from end of prog space PLUS 1
                             	; Initially empty (dim will allocate)
                             	_cpyZPWord df_prgend,df_starstrt
                             
                             	_incZPWord df_starstrt
                             
                             	_cpyZPWord df_starstrt,df_starend
                             
AS65 Assembler for R6502 [1.42].                                     Page  173
-------------------------------- bank\bank0.s --------------------------------

                             
e01c : a2ff             [ 2] 	ldx #0xff
                             	; Reset runtime stack (grows down)
e01e : 8676             [ 3] 	stx df_rtstop
                             	; make X=0
e020 : e8               [ 2] 	inx
                             	; Reset parameter stack (grows up)
e021 : 8677             [ 3] 	stx df_parmtop
                             	; Reset data pointer high byte
e023 : 8695             [ 3] 	stx df_currdat+1
                             	; if nest counter zeroed
e025 : 8693             [ 3] 	stx df_ifnest
                             
                             	; clear proc addresses
e027 : 202be0           [ 6] 	jsr df_rt_init_vvt
                             
                             ;	clc
e02a : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Initialise vvt
                             ;****************************************
e02b :                       df_rt_init_vvt
                             	; starting at beginning of vvt
                             	_cpyZPWord df_vvtend,df_tmpptra
                             
e033 : a200             [ 2] 	ldx #0
e035 :                       df_rt_init_vvt_slot
e035 : a5a1             [ 3] 	lda df_tmpptra
e037 : c56d             [ 3] 	cmp df_vvtstrt
e039 : d006             [ 3] 	bne df_rt_init_vvt_slot_undim
e03b : a5a2             [ 3] 	lda df_tmpptra+1
e03d : c56e             [ 3] 	cmp df_vvtstrt+1
e03f : f02d             [ 3] 	beq df_rt_init_done
e041 :                       df_rt_init_vvt_slot_undim
                             	; Only zero out proc and array pointers
                             	; Scalar variables are not initialised
e041 : a000             [ 2] 	ldy #0
e043 : b1a1             [ 5] 	lda (df_tmpptra),y
e045 : 29c0             [ 2] 	and #DFVVT_PROC|DFVVT_ARRY
e047 : f016             [ 3] 	beq df_rt_init_vvt_skip
                             	; skip over the first byte which is variable typ
e049 : c8               [ 2] 	iny
                             	; zero out first 3 bytes for proc and arrays
e04a : a900             [ 2] 	lda #0
e04c : 91a1             [ 5] 	sta (df_tmpptra),y
e04e : c8               [ 2] 	iny
e04f : 91a1             [ 5] 	sta (df_tmpptra),y
e051 : c8               [ 2] 	iny
e052 : 91a1             [ 5] 	sta (df_tmpptra),y
e054 : c8               [ 2] 	iny
                             	; before doing dim2 check if proc
                             	; as we don't want to erase the parm count
e055 : a1a1             [ 6] 	lda (df_tmpptra,x)
e057 : 2940             [ 2] 	and #DFVVT_PROC
e059 : d004             [ 3] 	bne df_rt_init_vvt_skip
                             	; if not proc then zero dim2
e05b : a900             [ 2] 	lda #0
e05d : 91a1             [ 5] 	sta (df_tmpptra),y
e05f :                       df_rt_init_vvt_skip
                             	; increment pointer to next slot
                             	_adcZPWord df_tmpptra,8
AS65 Assembler for R6502 [1.42].                                     Page  174
-------------------------------- bank\bank0.s --------------------------------

                             
e06c : 90c7             [ 3] 	bcc df_rt_init_vvt_slot 	; Always branches
e06e :                       df_rt_init_done
e06e : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Evaluate a numeric expression
                             ;* pop  X,A result from operator stack
                             ;****************************************
e06f :                       df_rt_getnval
                             	; evaluate the expression
e06f : 2075e0           [ 6] 	jsr df_rt_neval
                             	; get X,A off operator stack
e072 : 4c41f7           [ 3] 	jmp df_ost_popInt
                             
                             
                             ;****************************************
                             ;* Evaluate a numeric expression
                             ;* Push result to operator stack
                             ;****************************************
e075 :                       df_rt_neval
                             	; push terminator on cpu stack
                             	; so we know where we are
e075 : a900             [ 2] 	lda #0
e077 : 48               [ 3] 	pha
                             
                             	; find escape token or keyword token
                             	; if escape token push on to operand stack
                             	; if keyword token push on to operator stack
e078 :                       df_rt_neval_optk
e078 : a488             [ 3] 	ldy df_exeoff
                             	; check end of line
                             
e07a : c47e             [ 3] 	cpy df_eolidx
e07c : f03c             [ 3] 	beq df_rt_neval_process
e07e : c47f             [ 3] 	cpy df_nxtstidx
e080 : f038             [ 3] 	beq df_rt_neval_process
e082 : b186             [ 5] 	lda (df_currlin),y
e084 : 3022             [ 3] 	bmi df_rt_neval_tk
e086 : c920             [ 2] 	cmp #DFTK_ESCVAL
e088 : 9018             [ 3] 	bcc df_rt_neval_esc
                             	; check for evaluation terminators
                             	; specifically ',' and ']'
e08a : c92c             [ 2] 	cmp #','
e08c : f02c             [ 3] 	beq df_rt_neval_process
e08e : c95d             [ 2] 	cmp #']'
e090 : f028             [ 3] 	beq df_rt_neval_process
                             	; check for brackets
                             	; if close bracket then process
e092 : c929             [ 2] 	cmp #')'
e094 : f024             [ 3] 	beq df_rt_neval_process
                             	; if bracket then evaluate expression recursivel
e096 : c928             [ 2] 	cmp #'('
e098 : d031             [ 3] 	bne df_rt_neval_nextbyte
                             	; move past open bracket
e09a : e688             [ 5] 	inc df_exeoff
                             	; call evaluation function recursively
e09c : 2075e0           [ 6] 	jsr df_rt_neval
e09f : 4ccbe0           [ 3] 	jmp df_rt_neval_nextbyte
e0a2 :                       df_rt_neval_esc
e0a2 : 20fce0           [ 6] 	jsr df_rt_eval_esc
e0a5 : 4ccbe0           [ 3] 	jmp df_rt_neval_nextbyte
AS65 Assembler for R6502 [1.42].                                     Page  175
-------------------------------- bank\bank0.s --------------------------------

                             	; if a token then push on operator stack
e0a8 :                       df_rt_neval_tk
e0a8 : 297f             [ 2] 	and #0x7f
                             	; check if op (look up type using X as index)
                             	; X contains the current operator index
                             
e0aa : aa               [ 2] 	tax
e0ab : bde8dc           [ 4] 	lda df_tk_tokentype,x
                             	; A contains token type
e0ae : 48               [ 3] 	pha
e0af : 2908             [ 2] 	and #DFTK_OP
e0b1 : d01c             [ 3] 	bne df_rt_neval_tk_opp
                             	; check if fn
e0b3 : 68               [ 4] 	pla
e0b4 : 2902             [ 2] 	and #DFTK_FN
e0b6 : d00c             [ 3] 	bne df_rt_neval_tk_fn
                             
                             	; If got here then something wrong
                             	SWBRK DFERR_OK
                             
                             
e0ba :                       df_rt_neval_process
                             	; pop operator off stack and execute
                             	; keep popping until reached the terminator
e0ba : 68               [ 4] 	pla
e0bb : f006             [ 3] 	beq df_rt_neval_done
                             	; run the token code
e0bd : 207ae4           [ 6] 	jsr df_rt_run_token
                             	; top two bytes on ost stack is the result
e0c0 : 4cbae0           [ 3] 	jmp df_rt_neval_process
e0c3 :                       df_rt_neval_done
e0c3 : 60               [ 6] 	rts
                             
e0c4 :                       df_rt_neval_tk_fn
e0c4 : 18               [ 2] 	clc
e0c5 : 8a               [ 2] 	txa
                             	; run a fn token - returns a value on stack
e0c6 : e688             [ 5] 	inc df_exeoff
e0c8 : 207ae4           [ 6] 	jsr df_rt_run_token
                             	; move to next byte
e0cb :                       df_rt_neval_nextbyte
e0cb : e688             [ 5] 	inc df_exeoff
e0cd : d0a9             [ 3] 	bne df_rt_neval_optk		; ALWAYS as exeoff != 0
                             
e0cf :                       df_rt_neval_tk_opp
e0cf : 68               [ 4] 	pla				; Get A off stack which is the type
e0d0 :                       df_rt_neval_tk_op
                             	; X=Op, A=Type
                             	; if this op < current top of op stack
                             	; then do the op as it is higher priority so sho
                             	; not be pushed
                             	; what is top of the op stack?
                             	; save current op token value
                             	; C=0 means process the op now, else don't
                             	; save current operator index
e0d0 : 86a1             [ 3] 	stx df_tmpptra				; Index in to token table not 
                             	; mask off to keep priority
e0d2 : 2907             [ 2] 	and #DFTK_OPMSK
e0d4 : 85a3             [ 3] 	sta df_tmpptrb
                             	; peek top of op stack - pull and push X
e0d6 : 68               [ 4] 	pla
e0d7 : 48               [ 3] 	pha
AS65 Assembler for R6502 [1.42].                                     Page  176
-------------------------------- bank\bank0.s --------------------------------

e0d8 : aa               [ 2] 	tax
                             	; if 0 then nothing so push op
e0d9 : f01c             [ 3] 	beq df_rt_neval_pushOp
                             	; use it to index in to type table
e0db : bde8dc           [ 4] 	lda df_tk_tokentype,x
                             	; mask off to keep priority
e0de : 2907             [ 2] 	and #DFTK_OPMSK
                             	; compare with the saved token type which includ
e0e0 : c5a3             [ 3] 	cmp df_tmpptrb
                             	; if top of stack >= current then C=1
                             	; else C=0
                             	; what is the state of C?
                             	; if 1 then just pushOp
e0e2 : f002             [ 3] 	beq df_rt_neval_donow
e0e4 : b011             [ 3] 	bcs df_rt_neval_pushOp
e0e6 :                       df_rt_neval_donow
                             	; was C=0 so process now before pushing the new 
                             	; get operator off cpu stack
e0e6 : 68               [ 4] 	pla
e0e7 : a8               [ 2] 	tay		; Save whilst need to push other things
                             	; save the current op on cpu stack
e0e8 : a5a1             [ 3] 	lda df_tmpptra
e0ea : 48               [ 3] 	pha
e0eb : aa               [ 2] 	tax		; X = current op
e0ec : 98               [ 2] 	tya		; Get A back from Y (new op)
                             	; now run the token in A that came off the stack
e0ed : 207ae4           [ 6] 	jsr df_rt_run_token
                             	; get current op off cpu stack in to X
e0f0 : 68               [ 4] 	pla
e0f1 : aa               [ 2] 	tax
                             	; get the token type in to A
e0f2 : bde8dc           [ 4] 	lda df_tk_tokentype,x
                             	; now go back around again to check whether to p
e0f5 : d0d9             [ 3] 	bne df_rt_neval_tk_op		; ALWAYS as type never ze
e0f7 :                       df_rt_neval_pushOp
                             	; push the operator
e0f7 : a5a1             [ 3] 	lda df_tmpptra
e0f9 : 48               [ 3] 	pha
e0fa : d0cf             [ 3] 	bne df_rt_neval_nextbyte	; ALWAYS as token index
                             
                             
                             
                             
                             ; jump to escape evaluation routine
e0fc :                       df_rt_eval_esc
e0fc : 0a               [ 2] 	asl a
e0fd : aa               [ 2] 	tax
e0fe : bd0be1           [ 4] 	lda df_rt_eval_esc_tab,x
e101 : 85a1             [ 3] 	sta df_tmpptra
e103 : bd0ce1           [ 4] 	lda df_rt_eval_esc_tab+1,x
e106 : 85a2             [ 3] 	sta df_tmpptra+1
e108 : 6ca100           [ 6] 	jmp (df_tmpptra)
                             
e10b :                       df_rt_eval_esc_tab
e10b : cfe1                  	dw df_rt_eval_chr
e10d : dbe1                  	dw df_rt_eval_reserved
e10f : dbe1                  	dw df_rt_eval_reserved
e111 : dbe1                  	dw df_rt_eval_reserved
e113 : dbe1                  	dw df_rt_eval_reserved
e115 : dbe1                  	dw df_rt_eval_reserved	; no such thing as bytdec
e117 : cfe1                  	dw df_rt_eval_bythex
e119 : cfe1                  	dw df_rt_eval_bytbin
AS65 Assembler for R6502 [1.42].                                     Page  177
-------------------------------- bank\bank0.s --------------------------------

e11b : dbe1                  	dw df_rt_eval_reserved
e11d : cfe1                  	dw df_rt_eval_intdec
e11f : cfe1                  	dw df_rt_eval_inthex
e121 : cfe1                  	dw df_rt_eval_intbin
e123 : dbe1                  	dw df_rt_eval_reserved
e125 : dbe1                  	dw df_rt_eval_reserved
e127 : dbe1                  	dw df_rt_eval_reserved
e129 : dbe1                  	dw df_rt_eval_reserved
e12b : dde1                  	dw df_rt_eval_strlit
e12d : 26e2                  	dw df_rt_eval_var
e12f : 24e3                  	dw df_rt_eval_proc
                             
                             
                             ;****************************************
                             ;* Evaluate a string expression
                             ;* X, A = Destination is string accumulator
                             ;****************************************
e131 :                       df_rt_seval
e131 : a67a             [ 3] 	ldx df_sevalptr
e133 : a57b             [ 3] 	lda df_sevalptr+1
                             ;****************************************
                             ;* Evaluate a string expression
                             ;* X, A = Destination buffer / space
                             ;****************************************
e135 :                       df_rt_sval
                             	; keep X,A on the stack - will be modified
e135 : 8538             [ 3] 	sta tmp_d
e137 : 48               [ 3] 	pha
e138 : 8a               [ 2] 	txa
e139 : 48               [ 3] 	pha
e13a : a538             [ 3] 	lda tmp_d
                             	; push original destination
e13c : 2018f7           [ 6] 	jsr df_ost_pushStr
                             	; Push the destination to the 6502 stack
                             	; hi byte first then lo
                             	; push string idx so we know our starting positi
                             	; in the string buffer
                             	; this limits all evaluations to 255 bytes
                             ;	lda df_stridx
                             ;	jsr df_st_pushOp
                             
                             	; find escape token or keyword token
                             	; if escape token push on to operand stack
                             	; if keyword operator token push on to operator 
                             	; if keyword function token run it
                             
e13f :                       df_rt_seval_optk
e13f : a488             [ 3] 	ldy df_exeoff
                             	; check end of line
e141 : c47e             [ 3] 	cpy df_eolidx
e143 : f06d             [ 3] 	beq df_rt_seval_done
e145 : c47f             [ 3] 	cpy df_nxtstidx
e147 : f069             [ 3] 	beq df_rt_seval_done
                             
e149 : b186             [ 5] 	lda (df_currlin),y
e14b : 301c             [ 3] 	bmi df_rt_seval_tk
                             
e14d : c920             [ 2] 	cmp #DFTK_ESCVAL
e14f : 900a             [ 3] 	bcc df_rt_seval_esc
                             	; check for evaluation terminators
                             	; specifically ',' and ')'
e151 : c92c             [ 2] 	cmp #','
AS65 Assembler for R6502 [1.42].                                     Page  178
-------------------------------- bank\bank0.s --------------------------------

e153 : f05d             [ 3] 	beq df_rt_seval_done
e155 : c929             [ 2] 	cmp #')'
e157 : f059             [ 3] 	beq df_rt_seval_done
e159 : d04a             [ 3] 	bne df_rt_seval_nextbyte
e15b :                       df_rt_seval_esc
                             	; the only escape char is STRLIT, VAR or PROC
e15b : c910             [ 2] 	cmp #DFTK_STRLIT
e15d : f04b             [ 3] 	beq	df_rt_seval_esc_strlit
e15f : c911             [ 2] 	cmp #DFTK_VAR
e161 : f028             [ 3] 	beq	df_rt_seval_esc_var
e163 : c912             [ 2] 	cmp #DFTK_PROC
e165 : f049             [ 3] 	beq	df_rt_seval_esc_proc
                             
                             	; error if got here
                             	SWBRK DFERR_SYNTAX
                             
                             
                             	; if a token then push on operator stack
e169 :                       df_rt_seval_tk
e169 : 8488             [ 3] 	sty df_exeoff
e16b : 297f             [ 2] 	and #0x7f
                             	; check if op
e16d : aa               [ 2] 	tax
e16e : bde8dc           [ 4] 	lda df_tk_tokentype,x
e171 : 2904             [ 2] 	and #DFTK_STROP
e173 : d009             [ 3] 	bne df_rt_seval_tk_op
                             	; check if fn
e175 : bde8dc           [ 4] 	lda df_tk_tokentype,x
e178 : 2902             [ 2] 	and #DFTK_FN
e17a : d006             [ 3] 	bne df_rt_seval_tk_fn
                             
                             	; token type mismatch if got here
                             	SWBRK DFERR_TYPEMISM
                             
                             
e17e :                       df_rt_seval_tk_op
                             	; the only op is $+
                             	; so just ignore!
e17e : 8a               [ 2] 	txa
e17f : 4ca5e1           [ 3] 	jmp df_rt_seval_nextbyte
                             
e182 :                       df_rt_seval_tk_fn
e182 : 8a               [ 2] 	txa
e183 : e688             [ 5] 	inc df_exeoff
e185 : 207ae4           [ 6] 	jsr df_rt_run_token
e188 : 4c8fe1           [ 3] 	jmp df_rt_seval_copy
                             
e18b :                       df_rt_seval_esc_var
                             	; go process the variable as a normal RVAL
e18b : 18               [ 2] 	clc
e18c : 2026e2           [ 6] 	jsr df_rt_eval_var
                             	; copy source off rt stack to destination
e18f :                       df_rt_seval_copy
                             	; pull destination pointer
e18f : 68               [ 4] 	pla
e190 : 85a1             [ 3] 	sta df_tmpptra
e192 : 68               [ 4] 	pla
e193 : 85a2             [ 3] 	sta df_tmpptra+1
                             	; pop source string pointer off stack
e195 : 2045f7           [ 6] 	jsr df_ost_popStr
e198 : 86a3             [ 3] 	stx df_tmpptrb
e19a : 85a4             [ 3] 	sta df_tmpptrb+1
AS65 Assembler for R6502 [1.42].                                     Page  179
-------------------------------- bank\bank0.s --------------------------------

                             	; go and copy the string
e19c : 20b6e1           [ 6] 	jsr df_rt_copyStr
                             	; now save the destination
e19f : a5a2             [ 3] 	lda df_tmpptra+1
e1a1 : 48               [ 3] 	pha
e1a2 : a5a1             [ 3] 	lda df_tmpptra
e1a4 : 48               [ 3] 	pha
                             
                             ;	jmp df_rt_seval_nextbyte
e1a5 :                       df_rt_seval_nextbyte
e1a5 : e688             [ 5] 	inc df_exeoff
e1a7 : 4c3fe1           [ 3] 	jmp df_rt_seval_optk
                             
e1aa :                       df_rt_seval_esc_strlit
                             	; evaluate string literal
e1aa : 20dde1           [ 6] 	jsr df_rt_eval_strlit
e1ad : 4c8fe1           [ 3] 	jmp df_rt_seval_copy
                             
e1b0 :                       df_rt_seval_esc_proc
                             	; not yet suported *******
                             	SWBRK DFERR_OK
                             
                             
                             	; keep going until non-ws char found or end of l
e1b2 :                       df_rt_seval_done
                             	;
e1b2 : 68               [ 4] 	pla
e1b3 : 68               [ 4] 	pla
                             
e1b4 : 18               [ 2] 	clc
e1b5 : 60               [ 6] 	rts
                             
                             
                             ; Copy string from ptrb to ptra
e1b6 :                       df_rt_copyStr
e1b6 : a000             [ 2] 	ldy #0
e1b8 :                       df_rt_copyStr_ch
e1b8 : b1a3             [ 5] 	lda (df_tmpptrb),y
e1ba : 91a1             [ 5] 	sta (df_tmpptra),y
e1bc : f003             [ 3] 	beq df_rt_copyStr_done
e1be : c8               [ 2] 	iny
e1bf : d0f7             [ 3] 	bne df_rt_copyStr_ch	; Always relying in Y never
e1c1 :                       df_rt_copyStr_done
e1c1 : 98               [ 2] 	tya
e1c2 : 18               [ 2] 	clc
e1c3 : 65a1             [ 3] 	adc df_tmpptra
e1c5 : 85a1             [ 3] 	sta df_tmpptra
e1c7 : a5a2             [ 3] 	lda df_tmpptra+1
e1c9 : 6900             [ 2] 	adc #0
e1cb : 85a2             [ 3] 	sta df_tmpptra+1
e1cd : 18               [ 2] 	clc
e1ce : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Evaluate and push numeric value
                             ;****************************************
e1cf :                       df_rt_eval_intdec
e1cf :                       df_rt_eval_bytdec
e1cf :                       df_rt_eval_inthex
e1cf :                       df_rt_eval_bythex
e1cf :                       df_rt_eval_intbin
e1cf :                       df_rt_eval_bytbin
AS65 Assembler for R6502 [1.42].                                     Page  180
-------------------------------- bank\bank0.s --------------------------------

e1cf :                       df_rt_eval_chr
                             	; numeric constant
e1cf : c8               [ 2] 	iny
e1d0 : b186             [ 5] 	lda (df_currlin),y
e1d2 : aa               [ 2] 	tax
e1d3 : c8               [ 2] 	iny
e1d4 : b186             [ 5] 	lda (df_currlin),y
                             	; save offset before calling any routine
e1d6 : 8488             [ 3] 	sty df_exeoff
                             	; push number on to stack
e1d8 : 4c0df7           [ 3] 	jmp df_ost_pushInt
                             
e1db :                       df_rt_eval_reserved
                             	; should not get here
                             	SWBRK DFERR_OK
                             
                             
                             ;****************************************
                             ;* Evaluate and push string constant
                             ;****************************************
e1dd :                       df_rt_eval_strlit
e1dd : 8488             [ 3] 	sty df_exeoff
                             	; calculate the effective address
                             	; y + currlin
e1df : 98               [ 2] 	tya
                             	; set carry to add one extra
e1e0 : 38               [ 2] 	sec
e1e1 : 6586             [ 3] 	adc df_currlin
e1e3 : 85a1             [ 3] 	sta df_tmpptra
e1e5 : aa               [ 2] 	tax
e1e6 : a587             [ 3] 	lda df_currlin+1
e1e8 : 6900             [ 2] 	adc #0
e1ea : 85a2             [ 3] 	sta df_tmpptra+1
                             
                             	; push string on to stack
e1ec : 2018f7           [ 6] 	jsr df_ost_pushStr
                             	; now proceed until end of string found
e1ef : a488             [ 3] 	ldy df_exeoff
e1f1 :                       df_rt_eval_strlit_ch
e1f1 : b186             [ 5] 	lda (df_currlin),y
e1f3 : f003             [ 3] 	beq df_rt_eval_strlit_done
e1f5 : c8               [ 2] 	iny
e1f6 : d0f9             [ 3] 	bne df_rt_eval_strlit_ch
e1f8 :                       df_rt_eval_strlit_done	; Always relying on Y neve
e1f8 : 8488             [ 3] 	sty df_exeoff
e1fa : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Return array parameter
                             ;* A has parm
                             ;****************************************
e1fb :                       df_rt_arry_parm
                             	; move past open bracket or comma
e1fb : e688             [ 5] 	inc df_exeoff
                             	; evaluate expression inside bracket
e1fd : 206fe0           [ 6] 	jsr df_rt_getnval
e200 : 8a               [ 2] 	txa
                             ;	clc
e201 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Return double array parameter
AS65 Assembler for R6502 [1.42].                                     Page  181
-------------------------------- bank\bank0.s --------------------------------

                             ;* X = dim1, Y = dim2
                             ;****************************************
e202 :                       df_rt_arry_parm2
                             	; go get array parm 1
e202 : 20fbe1           [ 6] 	jsr df_rt_arry_parm
e205 : 48               [ 3] 	pha
e206 : a200             [ 2] 	ldx #0
e208 : a488             [ 3] 	ldy df_exeoff
e20a :                       df_rt_arry_parm2_term
e20a : b186             [ 5] 	lda (df_currlin),y
e20c : c95d             [ 2] 	cmp #']'
e20e : f011             [ 3] 	beq df_rt_arry_parm2_skiparry2
e210 : c92c             [ 2] 	cmp #','
e212 : f006             [ 3] 	beq df_rt_arry_parm2_arry2
e214 : 8488             [ 3] 	sty df_exeoff
e216 : c8               [ 2] 	iny
e217 : 4c0ae2           [ 3] 	jmp df_rt_arry_parm2_term
e21a :                       df_rt_arry_parm2_arry2
                             	; get second dimension and put in Y
e21a : 20fbe1           [ 6] 	jsr df_rt_arry_parm
e21d : a8               [ 2] 	tay
e21e : 68               [ 4] 	pla
e21f : aa               [ 2] 	tax
                             ;	clc
e220 : 60               [ 6] 	rts
e221 :                       df_rt_arry_parm2_skiparry2
e221 : a000             [ 2] 	ldy #0
e223 : 68               [ 4] 	pla
e224 : aa               [ 2] 	tax
                             ;	clc
e225 : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* Evaluate and push variable
                             ;* The actual value is pushed if numeric
                             ;* The pointer is pushed if string
                             ;* Carry Set = LVAR else normal RVAR
                             ;* LVAR : Y = line index, A=vvt type, tmpptra = v
                             ;****************************************
e226 :                       df_rt_eval_var
                             	; save carry bit
e226 : 08               [ 3] 	php
                             	; if lvar mode then already passed escape token
e227 : b010             [ 3] 	bcs df_rt_eval_lvskip
                             	; move past var escape token
e229 : c8               [ 2] 	iny
                             	; get var vvt address
e22a : b186             [ 5] 	lda (df_currlin),y
e22c : 85a1             [ 3] 	sta df_tmpptra
e22e : c8               [ 2] 	iny
e22f : 8488             [ 3] 	sty df_exeoff
e231 : b186             [ 5] 	lda (df_currlin),y
e233 : 85a2             [ 3] 	sta df_tmpptra+1
                             	; push vvt type first as this is the last thing 
e235 : a200             [ 2] 	ldx #0
e237 : a1a1             [ 6] 	lda (df_tmpptra,x)
e239 :                       df_rt_eval_lvskip
e239 : 48               [ 3] 	pha
                             	; Test A
e23a : aa               [ 2] 	tax
                             	; simple variable
AS65 Assembler for R6502 [1.42].                                     Page  182
-------------------------------- bank\bank0.s --------------------------------

e23b : 1012             [ 3] 	bpl df_rt_eval_var_notarry
                             	; even if an array if no dimensions then return 
                             	; if at end of statement or line then simple cop
e23d : c47e             [ 3] 	cpy df_eolidx
e23f : f02b             [ 3] 	beq df_rt_eval_var_simple
e241 : c47f             [ 3] 	cpy df_nxtstidx
e243 : f027             [ 3] 	beq df_rt_eval_var_simple
                             	; if next ch is not [ then simple copy
e245 : c8               [ 2] 	iny
e246 : b186             [ 5] 	lda (df_currlin),y
e248 : 88               [ 2] 	dey
e249 : c95b             [ 2] 	cmp #'['
e24b : d01f             [ 3] 	bne df_rt_eval_var_simple
                             	; go do array handling
e24d : f02b             [ 3] 	beq df_rt_eval_var_do_arry
e24f :                       df_rt_eval_var_notarry
                             	; pull the type, not needed here
e24f : 68               [ 4] 	pla
                             	; pull C and check if lvar wanted rather than rv
e250 : 28               [ 4] 	plp
e251 : b00c             [ 3] 	bcs df_rt_eval_lvar
                             	; just push the vvt lo,hi value
e253 : a001             [ 2] 	ldy #DFVVT_LO
e255 : b1a1             [ 5] 	lda (df_tmpptra),y
e257 : aa               [ 2] 	tax
e258 : a002             [ 2] 	ldy #DFVVT_HI
e25a : b1a1             [ 5] 	lda (df_tmpptra),y
                             
e25c : 4c0df7           [ 3] 	jmp df_ost_pushInt
                             
e25f :                       df_rt_eval_lvar
                             	; it's not an array, push the address of DFVVT_L
                             	; add DFVVT_LO offset to slot address in X,A
e25f : 18               [ 2] 	clc
e260 : a901             [ 2] 	lda #DFVVT_LO
e262 : 65a1             [ 3] 	adc df_tmpptra
e264 : aa               [ 2] 	tax
e265 : a5a2             [ 3] 	lda df_tmpptra+1
e267 : 6900             [ 2] 	adc #0
                             
                             	; push pointer to lo,hi
e269 : 4c1cf7           [ 3] 	jmp df_ost_pushPtr
                             
e26c :                       df_rt_eval_var_simple
                             	; clean up stack
e26c : 68               [ 4] 	pla
e26d : 68               [ 4] 	pla
                             	; simply get lo,hi and push ptr on stack
e26e : a001             [ 2] 	ldy #DFVVT_LO
e270 : b1a1             [ 5] 	lda (df_tmpptra),y
e272 : aa               [ 2] 	tax
e273 : a002             [ 2] 	ldy #DFVVT_HI
e275 : b1a1             [ 5] 	lda (df_tmpptra),y
e277 : 4c1cf7           [ 3] 	jmp df_ost_pushPtr
                             
e27a :                       df_rt_eval_var_do_arry
                             	; move past var index
e27a : e688             [ 5] 	inc df_exeoff
                             	; zero out x,y as they have dimension info
e27c : a200             [ 2] 	ldx #0
e27e : a000             [ 2] 	ldy #0
                             
AS65 Assembler for R6502 [1.42].                                     Page  183
-------------------------------- bank\bank0.s --------------------------------

                             	; ** Array handling routine **
                             	; A on stack = type
                             	; save vvt address
e280 : a5a2             [ 3] 	lda df_tmpptra+1
e282 : 48               [ 3] 	pha
e283 : a5a1             [ 3] 	lda df_tmpptra
e285 : 48               [ 3] 	pha
                             
                             	; get array parms in X,Y
e286 : 2002e2           [ 6] 	jsr df_rt_arry_parm2
                             	; restore vvt address
e289 : 68               [ 4] 	pla
e28a : 85a1             [ 3] 	sta df_tmpptra
e28c : 68               [ 4] 	pla
e28d : 85a2             [ 3] 	sta df_tmpptra+1
                             	; save dimension indices for later
                             	; save x last as needed first
                             	; A ok to trample
e28f : 98               [ 2] 	tya
e290 : 48               [ 3] 	pha
e291 : 8a               [ 2] 	txa
e292 : 48               [ 3] 	pha
                             	; if y is zero then need to decide some stuff
e293 : c000             [ 2] 	cpy #0
e295 : d012             [ 3] 	bne df_rt_eval_var_dim2adj
                             	; if dim2 > 0 then swap x,y
e297 : a004             [ 2] 	ldy #DFVVT_DIM2
e299 : b1a1             [ 5] 	lda (df_tmpptra),y
e29b : a000             [ 2] 	ldy #0
e29d : c900             [ 2] 	cmp #0
e29f : f008             [ 3] 	beq df_rt_eval_var_dim2adj
                             	; pop from stack in swapped order
e2a1 : 68               [ 4] 	pla
e2a2 : a8               [ 2] 	tay
e2a3 : 68               [ 4] 	pla
e2a4 : aa               [ 2] 	tax
                             	; save back on stack, A ok to trample
e2a5 : 98               [ 2] 	tya
e2a6 : 48               [ 3] 	pha
e2a7 : 8a               [ 2] 	txa
e2a8 : 48               [ 3] 	pha
                             
e2a9 :                       df_rt_eval_var_dim2adj
                             	; don't let y=0
e2a9 : c000             [ 2] 	cpy #0
e2ab : d001             [ 3] 	bne df_rt_eval_var_dim2adjy
e2ad : c8               [ 2] 	iny
e2ae :                       df_rt_eval_var_dim2adjy
                             	; don't let x=0
e2ae : e000             [ 2] 	cpx #0
e2b0 : d001             [ 3] 	bne df_rt_eval_var_dim2adjx
e2b2 : e8               [ 2] 	inx
e2b3 :                       df_rt_eval_var_dim2adjx
                             	;calculate offset
                             	;(y-1)*dim1 + (x-1)
e2b3 : ca               [ 2] 	dex
e2b4 : 88               [ 2] 	dey
                             	; (y-1)
e2b5 : 843d             [ 3] 	sty num_a
e2b7 : a900             [ 2] 	lda #0
e2b9 : 853e             [ 3] 	sta num_a+1
                             	; if y is 0 then no need to multiply
AS65 Assembler for R6502 [1.42].                                     Page  184
-------------------------------- bank\bank0.s --------------------------------

e2bb : c000             [ 2] 	cpy #0
e2bd : f00d             [ 3] 	beq df_rt_eval_var_nomult
                             	; (dim1)
e2bf : a003             [ 2] 	ldy #DFVVT_DIM1
e2c1 : a900             [ 2] 	lda #0
e2c3 : 8542             [ 3] 	sta num_b+1
e2c5 : b1a1             [ 5] 	lda (df_tmpptra),y
e2c7 : 8541             [ 3] 	sta num_b
                             	; (y-1)*dim1 num_a has result
e2c9 : 2046d4           [ 6] 	jsr int_fast_mult
e2cc :                       df_rt_eval_var_nomult
                             	; move x to a
e2cc : 8a               [ 2] 	txa
                             	; add x to num_a
e2cd : 18               [ 2] 	clc
e2ce : 653d             [ 3] 	adc num_a
e2d0 : 853d             [ 3] 	sta num_a
e2d2 : a53e             [ 3] 	lda num_a+1
e2d4 : 6900             [ 2] 	adc #0
e2d6 : 853e             [ 3] 	sta num_a+1
                             	; now have element offset in num_a
                             	; dimensions in x and y
e2d8 : 68               [ 4] 	pla
e2d9 : aa               [ 2] 	tax
e2da : 68               [ 4] 	pla
e2db : a8               [ 2] 	tay
                             	; get type of variable originally found
e2dc : 68               [ 4] 	pla
e2dd : 48               [ 3] 	pha
e2de : 2901             [ 2] 	and #DFVVT_INT
e2e0 : f004             [ 3] 	beq df_rt_eval_var_push
                             	; if it is int then multiply offset by 2
e2e2 : 063d             [ 5] 	asl num_a
e2e4 : 263e             [ 5] 	rol num_a+1
e2e6 :                       df_rt_eval_var_push
                             	; add pointer in lo,hi to num_a
e2e6 : 18               [ 2] 	clc
e2e7 : a001             [ 2] 	ldy #DFVVT_LO
e2e9 : b1a1             [ 5] 	lda (df_tmpptra),y
e2eb : 653d             [ 3] 	adc num_a
e2ed : 853d             [ 3] 	sta num_a
e2ef : a002             [ 2] 	ldy #DFVVT_HI
e2f1 : b1a1             [ 5] 	lda (df_tmpptra),y
e2f3 : d002             [ 3] 	bne df_rt_array_exists
                             	; if vvt address hi is zero then array not dimen
                             	SWBRK DFERR_DIM
                             
e2f7 :                       df_rt_array_exists
e2f7 : 653e             [ 3] 	adc num_a+1
e2f9 : 853e             [ 3] 	sta num_a+1
                             	; get the type
e2fb : 68               [ 4] 	pla
                             	; if not int or byte then push string
e2fc : 2903             [ 2] 	and #DFVVT_INT|DFVVT_BYT
e2fe : f01c             [ 4] 	beq df_rt_eval_var_str
                             	; get LVAR preference
e300 : 28               [ 4] 	plp
e301 : b01a             [ 3] 	bcs df_rt_eval_ptr
                             	; need to load lo and hi for int
                             	; but only lo for byt
e303 : 2901             [ 2] 	and #DFVVT_INT
e305 : f00b             [ 3] 	beq df_rt_eval_byt
AS65 Assembler for R6502 [1.42].                                     Page  185
-------------------------------- bank\bank0.s --------------------------------

                             	; push the contents pointed to by num_a
e307 : a000             [ 2] 	ldy #0
e309 : b13d             [ 5] 	lda (num_a),y
e30b : aa               [ 2] 	tax
e30c : c8               [ 2] 	iny
e30d : b13d             [ 5] 	lda (num_a),y
e30f : 4c0df7           [ 3] 	jmp df_ost_pushInt
e312 :                       df_rt_eval_byt
e312 : a000             [ 2] 	ldy #0
e314 : b13d             [ 5] 	lda (num_a),y
e316 : aa               [ 2] 	tax
e317 : a900             [ 2] 	lda #0
e319 : 4c0df7           [ 3] 	jmp df_ost_pushInt
e31c :                       df_rt_eval_var_str
e31c : 28               [ 4] 	plp
e31d :                       df_rt_eval_ptr
                             ;	clc
                             	; put num_a not contents
e31d : a63d             [ 3] 	ldx num_a
e31f : a53e             [ 3] 	lda num_a+1
e321 : 4c1cf7           [ 3] 	jmp df_ost_pushPtr
                             
e324 :                       df_rt_eval_proc
e324 : a577             [ 3] 	lda df_parmtop				; Save current position of par
e326 : 48               [ 3] 	pha
e327 : 2058f5           [ 6] 	jsr df_rt_proc				; Go and call the user functio
e32a : 68               [ 4] 	pla							; Get back the original parameter stac
e32b : c577             [ 3] 	cmp df_parmtop				; if it is the same, then no r
e32d : f002             [ 3] 	beq df_rt_eval_proc_err
e32f : 18               [ 2] 	clc
e330 : 60               [ 6] 	rts
e331 :                       df_rt_eval_proc_err
                             	; if no return value then report an errror
                             	SWBRK DFERR_RETURN
                             
                             
                             
                             
                             ;****************************************
                             ;* get two ints off the runtime stack
                             ;* first parm in ptrb, second in ptra
                             ;****************************************
e333 :                       df_rt_get2Ints
                             	; the first int popped is actually the second pa
e333 : 2041f7           [ 6] 	jsr df_ost_popInt
e336 : 86a3             [ 3] 	stx df_tmpptrb
e338 : 85a4             [ 3] 	sta df_tmpptrb+1
                             
e33a : 2041f7           [ 6] 	jsr df_ost_popInt
e33d : 86a1             [ 3] 	stx df_tmpptra
e33f : 85a2             [ 3] 	sta df_tmpptra+1
e341 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* get two strings off the runtime stack
                             ;* first parm in ptrb, second in ptra
                             ;****************************************
e342 :                       df_rt_get2Strs
                             	; the first int popped is actually the second pa
e342 : 2045f7           [ 6] 	jsr df_ost_popStr
e345 : 86a3             [ 3] 	stx df_tmpptrb
e347 : 85a4             [ 3] 	sta df_tmpptrb+1
AS65 Assembler for R6502 [1.42].                                     Page  186
-------------------------------- bank\bank0.s --------------------------------

                             
e349 : 2045f7           [ 6] 	jsr df_ost_popStr
e34c : 86a1             [ 3] 	stx df_tmpptra
e34e : 85a2             [ 3] 	sta df_tmpptra+1
e350 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ; common code for 2 ints runtime parsing
                             ;****************************************
e351 :                       df_rt_parm_2ints
                             	; evaluate 1st parm
e351 : 2075e0           [ 6] 	jsr df_rt_neval
                             	; jump over comma
e354 : e688             [ 5] 	inc df_exeoff
                             	; evaluate the 2nd parm
e356 : 2075e0           [ 6] 	jsr df_rt_neval
                             
                             	; pop 2nd parm
e359 : 2041f7           [ 6] 	jsr df_ost_popInt
e35c : 86a3             [ 3] 	stx df_tmpptrb
e35e : 85a4             [ 3] 	sta df_tmpptrb+1
                             	; pop 1st parm
e360 : 2041f7           [ 6] 	jsr df_ost_popInt
e363 : 86a1             [ 3] 	stx df_tmpptra
e365 : 85a2             [ 3] 	sta df_tmpptra+1
e367 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ; common code for 3 ints runtime parsing
                             ;****************************************
e368 :                       df_rt_parm_3ints
                             	; evaluate 1st parm
e368 : 2075e0           [ 6] 	jsr df_rt_neval
e36b : e688             [ 5] 	inc df_exeoff
                             	; evaluate the 2nd parm
e36d : 2075e0           [ 6] 	jsr df_rt_neval
e370 : e688             [ 5] 	inc df_exeoff
                             	; evaluate the 3rd parm
e372 : 2075e0           [ 6] 	jsr df_rt_neval
                             
                             	; pop 3rd parm
e375 : 2041f7           [ 6] 	jsr df_ost_popInt
e378 : 86a5             [ 3] 	stx df_tmpptrc
e37a : 85a6             [ 3] 	sta df_tmpptrc+1
                             	; pop 2nd parm
e37c : 2041f7           [ 6] 	jsr df_ost_popInt
e37f : 86a3             [ 3] 	stx df_tmpptrb
e381 : 85a4             [ 3] 	sta df_tmpptrb+1
                             	; pop 1st parm
e383 : 2041f7           [ 6] 	jsr df_ost_popInt
e386 : 86a1             [ 3] 	stx df_tmpptra
e388 : 85a2             [ 3] 	sta df_tmpptra+1
e38a : 60               [ 6] 	rts
                             
                             ;****************************************
                             ; common code for 4 ints runtime parsing
                             ;****************************************
e38b :                       df_rt_parm_4ints
                             	; evaluate 1st parm
e38b : 2075e0           [ 6] 	jsr df_rt_neval
e38e : e688             [ 5] 	inc df_exeoff
                             	; evaluate the 2nd parm
AS65 Assembler for R6502 [1.42].                                     Page  187
-------------------------------- bank\bank0.s --------------------------------

e390 : 2075e0           [ 6] 	jsr df_rt_neval
e393 : e688             [ 5] 	inc df_exeoff
                             	; evaluate the 3rd parm
e395 : 2075e0           [ 6] 	jsr df_rt_neval
e398 : e688             [ 5] 	inc df_exeoff
                             	; evaluate the 4th parm
e39a : 2075e0           [ 6] 	jsr df_rt_neval
                             
                             	; pop 4th parm
e39d : 2041f7           [ 6] 	jsr df_ost_popInt
e3a0 : 86a7             [ 3] 	stx df_tmpptrd
e3a2 : 85a8             [ 3] 	sta df_tmpptrd+1
                             	; pop 3rd parm
e3a4 : 2041f7           [ 6] 	jsr df_ost_popInt
e3a7 : 86a5             [ 3] 	stx df_tmpptrc
e3a9 : 85a6             [ 3] 	sta df_tmpptrc+1
                             	; pop 2nd parm
e3ab : 2041f7           [ 6] 	jsr df_ost_popInt
e3ae : 86a3             [ 3] 	stx df_tmpptrb
e3b0 : 85a4             [ 3] 	sta df_tmpptrb+1
                             	; pop 1st parm
e3b2 : 2041f7           [ 6] 	jsr df_ost_popInt
e3b5 : 86a1             [ 3] 	stx df_tmpptra
e3b7 : 85a2             [ 3] 	sta df_tmpptra+1
e3b9 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ; common code for 5 ints runtime parsing
                             ;****************************************
e3ba :                       df_rt_parm_5ints
                             	; evaluate 1st parm
e3ba : 2075e0           [ 6] 	jsr df_rt_neval
e3bd : e688             [ 5] 	inc df_exeoff
                             	; evaluate the 2nd parm
e3bf : 2075e0           [ 6] 	jsr df_rt_neval
e3c2 : e688             [ 5] 	inc df_exeoff
                             	; evaluate the 3rd parm
e3c4 : 2075e0           [ 6] 	jsr df_rt_neval
e3c7 : e688             [ 5] 	inc df_exeoff
                             	; evaluate the 4th parm
e3c9 : 2075e0           [ 6] 	jsr df_rt_neval
e3cc : e688             [ 5] 	inc df_exeoff
                             	; evaluate the 5th parm
e3ce : 2075e0           [ 6] 	jsr df_rt_neval
                             
                             	; pop 5th parm
e3d1 : 2041f7           [ 6] 	jsr df_ost_popInt
e3d4 : 86a9             [ 3] 	stx df_tmpptre
e3d6 : 85aa             [ 3] 	sta df_tmpptre+1
                             	; pop 4th parm
e3d8 : 2041f7           [ 6] 	jsr df_ost_popInt
e3db : 86a7             [ 3] 	stx df_tmpptrd
e3dd : 85a8             [ 3] 	sta df_tmpptrd+1
                             	; pop 3rd parm
e3df : 2041f7           [ 6] 	jsr df_ost_popInt
e3e2 : 86a5             [ 3] 	stx df_tmpptrc
e3e4 : 85a6             [ 3] 	sta df_tmpptrc+1
                             	; pop 2nd parm
e3e6 : 2041f7           [ 6] 	jsr df_ost_popInt
e3e9 : 86a3             [ 3] 	stx df_tmpptrb
e3eb : 85a4             [ 3] 	sta df_tmpptrb+1
                             	; pop 1st parm
AS65 Assembler for R6502 [1.42].                                     Page  188
-------------------------------- bank\bank0.s --------------------------------

e3ed : 2041f7           [ 6] 	jsr df_ost_popInt
e3f0 : 86a1             [ 3] 	stx df_tmpptra
e3f2 : 85a2             [ 3] 	sta df_tmpptra+1
                             
e3f4 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* initialise statement to be executed
                             ;* X,A = line pointer, Y=statement offset
                             ;****************************************
e3f5 :                       df_rt_init_stat_ptr
                             	; save current line
e3f5 : 8686             [ 3] 	stx df_currlin
e3f7 : 8587             [ 3] 	sta df_currlin+1
e3f9 : 8480             [ 3] 	sty df_curstidx
e3fb : 8488             [ 3] 	sty df_exeoff
e3fd : a000             [ 2] 	ldy #0
e3ff : b186             [ 5] 	lda (df_currlin),y
e401 : 857e             [ 3] 	sta df_eolidx
e403 : a480             [ 3] 	ldy df_curstidx
e405 : b186             [ 5] 	lda (df_currlin),y
e407 : 857f             [ 3] 	sta df_nxtstidx
e409 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Execute from a statement pointed to
                             ;* by currlin and exeoff
                             ;****************************************
e40a :                       df_rt_exec_stat
e40a : a686             [ 3] 	ldx df_currlin
e40c : a587             [ 3] 	lda df_currlin+1
e40e : a488             [ 3] 	ldy df_exeoff
e410 :                       df_rt_exec_init_ptr
e410 : 20f5e3           [ 6] 	jsr df_rt_init_stat_ptr
                             	; assume normal flow of control if next line hi 
                             	; this means no line can execute below page 1, n
e413 : a900             [ 2] 	lda #0
e415 : 858a             [ 3] 	sta df_nextlin+1
                             
                             	; find first token in statement
e417 :                       df_rt_exec_find_tok
e417 : c8               [ 2] 	iny
e418 : b186             [ 5] 	lda (df_currlin),y
e41a : 10fb             [ 3] 	bpl df_rt_exec_find_tok
e41c :                       df_rt_exec_found_tok
                             	; skip past token to next byte in readiness
e41c : c8               [ 2] 	iny
e41d : 8488             [ 3] 	sty df_exeoff
                             	; save the token
e41f : 48               [ 3] 	pha
                             	; Run that statement
e420 : 207ae4           [ 6] 	jsr df_rt_run_token
                             	; what token was run, if it was enddef or return
e423 : 68               [ 4] 	pla
e424 : c987             [ 2] 	cmp #DFRT_ENDDEF
e426 : f041             [ 3] 	beq df_rt_exec_end
e428 : c988             [ 2] 	cmp #DFRT_RETURN
e42a : f03d             [ 3] 	beq df_rt_exec_end
                             
                             	; check for break, asynch get
e42c : c65b             [ 5] 	dec df_checkkey
e42e : d012             [ 3] 	bne df_rt_exec_no_key
AS65 Assembler for R6502 [1.42].                                     Page  189
-------------------------------- bank\bank0.s --------------------------------

e430 : a55c             [ 3] 	lda df_checkmsk
e432 : 855b             [ 3] 	sta df_checkkey
e434 : 18               [ 2] 	clc
e435 : 203bc4           [ 6] 	jsr io_get_ch
e438 : b008             [ 3] 	bcs df_rt_exec_no_key
e43a : c903             [ 2] 	cmp #UTF_ETX					; CTRL-C?
e43c : f02d             [ 3] 	beq df_rt_exec_ctrl_c
e43e : c91a             [ 2] 	cmp #UTF_BRK					; CTRK-Z?
e440 : f02d             [ 3] 	beq df_rt_exec_ctrl_z
e442 :                       df_rt_exec_no_key
                             	; check if normal flow of control
e442 : a58a             [ 3] 	lda df_nextlin+1
e444 : d02b             [ 3] 	bne df_rt_exec_jump
                             	; try and execute another statement
e446 : a47f             [ 3] 	ldy df_nxtstidx
e448 : 8488             [ 3] 	sty df_exeoff
e44a : d0be             [ 3] 	bne df_rt_exec_stat
                             
                             	; reached end of line, move to next
e44c : a200             [ 2] 	ldx #0
e44e : 18               [ 2] 	clc
e44f : a186             [ 6] 	lda (df_currlin,x)
e451 : 6586             [ 3] 	adc df_currlin
e453 : 8586             [ 3] 	sta df_currlin
e455 : a587             [ 3] 	lda df_currlin+1
e457 : 6900             [ 2] 	adc #0
e459 : 8587             [ 3] 	sta df_currlin+1
                             
                             	; start from first statement in new line
e45b : a003             [ 2] 	ldy #3
e45d : 8488             [ 3] 	sty df_exeoff
                             
                             	; check if this line has any content (length >0)
e45f : a186             [ 6] 	lda (df_currlin,x)
e461 : 857e             [ 3] 	sta df_eolidx
                             	; no more lines (len = 0), program done
e463 : d0a5             [ 3] 	bne df_rt_exec_stat
                             	; else done
                             	; normally wouldn't get here except immediate mo
                             	; if line number <> 0 then error
e465 : a55e             [ 3] 	lda df_immed
e467 : f004             [ 3] 	beq df_rt_unexpected_end
e469 :                       df_rt_exec_end
e469 : 18               [ 2] 	clc
e46a : 60               [ 6] 	rts
e46b :                       df_rt_exec_ctrl_c
                             	SWBRK DFERR_BREAK
                             
e46d :                       df_rt_unexpected_end
                             	SWBRK DFERR_IMMEDIATE
                             
e46f :                       df_rt_exec_ctrl_z
                             	; Force a break with zero error number
                             	; this will drop in to the monitor
e46f : 0000                  	db 0,0
                             
                             	; if hi byte of nextline is not zero then
                             	; current line = next line
e471 :                       df_rt_exec_jump
                             	; initialise statement pointer from nextlin,toks
e471 : a689             [ 3] 	ldx df_nextlin
e473 : a58a             [ 3] 	lda df_nextlin+1
AS65 Assembler for R6502 [1.42].                                     Page  190
-------------------------------- bank\bank0.s --------------------------------

e475 : a47f             [ 3] 	ldy df_nxtstidx
e477 : 4c10e4           [ 3] 	jmp df_rt_exec_init_ptr
                             
                             
                             ;****************************************
                             ;* Run statement in A
                             ;****************************************
e47a :                       df_rt_run_token
                             	; mask off MSB
                             ;	and #0x7f
                             	; multiply by 2
e47a : 0a               [ 2] 	asl a
e47b : aa               [ 2] 	tax
e47c : bd67e5           [ 4] 	lda df_rt_tokenjmp,x
e47f : 85a1             [ 3] 	sta df_tmpptra
e481 : bd68e5           [ 4] 	lda df_rt_tokenjmp+1,x
e484 : 85a2             [ 3] 	sta df_tmpptra+1
                             	; execution code finishes with rts
e486 : 6ca100           [ 6] 	jmp (df_tmpptra)
                             
                             
                             ;****************************************
                             ;* X,A : Line Address, Y = Index
                             ;* C=0 Found next statement
                             ;* C=1 No statement found
                             ;****************************************
e489 :                       df_rt_nextstat
                             	; save pointer
e489 : 8690             [ 3] 	stx df_lineptr
e48b : 8591             [ 3] 	sta df_lineptr+1
                             	; if end of program then err
e48d : a200             [ 2] 	ldx #0
e48f : a190             [ 6] 	lda (df_lineptr,x)
e491 : f01c             [ 3] 	beq df_rt_nextstat_err
                             	; if next statement idx 0
e493 : b190             [ 5] 	lda (df_lineptr),y
                             	; then go to next line
e495 : f007             [ 3] 	beq df_rt_nextstat_ln
                             	; else make this Y
e497 : a8               [ 2] 	tay
                             	; X = line low
e498 : a690             [ 3] 	ldx df_lineptr
                             	; A = line high
e49a : a591             [ 3] 	lda df_lineptr+1
e49c : 18               [ 2] 	clc
e49d : 60               [ 6] 	rts
e49e :                       df_rt_nextstat_ln
                             	; for next line, add line length to ptr
e49e : 18               [ 2] 	clc
e49f : a190             [ 6] 	lda (df_lineptr,x)
e4a1 : 6590             [ 3] 	adc df_lineptr
e4a3 : 8590             [ 3] 	sta df_lineptr
e4a5 : a591             [ 3] 	lda df_lineptr+1
e4a7 : 6900             [ 2] 	adc #0
e4a9 : 8591             [ 3] 	sta df_lineptr+1
                             	; if end of program set C
e4ab : a190             [ 6] 	lda (df_lineptr,x)
e4ad : d004             [ 3] 	bne df_rt_nextstat_dn
e4af :                       df_rt_nextstat_err
e4af : a000             [ 2] 	ldy #0
e4b1 : 38               [ 2] 	sec
e4b2 : 60               [ 6] 	rts
AS65 Assembler for R6502 [1.42].                                     Page  191
-------------------------------- bank\bank0.s --------------------------------

e4b3 :                       df_rt_nextstat_dn
e4b3 : a690             [ 3] 	ldx df_lineptr
e4b5 : a591             [ 3] 	lda df_lineptr+1
                             	; always skip line number and length for start o
e4b7 : a003             [ 2] 	ldy #3
e4b9 : 18               [ 2] 	clc
e4ba : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Push current line and statement to runtime sta
                             ;****************************************
e4bb :                       df_rt_push_stat
e4bb : a580             [ 3] 	lda df_curstidx
e4bd : 20c3f6           [ 6] 	jsr df_rst_pushByte
e4c0 : a587             [ 3] 	lda df_currlin+1
e4c2 : a686             [ 3] 	ldx df_currlin
e4c4 : 4cdbf6           [ 3] 	jmp df_rst_pushWord
                             ;	clc
                             ;	rts
                             
                             ;****************************************
                             ;* Pop line and statement from runtime stack
                             ;* And transfer control to next statement
                             ;****************************************
e4c7 :                       df_rt_pop_stat
e4c7 : 20e9f6           [ 6] 	jsr df_rst_popWord
e4ca : 8689             [ 3] 	stx	df_nextlin
e4cc : 858a             [ 3] 	sta df_nextlin+1
e4ce : 20ccf6           [ 6] 	jsr df_rst_popByte
e4d1 : a8               [ 2] 	tay
e4d2 : a689             [ 3] 	ldx df_nextlin
e4d4 : a58a             [ 3] 	lda df_nextlin+1
e4d6 : 2089e4           [ 6] 	jsr df_rt_nextstat
e4d9 : 8689             [ 3] 	stx df_nextlin
e4db : 858a             [ 3] 	sta df_nextlin+1
e4dd : 847f             [ 3] 	sty df_nxtstidx
                             ;	clc
e4df : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Find proc definition in procptr
                             ;* Only call if proc not found before
                             ;****************************************
e4e0 :                       df_rt_findproc
                             	; start at program beginning
                             	_cpyZPWord df_prgstrt,df_lineptr
                             
e4e8 : a003             [ 2] 	ldy #3
e4ea : 8492             [ 3] 	sty df_lineidx
e4ec : a200             [ 2] 	ldx #0
e4ee : a190             [ 6] 	lda (df_lineptr,x)
e4f0 : f034             [ 4] 	beq df_rt_findproc_err
e4f2 :                       df_rt_findproc_cmd
e4f2 : c8               [ 2] 	iny
e4f3 : b190             [ 5] 	lda (df_lineptr),y
e4f5 : 10fb             [ 3] 	bpl df_rt_findproc_cmd
e4f7 : c986             [ 2] 	cmp #DFRT_DEF
e4f9 : d017             [ 4] 	bne df_rt_findproc_nextstat
                             	; skip def token
e4fb : c8               [ 2] 	iny
                             	; skip proc escape token
e4fc : c8               [ 2] 	iny
AS65 Assembler for R6502 [1.42].                                     Page  192
-------------------------------- bank\bank0.s --------------------------------

                             	; now check the proc address against procptr
e4fd : b190             [ 5] 	lda (df_lineptr),y
e4ff : c58e             [ 3] 	cmp df_procptr
e501 : d00f             [ 3] 	bne df_rt_findproc_nextstat
e503 : c8               [ 2] 	iny
e504 : b190             [ 5] 	lda (df_lineptr),y
e506 : c58f             [ 3] 	cmp df_procptr+1
e508 : d008             [ 3] 	bne df_rt_findproc_nextstat
                             
                             	; found it, return AXY with line details
e50a : a690             [ 3] 	ldx df_lineptr
e50c : a591             [ 3] 	lda df_lineptr+1
e50e : a492             [ 3] 	ldy df_lineidx
e510 : 18               [ 2] 	clc
e511 : 60               [ 6] 	rts
e512 :                       df_rt_findproc_nextstat
                             	; restore AXY line details and find next stateme
e512 : a690             [ 3] 	ldx df_lineptr
e514 : a591             [ 3] 	lda df_lineptr+1
e516 : a492             [ 3] 	ldy df_lineidx
e518 : 2089e4           [ 6] 	jsr df_rt_nextstat
e51b : b009             [ 3] 	bcs df_rt_findproc_err
e51d : 8690             [ 3] 	stx df_lineptr
e51f : 8591             [ 3] 	sta df_lineptr+1
e521 : 8492             [ 3] 	sty df_lineidx
e523 : 4cf2e4           [ 3] 	jmp df_rt_findproc_cmd
                             	; error
e526 :                       df_rt_findproc_err
                             	SWBRK DFERR_NOPROC
                             
                             
                             ;****************************************
                             ;* Find an escape value
                             ;* Does not check for end of line or statement
                             ;****************************************
e528 :                       df_rt_findescval
e528 : a488             [ 3] 	ldy df_exeoff
e52a : 88               [ 2] 	dey
e52b :                       df_rt_findescval_loop
e52b : c8               [ 2] 	iny
e52c : b186             [ 5] 	lda (df_currlin),y
e52e : c920             [ 2] 	cmp #DFTK_ESCVAL
e530 : b0f9             [ 3] 	bcs df_rt_findescval_loop
e532 : 8488             [ 3] 	sty df_exeoff
e534 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Skip white space
                             ;* Does not check for end of line or statement
                             ;* A contains non-ws char, df_exeoff updated
                             ;****************************************
e535 :                       df_rt_skip_ws
e535 : a488             [ 3] 	ldy df_exeoff
e537 : 88               [ 2] 	dey
e538 :                       df_rt_skip_ws_loop
e538 : c8               [ 2] 	iny
e539 : b186             [ 5] 	lda (df_currlin),y
e53b : c920             [ 2] 	cmp #' '
e53d : f0f9             [ 3] 	beq df_rt_skip_ws_loop
e53f : 8488             [ 3] 	sty df_exeoff
e541 : 60               [ 6] 	rts
                             
AS65 Assembler for R6502 [1.42].                                     Page  193
-------------------------------- bank\bank0.s --------------------------------

                             ;****************************************
                             ;* Get an lvar
                             ;* Assumes next token will be escape DFTK_VAR
                             ;* tmpptra contains vvt slot address
                             ;* X,A is the lvar pointer
                             ;****************************************
e542 :                       df_rt_getlvar
e542 : 2028e5           [ 6] 	jsr df_rt_findescval
                             	; move past the escape value
e545 : c8               [ 2] 	iny
                             
                             	; get variable address
e546 : b186             [ 5] 	lda (df_currlin),y
e548 : 85a1             [ 3] 	sta df_tmpptra
e54a : c8               [ 2] 	iny
e54b : b186             [ 5] 	lda (df_currlin),y
e54d : 85a2             [ 3] 	sta df_tmpptra+1
                             
e54f : 8488             [ 3] 	sty df_exeoff
                             	; get the type
e551 : a000             [ 2] 	ldy #0
e553 : b1a1             [ 5] 	lda (df_tmpptra),y
                             	; set carry flag to return pointer (lvar)
e555 : 38               [ 2] 	sec
e556 : a488             [ 3] 	ldy df_exeoff
e558 : 2026e2           [ 6] 	jsr df_rt_eval_var
e55b : 4c49f7           [ 3] 	jmp df_ost_popPtr
                             ;	rts
                             
                             ;****************************************
                             ;* Pop stat from rt stack and continue
                             ;* Y MUST BE ON THE CPU STACK AS IT GETS PLYed HE
                             ;****************************************
e55e :                       df_rt_pop_stat_go
e55e : 20c7e4           [ 6] 	jsr df_rt_pop_stat
                             	; restore stack pointer so we don't lose this en
e561 : 68               [ 4] 	pla
e562 : a8               [ 2] 	tay
e563 : 8476             [ 3] 	sty df_rtstop
e565 : 18               [ 2] 	clc
e566 : 60               [ 6] 	rts
                             
                             	include "dflat/rtjmptab.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  RTJUMPTAB.S
                             ;*  Runtime token jump table.
                             ;*  dflat uses four key tables to tokenise and ru
                             ;*  - df_tokensyms    - table of token symbols
                             ;*  - df_tk_tokentype - table of token types
                             ;*  - df_tk_tokenjmp  - table of tokenising routi
                             ;*  - df_rt_tokenjmp  - table of runtime token an
                             ;*  The key is the token symbols.  When a line is
                             ;*  in to the raw (untokenised) buffer, df_tokens
                             ;*  used to identify tokens.  The position of the
                             ;*  token is used to then look up type and jump v
AS65 Assembler for R6502 [1.42].                                     Page  194
-------------------------------- bank\bank0.s --------------------------------

                             ;*  in the other tables.
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code  
                             
                             ; Tokeniser jump table
                             ; In token order of df_tokensyms
e567 :                       df_rt_tokenjmp
e567 : 6fed                  	dw	df_rt_assign
e569 : 58f5                  	dw	df_rt_proc
e56b : 80ed                  	dw	df_rt_comment
e56d : 27ed                  	dw	df_rt_println
e56f : e0ec                  	dw	df_rt_printat
e571 : eaec                  	dw	df_rt_print
e573 : faf5                  	dw	df_rt_def			; 0x86
e575 : 7cf6                  	dw	df_rt_enddef		; 0x87
e577 : 81f6                  	dw	df_rt_return		; 0x88
e579 : 1af5                  	dw	df_rt_abort			; 0x89
e57b : 2eeb                  	dw	df_rt_local
e57d : 5eeb                  	dw	df_rt_dim
e57f : f2e9                  	dw	df_rt_repeat		; 0x8c
e581 : fae9                  	dw	df_rt_until
e583 : 55e9                  	dw	df_rt_for			; 0x8e
e585 : 93e9                  	dw	df_rt_next			; 0x8f
e587 : 2ce8                  	dw	df_rt_while			; 0x90
e589 : 8fe8                  	dw	df_rt_wend			; 0x81
e58b : 12e9                  	dw	df_rt_if			; 0x92
e58d : 00e9                  	dw	df_rt_else			; 0x93
e58f : fbe8                  	dw	df_rt_endif			; 0x94
e591 : 00e9                  	dw	df_rt_elseif		; 0x95
e593 : 80ed                  	dw	df_rt_data			; 0x96
e595 : 43fa                  	dw	df_rt_asm_assemble	; 0x97 df_rt_asm_assemble
e597 : 81ed                  	dw	df_rt_run
e599 : 81ee                  	dw	df_rt_list
e59b : f2ea                  	dw	df_rt_input
e59d : 70ec                  	dw	df_rt_text
e59f : eaeb                  	dw	df_rt_plot
e5a1 : 5eec                  	dw	df_rt_cursor
e5a3 : e7eb                  	dw	df_rt_cls
e5a5 : eef0                  	dw	df_rt_poke
e5a7 : dff0                  	dw	df_rt_doke
e5a9 : 21f1                  	dw	df_rt_sound
e5ab : 34f1                  	dw	df_rt_music
e5ad : 49f1                  	dw	df_rt_play
e5af : 41f2                  	dw	df_rt_save
e5b1 : 93f2                  	dw	df_rt_load
e5b3 : d6ea                  	dw	df_rt_read
e5b5 : 29e8                  	dw	df_rt_new
e5b7 : 96ed                  	dw	df_rt_renum
e5b9 : c7ec                  	dw	df_rt_wait
e5bb : f9f2                  	dw	df_rt_reset
e5bd : 73ec                  	dw	df_rt_hires
e5bf : 8cec                  	dw	df_rt_point
e5c1 : b6ec                  	dw	df_rt_line
e5c3 : a8ec                  	dw	df_rt_lineto
e5c5 : 76ec                  	dw	df_rt_pixmode
e5c7 : 7cec                  	dw	df_rt_ink
e5c9 : 82ec                  	dw	df_rt_paper
e5cb : 96ec                  	dw	df_rt_circle
e5cd : 64ec                  	dw	df_rt_himem
AS65 Assembler for R6502 [1.42].                                     Page  195
-------------------------------- bank\bank0.s --------------------------------

e5cf : 26e8                  	dw	df_rt_monitor
e5d1 : 1cf5                  	dw	df_rt_sprchar
e5d3 : 26f5                  	dw	df_rt_sprpos
e5d5 : 32f5                  	dw	df_rt_sprupd
e5d7 : 3bf5                  	dw	df_rt_sprinit
e5d9 : 3ef5                  	dw	df_rt_sprmulti
e5db : 20f2                  	dw	df_rt_bsave
e5dd : edf1                  	dw	df_rt_bload
e5df : 99f1                  	dw	df_rt_tsave
e5e1 : b3f1                  	dw	df_rt_tload
                             
e5e3 : 11f3                  	dw	df_rt_peek
e5e5 : 0ef3                  	dw	df_rt_deek
e5e7 : 9af3                  	dw	df_rt_stick
e5e9 : a0f3                  	dw	df_rt_get
e5eb : 58f4                  	dw	df_rt_chr
e5ed : 9df4                  	dw	df_rt_left
e5ef : aef4                  	dw	df_rt_right
e5f1 : c9f4                  	dw	df_rt_mid
e5f3 : e7f4                  	dw	df_rt_len
e5f5 : 4cf3                  	dw	df_rt_mem
e5f7 : b4f3                  	dw	df_rt_scrn
e5f9 : 2af3                  	dw	df_rt_rnd
e5fb : cef3                  	dw	df_rt_elapsed
e5fd : e9f3                  	dw	df_rt_call
e5ff : 6cf4                  	dw	df_rt_hex
e601 : f3f4                  	dw	df_rt_asc
e603 : 04f5                  	dw	df_rt_val
e605 : c1f3                  	dw	df_rt_pixel
e607 : 44f5                  	dw	df_rt_sprhit
                             ;	dw	df_rt_sgn
                             	
e609 : 7ce6                  	dw	df_rt_mult
e60b : 9de6                  	dw	df_rt_div
e60d : bee6                  	dw	df_rt_mod
e60f : dfe6                  	dw	df_rt_asl
e611 : f2e6                  	dw	df_rt_lsr
e613 : 56e6                  	dw	df_rt_add
e615 : 69e6                  	dw	df_rt_sub
                             	
e617 : 05e7                  	dw	df_rt_and
e619 : 14e7                  	dw	df_rt_or
e61b : 23e7                  	dw	df_rt_eor
e61d : bce7                  	dw	df_rt_comlte
e61f : c5e7                  	dw	df_rt_comgte
e621 : cee7                  	dw	df_rt_comne
e623 : a1e7                  	dw	df_rt_comlt
e625 : aae7                  	dw	df_rt_comgt
e627 : b3e7                  	dw	df_rt_comeq
                             
                             
                             ; escape sequence handlers
                             ; to do the reverse of tokenising during the list
                             ; command which is also used to save to disk.
e629 :                       df_rt_escjmp
e629 : 56ef                  	dw df_rt_lst_chr
e62b : 55ef                  	dw df_rt_lst_reserved
e62d : 55ef                  	dw df_rt_lst_reserved
e62f : 55ef                  	dw df_rt_lst_reserved
e631 : 55ef                  	dw df_rt_lst_reserved	
e633 : 55ef                  	dw df_rt_lst_reserved	; no such thing as bytdec
e635 : 73ef                  	dw df_rt_lst_bythex
AS65 Assembler for R6502 [1.42].                                     Page  196
-------------------------------- bank\bank0.s --------------------------------

e637 : 98ef                  	dw df_rt_lst_bytbin
e639 : 55ef                  	dw df_rt_lst_reserved	
e63b : bdef                  	dw df_rt_lst_intdec
e63d : 86ef                  	dw df_rt_lst_inthex
e63f : a1ef                  	dw df_rt_lst_intbin
e641 : 55ef                  	dw df_rt_lst_reserved
e643 : 55ef                  	dw df_rt_lst_reserved
e645 : 55ef                  	dw df_rt_lst_reserved
e647 : 55ef                  	dw df_rt_lst_reserved	
e649 : 1cf0                  	dw df_rt_lst_strlit
e64b : c8ef                  	dw df_rt_lst_var
e64d : c8ef                  	dw df_rt_lst_proc
                             
                             	include "dflat/rtsubs.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  RTSUBS.S
                             ;*  Module that implements the runtime execution 
                             ;*  keywords and functions.
                             ;*  So this is where most of the action is for ru
                             ;*  a line is being executed, the dflat runtime c
                             ;*  jumps through the runtime table to routines h
                             ;*  Every dflat statement begins with a token (ig
                             ;*  whitespace), even the implicit assignment and
                             ;*  invocation.
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code
                             
e64f :                       mod_sz_rtsubs_s
                             
                             	include "dflat/numop.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  NUMOP.S
                             ;*	Dflat number AND string operators.
                             ;*  Uses the operator stack to get parameters, le
                             ;*  result on the operator stack.
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code  
                             
                             ; common pushint code
e64f :                       df_rt_putintres
e64f : a6a1             [ 3] 	ldx df_tmpptra
e651 : a5a2             [ 3] 	lda df_tmpptra+1
AS65 Assembler for R6502 [1.42].                                     Page  197
-------------------------------- bank\bank0.s --------------------------------

e653 : 4c0df7           [ 3] 	jmp df_ost_pushInt
                             
                             ; add two numbers
e656 :                       df_rt_add
e656 : 2033e3           [ 6] 	jsr df_rt_get2Ints
                             	_addZPWord df_tmpptra,df_tmpptrb
                             
e666 : 4c4fe6           [ 3] 	jmp df_rt_putintres
                             	
                             ; subtract
e669 :                       df_rt_sub
e669 : 2033e3           [ 6] 	jsr df_rt_get2Ints
                             	_subZPWord df_tmpptra,df_tmpptrb
                             
e679 : 4c4fe6           [ 3] 	jmp df_rt_putintres
                             
                             ; multiply
e67c :                       df_rt_mult
e67c : 2033e3           [ 6] 	jsr df_rt_get2Ints
                             	_cpyZPWord df_tmpptra,num_a
                             
                             	_cpyZPWord df_tmpptrb,num_b
                             
e68f : 206fd4           [ 6] 	jsr int_mult
                             	_cpyZPWord num_a,df_tmpptra
                             
e69a : 4c4fe6           [ 3] 	jmp df_rt_putintres
                             
                             ; divide
e69d :                       df_rt_div
e69d : 2033e3           [ 6] 	jsr df_rt_get2Ints
                             	_cpyZPWord df_tmpptra,num_a
                             
                             	_cpyZPWord df_tmpptrb,num_b
                             
e6b0 : 209ad4           [ 6] 	jsr int_div
                             	_cpyZPWord num_a,df_tmpptra
                             
e6bb : 4c4fe6           [ 3] 	jmp df_rt_putintres
                             
                             ; mod
e6be :                       df_rt_mod
e6be : 2033e3           [ 6] 	jsr df_rt_get2Ints
                             	_cpyZPWord df_tmpptra,num_a
                             
                             	_cpyZPWord df_tmpptrb,num_b
                             
e6d1 : 209ad4           [ 6] 	jsr int_div
                             	_cpyZPWord num_x,df_tmpptra
                             
e6dc : 4c4fe6           [ 3] 	jmp df_rt_putintres
                             
                             ; shift left
e6df :                       df_rt_asl
e6df : 2033e3           [ 6] 	jsr df_rt_get2Ints
                             	; use low byte only for # of shifts
e6e2 : a6a3             [ 3] 	ldx df_tmpptrb
e6e4 : e8               [ 2] 	inx
e6e5 :                       df_rt_aslbit
e6e5 : ca               [ 2] 	dex
e6e6 : f007             [ 3] 	beq df_rt_asldone
e6e8 : 06a1             [ 5] 	asl df_tmpptra
AS65 Assembler for R6502 [1.42].                                     Page  198
-------------------------------- bank\bank0.s --------------------------------

e6ea : 26a2             [ 5] 	rol df_tmpptra+1
e6ec : 4ce5e6           [ 3] 	jmp df_rt_aslbit
e6ef :                       df_rt_asldone
e6ef : 4c4fe6           [ 3] 	jmp df_rt_putintres
                             
                             ; shift right
e6f2 :                       df_rt_lsr
e6f2 : 2033e3           [ 6] 	jsr df_rt_get2Ints
                             	; use low byte only for # of shifts
e6f5 : a6a3             [ 3] 	ldx df_tmpptrb
e6f7 : e8               [ 2] 	inx
e6f8 :                       df_rt_lsrbit
e6f8 : ca               [ 2] 	dex
e6f9 : f007             [ 4] 	beq df_rt_lsrdone
e6fb : 46a2             [ 5] 	lsr df_tmpptra+1
e6fd : 66a1             [ 5] 	ror df_tmpptra
e6ff : 4cf8e6           [ 3] 	jmp df_rt_lsrbit
e702 :                       df_rt_lsrdone
e702 : 4c4fe6           [ 3] 	jmp df_rt_putintres
                             
                             ; logical and
e705 :                       df_rt_and
e705 : 2033e3           [ 6] 	jsr df_rt_get2Ints
e708 : a5a1             [ 3] 	lda df_tmpptra
e70a : 25a3             [ 3] 	and df_tmpptrb
e70c : aa               [ 2] 	tax
e70d : a5a2             [ 3] 	lda df_tmpptra+1
e70f : 25a4             [ 3] 	and df_tmpptrb+1
e711 : 4c0df7           [ 3] 	jmp df_ost_pushInt
                             	
                             ; logical or
e714 :                       df_rt_or
e714 : 2033e3           [ 6] 	jsr df_rt_get2Ints
e717 : a5a1             [ 3] 	lda df_tmpptra
e719 : 05a3             [ 3] 	ora df_tmpptrb
e71b : aa               [ 2] 	tax
e71c : a5a2             [ 3] 	lda df_tmpptra+1
e71e : 05a4             [ 3] 	ora df_tmpptrb+1
e720 : 4c0df7           [ 3] 	jmp df_ost_pushInt
                             
                             ; logical eor
e723 :                       df_rt_eor
e723 : 2033e3           [ 6] 	jsr df_rt_get2Ints
e726 : a5a1             [ 3] 	lda df_tmpptra
e728 : 45a3             [ 3] 	eor df_tmpptrb
e72a : aa               [ 2] 	tax
e72b : a5a2             [ 3] 	lda df_tmpptra+1
e72d : 45a4             [ 3] 	eor df_tmpptrb+1
e72f : 4c0df7           [ 3] 	jmp df_ost_pushInt
                             
                             ; a==b common function
e732 :                       df_rt_aequb
e732 : a5a1             [ 3] 	lda df_tmpptra
e734 : c5a3             [ 3] 	cmp df_tmpptrb
e736 : d004             [ 3] 	bne df_rt_aequbFin
e738 : a5a2             [ 3] 	lda df_tmpptra+1
e73a : c5a4             [ 3] 	cmp df_tmpptrb+1
e73c :                       df_rt_aequbFin
e73c : 60               [ 6] 	rts
                             
                             ; a-b common function
e73d :                       df_rt_asubb
AS65 Assembler for R6502 [1.42].                                     Page  199
-------------------------------- bank\bank0.s --------------------------------

e73d : 38               [ 2] 	sec
e73e : a5a1             [ 3] 	lda df_tmpptra
e740 : e5a3             [ 3] 	sbc df_tmpptrb
e742 : a5a2             [ 3] 	lda df_tmpptra+1
e744 : e5a4             [ 3] 	sbc df_tmpptrb+1
e746 : 5002             [ 3] 	bvc df_rt_asubbFin
e748 : 4980             [ 2] 	eor #0x80
e74a :                       df_rt_asubbFin
e74a : 60               [ 6] 	rts
                             
                             ; b-a common function
e74b :                       df_rt_bsuba
e74b : 38               [ 2] 	sec
e74c : a5a3             [ 3] 	lda df_tmpptrb
e74e : e5a1             [ 3] 	sbc df_tmpptra
e750 : a5a4             [ 3] 	lda df_tmpptrb+1
e752 : e5a2             [ 3] 	sbc df_tmpptra+1
e754 : 5002             [ 3] 	bvc df_rt_bsubaFin
e756 : 4980             [ 2] 	eor #0x80
e758 :                       df_rt_bsubaFin
e758 : 60               [ 6] 	rts
                             
                             ; common routine push true
e759 :                       df_rt_true
e759 : a2ff             [ 2] 	ldx #0xff
e75b : 8a               [ 2] 	txa
e75c : 4c0df7           [ 3] 	jmp df_ost_pushInt
                             
                             ; common routine push false
e75f :                       df_rt_false
e75f : a200             [ 2] 	ldx #0x00
e761 : 8a               [ 2] 	txa
e762 : 4c0df7           [ 3] 	jmp df_ost_pushInt
                             
                             ; a < b == (a-b) < 0
e765 :                       df_rt_lt
e765 : 2033e3           [ 6] 	jsr df_rt_get2Ints
e768 : 203de7           [ 6] 	jsr df_rt_asubb
e76b : 30ec             [ 3] 	bmi df_rt_true
e76d : 10f0             [ 3] 	bpl df_rt_false
                             
                             ; a <=b == !(b-a > 0)
e76f :                       df_rt_lte
e76f : 2033e3           [ 6] 	jsr df_rt_get2Ints
e772 :                       df_rt_lte_calc
e772 : 204be7           [ 6] 	jsr df_rt_bsuba
e775 : 30e8             [ 3] 	bmi df_rt_false
e777 : 10e0             [ 3] 	bpl df_rt_true
                             
                             ; a > b == (b-a) < 0
e779 :                       df_rt_gt
e779 : 2033e3           [ 6] 	jsr df_rt_get2Ints
e77c : 204be7           [ 6] 	jsr df_rt_bsuba
e77f : 30d8             [ 3] 	bmi df_rt_true
e781 : 10dc             [ 3] 	bpl df_rt_false
                             
                             ; a >= b == (a-b >=0)
e783 :                       df_rt_gte
e783 : 2033e3           [ 6] 	jsr df_rt_get2Ints
e786 :                       df_rt_gte_calc
e786 : 203de7           [ 6] 	jsr df_rt_asubb
e789 : 10ce             [ 3] 	bpl df_rt_true
AS65 Assembler for R6502 [1.42].                                     Page  200
-------------------------------- bank\bank0.s --------------------------------

e78b : 30d2             [ 3] 	bmi df_rt_false
                             
                             ; a == b
e78d :                       df_rt_eq
e78d : 2033e3           [ 6] 	jsr df_rt_get2Ints
e790 : 2032e7           [ 6] 	jsr df_rt_aequb
e793 : d0ca             [ 3] 	bne df_rt_false
e795 : f0c2             [ 3] 	beq df_rt_true
                             
                             ; a <> b
e797 :                       df_rt_ne
e797 : 2033e3           [ 6] 	jsr df_rt_get2Ints
e79a : 2032e7           [ 6] 	jsr df_rt_aequb
e79d : f0c0             [ 3] 	beq df_rt_false
e79f : d0b8             [ 3] 	bne df_rt_true
                             
                             ; Common usage of boolean operators for num and s
                             
e7a1 :                       df_rt_comlt
                             	; First find the data type on the stack
e7a1 : 203bf7           [ 6] 	jsr df_ost_peekType
e7a4 : 2980             [ 2] 	and #DFST_STR
e7a6 : d04a             [ 3] 	bne df_rt_slt
                             	; If not string then assume number
e7a8 : f0bb             [ 3] 	beq df_rt_lt
                             
e7aa :                       df_rt_comgt
                             	; First find the data type on the stack
e7aa : 203bf7           [ 6] 	jsr df_ost_peekType
e7ad : 2980             [ 2] 	and #DFST_STR
e7af : d048             [ 3] 	bne df_rt_sgt
                             	; If not string then assume number
e7b1 : f0c6             [ 3] 	beq df_rt_gt
                             
e7b3 :                       df_rt_comeq
                             	; First find the data type on the stack
e7b3 : 203bf7           [ 6] 	jsr df_ost_peekType
e7b6 : 2980             [ 2] 	and #DFST_STR
e7b8 : d048             [ 4] 	bne df_rt_seq
                             	; If not string then assume number
e7ba : f0d1             [ 3] 	beq df_rt_eq
                             
e7bc :                       df_rt_comlte
                             	; First find the data type on the stack
e7bc : 203bf7           [ 6] 	jsr df_ost_peekType
e7bf : 2980             [ 2] 	and #DFST_STR
e7c1 : d014             [ 3] 	bne df_rt_slte
                             	; If not string then assume number
e7c3 : f0aa             [ 3] 	beq df_rt_lte
                             	
e7c5 :                       df_rt_comgte
                             	; First find the data type on the stack
e7c5 : 203bf7           [ 6] 	jsr df_ost_peekType
e7c8 : 2980             [ 2] 	and #DFST_STR
e7ca : d018             [ 3] 	bne df_rt_sgte
                             	; If not string then assume number
e7cc : f0b5             [ 3] 	beq df_rt_gte
                             
e7ce :                       df_rt_comne
                             	; First find the data type on the stack
e7ce : 203bf7           [ 6] 	jsr df_ost_peekType
e7d1 : 2980             [ 2] 	and #DFST_STR
AS65 Assembler for R6502 [1.42].                                     Page  201
-------------------------------- bank\bank0.s --------------------------------

e7d3 : d016             [ 3] 	bne df_rt_sne
                             	; If not string then assume number
e7d5 : f0c0             [ 3] 	beq df_rt_ne
                             
                             
                             ;********** STRING OPS **********
                             
                             ; string less than or equal
e7d7 :                       df_rt_slte
e7d7 : 2009e8           [ 6] 	jsr df_rt_str_comp
e7da : 3005             [ 3] 	bmi df_rt_str_comp_true
e7dc : f003             [ 3] 	beq df_rt_str_comp_true
e7de :                       df_rt_str_comp_false
e7de : 4c5fe7           [ 3] 	jmp df_rt_false
e7e1 :                       df_rt_str_comp_true
e7e1 : 4c59e7           [ 3] 	jmp df_rt_true	
                             
                             ; string greater then or equal	
e7e4 :                       df_rt_sgte
e7e4 : 2009e8           [ 6] 	jsr df_rt_str_comp
e7e7 : 10f8             [ 3] 	bpl df_rt_str_comp_true
e7e9 : 30f3             [ 3] 	bmi df_rt_str_comp_false
                             
                             ; string not equal
e7eb :                       df_rt_sne
e7eb : 2009e8           [ 6] 	jsr df_rt_str_comp
e7ee : d0f1             [ 3] 	bne df_rt_str_comp_true
e7f0 : f0ec             [ 3] 	beq df_rt_str_comp_false
                             
                             ; string less than
e7f2 :                       df_rt_slt
e7f2 : 2009e8           [ 6] 	jsr df_rt_str_comp
e7f5 : 30ea             [ 3] 	bmi df_rt_str_comp_true
e7f7 : 10e5             [ 3] 	bpl df_rt_str_comp_false
                             
                             ; string greater than
e7f9 :                       df_rt_sgt
e7f9 : 2009e8           [ 6] 	jsr df_rt_str_comp
e7fc : 30e0             [ 3] 	bmi df_rt_str_comp_false
e7fe : f0de             [ 3] 	beq df_rt_str_comp_false
e800 : d0df             [ 4] 	bne df_rt_str_comp_true
                             
                             ; string equal
e802 :                       df_rt_seq
e802 : 2009e8           [ 6] 	jsr df_rt_str_comp
e805 : f0da             [ 4] 	beq df_rt_str_comp_true
e807 : d0d5             [ 4] 	bne df_rt_str_comp_false
                             
                             ; common string comparator
                             ; N=1 means <
                             ; Z=0 means >
                             ; Z=1 means ==
e809 :                       df_rt_str_comp
e809 : 2042e3           [ 6] 	jsr df_rt_get2Strs
e80c : a000             [ 2] 	ldy #0
e80e :                       df_rt_str_comp_byte
e80e : b1a1             [ 5] 	lda (df_tmpptra),y
e810 : aa               [ 2] 	tax							; Save op1 char in X
e811 : d1a3             [ 5] 	cmp (df_tmpptrb),y
                             	; if c=0 then <
e813 : 9008             [ 3] 	bcc df_rt_str_comp_lt
                             	; if c=1 and nz then >
AS65 Assembler for R6502 [1.42].                                     Page  202
-------------------------------- bank\bank0.s --------------------------------

e815 : d009             [ 3] 	bne df_rt_str_comp_gt
                             	; if here then both strings still the same
e817 : 8a               [ 2] 	txa							; What was op1 char
                             	; if char is zero then end
e818 : f009             [ 3] 	beq df_rt_str_comp_eq
                             	; else do next char
e81a : c8               [ 2] 	iny
e81b : d0f1             [ 3] 	bne df_rt_str_comp_byte ; Always - relying on Y 
e81d :                       df_rt_str_comp_lt
e81d : a9ff             [ 2] 	lda #0xff
e81f : 60               [ 6] 	rts
e820 :                       df_rt_str_comp_gt
e820 : a901             [ 2] 	lda #0x01
e822 : 60               [ 6] 	rts
e823 :                       df_rt_str_comp_eq
e823 : a900             [ 2] 	lda #0x00
e825 : 60               [ 6] 	rts
                             
                             
                             
                             
e826 :                       df_rt_monitor
e826 : 4cb1d2           [ 3] 	jmp command_line
                             
e829 :                       df_rt_new
e829 : 4c73f7           [ 3] 	jmp df_clear
                             
e82c :                       df_rt_while
                             	; push statement address
e82c : 20bbe4           [ 6] 	jsr df_rt_push_stat
                             	; DFRT_WHILE token
e82f : a990             [ 2] 	lda #DFRT_WHILE
e831 : 20c3f6           [ 6] 	jsr df_rst_pushByte
                             
                             	; get value in A,X
e834 : 206fe0           [ 6] 	jsr df_rt_getnval
                             
                             	; if value<>0 then continue
e837 : e000             [ 2] 	cpx #0
e839 : f001             [ 3] 	beq df_rt_while_done
e83b : 60               [ 6] 	rts
e83c :                       df_rt_while_done
                             	; pop while data off stack as not needed
e83c : 20e9f6           [ 6] 	jsr df_rst_popWord
e83f : 20e9f6           [ 6] 	jsr df_rst_popWord
                             	; while evaluated false so find wend
                             	; but check for any nested while/wends
                             	; nest = 1 to start
e842 : a593             [ 3] 	lda df_ifnest
e844 : 48               [ 3] 	pha
e845 : a901             [ 2] 	lda #1
e847 : 8593             [ 3] 	sta df_ifnest
                             	; find the matching else/elseif/endif
                             	; start from current statement
                             	_cpyZPWord df_currlin,df_nextlin
                             
e851 :                       df_rt_findwend
e851 : a689             [ 3] 	ldx df_nextlin
e853 : a58a             [ 3] 	lda df_nextlin+1
e855 : a480             [ 3] 	ldy df_curstidx
e857 : 2089e4           [ 6] 	jsr df_rt_nextstat
                             	; got to end of program, then a problem
AS65 Assembler for R6502 [1.42].                                     Page  203
-------------------------------- bank\bank0.s --------------------------------

e85a : b031             [ 3] 	bcs df_rt_wend_end
e85c : 8689             [ 3] 	stx df_nextlin
e85e : 858a             [ 3] 	sta df_nextlin+1
e860 : 8480             [ 3] 	sty df_curstidx
                             	; find the command token
e862 :                       df_rt_while_cmd
e862 : c8               [ 2] 	iny
e863 : b189             [ 5] 	lda (df_nextlin),y
e865 : 10fb             [ 3] 	bpl df_rt_while_cmd
                             	; check for wend
e867 : c991             [ 2] 	cmp #DFRT_WEND
e869 : d019             [ 3] 	bne df_rt_check_while
                             	; decrement nest
e86b : c693             [ 5] 	dec df_ifnest
                             	; if not zero then go find more commands
e86d : d0e2             [ 3] 	bne df_rt_findwend
                             	; else found it, restore if nest
                             	; and skip the wend statement
e86f : 68               [ 4] 	pla
e870 : 8593             [ 3] 	sta df_ifnest
e872 : a689             [ 3] 	ldx df_nextlin
e874 : a58a             [ 3] 	lda df_nextlin+1
e876 : a480             [ 3] 	ldy df_curstidx
e878 : 2089e4           [ 6] 	jsr df_rt_nextstat
                             	; got to end of program, then a problem
e87b : b010             [ 3] 	bcs df_rt_wend_end
                             	; need to update nxtstidx to transfer control
e87d : 8689             [ 3] 	stx df_nextlin
e87f : 858a             [ 3] 	sta df_nextlin+1
e881 : 847f             [ 3] 	sty df_nxtstidx
e883 : 60               [ 6] 	rts
e884 :                       df_rt_check_while
                             	; check for while
e884 : c990             [ 2] 	cmp #DFRT_WHILE
e886 : d0c9             [ 3] 	bne df_rt_findwend
                             	; if while found then increment nest
e888 : e693             [ 5] 	inc df_ifnest
e88a : 4c51e8           [ 3] 	jmp df_rt_findwend
e88d :                       df_rt_wend_end
                             	SWBRK DFERR_IMMEDIATE
                             
                             
e88f :                       df_rt_wend
e88f : 20ccf6           [ 6] 	jsr df_rst_popByte
e892 : c990             [ 2] 	cmp #DFRT_WHILE
e894 : d00d             [ 3] 	bne df_rt_wend_err
                             	; pop the stat and continue
e896 : 20e9f6           [ 6] 	jsr df_rst_popWord
e899 : 8689             [ 3] 	stx	df_nextlin
e89b : 858a             [ 3] 	sta df_nextlin+1
e89d : 20ccf6           [ 6] 	jsr df_rst_popByte
e8a0 : 857f             [ 3] 	sta df_nxtstidx
e8a2 : 60               [ 6] 	rts
e8a3 :                       df_rt_wend_err
                             	SWBRK DFERR_WEND
                             
                             
                             ;move to next statement during if/else matching
                             ;end of program is an error
e8a5 :                       df_rt_if_stat
e8a5 : a689             [ 3] 	ldx df_nextlin
e8a7 : a58a             [ 3] 	lda df_nextlin+1
AS65 Assembler for R6502 [1.42].                                     Page  204
-------------------------------- bank\bank0.s --------------------------------

e8a9 : a480             [ 3] 	ldy df_curstidx
e8ab : 2089e4           [ 6] 	jsr df_rt_nextstat
                             	; got to end of program, then a problem
e8ae : b009             [ 3] 	bcs df_rt_if_stat_err
e8b0 : 8689             [ 3] 	stx df_nextlin
e8b2 : 858a             [ 3] 	sta df_nextlin+1
e8b4 : 8480             [ 3] 	sty df_curstidx
e8b6 : 847f             [ 3] 	sty df_nxtstidx
e8b8 : 60               [ 6] 	rts
                             ; program ended with no match
e8b9 :                       df_rt_if_stat_err
                             	SWBRK DFERR_UNCLOSEDIF
                             
                             
                             ; find matching else/elseif/endif
                             ; C = 0 match else/elseif/endif
                             ; C = 1 match endif only
                             ; endif is always matched
                             ; ** MAKE SURE NEXTLIN IS POPULATED! **
e8bb :                       df_rt_if_match
                             	; save the current if nest level
e8bb : a593             [ 3] 	lda df_ifnest
e8bd : 48               [ 3] 	pha
                             	; local if nest level is zero to start with
e8be : a900             [ 2] 	lda #0
e8c0 : 8593             [ 3] 	sta df_ifnest
                             	; save match pref
e8c2 : 08               [ 3] 	php
                             	; find the matching else/elseif/endif
                             	; start from df_nextlin, df_curstidx
e8c3 :                       df_rt_findelseendif
e8c3 : 20a5e8           [ 6] 	jsr df_rt_if_stat
                             	; find command
e8c6 :                       df_rt_ifcmd
e8c6 : c8               [ 2] 	iny
e8c7 : b189             [ 5] 	lda (df_nextlin),y
e8c9 : 10fb             [ 3] 	bpl df_rt_ifcmd
                             	; check for endif
e8cb : c994             [ 2] 	cmp #DFRT_ENDIF
e8cd : f015             [ 3] 	beq df_rt_ifelse
                             
e8cf : 28               [ 4] 	plp
e8d0 : 08               [ 3] 	php
                             
e8d1 : b008             [ 3] 	bcs df_rt_ifskipelseif
e8d3 : c993             [ 2] 	cmp #DFRT_ELSE
e8d5 : f00d             [ 3] 	beq df_rt_ifelse
e8d7 : c995             [ 2] 	cmp #DFRT_ELSEIF
e8d9 : f009             [ 3] 	beq df_rt_ifelse
e8db :                       df_rt_ifskipelseif
                             	; another if token found - increment lcoal if ne
e8db : c992             [ 2] 	cmp #DFRT_IF
e8dd : d002             [ 3] 	bne df_rt_skipnestif
e8df : e693             [ 5] 	inc df_ifnest
e8e1 :                       df_rt_skipnestif
                             	; no tokens of interest found, so next statement
e8e1 : 4cc3e8           [ 3] 	jmp df_rt_findelseendif
                             
                             	; found else/elseif/endif
                             	; but check if this is nested
e8e4 :                       df_rt_ifelse
                             	; nest counter zero then found matching else/els
AS65 Assembler for R6502 [1.42].                                     Page  205
-------------------------------- bank\bank0.s --------------------------------

e8e4 : a693             [ 3] 	ldx df_ifnest
e8e6 : f009             [ 3] 	beq df_rt_if_found
                             	; endif token found so decrement local nest
e8e8 : c994             [ 2] 	cmp #DFRT_ENDIF
e8ea : d002             [ 3] 	bne df_rt_skipnestendif
e8ec : c693             [ 5] 	dec df_ifnest
e8ee :                       df_rt_skipnestendif
                             	; continue to search for else/endif
e8ee : 4cc3e8           [ 3] 	jmp df_rt_findelseendif
                             	; ok got a match
e8f1 :                       df_rt_if_found
                             	; remove pref
e8f1 : 28               [ 4] 	plp
                             	; restore global if nest
e8f2 : 8538             [ 3] 	sta tmp_d			; Using as a temp place!
e8f4 : 68               [ 4] 	pla					; Get nest from stack
e8f5 : aa               [ 2] 	tax					; And put in X
e8f6 : a538             [ 3] 	lda tmp_d			; Get a back from temp!
e8f8 : 8693             [ 3] 	stx df_ifnest		; Now restore the nest counter
                             
                             	;A contains the token found, Y is index in to df
                             ;	clc
e8fa : 60               [ 6] 	rts
                             
e8fb :                       df_rt_endif
                             	; decrement if next level
e8fb : c693             [ 5] 	dec df_ifnest
e8fd : 3011             [ 4] 	bmi df_rt_noif_err
e8ff :                       df_rt_if_done
e8ff : 60               [ 6] 	rts
                             
                             	; else and ifelse encountered in a normal sequen
                             	; only happens when the clause has been executed
                             	; so we only now need to find the endif
e900 :                       df_rt_elseif
e900 :                       df_rt_else
                             	; not in if mode then error
e900 : a593             [ 3] 	lda df_ifnest
e902 : f00c             [ 3] 	beq df_rt_noif_err
                             	; find endif only
                             	; starting from current line and curstidx
                             	_cpyZPWord df_currlin,df_nextlin
                             
e90c : 38               [ 2] 	sec
e90d : 4cbbe8           [ 3] 	jmp df_rt_if_match
                             
                             ; endif/else/elseif encountered outside of an if
e910 :                       df_rt_noif_err
                             	SWBRK DFERR_NOIF
                             
                             
                             	; when if is encountered, the job of this routin
                             	; to determine which clause to execute, then tra
                             	; program control to that point.  in normal prog
                             	; sequence else/elseif statements will signify t
                             	; of an if construct.
e912 :                       df_rt_if
                             	; increment global if nest counter
e912 : e693             [ 5] 	inc df_ifnest
e914 :                       df_rt_ifeval
                             	; get value
e914 : 206fe0           [ 6] 	jsr df_rt_getnval
AS65 Assembler for R6502 [1.42].                                     Page  206
-------------------------------- bank\bank0.s --------------------------------

                             	; if value<>0 if is successful then continue nor
e917 : c900             [ 2] 	cmp #0
e919 : d0e4             [ 4] 	bne df_rt_if_done
e91b : e000             [ 2] 	cpx #0
e91d : d0e0             [ 4] 	bne df_rt_if_done
                             	; got here then if clause evaluated to false
                             	; match with else/elseif/endif
                             	; df_nextlin is used to find the clause to execu
                             	_cpyZPWord df_currlin,df_nextlin
                             
e927 : 18               [ 2] 	clc
e928 : 20bbe8           [ 6] 	jsr df_rt_if_match
                             	; A contains the token found, Y is index of this
                             
e92b : c993             [ 2] 	cmp #DFRT_ELSE
                             	; else: df_nextlin and df_nxtstidx points to the
e92d : f023             [ 3] 	beq df_rt_do_else
                             
e92f : c994             [ 2] 	cmp #DFRT_ENDIF
                             	; else: df_nextlin and df_nxtstidx points to the
e931 : f0cc             [ 4] 	beq df_rt_if_done
                             
                             	; elif detected - increment past the token and e
                             	; make this the current line and token index
                             	_cpyZPWord df_nextlin,df_currlin
                             
                             	; move past the token and save position
e93b : c8               [ 2] 	iny
e93c : 98               [ 2] 	tya
e93d : 48               [ 3] 	pha
                             	; initialise statement pointer
e93e : a480             [ 3] 	ldy df_curstidx
e940 : a686             [ 3] 	ldx df_currlin
e942 : a587             [ 3] 	lda df_currlin+1
e944 : 20f5e3           [ 6] 	jsr df_rt_init_stat_ptr
                             	; restore Y (one byte past the token) and save i
e947 : 68               [ 4] 	pla
e948 : a8               [ 2] 	tay
e949 : 8488             [ 3] 	sty df_exeoff
                             	; don't force a jump as we've initalised all var
e94b : a900             [ 2] 	lda #0
e94d : 858a             [ 3] 	sta df_nextlin+1
                             	; now everyting is set up to evaluate the elif c
e94f : 4c14e9           [ 3] 	jmp df_rt_ifeval
                             
e952 :                       df_rt_do_else
                             	; we need to point to the next statement not thi
e952 : 4ca5e8           [ 3] 	jmp df_rt_if_stat
                             
e955 :                       df_rt_for
                             	; push statement address to rt stack
e955 : 20bbe4           [ 6] 	jsr df_rt_push_stat
                             	; get lvar
e958 : 2042e5           [ 6] 	jsr df_rt_getlvar
                             	; Save lvar pointer, A is fine to trample
e95b : 48               [ 3] 	pha
e95c : 8a               [ 2] 	txa
e95d : 48               [ 3] 	pha
                             
                             	; find starting value
                             	; evaluate the starting value
                             	; can't use df_rt_getnval as need to use A,X fir
AS65 Assembler for R6502 [1.42].                                     Page  207
-------------------------------- bank\bank0.s --------------------------------

e95e : e688             [ 5] 	inc df_exeoff
e960 : 2075e0           [ 6] 	jsr df_rt_neval
                             	; get ready to update the counter using pointer
e963 : 68               [ 4] 	pla
e964 : aa               [ 2] 	tax
e965 : 86a1             [ 3] 	stx df_tmpptra
e967 : 68               [ 4] 	pla
e968 : 85a2             [ 3] 	sta df_tmpptra+1
                             	; But remember lvar pointer for later A is ok to
e96a : 48               [ 3] 	pha
e96b : 8a               [ 2] 	txa
e96c : 48               [ 3] 	pha
                             
                             	; get the starting value from op stack
e96d : 2041f7           [ 6] 	jsr df_ost_popInt
                             	; save it to counter slot
e970 : a001             [ 2] 	ldy #1
e972 : 91a1             [ 5] 	sta (df_tmpptra),y
e974 : 8a               [ 2] 	txa
e975 : 88               [ 2] 	dey
e976 : 91a1             [ 5] 	sta (df_tmpptra),y
                             
                             	; find end value
                             	; evaluate the end value
e978 : e688             [ 5] 	inc df_exeoff
e97a : 206fe0           [ 6] 	jsr df_rt_getnval
                             	; and put on rt stack
e97d : 20dbf6           [ 6] 	jsr df_rst_pushWord
                             
                             	; find step value
                             	; evaluate the end value
e980 : e688             [ 5] 	inc df_exeoff
e982 : 206fe0           [ 6] 	jsr df_rt_getnval
                             	; and push on rt stack
e985 : 20dbf6           [ 6] 	jsr df_rst_pushWord
                             	; save the counter lvar pointer
e988 : 68               [ 4] 	pla
e989 : aa               [ 2] 	tax
e98a : 68               [ 4] 	pla
e98b : 20dbf6           [ 6] 	jsr df_rst_pushWord
                             	; all done - counter set to start
                             	; stack contains counter slot, step val, end val
                             	; now push for token
e98e : a98e             [ 2] 	lda #DFRT_FOR
e990 : 4cc3f6           [ 3] 	jmp df_rst_pushByte
                             
e993 :                       df_rt_next
                             	; remember stack position
e993 : a476             [ 3] 	ldy df_rtstop
e995 : 98               [ 2] 	tya
e996 : 48               [ 3] 	pha
e997 : 20ccf6           [ 6] 	jsr df_rst_popByte
e99a : c98e             [ 2] 	cmp #DFRT_FOR
e99c : d052             [ 3] 	bne df_rt_next_err
                             	; get the slot address
e99e : 20e9f6           [ 6] 	jsr df_rst_popWord
                             	; save address to ptrd, contents to ptra
e9a1 : 86a7             [ 3] 	stx df_tmpptrd
e9a3 : 85a8             [ 3] 	sta df_tmpptrd+1
e9a5 : a000             [ 2] 	ldy #0
e9a7 : b1a7             [ 5] 	lda (df_tmpptrd),y
e9a9 : 85a1             [ 3] 	sta df_tmpptra
AS65 Assembler for R6502 [1.42].                                     Page  208
-------------------------------- bank\bank0.s --------------------------------

e9ab : c8               [ 2] 	iny
e9ac : b1a7             [ 5] 	lda (df_tmpptrd),y
e9ae : 85a2             [ 3] 	sta df_tmpptra+1
                             
                             	; get step value, save in ptrb
e9b0 : 20e9f6           [ 6] 	jsr df_rst_popWord
e9b3 : 86a3             [ 3] 	stx df_tmpptrb
e9b5 : 85a4             [ 3] 	sta df_tmpptrb+1
e9b7 : 48               [ 3] 	pha					; Push A to check for -ve step
                             
                             	; add step to counter and save back to counter
                             	_addZPWord df_tmpptra,df_tmpptrb
                             
e9c5 : a5a1             [ 3] 	lda df_tmpptra
e9c7 : a000             [ 2] 	ldy #0
e9c9 : 91a7             [ 5] 	sta (df_tmpptrd),y
e9cb : a5a2             [ 3] 	lda df_tmpptra+1
e9cd : c8               [ 2] 	iny
e9ce : 91a7             [ 5] 	sta (df_tmpptrd),y
                             
                             	; get end value, save in ptrb
e9d0 : 20e9f6           [ 6] 	jsr df_rst_popWord
e9d3 : 86a3             [ 3] 	stx df_tmpptrb
e9d5 : 85a4             [ 3] 	sta df_tmpptrb+1
e9d7 : 68               [ 4] 	pla					; check if if +ve or -ve step
e9d8 : 1006             [ 3] 	bpl df_rt_check_pos
                             	; call gte operation but no need to get ints
                             	; as already in ptra and ptrb
e9da : 2086e7           [ 6] 	jsr df_rt_gte_calc
e9dd : 4ce3e9           [ 3] 	jmp df_rt_next_check
e9e0 :                       df_rt_check_pos
                             	; call lte operation but no need to get ints
                             	; as already in ptra and ptrb
e9e0 : 2072e7           [ 6] 	jsr df_rt_lte_calc
e9e3 :                       df_rt_next_check
                             	; check if true or false
e9e3 : 2041f7           [ 6] 	jsr df_ost_popInt
e9e6 : e000             [ 2] 	cpx #0
                             	; if false then next is done
e9e8 : f003             [ 3] 	beq df_next_done
                             	; else we continue
e9ea : 4c5ee5           [ 3] 	jmp df_rt_pop_stat_go
                             	; if done, then continue with next statement
e9ed :                       df_next_done
e9ed : 4c0fea           [ 3] 	jmp df_rt_untilnext_done
                             
e9f0 :                       df_rt_next_err
                             	SWBRK DFERR_NEXTFOR
                             
                             
                             
e9f2 :                       df_rt_repeat
                             	; push statement address
e9f2 : 20bbe4           [ 6] 	jsr df_rt_push_stat
                             	; DFRT_REPEAT token
e9f5 : a98c             [ 2] 	lda #DFRT_REPEAT
e9f7 : 4cc3f6           [ 3] 	jmp df_rst_pushByte
                             
e9fa :                       df_rt_until
                             	; remember stack position
e9fa : a476             [ 3] 	ldy df_rtstop
e9fc : 98               [ 2] 	tya
AS65 Assembler for R6502 [1.42].                                     Page  209
-------------------------------- bank\bank0.s --------------------------------

e9fd : 48               [ 3] 	pha
e9fe : 20ccf6           [ 6] 	jsr df_rst_popByte
ea01 : c98c             [ 2] 	cmp #DFRT_REPEAT
ea03 : d012             [ 3] 	bne df_rt_until_err
                             	; evaluate expression in to A,X
ea05 : 206fe0           [ 6] 	jsr df_rt_getnval
                             	; if value<>0 then continue
ea08 : e000             [ 2] 	cpx #0
ea0a : d003             [ 3] 	bne df_rt_untilnext_done
                             
                             	; pop the stat and continue
ea0c : 4c5ee5           [ 3] 	jmp df_rt_pop_stat_go
                             
ea0f :                       df_rt_untilnext_done
ea0f : 68               [ 4] 	pla
ea10 : a8               [ 2] 	tay
                             	; pop 2 items off stack (line address, index)
                             	; and continue
ea11 : 20e9f6           [ 6] 	jsr df_rst_popWord
ea14 : 4cccf6           [ 3] 	jmp df_rst_popByte
                             
ea17 :                       df_rt_until_err
                             	SWBRK DFERR_UNTIL
                             
                             
ea19 :                       df_rt_sadd
ea19 : 60               [ 6] 	rts
                             
ea1a :                       df_rt_print_num
ea1a : 2041f7           [ 6] 	jsr df_ost_popInt
ea1d : 18               [ 2] 	clc
ea1e : 4ce7c3           [ 3] 	jmp print_a_to_d
                             
ea21 :                       df_rt_print_str
ea21 : 2045f7           [ 6] 	jsr df_ost_popStr
ea24 : 86a1             [ 3] 	stx df_tmpptra
ea26 : 85a2             [ 3] 	sta df_tmpptra+1
ea28 : a000             [ 2] 	ldy #0
ea2a :                       df_rt_print_str_ch
ea2a : b1a1             [ 5] 	lda (df_tmpptra),y
ea2c : f006             [ 3] 	beq df_rt_print_str_done
ea2e : 203ec4           [ 6] 	jsr io_put_ch
ea31 : c8               [ 2] 	iny
ea32 : d0f6             [ 3] 	bne df_rt_print_str_ch		; Rely on y not wrapping
ea34 :                       df_rt_print_str_done
ea34 : 60               [ 6] 	rts
                             
                             ; * Find the position of the next data item to re
ea35 :                       df_rt_nextdatum
ea35 : a200             [ 2] 	ldx #0
                             	; load data line offset
ea37 : a496             [ 3] 	ldy df_datoff
                             	; if data pointer unitialised (because high byte
ea39 : a595             [ 3] 	lda df_currdat+1
ea3b : d030             [ 3] 	bne df_rt_skipinitdataptr
                             	; then start at program beginning
                             	_cpyZPWord df_prgstrt,df_currdat
                             
ea45 :                       df_rt_datlinstart
                             	; if end of program then error
ea45 : a194             [ 6] 	lda (df_currdat,x)
ea47 : f034             [ 3] 	beq df_rt_datumerr
AS65 Assembler for R6502 [1.42].                                     Page  210
-------------------------------- bank\bank0.s --------------------------------

                             	; index in to first line byte
ea49 : a003             [ 2] 	ldy #3
ea4b : 8496             [ 3] 	sty df_datoff
                             	; find first 'data' statement
ea4d :                       df_rt_datastatement
ea4d : c8               [ 2] 	iny
ea4e : 98               [ 2] 	tya
                             	; end of line reached?
ea4f : c194             [ 6] 	cmp (df_currdat,x)
                             	; if not find data token
ea51 : d010             [ 3] 	bne df_rt_getdatatk
ea53 :                       df_rt_datnextlin
                             	; if so then go to next line
ea53 : 18               [ 2] 	clc
ea54 : a594             [ 3] 	lda df_currdat
ea56 : 6194             [ 6] 	adc (df_currdat,x)
ea58 : 8594             [ 3] 	sta df_currdat
ea5a : a595             [ 3] 	lda df_currdat+1
ea5c : 6900             [ 2] 	adc #0
ea5e : 8595             [ 3] 	sta df_currdat+1
ea60 : 4c45ea           [ 3] 	jmp df_rt_datlinstart
ea63 :                       df_rt_getdatatk
ea63 : b194             [ 5] 	lda (df_currdat),y
ea65 : 10e6             [ 3] 	bpl df_rt_datastatement
                             	; found data statement?
ea67 : c996             [ 2] 	cmp #DFRT_DATA
                             	; if not then go to next line
ea69 : d0e8             [ 3] 	bne df_rt_datnextlin
ea6b : 8496             [ 3] 	sty df_datoff
ea6d :                       df_rt_skipinitdataptr
ea6d : 98               [ 2] 	tya
                             	; end of line reached?
ea6e : c194             [ 6] 	cmp (df_currdat,x)
                             	; if so go to next line
ea70 : f0e1             [ 3] 	beq df_rt_datnextlin
                             	; else see if escape value
ea72 : b194             [ 5] 	lda (df_currdat),y
ea74 : c920             [ 2] 	cmp #DFTK_ESCVAL
ea76 : c8               [ 2] 	iny
ea77 : b0f4             [ 3] 	bcs df_rt_skipinitdataptr
                             	; ok found an escape value
                             	; save position and return
ea79 : 88               [ 2] 	dey
ea7a : 8496             [ 3] 	sty df_datoff
ea7c : 60               [ 6] 	rts
ea7d :                       df_rt_datumerr
                             	SWBRK DFERR_NODATA
                             
                             
                             ; read a datum
ea7f :                       df_rt_readdatum
                             	; update data pointer to next data item
ea7f : 2035ea           [ 6] 	jsr df_rt_nextdatum
                             
                             	; now get lvar X,A from current statement
ea82 : 2042e5           [ 6] 	jsr df_rt_getlvar
                             	; save lvar in tmpb, vvt ptr in tmpa
ea85 : 86a3             [ 3] 	stx df_tmpptrb
ea87 : 85a4             [ 3] 	sta df_tmpptrb+1
                             
                             	; first save save current prgoram line and offse
ea89 : a586             [ 3] 	lda df_currlin
AS65 Assembler for R6502 [1.42].                                     Page  211
-------------------------------- bank\bank0.s --------------------------------

ea8b : 48               [ 3] 	pha
ea8c : a587             [ 3] 	lda df_currlin+1
ea8e : 48               [ 3] 	pha
ea8f : a588             [ 3] 	lda df_exeoff
ea91 : 48               [ 3] 	pha
ea92 : a57e             [ 3] 	lda df_eolidx
ea94 : 48               [ 3] 	pha
ea95 : a57f             [ 3] 	lda df_nxtstidx
ea97 : 48               [ 3] 	pha
ea98 : a580             [ 3] 	lda df_curstidx
ea9a : 48               [ 3] 	pha
                             
                             	; use data pointer as current position for evalu
                             	_cpyZPWord df_currdat,df_currlin
                             
eaa3 : a596             [ 3] 	lda df_datoff
eaa5 : 8588             [ 3] 	sta df_exeoff
eaa7 : a200             [ 2] 	ldx #0
eaa9 : a194             [ 6] 	lda (df_currdat,x)
eaab : 857e             [ 3] 	sta df_eolidx
eaad : a900             [ 2] 	lda #0
eaaf : 857f             [ 3] 	sta df_nxtstidx
eab1 : a903             [ 2] 	lda #3
eab3 : 8580             [ 3] 	sta df_curstidx
                             
                             	; get type from vvt ptr in tmpa
eab5 : a1a1             [ 6] 	lda (df_tmpptra,x)
eab7 : a8               [ 2] 	tay
                             	; get lvar point from tmpb
eab8 : a6a3             [ 3] 	ldx df_tmpptrb
eaba : a5a4             [ 3] 	lda df_tmpptrb+1
                             
                             	; X,A and Y set up, now evaluate and perform ass
eabc : 2072ed           [ 6] 	jsr df_rt_doassign
                             
                             	; update data offset as data has been consumed
eabf : a588             [ 3] 	lda df_exeoff
eac1 : 8596             [ 3] 	sta df_datoff
                             	; restore line settings
eac3 : 68               [ 4] 	pla
eac4 : 8580             [ 3] 	sta df_curstidx
eac6 : 68               [ 4] 	pla
eac7 : 857f             [ 3] 	sta df_nxtstidx
eac9 : 68               [ 4] 	pla
eaca : 857e             [ 3] 	sta df_eolidx
eacc : 68               [ 4] 	pla
eacd : 8588             [ 3] 	sta df_exeoff
eacf : 68               [ 4] 	pla
ead0 : 8587             [ 3] 	sta df_currlin+1
ead2 : 68               [ 4] 	pla
ead3 : 8586             [ 3] 	sta df_currlin
ead5 : 60               [ 6] 	rts
                             
                             
ead6 :                       df_rt_read
                             	; find variable to read in to from current posit
ead6 : a488             [ 3] 	ldy df_exeoff
ead8 :                       df_rt_read_find_var
ead8 : c8               [ 2] 	iny
                             	; if end of line or statement then done
ead9 : c47e             [ 3] 	cpy df_eolidx
eadb : f012             [ 3] 	beq df_rt_read_done
AS65 Assembler for R6502 [1.42].                                     Page  212
-------------------------------- bank\bank0.s --------------------------------

eadd : c47f             [ 3] 	cpy df_nxtstidx
eadf : f00e             [ 3] 	beq df_rt_read_done
                             	; if not found escape then next byte
eae1 : b186             [ 5] 	lda (df_currlin),y
eae3 : c920             [ 2] 	cmp #DFTK_ESCVAL
eae5 : b0f1             [ 3] 	bcs df_rt_read_find_var
                             	; ok found escape, save position
eae7 : 8488             [ 3] 	sty df_exeoff
                             	; go and read in the value
eae9 : 207fea           [ 6] 	jsr df_rt_readdatum
                             	; try find another variable
eaec : 4cd6ea           [ 3] 	jmp df_rt_read
                             
eaef :                       df_rt_read_done
                             	; save position
eaef : 8488             [ 3] 	sty df_exeoff
eaf1 : 60               [ 6] 	rts
                             
eaf2 :                       df_rt_input
                             	; df_tmpptra has the vvt address, X,A is the lva
eaf2 : 2042e5           [ 6] 	jsr df_rt_getlvar
                             	; Save lvar pointer
eaf5 : 86a3             [ 3] 	stx df_tmpptrb
eaf7 : 85a4             [ 3] 	sta df_tmpptrb+1
                             	; go read a line of input
                             	; buf_lo ptr has the input, Y is size
eaf9 : 38               [ 2] 	sec
eafa : 2053c4           [ 6] 	jsr io_read_line
                             	; check the type
eafd : a200             [ 2] 	ldx #0
eaff : a1a1             [ 6] 	lda (df_tmpptra,x)
eb01 : 2904             [ 2] 	and #DFVVT_STR
eb03 : d008             [ 3] 	bne df_rt_input_str
eb05 : a1a1             [ 6] 	lda (df_tmpptra,x)
eb07 : 2903             [ 2] 	and #DFVVT_INT|DFVVT_BYT
eb09 : d00a             [ 3] 	bne df_rt_input_num
                             	; if not int or byte then error
eb0b : f01f             [ 3] 	beq df_rt_input_err
eb0d :                       df_rt_input_str
eb0d : b139             [ 5] 	lda (buf_lo),y
eb0f : 91a3             [ 5] 	sta (df_tmpptrb),y
eb11 : 88               [ 2] 	dey
eb12 : 10f9             [ 3] 	bpl df_rt_input_str
eb14 : 60               [ 6] 	rts
                             
eb15 :                       df_rt_input_num
                             	; X,A = address, linbuff must be on page boundar
eb15 : a53a             [ 3] 	lda buf_lo+1
eb17 : a639             [ 3] 	ldx buf_lo
eb19 : a000             [ 2] 	ldy #0				; any numeric format
eb1b : 20c8c1           [ 6] 	jsr con_n_to_a
eb1e : b00c             [ 3] 	bcs df_rt_input_err
eb20 : a000             [ 2] 	ldy #0
eb22 : a53d             [ 3] 	lda num_a
eb24 : 91a3             [ 5] 	sta (df_tmpptrb),y
eb26 : c8               [ 2] 	iny
eb27 : a53e             [ 3] 	lda num_a+1
eb29 : 91a3             [ 5] 	sta (df_tmpptrb),y
eb2b : 60               [ 6] 	rts
eb2c :                       df_rt_input_err
                             	SWBRK DFERR_TYPEMISM
                             
AS65 Assembler for R6502 [1.42].                                     Page  213
-------------------------------- bank\bank0.s --------------------------------

                             
eb2e :                       df_rt_local
                             	; get current local count off rt stack
eb2e : 20ccf6           [ 6] 	jsr df_rst_popByte
                             	; save on pc stack for incrmenting
eb31 : 48               [ 3] 	pha
eb32 : a488             [ 3] 	ldy df_exeoff
eb34 : 88               [ 2] 	dey
eb35 :                       df_rt_local_findesc
eb35 : c8               [ 2] 	iny
                             	; check end of line
eb36 : c47e             [ 3] 	cpy df_eolidx
eb38 : f020             [ 3] 	beq df_rt_local_done
eb3a : c47f             [ 3] 	cpy df_nxtstidx
eb3c : f01c             [ 3] 	beq df_rt_local_done
                             	; find a var
eb3e : b186             [ 5] 	lda (df_currlin),y
eb40 : c911             [ 2] 	cmp #DFTK_VAR
eb42 : d0f1             [ 3] 	bne df_rt_local_findesc
                             	; jump over escape value
eb44 : c8               [ 2] 	iny
                             	; get var slot in A,X
eb45 : b186             [ 5] 	lda (df_currlin),y
eb47 : aa               [ 2] 	tax
eb48 : c8               [ 2] 	iny
eb49 : b186             [ 5] 	lda (df_currlin),y
eb4b : 8488             [ 3] 	sty df_exeoff
                             	; localise this variable
eb4d : 20aff6           [ 6] 	jsr df_rt_proc_local
                             	; increment local counter
eb50 : 68               [ 4] 	pla
eb51 : 18               [ 2] 	clc
eb52 : 6901             [ 2] 	adc #1
eb54 : 48               [ 3] 	pha
eb55 : a488             [ 3] 	ldy df_exeoff
eb57 : 4c35eb           [ 3] 	jmp df_rt_local_findesc
eb5a :                       df_rt_local_done
                             	; get the local counter
                             	; put on to rt stack
eb5a : 68               [ 4] 	pla
eb5b : 4cc3f6           [ 3] 	jmp df_rst_pushByte
                             
                             
eb5e :                       df_rt_dim
eb5e : a488             [ 3] 	ldy df_exeoff
eb60 : 88               [ 2] 	dey
eb61 :                       df_rt_dim_findesc
                             	; check end of line
eb61 : c8               [ 2] 	iny
eb62 : c47e             [ 3] 	cpy df_eolidx
eb64 : f07e             [ 3] 	beq df_rt_dim_done
eb66 : c47f             [ 3] 	cpy df_nxtstidx
eb68 : f07a             [ 3] 	beq df_rt_dim_done
                             	; find a var
eb6a : b186             [ 5] 	lda (df_currlin),y
eb6c : c911             [ 2] 	cmp #DFTK_VAR
eb6e : d0f1             [ 3] 	bne df_rt_dim_findesc
                             	; jump over escape value
eb70 : c8               [ 2] 	iny
                             	; get var address
eb71 : b186             [ 5] 	lda (df_currlin),y
eb73 : 85a1             [ 3] 	sta df_tmpptra
AS65 Assembler for R6502 [1.42].                                     Page  214
-------------------------------- bank\bank0.s --------------------------------

eb75 : c8               [ 2] 	iny
eb76 : b186             [ 5] 	lda (df_currlin),y
eb78 : 85a2             [ 3] 	sta df_tmpptra+1
                             	; move to open bracket
eb7a : c8               [ 2] 	iny
eb7b : 8488             [ 3] 	sty df_exeoff
                             	; check if already dim'd
eb7d : a003             [ 2] 	ldy #DFVVT_DIM1
eb7f : b1a1             [ 5] 	lda (df_tmpptra),y
eb81 : d062             [ 3] 	bne df_rt_dim_err
                             	; Save slot address found earlier
eb83 : a5a1             [ 3] 	lda df_tmpptra
eb85 : 48               [ 3] 	pha
eb86 : a5a2             [ 3] 	lda df_tmpptra+1
eb88 : 48               [ 3] 	pha
eb89 : 2002e2           [ 6] 	jsr df_rt_arry_parm2
                             	; Restore slot address
eb8c : 68               [ 4] 	pla
eb8d : 85a2             [ 3] 	sta df_tmpptra+1
eb8f : 68               [ 4] 	pla
eb90 : 85a1             [ 3] 	sta df_tmpptra
                             ;	bcs df_rt_dim_err
                             	; save x,y to dim1,2
eb92 : 98               [ 2] 	tya
eb93 : 48               [ 3] 	pha
eb94 : 8a               [ 2] 	txa
eb95 : 48               [ 3] 	pha
eb96 : a003             [ 2] 	ldy #DFVVT_DIM1
eb98 : 68               [ 4] 	pla
eb99 : 91a1             [ 5] 	sta (df_tmpptra),y
eb9b : c8               [ 2] 	iny
eb9c : 68               [ 4] 	pla
eb9d : 91a1             [ 5] 	sta (df_tmpptra),y
eb9f :                       df_rt_dim_alloc
                             	; ok we have up to 2 dimensions
                             	; mult dim 1 and 2 if dim 2 <> 0
eb9f : a003             [ 2] 	ldy #DFVVT_DIM1
eba1 : b1a1             [ 5] 	lda (df_tmpptra),y
eba3 : 853d             [ 3] 	sta num_a
eba5 : a900             [ 2] 	lda #0
eba7 : 853e             [ 3] 	sta num_a+1
eba9 : c8               [ 2] 	iny
ebaa : b1a1             [ 5] 	lda (df_tmpptra),y
ebac : d002             [ 3] 	bne df_rt_dim2_nz
ebae : a901             [ 2] 	lda #1
ebb0 :                       df_rt_dim2_nz
ebb0 : 8541             [ 3] 	sta num_b
ebb2 : a900             [ 2] 	lda #0
ebb4 : 8542             [ 3] 	sta num_b+1
ebb6 : 2046d4           [ 6] 	jsr int_fast_mult
                             	; check the type if int then mult2
ebb9 : a200             [ 2] 	ldx #0
ebbb : a1a1             [ 6] 	lda (df_tmpptra,x)
ebbd : 2901             [ 2] 	and #DFVVT_INT
ebbf : f004             [ 3] 	beq df_rt_dim2_mul2
ebc1 : 063d             [ 5] 	asl num_a
ebc3 : 263e             [ 5] 	rol num_a+1
ebc5 :                       df_rt_dim2_mul2
                             	; finally, we have a size of array
ebc5 : a63d             [ 3] 	ldx num_a
ebc7 : a53e             [ 3] 	lda num_a+1
                             
AS65 Assembler for R6502 [1.42].                                     Page  215
-------------------------------- bank\bank0.s --------------------------------

                             	; get a block of that size from heap
ebc9 : 204df7           [ 6] 	jsr df_st_malloc
                             	; save pointer to block in var
ebcc : a002             [ 2] 	ldy #DFVVT_HI
ebce : 91a1             [ 5] 	sta (df_tmpptra),y
ebd0 : 8a               [ 2] 	txa
ebd1 : 88               [ 2] 	dey
ebd2 : 91a1             [ 5] 	sta (df_tmpptra),y
                             	; finally, update the type to indicate array
ebd4 : a200             [ 2] 	ldx #0
ebd6 : a1a1             [ 6] 	lda (df_tmpptra,x)
ebd8 : 0980             [ 2] 	ora #DFVVT_ARRY
ebda : 81a1             [ 6] 	sta (df_tmpptra,x)
                             	; don't increment byte again - go check for more
ebdc : 4c5eeb           [ 3] 	jmp df_rt_dim
ebdf :                       df_rt_dim_next_byte
ebdf : e688             [ 5] 	inc df_exeoff
ebe1 : 4c5eeb           [ 3] 	jmp df_rt_dim
ebe4 :                       df_rt_dim_done
ebe4 : 60               [ 6] 	rts
ebe5 :                       df_rt_dim_err
                             	SWBRK DFERR_DIM
                             
                             
                             
ebe7 :                       df_rt_cls
ebe7 : 4c4ccd           [ 3] 	jmp gr_cls
                             
                             
ebea :                       df_rt_plot
                             	; evaluate the expression
ebea : 206fe0           [ 6] 	jsr df_rt_getnval
                             	; save lo byte
ebed : 8a               [ 2] 	txa
ebee : 48               [ 3] 	pha
                             	; jump over comma
ebef : e688             [ 5] 	inc df_exeoff
                             	; evaluate the expression
ebf1 : 206fe0           [ 6] 	jsr df_rt_getnval
                             	; save lo byte
ebf4 : 8a               [ 2] 	txa
ebf5 : 48               [ 3] 	pha
                             	; jump over comma
ebf6 : e688             [ 5] 	inc df_exeoff
                             	; evaluate the expression
ebf8 : 2075e0           [ 6] 	jsr df_rt_neval
                             	; check the type on the stack
ebfb : 203bf7           [ 6] 	jsr df_ost_peekType
                             	; if >=0x80 then a pointer / string
ebfe : c980             [ 2] 	cmp #0x80
ec00 : b01b             [ 3] 	bcs df_rt_plotstr
                             	; else it is int
ec02 : 2041f7           [ 6] 	jsr df_ost_popInt
                             	; save  low byte of pop result in a temp
ec05 : 86a1             [ 3] 	stx df_tmpptra
ec07 : a511             [ 3] 	lda gr_scrngeom+gr_mode			; Check screen mode
ec09 : d009             [ 3] 	bne df_rt_plot_h_int
                             	; get X and Y coord in that order
                             	; but Y coord goes in X register!!!
ec0b : 68               [ 4] 	pla
ec0c : aa               [ 2] 	tax
ec0d : 68               [ 4] 	pla
AS65 Assembler for R6502 [1.42].                                     Page  216
-------------------------------- bank\bank0.s --------------------------------

ec0e : a8               [ 2] 	tay
ec0f : a5a1             [ 3] 	lda df_tmpptra	; Get pop result in to A
ec11 : 4ca2cd           [ 3] 	jmp gr_plot
ec14 :                       df_rt_plot_h_int
ec14 : 68               [ 4] 	pla
ec15 : a8               [ 2] 	tay
ec16 : 68               [ 4] 	pla
ec17 : aa               [ 2] 	tax
ec18 : a5a1             [ 3] 	lda df_tmpptra	; Get pop result in to A
ec1a : 4c4bcf           [ 3] 	jmp gr_hchar
                             
                             
ec1d :                       df_rt_plotstr
                             	; pop string pointer
ec1d : 2049f7           [ 6] 	jsr df_ost_popPtr
                             	; save pointer to tmpa
ec20 : 86a1             [ 3] 	stx df_tmpptra
ec22 : 85a2             [ 3] 	sta df_tmpptra+1
                             	; get y and x in that order
                             	; but X register is Y coord!!
ec24 : 68               [ 4] 	pla
ec25 : 85a5             [ 3] 	sta df_tmpptrc			; Y coord in C
ec27 : 68               [ 4] 	pla
ec28 : 85a3             [ 3] 	sta df_tmpptrb			; X coord in B
                             	; set cursror position
ec2a : a000             [ 2] 	ldy #0
ec2c : 84a9             [ 3] 	sty df_tmpptre
ec2e :                       df_rt_plotstrch
ec2e : a4a9             [ 3] 	ldy df_tmpptre
ec30 : b1a1             [ 5] 	lda (df_tmpptra),y
ec32 : 85a7             [ 3] 	sta df_tmpptrd			; char in D
ec34 : c900             [ 2] 	cmp #0
ec36 : f025             [ 3] 	beq df_rt_plotstrdone
ec38 : e6a9             [ 5] 	inc df_tmpptre
ec3a : a511             [ 3] 	lda gr_scrngeom+gr_mode; Check screen mode
ec3c : d00d             [ 3] 	bne df_rt_plot_h_str
ec3e : a5a7             [ 3] 	lda df_tmpptrd			; Get char to plot
ec40 : a6a5             [ 3] 	ldx df_tmpptrc			; Get Y coord
ec42 : a4a3             [ 3] 	ldy df_tmpptrb			; Get X coord
ec44 : 20a2cd           [ 6] 	jsr gr_plot
ec47 : e6a3             [ 5] 	inc df_tmpptrb			; Increment X coord
ec49 : d0e3             [ 3] 	bne df_rt_plotstrch		; Always - assume x is neve
ec4b :                       df_rt_plot_h_str
ec4b : a5a7             [ 3] 	lda df_tmpptrd			; Get char to plot
ec4d : a6a3             [ 3] 	ldx df_tmpptrb			; Get X coord
ec4f : a4a5             [ 3] 	ldy df_tmpptrc			; Get Y coord
ec51 : 204bcf           [ 6] 	jsr gr_hchar
ec54 : 18               [ 2] 	clc
ec55 : a5a3             [ 3] 	lda df_tmpptrb
ec57 : 6521             [ 3] 	adc gr_scrngeom+gr_pitch
ec59 : 85a3             [ 3] 	sta df_tmpptrb
ec5b : d0d1             [ 3] 	bne df_rt_plotstrch		; Always - assume adding pi
ec5d :                       df_rt_plotstrdone
ec5d : 60               [ 6] 	rts
                             
ec5e :                       df_rt_cursor
                             	; evaluate the expression
ec5e : 206fe0           [ 6] 	jsr df_rt_getnval
                             	; write low byte of vdp_curoff
                             	; by writing a zero then cursor on else not
ec61 : 860d             [ 3] 	stx vdp_curoff
ec63 : 60               [ 6] 	rts
AS65 Assembler for R6502 [1.42].                                     Page  217
-------------------------------- bank\bank0.s --------------------------------

                             
ec64 :                       df_rt_himem
                             	; evaluate the expression
ec64 : 206fe0           [ 6] 	jsr df_rt_getnval
                             	; write X,A to df_memtop
ec67 : 8e1106           [ 4] 	stx df_memtop
ec6a : 8d1206           [ 4] 	sta df_memtop+1
                             	; now clear everything down
ec6d : 4c73f7           [ 3] 	jmp df_clear
                             
ec70 :                       df_rt_text
ec70 : 4cb4cc           [ 3] 	jmp gr_init_screen_txt
                             
ec73 :                       df_rt_hires
ec73 : 4ccdcc           [ 3] 	jmp gr_init_hires
                             
ec76 :                       df_rt_pixmode
                             	; evaluate the expression X = mode
ec76 : 206fe0           [ 6] 	jsr df_rt_getnval
ec79 : 8620             [ 3] 	stx gr_scrngeom+gr_pixmode
ec7b : 60               [ 6] 	rts
                             
ec7c :                       df_rt_ink
                             	; evaluate the expression X = col
ec7c : 206fe0           [ 6] 	jsr df_rt_getnval
ec7f : 8624             [ 3] 	stx gr_scrngeom+gr_ink
ec81 : 60               [ 6] 	rts
                             
ec82 :                       df_rt_paper
                             	; evaluate the expression X = col
ec82 : 206fe0           [ 6] 	jsr df_rt_getnval
                             	; Add 16 to get paper colour
ec85 : 8a               [ 2] 	txa
ec86 : 18               [ 2] 	clc
ec87 : 6910             [ 2] 	adc #16
ec89 : 8525             [ 3] 	sta gr_scrngeom+gr_paper
ec8b : 60               [ 6] 	rts
                             
ec8c :                       df_rt_point
ec8c : 2051e3           [ 6] 	jsr df_rt_parm_2ints
ec8f : a6a1             [ 3] 	ldx df_tmpptra
ec91 : a4a3             [ 3] 	ldy df_tmpptrb
ec93 : 4c11d0           [ 3] 	jmp gr_point
                             
ec96 :                       df_rt_circle
ec96 : 2068e3           [ 6] 	jsr df_rt_parm_3ints
ec99 : a5a1             [ 3] 	lda df_tmpptra				; load x0
ec9b : 853d             [ 3] 	sta num_a
ec9d : a5a3             [ 3] 	lda	df_tmpptrb				; load y0
ec9f : 853e             [ 3] 	sta num_a+1
eca1 : a5a5             [ 3] 	lda df_tmpptrc				; load r
eca3 : 853f             [ 3] 	sta num_a+2
eca5 : 4c3ed0           [ 3] 	jmp gr_circle
                             
eca8 :                       df_rt_lineto
eca8 : 2051e3           [ 6] 	jsr df_rt_parm_2ints
ecab : a6a1             [ 3] 	ldx df_tmpptra				; load x1
ecad : a4a3             [ 3] 	ldy df_tmpptrb				; load y1
ecaf :                       df_rt_doline
ecaf : 863f             [ 3] 	stx num_a+2
ecb1 : 8440             [ 3] 	sty num_a+3
ecb3 : 4cf4d0           [ 3] 	jmp gr_line
AS65 Assembler for R6502 [1.42].                                     Page  218
-------------------------------- bank\bank0.s --------------------------------

ecb6 :                       df_rt_line
ecb6 : 208be3           [ 6] 	jsr df_rt_parm_4ints
ecb9 : a6a1             [ 3] 	ldx df_tmpptra				; load x0
ecbb : a4a3             [ 3] 	ldy	df_tmpptrb				; load y0
ecbd : 2004d0           [ 6] 	jsr gr_set_hires_cur		; Start from x,y
ecc0 : a6a5             [ 3] 	ldx df_tmpptrc				; load x1
ecc2 : a4a7             [ 3] 	ldy df_tmpptrd				; load y1
ecc4 : 4cafec           [ 3] 	jmp df_rt_doline
                             
ecc7 :                       df_rt_wait
                             	; evaluate the expression
ecc7 : 206fe0           [ 6] 	jsr df_rt_getnval
                             	; put high byte in to Y (X,Y)=16 bits
ecca : a8               [ 2] 	tay
eccb :                       df_rt_wait_counter
                             	; get vdp low byte timer val in A
eccb : a508             [ 3] 	lda vdp_cnt
eccd :                       df_rt_wait_tick
                             	; check if a tick has occurred (i.e. val <> A)
eccd : c508             [ 3] 	cmp vdp_cnt
eccf : f0fc             [ 3] 	beq df_rt_wait_tick
                             	; countdown tick
ecd1 : ca               [ 2] 	dex
ecd2 : e0ff             [ 2] 	cpx #0xff
ecd4 : d001             [ 3] 	bne df_rt_wait_skiphi
ecd6 : 88               [ 2] 	dey
ecd7 :                       df_rt_wait_skiphi
ecd7 : e000             [ 2] 	cpx #0
ecd9 : d0f0             [ 3] 	bne df_rt_wait_counter
ecdb : c000             [ 2] 	cpy #0
ecdd : d0ec             [ 3] 	bne df_rt_wait_counter
ecdf : 60               [ 6] 	rts
                             
ece0 :                       df_rt_printat
                             	; Get x,y
ece0 : 2051e3           [ 6] 	jsr df_rt_parm_2ints
ece3 : a6a1             [ 3] 	ldx df_tmpptra
ece5 : a4a3             [ 3] 	ldy df_tmpptrb
                             	; Set the cursror here
ece7 : 20bbcd           [ 6] 	jsr gr_set_cur
                             	; and continue to normal print command
ecea :                       df_rt_print
ecea : a488             [ 3] 	ldy df_exeoff
ecec : 88               [ 2] 	dey
eced :                       df_rt_print_ws
eced : c8               [ 2] 	iny
                             
                             	; evaluate an expression
ecee : c47e             [ 3] 	cpy df_eolidx
ecf0 : f032             [ 4] 	beq df_rt_print_done
ecf2 : c47f             [ 3] 	cpy df_nxtstidx
ecf4 : f02e             [ 4] 	beq df_rt_print_done
ecf6 : b186             [ 5] 	lda (df_currlin),y
ecf8 : c93a             [ 2] 	cmp #':'
ecfa : f028             [ 4] 	beq df_rt_print_done
ecfc : c920             [ 2] 	cmp #' '
ecfe : f0ed             [ 3] 	beq df_rt_print_ws
ed00 : c92c             [ 2] 	cmp #','
ed02 : f0e9             [ 4] 	beq df_rt_print_ws
                             	; save index
ed04 : 8488             [ 3] 	sty df_exeoff
                             
AS65 Assembler for R6502 [1.42].                                     Page  219
-------------------------------- bank\bank0.s --------------------------------

                             	; if starts with string literal then process sev
ed06 : c910             [ 2] 	cmp #DFTK_STRLIT
ed08 : f014             [ 3] 	beq df_rt_print_string
                             	; else evaluate a numeric
ed0a : 2075e0           [ 6] 	jsr df_rt_neval
                             	; check what is on the argument stack
ed0d : 203bf7           [ 6] 	jsr df_ost_peekType
ed10 : 3006             [ 3] 	bmi df_rt_print_gotstr
ed12 : 201aea           [ 6] 	jsr df_rt_print_num
ed15 : 4ceaec           [ 3] 	jmp df_rt_print
ed18 :                       df_rt_print_gotstr
ed18 : 2021ea           [ 6] 	jsr df_rt_print_str
ed1b : 4ceaec           [ 3] 	jmp df_rt_print
ed1e :                       df_rt_print_string
ed1e : 2031e1           [ 6] 	jsr df_rt_seval
ed21 : 4c18ed           [ 3] 	jmp df_rt_print_gotstr
ed24 :                       df_rt_print_done
ed24 : 8488             [ 3] 	sty df_exeoff
ed26 : 60               [ 6] 	rts
                             
ed27 :                       df_rt_println
ed27 : 20eaec           [ 6] 	jsr df_rt_print
ed2a : a90d             [ 2] 	lda #UTF_CR
ed2c : 4c3ec4           [ 3] 	jmp io_put_ch
                             
                             
                             ; assign to a number variable
                             ; X,A must have lvar
ed2f :                       df_rt_nassign
                             	; push var address, A ok to trample
ed2f : 48               [ 3] 	pha
ed30 : 8a               [ 2] 	txa
ed31 : 48               [ 3] 	pha
                             
                             	; now go evaluate expression in to A,X
ed32 : 206fe0           [ 6] 	jsr df_rt_getnval
                             	; restore variable address to write to to df_tmp
                             	; but don't lose current A
ed35 : a8               [ 2] 	tay					; Save A in Y
ed36 : 68               [ 4] 	pla
ed37 : 85a1             [ 3] 	sta df_tmpptra
ed39 : 68               [ 4] 	pla
ed3a : 85a2             [ 3] 	sta df_tmpptra+1
ed3c : 98               [ 2] 	tya					; Get A back from Y
                             
                             	; save X,A int in contents section
ed3d : a001             [ 2] 	ldy #1
ed3f : 91a1             [ 5] 	sta (df_tmpptra),y
ed41 : 8a               [ 2] 	txa
ed42 : 88               [ 2] 	dey
ed43 : 91a1             [ 5] 	sta (df_tmpptra),y
                             
ed45 : 60               [ 6] 	rts
                             
                             ; assign to a string variable
                             ; X,A must have lvar
ed46 :                       df_rt_sassign
                             	; now go evaluate expression
                             	; with the destination being already in X,A
ed46 : 2035e1           [ 6] 	jsr df_rt_sval
                             
                             	; get string pointer from top of runtime stack
AS65 Assembler for R6502 [1.42].                                     Page  220
-------------------------------- bank\bank0.s --------------------------------

ed49 : 4c45f7           [ 3] 	jmp df_ost_popStr
                             
                             
                             ; generate lvar from a var token ready for assign
ed4c :                       df_rt_generate_lvar
                             	; move past escape val
ed4c : a488             [ 3] 	ldy df_exeoff
ed4e : c8               [ 2] 	iny
                             	; pointing to variable index
ed4f : b186             [ 5] 	lda (df_currlin),y
ed51 : 85a1             [ 3] 	sta df_tmpptra
ed53 : c8               [ 2] 	iny
ed54 : b186             [ 5] 	lda (df_currlin),y
ed56 : 8488             [ 3] 	sty df_exeoff
ed58 : 85a2             [ 3] 	sta df_tmpptra+1
                             
                             	; get the type and save
ed5a : a200             [ 2] 	ldx #0
ed5c : a1a1             [ 6] 	lda (df_tmpptra,x)
ed5e : 48               [ 3] 	pha
                             
                             	; set carry flag to return pointer (lvar)
ed5f : 38               [ 2] 	sec
ed60 : 2026e2           [ 6] 	jsr df_rt_eval_var
ed63 : 2049f7           [ 6] 	jsr df_ost_popPtr
                             
                             	; pull the type previously saved into Y
ed66 : 8538             [ 3] 	sta tmp_d		; Save A
ed68 : 68               [ 4] 	pla
ed69 : a8               [ 2] 	tay
ed6a : a538             [ 3] 	lda tmp_d
                             	; move past the lvar variable index
ed6c : e688             [ 5] 	inc df_exeoff
ed6e : 60               [ 6] 	rts
                             
                             ; general assignment execution
                             ; generate lvar first
ed6f :                       df_rt_assign
ed6f : 204ced           [ 6] 	jsr df_rt_generate_lvar
                             ; X,A,Y contain lvar pointer and type
ed72 :                       df_rt_doassign
                             	; save A and put type Y in to A to check for str
ed72 : 48               [ 3] 	pha
ed73 : 98               [ 2] 	tya
ed74 : 2904             [ 2] 	and #DFVVT_STR
                             	; if a string then string expression
ed76 : d004             [ 3] 	bne df_rt_assign_str
                             	;  jump to numeric expression evaluator
                             	; remember to restore A
ed78 : 68               [ 4] 	pla
ed79 : 4c2fed           [ 3] 	jmp df_rt_nassign
ed7c :                       df_rt_assign_str
                             	; else jump to string expression evaluator
                             	; remember to restore A
ed7c : 68               [ 4] 	pla
ed7d : 4c46ed           [ 3] 	jmp df_rt_sassign
                             
                             ; comment or data token is ignored by runtime
ed80 :                       df_rt_comment
ed80 :                       df_rt_data
ed80 : 60               [ 6] 	rts
                             
AS65 Assembler for R6502 [1.42].                                     Page  221
-------------------------------- bank\bank0.s --------------------------------

                             
                             ; run token - future expansion
ed81 :                       df_rt_run
ed81 : 60               [ 6] 	rts
                             
                             ; end of line / statement indicator
                             ; CS = End, CC = not end
ed82 :                       df_rt_eos
ed82 : a488             [ 3] 	ldy df_exeoff
ed84 : c47e             [ 3] 	cpy df_eolidx
ed86 : f00c             [ 3] 	beq df_rt_eos_true
ed88 : b186             [ 5] 	lda (df_currlin),y
ed8a : c93a             [ 2] 	cmp #':'
ed8c : f006             [ 3] 	beq df_rt_eos_true
ed8e : c47f             [ 3] 	cpy df_nxtstidx
ed90 : f002             [ 3] 	beq df_rt_eos_true
ed92 : 18               [ 2] 	clc
ed93 : 60               [ 6] 	rts
ed94 :                       df_rt_eos_true
ed94 : 38               [ 2] 	sec
ed95 : 60               [ 6] 	rts
                             
                             ; renum startLine,newStart,increment
                             ; renumbers from the first matching line to end o
ed96 :                       df_rt_renum
ed96 : e688             [ 5] 	inc df_exeoff
ed98 : 2068e3           [ 6] 	jsr df_rt_parm_3ints
                             	; starting line number
ed9b : a6a1             [ 3] 	ldx df_tmpptra
ed9d : a5a2             [ 3] 	lda df_tmpptra+1
ed9f : 2072de           [ 6] 	jsr df_pg_find_line
eda2 : 9002             [ 3] 	bcc df_rt_renum_ok
                             	SWBRK DFERR_NOLINE
                             
eda6 :                       df_rt_renum_ok
                             	; save starting position pointer in ptrd
eda6 : 86a7             [ 3] 	stx df_tmpptrd
eda8 : 85a8             [ 3] 	sta df_tmpptrd+1
edaa :                       df_rt_renum_do
                             	; if not end of program
edaa : a000             [ 2] 	ldy #0
edac : b1a7             [ 5] 	lda (df_tmpptrd),y
                             	; then renumber this line
edae : d001             [ 3] 	bne df_rt_renum_update
                             	; else done
edb0 : 60               [ 6] 	rts
edb1 :                       df_rt_renum_update
                             	; so set this line number to new line number
edb1 : a001             [ 2] 	ldy #DFTK_LINNUM
edb3 : a5a3             [ 3] 	lda df_tmpptrb
edb5 : 91a7             [ 5] 	sta (df_tmpptrd),y
edb7 : c8               [ 2] 	iny
edb8 : a5a4             [ 3] 	lda df_tmpptrb+1
edba : 91a7             [ 5] 	sta (df_tmpptrd),y
                             	; add increment to new line
                             	_addZPWord df_tmpptrb,df_tmpptrc
                             
edc9 :                       df_rt_renum_next
                             	; point ptrd to the next line
edc9 : 18               [ 2] 	clc
edca : a5a7             [ 3] 	lda df_tmpptrd
edcc : a200             [ 2] 	ldx #0
AS65 Assembler for R6502 [1.42].                                     Page  222
-------------------------------- bank\bank0.s --------------------------------

edce : 61a7             [ 6] 	adc (df_tmpptrd,x)
edd0 : 85a7             [ 3] 	sta df_tmpptrd
edd2 : a5a8             [ 3] 	lda df_tmpptrd+1
edd4 : 6900             [ 2] 	adc #0
edd6 : 85a8             [ 3] 	sta df_tmpptrd+1
edd8 : 4caaed           [ 3] 	jmp df_rt_renum_do
                             
                             
                             ; * List all procs in VNT
eddb :                       df_rt_listprocnames
                             	; start at the beginning of the vnt table
                             	_cpyZPWord df_vntstrt,df_tmpptra
                             
                             	; start at varcnt
ede3 : a571             [ 3] 	lda df_varcnt
ede5 : 85a3             [ 3] 	sta df_tmpptrb
ede7 :                       df_rt_listcheckvnt
                             	; If reached 0 then not found
ede7 : a5a3             [ 3] 	lda df_tmpptrb
ede9 : f03d             [ 4] 	beq df_rt_listpn_done
edeb : a000             [ 2] 	ldy #0
eded : b1a1             [ 5] 	lda (df_tmpptra),y
edef : c95f             [ 2] 	cmp #'_'
edf1 : d01c             [ 4] 	bne df_rt_listnextvnt
edf3 :                       df_rt_listprocch
edf3 : b1a1             [ 5] 	lda (df_tmpptra),y
edf5 : 203ec4           [ 6] 	jsr io_put_ch
edf8 : c900             [ 2] 	cmp #0
edfa : f003             [ 3] 	beq df_rt_listproccr
edfc : c8               [ 2] 	iny
edfd : d0f4             [ 3] 	bne df_rt_listprocch		; Always
edff :                       df_rt_listproccr
edff : a90d             [ 2] 	lda #UTF_CR
ee01 : 203ec4           [ 6] 	jsr io_put_ch
ee04 : 18               [ 2] 	clc
ee05 :                       df_rt_listprocpause
ee05 : 203bc4           [ 6] 	jsr io_get_ch
ee08 : c920             [ 2] 	cmp #' '
ee0a : d003             [ 3] 	bne df_rt_listnextvnt
ee0c :                       df_rt_listwait
ee0c : 38               [ 2] 	sec
ee0d : b0f6             [ 3] 	bcs df_rt_listprocpause
ee0f :                       df_rt_listnextvnt
ee0f : b1a1             [ 5] 	lda (df_tmpptra),y
ee11 : f003             [ 3] 	beq df_rt_listgotnext
ee13 : c8               [ 2] 	iny
ee14 : d0f9             [ 3] 	bne df_rt_listnextvnt		; Always
ee16 :                       df_rt_listgotnext
                             	; dec vnt #
ee16 : c6a3             [ 5] 	dec df_tmpptrb
                             	; skip past zero terminator
ee18 : c8               [ 2] 	iny
                             	; add this to vnt pointer
ee19 : 18               [ 2] 	clc
ee1a : 98               [ 2] 	tya
ee1b : 65a1             [ 3] 	adc df_tmpptra
ee1d : 85a1             [ 3] 	sta df_tmpptra
ee1f : a5a2             [ 3] 	lda df_tmpptra+1
ee21 : 6900             [ 2] 	adc #0
ee23 : 85a2             [ 3] 	sta df_tmpptra+1
ee25 : 4ce7ed           [ 3] 	jmp df_rt_listcheckvnt
ee28 :                       df_rt_listpn_done
AS65 Assembler for R6502 [1.42].                                     Page  223
-------------------------------- bank\bank0.s --------------------------------

ee28 : 60               [ 6] 	rts
                             
ee29 :                       df_rt_listproc
                             	; A already contains '_'
ee29 : 8d0004           [ 4] 	sta df_linbuff
ee2c : a200             [ 2] 	ldx #0
ee2e : a488             [ 3] 	ldy df_exeoff
ee30 :                       df_rt_listp_copy
ee30 : c8               [ 2] 	iny
ee31 : e8               [ 2] 	inx
ee32 : b186             [ 5] 	lda (df_currlin),y
ee34 : 9d0004           [ 5] 	sta df_linbuff,x
ee37 : 2004d7           [ 6] 	jsr df_tk_isalphanum
ee3a : b0f4             [ 3] 	bcs df_rt_listp_copy
                             	; zero the line index
ee3c : a200             [ 2] 	ldx #0
ee3e : 867c             [ 3] 	stx df_linoff
                             	; save runtime pos
ee40 : 8488             [ 3] 	sty df_exeoff
                             	; Now try and find in VNT
ee42 : 20fdd4           [ 6] 	jsr df_var_find
ee45 : b038             [ 3] 	bcs df_rt_listp_notfound
                             	; Ok we have got a match in X,A find the proc
ee47 : 868e             [ 3] 	stx df_procptr
ee49 : 858f             [ 3] 	sta df_procptr+1
ee4b : 20e0e4           [ 6] 	jsr df_rt_findproc
                             	; Save the line pointer
ee4e : 86a1             [ 3] 	stx df_tmpptra
ee50 : 85a2             [ 3] 	sta df_tmpptra+1
                             	; save statement index in to line
ee52 : 8492             [ 3] 	sty df_lineidx
                             ;	; Check if '-' option used
                             ;	ldy df_exeoff
                             ;	lda (df_currlin),y
                             ;	cmp #'-'
                             ;	; if so, list to end of program
                             ;	beq df_rt_listprgend
                             	; Now try and find the end of this procedure
                             	; enddef or another def
                             	; A,X=Line ptr, Y=line idx
                             ;	ldx df_tmpptra
                             ;	lda df_tmpptra+1
                             ;	ldy df_lineidx
ee54 :                       df_rt_listp_findend
                             	; Go to next stat
ee54 : 2089e4           [ 6] 	jsr df_rt_nextstat
ee57 : b057             [ 3] 	bcs df_rt_listprgend
                             	; save y (a,x in lineptr), A is ok to trample
ee59 : 98               [ 2] 	tya
ee5a : 48               [ 3] 	pha
                             	; find the command
ee5b :                       df_rt_listp_findcmd
ee5b : c8               [ 2] 	iny
ee5c : b190             [ 5] 	lda (df_lineptr),y
ee5e : 10fb             [ 3] 	bpl df_rt_listp_findcmd
                             	; restore y to stat beginning
ee60 : 8538             [ 3] 	sta tmp_d
ee62 : 68               [ 4] 	pla
ee63 : a8               [ 2] 	tay
ee64 : a538             [ 3] 	lda tmp_d
                             	; check A - looking for enddef or def
ee66 : c987             [ 2] 	cmp #DFRT_ENDDEF
AS65 Assembler for R6502 [1.42].                                     Page  224
-------------------------------- bank\bank0.s --------------------------------

ee68 : f00b             [ 3] 	beq df_rt_listp_done
ee6a : c986             [ 2] 	cmp #DFRT_DEF
ee6c : f007             [ 3] 	beq df_rt_listp_done
                             	; if neither then next stat from current
ee6e : a690             [ 3] 	ldx df_lineptr
ee70 : a591             [ 3] 	lda df_lineptr+1
ee72 : 4c54ee           [ 3] 	jmp df_rt_listp_findend
ee75 :                       df_rt_listp_done
                             	; Push end line on to stack
ee75 : a591             [ 3] 	lda df_lineptr+1
ee77 : 48               [ 3] 	pha
ee78 : 8a               [ 2] 	txa
ee79 : 48               [ 3] 	pha
ee7a : a591             [ 3] 	lda df_lineptr+1
ee7c : 4cb6ee           [ 3] 	jmp df_rt_list_line
ee7f :                       df_rt_listp_notfound
                             	; Fatal error if proc not found
                             	SWBRK DFERR_NOPROC
                             
                             
                             ; list token
ee81 :                       df_rt_list
ee81 : a900             [ 2] 	lda #0
ee83 : 85a9             [ 3] 	sta df_tmpptre		; Zero means in normal list mode
                             	; find non-ws
ee85 : 2035e5           [ 6] 	jsr df_rt_skip_ws
                             	; if end of statement then no line specifiers
ee88 : 2082ed           [ 6] 	jsr df_rt_eos
                             	; so list whole program
ee8b : b01b             [ 3] 	bcs df_rt_listprg
                             
                             	;if '_' then use procnames
ee8d : c95f             [ 2] 	cmp #'_'
ee8f : d003             [ 3] 	bne df_rt_list_all
ee91 : 4c29ee           [ 3] 	jmp df_rt_listproc
ee94 :                       df_rt_list_all
                             	;if '*' then display all procnames
ee94 : c92a             [ 2] 	cmp #'*'
ee96 : d003             [ 3] 	bne df_rt_list_linno
ee98 : 4cdbed           [ 3] 	jmp df_rt_listprocnames
ee9b :                       df_rt_list_linno
                             	; else get 1st parameter
ee9b : 206fe0           [ 6] 	jsr df_rt_getnval
                             	; find the starting line number in X,A
ee9e : 2072de           [ 6] 	jsr df_pg_find_line
                             	; save start in ptra
eea1 : 86a1             [ 3] 	stx df_tmpptra
eea3 : 85a2             [ 3] 	sta df_tmpptra+1
eea5 : 4cb0ee           [ 3] 	jmp df_rt_listprgend
                             	; NO ability to choose and ending line number!
                             
                             ; Common listing routine used by LIST and SAVE
                             ; tmpe = 0 means in LIST mode else SAVE mode
                             ; can stop the listing in LIST mode with CTRL-C
eea8 :                       df_rt_listprg
                             	; program start and end as for pointer value
                             	_cpyZPWord df_prgstrt, df_tmpptra
                             
eeb0 :                       df_rt_listprgend
eeb0 : a568             [ 3] 	lda df_prgend+1
eeb2 : 48               [ 3] 	pha
eeb3 : a567             [ 3] 	lda df_prgend
AS65 Assembler for R6502 [1.42].                                     Page  225
-------------------------------- bank\bank0.s --------------------------------

eeb5 : 48               [ 3] 	pha
eeb6 :                       df_rt_list_line
                             	; if line length = 0 then end of program
eeb6 : a000             [ 2] 	ldy #0
eeb8 : b1a1             [ 5] 	lda (df_tmpptra),y
eeba : f03a             [ 3] 	beq df_rt_list_line_fin
                             	; if in list mode and CTRL-C then also stop
eebc : a5a9             [ 3] 	lda df_tmpptre
eebe : d010             [ 3] 	bne df_rt_list_line_cont
                             	; check for break, asynch get
eec0 : 18               [ 2] 	clc
eec1 :                       df_rt_list_synckey
eec1 : a5a9             [ 3] 	lda df_tmpptre					; Ignore keys on save mode
eec3 : d00b             [ 3] 	bne df_rt_list_line_cont
eec5 :                       df_rt_list_pause
eec5 : 203bc4           [ 6] 	jsr io_get_ch
eec8 : c920             [ 2] 	cmp #' '						; Space = PAUSE
eeca : f0f9             [ 3] 	beq df_rt_list_pause			; C=1 for synchronouse ke
eecc : c903             [ 2] 	cmp #UTF_ETX					; CTRL-C?
eece : f026             [ 3] 	beq df_rt_list_line_fin
eed0 :                       df_rt_list_line_cont
eed0 : a000             [ 2] 	ldy #0
eed2 : 8488             [ 3] 	sty df_exeoff
eed4 : 20f9ee           [ 6] 	jsr df_rt_list_all_line
eed7 :                       df_rt_list_next_line
                             	; new line
eed7 : 2060c1           [ 6] 	jsr utilPrintCRLF
                             	; increment pointer to next line
eeda : 18               [ 2] 	clc
eedb : a5a1             [ 3] 	lda df_tmpptra
eedd : a000             [ 2] 	ldy #0
eedf : 71a1             [ 5] 	adc (df_tmpptra),y
eee1 : 85a1             [ 3] 	sta df_tmpptra
eee3 : a5a2             [ 3] 	lda df_tmpptra+1
eee5 : 6900             [ 2] 	adc #0
eee7 : 85a2             [ 3] 	sta df_tmpptra+1
                             	; if pointer > end then listing is done
eee9 : 38               [ 2] 	sec
eeea : 68               [ 4] 	pla
eeeb : aa               [ 2] 	tax
eeec : e5a1             [ 3] 	sbc df_tmpptra
eeee : 68               [ 4] 	pla
eeef : 48               [ 3] 	pha
eef0 : e5a2             [ 3] 	sbc df_tmpptra+1
eef2 : 8a               [ 2] 	txa
eef3 : 48               [ 3] 	pha
eef4 : b0c0             [ 3] 	bcs df_rt_list_line
eef6 :                       df_rt_list_line_fin
                             	; if got here then reached tmpb
eef6 : 68               [ 4] 	pla
eef7 : 68               [ 4] 	pla
eef8 :                       df_rt_list_line_only_fin
eef8 : 60               [ 6] 	rts
                             
                             ;Using df_tmpptra as line pointer
                             ;Print decode an entire line
eef9 :                       df_rt_list_all_line				; Start here to include nu
eef9 : 2036f0           [ 6] 	jsr df_rt_list_linnum
eefc :                       df_rt_list_line_only			; Start here for just the 
eefc : a003             [ 2] 	ldy #3
eefe : b1a1             [ 5] 	lda (df_tmpptra),y
ef00 : 857f             [ 3] 	sta df_nxtstidx
AS65 Assembler for R6502 [1.42].                                     Page  226
-------------------------------- bank\bank0.s --------------------------------

ef02 : c8               [ 2] 	iny
ef03 : 8488             [ 3] 	sty df_exeoff
ef05 :                       df_rt_list_decode
ef05 : a488             [ 3] 	ldy df_exeoff
ef07 : b1a1             [ 5] 	lda (df_tmpptra),y
ef09 : 3010             [ 3] 	bmi df_rt_list_token
ef0b : c920             [ 2] 	cmp #DFTK_ESCVAL
ef0d : 9006             [ 3] 	bcc df_rt_list_escval
                             	; normal char just print it
ef0f : 203ec4           [ 6] 	jsr io_put_ch
ef12 : 4c1eef           [ 3] 	jmp df_rt_list_nexttok
ef15 :                       df_rt_list_escval
                             	; A and Y need to be valid on entry
ef15 : 2037ef           [ 6] 	jsr df_rt_list_decode_esc
ef18 : 4c1eef           [ 3] 	jmp df_rt_list_nexttok
ef1b :                       df_rt_list_token
ef1b : 2043f0           [ 6] 	jsr df_rt_list_decode_token
ef1e :                       df_rt_list_nexttok
                             	; advance the line offset
ef1e : e688             [ 5] 	inc df_exeoff
ef20 : a588             [ 3] 	lda df_exeoff
                             	; check if at end of line
ef22 : a200             [ 2] 	ldx #0
ef24 : c1a1             [ 6] 	cmp (df_tmpptra,x)
ef26 : f0d0             [ 4] 	beq df_rt_list_line_only_fin
                             	; check if at end of statement
ef28 : c57f             [ 3] 	cmp df_nxtstidx
ef2a : d0d9             [ 3] 	bne df_rt_list_decode
ef2c : a8               [ 2] 	tay
                             	; save the next statement offset
ef2d : b1a1             [ 5] 	lda (df_tmpptra),y
ef2f : 857f             [ 3] 	sta df_nxtstidx
ef31 : c8               [ 2] 	iny
ef32 : 8488             [ 3] 	sty df_exeoff
ef34 : 4c05ef           [ 3] 	jmp df_rt_list_decode
                             
                             
                             ; decode escape sequences
                             ; Input: A contains the esc val and Y is char lin
ef37 :                       df_rt_list_decode_esc
                             	; jump over esc byte
ef37 : c8               [ 2] 	iny
ef38 : 8488             [ 3] 	sty df_exeoff
ef3a : 48               [ 3] 	pha
                             	; get the next two bytes in case needed
ef3b : b1a1             [ 5] 	lda (df_tmpptra),y
ef3d : 85a3             [ 3] 	sta df_tmpptrb
ef3f : c8               [ 2] 	iny
ef40 : b1a1             [ 5] 	lda (df_tmpptra),y
ef42 : 85a4             [ 3] 	sta df_tmpptrb+1
ef44 : 88               [ 2] 	dey				; Y is on byte after esc byte
ef45 : 68               [ 4] 	pla
                             	; x2 to get jmp offset
ef46 : 0a               [ 2] 	asl a
ef47 : aa               [ 2] 	tax
ef48 : bd29e6           [ 4] 	lda df_rt_escjmp,x
ef4b : 85a5             [ 3] 	sta df_tmpptrc
ef4d : bd2ae6           [ 4] 	lda df_rt_escjmp+1,x
ef50 : 85a6             [ 3] 	sta df_tmpptrc+1
                             	; now jump to decoder
ef52 : 6ca500           [ 6] 	jmp (df_tmpptrc)
                             
AS65 Assembler for R6502 [1.42].                                     Page  227
-------------------------------- bank\bank0.s --------------------------------

                             ; reserved
ef55 :                       df_rt_lst_reserved
ef55 : 60               [ 6] 	rts
                             
                             ; decode a byte char
ef56 :                       df_rt_lst_chr
ef56 : a927             [ 2] 	lda #0x27			; Single quote
ef58 : 203ec4           [ 6] 	jsr io_put_ch
ef5b : a5a3             [ 3] 	lda df_tmpptrb
ef5d : 203ec4           [ 6] 	jsr io_put_ch
ef60 : a927             [ 2] 	lda #0x27			; Single quote
ef62 : 203ec4           [ 6] 	jsr io_put_ch
ef65 : c8               [ 2] 	iny
ef66 : 8488             [ 3] 	sty df_exeoff
ef68 : 60               [ 6] 	rts
                             
                             ; Output 0x for hex chars
ef69 :                       df_rt_lst_hex_pre
ef69 : a930             [ 2] 	lda #'0'
ef6b : 203ec4           [ 6] 	jsr io_put_ch
ef6e : a978             [ 2] 	lda #'x'
ef70 : 4c3ec4           [ 3] 	jmp io_put_ch
                             
                             
                             ; Decode a byte hex
ef73 :                       df_rt_lst_bythex
ef73 : 2069ef           [ 6] 	jsr df_rt_lst_hex_pre
ef76 :                       df_rt_lst_lo_hex
ef76 : a5a3             [ 3] 	lda df_tmpptrb
ef78 : 207dc1           [ 6] 	jsr str_a_to_x
ef7b : 203ec4           [ 6] 	jsr io_put_ch
ef7e : 8a               [ 2] 	txa
ef7f : 203ec4           [ 6] 	jsr io_put_ch
ef82 :                       df_rt_lst_const_done
ef82 : c8               [ 2] 	iny
ef83 : 8488             [ 3] 	sty df_exeoff
ef85 : 60               [ 6] 	rts
                             
                             ; Decode an int hex
ef86 :                       df_rt_lst_inthex
ef86 : 2069ef           [ 6] 	jsr df_rt_lst_hex_pre
ef89 : a5a4             [ 3] 	lda df_tmpptrb+1
ef8b : 207dc1           [ 6] 	jsr str_a_to_x
ef8e : 203ec4           [ 6] 	jsr io_put_ch
ef91 : 8a               [ 2] 	txa
ef92 : 203ec4           [ 6] 	jsr io_put_ch
ef95 : 4c76ef           [ 3] 	jmp df_rt_lst_lo_hex
                             
                             ; Decode a byte binary
ef98 :                       df_rt_lst_bytbin
ef98 : a208             [ 2] 	ldx #8
ef9a : a5a3             [ 3] 	lda df_tmpptrb
ef9c : 85a4             [ 3] 	sta df_tmpptrb+1
ef9e : 4ca3ef           [ 3] 	jmp df_rt_lst_bin
                             
                             ; Decode a int binary
efa1 :                       df_rt_lst_intbin
efa1 : a210             [ 2] 	ldx #16
                             	; FALL THROUGH
                             ; Main 01 decoding of binary
efa3 :                       df_rt_lst_bin
efa3 : a930             [ 2] 	lda #'0'
AS65 Assembler for R6502 [1.42].                                     Page  228
-------------------------------- bank\bank0.s --------------------------------

efa5 : 203ec4           [ 6] 	jsr io_put_ch
efa8 : a962             [ 2] 	lda #'b'
efaa : 203ec4           [ 6] 	jsr io_put_ch
efad :                       df_rt_lst_bit
efad : a930             [ 2] 	lda #'0'
efaf : 06a3             [ 5] 	asl df_tmpptrb
efb1 : 26a4             [ 5] 	rol df_tmpptrb+1
efb3 : 6900             [ 2] 	adc #0				; If C=1 then '0' becomes '1'
efb5 :                       df_rt_lst_bit_skip0
efb5 : 203ec4           [ 6] 	jsr io_put_ch
efb8 : ca               [ 2] 	dex
efb9 : d0f2             [ 3] 	bne df_rt_lst_bit
efbb : f0c5             [ 3] 	beq df_rt_lst_const_done
                             
                             ; Decode a decimal integer
efbd :                       df_rt_lst_intdec
efbd : a6a3             [ 3] 	ldx df_tmpptrb
efbf : a5a4             [ 3] 	lda df_tmpptrb+1
efc1 : c8               [ 2] 	iny
efc2 : 8488             [ 3] 	sty df_exeoff
efc4 : 18               [ 2] 	clc
efc5 : 4ce7c3           [ 3] 	jmp print_a_to_d
                             
                             
                             ; decode a variable or procedure
                             ; Slot address to decode in ptrb
efc8 :                       df_rt_lst_var
efc8 :                       df_rt_lst_proc
                             	; jump over the address bytes
efc8 : c8               [ 2] 	iny
efc9 : 8488             [ 3] 	sty df_exeoff
                             
                             	; ptrc starts at VNT start
                             	_cpyZPWord df_vntstrt,df_tmpptrc
                             
                             
                             	; ptrd starts at end of VVT
                             	_cpyZPWord df_vvtend,df_tmpptrd
                             
efdb : a000             [ 2] 	ldy #0
efdd :                       df_rt_list_findvvt
                             	; Check have we reached target addr in vvt?
efdd : a5a7             [ 3] 	lda df_tmpptrd
efdf : c5a3             [ 3] 	cmp df_tmpptrb
efe1 : d006             [ 3] 	bne df_rt_list_vvtend
efe3 : a5a8             [ 3] 	lda df_tmpptrd+1
efe5 : c5a4             [ 3] 	cmp df_tmpptrb+1
efe7 : f023             [ 4] 	beq df_rt_list_gotvvt
efe9 :                       df_rt_list_vvtend
efe9 : b1a5             [ 5] 	lda (df_tmpptrc),y
efeb : f009             [ 3] 	beq df_rt_list_gotvvtend
                             	_incZPWord df_tmpptrc
                             
eff3 : 4ce9ef           [ 3] 	jmp df_rt_list_vvtend
eff6 :                       df_rt_list_gotvvtend
                             	_incZPWord df_tmpptrc
                             
                             	; move target slot address towards top of mem
effc : 18               [ 2] 	clc
effd : a5a7             [ 3] 	lda df_tmpptrd
efff : 6908             [ 2] 	adc #DFVVT_SZ
f001 : 85a7             [ 3] 	sta df_tmpptrd
AS65 Assembler for R6502 [1.42].                                     Page  229
-------------------------------- bank\bank0.s --------------------------------

f003 : a5a8             [ 3] 	lda df_tmpptrd+1
f005 : 6900             [ 2] 	adc #0
f007 : 85a8             [ 3] 	sta df_tmpptrd+1
                             	; go back and check again
f009 : 4cddef           [ 3] 	jmp df_rt_list_findvvt
f00c :                       df_rt_list_gotvvt
f00c : b1a5             [ 5] 	lda (df_tmpptrc),y
f00e : f025             [ 3] 	beq df_rt_list_donvvt
f010 : 203ec4           [ 6] 	jsr io_put_ch
                             	_incZPWord df_tmpptrc
                             
f019 : 4c0cf0           [ 3] 	jmp df_rt_list_gotvvt
                             
f01c :                       df_rt_lst_strlit
f01c : a922             [ 2] 	lda #0x22
f01e : 203ec4           [ 6] 	jsr io_put_ch
f021 : a488             [ 3] 	ldy df_exeoff
f023 :                       df_rt_lst_strlitch
f023 : b1a1             [ 5] 	lda (df_tmpptra),y
f025 : f007             [ 3] 	beq df_rt_lst_strlitdon
f027 : 203ec4           [ 6] 	jsr io_put_ch
f02a : c8               [ 2] 	iny
f02b : 4c23f0           [ 3] 	jmp df_rt_lst_strlitch
f02e :                       df_rt_lst_strlitdon
f02e : a922             [ 2] 	lda #0x22
f030 : 203ec4           [ 6] 	jsr io_put_ch
f033 : 8488             [ 3] 	sty df_exeoff
f035 :                       df_rt_list_donvvt
f035 : 60               [ 6] 	rts
                             
f036 :                       df_rt_list_linnum
f036 : a001             [ 2] 	ldy #1
f038 : b1a1             [ 5] 	lda (df_tmpptra),y
f03a : aa               [ 2] 	tax
f03b : a002             [ 2] 	ldy #2
f03d : b1a1             [ 5] 	lda (df_tmpptra),y
f03f : 18               [ 2] 	clc
f040 : 4ce7c3           [ 3] 	jmp print_a_to_d
                             
                             ; decode a token value with MSB set
f043 :                       df_rt_list_decode_token
                             	; if not assembler then normal listing
f043 : c997             [ 2] 	cmp #DFRT_ASM
f045 : d003             [ 3] 	bne df_rt_list_decode_token_normal
f047 : 4c82f0           [ 3] 	jmp df_rt_asm_decode_token
f04a :                       df_rt_list_decode_token_normal
f04a : 297f             [ 2] 	and #0x7f
                             	; token 0 and 1 don't get decoded they are impli
f04c : c902             [ 2] 	cmp #2
f04e : b001             [ 3] 	bcs df_rt_list_do_decode_tkn
f050 : 60               [ 6] 	rts
f051 :                       df_rt_list_do_decode_tkn
f051 : aa               [ 2] 	tax
f052 : a995             [ 2] 	lda #lo(df_tokensyms)
f054 : 85a3             [ 3] 	sta df_tmpptrb
f056 : a9da             [ 2] 	lda #hi(df_tokensyms)
f058 : 85a4             [ 3] 	sta df_tmpptrb+1
f05a :                       df_rt_list_find_sym
f05a : e000             [ 2] 	cpx #0
f05c : f012             [ 3] 	beq df_rt_list_got_sym
f05e : a000             [ 2] 	ldy #0
f060 :                       df_rt_list_next_ch
AS65 Assembler for R6502 [1.42].                                     Page  230
-------------------------------- bank\bank0.s --------------------------------

f060 : b1a3             [ 5] 	lda (df_tmpptrb),y
f062 : 48               [ 3] 	pha
                             	_incZPWord df_tmpptrb
                             
f069 : 68               [ 4] 	pla
f06a : 10f4             [ 3] 	bpl df_rt_list_next_ch
f06c :                       df_rt_list_got_last_sym
                             	; ok got to the last ch
                             	; advance to next sym
f06c : ca               [ 2] 	dex
f06d : 4c5af0           [ 3] 	jmp df_rt_list_find_sym
f070 :                       df_rt_list_got_sym
f070 : a1a3             [ 6] 	lda (df_tmpptrb,x)		; Relies on X=0 from branch
f072 : 08               [ 3] 	php
f073 : 297f             [ 2] 	and #0x7f
f075 : 203ec4           [ 6] 	jsr io_put_ch
                             	_incZPWord df_tmpptrb
                             
f07e : 28               [ 4] 	plp
f07f : 10ef             [ 3] 	bpl df_rt_list_got_sym
f081 : 60               [ 6] 	rts
                             
                             ;** Decode assembler token in A **
f082 :                       df_rt_asm_decode_token
f082 : a92e             [ 2] 	lda #'.'			;Always put out the . symbol
f084 : 203ec4           [ 6] 	jsr io_put_ch
f087 : a488             [ 3] 	ldy df_exeoff		;Print out any whitespace
f089 :                       df_rt_asm_decode_token_ws
f089 : c8               [ 2] 	iny					;Point to char after the asm token
f08a : 8488             [ 3] 	sty df_exeoff
f08c : b1a1             [ 5] 	lda (df_tmpptra),y	;What is the char?
f08e : 202dd7           [ 6] 	jsr df_tk_isws		;If not then found the keyword
f091 : 9006             [ 3] 	bcc df_rt_asm_decode_token_found
f093 : 203ec4           [ 6] 	jsr io_put_ch		;Print the space
f096 : 4c89f0           [ 3] 	jmp df_rt_asm_decode_token_ws
f099 :                       df_rt_asm_decode_token_found
f099 : c911             [ 2] 	cmp #DFTK_VAR		; If is a label variable?
f09b : d003             [ 3] 	bne df_rt_asm_decode_token_keyword
                             	; if so then process as normal escape handling
f09d : 4c37ef           [ 3] 	jmp df_rt_list_decode_esc
f0a0 :                       df_rt_asm_decode_token_keyword
f0a0 : 297f             [ 2] 	and #0x7f			; Mask off MSB
f0a2 : aa               [ 2] 	tax					;Put it in to X as the counter
                             	; Point to asm symbol table
f0a3 : a97d             [ 2] 	lda #lo(df_asm_tokensyms)
f0a5 : 85a3             [ 3] 	sta df_tmpptrb
f0a7 : a9fd             [ 2] 	lda #hi(df_asm_tokensyms)
f0a9 : 85a4             [ 3] 	sta df_tmpptrb+1
f0ab :                       df_rt_list_find_asm_sym
f0ab : e000             [ 2] 	cpx #0
f0ad : f01d             [ 3] 	beq df_rt_list_got_asm_sym
f0af : a000             [ 2] 	ldy #0
f0b1 :                       df_rt_list_next_asm_ch
                             	_incZPWord df_tmpptrb
                             
f0b7 : b1a3             [ 5] 	lda (df_tmpptrb),y
f0b9 : c920             [ 2] 	cmp #' '			; Skip all chars >=' '
f0bb : b0f4             [ 3] 	bcs df_rt_list_next_asm_ch
f0bd : 38               [ 2] 	sec					; Skip offset and mode bytes
f0be : 65a3             [ 3] 	adc df_tmpptrb
f0c0 : 85a3             [ 3] 	sta df_tmpptrb
f0c2 : a5a4             [ 3] 	lda df_tmpptrb+1
AS65 Assembler for R6502 [1.42].                                     Page  231
-------------------------------- bank\bank0.s --------------------------------

f0c4 : 6900             [ 2] 	adc #0
f0c6 : 85a4             [ 3] 	sta df_tmpptrb+1
f0c8 : ca               [ 2] 	dex					; One less symbol to skip over
f0c9 : 4cabf0           [ 3] 	jmp df_rt_list_find_asm_sym
f0cc :                       df_rt_list_got_asm_sym
f0cc : a1a3             [ 6] 	lda (df_tmpptrb,x)	; Relies on X=0 from branch
f0ce : c920             [ 2] 	cmp #' '
f0d0 : 900c             [ 3] 	bcc df_rt_asm_decode_token_done
f0d2 : 203ec4           [ 6] 	jsr io_put_ch
                             	_incZPWord df_tmpptrb
                             
f0db : 4cccf0           [ 3] 	jmp df_rt_list_got_asm_sym
f0de :                       df_rt_asm_decode_token_done
f0de : 60               [ 6] 	rts
                             
                             
f0df :                       df_rt_doke
f0df : 2051e3           [ 6] 	jsr df_rt_parm_2ints
f0e2 : a5a3             [ 3] 	lda df_tmpptrb
f0e4 : a000             [ 2] 	ldy #0
f0e6 : 91a1             [ 5] 	sta (df_tmpptra),y
                             	; get high byte to doke
f0e8 : a5a4             [ 3] 	lda df_tmpptrb+1
f0ea : c8               [ 2] 	iny
                             	; poke hi byte
f0eb : 91a1             [ 5] 	sta (df_tmpptra),y
f0ed : 60               [ 6] 	rts
                             
f0ee :                       df_rt_poke
f0ee : 2051e3           [ 6] 	jsr df_rt_parm_2ints
f0f1 : a5a3             [ 3] 	lda df_tmpptrb
f0f3 : a000             [ 2] 	ldy #0
f0f5 : 91a1             [ 5] 	sta (df_tmpptra),y
f0f7 : 60               [ 6] 	rts
                             
f0f8 :                       df_rt_snd_common
                             	; 3 inputs
                             	; tmpa = channel (1,2,3), tmpb = period, tmpc = 
f0f8 : a5a1             [ 3] 	lda df_tmpptra
                             	; tone channel addressing is 0 to 2
f0fa : 38               [ 2] 	sec
f0fb : e901             [ 2] 	sbc #1
f0fd : 2903             [ 2] 	and #3
                             	; ok doing a tone channel, get reg index for per
f0ff : 0a               [ 2] 	asl a
f100 : aa               [ 2] 	tax
                             	; get low byte of period
f101 : a5a3             [ 3] 	lda df_tmpptrb
f103 : 2000c0           [ 6] 	jsr snd_set
                             	; increment reg number to high byte
f106 : e8               [ 2] 	inx
                             	; get high byte of period
f107 : a5a4             [ 3] 	lda df_tmpptrb+1
f109 : 290f             [ 2] 	and #0x0f
                             	; set period
f10b : 2000c0           [ 6] 	jsr snd_set
                             	; get volume register index (8 = channel 1)
f10e : 18               [ 2] 	clc
f10f : a5a1             [ 3] 	lda df_tmpptra
f111 : 2903             [ 2] 	and #3
f113 : 6907             [ 2] 	adc #7
f115 : aa               [ 2] 	tax
AS65 Assembler for R6502 [1.42].                                     Page  232
-------------------------------- bank\bank0.s --------------------------------

                             	; get volume
f116 : a5a5             [ 3] 	lda df_tmpptrc
f118 : 290f             [ 2] 	and #0x0f
f11a : d002             [ 3] 	bne df_rt_sound_env_skip
                             	; envelope mode
f11c : 0910             [ 2] 	ora #0x10
f11e :                       df_rt_sound_env_skip
f11e : 4c00c0           [ 3] 	jmp snd_set
                             
                             ; sound chan,period,volume
f121 :                       df_rt_sound
f121 : 2068e3           [ 6] 	jsr df_rt_parm_3ints
f124 :                       df_rt_dosound
                             	; check which channel (0 = noise)
f124 : a5a1             [ 3] 	lda df_tmpptra
f126 : f003             [ 3] 	beq df_rt_sound_noise
f128 : 4cf8f0           [ 3] 	jmp df_rt_snd_common
f12b :                       df_rt_sound_noise
                             	; ok update the noise channel, volume is irrelev
f12b : a206             [ 2] 	ldx #6
f12d : a5a3             [ 3] 	lda df_tmpptrb
f12f : 291f             [ 2] 	and #0x1f
f131 : 4c00c0           [ 3] 	jmp snd_set
                             
                             ; music chan,octave,note,volume
f134 :                       df_rt_music
f134 : 208be3           [ 6] 	jsr df_rt_parm_4ints
                             	; parm 2 = octave, need to x 12word = 24
                             	; get period A,X (hi/lo)
                             	; pass in octave # in X and note # in Y
f137 : a6a3             [ 3] 	ldx df_tmpptrb
f139 : a4a5             [ 3] 	ldy df_tmpptrc
f13b : 20ced3           [ 6] 	jsr snd_get_note
                             	; store note period in b
f13e : 86a3             [ 3] 	stx df_tmpptrb
f140 : 85a4             [ 3] 	sta df_tmpptrb+1
                             	; put vol in tmpc
f142 : a5a7             [ 3] 	lda df_tmpptrd
f144 : 85a5             [ 3] 	sta df_tmpptrc
                             	; tmpa,b,c contain chan,per,vol
f146 : 4c24f1           [ 3] 	jmp df_rt_dosound
                             
                             
                             ; play tonemask,noisemask,envelope,period
f149 :                       df_rt_play
f149 : 208be3           [ 6] 	jsr df_rt_parm_4ints
                             	; parm 1 = tone enable
f14c : a5a1             [ 3] 	lda df_tmpptra
f14e : 2907             [ 2] 	and #7
f150 : 85a1             [ 3] 	sta df_tmpptra
                             	; parm 2 = noise enable
f152 : a5a3             [ 3] 	lda df_tmpptrb
f154 : 2907             [ 2] 	and #7
f156 : 0a               [ 2] 	asl a
f157 : 0a               [ 2] 	asl a
f158 : 0a               [ 2] 	asl a
f159 : 05a1             [ 3] 	ora df_tmpptra
                             	; we now have bits set for channels to enable
                             	; but need to invert for the 8910
                             	; top 2 bits are 0 and 1 as these are port b (in
f15b : 497f             [ 2] 	eor #0x7f
                             	; reg 7 is control register
AS65 Assembler for R6502 [1.42].                                     Page  233
-------------------------------- bank\bank0.s --------------------------------

f15d : a207             [ 2] 	ldx #7
f15f : 2000c0           [ 6] 	jsr snd_set
                             	; parm 3 = envelope mode
f162 : a5a5             [ 3] 	lda df_tmpptrc
f164 : 290f             [ 2] 	and #0xf
                             	; 13 is envelope shape register
f166 : a20d             [ 2] 	ldx #13
f168 : 2000c0           [ 6] 	jsr snd_set
                             	; parm 4 = envelope period
                             	; 11 is envelope period register
f16b : a20b             [ 2] 	ldx #11
                             	; get low
f16d : a5a7             [ 3] 	lda df_tmpptrd
f16f : 2000c0           [ 6] 	jsr snd_set
                             	; get high
f172 : e8               [ 2] 	inx
f173 : a5a8             [ 3] 	lda df_tmpptrd+1
f175 : 4c00c0           [ 3] 	jmp snd_set
                             
                             ;* common filename procesing routine
                             ;*
f178 :                       df_rt_init_filename
                             	; evaluate string
f178 : 2075e0           [ 6] 	jsr df_rt_neval
f17b : 2045f7           [ 6] 	jsr df_ost_popStr
                             
                             	; save string address
f17e : 86a5             [ 3] 	stx df_tmpptrc
f180 : 85a6             [ 3] 	sta df_tmpptrc+1
                             
                             	; copy string to fhandle
f182 : a000             [ 2] 	ldy #0
f184 :                       df_rt_copy_fn
f184 : b1a5             [ 5] 	lda (df_tmpptrc),y
f186 :                       df_rt_fname_case
f186 : 990004           [ 5] 	sta df_linbuff,y				; Put filename in line buffe
f189 : c8               [ 2] 	iny
f18a : c900             [ 2] 	cmp #0
f18c : d0f6             [ 3] 	bne df_rt_copy_fn
f18e : 60               [ 6] 	rts
                             
                             ;* common file parsing routine
f18f :                       df_rt_parse_file
                             	; now process filename
f18f : 2078f1           [ 6] 	jsr df_rt_init_filename
f192 : a900             [ 2] 	lda #0						; Initialise tape system
f194 : 4c15c4           [ 3] 	jmp io_active_device
f197 :                       df_rt_file_errc
                             	SWBRK DFERR_FNAME
                             
                             
                             ; save "file" as text
f199 :                       df_rt_tsave
f199 : 208ff1           [ 6] 	jsr df_rt_parse_file
f19c : 2044c4           [ 6] 	jsr io_open_write
f19f : b0f6             [ 3] 	bcs df_rt_file_errc
                             	; ok now have redirected output to device
                             	; go and list the program in save mode
f1a1 : a901             [ 2] 	lda #1
f1a3 : 85a9             [ 3] 	sta df_tmpptre
f1a5 : 20a8ee           [ 6] 	jsr df_rt_listprg
                             	; final CR to end the save
AS65 Assembler for R6502 [1.42].                                     Page  234
-------------------------------- bank\bank0.s --------------------------------

f1a8 : a90d             [ 2] 	lda #UTF_CR
f1aa : 203ec4           [ 6] 	jsr io_put_ch
f1ad :                       df_rt_file_cleanup
                             	; close the file
f1ad : 2047c4           [ 6] 	jsr io_close
                             	; restore to default device io
f1b0 : 4c12c4           [ 3] 	jmp io_set_default
                             
                             
                             ; load "file" from text
f1b3 :                       df_rt_tload
f1b3 : 208ff1           [ 6] 	jsr df_rt_parse_file
f1b6 : 2041c4           [ 6] 	jsr io_open_read
f1b9 : b0dc             [ 3] 	bcs df_rt_file_errc
                             	; no echo - very important
                             	; else might try and write to a device
                             	; only open for reading (i.e. SD CARD)
f1bb :                       df_rt_loadline
f1bb : 18               [ 2] 	clc					; NO ECHO!
f1bc : 2042df           [ 6] 	jsr df_pg_inputline
                             	; if C clear then tokenise line
f1bf : 9014             [ 3] 	bcc df_rt_ldtokenise
                             	; else done
                             	; clear dflat runtime else will try to execute
                             	; the last tokenised line!
f1c1 : a900             [ 2] 	lda #0
f1c3 : 8d8004           [ 4] 	sta df_tokbuff			; Offset to next line
f1c6 : 8d8104           [ 4] 	sta df_tokbuff+1		; Clear line low
f1c9 : 8d8204           [ 4] 	sta df_tokbuff+2		; Clear line high
f1cc : 857f             [ 3] 	sta df_nxtstidx			; Clear next statement
f1ce : a901             [ 2] 	lda #1					; Set immediate mode
f1d0 : 855e             [ 3] 	sta df_immed
f1d2 : 4cadf1           [ 3] 	jmp df_rt_file_cleanup	; Ok now can close and do
f1d5 :                       df_rt_ldtokenise
f1d5 : 2096df           [ 6] 	jsr df_pg_tokenise		; Tokenise loaded string
f1d8 : 4cbbf1           [ 3] 	jmp df_rt_loadline		; Continue with next until b
                             
                             
                             ; Utility to open in binary mode save
f1db :                       df_rt_openforbinsave
f1db : 208ff1           [ 6] 	jsr df_rt_parse_file
f1de : 2050c4           [ 6] 	jsr io_open_ext2		; Ext2 is binary file save
f1e1 : b0b4             [ 3] 	bcs df_rt_file_errc
f1e3 : 60               [ 6] 	rts
                             
                             ; Utility to open in binary mode load
f1e4 :                       df_rt_openforbinload
                             	; Get filename and open file for binary read
f1e4 : 208ff1           [ 6] 	jsr df_rt_parse_file
f1e7 : 204dc4           [ 6] 	jsr io_open_ext1		; Ext1 is binary file read
f1ea : b0ab             [ 3] 	bcs df_rt_file_errc
f1ec : 60               [ 6] 	rts
                             
                             ; bload addr,"file"
f1ed :                       df_rt_bload
                             	; Get address but keep on stack
f1ed : e688             [ 5] 	inc df_exeoff
f1ef : 2075e0           [ 6] 	jsr df_rt_neval
                             
                             	; Get filename and open file for binary read
f1f2 : e688             [ 5] 	inc df_exeoff
f1f4 : 20e4f1           [ 6] 	jsr df_rt_openforbinload
AS65 Assembler for R6502 [1.42].                                     Page  235
-------------------------------- bank\bank0.s --------------------------------

                             
                             	; Get address from stack in to ptra
f1f7 : 2041f7           [ 6] 	jsr df_ost_popInt
f1fa : 86a1             [ 3] 	stx df_tmpptra
f1fc : 85a2             [ 3] 	sta df_tmpptra+1
                             
                             	; Get file address to X,Y
f1fe : 203bc4           [ 6] 	jsr io_get_ch
f201 : aa               [ 2] 	tax
f202 : 203bc4           [ 6] 	jsr io_get_ch
f205 : a8               [ 2] 	tay
                             
                             	; Check if user address is zero
f206 : a5a1             [ 3] 	lda df_tmpptra
f208 : 05a2             [ 3] 	ora df_tmpptra+1
f20a : d004             [ 3] 	bne df_rt_bload_addr
                             	; If it is zero then use address from file
f20c : 86a1             [ 3] 	stx df_tmpptra
f20e : 84a2             [ 3] 	sty df_tmpptra+1
f210 :                       df_rt_bload_addr
                             	; Get file length
f210 : 203bc4           [ 6] 	jsr io_get_ch
f213 : 85a3             [ 3] 	sta df_tmpptrb
f215 : 203bc4           [ 6] 	jsr io_get_ch
f218 : 85a4             [ 3] 	sta df_tmpptrb+1
                             
                             	; Go and load the bytes
f21a : 20bcf2           [ 6] 	jsr df_rt_loadbin
                             	; Close the file
f21d : 4cadf1           [ 3] 	jmp df_rt_file_cleanup
                             
                             ; Save a binary file
                             ; addr,length,fname
f220 :                       df_rt_bsave
                             	; Get source address and length but leave on sta
                             	; evaluate 1st parm
f220 : 2075e0           [ 6] 	jsr df_rt_neval
                             	; jump over comma
f223 : e688             [ 5] 	inc df_exeoff
                             	; evaluate the 2nd parm
f225 : 2075e0           [ 6] 	jsr df_rt_neval
                             
                             	; Process file and open for binary save
f228 : e688             [ 5] 	inc df_exeoff
f22a : 20dbf1           [ 6] 	jsr df_rt_openforbinsave
                             
                             	; Get length in to ptrb
f22d : 2041f7           [ 6] 	jsr df_ost_popInt
f230 : 86a3             [ 3] 	stx df_tmpptrb
f232 : 85a4             [ 3] 	sta df_tmpptrb+1
                             
                             	; Get address in to ptra
f234 : 2041f7           [ 6] 	jsr df_ost_popInt
f237 : 86a1             [ 3] 	stx df_tmpptra
f239 : 85a2             [ 3] 	sta df_tmpptra+1
                             
                             	; now save bytes
f23b : 20cef2           [ 6] 	jsr df_rt_savebin
                             	; Close the file
f23e : 4cadf1           [ 3] 	jmp df_rt_file_cleanup
                             
                             
AS65 Assembler for R6502 [1.42].                                     Page  236
-------------------------------- bank\bank0.s --------------------------------

                             ; save dflat tokenised program as binary
f241 :                       df_rt_save
                             	; Process file and open for binary save
f241 : 20dbf1           [ 6] 	jsr df_rt_openforbinsave
                             
                             	; first save zero page stuff
                             	; ok this saves a bit more than needed
                             	; but it's no biggie and doesn't
                             	; clobber temp space
f244 : a95b             [ 2] 	lda #lo(dflat_zp_save_s)
f246 : 85a1             [ 3] 	sta df_tmpptra
f248 : a900             [ 2] 	lda #hi(dflat_zp_save_s)
f24a : 85a2             [ 3] 	sta df_tmpptra+1
                             	; save length
f24c : 38               [ 2] 	sec
f24d : a9a1             [ 2] 	lda #lo(dflat_zp_save_e)
f24f : e95b             [ 2] 	sbc #lo(dflat_zp_save_s)
f251 : 85a3             [ 3] 	sta df_tmpptrb
f253 : a900             [ 2] 	lda #hi(dflat_zp_save_e)
f255 : e900             [ 2] 	sbc #hi(dflat_zp_save_s)
f257 : 85a4             [ 3] 	sta df_tmpptrb+1
                             	; now save bytes
f259 : 20cef2           [ 6] 	jsr df_rt_savebin
                             
                             	; now save the dflat program
f25c : a565             [ 3] 	lda df_prgstrt
f25e : 85a1             [ 3] 	sta df_tmpptra
f260 : a566             [ 3] 	lda df_prgstrt+1
f262 : 85a2             [ 3] 	sta df_tmpptra+1
                             	; save length
f264 : 38               [ 2] 	sec
f265 : a567             [ 3] 	lda df_prgend
f267 : e565             [ 3] 	sbc df_prgstrt
f269 : 85a3             [ 3] 	sta df_tmpptrb
f26b : a568             [ 3] 	lda df_prgend+1
f26d : e566             [ 3] 	sbc df_prgstrt+1
f26f : 85a4             [ 3] 	sta df_tmpptrb+1
                             	; now save bytes
f271 : 20cef2           [ 6] 	jsr df_rt_savebin
                             
                             	; now save the variables VVT and VNT
f274 : a569             [ 3] 	lda df_vntstrt
f276 : 85a1             [ 3] 	sta df_tmpptra
f278 : a56a             [ 3] 	lda df_vntstrt+1
f27a : 85a2             [ 3] 	sta df_tmpptra+1
                             	; save length
f27c : 38               [ 2] 	sec
f27d : a56d             [ 3] 	lda df_vvtstrt
f27f : e569             [ 3] 	sbc df_vntstrt
f281 : 85a3             [ 3] 	sta df_tmpptrb
f283 : a56e             [ 3] 	lda df_vvtstrt+1
f285 : e56a             [ 3] 	sbc df_vntstrt+1
f287 : 85a4             [ 3] 	sta df_tmpptrb+1
                             	; now save bytes
f289 : 20cef2           [ 6] 	jsr df_rt_savebin
                             
                             	; close the file
f28c : 2047c4           [ 6] 	jsr io_close
f28f : 18               [ 2] 	clc
                             	; Close the file
f290 : 4cadf1           [ 3] 	jmp df_rt_file_cleanup
                             
AS65 Assembler for R6502 [1.42].                                     Page  237
-------------------------------- bank\bank0.s --------------------------------

                             
                             ; load dflat tokenised program as binary
f293 :                       df_rt_load
f293 : 20e4f1           [ 6] 	jsr df_rt_openforbinload
                             
                             	; Get zero page header
f296 : 20aff2           [ 6] 	jsr df_rt_getbin_parms
                             	; and get bytes
f299 : 20bcf2           [ 6] 	jsr df_rt_loadbin
                             
                             	; Get program header
f29c : 20aff2           [ 6] 	jsr df_rt_getbin_parms
                             	; and get bytes
f29f : 20bcf2           [ 6] 	jsr df_rt_loadbin
                             
                             	; Get variables header
f2a2 : 20aff2           [ 6] 	jsr df_rt_getbin_parms
                             	; and get bytes
f2a5 : 20bcf2           [ 6] 	jsr df_rt_loadbin
                             
                             	; close the file
f2a8 : 2047c4           [ 6] 	jsr io_close
f2ab : 18               [ 2] 	clc
                             	; Close the file
f2ac : 4cadf1           [ 3] 	jmp df_rt_file_cleanup
                             
                             
                             ; Utility to get 4 parms from binary header
f2af :                       df_rt_getbin_parms
f2af : a200             [ 2] 	ldx #0
f2b1 :                       df_rt_getbin_parms_loop
f2b1 : 203bc4           [ 6] 	jsr io_get_ch
f2b4 : 95a1             [ 4] 	sta df_tmpptra,x
f2b6 : e8               [ 2] 	inx
f2b7 : e004             [ 2] 	cpx #4
f2b9 : d0f6             [ 3] 	bne df_rt_getbin_parms_loop
f2bb : 60               [ 6] 	rts
                             
                             ; Utility to load a bin file in address ptra
                             ; Length in ptr b
f2bc :                       df_rt_loadbin
                             	; Now load all bytes
f2bc : a000             [ 2] 	ldy #0
f2be :                       df_rt_loadbin_byte
                             	; Get a byte from tape
f2be : 203bc4           [ 6] 	jsr io_get_ch
                             	; Save it to destination
f2c1 : 91a1             [ 5] 	sta (df_tmpptra),y
                             	; Increment destination
f2c3 : c8               [ 2] 	iny
f2c4 : d002             [ 3] 	bne df_rt_loadbin_inc
f2c6 : e6a2             [ 5] 	inc df_tmpptra+1
f2c8 :                       df_rt_loadbin_inc
                             	; Decrement length remaining
f2c8 : 20ecf2           [ 6] 	jsr df_rt_dec_binlen
                             	; Not done, do another byte
f2cb : d0f1             [ 3] 	bne df_rt_loadbin_byte
                             	; Yes the close the file
f2cd : 60               [ 6] 	rts
                             
                             ; Utility to save a bin file from address ptra
                             ; Length in ptr b
AS65 Assembler for R6502 [1.42].                                     Page  238
-------------------------------- bank\bank0.s --------------------------------

f2ce :                       df_rt_savebin
                             	; Save dest and length to tape
f2ce : a200             [ 2] 	ldx #0
f2d0 :                       df_rt_bsave_parms
f2d0 : b5a1             [ 4] 	lda df_tmpptra,x
f2d2 : 203ec4           [ 6] 	jsr io_put_ch
f2d5 : e8               [ 2] 	inx
f2d6 : e004             [ 2] 	cpx #4
f2d8 : d0f6             [ 3] 	bne df_rt_bsave_parms
                             
                             	; Now save all bytes
f2da : a000             [ 2] 	ldy #0
f2dc :                       df_rt_savebin_byte
                             	; Get byte from memory
f2dc : b1a1             [ 5] 	lda (df_tmpptra),y
                             	; Put byte to tape
f2de : 203ec4           [ 6] 	jsr io_put_ch
                             	; Increment destination
f2e1 : c8               [ 2] 	iny
f2e2 : d002             [ 3] 	bne df_rt_savebin_inc
f2e4 : e6a2             [ 5] 	inc df_tmpptra+1
f2e6 :                       df_rt_savebin_inc
                             	; Decrement length remaining
f2e6 : 20ecf2           [ 6] 	jsr df_rt_dec_binlen
                             	; Not done, do another byte
f2e9 : d0f1             [ 3] 	bne df_rt_savebin_byte
f2eb : 60               [ 6] 	rts
                             
                             ; Decrement length in ptrb
f2ec :                       df_rt_dec_binlen
                             	; Decrement length remaining
f2ec : a5a3             [ 3] 	lda df_tmpptrb
f2ee : d002             [ 3] 	bne df_rt_binlen_skip
f2f0 : c6a4             [ 5] 	dec df_tmpptrb+1
f2f2 :                       df_rt_binlen_skip
f2f2 : c6a3             [ 5] 	dec df_tmpptrb
                             	; Reached zero?
f2f4 : a5a3             [ 3] 	lda df_tmpptrb
f2f6 : 05a4             [ 3] 	ora df_tmpptrb+1
f2f8 : 60               [ 6] 	rts
                             
                             
                             ; reset var
f2f9 :                       df_rt_reset
                             	; now get lvar X,A from current statement
f2f9 : 2042e5           [ 6] 	jsr df_rt_getlvar
                             	; save lvar in tmpb, vvt ptr in tmpa
f2fc : 86a3             [ 3] 	stx df_tmpptrb
f2fe : 85a4             [ 3] 	sta df_tmpptrb+1
                             	; load the vdp count as the reset value of timer
                             	; turn off interrupts while reading vdp lo,hi
f300 : a000             [ 2] 	ldy #0	; This is in readiness to read high byte 
                             	; clear interrupts to access 3 byte vdp counter 
f302 : 78               [ 2] 	sei
f303 : a508             [ 3] 	lda vdp_cnt
f305 : 91a3             [ 5] 	sta (df_tmpptrb),y
f307 : a509             [ 3] 	lda vdp_cnt+1
f309 : c8               [ 2] 	iny
f30a : 91a3             [ 5] 	sta (df_tmpptrb),y
                             	; restore interrupts asap
f30c : 58               [ 2] 	cli
f30d : 60               [ 6] 	rts
AS65 Assembler for R6502 [1.42].                                     Page  239
-------------------------------- bank\bank0.s --------------------------------

                             
                             ;***** FUNCTIONS *****
                             
f30e :                       df_rt_deek
f30e : 38               [ 2] 	sec
f30f : b001             [ 3] 	bcs df_rt_readbyte
f311 :                       df_rt_peek
f311 : 18               [ 2] 	clc
f312 :                       df_rt_readbyte
f312 : 08               [ 3] 	php
                             ;	inc df_exeoff
f313 : 206fe0           [ 6] 	jsr df_rt_getnval
f316 : 86a1             [ 3] 	stx df_tmpptra
f318 : 85a2             [ 3] 	sta df_tmpptra+1
f31a : a000             [ 2] 	ldy #0
f31c : b1a1             [ 5] 	lda (df_tmpptra),y
f31e : aa               [ 2] 	tax
f31f : a900             [ 2] 	lda #0
f321 : 28               [ 4] 	plp
f322 : 9003             [ 3] 	bcc df_rt_readbyte_skip
f324 : c8               [ 2] 	iny
f325 : b1a1             [ 5] 	lda (df_tmpptra),y
f327 :                       df_rt_readbyte_skip
f327 : 4c0df7           [ 3] 	jmp df_ost_pushInt
                             
                             ; Random number generator
                             ; rnd(0) = get next number
                             ; rnd(>0) = set seed
f32a :                       df_rt_rnd
                             ;	inc df_exeoff
f32a : 206fe0           [ 6] 	jsr df_rt_getnval
                             	; if input is 0 then generate next random number
f32d : e000             [ 2] 	cpx #0
f32f : d014             [ 3] 	bne df_rt_rnd_set
f331 : c900             [ 2] 	cmp #0
f333 : d010             [ 3] 	bne df_rt_rnd_set
                             	; generate next number
f335 : a598             [ 3] 	lda df_rnd+1
f337 : 4a               [ 2] 	lsr a
f338 : 2697             [ 5] 	rol df_rnd
f33a : 9002             [ 3] 	bcc df_rt_rnd_noeor
f33c : 49b4             [ 2] 	eor #0xb4
f33e :                       df_rt_rnd_noeor
f33e : 8598             [ 3] 	sta df_rnd+1
f340 : 4597             [ 3] 	eor df_rnd
f342 : 4c11f7           [ 3] 	jmp df_ost_pushIntA
                             	; else set the seed to that number and done
f345 :                       df_rt_rnd_set
f345 : 8697             [ 3] 	stx df_rnd
f347 : 8598             [ 3] 	sta df_rnd+1
f349 : 4c0df7           [ 3] 	jmp df_ost_pushInt
                             
                             
                             ;* Return memory footprint as follows:
                             ;* 0	Return free memory (start of vvt - end of he
                             ;* 1	Return program size (end of prg - start of p
                             ;* 2	Return size of vars (end of vnt - start of v
f34c :                       df_rt_mem
                             ;	inc df_exeoff
f34c : 206fe0           [ 6] 	jsr df_rt_getnval
                             	; only low byte is used
f34f : e001             [ 2] 	cpx #1
AS65 Assembler for R6502 [1.42].                                     Page  240
-------------------------------- bank\bank0.s --------------------------------

f351 : f017             [ 3] 	beq df_rt_mem_prg
f353 : e002             [ 2] 	cpx #2
f355 : f026             [ 3] 	beq df_rt_mem_var
                             	; default is free memory
f357 :                       df_rt_mem_free
                             	_cpyZPWord df_vvtstrt,df_tmpptra
                             
                             	_cpyZPWord df_starend,df_tmpptrb
                             
f367 : 4c8df3           [ 3] 	jmp df_rt_mem_calc
f36a :                       df_rt_mem_prg
                             	_cpyZPWord df_prgend,df_tmpptra
                             
                             	_cpyZPWord df_prgstrt,df_tmpptrb
                             
f37a : 4c8df3           [ 3] 	jmp df_rt_mem_calc
f37d :                       df_rt_mem_var
                             	_cpyZPWord df_vvtstrt,df_tmpptra
                             
                             	_cpyZPWord df_vntstrt,df_tmpptrb
                             
f38d :                       df_rt_mem_calc
                             	; tmpa-tmpb result in X,A
f38d : 38               [ 2] 	sec
f38e : a5a1             [ 3] 	lda df_tmpptra
f390 : e5a3             [ 3] 	sbc df_tmpptrb
f392 : aa               [ 2] 	tax
f393 : a5a2             [ 3] 	lda df_tmpptra+1
f395 : e5a4             [ 3] 	sbc df_tmpptrb+1
f397 : 4c0df7           [ 3] 	jmp df_ost_pushInt
                             
                             ;* a=stick()
                             ;* returns bit condition of joystick positions
                             ;* no actual joystick support so this is
                             ;* Check for fire | down | up | right | left
                             ;*        bit  4     3      2     1       0
f39a :                       df_rt_stick
                             ;	inc df_exeoff
f39a : 2063c7           [ 6] 	jsr kb_stick				; Get pos in to A
f39d : 4c11f7           [ 3] 	jmp df_ost_pushIntA
                             
                             ; k=get(sync) sync>=1 means sync
f3a0 :                       df_rt_get
                             ;	inc df_exeoff
f3a0 : 206fe0           [ 6] 	jsr df_rt_getnval
                             	; only low byte is used, check for sync or async
                             	; c=0 if x<1 else x>=1 makes c=1
f3a3 : e001             [ 2] 	cpx #1
f3a5 :                       df_rt_get_sync
f3a5 : 08               [ 3] 	php
f3a6 : 203bc4           [ 6] 	jsr io_get_ch				; Return in A, C=0 is good
f3a9 : 9005             [ 3] 	bcc df_rt_get_pushp			; Push A (and do plp)
f3ab : 28               [ 4] 	plp
f3ac : b0f7             [ 3] 	bcs df_rt_get_sync			; If sync then check again
f3ae : 9001             [ 3] 	bcc df_rt_get_push			; Else push zero (no plp)
f3b0 :                       df_rt_get_pushp
f3b0 : 28               [ 4] 	plp
f3b1 :                       df_rt_get_push
f3b1 : 4c11f7           [ 3] 	jmp df_ost_pushIntA
                             
                             ; s = scrn(x,y)
f3b4 :                       df_rt_scrn
AS65 Assembler for R6502 [1.42].                                     Page  241
-------------------------------- bank\bank0.s --------------------------------

                             ;	inc df_exeoff
f3b4 : 2051e3           [ 6] 	jsr df_rt_parm_2ints
f3b7 : a4a1             [ 3] 	ldy df_tmpptra			; Y is the x coord!
f3b9 : a6a3             [ 3] 	ldx df_tmpptrb			; X is the y coord!
f3bb : 20b5cd           [ 6] 	jsr gr_get
f3be : 4c11f7           [ 3] 	jmp df_ost_pushIntA
                             
                             ; p = pixel(x,y)
f3c1 :                       df_rt_pixel
                             ;	inc df_exeoff
f3c1 : 2051e3           [ 6] 	jsr df_rt_parm_2ints
f3c4 : a6a1             [ 3] 	ldx df_tmpptra
f3c6 : a4a3             [ 3] 	ldy df_tmpptrb
f3c8 : 2009d0           [ 6] 	jsr gr_pixel
f3cb : 4c11f7           [ 3] 	jmp df_ost_pushIntA
                             
                             
                             ; e=elapsed(var)
f3ce :                       df_rt_elapsed
                             	; now get lvar X,A from current statement
f3ce : 2042e5           [ 6] 	jsr df_rt_getlvar
f3d1 : e688             [ 5] 	inc df_exeoff
                             	; save lvar in tmpb, vvt ptr in tmpa
f3d3 : 86a3             [ 3] 	stx df_tmpptrb
f3d5 : 85a4             [ 3] 	sta df_tmpptrb+1
                             	; subtract vdp counter from value
                             	; turn off interrupts while reading vdp lo,hi
f3d7 : a000             [ 2] 	ldy #0	; This is in readiness to read high byte 
f3d9 : 38               [ 2] 	sec
                             	; disable interrupts to access vdp counter
f3da : 78               [ 2] 	sei
f3db : a508             [ 3] 	lda vdp_cnt
f3dd : f1a3             [ 5] 	sbc (df_tmpptrb),y
f3df : aa               [ 2] 	tax
f3e0 : a509             [ 3] 	lda vdp_cnt+1
                             	; restore interrupts asap
f3e2 : 58               [ 2] 	cli
f3e3 : c8               [ 2] 	iny
f3e4 : f1a3             [ 5] 	sbc (df_tmpptrb),y
f3e6 : 4c0df7           [ 3] 	jmp df_ost_pushInt
                             
f3e9 :                       df_rt_call
                             ;	inc df_exeoff
f3e9 : 208be3           [ 6] 	jsr df_rt_parm_4ints
f3ec : a5a3             [ 3] 	lda df_tmpptrb				; load A
f3ee : a6a5             [ 3] 	ldx	df_tmpptrc				; load X
f3f0 : a4a7             [ 3] 	ldy df_tmpptrd				; load Y
f3f2 : 20f8f3           [ 6] 	jsr df_rt_calljsr
f3f5 :                       df_rt_push_int1
f3f5 : 4c0df7           [ 3] 	jmp df_ost_pushInt			; A,X pair is return value
f3f8 :                       df_rt_calljsr
f3f8 : 6ca100           [ 6] 	jmp (df_tmpptra)			; tmpptra is address, return 
                             
f3fb :                       df_rt_sgn
                             ;	inc df_exeoff
f3fb : 206fe0           [ 6] 	jsr df_rt_getnval
f3fe : 86a1             [ 3] 	stx df_tmpptra
f400 : 05a1             [ 3] 	ora df_tmpptra
f402 : f00f             [ 3] 	beq df_rt_sgn_z
f404 : 2980             [ 2] 	and #0x80
f406 : d006             [ 3] 	bne df_rt_sgn_n
f408 : a201             [ 2] 	ldx #1
AS65 Assembler for R6502 [1.42].                                     Page  242
-------------------------------- bank\bank0.s --------------------------------

f40a : a900             [ 2] 	lda #0
f40c : f0e7             [ 4] 	beq df_rt_push_int1			; Always
f40e :                       df_rt_sgn_n
f40e : a2ff             [ 2] 	ldx #0xff
f410 : 8a               [ 2] 	txa
f411 : d0e2             [ 4] 	bne df_rt_push_int1			; Always
f413 :                       df_rt_sgn_z
f413 : a200             [ 2] 	ldx #0
f415 : 8a               [ 2] 	txa
f416 : f0dd             [ 4] 	beq df_rt_push_int1			; Always
                             
                             ; string length calculator
                             ; X,A = source
                             ; A = length not including zero
f418 :                       df_rt_strlen_common
f418 : 86a1             [ 3] 	stx df_tmpptra
f41a : 85a2             [ 3] 	sta df_tmpptra+1
f41c : a0ff             [ 2] 	ldy #0xff
f41e :                       df_rt_strlen_count
f41e : c8               [ 2] 	iny
f41f : b1a1             [ 5] 	lda (df_tmpptra),y
f421 : d0fb             [ 3] 	bne df_rt_strlen_count
f423 : 98               [ 2] 	tya
f424 : 60               [ 6] 	rts
                             
                             
                             ; common routine to extract a string
                             ; tmpa = source string
                             ; tmpb = dest string
                             ; tmpc = start pos
                             ; tmpd = endpos
f425 :                       df_rt_str_extract
                             	; source string
f425 : 2045f7           [ 6] 	jsr df_ost_popStr
f428 : 86a1             [ 3] 	stx df_tmpptra
f42a : 85a2             [ 3] 	sta df_tmpptra+1
                             	; destination is string accumulator
f42c : a57a             [ 3] 	lda df_sevalptr
f42e : 85a3             [ 3] 	sta df_tmpptrb
f430 : a57b             [ 3] 	lda df_sevalptr+1
f432 : 85a4             [ 3] 	sta df_tmpptrb+1
                             	; start pos
f434 : a4a5             [ 3] 	ldy df_tmpptrc
f436 : a200             [ 2] 	ldx #0
f438 :                       df_rt_str_cpy_ch
f438 : c4a7             [ 3] 	cpy df_tmpptrd
f43a : f011             [ 3] 	beq df_str_src_end
f43c : b1a1             [ 5] 	lda (df_tmpptra),y
f43e : f00d             [ 3] 	beq df_str_src_end
f440 : 81a3             [ 6] 	sta (df_tmpptrb,x)
                             	_incZPWord df_tmpptrb
                             
f448 : c8               [ 2] 	iny
f449 : d0ed             [ 3] 	bne df_rt_str_cpy_ch
                             	SWBRK DFERR_STRLONG
                             
f44d :                       df_str_src_end
f44d : a900             [ 2] 	lda #0
f44f : 81a3             [ 6] 	sta (df_tmpptrb,x)
f451 : a67a             [ 3] 	ldx df_sevalptr
f453 : a57b             [ 3] 	lda df_sevalptr+1
f455 : 4c18f7           [ 3] 	jmp df_ost_pushStr
AS65 Assembler for R6502 [1.42].                                     Page  243
-------------------------------- bank\bank0.s --------------------------------

                             
                             ; $c = chr(x)
f458 :                       df_rt_chr
                             ;	inc df_exeoff
                             	; get char in X
f458 : 206fe0           [ 6] 	jsr df_rt_getnval
f45b : a000             [ 2] 	ldy #0
                             	; transfer lo byte to A
f45d : 8a               [ 2] 	txa
f45e : 917a             [ 5] 	sta (df_sevalptr),y
f460 : c8               [ 2] 	iny
                             	; zero terminator
f461 : a900             [ 2] 	lda #0
f463 : 917a             [ 5] 	sta (df_sevalptr),y
                             	; point to seval scratch area
f465 : a67a             [ 3] 	ldx df_sevalptr
f467 : a57b             [ 3] 	lda df_sevalptr+1
f469 : 4c18f7           [ 3] 	jmp df_ost_pushStr
                             
                             ; $c = hex(x)
f46c :                       df_rt_hex
                             ;	inc df_exeoff
                             	; create hex digits
f46c : 206fe0           [ 6] 	jsr df_rt_getnval
f46f : 85a1             [ 3] 	sta df_tmpptra	; Save the high byte
f471 : 8a               [ 2] 	txa				; Convert low byte first
f472 : 207dc1           [ 6] 	jsr str_a_to_x	; Hex digits in A,X
f475 : 85a3             [ 3] 	sta df_tmpptrb
f477 : 8a               [ 2] 	txa				; Push low digit of low byte from X
f478 : 48               [ 3] 	pha
f479 : a5a3             [ 3] 	lda df_tmpptrb	; Get A back from temp
f47b : 48               [ 3] 	pha				; Push high digit of low byte
f47c : a5a1             [ 3] 	lda df_tmpptra	; Get the high byte
f47e : 207dc1           [ 6] 	jsr str_a_to_x	; Hex digits in A,X
                             	; create string
f481 : a000             [ 2] 	ldy #0			; Index in to string temp area
                             	; hi/hi
f483 : 917a             [ 5] 	sta (df_sevalptr),y
f485 : c8               [ 2] 	iny
                             	; hi/lo
f486 : 8a               [ 2] 	txa
f487 : 917a             [ 5] 	sta (df_sevalptr),y
f489 : c8               [ 2] 	iny
                             	; lo/hi
f48a : 68               [ 4] 	pla
f48b : 917a             [ 5] 	sta (df_sevalptr),y
f48d : c8               [ 2] 	iny
                             	; lo/lo
f48e : 68               [ 4] 	pla
f48f : 917a             [ 5] 	sta (df_sevalptr),y
f491 : c8               [ 2] 	iny
                             	; zero terminator
f492 : a900             [ 2] 	lda #0
f494 : 917a             [ 5] 	sta (df_sevalptr),y
                             	; point to seval scratch area
f496 : a67a             [ 3] 	ldx df_sevalptr
f498 : a57b             [ 3] 	lda df_sevalptr+1
f49a : 4c18f7           [ 3] 	jmp df_ost_pushStr
                             
                             ; $l = left($s, x)
f49d :                       df_rt_left
                             ;	inc df_exeoff
AS65 Assembler for R6502 [1.42].                                     Page  244
-------------------------------- bank\bank0.s --------------------------------

                             
                             	; first get the string to act on
                             	; point to string accumulator
f49d : 2031e1           [ 6] 	jsr df_rt_seval
                             	; now get the num of chars
f4a0 : e688             [ 5] 	inc df_exeoff
f4a2 : 206fe0           [ 6] 	jsr df_rt_getnval
                             	; number of chars to extract
f4a5 : 86a7             [ 3] 	stx df_tmpptrd
                             	; start position
f4a7 : a000             [ 2] 	ldy #0
f4a9 : 84a5             [ 3] 	sty df_tmpptrc
f4ab : 4c25f4           [ 3] 	jmp df_rt_str_extract
                             
                             ; $r = right($s, x)
f4ae :                       df_rt_right
                             ;	inc df_exeoff
                             	; first get the string to act on
                             	; point to string accumulator
f4ae : 2031e1           [ 6] 	jsr df_rt_seval
                             	; now get the num of chars from the right
f4b1 : e688             [ 5] 	inc df_exeoff
f4b3 : 206fe0           [ 6] 	jsr df_rt_getnval
                             	; number of chars to extract from the right
f4b6 : 86a5             [ 3] 	stx df_tmpptrc
                             	; end pos = len
f4b8 : a67a             [ 3] 	ldx df_sevalptr
f4ba : a57b             [ 3] 	lda df_sevalptr+1
f4bc : 2018f4           [ 6] 	jsr df_rt_strlen_common
f4bf : 85a7             [ 3] 	sta df_tmpptrd
                             	; subtract num chars to extract to get start pos
f4c1 : 38               [ 2] 	sec
f4c2 : e5a5             [ 3] 	sbc df_tmpptrc
f4c4 : 85a5             [ 3] 	sta df_tmpptrc
f4c6 : 4c25f4           [ 3] 	jmp df_rt_str_extract
                             
                             ; $m = mid($s, x, y)
f4c9 :                       df_rt_mid
                             ;	inc df_exeoff
                             	; first get the string to act on
                             	; point to string accumulator
f4c9 : 2031e1           [ 6] 	jsr df_rt_seval
                             	; now get start of string segment
f4cc : e688             [ 5] 	inc df_exeoff
f4ce : 2075e0           [ 6] 	jsr df_rt_neval
                             	; number of chars to extract
f4d1 : e688             [ 5] 	inc df_exeoff
f4d3 : 206fe0           [ 6] 	jsr df_rt_getnval
f4d6 : 86a7             [ 3] 	stx df_tmpptrd
                             	; start position
f4d8 : 2041f7           [ 6] 	jsr df_ost_popInt
f4db : ca               [ 2] 	dex					; zero offset rather than 1
f4dc : 86a5             [ 3] 	stx df_tmpptrc
                             	; update end pos by adding start pos
f4de : 8a               [ 2] 	txa
f4df : 18               [ 2] 	clc
f4e0 : 65a7             [ 3] 	adc df_tmpptrd
f4e2 : 85a7             [ 3] 	sta df_tmpptrd
f4e4 : 4c25f4           [ 3] 	jmp df_rt_str_extract
                             
                             ; %l = len($s)
f4e7 :                       df_rt_len
AS65 Assembler for R6502 [1.42].                                     Page  245
-------------------------------- bank\bank0.s --------------------------------

                             ;	inc df_exeoff
                             	; evaluate the string in the string accumulator
f4e7 : 2031e1           [ 6] 	jsr df_rt_seval
f4ea : 2045f7           [ 6] 	jsr df_ost_popStr
                             	; now calculate the length of this string
f4ed : 2018f4           [ 6] 	jsr df_rt_strlen_common
f4f0 : 4c11f7           [ 3] 	jmp df_ost_pushIntA
                             
                             ; %l = asc($s)
f4f3 :                       df_rt_asc
                             ;	inc df_exeoff
                             	; Evaluate string in the string accumulator
f4f3 : 2031e1           [ 6] 	jsr df_rt_seval
f4f6 : 2045f7           [ 6] 	jsr df_ost_popStr
                             	; Store point in ZP
f4f9 : 86a1             [ 3] 	stx df_tmpptra
f4fb : 85a2             [ 3] 	sta df_tmpptra+1
                             	; Find the character at beginning
f4fd : a200             [ 2] 	ldx #0
f4ff : a1a1             [ 6] 	lda (df_tmpptra,x)
f501 : 4c11f7           [ 3] 	jmp df_ost_pushIntA
                             
                             ; %l = val($s)
f504 :                       df_rt_val
                             ;	inc df_exeoff
                             	; evaluate the string
f504 : 2031e1           [ 6] 	jsr df_rt_seval
f507 : 2045f7           [ 6] 	jsr df_ost_popStr
f50a : a000             [ 2] 	ldy #0				; any numeric format
f50c : 20c8c1           [ 6] 	jsr con_n_to_a		; result in num_a
f50f : b007             [ 3] 	bcs df_rt_val_err
f511 : a63d             [ 3] 	ldx num_a
f513 : a53e             [ 3] 	lda num_a+1
                             	; Save as an int
f515 : 4c0df7           [ 3] 	jmp df_ost_pushInt
f518 :                       df_rt_val_err
                             	SWBRK DFERR_TYPEMISM
                             
                             
                             ; stop execution
f51a :                       df_rt_abort
                             	SWBRK DFERR_ABORT
                             
                             
f51c :                       df_rt_sprchar
f51c : 2051e3           [ 6] 	jsr df_rt_parm_2ints
f51f : a5a1             [ 3] 	lda df_tmpptra
f521 : a6a3             [ 3] 	ldx df_tmpptrb
f523 : 4c80d2           [ 3] 	jmp gr_spr_char
                             
f526 :                       df_rt_sprpos
f526 : 2068e3           [ 6] 	jsr df_rt_parm_3ints
f529 : a5a1             [ 3] 	lda df_tmpptra
f52b : a6a3             [ 3] 	ldx df_tmpptrb
f52d : a4a5             [ 3] 	ldy df_tmpptrc
f52f : 4c90d2           [ 3] 	jmp gr_spr_pos
                             
f532 :                       df_rt_sprupd
f532 : 2015d2           [ 6] 	jsr gr_spr_erase
f535 : 2028d2           [ 6] 	jsr gr_spr_new
f538 : 4c5cd2           [ 3] 	jmp gr_spr_draw
                             
AS65 Assembler for R6502 [1.42].                                     Page  246
-------------------------------- bank\bank0.s --------------------------------

f53b :                       df_rt_sprinit
f53b : 4c07d2           [ 3] 	jmp gr_spr_init
                             
f53e :                       df_rt_sprmulti
f53e : 2051e3           [ 6] 	jsr df_rt_parm_2ints
f541 : 4c9dd2           [ 3] 	jmp gr_spr_multi_pos
                             
f544 :                       df_rt_sprhit
                             ;	inc df_exeoff
f544 : 206fe0           [ 6] 	jsr df_rt_getnval
f547 : 8a               [ 2] 	txa
f548 : 2086d2           [ 6] 	jsr gr_spr_hit
f54b : b003             [ 3] 	bcs df_rt_sprhit_inactive
                             	; Active sprite hit = background
f54d : 4c11f7           [ 3] 	jmp df_ost_pushIntA
f550 :                       df_rt_sprhit_inactive
                             	; Inactive sprite hit = -1
f550 : a2ff             [ 2] 	ldx #0xff
f552 : 8a               [ 2] 	txa
f553 : 4c0df7           [ 3] 	jmp df_ost_pushInt
                             
                             
f556 :                       mod_sz_rtsubs_e
                             
                             
                             	include "dflat/proc.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  PROC.S
                             ;*  dflat module to handle procedures:
                             ;*  - executing a procedure
                             ;*  - find a proc, pass local and non-local param
                             ;*  - return from a proc, unload locals
                             ;*  - save the definition of a proc in the VNT an
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code  
                             
f556 :                       mod_sz_proc_s
                             
f556 :                       df_rt_proc_parmerr
f556 :                       df_rt_deferr
                             	SWBRK DFERR_PROCPARM
                             
                             
                             
                             ; call procedure
f558 :                       df_rt_proc
                             	; move past escape token
f558 : a488             [ 3] 	ldy df_exeoff
f55a : c8               [ 2] 	iny
                             	; Get VVT address X,A and procptr
f55b : b186             [ 5] 	lda (df_currlin),y
f55d : aa               [ 2] 	tax
AS65 Assembler for R6502 [1.42].                                     Page  247
-------------------------------- bank\bank0.s --------------------------------

f55e : c8               [ 2] 	iny
f55f : b186             [ 5] 	lda (df_currlin),y
f561 : c8               [ 2] 	iny
f562 : 8488             [ 3] 	sty df_exeoff
f564 : 868e             [ 3] 	stx df_procptr
f566 : 858f             [ 3] 	sta df_procptr+1
                             	
                             	; is index 0 (held in dim1)
                             	; then need to find the procedure
f568 : a003             [ 2] 	ldy #DFVVT_DIM1
f56a : b18e             [ 5] 	lda (df_procptr),y
f56c : d014             [ 3] 	bne df_rt_proc_addr
                             	; find proc
f56e : 20e0e4           [ 6] 	jsr df_rt_findproc
                             	; save y (line index)
f571 : 8438             [ 3] 	sty tmp_d
                             	; now go and update the proc vvt address
f573 : a002             [ 2] 	ldy #DFVVT_HI
f575 : 918e             [ 5] 	sta (df_procptr),y
f577 : a001             [ 2] 	ldy #DFVVT_LO
f579 : 8a               [ 2] 	txa
f57a : 918e             [ 5] 	sta (df_procptr),y
f57c : a003             [ 2] 	ldy #DFVVT_DIM1
                             	; get back line index in to A
f57e : a538             [ 3] 	lda tmp_d
f580 : 918e             [ 5] 	sta (df_procptr),y
f582 :                       df_rt_proc_addr
                             	; move past first open bracket
f582 : e688             [ 5] 	inc df_exeoff
                             	
                             	; get parm count
f584 : a004             [ 2] 	ldy #DFVVT_DIM2
f586 : b18e             [ 5] 	lda (df_procptr),y	
f588 : f018             [ 3] 	beq df_rt_proc_parm_none
                             	; push the right number of parms on
f58a : 48               [ 3] 	pha
                             
f58b : c688             [ 5] 	dec df_exeoff		; Pre-adjust
f58d :                       df_rt_proc_push_parm
                             	; move past comma or opening bracket
f58d : e688             [ 5] 	inc df_exeoff
                             	; if at end then error!
f58f : a488             [ 3] 	ldy df_exeoff
f591 : b186             [ 5] 	lda (df_currlin),y
f593 : c929             [ 2] 	cmp #')'
f595 : f0bf             [ 3] 	beq df_rt_proc_parmerr
                             	; else try and evaluate
f597 : 2075e0           [ 6] 	jsr df_rt_neval
                             	; get parm count off stack
f59a : 68               [ 4] 	pla
                             	; decrement
f59b : 38               [ 2] 	sec
f59c : e901             [ 2] 	sbc #1
                             	; and put back on stack
f59e : 48               [ 3] 	pha
                             	; go back and do all required parms
f59f : d0ec             [ 3] 	bne df_rt_proc_push_parm
                             	; remove parm counter from stack
f5a1 :                       df_rt_proc_parm_done
f5a1 : 68               [ 4] 	pla
f5a2 :                       df_rt_proc_parm_none
                             	; should be at close bracket
AS65 Assembler for R6502 [1.42].                                     Page  248
-------------------------------- bank\bank0.s --------------------------------

f5a2 : a488             [ 3] 	ldy df_exeoff
f5a4 : b186             [ 5] 	lda (df_currlin),y
f5a6 : c929             [ 2] 	cmp #')'
f5a8 : d0ac             [ 3] 	bne df_rt_proc_parmerr
                             	; should be no more parms
                             	; ok, finally we have all parms on rt stack
                             	; now execute the procedure
                             	; get back the proc address
f5aa : a68e             [ 3] 	ldx df_procptr
f5ac : a58f             [ 3] 	lda df_procptr+1
f5ae : d000             [ 3] 	bne df_rt_exec_proc		; ALWAYS as procptr+1 !=0
                             	
                             ; executing a procedure in VVT slot A,X
f5b0 :                       df_rt_exec_proc
                             	; save slot address
f5b0 : 86a1             [ 3] 	stx df_tmpptra
f5b2 : 85a2             [ 3] 	sta df_tmpptra+1
                             	
                             	; need to save all important vars
f5b4 : a586             [ 3] 	lda df_currlin
f5b6 : 48               [ 3] 	pha
f5b7 : a587             [ 3] 	lda df_currlin+1
f5b9 : 48               [ 3] 	pha
f5ba : a588             [ 3] 	lda df_exeoff
f5bc : 48               [ 3] 	pha
f5bd : a57f             [ 3] 	lda df_nxtstidx
f5bf : 48               [ 3] 	pha
f5c0 : a580             [ 3] 	lda df_curstidx
f5c2 : 48               [ 3] 	pha
f5c3 : a57e             [ 3] 	lda df_eolidx
f5c5 : 48               [ 3] 	pha
f5c6 : a593             [ 3] 	lda df_ifnest
f5c8 : 48               [ 3] 	pha
                             
                             	; now initialise the data
f5c9 : a001             [ 2] 	ldy #DFVVT_LO
f5cb : b1a1             [ 5] 	lda (df_tmpptra),y
f5cd : 8586             [ 3] 	sta df_currlin
f5cf : c8               [ 2] 	iny
f5d0 : b1a1             [ 5] 	lda (df_tmpptra),y
f5d2 : 8587             [ 3] 	sta df_currlin+1
f5d4 : c8               [ 2] 	iny
f5d5 : b1a1             [ 5] 	lda (df_tmpptra),y
f5d7 : 8588             [ 3] 	sta df_exeoff
f5d9 : 8580             [ 3] 	sta df_curstidx
f5db : a000             [ 2] 	ldy #0
f5dd : b186             [ 5] 	lda (df_currlin),y
f5df : 857f             [ 3] 	sta df_nxtstidx
                             	; now execute statements
f5e1 : 200ae4           [ 6] 	jsr df_rt_exec_stat
                             ;	bcs df_rt_exec_proc_err
                             	; now restore the position
f5e4 : 68               [ 4] 	pla
f5e5 : 8593             [ 3] 	sta df_ifnest
f5e7 : 68               [ 4] 	pla
f5e8 : 857e             [ 3] 	sta df_eolidx
f5ea : 68               [ 4] 	pla
f5eb : 8580             [ 3] 	sta df_curstidx
f5ed : 68               [ 4] 	pla
f5ee : 857f             [ 3] 	sta df_nxtstidx
f5f0 : 68               [ 4] 	pla
f5f1 : 8588             [ 3] 	sta df_exeoff
AS65 Assembler for R6502 [1.42].                                     Page  249
-------------------------------- bank\bank0.s --------------------------------

f5f3 : 68               [ 4] 	pla
f5f4 : 8587             [ 3] 	sta df_currlin+1
f5f6 : 68               [ 4] 	pla
f5f7 : 8586             [ 3] 	sta df_currlin
                             	; should be all restored, so return
f5f9 : 60               [ 6] 	rts
                             
                             
f5fa :                       df_rt_def
                             	; line offset pointing at DFTK_PROC
                             	; skip over PROC address and open bracket
f5fa : e688             [ 5] 	inc df_exeoff
f5fc : e688             [ 5] 	inc df_exeoff
f5fe : e688             [ 5] 	inc df_exeoff
                             	; parms on stack in reverse order to parm list
                             	; so get each parm and type and save to scratch
f600 : a201             [ 2] 	ldx #1									; index in to scratch
f602 : 868c             [ 3] 	stx df_procargs							; Proc args is the #args-1
f604 : a488             [ 3] 	ldy df_exeoff
f606 :                       df_rt_def_find_var
f606 : c8               [ 2] 	iny
f607 : b186             [ 5] 	lda (df_currlin),y
                             	; check if end of parm list
f609 : c929             [ 2] 	cmp #')'
f60b : f023             [ 3] 	beq df_rt_def_parm_done
                             	; else check if found a variable escape token (<
f60d : c911             [ 2] 	cmp #DFTK_VAR
f60f : f009             [ 3] 	beq df_rt_def_got_var
                             	; else check if non-local specifier
f611 : c926             [ 2] 	cmp #DFTK_VARPARM						; This is a regular ASCII
f613 : f002             [ 3] 	beq df_rt_def_got_varparm
f615 : d0ef             [ 3] 	bne df_rt_def_find_var
f617 :                       df_rt_def_got_varparm
                             	; set high bit
f617 : 0980             [ 2] 	ora #0x80
                             	; advance over non-local specifier
f619 : c8               [ 2] 	iny
f61a :                       df_rt_def_got_var
f61a : 4980             [ 2] 	eor #0x80			; If was set by '&' qualifier then w
f61c : 9d1306           [ 5] 	sta scratch,x		; Save parm type (by value or ref
                             	; get address and save in scratch
f61f : c8               [ 2] 	iny
f620 : b186             [ 5] 	lda (df_currlin),y
f622 : 9d3306           [ 5] 	sta scratch+32,x	; Hope 32 params is enough! :-)
f625 : c8               [ 2] 	iny
f626 : b186             [ 5] 	lda (df_currlin),y
f628 : 9d5306           [ 5] 	sta scratch+64,x
f62b : e8               [ 2] 	inx
f62c : e68c             [ 5] 	inc df_procargs
f62e : d0d6             [ 3] 	bne df_rt_def_find_var  ; always - relies not ze
f630 :                       df_rt_def_parm_done
                             	; save index that we got to
f630 : 8488             [ 3] 	sty df_exeoff
                             	; save def param list position in temp
f632 : 868b             [ 3] 	stx df_procmode
                             	; all var indices on the operator stack
                             	; now load up variables with parameters
                             	; initially assume no locals
f634 : a900             [ 2] 	lda #0
f636 : 858d             [ 3] 	sta df_procloc
f638 :                       df_rt_def_load_var
f638 : c68c             [ 5] 	dec df_procargs
AS65 Assembler for R6502 [1.42].                                     Page  250
-------------------------------- bank\bank0.s --------------------------------

f63a : f039             [ 3] 	beq df_rt_def_load_var_done
                             	; get var address
f63c : a68b             [ 3] 	ldx df_procmode
f63e : ca               [ 2] 	dex
f63f : bd3306           [ 4] 	lda scratch+32,x
f642 : 85a1             [ 3] 	sta df_tmpptra
f644 : bd5306           [ 4] 	lda scratch+64,x
f647 : 85a2             [ 3] 	sta df_tmpptra+1
f649 : 868b             [ 3] 	stx df_procmode
                             	
f64b : bd1306           [ 4] 	lda scratch,x
                             	; if MSB is clear then this is not a local varia
                             	; so just go an initialise with stacking
f64e : 1009             [ 3] 	bpl df_rt_def_initialise_parm
                             	; else call the local handling code to 
                             	; push the var address on to the runtime stack
f650 : a6a1             [ 3] 	ldx df_tmpptra
f652 : a5a2             [ 3] 	lda df_tmpptra+1
f654 : 20aff6           [ 6] 	jsr df_rt_proc_local
                             	; increment number of locals
f657 : e68d             [ 5] 	inc df_procloc
f659 :                       df_rt_def_initialise_parm
                             	; load type
f659 : a000             [ 2] 	ldy #DFVVT_TYPE
f65b : b1a1             [ 5] 	lda (df_tmpptra),y
                             	; if array or string type then pop pointer from 
f65d : 2984             [ 2] 	and #DFVVT_STR|DFVVT_ARRY
f65f : f006             [ 3] 	beq df_rt_def_load_var_int
f661 : 2049f7           [ 6] 	jsr df_ost_popPtr
f664 : 4c6af6           [ 3] 	jmp df_rt_def_load_var_int_skip
f667 :                       df_rt_def_load_var_int
                             	; must be int pop it from operator stack
f667 : 2041f7           [ 6] 	jsr df_ost_popInt
f66a :                       df_rt_def_load_var_int_skip
                             	; update the variable
f66a : a002             [ 2] 	ldy #DFVVT_HI
f66c : 91a1             [ 5] 	sta (df_tmpptra),y
f66e : 88               [ 2] 	dey
f66f : 8a               [ 2] 	txa
f670 : 91a1             [ 5] 	sta (df_tmpptra),y
                             	
f672 : 4c38f6           [ 3] 	jmp df_rt_def_load_var
f675 :                       df_rt_def_load_var_done
                             	; save the number of local parameters found so t
                             	; be unloaded when the proc ends
f675 : a58d             [ 3] 	lda df_procloc
f677 : 20c3f6           [ 6] 	jsr df_rst_pushByte
                             	; continue with next statement
f67a : 18               [ 2] 	clc
f67b : 60               [ 6] 	rts
                             
                             	
                             ; end def for a proc
f67c :                       df_rt_enddef
                             	; unload any locals
f67c : 2088f6           [ 6] 	jsr df_rt_proc_unlocal
                             	; nothing to do - main loop will terminate
f67f : 18               [ 2] 	clc
f680 : 60               [ 6] 	rts
                             	
                             ; return a value
f681 :                       df_rt_return
AS65 Assembler for R6502 [1.42].                                     Page  251
-------------------------------- bank\bank0.s --------------------------------

                             	; evaluate the return and put on the parameter s
f681 : 2075e0           [ 6] 	jsr df_rt_neval
                             	; process this like an end of procedure
f684 : 207cf6           [ 6] 	jsr df_rt_enddef
f687 : 60               [ 6] 	rts
                             	
                             	
                             ; unload any local variables from runtime stack
f688 :                       df_rt_proc_unlocal
f688 : 20ccf6           [ 6] 	jsr df_rst_popByte
f68b : aa               [ 2] 	tax
f68c : f020             [ 3] 	beq df_rt_proc_unload_done
f68e :                       df_rt_proc_unloadvar
f68e : 8a               [ 2] 	txa
f68f : 48               [ 3] 	pha
                             	; var value is popped first then index
                             	; get a word and put in tmpb
f690 : 20e9f6           [ 6] 	jsr df_rst_popWord
f693 : 86a3             [ 3] 	stx df_tmpptrb
f695 : 85a4             [ 3] 	sta df_tmpptrb+1
                             	; get the var address
f697 : 20e9f6           [ 6] 	jsr df_rst_popWord
f69a : 86a1             [ 3] 	stx df_tmpptra
f69c : 85a2             [ 3] 	sta df_tmpptra+1
                             	; store lo byte first
f69e : a001             [ 2] 	ldy #DFVVT_LO
f6a0 : a5a3             [ 3] 	lda df_tmpptrb
f6a2 : 91a1             [ 5] 	sta (df_tmpptra),y
                             	; then hi
f6a4 : c8               [ 2] 	iny
f6a5 : a5a4             [ 3] 	lda df_tmpptrb+1
f6a7 : 91a1             [ 5] 	sta (df_tmpptra),y
                             	; restore counter
f6a9 : 68               [ 4] 	pla
f6aa : aa               [ 2] 	tax
f6ab : ca               [ 2] 	dex
f6ac : d0e0             [ 3] 	bne df_rt_proc_unloadvar
f6ae :                       df_rt_proc_unload_done
f6ae : 60               [ 6] 	rts
                             	
                             ; push a local variable to the runtime stack
                             ; X,A = var slot
f6af :                       df_rt_proc_local
                             	; save address
f6af : 86a1             [ 3] 	stx df_tmpptra
f6b1 : 85a2             [ 3] 	sta df_tmpptra+1
                             	; push var slot on rt stack
f6b3 : 20dbf6           [ 6] 	jsr df_rst_pushWord
f6b6 :                       df_rt_proc_local_load	
                             	; load x,a with var value lo,hi
f6b6 : a001             [ 2] 	ldy #DFVVT_LO
f6b8 : b1a1             [ 5] 	lda (df_tmpptra),y
f6ba : aa               [ 2] 	tax
f6bb : c8               [ 2] 	iny
f6bc : b1a1             [ 5] 	lda (df_tmpptra),y
                             	; push word on to rt stack
f6be : 20dbf6           [ 6] 	jsr df_rst_pushWord
f6c1 : 18               [ 2] 	clc
f6c2 : 60               [ 6] 	rts
                             		
f6c3 :                       mod_sz_proc_e
                             
AS65 Assembler for R6502 [1.42].                                     Page  252
-------------------------------- bank\bank0.s --------------------------------

                             
f6c3 :                       mod_sz_runtime_e
                             
                             
                             
                             	include "dflat/stack.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  STACK.S
                             ;*  This module implements the dflat software sta
                             ;*  needs a few stacks:
                             ;*  - 6502 stack for expression parsing and reent
                             ;*  - dflat runtime stack for things like for/nex
                             ;*  - dflat parameter stack for passing parameter
                             ;*  The two software stacks are implemented in th
                             ;*  with the runtime stack growing up from 0 and 
                             ;*  operator stack growing down from 255.  Hopefu
                             ;*  don't meet as there are no checks for this at
                             ;*  purely because I want speed over friendliness
                             ;*  I may come to regret this.
                             ;*  I have also added the only runtime memory all
                             ;*  needed by dflat here.  Humourously I have cal
                             ;*  which is taken from the C language, but it on
                             ;*  grab some memory after the of dflat program c
                             ;*  arrays - which of course cannot have storage 
                             ;*  tokenisation time (e.g. because I dimension a
                             ;*  a size from a variable).
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code  
                             
                             
                             ;****************************************
                             ;* Push a byte on to runtime stack
                             ;* A = byte
                             ;****************************************
f6c3 :                       df_rst_pushByte
f6c3 : a476             [ 3] 	ldy df_rtstop
f6c5 : 990005           [ 5] 	sta df_rtstck,y
f6c8 : 88               [ 2] 	dey
f6c9 : 8476             [ 3] 	sty df_rtstop
f6cb : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Pop a byte off runtime stack
                             ;* A = byte
                             ;****************************************
f6cc :                       df_rst_popByte
f6cc : a476             [ 3] 	ldy df_rtstop
f6ce : c8               [ 2] 	iny
f6cf : b90005           [ 4] 	lda df_rtstck,y
f6d2 : 8476             [ 3] 	sty df_rtstop
f6d4 : 60               [ 6] 	rts
                             
AS65 Assembler for R6502 [1.42].                                     Page  253
-------------------------------- bank\bank0.s --------------------------------

                             ;****************************************
                             ;* Peek a byte off runtime stack
                             ;* A = byte
                             ;****************************************
f6d5 :                       df_rst_peekByte
f6d5 : a476             [ 3] 	ldy df_rtstop
                             	; Look at what is below top of stack
                             	; below means the next address up as
                             	; this stack grows downwards like 6502
f6d7 : b90105           [ 4] 	lda df_rtstck+1,y
f6da : 60               [ 6] 	rts
                             	
                             ;****************************************
                             ;* Push a word on to runtime stack
                             ;* X,A = word lo,hi
                             ;****************************************
f6db :                       df_rst_pushWord
f6db : a476             [ 3] 	ldy df_rtstop
f6dd : 990005           [ 5] 	sta df_rtstck,y
f6e0 : 88               [ 2] 	dey
f6e1 : 8a               [ 2] 	txa
f6e2 : 990005           [ 5] 	sta df_rtstck,y
f6e5 : 88               [ 2] 	dey
f6e6 : 8476             [ 3] 	sty df_rtstop
f6e8 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Pop a word off runtime stack
                             ;* X,A = word lo,hi
                             ;****************************************
f6e9 :                       df_rst_popWord
f6e9 : a476             [ 3] 	ldy df_rtstop
f6eb : c8               [ 2] 	iny
f6ec : b90005           [ 4] 	lda df_rtstck,y
f6ef : aa               [ 2] 	tax
f6f0 : c8               [ 2] 	iny
f6f1 : b90005           [ 4] 	lda df_rtstck,y
f6f4 : 8476             [ 3] 	sty df_rtstop
f6f6 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Push a parameter on to parm stack
                             ;* X,A - int
                             ;* Y - type
                             ;****************************************
f6f7 :                       df_ost_pushParmX
f6f7 : 8438             [ 3] 	sty tmp_d		; Save Type
f6f9 : a477             [ 3] 	ldy df_parmtop	; Get stack index
                             	; push high byte first (A)
f6fb : 990005           [ 5] 	sta df_rtstck,y
f6fe : c8               [ 2] 	iny
                             	; push low byte next (X)
f6ff : 8a               [ 2] 	txa
f700 : 990005           [ 5] 	sta df_rtstck,y
f703 : c8               [ 2] 	iny
f704 : a538             [ 3] 	lda tmp_d		; get Type
f706 : 990005           [ 5] 	sta df_rtstck,y
f709 : c8               [ 2] 	iny
                             	; save new top of stack
f70a : 8477             [ 3] 	sty df_parmtop
f70c : 60               [ 6] 	rts
                             
AS65 Assembler for R6502 [1.42].                                     Page  254
-------------------------------- bank\bank0.s --------------------------------

                             ;****************************************
                             ;* Push an int on to parm stack
                             ;* X,A - int
                             ;****************************************
f70d :                       df_ost_pushInt
f70d : a001             [ 2] 	ldy #DFST_INT
f70f : d0e6             [ 4] 	bne df_ost_pushParmX		; ALWAYS!
                             
                             ;****************************************
                             ;* Push A on to parm stack
                             ;* X,A - int
                             ;****************************************
f711 :                       df_ost_pushIntA
f711 : a001             [ 2] 	ldy #DFST_INT
f713 : aa               [ 2] 	tax
f714 : a900             [ 2] 	lda #0
f716 : f0df             [ 4] 	beq df_ost_pushParmX		; ALWAYS!
                             
                             ;****************************************
                             ;* Push a string pointer on to parm stack
                             ;* X,A - int
                             ;****************************************
f718 :                       df_ost_pushStr
f718 : a080             [ 2] 	ldy #DFST_STR
f71a : d0db             [ 4] 	bne df_ost_pushParmX		; ALWAYS!
                             
                             ;****************************************
                             ;* Push a general pointer on to parm stack
                             ;* X,A - int
                             ;****************************************
f71c :                       df_ost_pushPtr
f71c : a0ff             [ 2] 	ldy #0xff
f71e : d0d7             [ 4] 	bne df_ost_pushParmX		; ALWAYS!
                             	
                             ;****************************************
                             ;* Pop parameter from the stack
                             ;* X,A - int
                             ;* Y - type expected
                             ;****************************************
f720 :                       df_ost_popParmX
f720 : 8438             [ 3] 	sty tmp_d
f722 : a477             [ 3] 	ldy df_parmtop
                             	; pull type first
f724 : a538             [ 3] 	lda tmp_d
f726 : 88               [ 2] 	dey
f727 : 390005           [ 4] 	and df_rtstck,y
f72a : f00d             [ 3] 	beq df_st_typemismatcherr
                             	; pull low byte first
f72c : 88               [ 2] 	dey
f72d : b90005           [ 4] 	lda df_rtstck,y
f730 : aa               [ 2] 	tax
                             	; pull high byte next
f731 : 88               [ 2] 	dey
f732 : b90005           [ 4] 	lda df_rtstck,y
                             	; save new top of stack
f735 : 8477             [ 3] 	sty df_parmtop
f737 : 18               [ 2] 	clc
f738 : 60               [ 6] 	rts
f739 :                       df_st_typemismatcherr
                             	SWBRK DFERR_TYPEMISM
                             
                             
AS65 Assembler for R6502 [1.42].                                     Page  255
-------------------------------- bank\bank0.s --------------------------------

                             ;****************************************
                             ;* Return type on top of stack
                             ;* Y - type
                             ;****************************************
f73b :                       df_ost_peekType
f73b : a477             [ 3] 	ldy df_parmtop
f73d : b9ff04           [ 4] 	lda df_rtstck-1,y
                             ;	tay NO LONGER NEEDED - EVERYWHERE USES A
f740 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Pop an int off parm stack
                             ;* X,A - int
                             ;****************************************
f741 :                       df_ost_popInt
f741 : a001             [ 2] 	ldy #DFST_INT
f743 : d0db             [ 3] 	bne df_ost_popParmX			; ALWAYS!
                             
                             ;****************************************
                             ;* Pop a string pointer off parm stack
                             ;* X,A - int
                             ;****************************************
f745 :                       df_ost_popStr
f745 : a080             [ 2] 	ldy #DFST_STR
f747 : d0d7             [ 3] 	bne df_ost_popParmX			; ALWAYS!
                             	
                             ;****************************************
                             ;* Pop a general pointer off parm stack
                             ;* X,A - int
                             ;****************************************
f749 :                       df_ost_popPtr
f749 : a0ff             [ 2] 	ldy #0xff
f74b : d0d3             [ 3] 	bne df_ost_popParmX			; ALWAYS!
                             	
                             	
                             ;****************************************
                             ;* Allocate space on the heap
                             ;* X, A = Number of bytes to allocate
                             ;* X, A return address of allocated space
                             ;****************************************
f74d :                       df_st_malloc
                             	; save A in Y
f74d : a8               [ 2] 	tay
                             	; save old starend
f74e : a575             [ 3] 	lda df_starend+1
f750 : 48               [ 3] 	pha
f751 : a574             [ 3] 	lda df_starend
f753 : 48               [ 3] 	pha
                             	; restore A from Y
f754 : 98               [ 2] 	tya
                             	; add X,A to starend
f755 : 48               [ 3] 	pha
f756 : 8a               [ 2] 	txa
f757 : 18               [ 2] 	clc
f758 : 6574             [ 3] 	adc df_starend
f75a : 8574             [ 3] 	sta df_starend
f75c : 68               [ 4] 	pla
f75d : 6575             [ 3] 	adc df_starend+1
f75f : 8575             [ 3] 	sta df_starend+1
                             	; return old starend as start of space
f761 : 68               [ 4] 	pla
f762 : aa               [ 2] 	tax
AS65 Assembler for R6502 [1.42].                                     Page  256
-------------------------------- bank\bank0.s --------------------------------

f763 : 68               [ 4] 	pla
f764 : 60               [ 6] 	rts
                             	
                             
                             ;****************************************
                             ;* df_init
                             ;* Initialise dflat language settings
                             ;****************************************
f765 :                       df_init
                             	; Initialise top of memory to default
                             	; This can be overridden by himem command
f765 : a900             [ 2] 	lda #lo(DF_MEMTOP)
f767 : 8d1106           [ 4] 	sta df_memtop
f76a : a998             [ 2] 	lda #hi(DF_MEMTOP)
f76c : 8d1206           [ 4] 	sta df_memtop+1
                             
                             	; Init program space
f76f : 2073f7           [ 6] 	jsr df_clear
                             
                             	; Initialise assembler
                             ;	jsr asm_init
                             
f772 : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* df_clear
                             ;* Initialise program space
                             ;****************************************
f773 :                       df_clear
                             	; Start of program space
f773 : a913             [ 2] 	lda #lo(DF_PROGSTART)
f775 : 8565             [ 3] 	sta df_prgstrt
f777 : 8567             [ 3] 	sta df_prgend
f779 : a907             [ 2] 	lda #hi(DF_PROGSTART)
f77b : 8566             [ 3] 	sta df_prgstrt+1
f77d : 8568             [ 3] 	sta df_prgend+1
                             	; Terminal value in prog space
f77f : a900             [ 2] 	lda #0
f781 : a000             [ 2] 	ldy #0
f783 : 9165             [ 5] 	sta (df_prgstrt),y
                             	; No variables - zero the count
f785 : 8571             [ 3] 	sta df_varcnt
                             
                             	; Variable value table
                             	; Grows down from mem top
f787 : ad1106           [ 4] 	lda df_memtop
f78a : 856d             [ 3] 	sta df_vvtstrt
f78c : 856f             [ 3] 	sta df_vvtend
f78e : ad1206           [ 4] 	lda df_memtop+1
f791 : 856e             [ 3] 	sta df_vvtstrt+1
f793 : 8570             [ 3] 	sta df_vvtend+1
                             
                             	; Variable name table
                             	; Grows down from mem top
f795 : a56d             [ 3] 	lda df_vvtstrt
f797 : 8569             [ 3] 	sta df_vntstrt
f799 : 856b             [ 3] 	sta df_vntend
f79b : a56e             [ 3] 	lda df_vvtstrt+1
f79d : 856a             [ 3] 	sta df_vntstrt+1
f79f : 856c             [ 3] 	sta df_vntend+1
                             
AS65 Assembler for R6502 [1.42].                                     Page  257
-------------------------------- bank\bank0.s --------------------------------

                             	; String accumulator
f7a1 : a900             [ 2] 	lda #lo(df_raw)
f7a3 : 857a             [ 3] 	sta df_sevalptr
f7a5 : a904             [ 2] 	lda #hi(df_raw)
f7a7 : 857b             [ 3] 	sta df_sevalptr+1
                             
f7a9 : 60               [ 6] 	rts
                             
f7aa :                       mod_sz_dflat_e
                             
                             	include "dflat/error.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  ERROR.S
                             ;*  Error handling module.
                             ;*  Whan an error is thrown using BRK, this modul
                             ;*  displaying the error plus any associated line
                             ;*  if it was running a program.  It then resets 
                             ;*  settings and takes the system back to program
                             ;*  mode.  The message uses the general IO handle
                             ;*  output must be set to the right place else fo
                             ;*	the error message will be written to tape!
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code
                             	include "dflat/error.i"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  ERROR.I
                             ;*  Error definitions file.
                             ;*  The macro to throw an error is elswhere, but 
                             ;*  It issues a 6502 BRK commmand with the next b
                             ;*  the error code.  The BRK handler then picks u
                             ;*  code and shows the appropriate message plus a
                             ;*  number if a program was running.
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code  
                             
                             ; Error message numbers
0000 =                       DFERR_OK		=	0
0001 =                       DFERR_SYNTAX	=	1
0002 =                       DFERR_TYPEMISM	=	2
0003 =                       DFERR_DIM		=	3
0004 =                       DFERR_UNTIL		=	4
0005 =                       DFERR_NOPROC	=	5
AS65 Assembler for R6502 [1.42].                                     Page  258
-------------------------------- bank\bank0.s --------------------------------

0006 =                       DFERR_PROCPARM	=	6
0007 =                       DFERR_IMMEDIATE	=	7
0008 =                       DFERR_UNCLOSEDIF=	8
0009 =                       DFERR_NOIF		=	9
000a =                       DFERR_NEXTFOR	=	10
000b =                       DFERR_FNAME		=	11
000c =                       DFERR_STRLONG	=	12
000d =                       DFERR_BREAK		=	13
000e =                       DFERR_NODATA	=	14
000f =                       DFERR_WEND		=	15
0010 =                       DFERR_NOLINE	=	16
0011 =                       DFERR_RETURN	=	17
0012 =                       DFERR_ABORT		=	18
0013 =                       DFERR_QUANTITY	=	19
0014 =                       DFERR_NOORG		=	20
                             
                             
                             
                             
                             
                             ; Error message table, each msg null terminated
f7aa :                       df_tk_errortab
f7aa : 4f6b00                	db	"Ok", 0
f7ad : 53796e74617800        	db	"Syntax", 0
f7b4 : 5479706500            	db	"Type", 0
f7b9 : 52652d64696d00        	db	"Re-dim", 0
f7c0 : 4e6f2072657065..      	db	"No repeat", 0
f7ca : 4e6f206465666e00      	db	"No defn", 0
f7d2 : 5061726d00            	db	"Parm", 0
f7d7 : 456e64656400          	db	"Ended", 0
f7dd : 4e6f20656e6469..      	db	"No endif", 0
f7e6 : 4e6f20696600          	db	"No if", 0
f7ec : 4e6f20666f7200        	db	"No for", 0
f7f3 : 4e6f7420666f75..      	db	"Not found", 0
f7fd : 546f6f206c6f6e..      	db	"Too long", 0
f806 : 427265616b00          	db	"Break", 0
f80c : 4e6f206461746100      	db	"No data", 0
f814 : 4e6f207768696c..      	db	"No while", 0
f81d : 4e6f206c696e6500      	db	"No line", 0
f825 : 4e6f2072657475..      	db	"No return ", 0
f830 : 41626f7274656400      	db	"Aborted", 0
f838 : 426f756e647300        	db	"Bounds", 0
f83f : 4e6f206f726700        	db	"No org", 0
f846 : 00                    	db	0
                             
f847 :                       df_tk_error_inline
f847 : 20696e206c696e..      	db	" in line ", 0
f851 :                       df_tk_error_atpos
f851 : 20706f732000          	db	" pos ", 0
f857 :                       df_tk_error_error
f857 : 206572726f7200        	db	" error", 0
                             
                             ;****************************************
                             ;* df_trap_error
                             ;* Show an error message
                             ;* errno is error number
                             ;* currlin = Line number
                             ;* exeoff = offset
                             ;* at the end jump to program editor
                             ;****************************************
f85e :                       df_trap_error
                             	; reset SP
AS65 Assembler for R6502 [1.42].                                     Page  259
-------------------------------- bank\bank0.s --------------------------------

f85e : a65f             [ 3] 	ldx df_sp
f860 : 9a               [ 2] 	txs
                             	; set IO back to normal
f861 : 2010c5           [ 6] 	jsr init_via0
f864 : 2012c4           [ 6] 	jsr io_set_default
f867 : 58               [ 2] 	cli
                             
f868 : a9aa             [ 2] 	lda #lo(df_tk_errortab)
f86a : 85a1             [ 3] 	sta df_tmpptra
f86c : a9f7             [ 2] 	lda #hi(df_tk_errortab)
f86e : 85a2             [ 3] 	sta df_tmpptra+1
f870 : a65d             [ 3] 	ldx errno				; 0 or >=128 goes to monitor
f872 : f004             [ 3] 	beq df_trap_go_monitor
f874 : 3002             [ 3] 	bmi df_trap_go_monitor
f876 : 1003             [ 3] 	bpl df_trap_normal
f878 :                       df_trap_go_monitor
f878 : 4cfcf8           [ 3] 	jmp df_trap_monitor
f87b :                       df_trap_normal
f87b : a000             [ 2] 	ldy #0
f87d :                       df_show_err_find
f87d : e000             [ 2] 	cpx #0
f87f : f018             [ 3] 	beq df_show_err_found
                             	; If on a zero, then error table exhausted
                             	; so drop in to the monitor
f881 : b1a1             [ 5] 	lda (df_tmpptra),y
f883 : f077             [ 3] 	beq df_trap_monitor
f885 :                       df_show_err_skip
                             	_incZPWord df_tmpptra
                             
f88b : b1a1             [ 5] 	lda (df_tmpptra),y
f88d : d0f6             [ 3] 	bne df_show_err_skip
                             	_incZPWord df_tmpptra
                             
f895 : ca               [ 2] 	dex
f896 : 4c7df8           [ 3] 	jmp df_show_err_find
f899 :                       df_show_err_found
f899 : a6a1             [ 3] 	ldx df_tmpptra
f89b : a5a2             [ 3] 	lda df_tmpptra+1
f89d : 208cc4           [ 6] 	jsr io_print_line
f8a0 : a257             [ 2] 	ldx #lo(df_tk_error_error)
f8a2 : a9f8             [ 2] 	lda #hi(df_tk_error_error)
f8a4 : 208cc4           [ 6] 	jsr io_print_line
                             	; if line number <> 0 then print it
f8a7 : a001             [ 2] 	ldy #DFTK_LINNUM
f8a9 : b186             [ 5] 	lda (df_currlin),y
f8ab : aa               [ 2] 	tax
f8ac : c8               [ 2] 	iny
f8ad : b186             [ 5] 	lda (df_currlin),y
f8af : c900             [ 2] 	cmp #0x00
f8b1 : d006             [ 3] 	bne df_show_err_linnum
f8b3 : e000             [ 2] 	cpx #0x00
f8b5 : d002             [ 3] 	bne df_show_err_linnum
f8b7 : f019             [ 3] 	beq df_show_err_fin
f8b9 :                       df_show_err_linnum
                             	_println df_tk_error_inline
                             
f8ce : 18               [ 2] 	clc
f8cf : 20e7c3           [ 6] 	jsr print_a_to_d
f8d2 :                       df_show_err_fin
f8d2 : a488             [ 3] 	ldy df_exeoff
f8d4 : f01d             [ 3] 	beq df_show_err_done
                             	_println df_tk_error_atpos
AS65 Assembler for R6502 [1.42].                                     Page  260
-------------------------------- bank\bank0.s --------------------------------

                             
f8eb : 98               [ 2] 	tya
f8ec : aa               [ 2] 	tax
f8ed : a900             [ 2] 	lda #0
f8ef : 18               [ 2] 	clc
f8f0 : 20e7c3           [ 6] 	jsr print_a_to_d
f8f3 :                       df_show_err_done
f8f3 : a90d             [ 2] 	lda #UTF_CR
f8f5 : 203ec4           [ 6] 	jsr io_put_ch
f8f8 : 18               [ 2] 	clc
                             	; back to editor
f8f9 : 4c55df           [ 3] 	jmp df_pg_dflat
                             
                             
                             ; For unknown errors, jump to monitor
f8fc :                       df_trap_monitor
                             	; Print PC
                             	_println_low df_msg_pc
                             
f903 : a563             [ 3] 	lda df_brkpc+1
f905 : 2068c1           [ 6] 	jsr utilPrintA
f908 : a562             [ 3] 	lda df_brkpc
f90a : 2068c1           [ 6] 	jsr utilPrintA
f90d : 2058c1           [ 6] 	jsr utilPrintSPC
                             
                             	; Print A
                             	_println_low df_msg_acc
                             
f917 : a53d             [ 3] 	lda num_a
f919 : 2068c1           [ 6] 	jsr utilPrintA
f91c : 2058c1           [ 6] 	jsr utilPrintSPC
                             
                             	; Print X
                             	_println_low df_msg_xreg
                             
f926 : a53e             [ 3] 	lda num_a+1
f928 : 2068c1           [ 6] 	jsr utilPrintA
f92b : 2058c1           [ 6] 	jsr utilPrintSPC
                             
                             	; Print Y
                             	_println_low df_msg_yreg
                             
f935 : a53f             [ 3] 	lda num_a+2
f937 : 2068c1           [ 6] 	jsr utilPrintA
f93a : 2060c1           [ 6] 	jsr utilPrintCRLF
                             
f93d : 2026e8           [ 6] 	jsr df_rt_monitor
                             	; back to editor
f940 : 4c55df           [ 3] 	jmp df_pg_dflat
                             
f943 :                       df_msg_pc
f943 : 50433a00              	db "PC:\x0"
f947 :                       df_msg_acc
f947 : 413a00                	db "A:\x0"
f94a :                       df_msg_xreg
f94a : 583a00                	db "X:\x0"
f94d :                       df_msg_yreg
f94d : 593a00                	db "Y:\x0"
                             
                             	include	"dflat/asm.s"
                             ;************************************************
                             ;*
AS65 Assembler for R6502 [1.42].                                     Page  261
-------------------------------- bank\bank0.s --------------------------------

                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  ASM.S
                             ;*  This is the main controller code file for the
                             ;*  This file includes all the required source fi
                             ;*	in addition to dflat.s
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code
                             
f950 :                       mod_sz_asm_s
                             
                             	;	dflat.s is already included, so just the addit
                             	include "dflat/asm.i"
                             ;* Addressing modes - 15 in total, 16 with direct
                             ;*  0   Nothing
                             ;*	1 	Absolute			XXX <word>
                             ;*	2 	Absolute,X			XXX <word>,x
                             ;*	3 	Absolute,Y			XXX <word>,y
                             ;*	4	Zeropage			XXX	<byte>
                             ;*	5	Zeropage,X			XXX	<byte>,x
                             ;*	6	Zeropage,Y			XXX	<byte>,y
                             ;*	7	Indirect			XXX	(<byte>)
                             ;*	8	Indirect,X			XXX	(<byte>,x)
                             ;*	9	Indirect,Y			XXX	(<byte>),y
                             ;*	A	Absolute indirect	XXX	(<word>)
                             ;*	B	Absolute indirect,x	XXX	(<word>,x)
                             ;*	C	Immediate			XXX #<byte>
                             ;*	D	Accumulator			XXX (same as implied)
                             ;*	E	Implied				XXX
                             ;*	F	Relative			XXX	<byte>
                             ;*	10	Assembler directive	XXX .......
                             
0000 =                       AM_NONE		= 0
0001 =                       AM_ABS	 	= 1
0002 =                       AM_ABSX		= 2
0003 =                       AM_ABSY		= 3
0004 =                       AM_ZP		= 4
0005 =                       AM_ZPX		= 5
0006 =                       AM_ZPY		= 6
0007 =                       AM_ZPIND	= 7
0008 =                       AM_ZPINDX	= 8
0009 =                       AM_ZPINDY	= 9
000a =                       AM_ABSIND	= 10
000b =                       AM_ABSINDX	= 11
000c =                       AM_IMM		= 12
000d =                       AM_ACC		= 13
000d =                       AM_IMP		= AM_ACC
000f =                       AM_REL		= 15
0010 =                       AM_DIR		= 16
                             
                             
                             
                             	include "dflat/tkasm.s"
                             ;************************************************
                             ;*
AS65 Assembler for R6502 [1.42].                                     Page  262
-------------------------------- bank\bank0.s --------------------------------

                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  ASM.S
                             ;*	Module that implements tokenisation of the ass
                             ;* 	The assembler is an extension to dflat, almos
                             ;*	almost a language within a language, as it has
                             ;*	own symbol tables to allow adding new keywords
                             ;*	running out of space in the main symtol table 
                             ;*	for normal 6502 asembler syntax which is at od
                             ;*	regular dflat.
                             ;*	Hence, this module has to do its own additiona
                             ;*	to tokenise the assembly.
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code  
                             
f950 :                       mod_sz_tkasm_s
                             
                             	; if didn't find regular keywords then try assen
f950 :                       df_tk_asm_parse_command
                             	; skip the white space after the dot
f950 : 2010d7           [ 6] 	jsr df_tk_skip_ws
                             	; find the assembler symbol
f953 : 207ef9           [ 6] 	jsr df_tk_asm_matchtok
                             	; if not found then must be a label assignment
f956 : b021             [ 3] 	bcs df_tk_asm_parse_command_symbol
                             	; Get the assembler symbol and put the token
f958 : a583             [ 3] 	lda df_symoff
                             	; Set the MSB
f95a : 0980             [ 2] 	ora #0x80
f95c : 20bad6           [ 6] 	jsr df_tk_put_tok
                             	; check the first addressing mode code
                             	; remember to jump over the offset byte
f95f : a001             [ 2] 	ldy #1
f961 : b181             [ 5] 	lda (df_symtab),y
                             	; Directive?
f963 : c910             [ 2] 	cmp #AM_DIR
f965 : d00c             [ 3] 	bne df_tk_asm_mnemonic
                             	; if directive then process it
f967 : a583             [ 3] 	lda df_symoff
f969 : 20d5f9           [ 6] 	jsr df_tk_asm_exec_parser
f96c : b004             [ 3] 	bcs df_tk_asm_parse_command_err
                             	; [1] ignore white space but keep it
f96e : 2010d7           [ 6] 	jsr df_tk_skip_ws
                             	; No error in parsing this command
f971 : 18               [ 2] 	clc
f972 :                       df_tk_asm_parse_command_err
f972 : 60               [ 6] 	rts
f973 :                       df_tk_asm_mnemonic
                             	; for all nmemonics, work out the addressing mod
f973 : 20e4f9           [ 6] 	jsr df_tk_asm_addr_mode
f976 : b0fa             [ 3] 	bcs df_tk_asm_parse_command_err
f978 : 60               [ 6] 	rts
f979 :                       df_tk_asm_parse_command_symbol
                             	; No mask
f979 : a900             [ 2] 	lda #0
AS65 Assembler for R6502 [1.42].                                     Page  263
-------------------------------- bank\bank0.s --------------------------------

f97b : 4cfad7           [ 3] 	jmp df_tk_var
                             
                             
                             ;****************************************
                             ;* df_tk_asm_matchtok
                             ;* Try and find a token match against the table d
                             ;* Input:
                             ;*			Current df_linbuff and df_linoff
                             ;* Return: 	CC = No Error, CS = Error
                             ;*			df_linoff points to next char if CC else unc
                             ;****************************************
f97e :                       df_tk_asm_matchtok
                             	; Start at token symbols beginning
f97e : a97d             [ 2] 	lda #lo(df_asm_tokensyms)
f980 : 8581             [ 3] 	sta df_symtab
f982 : a9fd             [ 2] 	lda #hi(df_asm_tokensyms)
f984 : 8582             [ 3] 	sta df_symtab+1
f986 : a900             [ 2] 	lda #0
f988 : 8583             [ 3] 	sta df_symoff
f98a : a200             [ 2] 	ldx #0
f98c :                       df_tk_asm_checknexttok
                             	; From the line buffer current pointer
                             	; Check for a token match
f98c : a47c             [ 3] 	ldy df_linoff
f98e :                       df_tk_asm_checktokch
                             	; Get symtable char
f98e : a181             [ 6] 	lda (df_symtab,x)
                             	; if less than ascii ' ' then reached end of
                             	; this symbol and everything matched so found!
f990 : c920             [ 2] 	cmp #' '
f992 : 9033             [ 3] 	bcc df_tk_asm_symfound
                             	; Else compare with current line buffer char
f994 : d90004           [ 4] 	cmp df_linbuff,y
                             	; If chars not match then this symbol fails
f997 : d00a             [ 3] 	bne df_tk_asm_symnomatch
                             	; else more chars to match
                             	; so increment line buffer pointers
                             	_incZPWord df_symtab
                             
f99f : c8               [ 2] 	iny
f9a0 : 4c8ef9           [ 3] 	jmp df_tk_asm_checktokch
f9a3 :                       df_tk_asm_symnomatch
                             	; Increment symbol counter to next symbol
f9a3 : e683             [ 5] 	inc df_symoff
f9a5 :                       df_tk_asm_symnextentry
f9a5 : a181             [ 6] 	lda (df_symtab,x)
                             	; End of symbol is < ' '
f9a7 : c920             [ 2] 	cmp #' '
f9a9 : 9009             [ 3] 	bcc  df_tk_asm_foundsymend
                             	_incZPWord df_symtab
                             
f9b1 : 4ca5f9           [ 3] 	jmp df_tk_asm_symnextentry
f9b4 :                       df_tk_asm_foundsymend
                             	; Now at the offset to jump over addressing
                             	; mode and opcode values. Add offset to ptr
                             	; remember than C is clear and A has offset
                             	; set C so always jump over the offset
f9b4 : 38               [ 2] 	sec
f9b5 : 6581             [ 3] 	adc df_symtab
f9b7 : 8581             [ 3] 	sta df_symtab
f9b9 : a582             [ 3] 	lda df_symtab+1
f9bb : 6900             [ 2] 	adc #0
AS65 Assembler for R6502 [1.42].                                     Page  264
-------------------------------- bank\bank0.s --------------------------------

f9bd : 8582             [ 3] 	sta df_symtab+1
                             	; If next char is not zero then
                             	; try and match with line buffer
f9bf : a181             [ 6] 	lda (df_symtab,x)
f9c1 : d0c9             [ 3] 	bne df_tk_asm_checknexttok
                             	; else symbol table exhausted
                             	; so no match found
                             	; Zero symbol counter
f9c3 : 8583             [ 3] 	sta df_symoff		; Relies on A=0
                             	; Set C to indicate error (no match)
f9c5 : 38               [ 2] 	sec
f9c6 : 60               [ 6] 	rts
f9c7 :                       df_tk_asm_symfound
                             	; Full match with keyword in symtable but
                             	; check the next buffer char is not alphanum
                             	; as this could be part of a symbol
                             	; Point to next buffer char in any case
                             	; y already points to char after keyword
f9c7 : b90004           [ 4] 	lda df_linbuff,y
                             	; if it is an alphanum then
f9ca : 2004d7           [ 6] 	jsr df_tk_isalphanum
                             	; do not count as a match
f9cd : b0d4             [ 3] 	bcs df_tk_asm_symnomatch
                             	; Save line buffer pointer (points to next char)
                             	; Clear C to indicate success (match)
f9cf : 847c             [ 3] 	sty df_linoff
f9d1 : a583             [ 3] 	lda df_symoff
                             	; df_symtab points to the offset
f9d3 :                       df_tk_asm_addr_mode_ok
f9d3 : 18               [ 2] 	clc
f9d4 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* df_tk_asm_exec_parser
                             ;* Execute parse routine for this statement
                             ;* Input: a is the token found
                             ;* Return: CC = Parsed ok, CS = Error
                             ;****************************************
f9d5 :                       df_tk_asm_exec_parser
f9d5 : 0a               [ 2] 	asl a
f9d6 : aa               [ 2] 	tax
f9d7 : bda9ff           [ 4] 	lda df_tk_asm_tokenjmp,x
f9da : 85a1             [ 3] 	sta df_tmpptra
f9dc : bdaaff           [ 4] 	lda df_tk_asm_tokenjmp+1,x
f9df : 85a2             [ 3] 	sta df_tmpptra+1
f9e1 : 6ca100           [ 6] 	jmp (df_tmpptra)
                             
                             
                             ;****************************************
                             ;* df_tk_asm_addr_mode
                             ;* Tokenise the addressing mode
                             ;* Input: a is the token found
                             ;* Return: CC = Parsed ok, CS = Error
                             ;****************************************
f9e4 :                       df_tk_asm_addr_mode
f9e4 : 2010d7           [ 6] 	jsr df_tk_skip_ws		;Skip whitespace
f9e7 : c900             [ 2] 	cmp #0					;End of line?
f9e9 : f0e8             [ 3] 	beq df_tk_asm_addr_mode_ok
f9eb : c93a             [ 2] 	cmp #':'				;End of statement?
f9ed : f0e4             [ 3] 	beq df_tk_asm_addr_mode_ok
f9ef : a923             [ 2] 	lda #'#'				; Check for immediate
f9f1 : 2042d7           [ 6] 	jsr df_tk_expect_tok
AS65 Assembler for R6502 [1.42].                                     Page  265
-------------------------------- bank\bank0.s --------------------------------

f9f4 : b003             [ 3] 	bcs df_tk_asm_addr_mode_1
f9f6 : 4c19fa           [ 3] 	jmp df_tk_imm		; Process immediate
f9f9 :                       df_tk_asm_addr_mode_1
f9f9 : a928             [ 2] 	lda #'('				; One of indirect modes?
f9fb : 2042d7           [ 6] 	jsr df_tk_expect_tok
f9fe : b003             [ 4] 	bcs df_tk_asm_addr_mode_2
fa00 : 4c1cfa           [ 3] 	jmp df_tk_indirect
fa03 :                       df_tk_asm_addr_mode_2
                             	; here just a regular address
                             	; Just one expression expected
fa03 : 2036d9           [ 6] 	jsr df_tk_expression
                             	; Is there a comma after the expression
fa06 : a92c             [ 2] 	lda #','
fa08 : 2042d7           [ 6] 	jsr df_tk_expect_tok
fa0b : b0c6             [ 4] 	bcs df_tk_asm_addr_mode_ok
                             	; must be x or y
fa0d : a978             [ 2] 	lda #'x'
fa0f : 2042d7           [ 6] 	jsr df_tk_expect_tok
fa12 : 90bf             [ 4] 	bcc df_tk_asm_addr_mode_ok
                             	; got to here, must be y
fa14 : a979             [ 2] 	lda #'y'
fa16 : 4c4ed7           [ 3] 	jmp df_tk_expect_tok_err
                             	
                             	
                             ;* Tokenise immediate addressing mode	
fa19 :                       df_tk_imm
                             	; Just one expression expected
fa19 : 4c36d9           [ 3] 	jmp df_tk_expression
                             	
                             ;* Tokenise indirect
fa1c :                       df_tk_indirect
                             	; Just one expression expected
fa1c : 2036d9           [ 6] 	jsr df_tk_expression
                             	; Is there a comma after the expression
fa1f : a92c             [ 2] 	lda #','
fa21 : 2042d7           [ 6] 	jsr df_tk_expect_tok
                             	; if not then might be indirect Y
fa24 : b00a             [ 3] 	bcs df_tk_indirect_y
                             	; Else must have be indirect "x)"
fa26 : a978             [ 2] 	lda #'x'
fa28 : 204ed7           [ 6] 	jsr df_tk_expect_tok_err
fa2b : a929             [ 2] 	lda #')'
fa2d : 4c4ed7           [ 3] 	jmp df_tk_expect_tok_err
                             	
fa30 :                       df_tk_indirect_y
                             	; Definitely has a close bracket
fa30 : a929             [ 2] 	lda #')'
fa32 : 204ed7           [ 6] 	jsr df_tk_expect_tok_err
                             	; Is there a comma after the expression
fa35 : a92c             [ 2] 	lda #','
fa37 : 2042d7           [ 6] 	jsr df_tk_expect_tok
fa3a : b005             [ 3] 	bcs df_tk_indirect_done
                             	; if comma then must be indirect y
fa3c : a979             [ 2] 	lda #'y'
fa3e : 4c4ed7           [ 3] 	jmp df_tk_expect_tok_err
                             
fa41 :                       df_tk_indirect_done
fa41 : 18               [ 2] 	clc
fa42 : 60               [ 6] 	rts
                             	
                             
                             	
AS65 Assembler for R6502 [1.42].                                     Page  266
-------------------------------- bank\bank0.s --------------------------------

                             
                             
                             ;************************************************
                             ;*           TOKENISATION SUBROUTINES
                             ;************************************************
                             
                             
                             ;* HANDLE DIRECTIVES
                             
                             ;* All tokenisation is part of regular toksub rou
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
fa43 :                       mod_sz_tkasm_e
                             
                             
                             	include "dflat/rtasm.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  RTASM.S
                             ;*  Module that implements the runtime execution 
                             ;*  assembler.
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code  
                             
fa43 :                       mod_sz_rtasm_s
                             
fa43 :                       df_rt_asm_assemble
AS65 Assembler for R6502 [1.42].                                     Page  267
-------------------------------- bank\bank0.s --------------------------------

                             	; check if >=0x80 (directive or mnemonic)
fa43 : a488             [ 3] 	ldy df_exeoff
fa45 : b186             [ 5] 	lda (df_currlin),y
fa47 : c980             [ 2] 	cmp #0x80
fa49 : 9009             [ 3] 	bcc df_rt_asm_do_label
fa4b : 2058fa           [ 6] 	jsr df_rt_asm_command
fa4e : 205bfc           [ 6] 	jsr df_rt_asm_printCR
fa51 : 4c57fa           [ 3] 	jmp df_rt_asm_assemble_done
fa54 :                       df_rt_asm_do_label
fa54 : 207cfa           [ 6] 	jsr df_rt_asm_label
fa57 :                       df_rt_asm_assemble_done
                             	; any clean up here
fa57 : 60               [ 6] 	rts
                             
                             ; Jump to mnemonic or 
                             ; directive with index in A ignoring MSB
fa58 :                       df_rt_asm_command
fa58 : 297f             [ 2] 	and #0x7f
fa5a : 48               [ 3] 	pha
fa5b : aa               [ 2] 	tax
                             	; Point to Xth symtable entry of addr modes and 
fa5c : 202bfd           [ 6] 	jsr df_rt_asm_skip_to_sym
                             
                             	; Get first addressing mode (ignoring offset byt
fa5f : a001             [ 2] 	ldy #1
fa61 : b181             [ 5] 	lda (df_symtab),y
                             	; is it a directive?
fa63 : c910             [ 2] 	cmp #AM_DIR
                             	; if directive
fa65 : f003             [ 3] 	beq df_rt_asm_dir
                             	; Else must be a normal mnemonic
fa67 : 4c45fb           [ 3] 	jmp df_rt_asm_mnem
                             
                             ; Jump to the appropriate directive
fa6a :                       df_rt_asm_dir
                             	; Get the index and *2
                             	; to get jump vector
fa6a : 68               [ 4] 	pla
fa6b : 0a               [ 2] 	asl a
fa6c : aa               [ 2] 	tax
                             	; jump over directive code
fa6d : e688             [ 5] 	inc df_exeoff
                             	; jump to directive handler
fa6f : bdb3ff           [ 4] 	lda df_rt_asm_tokenjmp,x
fa72 : 85a1             [ 3] 	sta df_tmpptra
fa74 : bdb4ff           [ 4] 	lda df_rt_asm_tokenjmp+1,x
fa77 : 85a2             [ 3] 	sta df_tmpptra+1
fa79 : 6ca100           [ 6] 	jmp (df_tmpptra)
                             
                             ; Process label
                             ; Set the label to the PC
fa7c :                       df_rt_asm_label
                             	; Get the address of the variable in A,X
fa7c : 204ced           [ 6] 	jsr df_rt_generate_lvar
fa7f : 869e             [ 3] 	stx df_asmoprnd
fa81 : 859f             [ 3] 	sta df_asmoprnd+1
                             	; Assign to value of PC
fa83 : a000             [ 2] 	ldy #0
fa85 : a599             [ 3] 	lda df_asmpc
fa87 : 919e             [ 5] 	sta (df_asmoprnd),y
fa89 : a59a             [ 3] 	lda df_asmpc+1
fa8b : c8               [ 2] 	iny
AS65 Assembler for R6502 [1.42].                                     Page  268
-------------------------------- bank\bank0.s --------------------------------

fa8c : 919e             [ 5] 	sta (df_asmoprnd),y
fa8e : 60               [ 6] 	rts	
                             
                             ;* Set the code origin
fa8f :                       df_rt_asm_org
                             	; Get the address from expression
fa8f : 2008fd           [ 6] 	jsr df_rt_asm_get_operand
                             	; Put this in to PC
fa92 : a59e             [ 3] 	lda df_asmoprnd
fa94 : 8599             [ 3] 	sta df_asmpc
fa96 : a59f             [ 3] 	lda df_asmoprnd+1
fa98 : 859a             [ 3] 	sta df_asmpc+1
fa9a : a903             [ 2] 	lda #3
fa9c : 85a0             [ 3] 	sta df_asmlen
fa9e : 2019fc           [ 6] 	jsr df_rt_asm_printPC
faa1 : 60               [ 6] 	rts
                             
                             ; Set the assembly option
                             ; Bit 0 set = Print code to console
                             ; But 1 set = Write code to memory
                             ; Be sure to run 2 non-write passes
                             ; before a write pass
                             ; First pass may result in ZP used a lot
                             ; Second pass resolves forward refs to ABS
                             ; Final write pass then stores the code
faa2 :                       df_rt_asm_opt
                             	; Get the value from expression
faa2 : 2008fd           [ 6] 	jsr df_rt_asm_get_operand
                             	; Put this in to OPT
faa5 : a59e             [ 3] 	lda df_asmoprnd
faa7 : 859b             [ 3] 	sta df_asmopt
faa9 : 60               [ 6] 	rts
                             
                             ; dw and db handled here
                             ; keep going through comma separated
                             ; list and write bytes or words
                             ; string expansion also handled
faaa :                       df_rt_asm_db
faaa : a902             [ 2] 	lda #2
faac : 2c                    	db	0x2c			; BIT abs to ignore next 2 bytes
faad :                       df_rt_asm_dw
faad : a903             [ 2] 	lda #3
faaf :                       df_rt_asm_db_start
faaf : 85a0             [ 3] 	sta df_asmlen
fab1 : 2019fc           [ 6] 	jsr df_rt_asm_printPC
fab4 : 2036fc           [ 6] 	jsr df_rt_asm_printSPC
fab7 :                       df_rt_asm_data
fab7 : 2075e0           [ 6] 	jsr df_rt_neval		; Evaluate expression
faba : 203bf7           [ 6] 	jsr df_ost_peekType	; What is the type
fabd : c980             [ 2] 	cmp #0x80			; If string
fabf : b00d             [ 3] 	bcs df_rt_asm_string
fac1 : 2041f7           [ 6] 	jsr df_ost_popInt	; else get number in A,X
fac4 : 869e             [ 3] 	stx df_asmoprnd		; store low value
fac6 : 859f             [ 3] 	sta df_asmoprnd+1	; store high value
fac8 : 20f6fa           [ 6] 	jsr df_rt_asm_data_write
facb : 4cebfa           [ 3] 	jmp df_rt_asm_data_next
face :                       df_rt_asm_string
face : 2049f7           [ 6] 	jsr df_ost_popPtr	; pop string pointer
fad1 : 86a1             [ 3] 	stx df_tmpptra		; save pointer to tmpa
fad3 : 85a2             [ 3] 	sta df_tmpptra+1
fad5 :                       df_rt_asm_string_ch
fad5 : a000             [ 2] 	ldy #0
AS65 Assembler for R6502 [1.42].                                     Page  269
-------------------------------- bank\bank0.s --------------------------------

fad7 : b1a1             [ 5] 	lda (df_tmpptra),y	; Get string char, 0=done
fad9 : f010             [ 3] 	beq df_rt_asm_data_next
fadb : 859e             [ 3] 	sta df_asmoprnd		; Save as operand
fadd : 869f             [ 3] 	stx df_asmoprnd+1	; High is always zero
fadf : 20f6fa           [ 6] 	jsr df_rt_asm_data_write
                             	_incZPWord df_tmpptra
                             
fae8 : 4cd5fa           [ 3] 	jmp df_rt_asm_string_ch
faeb :                       df_rt_asm_data_next
faeb : 2082ed           [ 6] 	jsr df_rt_eos		; End?
faee : b005             [ 3] 	bcs df_rt_asm_data_done
faf0 : e688             [ 5] 	inc df_exeoff		; Jump over ','
faf2 : 4cb7fa           [ 3] 	jmp df_rt_asm_data
faf5 :                       df_rt_asm_data_done
faf5 : 60               [ 6] 	rts	
                             
                             ; Write one db or dw value
                             ; Check for value too big for db
                             ; Advance PC by df_asmlen
faf6 :                       df_rt_asm_data_write
faf6 : 2040fc           [ 6] 	jsr df_rt_asm_printOPR
faf9 :                       df_rt_asm_data_write_skip1
faf9 : a902             [ 2] 	lda #2
fafb : 259b             [ 3] 	and df_asmopt
fafd : f015             [ 4] 	beq df_rt_asm_data_write_skip2
faff : a59e             [ 3] 	lda df_asmoprnd
fb01 : a000             [ 2] 	ldy #0
fb03 : 9199             [ 5] 	sta (df_asmpc),y
fb05 : c8               [ 2] 	iny
fb06 : a902             [ 2] 	lda #2
fb08 : c5a0             [ 3] 	cmp df_asmlen
fb0a : f004             [ 3] 	beq df_rt_asm_data_write_hi
fb0c : a59f             [ 3] 	lda df_asmoprnd+1
fb0e : d015             [ 3] 	bne df_rt_asm_data_write_err
fb10 :                       df_rt_asm_data_write_hi
fb10 : a59f             [ 3] 	lda df_asmoprnd+1
fb12 : 9199             [ 5] 	sta (df_asmpc),y
fb14 :                       df_rt_asm_data_write_skip2
fb14 : a5a0             [ 3] 	lda df_asmlen
fb16 : 38               [ 2] 	sec					; Add 1 less!
fb17 : e901             [ 2] 	sbc #1
fb19 : 18               [ 2] 	clc
fb1a : 6599             [ 3] 	adc df_asmpc
fb1c : 8599             [ 3] 	sta df_asmpc
fb1e : a59a             [ 3] 	lda df_asmpc+1
fb20 : 6900             [ 2] 	adc #0
fb22 : 859a             [ 3] 	sta df_asmpc+1
fb24 : 60               [ 6] 	rts
fb25 :                       df_rt_asm_data_write_err	
                             	SWBRK DFERR_QUANTITY
                             
                             	
                             	
fb27 :                       df_rt_asm_ds
fb27 : 2019fc           [ 6] 	jsr df_rt_asm_printPC
fb2a : 2036fc           [ 6] 	jsr df_rt_asm_printSPC
                             	; Get the address from expression
fb2d : 2008fd           [ 6] 	jsr df_rt_asm_get_operand
                             	; ADD this in to PC
fb30 : 18               [ 2] 	clc
fb31 : a59e             [ 3] 	lda df_asmoprnd
fb33 : 6599             [ 3] 	adc df_asmpc
AS65 Assembler for R6502 [1.42].                                     Page  270
-------------------------------- bank\bank0.s --------------------------------

fb35 : 8599             [ 3] 	sta df_asmpc
fb37 : a59f             [ 3] 	lda df_asmoprnd+1
fb39 : 659a             [ 3] 	adc df_asmpc+1
fb3b : 859a             [ 3] 	sta df_asmpc+1
                             	; len=1 for printing
fb3d : a903             [ 2] 	lda #3
fb3f : 85a0             [ 3] 	sta df_asmlen
fb41 : 2040fc           [ 6] 	jsr df_rt_asm_printOPR
fb44 : 60               [ 6] 	rts
                             
                             
                             ; Process a normal assembler mnemonic
fb45 :                       df_rt_asm_mnem
fb45 : 68               [ 4] 	pla				; Throw away previous temp variable
                             	; jump over mnemonic code
fb46 : e688             [ 5] 	inc df_exeoff
                             	; work out the addressing mode and get operand
fb48 : 208bfc           [ 6] 	jsr df_rt_asm_addrmode
                             
fb4b :                       df_rt_asm_mnem_try
fb4b : a59c             [ 3] 	lda df_asmadmd					; With the addressing mode
fb4d : 2013fd           [ 6] 	jsr df_rt_asm_find_addr_mode	; Find it for this 
fb50 : c900             [ 2] 	cmp #AM_NONE					; Exists?
fb52 : d014             [ 3] 	bne	df_rt_asm_mnem_chk			; If does then check it
fb54 :                       df_rt_asm_check_alt
fb54 : a69c             [ 3] 	ldx df_asmadmd					; Use ad mode as an index
fb56 : bd6cfd           [ 4] 	lda df_asm_altaddrmode,x		; Else get alternate
fb59 : c900             [ 2] 	cmp #AM_NONE					; Is there an alternate?
fb5b : f02e             [ 3] 	beq df_rt_asm_mnem_err			; If no then error
fb5d : 2013fd           [ 6] 	jsr df_rt_asm_find_addr_mode	; Check does mode e
fb60 : c900             [ 2] 	cmp #AM_NONE					; this instruction
fb62 : f027             [ 3] 	beq df_rt_asm_mnem_err			; if no then error
fb64 : c59c             [ 3] 	cmp df_asmadmd					; Same as the original?
fb66 : f00e             [ 3] 	beq df_rt_asm_mnem_done			; if so then done
fb68 :                       df_rt_asm_mnem_chk
fb68 : 859c             [ 3] 	sta df_asmadmd					; This is the final mode
fb6a : aa               [ 2] 	tax								; Get the length
fb6b : bd5bfd           [ 4] 	lda df_asm_length,x
fb6e : a69f             [ 3] 	ldx df_asmoprnd+1				; Is operand hi non-zero?
fb70 : f004             [ 3] 	beq df_rt_asm_mnem_done			; If zero then done
fb72 : c903             [ 2] 	cmp #3							; Else must be len 3?
fb74 : d0de             [ 3] 	bne df_rt_asm_check_alt			; Try an alternate
fb76 :                       df_rt_asm_mnem_done
fb76 : a69c             [ 3] 	ldx df_asmadmd					; Get the final mode index
fb78 : bd5bfd           [ 4] 	lda df_asm_length,x				; Get the length
fb7b : 85a0             [ 3] 	sta df_asmlen
fb7d : a59c             [ 3] 	lda df_asmadmd					; Get the final mode
fb7f : 2013fd           [ 6] 	jsr df_rt_asm_find_addr_mode	; Get the Y index o
                             	; Ok now get the opcode
fb82 : c8               [ 2] 	iny
fb83 : b181             [ 5] 	lda (df_symtab),y
fb85 : 859d             [ 3] 	sta df_asmopcde
                             	; Now have all information to assemble
fb87 : 208dfb           [ 6] 	jsr df_rt_asm_encode
                             	
fb8a : 60               [ 6] 	rts
fb8b :                       df_rt_asm_mnem_err
                             	SWBRK DFERR_SYNTAX
                             
                             	
                             ; Take assembler data and encode it
                             ; depending on the current option
AS65 Assembler for R6502 [1.42].                                     Page  271
-------------------------------- bank\bank0.s --------------------------------

                             ; Option 0 = No write
                             ; Option 1 = No write, Print
                             ; Option 2 = Write
                             ; Option 3 = Write, Print
fb8d :                       df_rt_asm_encode
                             	; If relative then need to calculate offset
fb8d : a59c             [ 3] 	lda df_asmadmd
fb8f : c90f             [ 2] 	cmp #AM_REL
fb91 : d036             [ 3] 	bne df_rt_asm_encode_skiprel
                             	; If high byte is 0 then do nothing
fb93 : a59f             [ 3] 	lda df_asmoprnd+1
fb95 : f032             [ 3] 	beq df_rt_asm_encode_skiprel
                             	; else calculate distance from PC
                             	; first take 2 off operand
fb97 : 38               [ 2] 	sec
fb98 : a59e             [ 3] 	lda df_asmoprnd
fb9a : e902             [ 2] 	sbc #2
fb9c : 859e             [ 3] 	sta df_asmoprnd
fb9e : a59f             [ 3] 	lda df_asmoprnd+1
fba0 : e900             [ 2] 	sbc #0
fba2 : 859f             [ 3] 	sta df_asmoprnd+1
                             	; now calculate current operand-PC
fba4 : 38               [ 2] 	sec
fba5 : a59e             [ 3] 	lda df_asmoprnd
fba7 : e599             [ 3] 	sbc df_asmpc
fba9 : 859e             [ 3] 	sta df_asmoprnd
fbab : a59f             [ 3] 	lda df_asmoprnd+1
fbad : e59a             [ 3] 	sbc df_asmpc+1
                             	; put 0 in high operand storage
                             	; but A contains result of subtraction
                             	; so check that for out of range
fbaf : a000             [ 2] 	ldy #0
fbb1 : 849f             [ 3] 	sty df_asmoprnd+1
                             	; detect too far; high byte is either 0 or 255
                             	; else it's an error
fbb3 : c900             [ 2] 	cmp #0
fbb5 : f00a             [ 3] 	beq df_rt_asm_encode_relpos
fbb7 : c9ff             [ 2] 	cmp #0xff
fbb9 : d00a             [ 3] 	bne df_rt_asm_encode_relfar
                             	; if high is ff then low must be same -ve
fbbb : a59e             [ 3] 	lda df_asmoprnd
fbbd : 300a             [ 3] 	bmi df_rt_asm_encode_skiprel
                             	; else error
fbbf : 1004             [ 3] 	bpl df_rt_asm_encode_relfar
fbc1 :                       df_rt_asm_encode_relpos
                             	; if high is 00 then low must be same +ve
fbc1 : a59e             [ 3] 	lda df_asmoprnd
fbc3 : 1004             [ 3] 	bpl df_rt_asm_encode_skiprel
                             	; else error
fbc5 :                       df_rt_asm_encode_relfar
                             	; set to non-zero value
fbc5 : a9ff             [ 2] 	lda #0xff
fbc7 : 859f             [ 3] 	sta df_asmoprnd+1
fbc9 :                       df_rt_asm_encode_skiprel
                             	; Only write the code if bit 1=1
fbc9 : a902             [ 2] 	lda #0x02
fbcb : 259b             [ 3] 	and df_asmopt
fbcd : f028             [ 3] 	beq df_rt_asm_encode_print
fbcf : a000             [ 2] 	ldy #0
fbd1 : a59d             [ 3] 	lda df_asmopcde
fbd3 : 9199             [ 5] 	sta (df_asmpc),y
fbd5 : a5a0             [ 3] 	lda df_asmlen
AS65 Assembler for R6502 [1.42].                                     Page  272
-------------------------------- bank\bank0.s --------------------------------

fbd7 : c901             [ 2] 	cmp #1						; No operand
fbd9 : f01c             [ 3] 	beq df_rt_asm_encode_print
fbdb : c903             [ 2] 	cmp #3						; Word operand
fbdd : f00e             [ 3] 	beq df_rt_asm_encode_writeword
                             	; byte operand, high byte must be zero
fbdf : a59f             [ 3] 	lda df_asmoprnd+1
fbe1 : f002             [ 3] 	beq df_rt_asm_encode_writebyte
                             	SWBRK DFERR_QUANTITY
                             
fbe5 :                       df_rt_asm_encode_writebyte
fbe5 : c8               [ 2] 	iny 
fbe6 : a59e             [ 3] 	lda df_asmoprnd
fbe8 : 9199             [ 5] 	sta (df_asmpc),y
fbea : 4cf7fb           [ 3] 	jmp df_rt_asm_encode_print
fbed :                       df_rt_asm_encode_writeword
fbed : c8               [ 2] 	iny 
fbee : a59e             [ 3] 	lda df_asmoprnd
fbf0 : 9199             [ 5] 	sta (df_asmpc),y
fbf2 : c8               [ 2] 	iny 
fbf3 : a59f             [ 3] 	lda df_asmoprnd+1
fbf5 : 9199             [ 5] 	sta (df_asmpc),y	
fbf7 :                       df_rt_asm_encode_print
fbf7 : 2009fc           [ 6] 	jsr df_rt_asm_print_mmen
                             	; advance pc
fbfa : 18               [ 2] 	clc
fbfb : a599             [ 3] 	lda df_asmpc
fbfd : 65a0             [ 3] 	adc df_asmlen
fbff : 8599             [ 3] 	sta df_asmpc
fc01 : a59a             [ 3] 	lda df_asmpc+1
fc03 : 6900             [ 2] 	adc #0
fc05 : 859a             [ 3] 	sta df_asmpc+1
fc07 : 18               [ 2] 	clc
fc08 : 60               [ 6] 	rts
                             
                             
                             ; Print the full 1,2,3 byte instruction
                             ; depends on df_asmopt
fc09 :                       df_rt_asm_print_mmen
fc09 : 2019fc           [ 6] 	jsr df_rt_asm_printPC
fc0c : 2036fc           [ 6] 	jsr df_rt_asm_printSPC
fc0f : 202afc           [ 6] 	jsr df_rt_asm_printOPC
fc12 : 2036fc           [ 6] 	jsr df_rt_asm_printSPC
fc15 : 2040fc           [ 6] 	jsr df_rt_asm_printOPR
fc18 :                       df_rt_asm_print_rts			; Hopefull subs can get her
fc18 : 60               [ 6] 	rts
                             
fc19 :                       df_rt_asm_printPC
                             	; Check the option bit 0 (Print)
fc19 : a901             [ 2] 	lda #0x01
fc1b : 259b             [ 3] 	and df_asmopt
fc1d : f0f9             [ 3] 	beq df_rt_asm_print_rts
                             	; Print current PC
fc1f : a59a             [ 3] 	lda df_asmpc+1
fc21 : 2068c1           [ 6] 	jsr utilPrintA
fc24 : a599             [ 3] 	lda df_asmpc
fc26 : 2068c1           [ 6] 	jsr utilPrintA
fc29 : 60               [ 6] 	rts
                             
fc2a :                       df_rt_asm_printOPC
                             	; Check the option bit 0 (Print)
fc2a : a901             [ 2] 	lda #0x01
fc2c : 259b             [ 3] 	and df_asmopt
AS65 Assembler for R6502 [1.42].                                     Page  273
-------------------------------- bank\bank0.s --------------------------------

fc2e : f0e8             [ 3] 	beq df_rt_asm_print_rts
fc30 : a59d             [ 3] 	lda df_asmopcde
fc32 : 2068c1           [ 6] 	jsr utilPrintA
fc35 : 60               [ 6] 	rts
                             
fc36 :                       df_rt_asm_printSPC
                             	; Check the option bit 0 (Print)
fc36 : a901             [ 2] 	lda #0x01
fc38 : 259b             [ 3] 	and df_asmopt
fc3a : f0dc             [ 3] 	beq df_rt_asm_print_rts
fc3c : 2058c1           [ 6] 	jsr utilPrintSPC
fc3f : 60               [ 6] 	rts
                             	
                             	
fc40 :                       df_rt_asm_printOPR
                             	; Check the option bit 0 (Print)
fc40 : a901             [ 2] 	lda #0x01
fc42 : 259b             [ 3] 	and df_asmopt
fc44 : f0d2             [ 3] 	beq df_rt_asm_print_rts	
fc46 : a5a0             [ 3] 	lda df_asmlen				; check how may operand bytes
fc48 : c901             [ 2] 	cmp #1						; if only opcode, done
fc4a : f0cc             [ 3] 	beq df_rt_asm_print_rts	
fc4c : c902             [ 2] 	cmp #2
fc4e : f005             [ 3] 	beq df_rt_asm_printOPR_1	; if only 2 do low byte
fc50 : a59f             [ 3] 	lda df_asmoprnd+1
fc52 : 2068c1           [ 6] 	jsr utilPrintA
fc55 :                       df_rt_asm_printOPR_1
fc55 : a59e             [ 3] 	lda df_asmoprnd
fc57 : 2068c1           [ 6] 	jsr utilPrintA
fc5a : 60               [ 6] 	rts
                             
fc5b :                       df_rt_asm_printCR
                             	; Check the option bit 0 (Print)
fc5b : a901             [ 2] 	lda #0x01
fc5d : 259b             [ 3] 	and df_asmopt
fc5f : f0b7             [ 3] 	beq df_rt_asm_print_rts
fc61 : 2060c1           [ 6] 	jsr utilPrintCRLF
fc64 : 60               [ 6] 	rts
                             
fc65 :                       df_rt_asm_printCH
fc65 : 8538             [ 3] 	sta tmp_d
                             	; Check the option bit 0 (Print)
fc67 : a901             [ 2] 	lda #0x01
fc69 : 259b             [ 3] 	and df_asmopt
fc6b : f0ab             [ 3] 	beq df_rt_asm_print_rts
fc6d : a538             [ 3] 	lda tmp_d
fc6f : 4c3ec4           [ 3] 	jmp io_put_ch
fc72 : 60               [ 6] 	rts
                             
                             ; Print an entire line, but save df_exeoff
fc73 :                       df_rt_asm_printline
                             	; Check the option bit 0 (Print)
fc73 : a901             [ 2] 	lda #0x01
fc75 : 259b             [ 3] 	and df_asmopt
fc77 : f09f             [ 3] 	beq df_rt_asm_print_rts
fc79 : a588             [ 3] 	lda df_exeoff
fc7b : 48               [ 3] 	pha
                             	; use df_tmpptra
                             	_cpyZPWord df_currlin, df_tmpptra
                             
fc84 : 20fcee           [ 6] 	jsr df_rt_list_line_only
fc87 : 68               [ 4] 	pla
AS65 Assembler for R6502 [1.42].                                     Page  274
-------------------------------- bank\bank0.s --------------------------------

fc88 : 8588             [ 3] 	sta df_exeoff
fc8a : 60               [ 6] 	rts
                             
                             
                             ; Calculate the addressing mode
                             ; Populate the operand as needed
                             ; A and df_asmadmd contain Addressing Mode
fc8b :                       df_rt_asm_addrmode	
                             	; Store nothing in address mode
fc8b : a900             [ 2] 	lda #AM_NONE
fc8d : 859c             [ 3] 	sta df_asmadmd
                             	; zero out the operand
fc8f : a900             [ 2] 	lda #0
fc91 : 859e             [ 3] 	sta df_asmoprnd
fc93 : 859f             [ 3] 	sta df_asmoprnd+1
                             	; jump over whitespace
fc95 : 2035e5           [ 6] 	jsr df_rt_skip_ws
fc98 : 2082ed           [ 6] 	jsr df_rt_eos			; End of statement?
fc9b : b00a             [ 3] 	bcs df_rt_asm_AM_IMP
                             	; Check what it is
fc9d : c923             [ 2] 	cmp #'#'				; Immediate?
fc9f : f034             [ 3] 	beq df_rt_asm_AM_IMM
fca1 : c928             [ 2] 	cmp #'('				; Indirect something?
fca3 : f03a             [ 3] 	beq df_rt_asm_AM_INDIRECT
                             	; Must be ABS,ZP or REL
fca5 : d005             [ 3] 	bne df_rt_asm_ABSREL
                             ; Process IMP/ACC
fca7 :                       df_rt_asm_AM_IMP
fca7 : a90d             [ 2] 	lda #AM_IMP
fca9 : 859c             [ 3] 	sta df_asmadmd
fcab : 60               [ 6] 	rts
                             ; Process ABS or REL
fcac :                       df_rt_asm_ABSREL	
                             	; Evaluate operand
fcac : 2008fd           [ 6] 	jsr df_rt_asm_get_operand
fcaf : 2082ed           [ 6] 	jsr df_rt_eos			; End of statement?
fcb2 : b00f             [ 3] 	bcs df_rt_asm_AM_ABS
fcb4 : c8               [ 2] 	iny						; Jump over ","
fcb5 : b186             [ 5] 	lda (df_currlin),y		; Load X or Y
fcb7 : c8               [ 2] 	iny						; Jump over index reg
fcb8 : 8588             [ 3] 	sta df_exeoff			; Save exe offset
fcba : c978             [ 2] 	cmp #'x'				; Indirect X?
fcbc : f012             [ 3] 	beq df_rt_asm_AM_ABSX
                             ; Process ABSY
fcbe :                       df_rt_asm_AM_ABSY
fcbe : a906             [ 2] 	lda #AM_ZPY				; Go for smallest modes
fcc0 : 859c             [ 3] 	sta df_asmadmd
fcc2 : 60               [ 6] 	rts
                             ; Process what looks like pure ABS, could be REL
fcc3 :                       df_rt_asm_AM_ABS
fcc3 : a001             [ 2] 	ldy #1					; Check first addressing mode
fcc5 : b181             [ 5] 	lda (df_symtab),y
fcc7 : c90f             [ 2] 	cmp #AM_REL
fcc9 : f002             [ 3] 	beq df_rt_asm_AM_REL
fccb : a904             [ 2] 	lda #AM_ZP				; Go for smallest modes
fccd :                       df_rt_asm_AM_REL
fccd : 859c             [ 3] 	sta df_asmadmd
fccf : 60               [ 6] 	rts
                             ; Process ABSX
fcd0 :                       df_rt_asm_AM_ABSX
fcd0 : a905             [ 2] 	lda #AM_ZPX				; Go for smallest modes
fcd2 : 859c             [ 3] 	sta df_asmadmd
AS65 Assembler for R6502 [1.42].                                     Page  275
-------------------------------- bank\bank0.s --------------------------------

fcd4 : 60               [ 6] 	rts
                             ; Process Immediate
fcd5 :                       df_rt_asm_AM_IMM
                             	; skip over #
fcd5 : e688             [ 5] 	inc df_exeoff
                             	; Get operand
fcd7 : 2008fd           [ 6] 	jsr df_rt_asm_get_operand
                             	; Mark as immediate
fcda : a90c             [ 2] 	lda #AM_IMM
fcdc : 859c             [ 3] 	sta df_asmadmd
fcde : 60               [ 6] 	rts
                             ; Process indirect
fcdf :                       df_rt_asm_AM_INDIRECT
                             	; skip over (
fcdf : e688             [ 5] 	inc df_exeoff
                             	; Calculate the operand
fce1 : 2008fd           [ 6] 	jsr df_rt_asm_get_operand
                             	; what is next char?
fce4 : a488             [ 3] 	ldy df_exeoff
fce6 : b186             [ 5] 	lda (df_currlin),y
fce8 : c929             [ 2] 	cmp #')'			; Could be IND or INDY
fcea : f009             [ 3] 	beq df_rt_asm_AM_ZPINDORY
                             	; else must be INDX
                             	; skip 'x)'
fcec : c8               [ 2] 	iny
fced : c8               [ 2] 	iny
fcee : 8488             [ 3] 	sty df_exeoff
fcf0 : a908             [ 2] 	lda #AM_ZPINDX
fcf2 : 859c             [ 3] 	sta df_asmadmd
fcf4 : 60               [ 6] 	rts
                             ; Pure indirect mode found
fcf5 :                       df_rt_asm_AM_ZPINDORY
fcf5 : a907             [ 2] 	lda #AM_ZPIND			; Assume ZPIND
fcf7 : c8               [ 2] 	iny
fcf8 : 8488             [ 3] 	sty df_exeoff
                             	; if at end of line/statement then pure indirect
fcfa : 2082ed           [ 6] 	jsr df_rt_eos			; End of statement?
fcfd : b006             [ 4] 	bcs df_rt_asm_AM_ZPIND
                             	; else must be INDY
fcff : a909             [ 2] 	lda #AM_ZPINDY
                             	; skip ',Y'
fd01 : c8               [ 2] 	iny
fd02 : c8               [ 2] 	iny
fd03 : 8488             [ 3] 	sty df_exeoff
fd05 :                       df_rt_asm_AM_ZPIND
fd05 : 859c             [ 3] 	sta df_asmadmd
fd07 : 60               [ 6] 	rts
                             
                             ; Get and save the operand
                             ; df_asmoprnd contains the result
fd08 :                       df_rt_asm_get_operand
                             	; evaluate
fd08 : 2075e0           [ 6] 	jsr df_rt_neval
                             	; Get the parameter from stack
fd0b : 2041f7           [ 6] 	jsr df_ost_popInt
                             	; put in the operand
fd0e : 869e             [ 3] 	stx df_asmoprnd
fd10 : 859f             [ 3] 	sta df_asmoprnd+1
fd12 : 60               [ 6] 	rts
                             	
                             ; From current symtab entry, find addressing
                             ; mode in A.  AM_NONE=Not found, Y=index
AS65 Assembler for R6502 [1.42].                                     Page  276
-------------------------------- bank\bank0.s --------------------------------

fd13 :                       df_rt_asm_find_addr_mode
                             	; save A in tmp
fd13 : 8538             [ 3] 	sta tmp_d
                             	; Start first entry (1) - 2 = 0xff
fd15 : a0ff             [ 2] 	ldy #0xff
fd17 : a200             [ 2] 	ldx #0
fd19 :                       df_rt_asm_find_addr_mode_loop
                             	; next entry
fd19 : c8               [ 2] 	iny
fd1a : c8               [ 2] 	iny
                             	; if current index > num entries then error
fd1b : 98               [ 2] 	tya
fd1c : 38               [ 2] 	sec
fd1d : e181             [ 6] 	sbc (df_symtab,x)
fd1f : b007             [ 3] 	bcs df_rt_asm_find_addr_mode_err
                             	; is symtab addressing mode what we want?
fd21 : b181             [ 5] 	lda (df_symtab),y
fd23 : c538             [ 3] 	cmp tmp_d
fd25 : d0f2             [ 3] 	bne df_rt_asm_find_addr_mode_loop
                             	; done A=mode, y=index in to df_symtab
fd27 : 60               [ 6] 	rts
fd28 :                       df_rt_asm_find_addr_mode_err
fd28 : a900             [ 2] 	lda #AM_NONE
fd2a : 60               [ 6] 	rts
                             
                             
                             ; Skip X amount of symbols in table
                             ; A contains how many addr mode and op code bytes
                             ; df_symtab points to offset byte
fd2b :                       df_rt_asm_skip_to_sym
fd2b : e8               [ 2] 	inx				; so done when X=0
                             	; Start at token symbols beginning
fd2c : a97d             [ 2] 	lda #lo(df_asm_tokensyms)
fd2e : 8581             [ 3] 	sta df_symtab
fd30 : a9fd             [ 2] 	lda #hi(df_asm_tokensyms)
fd32 : 8582             [ 3] 	sta df_symtab+1
fd34 : a900             [ 2] 	lda #0
fd36 : 8583             [ 3] 	sta df_symoff
fd38 : a000             [ 2] 	ldy #0
fd3a :                       df_rt_asm_skip_to_sym_next
                             	; Get symtable char
fd3a : b181             [ 5] 	lda (df_symtab),y
                             	; if < ' ' then jumped over symbol chars
fd3c : c920             [ 2] 	cmp #' '
fd3e : 9009             [ 3] 	bcc df_rt_asm_skip_to_sym_end
                             	;else next smy tab char
                             	_incZPWord df_symtab
                             
fd46 : 4c3afd           [ 3] 	jmp df_rt_asm_skip_to_sym_next
                             	; Found end of symbol
fd49 :                       df_rt_asm_skip_to_sym_end
                             	;if done then return
fd49 : ca               [ 2] 	dex
fd4a : f00e             [ 3] 	beq df_rt_asm_skip_to_sym_done
                             	;jump over addr and op code by A bytes
fd4c : 38               [ 2] 	sec
fd4d : 6581             [ 3] 	adc df_symtab
fd4f : 8581             [ 3] 	sta df_symtab
fd51 : a582             [ 3] 	lda df_symtab+1
fd53 : 6900             [ 2] 	adc #0
fd55 : 8582             [ 3] 	sta df_symtab+1
fd57 : 4c3afd           [ 3] 	jmp df_rt_asm_skip_to_sym_next
AS65 Assembler for R6502 [1.42].                                     Page  277
-------------------------------- bank\bank0.s --------------------------------

                             	
fd5a :                       df_rt_asm_skip_to_sym_done
fd5a : 60               [ 6] 	rts
                             
fd5b :                       mod_sz_rtasm_e
                             
                             
                             	include "dflat/asmsymtab.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  ASMSYMTAB.S
                             ;*	Mainly this contains the symbol table for asse
                             ;*	mnemonics but also meta data like what address
                             ;*	and the length of opcodes.
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code  
                             
                             	;* Length of each addressing mode
                             	;* ORDER significant!
fd5b :                       df_asm_length
fd5b : 00030303020202..      	db	0,3,3,3,2,2,2,2,2,2,3,3,2,1,1,2,0
                             
                             	; Always try for lowest addressing mode, but
                             	; this table maps to alternative
fd6c :                       df_asm_altaddrmode
fd6c : 00                    	db AM_NONE		;AM_NONE	= 0
fd6d : 00                    	db AM_NONE		;AM_ABS	 	= 1
fd6e : 00                    	db AM_NONE		;AM_ABSX	= 2
fd6f : 00                    	db AM_NONE		;AM_ABSY	= 3
fd70 : 01                    	db AM_ABS		;AM_ZP		= 4
fd71 : 02                    	db AM_ABSX		;AM_ZPX		= 5
fd72 : 03                    	db AM_ABSY		;AM_ZPY		= 6
fd73 : 0a                    	db AM_ABSIND	;AM_ZPIND	= 7
fd74 : 0b                    	db AM_ABSINDX	;AM_ZPINDX	= 8
fd75 : 09                    	db AM_ZPINDY	;AM_ZPINDY	= 9
fd76 : 00                    	db AM_NONE		;AM_ABSIND	= 10
fd77 : 00                    	db AM_NONE		;AM_ABSINDX	= 11
fd78 : 00                    	db AM_NONE		;AM_IMM		= 12
fd79 : 00                    	db AM_NONE		;AM_ACC		= 13
fd7a : 00                    	db AM_NONE		;AM_IMP		= AM_ACC
fd7b : 0f                    	db AM_REL		;AM_REL		= 15
fd7c : 00                    	db AM_NONE		;AM_DIR		= 16
                             
                             
                             	;*	Mnemonic/	How many addressing modes /
                             	;* 	Mode		Opcode for mode
fd7d :                       df_asm_tokensyms
                             	;* Start with directives
fd7d : 6f726702              	db	"org",		1*2
fd81 : 1000                  	db	AM_DIR,		0x00
fd83 : 6f707402              	db	"opt",		1*2
fd87 : 1000                  	db	AM_DIR,		0x00
fd89 : 646202                	db	"db",		1*2
AS65 Assembler for R6502 [1.42].                                     Page  278
-------------------------------- bank\bank0.s --------------------------------

fd8c : 1000                  	db	AM_DIR,		0x00
fd8e : 647702                	db	"dw",		1*2
fd91 : 1000                  	db	AM_DIR,		0x00
fd93 : 647302                	db	"ds",		1*2
fd96 : 1000                  	db	AM_DIR,		0x00	
                             
fd98 : 61646310              	db	"adc",		8*2
fd9c : 0c69                  	db	AM_IMM,		0x69
fd9e : 0465                  	db	AM_ZP,		0x65
fda0 : 0575                  	db	AM_ZPX,		0x75
fda2 : 016d                  	db	AM_ABS,		0x6d
fda4 : 027d                  	db	AM_ABSX,	0x7d
fda6 : 0379                  	db	AM_ABSY,	0x79
fda8 : 0861                  	db	AM_ZPINDX,	0x61
fdaa : 0971                  	db	AM_ZPINDY,	0x71
                             	
fdac : 616e6410              	db	"and",		8*2
fdb0 : 0c29                  	db	AM_IMM,		0x29
fdb2 : 0425                  	db	AM_ZP,		0x25
fdb4 : 0535                  	db	AM_ZPX,		0x35
fdb6 : 012d                  	db	AM_ABS,		0x2d
fdb8 : 023d                  	db	AM_ABSX,	0x3d
fdba : 0339                  	db	AM_ABSY,	0x39
fdbc : 0821                  	db	AM_ZPINDX,	0x21
fdbe : 0931                  	db	AM_ZPINDY,	0x31
                             
fdc0 : 636d7010              	db	"cmp",		8*2
fdc4 : 0cc9                  	db	AM_IMM,		0xc9
fdc6 : 04c5                  	db	AM_ZP,		0xc5
fdc8 : 05d5                  	db	AM_ZPX,		0xd5
fdca : 01cd                  	db	AM_ABS,		0xcd
fdcc : 02dd                  	db	AM_ABSX,	0xdd
fdce : 03d9                  	db	AM_ABSY,	0xd9
fdd0 : 08c1                  	db	AM_ZPINDX,	0xc1
fdd2 : 09d1                  	db	AM_ZPINDY,	0xd1
                             
fdd4 : 656f7210              	db	"eor",		8*2
fdd8 : 0c49                  	db	AM_IMM,		0x49
fdda : 0445                  	db	AM_ZP,		0x45
fddc : 0555                  	db	AM_ZPX,		0x55
fdde : 014d                  	db	AM_ABS,		0x4d
fde0 : 025d                  	db	AM_ABSX,	0x5d
fde2 : 0359                  	db	AM_ABSY,	0x59
fde4 : 0841                  	db	AM_ZPINDX,	0x41
fde6 : 0951                  	db	AM_ZPINDY,	0x51
                             
fde8 : 6c646110              	db	"lda",		8*2
fdec : 0ca9                  	db	AM_IMM,		0xa9
fdee : 04a5                  	db	AM_ZP,		0xa5
fdf0 : 05b5                  	db	AM_ZPX,		0xb5
fdf2 : 01ad                  	db	AM_ABS,		0xad
fdf4 : 02bd                  	db	AM_ABSX,	0xbd
fdf6 : 03b9                  	db	AM_ABSY,	0xb9
fdf8 : 08a1                  	db	AM_ZPINDX,	0xa1
fdfa : 09b1                  	db	AM_ZPINDY,	0xb1
                             
fdfc : 6f726110              	db	"ora",		8*2
fe00 : 0c09                  	db	AM_IMM,		0x09
fe02 : 0405                  	db	AM_ZP,		0x05
fe04 : 0515                  	db	AM_ZPX,		0x15
fe06 : 010d                  	db	AM_ABS,		0x0d
fe08 : 021d                  	db	AM_ABSX,	0x1d
AS65 Assembler for R6502 [1.42].                                     Page  279
-------------------------------- bank\bank0.s --------------------------------

fe0a : 0319                  	db	AM_ABSY,	0x19
fe0c : 0801                  	db	AM_ZPINDX,	0x01
fe0e : 0911                  	db	AM_ZPINDY,	0x11
                             
fe10 : 73626310              	db	"sbc",		8*2
fe14 : 0ce9                  	db	AM_IMM,		0xe9
fe16 : 04e5                  	db	AM_ZP,		0xe5
fe18 : 05f5                  	db	AM_ZPX,		0xf5
fe1a : 01ed                  	db	AM_ABS,		0xed
fe1c : 02fd                  	db	AM_ABSX,	0xfd
fe1e : 03f9                  	db	AM_ABSY,	0xf9
fe20 : 08e1                  	db	AM_ZPINDX,	0xe1
fe22 : 09f1                  	db	AM_ZPINDY,	0xf1
                             
fe24 : 73746110              	db	"sta",		8*2
fe28 : 0485                  	db	AM_ZP,		0x85
fe2a : 0585                  	db	AM_ZPX,		0x85
fe2c : 018d                  	db	AM_ABS,		0x8d
fe2e : 029d                  	db	AM_ABSX,	0x9d
fe30 : 0399                  	db	AM_ABSY,	0x99
fe32 : 0881                  	db	AM_ZPINDX,	0x81
fe34 : 0991                  	db	AM_ZPINDY,	0x91
fe36 : 0792                  	db	AM_ZPIND,	0x92
                             
fe38 : 61736c0a              	db	"asl",		5*2
fe3c : 0d0a                  	db	AM_IMP,		0x0a
fe3e : 0406                  	db	AM_ZP,		0x06
fe40 : 0516                  	db	AM_ZPX,		0x16
fe42 : 010e                  	db	AM_ABS,		0x0e
fe44 : 021e                  	db	AM_ABSX,	0x1e
fe46 : 64656308              	db	"dec",		4*2
fe4a : 04c6                  	db	AM_ZP,		0xc6
fe4c : 05d6                  	db	AM_ZPX,		0xd6
fe4e : 01ce                  	db	AM_ABS,		0xce
fe50 : 02de                  	db	AM_ABSX,	0xde
fe52 : 696e6308              	db	"inc",		4*2
fe56 : 04e6                  	db	AM_ZP,		0xe6
fe58 : 05f6                  	db	AM_ZPX,		0xf6
fe5a : 01ee                  	db	AM_ABS,		0xee
fe5c : 02fe                  	db	AM_ABSX,	0xfe
fe5e : 6c73720a              	db	"lsr",		5*2
fe62 : 0d4a                  	db	AM_IMP,		0x4a
fe64 : 0446                  	db	AM_ZP,		0x46
fe66 : 0556                  	db	AM_ZPX,		0x56
fe68 : 014e                  	db	AM_ABS,		0x4e
fe6a : 025e                  	db	AM_ABSX,	0x5e
fe6c : 726f6c0a              	db	"rol",		5*2
fe70 : 0d2a                  	db	AM_IMP,		0x2a
fe72 : 0426                  	db	AM_ZP,		0x26
fe74 : 0536                  	db	AM_ZPX,		0x36
fe76 : 012e                  	db	AM_ABS,		0x2e
fe78 : 023e                  	db	AM_ABSX,	0x3e
fe7a : 726f720a              	db	"ror",		5*2
fe7e : 0d6a                  	db	AM_IMP,		0x6a
fe80 : 0466                  	db	AM_ZP,		0x66
fe82 : 0576                  	db	AM_ZPX,		0x76
fe84 : 016e                  	db	AM_ABS,		0x6e
fe86 : 027e                  	db	AM_ABSX,	0x7e
                             
fe88 : 62697404              	db	"bit",		2*2
fe8c : 0424                  	db	AM_ZP,		0x24
fe8e : 012c                  	db	AM_ABS,		0x2c
AS65 Assembler for R6502 [1.42].                                     Page  280
-------------------------------- bank\bank0.s --------------------------------

                             	
fe90 : 62726b02              	db	"brk",		1*2
fe94 : 0d00                  	db	AM_IMP,		0x00
                             	
fe96 : 636c6302              	db	"clc",		1*2
fe9a : 0d18                  	db	AM_IMP,		0x18
fe9c : 636c6402              	db	"cld",		1*2
fea0 : 0dd8                  	db	AM_IMP,		0xd8
fea2 : 636c6902              	db	"cli",		1*2
fea6 : 0d58                  	db	AM_IMP,		0x58
fea8 : 636c7602              	db	"clv",		1*2
feac : 0db8                  	db	AM_IMP,		0xb8
feae : 73656302              	db	"sec",		1*2
feb2 : 0d38                  	db	AM_IMP,		0x38
feb4 : 73656402              	db	"sed",		1*2
feb8 : 0df8                  	db	AM_IMP,		0xf8
feba : 73656902              	db	"sei",		1*2
febe : 0d78                  	db	AM_IMP,		0x78
                             	
fec0 : 63707806              	db	"cpx",		3*2
fec4 : 0ce0                  	db	AM_IMM,		0xe0
fec6 : 04e4                  	db	AM_ZP,		0xe4
fec8 : 01ec                  	db	AM_ABS,		0xec
feca : 63707906              	db	"cpy",		3*2
fece : 0cc0                  	db	AM_IMM,		0xc0
fed0 : 04c4                  	db	AM_ZP,		0xc4
fed2 : 01cc                  	db	AM_ABS,		0xcc
fed4 : 64657802              	db	"dex",		1*2
fed8 : 0dca                  	db	AM_IMP,		0xca
feda : 64657902              	db	"dey",		1*2
fede : 0d88                  	db	AM_IMP,		0x88
fee0 : 696e7802              	db	"inx",		1*2
fee4 : 0de8                  	db	AM_IMP,		0xe8
fee6 : 696e7902              	db	"iny",		1*2
feea : 0dc8                  	db	AM_IMP,		0xc8
feec : 6c64780a              	db	"ldx",		5*2
fef0 : 0ca2                  	db	AM_IMM,		0xa2
fef2 : 04a6                  	db	AM_ZP,		0xa6
fef4 : 06b6                  	db	AM_ZPY,		0xb6
fef6 : 01ae                  	db	AM_ABS,		0xae
fef8 : 03be                  	db	AM_ABSY,	0xbe
fefa : 6c64790a              	db	"ldy",		5*2
fefe : 0ca0                  	db	AM_IMM,		0xa0
ff00 : 04a4                  	db	AM_ZP,		0xa4
ff02 : 05b4                  	db	AM_ZPX,		0xb4
ff04 : 01ac                  	db	AM_ABS,		0xac
ff06 : 02bc                  	db	AM_ABSX,	0xbc
ff08 : 73747806              	db	"stx",		3*2
ff0c : 0486                  	db	AM_ZP,		0x86
ff0e : 0696                  	db	AM_ZPY,		0x96
ff10 : 018e                  	db	AM_ABS,		0x8e
ff12 : 73747906              	db	"sty",		3*2
ff16 : 0484                  	db	AM_ZP,		0x84
ff18 : 0594                  	db	AM_ZPX,		0x94
ff1a : 018c                  	db	AM_ABS,		0x8c
                             
ff1c : 62636302              	db	"bcc",		1*2
ff20 : 0f90                  	db	AM_REL,		0x90
ff22 : 62637302              	db	"bcs",		1*2
ff26 : 0fb0                  	db	AM_REL,		0xb0
ff28 : 62657102              	db	"beq",		1*2
ff2c : 0ff0                  	db	AM_REL,		0xf0
AS65 Assembler for R6502 [1.42].                                     Page  281
-------------------------------- bank\bank0.s --------------------------------

ff2e : 626d6902              	db	"bmi",		1*2
ff32 : 0f30                  	db	AM_REL,		0x30
ff34 : 626e6502              	db	"bne",		1*2
ff38 : 0fd0                  	db	AM_REL,		0xd0
ff3a : 62706c02              	db	"bpl",		1*2
ff3e : 0f10                  	db	AM_REL,		0x10
ff40 : 62766302              	db	"bvc",		1*2
ff44 : 0f50                  	db	AM_REL,		0x50
ff46 : 62767302              	db	"bvs",		1*2
ff4a : 0f70                  	db	AM_REL,		0x70
ff4c : 6a6d7004              	db	"jmp",		2*2
ff50 : 014c                  	db	AM_ABS,		0x4c
ff52 : 0a6c                  	db	AM_ABSIND,	0x6c
ff54 : 6a737202              	db	"jsr",		1*2
ff58 : 0120                  	db	AM_ABS,		0x20
                             	
ff5a : 6e6f7002              	db	"nop",		1*2
ff5e : 0dea                  	db	AM_IMP,		0xea
ff60 : 70686102              	db	"pha",		1*2
ff64 : 0d48                  	db	AM_IMP,		0x48
ff66 : 70687002              	db	"php",		1*2
ff6a : 0d08                  	db	AM_IMP,		0x08
ff6c : 706c6102              	db	"pla",		1*2
ff70 : 0d68                  	db	AM_IMP,		0x68
ff72 : 706c7002              	db	"plp",		1*2
ff76 : 0d28                  	db	AM_IMP,		0x28
ff78 : 72746902              	db	"rti",		1*2
ff7c : 0d40                  	db	AM_IMP,		0x40
ff7e : 72747302              	db	"rts",		1*2
ff82 : 0d60                  	db	AM_IMP,		0x60
ff84 : 74617802              	db	"tax",		1*2
ff88 : 0daa                  	db	AM_IMP,		0xaa
ff8a : 74617902              	db	"tay",		1*2
ff8e : 0da8                  	db	AM_IMP,		0xa8
ff90 : 74737802              	db	"tsx",		1*2
ff94 : 0dba                  	db	AM_IMP,		0xba
ff96 : 74786102              	db	"txa",		1*2
ff9a : 0d8a                  	db	AM_IMP,		0x8a
ff9c : 74787302              	db	"txs",		1*2
ffa0 : 0d9a                  	db	AM_IMP,		0x9a
ffa2 : 74796102              	db	"tya",		1*2
ffa6 : 0d98                  	db	AM_IMP,		0x98	
                             	
                             	;* Terminates with a zero
ffa8 : 00                    	db	0
                             
                             	include	"dflat/asmjmptab.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  ASMJUMPTAB.S
                             ;*  Runtime token jump table for assembler.
                             ;*  dflat uses four key tables to tokenise and ru
                             ;*  - df_tokensyms    - table of token symbols
                             ;*  - df_tk_tokentype - table of token types
                             ;*  - df_tk_tokenjmp  - table of tokenising routi
                             ;*  - df_rt_tokenjmp  - table of runtime routines
AS65 Assembler for R6502 [1.42].                                     Page  282
-------------------------------- bank\bank0.s --------------------------------

                             ;*  The key is the token symbols.  When a line is
                             ;*  in to the raw (untokenised) buffer, df_tokens
                             ;*  used to identify tokens.  The position of the
                             ;*  token is used to then look up type and jump v
                             ;*  in the other tables.
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code  
                             
                             ; Tokeniser jump table
                             ; Only directives needed as all opcodes are handl
                             ; through a single routine
ffa9 :                       df_tk_asm_tokenjmp
ffa9 : 4dde                  	dw	df_tk_asm_org
ffab : 4dde                  	dw	df_tk_asm_opt
ffad : b2dd                  	dw	df_tk_asm_db
ffaf : b2dd                  	dw	df_tk_asm_dw
ffb1 : 4dde                  	dw	df_tk_asm_ds
                             
ffb3 :                       df_rt_asm_tokenjmp
ffb3 : 8ffa                  	dw	df_rt_asm_org
ffb5 : a2fa                  	dw	df_rt_asm_opt
ffb7 : aafa                  	dw	df_rt_asm_db
ffb9 : adfa                  	dw	df_rt_asm_dw
ffbb : 27fb                  	dw	df_rt_asm_ds
                             
                             
                             ;****************************************
                             ;* as_init
                             ;* Initialise assembler settings
                             ;****************************************
ffbd :                       asm_init
                             	; Zero the PC
ffbd : a900             [ 2] 	lda #0
ffbf : 8599             [ 3] 	sta df_asmpc
ffc1 : 859a             [ 3] 	sta df_asmpc+1
                             	; Zero the option
ffc3 : 859b             [ 3] 	sta df_asmopt
ffc5 : 60               [ 6] 	rts
                             
ffc6 :                       mod_sz_asm_e
                             
ffc6 :                       mod_sz_language_e
                             	; End of Code
ffc6 :                       _code_end
                             
No errors in pass 2.
Wrote binary from address $c000 through $ffff.
Total size 16384 bytes.
