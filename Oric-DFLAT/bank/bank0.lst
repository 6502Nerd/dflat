AS65 Assembler for R6502 [1.42].                                     Page    1
-------------------------------- bank\bank0.s --------------------------------

-------------------------------- Symbol Table --------------------------------

              Symbol   Value        Decimal

                 ACR : $000b             11   *
              AM_ABS : $0001              1   *
           AM_ABSIND : $000a             10   *
          AM_ABSINDX : $000b             11   *
             AM_ABSX : $0002              2   *
             AM_ABSY : $0003              3   *
              AM_ACC : $000d             13   *
              AM_DIR : $0010             16   *
              AM_IMM : $000c             12   *
              AM_IMP : $000d             13   *
             AM_NONE : $0000              0   *
              AM_REL : $000f             15   *
               AM_ZP : $0004              4   *
            AM_ZPIND : $0007              7   *
           AM_ZPINDX : $0008              8   *
           AM_ZPINDY : $0009              9   *
              AM_ZPX : $0005              5   *
              AM_ZPY : $0006              6   *
            asm_init : $ffef          65519
               BANK0 : $0001              1
      bin_to_bcd_bit : $c368          50024
              buf_ef : $003c             60
              buf_hi : $003a             58
              buf_lo : $0039             57
              buf_sz : $003b             59
     CMD_ERR_NOERROR : $0000              0   *
    CMD_ERR_NOTFOUND : $0001              1   *
        CMD_ERR_PARM : $0002              2   *
         CMD_ERR_VAL : $0003              3   *
           CRSR_DOWN : $000a             10   *
           CRSR_LEFT : $0008              8   *
          CRSR_RIGHT : $0009              9   *
             CRSR_UP : $000b             11   *
           CTRL_CAPS : $0014             20   *
        call_irq_brk : $c0d6          49366
     call_irq_master : $c0d3          49363
   call_irq_usercia0 : $c0d9          49369
       cmd_check_cmd : $d4c4          54468
         cmd_check_d : $d4d7          54487
         cmd_check_s : $d4db          54491
         cmd_dumpmem : $d50b          54539
    cmd_dumpmemASCII : $d52f          54575
      cmd_dumpmemFin : $d564          54628
   cmd_dumpmem_ascii : $d541          54593
   cmd_dumpmem_block : $d511          54545
    cmd_dumpmem_byte : $d520          54560
  cmd_dump_skip_ctrl : $d54b          54603
   cmd_dump_skip_del : $d550          54608
           cmd_error : $d4cc          54476
       cmd_find_parm : $d5af          54703
              cmd_hi : $0095            149   *
          cmd_incmem : $d56b          54635
              cmd_lo : $0094            148   *
   cmd_next_parm_err : $d5b9          54713
       cmd_not_found : $d4df          54495
           cmd_parse : $d4d6          54486
      cmd_parse_byte : $d580          54656
  cmd_parse_byte_err : $d59a          54682
AS65 Assembler for R6502 [1.42].                                     Page    2
-------------------------------- bank\bank0.s --------------------------------

 cmd_parse_byte_errp : $d599          54681
 cmd_parse_next_parm : $d5ae          54702
      cmd_parse_word : $d59c          54684
            cmd_peek : $d572          54642
            cmd_poke : $d577          54647
           cmd_ready : $d4b0          54448
          cmd_setmem : $d4e5          54501
     cmd_setmem_byte : $d4ea          54506
      cmd_setmem_err : $d509          54537
        cmd_word_err : $d5ac          54700
        command_line : $d4b0          54448
       con_bin_digit : $c24d          49741
        con_bin_done : $c263          49763
         con_bin_err : $c26d          49773
         con_bin_jmp : $c1eb          49643
        con_bin_to_a : $c245          49733
    con_bin_to_a_int : $c249          49737
         con_dec_jmp : $c1df          49631
        con_dec_to_a : $c26f          49775
    con_dec_to_a_int : $c273          49779
       con_hex_digit : $c20e          49678
        con_hex_done : $c23b          49723
         con_hex_err : $c239          49721
         con_hex_jmp : $c1e5          49637
  con_hex_skip_x_f_1 : $c21b          49691
        con_hex_to_a : $c206          49670
    con_hex_to_a_int : $c20a          49674
           con_n_err : $c1ee          49646
       con_n_not_dec : $c1e2          49634
       con_n_not_hex : $c1e8          49640
          con_n_to_a : $c1ce          49614
   con_n_to_a_detect : $c1f0          49648
                DDRA : $0003              3   *
                DDRB : $0002              2   *
         DFERR_ABORT : $0012             18   *
         DFERR_BREAK : $000d             13   *
           DFERR_DIM : $0003              3   *
         DFERR_FNAME : $000b             11   *
     DFERR_IMMEDIATE : $0007              7   *
       DFERR_NEXTFOR : $000a             10   *
        DFERR_NODATA : $000e             14   *
          DFERR_NOIF : $0009              9   *
        DFERR_NOLINE : $0010             16   *
         DFERR_NOORG : $0014             20   *
        DFERR_NOPROC : $0005              5   *
            DFERR_OK : $0000              0   *
      DFERR_PROCPARM : $0006              6   *
      DFERR_QUANTITY : $0013             19   *
        DFERR_RETURN : $0011             17   *
       DFERR_STRLONG : $000c             12   *
        DFERR_SYNTAX : $0001              1   *
      DFERR_TYPEMISM : $0002              2   *
    DFERR_UNCLOSEDIF : $0008              8   *
         DFERR_UNTIL : $0004              4   *
          DFERR_WEND : $000f             15   *
          DFRT_ABORT : $0089            137   *
            DFRT_ASM : $0097            151   *
           DFRT_DATA : $0096            150   *
            DFRT_DEF : $0086            134   *
           DFRT_ELSE : $0093            147   *
         DFRT_ELSEIF : $0095            149   *
         DFRT_ENDDEF : $0087            135   *
AS65 Assembler for R6502 [1.42].                                     Page    3
-------------------------------- bank\bank0.s --------------------------------

          DFRT_ENDIF : $0094            148   *
            DFRT_FOR : $008e            142   *
             DFRT_IF : $0092            146   *
           DFRT_NEXT : $008f            143   *
         DFRT_REPEAT : $008c            140   *
         DFRT_RETURN : $0088            136   *
           DFRT_WEND : $0091            145   *
          DFRT_WHILE : $0090            144   *
            DFST_INT : $0001              1   *
            DFST_STR : $0080            128   *
            DFTK_BYT : $0020             32   *
         DFTK_BYTBIN : $0007              7   *
         DFTK_BYTDEC : $0005              5   *
         DFTK_BYTHEX : $0006              6   *
            DFTK_CHR : $0000              0   *
            DFTK_EOL : $0000              0   *
         DFTK_ESCVAL : $0020             32   *
            DFTK_FLT : $0080            128   *
             DFTK_FN : $0002              2   *
            DFTK_INT : $0010             16   *
         DFTK_INTBIN : $000b             11   *
         DFTK_INTDEC : $0009              9   *
         DFTK_INTHEX : $000a             10   *
             DFTK_KW : $0001              1   *
         DFTK_LINLEN : $0000              0   *
         DFTK_LINNUM : $0001              1   *
             DFTK_OP : $0008              8   *
          DFTK_OPMSK : $0007              7   *
           DFTK_PROC : $0012             18   *
          DFTK_RESVC : $000c             12   *
          DFTK_RESVD : $000d             13   *
          DFTK_RESVE : $000e             14   *
          DFTK_RESVF : $000f             15   *
          DFTK_RESV1 : $0001              1   *
          DFTK_RESV2 : $0002              2   *
          DFTK_RESV3 : $0003              3   *
          DFTK_RESV4 : $0004              4   *
          DFTK_RESV8 : $0008              8   *
          DFTK_RTMSK : $00f8            248   *
          DFTK_STEND : $001f             31   *
            DFTK_STR : $0040             64   *
         DFTK_STRLIT : $0010             16   *
          DFTK_STROP : $0004              4   *
          DFTK_TOKEN : $0080            128   *
            DFTK_VAR : $0011             17   *
        DFTK_VARPARM : $0026             38   *
          DFVVT_ARRY : $0080            128   *
           DFVVT_BYT : $0002              2   *
          DFVVT_DIM1 : $0003              3   *
          DFVVT_DIM2 : $0004              4   *
           DFVVT_FLT : $0008              8   *
            DFVVT_HI : $0002              2   *
           DFVVT_INT : $0001              1   *
            DFVVT_LO : $0001              1   *
          DFVVT_PROC : $0040             64   *
           DFVVT_STR : $0004              4   *
            DFVVT_SZ : $0008              8   *
          DFVVT_TYPE : $0000              0   *
           DF_MEMTOP : $9800          38912   *
        DF_PROGSTART : $071f           1823   *
          dflat_zp_e : $00ab            171
          dflat_zp_s : $005b             91
AS65 Assembler for R6502 [1.42].                                     Page    4
-------------------------------- bank\bank0.s --------------------------------

     dflat_zp_save_e : $00a1            161
     dflat_zp_save_s : $005b             91
          df_asmadmd : $009c            156
           df_asmlen : $00a0            160
         df_asmopcde : $009d            157
         df_asmoprnd : $009e            158
           df_asmopt : $009b            155
            df_asmpc : $0099            153
  df_asm_altaddrmode : $fd99          64921
       df_asm_length : $fd88          64904
    df_asm_tokensyms : $fdaa          64938
            df_brkpc : $0062             98
           df_brkval : $0064            100
         df_checkkey : $005b             91
         df_checkmsk : $005c             92
            df_clear : $f7c0          63424
          df_currdat : $0094            148
          df_currlin : $0086            134
         df_curstidx : $0080            128
           df_datoff : $0096            150
           df_eolidx : $007e            126
           df_exeoff : $0088            136
           df_ifnest : $0093            147
            df_immed : $005e             94
             df_init : $f7b3          63411
          df_initrun : $e1aa          57770
       df_lexer_line : $db15          56085
  df_lexer_skip_lnum : $db36          56118
          df_linbuff : $0400           1024
          df_lineidx : $0092            146
          df_lineptr : $0090            144
           df_linoff : $007c            124
           df_memtop : $061d           1565
          df_msg_acc : $f983          63875
           df_msg_pc : $f97f          63871
         df_msg_xreg : $f986          63878
         df_msg_yreg : $f989          63881
          df_nextlin : $0089            137
         df_nxtstidx : $007f            127
     df_ost_peekType : $f789          63369
       df_ost_popInt : $f78f          63375
     df_ost_popParmX : $f772          63346
       df_ost_popPtr : $f797          63383
       df_ost_popStr : $f793          63379
      df_ost_pushInt : $f75f          63327
     df_ost_pushIntA : $f763          63331
    df_ost_pushParmX : $f749          63305
      df_ost_pushPtr : $f76e          63342
      df_ost_pushStr : $f76a          63338
          df_parmtop : $0077            119
               df_pc : $0060             96
    df_pg_check_line : $e05c          57436
df_pg_check_next_line : $e045          57413
df_pg_copyinputtolinbuff : $e0f7          57591
  df_pg_delete_block : $e0bf          57535
   df_pg_delete_byte : $e0c5          57541
df_pg_delete_next_byte : $e0e6          57574
         df_pg_dflat : $e101          57601
     df_pg_find_line : $e039          57401
    df_pg_getcommand : $e117          57623
     df_pg_inputline : $e0ef          57583
  df_pg_inputline_ok : $e0f7          57591
AS65 Assembler for R6502 [1.42].                                     Page    5
-------------------------------- bank\bank0.s --------------------------------

 df_pg_insertlinbyte : $e19a          57754
    df_pg_insertline : $e17b          57723
  df_pg_insert_block : $e08a          57482
   df_pg_insert_byte : $e096          57494
df_pg_insert_next_byte : $e0b4          57524
   df_pg_line_number : $e15b          57691
       df_pg_nothing : $e15a          57690
        df_pg_prompt : $e10c          57612
    df_pg_prompt_msg : $e1a3          57763
 df_pg_skip_del_line : $e171          57713
      df_pg_tokenise : $e140          57664
           df_prgend : $0067            103
          df_prgstrt : $0065            101
         df_procargs : $008c            140
          df_procloc : $008d            141
         df_procmode : $008b            139
          df_procptr : $008e            142
df_pr_line_gt_target : $e051          57425
    df_pr_line_match : $e07f          57471
              df_raw : $0400           1024
              df_rnd : $0097            151
     df_rst_peekByte : $f728          63272
      df_rst_popByte : $f71f          63263
      df_rst_popWord : $f73c          63292
     df_rst_pushByte : $f716          63254
     df_rst_pushWord : $f72e          63278
          df_rtspace : $0500           1280
           df_rtstck : $0500           1280
           df_rtstop : $0076            118
         df_rt_abort : $f577          62839
           df_rt_add : $e775          59253
          df_rt_addr : $f460          62560
         df_rt_aequb : $e851          59473
      df_rt_aequbFin : $e85b          59483
           df_rt_and : $e824          59428
  df_rt_array_exists : $e489          58505
     df_rt_arry_parm : $e397          58263
    df_rt_arry_parm2 : $e39e          58270
df_rt_arry_parm2_arry2 : $e3b6          58294
df_rt_arry_parm2_skiparry2 : $e3bd          58301
df_rt_arry_parm2_term : $e3a6          58278
           df_rt_asc : $f550          62800
           df_rt_asl : $e7fe          59390
        df_rt_aslbit : $e804          59396
       df_rt_asldone : $e80e          59406
    df_rt_asm_ABSREL : $fcdd          64733
    df_rt_asm_AM_ABS : $fcf4          64756
   df_rt_asm_AM_ABSX : $fd01          64769
   df_rt_asm_AM_ABSY : $fcef          64751
    df_rt_asm_AM_IMM : $fd06          64774
    df_rt_asm_AM_IMP : $fcd8          64728
df_rt_asm_AM_INDIRECT : $fd10          64784
    df_rt_asm_AM_REL : $fcfe          64766
  df_rt_asm_AM_ZPIND : $fd36          64822
df_rt_asm_AM_ZPINDORY : $fd26          64806
  df_rt_asm_addrmode : $fcbc          64700
  df_rt_asm_assemble : $fa86          64134
df_rt_asm_assemble_done : $fa98          64152
 df_rt_asm_check_alt : $fb91          64401
   df_rt_asm_command : $fa99          64153
      df_rt_asm_data : $faf7          64247
 df_rt_asm_data_done : $fb34          64308
AS65 Assembler for R6502 [1.42].                                     Page    6
-------------------------------- bank\bank0.s --------------------------------

 df_rt_asm_data_next : $fb2a          64298
df_rt_asm_data_write : $fb35          64309
df_rt_asm_data_write_err : $fb63          64355
df_rt_asm_data_write_hi : $fb51          64337
df_rt_asm_data_write_skip1 : $fb38          64312
df_rt_asm_data_write_skip2 : $fb55          64341
        df_rt_asm_db : $faea          64234
  df_rt_asm_db_start : $faef          64239
df_rt_asm_decode_token : $f123          61731
df_rt_asm_decode_token_done : $f170          61808
df_rt_asm_decode_token_keyword : $f135          61749
       df_rt_asm_dir : $faab          64171
  df_rt_asm_do_label : $fa95          64149
        df_rt_asm_ds : $fb65          64357
        df_rt_asm_dw : $faed          64237
    df_rt_asm_encode : $fbc9          64457
df_rt_asm_encode_print : $fc30          64560
df_rt_asm_encode_relfar : $fc00          64512
df_rt_asm_encode_relpos : $fbfc          64508
df_rt_asm_encode_skiprel : $fc02          64514
df_rt_asm_encode_writebyte : $fc1e          64542
df_rt_asm_encode_writeword : $fc26          64550
df_rt_asm_find_addr_mode : $fd44          64836
df_rt_asm_find_addr_mode_err : $fd59          64857
df_rt_asm_find_addr_mode_loop : $fd4a          64842
df_rt_asm_get_operand : $fd39          64825
     df_rt_asm_label : $fabd          64189
      df_rt_asm_mnem : $fb82          64386
  df_rt_asm_mnem_chk : $fba5          64421
 df_rt_asm_mnem_done : $fbb3          64435
  df_rt_asm_mnem_err : $fbc7          64455
  df_rt_asm_mnem_try : $fb88          64392
       df_rt_asm_opt : $fae2          64226
       df_rt_asm_org : $fad0          64208
   df_rt_asm_printCH : $fc97          64663
   df_rt_asm_printCR : $fc8e          64654
 df_rt_asm_printline : $fca4          64676
  df_rt_asm_printOPC : $fc60          64608
  df_rt_asm_printOPR : $fc74          64628
df_rt_asm_printOPR_1 : $fc89          64649
   df_rt_asm_printPC : $fc50          64592
  df_rt_asm_printSPC : $fc6b          64619
df_rt_asm_print_mmen : $fc40          64576
 df_rt_asm_print_rts : $fc4f          64591
df_rt_asm_skip_to_sym : $fd5c          64860
df_rt_asm_skip_to_sym_done : $fd5b          64859
df_rt_asm_skip_to_sym_end : $fd79          64889
df_rt_asm_skip_to_sym_next : $fd6a          64874
    df_rt_asm_string : $fb0d          64269
 df_rt_asm_string_ch : $fb14          64276
  df_rt_asm_tokenjmp : $ffe5          65509
        df_rt_assign : $ee60          61024
    df_rt_assign_str : $ee6d          61037
         df_rt_asubb : $e85c          59484
      df_rt_asubbFin : $e869          59497
   df_rt_binlen_skip : $f33b          62267
         df_rt_bload : $f2b1          62129
    df_rt_bload_addr : $f2d4          62164
         df_rt_bsave : $f2e4          62180
   df_rt_bsave_parms : $f319          62233
         df_rt_bsuba : $e86a          59498
      df_rt_bsubaFin : $e877          59511
AS65 Assembler for R6502 [1.42].                                     Page    7
-------------------------------- bank\bank0.s --------------------------------

          df_rt_call : $f431          62513
       df_rt_calljsr : $f440          62528
     df_rt_check_pos : $eafd          60157
   df_rt_check_while : $e9a3          59811
           df_rt_chr : $f4a8          62632
        df_rt_circle : $ed8e          60814
           df_rt_cls : $ecee          60654
         df_rt_comeq : $e8d2          59602
         df_rt_comgt : $e8c9          59593
        df_rt_comgte : $e8e4          59620
         df_rt_comlt : $e8c0          59584
        df_rt_comlte : $e8db          59611
       df_rt_comment : $ee71          61041
         df_rt_comne : $e8ed          59629
       df_rt_copyStr : $e359          58201
    df_rt_copyStr_ch : $e35b          58203
  df_rt_copyStr_done : $e364          58212
       df_rt_copy_fn : $f232          62002
        df_rt_cursor : $ed62          60770
          df_rt_data : $ee71          61041
 df_rt_datastatement : $eb64          60260
   df_rt_datlinstart : $eb5c          60252
    df_rt_datnextlin : $eb6a          60266
      df_rt_datumerr : $eb92          60306
           df_rt_dec : $f4ed          62701
    df_rt_dec_binlen : $f335          62261
          df_rt_deek : $f357          62295
           df_rt_def : $f655          63061
        df_rt_deferr : $f5b3          62899
  df_rt_def_find_var : $f662          63074
   df_rt_def_got_var : $f674          63092
df_rt_def_got_varparm : $f671          63089
df_rt_def_initialise_parm : $f6b2          63154
  df_rt_def_load_var : $f692          63122
df_rt_def_load_var_done : $f6ce          63182
df_rt_def_load_var_int : $f6c0          63168
df_rt_def_load_var_int_skip : $f6c3          63171
 df_rt_def_parm_done : $f68a          63114
        df_rt_delete : $f23f          62015
           df_rt_dim : $ec69          60521
     df_rt_dim2_mul2 : $eccc          60620
       df_rt_dim2_nz : $ecb7          60599
     df_rt_dim_alloc : $eca6          60582
      df_rt_dim_done : $eceb          60651
       df_rt_dim_err : $ecec          60652
   df_rt_dim_findesc : $ec6c          60524
 df_rt_dim_next_byte : $ece6          60646
           df_rt_dir : $f24c          62028
           df_rt_div : $e7bc          59324
      df_rt_doassign : $ee63          61027
          df_rt_doke : $f171          61809
        df_rt_doline : $eda7          60839
       df_rt_dosound : $f1b6          61878
       df_rt_do_else : $ea6f          60015
      df_rt_do_fname : $f230          62000
       df_rt_elapsed : $f416          62486
          df_rt_else : $ea1f          59935
        df_rt_elseif : $ea1f          59935
        df_rt_enddef : $f6d8          63192
         df_rt_endif : $ea1a          59930
           df_rt_eor : $e842          59458
           df_rt_eos : $ee73          61043
AS65 Assembler for R6502 [1.42].                                     Page    8
-------------------------------- bank\bank0.s --------------------------------

      df_rt_eos_true : $ee81          61057
            df_rt_eq : $e8ac          59564
        df_rt_escjmp : $e748          59208
      df_rt_eval_byt : $e4a4          58532
   df_rt_eval_bytbin : $e36f          58223
   df_rt_eval_bytdec : $e36f          58223
   df_rt_eval_bythex : $e36f          58223
      df_rt_eval_chr : $e36f          58223
      df_rt_eval_esc : $e2a3          58019
  df_rt_eval_esc_tab : $e2b2          58034
   df_rt_eval_intbin : $e36f          58223
   df_rt_eval_intdec : $e36f          58223
   df_rt_eval_inthex : $e36f          58223
     df_rt_eval_lvar : $e3f7          58359
   df_rt_eval_lvskip : $e3d5          58325
     df_rt_eval_proc : $e4b5          58549
 df_rt_eval_proc_err : $e4c2          58562
      df_rt_eval_ptr : $e4ae          58542
 df_rt_eval_reserved : $e37b          58235
   df_rt_eval_strlit : $e37d          58237
df_rt_eval_strlit_ch : $e38d          58253
df_rt_eval_strlit_done : $e394          58260
      df_rt_eval_var : $e3c2          58306
df_rt_eval_var_dim2adj : $e43d          58429
df_rt_eval_var_dim2adjx : $e449          58441
df_rt_eval_var_dim2adjy : $e444          58436
df_rt_eval_var_do_arry : $e412          58386
df_rt_eval_var_nomult : $e460          58464
df_rt_eval_var_notarry : $e3e7          58343
 df_rt_eval_var_push : $e478          58488
df_rt_eval_var_simple : $e404          58372
  df_rt_eval_var_str : $e4ad          58541
df_rt_exec_check_key : $e582          58754
   df_rt_exec_ctrl_c : $e58a          58762
   df_rt_exec_ctrl_z : $e58c          58764
      df_rt_exec_end : $e580          58752
 df_rt_exec_find_tok : $e540          58688
df_rt_exec_found_tok : $e545          58693
 df_rt_exec_init_ptr : $e539          58681
     df_rt_exec_jump : $e590          58768
   df_rt_exec_no_key : $e559          58713
     df_rt_exec_proc : $f60b          62987
     df_rt_exec_stat : $e533          58675
         df_rt_false : $e87e          59518
  df_rt_file_cleanup : $f270          62064
     df_rt_file_errc : $f25a          62042
 df_rt_findelseendif : $e9e2          59874
    df_rt_findescval : $e645          58949
df_rt_findescval_loop : $e648          58952
      df_rt_findproc : $e5fd          58877
  df_rt_findproc_cmd : $e60f          58895
  df_rt_findproc_err : $e643          58947
df_rt_findproc_nextstat : $e62f          58927
      df_rt_findwend : $e970          59760
    df_rt_fname_case : $f234          62004
           df_rt_for : $ea72          60018
 df_rt_generate_lvar : $ee3d          60989
           df_rt_get : $f3e8          62440
     df_rt_getdatatk : $eb78          60280
       df_rt_getlvar : $e65f          58975
       df_rt_getnval : $e218          57880
      df_rt_get2Ints : $e4c4          58564
AS65 Assembler for R6502 [1.42].                                     Page    9
-------------------------------- bank\bank0.s --------------------------------

      df_rt_get2Strs : $e4d3          58579
      df_rt_get_push : $f3f9          62457
     df_rt_get_pushp : $f3f8          62456
      df_rt_get_sync : $f3ed          62445
            df_rt_gt : $e898          59544
           df_rt_gte : $e8a2          59554
      df_rt_gte_calc : $e8a5          59557
           df_rt_hex : $f4bc          62652
         df_rt_hires : $ed6b          60779
            df_rt_if : $ea31          59953
         df_rt_ifcmd : $e9e5          59877
        df_rt_ifelse : $ea03          59907
        df_rt_ifeval : $ea33          59955
  df_rt_ifskipelseif : $e9fa          59898
       df_rt_if_done : $ea1e          59934
      df_rt_if_found : $ea10          59920
      df_rt_if_match : $e9da          59866
       df_rt_if_stat : $e9c4          59844
   df_rt_if_stat_err : $e9d8          59864
     df_rt_init_done : $e217          57879
 df_rt_init_filename : $f20a          61962
 df_rt_init_stat_ptr : $e520          58656
      df_rt_init_vvt : $e1d5          57813
 df_rt_init_vvt_skip : $e209          57865
 df_rt_init_vvt_slot : $e1df          57823
df_rt_init_vvt_slot_undim : $e1eb          57835
           df_rt_ink : $ed74          60788
         df_rt_input : $ec01          60417
     df_rt_input_err : $ec3b          60475
     df_rt_input_num : $ec24          60452
     df_rt_input_str : $ec1c          60444
    df_rt_ldtokenise : $f299          62105
          df_rt_left : $f4fa          62714
           df_rt_len : $f544          62788
          df_rt_line : $edae          60846
        df_rt_lineto : $eda0          60832
          df_rt_list : $ef24          61220
  df_rt_listcheckvnt : $ee8f          61071
   df_rt_listgotnext : $eebd          61117
   df_rt_listnextvnt : $eeb6          61110
   df_rt_listpn_done : $eecd          61133
       df_rt_listprg : $ef4b          61259
    df_rt_listprgend : $ef53          61267
      df_rt_listproc : $eece          61134
    df_rt_listprocch : $ee9b          61083
    df_rt_listproccr : $eea6          61094
 df_rt_listprocnames : $ee83          61059
 df_rt_listprocpause : $eeac          61100
    df_rt_listp_copy : $eed5          61141
    df_rt_listp_done : $ef18          61208
 df_rt_listp_findcmd : $eefe          61182
 df_rt_listp_findend : $eef7          61175
df_rt_listp_notfound : $ef22          61218
      df_rt_listwait : $eeb3          61107
      df_rt_list_all : $ef37          61239
 df_rt_list_all_line : $ef9a          61338
   df_rt_list_decode : $efa6          61350
df_rt_list_decode_esc : $efd8          61400
df_rt_list_decode_token : $f0e5          61669
df_rt_list_decode_token_normal : $f0ec          61676
   df_rt_list_donvvt : $f0d3          61651
df_rt_list_do_decode_tkn : $f0f3          61683
AS65 Assembler for R6502 [1.42].                                     Page   10
-------------------------------- bank\bank0.s --------------------------------

   df_rt_list_escval : $efb6          61366
  df_rt_list_findvvt : $f07d          61565
df_rt_list_find_asm_sym : $f140          61760
 df_rt_list_find_sym : $f0fc          61692
   df_rt_list_gotvvt : $f0aa          61610
df_rt_list_gotvvtend : $f096          61590
df_rt_list_got_asm_sym : $f15e          61790
df_rt_list_got_last_sym : $f10d          61709
  df_rt_list_got_sym : $f111          61713
     df_rt_list_line : $ef59          61273
df_rt_list_line_cont : $ef73          61299
 df_rt_list_line_fin : $ef97          61335
df_rt_list_line_only : $ef9d          61341
df_rt_list_line_only_fin : $ef99          61337
    df_rt_list_linno : $ef3e          61246
   df_rt_list_linnum : $f0d4          61652
  df_rt_list_nexttok : $efbf          61375
df_rt_list_next_asm_ch : $f145          61765
  df_rt_list_next_ch : $f101          61697
df_rt_list_next_line : $ef7a          61306
    df_rt_list_pause : $ef68          61288
  df_rt_list_synckey : $ef64          61284
    df_rt_list_token : $efbc          61372
   df_rt_list_vvtend : $f089          61577
       df_rt_loadbin : $f305          62213
  df_rt_loadbin_byte : $f307          62215
   df_rt_loadbin_inc : $f311          62225
      df_rt_loadline : $f27e          62078
         df_rt_local : $ec3d          60477
    df_rt_local_done : $ec65          60517
 df_rt_local_findesc : $ec44          60484
           df_rt_lsr : $e811          59409
        df_rt_lsrbit : $e817          59415
       df_rt_lsrdone : $e821          59425
       df_rt_lst_bin : $f043          61507
       df_rt_lst_bit : $f04d          61517
 df_rt_lst_bit_skip0 : $f055          61525
    df_rt_lst_bytbin : $f039          61497
    df_rt_lst_bythex : $f014          61460
       df_rt_lst_chr : $eff7          61431
df_rt_lst_const_done : $f023          61475
   df_rt_lst_hex_pre : $f00a          61450
    df_rt_lst_intbin : $f041          61505
    df_rt_lst_intdec : $f05d          61533
    df_rt_lst_inthex : $f027          61479
    df_rt_lst_lo_hex : $f017          61463
      df_rt_lst_proc : $f068          61544
  df_rt_lst_reserved : $eff6          61430
    df_rt_lst_strlit : $f0ba          61626
  df_rt_lst_strlitch : $f0c1          61633
 df_rt_lst_strlitdon : $f0cc          61644
       df_rt_lst_var : $f068          61544
            df_rt_lt : $e884          59524
           df_rt_lte : $e88e          59534
      df_rt_lte_calc : $e891          59537
           df_rt_mem : $f394          62356
      df_rt_mem_calc : $f3d5          62421
      df_rt_mem_free : $f39f          62367
       df_rt_mem_prg : $f3b2          62386
       df_rt_mem_var : $f3c5          62405
           df_rt_mid : $f526          62758
           df_rt_mod : $e7dd          59357
AS65 Assembler for R6502 [1.42].                                     Page   11
-------------------------------- bank\bank0.s --------------------------------

       df_rt_monitor : $e945          59717
          df_rt_mult : $e79b          59291
         df_rt_music : $f1c6          61894
       df_rt_nassign : $ee20          60960
            df_rt_ne : $e8b6          59574
         df_rt_neval : $e21e          57886
    df_rt_neval_done : $e26a          57962
   df_rt_neval_donow : $e28d          57997
     df_rt_neval_esc : $e248          57928
df_rt_neval_nextbyte : $e272          57970
    df_rt_neval_optk : $e221          57889
 df_rt_neval_process : $e261          57953
  df_rt_neval_pushOp : $e29e          58014
      df_rt_neval_tk : $e24f          57935
   df_rt_neval_tk_fn : $e26b          57963
   df_rt_neval_tk_op : $e277          57975
  df_rt_neval_tk_opp : $e276          57974
           df_rt_new : $e948          59720
          df_rt_next : $eab0          60080
     df_rt_nextdatum : $eb4c          60236
      df_rt_nextstat : $e5a8          58792
  df_rt_nextstat_err : $e5d4          58836
   df_rt_nextstat_ln : $e5bf          58815
    df_rt_next_check : $eb00          60160
      df_rt_next_err : $eb09          60169
      df_rt_noif_err : $ea2f          59951
df_rt_openforbinload : $f2a8          62120
df_rt_openforbinsave : $f29f          62111
            df_rt_or : $e833          59443
         df_rt_paper : $ed7a          60794
     df_rt_parm_pop3 : $e4fa          58618
    df_rt_parm_2ints : $e4e2          58594
    df_rt_parm_3ints : $e4ed          58605
    df_rt_parm_4ints : $e504          58628
    df_rt_parse_file : $f24f          62031
          df_rt_peek : $f359          62297
         df_rt_pixel : $f409          62473
       df_rt_pixmode : $ed6e          60782
          df_rt_play : $f1db          61915
          df_rt_plot : $ecf1          60657
       df_rt_plotstr : $ed23          60707
     df_rt_plotstrch : $ed34          60724
   df_rt_plotstrdone : $ed61          60769
    df_rt_plot_h_int : $ed1a          60698
    df_rt_plot_h_str : $ed4f          60751
         df_rt_point : $ed84          60804
          df_rt_poke : $f180          61824
      df_rt_pop_stat : $e5e4          58852
   df_rt_pop_stat_go : $e67b          59003
         df_rt_print : $eddf          60895
       df_rt_printat : $edd5          60885
       df_rt_println : $ee18          60952
    df_rt_print_done : $ee15          60949
  df_rt_print_gotstr : $ee09          60937
     df_rt_print_num : $eb31          60209
     df_rt_print_str : $eb38          60216
  df_rt_print_string : $ee0f          60943
  df_rt_print_str_ch : $eb41          60225
df_rt_print_str_done : $eb4b          60235
      df_rt_print_ws : $ede2          60898
          df_rt_proc : $f5b5          62901
     df_rt_proc_addr : $f5df          62943
AS65 Assembler for R6502 [1.42].                                     Page   12
-------------------------------- bank\bank0.s --------------------------------

    df_rt_proc_local : $f702          63234
df_rt_proc_local_load : $f709          63241
  df_rt_proc_parmerr : $f5b3          62899
df_rt_proc_parm_done : $f5fe          62974
df_rt_proc_parm_none : $f5ff          62975
df_rt_proc_push_parm : $f5ea          62954
df_rt_proc_unloadvar : $f6de          63198
df_rt_proc_unload_done : $f6fe          63230
     df_rt_push_int1 : $f43d          62525
     df_rt_push_stat : $e5d8          58840
     df_rt_putintres : $e76e          59246
          df_rt_read : $ebe9          60393
      df_rt_readbyte : $f35a          62298
 df_rt_readbyte_skip : $f36f          62319
     df_rt_readdatum : $eb94          60308
     df_rt_read_done : $ebfe          60414
 df_rt_read_find_var : $ebeb          60395
        df_rt_repeat : $eb0b          60171
         df_rt_reset : $f342          62274
        df_rt_return : $f6d5          63189
         df_rt_right : $f50b          62731
           df_rt_rnd : $f372          62322
     df_rt_rnd_noeor : $f386          62342
       df_rt_rnd_set : $f38d          62349
           df_rt_run : $ee72          61042
     df_rt_run_token : $e599          58777
          df_rt_sadd : $eb30          60208
       df_rt_sassign : $ee37          60983
       df_rt_savebin : $f317          62231
  df_rt_savebin_byte : $f325          62245
   df_rt_savebin_inc : $f32f          62255
          df_rt_scrn : $f3fc          62460
           df_rt_seq : $e921          59681
         df_rt_seval : $e2d8          58072
    df_rt_seval_copy : $e332          58162
    df_rt_seval_done : $e355          58197
     df_rt_seval_esc : $e2fe          58110
df_rt_seval_esc_proc : $e353          58195
df_rt_seval_esc_strlit : $e34d          58189
 df_rt_seval_esc_var : $e32e          58158
df_rt_seval_nextbyte : $e348          58184
    df_rt_seval_optk : $e2e6          58086
      df_rt_seval_tk : $e30c          58124
   df_rt_seval_tk_fn : $e325          58149
   df_rt_seval_tk_op : $e321          58145
           df_rt_sgn : $f443          62531
         df_rt_sgn_n : $f456          62550
         df_rt_sgn_z : $f45b          62555
           df_rt_sgt : $e918          59672
          df_rt_sgte : $e903          59651
df_rt_skipinitdataptr : $eb82          60290
 df_rt_skipnestendif : $ea0d          59917
    df_rt_skipnestif : $ea00          59904
       df_rt_skip_ws : $e652          58962
  df_rt_skip_ws_loop : $e655          58965
           df_rt_slt : $e911          59665
          df_rt_slte : $e8f6          59638
    df_rt_snd_common : $f18a          61834
           df_rt_sne : $e90a          59658
         df_rt_sound : $f1b3          61875
df_rt_sound_env_skip : $f1b0          61872
   df_rt_sound_noise : $f1bd          61885
AS65 Assembler for R6502 [1.42].                                     Page   13
-------------------------------- bank\bank0.s --------------------------------

       df_rt_sprchar : $f579          62841
        df_rt_sprhit : $f5a1          62881
df_rt_sprhit_inactive : $f5ad          62893
       df_rt_sprinit : $f598          62872
      df_rt_sprmulti : $f59b          62875
        df_rt_sprpos : $f583          62851
        df_rt_sprupd : $f58f          62863
         df_rt_stick : $f3e2          62434
 df_rt_strlen_common : $f468          62568
  df_rt_strlen_count : $f46e          62574
      df_rt_str_comp : $e928          59688
 df_rt_str_comp_byte : $e92d          59693
   df_rt_str_comp_eq : $e942          59714
df_rt_str_comp_false : $e8fd          59645
   df_rt_str_comp_gt : $e93f          59711
   df_rt_str_comp_lt : $e93c          59708
 df_rt_str_comp_true : $e900          59648
    df_rt_str_cpy_ch : $f488          62600
   df_rt_str_extract : $f475          62581
           df_rt_sub : $e788          59272
          df_rt_sval : $e2dc          58076
          df_rt_text : $ed68          60776
         df_rt_tload : $f276          62070
      df_rt_tokenjmp : $e684          59012
          df_rt_true : $e878          59512
         df_rt_tsave : $f25c          62044
df_rt_unexpected_end : $e58e          58766
         df_rt_until : $eb13          60179
df_rt_untilnext_done : $eb26          60198
     df_rt_until_err : $eb2e          60206
           df_rt_val : $f561          62817
       df_rt_val_err : $f575          62837
          df_rt_wait : $edbf          60863
  df_rt_wait_counter : $edc3          60867
     df_rt_wait_done : $edd4          60884
   df_rt_wait_skiphi : $edcd          60877
     df_rt_wait_tick : $edc5          60869
          df_rt_wend : $e9ae          59822
      df_rt_wend_end : $e9ac          59820
      df_rt_wend_err : $e9c2          59842
         df_rt_while : $e94b          59723
     df_rt_while_cmd : $e981          59777
    df_rt_while_done : $e95b          59739
         df_sevalptr : $007a            122
    df_show_err_done : $f931          63793
     df_show_err_fin : $f910          63760
    df_show_err_find : $f8c4          63684
  df_show_err_linnum : $f8f7          63735
    df_show_err_skip : $f8c8          63688
               df_sp : $005f             95
          df_starend : $0074            116
         df_starstrt : $0072            114
         df_strbuffz : $0078            120
          df_stridxz : $0079            121
      df_str_src_end : $f49d          62621
        df_st_malloc : $f79b          63387
df_st_typemismatcherr : $f787          63367
          df_syminiz : $0084            132
           df_symoff : $0083            131
           df_symtab : $0081            129
         df_tk_abort : $e011          57361
           df_tk_add : $e011          57361
AS65 Assembler for R6502 [1.42].                                     Page   14
-------------------------------- bank\bank0.s --------------------------------

          df_tk_addr : $dfee          57326
           df_tk_and : $e011          57361
        df_tk_arrvar : $d9d2          55762
           df_tk_asc : $dfe4          57316
           df_tk_asl : $e011          57361
 df_tk_asm_addr_mode : $fa27          64039
df_tk_asm_addr_mode_ok : $fa16          64022
df_tk_asm_addr_mode_1 : $fa3c          64060
df_tk_asm_addr_mode_2 : $fa46          64070
df_tk_asm_checknexttok : $f9cf          63951
df_tk_asm_checktokch : $f9d1          63953
        df_tk_asm_db : $df78          57208
        df_tk_asm_ds : $e016          57366
        df_tk_asm_dw : $df78          57208
df_tk_asm_exec_parser : $fa18          64024
df_tk_asm_foundsymend : $f9f7          63991
df_tk_asm_found_command : $f991          63889
     df_tk_asm_label : $f9ae          63918
  df_tk_asm_matchtok : $f9c1          63937
  df_tk_asm_mnemonic : $f9ab          63915
       df_tk_asm_opt : $e016          57366
       df_tk_asm_org : $e016          57366
df_tk_asm_parse_command : $f98c          63884
df_tk_asm_parse_command_err : $f9aa          63914
  df_tk_asm_symfound : $fa0a          64010
df_tk_asm_symnextentry : $f9e8          63976
df_tk_asm_symnomatch : $f9e6          63974
  df_tk_asm_tokenjmp : $ffdb          65499
        df_tk_assign : $df21          57121
         df_tk_bload : $e01c          57372
          df_tk_body : $db3e          56126
         df_tk_bsave : $e026          57382
          df_tk_call : $e003          57347
      df_tk_callproc : $dfd8          57304
          df_tk_char : $d92a          55594
      df_tk_char_err : $d8d2          55506
         df_tk_chdir : $e016          57366
  df_tk_checknexttok : $dbd1          56273
    df_tk_checktokch : $dbee          56302
           df_tk_chr : $dfe4          57316
        df_tk_circle : $e026          57382
     df_tk_closebrkt : $dfe9          57321
           df_tk_cls : $e011          57361
        df_tk_colour : $e026          57382
       df_tk_comment : $df2a          57130
  df_tk_comment_done : $df35          57141
         df_tk_const : $d968          55656
     df_tk_const_err : $d988          55688
df_tk_const_try_char : $d981          55681
 df_tk_const_try_num : $d977          55671
 df_tk_const_try_str : $d97a          55674
        df_tk_cursor : $e016          57366
          df_tk_data : $df78          57208
     df_tk_data_done : $df76          57206
           df_tk_dec : $dfe4          57316
          df_tk_deek : $dfe4          57316
           df_tk_def : $dfbc          57276
           df_tk_del : $e016          57366
        df_tk_delete : $e016          57366
           df_tk_dim : $df9e          57246
           df_tk_dir : $e011          57361
           df_tk_div : $e011          57361
AS65 Assembler for R6502 [1.42].                                     Page   15
-------------------------------- bank\bank0.s --------------------------------

          df_tk_doke : $e01c          57372
          df_tk_done : $db74          56180
       df_tk_elapsed : $dfee          57326
          df_tk_else : $e011          57361
        df_tk_elseif : $e016          57366
        df_tk_enddef : $e011          57361
         df_tk_endif : $e011          57361
           df_tk_eor : $e011          57361
            df_tk_eq : $e011          57361
         df_tk_error : $df1f          57119
      df_tk_errortab : $f7f6          63478
        df_tk_error2 : $dfe2          57314
   df_tk_error_atpos : $f89d          63645
   df_tk_error_error : $f8a3          63651
  df_tk_error_inline : $f893          63635
   df_tk_exec_parser : $db96          56214
        df_tk_expect : $d8c6          55494
      df_tk_expectok : $d8c4          55492
    df_tk_expect_tok : $d8d4          55508
df_tk_expect_tok_err : $d8df          55519
df_tk_expect_tok_fatal : $d8e4          55524
    df_tk_expression : $dad1          56017
     df_tk_expre_err : $dadc          56028
     df_tk_expr_more : $df7d          57213
           df_tk_for : $dfc1          57281
   df_tk_foundsymend : $dc1d          56349
           df_tk_get : $dfe4          57316
       df_tk_get_buf : $d854          55380
  df_tk_get_buf_null : $d85e          55390
            df_tk_gt : $e011          57361
           df_tk_gte : $e011          57361
         df_tk_hchar : $e026          57382
           df_tk_hex : $dfe4          57316
         df_tk_hires : $e011          57361
            df_tk_if : $e016          57366
           df_tk_imm : $fa5c          64092
      df_tk_indirect : $fa5f          64095
 df_tk_indirect_done : $fa84          64132
    df_tk_indirect_y : $fa73          64115
           df_tk_ink : $e016          57366
         df_tk_input : $df86          57222
       df_tk_isalpha : $d897          55447
    df_tk_isalphanum : $d8a4          55460
 df_tk_isalpha_false : $d894          55444
         df_tk_isbin : $d878          55416
    df_tk_isbin_true : $d881          55425
       df_tk_isdigit : $d86d          55405
 df_tk_isdigit_false : $d876          55414
         df_tk_isEOS : $dae3          56035
         df_tk_ishex : $d882          55426
   df_tk_ishex_false : $d894          55444
   df_tk_ishex_truep : $d892          55442
        df_tk_isproc : $d8aa          55466
   df_tk_isproc_true : $d8af          55471
          df_tk_isws : $d8bf          55487
    df_tk_isws_false : $d8c4          55492
          df_tk_left : $dff7          57335
           df_tk_len : $dfe4          57316
          df_tk_line : $e02e          57390
       df_tk_linenum : $dba5          56229
        df_tk_lineto : $e01c          57372
    df_tk_line_empty : $db92          56210
AS65 Assembler for R6502 [1.42].                                     Page   16
-------------------------------- bank\bank0.s --------------------------------

          df_tk_list : $df5a          57178
df_tk_listp_procname : $df37          57143
df_tk_listp_procname_ch : $df46          57158
df_tk_listp_procname_err : $df58          57176
df_tk_listp_procname_ok : $df57          57175
     df_tk_list_done : $df6a          57194
     df_tk_list_line : $df66          57190
    df_tk_list_procs : $df5f          57183
         df_tk_local : $dfad          57261
      df_tk_localvar : $d9bc          55740
 df_tk_localvar_cont : $d9c2          55746
           df_tk_lsr : $e011          57361
            df_tk_lt : $e011          57361
           df_tk_lte : $e011          57361
      df_tk_matchtok : $dbc4          56260
df_tk_matchtok_skip_op : $dbea          56298
           df_tk_mem : $dfe4          57316
           df_tk_mid : $dffd          57341
           df_tk_mod : $e011          57361
       df_tk_monitor : $e011          57361
          df_tk_mult : $e011          57361
         df_tk_music : $e02e          57390
         df_tk_narry : $da51          55889
     df_tk_narry_end : $da5e          55902
         df_tk_nbrkt : $da63          55907
            df_tk_ne : $e011          57361
           df_tk_new : $e011          57361
          df_tk_next : $e011          57361
     df_tk_next_expr : $df78          57208
           df_tk_nop : $dabc          55996
     df_tk_nop_false : $da7b          55931
       df_tk_not_eos : $dadb          56027
         df_tk_nterm : $da70          55920
    df_tk_nterm_cont : $da7d          55933
    df_tk_nterm_done : $da7b          55931
     df_tk_nterm_err : $daba          55994
    df_tk_nterm_proc : $da6b          55915
   df_tk_nterm_tryfn : $da8a          55946
df_tk_nterm_try_const : $dab4          55988
df_tk_nterm_try_proc : $daa0          55968
 df_tk_nterm_try_var : $daac          55980
           df_tk_num : $d8e6          55526
       df_tk_num_bin : $d915          55573
       df_tk_num_err : $d8d2          55506
    df_tk_num_hexbin : $d907          55559
       df_tk_num_put : $d91d          55581
            df_tk_or : $e011          57361
         df_tk_paper : $e016          57366
          df_tk_parm : $d9aa          55722
 df_tk_parm_skip_var : $d9b7          55735
    df_tk_parseerror : $db94          56212
 df_tk_parse_command : $dafd          56061
df_tk_parse_command_done : $db13          56083
df_tk_parse_command_err : $db14          56084
df_tk_parse_user_proc : $daf3          56051
          df_tk_peek : $dfe4          57316
      df_tk_peek_buf : $d84e          55374
         df_tk_pixel : $dff7          57335
       df_tk_pixmode : $e016          57366
          df_tk_play : $e02e          57390
          df_tk_plot : $e026          57382
         df_tk_point : $e01c          57372
AS65 Assembler for R6502 [1.42].                                     Page   17
-------------------------------- bank\bank0.s --------------------------------

          df_tk_poke : $e01c          57372
     df_tk_preassign : $df0f          57103
         df_tk_print : $df71          57201
       df_tk_printat : $df6b          57195
       df_tk_println : $df71          57201
    df_tk_print_done : $df76          57206
          df_tk_proc : $d9dd          55773
     df_tk_proc_call : $da19          55833
    df_tk_proc_comma : $da33          55859
      df_tk_proc_err : $da4f          55887
     df_tk_proc_errp : $da4e          55886
   df_tk_proc_noparm : $da3c          55868
    df_tk_proc_parms : $da0c          55820
df_tk_proc_skip_args : $da4c          55884
df_tk_proc_skip_call : $da22          55842
  df_tk_put_overflow : $d86b          55403
       df_tk_put_tok : $d85f          55391
          df_tk_read : $df8f          57231
        df_tk_repeat : $e011          57361
         df_tk_reset : $dfda          57306
        df_tk_return : $e013          57363
         df_tk_right : $dff7          57335
           df_tk_rnd : $dfe4          57316
          df_tk_rts1 : $d8a9          55465
           df_tk_run : $e011          57361
          df_tk_scrn : $dff7          57335
           df_tk_sgn : $dfe4          57316
       df_tk_skip_ws : $d8b0          55472
    df_tk_skip_1_spc : $db51          56145
         df_tk_sound : $e026          57382
       df_tk_sprchar : $e01c          57372
        df_tk_sprhit : $dfe4          57316
       df_tk_sprinit : $e011          57361
     df_tk_spritepos : $e026          57382
      df_tk_sprmulti : $e01c          57372
        df_tk_sprpos : $e026          57382
        df_tk_sprupd : $e011          57361
         df_tk_stick : $dfe9          57321
           df_tk_str : $d946          55622
        df_tk_str_ch : $d94e          55630
       df_tk_str_don : $d95f          55647
       df_tk_str_err : $d966          55654
           df_tk_sub : $e011          57361
      df_tk_symfound : $dc2e          56366
df_tk_symfound_final : $dc3e          56382
  df_tk_symnextentry : $dc0e          56334
    df_tk_symnomatch : $dc0c          56332
   df_tk_symnomatchp : $dc0b          56331
          df_tk_text : $e011          57361
         df_tk_tload : $e016          57366
      df_tk_tokenjmp : $dddb          56795
     df_tk_tokentype : $de9f          56991
df_tk_tok_expression : $dadd          56029
       df_tk_try_asm : $db6a          56170
    df_tk_try_assign : $db6f          56175
   df_tk_try_command : $db63          56163
         df_tk_tsave : $e016          57366
         df_tk_until : $e016          57366
           df_tk_val : $dfe4          57316
           df_tk_var : $d98a          55690
      df_tk_variable : $df01          57089
        df_tk_var_ck : $d9a0          55712
AS65 Assembler for R6502 [1.42].                                     Page   18
-------------------------------- bank\bank0.s --------------------------------

      df_tk_var_cont : $d990          55696
    df_tk_var_noarry : $d964          55652
         df_tk_vpeek : $dfe4          57316
          df_tk_wait : $e016          57366
          df_tk_wend : $e011          57361
         df_tk_while : $e016          57366
      df_tk_ws_loop1 : $d8b0          55472
        df_tk_2parms : $e01c          57372
        df_tk_3parms : $e026          57382
        df_tk_4parms : $e02e          57390
          df_tmpptra : $00a1            161
          df_tmpptrb : $00a3            163
          df_tmpptrc : $00a5            165
          df_tmpptrd : $00a7            167
          df_tmpptre : $00a9            169
              df_tok : $0480           1152
          df_tokbuff : $0480           1152
        df_tokensyms : $dc46          56390
           df_tokoff : $007d            125
       df_trap_error : $f8aa          63658
  df_trap_go_monitor : $f8bf          63679
     df_trap_monitor : $f938          63800
      df_trap_normal : $f8c2          63682
           df_varcnt : $0071            113
      df_var_analyse : $d788          55176
df_var_analyse_chk_arry : $d7cf          55247
df_var_analyse_chk_dollar : $d7c0          55232
df_var_analyse_chk_post : $d7c0          55232
  df_var_analyse_err : $d7b6          55222
df_var_analyse_fatal_err : $d7be          55230
   df_var_analyse_ok : $d815          55317
   df_var_check_type : $d6fd          55037
         df_var_find : $d6c3          54979
   df_var_findcreate : $d7e9          55273
df_var_findcreate_copy : $d837          55351
df_var_findcreate_create : $d802          55298
df_var_findcreate_err : $d813          55315
df_var_findcreate_errp : $d812          55314
df_var_findcreate_found : $d7fb          55291
  df_var_find_no_vnt : $d721          55073
    df_var_find_true : $d726          55078
df_var_initialise_var : $d822          55330
 df_var_insert_space : $d72e          55086
    df_var_match_vnt : $d6d3          54995
 df_var_match_vnt_do : $d6df          55007
df_var_match_vnt_sym : $d6e3          55011
    df_var_move_byte : $d750          55120
 df_var_move_byte_do : $d75c          55132
df_var_move_byte_fin : $d76d          55149
     df_var_not_arry : $d7e0          55264
     df_var_not_proc : $d79a          55194
df_var_type_countlen : $d79d          55197
df_var_type_countlen_alphanum : $d7ad          55213
df_var_type_countlen_done : $d7b2          55218
df_var_vnt_entry_end : $d70e          55054
df_var_vnt_sym_nomatch : $d701          55041
     df_var_zero_vnt : $d82e          55342
           df_vntend : $006b            107
          df_vntstrt : $0069            105
           df_vvtend : $006f            111
          df_vvtstrt : $006d            109
               errno : $005d             93
AS65 Assembler for R6502 [1.42].                                     Page   19
-------------------------------- bank\bank0.s --------------------------------

 fd_cload_getname_pc : $c5b3          50611
 fd_csave_getname_pc : $c60d          50701
     fd_getname_addr : $0400           1024
             f_back4 : $c587          50567
         f_block_gap : $c570          50544
     f_block_gap_vec : $0008              8
             f_close : $c5e8          50664
    f_close_no_flush : $c5f1          50673
         f_get_block : $c6de          50910
   f_get_block_bytes : $c6ef          50927
          f_get_byte : $c6c1          50881
      f_get_byte_buf : $c6ce          50894
         f_get_fname : $c5ce          50638
   f_get_fname_start : $c5bf          50623
        f_get_header : $c5c8          50632
              f_init : $c564          50532
          f_init_vec : $0000              0
      f_init_vectors : $c59a          50586
        f_open_bread : $c5b3          50611
       f_open_bwrite : $c603          50691
       f_open_common : $c593          50579
          f_open_msg : $c576          50550
         f_open_read : $c5b3          50611
        f_open_write : $c609          50697
  f_open_write_start : $c60d          50701
       f_print_block : $c6a1          50849
        f_print_open : $c58c          50572
         f_put_block : $c67d          50813
   f_put_block_bytes : $c693          50835
          f_put_byte : $c653          50771
     f_put_byte_done : $c676          50806
         f_put_delay : $c56d          50541
     f_put_delay_vec : $0006              6
         f_read_byte : $c567          50535
     f_read_byte_vec : $0002              2
           f_release : $c573          50547
       f_release_vec : $000a             10
          f_save_msg : $c57f          50559
           f_skip_sd : $c598          50584
     f_storage_table : $000c             12
       f_storage_vec : $0611           1553
        f_write_byte : $c56a          50538
    f_write_byte_vec : $0004              4
       f_write_fname : $c645          50757
      f_write_header : $c63c          50748
               grc_d : $0043             67   *
               grc_r : $003f             63   *
               grc_x : $0040             64   *
              grc_x0 : $003d             61   *
               grc_y : $0042             66   *
              grc_y0 : $003e             62   *
              grl_dx : $0041             65   *
              grl_dy : $0042             66   *
               grl_p : $004b             75   *
            grl_sinx : $004a             74   *
            grl_siny : $004d             77   *
            grl_xyyx : $0043             67   *
              grl_x0 : $003d             61   *
              grl_x1 : $003f             63   *
              grl_y0 : $003e             62   *
              grl_y1 : $0040             64   *
             grl_2dx : $0044             68   *
AS65 Assembler for R6502 [1.42].                                     Page   20
-------------------------------- bank\bank0.s --------------------------------

            grl_2dxy : $0048             72   *
             grl_2dy : $0046             70   *
             gr_char : $0003              3
  gr_check_font_copy : $ce54          52820
gr_check_font_copy_done : $ce6b          52843
           gr_circle : $d243          53827
      gr_circle_done : $d280          53888
    gr_circle_d_lte0 : $d273          53875
      gr_circle_plot : $d250          53840
    gr_circle_points : $d281          53889
              gr_cls : $cf3f          53055
          gr_cls_col : $cf5f          53087
          gr_cls_row : $cf4b          53067
    gr_cls_skip_marg : $cf5b          53083
        gr_copy_byte : $ce2b          52779
         gr_copy_mem : $ce21          52769
         gr_cur_down : $d084          53380
         gr_cur_left : $d066          53350
          gr_cur_ptr : $000c             12
        gr_cur_right : $d054          53332
  gr_cur_skip_at_bot : $d090          53392
 gr_cur_skip_at_left : $d075          53365
   gr_cur_skip_at_tl : $d079          53369
           gr_cur_up : $d07a          53370
            gr_cur_x : $000a             10
            gr_cur_y : $000b             11
              gr_del : $d091          53393
       gr_geom_fill1 : $0007              7
         gr_geom_tmp : $0015             21
        gr_geom_tmp2 : $0017             23
              gr_get : $cfa6          53158
       gr_getXY_base : $cf83          53123
          gr_get_key : $d099          53401
        gr_get_key_2 : $d09d          53405
            gr_hchar : $d152          53586
   gr_hchar_copyline : $d1aa          53674
gr_hchar_copyline_eor : $d1c0          53696
gr_hchar_copyline_erase : $d1d0          53712
gr_hchar_copyline_nx : $d1e5          53733
    gr_hchar_getfont : $d185          53637
       gr_hchar_mask : $d17d          53629
    gr_hchar_rot1bit : $d18f          53647
gr_hchar_rot1bit_bcc : $d19a          53658
 gr_hchar_rot1bit_nx : $d19f          53663
            gr_hcode : $d138          53560
       gr_hcode_loop : $d13e          53566
          gr_hires_x : $0010             16
          gr_hires_y : $0011             17
         gr_hi_start : $0001              1
             gr_init : $ce3b          52795
        gr_init_font : $ce0b          52747
        gr_init_geom : $ce6c          52844
   gr_init_geom_done : $ce6b          52843
       gr_init_hires : $cec2          52930
gr_init_hires_tables : $cefb          52987
  gr_init_screen_txt : $cea9          52905
     gr_init_tab_col : $cf27          53031
gr_init_tab_col_skip : $cf39          53049
     gr_init_tab_row : $cf05          52997
              gr_ink : $0012             18
    gr_key_check_key : $d0a9          53417
      gr_key_got_key : $d0c0          53440
AS65 Assembler for R6502 [1.42].                                     Page   21
-------------------------------- bank\bank0.s --------------------------------

       gr_key_no_key : $d0cb          53451
    gr_key_skip_copy : $d0b1          53425
      gr_key_tidy_up : $d0c2          53442
             gr_line : $d2f9          54009
        gr_line_done : $d3d3          54227
       gr_line_neg_p : $d3c3          54211
       gr_line_pixel : $d38c          54156
 gr_line_skip_dx_neg : $d317          54039
 gr_line_skip_dy_neg : $d324          54052
   gr_line_skip_left : $d354          54100
gr_line_skip_xy_swap : $d344          54084
   gr_line_skip_y_up : $d35c          54108
     gr_line_yx_skip : $d398          54168
           gr_margin : $0014             20
             gr_mode : $0000              0
           gr_new_ln : $d03c          53308
       gr_nl_skip_nl : $d051          53329
       gr_no_special : $d0e0          53472
      gr_offset_40hi : $d3f0          54256
      gr_offset_40lo : $d3d4          54228
            gr_paper : $0013             19
            gr_pitch : $000f             15
            gr_pixel : $d20c          53772
          gr_pixmode : $000e             14
             gr_plot : $cf93          53139
            gr_point : $d212          53778
       gr_point_done : $d242          53826
        gr_point_eor : $d23e          53822
      gr_point_setup : $d1f4          53748
  gr_point_skip_attr : $d234          53812
      gr_point_write : $d240          53824
        gr_printable : $d104          53508
        gr_print_msg : $d123          53539
   gr_print_msg_done : $d133          53555
   gr_print_msg_loop : $d129          53545
  gr_process_special : $d0e9          53481
              gr_put : $cf9b          53147
         gr_put_byte : $d0cf          53455
     gr_put_byte_low : $d0e1          53473
           gr_screen : $0018             24
         gr_scrngeom : $0011             17
    gr_scrngeom_base : $ce7b          52859
   gr_scrngeom_hires : $ce90          52880
    gr_scrngeom_text : $ce81          52865
      gr_scroll_char : $cffe          53246
    gr_scroll_cpy_ln : $cffb          53243
  gr_scroll_erase_ln : $d032          53298
      gr_scroll_marg : $d02e          53294
   gr_scroll_routine : $d045          53317
        gr_scroll_up : $cfdf          53215
          gr_set_cur : $cfac          53164
     gr_set_cur_init : $cfad          53165
     gr_set_cur_skip : $cfbf          53183
    gr_set_hires_cur : $d207          53767
       gr_special_ch : $d10a          53514
    gr_special_fn_hi : $d11b          53531
    gr_special_fn_lo : $d113          53523
     gr_special_loop : $d0ed          53485
         gr_spr_char : $d47f          54399
         gr_spr_draw : $d45e          54366
    gr_spr_draw_loop : $d460          54368
    gr_spr_draw_next : $d46c          54380
AS65 Assembler for R6502 [1.42].                                     Page   22
-------------------------------- bank\bank0.s --------------------------------

        gr_spr_erase : $d41a          54298
     gr_spr_erase_do : $d422          54306
   gr_spr_erase_loop : $d41c          54300
   gr_spr_erase_next : $d428          54312
          gr_spr_hit : $d485          54405
         gr_spr_init : $d40c          54284
    gr_spr_init_loop : $d40e          54286
   gr_spr_multi_loop : $d4a0          54432
    gr_spr_multi_pos : $d49c          54428
          gr_spr_new : $d42c          54316
     gr_spr_new_loop : $d42e          54318
     gr_spr_new_next : $d45a          54362
          gr_spr_pos : $d48f          54415
          gr_spr_put : $d470          54384
           gr_text_h : $0009              9
       gr_text_start : $0005              5
           gr_text_w : $0008              8
              HICHAR : $9800          38912   *
              HISCRN : $a000          40960   *
              HITEXT : $bf68          49000   *
          hex_to_bcd : $c351          50001
           hires_col : $9d90          40336   *
          hires_mask : $9e80          40576   *
        hires_row_hi : $9cc8          40136   *
       hires_row_low : $9c00          39936   *
                 IER : $000e             14   *
                 IFR : $000d             13   *
             IFR_CA1 : $0002              2   *
             IFR_CA2 : $0001              1   *
             IFR_CB1 : $0010             16   *
                IO_0 : $0300            768   *
       inc_kb_timers : $c153          49491
            infinity : $c07e          49278
                init : $c4af          50351
            init_irq : $c0ba          49338
       init_keyboard : $c894          51348
            init_ram : $c4d8          50392
       init_ram_fill : $c4e5          50405
       init_ram_skip : $c4ea          50410
          init_ram_1 : $c4e1          50401
            init_snd : $d5d6          54742
       init_snd_regs : $d5d8          54744
       init_tape_tab : $c521          50465
           init_via0 : $c4f7          50423
      init_via0_done : $c509          50441
      init_via0_loop : $c4f9          50425
       init_via0_tab : $c50a          50442
      init_via0_tape : $c4f4          50420
              init_2 : $c4b4          50356
             int_div : $d660          54880
       int_div_cycle : $d692          54930
      int_div_noflip : $d6c2          54978
        int_div_skip : $d6ac          54956
   int_div_skip_negA : $d677          54903
   int_div_skip_negB : $d68a          54922
       int_fast_mult : $d60c          54796
 int_fast_mult_cycle : $d61c          54812
  int_fast_mult_next : $d62d          54829
            int_mult : $d635          54837
      int_mult_cycle : $d645          54853
       int_mult_next : $d658          54872
             int_str : $c3ba          50106
AS65 Assembler for R6502 [1.42].                                     Page   23
-------------------------------- bank\bank0.s --------------------------------

          int_to_str : $c39b          50075
       int_to_str_ch : $c386          50054
   int_to_str_ch_fin : $c39a          50074
      int_to_str_fin : $c3d9          50137
       int_to_str_nz : $c393          50067
 int_to_str_skip_neg : $c3b5          50101
         int_vdp_fin : $c148          49480
     int_vdp_handler : $c12d          49453
    io_active_device : $c401          50177
          io_address : $0300            768
            io_block : $0601           1537
           io_buf_sz : $c48d          50317
            io_close : $c433          50227
          io_close_f : $0008              8
        io_copy_data : $c40e          50190
          io_default : $0600           1536
           io_delete : $c436          50230
            io_del_f : $000a             10
          io_devices : $c48f          50319
          io_device0 : $c48f          50319
          io_device1 : $c49f          50335
          io_do_echo : $c456          50262
             io_ext1 : $000c             12
             io_ext2 : $000e             14
         io_get_byte : $0000              0
           io_get_ch : $c427          50215
    io_get_line_byte : $c443          50243
    io_get_line_done : $c470          50288
             io_init : $c3f6          50166
          io_null_op : $c48b          50315
        io_open_ext1 : $c439          50233
        io_open_ext2 : $c43c          50236
           io_open_r : $0004              4
        io_open_read : $c42d          50221
           io_open_w : $0006              6
       io_open_write : $c430          50224
       io_print_done : $c489          50313
       io_print_line : $c478          50296
  io_print_line_byte : $c47f          50303
         io_put_byte : $0002              2
           io_put_ch : $c42a          50218
        io_read_line : $c43f          50239
      io_set_default : $c3fe          50174
        io_skip_echo : $c459          50265
     io_skip_special : $c464          50276
           io_struct : $0010             16
                 irq : $c0de          49374
             irq_brk : $c100          49408
             irq_fin : $c0fa          49402
           KB_CAPSLK : $0001              1   *
         KB_DEBOUNCE : $0001              1   *
              KB_IJK : $0020             32   *
              KB_PRB : $00b0            176   *
          KB_REP_DEL : $0014             20   *
          KB_REP_TIM : $0003              3   *
            KB_SENSE : $0008              8   *
          kb_any_key : $c926          51494
     kb_any_key_none : $c946          51526
  kb_any_key_pressed : $c948          51528
      kb_any_key_row : $c92d          51501
              kb_brk : $ca3e          51774
 kb_check_matrix_col : $c962          51554
AS65 Assembler for R6502 [1.42].                                     Page   24
-------------------------------- bank\bank0.s --------------------------------

 kb_check_matrix_row : $c964          51556
      kb_check_skip4 : $c98a          51594
             kb_code : $002b             43
         kb_col_mask : $cade          51934
              kb_deb : $002d             45
          kb_deb_tim : $002e             46
        kb_do_repeat : $ca2e          51758
          kb_get_key : $ca40          51776
          kb_get_try : $ca44          51780
          kb_ijk_map : $caeb          51947
        kb_in_repeat : $ca3a          51770
             kb_last : $002a             42
          kb_no_scan : $c9bf          51647
      kb_process_new : $c9cd          51661
              kb_raw : $0029             41
         kb_rdel_tim : $0031             49
         kb_read_got : $c948          51528
     kb_read_noshift : $c9fa          51706
     kb_read_nothing : $c995          51605
         kb_read_raw : $c94a          51530
   kb_read_raw_force : $c94f          51535
     kb_read_raw_got : $c999          51609
              kb_rep : $002f             47
          kb_rep_tim : $0030             48
      kb_scan_decode : $c9c3          51651
     kb_scan_got_key : $ca55          51797
         kb_scan_key : $c9a8          51624
        kb_skip_ctrl : $ca16          51734
             kb_stat : $002c             44
            kb_stick : $c8ca          51402
        kb_stick_ijk : $c8f8          51448
       kb_stick_mask : $cae6          51942
        kb_stick_pos : $c8df          51423
       kb_store_last : $ca36          51766
      kb_table_shift : $ca9e          51870
        kb_table_std : $ca5e          51806
         kernel_init : $c4bd          50365
         kernel_test : $c4d7          50391
                main : $c077          49271
           mem_start : $071f           1823
        mod_sz_asm_e : $fff8          65528
        mod_sz_asm_s : $f98c          63884
       mod_sz_bios_e : $d60c          54796
       mod_sz_bios_s : $c000          49152
        mod_sz_cia_e : $c54c          50508
        mod_sz_cia_s : $c4f4          50420
      mod_sz_dflat_e : $f7f6          63478
      mod_sz_dflat_s : $d6c3          54979
       mod_sz_file_e : $c6fd          50941
       mod_sz_file_s : $c54c          50508
      mod_sz_graph_e : $d4b0          54448
      mod_sz_graph_s : $cb0b          51979
         mod_sz_io_e : $c4af          50351
         mod_sz_io_s : $c3f6          50166
     mod_sz_kernel_e : $c4f4          50420
     mod_sz_kernel_s : $c000          49152
   mod_sz_language_e : $fff8          65528
   mod_sz_language_s : $d60c          54796
       mod_sz_proc_e : $f716          63254
       mod_sz_proc_s : $f5b3          62899
   mod_sz_progedit_e : $e1aa          57770
   mod_sz_progedit_s : $e039          57401
AS65 Assembler for R6502 [1.42].                                     Page   25
-------------------------------- bank\bank0.s --------------------------------

      mod_sz_rtasm_e : $fd88          64904
      mod_sz_rtasm_s : $fa86          64134
     mod_sz_rtsubs_e : $f5b3          62899
     mod_sz_rtsubs_s : $e76e          59246
    mod_sz_runtime_e : $f716          63254
    mod_sz_runtime_s : $e1aa          57770
         mod_sz_sd_e : $c894          51348
         mod_sz_sd_s : $c79b          51099
      mod_sz_sound_e : $d60c          54796
      mod_sz_sound_s : $d5bf          54719
     mod_sz_sprite_e : $d4b0          54448
     mod_sz_sprite_s : $d40c          54284
       mod_sz_tape_e : $c79b          51099
       mod_sz_tape_s : $c6fd          50941
      mod_sz_tkasm_e : $fa86          64134
      mod_sz_tkasm_s : $f98c          63884
   mod_sz_tokenise_e : $e039          57401
   mod_sz_tokenise_s : $d84e          55374
    mod_sz_toksubs_e : $e039          57401
    mod_sz_toksubs_s : $df01          57089
        mod_sz_var_e : $d84e          55374
        mod_sz_var_s : $d6c3          54979
          msg_errmsg : $d5bc          54716
     msg_hello_world : $c081          49281
           msg_ready : $d5ba          54714
             NUM_ANY : $0000              0   *
             NUM_BIN : $0003              3   *
             NUM_DEC : $0001              1   *
             NUM_HEX : $0002              2   *
                 nmi : $c4f3          50419
        null_handler : $c0dd          49373
            null_irq : $c0dc          49372
               num_a : $003d             61
               num_b : $0041             65
             num_buf : $004d             77
             num_tmp : $0049             73
               num_x : $0045             69
                 PCR : $000c             12   *
                 PRA : $0001              1   *
                PRAH : $000f             15   *
                 PRB : $0000              0   *
        print_a_to_d : $c3e5          50149
     print_a_to_d_ch : $c3ea          50154
    print_a_to_d_fin : $c3f5          50165
        SD_BIT_DELAY : $0002              2   *
           SND_ADBUS : $030f            783   *
        SND_DESELECT : $00dd            221   *
            SND_MODE : $030c            780   *
       SND_REG_CHAPH : $0001              1   *
       SND_REG_CHAPL : $0000              0   *
      SND_REG_CHAVOL : $0008              8   *
       SND_REG_CHBPH : $0003              3   *
       SND_REG_CHBPL : $0002              2   *
      SND_REG_CHBVOL : $000a             10   *
       SND_REG_CHCPH : $0005              5   *
       SND_REG_CHCPL : $0004              4   *
        SND_REG_CHNP : $0006              6   *
         SND_REG_CTL : $0007              7   *
      SND_REG_ENVCYC : $000d             13   *
       SND_REG_ENVPH : $000c             12   *
       SND_REG_ENVPL : $000b             11   *
         SND_REG_IOA : $000e             14   *
AS65 Assembler for R6502 [1.42].                                     Page   26
-------------------------------- bank\bank0.s --------------------------------

         SND_REG_IOB : $000f             15   *
         SND_SELREAD : $00df            223   *
      SND_SELSETADDR : $00ff            255   *
        SND_SELWRITE : $00fd            253   *
                  SR : $000a             10   *
               SWBRK : <macro>
             scratch : $061f           1567
        sd_block_gap : $c86e          51310
     sd_commandfname : $c85e          51294
  sd_commandfname_ch : $c863          51299
            sd_delay : $c79b          51099
       sd_delay_loop : $c79f          51103
           sd_delete : $c86f          51311
              sd_dir : $c87a          51322
         sd_dir_char : $c885          51333
             sd_init : $c857          51287
           sd_init_a : $c85b          51291
         sd_notready : $c7c5          51141
        sd_put_delay : $c86e          51310
            sd_ready : $c7c1          51137
      sd_ready_skipx : $c7cb          51147
        sd_read_byte : $c827          51239
      sd_read_nibble : $c812          51218
          sd_release : $c7a5          51109
           sd_select : $c7b1          51121
          sd_timeout : $c7d3          51155
       sd_write_byte : $c7e8          51176
     sd_write_nibble : $c7d5          51157
          skip_a_f_1 : $c191          49553
          skip_a_f_2 : $c1a0          49568
         skip_kb_deb : $c159          49497
         skip_kb_rep : $c15f          49503
          skip_x_f_1 : $c1ac          49580
          skip_x_f_2 : $c1c1          49601
        snd_get_note : $d5bf          54719
    snd_get_note_oct : $d5ca          54730
        snd_init_tab : $d5e2          54754
       snd_music_tab : $d5f2          54770
       snd_note_done : $d5d3          54739
         snd_sel_reg : $c04e          49230
             snd_set : $c06e          49262
         snd_set_reg : $c05e          49246
        spr_baseadrh : $b4e0          46304   *
        spr_baseadrl : $b4c0          46272   *
            spr_bgnd : $b4a0          46240   *
             spr_chr : $b480          46208   *
            spr_curX : $b400          46080   *
            spr_curY : $b440          46144   *
            spr_newX : $b420          46112   *
            spr_newY : $b460          46176   *
          str_a_to_x : $c185          49541
   str_d_digits_done : $c2c1          49857
         str_d_error : $c26d          49773
      str_d_find_end : $c27c          49788
     str_d_found_end : $c289          49801
        str_d_powers : $c2de          49886
 str_d_process_digit : $c297          49815
      str_d_skip_neg : $c2d8          49880
          str_x_to_a : $c1a1          49569
      str_x_to_a_err : $c1cc          49612
     str_x_to_a_errl : $c1cb          49611
           TAPE_RATE : $00d0            208   *
AS65 Assembler for R6502 [1.42].                                     Page   27
-------------------------------- bank\bank0.s --------------------------------

            TEXTCHAR : $b400          46080   *
            TEXTSCRN : $bb80          48000   *
         TIMER1_RATE : $4e20          20000   *
                T1CH : $0005              5   *
                T1CL : $0004              4   *
                T1LH : $0007              7   *
                T1LL : $0006              6   *
                T2CH : $0009              9   *
                T2CL : $0008              8   *
             tmp_ahi : $0033             51
             tmp_alo : $0032             50
           tmp_bank1 : $0000              0
           tmp_bank2 : $0001              1
             tmp_bhi : $0035             53
             tmp_blo : $0034             52
             tmp_chi : $0037             55
             tmp_clo : $0036             54
               tmp_d : $0038             56
        tpsd_vectors : $c54c          50508
            tp_block : $0055             85
        tp_block_gap : $c709          50953
      tp_block_gap_1 : $c70d          50957
              tp_buf : $0200            512
            tp_delay : $0059             89
             tp_flag : $0058             88
              tp_idx : $0057             87
             tp_init : $c6fd          50941
         tp_io_error : $c799          51097
        tp_put_delay : $c701          50945
         tp_read_bit : $c780          51072
     tp_read_bit_cb1 : $c784          51076
        tp_read_byte : $c76c          51052
   tp_read_byte_bits : $c778          51064
     tp_read_byte_st : $c76c          51052
          tp_release : $c700          50944
        tp_write_bit : $c737          50999
   tp_write_bit_chk1 : $c748          51016
   tp_write_bit_chk2 : $c760          51040
     tp_write_bit_t1 : $c757          51031
       tp_write_byte : $c714          50964
   tp_write_byte_bit : $c720          50976
tp_write_byte_nodelay : $c735          50997
     tt_csave_end_pc : $c601          50689
   tt_getsync_end_pc : $c5e7          50663
  tt_getsync_loop_pc : $c784          51076
       tt_getsync_pc : $c5e7          50663
   tt_putbyte_end_pc : $c736          50998
       tt_putbyte_pc : $c714          50964
  tt_readbyte_end_pc : $c77f          51071
      tt_readbyte_pc : $c76c          51052
tt_writeleader_end_pc : $c62d          50733
   tt_writeleader_pc : $c62d          50733
     twos_complement : $c342          49986
twos_complement_skip_X : $c350          50000
             UTF_ACK : $0001              1   *
             UTF_BEL : $0007              7   *
             UTF_BRK : $001a             26   *
              UTF_CR : $000d             13   *
             UTF_DEL : $007f            127   *
             UTF_ETX : $0003              3   *
              UTF_FF : $000c             12   *
         UTF_SPECIAL : $0020             32   *
AS65 Assembler for R6502 [1.42].                                     Page   28
-------------------------------- bank\bank0.s --------------------------------

       update_timers : $c149          49481
          utilPrintA : $c170          49520
       utilPrintCRLF : $c168          49512
        utilPrintSPC : $c160          49504
           VDP_FLASH : $0010             16   *
           vdp_blank : $0010             16
             vdp_cnt : $0008              8
          vdp_cnt_hi : $0009              9
         vdp_cnt_hi2 : $000a             10
          vdp_curcnt : $000c             12
          vdp_curoff : $000d             13
         vdp_curstat : $000e             14
          vdp_curtim : $000b             11
          vdp_curval : $000f             15
  vdp_fill_vram_loop : $cee3          52963
 vdp_fill_vram_noinc : $ceeb          52971
            vdp_font : $cb0b          51979
          vdp_font_a : $cc13          52243
             vec_brk : $0004              4
             vec_irq : $0002              2
        vec_usercia0 : $0006              6
     via_strobe_init : $c530          50480
      via_strobe_off : $c53c          50492
             zp_tmp1 : $00ab            171
             zp_tmp2 : $00ac            172
             zp_tmp3 : $00ad            173
             zp_tmp4 : $00ae            174
             ztmp_24 : $003d             61
          _adcZPByte : <macro>
          _addZPWord : <macro>
                _bcc : <macro>
                _bcs : <macro>
           _code_end : $fff8          65528
         _code_start : $c000          49152
          _cpu_stack : $0100            256
          _cpyZPWord : <macro>
              _debug : <macro>
          _decZPWord : <macro>
         _decZPWordA : <macro>
      _end_zero_page : $00af            175
          _incZPWord : <macro>
       _mod_sz_cmd_e : $d5bf          54719
       _mod_sz_cmd_s : $d4b0          54448
       _PushFalseJmp : <macro>
        _PushTrueJmp : <macro>
             _printA : <macro>
             _printC : <macro>
            _printCA : <macro>
          _printCRLF : <macro>
            _println : <macro>
        _println_low : <macro>
          _printmsgA : <macro>
            _pullAXY : <macro>
            _pushAXY : <macro>
         _rom_vec_0a : $c01e          49182
         _rom_vec_0b : $c021          49185
         _rom_vec_0c : $c024          49188
         _rom_vec_0d : $c027          49191
         _rom_vec_0e : $c02a          49194
         _rom_vec_0f : $c02d          49197
         _rom_vec_00 : $c000          49152
         _rom_vec_01 : $c003          49155
AS65 Assembler for R6502 [1.42].                                     Page   29
-------------------------------- bank\bank0.s --------------------------------

         _rom_vec_02 : $c006          49158
         _rom_vec_03 : $c009          49161
         _rom_vec_04 : $c00c          49164
         _rom_vec_05 : $c00f          49167
         _rom_vec_06 : $c012          49170
         _rom_vec_07 : $c015          49173
         _rom_vec_08 : $c018          49176
         _rom_vec_09 : $c01b          49179
         _rom_vec_10 : $c030          49200
         _rom_vec_11 : $c033          49203
         _rom_vec_12 : $c036          49206
         _rom_vec_13 : $c039          49209
         _rom_vec_14 : $c03c          49212
         _rom_vec_15 : $c03f          49215
         _rom_vec_16 : $c042          49218
         _rom_vec_17 : $c045          49221
         _rom_vec_18 : $c048          49224
         _rom_vec_19 : $c04b          49227
          _sbcZPByte : <macro>
            _sendcmd : <macro>
          _subZPWord : <macro>
            __6502__ : $0001              1

1730 labels used

16329 lines read, no errors in pass 1.
AS65 Assembler for R6502 [1.42].                                     Page   30
-------------------------------- bank\bank0.s --------------------------------

c000 =                       	org 0xc000
c000 :                       mod_sz_bios_s
                             	include "kernel/kernel.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  KERNEL.S
                             ;*	Lol, I thought this would become more sophisti
                             ;*	hence the name 'kernel'. But no, it just initi
                             ;*	memory, VIA, sound and screen, before passing 
                             ;*	to main.
                             ;*	References to banks etc. are from ported code 
                             ;*	did do more stuff, namely helping with ROM ban
                             ;*
                             ;************************************************
                             
                             ;* Include all definition and code files in the r
                             	include "inc/includes.i"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  INCLUDES.S
                             ;*  Main include file for key definitions and mac
                             ;*  Many of the settings here are exremely machin
                             ;*  Defines : IO block addresses, VIA port usage,
                             ;*  settings, useful macros, sound chip registers
                             ;*  and ACIA registers.
                             ;*	Of course the Oric doesn't have a VDP or an AC
                             ;*	so this file could be optimised.
                             ;*
                             ;************************************************
                             
                             ;* The IO block is at 0x0300
0300 =                       IO_0		= 0x0300
                             
0010 =                       VDP_FLASH	= 16				;* 32/50 second flash
                             
4e20 =                       TIMER1_RATE	= 1000000 / 50		;* 50 times per secon
00d0 =                       TAPE_RATE	= 0xd0				;* Assumed required FM freque
                             
                             ;* Standard definitions of 6522 registers
                             ;* As found in the datasheets
0000 =                       PRB			= 0x00
0001 =                       PRA			= 0x01
0002 =                       DDRB		= 0x02
0003 =                       DDRA		= 0x03
0004 =                       T1CL		= 0x04
0005 =                       T1CH		= 0x05
0006 =                       T1LL		= 0x06
0007 =                       T1LH		= 0x07
0008 =                       T2CL		= 0x08
0009 =                       T2CH		= 0x09
AS65 Assembler for R6502 [1.42].                                     Page   31
-------------------------------- bank\bank0.s --------------------------------

000a =                       SR			= 0x0a
000b =                       ACR			= 0x0b
000c =                       PCR			= 0x0c
000d =                       IFR			= 0x0d
000e =                       IER			= 0x0e
000f =                       PRAH		= 0x0f
                             
0001 =                       IFR_CA2		= 0x01
0002 =                       IFR_CA1		= 0x02
0010 =                       IFR_CB1		= 0x10
                             
                             ;* AY-3-8912 definitions
                             ;* The sound chip is accessed through VIA Port A
030f =                       SND_ADBUS	= IO_0+PRAH
030c =                       SND_MODE	= IO_0+PCR
                             
                             ; Values for the PCR register - always enable CB1
00df =                       SND_SELREAD			= 0b11011111		; CB2=low, CA2=high
00fd =                       SND_SELWRITE		= 0b11111101		; CB2=high, CA2=low
00ff =                       SND_SELSETADDR		= 0b11111111		; CB2=high, CA2=hig
00dd =                       SND_DESELECT		= 0b11011101		; CB2=low,CA2=low
                             
0000 =                       SND_REG_CHAPL	= 0x00
0001 =                       SND_REG_CHAPH	= 0x01
0002 =                       SND_REG_CHBPL	= 0x02
0003 =                       SND_REG_CHBPH	= 0x03
0004 =                       SND_REG_CHCPL	= 0x04
0005 =                       SND_REG_CHCPH	= 0x05
0006 =                       SND_REG_CHNP	= 0x06
0007 =                       SND_REG_CTL		= 0x07
0008 =                       SND_REG_CHAVOL	= 0x08
0009 =                       SND_REG_CHBVOL	= 0x09
000a =                       SND_REG_CHBVOL	= 0x0a
000b =                       SND_REG_ENVPL	= 0x0b
000c =                       SND_REG_ENVPH	= 0x0c
000d =                       SND_REG_ENVCYC	= 0x0d
                             
000e =                       SND_REG_IOA	= 0x0e
000f =                       SND_REG_IOB	= 0x0f
                             
                             
                             ;* Port B
00b0 =                       KB_PRB		= 0xb0			; Upper nibble of PRB default st
0008 =                       KB_SENSE	= 0x08			; Input - Bit 3 port A
0001 =                       KB_CAPSLK	= 0x01			; Id of Caps Lock
0020 =                       KB_IJK		= 0b00100000	; IJK joystick detect bit
                             
0003 =                       KB_REP_TIM	= 3 			; Number of VB periods for the 
0014 =                       KB_REP_DEL	= 20			; Number of VB periods before r
0001 =                       KB_DEBOUNCE	= 1				; Number of VB periods before 
                             
0003 =                       UTF_ETX		= 0x03			; Break character
0007 =                       UTF_BEL		= 0x07
0008 =                       CRSR_LEFT	= 0x08
0009 =                       CRSR_RIGHT	= 0x09
000a =                       CRSR_DOWN	= 0x0a
000b =                       CRSR_UP		= 0x0b
0014 =                       CTRL_CAPS	= 0x14			; CTRL-T to toggle caps
0001 =                       UTF_ACK		= 0x01			; Used for the CTRL-A copy in t
000c =                       UTF_FF		= 0x0c
000d =                       UTF_CR		= 0x0d
001a =                       UTF_BRK		= 0x1a			; Debug - drop in to monitor
AS65 Assembler for R6502 [1.42].                                     Page   32
-------------------------------- bank\bank0.s --------------------------------

007f =                       UTF_DEL		= 0x7f
0020 =                       UTF_SPECIAL = 0x20
                             
0000 =                       CMD_ERR_NOERROR			= 0x00
0001 =                       CMD_ERR_NOTFOUND		= 0x01
0002 =                       CMD_ERR_PARM			= 0x02
0003 =                       CMD_ERR_VAL				= 0x03
                             
                             ;* Number formats for conversion routines
0000 =                       NUM_ANY		= 0x00
0001 =                       NUM_DEC		= 0x01
0002 =                       NUM_HEX		= 0x02
0003 =                       NUM_BIN		= 0x03
                             
                             	
                             
                             ;* USEFUL MACROS HERE
                             
                             ;* Software break to throw errors
                             ;* use like this : SWBRK XX
                             ;* Where XX is the error code
                             SWBRK macro sig
                             	brk
                             	db sig
                             	endm
                             
                             _pushAXY macro
                             	pha
                             	sta tmp_d
                             	txa
                             	pha
                             	tya
                             	pha
                             	lda tmp_d
                             	endm
                             
                             _pullAXY macro
                             	pla
                             	tay
                             	pla
                             	tax
                             	pla
                             	endm
                             
                             _println macro msg
                             	_pushAXY
                             	ldx #lo(msg)
                             	lda #hi(msg)
                             	jsr io_print_line
                             	_pullAXY
                             	endm
                             
                             _println_low macro msg
                             	ldx #lo(msg)
                             	lda #hi(msg)
                             	jsr io_print_line
                             	endm
                             
                             _printmsgA macro msg
                             	_pushAXY
                             	ldx #lo(msg)
                             	lda #hi(msg)
AS65 Assembler for R6502 [1.42].                                     Page   33
-------------------------------- bank\bank0.s --------------------------------

                             	jsr io_print_line
                             	pla
                             	pha
                             	jsr str_a_to_x
                             	jsr _put_byte
                             	txa
                             	jsr _put_byte
                             	lda #UTF_CR
                             	jsr _put_byte
                             	_pullAXY
                             	endm
                             
                             _printA macro
                             	_pushAXY
                             	jsr str_a_to_x
                             	jsr io_put_ch
                             	txa
                             	jsr io_put_ch
                             	_pullAXY
                             	endm
                             
                             _printCRLF macro
                             	pha
                             	lda #UTF_CR
                             	jsr _put_byte
                             	pla
                             	endm
                             
                             _printC macro ch
                             	pha
                             	lda #ch
                             	jsr io_put_ch
                             	pla
                             	endm
                             
                             _printCA macro
                             	pha
                             	jsr _put_byte
                             	pla
                             	endm
                             
                             _sendcmd macro cmd
                             	_pushAXY
                             	ldx #lo(cmd)
                             	lda #hi(cmd)
                             	jsr sd_sendcmd
                             	_pullAXY
                             	endm
                             
                             _incZPWord macro wordp
                             	inc wordp
                             	db	0xd0, 0x02
                             	inc wordp+1
                             	endm
                             
                             _decZPWordA macro wordp
                             	lda wordp
                             	db	0xd0, 0x02
                             	dec wordp+1
                             	dec wordp
                             	endm
                             	
AS65 Assembler for R6502 [1.42].                                     Page   34
-------------------------------- bank\bank0.s --------------------------------

                             _decZPWord macro wordp
                             	pha
                             	sec
                             	lda wordp
                             	sbc #1
                             	sta wordp
                             	lda wordp+1
                             	sbc #0
                             	sta wordp+1
                             	pla
                             	endm
                             
                             _cpyZPWord macro worda,wordb
                             	lda worda
                             	sta wordb
                             	lda worda+1
                             	sta wordb+1
                             	endm
                             	
                             _addZPWord macro worda, wordb
                             	clc
                             	lda worda
                             	adc wordb
                             	sta worda
                             	lda worda+1
                             	adc wordb+1
                             	sta worda+1
                             	endm
                             
                             _subZPWord macro worda, wordb
                             	sec
                             	lda worda
                             	sbc wordb
                             	sta worda
                             	lda worda+1
                             	sbc wordb+1
                             	sta worda+1
                             	endm
                             	
                             _adcZPByte macro worda, byte
                             	clc
                             	lda worda
                             	adc byte
                             	sta worda
                             	db 0x90, 0x02		; bcc 2
                             	inc worda+1
                             	endm
                             
                             _sbcZPByte macro worda, byte
                             	sec
                             	lda worda
                             	sbc byte
                             	sta worda
                             	db 0xb0, 0x02		; bcs 2
                             	inc worda+1
                             	endm
                             
                             _bcc macro skip
                             	db 0x90, skip
                             	endm
                             
                             _bcs macro skip
AS65 Assembler for R6502 [1.42].                                     Page   35
-------------------------------- bank\bank0.s --------------------------------

                             	db 0xb0, skip
                             	endm
                             
                             _debug macro ch
                             	pha
                             	lda #ch
                             	sta 48000
                             	pla
                             	endm
                             	
                             
                             
                             	include "inc/graph.i"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  GRAPH.I
                             ;*  This is the definition file for graphics, spe
                             ;*  The graphics screen handling module.  It is j
                             ;*  structure definition - but this structure is 
                             ;*  record the important attributes of a text scr
                             ;*	This was needed in the previous code due to 32
                             ;*	byte width screens, but Oric only  has 40, so 
                             ;*	could be optimised a little.
                             ;*
                             ;************************************************
                             
                             ; Important screen addresses for the Oric ULA
bb80 =                       TEXTSCRN	=	0xbb80
b400 =                       TEXTCHAR	=	0xb400
a000 =                       HISCRN		=	0xa000
9800 =                       HICHAR		=	0x9800
bf68 =                       HITEXT		=	0xbf68
                             
0000 =                       	struct gr_screen
0000 =                       	db gr_mode					; Text or Hires mode
0001 =                       	dw gr_hi_start				; Address fo hires screen
0003 =                       	dw gr_char					; Start address of charset
0005 =                       	dw gr_text_start			; Start of text memory
0007 =                       	db gr_geom_fill1			; (Not used, maintained for a
0008 =                       	db gr_text_w				; Number of columns
0009 =                       	db gr_text_h				; Number of rows
000a =                       	db gr_cur_x					; Current X position of cursor
000b =                       	db gr_cur_y					; Current Y position of cursor
000c =                       	dw gr_cur_ptr				; VDP address of cursor
000e =                       	db gr_pixmode				; Pixel plot mode (0=Erase, 1=P
000f =                       	db gr_pitch					; Pixel pitch for char plotting
0010 =                       	db gr_hires_x				; X pos of hires cursor
0011 =                       	db gr_hires_y				; Y pos of hires cursor
0012 =                       	db gr_ink					; Ink colour
0013 =                       	db gr_paper					; Paper colour
0014 =                       	db gr_margin				; Left margin
0015 =                       	dw gr_geom_tmp				; One word of temp storage for
0017 =                       	db gr_geom_tmp2				; One byte of temp storage fo
                             	end struct
                             	
                             ; Sprite data stored in free 256 in font space
AS65 Assembler for R6502 [1.42].                                     Page   36
-------------------------------- bank\bank0.s --------------------------------

b400 =                       spr_curX	= TEXTCHAR			; Sprite current X pos
b420 =                       spr_newX	= TEXTCHAR+32		; Sprite new X pos
b440 =                       spr_curY	= TEXTCHAR+64		; Sprite current Y pos
b460 =                       spr_newY	= TEXTCHAR+96		; Sprite new Y pos
b480 =                       spr_chr		= TEXTCHAR+128		; Sprite character
b4a0 =                       spr_bgnd	= TEXTCHAR+160		; Background character u
b4c0 =                       spr_baseadrl= TEXTCHAR+192		; Y low address of sp
b4e0 =                       spr_baseadrh= TEXTCHAR+224		; Y high address of s
                             
                             ; Tables stored in alternate character set area
                             ; only used for high-resolution screen handling
9c00 =                       hires_row_low	=	HICHAR+0x400		; Low byte of row p
9cc8 =                       hires_row_hi	=	hires_row_low+200	; High byte of r
9d90 =                       hires_col		=	hires_row_hi+200	; Pixel to byte col
9e80 =                       hires_mask		=	hires_col+240		; Pixel column to pi
                             
                             
                             	include "io/io.i"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  IO.I
                             ;*  Definitions file for the IO module.  The key 
                             ;*  used by the IO system is defined here.
                             ;*	Some over-engineering here for future possibil
                             ;*
                             ;************************************************
                             
                             ;* General IO structure allows the system to swap
                             ;* different IO devices by using indirect calls t
                             ;* the appropriate routines.
0000 =                       	struct io_struct
0000 =                       	ds	io_get_byte,	2			;* Address of get byte
0002 =                       	ds	io_put_byte,	2			;* Address of put byte
0004 =                       	ds	io_open_r,		2			;* Address of open file for r
0006 =                       	ds	io_open_w,		2			;* Address of open file for w
0008 =                       	ds	io_close_f,		2			;* Address of close file
000a =                       	ds	io_del_f,		2			;* Address of delete file
000c =                       	ds	io_ext1,		2			;* Address of extended function
000e =                       	ds	io_ext2,		2			;* Address of extended function
                             	end struct
                             
                             ;* Structure storage device specific vectors
0000 =                       	struct f_storage_table
0000 =                       	ds	f_init_vec,			2
0002 =                       	ds	f_read_byte_vec,	2
0004 =                       	ds	f_write_byte_vec,	2
0006 =                       	ds	f_put_delay_vec,	2
0008 =                       	ds	f_block_gap_vec,	2
000a =                       	ds	f_release_vec,		2
                             	end struct
                             
                             	include "dflat/dflat.i"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
AS65 Assembler for R6502 [1.42].                                     Page   37
-------------------------------- bank\bank0.s --------------------------------

                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  DFLAT.I
                             ;*  This is the main definitions file for dflat. 
                             ;*  definitions are in here to access the data st
                             ;*  used by dflat.
                             ;*
                             ;************************************************
                             
                             ;* Start dflat program memory
071f =                       DF_PROGSTART=	mem_start
                             ;* This is the top of usable dflat memory plus 1
9800 =                       DF_MEMTOP	=	0x9800
                             
                             ;* Offset in to tokenised line of length and line
0000 =                       DFTK_LINLEN	=	0x00
0001 =                       DFTK_LINNUM	=	0x01
                             
                             ;* Flags for token, escape value for data types a
0080 =                       DFTK_TOKEN	=	0x80
0020 =                       DFTK_ESCVAL	=	0x20
0000 =                       DFTK_EOL	=	0x00
                             
                             ;* Numeric constants are encoded based on size an
                             ;* user representation.
                             ;* For example the decimal value 16 will be encod
                             ;* DFTK_INTDEC followed by the bytes 0 and 16 to 
                             ;* The same value in binary will be encoded as DF
                             ;* followed by the same 0 and 16 bytes.  This is 
                             ;* tokenised value to be displayed in original re
                             ;* So in the two examples, they will be shown as 
                             ;* '0x0010' respectively.
0000 =                       DFTK_CHR	=	0x00
0001 =                       DFTK_RESV1	=	0x01
0002 =                       DFTK_RESV2	=	0x02
0003 =                       DFTK_RESV3	=	0x03
0004 =                       DFTK_RESV4	=	0x04
0005 =                       DFTK_BYTDEC	=	0x05
0006 =                       DFTK_BYTHEX = 	0x06
0007 =                       DFTK_BYTBIN =	0x07
0008 =                       DFTK_RESV8	=	0x08
0009 =                       DFTK_INTDEC	=	0x09
000a =                       DFTK_INTHEX =	0x0a
000b =                       DFTK_INTBIN	=	0x0b
000c =                       DFTK_RESVC	=	0x0c
000d =                       DFTK_RESVD	=	0x0d
000e =                       DFTK_RESVE	=	0x0e
000f =                       DFTK_RESVF	=	0x0f
                             
                             ;* String constant, variable and procedure tokens
0010 =                       DFTK_STRLIT	=	0x10
0011 =                       DFTK_VAR	=	0x11
0012 =                       DFTK_PROC	=	0x12
001f =                       DFTK_STEND	=	0x1f
                             
                             ;* Qualifier for non-local parameters passed to a
0026 =                       DFTK_VARPARM=	'&'
                             
                             ;* Variable Value Table (VVT) definitions
                             ;* The VVT records the values of variables define
AS65 Assembler for R6502 [1.42].                                     Page   38
-------------------------------- bank\bank0.s --------------------------------

                             ;* the Variable Name Table (VNT).  When a variabl
                             ;* used, it is added to the VNT, and the position
                             ;* VNT is used as an index in to the VVT.
                             ;* Every VVT entry is 8 bytes - so the VNT index 
                             ;* shifted left 3 bits to get the VVT offset.
                             ;* The VNT grows from top of memory down, the VVT
                             ;* grows from start of VNT down.
                             
                             ;* Index in to each entry of the VVT
0000 =                       DFVVT_TYPE	=	0x00
0001 =                       DFVVT_LO	=	0x01
0002 =                       DFVVT_HI	=	0x02
0003 =                       DFVVT_DIM1	=	0x03
0004 =                       DFVVT_DIM2	=	0x04
0008 =                       DFVVT_SZ	=	0x08	;VVT is aligned to 8 byte blocks
                             
                             ;* The meaning of the DFVVT_TYPE entry
0001 =                       DFVVT_INT	=	0x01
0002 =                       DFVVT_BYT	=	0x02
0004 =                       DFVVT_STR	=	0x04
0008 =                       DFVVT_FLT	=	0x08
0040 =                       DFVVT_PROC	=	0x40
0080 =                       DFVVT_ARRY	=	0x80
                             
                             ;* Flags indicating the meaning of a token
                             ;* A token has the top bit set (0x80), then the
                             ;* remaining bits indicate what it represents.
0001 =                       DFTK_KW		=	0x01
0002 =                       DFTK_FN		=	0x02
0004 =                       DFTK_STROP	=	0x04
0008 =                       DFTK_OP		=	0x08
0010 =                       DFTK_INT	=	0x10
0020 =                       DFTK_BYT	=	0x20
0040 =                       DFTK_STR	=	0x40
0080 =                       DFTK_FLT	=	0x80
0007 =                       DFTK_OPMSK	=	0x07
00f8 =                       DFTK_RTMSK	= 	0xf8
                             
                             ;* Defines what type of value is on the parameter
                             ;* All numerics are stored as INT, all STR
                             ;* are pointers to the actual string, thus
                             ;* all entries in the parmeter stack are 3 bytes
0001 =                       DFST_INT	=	0x01
0080 =                       DFST_STR	=	0x80
                             
                             ;* Token values of specific commands, used during
                             ;* command processing.
                             ;* ANY CHANGE TO THE ORDER OF KEYWORDS NEEDS TO R
0086 =                       DFRT_DEF	=	0x86
0087 =                       DFRT_ENDDEF	=	0x87
0088 =                       DFRT_RETURN	=	0x88
0089 =                       DFRT_ABORT	=	0x89
008c =                       DFRT_REPEAT	=	0x8c
008e =                       DFRT_FOR	=	0x8e
008f =                       DFRT_NEXT	=	0x8f
0090 =                       DFRT_WHILE	=	0x90
0091 =                       DFRT_WEND	=	0x91
0092 =                       DFRT_IF		=	0x92
0093 =                       DFRT_ELSE	=	0x93
0094 =                       DFRT_ENDIF	=	0x94
0095 =                       DFRT_ELSEIF	=	0x95
0096 =                       DFRT_DATA	=	0x96
AS65 Assembler for R6502 [1.42].                                     Page   39
-------------------------------- bank\bank0.s --------------------------------

0097 =                       DFRT_ASM	=	0x97
                             
                             _PushTrueJmp macro
                             	ldx #0xff
                             	txa
                             	jmp df_st_pushInt
                             	endm
                             
                             _PushFalseJmp macro
                             	ldx #0x00
                             	txa
                             	jmp df_st_pushInt
                             	endm
                             
                             	include "kernel/zeropage.i"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  ZEROPAGE.I
                             ;*  This module name is misleading it is not only
                             ;*  allocations, but also page 2, 3, 4, 5, 6, 7 a
                             ;*  memstart is a handy label that indicates the 
                             ;*  location that we can store dflat programs fro
                             ;*  Zero page is a valuable asset as the 6502 can
                             ;*  this page one cycle quicker than the rest of 
                             ;*  and infact some addressing modes can only use
                             ;*  Due to the value of zero page, a lot of syste
                             ;*  dflat variables are put here.  But we don't h
                             ;*  luxury for single use variables - so you will
                             ;*  see a lot of temporary sounding names which a
                             ;*  have multiple uses across the code base.
                             ;*
                             ;************************************************
                             
                             	; Zero page declarations
                             	bss
0000 =                       	org 0x0000
                             
0000 =                       tmp_bank1	ds	1		; Temp storage ONLY FOR USE BY BA
0001 =                       tmp_bank2	ds	1		; Temp storage ONLY FOR USE BY BA
                             
                             ; Interrupt routine addresses
0002 =                       vec_irq		 ds	2		; Master IRQ handler
0004 =                       vec_brk		 ds	2		; Master BRK handler
0006 =                       vec_usercia0 ds	2		; Where to jump for CIA0 inter
                             
                             ; VDP parameters
0008 =                       vdp_cnt		ds	1		; VDP interrupt counter
0009 =                       vdp_cnt_hi 	ds	1		; VDP counter high
000a =                       vdp_cnt_hi2	ds	1		; VDP counter high 2
000b =                       vdp_curtim	ds	1		; Cursor blink speed
000c =                       vdp_curcnt	ds	1		; Cursor blink countdown
000d =                       vdp_curoff	ds	1		; Cursor off (0 = On)
000e =                       vdp_curstat	ds	1		; Cursor status
000f =                       vdp_curval	ds	1		; Cursor value on screen
0010 =                       vdp_blank	ds	1		; Screen blank value normally 32
                             
AS65 Assembler for R6502 [1.42].                                     Page   40
-------------------------------- bank\bank0.s --------------------------------

                             ; Screen geometry
0011 =                       gr_scrngeom	ds	gr_screen
                             
                             ;Keyboard parameters
0029 =                       kb_raw  	ds	1		; Raw keyboard code
002a =                       kb_last		ds	1		; Code of last key
002b =                       kb_code 	ds	1		; Converted keyboard code
002c =                       kb_stat		ds	1		; Keyboard status for caps and shi
002d =                       kb_deb		ds	1		; Debounce timer
002e =                       kb_deb_tim  ds	1		; Default debounce delay
002f =                       kb_rep		ds	1		; Keyboard repeat speed timer
0030 =                       kb_rep_tim 	ds	1		; Default repeat speed
0031 =                       kb_rdel_tim	ds	1		; Default repeat delay (until s
                             
0032 =                       tmp_alo 	ds	1		; VDP addresses lo
0033 =                       tmp_ahi 	ds	1		; VDP addresses hi
0034 =                       tmp_blo 	ds	1		; Temp address lo
0035 =                       tmp_bhi		ds	1		; Temp address hi
0036 =                       tmp_clo		ds	1		; Temp address lo
0037 =                       tmp_chi		ds	1		; Temp address hi
0038 =                       tmp_d		ds	1		; Temp storage d
                             
                             ; Raw input/output parameters
0039 =                       buf_lo		ds	1		; Line buffer address low
003a =                       buf_hi		ds	1		; Line buffer address high
003b =                       buf_sz		ds	1		; Buffer size
003c =                       buf_ef		ds	1		; End file / line marker
                             
                             
                             ; ** Integer function storage **
003d =                       ztmp_24					; Start of 24 byte scratch area (all 
003d =                       num_a		ds	4		; 4 byte primary accumulator
0041 =                       num_b		ds	4		; 4 byte secondary accumulator
0045 =                       num_x		ds	4		; 4 byte x register
0049 =                       num_tmp		ds	4		; 4 byte temp space
004d =                       num_buf		ds	8		; 8 byte string buffer
                             
                             ; ** Tape function storage **
0055 =                       tp_block	ds	2		; Block number (int)
0057 =                       tp_idx		ds	1		; Current buffer index
0058 =                       tp_flag		ds	1		; zero = closed, 1=read, 2=write
0059 =                       tp_delay	ds	2		; Interblock delay
                             
                             ;
                             ; **** INTERPRETER ZERO PAGE ****
                             ;
005b =                       dflat_zp_s
005b =                       dflat_zp_save_s			; ZP save dflat from here
005b =                       df_checkkey	ds	1		; Key check interval counter
005c =                       df_checkmsk	ds	1		; Mask for check key
005d =                       errno		ds	1		; General error condition status
005e =                       df_immed	ds	1		; Immediate mode (0 = not immediat
005f =                       df_sp		ds	1		; Stack pointer after error to resto
0060 =                       df_pc		ds	2		; PC after error to return to
0062 =                       df_brkpc	ds	2		; PC pushed on the stack for BRK
0064 =                       df_brkval	ds	1		; Byte after BRK instruction
0065 =                       df_prgstrt	ds	2		; Start of program code
0067 =                       df_prgend	ds	2		; End of program code
0069 =                       df_vntstrt	ds	2		; Variable name table start
006b =                       df_vntend	ds	2		; Variable name table end
006d =                       df_vvtstrt	ds	2		; Variable value table start
006f =                       df_vvtend	ds	2		; Variable value table end
AS65 Assembler for R6502 [1.42].                                     Page   41
-------------------------------- bank\bank0.s --------------------------------

0071 =                       df_varcnt	ds	1		; Variable counter
0072 =                       df_starstrt	ds	2		; String and array table start
0074 =                       df_starend	ds	2		; String and array table end
0076 =                       df_rtstop	ds	1		; Runtime stack pointer
0077 =                       df_parmtop	ds	1		; Top of parameter stack (grows 
0078 =                       df_strbuffz	ds	1		; String expression buffer (*un
0079 =                       df_stridxz	ds	1		; Top of string buffer (grows do
007a =                       df_sevalptr	ds	2		; Pointer to next free char in 
                             
007c =                       df_linoff	ds	1		; Offset in to line buffer
007d =                       df_tokoff	ds	1		; Offset in to tokenised buffer
007e =                       df_eolidx	ds	1		; End of line index (i.e length)
007f =                       df_nxtstidx	ds	1		; Offset to the next statement 
0080 =                       df_curstidx	ds	1		; Offset to the start of curren
0081 =                       df_symtab	ds	2		; Pointer to next free symtab ent
0083 =                       df_symoff	ds	1		; Offset in to token table
0084 =                       df_syminiz	ds	2		; Start of symtab (*unused*)
0086 =                       df_currlin	ds	2		; Execution current line pointer
0088 =                       df_exeoff	ds	1		; Execution line buffer offset
0089 =                       df_nextlin	ds	2		; Next line to execute
008b =                       df_procmode	ds	1		; Only used during tokenisation
008c =                       df_procargs	ds	1		; Only used during tokenisation
008d =                       df_procloc	ds	1		; Counts the number of local par
008e =                       df_procptr	ds	2		; Pointer to proc vvt slot
0090 =                       df_lineptr	ds	2		; Pointer to line during searche
0092 =                       df_lineidx	ds	1		; Pointer to line index during s
0093 =                       df_ifnest	ds	1		; Global nested if counter
0094 =                       df_currdat	ds	2		; Data current line pointer
0096 =                       df_datoff	ds	1		; Data line buffer offset
0097 =                       df_rnd		ds	2		; Random number seed
                             
0099 =                       df_asmpc	ds	2		; Assembler program counter
009b =                       df_asmopt	ds	1		; Assembler current option
009c =                       df_asmadmd	ds	1		; Addressing mode
009d =                       df_asmopcde	ds	1		; Current opcode
009e =                       df_asmoprnd	ds	2		; Current operand
00a0 =                       df_asmlen	ds	1		; Instruction length
                             
00a1 =                       dflat_zp_save_e			; Save up to this place
                             
                             ; Temp space for dflat
00a1 =                       df_tmpptra	ds	2		; Temp pointer a
00a3 =                       df_tmpptrb	ds	2		; Temp pointer b
00a5 =                       df_tmpptrc	ds	2		; Temp pointer c
00a7 =                       df_tmpptrd	ds	2		; Temp pointer d
00a9 =                       df_tmpptre	ds	2		; Temp pointer e
                             
00ab =                       dflat_zp_e
                             
00ab =                       zp_tmp1		ds	1		; General zero page temporary
00ac =                       zp_tmp2		ds	1		; General zero page temporary
00ad =                       zp_tmp3		ds	1		; General zero page temporary
00ae =                       zp_tmp4		ds	1		; General zero page temporary
                             
                             ;***** END OF ZERO PAGE *****
00af =                       _end_zero_page
                             
                             ;***** Page 1 is CPU stack ****
0100 =                       	org 0x0100
0100 =                       _cpu_stack
0100 =                       			ds	256		; All of page 1
                             
AS65 Assembler for R6502 [1.42].                                     Page   42
-------------------------------- bank\bank0.s --------------------------------

                             ;***** Page 2 is tape buffer *****
0200 =                       	org 0x0200
0200 =                       tp_buf		ds	256		; Serial input / output line buff
                             
                             ;***** 3 is IO *****
0300 =                       	org 0x0300			; IO mapped to Page 3 on Oric
0300 =                       io_address	ds	256
                             
0400 =                       	org 0x0400			; Page 4 = dflat space
0400 =                       fd_getname_addr			; ** FOR ORICUTRON EMULATOR **
0400 =                       df_linbuff
0400 =                       df_raw		ds	128		; untokenised input line
0480 =                       df_tokbuff
0480 =                       df_tok		ds 	128		; tokenised output line
                             
0500 =                       	org 0x0500			; Page 5 = fixed space for interpre
0500 =                       df_rtstck				; operator stack grow up, runtime gr
0500 =                       df_rtspace	ds	256
                             
                             
                             ;***** NON-ZERO PAGE VARIABLES *****
                             
                             ; Active IO device settings
0600 =                       io_default	ds	1		; The default device number
0601 =                       io_block	ds	io_struct
                             
                             ; Jump tables for file devices
0611 =                       f_storage_vec		ds	f_storage_table
                             
                             ; Dflat top of memory+1 - initialised at boot tim
061d =                       df_memtop	ds	2
                             
                             ; Scratch area e.g. string and numeric expression
061f =                       scratch		ds	256
                             
                             ;***** THIS IS THE START OF FREE SPACE for DFLAT 
071f =                       mem_start
                             
                             
                             	include "dflat/dflat.i"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  DFLAT.I
                             ;*  This is the main definitions file for dflat. 
                             ;*  definitions are in here to access the data st
                             ;*  used by dflat.
                             ;*
                             ;************************************************
                             
                             ;* Start dflat program memory
071f =                       DF_PROGSTART=	mem_start
                             ;* This is the top of usable dflat memory plus 1
9800 =                       DF_MEMTOP	=	0x9800
                             
                             ;* Offset in to tokenised line of length and line
0000 =                       DFTK_LINLEN	=	0x00
AS65 Assembler for R6502 [1.42].                                     Page   43
-------------------------------- bank\bank0.s --------------------------------

0001 =                       DFTK_LINNUM	=	0x01
                             
                             ;* Flags for token, escape value for data types a
0080 =                       DFTK_TOKEN	=	0x80
0020 =                       DFTK_ESCVAL	=	0x20
0000 =                       DFTK_EOL	=	0x00
                             
                             ;* Numeric constants are encoded based on size an
                             ;* user representation.
                             ;* For example the decimal value 16 will be encod
                             ;* DFTK_INTDEC followed by the bytes 0 and 16 to 
                             ;* The same value in binary will be encoded as DF
                             ;* followed by the same 0 and 16 bytes.  This is 
                             ;* tokenised value to be displayed in original re
                             ;* So in the two examples, they will be shown as 
                             ;* '0x0010' respectively.
0000 =                       DFTK_CHR	=	0x00
0001 =                       DFTK_RESV1	=	0x01
0002 =                       DFTK_RESV2	=	0x02
0003 =                       DFTK_RESV3	=	0x03
0004 =                       DFTK_RESV4	=	0x04
0005 =                       DFTK_BYTDEC	=	0x05
0006 =                       DFTK_BYTHEX = 	0x06
0007 =                       DFTK_BYTBIN =	0x07
0008 =                       DFTK_RESV8	=	0x08
0009 =                       DFTK_INTDEC	=	0x09
000a =                       DFTK_INTHEX =	0x0a
000b =                       DFTK_INTBIN	=	0x0b
000c =                       DFTK_RESVC	=	0x0c
000d =                       DFTK_RESVD	=	0x0d
000e =                       DFTK_RESVE	=	0x0e
000f =                       DFTK_RESVF	=	0x0f
                             
                             ;* String constant, variable and procedure tokens
0010 =                       DFTK_STRLIT	=	0x10
0011 =                       DFTK_VAR	=	0x11
0012 =                       DFTK_PROC	=	0x12
001f =                       DFTK_STEND	=	0x1f
                             
                             ;* Qualifier for non-local parameters passed to a
0026 =                       DFTK_VARPARM=	'&'
                             
                             ;* Variable Value Table (VVT) definitions
                             ;* The VVT records the values of variables define
                             ;* the Variable Name Table (VNT).  When a variabl
                             ;* used, it is added to the VNT, and the position
                             ;* VNT is used as an index in to the VVT.
                             ;* Every VVT entry is 8 bytes - so the VNT index 
                             ;* shifted left 3 bits to get the VVT offset.
                             ;* The VNT grows from top of memory down, the VVT
                             ;* grows from start of VNT down.
                             
                             ;* Index in to each entry of the VVT
0000 =                       DFVVT_TYPE	=	0x00
0001 =                       DFVVT_LO	=	0x01
0002 =                       DFVVT_HI	=	0x02
0003 =                       DFVVT_DIM1	=	0x03
0004 =                       DFVVT_DIM2	=	0x04
0008 =                       DFVVT_SZ	=	0x08	;VVT is aligned to 8 byte blocks
                             
                             ;* The meaning of the DFVVT_TYPE entry
0001 =                       DFVVT_INT	=	0x01
AS65 Assembler for R6502 [1.42].                                     Page   44
-------------------------------- bank\bank0.s --------------------------------

0002 =                       DFVVT_BYT	=	0x02
0004 =                       DFVVT_STR	=	0x04
0008 =                       DFVVT_FLT	=	0x08
0040 =                       DFVVT_PROC	=	0x40
0080 =                       DFVVT_ARRY	=	0x80
                             
                             ;* Flags indicating the meaning of a token
                             ;* A token has the top bit set (0x80), then the
                             ;* remaining bits indicate what it represents.
0001 =                       DFTK_KW		=	0x01
0002 =                       DFTK_FN		=	0x02
0004 =                       DFTK_STROP	=	0x04
0008 =                       DFTK_OP		=	0x08
0010 =                       DFTK_INT	=	0x10
0020 =                       DFTK_BYT	=	0x20
0040 =                       DFTK_STR	=	0x40
0080 =                       DFTK_FLT	=	0x80
0007 =                       DFTK_OPMSK	=	0x07
00f8 =                       DFTK_RTMSK	= 	0xf8
                             
                             ;* Defines what type of value is on the parameter
                             ;* All numerics are stored as INT, all STR
                             ;* are pointers to the actual string, thus
                             ;* all entries in the parmeter stack are 3 bytes
0001 =                       DFST_INT	=	0x01
0080 =                       DFST_STR	=	0x80
                             
                             ;* Token values of specific commands, used during
                             ;* command processing.
                             ;* ANY CHANGE TO THE ORDER OF KEYWORDS NEEDS TO R
0086 =                       DFRT_DEF	=	0x86
0087 =                       DFRT_ENDDEF	=	0x87
0088 =                       DFRT_RETURN	=	0x88
0089 =                       DFRT_ABORT	=	0x89
008c =                       DFRT_REPEAT	=	0x8c
008e =                       DFRT_FOR	=	0x8e
008f =                       DFRT_NEXT	=	0x8f
0090 =                       DFRT_WHILE	=	0x90
0091 =                       DFRT_WEND	=	0x91
0092 =                       DFRT_IF		=	0x92
0093 =                       DFRT_ELSE	=	0x93
0094 =                       DFRT_ENDIF	=	0x94
0095 =                       DFRT_ELSEIF	=	0x95
0096 =                       DFRT_DATA	=	0x96
0097 =                       DFRT_ASM	=	0x97
                             
                             _PushTrueJmp macro
                             	ldx #0xff
                             	txa
                             	jmp df_st_pushInt
                             	endm
                             
                             _PushFalseJmp macro
                             	ldx #0x00
                             	txa
                             	jmp df_st_pushInt
                             	endm
                             
                             	include "dflat/error.i"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
AS65 Assembler for R6502 [1.42].                                     Page   45
-------------------------------- bank\bank0.s --------------------------------

                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  ERROR.I
                             ;*  Error definitions file.
                             ;*  The macro to throw an error is elswhere, but 
                             ;*  It issues a 6502 BRK commmand with the next b
                             ;*  the error code.  The BRK handler then picks u
                             ;*  code and shows the appropriate message plus a
                             ;*  number if a program was running.
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code  
                             
                             ; Error message numbers
0000 =                       DFERR_OK		=	0
0001 =                       DFERR_SYNTAX	=	1
0002 =                       DFERR_TYPEMISM	=	2
0003 =                       DFERR_DIM		=	3
0004 =                       DFERR_UNTIL		=	4
0005 =                       DFERR_NOPROC	=	5
0006 =                       DFERR_PROCPARM	=	6
0007 =                       DFERR_IMMEDIATE	=	7
0008 =                       DFERR_UNCLOSEDIF=	8
0009 =                       DFERR_NOIF		=	9
000a =                       DFERR_NEXTFOR	=	10
000b =                       DFERR_FNAME		=	11
000c =                       DFERR_STRLONG	=	12
000d =                       DFERR_BREAK		=	13
000e =                       DFERR_NODATA	=	14
000f =                       DFERR_WEND		=	15
0010 =                       DFERR_NOLINE	=	16
0011 =                       DFERR_RETURN	=	17
0012 =                       DFERR_ABORT		=	18
0013 =                       DFERR_QUANTITY	=	19
0014 =                       DFERR_NOORG		=	20
                             
                             
                             
                             
                             
                             ;****************************************
                             ;*	Set 6502 default vectors	*
                             ;****************************************
                             	data				; Set vectors
fffa =                       	org 0xfffa			; Vectors are at these addresses
fffa : f3c4                  	fcw nmi				; 0xfffa : NMI Vector
fffc : afc4                  	fcw init			; 0xfffc : Reset Vector
fffe : d3c0                  	fcw call_irq_master	; 0xfffe : IRQ Vector
                             
                             	; ROM code
                             	code				;
c000 =                       	org 0xc000			; Start of ROM
                             
c000 :                       _code_start
                             	; Restore current bank always at address c001 * 
c000 :                       mod_sz_kernel_s
                             	; include OS ROM calls - must be from 0xc000
AS65 Assembler for R6502 [1.42].                                     Page   46
-------------------------------- bank\bank0.s --------------------------------

                             	include "kernel/osromvec.i"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2021
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  OSROMVEC.I
                             ;*	This include file sets up the OS ROM vectors w
                             ;*	be invoked by user programs to access ROM func
                             ;*	will be maintained across versions of dflat to
                             ;*	backward and forward compatibility.
                             ;*	Make sure these vectors are set up from 0xc000
                             ;*	what user programs will rely on!
                             ;*
                             ;************************************************
                             	
                             	; Common OS ROM calls - user programs should JMP
                             	; through these routines where possible to maint
                             	; compatibility with ROM changes as these calls 
                             	; always be in the same position
c000 : 4ca9ce           [ 3] _rom_vec_00	jmp	gr_init_screen_txt			; Go in to t
c003 : 4c3fcf           [ 3] _rom_vec_01	jmp gr_cls						; Clear text screen
c006 : 4caccf           [ 3] _rom_vec_02	jmp	gr_set_cur					; Set text cursor 
c009 : 4cc2ce           [ 3] _rom_vec_03	jmp	gr_init_hires				; Go in to hires
c00c : 6c0106           [ 6] _rom_vec_04	jmp (io_block+io_get_byte)		; Get byt
c00f : 6c0306           [ 6] _rom_vec_05	jmp (io_block+io_put_byte)		; Put byt
c012 : 4c3fc4           [ 3] _rom_vec_06 jmp io_read_line				; Read a line
c015 : 4c78c4           [ 3] _rom_vec_07	jmp io_print_line				; Print a line
c018 : 4c6ec0           [ 3] _rom_vec_08	jmp snd_set						; Set sound register
c01b : 4ccac8           [ 3] _rom_vec_09	jmp kb_stick					; Get joystick statu
c01e : 4c93cf           [ 3] _rom_vec_0a	jmp gr_plot						; Plot a lores chara
c021 : 4c52d1           [ 3] _rom_vec_0b	jmp	gr_hchar					; Plot a hires chara
c024 : 4cf4d1           [ 3] _rom_vec_0c	jmp gr_point_setup				; Get address, 
c027 : 4c12d2           [ 3] _rom_vec_0d	jmp gr_point					; Plot a hires pixel
c02a : 4c8ff5           [ 3] _rom_vec_0e	jmp df_rt_sprupd				; Refresh sprites
c02d : 4c83cf           [ 3] _rom_vec_0f	jmp	gr_getXY_base				; Get row addres
c030 : 4c0cd2           [ 3] _rom_vec_10	jmp gr_pixel					; Get a pixel value 
c033 : 4ca6cf           [ 3] _rom_vec_11 jmp gr_get						; Get screen at coord
c036 : 4c01c4           [ 3] _rom_vec_12 jmp io_active_device			; Set the acti
c039 : 6c0506           [ 6] _rom_vec_13	jmp (io_block+io_open_r)		; Open file
c03c : 6c0706           [ 6] _rom_vec_14	jmp (io_block+io_open_w)		; Open file
c03f : 6c0906           [ 6] _rom_vec_15	jmp (io_block+io_close_f)		; Close fi
c042 : 6c0b06           [ 6] _rom_vec_16	jmp (io_block+io_del_f)			; Delete fi
c045 : 6c0d06           [ 6] _rom_vec_17	jmp (io_block+io_ext1)			; Extended o
c048 : 6c0f06           [ 6] _rom_vec_18	jmp (io_block+io_ext2)			; Extended o
c04b : 4cbfd5           [ 3] _rom_vec_19 jmp snd_get_note				; Get for an octa
                             
                             
                             ;* Include all core code in the right order
                             	include "kernel/snd-low.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  SND-LOW.S
AS65 Assembler for R6502 [1.42].                                     Page   47
-------------------------------- bank\bank0.s --------------------------------

                             ;*	Routines to access the AY-3-8912, which is don
                             ;*	lines of the VIA - CB2 and CA2 for chip select
                             ;*	Port A for data interface. This makes accessin
                             ;*	8912 a bit slow..
                             ;*
                             ;* 	CB2		CA2		Function		CB2=BDIR, CA2=BC1
                             ;*	0		0		Not selected
                             ;*	0		1		Read register in to Port A
                             ;*	1		0		Write register from Port A
                             ;*	1		1		Select register # from Port A
                             ;************************************************
                             
                             ;****************************************
                             ;* snd_sel_reg
                             ;* Select AY register from A
                             ;* Input : A = Value
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
c04e :                       snd_sel_reg
c04e : 48               [ 3] 	pha
c04f : 8d0f03           [ 4] 	sta SND_ADBUS			; Put reg # on Port A (sound bus
                             
c052 : a9ff             [ 2] 	lda #SND_SELSETADDR		; Get ready to select the r
c054 : 8d0c03           [ 4] 	sta SND_MODE			; Latch the reg # on Port A
                             
c057 : a9dd             [ 2] 	lda #SND_DESELECT		; Deselect AY
c059 : 8d0c03           [ 4] 	sta SND_MODE
                             
c05c : 68               [ 4] 	pla
c05d : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* snd_set_reg
                             ;* Set previosuly selected AY register
                             ;* Input : A = Value to set
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
c05e :                       snd_set_reg
c05e : 48               [ 3] 	pha
                             
c05f : 8d0f03           [ 4] 	sta SND_ADBUS			; Put reg value on Port A (sound
c062 : a9fd             [ 2] 	lda #SND_SELWRITE		; Select mode for writing dat
c064 : 8d0c03           [ 4] 	sta SND_MODE			; Latch reg value on Port A	
c067 : a9dd             [ 2] 	lda #SND_DESELECT		; Deselect AY
c069 : 8d0c03           [ 4] 	sta SND_MODE
                             
c06c : 68               [ 4] 	pla
c06d : 60               [ 6] 	rts
                             	
                             ;****************************************
                             ;* snd_set
                             ;* Set reg X to value A
                             ;* Input : X=Reg, A = Value to set
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
c06e :                       snd_set
c06e : 48               [ 3] 	pha
c06f : 8a               [ 2] 	txa
c070 : 204ec0           [ 6] 	jsr snd_sel_reg
AS65 Assembler for R6502 [1.42].                                     Page   48
-------------------------------- bank\bank0.s --------------------------------

c073 : 68               [ 4] 	pla
c074 : 4c5ec0           [ 3] 	jmp snd_set_reg
                             
                             
                             ;****************************************
                             ;* snd_get
                             ;* Get AY register X value
                             ;* Input : X = Reg no
                             ;* Output : A = Value
                             ;* Regs affected : None
                             ;****************************************
                             ;snd_get
                             ;
                             ;	lda #0xff				; Set Port A to output
                             ;	sta IO_0+DDRA
                             ;
                             ;	stx SND_ADBUS			; Put X on the sound bus (X = r
                             ;
                             ;	lda #SND_SELSETADDR		; Get ready to select the 
                             ;	sta SND_MODE			; Latch the reg # on Port A
                             ;
                             ;	lda #SND_DESELECT		; Deselect AY
                             ;	sta SND_MODE
                             ;
                             ;	lda #0x00				; Set Port A to input
                             ;	sta IO_0+DDRA
                             ;
                             ;	lda #SND_SELREAD		; Select mode for reading dat
                             ;	sta SND_MODE			; Set read mode on AY
                             ;
                             ;	lda SND_ADBUS			; Get value in to Y from Port A
                             ;	pha						; Save it to stack
                             ;	
                             ;	lda #SND_DESELECT		; Deselect AY
                             ;	sta SND_MODE
                             ;
                             ;	lda #0xff				; Set Port A back to output
                             ;	sta IO_0+DDRA
                             ;
                             ;	pla						; Get the value off stack
                             ;	
                             ;	rts
                             
                             
                             	include "kernel/main.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  MAIN.S
                             ;*  This is where the main user program is execut
                             ;*  the 'kernel' once the system is initialised a
                             ;*  Today, main does very little - first shows th
                             ;*  boot up message, and then passes control to d
                             ;*
                             ;************************************************
                             
                             	; ROM code
AS65 Assembler for R6502 [1.42].                                     Page   49
-------------------------------- bank\bank0.s --------------------------------

                             	code
                             
c077 :                       main
c077 : a281             [ 2] 	ldx #lo(msg_hello_world)
c079 : a9c0             [ 2] 	lda #hi(msg_hello_world)
c07b : 2078c4           [ 6] 	jsr io_print_line
                             
c07e :                       infinity
                             
c07e : 4c01e1           [ 3] 	jmp df_pg_dflat
                             
c081 :                       msg_hello_world
                             	;* build.s is generate by the assemble.bat file
                             	;* all it does is echo an assembler line to
                             	;* including the build date in the message.
                             	include "kernel/build.s"
c081 : 4f726963206466..       db "Oric dflat\r" 
c08c : 42792040363530..       db "By @6502Nerd\r" 
c099 : 4275696c64203a..       db "Build : 0.20 [IJK-SD]\r" 
c0af : 28632920323032..       db "(c) 2023\r\r",0 
                             
                             
                             	include "kernel/irq.s"
                             	
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  IRQ.S
                             ;*	This is the IRQ handler
                             ;*	There is only one regular interrupt source whi
                             ;*	T1 timeout on a 50Hz cycle, whose main job is 
                             ;*	flash the cursor and decrement some timers.
                             ;*	But there are handlers for BRK, user and VIA s
                             ;*	By default the user and VIA do nothing, but ca
                             ;*	redirected to user routines.
                             ;*
                             ;************************************************
                             
                             ;* Obviously this can only be done with
                             ;* interrupts disabled!
c0ba :                       init_irq
                             	; Core IRQ handler
c0ba : a9de             [ 2] 	lda #lo(irq)
c0bc : 8502             [ 3] 	sta vec_irq
c0be : a9c0             [ 2] 	lda #hi(irq)
c0c0 : 8503             [ 3] 	sta vec_irq+1
                             	
                             	; Core BRK handler
c0c2 : a900             [ 2] 	lda #lo(irq_brk)
c0c4 : 8504             [ 3] 	sta vec_brk
c0c6 : a9c1             [ 2] 	lda #hi(irq_brk)
c0c8 : 8505             [ 3] 	sta vec_brk+1
                             
                             	; User handlers VIA0 interrupts
c0ca : a9dd             [ 2] 	lda #lo(null_handler)
c0cc : 8506             [ 3] 	sta vec_usercia0
c0ce : a9c0             [ 2] 	lda #hi(null_handler)
AS65 Assembler for R6502 [1.42].                                     Page   50
-------------------------------- bank\bank0.s --------------------------------

c0d0 : 8507             [ 3] 	sta vec_usercia0+1
                             
c0d2 : 60               [ 6] 	rts
                             
                             
                             ;* Calls the master IRQ handler - from the ROM
c0d3 :                       call_irq_master
c0d3 : 6c0200           [ 6] 	jmp (vec_irq)
                             	
                             ;* Calls the BRK handler
c0d6 :                       call_irq_brk
c0d6 : 6c0400           [ 6] 	jmp (vec_brk)
                             
                             ;* Call the user CIA0 handler
c0d9 :                       call_irq_usercia0
c0d9 : 6c0600           [ 6] 	jmp (vec_usercia0)
                             
                             ;* null interrupt
c0dc :                       null_irq
c0dc : 40               [ 6] 	rti
                             
                             ;* null handler
c0dd :                       null_handler
c0dd : 60               [ 6] 	rts
                             	
                             
                             ;* Master IRQ handler
c0de :                       irq
                             	; Don't use _pushAXY as it uses a temp location!
c0de : 48               [ 3] 	pha
c0df : 8a               [ 2] 	txa
c0e0 : 48               [ 3] 	pha
c0e1 : 98               [ 2] 	tya
c0e2 : 48               [ 3] 	pha
                             
c0e3 : d8               [ 2] 	cld						; Just in case!
c0e4 : 18               [ 2] 	clc						; Standard behaviour
                             
                             	; Check if IRQ or BRK
                             	; load P from stack in to A
c0e5 : ba               [ 2] 	tsx
c0e6 : bd0401           [ 4] 	lda 0x104,x
                             	; BRK bit set?
c0e9 : 2910             [ 2] 	and #0x10
c0eb : d0e9             [ 3] 	bne call_irq_brk
                             	
                             	;* Primary interrupt is timer 1
c0ed : ad0d03           [ 4] 	lda IO_0 + IFR
c0f0 : 2940             [ 2] 	and #0x40				; Bit 6 = Timer 1 interrupt
c0f2 : f006             [ 3] 	beq irq_fin				; If nothing then end
                             
                             	; Service the timer 1 interrupt
c0f4 : 8d0d03           [ 4] 	sta IO_0 + IFR			; Clear the interrupt
c0f7 : 202dc1           [ 6] 	jsr int_vdp_handler
                             
c0fa :                       irq_fin
                             	_pullAXY
                             
c0ff : 40               [ 6] 	rti
                             	
                             ;* Handle BRK
c100 :                       irq_brk
AS65 Assembler for R6502 [1.42].                                     Page   51
-------------------------------- bank\bank0.s --------------------------------

                             	; Handle BRK
                             	; Get PCL,H minus 2 gives the BRK instruction ad
c100 : 38               [ 2] 	sec
c101 : bd0501           [ 4] 	lda 0x0105,x
c104 : e902             [ 2] 	sbc #2
c106 : 8562             [ 3] 	sta df_brkpc
c108 : bd0601           [ 4] 	lda 0x0106,x
c10b : e900             [ 2] 	sbc #0
c10d : 8563             [ 3] 	sta df_brkpc+1
                             	; Get the byte pointed to by old PC
                             	; which is 1 on from the BRK
c10f : a001             [ 2] 	ldy #1
c111 : b162             [ 5] 	lda (df_brkpc),y
c113 : 8564             [ 3] 	sta df_brkval
c115 : 855d             [ 3] 	sta errno
                             	; now update the return address
c117 : a560             [ 3] 	lda df_pc
c119 : 9d0501           [ 5] 	sta 0x105,x
c11c : a561             [ 3] 	lda df_pc+1
c11e : 9d0601           [ 5] 	sta 0x106,x
                             	
                             	_pullAXY
                             
                             	; Save the registers in temp area
c126 : 853d             [ 3] 	sta num_a
c128 : 863e             [ 3] 	stx num_a+1
c12a : 843f             [ 3] 	sty num_a+2
                             	; when RTI occurs:
                             	;  will return to error handler
                             	;  df_brkval will contain signature
c12c : 40               [ 6] 	rti
                             	
                             	
                             ;****************************************
                             ;* int_vdp_handler
                             ;* VDP interrupt handler
                             ;****************************************
c12d :                       int_vdp_handler
c12d : 2049c1           [ 6] 	jsr update_timers	; If it is then update system 
c130 : a50d             [ 3] 	lda vdp_curoff		; Is cursor enabled?
c132 : d014             [ 3] 	bne int_vdp_fin		; Skip if disabled
                             
c134 : c60c             [ 5] 	dec vdp_curcnt		; Decrement countdown
c136 : d010             [ 3] 	bne int_vdp_fin		; If not expired, do nothing
c138 : a50b             [ 3] 	lda vdp_curtim		; Reset cursor countdown
c13a : 850c             [ 3] 	sta vdp_curcnt
c13c : a50e             [ 3] 	lda vdp_curstat		; Get the flash status
c13e : 4980             [ 2] 	eor #0x80			; Invert top bit
c140 : 850e             [ 3] 	sta vdp_curstat
c142 : 450f             [ 3] 	eor vdp_curval		; EOR with whats under cursor
                             	; Use cursor address, write to screen
                             	; ptr is base, offset with X coord in Y register
c144 : a41b             [ 3] 	ldy gr_scrngeom+gr_cur_x
c146 : 911d             [ 5] 	sta (gr_scrngeom+gr_cur_ptr),y
                             
c148 :                       int_vdp_fin	
c148 : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* update_timers
                             ;* Update 24 bit timer and debounce counters
AS65 Assembler for R6502 [1.42].                                     Page   52
-------------------------------- bank\bank0.s --------------------------------

                             ;****************************************
c149 :                       update_timers
c149 : e608             [ 5] 	inc vdp_cnt
c14b : d006             [ 3] 	bne inc_kb_timers
c14d : e609             [ 5] 	inc vdp_cnt_hi
c14f : d002             [ 3] 	bne inc_kb_timers
c151 : e60a             [ 5] 	inc vdp_cnt_hi2
c153 :                       inc_kb_timers
c153 : a62d             [ 3] 	ldx kb_deb			; Is debounce 0?
c155 : f002             [ 3] 	beq skip_kb_deb
c157 : c62d             [ 5] 	dec kb_deb
c159 :                       skip_kb_deb
c159 : a62f             [ 3] 	ldx kb_rep			; Is repeat timer 0?
c15b : f002             [ 3] 	beq skip_kb_rep
c15d : c62f             [ 5] 	dec kb_rep
c15f :                       skip_kb_rep
c15f : 60               [ 6] 	rts
                             	
                             
                             	include "utils/utils.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  UTILS.S
                             ;*  This module implements various utility functi
                             ;*  converting from ASCII to binary form for numb
                             ;*  vice-versa to allow humans to actually be abl
                             ;*  and read numbers in their prefered form!
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code
                             
c160 :                       utilPrintSPC
c160 : 48               [ 3] 	pha
c161 : a920             [ 2] 	lda #' '
c163 : 202ac4           [ 6] 	jsr io_put_ch
c166 : 68               [ 4] 	pla
c167 : 60               [ 6] 	rts
                             
c168 :                       utilPrintCRLF
c168 : 48               [ 3] 	pha
c169 : a90d             [ 2] 	lda #UTF_CR
c16b : 202ac4           [ 6] 	jsr io_put_ch
c16e : 68               [ 4] 	pla
c16f : 60               [ 6] 	rts
                             
c170 :                       utilPrintA
c170 : 8538             [ 3] 	sta tmp_d
c172 : 48               [ 3] 	pha
c173 : 8a               [ 2] 	txa
c174 : 48               [ 3] 	pha
c175 : a538             [ 3] 	lda tmp_d
c177 : 2085c1           [ 6] 	jsr str_a_to_x
c17a : 202ac4           [ 6] 	jsr io_put_ch
c17d : 8a               [ 2] 	txa
AS65 Assembler for R6502 [1.42].                                     Page   53
-------------------------------- bank\bank0.s --------------------------------

c17e : 202ac4           [ 6] 	jsr io_put_ch
c181 : 68               [ 4] 	pla
c182 : aa               [ 2] 	tax
c183 : 68               [ 4] 	pla
c184 : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* str_a_to_x
                             ;* Convert accumulator to hex string
                             ;* Input : A = Byte to convert
                             ;* Output : A = High Char, X = Low Char
                             ;* Regs affected : P
                             ;****************************************
c185 :                       str_a_to_x
c185 : 48               [ 3] 	pha					; Save the byte using later on
c186 : 290f             [ 2] 	and #0x0f			; Mask low nibble
c188 : 18               [ 2] 	clc
c189 : 6930             [ 2] 	adc #'0'			; Convert to UTF
c18b : c93a             [ 2] 	cmp #('9'+1)		; If A greater than '9' then
c18d : 9002             [ 3] 	bcc skip_a_f_1		; skip a-f adjustment
c18f : 6926             [ 2] 	adc #0x26			; Add 27 (6+C) to get in to A-F rang
c191 :                       skip_a_f_1
c191 : aa               [ 2] 	tax					; Low char is in X
c192 : 68               [ 4] 	pla					; Get byte back
c193 : 4a               [ 2] 	lsr a				; Make high nibble low
c194 : 4a               [ 2] 	lsr a
c195 : 4a               [ 2] 	lsr a
c196 : 4a               [ 2] 	lsr a
c197 : 18               [ 2] 	clc
c198 : 6930             [ 2] 	adc #'0'			; Convert to UTF
c19a : c93a             [ 2] 	cmp #('9'+1)		; If A greater than '9' then
c19c : 9002             [ 3] 	bcc skip_a_f_2		; skip a-f adjustment
c19e : 6926             [ 2] 	adc #0x26			; Add 27 (6+C) to get in to A-F rang
c1a0 :                       skip_a_f_2
c1a0 : 60               [ 6] 	rts					; A high nibble, C=0
                             
                             ;****************************************
                             ;* str_x_to_a
                             ;* Convert hex string to accumulator
                             ;* Input : A = High Char, X = Low Char
                             ;* Output : A = Value
                             ;* Regs affected : P
                             ;****************************************
c1a1 :                       str_x_to_a
c1a1 : 0920             [ 2] 	ora #0x20			; Make alpha in to lower case
c1a3 : 38               [ 2] 	sec					; Process high char in A
c1a4 : e930             [ 2] 	sbc #'0'			; Convert to hex nibble
c1a6 : c90a             [ 2] 	cmp #10				; If A < 10 then
c1a8 : 9002             [ 3] 	bcc skip_x_f_1		; skip a-f adjustment
c1aa : e927             [ 2] 	sbc #0x27			; Sub 7 to get in to A-F range
c1ac :                       skip_x_f_1
c1ac : c910             [ 2] 	cmp #0x10			; Nibble should be <= 0x0f
c1ae : b01c             [ 3] 	bcs	str_x_to_a_err	; Error if not
                             
c1b0 : 0a               [ 2] 	asl a				; This is the high nibble
c1b1 : 0a               [ 2] 	asl a
c1b2 : 0a               [ 2] 	asl a
c1b3 : 0a               [ 2] 	asl a
c1b4 : 48               [ 3] 	pha					; Save the high nibble
c1b5 : 8a               [ 2] 	txa					; Now process the low char in X
c1b6 : 0920             [ 2] 	ora #0x20			; Make alpha in to lower case
AS65 Assembler for R6502 [1.42].                                     Page   54
-------------------------------- bank\bank0.s --------------------------------

c1b8 : 38               [ 2] 	sec
c1b9 : e930             [ 2] 	sbc #'0'			; Convert to hex nibble
c1bb : c90a             [ 2] 	cmp #10				; If A < 10 then
c1bd : 9002             [ 3] 	bcc skip_x_f_2		; skip a-f adjustment
c1bf : e927             [ 2] 	sbc #0x27			; Sub 7 to get in to A-F range
c1c1 :                       skip_x_f_2
c1c1 : c910             [ 2] 	cmp #0x10			; Nibble should be <= 0x0f
c1c3 : b006             [ 3] 	bcs	str_x_to_a_errl	; Error if not
                             
c1c5 : 853d             [ 3] 	sta num_a			; Store low nibble in temp
c1c7 : 68               [ 4] 	pla					; Get high nibble
c1c8 : 053d             [ 3] 	ora num_a			; OR with low nibble
                             
c1ca : 60               [ 6] 	rts					; A contains value, C=0
                             
c1cb :                       str_x_to_a_errl
c1cb : 68               [ 4] 	pla
c1cc :                       str_x_to_a_err
                             	SWBRK CMD_ERR_VAL
                             
                             
                             ;****************************************
                             ;* con_n_to_a
                             ;* Convert numeric string to accumulator (unsigne
                             ;* Input : Pointer to string (X=L, A=H), Y = Sour
                             ;* Output : num_a, num_a+1 contains word, X=numbe
                             ;* A = Source type detected
                             ;* Regs affected : CS = Error
                             ;****************************************
c1ce :                       con_n_to_a
c1ce : 8649             [ 3] 	stx num_tmp
c1d0 : 854a             [ 3] 	sta num_tmp+1
c1d2 : a900             [ 2] 	lda #0
c1d4 : 853d             [ 3] 	sta num_a
c1d6 : 853e             [ 3] 	sta num_a+1
c1d8 : c000             [ 2] 	cpy #NUM_ANY
c1da : f014             [ 3] 	beq con_n_to_a_detect
c1dc : 88               [ 2] 	dey
c1dd : d003             [ 3] 	bne con_n_not_dec
c1df :                       con_dec_jmp
c1df : 4c73c2           [ 3] 	jmp con_dec_to_a_int
c1e2 :                       con_n_not_dec
c1e2 : 88               [ 2] 	dey
c1e3 : d003             [ 3] 	bne con_n_not_hex
c1e5 :                       con_hex_jmp
c1e5 : 4c0ac2           [ 3] 	jmp con_hex_to_a_int
c1e8 :                       con_n_not_hex
c1e8 : 88               [ 2] 	dey
c1e9 : d003             [ 3] 	bne con_n_err
c1eb :                       con_bin_jmp
c1eb : 4c49c2           [ 3] 	jmp con_bin_to_a_int
c1ee :                       con_n_err
c1ee : 38               [ 2] 	sec
c1ef : 60               [ 6] 	rts
c1f0 :                       con_n_to_a_detect		; Y is zero on entry
c1f0 : b149             [ 5] 	lda (num_tmp),y
c1f2 : c930             [ 2] 	cmp #'0'
c1f4 : d0e9             [ 3] 	bne con_dec_jmp
c1f6 : a001             [ 2] 	ldy #1
c1f8 : b149             [ 5] 	lda (num_tmp),y
c1fa : 0920             [ 2] 	ora #0x20
c1fc : c978             [ 2] 	cmp #'x'
AS65 Assembler for R6502 [1.42].                                     Page   55
-------------------------------- bank\bank0.s --------------------------------

c1fe : f0e5             [ 3] 	beq con_hex_jmp
c200 : c962             [ 2] 	cmp #'b'
c202 : f0e7             [ 4] 	beq con_bin_jmp
c204 : d0d9             [ 4] 	bne con_dec_jmp		; Always branches
                             
                             ;****************************************
                             ;* con_hex_to_a
                             ;* Convert hex string to accumulator (unsigned)
                             ;* Input : Pointer to string (X=L, A=H)
                             ;* Output : num_a, num_a+1 contains word, X=numbe
                             ;* Regs affected : CS = Error
                             ;****************************************
c206 :                       con_hex_to_a
c206 : 8649             [ 3] 	stx num_tmp
c208 : 854a             [ 3] 	sta num_tmp+1
c20a :                       con_hex_to_a_int
c20a : a205             [ 2] 	ldx #5			; > 4 digits will cause error
c20c : a002             [ 2] 	ldy #2			; start at first digit
c20e :                       con_hex_digit
c20e : b149             [ 5] 	lda (num_tmp),y
c210 : 0920             [ 2] 	ora #0x20					; Make alpha in to lower case
c212 : 38               [ 2] 	sec							; Process high char in A
c213 : e930             [ 2] 	sbc #'0'					; Convert to hex nibble
c215 : c90a             [ 2] 	cmp #10						; If A < 10 then
c217 : 9002             [ 3] 	bcc con_hex_skip_x_f_1		; skip a-f adjustment
c219 : e927             [ 2] 	sbc #0x27					; Sub 7 to get in to A-F range
c21b :                       con_hex_skip_x_f_1
c21b : c910             [ 2] 	cmp #0x10					; Nibble should be <= 0x0f
c21d : b01c             [ 3] 	bcs	con_hex_done			; Potentially done if not
c21f : 48               [ 3] 	pha
c220 : a53d             [ 3] 	lda num_a
                             	; make room for lo nibble
c222 : 0a               [ 2] 	asl a
c223 : 263e             [ 5] 	rol num_a+1
c225 : 0a               [ 2] 	asl a
c226 : 263e             [ 5] 	rol num_a+1
c228 : 0a               [ 2] 	asl a
c229 : 263e             [ 5] 	rol num_a+1
c22b : 0a               [ 2] 	asl a
c22c : 263e             [ 5] 	rol num_a+1
c22e : 853d             [ 3] 	sta num_a
                             	; save in low nibble
c230 : 68               [ 4] 	pla
c231 : 053d             [ 3] 	ora num_a
c233 : 853d             [ 3] 	sta num_a
c235 : c8               [ 2] 	iny
c236 : ca               [ 2] 	dex
c237 : d0d5             [ 3] 	bne con_hex_digit
                             	; if got to a 5th digit then error
c239 :                       con_hex_err
c239 : 38               [ 2] 	sec
c23a : 60               [ 6] 	rts
                             	; found a non-hex digit
c23b :                       con_hex_done
                             	; if no digits processed then error
c23b : c002             [ 2] 	cpy #2
c23d : f0fa             [ 3] 	beq con_hex_err
                             	; move y to x for digits processed
c23f : 98               [ 2] 	tya
c240 : aa               [ 2] 	tax
c241 : a902             [ 2] 	lda #NUM_HEX
c243 : 18               [ 2] 	clc
AS65 Assembler for R6502 [1.42].                                     Page   56
-------------------------------- bank\bank0.s --------------------------------

c244 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* con_bin_to_a
                             ;* Convert bin string to accumulator (unsigned)
                             ;* Input : Pointer to string (X=L, A=H)
                             ;* Output : num_a, num_a+1 contains word, X=numbe
                             ;* Regs affected : CS = Error
                             ;****************************************
c245 :                       con_bin_to_a
c245 : 8649             [ 3] 	stx num_tmp
c247 : 854a             [ 3] 	sta num_tmp+1
c249 :                       con_bin_to_a_int
c249 : a002             [ 2] 	ldy #2
c24b : a211             [ 2] 	ldx #17						; Max 16 binary digits allowed
c24d :                       con_bin_digit
c24d : b149             [ 5] 	lda (num_tmp),y
c24f : c930             [ 2] 	cmp #'0'
c251 : 9010             [ 3] 	bcc con_bin_done
c253 : c932             [ 2] 	cmp #'1'+1
c255 : b00c             [ 3] 	bcs con_bin_done
                             	; sets C if '1' else resets C
c257 : 69cf             [ 2] 	adc #0xff-'0'
                             	; shift in digit
c259 : 263d             [ 5] 	rol num_a
c25b : 263e             [ 5] 	rol num_a+1
c25d : c8               [ 2] 	iny
c25e : ca               [ 2] 	dex
c25f : d0ec             [ 3] 	bne con_bin_digit
                             	; on the 17th digit is too much, error
c261 : f00a             [ 3] 	beq con_bin_err
c263 :                       con_bin_done
                             	; didn't process any digit = error
c263 : c002             [ 2] 	cpy #2
c265 : f006             [ 3] 	beq con_bin_err
                             	; put digits processed in to X
c267 : 98               [ 2] 	tya
c268 : aa               [ 2] 	tax
c269 : a903             [ 2] 	lda #NUM_BIN
c26b : 18               [ 2] 	clc
c26c : 60               [ 6] 	rts
c26d :                       con_bin_err
c26d :                       str_d_error
c26d : 38               [ 2] 	sec
c26e : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* con_d_to_a
                             ;* Convert decimal string to accumulator (SIGNED)
                             ;* Input : Pointer to string (X=L, A=H)
                             ;* Output : num_a, num_a+1 contains word, X=numbe
                             ;* Regs affected : CS = Error
                             ;****************************************
c26f :                       con_dec_to_a
c26f : 8649             [ 3] 	stx num_tmp
c271 : 854a             [ 3] 	sta num_tmp+1
c273 :                       con_dec_to_a_int
c273 : a000             [ 2] 	ldy #0
                             	; Detect if leading minus sign
c275 : b149             [ 5] 	lda (num_tmp),y
c277 : c92d             [ 2] 	cmp #'-'
c279 : d001             [ 3] 	bne str_d_find_end
AS65 Assembler for R6502 [1.42].                                     Page   57
-------------------------------- bank\bank0.s --------------------------------

                             	; skip over minus if found
c27b : c8               [ 2] 	iny
c27c :                       str_d_find_end
c27c : b149             [ 5] 	lda (num_tmp),y
c27e : c930             [ 2] 	cmp #'0'
c280 : 9007             [ 3] 	bcc str_d_found_end
c282 : c93a             [ 2] 	cmp #'9'+1
c284 : b003             [ 3] 	bcs str_d_found_end
c286 : c8               [ 2] 	iny
c287 : d0f3             [ 3] 	bne str_d_find_end	; Possble wraparound but shou
c289 :                       str_d_found_end
c289 : c007             [ 2] 	cpy #7				; Biggest int is 6 chars
c28b : b0e0             [ 3] 	bcs str_d_error		; e.g. -32767
c28d : 844c             [ 3] 	sty num_tmp+3
c28f : a900             [ 2] 	lda #0
c291 : 854b             [ 3] 	sta num_tmp+2
c293 : 853d             [ 3] 	sta num_a
c295 : 853e             [ 3] 	sta num_a+1
c297 :                       str_d_process_digit
c297 : 88               [ 2] 	dey
c298 : 3027             [ 3] 	bmi str_d_digits_done
                             
c29a : b149             [ 5] 	lda (num_tmp),y
                             
c29c : c92d             [ 2] 	cmp #'-'			; Got to minus sign?
c29e : f021             [ 3] 	beq str_d_digits_done ; also done
                             
c2a0 : 38               [ 2] 	sec
c2a1 : e930             [ 2] 	sbc #'0'
                             	; Convert digit to number
                             	; and then offset in to
                             	; look up table of powers
c2a3 : 18               [ 2] 	clc
c2a4 : 0a               [ 2] 	asl a
c2a5 : 654b             [ 3] 	adc num_tmp+2
                             	; X contains index to powers
c2a7 : aa               [ 2] 	tax
c2a8 : a53d             [ 3] 	lda num_a
c2aa : 7ddec2           [ 4] 	adc str_d_powers,x
c2ad : 853d             [ 3] 	sta num_a
c2af : a53e             [ 3] 	lda num_a+1
c2b1 : 7ddfc2           [ 4] 	adc str_d_powers+1,x
c2b4 : 853e             [ 3] 	sta num_a+1
c2b6 : b0b5             [ 3] 	bcs str_d_error
                             	; Move to next power of 10 index
c2b8 : a54b             [ 3] 	lda num_tmp+2
c2ba : 6914             [ 2] 	adc #20
c2bc : 854b             [ 3] 	sta num_tmp+2
c2be : 4c97c2           [ 3] 	jmp str_d_process_digit
c2c1 :                       str_d_digits_done
                             	; check if minus
c2c1 : b149             [ 5] 	lda (num_tmp),y
c2c3 : c92d             [ 2] 	cmp #'-'
c2c5 : d011             [ 3] 	bne str_d_skip_neg
c2c7 : a64c             [ 3] 	ldx num_tmp+3		; Must have >= 2 chars
c2c9 : e002             [ 2] 	cpx #2				; else it's an error
c2cb : 90a0             [ 3] 	bcc str_d_error
c2cd : a63d             [ 3] 	ldx num_a
c2cf : a53e             [ 3] 	lda num_a+1
c2d1 : 2042c3           [ 6] 	jsr twos_complement
c2d4 : 863d             [ 3] 	stx num_a
c2d6 : 853e             [ 3] 	sta num_a+1
AS65 Assembler for R6502 [1.42].                                     Page   58
-------------------------------- bank\bank0.s --------------------------------

c2d8 :                       str_d_skip_neg
c2d8 : a64c             [ 3] 	ldx num_tmp+3
c2da : a901             [ 2] 	lda #NUM_DEC
c2dc : 18               [ 2] 	clc
c2dd : 60               [ 6] 	rts
                             
c2de :                       str_d_powers
c2de : 00000100020003..      	dw	0, 1, 2, 3, 4, 5, 6, 7, 8, 9
c2f2 : 00000a0014001e..      	dw	0, 10, 20, 30, 40, 50, 60, 70, 80, 90
c306 : 00006400c8002c..      	dw	0, 100, 200, 300, 400, 500, 600, 700, 800, 90
c31a : 0000e803d007b8..      	dw	0, 1000, 2000, 3000, 4000, 5000, 6000, 7000, 
c32e : 00001027204e30..      	dw	0, 10000, 20000, 30000, 40000, 50000, 60000, 
                             	
                             
                             ;****************************************
                             ;* twos_complement
                             ;* Twos complement of X,A (X=low)
                             ;* Input : X = Low byte, A = High Byte to convert
                             ;* Output : X,A in 2's complement
                             ;* Regs affected : P
                             ;****************************************
c342 :                       twos_complement
c342 : 49ff             [ 2] 	eor #0xff
c344 : 48               [ 3] 	pha
c345 : 8a               [ 2] 	txa
c346 : 49ff             [ 2] 	eor #0xff
c348 : aa               [ 2] 	tax
c349 : 68               [ 4] 	pla
c34a : e8               [ 2] 	inx
c34b : d003             [ 3] 	bne twos_complement_skip_X
c34d : 38               [ 2] 	sec			; Add 1 to A
c34e : 6900             [ 2] 	adc #0
c350 :                       twos_complement_skip_X
c350 : 60               [ 6] 	rts
                             	
                             
                             ;****************************************
                             ;* hex_to_bcd
                             ;* Convert accumulator,X to BCD
                             ;* Input : X = Low byte, A = High Byte to convert
                             ;* Output : 3 bytes of num_a is updated
                             ;* Regs affected : P
                             ;****************************************
c351 :                       hex_to_bcd
c351 : 08               [ 3] 	php
c352 : 48               [ 3] 	pha
c353 : 8538             [ 3] 	sta tmp_d
c355 : 8a               [ 2] 	txa
c356 : 48               [ 3] 	pha
c357 : a538             [ 3] 	lda tmp_d
                             
c359 : 8649             [ 3] 	stx num_tmp
c35b : 854a             [ 3] 	sta num_tmp+1
                             	
                             ;	bmi hex_to_bcd_skip_neg	; A is negative?
                             ;	jsr twos_complement
                             ;hex_to_bcd_skip_neg
c35d : a200             [ 2] 	ldx #0
c35f : 863d             [ 3] 	stx num_a
c361 : 863e             [ 3] 	stx num_a+1
c363 : 863f             [ 3] 	stx num_a+2
                             ;	stx num_a+3
AS65 Assembler for R6502 [1.42].                                     Page   59
-------------------------------- bank\bank0.s --------------------------------

c365 : a210             [ 2] 	ldx #16
c367 : f8               [ 2] 	sed
c368 :                       bin_to_bcd_bit
c368 : 0649             [ 5] 	asl num_tmp
c36a : 264a             [ 5] 	rol num_tmp+1
c36c : a53d             [ 3] 	lda num_a
c36e : 653d             [ 3] 	adc num_a
c370 : 853d             [ 3] 	sta num_a
c372 : a53e             [ 3] 	lda num_a+1
c374 : 653e             [ 3] 	adc num_a+1
c376 : 853e             [ 3] 	sta num_a+1
c378 : a53f             [ 3] 	lda num_a+2
c37a : 653f             [ 3] 	adc num_a+2
c37c : 853f             [ 3] 	sta num_a+2
c37e : ca               [ 2] 	dex
c37f : d0e7             [ 3] 	bne bin_to_bcd_bit
                             	
c381 : 68               [ 4] 	pla
c382 : aa               [ 2] 	tax
c383 : 68               [ 4] 	pla
c384 : 28               [ 4] 	plp
c385 : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* int_to_str_ch
                             ;* Helper routine to stuff decimal char in to num
                             ;* Input : A=BCD digit, Y=num_buf index, C=insert
                             ;* Output : num_buf in ASCII, A=ASCII digit
                             ;* Regs affected : C cleared if non-zero
                             ;****************************************
c386 :                       int_to_str_ch
c386 : 290f             [ 2] 	and #0xf
c388 : 0930             [ 2] 	ora #0x30					; Convert to ascii
c38a : 4930             [ 2] 	eor #0x30					; Check if zero digit
c38c : d005             [ 3] 	bne int_to_str_nz			; If not zero definitely sto
c38e : b003             [ 3] 	bcs int_to_str_nz			; Also if C=1
c390 : 4930             [ 2] 	eor #0x30					; Restore A
c392 : 60               [ 6] 	rts							; Return without storing anything
c393 :                       int_to_str_nz
c393 : 4930             [ 2] 	eor #0x30					; Restore A
c395 : 994d00           [ 5] 	sta num_buf,y
c398 : c8               [ 2] 	iny
c399 : 38               [ 2] 	sec							; Set C as a non-zero encountered
c39a :                       int_to_str_ch_fin
c39a : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* int_to_str
                             ;* Convert int to string
                             ;* Input : in X,A (low,high), C=leading zeros wan
                             ;* Output : num_buf in ASCII 6 digits + zero term
                             ;* Regs affected : P
                             ;****************************************
c39b :                       int_to_str
                             	_pushAXY
                             
c3a4 : a000             [ 2] 	ldy #0						; first pos of num_buf
c3a6 : 0900             [ 2] 	ora #0						; Test A for sign bit
c3a8 : 08               [ 3] 	php							; Remember C bit of P
c3a9 : 100a             [ 3] 	bpl int_to_str_skip_neg		; Skip if not (postive 
AS65 Assembler for R6502 [1.42].                                     Page   60
-------------------------------- bank\bank0.s --------------------------------

c3ab : 2042c3           [ 6] 	jsr twos_complement			; Flip X,A from 2s complem
c3ae : 48               [ 3] 	pha							; Remember A
c3af : a92d             [ 2] 	lda #'-'					; Put in negative sign
c3b1 : 854d             [ 3] 	sta num_buf
c3b3 : c8               [ 2] 	iny							; Start at second buffer pos
c3b4 : 68               [ 4] 	pla							; Restore A
c3b5 :                       int_to_str_skip_neg
c3b5 : 2051c3           [ 6]  	jsr hex_to_bcd				; Convert X,A to BCD
c3b8 : a202             [ 2] 	ldx #2						; Start at BCD high byte
c3ba :                       int_str
c3ba : 28               [ 4] 	plp							; Get C but immediately
c3bb : 08               [ 3] 	php							; Save C (due to loop check later)
c3bc : b53d             [ 4] 	lda num_a,x					; Get BCD digit
c3be : 8554             [ 3] 	sta num_buf+7				; Save A it for the units later
c3c0 : 4a               [ 2] 	lsr a						; Tens - shift to lower nibble
c3c1 : 4a               [ 2] 	lsr a
c3c2 : 4a               [ 2] 	lsr a
c3c3 : 4a               [ 2] 	lsr a
c3c4 : 28               [ 4] 	plp							; Get C
c3c5 : 2086c3           [ 6] 	jsr int_to_str_ch			; Put ASCII code in num_buf
c3c8 : a554             [ 3] 	lda num_buf+7				; Get A for the units
c3ca : 2086c3           [ 6] 	jsr int_to_str_ch			; Put ASCII code in num_buf
c3cd : 08               [ 3] 	php							; Save C
c3ce : ca               [ 2] 	dex
c3cf : 10e9             [ 3] 	bpl int_str
c3d1 : 28               [ 4] 	plp							; Check C
c3d2 : b005             [ 3] 	bcs	int_to_str_fin			; If set then something pri
c3d4 : a930             [ 2] 	lda #'0'					; Stuff a zero
c3d6 : 854d             [ 3] 	sta num_buf					; Must be in first position..
c3d8 : c8               [ 2] 	iny
c3d9 :                       int_to_str_fin
c3d9 : a900             [ 2] 	lda #0						; Terminator
c3db : 994d00           [ 5] 	sta num_buf,y
c3de : c8               [ 2] 	iny
                             	_pullAXY
                             
c3e4 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* bcd_to_str
                             ;* Convert num_buf to chars
                             ;* Input : num_a in BCD format
                             ;* Output : num_buf in ASCII 6 digits
                             ;* Output is big endian, input is not
                             ;* Regs affected : P
                             ;****************************************
                             ;bcd_to_str
                             ;	_pushAXY
                             ;
                             ;	ldx #5						; Index in to string
                             ;	ldy #0						; Current BCD digit
                             ;bcd_str
                             ;	lda num_a,y
                             ;	; Convert 1s digit of byte
                             ;	pha
                             ;	and #0xf
                             ;	clc
                             ;	adc #0x30
                             ;	sta num_buf,x
                             ;	; Convert 10s digit of byte
                             ;	pla
                             ;	lsr a
AS65 Assembler for R6502 [1.42].                                     Page   61
-------------------------------- bank\bank0.s --------------------------------

                             ;	lsr a
                             ;	lsr a
                             ;	lsr a
                             ;	clc
                             ;	adc #0x30					; Convert to ASCII
                             ;	sta num_buf-1,x
                             ;	dex
                             ;	dex
                             ;	iny
                             ;	cpy #3						; 3 BCD digits max
                             ;	bne bcd_str
                             ;
                             ;	_pullAXY
                             ;	rts
                             	
                             ;****************************************
                             ;* out_bcd
                             ;* Output a bcd string in num_buf
                             ;* Input : num_buf has the ASCII
                             ;* Input : C=1 print leading zeros else not
                             ;* Output : num_buf in ASCII 6 digits
                             ;* Output is big endian, input is not, Y=digits p
                             ;* Regs affected : P
                             ;****************************************
                             ;out_bcd
                             ;	pha
                             ;	txa
                             ;	pha
                             ;	php
                             ;	ldy #0						; How many digits printed
                             ;	ldx #0						; Index in to string
                             ;out_bcd_digit
                             ;	lda num_buf,x
                             ;	cpy #0						; If not in leading zero mode
                             ;	bne out_bcd_print			; No then go print
                             ;
                             ;	cmp #'0'					; else check if zero
                             ;	bne out_bcd_print			; No then go print
                             ;
                             ;	plp
                             ;	php
                             ;	bcc out_bcd_next			; If C=0 go to next digit, e
                             ;out_bcd_print
                             ;	iny
                             ;	jsr io_put_ch
                             ;out_bcd_next
                             ;	inx
                             ;	cpx #6
                             ;	bne out_bcd_digit
                             ;	tya							; If nothing printed
                             ;	bne out_bcd_fin
                             ;	lda #'0'					; Need to put out 1 zero
                             ;	jsr io_put_ch
                             ;	iny
                             ;out_bcd_fin
                             ;	plp
                             ;	pla
                             ;	tax
                             ;	pla
                             ;	clc
                             ;	rts
                             	
AS65 Assembler for R6502 [1.42].                                     Page   62
-------------------------------- bank\bank0.s --------------------------------

                             	
                             ;****************************************
                             ;* print_a_to_d
                             ;* Convert X,A to decimal string
                             ;* Input : X,A = number Low,High
                             ;* Input : C=1 print leading zeros else not
                             ;* Output : num_buf in ASCII max 6 digits
                             ;*          Y=digits printed including sign
                             ;* Output is big endian, input is not
                             ;* Regs affected : P
                             ;****************************************
c3e5 :                       print_a_to_d
c3e5 : 209bc3           [ 6] 	jsr int_to_str
c3e8 : a000             [ 2] 	ldy #0
c3ea :                       print_a_to_d_ch
c3ea : b94d00           [ 4] 	lda num_buf,y
c3ed : f006             [ 3] 	beq print_a_to_d_fin
c3ef : 202ac4           [ 6] 	jsr io_put_ch
c3f2 : c8               [ 2] 	iny
c3f3 : d0f5             [ 3] 	bne print_a_to_d_ch
c3f5 :                       print_a_to_d_fin
c3f5 : 60               [ 6] 	rts
                             
                             ;	php
                             ;	cmp #0x80					; Check if sign bit is set
                             ;	bcc print_a_to_d_skip_neg	; Skip if not (postiv
                             ;	jsr twos_complement			; Flip from 2s complement
                             ;	jsr hex_to_bcd				; Convert to BCD
                             ;	jsr bcd_to_str				; Convert BCD to string
                             ;	lda #'-'
                             ;	jsr io_put_ch
                             ;	plp							; Leading zeros preference
                             ;	jsr out_bcd
                             ;	iny							; Account for sign
                             ;	rts
                             ;print_a_to_d_skip_neg
                             ;	jsr hex_to_bcd				; Convert to BCD
                             ;	jsr bcd_to_str				; Convert BCD to string
                             ;	plp							; Leading zeros preference
                             ;	jmp out_bcd					; Print +ve string
                             	
                             	include "io/io.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  IO.S
                             ;*  General IO module.  Allows different IO devic
                             ;*  utilised transparently by the rest of the cod
                             ;*  Other code should use "io_" commands so that 
                             ;*  do not need to know what specific device is p
                             ;*  input and output capabilities.
                             ;*	On startup, the kernel defaults to keyboard an
                             ;*  examines the BBC DIP switch to decide whether
                             ;*	but when saving and loading points to tape rou
                             ;*
                             ;************************************************
                             
AS65 Assembler for R6502 [1.42].                                     Page   63
-------------------------------- bank\bank0.s --------------------------------

                             	; ROM code
                             	code
                             
c3f6 :                       mod_sz_io_s
                             
                             ;****************************************
                             ;* io_init
                             ;* Initialise the default device and make active
                             ;* No keys pressed = serial (default)
                             ;* F0 pressed = KB/VDP
                             ;* F1 pressed = Serial
                             ;* Keyboard and screen or serial port
                             ;* Output : None
                             ;* Regs affected : P, A
                             ;****************************************
c3f6 :                       io_init
c3f6 : a901             [ 2] 	lda #1				; Default = KB/VDP
c3f8 : 8d0006           [ 4] 	sta io_default
c3fb : 4c01c4           [ 3] 	jmp io_active_device; Activate the device
                             
                             
                             ;****************************************
                             ;* io_set_default, io_active_device
                             ;* Activate device based on default or A
                             ;* Input : A = Device number
                             ;* Output : None
                             ;* Regs affected : P, A
                             ;****************************************
c3fe :                       io_set_default			; Entry point for default
c3fe : ad0006           [ 4] 	lda io_default
c401 :                       io_active_device		; Entry point for A set
c401 : aa               [ 2] 	tax					; X=buf size index
c402 : 0a               [ 2] 	asl	a				; x16 the Block number
c403 : 0a               [ 2] 	asl a
c404 : 0a               [ 2] 	asl a
c405 : 0a               [ 2] 	asl a
c406 : a8               [ 2] 	tay					; Y=index in to device table
c407 : bd8dc4           [ 4] 	lda io_buf_sz,x
c40a : 853b             [ 3] 	sta buf_sz
c40c : a200             [ 2] 	ldx #0
                             	; Copy device settings to io block
c40e :                       io_copy_data
c40e : b98fc4           [ 4] 	lda io_devices,y
c411 : 9d0106           [ 5] 	sta io_block,x
c414 : c8               [ 2] 	iny
c415 : e8               [ 2] 	inx
c416 : e010             [ 2] 	cpx #16
c418 : d0f4             [ 3] 	bne io_copy_data
                             	
c41a : a91f             [ 2] 	lda #lo(scratch)	; Initialise IO buffer and size
c41c : 8539             [ 3] 	sta buf_lo
c41e : a906             [ 2] 	lda #hi(scratch)
c420 : 853a             [ 3] 	sta buf_hi
c422 : a90d             [ 2] 	lda #UTF_CR			; Line terminator is CR
c424 : 853c             [ 3] 	sta buf_ef
c426 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* io_get_ch
                             ;* Get a char (wait forever or just check)
                             ;* Input : C = 1 for synchronous, 0 for async
                             ;* Output : A = Byte code, C = 1 means A is inval
AS65 Assembler for R6502 [1.42].                                     Page   64
-------------------------------- bank\bank0.s --------------------------------

                             ;* Regs affected : P, A
                             ;****************************************
c427 :                       io_get_ch
c427 : 6c0106           [ 6] 	jmp (io_block+io_get_byte)
                             	
                             
                             ;****************************************
                             ;* io_put_ch
                             ;* Put a char
                             ;* Input : A = char
                             ;* Regs affected : P, A
                             ;****************************************
c42a :                       io_put_ch
c42a : 6c0306           [ 6] 	jmp (io_block+io_put_byte)
                             	
                             ;****************************************
                             ;* io_open_read
                             ;* Open for reading
                             ;* Input : X,A = pointer to filename (zero termin
                             ;* Output : C=0 success
                             ;* Regs affected : All
                             ;****************************************
c42d :                       io_open_read
c42d : 6c0506           [ 6] 	jmp (io_block+io_open_r)
                             	
                             ;****************************************
                             ;* io_open_write
                             ;* Open for reading
                             ;* Input : X,A = pointer to filename (zero termin
                             ;* Output : C=0 success
                             ;* Regs affected : All
                             ;****************************************
c430 :                       io_open_write
c430 : 6c0706           [ 6] 	jmp (io_block+io_open_w)
                             
                             ;****************************************
                             ;* io_close
                             ;* Close a file
                             ;* Input : 
                             ;* Output : C=0 success
                             ;* Regs affected : All
                             ;****************************************
c433 :                       io_close
c433 : 6c0906           [ 6] 	jmp (io_block+io_close_f)
                             	
                             ;****************************************
                             ;* io_delete
                             ;* Delete a file
                             ;* Input : 
                             ;* Output : C=0 success
                             ;* Regs affected : All
                             ;****************************************
c436 :                       io_delete
c436 : 6c0b06           [ 6] 	jmp (io_block+io_del_f)
                             
                             ;****************************************
                             ;* io_open_ext1
                             ;* Extended function 1
                             ;* Input : 
                             ;* Output : C=0 success
                             ;* Regs affected : All
                             ;****************************************
AS65 Assembler for R6502 [1.42].                                     Page   65
-------------------------------- bank\bank0.s --------------------------------

c439 :                       io_open_ext1
c439 : 6c0d06           [ 6] 	jmp (io_block+io_ext1)
                             	
                             ;****************************************
                             ;* io_open_ext2
                             ;* Extended function 2
                             ;* Input : 
                             ;* Output : C=0 success
                             ;* Regs affected : All
                             ;****************************************
c43c :                       io_open_ext2
c43c : 6c0f06           [ 6] 	jmp (io_block+io_ext2)
                             	
                             ;****************************************
                             ;* io_read_line
                             ;* Read a line, terminated by terminating char or
                             ;* Input : buf_(lo/hi/sz/ef) : Address, Max size,
                             ;* Output : Y = Line length C = Buffer limit reac
                             ;* Regs affected : None
                             ;****************************************
c43f :                       io_read_line
c43f : 48               [ 3] 	pha
                             
c440 : 08               [ 3] 	php					; Save echo state
                             	
c441 : a000             [ 2] 	ldy #0x00			; Starting at first byte
c443 :                       io_get_line_byte
c443 : 38               [ 2] 	sec					; Getting bytes synchronously
c444 : 2027c4           [ 6] 	jsr io_get_ch		; Get a byte
c447 : b027             [ 3] 	bcs io_get_line_done; Got nothing then finish
c449 : 28               [ 4] 	plp					; Get echo state
c44a : 08               [ 3] 	php					; Instantly save it back
c44b : 900c             [ 3] 	bcc io_skip_echo	; Carry not set = don't echo
c44d : c97f             [ 2] 	cmp #UTF_DEL		; Delete?
c44f : d005             [ 3] 	bne io_do_echo
c451 : c000             [ 2] 	cpy #0				; Already at beginning?
c453 : f004             [ 3] 	beq io_skip_echo	; Don't echo delete
c455 : 88               [ 2] 	dey					; Else decrement length
c456 :                       io_do_echo
c456 : 202ac4           [ 6] 	jsr io_put_ch		; Echo it
c459 :                       io_skip_echo
c459 : c920             [ 2] 	cmp #UTF_SPECIAL	; Special character?
c45b : 9007             [ 3] 	bcc io_skip_special	; Skip if so (don't add to b
c45d : c97f             [ 2] 	cmp #UTF_DEL		; Don't proces DEL either
c45f : f003             [ 3] 	beq io_skip_special
c461 : 9139             [ 5] 	sta (buf_lo),y		; Save it
c463 : c8               [ 2] 	iny					; Increase length
c464 :                       io_skip_special
c464 : c53c             [ 3] 	cmp buf_ef			; Is it the terminating char?
c466 : f008             [ 3] 	beq io_get_line_done	; If yes then done
c468 : c43b             [ 3] 	cpy buf_sz			; Reached the buffer max size?
c46a : d0d7             [ 3] 	bne io_get_line_byte	; No, get another byte
c46c : 28               [ 4] 	plp					; Remember to pull echo state off stack
c46d : 38               [ 2] 	sec					; Yes, set carry flag
c46e : 68               [ 4] 	pla
c46f : 60               [ 6] 	rts					; And done
c470 :                       io_get_line_done
c470 : a900             [ 2] 	lda #0
c472 : 9139             [ 5] 	sta (buf_lo),y		; Terminate with 0
c474 : 28               [ 4] 	plp					; Remember to pull echo state off stack
c475 : 18               [ 2] 	clc					; Clear carry flag
c476 : 68               [ 4] 	pla
AS65 Assembler for R6502 [1.42].                                     Page   66
-------------------------------- bank\bank0.s --------------------------------

c477 : 60               [ 6] 	rts					; Fin
                             
                             ;****************************************
                             ;* io_print_line
                             ;* Print a line (when data is not already in seri
                             ;* Input : X = Address Lo, A = Address Hi
                             ;* Output : Y=number chars output
                             ;* Regs affected : All
                             ;****************************************
c478 :                       io_print_line
c478 : 48               [ 3] 	pha
                             
c479 : 8636             [ 3] 	stx tmp_clo					; Store the string pointer
c47b : 8537             [ 3] 	sta tmp_chi					; lo and hi
c47d : a000             [ 2] 	ldy #0						; Start at the beginning!
c47f :                       io_print_line_byte
c47f : b136             [ 5] 	lda (tmp_clo),y				; Copy byte to
c481 : f006             [ 3] 	beq io_print_done			; If zero then done - print
c483 : 202ac4           [ 6] 	jsr io_put_ch				; Transmit
c486 : c8               [ 2] 	iny
c487 : d0f6             [ 3] 	bne io_print_line_byte		; Carry on until zero fo
c489 :                       io_print_done
c489 : 68               [ 4] 	pla
c48a : 60               [ 6] 	rts
                             
                             
                             ;*** Null operation just clc and return ***
c48b :                       io_null_op
c48b : 18               [ 2] 	clc
c48c : 60               [ 6] 	rts
                             	
                             ;* IO buffer sizes
c48d :                       io_buf_sz
c48d : ff                    	db 255					; Device 0 = Tapeoe SDCard
c48e : 7f                    	db 127					; Device 1 = keyboard/screen
                             
                             ;* IO devices defined here
c48f :                       io_devices
                             ;* Device zero is the tape/sdcard system
                             ;* t: is for tape, s: is for sdcard in the filena
                             ;* the file routines parse the filename to fine t
                             ;* at the file protocol level both t: and s: appe
                             ;* hence device0 can handle both
                             ;* This is a block based device
c48f :                       io_device0					; Tape device, input = Tape, outpu
c48f : c1c6                  	dw	f_get_byte			; io_get_ch
c491 : 53c6                  	dw	f_put_byte			; io_put_ch
c493 : b3c5                  	dw	f_open_read			; io_open_r
c495 : 09c6                  	dw	f_open_write		; io_open_w
c497 : e8c5                  	dw	f_close				; io_close_f
c499 : 8bc4                  	dw	io_null_op			; io_del_f
c49b : b3c5                  	dw	f_open_bread		; io_ext1 - open for binary rea
c49d : 03c6                  	dw	f_open_bwrite		; io_ext2 - open for binary wr
                             ;* Device one is keyboard / screen
                             ;* only offers get and put
                             ;* This is a char based device
c49f :                       io_device1					; Default device, input = screen e
c49f : 99d0                  	dw	gr_get_key			; io_get_ch
c4a1 : cfd0                  	dw	gr_put_byte			; io_put_ch
c4a3 : 8bc4                  	dw	io_null_op			; io_open_r
c4a5 : 8bc4                  	dw	io_null_op			; io_open_w
c4a7 : 8bc4                  	dw	io_null_op			; io_close_f
AS65 Assembler for R6502 [1.42].                                     Page   67
-------------------------------- bank\bank0.s --------------------------------

c4a9 : 8bc4                  	dw	io_null_op			; io_del_f
c4ab : 8bc4                  	dw	io_null_op			; io_ext1
c4ad : 8bc4                  	dw	io_null_op			; io_ext2
c4af :                       mod_sz_io_e
                             
                             
                             
                             ;* Reset vector points here - 6502 starts here
c4af :                       init
                             ;	jmp init_test
                             	; First clear ram
c4af : 78               [ 2] 	sei					; Need this for MOS 6502
c4b0 : d8               [ 2] 	cld					; Need this for MOS 6502
c4b1 : 4cd8c4           [ 3] 	jmp init_ram		; jmp not jsr to ram initialiser
c4b4 :                       init_2					; init_ram will jump back to here
c4b4 : a2ff             [ 2] 	ldx #0xff			; Initialise stack pointer
c4b6 : 9a               [ 2] 	txs
                             
c4b7 : 20bdc4           [ 6] 	jsr kernel_init
                             
c4ba : 4c77c0           [ 3] 	jmp main
                             
c4bd :                       kernel_init
c4bd : 20bac0           [ 6] 	jsr init_irq		; Initialise IRQ handling
                             
c4c0 : 20f7c4           [ 6] 	jsr init_via0		; initialise cia 0 - tape inactiv
                             ;	jsr tp_init			; Initialise tape handling
                             
c4c3 : 20d6d5           [ 6] 	jsr init_snd		; initialise the sound chip
                             
c4c6 : 203bce           [ 6] 	jsr gr_init			; Initialise graphics, default is 
                             
c4c9 : 2094c8           [ 6] 	jsr init_keyboard	; initialise keyboard timer se
c4cc : 20f6c3           [ 6] 	jsr io_init			; Set default input/output device
                             
c4cf : a900             [ 2] 	lda #0
c4d1 : 8508             [ 3] 	sta vdp_cnt
                             
c4d3 : 20b3f7           [ 6] 	jsr df_init			; Initialise interpreter
                             
c4d6 : 58               [ 2] 	cli					; irq interrupts enable
                             
c4d7 :                       kernel_test
                             ;	jsr kb_read_raw
                             ;	jsr utilPrintA
                             ;	jsr utilPrintCRLF
                             ;	jmp kernel_test
                             	
c4d7 : 60               [ 6] 	rts
                             
                             
                             ;* Initialises RAM, skipping page 3 which is for 
                             ;* Zeroes all addressable RAM in the default bank
c4d8 :                       init_ram
c4d8 : a900             [ 2] 	lda #0				; Normal RAM filled with zero
c4da : a002             [ 2] 	ldy #0x02			; But Y initially at 2 to not overwr
c4dc : aa               [ 2] 	tax 				; Page counter starts at zero
c4dd : 8600             [ 3] 	stx 0x00			; Start at page 0
c4df : 8601             [ 3] 	stx 0x01
c4e1 :                       init_ram_1
c4e1 : e003             [ 2] 	cpx	#3				; Ignore page 3 (IO page)
c4e3 : f005             [ 3] 	beq init_ram_skip
AS65 Assembler for R6502 [1.42].                                     Page   68
-------------------------------- bank\bank0.s --------------------------------

c4e5 :                       init_ram_fill
c4e5 : 9100             [ 5] 	sta (0x00),y		; Write byte to RAM (zero or copy 
c4e7 : c8               [ 2] 	iny
c4e8 : d0f7             [ 3] 	bne init_ram_1		; Do a whole page
c4ea :                       init_ram_skip
c4ea : e601             [ 5] 	inc 0x01			; Increase page pointer
c4ec : e8               [ 2] 	inx					; Reduce page count
c4ed : e0c0             [ 2] 	cpx #0xc0			; Do all pages until page until we g
c4ef : d0f0             [ 3] 	bne init_ram_1
                             
c4f1 : f0c1             [ 3] 	beq init_2			; Carry on initialisation
                             
                             ; 6502 Non-maskable interrupt come here
c4f3 :                       nmi
c4f3 : 40               [ 6] 	rti
                             
c4f4 :                       mod_sz_kernel_e
                             
                             
                             
                             ; Bank specific code goes here
                             	include "cia/cia.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  CIA.S
                             ;*  Code to initialise and utilise the 6522, whic
                             ;*	for various functions on the Oric including;
                             ;*		Port A:
                             ;*			[7..0] 	Printer data bits
                             ;*			[7..0] 	Interface to AY-3-8912
                             ;*		Port B:
                             ;*			[2..0] 	Keyboard matrix row selector
                             ;*			[7]	   	Tape output
                             ;*			[6]    	Tape player motor signal
                             ;*			[4]		Printer strobe
                             ;*		CA1:		Printer ACK
                             ;*		CB1: 		Tape input
                             ;*		CA2,CB2: 	Selecting the AY-3-8912
                             ;*
                             ;*  This file is called cia.s because code was or
                             ;*  for a MOS 6526 from a CMB64, but didn't get a
                             ;*	renaming this file ;-)
                             ;*
                             ;************************************************
                             
                             
                             	; ROM code
                             	code
                             
c4f4 :                       mod_sz_cia_s
                             
                             
                             ;****************************************
                             ;* init_via0
                             ;* Initialise cia 0
                             ;* Input : None
AS65 Assembler for R6502 [1.42].                                     Page   69
-------------------------------- bank\bank0.s --------------------------------

                             ;* Output : None
                             ;* Regs affected : A
                             ;****************************************
c4f4 :                       init_via0_tape					; initialisation bytes for tap
c4f4 : a017             [ 2] 	ldy #init_tape_tab-init_via0_tab
c4f6 : 2c                    	db 0x2c						; Ignore next two bytes
c4f7 :                       init_via0
c4f7 : a000             [ 2] 	ldy #0						; Standard initialisation of VIA
c4f9 :                       init_via0_loop
c4f9 : b90ac5           [ 4] 	lda init_via0_tab,y
c4fc : 300b             [ 4] 	bmi init_via0_done
c4fe : aa               [ 2] 	tax
c4ff : c8               [ 2] 	iny
c500 : b90ac5           [ 4] 	lda init_via0_tab,y
c503 : 9d0003           [ 5] 	sta IO_0,x
c506 : c8               [ 2] 	iny
c507 : d0f0             [ 4] 	bne init_via0_loop
                             
c509 :                       init_via0_done
c509 : 60               [ 6] 	rts							; return from sub
                             
c50a :                       init_via0_tab
c50a : 0e7f                  	db IER, 	0x7f
c50c : 03ff                  	db DDRA,	0xff			; Port A output by default
c50e : 02f7                  	db DDRB,	0xf7			; Tape motor + KB select
c510 : 00b7                  	db PRB,		KB_PRB+7		; Port B default (cassette mo
c512 : 0cdd                  	db PCR,		SND_DESELECT	; Ensure AY is not selecte
c514 : 0420                  	db T1CL,	lo(TIMER1_RATE)	; 50Hz
c516 : 0620                  	db T1LL,	lo(TIMER1_RATE)	; 50Hz
c518 : 054e                  	db T1CH,	hi(TIMER1_RATE)	; 50Hz
c51a : 074e                  	db T1LH,	hi(TIMER1_RATE)	; 50Hz
c51c : 0b40                  	db ACR,		0x40			; Timer 1 continuous
c51e : 0ec0                  	db IER,		0xc0			; Timer 1 interrupt enabled
c520 : ff                    	db -1
c521 :                       init_tape_tab
c521 : 0e7f                  	db IER,		0x7f			; Disable all interrupts
c523 : 08f4                  	db T2CL,	0xf4			; Timer 2 used for measuring CB1
c525 : 0c10                  	db PCR,		0x10			; Interrupt on CB1 positive edge
c527 : 0bc0                  	db ACR,		0xc0			; T1 continuous and toggle PB7
c529 : 04a0                  	db T1CL,	lo(TAPE_RATE*2)	; Tape rate /2 = 0
c52b : 0501                  	db T1CH,	hi(TAPE_RATE*2)	; Tape rate /2 = 0
c52d : 00f0                  	db PRB,		KB_PRB+0x40		; Tape motor ON
c52f : ff                    	db -1
                             
                             ;****************************************
                             ;* via_strobe_init
                             ;* set strobe low & port A pin directions
                             ;****************************************
c530 :                       via_strobe_init
c530 : 8d0303           [ 4] 	sta   IO_0+DDRA
                             
                             	;set strobe low
c533 : ad0003           [ 4] 	lda   IO_0+PRB
c536 : 29ef             [ 2] 	and   #0b11101111
c538 : 8d0003           [ 4] 	sta   IO_0+PRB
                             
c53b : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* via_strobe_off
                             ;* deselect printer port devices
                             ;****************************************
AS65 Assembler for R6502 [1.42].                                     Page   70
-------------------------------- bank\bank0.s --------------------------------

c53c :                       via_strobe_off
c53c : 48               [ 3] 	pha
                             
                             	;set strobe high
c53d : ad0003           [ 4] 	lda   IO_0+PRB
c540 : 0910             [ 2] 	ora   #0b00010000
c542 : 8d0003           [ 4] 	sta   IO_0+PRB
                             
                             	;set all bits of porta except kb sense to output
c545 : a9f7             [ 2] 	lda   #0xf7
c547 : 8d0303           [ 4] 	sta   IO_0+DDRA
                             
c54a : 68               [ 4] 	pla
c54b : 60               [ 6] 	rts
                             
                             
c54c :                       mod_sz_cia_e
                             
                             	include "file/file.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  FILE.S
                             ;*	These routines allow for input/output and are 
                             ;*	by both the tape and parallel devices.
                             ;*	The format is based on a tape format.
                             ;*	The tape format is not compatible with a regul
                             ;*	but is a block format as follows;
                             ;*	Some zero bits (64) start a block.
                             ;*	Then two bytes of data representing the block 
                             ;*	Then 256 bytes of block data.
                             ;*	Each byte above consists of two '1' start bits
                             ;*	one '0' stop bit.
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code
                             
c54c :                       mod_sz_file_s
                             
                             ;* Vector table for tape or sd card device
c54c :                       tpsd_vectors
                             ;* Tape vectors
c54c : fdc6                  	dw	tp_init
c54e : 6cc7                  	dw	tp_read_byte
c550 : 14c7                  	dw	tp_write_byte
c552 : 01c7                  	dw	tp_put_delay
c554 : 09c7                  	dw	tp_block_gap
c556 : 00c7                  	dw	tp_release
                             ;* SD Card vectors
c558 : 57c8                  	dw	sd_init
c55a : 27c8                  	dw	sd_read_byte
c55c : e8c7                  	dw	sd_write_byte
c55e : 6ec8                  	dw	sd_put_delay
c560 : 6ec8                  	dw	sd_block_gap
c562 : a5c7                  	dw	sd_release
AS65 Assembler for R6502 [1.42].                                     Page   71
-------------------------------- bank\bank0.s --------------------------------

                             
                             ;* Jump through vectors for device specific calls
c564 :                       f_init
c564 : 6c1106           [ 6] 	jmp (f_storage_vec+f_init_vec)
c567 :                       f_read_byte
c567 : 6c1306           [ 6] 	jmp (f_storage_vec+f_read_byte_vec)
c56a :                       f_write_byte
c56a : 6c1506           [ 6] 	jmp (f_storage_vec+f_write_byte_vec)
c56d :                       f_put_delay
c56d : 6c1706           [ 6] 	jmp (f_storage_vec+f_put_delay_vec)
c570 :                       f_block_gap
c570 : 6c1906           [ 6] 	jmp (f_storage_vec+f_block_gap_vec)
c573 :                       f_release
c573 : 6c1b06           [ 6] 	jmp (f_storage_vec+f_release_vec)
                             	
c576 :                       f_open_msg
c576 : 4c6f6164696e67..      	db	"Loading:",0
c57f :                       f_save_msg
c57f : 536176696e673a00      	db	"Saving:",0
c587 :                       f_back4
c587 : 0808080800            	db	8,8,8,8,0
                             
c58c :                       f_print_open
c58c : a076             [ 2] 	ldy #lo(f_open_msg)
c58e : a9c5             [ 2] 	lda #hi(f_open_msg)
c590 : 4c23d1           [ 3] 	jmp gr_print_msg
                             
                             ;* Common function to open tape
                             ;* df_linbuff contains the filename without devic
                             ;* A contains device (0=tape, 1=sdcard)
c593 :                       f_open_common				; Used by open write also
c593 : a8               [ 2] 	tay						; Move A to Y
c594 : f002             [ 3] 	beq f_skip_sd			; Skip SD card if 0
c596 : a00c             [ 2] 	ldy #f_storage_table	; Else Y index into sd card
c598 :                       f_skip_sd	
c598 : a200             [ 2] 	ldx #0					; Start at beginning of table
c59a :                       f_init_vectors
c59a : b94cc5           [ 4] 	lda tpsd_vectors,y		; Get vector byte
c59d : 9d1106           [ 5] 	sta f_storage_vec,x		; Save to ram table
c5a0 : c8               [ 2] 	iny
c5a1 : e8               [ 2] 	inx
c5a2 : e00c             [ 2] 	cpx #f_storage_table	; Keep going until whole ta
c5a4 : d0f4             [ 3] 	bne f_init_vectors
                             
c5a6 : 78               [ 2] 	sei						; Interrupts disabled from here..
c5a7 : a200             [ 2] 	ldx #0
c5a9 : 8657             [ 3] 	stx tp_idx				; Initialise block
c5ab : 8655             [ 3] 	stx tp_block
c5ad : 8656             [ 3] 	stx tp_block+1
                             	
c5af : 2064c5           [ 6] 	jsr f_init				; Initialise VIA etc.
c5b2 : 60               [ 6] 	rts
                             
                             ;* tp_open_read
                             
c5b3 :                       fd_cload_getname_pc			; ** FOR ORICUTRON EMULATOR
                             
c5b3 :                       f_open_bread
c5b3 :                       f_open_read
c5b3 : 48               [ 3] 	pha						; Don't lose device number
c5b4 : a901             [ 2] 	lda #1					; Read mode
c5b6 : 8558             [ 3] 	sta tp_flag
AS65 Assembler for R6502 [1.42].                                     Page   72
-------------------------------- bank\bank0.s --------------------------------

c5b8 : 208cc5           [ 6] 	jsr f_print_open
c5bb : 68               [ 4] 	pla
c5bc : 2093c5           [ 6] 	jsr f_open_common
                             
c5bf :                       f_get_fname_start
c5bf : 2067c5           [ 6] 	jsr f_read_byte
c5c2 : c924             [ 2] 	cmp #'$'				; Find the $ symbol
c5c4 : d0f9             [ 3] 	bne f_get_fname_start
                             	
c5c6 : a209             [ 2] 	ldx #9					; 9 byte header - skip
c5c8 :                       f_get_header
c5c8 : 2067c5           [ 6] 	jsr f_read_byte
c5cb : ca               [ 2] 	dex
c5cc : d0fa             [ 3] 	bne f_get_header
                             	
                             	; X= zero here, now get null terminated filename
c5ce :                       f_get_fname
c5ce : 2067c5           [ 6] 	jsr f_read_byte
c5d1 : 9d0004           [ 5] 	sta df_linbuff,x
c5d4 : e8               [ 2] 	inx
c5d5 : c900             [ 2] 	cmp #0
c5d7 : d0f5             [ 3] 	bne f_get_fname
                             
c5d9 : a000             [ 2] 	ldy #lo(df_linbuff)
c5db : a904             [ 2] 	lda #hi(df_linbuff)
c5dd : 2023d1           [ 6] 	jsr gr_print_msg
c5e0 : a920             [ 2] 	lda #' '
c5e2 : 20cfd0           [ 6] 	jsr gr_put_byte
                             
c5e5 : 18               [ 2] 	clc
c5e6 : 60               [ 6] 	rts
                             
c5e7 :                       tt_getsync_pc				; ** FOR ORICUTRON EMULATOR **
c5e7 :                       tt_getsync_end_pc			; ** FOR ORICUTRON EMULATOR *
                             
c5e7 : ea               [ 2] 	nop
                             	
                             
                             ;* tp_close
                             ;* Close tape settings
c5e8 :                       f_close
c5e8 : a558             [ 3] 	lda tp_flag
c5ea : c902             [ 2] 	cmp #2					; Write mode?
c5ec : d003             [ 3] 	bne f_close_no_flush	; If not no need to flush
c5ee : 207dc6           [ 6] 	jsr f_put_block			; Flush the current block
c5f1 :                       f_close_no_flush
c5f1 : a90d             [ 2] 	lda #0x0d				; Line feed
c5f3 : 20cfd0           [ 6] 	jsr gr_put_byte
c5f6 : 2073c5           [ 6] 	jsr f_release			; Device specific resource relea
c5f9 : 20f7c4           [ 6] 	jsr init_via0			; Back to normal
c5fc : 58               [ 2] 	cli
c5fd : a900             [ 2] 	lda #0					; Zero tape flag
c5ff : 8558             [ 3] 	sta tp_flag
                             
c601 :                       tt_csave_end_pc				; ** FOR ORICUTRON EMULATOR **
                             
c601 : 18               [ 2] 	clc
c602 : 60               [ 6] 	rts
                             
                             ;* tp_open_write
                             ;* Open tape settings
c603 :                       f_open_bwrite
AS65 Assembler for R6502 [1.42].                                     Page   73
-------------------------------- bank\bank0.s --------------------------------

c603 : a001             [ 2] 	ldy #hi(0x101)
c605 : a201             [ 2] 	ldx #lo(0x101)
c607 : d004             [ 3] 	bne f_open_write_start
c609 :                       f_open_write
c609 : a018             [ 2] 	ldy #hi(6000+0x101)
c60b : a271             [ 2] 	ldx #lo(6000+0x101)
                             
c60d :                       fd_csave_getname_pc			; ** FOR ORICUTRON EMULATOR
                             
c60d :                       f_open_write_start
c60d : 48               [ 3] 	pha						; Don't lose device number
c60e : a902             [ 2] 	lda #2					; Write mode
c610 : 8558             [ 3] 	sta tp_flag
c612 : 845a             [ 3] 	sty tp_delay+1
c614 : 8659             [ 3] 	stx tp_delay
c616 : a07f             [ 2] 	ldy #lo(f_save_msg)
c618 : a9c5             [ 2] 	lda #hi(f_save_msg)
c61a : 2023d1           [ 6] 	jsr gr_print_msg
c61d : a000             [ 2] 	ldy #lo(df_linbuff)
c61f : a904             [ 2] 	lda #hi(df_linbuff)
c621 : 2023d1           [ 6] 	jsr gr_print_msg
c624 : a920             [ 2] 	lda #' '
c626 : 20cfd0           [ 6] 	jsr gr_put_byte
c629 : 68               [ 4] 	pla	
c62a : 2093c5           [ 6] 	jsr f_open_common		; Same as reading but tp_mode
                             
c62d :                       tt_writeleader_pc			; ** FOR ORICUTRON EMULATOR *
c62d :                       tt_writeleader_end_pc		; ** FOR ORICUTRON EMULATO
c62d : a280             [ 2] 	ldx #128				; 128 low bits
c62f : 206dc5           [ 6] 	jsr f_put_delay
                             
c632 : a924             [ 2] 	lda #'$'				; Start of header symbol
c634 : 38               [ 2] 	sec
c635 : 206ac5           [ 6] 	jsr f_write_byte
                             	
c638 : a209             [ 2] 	ldx #9					; Header, for future expansion
c63a : a9ff             [ 2] 	lda #0xff
c63c :                       f_write_header	
c63c : 38               [ 2] 	sec
c63d : 206ac5           [ 6] 	jsr f_write_byte
c640 : ca               [ 2] 	dex
c641 : d0f9             [ 3] 	bne f_write_header
                             	
c643 : a200             [ 2] 	ldx #0
c645 :                       f_write_fname
c645 : bd0004           [ 4] 	lda df_linbuff,x		; Put the filename
c648 : 38               [ 2] 	sec
c649 : 206ac5           [ 6] 	jsr f_write_byte
c64c : e8               [ 2] 	inx
c64d : c900             [ 2] 	cmp #0
c64f : d0f4             [ 3] 	bne f_write_fname
                             	
c651 : 18               [ 2] 	clc
c652 : 60               [ 6] 	rts
                             
                             
                             ;* f_put_byte
                             ;* Put to byte to tape - if got a block then save
                             
c653 :                       f_put_byte
c653 : 48               [ 3] 	pha
c654 : 8538             [ 3] 	sta tmp_d
AS65 Assembler for R6502 [1.42].                                     Page   74
-------------------------------- bank\bank0.s --------------------------------

c656 : 8a               [ 2] 	txa
c657 : 48               [ 3] 	pha
c658 : 98               [ 2] 	tya
c659 : 48               [ 3] 	pha
c65a : a538             [ 3] 	lda tmp_d
                             	
c65c : a457             [ 3] 	ldy tp_idx				; Save byte to buffer
c65e : 990002           [ 5] 	sta tp_buf,y
c661 : c8               [ 2] 	iny
c662 : 8457             [ 3] 	sty tp_idx
c664 : d010             [ 3] 	bne f_put_byte_done
c666 : 207dc6           [ 6] 	jsr f_put_block			; Flush block to tape
c669 : 18               [ 2] 	clc						; Increment block #
c66a : a555             [ 3] 	lda tp_block
c66c : 6901             [ 2] 	adc #1
c66e : 8555             [ 3] 	sta tp_block
c670 : a556             [ 3] 	lda tp_block+1
c672 : 6900             [ 2] 	adc #0
c674 : 8556             [ 3] 	sta tp_block+1
c676 :                       f_put_byte_done
c676 : 68               [ 4] 	pla
c677 : a8               [ 2] 	tay
c678 : 68               [ 4] 	pla
c679 : aa               [ 2] 	tax
c67a : 68               [ 4] 	pla
c67b : 18               [ 2] 	clc
c67c : 60               [ 6] 	rts
                             
                             ;* tp_put_block
                             ;* flush a block to tape
c67d :                       f_put_block
c67d : 20a1c6           [ 6] 	jsr f_print_block
                             		
c680 : a280             [ 2] 	ldx #128				; 128 low bits
c682 : 206dc5           [ 6] 	jsr f_put_delay
                             
c685 : a555             [ 3] 	lda tp_block			; Save block number low then high
c687 : 18               [ 2] 	clc
c688 : 206ac5           [ 6] 	jsr f_write_byte
c68b : a556             [ 3] 	lda tp_block+1
c68d : 38               [ 2] 	sec
c68e : 206ac5           [ 6] 	jsr f_write_byte
                             
c691 : a200             [ 2] 	ldx #0
c693 :                       f_put_block_bytes
c693 : bd0002           [ 4] 	lda tp_buf,x			; Then write out all bytes in blo
c696 : 18               [ 2] 	clc
c697 : 206ac5           [ 6] 	jsr f_write_byte
c69a : e8               [ 2] 	inx
c69b : d0f6             [ 3] 	bne f_put_block_bytes	; Always 256 bytes
                             	
c69d : 2070c5           [ 6] 	jsr f_block_gap		; Wait a while, still outputtin
                             
c6a0 : 60               [ 6] 	rts
                             
                             ; tp_print_block
c6a1 :                       f_print_block
c6a1 : a556             [ 3] 	lda tp_block+1			; Print block number hi byte
c6a3 : 2085c1           [ 6] 	jsr str_a_to_x
c6a6 : 20cfd0           [ 6] 	jsr gr_put_byte
c6a9 : 8a               [ 2] 	txa
c6aa : 20cfd0           [ 6] 	jsr gr_put_byte
AS65 Assembler for R6502 [1.42].                                     Page   75
-------------------------------- bank\bank0.s --------------------------------

c6ad : a555             [ 3] 	lda tp_block			; Print block number lo byte
c6af : 2085c1           [ 6] 	jsr str_a_to_x
c6b2 : 20cfd0           [ 6] 	jsr gr_put_byte
c6b5 : 8a               [ 2] 	txa
c6b6 : 20cfd0           [ 6] 	jsr gr_put_byte
c6b9 : a9c5             [ 2] 	lda #hi(f_back4)		; Go back 4 characters to prin
c6bb : a087             [ 2] 	ldy #lo(f_back4)
c6bd : 2023d1           [ 6] 	jsr gr_print_msg
c6c0 : 60               [ 6] 	rts
                             
                             
                             ;* t_get_byte
                             ;* Get a byte from buffer - load blocks as needed
c6c1 :                       f_get_byte
c6c1 : 8a               [ 2] 	txa
c6c2 : 48               [ 3] 	pha
c6c3 : 98               [ 2] 	tya
c6c4 : 48               [ 3] 	pha
                             	
c6c5 : a457             [ 3] 	ldy tp_idx				; Index in to buffer
c6c7 : d005             [ 3] 	bne f_get_byte_buf		; No need to load from tape
c6c9 : 20dec6           [ 6] 	jsr f_get_block			; Else load a block from tape
c6cc : a000             [ 2] 	ldy #0					; 0 index is now valid
c6ce :                       f_get_byte_buf
c6ce : b90002           [ 4] 	lda tp_buf,y			; Get from memory buffer
c6d1 : c8               [ 2] 	iny
c6d2 : 8457             [ 3] 	sty tp_idx				; Never zero on leaving
c6d4 : 8538             [ 3] 	sta tmp_d
c6d6 : 68               [ 4] 	pla
c6d7 : a8               [ 2] 	tay
c6d8 : 68               [ 4] 	pla
c6d9 : aa               [ 2] 	tax
c6da : a538             [ 3] 	lda tmp_d
c6dc : 18               [ 2] 	clc
c6dd : 60               [ 6] 	rts						; Except when buffer done
                             
                             ;* f_get_block
                             ;* Load a block in to memory
c6de :                       f_get_block
                             
c6de : 2067c5           [ 6] 	jsr f_read_byte		; Get block number
c6e1 : 8555             [ 3] 	sta tp_block
c6e3 : 2067c5           [ 6] 	jsr f_read_byte
c6e6 : 8556             [ 3] 	sta tp_block+1
                             	
c6e8 : 20a1c6           [ 6] 	jsr f_print_block
                             	
c6eb : a000             [ 2] 	ldy #0
c6ed : 8457             [ 3] 	sty tp_idx
c6ef :                       f_get_block_bytes
c6ef : 2067c5           [ 6] 	jsr f_read_byte		; Fill buffer
c6f2 : a457             [ 3] 	ldy tp_idx
c6f4 : 990002           [ 5] 	sta tp_buf,y
c6f7 : c8               [ 2] 	iny
c6f8 : 8457             [ 3] 	sty tp_idx
c6fa : d0f3             [ 3] 	bne f_get_block_bytes	; Always 256 bytes
                             
c6fc : 60               [ 6] 	rts
                             	
                             
c6fd :                       mod_sz_file_e
                             
AS65 Assembler for R6502 [1.42].                                     Page   76
-------------------------------- bank\bank0.s --------------------------------

                             
                             	include "file/tape.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  TAPE.S
                             ;*	These routines allow for tape input/output
                             ;*	The tape format is not compatible with a regul
                             ;*	but is a block format as follows;
                             ;*	Some zero bits (64) start a block.
                             ;*	Then two bytes of data representing the block 
                             ;*	Then 256 bytes of block data.
                             ;*	Each byte above consists of two '1' start bits
                             ;*	one '0' stop bit.
                             ;*	After each block, 1 second of 4800Hz (seen as 
                             ;*	is transmitted to allow the CPU to deal with t
                             ;*	when subsequently loading.
                             ;*	A bit is 4800Hz half cycle then 4800Hz half cy
                             ;*	'1' or 2400Hz half cycle for a '0', except for
                             ;*	block which is one second of 2400Hz.
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code
                             
c6fd :                       mod_sz_tape_s
                             
c6fd :                       tp_init
c6fd : 4cf4c4           [ 3] 	jmp init_via0_tape
                             
c700 :                       tp_release
c700 : 60               [ 6] 	rts
                             	
                             ; tp_put_delay
                             ;* X = number of zero bits to insert
c701 :                       tp_put_delay
c701 : 18               [ 2] 	clc
c702 : 2037c7           [ 6] 	jsr tp_write_bit
c705 : ca               [ 2] 	dex
c706 : d0f9             [ 3] 	bne tp_put_delay
c708 : 60               [ 6] 	rts
                             
                             ; tp_block_gap
                             ; Send 2400 bits of zero ~ 1.5 seconds
                             ; add 0x101 due to how counters decrement
                             ; For binary mode it is just 1 bit gap
c709 :                       tp_block_gap
c709 : a45a             [ 3] 	ldy tp_delay+1
c70b : a659             [ 3] 	ldx tp_delay
c70d :                       tp_block_gap_1
c70d : 2001c7           [ 6] 	jsr tp_put_delay
c710 : 88               [ 2] 	dey
c711 : d0fa             [ 3] 	bne tp_block_gap_1
c713 : 60               [ 6] 	rts	
                             
                             ;* tp_write_byte
AS65 Assembler for R6502 [1.42].                                     Page   77
-------------------------------- bank\bank0.s --------------------------------

                             ;* Write a byte to tape which looks like this
                             ;* 11xxxxxxxx0
c714 :                       tt_putbyte_pc				; ** FOR ORICUTRON EMULATOR **
c714 :                       tp_write_byte
c714 : 48               [ 3] 	pha
c715 : 08               [ 3] 	php
c716 : 38               [ 2] 	sec					; 1 for start bit
c717 : 2037c7           [ 6] 	jsr tp_write_bit
c71a : 38               [ 2] 	sec					; 1 for start bit
c71b : 2037c7           [ 6] 	jsr tp_write_bit
c71e : a008             [ 2] 	ldy #8				; 8 bits of data
c720 :                       tp_write_byte_bit
c720 : 6a               [ 2] 	ror a
c721 : 2037c7           [ 6] 	jsr tp_write_bit
c724 : 88               [ 2] 	dey
c725 : d0f9             [ 3] 	bne tp_write_byte_bit
c727 : 18               [ 2] 	clc					; 0 for stop bit
c728 : 2037c7           [ 6] 	jsr tp_write_bit
c72b : 28               [ 4] 	plp
c72c : 9007             [ 3] 	bcc tp_write_byte_nodelay
c72e : 8a               [ 2] 	txa
c72f : a220             [ 2] 	ldx #32					; Delays needed
c731 : 2001c7           [ 6] 	jsr tp_put_delay
c734 : aa               [ 2] 	tax
c735 :                       tp_write_byte_nodelay
c735 : 68               [ 4] 	pla
c736 :                       tt_putbyte_end_pc			; ** FOR ORICUTRON EMULATOR *
c736 : 60               [ 6] 	rts
                             	
                             
                             ;* tp_write_bit
                             ;* Write a bit in C to tape which looks like this
                             ;* Half cycle of 4800Hz, then
                             ;*		half cycle of 4800Hz for a 1
                             ;*		half cycle of 2400Hz for a 0
c737 :                       tp_write_bit
c737 : 48               [ 3] 	pha
c738 : 8a               [ 2] 	txa
c739 : 48               [ 3] 	pha
c73a : 08               [ 3] 	php						; Save the bit to be stored
                             
c73b : a9d0             [ 2] 	lda #TAPE_RATE			; Half cycle first of 4800Hz
c73d : a200             [ 2] 	ldx #0
c73f : 8d0603           [ 4] 	sta IO_0+T1LL
c742 : 8e0703           [ 4] 	stx IO_0+T1LH			; This starts the timer
c745 : ad0403           [ 4] 	lda IO_0+T1CL			; Clear any interrupt flag
c748 :                       tp_write_bit_chk1
c748 : 2c0d03           [ 4] 	bit IO_0+IFR			; Check IRF for bit 6
c74b : 50fb             [ 3] 	bvc tp_write_bit_chk1	; V=0? Keep checking
c74d : ad0403           [ 4] 	lda IO_0+T1CL			; Clear interrupt flag
                             	
c750 : 28               [ 4] 	plp						; Get the bit to be stored
c751 : a9d0             [ 2] 	lda #TAPE_RATE			; Assume putting out a 1 in 2nd
c753 : b002             [ 3] 	bcs tp_write_bit_t1		; A zero is half the rate (
c755 : 0a               [ 2] 	asl	a					; TAPE_RATE * 2 need to inc X
c756 : e8               [ 2] 	inx
c757 :                       tp_write_bit_t1
c757 : 8d0603           [ 4] 	sta IO_0+T1LL
c75a : 8e0703           [ 4] 	stx IO_0+T1LH			; This starts the timer
c75d : ad0403           [ 4] 	lda IO_0+T1CL			; Clear any interrupt flag
c760 :                       tp_write_bit_chk2
c760 : 2c0d03           [ 4] 	bit IO_0+IFR			; Check IRF for bit 6
AS65 Assembler for R6502 [1.42].                                     Page   78
-------------------------------- bank\bank0.s --------------------------------

c763 : 50fb             [ 3] 	bvc tp_write_bit_chk2	; V=0? Keep checking
c765 : ad0403           [ 4] 	lda IO_0+T1CL			; Clear interrupt flag
c768 : 68               [ 4] 	pla
c769 : aa               [ 2] 	tax
c76a : 68               [ 4] 	pla
c76b : 60               [ 6] 	rts
                             
                             
                             
                             ;* tp_read_byte
                             ;* Read a byte from tape, always expects one '1' 
c76c :                       tt_readbyte_pc				; ** FOR ORICUTRON EMULATOR **
c76c :                       tp_read_byte
c76c :                       tp_read_byte_st
c76c : 2080c7           [ 6] 	jsr tp_read_bit			; Expecting a 1
c76f : 90fb             [ 3] 	bcc tp_read_byte_st
c771 : 2080c7           [ 6] 	jsr tp_read_bit			; Should be another 1
c774 : 90f6             [ 3] 	bcc tp_read_byte_st
                             	; Ok got 2 start
                             	
c776 : a008             [ 2] 	ldy #8				; Get 8 bits
c778 :                       tp_read_byte_bits
c778 : 2080c7           [ 6] 	jsr tp_read_bit
c77b : 6a               [ 2] 	ror a
c77c : 88               [ 2] 	dey
c77d : d0f9             [ 3] 	bne tp_read_byte_bits
                             	; Byte is in A, stop bit is not waited for..
c77f :                       tt_readbyte_end_pc			; ** FOR ORICUTRON EMULATOR 
c77f : 60               [ 6] 	rts
                             
                             ;* tp_read_bit
                             ;* Get a CB1 transition and measure the time
                             ;* The measurement indicates a 1 or 0 received
c780 :                       tp_read_bit
c780 : 48               [ 3] 	pha
c781 : ad0003           [ 4] 	lda IO_0+PRB			; Clear CB1 interrupt flag by rea
c784 :                       tp_read_bit_cb1
c784 :                       tt_getsync_loop_pc			; ** FOR ORICUTRON EMULATOR 
c784 : ad0d03           [ 4] 	lda IO_0+IFR
c787 : 2910             [ 2] 	and #IFR_CB1
c789 : f0f9             [ 3] 	beq tp_read_bit_cb1		; Keep checking until CB1 a
                             
c78b : ad0903           [ 4] 	lda IO_0+T2CH			; Get the high byte of T2 counte
c78e : 48               [ 3] 	pha
c78f : a9ff             [ 2] 	lda #0xff				; Reset T2 counter high byte
c791 : 8d0903           [ 4] 	sta IO_0+T2CH			; Reset high byte of T2 counter
c794 : 68               [ 4] 	pla						; What was previous counter?
                             ;	beq tp_io_error			; If down to zero, then some 
c795 : c9fe             [ 2] 	cmp #0xfe				; C=1 if T2 >= 0xfe else C=0
c797 : 68               [ 4] 	pla
c798 : 60               [ 6] 	rts						; Carry contains the bit received
c799 :                       tp_io_error
                             	SWBRK DFERR_BREAK		; DEFINE A NEW ERROR!
                             
                             
c79b :                       mod_sz_tape_e
                             
                             
                             	include "file/sdcard.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
AS65 Assembler for R6502 [1.42].                                     Page   79
-------------------------------- bank\bank0.s --------------------------------

                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  SDCARD.S
                             ;*	These routines allow for SD card input/output
                             ;*	The file format is similar to the dflat tape
                             ;*	format but is *NOT* a block format
                             ;*
                             ;*  Controlled through port A (printer port) as f
                             ;*		PA0		Clock			Out		Controlled by Oric
                             ;*		PA1		D0				In/Out	To/from Oric protocol depen
                             ;*		PA2		D1				In/Out	To/from Oric protocol depen
                             ;*		PA3		D2				In/Out	To/from Oric protocol depen
                             ;*		PA4		D3				In/Out	To/from Oric protocol depen
                             ;*		PA5		Ready (ACK)		In		Set by Arduino (1=ACK)
                             ;*		PA6		SD Select		Out		Set low by Oric
                             ;*		PA7		SD Select		Out		Set low by Oric
                             ;*		PB4		Select (STB)	Out		Set low by Oric
                             ;*
                             ;* Protocol is that PB4,6,7 must be low for SD ca
                             ;* to respond. If PB6,7 are non zero, then it sel
                             ;* one of the joysticks.
                             ;* Protocol;
                             ;* Write:
                             ;* 0) Oric: Set PB4,6,7 low - D0-D3 as output
                             ;* 1) Oric: Set D0-D3 as output (to send)
                             ;* 2) Oric: Send write command byte
                             ;* 3) Oric: Send additional bytes (e.g. filename)
                             ;* 4) Oric: Set D0-D3 as output
                             ;* 5) Oric: Send data bytes
                             ;* 6) Oric: Set PB4,6,7 = high, D0-D3 as input
                             ;* Read:
                             ;* 0) Oric: Set PB4,6,7 low - D0-D3 as output
                             ;* 1) Oric: Set D0-D3 as output (to send)
                             ;* 2) Oric: Send write command byte
                             ;* 3) Oric: Send additional bytes (e.g. filename)
                             ;* 4) Oric: Set D0-D3 as input
                             ;* 5) Oric: Receive data bytes
                             ;* 6) Oric: Set PB4,6,7 = high, D0-D3 as input
                             ;*
                             ;* Commands
                             ;* 0x00 : Load <filename><NUL>
                             ;* 0x01 : Save <filename><NUL>
                             ;************************************************
                             
                             	; ROM code
                             	code
                             
c79b :                       mod_sz_sd_s
                             
0002 =                       SD_BIT_DELAY	=	2
                             
                             ;* Delay based on X register
c79b :                       sd_delay
c79b : 48               [ 3] 	pha
c79c : 8a               [ 2] 	txa
c79d : a202             [ 2] 	ldx #SD_BIT_DELAY
c79f :                       sd_delay_loop
c79f : ca               [ 2] 	dex
c7a0 : d0fd             [ 3] 	bne sd_delay_loop
AS65 Assembler for R6502 [1.42].                                     Page   80
-------------------------------- bank\bank0.s --------------------------------

c7a2 : aa               [ 2] 	tax
c7a3 : 68               [ 4] 	pla
c7a4 : 60               [ 6] 	rts
                             
                             ; Release the Arduino
                             ; Toggles the clock line a few times with STB hig
                             ; This causes the Arduino to reset
c7a5 :                       sd_release
c7a5 : 203cc5           [ 6] 	jsr via_strobe_off
                             ;	ldy #10
                             ;	lda IO_0+PRA;
                             ;sd_reset_toggle
                             ;	eor #1
                             ;	sta IO_0+PRA;
                             ;	jsr sd_delay
                             ;	dey
                             ;	bne sd_reset_toggle
c7a8 : 20e8c7           [ 6] 	jsr sd_write_byte
c7ab : 20e8c7           [ 6] 	jsr sd_write_byte
c7ae : 4cf7c4           [ 3] 	jmp init_via0
                             
                             
                             ;* Select the Arduino
c7b1 :                       sd_select
c7b1 : 48               [ 3] 	pha
                             
                             	;set ddra to output mode initially
c7b2 : a9df             [ 2] 	lda #0b11011111
c7b4 : 2030c5           [ 6] 	jsr via_strobe_init
                             
                             	;deselect joystick (and zero all other bits)
c7b7 : a900             [ 2] 	lda #0b00000000
c7b9 : 8d0103           [ 4] 	sta IO_0+PRA
                             
c7bc : 209bc7           [ 6] 	jsr sd_delay
c7bf : 68               [ 4] 	pla
c7c0 : 60               [ 6] 	rts
                             
                             
                             ;* Wait for Arduino to be ready
                             ;* Timeout results in an exception (BRK)
c7c1 :                       sd_ready
c7c1 : a20a             [ 2] 	ldx #10
c7c3 : a000             [ 2] 	ldy #0
c7c5 :                       sd_notready
c7c5 : c8               [ 2] 	iny							; Decrement X,Y timeout
c7c6 : d003             [ 3] 	bne sd_ready_skipx
c7c8 : ca               [ 2] 	dex
c7c9 : f008             [ 3] 	beq sd_timeout				; If X is zero then timeout er
c7cb :                       sd_ready_skipx
c7cb : ad0103           [ 4] 	lda IO_0+PRA				; Get port A value
c7ce : 2920             [ 2] 	and #0b00100000				; Check bit 5
c7d0 : f0f3             [ 3] 	beq sd_notready
c7d2 : 60               [ 6] 	rts
c7d3 :                       sd_timeout
                             	SWBRK DFERR_FNAME
                             
                             
                             
                             ; Write nibble in bit 1..4 plus clock high
c7d5 :                       sd_write_nibble
c7d5 : a000             [ 2] 	ldy #0b00000000
AS65 Assembler for R6502 [1.42].                                     Page   81
-------------------------------- bank\bank0.s --------------------------------

c7d7 : 8c0103           [ 4] 	sty IO_0+PRA				; Clock low, data low
c7da : 209bc7           [ 6] 	jsr sd_delay
c7dd : 0d0103           [ 4] 	ora IO_0+PRA				; Set bits to transfer for nibbl
c7e0 : 0901             [ 2] 	ora #1						; Clock high
c7e2 : 8d0103           [ 4] 	sta IO_0+PRA				; Send it to Port A
c7e5 : 4c9bc7           [ 3] 	jmp sd_delay
                             
                             
                             ;* Write a byte in A to the Arduino
c7e8 :                       sd_write_byte
c7e8 : 8538             [ 3] 	sta tmp_d
c7ea : 48               [ 3] 	pha
c7eb : 8a               [ 2] 	txa
c7ec : 48               [ 3] 	pha
c7ed : 98               [ 2] 	tya
c7ee : 48               [ 3] 	pha
                             
                             	; Make sure arduino is ready
c7ef : 20c1c7           [ 6] 	jsr sd_ready	
c7f2 : 209bc7           [ 6] 	jsr sd_delay
                             
                             	; Set DDRA to output from Oric
c7f5 : a9df             [ 2] 	lda #0b11011111
c7f7 : 8d0303           [ 4] 	sta IO_0+DDRA
                             
                             	; Write low nibble
c7fa : a538             [ 3] 	lda tmp_d					; Get the byte to transmit
c7fc : 290f             [ 2] 	and #0x0f					; Mask off lower nibble
c7fe : 0a               [ 2] 	asl a 						; Shift from bit 0-3 to bit 1-4
c7ff : 20d5c7           [ 6] 	jsr sd_write_nibble
                             
                             	; Write high nibble
c802 : a538             [ 3] 	lda tmp_d					; Get the byte to transmit
c804 : 29f0             [ 2] 	and #0xf0					; Mask off upper nibble
c806 : 4a               [ 2] 	lsr a						; Shift down to bit 1-4
c807 : 4a               [ 2] 	lsr a
c808 : 4a               [ 2] 	lsr a
c809 : 20d5c7           [ 6] 	jsr sd_write_nibble
                             
c80c : 68               [ 4] 	pla
c80d : a8               [ 2] 	tay
c80e : 68               [ 4] 	pla
c80f : aa               [ 2] 	tax
                             
c810 : 68               [ 4] 	pla
c811 : 60               [ 6] 	rts
                             
                             
                             ;* Read nibble from Arduino plus clock high
c812 :                       sd_read_nibble
c812 : a000             [ 2] 	ldy #0b00000000
c814 : 8c0103           [ 4] 	sty IO_0+PRA				; Set clock low, data low
c817 : 209bc7           [ 6] 	jsr sd_delay				
                             
c81a : 0901             [ 2] 	ora #1						; Clock bit high
c81c : 8d0103           [ 4] 	sta IO_0+PRA				; Store it
                             
c81f : ad0103           [ 4] 	lda IO_0+PRA				; Get bits 1..4
c822 : 291e             [ 2] 	and #0b00011110				; Mask these bits
                             
c824 : 4c9bc7           [ 3] 	jmp sd_delay
                             
AS65 Assembler for R6502 [1.42].                                     Page   82
-------------------------------- bank\bank0.s --------------------------------

                             
c827 :                       sd_read_byte
c827 : 8a               [ 2] 	txa
c828 : 48               [ 3] 	pha
c829 : 98               [ 2] 	tya
c82a : 48               [ 3] 	pha
                             
                             	; Make sure arduino is ready
c82b : 20c1c7           [ 6] 	jsr sd_ready	
c82e : 209bc7           [ 6] 	jsr sd_delay
                             
                             	; Set DDRA to input to Oric
c831 : a9c1             [ 2] 	lda #0b11000001
c833 : 8d0303           [ 4] 	sta IO_0+DDRA
                             
c836 : ad0103           [ 4] 	lda IO_0+PRA				; Get port A value
c839 : 29e0             [ 2] 	and #0b11100000				; Ensure clock and data is lo
c83b : a8               [ 2] 	tay							; Y is clock zero and data zero
                             
                             	; Read low nibble
c83c : 2012c8           [ 6] 	jsr sd_read_nibble
c83f : 4a               [ 2] 	lsr a						; Shift from bit 1 to bit 0
c840 : 290f             [ 2] 	and #0x0f					; Mask off lower nibble
c842 : 8538             [ 3] 	sta tmp_d					; Save in temp
                             
                             	; Read high nibble
c844 : 2012c8           [ 6] 	jsr sd_read_nibble
c847 : 0a               [ 2] 	asl a						; Shift from bit 1 to bit 4
c848 : 0a               [ 2] 	asl a
c849 : 0a               [ 2] 	asl a
c84a : 29f0             [ 2] 	and #0xf0					; Mask off upper nibble
c84c : 0538             [ 3] 	ora tmp_d					; Merge with lower nibble
c84e : 8538             [ 3] 	sta tmp_d
                             
c850 : 68               [ 4] 	pla
c851 : a8               [ 2] 	tay
c852 : 68               [ 4] 	pla
c853 : aa               [ 2] 	tax
                             
c854 : a538             [ 3] 	lda tmp_d
c856 : 60               [ 6] 	rts
                             	
                             ;* Initialise SD card
                             ;* Use TP flag to determine the command to send t
                             ;* Send this command (read or write) plus the fil
c857 :                       sd_init
c857 : a458             [ 3] 	ldy tp_flag				; 1=read, 2=write
c859 : 88               [ 2] 	dey
c85a : 98               [ 2] 	tya						; 0=read, 1=write for the Arduino
c85b :                       sd_init_a					; Init with A preset to command byt
c85b : 20b1c7           [ 6] 	jsr sd_select
                             ;* Send command and filename
c85e :                       sd_commandfname
c85e : 20e8c7           [ 6] 	jsr sd_write_byte		; Send command byte (0=read, 
c861 : a000             [ 2] 	ldy #0					; Start of df_linbuff
c863 :                       sd_commandfname_ch
c863 : b90004           [ 4] 	lda df_linbuff,y		; Get filename char
c866 : 20e8c7           [ 6] 	jsr sd_write_byte		; Send it as command frame
c869 : c8               [ 2] 	iny						; Next char
c86a : c900             [ 2] 	cmp #0					; Unless zero terminator
c86c : d0f5             [ 3] 	bne sd_commandfname_ch
                             ;* No delay for SD card
AS65 Assembler for R6502 [1.42].                                     Page   83
-------------------------------- bank\bank0.s --------------------------------

                             ;* No block gap for SD card
c86e :                       sd_put_delay
c86e :                       sd_block_gap
c86e : 60               [ 6] 	rts
                             
                             
                             ;* Delete file from SD card
c86f :                       sd_delete
c86f : a903             [ 2] 	lda #3					; Send Delete command
c871 : 205bc8           [ 6] 	jsr sd_init_a			; And send filename to delete
c874 : 20c1c7           [ 6] 	jsr sd_ready			; Check SD card is ready else err
c877 : 4ca5c7           [ 3] 	jmp sd_release			; Then done
                             
                             ;* Ouput directory listing
c87a :                       sd_dir
c87a : 20b1c7           [ 6] 	jsr sd_select
c87d : a904             [ 2] 	lda #4					; Send directory command
c87f : 20e8c7           [ 6] 	jsr sd_write_byte
c882 : 209bc7           [ 6] 	jsr sd_delay
c885 :                       sd_dir_char					; Keep getting bytes from Arduino
c885 : 209bc7           [ 6] 	jsr sd_delay
c888 : 2027c8           [ 6] 	jsr sd_read_byte
c88b : 20cfd0           [ 6] 	jsr gr_put_byte
c88e : aa               [ 2] 	tax
c88f : d0f4             [ 3] 	bne sd_dir_char			; Until zero terminator found
c891 : 4ca5c7           [ 3] 	jmp sd_release			; Then done
                             	
                             
                             
c894 :                       mod_sz_sd_e
                             
                             
                             	include "keyboard/keyboard.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  KEYBOARD.S
                             ;*	Keyboard driver code. It is very slow to scan 
                             ;*	routines here do a basic scan for any key befo
                             ;*	the specific key. Still, it has a noticeable i
                             ;*	CPU especially in dflat which checks the key a
                             ;*	keyword is executed.
                             ;*	Rather than working off interrupts these routi
                             ;*	need to be called as needed. The T1 interrupt 
                             ;*	track of keyboard timers for repeat delay and 
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code
                             
                             ;****************************************
                             ;* init_keyboard
                             ;* Initialise the keyboard settings
                             ;****************************************
c894 :                       init_keyboard
c894 : a914             [ 2] 	lda #KB_REP_DEL
AS65 Assembler for R6502 [1.42].                                     Page   84
-------------------------------- bank\bank0.s --------------------------------

c896 : 8531             [ 3] 	sta kb_rdel_tim
c898 : a903             [ 2] 	lda #KB_REP_TIM
c89a : 8530             [ 3] 	sta kb_rep_tim
c89c : a901             [ 2] 	lda #KB_DEBOUNCE
c89e : 852e             [ 3] 	sta kb_deb_tim
                             
                             	; ** check if IJK stick connected **
c8a0 : 08               [ 3] 	php
c8a1 : 78               [ 2] 	sei
                             	; Save port A
c8a2 : ad0303           [ 4] 	lda IO_0+DDRA
c8a5 : 48               [ 3] 	pha
c8a6 : ad0103           [ 4] 	lda IO_0+PRA
c8a9 : 48               [ 3] 	pha
                             
                             	; Check IJK present
                             	; set top two bits of porta to output and rest a
c8aa : a9c0             [ 2] 	lda   #0b11000000
c8ac : 2030c5           [ 6] 	jsr via_strobe_init
                             	; Select left+right stick
c8af : a9c0             [ 2] 	lda #0b11000000
c8b1 : 8d0f03           [ 4] 	sta IO_0+PRAH
                             	; read stick sense line
c8b4 : ad0f03           [ 4] 	lda IO_0+PRAH
c8b7 : 2920             [ 2] 	and #KB_IJK
c8b9 : 4920             [ 2] 	eor #KB_IJK
c8bb : 852c             [ 3] 	sta kb_stat
c8bd : 203cc5           [ 6] 	jsr via_strobe_off
                             
                             	; Restore port A
c8c0 : 68               [ 4] 	pla
c8c1 : 8d0103           [ 4] 	sta IO_0+PRA
c8c4 : 68               [ 4] 	pla
c8c5 : 8d0303           [ 4] 	sta IO_0+DDRA
                             
c8c8 : 28               [ 4] 	plp
c8c9 : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* kb_stick
                             ;* Check for fire | down | up | right | left
                             ;*        bit  4     3      2     1       0
                             ;* A = Returns bit mask of keys pressed
                             ;* Y corrupted
                             ;****************************************
c8ca :                       kb_stick
                             	; if IJK connected then read joystick
c8ca : a52c             [ 3] 	lda kb_stat
c8cc : 2920             [ 2] 	and #KB_IJK
c8ce : d028             [ 3] 	bne kb_stick_ijk
                             
                             	; Select Row 4 only, all keys on this row
c8d0 : a9b4             [ 2] 	lda #4+KB_PRB			; Maintain upper nibble of PRB
c8d2 : 8d0003           [ 4] 	sta IO_0+PRB
c8d5 : a90e             [ 2] 	lda #SND_REG_IOA		; Select AY Port A for columns
c8d7 : 204ec0           [ 6] 	jsr snd_sel_reg
c8da : a900             [ 2] 	lda #0					; Result will be in A
c8dc : 48               [ 3] 	pha
c8dd : a004             [ 2] 	ldy #4					; Go through the 5 cols on row 4
c8df :                       kb_stick_pos
c8df : b9e6ca           [ 4] 	lda kb_stick_mask,y		; Get the column mask
AS65 Assembler for R6502 [1.42].                                     Page   85
-------------------------------- bank\bank0.s --------------------------------

c8e2 : 205ec0           [ 6] 	jsr snd_set_reg			; Activate column
c8e5 : ea               [ 2] 	nop
c8e6 : ea               [ 2] 	nop
c8e7 : ea               [ 2] 	nop
c8e8 : ea               [ 2] 	nop
c8e9 : a908             [ 2] 	lda #KB_SENSE			; Something pressed?
c8eb : 2d0003           [ 4] 	and IO_0+PRB			; Read Port B
c8ee : c908             [ 2] 	cmp #KB_SENSE			; C=1 if set else 0
c8f0 : 68               [ 4] 	pla
c8f1 : 2a               [ 2] 	rol a					; Get C in to A
c8f2 : 48               [ 3] 	pha
c8f3 : 88               [ 2] 	dey
c8f4 : 10e9             [ 3] 	bpl kb_stick_pos		; Do all 5 positions
c8f6 : 68               [ 4] 	pla						; Result in A
c8f7 : 60               [ 6] 	rts
c8f8 :                       kb_stick_ijk
c8f8 : 08               [ 3] 	php
c8f9 : 78               [ 2] 	sei
                             
                             	; Save port A
c8fa : ad0303           [ 4] 	lda IO_0+DDRA
c8fd : 48               [ 3] 	pha
c8fe : ad0103           [ 4] 	lda IO_0+PRA
c901 : 48               [ 3] 	pha
                             
                             	;set top two bits of porta to output and rest as
c902 : a9c0             [ 2] 	lda   #0b11000000
c904 : 2030c5           [ 6] 	jsr via_strobe_init
                             
                             	;Select Left Joystick
c907 : a97f             [ 2] 	lda #0b01111111
c909 : 8d0103           [ 4] 	sta IO_0+PRA
                             	;Read back Left Joystick state into A
c90c : ad0103           [ 4] 	lda IO_0+PRA
                             	; release joystick IO settings
c90f : 203cc5           [ 6] 	jsr via_strobe_off
                             	;Mask out unused bits and invert
c912 : 291f             [ 2] 	and #0b00011111
c914 : 491f             [ 2] 	eor #0b00011111
c916 : a8               [ 2] 	tay
                             	; use this as an index into the mapping
                             	; to get the same bit representation
                             	; as if using cursor and space keys
c917 : b9ebca           [ 4] 	lda kb_ijk_map,y
c91a : a8               [ 2] 	tay
                             
                             	; Restore port A
c91b : 68               [ 4] 	pla
c91c : 8d0103           [ 4] 	sta IO_0+PRA
c91f : 68               [ 4] 	pla
c920 : 8d0303           [ 4] 	sta IO_0+DDRA
                             
c923 : 28               [ 4] 	plp
                             	; result in A
c924 : 98               [ 2] 	tya
c925 : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* kb_any_key
                             ;* Quick check for any key except shifts & ctrl
                             ;* Carry = 1 means key pressed
AS65 Assembler for R6502 [1.42].                                     Page   86
-------------------------------- bank\bank0.s --------------------------------

                             ;****************************************
c926 :                       kb_any_key
c926 : a90e             [ 2] 	lda #SND_REG_IOA		; Select Port A of AY
c928 : 204ec0           [ 6] 	jsr snd_sel_reg
                             
c92b : a0b7             [ 2] 	ldy #7+KB_PRB			; Start from row 7
c92d :                       kb_any_key_row
c92d : 8c0003           [ 4] 	sty IO_0+PRB			; Select row on port B
                             	; Select all columns except 4
c930 : a910             [ 2] 	lda #0b00010000			; Deselect only col 4
c932 : 205ec0           [ 6] 	jsr snd_set_reg
                             
c935 : ea               [ 2] 	nop
c936 : ea               [ 2] 	nop
c937 : ea               [ 2] 	nop						; New NOP
c938 : ea               [ 2] 	nop
c939 : ea               [ 2] 	nop
                             ;	nop						; New NOP
                             
c93a : a908             [ 2] 	lda #KB_SENSE			; Something pressed?
c93c : 2d0003           [ 4] 	and IO_0+PRB			; Read Port B
c93f : d007             [ 3] 	bne kb_any_key_pressed
c941 : 88               [ 2] 	dey						; If not then next row
c942 : c0af             [ 2] 	cpy #KB_PRB-1			; Done rows 0..8?
c944 : d0e7             [ 3] 	bne kb_any_key_row		; Until all rows done
c946 :                       kb_any_key_none
c946 : 18               [ 2] 	clc						; C=0 means not pressed
c947 : 60               [ 6] 	rts
c948 :                       kb_any_key_pressed
c948 :                       kb_read_got
c948 : 38               [ 2] 	sec						; C=1 means pressed
c949 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* kb_read_raw
                             ;* Read keyboard
                             ;* Y = Keyboard code
                             ;* Carry = 1 means key found, 0 = no keys found
                             ;****************************************
c94a :                       kb_read_raw
c94a : 2026c9           [ 6] 	jsr kb_any_key			; Quick check is anything down?
c94d : 9046             [ 3] 	bcc kb_read_nothing		; Don't bother if not
c94f :                       kb_read_raw_force
c94f : a20e             [ 2] 	ldx #SND_REG_IOA		; Select Port A of AY
c951 : 8e0f03           [ 4] 	stx SND_ADBUS			; Put reg # on Port A (sound bus
c954 : a2ff             [ 2] 	ldx #SND_SELSETADDR		; Get ready to select the r
c956 : 8e0c03           [ 4] 	stx SND_MODE			; Latch the reg # on Port A
c959 : a2dd             [ 2] 	ldx #SND_DESELECT		; Deselect AY
c95b : 8e0c03           [ 4] 	stx SND_MODE
c95e : a200             [ 2] 	ldx #0					; Start at column 0
c960 : 86ab             [ 3] 	stx zp_tmp1
c962 :                       kb_check_matrix_col
c962 : a0b0             [ 2] 	ldy #0+KB_PRB			; Start at row 0 (maintain PRB u
c964 :                       kb_check_matrix_row
c964 : 8c0003           [ 4] 	sty IO_0+PRB			; Select row from Y
                             	; Get the col value for AY port A
c967 : a6ab             [ 3] 	ldx zp_tmp1
c969 : bddeca           [ 4] 	lda kb_col_mask,x
                             	; Write it to AY port A
c96c : 8d0f03           [ 4] 	sta SND_ADBUS			; Put col value on AY bus
c96f : a2fd             [ 2] 	ldx #SND_SELWRITE		; Select mode for writing dat
c971 : 8e0c03           [ 4] 	stx SND_MODE			; Latch reg value on Port A
AS65 Assembler for R6502 [1.42].                                     Page   87
-------------------------------- bank\bank0.s --------------------------------

c974 : a2dd             [ 2] 	ldx #SND_DESELECT		; Deselect AY
c976 : 8e0c03           [ 4] 	stx SND_MODE
                             
c979 : ea               [ 2] 	nop						; Wait 10 cycles before reading sense p
c97a : ea               [ 2] 	nop
c97b : ea               [ 2] 	nop
                             
c97c : a908             [ 2] 	lda #KB_SENSE			; Bit 3 is the sense
c97e : 2d0003           [ 4] 	and IO_0+PRB			; And with Port B
                             
c981 : d016             [ 3] 	bne kb_read_raw_got
                             	; No key for this row/col, next
c983 : c8               [ 2] 	iny
c984 : c0b8             [ 2] 	cpy #8+KB_PRB			; Done 8 rows?
c986 : d0dc             [ 3] 	bne kb_check_matrix_row
                             	; ok check next row
c988 : a6ab             [ 3] 	ldx zp_tmp1
c98a :                       kb_check_skip4
c98a : e8               [ 2] 	inx
c98b : e004             [ 2] 	cpx #4					; Skip 4?
c98d : f0fb             [ 3] 	beq kb_check_skip4
c98f : 86ab             [ 3] 	stx zp_tmp1
c991 : e008             [ 2] 	cpx #8					; Done 8 cols?
c993 : d0cd             [ 3] 	bne kb_check_matrix_col
                             	; No key was sensed
c995 :                       kb_read_nothing
c995 : a000             [ 2] 	ldy #0					; Raw key codes
c997 : 18               [ 2] 	clc						; No key sensed flag
c998 : 60               [ 6] 	rts
c999 :                       kb_read_raw_got
                             	;Y=row, zp_temp1=col
c999 : a5ab             [ 3] 	lda zp_tmp1				; Get the column num
c99b : 0a               [ 2] 	asl a					; Shift in to bits 5,4,3
c99c : 0a               [ 2] 	asl a
c99d : 0a               [ 2] 	asl a
c99e : 85ab             [ 3] 	sta zp_tmp1
c9a0 : 98               [ 2] 	tya						; Now or with row number
c9a1 : 2907             [ 2] 	and #7					; Only bottom 3 bits!
c9a3 : 05ab             [ 3] 	ora zp_tmp1
c9a5 : a8               [ 2] 	tay						; Put in to Y
c9a6 : 38               [ 2] 	sec
c9a7 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* kb_scan_key
                             ;* Scans for a key, returns zero for no key found
                             ;* Processes caps and shift lock but these don't 
                             ;* A = Key code
                             ;****************************************
c9a8 :                       kb_scan_key
c9a8 : a52d             [ 3] 	lda kb_deb				; Do not scan keyboard too often
c9aa : d013             [ 3] 	bne kb_no_scan
c9ac : a52e             [ 3] 	lda kb_deb_tim			; Else reset debounce timer
c9ae : 852d             [ 3] 	sta kb_deb
c9b0 : 204ac9           [ 6] 	jsr kb_read_raw			; Check if a key is sensed
c9b3 : b00e             [ 3] 	bcs kb_scan_decode		; go ahead and decode
                             	; If pressed nothing then reset timers
c9b5 : a9ff             [ 2] 	lda #255
c9b7 : 8529             [ 3] 	sta kb_raw				; Reset raw key settings
c9b9 : 852a             [ 3] 	sta kb_last				; And last key
c9bb : a531             [ 3] 	lda kb_rdel_tim			; Reset repeat timer to initia
c9bd : 852f             [ 3] 	sta kb_rep
AS65 Assembler for R6502 [1.42].                                     Page   88
-------------------------------- bank\bank0.s --------------------------------

c9bf :                       kb_no_scan
c9bf : a900             [ 2] 	lda #0
c9c1 : 38               [ 2] 	sec						; Code not valid
c9c2 : 60               [ 6] 	rts						; And done (A=0)
c9c3 :                       kb_scan_decode
                             	; If got here then raw key is good
c9c3 : a52a             [ 3] 	lda kb_last				; Preload A with last decoded key
c9c5 : c429             [ 3] 	cpy kb_raw				; Same as last raw key?
c9c7 : 8429             [ 3] 	sty kb_raw				; Already save new raw key
c9c9 : d002             [ 3] 	bne kb_process_new		; If is new raw key, look at
c9cb : f061             [ 4] 	beq kb_do_repeat		; Else go handle repeating wit
c9cd :                       kb_process_new
c9cd : a531             [ 3] 	lda kb_rdel_tim			; Reset repeat timer to initia
c9cf : 852f             [ 3] 	sta kb_rep
                             	; Now to get a proper key code translated from r
                             	; Check for shift and ctrl (not debounced!)
c9d1 : a9ef             [ 2] 	lda #0b11101111			; Select column 4
c9d3 : a20e             [ 2] 	ldx #SND_REG_IOA		; On AY port A
c9d5 : 206ec0           [ 6] 	jsr snd_set
                             
                             	; check shifted keys
c9d8 : a2b4             [ 2] 	ldx #4+KB_PRB			; Row 4 (left shift)
c9da : 8e0003           [ 4] 	stx IO_0+PRB			; Select row on port B
c9dd : ea               [ 2] 	nop
c9de : ea               [ 2] 	nop
c9df : ea               [ 2] 	nop
c9e0 : ea               [ 2] 	nop
                             
c9e1 : ad0003           [ 4] 	lda IO_0+PRB			; Read Port B
                             
c9e4 : a2b7             [ 2] 	ldx #7+KB_PRB			; Row 7 (right shift)
c9e6 : 8e0003           [ 4] 	stx IO_0+PRB			; Select row on port B
c9e9 : ea               [ 2] 	nop
c9ea : ea               [ 2] 	nop
c9eb : ea               [ 2] 	nop
c9ec : ea               [ 2] 	nop
                             
c9ed : 0d0003           [ 4] 	ora IO_0+PRB			; Combine Port B
c9f0 : be5eca           [ 4] 	ldx kb_table_std,y		; Pre-load standard key code
c9f3 : 2908             [ 2] 	and #KB_SENSE			; Bit 3 is the sense
c9f5 : f003             [ 3] 	beq kb_read_noshift		; Skip over if no shift
c9f7 : be9eca           [ 4] 	ldx kb_table_shift,y	; Load up standard key code
c9fa :                       kb_read_noshift
c9fa : 862b             [ 3] 	stx kb_code				; Save the mapped keycode
                             	; check ctrl key
c9fc : a2b2             [ 2] 	ldx #2+KB_PRB			; Row 2 (ctrl key)
c9fe : 8e0003           [ 4] 	stx IO_0+PRB			; Select row on port B
ca01 : ea               [ 2] 	nop
ca02 : ea               [ 2] 	nop
ca03 : ea               [ 2] 	nop
ca04 : ea               [ 2] 	nop
                             
ca05 : ad0003           [ 4] 	lda IO_0+PRB			; Read Port B
ca08 : 2908             [ 2] 	and #KB_SENSE
ca0a : f00a             [ 3] 	beq kb_skip_ctrl
ca0c : a52b             [ 3] 	lda kb_code
ca0e : 291f             [ 2] 	and #0x1f				; Ctrl will result in codes 0 to 31
ca10 : 852b             [ 3] 	sta kb_code				; Override the keycode
ca12 : f02a             [ 3] 	beq kb_brk
ca14 : 1020             [ 3] 	bpl	kb_store_last		; Check repeat (bpl is always
ca16 :                       kb_skip_ctrl
ca16 : a52c             [ 3] 	lda kb_stat				; Check caps lock
AS65 Assembler for R6502 [1.42].                                     Page   89
-------------------------------- bank\bank0.s --------------------------------

ca18 : 2901             [ 2] 	and #KB_CAPSLK
ca1a : f01a             [ 3] 	beq kb_store_last
ca1c : a52b             [ 3] 	lda kb_code
ca1e : c961             [ 2] 	cmp #'a'				; If < 'a' then skip
ca20 : 9014             [ 3] 	bcc kb_store_last
ca22 : c97b             [ 2] 	cmp #'z'+1				; If > 'z' then skip
ca24 : b010             [ 3] 	bcs kb_store_last
ca26 : a52b             [ 3] 	lda kb_code				; Get the actual code
ca28 : 4920             [ 2] 	eor #0x20				; Switch off bit 0x20
ca2a : 852b             [ 3] 	sta kb_code				; Save the capitalised code
ca2c : d008             [ 3] 	bne kb_store_last		; always
ca2e :                       kb_do_repeat
ca2e : a62f             [ 3] 	ldx kb_rep				; Has repeat expired?
ca30 : d008             [ 3] 	bne	kb_in_repeat		; If not then still in repeat
ca32 : a630             [ 3] 	ldx kb_rep_tim			; Set repeat speed
ca34 : 862f             [ 3] 	stx kb_rep
ca36 :                       kb_store_last
ca36 : 852a             [ 3] 	sta kb_last				; Make last code same as this
ca38 : 18               [ 2] 	clc						; Code valid
ca39 : 60               [ 6] 	rts
ca3a :                       kb_in_repeat
ca3a : a900             [ 2] 	lda #0					; Don't emit a keycode
ca3c : 38               [ 2] 	sec
ca3d : 60               [ 6] 	rts
ca3e :                       kb_brk
                             	SWBRK DFERR_OK
                             
                             
                             ;****************************************
                             ;* kb_get_key
                             ;* Waits for a key press, C=1 synchronous
                             ;* A = Key code, C=1 means valid
                             ;****************************************
ca40 :                       kb_get_key
ca40 : 8a               [ 2] 	txa
ca41 : 48               [ 3] 	pha
ca42 : 98               [ 2] 	tya
ca43 : 48               [ 3] 	pha
                             
ca44 :                       kb_get_try
ca44 : 08               [ 3] 	php
ca45 : 20a8c9           [ 6] 	jsr kb_scan_key
ca48 : 900b             [ 3] 	bcc kb_scan_got_key
ca4a : 28               [ 4] 	plp						; No key, so check C
ca4b : b0f7             [ 3] 	bcs kb_get_try			; Keep looking if C
ca4d : 38               [ 2] 	sec						; Indicate key not valid
                             
ca4e : 68               [ 4] 	pla
ca4f : a8               [ 2] 	tay
ca50 : 68               [ 4] 	pla
ca51 : aa               [ 2] 	tax
ca52 : a900             [ 2] 	lda #0
                             
ca54 : 60               [ 6] 	rts
ca55 :                       kb_scan_got_key
ca55 : 28               [ 4] 	plp						; Pull stack
ca56 : 18               [ 2] 	clc						; Indicate key valid
                             
ca57 : 68               [ 4] 	pla
ca58 : a8               [ 2] 	tay
ca59 : 68               [ 4] 	pla
ca5a : aa               [ 2] 	tax
AS65 Assembler for R6502 [1.42].                                     Page   90
-------------------------------- bank\bank0.s --------------------------------

                             
ca5b : a52b             [ 3] 	lda kb_code
                             
ca5d : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* kb_table_std (no shift)
                             ;* Each line is one column
                             ;****************************************
ca5e :                       kb_table_std
ca5e : 376a6d6b20757938      	db '7' ,'j' ,'m' ,'k' ,' ' ,'u' ,'y' ,'8'
ca66 : 6e7436392c69686c      	db 'n' ,'t' ,'6' ,'9' ,',' ,'i' ,'h' ,'l'
ca6e : 3572623b2e6f6730      	db '5' ,'r' ,'b' ,';' ,'.' ,'o' ,'g' ,'0'
ca76 : 7666342d0b70652f      	db 'v' ,'f' ,'4' ,'-' ,0x0b,'p' ,'e' ,'/'
ca7e : 0000000000000000      	db 0,0,0,0,0,0,0,0 ; Column 4 is shift and ctrl 
ca86 : 311b7a00087f610d      	db '1' ,0x1b,'z' ,0   ,0x08,0x7f,'a' ,0x0d
ca8e : 7871325c0a5d7300      	db 'x' ,'q' ,'2' ,0x5c,0x0a,']' ,'s' ,0
ca96 : 33646327095b773d      	db '3' ,'d' ,'c' ,0x27,0x09,'[' ,'w' ,'='
                             
                             ;* kb_table_shift (with shift)
ca9e :                       kb_table_shift
ca9e : 264a4d4b2055592a      	db '&' ,'J' ,'M' ,'K' ,' ' ,'U' ,'Y' ,'*'
caa6 : 4e545e283c49484c      	db 'N' ,'T' ,'^' ,'(' ,'<' ,'I' ,'H' ,'L'
caae : 2552423a3e4f4729      	db '%' ,'R' ,'B' ,':' ,'>' ,'O' ,'G' ,')'
cab6 : 5646245f0b50453f      	db 'V' ,'F' ,'$' ,'_' ,0x0b,'P' ,'E' ,'?'
cabe : 0000000000000000      	db 0,0,0,0,0,0,0,0 ; Column 4 is shift and ctrl 
cac6 : 211b5a00087f410d      	db '!' ,0x1b,'Z' ,0   ,0x08,0x7f,'A' ,0x0d
cace : 5851407c0a7d5300      	db 'X' ,'Q' ,'@' ,'|' ,0x0a,'}' ,'S' ,0
cad6 : 23444322097b572b      	db '#' ,'D' ,'C' ,0x22,0x09,'{' ,'W' ,'+'
                             
cade :                       kb_col_mask
cade : fe                    	db 0b11111110
cadf : fd                    	db 0b11111101
cae0 : fb                    	db 0b11111011
cae1 : f7                    	db 0b11110111
cae2 : ef                    	db 0b11101111
cae3 : df                    	db 0b11011111
cae4 : bf                    	db 0b10111111
cae5 : 7f                    	db 0b01111111
                             
cae6 :                       kb_stick_mask
cae6 : df                    	db 0b11011111		; Left 	= Bit 0
cae7 : 7f                    	db 0b01111111		; Right = Bit 1
cae8 : f7                    	db 0b11110111		; Up	= Bit 2
cae9 : bf                    	db 0b10111111		; Down	= Bit 3
caea : fe                    	db 0b11111110		; Space	= Bit 4
                             
caeb :                       kb_ijk_map
caeb : 00                    	db 0b00000000		; 00000 = nothing
caec : 02                    	db 0b00000010		; 00001 = right
caed : 01                    	db 0b00000001		; 00010 = left
caee : 03                    	db 0b00000011		; 00011 = left+right
caef : 10                    	db 0b00010000		; 00100 = fire
caf0 : 12                    	db 0b00010010		; 00101 = fire+right
caf1 : 11                    	db 0b00010001		; 00110 = fire+left
caf2 : 13                    	db 0b00010011		; 00111 = fire+left+right
caf3 : 08                    	db 0b00001000		; 01000 = down
caf4 : 0a                    	db 0b00001010		; 01001 = down+right
caf5 : 09                    	db 0b00001001		; 01010 = down+left
caf6 : 0b                    	db 0b00001011		; 01011 = down+left+right
caf7 : 18                    	db 0b00011000		; 01100 = down+fire
caf8 : 1a                    	db 0b00011010		; 01101 = down+fire+right
AS65 Assembler for R6502 [1.42].                                     Page   91
-------------------------------- bank\bank0.s --------------------------------

caf9 : 19                    	db 0b00011001		; 01110 = down+fire+left
cafa : 1b                    	db 0b00011011		; 01111 = down+fire+left+right
cafb : 04                    	db 0b00000100		; 10000 = up
cafc : 06                    	db 0b00000110		; 10001 = up+right
cafd : 05                    	db 0b00000101		; 10010 = up+left
cafe : 07                    	db 0b00000111		; 10011 = up+left+right
caff : 14                    	db 0b00010100		; 10100 = up+fire
cb00 : 16                    	db 0b00010110		; 10101 = up+fire+right
cb01 : 15                    	db 0b00010101		; 10110 = up+fire+left
cb02 : 17                    	db 0b00010111		; 10111 = up+fire+left+right
cb03 : 0c                    	db 0b00001100		; 11000 = up+down
cb04 : 0e                    	db 0b00001110		; 11001 = up+down+right
cb05 : 0d                    	db 0b00001101		; 11010 = up+down+left
cb06 : 0f                    	db 0b00001111		; 11011 = up+down+left+right
cb07 : 1c                    	db 0b00011100		; 11100 = up+down+fire
cb08 : 1e                    	db 0b00011110		; 11101 = up+down+fire+right
cb09 : 1d                    	db 0b00011101		; 11110 = up+down+fire+left
cb0a : 1f                    	db 0b00011111		; 11111 = up+down+fire+left+right
                             	
                             	include "vdp/graph.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  GRAPH.S
                             ;*  This is the graphics module, to handle text a
                             ;*  graphics.
                             ;*  For text modes, this module keeps track of wh
                             ;*  next put a character, and also takes care of 
                             ;*  to the next line as well as scrolling the con
                             ;*  when the cursor has reached the bottom right.
                             ;*  module also enables text input which is echoe
                             ;*  screen, to allow interactive input and editin
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code
                             
cb0b :                       mod_sz_graph_s
                             
                             
                             	include "vdp/font.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  FONT.S
                             ;*  This is the font definition, used to initiali
                             ;*  character set.  This is the standard Oric-1 f
                             ;*	Still called vdp as this code was ported from 
                             ;*	machine using the TMS9918a.
                             ;*
                             ;************************************************
AS65 Assembler for R6502 [1.42].                                     Page   92
-------------------------------- bank\bank0.s --------------------------------

                             
cb0b :                       vdp_font
                             ; char 32
cb0b : 00                    	db %000000
cb0c : 00                    	db %000000
cb0d : 00                    	db %000000
cb0e : 00                    	db %000000
cb0f : 00                    	db %000000
cb10 : 00                    	db %000000
cb11 : 00                    	db %000000
cb12 : 00                    	db %000000
                             ; char 33
cb13 : 0c                    	db %001100
cb14 : 0c                    	db %001100
cb15 : 0c                    	db %001100
cb16 : 08                    	db %001000
cb17 : 08                    	db %001000
cb18 : 00                    	db %000000
cb19 : 08                    	db %001000
cb1a : 00                    	db %000000
                             ; char 34
cb1b : 36                    	db %110110
cb1c : 36                    	db %110110
cb1d : 12                    	db %010010
cb1e : 00                    	db %000000
cb1f : 00                    	db %000000
cb20 : 00                    	db %000000
cb21 : 00                    	db %000000
cb22 : 00                    	db %000000
                             ; char 35
cb23 : 14                    	db %010100
cb24 : 14                    	db %010100
cb25 : 3e                    	db %111110
cb26 : 14                    	db %010100
cb27 : 3e                    	db %111110
cb28 : 14                    	db %010100
cb29 : 14                    	db %010100
cb2a : 00                    	db %000000
                             ; char 36
cb2b : 08                    	db %001000
cb2c : 1e                    	db %011110
cb2d : 28                    	db %101000
cb2e : 1c                    	db %011100
cb2f : 0a                    	db %001010
cb30 : 3c                    	db %111100
cb31 : 08                    	db %001000
cb32 : 00                    	db %000000
                             ; char 37
cb33 : 30                    	db %110000
cb34 : 32                    	db %110010
cb35 : 04                    	db %000100
cb36 : 08                    	db %001000
cb37 : 10                    	db %010000
cb38 : 26                    	db %100110
cb39 : 06                    	db %000110
cb3a : 00                    	db %000000
                             ; char 38
cb3b : 10                    	db %010000
cb3c : 28                    	db %101000
cb3d : 28                    	db %101000
cb3e : 10                    	db %010000
cb3f : 2a                    	db %101010
AS65 Assembler for R6502 [1.42].                                     Page   93
-------------------------------- bank\bank0.s --------------------------------

cb40 : 24                    	db %100100
cb41 : 1a                    	db %011010
cb42 : 00                    	db %000000
                             ; char 39
cb43 : 0c                    	db %001100
cb44 : 0c                    	db %001100
cb45 : 04                    	db %000100
cb46 : 00                    	db %000000
cb47 : 00                    	db %000000
cb48 : 00                    	db %000000
cb49 : 00                    	db %000000
cb4a : 00                    	db %000000
                             ; char 40
cb4b : 04                    	db %000100
cb4c : 08                    	db %001000
cb4d : 10                    	db %010000
cb4e : 10                    	db %010000
cb4f : 10                    	db %010000
cb50 : 08                    	db %001000
cb51 : 04                    	db %000100
cb52 : 00                    	db %000000
                             ; char 41
cb53 : 10                    	db %010000
cb54 : 08                    	db %001000
cb55 : 04                    	db %000100
cb56 : 04                    	db %000100
cb57 : 04                    	db %000100
cb58 : 08                    	db %001000
cb59 : 10                    	db %010000
cb5a : 00                    	db %000000
                             ; char 42
cb5b : 08                    	db %001000
cb5c : 2a                    	db %101010
cb5d : 1c                    	db %011100
cb5e : 08                    	db %001000
cb5f : 1c                    	db %011100
cb60 : 2a                    	db %101010
cb61 : 08                    	db %001000
cb62 : 00                    	db %000000
                             ; char 43
cb63 : 00                    	db %000000
cb64 : 08                    	db %001000
cb65 : 08                    	db %001000
cb66 : 3e                    	db %111110
cb67 : 08                    	db %001000
cb68 : 08                    	db %001000
cb69 : 00                    	db %000000
cb6a : 00                    	db %000000
                             ; char 44
cb6b : 00                    	db %000000
cb6c : 00                    	db %000000
cb6d : 00                    	db %000000
cb6e : 00                    	db %000000
cb6f : 00                    	db %000000
cb70 : 08                    	db %001000
cb71 : 08                    	db %001000
cb72 : 10                    	db %010000
                             ; char 45
cb73 : 00                    	db %000000
cb74 : 00                    	db %000000
cb75 : 00                    	db %000000
cb76 : 3e                    	db %111110
AS65 Assembler for R6502 [1.42].                                     Page   94
-------------------------------- bank\bank0.s --------------------------------

cb77 : 00                    	db %000000
cb78 : 00                    	db %000000
cb79 : 00                    	db %000000
cb7a : 00                    	db %000000
                             ; char 46
cb7b : 00                    	db %000000
cb7c : 00                    	db %000000
cb7d : 00                    	db %000000
cb7e : 00                    	db %000000
cb7f : 00                    	db %000000
cb80 : 04                    	db %000100
cb81 : 00                    	db %000000
cb82 : 00                    	db %000000
                             ; char 47
cb83 : 00                    	db %000000
cb84 : 02                    	db %000010
cb85 : 04                    	db %000100
cb86 : 08                    	db %001000
cb87 : 10                    	db %010000
cb88 : 20                    	db %100000
cb89 : 00                    	db %000000
cb8a : 00                    	db %000000
                             ; char 48
cb8b : 1c                    	db %011100
cb8c : 22                    	db %100010
cb8d : 26                    	db %100110
cb8e : 2a                    	db %101010
cb8f : 32                    	db %110010
cb90 : 22                    	db %100010
cb91 : 1c                    	db %011100
cb92 : 00                    	db %000000
                             ; char 49
cb93 : 08                    	db %001000
cb94 : 18                    	db %011000
cb95 : 08                    	db %001000
cb96 : 08                    	db %001000
cb97 : 08                    	db %001000
cb98 : 08                    	db %001000
cb99 : 1c                    	db %011100
cb9a : 00                    	db %000000
                             ; char 50
cb9b : 1c                    	db %011100
cb9c : 22                    	db %100010
cb9d : 02                    	db %000010
cb9e : 04                    	db %000100
cb9f : 08                    	db %001000
cba0 : 10                    	db %010000
cba1 : 3e                    	db %111110
cba2 : 00                    	db %000000
                             ; char 51
cba3 : 3e                    	db %111110
cba4 : 02                    	db %000010
cba5 : 04                    	db %000100
cba6 : 0c                    	db %001100
cba7 : 02                    	db %000010
cba8 : 22                    	db %100010
cba9 : 1c                    	db %011100
cbaa : 00                    	db %000000
                             ; char 52
cbab : 04                    	db %000100
cbac : 0c                    	db %001100
cbad : 14                    	db %010100
AS65 Assembler for R6502 [1.42].                                     Page   95
-------------------------------- bank\bank0.s --------------------------------

cbae : 24                    	db %100100
cbaf : 3e                    	db %111110
cbb0 : 04                    	db %000100
cbb1 : 04                    	db %000100
cbb2 : 00                    	db %000000
                             ; char 53
cbb3 : 3e                    	db %111110
cbb4 : 20                    	db %100000
cbb5 : 3c                    	db %111100
cbb6 : 02                    	db %000010
cbb7 : 02                    	db %000010
cbb8 : 22                    	db %100010
cbb9 : 1c                    	db %011100
cbba : 00                    	db %000000
                             ; char 54
cbbb : 0c                    	db %001100
cbbc : 10                    	db %010000
cbbd : 20                    	db %100000
cbbe : 3c                    	db %111100
cbbf : 22                    	db %100010
cbc0 : 22                    	db %100010
cbc1 : 1c                    	db %011100
cbc2 : 00                    	db %000000
                             ; char 55
cbc3 : 3e                    	db %111110
cbc4 : 02                    	db %000010
cbc5 : 04                    	db %000100
cbc6 : 08                    	db %001000
cbc7 : 10                    	db %010000
cbc8 : 10                    	db %010000
cbc9 : 10                    	db %010000
cbca : 00                    	db %000000
                             ; char 56
cbcb : 1c                    	db %011100
cbcc : 22                    	db %100010
cbcd : 22                    	db %100010
cbce : 1c                    	db %011100
cbcf : 22                    	db %100010
cbd0 : 22                    	db %100010
cbd1 : 1c                    	db %011100
cbd2 : 00                    	db %000000
                             ; char 57
cbd3 : 1c                    	db %011100
cbd4 : 22                    	db %100010
cbd5 : 22                    	db %100010
cbd6 : 1e                    	db %011110
cbd7 : 02                    	db %000010
cbd8 : 04                    	db %000100
cbd9 : 18                    	db %011000
cbda : 00                    	db %000000
                             ; char 58
cbdb : 00                    	db %000000
cbdc : 00                    	db %000000
cbdd : 08                    	db %001000
cbde : 00                    	db %000000
cbdf : 00                    	db %000000
cbe0 : 08                    	db %001000
cbe1 : 00                    	db %000000
cbe2 : 00                    	db %000000
                             ; char 59
cbe3 : 00                    	db %000000
cbe4 : 00                    	db %000000
AS65 Assembler for R6502 [1.42].                                     Page   96
-------------------------------- bank\bank0.s --------------------------------

cbe5 : 08                    	db %001000
cbe6 : 00                    	db %000000
cbe7 : 00                    	db %000000
cbe8 : 08                    	db %001000
cbe9 : 08                    	db %001000
cbea : 10                    	db %010000
                             ; char 60
cbeb : 04                    	db %000100
cbec : 08                    	db %001000
cbed : 10                    	db %010000
cbee : 20                    	db %100000
cbef : 10                    	db %010000
cbf0 : 08                    	db %001000
cbf1 : 04                    	db %000100
cbf2 : 00                    	db %000000
                             ; char 61
cbf3 : 00                    	db %000000
cbf4 : 00                    	db %000000
cbf5 : 3e                    	db %111110
cbf6 : 00                    	db %000000
cbf7 : 3e                    	db %111110
cbf8 : 00                    	db %000000
cbf9 : 00                    	db %000000
cbfa : 00                    	db %000000
                             ; char 62
cbfb : 10                    	db %010000
cbfc : 08                    	db %001000
cbfd : 04                    	db %000100
cbfe : 02                    	db %000010
cbff : 04                    	db %000100
cc00 : 08                    	db %001000
cc01 : 10                    	db %010000
cc02 : 00                    	db %000000
                             ; char 63
cc03 : 1c                    	db %011100
cc04 : 22                    	db %100010
cc05 : 04                    	db %000100
cc06 : 08                    	db %001000
cc07 : 08                    	db %001000
cc08 : 00                    	db %000000
cc09 : 08                    	db %001000
cc0a : 00                    	db %000000
                             ; char 64
cc0b : 1c                    	db %011100
cc0c : 22                    	db %100010
cc0d : 2a                    	db %101010
cc0e : 2e                    	db %101110
cc0f : 2c                    	db %101100
cc10 : 20                    	db %100000
cc11 : 1e                    	db %011110
cc12 : 00                    	db %000000
cc13 :                       vdp_font_a
                             ; char 65
cc13 : 1c                    	db %011100
cc14 : 22                    	db %100010
cc15 : 22                    	db %100010
cc16 : 3e                    	db %111110
cc17 : 22                    	db %100010
cc18 : 22                    	db %100010
cc19 : 22                    	db %100010
cc1a : 00                    	db %000000
                             ; char 66
AS65 Assembler for R6502 [1.42].                                     Page   97
-------------------------------- bank\bank0.s --------------------------------

cc1b : 3c                    	db %111100
cc1c : 22                    	db %100010
cc1d : 22                    	db %100010
cc1e : 3c                    	db %111100
cc1f : 22                    	db %100010
cc20 : 22                    	db %100010
cc21 : 3c                    	db %111100
cc22 : 00                    	db %000000
                             ; char 67
cc23 : 1c                    	db %011100
cc24 : 22                    	db %100010
cc25 : 20                    	db %100000
cc26 : 20                    	db %100000
cc27 : 20                    	db %100000
cc28 : 22                    	db %100010
cc29 : 1c                    	db %011100
cc2a : 00                    	db %000000
                             ; char 68
cc2b : 3c                    	db %111100
cc2c : 22                    	db %100010
cc2d : 22                    	db %100010
cc2e : 22                    	db %100010
cc2f : 22                    	db %100010
cc30 : 22                    	db %100010
cc31 : 3c                    	db %111100
cc32 : 00                    	db %000000
                             ; char 69
cc33 : 3e                    	db %111110
cc34 : 20                    	db %100000
cc35 : 20                    	db %100000
cc36 : 3c                    	db %111100
cc37 : 20                    	db %100000
cc38 : 20                    	db %100000
cc39 : 3e                    	db %111110
cc3a : 00                    	db %000000
                             ; char 70
cc3b : 3e                    	db %111110
cc3c : 20                    	db %100000
cc3d : 20                    	db %100000
cc3e : 3c                    	db %111100
cc3f : 20                    	db %100000
cc40 : 20                    	db %100000
cc41 : 20                    	db %100000
cc42 : 00                    	db %000000
                             ; char 71
cc43 : 1e                    	db %011110
cc44 : 20                    	db %100000
cc45 : 20                    	db %100000
cc46 : 20                    	db %100000
cc47 : 26                    	db %100110
cc48 : 22                    	db %100010
cc49 : 1e                    	db %011110
cc4a : 00                    	db %000000
                             ; char 72
cc4b : 22                    	db %100010
cc4c : 22                    	db %100010
cc4d : 22                    	db %100010
cc4e : 3e                    	db %111110
cc4f : 22                    	db %100010
cc50 : 22                    	db %100010
cc51 : 22                    	db %100010
cc52 : 00                    	db %000000
AS65 Assembler for R6502 [1.42].                                     Page   98
-------------------------------- bank\bank0.s --------------------------------

                             ; char 73
cc53 : 1c                    	db %011100
cc54 : 08                    	db %001000
cc55 : 08                    	db %001000
cc56 : 08                    	db %001000
cc57 : 08                    	db %001000
cc58 : 08                    	db %001000
cc59 : 1c                    	db %011100
cc5a : 00                    	db %000000
                             ; char 74
cc5b : 02                    	db %000010
cc5c : 02                    	db %000010
cc5d : 02                    	db %000010
cc5e : 02                    	db %000010
cc5f : 02                    	db %000010
cc60 : 22                    	db %100010
cc61 : 1c                    	db %011100
cc62 : 00                    	db %000000
                             ; char 75
cc63 : 22                    	db %100010
cc64 : 24                    	db %100100
cc65 : 28                    	db %101000
cc66 : 30                    	db %110000
cc67 : 28                    	db %101000
cc68 : 24                    	db %100100
cc69 : 22                    	db %100010
cc6a : 00                    	db %000000
                             ; char 76
cc6b : 20                    	db %100000
cc6c : 20                    	db %100000
cc6d : 20                    	db %100000
cc6e : 20                    	db %100000
cc6f : 20                    	db %100000
cc70 : 20                    	db %100000
cc71 : 3e                    	db %111110
cc72 : 00                    	db %000000
                             ; char 77
cc73 : 22                    	db %100010
cc74 : 36                    	db %110110
cc75 : 2a                    	db %101010
cc76 : 2a                    	db %101010
cc77 : 22                    	db %100010
cc78 : 22                    	db %100010
cc79 : 22                    	db %100010
cc7a : 00                    	db %000000
                             ; char 78
cc7b : 22                    	db %100010
cc7c : 22                    	db %100010
cc7d : 32                    	db %110010
cc7e : 2a                    	db %101010
cc7f : 26                    	db %100110
cc80 : 22                    	db %100010
cc81 : 22                    	db %100010
cc82 : 00                    	db %000000
                             ; char 79
cc83 : 1c                    	db %011100
cc84 : 22                    	db %100010
cc85 : 22                    	db %100010
cc86 : 22                    	db %100010
cc87 : 22                    	db %100010
cc88 : 22                    	db %100010
cc89 : 1c                    	db %011100
AS65 Assembler for R6502 [1.42].                                     Page   99
-------------------------------- bank\bank0.s --------------------------------

cc8a : 00                    	db %000000
                             ; char 80
cc8b : 3c                    	db %111100
cc8c : 22                    	db %100010
cc8d : 22                    	db %100010
cc8e : 3c                    	db %111100
cc8f : 20                    	db %100000
cc90 : 20                    	db %100000
cc91 : 20                    	db %100000
cc92 : 00                    	db %000000
                             ; char 81
cc93 : 1c                    	db %011100
cc94 : 22                    	db %100010
cc95 : 22                    	db %100010
cc96 : 22                    	db %100010
cc97 : 2a                    	db %101010
cc98 : 24                    	db %100100
cc99 : 1a                    	db %011010
cc9a : 00                    	db %000000
                             ; char 82
cc9b : 3c                    	db %111100
cc9c : 22                    	db %100010
cc9d : 22                    	db %100010
cc9e : 3c                    	db %111100
cc9f : 28                    	db %101000
cca0 : 24                    	db %100100
cca1 : 22                    	db %100010
cca2 : 00                    	db %000000
                             ; char 83
cca3 : 1c                    	db %011100
cca4 : 22                    	db %100010
cca5 : 20                    	db %100000
cca6 : 1c                    	db %011100
cca7 : 02                    	db %000010
cca8 : 22                    	db %100010
cca9 : 1c                    	db %011100
ccaa : 00                    	db %000000
                             ; char 84
ccab : 3e                    	db %111110
ccac : 08                    	db %001000
ccad : 08                    	db %001000
ccae : 08                    	db %001000
ccaf : 08                    	db %001000
ccb0 : 08                    	db %001000
ccb1 : 08                    	db %001000
ccb2 : 00                    	db %000000
                             ; char 85
ccb3 : 22                    	db %100010
ccb4 : 22                    	db %100010
ccb5 : 22                    	db %100010
ccb6 : 22                    	db %100010
ccb7 : 22                    	db %100010
ccb8 : 22                    	db %100010
ccb9 : 1c                    	db %011100
ccba : 00                    	db %000000
                             ; char 86
ccbb : 22                    	db %100010
ccbc : 22                    	db %100010
ccbd : 22                    	db %100010
ccbe : 22                    	db %100010
ccbf : 22                    	db %100010
ccc0 : 14                    	db %010100
AS65 Assembler for R6502 [1.42].                                     Page  100
-------------------------------- bank\bank0.s --------------------------------

ccc1 : 08                    	db %001000
ccc2 : 00                    	db %000000
                             ; char 87
ccc3 : 22                    	db %100010
ccc4 : 22                    	db %100010
ccc5 : 22                    	db %100010
ccc6 : 2a                    	db %101010
ccc7 : 2a                    	db %101010
ccc8 : 36                    	db %110110
ccc9 : 22                    	db %100010
ccca : 00                    	db %000000
                             ; char 88
cccb : 22                    	db %100010
cccc : 22                    	db %100010
cccd : 14                    	db %010100
ccce : 08                    	db %001000
cccf : 14                    	db %010100
ccd0 : 22                    	db %100010
ccd1 : 22                    	db %100010
ccd2 : 00                    	db %000000
                             ; char 89
ccd3 : 22                    	db %100010
ccd4 : 22                    	db %100010
ccd5 : 14                    	db %010100
ccd6 : 08                    	db %001000
ccd7 : 08                    	db %001000
ccd8 : 08                    	db %001000
ccd9 : 08                    	db %001000
ccda : 00                    	db %000000
                             ; char 90
ccdb : 3e                    	db %111110
ccdc : 02                    	db %000010
ccdd : 04                    	db %000100
ccde : 08                    	db %001000
ccdf : 10                    	db %010000
cce0 : 20                    	db %100000
cce1 : 3e                    	db %111110
cce2 : 00                    	db %000000
                             ; char 91
cce3 : 1c                    	db %011100
cce4 : 10                    	db %010000
cce5 : 10                    	db %010000
cce6 : 10                    	db %010000
cce7 : 10                    	db %010000
cce8 : 10                    	db %010000
cce9 : 1c                    	db %011100
ccea : 00                    	db %000000
                             ; char 92
cceb : 00                    	db %000000
ccec : 20                    	db %100000
cced : 10                    	db %010000
ccee : 08                    	db %001000
ccef : 04                    	db %000100
ccf0 : 02                    	db %000010
ccf1 : 00                    	db %000000
ccf2 : 00                    	db %000000
                             ; char 93
ccf3 : 1c                    	db %011100
ccf4 : 04                    	db %000100
ccf5 : 04                    	db %000100
ccf6 : 04                    	db %000100
ccf7 : 04                    	db %000100
AS65 Assembler for R6502 [1.42].                                     Page  101
-------------------------------- bank\bank0.s --------------------------------

ccf8 : 04                    	db %000100
ccf9 : 1c                    	db %011100
ccfa : 00                    	db %000000
                             ; char 94
ccfb : 08                    	db %001000
ccfc : 1c                    	db %011100
ccfd : 3e                    	db %111110
ccfe : 08                    	db %001000
ccff : 08                    	db %001000
cd00 : 08                    	db %001000
cd01 : 08                    	db %001000
cd02 : 00                    	db %000000
                             ; char 95
cd03 : 00                    	db %000000
cd04 : 00                    	db %000000
cd05 : 00                    	db %000000
cd06 : 00                    	db %000000
cd07 : 00                    	db %000000
cd08 : 00                    	db %000000
cd09 : 3e                    	db %111110
cd0a : 00                    	db %000000
                             ; char 96
cd0b : 0e                    	db %001110
cd0c : 10                    	db %010000
cd0d : 10                    	db %010000
cd0e : 3c                    	db %111100
cd0f : 10                    	db %010000
cd10 : 10                    	db %010000
cd11 : 3e                    	db %111110
cd12 : 00                    	db %000000
                             ; char 97
cd13 : 00                    	db %000000
cd14 : 00                    	db %000000
cd15 : 1c                    	db %011100
cd16 : 02                    	db %000010
cd17 : 1e                    	db %011110
cd18 : 22                    	db %100010
cd19 : 1e                    	db %011110
cd1a : 00                    	db %000000
                             ; char 98
cd1b : 20                    	db %100000
cd1c : 20                    	db %100000
cd1d : 3c                    	db %111100
cd1e : 22                    	db %100010
cd1f : 22                    	db %100010
cd20 : 22                    	db %100010
cd21 : 3c                    	db %111100
cd22 : 00                    	db %000000
                             ; char 99
cd23 : 00                    	db %000000
cd24 : 00                    	db %000000
cd25 : 1e                    	db %011110
cd26 : 20                    	db %100000
cd27 : 20                    	db %100000
cd28 : 20                    	db %100000
cd29 : 1e                    	db %011110
cd2a : 00                    	db %000000
                             ; char 100
cd2b : 02                    	db %000010
cd2c : 02                    	db %000010
cd2d : 1e                    	db %011110
cd2e : 22                    	db %100010
AS65 Assembler for R6502 [1.42].                                     Page  102
-------------------------------- bank\bank0.s --------------------------------

cd2f : 22                    	db %100010
cd30 : 22                    	db %100010
cd31 : 1e                    	db %011110
cd32 : 00                    	db %000000
                             ; char 101
cd33 : 00                    	db %000000
cd34 : 00                    	db %000000
cd35 : 1c                    	db %011100
cd36 : 22                    	db %100010
cd37 : 3e                    	db %111110
cd38 : 20                    	db %100000
cd39 : 1e                    	db %011110
cd3a : 00                    	db %000000
                             ; char 102
cd3b : 0c                    	db %001100
cd3c : 12                    	db %010010
cd3d : 10                    	db %010000
cd3e : 3c                    	db %111100
cd3f : 10                    	db %010000
cd40 : 10                    	db %010000
cd41 : 10                    	db %010000
cd42 : 00                    	db %000000
                             ; char 103
cd43 : 00                    	db %000000
cd44 : 00                    	db %000000
cd45 : 1c                    	db %011100
cd46 : 22                    	db %100010
cd47 : 22                    	db %100010
cd48 : 1e                    	db %011110
cd49 : 02                    	db %000010
cd4a : 1c                    	db %011100
                             ; char 104
cd4b : 20                    	db %100000
cd4c : 20                    	db %100000
cd4d : 3c                    	db %111100
cd4e : 22                    	db %100010
cd4f : 22                    	db %100010
cd50 : 22                    	db %100010
cd51 : 22                    	db %100010
cd52 : 00                    	db %000000
                             ; char 105
cd53 : 08                    	db %001000
cd54 : 00                    	db %000000
cd55 : 18                    	db %011000
cd56 : 08                    	db %001000
cd57 : 08                    	db %001000
cd58 : 08                    	db %001000
cd59 : 1c                    	db %011100
cd5a : 00                    	db %000000
                             ; char 106
cd5b : 04                    	db %000100
cd5c : 00                    	db %000000
cd5d : 0c                    	db %001100
cd5e : 04                    	db %000100
cd5f : 04                    	db %000100
cd60 : 04                    	db %000100
cd61 : 24                    	db %100100
cd62 : 18                    	db %011000
                             ; char 107
cd63 : 20                    	db %100000
cd64 : 20                    	db %100000
cd65 : 22                    	db %100010
AS65 Assembler for R6502 [1.42].                                     Page  103
-------------------------------- bank\bank0.s --------------------------------

cd66 : 24                    	db %100100
cd67 : 38                    	db %111000
cd68 : 24                    	db %100100
cd69 : 22                    	db %100010
cd6a : 00                    	db %000000
                             ; char 108
cd6b : 18                    	db %011000
cd6c : 08                    	db %001000
cd6d : 08                    	db %001000
cd6e : 08                    	db %001000
cd6f : 08                    	db %001000
cd70 : 08                    	db %001000
cd71 : 1c                    	db %011100
cd72 : 00                    	db %000000
                             ; char 109
cd73 : 00                    	db %000000
cd74 : 00                    	db %000000
cd75 : 36                    	db %110110
cd76 : 2a                    	db %101010
cd77 : 2a                    	db %101010
cd78 : 2a                    	db %101010
cd79 : 22                    	db %100010
cd7a : 00                    	db %000000
                             ; char 110
cd7b : 00                    	db %000000
cd7c : 00                    	db %000000
cd7d : 3c                    	db %111100
cd7e : 22                    	db %100010
cd7f : 22                    	db %100010
cd80 : 22                    	db %100010
cd81 : 22                    	db %100010
cd82 : 00                    	db %000000
                             ; char 111
cd83 : 00                    	db %000000
cd84 : 00                    	db %000000
cd85 : 1c                    	db %011100
cd86 : 22                    	db %100010
cd87 : 22                    	db %100010
cd88 : 22                    	db %100010
cd89 : 1c                    	db %011100
cd8a : 00                    	db %000000
                             ; char 112
cd8b : 00                    	db %000000
cd8c : 00                    	db %000000
cd8d : 3c                    	db %111100
cd8e : 22                    	db %100010
cd8f : 22                    	db %100010
cd90 : 3c                    	db %111100
cd91 : 20                    	db %100000
cd92 : 20                    	db %100000
                             ; char 113
cd93 : 00                    	db %000000
cd94 : 00                    	db %000000
cd95 : 1e                    	db %011110
cd96 : 22                    	db %100010
cd97 : 22                    	db %100010
cd98 : 1e                    	db %011110
cd99 : 02                    	db %000010
cd9a : 02                    	db %000010
                             ; char 114
cd9b : 00                    	db %000000
cd9c : 00                    	db %000000
AS65 Assembler for R6502 [1.42].                                     Page  104
-------------------------------- bank\bank0.s --------------------------------

cd9d : 2e                    	db %101110
cd9e : 30                    	db %110000
cd9f : 20                    	db %100000
cda0 : 20                    	db %100000
cda1 : 20                    	db %100000
cda2 : 00                    	db %000000
                             ; char 115
cda3 : 00                    	db %000000
cda4 : 00                    	db %000000
cda5 : 1e                    	db %011110
cda6 : 20                    	db %100000
cda7 : 1c                    	db %011100
cda8 : 02                    	db %000010
cda9 : 3c                    	db %111100
cdaa : 00                    	db %000000
                             ; char 116
cdab : 10                    	db %010000
cdac : 10                    	db %010000
cdad : 3c                    	db %111100
cdae : 10                    	db %010000
cdaf : 10                    	db %010000
cdb0 : 12                    	db %010010
cdb1 : 0c                    	db %001100
cdb2 : 00                    	db %000000
                             ; char 117
cdb3 : 00                    	db %000000
cdb4 : 00                    	db %000000
cdb5 : 22                    	db %100010
cdb6 : 22                    	db %100010
cdb7 : 22                    	db %100010
cdb8 : 26                    	db %100110
cdb9 : 1a                    	db %011010
cdba : 00                    	db %000000
                             ; char 118
cdbb : 00                    	db %000000
cdbc : 00                    	db %000000
cdbd : 22                    	db %100010
cdbe : 22                    	db %100010
cdbf : 22                    	db %100010
cdc0 : 14                    	db %010100
cdc1 : 08                    	db %001000
cdc2 : 00                    	db %000000
                             ; char 119
cdc3 : 00                    	db %000000
cdc4 : 00                    	db %000000
cdc5 : 22                    	db %100010
cdc6 : 22                    	db %100010
cdc7 : 2a                    	db %101010
cdc8 : 2a                    	db %101010
cdc9 : 36                    	db %110110
cdca : 00                    	db %000000
                             ; char 120
cdcb : 00                    	db %000000
cdcc : 00                    	db %000000
cdcd : 22                    	db %100010
cdce : 14                    	db %010100
cdcf : 08                    	db %001000
cdd0 : 14                    	db %010100
cdd1 : 22                    	db %100010
cdd2 : 00                    	db %000000
                             ; char 121
cdd3 : 00                    	db %000000
AS65 Assembler for R6502 [1.42].                                     Page  105
-------------------------------- bank\bank0.s --------------------------------

cdd4 : 00                    	db %000000
cdd5 : 22                    	db %100010
cdd6 : 22                    	db %100010
cdd7 : 22                    	db %100010
cdd8 : 1e                    	db %011110
cdd9 : 02                    	db %000010
cdda : 1c                    	db %011100
                             ; char 122
cddb : 00                    	db %000000
cddc : 00                    	db %000000
cddd : 3e                    	db %111110
cdde : 04                    	db %000100
cddf : 08                    	db %001000
cde0 : 10                    	db %010000
cde1 : 3e                    	db %111110
cde2 : 00                    	db %000000
                             ; char 123
cde3 : 0e                    	db %001110
cde4 : 18                    	db %011000
cde5 : 18                    	db %011000
cde6 : 30                    	db %110000
cde7 : 18                    	db %011000
cde8 : 18                    	db %011000
cde9 : 0e                    	db %001110
cdea : 00                    	db %000000
                             ; char 124
cdeb : 08                    	db %001000
cdec : 08                    	db %001000
cded : 08                    	db %001000
cdee : 08                    	db %001000
cdef : 08                    	db %001000
cdf0 : 08                    	db %001000
cdf1 : 08                    	db %001000
cdf2 : 00                    	db %000000
                             ; char 125
cdf3 : 38                    	db %111000
cdf4 : 0c                    	db %001100
cdf5 : 0c                    	db %001100
cdf6 : 06                    	db %000110
cdf7 : 0c                    	db %001100
cdf8 : 0c                    	db %001100
cdf9 : 38                    	db %111000
cdfa : 00                    	db %000000
                             ; char 126
cdfb : 00                    	db %000000
cdfc : 00                    	db %000000
cdfd : 10                    	db %010000
cdfe : 2a                    	db %101010
cdff : 04                    	db %000100
ce00 : 00                    	db %000000
ce01 : 00                    	db %000000
ce02 : 00                    	db %000000
                             ; char 127
ce03 : 2a                    	db %101010
ce04 : 15                    	db %010101
ce05 : 2a                    	db %101010
ce06 : 15                    	db %010101
ce07 : 2a                    	db %101010
ce08 : 15                    	db %010101
ce09 : 2a                    	db %101010
ce0a : 15                    	db %010101
                             	
AS65 Assembler for R6502 [1.42].                                     Page  106
-------------------------------- bank\bank0.s --------------------------------

                             	
                             
                             ;****************************************
                             ;* vdp_init_font
                             ;* Initialise fonts from ROM
                             ;* Input : None
                             ;* Output : None
                             ;* Regs affected : All
                             ;****************************************
ce0b :                       gr_init_font
                             	; Get char base from vdp structure
ce0b : a614             [ 3] 	ldx gr_scrngeom+gr_char
ce0d : 8634             [ 3] 	stx tmp_blo
ce0f : a615             [ 3] 	ldx gr_scrngeom+gr_char+1
ce11 : e8               [ 2] 	inx						; ASCII patterns start 1 page later
ce12 : 8635             [ 3] 	stx tmp_bhi
                             
ce14 : a90b             [ 2] 	lda #lo(vdp_font)		; Low byte of fonts source
ce16 : 8536             [ 3] 	sta tmp_clo
ce18 : a9cb             [ 2] 	lda #hi(vdp_font)		; High byte of fonts source
ce1a : 8537             [ 3] 	sta tmp_chi
ce1c : a203             [ 2] 	ldx #3					; Copy 3 pages
ce1e : 4c21ce           [ 3] 	jmp gr_copy_mem
                             
                             
                             ;****************************************
                             ;* vdp_copy_mem
                             ;* Copy memory pages at a time
                             ;* Input :	clo/hi	=	source
                             ;*			blo/hi	=	dest
                             ;*			X		=	pages to copy
                             ;* Output : None
                             ;* Regs affected : All
                             ;****************************************
ce21 :                       gr_copy_mem
ce21 : a000             [ 2] 	ldy #0					; byte within page
ce23 : a536             [ 3] 	lda tmp_clo				; Low byte of source
ce25 : 8532             [ 3] 	sta tmp_alo
ce27 : a537             [ 3] 	lda tmp_chi				; High byte of source
ce29 : 8533             [ 3] 	sta tmp_ahi
ce2b :                       gr_copy_byte
ce2b : 98               [ 2] 	tya
ce2c : b132             [ 5] 	lda (tmp_alo),y			; Get byte from font table
ce2e : 9134             [ 5] 	sta (tmp_blo),y			; Put it to the memory
ce30 : c8               [ 2] 	iny
ce31 : d0f8             [ 3] 	bne gr_copy_byte		; keep going for 1 page
ce33 : e633             [ 5] 	inc tmp_ahi				; only need to increment high byt
ce35 : e635             [ 5] 	inc tmp_bhi				; source and destination ptr
ce37 : ca               [ 2] 	dex						; page counter
ce38 : d0f1             [ 3] 	bne gr_copy_byte		; keep going for X pages
ce3a : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* gr_init
                             ;* First initialisation of screen
                             ;****************************************
ce3b :                       gr_init
ce3b : a210             [ 2] 	ldx #VDP_FLASH			; Default cursor flash rate
ce3d : 860b             [ 3] 	stx vdp_curtim
ce3f : 860c             [ 3] 	stx vdp_curcnt
ce41 : a200             [ 2] 	ldx #0
AS65 Assembler for R6502 [1.42].                                     Page  107
-------------------------------- bank\bank0.s --------------------------------

ce43 : 860e             [ 3] 	stx vdp_curstat
                             
                             	; Hard reset initial geom values (X=0)
ce45 : 206cce           [ 6] 	jsr gr_init_geom
                             
                             	; Copy font from ROM to char base
ce48 : 200bce           [ 6] 	jsr gr_init_font
                             
                             	; Go in to hires mode to generate tables
ce4b : 20c2ce           [ 6] 	jsr gr_init_hires
ce4e : 20fbce           [ 6] 	jsr gr_init_hires_tables
                             
                             	; But start in text mode
ce51 : 4ca9ce           [ 3] 	jmp gr_init_screen_txt
                             
                             
                             ;****************************************
                             ;* gr_check_font_copy
                             ;* check font needs to be copied from
                             ;* current location to another
                             ;* A=high byte of page aligned font addr
                             ;* that the font needs to be at
                             ;****************************************
ce54 :                       gr_check_font_copy
                             	; Compare with current high byte
ce54 : c515             [ 3] 	cmp gr_scrngeom+gr_char+1
ce56 : f013             [ 3] 	beq gr_check_font_copy_done
                             	; save A as high byte of destination
ce58 : 8535             [ 3] 	sta tmp_blo+1
                             	; destination low is 0
ce5a : a900             [ 2] 	lda #0
ce5c : 8534             [ 3] 	sta tmp_blo
                             
                             	; Get source from current vdp structure
ce5e : a515             [ 3] 	lda gr_scrngeom+gr_char+1
ce60 : 8537             [ 3] 	sta tmp_clo+1
ce62 : a514             [ 3] 	lda gr_scrngeom+gr_char
ce64 : 8536             [ 3] 	sta tmp_clo
                             
                             	; Copy all 8 pages of font (std + alt) data
ce66 : a208             [ 2] 	ldx #8
ce68 : 2021ce           [ 6] 	jsr gr_copy_mem
ce6b :                       gr_check_font_copy_done
ce6b :                       gr_init_geom_done
ce6b : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* gr_init_geom
                             ;* initialise geometry entries from X
                             ;* position from base until -1
                             ;****************************************
ce6c :                       gr_init_geom
                             	; Which geom entry to init = Y
ce6c : bc7bce           [ 4] 	ldy gr_scrngeom_base,x
ce6f : 30fa             [ 3] 	bmi gr_init_geom_done		; Just somewhere with an 
                             	; skip to data and put in A
ce71 : e8               [ 2] 	inx
ce72 : bd7bce           [ 4] 	lda gr_scrngeom_base,x
                             	; save it in Y
ce75 : 991100           [ 5] 	sta gr_scrngeom,y
                             	; next entry
AS65 Assembler for R6502 [1.42].                                     Page  108
-------------------------------- bank\bank0.s --------------------------------

ce78 : e8               [ 2] 	inx
ce79 : d0f1             [ 3] 	bne gr_init_geom	; Always
                             	; Hope we don't get here - will crash!
                             
                             ; Geometry initialisation tables
ce7b :                       gr_scrngeom_base
ce7b : 1200                  	db gr_ink, 0
ce7d : 1316                  	db gr_paper, 16+6
ce7f : 1402                  	db gr_margin, 2
                             	; Not terminated by -1 : continues in to _txt va
                             ;* Geometry for text/lores
ce81 :                       gr_scrngeom_text
ce81 : 0000                  	db gr_mode, 0
                             
ce83 : 0300                  	db gr_char,   lo(TEXTCHAR)
ce85 : 04b4                  	db gr_char+1, hi(TEXTCHAR)
                             
ce87 : 0580                  	db gr_text_start,   lo(TEXTSCRN)
ce89 : 06bb                  	db gr_text_start+1, hi(TEXTSCRN)
                             
ce8b : 0828                  	db gr_text_w, 40
ce8d : 091c                  	db gr_text_h, 28
ce8f : ff                    	db -1
                             ;* Geometry for hires
ce90 :                       gr_scrngeom_hires
ce90 : 0001                  	db gr_mode, 1
                             
ce92 : 0100                  	db gr_hi_start,   lo(HISCRN)
ce94 : 02a0                  	db gr_hi_start+1, hi(HISCRN)
ce96 : 0300                  	db gr_char,   lo(HICHAR)
ce98 : 0498                  	db gr_char+1, hi(HICHAR)
                             
ce9a : 0568                  	db gr_text_start,   lo(HITEXT)
ce9c : 06bf                  	db gr_text_start+1, hi(HITEXT)
                             
ce9e : 1000                  	db gr_hires_x, 0
cea0 : 1100                  	db gr_hires_y, 0
                             
                             	; Only need to initialise text height, width is 
cea2 : 0903                  	db gr_text_h, 3
                             
cea4 : 0e01                  	db gr_pixmode, 1
cea6 : 0f06                  	db gr_pitch, 6
cea8 : ff                    	db -1
                             
                             
                             
                             ;****************************************
                             ;* gr_init_screen_txt
                             ;* initialise the screen in text mode
                             ;****************************************
cea9 :                       gr_init_screen_txt
cea9 : e60d             [ 5] 	inc vdp_curoff
                             
                             	; Check if font copy needed to 0xb400
ceab : a9b4             [ 2] 	lda #hi(TEXTCHAR)
cead : 2054ce           [ 6] 	jsr gr_check_font_copy
                             
                             	; Initialise geom for text
ceb0 : a206             [ 2] 	ldx #gr_scrngeom_text-gr_scrngeom_base
ceb2 : 206cce           [ 6] 	jsr gr_init_geom
                             
AS65 Assembler for R6502 [1.42].                                     Page  109
-------------------------------- bank\bank0.s --------------------------------

ceb5 : 200cd4           [ 6] 	jsr gr_spr_init					; SW Sprites are reset
                             
ceb8 : a920             [ 2] 	lda #' '						; Blank is SPACE
ceba : 8510             [ 3] 	sta vdp_blank
cebc : 203fcf           [ 6] 	jsr gr_cls
                             
cebf : c60d             [ 5] 	dec vdp_curoff
                             
cec1 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* gr_init_hires
                             ;* Input : X = Colour table fill value
                             ;* initialise the screen in hires mode
                             ;****************************************
cec2 :                       gr_init_hires
cec2 : e60d             [ 5] 	inc vdp_curoff
                             	; Check if font copy needed to 0x9800
cec4 : a998             [ 2] 	lda #hi(HICHAR)
cec6 : 2054ce           [ 6] 	jsr gr_check_font_copy
                             
                             	; Initialise geom for hires
cec9 : a215             [ 2] 	ldx #gr_scrngeom_hires-gr_scrngeom_base
cecb : 206cce           [ 6] 	jsr gr_init_geom
                             
cece : a920             [ 2] 	lda #' '						; Blank is SPACE
ced0 : 8510             [ 3] 	sta vdp_blank
ced2 : 203fcf           [ 6] 	jsr gr_cls
                             
                             	; Zero out hires area 0xa000 for 8000 (0x1f40) b
ced5 : a900             [ 2] 	lda #lo(HISCRN)
ced7 : 8532             [ 3] 	sta tmp_alo
ced9 : a9a0             [ 2] 	lda #hi(HISCRN)
cedb : 8533             [ 3] 	sta tmp_ahi
cedd : a940             [ 2] 	lda #0x40						; Set bit 6
cedf : a000             [ 2] 	ldy #0
cee1 : a200             [ 2] 	ldx #0
cee3 :                       vdp_fill_vram_loop
cee3 : 9132             [ 5] 	sta (tmp_alo),y
cee5 : c8               [ 2] 	iny
cee6 : d003             [ 3] 	bne vdp_fill_vram_noinc
cee8 : e633             [ 5] 	inc tmp_ahi
ceea : e8               [ 2] 	inx
ceeb :                       vdp_fill_vram_noinc
ceeb : e01f             [ 2] 	cpx #hi(0x1f40)			; Reached page count?
ceed : d0f4             [ 3] 	bne vdp_fill_vram_loop
ceef : c040             [ 2] 	cpy #lo(0x1f40)			; Reached byte in page?
cef1 : d0f0             [ 3] 	bne vdp_fill_vram_loop
                             
                             	; Set hires attribute in the magic location
cef3 : a91e             [ 2] 	lda #30			; Hires attribute
cef5 : 8ddfbf           [ 4] 	sta 0xbfdf		; Last pos of screen memory
                             
cef8 : c60d             [ 5] 	dec vdp_curoff
cefa : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* gr_init_hires_tables
                             ;* Generate the hires tables
                             ;* Do this whilst in hires mode
                             ;****************************************
cefb :                       gr_init_hires_tables
AS65 Assembler for R6502 [1.42].                                     Page  110
-------------------------------- bank\bank0.s --------------------------------

                             	; Initialise address pointer to start of high re
cefb : a900             [ 2] 	lda #lo(HISCRN)
cefd : 8532             [ 3] 	sta tmp_alo
ceff : a9a0             [ 2] 	lda #hi(HISCRN)
cf01 : 8533             [ 3] 	sta tmp_ahi
                             	; Starting from row zero, do 200 rows
cf03 : a000             [ 2] 	ldy #0
cf05 :                       gr_init_tab_row
                             	; Save low and high bytes of screen address in t
cf05 : a532             [ 3] 	lda tmp_alo
cf07 : 99009c           [ 5] 	sta hires_row_low,y
cf0a : a533             [ 3] 	lda tmp_ahi
cf0c : 99c89c           [ 5] 	sta hires_row_hi,y
                             	; add 40 ready for next row
cf0f : 18               [ 2] 	clc
cf10 : a532             [ 3] 	lda tmp_alo
cf12 : 6928             [ 2] 	adc #40
cf14 : 8532             [ 3] 	sta tmp_alo
                             	_bcc 2
                             
cf18 : e633             [ 5] 	inc tmp_ahi
                             	; Max 200 rows
cf1a : c8               [ 2] 	iny
cf1b : c0c8             [ 2] 	cpy #200
cf1d : d0e6             [ 3] 	bne gr_init_tab_row
                             	; From column 0, do 240 columns
                             	; Mask starts at 0x20, when shifts to 0 then
                             	; the column increments
cf1f : a920             [ 2] 	lda #0x20
cf21 : 8534             [ 3] 	sta tmp_blo			; Pixel mask
cf23 : a200             [ 2] 	ldx #0				; Pixel column
cf25 : a000             [ 2] 	ldy #0				; Byte column
cf27 :                       gr_init_tab_col
                             	; Save current mask and column
cf27 : a534             [ 3] 	lda tmp_blo
cf29 : 9d809e           [ 5] 	sta hires_mask,x
cf2c : 98               [ 2] 	tya
cf2d : 9d909d           [ 5] 	sta hires_col,x
                             	; shift mask, if zero then increment col and res
cf30 : 4634             [ 5] 	lsr tmp_blo
cf32 : d005             [ 3] 	bne gr_init_tab_col_skip
cf34 : a920             [ 2] 	lda #0x20
cf36 : 8534             [ 3] 	sta tmp_blo
cf38 : c8               [ 2] 	iny
cf39 :                       gr_init_tab_col_skip
cf39 : e8               [ 2] 	inx
cf3a : e0f0             [ 2] 	cpx #240
cf3c : d0e9             [ 3] 	bne gr_init_tab_col
cf3e : 60               [ 6] 	rts
                             
                             
                             
                             ;****************************************
                             ;* gr_cls
                             ;* Clear the text screen
                             ;****************************************
cf3f :                       gr_cls
cf3f : e60d             [ 5] 	inc vdp_curoff
                             	; Set screen address for text mode
cf41 : a516             [ 3] 	lda gr_scrngeom+gr_text_start
cf43 : 8526             [ 3] 	sta gr_scrngeom+gr_geom_tmp
cf45 : a517             [ 3] 	lda gr_scrngeom+gr_text_start+1
AS65 Assembler for R6502 [1.42].                                     Page  111
-------------------------------- bank\bank0.s --------------------------------

cf47 : 8527             [ 3] 	sta gr_scrngeom+gr_geom_tmp+1
                             
cf49 : a61a             [ 3] 	ldx gr_scrngeom+gr_text_h		; Count of rows to cl
                             
                             	; X and Y count bytes to fill
cf4b :                       gr_cls_row
cf4b : a000             [ 2] 	ldy #0							; Count of columns
cf4d : a525             [ 3] 	lda gr_scrngeom+gr_margin		; Is there a margin?
cf4f : f00a             [ 3] 	beq gr_cls_skip_marg
cf51 : a524             [ 3] 	lda gr_scrngeom+gr_paper		; Set Paper
cf53 : 9126             [ 5] 	sta (gr_scrngeom+gr_geom_tmp),y
cf55 : c8               [ 2] 	iny
cf56 : a523             [ 3] 	lda gr_scrngeom+gr_ink			; Set Ink
cf58 : 9126             [ 5] 	sta (gr_scrngeom+gr_geom_tmp),y
cf5a : c8               [ 2] 	iny
cf5b :                       gr_cls_skip_marg
cf5b : a510             [ 3] 	lda vdp_blank
cf5d : 850f             [ 3] 	sta vdp_curval					; Under cursor is also blank
cf5f :                       gr_cls_col
cf5f : 9126             [ 5] 	sta (gr_scrngeom+gr_geom_tmp),y
cf61 : c8               [ 2] 	iny
cf62 : c419             [ 3] 	cpy gr_scrngeom+gr_text_w		; Done all columns?
cf64 : d0f9             [ 3] 	bne gr_cls_col
                             	; Update pointer
cf66 : 18               [ 2] 	clc
cf67 : a526             [ 3] 	lda gr_scrngeom+gr_geom_tmp
cf69 : 6519             [ 3] 	adc gr_scrngeom+gr_text_w
cf6b : 8526             [ 3] 	sta gr_scrngeom+gr_geom_tmp
                             	_bcc 2
                             
cf6f : e627             [ 5] 	inc gr_scrngeom+gr_geom_tmp+1
cf71 : ca               [ 2] 	dex								; 1 row done
cf72 : d0d7             [ 3] 	bne gr_cls_row					; Done all rows?
                             
                             	; set cursror position to top left
cf74 : a510             [ 3] 	lda vdp_blank
cf76 : 850f             [ 3] 	sta vdp_curval
cf78 : a625             [ 3] 	ldx gr_scrngeom+gr_margin
cf7a : a000             [ 2] 	ldy #0
cf7c : 38               [ 2] 	sec								; Init mode
cf7d : 20adcf           [ 6] 	jsr gr_set_cur_init
                             
cf80 : c60d             [ 5] 	dec vdp_curoff
                             
cf82 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* gr_getXY_base
                             ;* Get base screen address using Y coord only
                             ;* Input : X = y coord
                             ;* Output :	gr_geom_tmp updated with base
                             ;* Regs affected : A
                             ;****************************************
cf83 :                       gr_getXY_base
                             	; Find y offset using **X register**
cf83 : 18               [ 2] 	clc
cf84 : bdd4d3           [ 4] 	lda gr_offset_40lo,x
cf87 : 6516             [ 3] 	adc gr_scrngeom+gr_text_start
cf89 : 8526             [ 3] 	sta gr_scrngeom+gr_geom_tmp
cf8b : bdf0d3           [ 4] 	lda gr_offset_40hi,x
cf8e : 6517             [ 3] 	adc gr_scrngeom+gr_text_start+1
cf90 : 8527             [ 3] 	sta gr_scrngeom+gr_geom_tmp+1
AS65 Assembler for R6502 [1.42].                                     Page  112
-------------------------------- bank\bank0.s --------------------------------

                             
                             	; A = high byte of base address
cf92 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* gr_plot
                             ;* Write a byte in the screen pos
                             ;* Input :	Y,X = coord, A = Byte to put
                             ;*			X = Y COORDINATE
                             ;*			Y = X COORDINATE!!
                             ;* Output : None
                             ;* Regs affected : All
                             ;****************************************
cf93 :                       gr_plot
cf93 : 48               [ 3] 	pha					; Save byte to put
cf94 : 2083cf           [ 6] 	jsr gr_getXY_base	; base addre
cf97 : 68               [ 4] 	pla					; Get byte to put
cf98 : 9126             [ 5] 	sta (gr_scrngeom+gr_geom_tmp),y
cf9a : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* gr_put
                             ;* Write a byte in the current cursor position
                             ;* Input : A = Byte to put
                             ;* Output : None
                             ;* Regs affected : All
                             ;****************************************
cf9b :                       gr_put
cf9b : e60d             [ 5] 	inc vdp_curoff		; Disable cusror
cf9d : 850f             [ 3] 	sta vdp_curval		; Update cursor value
                             	; Base address plus X offset
cf9f : a41b             [ 3] 	ldy gr_scrngeom+gr_cur_x
cfa1 : 911d             [ 5] 	sta (gr_scrngeom+gr_cur_ptr),y
cfa3 : c60d             [ 5] 	dec vdp_curoff		; Allow cursor flashing
cfa5 : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* gr_get
                             ;* Get the byte in the screen pos
                             ;* Input : Y,X = coord (**Y = X coordinate!!)
                             ;* Output : X,Y = address, A = peeked byte
                             ;* Regs affected : All
                             ;****************************************
cfa6 :                       gr_get
cfa6 : 2083cf           [ 6] 	jsr gr_getXY_base	; Base address
cfa9 : b126             [ 5] 	lda (gr_scrngeom+gr_geom_tmp),y
cfab : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* gr_set_cur
                             ;* Set the cursor position
                             ;* Input : X, Y = position
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
cfac :                       gr_set_cur
cfac : 18               [ 2] 	clc
cfad :                       gr_set_cur_init
cfad : e60d             [ 5] 	inc vdp_curoff				; Disable cursor
                             
cfaf : b00e             [ 3] 	bcs gr_set_cur_skip			; Skip restore if C=1
AS65 Assembler for R6502 [1.42].                                     Page  113
-------------------------------- bank\bank0.s --------------------------------

cfb1 : 8632             [ 3] 	stx tmp_alo
cfb3 : 8433             [ 3] 	sty tmp_ahi
                             	; First restore what is under the cursor
                             	; in case cursor is ON
cfb5 : 8426             [ 3] 	sty gr_scrngeom+gr_geom_tmp
cfb7 : a50f             [ 3] 	lda vdp_curval
cfb9 : a41b             [ 3] 	ldy gr_scrngeom+gr_cur_x
cfbb : 911d             [ 5] 	sta (gr_scrngeom+gr_cur_ptr),y
cfbd : a426             [ 3] 	ldy gr_scrngeom+gr_geom_tmp
cfbf :                       gr_set_cur_skip
                             	; Save new cursor position
cfbf : 861b             [ 3] 	stx gr_scrngeom+gr_cur_x
cfc1 : 841c             [ 3] 	sty gr_scrngeom+gr_cur_y
                             
                             	; Now calculate the new cursor vram address
cfc3 : a61c             [ 3] 	ldx gr_scrngeom+gr_cur_y
cfc5 : 2083cf           [ 6] 	jsr gr_getXY_base
                             	; Update pointer in tmp, A already has high byte
cfc8 : 851e             [ 3] 	sta gr_scrngeom+gr_cur_ptr+1
cfca : a526             [ 3] 	lda gr_scrngeom+gr_geom_tmp
cfcc : 851d             [ 3] 	sta gr_scrngeom+gr_cur_ptr
                             	; Read screen at this position, offset with X co
cfce : a41b             [ 3] 	ldy gr_scrngeom+gr_cur_x
cfd0 : b11d             [ 5] 	lda (gr_scrngeom+gr_cur_ptr),y
cfd2 : 850f             [ 3] 	sta vdp_curval
                             	; Reset cursor so it's visible
cfd4 : a900             [ 2] 	lda #0
cfd6 : 850e             [ 3] 	sta vdp_curstat
cfd8 : a901             [ 2] 	lda #1
cfda : 850c             [ 3] 	sta vdp_curcnt
                             
cfdc : c60d             [ 5] 	dec vdp_curoff
                             
cfde : 60               [ 6] 	rts
                             
                             
                             
                             ;****************************************
                             ;* gr_scroll_up
                             ;* Scroll screen one line up
                             ;****************************************
cfdf :                       gr_scroll_up
cfdf : e60d             [ 5] 	inc vdp_curoff
                             
                             	; Set source in a and dest in b
                             	; b is first line, source is second
cfe1 : 18               [ 2] 	clc
cfe2 : a516             [ 3] 	lda gr_scrngeom+gr_text_start
cfe4 : 8534             [ 3] 	sta tmp_blo
cfe6 : 6519             [ 3] 	adc gr_scrngeom+gr_text_w
cfe8 : 8532             [ 3] 	sta tmp_alo
cfea : a517             [ 3] 	lda gr_scrngeom+gr_text_start+1
cfec : 8535             [ 3] 	sta tmp_bhi
cfee : 6900             [ 2] 	adc #0
cff0 : 8533             [ 3] 	sta tmp_ahi
                             
                             	; Restore what was underneath cursor
cff2 : a50f             [ 3] 	lda vdp_curval
cff4 : a41b             [ 3] 	ldy gr_scrngeom+gr_cur_x
cff6 : 911d             [ 5] 	sta (gr_scrngeom+gr_cur_ptr),y
                             
                             	; x = lines to scroll (1 less than screen height
AS65 Assembler for R6502 [1.42].                                     Page  114
-------------------------------- bank\bank0.s --------------------------------

cff8 : a61a             [ 3] 	ldx gr_scrngeom+gr_text_h
cffa : ca               [ 2] 	dex
                             
cffb :                       gr_scroll_cpy_ln
                             	; Start from right hand edge (easier)
cffb : a419             [ 3] 	ldy gr_scrngeom+gr_text_w
cffd : 88               [ 2] 	dey
cffe :                       gr_scroll_char
                             	; get char from source and copy to dest
cffe : b132             [ 5] 	lda (tmp_alo),y
d000 : 9134             [ 5] 	sta (tmp_blo),y
d002 : 88               [ 2] 	dey
d003 : 10f9             [ 4] 	bpl gr_scroll_char
                             
                             	; Update source address
d005 : 18               [ 2] 	clc
d006 : a532             [ 3] 	lda tmp_alo
d008 : 6519             [ 3] 	adc gr_scrngeom+gr_text_w
d00a : 8532             [ 3] 	sta tmp_alo
                             	_bcc 2
                             
d00e : e633             [ 5] 	inc tmp_ahi
                             	; Update destination address
d010 : 18               [ 2] 	clc
d011 : a534             [ 3] 	lda tmp_blo
d013 : 6519             [ 3] 	adc gr_scrngeom+gr_text_w
d015 : 8534             [ 3] 	sta tmp_blo
                             	_bcc 2
                             
d019 : e635             [ 5] 	inc tmp_bhi
                             
                             	; One line complete
d01b : ca               [ 2] 	dex
d01c : d0dd             [ 4] 	bne gr_scroll_cpy_ln
                             
                             	; Source is pointing at last line
                             	; Last line needs filling
d01e : a000             [ 2] 	ldy #0							; Start from left
d020 : a525             [ 3] 	lda gr_scrngeom+gr_margin		; Margin?
d022 : f00a             [ 3] 	beq gr_scroll_marg				; Skip if not
d024 : a524             [ 3] 	lda gr_scrngeom+gr_paper		; Set Paper
d026 : 9126             [ 5] 	sta (gr_scrngeom+gr_geom_tmp),y
d028 : c8               [ 2] 	iny
d029 : a523             [ 3] 	lda gr_scrngeom+gr_ink			; Set Ink
d02b : 9126             [ 5] 	sta (gr_scrngeom+gr_geom_tmp),y
d02d : c8               [ 2] 	iny
d02e :                       gr_scroll_marg
                             	; Needs to be filled with blank
d02e : a510             [ 3] 	lda vdp_blank
d030 : 850f             [ 3] 	sta vdp_curval			; Also this is the cursor value
d032 :                       gr_scroll_erase_ln
d032 : 9134             [ 5] 	sta (tmp_blo),y
d034 : c8               [ 2] 	iny
d035 : c419             [ 3] 	cpy gr_scrngeom+gr_text_w
d037 : d0f9             [ 3] 	bne gr_scroll_erase_ln
                             
d039 : c60d             [ 5] 	dec vdp_curoff
                             
d03b : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* gr_new_ln
AS65 Assembler for R6502 [1.42].                                     Page  115
-------------------------------- bank\bank0.s --------------------------------

                             ;* Carry out a new line
                             ;* Input : None
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
d03c :                       gr_new_ln
                             	; X pos is zero, Y needs to increment
d03c : a625             [ 3] 	ldx gr_scrngeom+gr_margin
d03e : a41c             [ 3] 	ldy gr_scrngeom+gr_cur_y
d040 : c8               [ 2] 	iny
d041 : c41a             [ 3] 	cpy gr_scrngeom+gr_text_h
d043 : d00c             [ 3] 	bne gr_nl_skip_nl
                             	; If got here then screen needs to scroll
                             	; Common routine also used by cursor right
d045 :                       gr_scroll_routine
d045 : 88               [ 2] 	dey
d046 : 8a               [ 2] 	txa
d047 : 48               [ 3] 	pha
d048 : 98               [ 2] 	tya
d049 : 48               [ 3] 	pha
d04a : 20dfcf           [ 6] 	jsr gr_scroll_up
d04d : 68               [ 4] 	pla
d04e : a8               [ 2] 	tay
d04f : 68               [ 4] 	pla
d050 : aa               [ 2] 	tax
d051 :                       gr_nl_skip_nl
d051 : 4caccf           [ 3] 	jmp gr_set_cur
                             
                             
                             ;****************************************
                             ;* gr_cur_right
                             ;* Advance cursor position
                             ;* Input : None
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
d054 :                       gr_cur_right
                             	; Load cursor x,y position
d054 : a61b             [ 3] 	ldx gr_scrngeom+gr_cur_x
d056 : a41c             [ 3] 	ldy gr_scrngeom+gr_cur_y
                             
                             	; Move cursor right
d058 : e8               [ 2] 	inx
                             	; Check if reached past edge of line
d059 : e419             [ 3] 	cpx gr_scrngeom+gr_text_w
d05b : d0f4             [ 3] 	bne gr_nl_skip_nl
                             	; If got here then wrap to next line
d05d : a625             [ 3] 	ldx gr_scrngeom+gr_margin
d05f : c8               [ 2] 	iny
d060 : c41a             [ 3] 	cpy gr_scrngeom+gr_text_h
d062 : f0e1             [ 3] 	beq gr_scroll_routine		; Common scroll routine
d064 : d0eb             [ 3] 	bne gr_nl_skip_nl			; Common set cursor
                             
                             ;****************************************
                             ;* gr_cur_left
                             ;* Advance cursor left
                             ;* Input : None
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
d066 :                       gr_cur_left
                             	; Load cursor x,y position, load X last to check
AS65 Assembler for R6502 [1.42].                                     Page  116
-------------------------------- bank\bank0.s --------------------------------

d066 : a41c             [ 3] 	ldy gr_scrngeom+gr_cur_y
d068 : a61b             [ 3] 	ldx gr_scrngeom+gr_cur_x
                             
                             	; Decrement screen pointer
                             	; Move cursor left
d06a : e425             [ 3] 	cpx gr_scrngeom+gr_margin	; Already at left marg
d06c : d007             [ 3] 	bne gr_cur_skip_at_left		; No, then just go left
d06e : c000             [ 2] 	cpy #0						; Else check if can wrap up
d070 : f007             [ 3] 	beq gr_cur_skip_at_tl
d072 : 88               [ 2] 	dey
d073 : a619             [ 3] 	ldx gr_scrngeom+gr_text_w
d075 :                       gr_cur_skip_at_left
d075 : ca               [ 2] 	dex
d076 : 4caccf           [ 3] 	jmp gr_set_cur
                             
d079 :                       gr_cur_skip_at_tl
d079 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* gr_cur_up
                             ;* Advance cursor up
                             ;* Input : None
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
d07a :                       gr_cur_up
                             	; Load cursor x,y position, load Y last to check
d07a : a61b             [ 3] 	ldx gr_scrngeom+gr_cur_x
d07c : a41c             [ 3] 	ldy gr_scrngeom+gr_cur_y
                             	; if y==0 then don't do anything
d07e : f0f9             [ 3] 	beq gr_cur_skip_at_tl	; Just somewhere with an r
d080 : 88               [ 2] 	dey
d081 : 4caccf           [ 3] 	jmp gr_set_cur
                             
                             ;****************************************
                             ;* gr_cur_down
                             ;* Advance cursor down
                             ;* Input : None
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
d084 :                       gr_cur_down
                             	; Load cursor x,y position
d084 : a61b             [ 3] 	ldx gr_scrngeom+gr_cur_x
d086 : a41c             [ 3] 	ldy gr_scrngeom+gr_cur_y
d088 : c8               [ 2] 	iny
                             	; If already at  bottom then don't do anything
d089 : c41a             [ 3] 	cpy gr_scrngeom+gr_text_h			
d08b : f0ec             [ 3] 	beq gr_cur_skip_at_tl				; Just somewhere with a
d08d : 20accf           [ 6] 	jsr gr_set_cur
                             
d090 :                       gr_cur_skip_at_bot
d090 : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* gr_del
                             ;* Action del
                             ;* Input : None
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
AS65 Assembler for R6502 [1.42].                                     Page  117
-------------------------------- bank\bank0.s --------------------------------

d091 :                       gr_del
d091 : 2066d0           [ 6] 	jsr gr_cur_left
d094 : a920             [ 2] 	lda #' '							; Put a space
d096 : 4c9bcf           [ 3] 	jmp gr_put
                             
                             ;****************************************
                             ;* gr_get_key
                             ;* Waits for a key press, C=1 synchronous
                             ;* A = Key code, C=0 means valid code
                             ;****************************************
d099 :                       gr_get_key
                             	; save X,Y but A is ok to trample
d099 : 8a               [ 2] 	txa
d09a : 48               [ 3] 	pha
d09b : 98               [ 2] 	tya
d09c : 48               [ 3] 	pha
d09d :                       gr_get_key_2
d09d : 08               [ 3] 	php
d09e : 2040ca           [ 6] 	jsr kb_get_key
d0a1 : 9006             [ 3] 	bcc gr_key_check_key
d0a3 : 28               [ 4] 	plp									; Get async pref
d0a4 : b0f7             [ 3] 	bcs	gr_get_key_2					; Keep checking if sync
d0a6 : 38               [ 2] 	sec
d0a7 : b019             [ 3] 	bcs gr_key_tidy_up					; Finish if not
d0a9 :                       gr_key_check_key						; Check the key pressed
d0a9 : c901             [ 2] 	cmp #UTF_ACK						; Copy key pressed?
d0ab : d004             [ 3] 	bne gr_key_skip_copy
d0ad : a50f             [ 3] 	lda vdp_curval						; If yes the get char under 
d0af : b00f             [ 3] 	bcs gr_key_got_key					; Always branches (n=1, c
d0b1 :                       gr_key_skip_copy
d0b1 : c914             [ 2] 	cmp #CTRL_CAPS
d0b3 : d00b             [ 3] 	bne gr_key_got_key
d0b5 : a52c             [ 3] 	lda kb_stat							; Toggle caps bit
d0b7 : 4901             [ 2] 	eor #KB_CAPSLK
d0b9 : 852c             [ 3] 	sta kb_stat
d0bb : 28               [ 4] 	plp									; Get back synchronous pref
d0bc : b0df             [ 3] 	bcs gr_get_key_2					; And check again for sync
d0be : 900b             [ 3] 	bcc gr_key_no_key					; Else no key
d0c0 :                       gr_key_got_key
d0c0 : 28               [ 4] 	plp
d0c1 : 18               [ 2] 	clc									; Ensure C=0 for valid key
d0c2 :                       gr_key_tidy_up
                             	; restore X,Y but don't lose A
d0c2 : 8538             [ 3] 	sta tmp_d
d0c4 : 68               [ 4] 	pla
d0c5 : a8               [ 2] 	tay
d0c6 : 68               [ 4] 	pla
d0c7 : aa               [ 2] 	tax
d0c8 : a538             [ 3] 	lda tmp_d
d0ca : 60               [ 6] 	rts
d0cb :                       gr_key_no_key
d0cb : 28               [ 4] 	plp
d0cc : 38               [ 2] 	sec									; Ensure C=1 for invalid key
d0cd : b0f3             [ 3] 	bcs gr_key_tidy_up					; Always branches
                             
                             ;****************************************
                             ;* gr_put_byte
                             ;* Put a byte out
                             ;* Input : A = Byte to put
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
AS65 Assembler for R6502 [1.42].                                     Page  118
-------------------------------- bank\bank0.s --------------------------------

d0cf :                       gr_put_byte
                             	_pushAXY
                             
d0d8 : 20e1d0           [ 6] 	jsr gr_put_byte_low
                             	_pullAXY
                             
d0e0 :                       gr_no_special
d0e0 : 60               [ 6] 	rts
                             
d0e1 :                       gr_put_byte_low
d0e1 : c97f             [ 2] 	cmp #UTF_DEL			; Del key
d0e3 : f004             [ 3] 	beq gr_process_special
d0e5 : c920             [ 2] 	cmp #32					; Special char?
d0e7 : b01b             [ 4] 	bcs gr_printable		; >=32 == carry clear
d0e9 :                       gr_process_special
                             	; Else find special behaviour to do
d0e9 : a2ff             [ 2] 	ldx #-1
d0eb : 8532             [ 3] 	sta tmp_alo
d0ed :                       gr_special_loop
d0ed : e8               [ 2] 	inx
d0ee : bd0ad1           [ 4] 	lda gr_special_ch,x
d0f1 : f0ed             [ 3] 	beq gr_no_special		; Somewhere with an rts!
d0f3 : c532             [ 3] 	cmp tmp_alo
d0f5 : d0f6             [ 3] 	bne gr_special_loop
d0f7 : bd13d1           [ 4] 	lda gr_special_fn_lo,x
d0fa : 8532             [ 3] 	sta tmp_alo
d0fc : bd1bd1           [ 4] 	lda gr_special_fn_hi,x
d0ff : 8533             [ 3] 	sta tmp_ahi
d101 : 6c3200           [ 6] 	jmp (tmp_alo)
                             
                             	;	Normal caracter processing here.
d104 :                       gr_printable
                             	; Place in current position and move right
d104 : 209bcf           [ 6] 	jsr gr_put
d107 : 4c54d0           [ 3] 	jmp gr_cur_right
                             
d10a :                       gr_special_ch
d10a : 0d                    	db UTF_CR
d10b : 7f                    	db UTF_DEL
d10c : 08                    	db CRSR_LEFT
d10d : 09                    	db CRSR_RIGHT
d10e : 0b                    	db CRSR_UP
d10f : 0a                    	db CRSR_DOWN
d110 : 0c                    	db UTF_FF
d111 : 07                    	db UTF_BEL
d112 : 00                    	db 0
                             
d113 :                       gr_special_fn_lo
d113 : 3c                    	db lo(gr_new_ln)
d114 : 91                    	db lo(gr_del)
d115 : 66                    	db lo(gr_cur_left)
d116 : 54                    	db lo(gr_cur_right)
d117 : 7a                    	db lo(gr_cur_up)
d118 : 84                    	db lo(gr_cur_down)
d119 : 3f                    	db lo(gr_cls)
d11a : d6                    	db lo(init_snd)
                             
d11b :                       gr_special_fn_hi
d11b : d0                    	db hi(gr_new_ln)
d11c : d0                    	db hi(gr_del)
d11d : d0                    	db hi(gr_cur_left)
d11e : d0                    	db hi(gr_cur_right)
AS65 Assembler for R6502 [1.42].                                     Page  119
-------------------------------- bank\bank0.s --------------------------------

d11f : d0                    	db hi(gr_cur_up)
d120 : d0                    	db hi(gr_cur_down)
d121 : cf                    	db hi(gr_cls)
d122 : d5                    	db hi(init_snd)
                             
                             ; Special command to print to the screen
                             ; Y,A=Message, zero terminated
d123 :                       gr_print_msg
d123 : 8449             [ 3] 	sty num_tmp
d125 : 854a             [ 3] 	sta num_tmp+1
d127 : a000             [ 2] 	ldy #0
d129 :                       gr_print_msg_loop
d129 : b149             [ 5] 	lda (num_tmp),y
d12b : f006             [ 3] 	beq gr_print_msg_done
d12d : 20cfd0           [ 6] 	jsr gr_put_byte
d130 : c8               [ 2] 	iny
d131 : d0f6             [ 3] 	bne gr_print_msg_loop
d133 :                       gr_print_msg_done
d133 : a54a             [ 3] 	lda num_tmp+1
d135 : a449             [ 3] 	ldy num_tmp
d137 : 60               [ 6] 	rts
                             
                             ;******* HIRES STUFF *****
                             
                             
                             ;****************************************
                             ;* gr_hcode
                             ;* Plot bytecode at hires X,Y coordinates with co
                             ;* Input : X,Y = coord, A = Char code
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
d138 :                       gr_hcode
d138 : 48               [ 3] 	pha
                             	; Set up destination position tmpalo,hi and Y
d139 : 20f4d1           [ 6] 	jsr gr_point_setup
d13c : a208             [ 2] 	ldx #8				; Always do 8 rows like a character
d13e :                       gr_hcode_loop
d13e : 68               [ 4] 	pla 				; Get the code to place
d13f : 48               [ 3] 	pha					; Need to save it back
d140 : 9126             [ 5] 	sta (gr_scrngeom+gr_geom_tmp),y		; Store it in d
d142 : 18               [ 2] 	clc
d143 : a526             [ 3] 	lda gr_scrngeom+gr_geom_tmp			; Update base poin
d145 : 6519             [ 3] 	adc gr_scrngeom+gr_text_w
d147 : 8526             [ 3] 	sta gr_scrngeom+gr_geom_tmp
                             	_bcc 2
                             
d14b : e627             [ 5] 	inc gr_scrngeom+gr_geom_tmp+1
d14d : ca               [ 2] 	dex
d14e : d0ee             [ 3] 	bne gr_hcode_loop
d150 : 68               [ 4] 	pla
d151 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* gr_hchar
                             ;* Plot character to hires X,Y coordinates with c
                             ;* Input : X,Y = coord, A = Char code
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
d152 :                       gr_hchar
                             	; If char code < 32 then plot attribute
AS65 Assembler for R6502 [1.42].                                     Page  120
-------------------------------- bank\bank0.s --------------------------------

d152 : c91f             [ 2] 	cmp #31
d154 : 90e2             [ 3] 	bcc gr_hcode
                             	; Multiply char code by 8
                             	; and add to char font base
                             	; tmp_clo contains base address
d156 : 0a               [ 2] 	asl a
d157 : 2637             [ 5] 	rol tmp_chi
d159 : 0a               [ 2] 	asl a
d15a : 2637             [ 5] 	rol tmp_chi
d15c : 0a               [ 2] 	asl a
d15d : 2637             [ 5] 	rol tmp_chi
d15f : 18               [ 2] 	clc
d160 : 6514             [ 3] 	adc gr_scrngeom+gr_char
d162 : 8536             [ 3] 	sta tmp_clo
d164 : a537             [ 3] 	lda tmp_chi
d166 : 2907             [ 2] 	and #7
d168 : 6515             [ 3] 	adc gr_scrngeom+gr_char+1
d16a : 8537             [ 3] 	sta tmp_chi
                             
                             	; Set up destination position
d16c : 20f4d1           [ 6] 	jsr gr_point_setup
                             	; tmp needs to contains address including column
d16f : 18               [ 2] 	clc
d170 : 98               [ 2] 	tya
d171 : 6526             [ 3] 	adc gr_scrngeom+gr_geom_tmp
d173 : 8526             [ 3] 	sta gr_scrngeom+gr_geom_tmp
                             	_bcc 2
                             
d177 : e627             [ 5] 	inc gr_scrngeom+gr_geom_tmp+1
                             
d179 : a528             [ 3] 	lda gr_scrngeom+gr_geom_tmp2		; Get the mask
d17b : a207             [ 2] 	ldx #7
d17d :                       gr_hchar_mask							; Calculate how many shifts t
d17d : ca               [ 2] 	dex
d17e : 4a               [ 2] 	lsr a
d17f : d0fc             [ 3] 	bne gr_hchar_mask
d181 : 8628             [ 3] 	stx gr_scrngeom+gr_geom_tmp2		; number between 1
                             
                             	; copy font bytes and shift the required number 
                             	; go from bottom to top as data gets stored on t
d183 : a007             [ 2] 	ldy #7
d185 :                       gr_hchar_getfont
d185 : b136             [ 5] 	lda (tmp_clo),y
d187 : 853d             [ 3] 	sta ztmp_24
d189 : a900             [ 2] 	lda #0
d18b : 853e             [ 3] 	sta ztmp_24+1
                             
                             	; shift the right number of times
d18d : a628             [ 3] 	ldx gr_scrngeom+gr_geom_tmp2
d18f :                       gr_hchar_rot1bit
d18f : ca               [ 2] 	dex
d190 : f00d             [ 3] 	beq gr_hchar_rot1bit_nx
d192 : 463d             [ 5] 	lsr ztmp_24					; Rotate left hand side
d194 : a53e             [ 3] 	lda ztmp_24+1				; Rotate right hand side
d196 : 9002             [ 3] 	bcc gr_hchar_rot1bit_bcc
d198 : 0940             [ 2] 	ora #0x40					; account for 6 bits per byte
d19a :                       gr_hchar_rot1bit_bcc
d19a : 4a               [ 2] 	lsr a
d19b : 853e             [ 3] 	sta ztmp_24+1
d19d : 10f0             [ 3] 	bpl gr_hchar_rot1bit		; Always as lsr sets N=0
d19f :                       gr_hchar_rot1bit_nx
d19f : a53e             [ 3] 	lda ztmp_24+1				; Get RHS
AS65 Assembler for R6502 [1.42].                                     Page  121
-------------------------------- bank\bank0.s --------------------------------

d1a1 : 48               [ 3] 	pha							; Push RHS on to stack
d1a2 : a53d             [ 3] 	lda ztmp_24					; Get LHS
d1a4 : 48               [ 3] 	pha							; Push that too - LH gets pulled first
d1a5 : 88               [ 2] 	dey							; Bottom to to lines
d1a6 : 10dd             [ 3] 	bpl gr_hchar_getfont
                             
                             	; Now copy shift source to destination, accounti
d1a8 : a208             [ 2] 	ldx #8
d1aa :                       gr_hchar_copyline
d1aa : a41f             [ 3] 	ldy gr_scrngeom+gr_pixmode	; Mode determines how
d1ac : f022             [ 3] 	beq gr_hchar_copyline_erase
d1ae : 3010             [ 3] 	bmi gr_hchar_copyline_eor
                             
                             	; Mode = ~Z : OR
d1b0 : a000             [ 2] 	ldy #0						; Get lh side source
d1b2 : 68               [ 4] 	pla
d1b3 : 1126             [ 5] 	ora (gr_scrngeom+gr_geom_tmp),y
d1b5 : 9126             [ 5] 	sta (gr_scrngeom+gr_geom_tmp),y
d1b7 : c8               [ 2] 	iny							; Get rh side source
d1b8 : 68               [ 4] 	pla
d1b9 : 1126             [ 5] 	ora (gr_scrngeom+gr_geom_tmp),y
d1bb : 9126             [ 5] 	sta (gr_scrngeom+gr_geom_tmp),y
d1bd : 4ce5d1           [ 3] 	jmp gr_hchar_copyline_nx
d1c0 :                       gr_hchar_copyline_eor
                             	; Mode = N : EOR
d1c0 : a000             [ 2] 	ldy #0						; Get lh side source
d1c2 : 68               [ 4] 	pla
d1c3 : 5126             [ 5] 	eor (gr_scrngeom+gr_geom_tmp),y
d1c5 : 9126             [ 5] 	sta (gr_scrngeom+gr_geom_tmp),y
d1c7 : c8               [ 2] 	iny							; Get rh side source
d1c8 : 68               [ 4] 	pla
d1c9 : 5126             [ 5] 	eor (gr_scrngeom+gr_geom_tmp),y
d1cb : 9126             [ 5] 	sta (gr_scrngeom+gr_geom_tmp),y
d1cd : 4ce5d1           [ 3] 	jmp gr_hchar_copyline_nx
d1d0 :                       gr_hchar_copyline_erase
                             	; Mode = Z : erase
d1d0 : a000             [ 2] 	ldy #0						; Get lh side source
d1d2 : 68               [ 4] 	pla
d1d3 : 853d             [ 3] 	sta ztmp_24
d1d5 : 1126             [ 5] 	ora (gr_scrngeom+gr_geom_tmp),y
d1d7 : 453d             [ 3] 	eor ztmp_24
d1d9 : 9126             [ 5] 	sta (gr_scrngeom+gr_geom_tmp),y
d1db : c8               [ 2] 	iny							; Get rh side source
d1dc : 68               [ 4] 	pla
d1dd : 853d             [ 3] 	sta ztmp_24
d1df : 1126             [ 5] 	ora (gr_scrngeom+gr_geom_tmp),y
d1e1 : 453d             [ 3] 	eor ztmp_24
d1e3 : 9126             [ 5] 	sta (gr_scrngeom+gr_geom_tmp),y
d1e5 :                       gr_hchar_copyline_nx
d1e5 : 18               [ 2] 	clc							; Next address
d1e6 : a526             [ 3] 	lda gr_scrngeom+gr_geom_tmp
d1e8 : 6928             [ 2] 	adc #40
d1ea : 8526             [ 3] 	sta gr_scrngeom+gr_geom_tmp
                             	_bcc 2
                             
d1ee : e627             [ 5] 	inc gr_scrngeom+gr_geom_tmp+1
d1f0 : ca               [ 2] 	dex
d1f1 : d0b7             [ 3] 	bne gr_hchar_copyline
d1f3 : 60               [ 6] 	rts							; Done after 8 lines
                             
                             ;****************************************
                             ;* gr_point_setup
AS65 Assembler for R6502 [1.42].                                     Page  122
-------------------------------- bank\bank0.s --------------------------------

                             ;* Calculate information about a pixel location
                             ;* Input : X,Y = coord
                             ;* Output : None
                             ;* Regs affected :
                             ;* gr_geom_tmp contains the row base address
                             ;* gr_geom_tmp2 contains the mask
                             ;* A contains the mask
                             ;* X untouched
                             ;* Y contains column offet from base address
                             ;****************************************
d1f4 :                       gr_point_setup
                             	; Get row address
d1f4 : b9009c           [ 4] 	lda hires_row_low,y
d1f7 : 8526             [ 3] 	sta gr_scrngeom+gr_geom_tmp
d1f9 : b9c89c           [ 4] 	lda hires_row_hi,y
d1fc : 8527             [ 3] 	sta gr_scrngeom+gr_geom_tmp+1
                             	; Get the pixel mask
d1fe : bd809e           [ 4] 	lda hires_mask,x
d201 : 8528             [ 3] 	sta gr_scrngeom+gr_geom_tmp2
                             	; Get the column offset to Y
d203 : bc909d           [ 4] 	ldy hires_col,x
d206 : 60               [ 6] 	rts
                             
d207 :                       gr_set_hires_cur
d207 : 8621             [ 3] 	stx gr_scrngeom+gr_hires_x
d209 : 8422             [ 3] 	sty gr_scrngeom+gr_hires_y
d20b : 60               [ 6] 	rts
                             
                             ;* Get pixel value at X,Y in to A
d20c :                       gr_pixel
d20c : 20f4d1           [ 6] 	jsr gr_point_setup				; Set up mask and addresse
d20f : 3126             [ 5] 	and (gr_scrngeom+gr_geom_tmp),y	; And with scree
d211 : 60               [ 6] 	rts
                             
                             ;* Plot a point based on X,Y coordinates
d212 :                       gr_point
d212 : e0f0             [ 2] 	cpx #240						; Check bounds
d214 : b02c             [ 3] 	bcs gr_point_done
d216 : c0c8             [ 2] 	cpy #200
d218 : b028             [ 3] 	bcs gr_point_done
                             
                             	;** FOR SPEED COPYING THE POINT SETUP ROUTINE **
                             	;** OBVS MAKE SURE THIS REFLECTS ANY POINT SETUP
                             	; Get row address
d21a : b9009c           [ 4] 	lda hires_row_low,y
d21d : 8526             [ 3] 	sta gr_scrngeom+gr_geom_tmp
d21f : b9c89c           [ 4] 	lda hires_row_hi,y
d222 : 8527             [ 3] 	sta gr_scrngeom+gr_geom_tmp+1
                             	; Get the pixel mask
d224 : bd809e           [ 4] 	lda hires_mask,x
d227 : 8528             [ 3] 	sta gr_scrngeom+gr_geom_tmp2
                             	; Get the column offset to Y
d229 : bc909d           [ 4] 	ldy hires_col,x
                             
                             ;* Plot a point based on gr_geom_tmp base, Y offs
d22c : b126             [ 5] 	lda (gr_scrngeom+gr_geom_tmp),y	; Get screen byt
d22e : c920             [ 2] 	cmp #32							; If less than 32 (i.e. an attribu
d230 : b002             [ 3] 	bcs gr_point_skip_attr
d232 : a940             [ 2] 	lda #64							; then make it a normal cell (else
d234 :                       gr_point_skip_attr
d234 : a61f             [ 3] 	ldx gr_scrngeom+gr_pixmode		; Look at the mode
d236 : 3006             [ 3] 	bmi gr_point_eor				; If eor mode then go and wr
AS65 Assembler for R6502 [1.42].                                     Page  123
-------------------------------- bank\bank0.s --------------------------------

d238 : 0528             [ 3] 	ora gr_scrngeom+gr_geom_tmp2	; Or with MASK
d23a : e000             [ 2] 	cpx #0							; But if zero mode then eor
d23c : d002             [ 3] 	bne gr_point_write
d23e :                       gr_point_eor
d23e : 4528             [ 3] 	eor gr_scrngeom+gr_geom_tmp2	; EOR with MASK
d240 :                       gr_point_write
d240 : 9126             [ 5] 	sta (gr_scrngeom+gr_geom_tmp),y
d242 :                       gr_point_done
d242 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* gr_circle
                             ;* Draw a circle centre x0,y0, radius r
                             ;* Input :	num_a   = x0
                             ;*			num_a+1 = y0
                             ;*			num_a+2 = r
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
d243 :                       gr_circle
                             ; Local definitions of temp space to make
                             ; the rest of the code easier to read
003d =                       grc_x0 	= (num_a)
003e =                       grc_y0 	= (num_a+1)
003f =                       grc_r 	= (num_a+2)
0040 =                       grc_x 	= (num_a+3)
0042 =                       grc_y	= (num_b+1)
0043 =                       grc_d	= (num_b+2)
                             
                             	;x = radius
d243 : a53f             [ 3] 	lda grc_r
d245 : 8540             [ 3] 	sta grc_x
                             	;decision = 1 - x
d247 : a900             [ 2] 	lda #0
                             	;y = 0
d249 : 8542             [ 3] 	sta grc_y
d24b : 18               [ 2] 	clc			; A=0 so CLC subtracts 1 :-)
d24c : e540             [ 3] 	sbc grc_x
d24e : 8543             [ 3] 	sta grc_d
d250 :                       gr_circle_plot
                             	;while(x >= y)
d250 : a540             [ 3] 	lda grc_x
d252 : c542             [ 3] 	cmp grc_y
d254 : 902a             [ 3] 	bcc gr_circle_done
                             	;plot 8 points on current x,y
d256 : 2081d2           [ 6] 	jsr gr_circle_points
                             	;y++
d259 : e642             [ 5] 	inc grc_y
                             	;if d<=0
d25b : a543             [ 3] 	lda grc_d
d25d : f014             [ 3] 	beq gr_circle_d_lte0
d25f : 3012             [ 3] 	bmi gr_circle_d_lte0
                             	;else
                             	;x--
d261 : c640             [ 5] 	dec grc_x
                             	;decision += 2 * (y - x) + 1
d263 : a542             [ 3] 	lda grc_y
d265 : 38               [ 2] 	sec
d266 : e540             [ 3] 	sbc grc_x
d268 : 0a               [ 2] 	asl a
d269 : 18               [ 2] 	clc
d26a : 6901             [ 2] 	adc #1
AS65 Assembler for R6502 [1.42].                                     Page  124
-------------------------------- bank\bank0.s --------------------------------

d26c : 6543             [ 3] 	adc grc_d
d26e : 8543             [ 3] 	sta grc_d
d270 : 4c50d2           [ 3] 	jmp gr_circle_plot
d273 :                       gr_circle_d_lte0
                             	;decision += 2 * y + 1
d273 : a542             [ 3] 	lda grc_y
d275 : 0a               [ 2] 	asl a
d276 : 18               [ 2] 	clc
d277 : 6901             [ 2] 	adc #1
d279 : 6543             [ 3] 	adc grc_d
d27b : 8543             [ 3] 	sta grc_d
d27d : 4c50d2           [ 3] 	jmp gr_circle_plot
d280 :                       gr_circle_done
d280 : 60               [ 6] 	rts
d281 :                       gr_circle_points
                             ; Local names of temp storage
                             ; to make code easier to read
                             	;DrawPixel( x + x0,  yh + y0);
d281 : a540             [ 3] 	lda grc_x
d283 : 18               [ 2] 	clc
d284 : 653d             [ 3] 	adc grc_x0
d286 : aa               [ 2] 	tax
d287 : a542             [ 3] 	lda grc_y
d289 : 18               [ 2] 	clc
d28a : 653e             [ 3] 	adc grc_y0
d28c : a8               [ 2] 	tay
d28d : 2012d2           [ 6] 	jsr gr_point
                             	;DrawPixel( y + x0,  xh + y0);
d290 : a542             [ 3] 	lda grc_y
d292 : 18               [ 2] 	clc
d293 : 653d             [ 3] 	adc grc_x0
d295 : aa               [ 2] 	tax
d296 : a540             [ 3] 	lda grc_x
d298 : 18               [ 2] 	clc
d299 : 653e             [ 3] 	adc grc_y0
d29b : a8               [ 2] 	tay
d29c : 2012d2           [ 6] 	jsr gr_point
                             	;DrawPixel(-x + x0,  yh + y0);
d29f : a53d             [ 3] 	lda grc_x0
d2a1 : 38               [ 2] 	sec
d2a2 : e540             [ 3] 	sbc grc_x
d2a4 : aa               [ 2] 	tax
d2a5 : a542             [ 3] 	lda grc_y
d2a7 : 18               [ 2] 	clc
d2a8 : 653e             [ 3] 	adc grc_y0
d2aa : a8               [ 2] 	tay
d2ab : 2012d2           [ 6] 	jsr gr_point
                             	;DrawPixel(-y + x0,  xh + y0);
d2ae : a53d             [ 3] 	lda grc_x0
d2b0 : 38               [ 2] 	sec
d2b1 : e542             [ 3] 	sbc grc_y
d2b3 : aa               [ 2] 	tax
d2b4 : a540             [ 3] 	lda grc_x
d2b6 : 18               [ 2] 	clc
d2b7 : 653e             [ 3] 	adc grc_y0
d2b9 : a8               [ 2] 	tay
d2ba : 2012d2           [ 6] 	jsr gr_point
                             	;DrawPixel(-x + x0, -yh + y0);
d2bd : a53d             [ 3] 	lda grc_x0
d2bf : 38               [ 2] 	sec
d2c0 : e540             [ 3] 	sbc grc_x
d2c2 : aa               [ 2] 	tax
AS65 Assembler for R6502 [1.42].                                     Page  125
-------------------------------- bank\bank0.s --------------------------------

d2c3 : a53e             [ 3] 	lda grc_y0
d2c5 : 38               [ 2] 	sec
d2c6 : e542             [ 3] 	sbc grc_y
d2c8 : a8               [ 2] 	tay
d2c9 : 2012d2           [ 6] 	jsr gr_point
                             	;DrawPixel(-y + x0, -xh + y0);
d2cc : a53d             [ 3] 	lda grc_x0
d2ce : 38               [ 2] 	sec
d2cf : e542             [ 3] 	sbc grc_y
d2d1 : aa               [ 2] 	tax
d2d2 : a53e             [ 3] 	lda grc_y0
d2d4 : 38               [ 2] 	sec
d2d5 : e540             [ 3] 	sbc grc_x
d2d7 : a8               [ 2] 	tay
d2d8 : 2012d2           [ 6] 	jsr gr_point
                             	;DrawPixel( x + x0, -yh + y0);
d2db : a540             [ 3] 	lda grc_x
d2dd : 18               [ 2] 	clc
d2de : 653d             [ 3] 	adc grc_x0
d2e0 : aa               [ 2] 	tax
d2e1 : a53e             [ 3] 	lda grc_y0
d2e3 : 38               [ 2] 	sec
d2e4 : e542             [ 3] 	sbc grc_y
d2e6 : a8               [ 2] 	tay
d2e7 : 2012d2           [ 6] 	jsr gr_point
                             	;DrawPixel( y + x0, -xh + y0);
d2ea : a542             [ 3] 	lda grc_y
d2ec : 18               [ 2] 	clc
d2ed : 653d             [ 3] 	adc grc_x0
d2ef : aa               [ 2] 	tax
d2f0 : a53e             [ 3] 	lda grc_y0
d2f2 : 38               [ 2] 	sec
d2f3 : e540             [ 3] 	sbc grc_x
d2f5 : a8               [ 2] 	tay
d2f6 : 4c12d2           [ 3] 	jmp gr_point
                             
                             
                             
                             ;****************************************
                             ;* gr_line
                             ;* Draw a line from x0,y0 -> x1,y1
                             ;* Input :	num_a   = x0
                             ;*			num_a+1 = y0
                             ;*			num_a+2 = x1
                             ;*			num_a+3 = y1
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
d2f9 :                       gr_line
                             
                             ; Local definitions of temp space to make
                             ; the rest of the code easier to read
003d =                       grl_x0 	= (num_a)
003e =                       grl_y0 	= (num_a+1)
003f =                       grl_x1 	= (num_a+2)
0040 =                       grl_y1 	= (num_a+3)
0041 =                       grl_dx	= (ztmp_24+4)
0042 =                       grl_dy	= (ztmp_24+5)
0043 =                       grl_xyyx= (ztmp_24+6)
0044 =                       grl_2dx	= (ztmp_24+7)			; Word
0046 =                       grl_2dy	= (ztmp_24+9)			; Word
0048 =                       grl_2dxy= (ztmp_24+11)			; Word
AS65 Assembler for R6502 [1.42].                                     Page  126
-------------------------------- bank\bank0.s --------------------------------

004a =                       grl_sinx= (ztmp_24+13)
004b =                       grl_p	= (ztmp_24+14)			; Word
004d =                       grl_siny= (ztmp_24+16)
                             
                             	; Start from hires cursor position
                             	; New cursor pos = end of line pos
d2f9 : a521             [ 3] 	lda gr_scrngeom+gr_hires_x
d2fb : 853d             [ 3] 	sta grl_x0
d2fd : a522             [ 3] 	lda gr_scrngeom+gr_hires_y
d2ff : 853e             [ 3] 	sta grl_y0
d301 : a63f             [ 3] 	ldx grl_x1
d303 : a440             [ 3] 	ldy grl_y1
d305 : 2007d2           [ 6] 	jsr gr_set_hires_cur
                             	
d308 : a900             [ 2] 	lda #0
d30a : 8543             [ 3] 	sta grl_xyyx				; Assume normal xy axis
                             
                             	; check if abs(dy)>abs(dx) if so need to swap xy
                             	; num_b = abs(x), num_b+1 = abs(dy)
d30c : 38               [ 2] 	sec
d30d : a53f             [ 3] 	lda grl_x1
d30f : e53d             [ 3] 	sbc grl_x0
d311 : b004             [ 3] 	bcs gr_line_skip_dx_neg
d313 : 49ff             [ 2] 	eor #0xff
d315 : 6901             [ 2] 	adc #1
d317 :                       gr_line_skip_dx_neg
d317 : 8541             [ 3] 	sta grl_dx
d319 : 38               [ 2] 	sec
d31a : a540             [ 3] 	lda grl_y1
d31c : e53e             [ 3] 	sbc grl_y0
d31e : b004             [ 3] 	bcs gr_line_skip_dy_neg
d320 : 49ff             [ 2] 	eor #0xff
d322 : 6901             [ 2] 	adc #1
d324 :                       gr_line_skip_dy_neg
d324 : 8542             [ 3] 	sta grl_dy
d326 : c541             [ 3] 	cmp grl_dx
d328 : 901a             [ 3] 	bcc gr_line_skip_xy_swap
                             	; swap xy axes and also dx and dy
d32a : a53d             [ 3] 	lda grl_x0					; swap x0 and y0
d32c : a63e             [ 3] 	ldx grl_y0
d32e : 853e             [ 3] 	sta grl_y0
d330 : 863d             [ 3] 	stx grl_x0
d332 : a53f             [ 3] 	lda grl_x1					; swap x1 and y1
d334 : a640             [ 3] 	ldx grl_y1
d336 : 8540             [ 3] 	sta grl_y1
d338 : 863f             [ 3] 	stx grl_x1
d33a : a541             [ 3] 	lda grl_dx					; swap dy and dx
d33c : a642             [ 3] 	ldx grl_dy
d33e : 8542             [ 3] 	sta grl_dy
d340 : 8641             [ 3] 	stx grl_dx
d342 : e643             [ 5] 	inc grl_xyyx				; set flag to Not Z to know abou
                             
d344 :                       gr_line_skip_xy_swap
                             	; assume going from left to right and top to bot
d344 : a901             [ 2] 	lda #1
d346 : a0ff             [ 2] 	ldy #255					; -1
d348 : 854a             [ 3] 	sta grl_sinx
d34a : 854d             [ 3] 	sta grl_siny
                             
                             	; check going right to left
d34c : a53d             [ 3] 	lda grl_x0
d34e : c53f             [ 3] 	cmp grl_x1
AS65 Assembler for R6502 [1.42].                                     Page  127
-------------------------------- bank\bank0.s --------------------------------

d350 : 9002             [ 3] 	bcc gr_line_skip_left
d352 : 844a             [ 3] 	sty grl_sinx				; make -1
d354 :                       gr_line_skip_left
                             	; check going bottom to top
d354 : a53e             [ 3] 	lda grl_y0
d356 : c540             [ 3] 	cmp grl_y1
d358 : 9002             [ 3] 	bcc gr_line_skip_y_up
d35a : 844d             [ 3] 	sty grl_siny				; make -1
                             
d35c :                       gr_line_skip_y_up
d35c : a541             [ 3] 	lda grl_dx
d35e : 0a               [ 2] 	asl a
d35f : 8544             [ 3] 	sta grl_2dx					; 2*dx (word)
d361 : a900             [ 2] 	lda #0
d363 : 8545             [ 3] 	sta grl_2dx+1
d365 : 2645             [ 5] 	rol grl_2dx+1
                             
d367 : a542             [ 3] 	lda grl_dy
d369 : 0a               [ 2] 	asl a
d36a : 8546             [ 3] 	sta grl_2dy					; 2*dy (word)
d36c : a900             [ 2] 	lda #0
d36e : 8547             [ 3] 	sta grl_2dy+1
d370 : 2647             [ 5] 	rol grl_2dy+1
                             
                             ;    p=2*dy-dx;					; p (word)
d372 : 38               [ 2] 	sec
d373 : a546             [ 3] 	lda grl_2dy
d375 : e541             [ 3] 	sbc grl_dx
d377 : 854b             [ 3] 	sta grl_p
d379 : a547             [ 3] 	lda grl_2dy+1
d37b : e900             [ 2] 	sbc #0
d37d : 854c             [ 3] 	sta grl_p+1
                             
                             ;   2*(dy-dx)					; num_tmp+2 = 2*(dy-dx)
d37f : 38               [ 2] 	sec
d380 : a546             [ 3] 	lda grl_2dy
d382 : e544             [ 3] 	sbc grl_2dx
d384 : 8548             [ 3] 	sta grl_2dxy
d386 : a547             [ 3] 	lda grl_2dy+1
d388 : e545             [ 3] 	sbc grl_2dx+1
d38a : 8549             [ 3] 	sta grl_2dxy+1
                             
d38c :                       gr_line_pixel
d38c : a63d             [ 3] 	ldx grl_x0
d38e : a43e             [ 3] 	ldy grl_y0
d390 : a543             [ 3] 	lda grl_xyyx				; Swapped?
d392 : f004             [ 3] 	beq gr_line_yx_skip
d394 : a63e             [ 3] 	ldx grl_y0
d396 : a43d             [ 3] 	ldy grl_x0
d398 :                       gr_line_yx_skip
d398 : 2012d2           [ 6] 	jsr gr_point				; Plot point x,y
                             
d39b : a53d             [ 3] 	lda grl_x0					; Check if done
d39d : c53f             [ 3] 	cmp grl_x1
d39f : f032             [ 3] 	beq gr_line_done
                             
                             	; Increment x always
d3a1 : 18               [ 2] 	clc
d3a2 : a53d             [ 3] 	lda grl_x0
d3a4 : 654a             [ 3] 	adc grl_sinx
d3a6 : 853d             [ 3] 	sta grl_x0
                             
AS65 Assembler for R6502 [1.42].                                     Page  128
-------------------------------- bank\bank0.s --------------------------------

                             	; check sign of p
d3a8 : a54c             [ 3] 	lda grl_p+1
d3aa : 3017             [ 3] 	bmi gr_line_neg_p
                             
                             	; if p >=0
                             
                             	; y=y+increment
d3ac : 18               [ 2] 	clc
d3ad : a53e             [ 3] 	lda grl_y0
d3af : 654d             [ 3] 	adc grl_siny
d3b1 : 853e             [ 3] 	sta grl_y0
                             
                             	; p=p+2*dy-2*dx
                             	_addZPWord grl_p,grl_2dxy
                             
d3c0 : 4c8cd3           [ 3] 	jmp gr_line_pixel
                             
d3c3 :                       gr_line_neg_p
                             	; if p < 0
                             	; p=p+2*dy
                             	_addZPWord grl_p,grl_2dy
                             
                             
d3d0 : 4c8cd3           [ 3] 	jmp gr_line_pixel
d3d3 :                       gr_line_done
d3d3 : 60               [ 6] 	rts
                             
                             
                             ; Line drawing pseudo code
                             ;    while(x<x1)
                             ;    {
                             ;        putpixel(x,y);
                             ;        if(p>=0)
                             ;        {
                             ;            y=y+1;
                             ;            p=p+2*dy-2*dx;
                             ;        }
                             ;        else
                             ;        {
                             ;            p=p+2*dy;
                             ;        }
                             ;        x=x+1;
                             ;    }
                             
                             
                             ;* These tables are to speed up calculating the
                             ;* offset for plot commands
d3d4 :                       gr_offset_40lo
d3d4 : 00285078a0            	db lo(000*40), lo(001*40), lo(002*40), lo(003*40
d3d9 : c8f0184068            	db lo(005*40), lo(006*40), lo(007*40), lo(008*40
d3de : 90b8e00830            	db lo(010*40), lo(011*40), lo(012*40), lo(013*40
d3e3 : 5880a8d0f8            	db lo(015*40), lo(016*40), lo(017*40), lo(018*40
d3e8 : 20487098c0            	db lo(020*40), lo(021*40), lo(022*40), lo(023*40
d3ed : e81038                	db lo(025*40), lo(026*40), lo(027*40)
d3f0 :                       gr_offset_40hi
d3f0 : 0000000000            	db hi(000*40), hi(001*40), hi(002*40), hi(003*40
d3f5 : 0000010101            	db hi(005*40), hi(006*40), hi(007*40), hi(008*40
d3fa : 0101010202            	db hi(010*40), hi(011*40), hi(012*40), hi(013*40
d3ff : 0202020202            	db hi(015*40), hi(016*40), hi(017*40), hi(018*40
d404 : 0303030303            	db hi(020*40), hi(021*40), hi(022*40), hi(023*40
d409 : 030404                	db hi(025*40), hi(026*40), hi(027*40)
                             
AS65 Assembler for R6502 [1.42].                                     Page  129
-------------------------------- bank\bank0.s --------------------------------

                             
                             ;* Character based sprites for text mode only
d40c :                       mod_sz_sprite_s
                             ;* Initialisation
d40c :                       gr_spr_init
d40c : a21f             [ 2] 	ldx #31							; Start at last sprite
d40e :                       gr_spr_init_loop
d40e : a9ff             [ 2] 	lda #-1							; Put -1 in the x coords
d410 : 9d00b4           [ 5] 	sta spr_curX,x
d413 : 9d20b4           [ 5] 	sta spr_newX,x
d416 : ca               [ 2] 	dex								; Next sprite
d417 : 10f5             [ 3] 	bpl gr_spr_init_loop			; Until all 32 sprites in
d419 : 60               [ 6] 	rts
                             
                             
                             ;* Erase all active sprites
d41a :                       gr_spr_erase
                             	; First restore background from sprites
                             	; that are active and new pos is different from 
d41a : a21f             [ 2] 	ldx #31							; Start at last sprite
d41c :                       gr_spr_erase_loop
d41c : bd00b4           [ 4] 	lda spr_curX,x					; Is sprite active?
d41f : 3007             [ 3] 	bmi gr_spr_erase_next
d421 : a8               [ 2] 	tay								; x pos in to Y
d422 :                       gr_spr_erase_do
d422 : bda0b4           [ 4] 	lda spr_bgnd,x					; Get the background
d425 : 2070d4           [ 6] 	jsr gr_spr_put					; And restore it
d428 :                       gr_spr_erase_next
d428 : ca               [ 2] 	dex
d429 : 10f1             [ 3] 	bpl gr_spr_erase_loop
d42b : 60               [ 6] 	rts
                             
                             ;* Get ready for new position
d42c :                       gr_spr_new
d42c : a21f             [ 2] 	ldx #31							; Start at last sprite
d42e :                       gr_spr_new_loop
d42e : bd60b4           [ 4] 	lda spr_newY,x					; Get new Y
d431 : 9d40b4           [ 5] 	sta spr_curY,x					; Update new->cur Y
d434 : a8               [ 2] 	tay								; Used for address calc.
d435 : bd20b4           [ 4] 	lda spr_newX,x					; Get new X
d438 : 9d00b4           [ 5] 	sta spr_curX,x					; Update new->cur X
d43b : 301d             [ 3] 	bmi gr_spr_new_next				; Is the new position act
d43d : 48               [ 3] 	pha 							; x pos saved for later
                             	; Calculate screen address
                             	; save as part of sprite data and in zp area
d43e : 18               [ 2] 	clc
d43f : b9d4d3           [ 4] 	lda gr_offset_40lo,y
d442 : 6980             [ 2] 	adc #lo(TEXTSCRN)
d444 : 8526             [ 3] 	sta gr_scrngeom+gr_geom_tmp
d446 : 9dc0b4           [ 5] 	sta spr_baseadrl,x
d449 : b9f0d3           [ 4] 	lda gr_offset_40hi,y
d44c : 69bb             [ 2] 	adc #hi(TEXTSCRN)
d44e : 8527             [ 3] 	sta gr_scrngeom+gr_geom_tmp+1
d450 : 9de0b4           [ 5] 	sta spr_baseadrh,x
d453 : 68               [ 4] 	pla								; Get x pos back in to Y reg
d454 : a8               [ 2] 	tay
d455 : b126             [ 5] 	lda (gr_scrngeom+gr_geom_tmp),y	; Get background
d457 : 9da0b4           [ 5] 	sta spr_bgnd,x					; And save this
d45a :                       gr_spr_new_next
d45a : ca               [ 2] 	dex
d45b : 10d1             [ 3] 	bpl gr_spr_new_loop
d45d : 60               [ 6] 	rts
AS65 Assembler for R6502 [1.42].                                     Page  130
-------------------------------- bank\bank0.s --------------------------------

                             
                             
                             ; Draw all active sprites
                             ; Active sprites are always drawn - 0 = highest p
d45e :                       gr_spr_draw
d45e : a21f             [ 2] 	ldx #31							; Start at last sprite
d460 :                       gr_spr_draw_loop
d460 : bd20b4           [ 4] 	lda spr_newX,x					; Is sprite active?
d463 : 3007             [ 3] 	bmi gr_spr_draw_next
d465 : a8               [ 2] 	tay								; X pos in to Y
d466 : bd80b4           [ 4] 	lda spr_chr,x					; Get the sprite char
d469 : 2070d4           [ 6] 	jsr gr_spr_put
d46c :                       gr_spr_draw_next
d46c : ca               [ 2] 	dex
d46d : 10f1             [ 3] 	bpl gr_spr_draw_loop
d46f : 60               [ 6] 	rts
                             
                             
                             ;* Common routine to put A to screen address
                             ;* Used for erase and draw of sprites
                             ;* X=index in to sprite table
                             ;* Y=X offset from screen pointer
d470 :                       gr_spr_put
d470 : 48               [ 3] 	pha
d471 : bdc0b4           [ 4] 	lda spr_baseadrl,x		; Get the screen pointer
d474 : 8526             [ 3] 	sta gr_scrngeom+gr_geom_tmp
d476 : bde0b4           [ 4] 	lda spr_baseadrh,x
d479 : 8527             [ 3] 	sta gr_scrngeom+gr_geom_tmp+1
d47b : 68               [ 4] 	pla								; Get back the char to
d47c : 9126             [ 5] 	sta (gr_scrngeom+gr_geom_tmp),y	; put on to scre
d47e : 60               [ 6] 	rts
                             
                             
                             ;* Update spr A with char X
d47f :                       gr_spr_char
d47f : a8               [ 2] 	tay
d480 : 8a               [ 2] 	txa
d481 : 9980b4           [ 5] 	sta spr_chr,y
d484 : 60               [ 6] 	rts
                             
                             ;* Locate what is at the location of sprite A, re
                             ;* C=1 if sprite it not active
d485 :                       gr_spr_hit
d485 : aa               [ 2] 	tax
d486 : bd00b4           [ 4] 	lda spr_curX,x
d489 : c980             [ 2] 	cmp #0x80						; If A>=0x80 then C=1
d48b : bda0b4           [ 4] 	lda spr_bgnd,x
d48e : 60               [ 6] 	rts
                             
                             ;* Update spr A with coords X,Y
d48f :                       gr_spr_pos
d48f : 8432             [ 3] 	sty tmp_alo
d491 : a8               [ 2] 	tay
d492 : 8a               [ 2] 	txa								; X coord still in X reg
d493 : 9920b4           [ 5] 	sta spr_newX,y
d496 : a532             [ 3] 	lda tmp_alo						; Y coord from temp
d498 : 9960b4           [ 5] 	sta spr_newY,y
d49b : 60               [ 6] 	rts
                             
                             ;* Update all sprite positions from df_tmpptra, d
d49c :                       gr_spr_multi_pos
d49c : a03e             [ 2] 	ldy #62
AS65 Assembler for R6502 [1.42].                                     Page  131
-------------------------------- bank\bank0.s --------------------------------

d49e : a21f             [ 2] 	ldx #31
d4a0 :                       gr_spr_multi_loop
d4a0 : b1a1             [ 5] 	lda (df_tmpptra),y
d4a2 : 9d20b4           [ 5] 	sta spr_newX,x
d4a5 : b1a3             [ 5] 	lda (df_tmpptrb),y
d4a7 : 9d60b4           [ 5] 	sta spr_newY,x
d4aa : 88               [ 2] 	dey
d4ab : 88               [ 2] 	dey
d4ac : ca               [ 2] 	dex
d4ad : 10f1             [ 3] 	bpl gr_spr_multi_loop
d4af : 60               [ 6] 	rts
                             
d4b0 :                       mod_sz_sprite_e
d4b0 :                       mod_sz_graph_e
                             
                             ; Old version of point calculator - in case I nee
                             ;	; Calculate destination address
                             ;	lda #0
                             ;	sta tmp_ahi
                             ;
                             ;	tya				; Row number in A
                             ;	; Multiply 8
                             ;	asl a
                             ;	rol tmp_ahi
                             ;	asl a
                             ;	rol tmp_ahi
                             ;	asl a
                             ;	rol tmp_ahi
                             ;	sta tmp_alo
                             ;
                             ;	; Multiply 32
                             ;	; Use partial result from m8
                             ;	lda tmp_ahi
                             ;	sta tmp_bhi
                             ;	lda tmp_alo
                             ;	; Just two more rotates to get m32
                             ;	asl a
                             ;	rol tmp_bhi
                             ;	asl a
                             ;	rol tmp_bhi
                             ;	sta tmp_blo
                             ;	; Add m8 and m32 for m40
                             ;	clc
                             ;	lda tmp_alo
                             ;	adc tmp_blo
                             ;	sta tmp_alo
                             ;	lda tmp_ahi
                             ;	adc tmp_bhi
                             ;	; Add high byte of screen address
                             ;	adc gr_scrngeom+vdp_scrn+1
                             ;	sta tmp_ahi
                             ;	; Dest offset in tmp_alo
                             ;
                             ;	; pixel x coord in to A
                             ;	; We dvide by 48 doing trial subtracts
                             ;	; This leaves Y with a number 0..5
                             ;	; And A has the remainder 0..47
                             ;	; Use these to look up byte column and mask
                             ;	; We don't do more than 5 trial subtracts
                             ;	; plus the table size is much smaller
                             ;	; Comprimise of space vs speed
                             ;	txa
AS65 Assembler for R6502 [1.42].                                     Page  132
-------------------------------- bank\bank0.s --------------------------------

                             ;	ldy #0				; Start at segment 0
                             ;	sec
                             ;gr_point_d48
                             ;	sbc #48
                             ;	iny
                             ;	bcs gr_point_d48				; Keep going until underflo
                             ;
                             ;	dey								; Adjust segment count
                             ;	adc #48							; Get remainder in A
                             ;	tax								; Put remainder in to X (0..47)
                             ;	lda gr_col_seg,y				; Get the start column of s
                             ;	clc
                             ;	adc gr_col_offset,x				; Add segment offset usi
                             ;	tay								; We have the byte column in Y
                             ;	sty tmp_bhi						; Save in tmp, also still in Y
                             ;	stx tmp_blo						; Save remainder 0..47
                             ;	rts
                             
                             ;gr_point_mask
                             ;	db 0x20,0x10,0x08,0x04,0x02,0x01
                             ;	db 0x20,0x10,0x08,0x04,0x02,0x01
                             ;	db 0x20,0x10,0x08,0x04,0x02,0x01
                             ;	db 0x20,0x10,0x08,0x04,0x02,0x01
                             ;	db 0x20,0x10,0x08,0x04,0x02,0x01
                             ;	db 0x20,0x10,0x08,0x04,0x02,0x01
                             ;	db 0x20,0x10,0x08,0x04,0x02,0x01
                             ;	db 0x20,0x10,0x08,0x04,0x02,0x01
                             ;gr_col_offset
                             ;	db 0,0,0,0,0,0
                             ;	db 1,1,1,1,1,1
                             ;	db 2,2,2,2,2,2
                             ;	db 3,3,3,3,3,3
                             ;	db 4,4,4,4,4,4
                             ;	db 5,5,5,5,5,5
                             ;	db 6,6,6,6,6,6
                             ;	db 7,7,7,7,7,7
                             ;gr_col_seg
                             ;	db 0,8,16,24,32
                             
                             	include "monitor/cmd.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  CMD.S
                             ;*	A really simple monitor that needs to be impro
                             ;*	optimised.  Only has these commands;
                             ;*		dxxxx			Dump memory location xxxx
                             ;*						Press enter for more else stop
                             ;*		sxxxx [yy]		Set memory location xxxx with hex
                             ;*						bytes, respond with next location
                             ;*		q				Quit
                             ;*	Now you see why this needs optimising!
                             ;*
                             ;************************************************
                             
0094 =                       cmd_lo					= df_currdat
0095 =                       cmd_hi					= (df_currdat+1)
AS65 Assembler for R6502 [1.42].                                     Page  133
-------------------------------- bank\bank0.s --------------------------------

                             
                             	; ROM code
                             	code  
                             
d4b0 :                       _mod_sz_cmd_s
                             
d4b0 :                       command_line
                             
d4b0 :                       cmd_ready
                             	_println_low msg_ready
                             
                             
d4b7 : 38               [ 2] 	sec							; Set carry flag = echo characters
d4b8 : 203fc4           [ 6] 	jsr io_read_line			; Get a command line
d4bb : a000             [ 2] 	ldy #0
d4bd : b139             [ 5] 	lda (buf_lo),y
d4bf : c971             [ 2] 	cmp #'q'
d4c1 : d001             [ 3] 	bne cmd_check_cmd
d4c3 : 60               [ 6] 	rts
d4c4 :                       cmd_check_cmd
d4c4 : 20d6d4           [ 6] 	jsr cmd_parse				; Find command and execute
d4c7 : b003             [ 3] 	bcs cmd_error				; Carry set = error condition
d4c9 : 4cb0d4           [ 3] 	jmp cmd_ready
                             
d4cc :                       cmd_error
                             	_println_low msg_errmsg
                             
d4d3 : 4cb0d4           [ 3] 	jmp cmd_ready
                             
                             
                             ;****************************************
                             ;* cmd_parse
                             ;* Parse the command line in the io buffer
                             ;* Regs affected : 
                             ;****************************************
d4d6 :                       cmd_parse
d4d6 : c8               [ 2] 	iny						; Ready for next char
                             	
d4d7 :                       cmd_check_d
d4d7 : c964             [ 2] 	cmp #'d'				; Check for d
d4d9 : f030             [ 4] 	beq cmd_dumpmem
d4db :                       cmd_check_s
d4db : c973             [ 2] 	cmp #'s'				; Check for s
d4dd : f006             [ 3] 	beq cmd_setmem
                             
d4df :                       cmd_not_found
d4df : a901             [ 2] 	lda #CMD_ERR_NOTFOUND
d4e1 : 855d             [ 3] 	sta errno
d4e3 : 38               [ 2] 	sec
d4e4 : 60               [ 6] 	rts
                             	
                             ;****************************************
                             ;* cmd_setmem
                             ;* Set the memory at address AAAA to byte string
                             ;* Input : buflo, bufhi
                             ;* Output : y = start of first parm byte
                             ;*          x = index to routine pointer
                             ;* Regs affected : A
                             ;****************************************
d4e5 :                       cmd_setmem
d4e5 : 209cd5           [ 6] 	jsr cmd_parse_word
d4e8 : b01f             [ 4] 	bcs cmd_setmem_err
AS65 Assembler for R6502 [1.42].                                     Page  134
-------------------------------- bank\bank0.s --------------------------------

d4ea :                       cmd_setmem_byte
d4ea : 2080d5           [ 6] 	jsr cmd_parse_byte
d4ed : b01a             [ 4] 	bcs cmd_setmem_err
d4ef : 2077d5           [ 6] 	jsr cmd_poke				; Poke A in to cmd_lo, hi
d4f2 : 206bd5           [ 6] 	jsr cmd_incmem
d4f5 : 20aed5           [ 6] 	jsr cmd_parse_next_parm		; Try and find another 
d4f8 : 90f0             [ 3] 	bcc cmd_setmem_byte			; Process if found, else f
d4fa : a595             [ 3] 	lda cmd_hi
d4fc : 2070c1           [ 6] 	jsr utilPrintA
d4ff : a594             [ 3] 	lda cmd_lo
d501 : 2070c1           [ 6] 	jsr utilPrintA
d504 : 2068c1           [ 6] 	jsr utilPrintCRLF
d507 : 18               [ 2] 	clc
d508 : 60               [ 6] 	rts
d509 :                       cmd_setmem_err
d509 : 38               [ 2] 	sec
d50a : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* cmd_dumpmem
                             ;* Dump memory at address AAAA
                             ;* Input : buflo, bufhi
                             ;* Output : y = start of first parm byte
                             ;* Regs affected : A
                             ;****************************************
d50b :                       cmd_dumpmem
d50b : 209cd5           [ 6] 	jsr cmd_parse_word			; Get address to dump
d50e : 9001             [ 3] 	bcc cmd_dumpmem_block
d510 : 60               [ 6] 	rts							; C is set
d511 :                       cmd_dumpmem_block
d511 : a595             [ 3] 	lda cmd_hi					; Show the address
d513 : 2070c1           [ 6] 	jsr utilPrintA
d516 : a594             [ 3] 	lda cmd_lo
d518 : 2070c1           [ 6] 	jsr utilPrintA
d51b : 2060c1           [ 6] 	jsr utilPrintSPC
                             	
d51e : a008             [ 2] 	ldy #8						; 8 Bytes per line
d520 :                       cmd_dumpmem_byte
d520 : 2072d5           [ 6] 	jsr cmd_peek
d523 : 2070c1           [ 6] 	jsr utilPrintA
d526 : 2060c1           [ 6] 	jsr utilPrintSPC
d529 : 206bd5           [ 6] 	jsr cmd_incmem
d52c : 88               [ 2] 	dey
d52d : d0f1             [ 3] 	bne cmd_dumpmem_byte
d52f :                       cmd_dumpmemASCII
d52f : 38               [ 2] 	sec							; Move pointer back to start
d530 : a594             [ 3] 	lda cmd_lo
d532 : e908             [ 2] 	sbc #8
d534 : 8594             [ 3] 	sta cmd_lo
d536 : a595             [ 3] 	lda cmd_hi
d538 : e900             [ 2] 	sbc #0
d53a : 8595             [ 3] 	sta cmd_hi
                             	
d53c : 2060c1           [ 6] 	jsr utilPrintSPC
d53f : a008             [ 2] 	ldy #8						; 8 Bytes per line
d541 :                       cmd_dumpmem_ascii
d541 : 2072d5           [ 6] 	jsr cmd_peek
d544 : a22e             [ 2] 	ldx #'.'					; Non-printable char
d546 : c920             [ 2] 	cmp #' '					; A<32 is unprintable
d548 : b001             [ 3] 	bcs cmd_dump_skip_ctrl
d54a : 8a               [ 2] 	txa							; Replace with dot
AS65 Assembler for R6502 [1.42].                                     Page  135
-------------------------------- bank\bank0.s --------------------------------

d54b :                       cmd_dump_skip_ctrl
d54b : c97f             [ 2] 	cmp #UTF_DEL				; >= DEL is unprintable
d54d : 9001             [ 3] 	bcc cmd_dump_skip_del
d54f : 8a               [ 2] 	txa							; Replace with dot
d550 :                       cmd_dump_skip_del	
d550 : 202ac4           [ 6] 	jsr io_put_ch
d553 : 206bd5           [ 6] 	jsr cmd_incmem
d556 : 88               [ 2] 	dey		
d557 : d0e8             [ 3] 	bne cmd_dumpmem_ascii		; Show 8 bytes
d559 : 38               [ 2] 	sec
d55a : 2027c4           [ 6] 	jsr io_get_ch				; Wait for key press
d55d : c90d             [ 2] 	cmp #UTF_CR		
d55f : d003             [ 3] 	bne cmd_dumpmemFin			; Any key but enter finishe
                             ;	jsr io_put_ch				; Do new line
d561 : 4c11d5           [ 3] 	jmp cmd_dumpmem_block
d564 :                       cmd_dumpmemFin
d564 : a90d             [ 2] 	lda #UTF_CR
d566 : 202ac4           [ 6] 	jsr io_put_ch
d569 : 18               [ 2] 	clc
d56a : 60               [ 6] 	rts
                             	
                             	
                             ;****************************************
                             ;* cmd_incmem
                             ;* Increment pointer
                             ;* Input : cmd_lo, cmd_hi
                             ;* Output : cmd_lo, cmd_hi
                             ;* Regs affected : 
                             ;****************************************
d56b :                       cmd_incmem
                             	_incZPWord cmd_lo
                             
d571 : 60               [ 6] 	rts
                             	
                             ;****************************************
                             ;* cmd_peek
                             ;* Read byte
                             ;* Input : cmd_lo, cmd_hi
                             ;* Output : A
                             ;* Regs affected : 
                             ;****************************************
d572 :                       cmd_peek
d572 : a200             [ 2] 	ldx #0
d574 : a194             [ 6] 	lda (cmd_lo,x)
d576 : 60               [ 6] 	rts
                             	
                             ;****************************************
                             ;* cmd_poke
                             ;* Read byte
                             ;* Input : cmd_lo, cmd_hi, A
                             ;* Output : A
                             ;* Regs affected : 
                             ;****************************************
d577 :                       cmd_poke
d577 : 8638             [ 3] 	stx tmp_d
d579 : a200             [ 2] 	ldx #0
d57b : 8194             [ 6] 	sta (cmd_lo,x)
d57d : a638             [ 3] 	ldx tmp_d
d57f : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* cmd_parse_byte
AS65 Assembler for R6502 [1.42].                                     Page  136
-------------------------------- bank\bank0.s --------------------------------

                             ;* Find 2 char hex byte
                             ;* Input : buflo, bufhi, y offset
                             ;* Output : y = char after hex byte, A = value
                             ;* Regs affected : A,Y
                             ;****************************************
d580 :                       cmd_parse_byte
d580 : 20aed5           [ 6] 	jsr cmd_parse_next_parm	; Find the next paramete
d583 : b015             [ 3] 	bcs cmd_parse_byte_err
d585 : b139             [ 5] 	lda (buf_lo),y			; Get hi nibble of high byte
d587 : f011             [ 3] 	beq cmd_parse_byte_err	; If no char then error w
d589 : 48               [ 3] 	pha						; Save on stack
d58a : c8               [ 2] 	iny
d58b : b139             [ 5] 	lda (buf_lo),y			; Get lo nibble of high byte
d58d : f00a             [ 3] 	beq cmd_parse_byte_errp	; If no char then error 
d58f : aa               [ 2] 	tax						; Lo nibble goes to X
d590 : 68               [ 4] 	pla						; Restore hi nibble
d591 : 20a1c1           [ 6] 	jsr str_x_to_a			; Convert from hex to A
d594 : b004             [ 3] 	bcs cmd_parse_byte_err	; If error then stop
d596 : c8               [ 2] 	iny						; Point to next char
d597 : 18               [ 2] 	clc
d598 : 60               [ 6] 	rts						; A contains the byte
d599 :                       cmd_parse_byte_errp
d599 : 68               [ 4] 	pla
d59a :                       cmd_parse_byte_err
d59a : aa               [ 2] 	tax
d59b : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* cmd_parse_word
                             ;* Find 4 char hex word
                             ;* Input : buflo, bufhi, y offset
                             ;* Output : y = char after hex byte, A = hi, X = 
                             ;* Regs affected : A,X,Y
                             ;****************************************
d59c :                       cmd_parse_word
d59c : 2080d5           [ 6] 	jsr cmd_parse_byte			; Get hi byte of word
d59f : b00b             [ 3] 	bcs cmd_word_err
d5a1 : 8595             [ 3] 	sta cmd_hi					; Save hi byte of word
d5a3 : 2080d5           [ 6] 	jsr cmd_parse_byte			; Get lo byte of word
d5a6 : b004             [ 3] 	bcs cmd_word_err
d5a8 : 8594             [ 3] 	sta cmd_lo
d5aa : 18               [ 2] 	clc
d5ab : 60               [ 6] 	rts
d5ac :                       cmd_word_err
d5ac : 38               [ 2] 	sec
d5ad : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* cmd_parse_next_parm
                             ;* Find next non-white space
                             ;* Input : buflo, bufhi, y offset
                             ;* Output : y = start of first parm byte
                             ;* Regs affected : A
                             ;****************************************
d5ae :                       cmd_parse_next_parm
d5ae : 88               [ 2] 	dey
d5af :                       cmd_find_parm
d5af : c8               [ 2] 	iny
d5b0 : b139             [ 5] 	lda (buf_lo),y
d5b2 : f005             [ 3] 	beq cmd_next_parm_err	; If z then no parms, fin 
d5b4 : c921             [ 2] 	cmp #' '+1				; Ignore space or less
d5b6 : f0f7             [ 3] 	beq cmd_find_parm
AS65 Assembler for R6502 [1.42].                                     Page  137
-------------------------------- bank\bank0.s --------------------------------

d5b8 : 18               [ 2] 	clc						; else ok, C is cleared
d5b9 :                       cmd_next_parm_err
d5b9 : 60               [ 6] 	rts
                             
                             	
d5ba : 3e00                  msg_ready				db ">\x0"
d5bc : 3f0d00                msg_errmsg				db "?\xd\x0"
d5bf :                       _mod_sz_cmd_e
                             
                             	include "sound/sound.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  SOUND.S
                             ;*  Sound driver module - routines to access the 
                             ;*  This sound chip was found in a number of popu
                             ;*  in the early to mid 80s, including my first c
                             ;*  the Oric-1, as well as the MSX range.
                             ;*
                             ;************************************************
                             
                             
                             	; ROM code
                             	code
                             
d5bf :                       mod_sz_sound_s
                             
                             
                             ;****************************************
                             ;* snd_get_note
                             ;* Get a note from the music scale table
                             ;* Input : Octave in X, note in Y
                             ;*         Octave between 1 and 6
                             ;* Output : A,X = Value hi,lo
                             ;* Regs affected : X
                             ;****************************************
d5bf :                       snd_get_note
d5bf : 98               [ 2] 	tya
d5c0 : 0a               [ 2] 	asl a
d5c1 : a8               [ 2] 	tay
                             	; Get note for octave 1
d5c2 : b9f2d5           [ 4] 	lda snd_music_tab,y
d5c5 : 8532             [ 3] 	sta tmp_alo
d5c7 : b9f3d5           [ 4] 	lda snd_music_tab+1,y
                             	
d5ca :                       snd_get_note_oct
d5ca : ca               [ 2] 	dex
d5cb : f006             [ 3] 	beq snd_note_done
                             	; Divide freq by 2 each octave
d5cd : 4a               [ 2] 	lsr a
d5ce : 6632             [ 5] 	ror tmp_alo
d5d0 : 4ccad5           [ 3] 	jmp snd_get_note_oct
d5d3 :                       snd_note_done
d5d3 : a632             [ 3] 	ldx tmp_alo
d5d5 : 60               [ 6] 	rts
                             
                             	
AS65 Assembler for R6502 [1.42].                                     Page  138
-------------------------------- bank\bank0.s --------------------------------

                             ;****************************************
                             ;* init_snd
                             ;* Initialise sound - after cia 1 has been initia
                             ;* Input : None
                             ;* Output : None
                             ;* Regs affected : All
                             ;****************************************
d5d6 :                       init_snd
d5d6 : a20f             [ 2] 	ldx #15
d5d8 :                       init_snd_regs
d5d8 : bde2d5           [ 4] 	lda snd_init_tab,x
d5db : 206ec0           [ 6] 	jsr snd_set				; Set X to A
d5de : ca               [ 2] 	dex
d5df : 10f7             [ 3] 	bpl init_snd_regs		; 16 regs
                             	
d5e1 : 60               [ 6] 	rts						; return from sub
                             
                             	; Register array initialisation values
                             	; Assuming 1.34Mhz input clock
d5e2 :                       snd_init_tab
d5e2 : 40                    	db 0x40				; R0 = Channel A Tone Low
d5e3 : 00                    	db 0x00				; R1 = Channel A Tone High
d5e4 : 00                    	db 0x00				; R2 = Channel B Tone Low
d5e5 : 01                    	db 0x01				; R3 = Channel B Tone High
d5e6 : 00                    	db 0x00				; R4 = Channel C Tone Low
d5e7 : 02                    	db 0x02				; R5 = Channel C Tone High
d5e8 : 00                    	db 0x00				; R6 = Noise period
d5e9 : 7e                    	db 0b01111110		; R7 = Control : IOB input, IOA o
d5ea : 1f                    	db 0x1f				; R8 = Channel A Vol
d5eb : 1f                    	db 0x1f				; R9 = Channel B Vol
d5ec : 1f                    	db 0x1f				; R10 = Channel C Vol
d5ed : 00                    	db 0x00				; R11 = Envelope Period Low
d5ee : 03                    	db 0x03				; R12 = Envelope Period High
d5ef : 00                    	db 0b00000000		; R13 = Envelope Shape : 0000
d5f0 : ff                    	db 0xff				; R14 = IO Port A - KB lines disabled
d5f1 : 00                    	db 0x00				; R15 = IO Port B ; Initialise to 0 (
                             
d5f2 :                       snd_music_tab
d5f2 : f20b                  	dw 3058				; C		0 (Octave 1 3058Hz)
d5f4 : 460b                  	dw 2886				; C#	1
d5f6 : a40a                  	dw 2724				; D		2
d5f8 : 0b0a                  	dw 2571				; D#	3
d5fa : 7b09                  	dw 2427				; E		4
d5fc : f308                  	dw 2291				; F		5
d5fe : 7208                  	dw 2162				; F#	6
d600 : f907                  	dw 2041				; G		7
d602 : 8607                  	dw 1926				; G#	8
d604 : 1a07                  	dw 1818				; A		9
d606 : b406                  	dw 1716				; A#	10
d608 : 5406                  	dw 1620				; B		11
d60a : 0000                  	dw 0				; Null  12
                             
d60c :                       mod_sz_sound_e
                             
d60c :                       mod_sz_bios_e
d60c :                       mod_sz_language_s
                             	include "utils/intmath.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
AS65 Assembler for R6502 [1.42].                                     Page  139
-------------------------------- bank\bank0.s --------------------------------

                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  INTMATH.S
                             ;*  Core module for integer maths supported by df
                             ;*  Now supports signed integers in 2s complement
                             ;*  Uses the intmath registers: num_a, num_b, num
                             ;*  Most inputs are through num_a and num_b, with
                             ;*  num_a
                             ;*  Operations: add, sub, swap, 8 bit mult, mult,
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code
                             
                             ;****************************************
                             ;* Add : A + B result in A
                             ;****************************************
                             ;int_add
                             ;	clc
                             ;	lda num_a
                             ;	adc num_b
                             ;	sta num_a
                             ;	lda num_a+1
                             ;	adc num_b+1
                             ;	sta num_a+1
                             ;	rts
                             	
                             ;****************************************
                             ;* Sub : A - B result in A
                             ;****************************************
                             ;int_sub
                             ;	sec
                             ;	lda num_a
                             ;	sbc num_b
                             ;	sta num_a
                             ;	lda num_a+1
                             ;	sbc num_b+1
                             ;	sta num_a+1
                             ;	rts
                             	
                             ;****************************************
                             ;* Swp : A <-> B 
                             ;****************************************
                             ;int_swp
                             ;	lda num_a
                             ;	ldx num_b
                             ;	sta num_b
                             ;	stx num_a
                             ;	lda num_a+1
                             ;	ldx num_b+1
                             ;	sta num_b+1
                             ;	stx num_a+1
                             ;	rts
                             	
                             ;****************************************
                             ;* Mult : A * B result in A
                             ;* B assumed to be an 8 bit quantity 
                             ;****************************************
d60c :                       int_fast_mult
                             	_cpyZPWord num_a,num_tmp
AS65 Assembler for R6502 [1.42].                                     Page  140
-------------------------------- bank\bank0.s --------------------------------

                             
d614 : a900             [ 2] 	lda #0
d616 : 853d             [ 3] 	sta num_a
d618 : 853e             [ 3] 	sta num_a+1
d61a : a008             [ 2] 	ldy #8
d61c :                       int_fast_mult_cycle
d61c : 4641             [ 5] 	lsr num_b
d61e : 900d             [ 3] 	bcc int_fast_mult_next
d620 : 18               [ 2] 	clc
d621 : a53d             [ 3] 	lda num_a
d623 : 6549             [ 3] 	adc num_tmp
d625 : 853d             [ 3] 	sta num_a
d627 : a53e             [ 3] 	lda num_a+1
d629 : 654a             [ 3] 	adc num_tmp+1
d62b : 853e             [ 3] 	sta num_a+1
d62d :                       int_fast_mult_next
d62d : 0649             [ 5] 	asl num_tmp
d62f : 264a             [ 5] 	rol num_tmp+1
d631 : 88               [ 2] 	dey
d632 : d0e8             [ 3] 	bne int_fast_mult_cycle
d634 : 60               [ 6] 	rts
                             	
                             ;****************************************
                             ;* Mult : A * B result in A
                             ;****************************************
d635 :                       int_mult
                             	_cpyZPWord num_a,num_tmp
                             
d63d : a900             [ 2] 	lda #0
d63f : 853d             [ 3] 	sta num_a
d641 : 853e             [ 3] 	sta num_a+1
d643 : a010             [ 2] 	ldy #16
d645 :                       int_mult_cycle
d645 : 4642             [ 5] 	lsr num_b+1
d647 : 6641             [ 5] 	ror num_b
d649 : 900d             [ 3] 	bcc int_mult_next
d64b : 18               [ 2] 	clc
d64c : a53d             [ 3] 	lda num_a
d64e : 6549             [ 3] 	adc num_tmp
d650 : 853d             [ 3] 	sta num_a
d652 : a53e             [ 3] 	lda num_a+1
d654 : 654a             [ 3] 	adc num_tmp+1
d656 : 853e             [ 3] 	sta num_a+1
d658 :                       int_mult_next
d658 : 0649             [ 5] 	asl num_tmp
d65a : 264a             [ 5] 	rol num_tmp+1
d65c : 88               [ 2] 	dey
d65d : d0e6             [ 3] 	bne int_mult_cycle
d65f : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Div : A / B result in A, remainder X
                             ;****************************************
d660 :                       int_div
                             	; adjust signs
d660 : a900             [ 2] 	lda #0
d662 : 8549             [ 3] 	sta num_tmp				; Assume all +ve
d664 : a53e             [ 3] 	lda num_a+1				; Check A hi
d666 : 100f             [ 3] 	bpl int_div_skip_negA
d668 : e649             [ 5] 	inc num_tmp				; Record sign flip
d66a : 38               [ 2] 	sec						; 2's complement A
d66b : a900             [ 2] 	lda #0					; by 0-A
AS65 Assembler for R6502 [1.42].                                     Page  141
-------------------------------- bank\bank0.s --------------------------------

d66d : e53d             [ 3] 	sbc num_a				; A is now +ve
d66f : 853d             [ 3] 	sta num_a
d671 : a900             [ 2] 	lda #0
d673 : e53e             [ 3] 	sbc num_a+1
d675 : 853e             [ 3] 	sta num_a+1	
d677 :                       int_div_skip_negA
d677 : a542             [ 3] 	lda num_b+1				; Check B hi
d679 : 100f             [ 3] 	bpl int_div_skip_negB
d67b : e649             [ 5] 	inc num_tmp				; Record sign flip
d67d : 38               [ 2] 	sec						; 2's complement B
d67e : a900             [ 2] 	lda #0					; by 0-B
d680 : e541             [ 3] 	sbc num_b				; B is now +ve
d682 : 8541             [ 3] 	sta num_b
d684 : a900             [ 2] 	lda #0
d686 : e542             [ 3] 	sbc num_b+1
d688 : 8542             [ 3] 	sta num_b+1
d68a :                       int_div_skip_negB			; num_tmp bit 0=1 for result 
                             	; x is the remainder
d68a : a900             [ 2] 	lda #0
d68c : 8545             [ 3] 	sta num_x
d68e : 8546             [ 3] 	sta num_x+1
                             	; 16 bit division
d690 : a010             [ 2] 	ldy #16
d692 :                       int_div_cycle
                             	; shift a left 1 bit
d692 : 063d             [ 5] 	asl num_a
d694 : 263e             [ 5] 	rol num_a+1
                             	; shift in to remainder
d696 : 2645             [ 5] 	rol num_x
d698 : 2646             [ 5] 	rol num_x+1
                             	; try and subtract b from remainder
d69a : 38               [ 2] 	sec
d69b : a545             [ 3] 	lda num_x
d69d : e541             [ 3] 	sbc num_b
d69f : aa               [ 2] 	tax
d6a0 : a546             [ 3] 	lda num_x+1
d6a2 : e542             [ 3] 	sbc num_b+1
d6a4 : 9006             [ 3] 	bcc int_div_skip
                             	; so b did fit in to remainder, save it
d6a6 : 8645             [ 3] 	stx num_x
d6a8 : 8546             [ 3] 	sta num_x+1
d6aa : e63d             [ 5] 	inc num_a
d6ac :                       int_div_skip
                             	; carry on for 16 bits
d6ac : 88               [ 2] 	dey
d6ad : d0e3             [ 3] 	bne int_div_cycle
                             	; result in a, remainder in x
                             	; check num_tmp bit 0
d6af : a549             [ 3] 	lda num_tmp
d6b1 : 2901             [ 2] 	and #1
d6b3 : f00d             [ 3] 	beq int_div_noflip
d6b5 : 38               [ 2] 	sec						; 2's complement A
d6b6 : a900             [ 2] 	lda #0					; by 0-A
d6b8 : e53d             [ 3] 	sbc num_a				; A is now +ve
d6ba : 853d             [ 3] 	sta num_a
d6bc : a900             [ 2] 	lda #0
d6be : e53e             [ 3] 	sbc num_a+1
d6c0 : 853e             [ 3] 	sta num_a+1	
d6c2 :                       int_div_noflip
d6c2 : 60               [ 6] 	rts
                             	
                             
AS65 Assembler for R6502 [1.42].                                     Page  142
-------------------------------- bank\bank0.s --------------------------------

                             	include "dflat/dflat.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  DFLAT.S
                             ;*  This is the main controller code file for dfl
                             ;*  This file includes all the required dflat sou
                             ;*  needed:
                             ;*  - error.s is the error handling module
                             ;*  - var.s is the variable handling module
                             ;*  - tokenise.s is the tokenisation module
                             ;*  - progedit.s is the program editing module
                             ;*  - runtime.s is the runtime module
                             ;*  - stack.s is the stack handling module
                             ;*  The above modules include further source file
                             ;*  needed.
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code
                             
d6c3 :                       mod_sz_dflat_s
                             
                             ;	include "dflat/error.s"  ** included in the mai
                             	include "dflat/var.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  VAR.S
                             ;*  This module handles all the variable manageme
                             ;*  When a new variable is detected during tokeni
                             ;*  is added to the variable tables.  Any subsequ
                             ;*  that variable is tokenised as an index in to 
                             ;*  table.  There are two variable tables:
                             ;*  Variable name table (VNT) keeps track of vari
                             ;*  Variable value table (VVT) maintains variable
                             ;*  including type, dimension (if array) and of c
                             ;*  actual values.  For an array, the value is a 
                             ;*  memory grabbed using the 'malloc' function (s
                             ;*  This approach to variable managemet is direct
                             ;*  Atari 8 bit.  The disadvantage is that during
                             ;*  session you may end up having a much larger v
                             ;*  table than you need.  Why?  Well because say 
                             ;*  a as a new variable, but then later change it
                             ;*  In this case a remains in the variable tables
                             ;*  only ever adds to the table!  However it is e
                             ;*  solved - when you save and then reload from n
                             ;*  program, the variable table is built up as th
                             ;*  is loaded.
                             ;*  The VNT grows DOWN from the top of free memor
                             ;*  the VVT growing UP from just below the VNT.
AS65 Assembler for R6502 [1.42].                                     Page  143
-------------------------------- bank\bank0.s --------------------------------

                             ;*	This means that the VVT for a variable will al
                             ;*	found in a fixed place in the VVT table and me
                             ;*	For the VNT (names) it grows from vvstart at l
                             ;*
                             ;************************************************
                             
                             
                             	; ROM code
                             	code  
                             
d6c3 :                       mod_sz_var_s
                             
                             
                             ;****************************************
                             ;* Find a variable
                             ;* CC if found, A has index
                             ;****************************************
d6c3 :                       df_var_find
                             	; start at the beginning of the vnt table
                             	; vars are stored in reverse order
                             	_cpyZPWord df_vntstrt,df_tmpptrb
                             
                             	; start at end of VVT
                             	_cpyZPWord df_vvtend,df_tmpptra
                             
d6d3 :                       df_var_match_vnt
                             	; If reached top of VVT then not found
d6d3 : a5a1             [ 3] 	lda df_tmpptra
d6d5 : c56d             [ 3] 	cmp df_vvtstrt
d6d7 : d006             [ 3] 	bne df_var_match_vnt_do
d6d9 : a5a2             [ 3] 	lda df_tmpptra+1
d6db : c56e             [ 3] 	cmp df_vvtstrt+1
d6dd : f042             [ 4] 	beq df_var_find_no_vnt
d6df :                       df_var_match_vnt_do
                             	; match each char in buffer with vnt
d6df : a47c             [ 3] 	ldy df_linoff
d6e1 : a200             [ 2] 	ldx #0
d6e3 :                       df_var_match_vnt_sym
d6e3 : b90004           [ 4] 	lda df_linbuff,y
d6e6 : c1a3             [ 6] 	cmp (df_tmpptrb,x)
d6e8 : d017             [ 4] 	bne df_var_vnt_sym_nomatch
                             	; if single char match then increment
                             	; source and search
d6ea : c8               [ 2] 	iny
                             	_incZPWord df_tmpptrb
                             
                             	; if more chars in vnt entry then continue
d6f1 : a1a3             [ 6] 	lda (df_tmpptrb,x)
d6f3 : d0ee             [ 3] 	bne df_var_match_vnt_sym
                             	; if no more chars in vnt entry but
                             	; but chars in buffer then try next vnt
d6f5 : b90004           [ 4] 	lda df_linbuff,y
                             	; check for valid alpha-numeric
d6f8 : 20a4d8           [ 6] 	jsr df_tk_isalphanum
                             	; if there is a valid alpha-num then no match
d6fb : b004             [ 4] 	bcs df_var_vnt_sym_nomatch
                             	; else check type
d6fd :                       df_var_check_type
                             	; if not alpha-num then check for type
                             	; string or int postfix didn't match with VNT
                             ;	cmp #'%'
                             ;	beq df_var_vnt_sym_nomatch
AS65 Assembler for R6502 [1.42].                                     Page  144
-------------------------------- bank\bank0.s --------------------------------

d6fd : c924             [ 2] 	cmp #'$'
                             	; ok, all good got a match
d6ff : d025             [ 4] 	bne df_var_find_true
d701 :                       df_var_vnt_sym_nomatch
                             	; find the zero terminator
d701 : a1a3             [ 6] 	lda (df_tmpptrb,x)
d703 : f009             [ 3] 	beq	df_var_vnt_entry_end
                             	_incZPWord df_tmpptrb
                             
d70b : 4c01d7           [ 3] 	jmp df_var_vnt_sym_nomatch
d70e :                       df_var_vnt_entry_end
                             	; skip over zero terminator
                             	_incZPWord df_tmpptrb
                             
                             	; update vvt address pointer
d714 : 18               [ 2] 	clc
d715 : a5a1             [ 3] 	lda df_tmpptra
d717 : 6908             [ 2] 	adc #8
d719 : 85a1             [ 3] 	sta df_tmpptra
                             	_bcc 2
                             
d71d : e6a2             [ 5] 	inc df_tmpptra+1
d71f : d0b2             [ 4] 	bne df_var_match_vnt		; Always - high byte is no
                             
                             	; if at end of vnt then no matches found
d721 :                       df_var_find_no_vnt
d721 : a900             [ 2] 	lda #0
d723 : aa               [ 2] 	tax
d724 : 38               [ 2] 	sec
d725 : 60               [ 6] 	rts
                             
d726 :                       df_var_find_true
                             	; Get slot address into x,a
d726 : a6a1             [ 3] 	ldx df_tmpptra
d728 : a5a2             [ 3] 	lda df_tmpptra+1
                             	
                             	; Consume characters found in source
d72a : 847c             [ 3] 	sty df_linoff
d72c : 18               [ 2] 	clc
d72d : 60               [ 6] 	rts
                             
                             	
                             ;****************************************
                             ;* Insert a variable name in to vnt
                             ;* X = number of bytes to make room
                             ;* Space allocated is;
                             ;*	8 bytes for the new VVT entry
                             ;*  X bytes for the new VNT entry
                             ;* df_vntstrt is new var name entry
                             ;* df_vvtend is new vvt entry
                             ;****************************************
d72e :                       df_var_insert_space
                             	; *** REMEMBER TO DO A SPACE CHECK EVENTUALLY! *
                             
                             	; adjust down the VNT start by VVT size (for ext
                             	; put it in tmpptrb
d72e : 38               [ 2] 	sec
d72f : a569             [ 3] 	lda df_vntstrt
d731 : e908             [ 2] 	sbc #DFVVT_SZ
d733 : 8569             [ 3] 	sta df_vntstrt
d735 : a56a             [ 3] 	lda df_vntstrt+1
d737 : e900             [ 2] 	sbc #0
AS65 Assembler for R6502 [1.42].                                     Page  145
-------------------------------- bank\bank0.s --------------------------------

d739 : 856a             [ 3] 	sta df_vntstrt+1
                             	
                             	; adjust VNT end by VVT size (for extra VVT entr
                             	; and put it in tmpptrc
d73b : 38               [ 2] 	sec
d73c : a56b             [ 3] 	lda df_vntend
d73e : e908             [ 2] 	sbc #DFVVT_SZ
d740 : 856b             [ 3] 	sta df_vntend
d742 : a56c             [ 3] 	lda df_vntend+1
d744 : e900             [ 2] 	sbc #0
d746 : 856c             [ 3] 	sta df_vntend+1
                             
                             	; Set copy point to new start of VNT
                             	_cpyZPWord df_vntstrt,df_tmpptra
                             
                             
                             	; Now move all bytes from old VNT (higher up) to
d750 :                       df_var_move_byte
                             	; When pointer = vntend then done
d750 : a5a1             [ 3] 	lda df_tmpptra
d752 : c56b             [ 3] 	cmp df_vntend
d754 : d006             [ 3] 	bne df_var_move_byte_do
d756 : a5a2             [ 3] 	lda df_tmpptra+1
d758 : c56c             [ 3] 	cmp df_vntend+1
d75a : f011             [ 3] 	beq df_var_move_byte_fin
d75c :                       df_var_move_byte_do
                             	; First the source byte VVT size higher in memor
d75c : a008             [ 2] 	ldy #DFVVT_SZ
d75e : b1a1             [ 5] 	lda (df_tmpptra),y
                             	; And copy to new position lower in memory
d760 : a000             [ 2] 	ldy #0
d762 : 91a1             [ 5] 	sta (df_tmpptra),y
                             	; Increment memory pointer
                             	_incZPWord df_tmpptra
                             
d76a : 4c50d7           [ 3] 	jmp df_var_move_byte		; Always as C is not touch
d76d :                       df_var_move_byte_fin
                             	
                             	; Now subtract X bytes from VNT start to accommo
d76d : 8638             [ 3] 	stx tmp_d
d76f : 38               [ 2] 	sec
d770 : a569             [ 3] 	lda df_vntstrt
d772 : e538             [ 3] 	sbc tmp_d
d774 : 8569             [ 3] 	sta df_vntstrt
d776 : a56a             [ 3] 	lda df_vntstrt+1
d778 : e900             [ 2] 	sbc #0
d77a : 856a             [ 3] 	sta df_vntstrt+1
                             
                             	; VVT end is the same as VNT end
                             	_cpyZPWord df_vntend,df_vvtend
                             
                             
                             	; Copy done increment variable count
d784 : e671             [ 5] 	inc df_varcnt
d786 : 18               [ 2] 	clc
d787 : 60               [ 6] 	rts
                             	
                             	
                             ;****************************************
                             ;* Analyse variable name
                             ;* Return type in A
                             ;* NOT C = It is a variable
AS65 Assembler for R6502 [1.42].                                     Page  146
-------------------------------- bank\bank0.s --------------------------------

                             ;* C = It is not a variable
                             ;* X = Length including pre-fixes
                             ;* Y = Offset to next char after var name
                             ;****************************************
d788 :                       df_var_analyse
                             	; Default type is INT
d788 : a901             [ 2] 	lda #DFVVT_INT
d78a : 85a1             [ 3] 	sta df_tmpptra
                             	
                             	; start at the current buffer position
d78c : a47c             [ 3] 	ldy df_linoff
                             	
                             	; check for PROC prefix
d78e : b90004           [ 4] 	lda df_linbuff,y
d791 : c95f             [ 2] 	cmp #'_'
                             	; if it is not proc then get the name
d793 : d005             [ 3] 	bne df_var_not_proc
                             	; else set type to PROC
d795 : a940             [ 2] 	lda #DFVVT_PROC
d797 : 85a1             [ 3] 	sta df_tmpptra
                             	; skip over prefix
d799 : c8               [ 2] 	iny
d79a :                       df_var_not_proc
                             	; found the actual number of alpha nums
d79a : a2ff             [ 2] 	ldx #0xff
                             	; go back on pos on index as loop always does in
d79c : 88               [ 2] 	dey
d79d :                       df_var_type_countlen
                             	; count alpha nums
d79d : c8               [ 2] 	iny
d79e : e8               [ 2] 	inx
d79f : b90004           [ 4] 	lda df_linbuff,y
                             	; first char has to be alpha, rest can be alpha-
d7a2 : e000             [ 2] 	cpx #0
d7a4 : d007             [ 3] 	bne df_var_type_countlen_alphanum
d7a6 : 2097d8           [ 6] 	jsr df_tk_isalpha
d7a9 : b0f2             [ 3] 	bcs df_var_type_countlen
d7ab : 9005             [ 3] 	bcc df_var_type_countlen_done
d7ad :                       df_var_type_countlen_alphanum
d7ad : 20a4d8           [ 6] 	jsr df_tk_isalphanum
d7b0 : b0eb             [ 3] 	bcs df_var_type_countlen
d7b2 :                       df_var_type_countlen_done
d7b2 : e000             [ 2] 	cpx #0
d7b4 : d00a             [ 3] 	bne df_var_analyse_chk_post
                             	; if zero alphanums error but not fatal
d7b6 :                       df_var_analyse_err
                             	; If already prefix of PROC then fatal error
d7b6 : a5a1             [ 3] 	lda df_tmpptra
d7b8 : c940             [ 2] 	cmp #DFVVT_PROC
d7ba : f002             [ 3] 	beq df_var_analyse_fatal_err
d7bc : 38               [ 2] 	sec
d7bd : 60               [ 6] 	rts
d7be :                       df_var_analyse_fatal_err
                             	SWBRK DFERR_SYNTAX
                             
d7c0 :                       df_var_analyse_chk_post
                             	; first see if the char is $
                             	; but cannot already have PROC prefix
                             ;	cmp #'%'
                             ;	bne df_var_analyse_chk_dollar
                             ;	ldx df_tmpptra
                             ;	cpx #DFVVT_PROC
AS65 Assembler for R6502 [1.42].                                     Page  147
-------------------------------- bank\bank0.s --------------------------------

                             ;	beq df_var_analyse_fatal_err
                             	; Set to INT type although it is the default alr
                             ;	lda #DFVVT_INT
                             ;	sta df_tmpptra
                             	; advance the buffer index
                             ;	iny
                             ;	bne df_var_analyse_chk_arry
d7c0 :                       df_var_analyse_chk_dollar
                             	; now see if the char is $
                             	; but cannot already have PROC prefix
d7c0 : c924             [ 2] 	cmp #'$'
d7c2 : d00b             [ 3] 	bne df_var_analyse_chk_arry
d7c4 : a6a1             [ 3] 	ldx df_tmpptra
d7c6 : e040             [ 2] 	cpx #DFVVT_PROC
d7c8 : f0f4             [ 3] 	beq df_var_analyse_fatal_err
                             	; Set to STRING type
d7ca : a904             [ 2] 	lda #DFVVT_STR
d7cc : 85a1             [ 3] 	sta df_tmpptra
                             	; advance the buffer index
d7ce : c8               [ 2] 	iny
d7cf :                       df_var_analyse_chk_arry
                             	; Check for array type vs PROC
d7cf : b90004           [ 4] 	lda df_linbuff,y
d7d2 : c95b             [ 2] 	cmp #'['
d7d4 : d00a             [ 3] 	bne df_var_not_arry
                             	; array and proc type not compatible
d7d6 : a5a1             [ 3] 	lda df_tmpptra
d7d8 : c940             [ 2] 	cmp #DFVVT_PROC
d7da : f0e2             [ 3] 	beq df_var_analyse_fatal_err
d7dc : 0980             [ 2] 	ora #DFVVT_ARRY
d7de : 85a1             [ 3] 	sta df_tmpptra
d7e0 :                       df_var_not_arry
                             	; Ok got everything
                             	; calculate length from y
                             	; y is next char after var name
d7e0 : 98               [ 2] 	tya
d7e1 : 38               [ 2] 	sec
d7e2 : e57c             [ 3] 	sbc df_linoff			; where we started
                             	; put len in X
d7e4 : aa               [ 2] 	tax
                             	; put type in A
d7e5 : a5a1             [ 3] 	lda df_tmpptra
d7e7 : 18               [ 2] 	clc
d7e8 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Find or create a variable
                             ;* If found then type needs to match mask
                             ;* Not a fatal error because could be part
                             ;* of a trial of different parsing options
                             ;****************************************
d7e9 :                       df_var_findcreate
                             	; save mask
d7e9 : 48               [ 3] 	pha
d7ea : 20c3d6           [ 6] 	jsr df_var_find
d7ed : b013             [ 4] 	bcs df_var_findcreate_create
                             	; restore mask to check for 0 then push
d7ef : 68               [ 4] 	pla
d7f0 : 48               [ 3] 	pha
                             	; don't check mask if zero
d7f1 : f008             [ 3] 	beq df_var_findcreate_found
                             	; restore mask
AS65 Assembler for R6502 [1.42].                                     Page  148
-------------------------------- bank\bank0.s --------------------------------

d7f3 : 68               [ 4] 	pla
d7f4 : a000             [ 2] 	ldy #DFVVT_TYPE
d7f6 : 31a1             [ 5] 	and (df_tmpptra),y
                             	; but if mask is non zero then this must be non 
d7f8 : f019             [ 4] 	beq df_var_findcreate_err
d7fa : 48               [ 3] 	pha		; Dummy push to match the pla
d7fb :                       df_var_findcreate_found
                             	; discard mask
d7fb : 68               [ 4] 	pla	
                             	; put slot address in x,a
d7fc : a6a1             [ 3] 	ldx df_tmpptra
d7fe : a5a2             [ 3] 	lda df_tmpptra+1
d800 : 18               [ 2] 	clc
d801 : 60               [ 6] 	rts
                             	
                             	;* If no existing variable found, add one to VNT
d802 :                       df_var_findcreate_create
                             	; find type (A) and length (X)
d802 : 2088d7           [ 6] 	jsr df_var_analyse
                             	; keep A temporarily
d805 : 85a1             [ 3] 	sta df_tmpptra
                             	; if not a variable then return with C=1
d807 : b009             [ 3] 	bcs df_var_findcreate_errp
                             	; check if mask needs to be applied
d809 : 68               [ 4] 	pla
d80a : f009             [ 3] 	beq df_var_analyse_ok
                             	; else mask and check
d80c : 25a1             [ 3] 	and df_tmpptra
                             	; mask match is ok
d80e : d005             [ 3] 	bne df_var_analyse_ok
                             	; else return not found
d810 : f001             [ 3] 	beq df_var_findcreate_err
d812 :                       df_var_findcreate_errp
d812 : 68               [ 4] 	pla
d813 :                       df_var_findcreate_err
d813 : 38               [ 2] 	sec
d814 : 60               [ 6] 	rts
                             
d815 :                       df_var_analyse_ok
                             	; extra space for zero terminator
d815 : e8               [ 2] 	inx
                             	; save data in reverse order to when needed
                             	; by the initialise section x,a (var name sz, ty
                             	; insert space of X bytes
d816 : a5a1             [ 3] 	lda df_tmpptra
d818 : 48               [ 3] 	pha
d819 : 8a               [ 2] 	txa
d81a : 48               [ 3] 	pha
                             	
d81b : 202ed7           [ 6] 	jsr df_var_insert_space
d81e : 9002             [ 3] 	bcc df_var_initialise_var
                             	; error inserting space
                             	SWBRK DFERR_OK
                             
                             	
d822 :                       df_var_initialise_var
d822 : 68               [ 4] 	pla
d823 : 85a5             [ 3] 	sta df_tmpptrc				; var name size + 1
                             
d825 : 68               [ 4] 	pla							; type
d826 : a000             [ 2] 	ldy #DFVVT_TYPE
d828 : 916f             [ 5] 	sta (df_vvtend),y			; put type in vvt slot
AS65 Assembler for R6502 [1.42].                                     Page  149
-------------------------------- bank\bank0.s --------------------------------

d82a : a900             [ 2] 	lda #0						; zero the rest
d82c : a007             [ 2] 	ldy #7
d82e :                       df_var_zero_vnt
d82e : 916f             [ 5] 	sta (df_vvtend),y
d830 : 88               [ 2] 	dey
d831 : d0fb             [ 3] 	bne df_var_zero_vnt			; Don't zero out the type
                             
d833 : c6a5             [ 5] 	dec df_tmpptrc				; 1 less to copy variable name
                             
d835 : a67c             [ 3] 	ldx df_linoff				; Start at var name beginning, 
                             	; copy variable name to vnt slot
d837 :                       df_var_findcreate_copy
d837 : bd0004           [ 4] 	lda df_linbuff,x
d83a : 9169             [ 5] 	sta (df_vntstrt),y
d83c : e8               [ 2] 	inx
d83d : c8               [ 2] 	iny
d83e : c6a5             [ 5] 	dec df_tmpptrc
d840 : d0f5             [ 3] 	bne df_var_findcreate_copy
                             	; put in zero terminator
d842 : a900             [ 2] 	lda #0
d844 : 9169             [ 5] 	sta (df_vntstrt),y
                             
d846 : 867c             [ 3] 	stx df_linoff				; Update line pointer
                             
                             	; Return address of slot in X,A
d848 : a66f             [ 3] 	ldx df_vvtend
d84a : a570             [ 3] 	lda df_vvtend+1
                             	
d84c : 18               [ 2] 	clc
d84d : 60               [ 6] 	rts
                             	
d84e :                       mod_sz_var_e
                             
                             	include "dflat/tokenise.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  TOKENISE.S
                             ;*  Controlling module for tokenisation.  Basical
                             ;*  module is given a raw input buffer, which it 
                             ;*  attempt to tokenise fully.  Any syntax errors
                             ;*  thrown at the first point of detection.  If a
                             ;*  well, the parsed input will be in a tokenised
                             ;*  which can be executed in immediate mode or sa
                             ;*  line number order to memory.
                             ;*  dflat syntax is very simple - every statement
                             ;*  with a keyword.  The only exception is assign
                             ;*  procedure invocation - but even these scenari
                             ;*  tokenised so during runtime we just execute t
                             ;*  The raw buffer is consumed one byte at a time
                             ;*  tokenised buffer is written one byte at a tim
                             ;*  syntax means there is no need to undo reads o
                             ;*  or tokenised buffer.  The only refinement is 
                             ;*  allowed to peek a character in the raw buffer
                             ;*  consuming it.
                             ;*
                             ;************************************************
AS65 Assembler for R6502 [1.42].                                     Page  150
-------------------------------- bank\bank0.s --------------------------------

                             
                             	; ROM code
                             	code
                             
d84e :                       mod_sz_tokenise_s
                             
                             
                             ;****************************************
                             ;* df_tk_peek_buf
                             ;* Return next char in A but no change to pointer
                             ;****************************************
d84e :                       df_tk_peek_buf
d84e : a47c             [ 3] 	ldy df_linoff
d850 : b90004           [ 4] 	lda df_linbuff,y
d853 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* df_tk_get_buf
                             ;* Return next char in A and inc pointer
                             ;* Don't advance if null char found and Z=1
                             ;****************************************
d854 :                       df_tk_get_buf
d854 : a47c             [ 3] 	ldy df_linoff
d856 : b90004           [ 4] 	lda df_linbuff,y
d859 : f003             [ 3] 	beq df_tk_get_buf_null
d85b : c8               [ 2] 	iny
d85c : 847c             [ 3] 	sty df_linoff
d85e :                       df_tk_get_buf_null
d85e : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* df_tk_put_tok
                             ;* Put A in token buffer and inc pointer
                             ;* C=Clear on exit
                             ;****************************************
d85f :                       df_tk_put_tok
d85f : a47d             [ 3] 	ldy df_tokoff
d861 : 998004           [ 5] 	sta df_tokbuff,y
d864 : c8               [ 2] 	iny
d865 : 3004             [ 3] 	bmi df_tk_put_overflow
d867 : 847d             [ 3] 	sty df_tokoff
d869 : 18               [ 2] 	clc
d86a : 60               [ 6] 	rts
d86b :                       df_tk_put_overflow
                             	SWBRK DFERR_STRLONG
                             
                             
                             ;****************************************
                             ;* df_tk_isdigit
                             ;* Check char in A for number 0-9
                             ;* Return: CC = False, CS = True
                             ;****************************************
d86d :                       df_tk_isdigit
d86d : c93a             [ 2] 	cmp #'9'+1
d86f : b005             [ 3] 	bcs df_tk_isdigit_false
d871 : c930             [ 2] 	cmp #'0'
d873 : 9001             [ 3] 	bcc df_tk_isdigit_false
d875 : 60               [ 6] 	rts						; C must be 1
d876 :                       df_tk_isdigit_false
d876 : 18               [ 2] 	clc
d877 : 60               [ 6] 	rts
                             
AS65 Assembler for R6502 [1.42].                                     Page  151
-------------------------------- bank\bank0.s --------------------------------

                             ;****************************************
                             ;* df_tk_isbin
                             ;* Check char in A for binary digit
                             ;* Return: CC = False, CS = True
                             ;****************************************
d878 :                       df_tk_isbin
d878 : c930             [ 2] 	cmp #'0'
d87a : f005             [ 3] 	beq df_tk_isbin_true	; C=1
d87c : c931             [ 2] 	cmp #'1'
d87e : f001             [ 3] 	beq df_tk_isbin_true	; C=1
d880 : 18               [ 2] 	clc
d881 :                       df_tk_isbin_true
d881 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* df_tk_ishex
                             ;* Check char in A for number 0-9, A-F, a-f
                             ;* Return: CC = False, CS = True
                             ;****************************************
d882 :                       df_tk_ishex
d882 : 48               [ 3] 	pha
d883 : 206dd8           [ 6] 	jsr df_tk_isdigit
d886 : b00a             [ 3] 	bcs df_tk_ishex_truep
d888 : 0920             [ 2] 	ora #0x20
d88a : c967             [ 2] 	cmp #'f'+1
d88c : b006             [ 3] 	bcs df_tk_ishex_false
d88e : c961             [ 2] 	cmp #'a'
d890 : 9002             [ 3] 	bcc df_tk_ishex_false
                             	; C must be 1 here
d892 :                       df_tk_ishex_truep
d892 : 68               [ 4] 	pla
d893 : 60               [ 6] 	rts
d894 :                       df_tk_ishex_false
d894 :                       df_tk_isalpha_false
d894 : 18               [ 2] 	clc
d895 : 68               [ 4] 	pla
d896 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* df_tk_isalpha
                             ;* Check next char in A alpha a-z, A-Z
                             ;* Return: CC = False, CS = True
                             ;****************************************
d897 :                       df_tk_isalpha
d897 : 48               [ 3] 	pha
d898 : 0920             [ 2] 	ora #0x20					; Convert to lower case for checki
d89a : c97b             [ 2] 	cmp #'z'+1
d89c : b0f6             [ 3] 	bcs df_tk_isalpha_false
d89e : c961             [ 2] 	cmp #'a'
d8a0 : 90f2             [ 3] 	bcc df_tk_isalpha_false
                             	; C must be 1 here
d8a2 : 68               [ 4] 	pla
d8a3 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* df_tk_isalphanum
                             ;* Check next char A for a-z,A-Z,0-9
                             ;* Return: CC = False, CS = True
                             ;****************************************
d8a4 :                       df_tk_isalphanum
d8a4 : 2097d8           [ 6] 	jsr df_tk_isalpha
d8a7 : 90c4             [ 3] 	bcc df_tk_isdigit
AS65 Assembler for R6502 [1.42].                                     Page  152
-------------------------------- bank\bank0.s --------------------------------

d8a9 :                       df_tk_rts1				; branch to this RTS where possible
d8a9 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* df_tk_isproc
                             ;* Check next char A for _
                             ;* Return: CC = False, CS = True
                             ;****************************************
d8aa :                       df_tk_isproc
d8aa : c95f             [ 2] 	cmp #'_'
d8ac : f001             [ 3] 	beq df_tk_isproc_true	; C=1
d8ae : 18               [ 2] 	clc
d8af :                       df_tk_isproc_true
d8af : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* df_tk_skip_ws
                             ;* Skip ws in linbuff
                             ;* Return: linoff updated to next non-ws, A = cha
                             ;****************************************
d8b0 :                       df_tk_skip_ws
d8b0 :                       df_tk_ws_loop1
d8b0 : 204ed8           [ 6] 	jsr df_tk_peek_buf
d8b3 : 20bfd8           [ 6] 	jsr df_tk_isws
d8b6 : 90f1             [ 3] 	bcc df_tk_rts1
d8b8 : e67c             [ 5] 	inc df_linoff
d8ba : 205fd8           [ 6] 	jsr df_tk_put_tok
d8bd : 90f1             [ 3] 	bcc df_tk_ws_loop1		; Always as put_tok clears C
                             
                             ;****************************************
                             ;* df_tk_skip_ws
                             ;* Skip ws in linbuff
                             ;* Return: linoff updated to next non-ws, A = cha
                             ;****************************************
                             ;df_tk_strip_ws
                             ;df_tk_sws_loop1
                             ;	jsr df_tk_peek_buf
                             ;	jsr df_tk_isws
                             ;	bcc df_tk_rts1
                             ;	inc df_linoff
                             ;	bcs df_tk_sws_loop1		; Always as C is not touch
                             
                             ;****************************************
                             ;* df_tk_isws
                             ;* Check char is ws (only space is counted)
                             ;* Return: CC = False, CS = True
                             ;****************************************
d8bf :                       df_tk_isws
d8bf : c920             [ 2] 	cmp #' '
d8c1 : d001             [ 3] 	bne df_tk_isws_false
                             	; C must be 1 here
d8c3 : 60               [ 6] 	rts
d8c4 :                       df_tk_isws_false
d8c4 :                       df_tk_expectok
d8c4 : 18               [ 2] 	clc
d8c5 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Find a character expected ignoring ws
                             ;* Input A = expected char
                             ;* CC = found, CS = Error
                             ;****************************************
AS65 Assembler for R6502 [1.42].                                     Page  153
-------------------------------- bank\bank0.s --------------------------------

d8c6 :                       df_tk_expect
d8c6 : 48               [ 3] 	pha
                             	; skip ws
d8c7 : 20b0d8           [ 6] 	jsr df_tk_skip_ws
                             	; peek the buffer
d8ca : 68               [ 4] 	pla
d8cb : a47c             [ 3] 	ldy df_linoff
d8cd : d90004           [ 4] 	cmp df_linbuff,y
                             	; if expected char then ok
d8d0 : f0f2             [ 3] 	beq df_tk_expectok
                             	; else error
d8d2 :                       df_tk_num_err
d8d2 :                       df_tk_char_err
d8d2 : 38               [ 2] 	sec
d8d3 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Find a character expected ignoring ws
                             ;* Input A = expected char
                             ;* Tokenises the character as well
                             ;* CC = found, CS = Error
                             ;****************************************
d8d4 :                       df_tk_expect_tok
d8d4 : 20c6d8           [ 6] 	jsr df_tk_expect
d8d7 : b0d0             [ 3] 	bcs df_tk_rts1
d8d9 : 2054d8           [ 6] 	jsr df_tk_get_buf
d8dc : 4c5fd8           [ 3] 	jmp df_tk_put_tok
                             
                             ;****************************************
                             ;* Find a character expected ignoring ws
                             ;* Input A = expected char
                             ;* Tokenises the character as well
                             ;* FATAL IF NOT FOUND
                             ;****************************************
d8df :                       df_tk_expect_tok_err
d8df : 20d4d8           [ 6] 	jsr df_tk_expect_tok
d8e2 : 90c5             [ 3] 	bcc df_tk_rts1
d8e4 :                       df_tk_expect_tok_fatal
                             	SWBRK DFERR_SYNTAX
                             
                             
                             ;****************************************
                             ;* Tokenise a constant number
                             ;****************************************
d8e6 :                       df_tk_num
                             	; X,A = address, linbuff must be on page boundar
d8e6 : 18               [ 2] 	clc
d8e7 : a900             [ 2] 	lda #lo(df_linbuff)
d8e9 : 657c             [ 3] 	adc df_linoff
d8eb : aa               [ 2] 	tax
d8ec : a904             [ 2] 	lda #hi(df_linbuff)
d8ee : 6900             [ 2] 	adc #0
d8f0 : a000             [ 2] 	ldy #0				; any numeric format
d8f2 : 20cec1           [ 6] 	jsr con_n_to_a
d8f5 : b0db             [ 3] 	bcs df_tk_num_err
                             	; A = format
                             	; X = how many digits processed
                             	; Jump over that many chars
d8f7 : a8               [ 2] 	tay
d8f8 : 18               [ 2] 	clc
d8f9 : 8a               [ 2] 	txa
d8fa : 657c             [ 3] 	adc df_linoff
AS65 Assembler for R6502 [1.42].                                     Page  154
-------------------------------- bank\bank0.s --------------------------------

d8fc : 857c             [ 3] 	sta df_linoff
                             	; Now tokenise an integer (always 2 bytes, but t
d8fe : 98               [ 2] 	tya
d8ff : c901             [ 2] 	cmp #NUM_DEC
d901 : d004             [ 3] 	bne df_tk_num_hexbin
d903 : a909             [ 2] 	lda #DFTK_INTDEC	; decimal always an int
d905 : d016             [ 3] 	bne df_tk_num_put
d907 :                       df_tk_num_hexbin
d907 : c902             [ 2] 	cmp #NUM_HEX
d909 : d00a             [ 3] 	bne df_tk_num_bin
d90b : a906             [ 2] 	lda #DFTK_BYTHEX	; Assume BYT
d90d : e005             [ 2] 	cpx #5				; If >4 chars then INT
d90f : 900c             [ 3] 	bcc df_tk_num_put
d911 : a90a             [ 2] 	lda #DFTK_INTHEX
d913 : d008             [ 3] 	bne df_tk_num_put
d915 :                       df_tk_num_bin
d915 : a907             [ 2] 	lda #DFTK_BYTBIN	; Assume BYT
d917 : e00b             [ 2] 	cpx #11				; If >10 chars then INT
d919 : 9002             [ 3] 	bcc df_tk_num_put
d91b : a90b             [ 2] 	lda #DFTK_INTBIN
d91d :                       df_tk_num_put
d91d : 205fd8           [ 6] 	jsr df_tk_put_tok	; Save number type (DEC,HEX,BI
d920 : a53d             [ 3] 	lda num_a
d922 : 205fd8           [ 6] 	jsr df_tk_put_tok
d925 : a53e             [ 3] 	lda num_a+1
d927 : 4c5fd8           [ 3] 	jmp df_tk_put_tok
                             
                             ;****************************************
                             ;* Tokenise a constant char
                             ;****************************************
d92a :                       df_tk_char
                             	; skip the first quote
d92a : 2054d8           [ 6] 	jsr df_tk_get_buf
                             	; put in the token
d92d : a900             [ 2] 	lda #DFTK_CHR
d92f : 205fd8           [ 6] 	jsr df_tk_put_tok
                             	; get the char value and save
d932 : 2054d8           [ 6] 	jsr df_tk_get_buf
d935 : 205fd8           [ 6] 	jsr df_tk_put_tok
                             	; always put two bytes in, even for a BYTE type
d938 : a900             [ 2] 	lda #0
d93a : 205fd8           [ 6] 	jsr df_tk_put_tok
                             	; next byte must be single quote
d93d : 2054d8           [ 6] 	jsr df_tk_get_buf
d940 : c927             [ 2] 	cmp #0x27
d942 : d08e             [ 4] 	bne df_tk_char_err
d944 : 18               [ 2] 	clc
d945 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Tokenise a constant string
                             ;****************************************
d946 :                       df_tk_str
                             	; skip the first quote
d946 : 2054d8           [ 6] 	jsr df_tk_get_buf
                             	; put in the token
d949 : a910             [ 2] 	lda #DFTK_STRLIT
d94b : 205fd8           [ 6] 	jsr df_tk_put_tok
d94e :                       df_tk_str_ch
                             	; copy string chars in to token buffer
                             	; until another quote or end of line
d94e : 2054d8           [ 6] 	jsr df_tk_get_buf
AS65 Assembler for R6502 [1.42].                                     Page  155
-------------------------------- bank\bank0.s --------------------------------

d951 : c900             [ 2] 	cmp #0
d953 : f011             [ 3] 	beq df_tk_str_err
d955 : c922             [ 2] 	cmp #0x22
d957 : f006             [ 3] 	beq df_tk_str_don
d959 : 205fd8           [ 6] 	jsr df_tk_put_tok
d95c : 4c4ed9           [ 3] 	jmp df_tk_str_ch
d95f :                       df_tk_str_don
                             	; zero terminated strings
d95f : a900             [ 2] 	lda #0
d961 : 4c5fd8           [ 3] 	jmp df_tk_put_tok
d964 :                       df_tk_var_noarry
d964 : 18               [ 2] 	clc
d965 : 60               [ 6] 	rts
d966 :                       df_tk_str_err
                             	SWBRK DFERR_SYNTAX
                             
                             
                             ;****************************************
                             ;* Tokenise a constant (num, string, char)
                             ;****************************************
d968 :                       df_tk_const
d968 : 20b0d8           [ 6] 	jsr df_tk_skip_ws
                             	; Check what constant it is
d96b : 204ed8           [ 6] 	jsr df_tk_peek_buf
                             	; Minus symbol could be start of a number
d96e : c92d             [ 2] 	cmp #'-'
d970 : f005             [ 3] 	beq df_tk_const_try_num
d972 : 206dd8           [ 6] 	jsr df_tk_isdigit
d975 : 9003             [ 3] 	bcc df_tk_const_try_str
d977 :                       df_tk_const_try_num
d977 : 4ce6d8           [ 3] 	jmp df_tk_num
d97a :                       df_tk_const_try_str
                             	; check for double quote
d97a : c922             [ 2] 	cmp #0x22
d97c : d003             [ 3] 	bne df_tk_const_try_char
d97e : 4c46d9           [ 3] 	jmp df_tk_str
d981 :                       df_tk_const_try_char
                             	; check for single apostrophe
d981 : c927             [ 2] 	cmp #0x27
d983 : d003             [ 3] 	bne df_tk_const_err
d985 : 4c2ad9           [ 3] 	jmp df_tk_char
d988 :                       df_tk_const_err
                             	SWBRK DFERR_SYNTAX
                             
                             
                             ;****************************************
                             ;* Tokenise a variable - A = mask
                             ;* Return : A = variable index
                             ;****************************************
d98a :                       df_tk_var
                             	; Find or create variable, address in X,A
d98a : 20e9d7           [ 6] 	jsr df_var_findcreate
d98d : 9001             [ 3] 	bcc df_tk_var_cont
d98f : 60               [ 6] 	rts
d990 :                       df_tk_var_cont
                             	; Save X,A for later
d990 : 48               [ 3] 	pha
d991 : 8a               [ 2] 	txa
d992 : 48               [ 3] 	pha
                             	; Put VAR escape in token buffer
d993 : a911             [ 2] 	lda #DFTK_VAR
d995 : 205fd8           [ 6] 	jsr df_tk_put_tok
AS65 Assembler for R6502 [1.42].                                     Page  156
-------------------------------- bank\bank0.s --------------------------------

                             	; Get variable address and put in token buffer
d998 : 68               [ 4] 	pla
d999 : 205fd8           [ 6] 	jsr df_tk_put_tok
d99c : 68               [ 4] 	pla
d99d : 205fd8           [ 6] 	jsr df_tk_put_tok
                             	; count of any array indices
d9a0 :                       df_tk_var_ck
                             	; check if array procesing needed
d9a0 : a95b             [ 2] 	lda #'['
d9a2 : 20d4d8           [ 6] 	jsr df_tk_expect_tok
d9a5 : b0bd             [ 3] 	bcs df_tk_var_noarry
                             	; process numeric expression in bracket
d9a7 : 4c51da           [ 3] 	jmp df_tk_narry
                             
                             
                             ;****************************************
                             ;* Tokenise a parameter in proc definition
                             ;* Return : A = variable index
                             ;****************************************
d9aa :                       df_tk_parm
                             	; if preceeding with non-local qualifier DFTK_VA
d9aa : 204ed8           [ 6] 	jsr df_tk_peek_buf
d9ad : c926             [ 2] 	cmp #DFTK_VARPARM
d9af : d006             [ 3] 	bne df_tk_parm_skip_var
                             	; get the qualifier and put in token buffer
d9b1 : 2054d8           [ 6] 	jsr df_tk_get_buf
d9b4 : 205fd8           [ 6] 	jsr df_tk_put_tok
d9b7 :                       df_tk_parm_skip_var
                             	; don't have a certain type of var
d9b7 : a900             [ 2] 	lda #0
d9b9 : 4c8ad9           [ 3] 	jmp df_tk_var
                             
                             
                             ;****************************************
                             ;* Tokenise a variable to localise
                             ;* Return : A,X = variable index
                             ;****************************************
d9bc :                       df_tk_localvar
                             	; Find or create variable, index in A
d9bc : 20e9d7           [ 6] 	jsr df_var_findcreate
d9bf : 9001             [ 3] 	bcc df_tk_localvar_cont
d9c1 : 60               [ 6] 	rts
d9c2 :                       df_tk_localvar_cont
                             	; Save variable address for later
d9c2 : 48               [ 3] 	pha
d9c3 : 8a               [ 2] 	txa
d9c4 : 48               [ 3] 	pha
                             	; Put VAR escape in token buffer
d9c5 : a911             [ 2] 	lda #DFTK_VAR
d9c7 : 205fd8           [ 6] 	jsr df_tk_put_tok
                             	; Get variable index and put in token buffer
d9ca : 68               [ 4] 	pla
d9cb : 205fd8           [ 6] 	jsr df_tk_put_tok
d9ce : 68               [ 4] 	pla
d9cf : 4c5fd8           [ 3] 	jmp df_tk_put_tok
                             
                             ;****************************************
                             ;* Tokenise array variable
                             ;* Return : A = variable index
                             ;****************************************
d9d2 :                       df_tk_arrvar
                             	; Like a local var at first
AS65 Assembler for R6502 [1.42].                                     Page  157
-------------------------------- bank\bank0.s --------------------------------

d9d2 : 20bcd9           [ 6] 	jsr df_tk_localvar
                             	; but must be array
d9d5 : a95b             [ 2] 	lda #'['
d9d7 : 20dfd8           [ 6] 	jsr df_tk_expect_tok_err
                             	; process numeric expression in bracket
d9da : 4c51da           [ 3] 	jmp df_tk_narry
                             
                             ;****************************************
                             ;* Tokenise call or def of proc
                             ;* Mode : A = 0 means def, else call
                             ;****************************************
d9dd :                       df_tk_proc
d9dd : 858b             [ 3] 	sta df_procmode
d9df : 20b0d8           [ 6] 	jsr df_tk_skip_ws
                             	; Find or create proc, index in A
d9e2 : a940             [ 2] 	lda #DFVVT_PROC
d9e4 : 20e9d7           [ 6] 	jsr df_var_findcreate
d9e7 : b066             [ 4] 	bcs df_tk_proc_err
                             
                             	; Save variable address for later
d9e9 : 868e             [ 3] 	stx df_procptr
d9eb : 858f             [ 3] 	sta df_procptr+1
                             
                             	; Put PROC escape in token buffer
d9ed : a912             [ 2] 	lda #DFTK_PROC
d9ef : 205fd8           [ 6] 	jsr df_tk_put_tok
                             	; Get variable address and put in token buffer
d9f2 : a58e             [ 3] 	lda df_procptr
d9f4 : 205fd8           [ 6] 	jsr df_tk_put_tok
d9f7 : a58f             [ 3] 	lda df_procptr+1
d9f9 : 205fd8           [ 6] 	jsr df_tk_put_tok
                             
                             	; initially assume no args
d9fc : a900             [ 2] 	lda #0
d9fe : 858c             [ 3] 	sta df_procargs
                             
                             	; Must have an open bracket
da00 : a928             [ 2] 	lda #'('
da02 : 20dfd8           [ 6] 	jsr df_tk_expect_tok_err
                             	; if immediately followed by close bracket then 
da05 : 204ed8           [ 6] 	jsr df_tk_peek_buf
da08 : c929             [ 2] 	cmp #')'
da0a : f030             [ 3] 	beq df_tk_proc_noparm
                             	; else tokenise parm variables
da0c :                       df_tk_proc_parms
da0c : 20b0d8           [ 6] 	jsr df_tk_skip_ws
                             	; call appropriate routine for mode
da0f : a58b             [ 3] 	lda df_procmode
da11 : d006             [ 3] 	bne df_tk_proc_call
                             	; tokenise parameter variable in def mode
da13 : 20aad9           [ 6] 	jsr df_tk_parm
da16 : 4c22da           [ 3] 	jmp df_tk_proc_skip_call
da19 :                       df_tk_proc_call
                             	; tokenise expression in call mode
                             	;**CHECK**
da19 : a58c             [ 3] 	lda df_procargs	; procargs could be impacted ins
da1b : 48               [ 3] 	pha
da1c : 20d1da           [ 6] 	jsr df_tk_expression
da1f : 68               [ 4] 	pla
da20 : 858c             [ 3] 	sta df_procargs
da22 :                       df_tk_proc_skip_call
da22 : b02a             [ 3] 	bcs df_tk_proc_errp
AS65 Assembler for R6502 [1.42].                                     Page  158
-------------------------------- bank\bank0.s --------------------------------

                             	; increment number of args
da24 : e68c             [ 5] 	inc df_procargs
                             	; what is next non ws char
da26 : 20b0d8           [ 6] 	jsr df_tk_skip_ws
da29 : c92c             [ 2] 	cmp #','
da2b : f006             [ 3] 	beq df_tk_proc_comma
da2d : c929             [ 2] 	cmp #')'
da2f : d01d             [ 3] 	bne df_tk_proc_errp
da31 : f009             [ 3] 	beq df_tk_proc_noparm
                             	; comma found, more parms to process
da33 :                       df_tk_proc_comma
da33 : 2054d8           [ 6] 	jsr df_tk_get_buf
da36 : 205fd8           [ 6] 	jsr df_tk_put_tok
da39 : 4c0cda           [ 3] 	jmp df_tk_proc_parms
da3c :                       df_tk_proc_noparm
                             	; consume the close bracket
da3c : 2054d8           [ 6] 	jsr df_tk_get_buf
da3f : 205fd8           [ 6] 	jsr df_tk_put_tok
                             
                             	; update arg count if def mode
da42 : a68b             [ 3] 	ldx df_procmode
da44 : d006             [ 3] 	bne df_tk_proc_skip_args
                             	; use address of proc
                             	; put arg count in dim2
da46 : a004             [ 2] 	ldy #DFVVT_DIM2
da48 : a58c             [ 3] 	lda df_procargs
da4a : 918e             [ 5] 	sta (df_procptr),y
da4c :                       df_tk_proc_skip_args
da4c : 18               [ 2] 	clc
da4d : 60               [ 6] 	rts
da4e :                       df_tk_proc_errp
da4e : 68               [ 4] 	pla
da4f :                       df_tk_proc_err
                             	SWBRK DFERR_SYNTAX
                             
                             
                             ;****************************************
                             ;* Parse array index
                             ;****************************************
da51 :                       df_tk_narry
                             	; if array open bracket encountered
                             	; then tokenise a numeric expression
da51 : 20d1da           [ 6] 	jsr df_tk_expression
                             	; If a comma is next, then another expression
da54 : a92c             [ 2] 	lda #','
da56 : 20d4d8           [ 6] 	jsr df_tk_expect_tok
da59 : b003             [ 3] 	bcs df_tk_narry_end
da5b : 20d1da           [ 6] 	jsr df_tk_expression
da5e :                       df_tk_narry_end
                             	; after the second dimension, must be close sq b
da5e : a95d             [ 2] 	lda #']'
da60 : 4cdfd8           [ 3] 	jmp df_tk_expect_tok_err
                             
                             ;****************************************
                             ;* Parse bracket
                             ;****************************************
da63 :                       df_tk_nbrkt
                             	; if  open bracket encountered
                             	; then tokenise a numeric expression
da63 : 20d1da           [ 6] 	jsr df_tk_expression
da66 : a929             [ 2] 	lda #')'
da68 : 4cdfd8           [ 3] 	jmp df_tk_expect_tok_err
AS65 Assembler for R6502 [1.42].                                     Page  159
-------------------------------- bank\bank0.s --------------------------------

                             
                             ;****************************************
                             ;* Parse call to numeric proc
                             ;****************************************
da6b :                       df_tk_nterm_proc
                             	; call mode
da6b : a901             [ 2] 	lda #1
da6d : 4cddd9           [ 3] 	jmp df_tk_proc
                             
                             ;****************************************
                             ;* Parse numeric term
                             ;****************************************
da70 :                       df_tk_nterm
                             	; skip any ws first, copying in to tokbuff
                             	; A containts the non-ws char
da70 : 20b0d8           [ 6] 	jsr df_tk_skip_ws
da73 : c900             [ 2] 	cmp #0
da75 : f004             [ 3] 	beq df_tk_nterm_done
da77 : c93a             [ 2] 	cmp #':'
da79 : d002             [ 3] 	bne df_tk_nterm_cont
da7b :                       df_tk_nterm_done
da7b :                       df_tk_nop_false
da7b : 38               [ 2] 	sec
da7c : 60               [ 6] 	rts
da7d :                       df_tk_nterm_cont
                             	; if open bracket then process it
da7d : c928             [ 2] 	cmp #'('
da7f : d009             [ 3] 	bne df_tk_nterm_tryfn
                             	; get the bracket and put in token buffer
da81 : 2054d8           [ 6] 	jsr df_tk_get_buf
da84 : 205fd8           [ 6] 	jsr df_tk_put_tok
                             	; go process the open bracket
da87 : 4c63da           [ 3] 	jmp df_tk_nbrkt
da8a :                       df_tk_nterm_tryfn
da8a : 48               [ 3] 	pha
                             	; try decoding a built-in function
da8b : a902             [ 2] 	lda #DFTK_FN
da8d : 20c4db           [ 6] 	jsr df_tk_matchtok
da90 : b00e             [ 3] 	bcs df_tk_nterm_try_proc
                             	; pull old A in to Y but don't use
da92 : 68               [ 4] 	pla
da93 : a8               [ 2] 	tay
                             	; restore A and put the token with MSB set
da94 : 8a               [ 2] 	txa
da95 : 0980             [ 2] 	ora #0x80
da97 : 205fd8           [ 6] 	jsr df_tk_put_tok
da9a : 2096db           [ 6] 	jsr df_tk_exec_parser
da9d : b01b             [ 3] 	bcs df_tk_nterm_err
da9f : 60               [ 6] 	rts
daa0 :                       df_tk_nterm_try_proc
daa0 : 68               [ 4] 	pla
                             	; if it's not a func then try proc
daa1 : 20aad8           [ 6] 	jsr df_tk_isproc
daa4 : 9006             [ 3] 	bcc df_tk_nterm_try_var
daa6 : 206bda           [ 6] 	jsr df_tk_nterm_proc
daa9 : b00f             [ 3] 	bcs df_tk_nterm_err
daab : 60               [ 6] 	rts
daac :                       df_tk_nterm_try_var
                             	; Non-zero mask means var must be this type
daac : a900             [ 2] 	lda #0
daae : 208ad9           [ 6] 	jsr df_tk_var
dab1 : b001             [ 3] 	bcs df_tk_nterm_try_const
AS65 Assembler for R6502 [1.42].                                     Page  160
-------------------------------- bank\bank0.s --------------------------------

dab3 : 60               [ 6] 	rts
dab4 :                       df_tk_nterm_try_const
                             	; Try decoding a constant
dab4 : 2068d9           [ 6] 	jsr df_tk_const
dab7 : b001             [ 3] 	bcs df_tk_nterm_err
dab9 : 60               [ 6] 	rts
daba :                       df_tk_nterm_err
                             	SWBRK DFERR_SYNTAX
                             
                             
                             ;****************************************
                             ;* Parse numeric operator
                             ;****************************************
dabc :                       df_tk_nop
dabc : 20b0d8           [ 6] 	jsr df_tk_skip_ws
dabf : c900             [ 2] 	cmp #0
dac1 : f0b8             [ 3] 	beq df_tk_nop_false
                             	; must be an operator token for numeric
dac3 : a90c             [ 2] 	lda #DFTK_OP | DFTK_STROP
dac5 : 20c4db           [ 6] 	jsr df_tk_matchtok
dac8 : b0b1             [ 3] 	bcs df_tk_nop_false
                             	; got a token
daca : 0980             [ 2] 	ora #DFTK_TOKEN
dacc : 205fd8           [ 6] 	jsr df_tk_put_tok
dacf : 18               [ 2] 	clc
dad0 : 60               [ 6] 	rts
                             
                             	
                             ;****************************************
                             ;* Parse numeric expression
                             ;****************************************
dad1 :                       df_tk_expression
                             	; Tokenise a numeric term
dad1 : 2070da           [ 6] 	jsr df_tk_nterm
dad4 : b006             [ 3] 	bcs df_tk_expre_err
                             	; Try and tokenise a numeric operator
dad6 : 20bcda           [ 6] 	jsr df_tk_nop
                             	; If an operator was tokenised
                             	; then loop back for another term
dad9 : 90f6             [ 3] 	bcc df_tk_expression
                             	; If no operator was found then
                             	; expression is done
dadb :                       df_tk_not_eos
dadb : 18               [ 2] 	clc
dadc :                       df_tk_expre_err
dadc : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Find expected token and parse expression
                             ;****************************************
dadd :                       df_tk_tok_expression
dadd : 20dfd8           [ 6] 	jsr df_tk_expect_tok_err
dae0 : 4cd1da           [ 3] 	jmp df_tk_expression
                             
                             
                             ;****************************************
                             ;* Check end of statement
                             ;****************************************
dae3 :                       df_tk_isEOS
dae3 : a93a             [ 2] 	lda #':'
dae5 : 20d4d8           [ 6] 	jsr df_tk_expect_tok
dae8 : b0f1             [ 3] 	bcs df_tk_not_eos
AS65 Assembler for R6502 [1.42].                                     Page  161
-------------------------------- bank\bank0.s --------------------------------

                             	; this is the position of the next statement
daea : a57d             [ 3] 	lda df_tokoff
                             	; put it in the last statement offset slot
daec : a47f             [ 3] 	ldy df_nxtstidx
daee : 998004           [ 5] 	sta df_tokbuff,y
daf1 : 38               [ 2] 	sec
daf2 : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* Parse user defined proc
                             ;****************************************
daf3 :                       df_tk_parse_user_proc
                             	; put proc token in as a call
daf3 : a981             [ 2] 	lda #0x81
daf5 : 205fd8           [ 6] 	jsr df_tk_put_tok
daf8 : a901             [ 2] 	lda #1
dafa : 4cddd9           [ 3] 	jmp df_tk_proc
                             
                             
                             ;****************************************
                             ;* Parse a command
                             ;* Do not fatal error if this fails
                             ;****************************************
dafd :                       df_tk_parse_command
                             	; only looking for keywords
dafd : a901             [ 2] 	lda #DFTK_KW
daff : 20c4db           [ 6] 	jsr df_tk_matchtok
                             	; if didn't find regular keywords then try non f
db02 : b010             [ 3] 	bcs df_tk_parse_command_err
                             	; if match then store token in the line buffer
                             	; Set MSB
db04 : 0980             [ 2] 	ora #0x80
db06 : 205fd8           [ 6] 	jsr df_tk_put_tok
                             	; call the parser to do tokenise based on the st
db09 : a583             [ 3] 	lda df_symoff
db0b : 2096db           [ 6] 	jsr df_tk_exec_parser
db0e : b004             [ 3] 	bcs df_tk_parse_command_err
                             	; [1] ignore white space but keep it
db10 : 20b0d8           [ 6] 	jsr df_tk_skip_ws
                             	; No error in parsing this command
db13 :                       df_tk_parse_command_done
db13 : 18               [ 2] 	clc
db14 :                       df_tk_parse_command_err
db14 : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* lexer
                             ;****************************************
db15 :                       df_lexer_line
db15 : a900             [ 2] 	lda #0
                             	; start at the beginning of the line buffer
db17 : 857c             [ 3] 	sta df_linoff
                             	; start at the beginning of the tokenised buffer
db19 : 857d             [ 3] 	sta df_tokoff
                             	; set current line to the token buffer
db1b : a980             [ 2] 	lda #lo(df_tokbuff)
db1d : 8586             [ 3] 	sta df_currlin
db1f : a904             [ 2] 	lda #hi(df_tokbuff)
db21 : 8587             [ 3] 	sta df_currlin+1
                             	; Set the line length to 0
AS65 Assembler for R6502 [1.42].                                     Page  162
-------------------------------- bank\bank0.s --------------------------------

db23 : a900             [ 2] 	lda #0
db25 : 205fd8           [ 6] 	jsr df_tk_put_tok
                             
                             	; any leading white space, ignore and discard
                             ;	jsr df_tk_strip_ws
                             
                             	; if peek next character is a number then assume
                             	; else assume a statement
db28 : 204ed8           [ 6] 	jsr df_tk_peek_buf
db2b : 206dd8           [ 6] 	jsr df_tk_isdigit
db2e : 9006             [ 3] 	bcc df_lexer_skip_lnum
                             	; if line number then capture the line number an
db30 : 20a5db           [ 6] 	jsr df_tk_linenum
db33 : 4c3edb           [ 3] 	jmp df_tk_body
db36 :                       df_lexer_skip_lnum
                             	; if no line number then zero out the line numbe
                             	; line zero will indicate an immediate mode comm
db36 : a900             [ 2] 	lda #0
db38 : 205fd8           [ 6] 	jsr df_tk_put_tok				; Line num low byte
db3b : 205fd8           [ 6] 	jsr df_tk_put_tok				; Line num high byte
db3e :                       df_tk_body
                             	; Offset for next statement
db3e : a57d             [ 3] 	lda df_tokoff
db40 : 857f             [ 3] 	sta df_nxtstidx
db42 : a900             [ 2] 	lda #0
db44 : 205fd8           [ 6] 	jsr df_tk_put_tok				; Offset to next statement
db47 : 204ed8           [ 6] 	jsr df_tk_peek_buf				; Check for a single space
db4a : 20bfd8           [ 6] 	jsr df_tk_isws					; and first character
db4d : 9002             [ 3] 	bcc df_tk_skip_1_spc
db4f : e67c             [ 5] 	inc df_linoff					; Don't tokenise this single s
db51 :                       df_tk_skip_1_spc
                             	; [1] capture white space from line buffer in to
db51 : 20b0d8           [ 6] 	jsr df_tk_skip_ws
                             	; If next non ws is zero then this is an empty l
                             	; so return with length zero but line number fil
                             	; token buffer
db54 : c900             [ 2] 	cmp #0
db56 : f03a             [ 3] 	beq df_tk_line_empty
                             	; if next char is _ then parse a user defined pr
db58 : 20aad8           [ 6] 	jsr df_tk_isproc
db5b : 9006             [ 3] 	bcc df_tk_try_command
db5d : 20f3da           [ 6] 	jsr df_tk_parse_user_proc
db60 : 4c74db           [ 3] 	jmp df_tk_done
db63 :                       df_tk_try_command
                             	; try a keyword
db63 : 20fdda           [ 6] 	jsr df_tk_parse_command
db66 : b002             [ 3] 	bcs	df_tk_try_asm
db68 : 900a             [ 3] 	bcc df_tk_done
db6a :                       df_tk_try_asm
                             	; try an asm keyword
db6a : 208cf9           [ 6] 	jsr df_tk_asm_parse_command
db6d : 9005             [ 3] 	bcc df_tk_done
db6f :                       df_tk_try_assign
                             	; nothing but to try an assignment operation
db6f : 2021df           [ 6] 	jsr df_tk_assign
db72 : b020             [ 3] 	bcs	df_tk_parseerror
db74 :                       df_tk_done
                             	; put statement index stuff here in case of mult
                             	; check for : and if present tokenise plus updat
                             	; then go back to try and process another statem
db74 : 20e3da           [ 6] 	jsr df_tk_isEOS
db77 : b0c5             [ 3] 	bcs df_tk_body
AS65 Assembler for R6502 [1.42].                                     Page  163
-------------------------------- bank\bank0.s --------------------------------

                             	; if not at end of line, then must be error
db79 : 204ed8           [ 6] 	jsr df_tk_peek_buf
db7c : c900             [ 2] 	cmp #0
db7e : d014             [ 3] 	bne df_tk_parseerror
                             	; this is the position of the next line
db80 : a57d             [ 3] 	lda df_tokoff
                             	; put it in the last statement offset slot
db82 : a47f             [ 3] 	ldy df_nxtstidx
db84 : 998004           [ 5] 	sta df_tokbuff,y
                             	; Get line length
db87 : a47d             [ 3] 	ldy df_tokoff
                             	; ensure there is always a zero after the last t
                             	; A is already zero
db89 : a900             [ 2] 	lda #0
db8b : 998004           [ 5] 	sta df_tokbuff,y
                             	; save the line length
db8e : 98               [ 2] 	tya
db8f : 8d8004           [ 4] 	sta df_tokbuff
db92 :                       df_tk_line_empty
db92 : 18               [ 2] 	clc
db93 : 60               [ 6] 	rts
db94 :                       df_tk_parseerror
                             	SWBRK DFERR_SYNTAX
                             
                             
                             ;****************************************
                             ;* df_tk_parsestatement
                             ;* Execute parse routine for this statement
                             ;* Input: df_tokoff is the token found
                             ;* Return: CC = Parsed ok, CS = Error
                             ;****************************************
db96 :                       df_tk_exec_parser
db96 : 0a               [ 2] 	asl a
db97 : aa               [ 2] 	tax
db98 : bddbdd           [ 4] 	lda df_tk_tokenjmp,x
db9b : 85a1             [ 3] 	sta df_tmpptra
db9d : bddcdd           [ 4] 	lda df_tk_tokenjmp+1,x
dba0 : 85a2             [ 3] 	sta df_tmpptra+1
dba2 : 6ca100           [ 6] 	jmp (df_tmpptra)
                             
                             
                             ;****************************************
                             ;* df_tk_linenum
                             ;* Tokenise line number
                             ;****************************************
dba5 :                       df_tk_linenum
                             	; Convert line number to 16 bit number
                             	; Save the line number
                             	; Increment the buffer pointer
dba5 : 18               [ 2] 	clc
dba6 : a900             [ 2] 	lda #lo(df_linbuff)
dba8 : 657c             [ 3] 	adc df_linoff
dbaa : aa               [ 2] 	tax
dbab : a904             [ 2] 	lda #hi(df_linbuff)
dbad : 6900             [ 2] 	adc #0
dbaf : a001             [ 2] 	ldy #1			; Decimal format only
dbb1 : 20cec1           [ 6] 	jsr con_n_to_a
dbb4 : 18               [ 2] 	clc
dbb5 : 8a               [ 2] 	txa
dbb6 : 657c             [ 3] 	adc df_linoff
dbb8 : 857c             [ 3] 	sta df_linoff
                             	; Now save line number
AS65 Assembler for R6502 [1.42].                                     Page  164
-------------------------------- bank\bank0.s --------------------------------

dbba : a53d             [ 3] 	lda num_a
dbbc : 205fd8           [ 6] 	jsr df_tk_put_tok
dbbf : a53e             [ 3] 	lda num_a+1
dbc1 : 4c5fd8           [ 3] 	jmp df_tk_put_tok
                             
                             ;****************************************
                             ;* df_tk_matchtok
                             ;* Try and find a token match against the table d
                             ;* Input:
                             ;*			Current df_linbuff and df_linoff
                             ;* Return: 	CC = No Error, CS = Error
                             ;*			df_linoff points to next char if CC else unc
                             ;*			df_symoff is the symbol table index
                             ;****************************************
dbc4 :                       df_tk_matchtok
                             	; save the mask to check types against
dbc4 : 48               [ 3] 	pha
                             	; Start at token symbols beginning
dbc5 : a946             [ 2] 	lda #lo(df_tokensyms)
dbc7 : 8581             [ 3] 	sta df_symtab
dbc9 : a9dc             [ 2] 	lda #hi(df_tokensyms)
dbcb : 8582             [ 3] 	sta df_symtab+1
dbcd : a900             [ 2] 	lda #0
dbcf : 8583             [ 3] 	sta df_symoff
dbd1 :                       df_tk_checknexttok
                             	; check this token type first
dbd1 : 68               [ 4] 	pla
dbd2 : 48               [ 3] 	pha
dbd3 : a683             [ 3] 	ldx df_symoff
dbd5 : 3d9fde           [ 4] 	and df_tk_tokentype,x
dbd8 : f032             [ 4] 	beq df_tk_symnomatch
                             	; Special check for operator token
                             	; because of order of precedence fudge
                             	; ******FIX THIS ONE DAY!!!!!!******
                             	; if parm and token type = DFTK_OP then ok
                             	; if parm and token type <> DFTK_OP then not ok
dbda : bd9fde           [ 4] 	lda df_tk_tokentype,x
dbdd : 2908             [ 2] 	and #DFTK_OP
dbdf : f009             [ 3] 	beq df_tk_matchtok_skip_op
dbe1 : 68               [ 4] 	pla
dbe2 : 48               [ 3] 	pha
dbe3 : 2908             [ 2] 	and #DFTK_OP
dbe5 : 3d9fde           [ 4] 	and df_tk_tokentype,x
dbe8 : f022             [ 4] 	beq df_tk_symnomatch
dbea :                       df_tk_matchtok_skip_op
                             	; From the line buffer current pointer
                             	; Check for a token match
dbea : a47c             [ 3] 	ldy df_linoff
dbec : a200             [ 2] 	ldx #0
dbee :                       df_tk_checktokch
                             	; Get symtable char
                             	; and mask off MSB
dbee : a181             [ 6] 	lda (df_symtab,x)
                             	; Save the value and mask off MSB
dbf0 : 48               [ 3] 	pha
dbf1 : 297f             [ 2] 	and #0x7f
                             	; Compare with current line buffer char
dbf3 : d90004           [ 4] 	cmp df_linbuff,y
                             	; If chars not match then this symbol fails
dbf6 : d013             [ 4] 	bne df_tk_symnomatchp
                             	; If match and symbol has MSB then
                             	; all of the symbol matched
AS65 Assembler for R6502 [1.42].                                     Page  165
-------------------------------- bank\bank0.s --------------------------------

dbf8 : 68               [ 4] 	pla
dbf9 : 3033             [ 4] 	bmi df_tk_symfound
                             	; else more chars to match
                             	; so increment line buffer pointers
                             	_incZPWord df_symtab
                             
dc01 : c8               [ 2] 	iny
                             	; If buffer is '.' then let this be a match
dc02 : b90004           [ 4] 	lda df_linbuff,y
dc05 : c92e             [ 2] 	cmp #'.'
dc07 : f025             [ 3] 	beq df_tk_symfound
dc09 : d0e3             [ 4] 	bne df_tk_checktokch	; branch always
dc0b :                       df_tk_symnomatchp
dc0b : 68               [ 4] 	pla
dc0c :                       df_tk_symnomatch
                             	; Increment symbol counter to next symbol
dc0c : e683             [ 5] 	inc df_symoff
dc0e :                       df_tk_symnextentry
dc0e : a200             [ 2] 	ldx #0
dc10 : a181             [ 6] 	lda (df_symtab,x)
                             	; End of symbol is MSB
dc12 : 3009             [ 3] 	bmi  df_tk_foundsymend
                             	_incZPWord df_symtab
                             
dc1a : 4c0edc           [ 3] 	jmp df_tk_symnextentry
dc1d :                       df_tk_foundsymend
                             	; Increment char to point to new symbol
                             	; for matching with line buffer
                             	_incZPWord df_symtab
                             
                             	; If next char is not zero then
                             	; try and match with line buffer
dc23 : a181             [ 6] 	lda (df_symtab,x)
dc25 : d0aa             [ 4] 	bne df_tk_checknexttok
                             	; else symbol table exhausted
                             	; so no match found
                             	; pop mask off stack
dc27 : 68               [ 4] 	pla
                             	; Zero symbol counter
dc28 : a900             [ 2] 	lda #0
dc2a : 8583             [ 3] 	sta df_symoff
                             	; Set C to indicate error (no match)
dc2c : 38               [ 2] 	sec
dc2d : 60               [ 6] 	rts
dc2e :                       df_tk_symfound
                             	; Full match with keyword in symtable but
                             	; if matching with something that ended in alpha
                             	; then check the next buffer char is not alphanu
                             	; as this could be part of a variable name
                             	; Point to next buffer char in any case
dc2e : c8               [ 2] 	iny
                             	; First mask off MSB
dc2f : 297f             [ 2] 	and #0x7f
                             	; Then check if alpha
dc31 : 2097d8           [ 6] 	jsr df_tk_isalpha
                             	; if not alpha then we're definitely done
dc34 : 9008             [ 3] 	bcc df_tk_symfound_final
                             	; else check buffer
dc36 : b90004           [ 4] 	lda df_linbuff,y
                             	; if it is an alphanum then
dc39 : 20a4d8           [ 6] 	jsr df_tk_isalphanum
                             	; do not count as a match
AS65 Assembler for R6502 [1.42].                                     Page  166
-------------------------------- bank\bank0.s --------------------------------

dc3c : b0ce             [ 3] 	bcs df_tk_symnomatch
dc3e :                       df_tk_symfound_final
                             	; pop mask off stack
dc3e : 68               [ 4] 	pla
                             	; Save line buffer pointer (points to next char)
                             	; Clear C to indicate success (match)
dc3f : 847c             [ 3] 	sty df_linoff
dc41 : a583             [ 3] 	lda df_symoff
dc43 : aa               [ 2] 	tax
dc44 : 18               [ 2] 	clc
dc45 : 60               [ 6] 	rts
                             
                             	include "dflat/tksymtab.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  TKSYMTAB.S
                             ;*  Runtime token jump table.
                             ;*  dflat uses four key tables to tokenise and ru
                             ;*  - df_tokensyms    - table of token symbols
                             ;*  - df_tk_tokentype - table of token types
                             ;*  - df_tk_tokenjmp  - table of tokenising routi
                             ;*  - df_rt_tokenjmp  - table of runtime routines
                             ;*  The key is the token symbols.  When a line is
                             ;*  in to the raw (untokenised) buffer, df_tokens
                             ;*  used to identify tokens.  The position of the
                             ;*  token is used to then look up type and jump v
                             ;*  in the other tables.
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code  
                             
                             ; Statement Token table
                             ; keywords
dc46 :                       df_tokensyms
dc46 : 80                    	db	0x80						; Implicit numeric assign
dc47 : 80                    	db	0x80						; Implicit call procedure
dc48 : bb                    	db	";"+0x80					; Comment
dc49 : 7072696e746cee        	db	"printl",'n'+0x80			; println exprlist
dc50 : 7072696e7461f4        	db	"printa",'t'+0x80			; printat x,y,exprlist
dc57 : 7072696ef4            	db	"prin",'t'+0x80				; print exprlist
dc5c : 6465e6                	db	"de",'f'+0x80				; def_subname
dc5f : 656e646465e6          	db	"endde",'f'+0x80			; enddef
dc65 : 7265747572ee          	db	"retur",'n'+0x80			; return
dc6b : 61626f72f4            	db	"abor",'t'+0x80				; abort
dc70 : 6c6f6361ec            	db	"loca",'l'+0x80				; local varlist
dc75 : 6469ed                	db	"di",'m'+0x80				; dim varlist
dc78 : 7265706561f4          	db	"repea",'t'+0x80			; repeat
dc7e : 756e7469ec            	db	"unti", 'l'+0x80			; until condition
dc83 : 666ff2                	db	"fo",'r'+0x80				; for var=start,end,incremen
dc86 : 6e6578f4              	db	"nex",'t'+0x80				; next
dc8a : 7768696ce5            	db	"whil",'e'+0x80				; while condition
dc8f : 77656ee4              	db	"wen",'d'+0x80				; wend
dc93 : 69e6                  	db	"i",'f'+0x80				; if condition
dc95 : 656c73e5              	db	"els",'e'+0x80				; else
AS65 Assembler for R6502 [1.42].                                     Page  167
-------------------------------- bank\bank0.s --------------------------------

dc99 : 656e6469e6            	db	"endi",'f'+0x80				; endif
dc9e : 656c69e6              	db	"eli",'f'+0x80				; elif condition
dca2 : 646174e1              	db	"dat",'a'+0x80				; data
dca6 : ff                    	db	0xff						; assembler command (non standard p
dca7 : 7275ee                	db	"ru",'n'+0x80				; run
dcaa : 6c6973f4              	db	"lis",'t'+0x80				; list _proc-|*|line,line
dcae : 696e7075f4            	db	"inpu",'t'+0x80				; input var
dcb3 : 746578f4              	db	"tex",'t'+0x80				; text
dcb7 : 706c6ff4              	db	"plo",'t'+0x80				; plot x,y,char|string
dcbb : 637572736ff2          	db	"curso",'r'+0x80			; cursor n
dcc1 : 636cf3                	db	"cl",'s'+0x80				; cls
dcc4 : 706f6be5              	db	"pok",'e'+0x80				; poke a,v
dcc8 : 646f6be5              	db	"dok",'e'+0x80				; doke a,v
dccc : 736f756ee4            	db	"soun",'d'+0x80				; sound
dcd1 : 6d757369e3            	db	"musi",'c'+0x80				; music
dcd6 : 706c61f9              	db	"pla",'y'+0x80				; play
dcda : 726561e4              	db	"rea",'d'+0x80				; read
dcde : 6e65f7                	db	"ne",'w'+0x80				; new
                             ;	db	"renu",'m'+0x80				; renum start,offset,incr
dce1 : 776169f4              	db	"wai",'t'+0x80				; wait delay
dce5 : 72657365f4            	db	"rese",'t'+0x80				; reset var
dcea : 68697265f3            	db	"hire",'s'+0x80				; hires col
dcef : 706f696ef4            	db	"poin",'t'+0x80				; point x,y
dcf4 : 6c696ee5              	db	"lin",'e'+0x80				; line x0,y0,x1,y1
dcf8 : 6c696e6574ef          	db	"linet",'o'+0x80			; lineto x1,y1
dcfe : 7069786d6f64e5        	db	"pixmod",'e'+0x80			; pixmode n
dd05 : 696eeb                	db	"in",'k'+0x80				; ink n
dd08 : 70617065f2            	db	"pape",'r'+0x80				; paper n
dd0d : 636972636ce5          	db	"circl",'e'+0x80			; circle x,y,r
                             ;	db	"hime",'m'+0x80				; himem addr
dd13 : 6d6f6e69746ff2        	db	"monito",'r'+0x80			; monitor
dd1a : 737072636861f2        	db	"sprcha",'r'+0x80			; sprchar sp,ch
dd21 : 737072706ff3          	db	"sprpo",'s'+0x80			; sprpos sp,x,y
dd27 : 7370727570e4          	db	"sprup",'d'+0x80			; sprupd
dd2d : 737072696e69f4        	db	"sprini",'t'+0x80			; sprinit
dd34 : 7370726d756c74e9      	db	"sprmult",'i'+0x80			; sprmulti x[],y[]
                             ;	db	"sav",'e'+0x80				; save "fname"
                             ;	db	"loa",'d'+0x80				; load "fname"
dd3c : 62736176e5            	db	"bsav",'e'+0x80				; bsave addr,len,"fname"
dd41 : 626c6f61e4            	db	"bloa",'d'+0x80				; bload addr,"fname"
dd46 : 74736176e5            	db	"tsav",'e'+0x80				; tsave "fname"
dd4b : 746c6f61e4            	db	"tloa",'d'+0x80				; tload "fname"
dd50 : 64656c6574e5          	db 	"delet",'e'+0x80			; delete "fname"
dd56 : 6469f2                	db	"di",'r'+0x80				; dir
                             ; Functions
dd59 : 7065656ba8            	db	"peek",'('+0x80				; peek(x)
dd5e : 6465656ba8            	db	"deek",'('+0x80				; peek(x)
dd63 : 737469636ba8          	db	"stick",'('+0x80			; stick(x)
dd69 : 676574a8              	db	"get",'('+0x80				; get(x)
dd6d : 636872a8              	db	"chr",'('+0x80				; chr(x)
dd71 : 6c656674a8            	db	"left",'('+0x80				; left(x$,y)
dd76 : 7269676874a8          	db	"right",'('+0x80			; right(x$,y)
dd7c : 6d6964a8              	db	"mid",'('+0x80				; mid(x$,y)
dd80 : 6c656ea8              	db	"len",'('+0x80				; len(x$)
dd84 : 6d656da8              	db	"mem",'('+0x80				; mem(x)
dd88 : 7363726ea8            	db	"scrn",'('+0x80				; scrn(x,y)
dd8d : 726e64a8              	db	"rnd",'('+0x80				; rnd(x)
dd91 : 656c6170736564a8      	db	"elapsed",'('+0x80			; elapsed(var)
dd99 : 63616c6ca8            	db	"call",'('+0x80				; call(addr,A,X,Y)
dd9e : 686578a8              	db	"hex",'('+0x80				; hex(x)
dda2 : 646563a8              	db	"dec",'('+0x80				; dec(x)
dda6 : 617363a8              	db	"asc",'('+0x80				; asc(x$)
AS65 Assembler for R6502 [1.42].                                     Page  168
-------------------------------- bank\bank0.s --------------------------------

ddaa : 76616ca8              	db	"val",'('+0x80				; val(x$)
ddae : 706978656ca8          	db	"pixel",'('+0x80			; pixel(x,y)
ddb4 : 737072686974a8        	db	"sprhit",'('+0x80			; sprhit(sp)
ddbb : 73676ea8              	db	"sgn",'('+0x80				; sgn(x)
ddbf : 61646472a8            	db	"addr",'('+0x80				; addr(var)
                             ; Numeric operators, in priority
ddc4 : aa                    	db	'*'+0x80					; Multiply
ddc5 : af                    	db 	'/'+0x80					; Divide
ddc6 : dc                    	db 	'\\'+0x80					; Modulus
ddc7 : 3cbc                  	db	'<','<'+0x80				; Shift left
ddc9 : 3ebe                  	db	'>','>'+0x80				; Shift right
ddcb : ab                    	db 	'+'+0x80					; Add
ddcc : ad                    	db	'-'+0x80					; Subtract
                             ; Bool and conditional operators, in priority
ddcd : a6                    	db '&'+0x80						; AND
ddce : fc                    	db '|'+0x80						; OR
ddcf : de                    	db '^'+0x80						; EOR
ddd0 : 3cbd                  	db "<",'='+0x80					; Less than or equal
ddd2 : 3ebd                  	db ">",'='+0x80					; Greater than or equal
ddd4 : 3cbe                  	db "<",'>'+0x80					; Not equal
ddd6 : bc                    	db '<'+0x80						; Less than
ddd7 : be                    	db '>'+0x80						; Greater than
ddd8 : 3dbd                  	db "=",'='+0x80					; Equality (always last)
                             
ddda : 00                    	db  0
                             
                             
                             	
                             	
                             	include "dflat/tkjmptab.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  TKJUMPTAB.S
                             ;*  Runtime token jump table.
                             ;*  dflat uses four key tables to tokenise and ru
                             ;*  - df_tokensyms    - table of token symbols
                             ;*  - df_tk_tokentype - table of token types
                             ;*  - df_tk_tokenjmp  - table of tokenising routi
                             ;*  - df_rt_tokenjmp  - table of runtime routines
                             ;*  The key is the token symbols.  When a line is
                             ;*  in to the raw (untokenised) buffer, df_tokens
                             ;*  used to identify tokens.  The position of the
                             ;*  token is used to then look up type and jump v
                             ;*  in the other tables.
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code  
                             
                             ; Tokeniser jump table
                             ; In token order of df_tokensyms
dddb :                       df_tk_tokenjmp
dddb : 21df                  	dw	df_tk_assign
dddd : d8df                  	dw	df_tk_callproc
dddf : 2adf                  	dw	df_tk_comment
AS65 Assembler for R6502 [1.42].                                     Page  169
-------------------------------- bank\bank0.s --------------------------------

dde1 : 71df                  	dw	df_tk_println
dde3 : 6bdf                  	dw	df_tk_printat
dde5 : 71df                  	dw	df_tk_print
dde7 : bcdf                  	dw	df_tk_def
dde9 : 11e0                  	dw	df_tk_enddef
ddeb : 13e0                  	dw	df_tk_return
dded : 11e0                  	dw	df_tk_abort
ddef : addf                  	dw	df_tk_local
ddf1 : 9edf                  	dw	df_tk_dim
ddf3 : 11e0                  	dw	df_tk_repeat
ddf5 : 16e0                  	dw	df_tk_until
ddf7 : c1df                  	dw	df_tk_for
ddf9 : 11e0                  	dw	df_tk_next
ddfb : 16e0                  	dw	df_tk_while
ddfd : 11e0                  	dw	df_tk_wend
ddff : 16e0                  	dw	df_tk_if
de01 : 11e0                  	dw	df_tk_else
de03 : 11e0                  	dw	df_tk_endif
de05 : 16e0                  	dw	df_tk_elseif
de07 : 78df                  	dw	df_tk_data
de09 : 38f9                  	dw	df_trap_monitor
de0b : 11e0                  	dw	df_tk_run
de0d : 5adf                  	dw	df_tk_list
de0f : 86df                  	dw	df_tk_input
de11 : 11e0                  	dw	df_tk_text
de13 : 26e0                  	dw	df_tk_plot
de15 : 16e0                  	dw	df_tk_cursor
de17 : 11e0                  	dw	df_tk_cls
de19 : 1ce0                  	dw	df_tk_poke
de1b : 1ce0                  	dw	df_tk_doke
de1d : 26e0                  	dw	df_tk_sound
de1f : 2ee0                  	dw	df_tk_music
de21 : 2ee0                  	dw	df_tk_play
de23 : 8fdf                  	dw	df_tk_read
de25 : 11e0                  	dw	df_tk_new
                             ;	dw	df_tk_renum
de27 : 16e0                  	dw	df_tk_wait
de29 : dadf                  	dw	df_tk_reset
de2b : 11e0                  	dw	df_tk_hires
de2d : 1ce0                  	dw	df_tk_point
de2f : 2ee0                  	dw	df_tk_line
de31 : 1ce0                  	dw	df_tk_lineto
de33 : 16e0                  	dw	df_tk_pixmode
de35 : 16e0                  	dw	df_tk_ink
de37 : 16e0                  	dw	df_tk_paper
de39 : 26e0                  	dw	df_tk_circle
                             ;	dw	df_tk_himem
de3b : 11e0                  	dw	df_tk_monitor
de3d : 1ce0                  	dw	df_tk_sprchar
de3f : 26e0                  	dw	df_tk_sprpos
de41 : 11e0                  	dw	df_tk_sprupd
de43 : 11e0                  	dw	df_tk_sprinit
de45 : 1ce0                  	dw	df_tk_sprmulti
                             ;	dw	df_tk_save
                             ;	dw	df_tk_load
de47 : 26e0                  	dw	df_tk_bsave
de49 : 1ce0                  	dw	df_tk_bload
de4b : 16e0                  	dw	df_tk_tsave
de4d : 16e0                  	dw	df_tk_tload
de4f : 16e0                  	dw	df_tk_delete
de51 : 11e0                  	dw	df_tk_dir
                             	
AS65 Assembler for R6502 [1.42].                                     Page  170
-------------------------------- bank\bank0.s --------------------------------

de53 : e4df                  	dw	df_tk_peek
de55 : e4df                  	dw	df_tk_deek
de57 : e9df                  	dw	df_tk_stick
de59 : e4df                  	dw	df_tk_get
de5b : e4df                  	dw	df_tk_chr
de5d : f7df                  	dw	df_tk_left
de5f : f7df                  	dw	df_tk_right
de61 : fddf                  	dw	df_tk_mid
de63 : e4df                  	dw	df_tk_len
de65 : e4df                  	dw	df_tk_mem
de67 : f7df                  	dw	df_tk_scrn
de69 : e4df                  	dw	df_tk_rnd
de6b : eedf                  	dw	df_tk_elapsed
de6d : 03e0                  	dw	df_tk_call
de6f : e4df                  	dw	df_tk_hex
de71 : e4df                  	dw	df_tk_dec
de73 : e4df                  	dw	df_tk_asc
de75 : e4df                  	dw	df_tk_val
de77 : f7df                  	dw	df_tk_pixel
de79 : e4df                  	dw	df_tk_sprhit
de7b : e4df                  	dw	df_tk_sgn
de7d : eedf                  	dw	df_tk_addr
                             	
de7f : 11e0                  	dw	df_tk_mult
de81 : 11e0                  	dw	df_tk_div
de83 : 11e0                  	dw	df_tk_mod
de85 : 11e0                  	dw	df_tk_asl
de87 : 11e0                  	dw	df_tk_lsr
de89 : 11e0                  	dw	df_tk_add
de8b : 11e0                  	dw	df_tk_sub
                             	
de8d : 11e0                  	dw	df_tk_and
de8f : 11e0                  	dw	df_tk_or
de91 : 11e0                  	dw	df_tk_eor
de93 : 11e0                  	dw	df_tk_lte
de95 : 11e0                  	dw	df_tk_gte
de97 : 11e0                  	dw	df_tk_ne
de99 : 11e0                  	dw	df_tk_lt
de9b : 11e0                  	dw	df_tk_gt
de9d : 11e0                  	dw	df_tk_eq
                             
                             
                             	
                             	
                             	
                             	
                             	
                             	include "dflat/tktyptab.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  RTJUMPTAB.S
                             ;*  Runtime token jump table.
                             ;*  dflat uses four key tables to tokenise and ru
                             ;*  - df_tokensyms    - table of token symbols
                             ;*  - df_tk_tokentype - table of token types
                             ;*  - df_tk_tokenjmp  - table of tokenising routi
AS65 Assembler for R6502 [1.42].                                     Page  171
-------------------------------- bank\bank0.s --------------------------------

                             ;*  - df_rt_tokenjmp  - table of runtime routines
                             ;*  The key is the token symbols.  When a line is
                             ;*  in to the raw (untokenised) buffer, df_tokens
                             ;*  used to identify tokens.  The position of the
                             ;*  token is used to then look up type and jump v
                             ;*  in the other tables.
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code  
                             
                             ; Tokeniser type table (is it a keyword, function
                             ; In token order of df_tokensyms
de9f :                       df_tk_tokentype
de9f : 01                    	db	DFTK_KW
dea0 : 01                    	db	DFTK_KW
dea1 : 01                    	db	DFTK_KW
dea2 : 01                    	db	DFTK_KW
dea3 : 01                    	db	DFTK_KW
dea4 : 01                    	db	DFTK_KW
dea5 : 01                    	db	DFTK_KW
dea6 : 01                    	db	DFTK_KW
dea7 : 01                    	db	DFTK_KW
dea8 : 01                    	db	DFTK_KW
dea9 : 01                    	db	DFTK_KW
deaa : 01                    	db	DFTK_KW
deab : 01                    	db	DFTK_KW
deac : 01                    	db	DFTK_KW
dead : 01                    	db	DFTK_KW
deae : 01                    	db	DFTK_KW
deaf : 01                    	db	DFTK_KW
deb0 : 01                    	db	DFTK_KW
deb1 : 01                    	db	DFTK_KW
deb2 : 01                    	db	DFTK_KW
deb3 : 01                    	db	DFTK_KW
deb4 : 01                    	db	DFTK_KW
deb5 : 01                    	db	DFTK_KW
deb6 : 01                    	db	DFTK_KW
deb7 : 01                    	db	DFTK_KW
deb8 : 01                    	db	DFTK_KW
deb9 : 01                    	db	DFTK_KW
deba : 01                    	db	DFTK_KW
debb : 01                    	db	DFTK_KW
debc : 01                    	db	DFTK_KW
debd : 01                    	db	DFTK_KW
debe : 01                    	db	DFTK_KW
debf : 01                    	db	DFTK_KW
dec0 : 01                    	db	DFTK_KW
dec1 : 01                    	db	DFTK_KW
dec2 : 01                    	db	DFTK_KW
dec3 : 01                    	db	DFTK_KW
dec4 : 01                    	db	DFTK_KW
                             ;	db	DFTK_KW
dec5 : 01                    	db	DFTK_KW
dec6 : 01                    	db	DFTK_KW
dec7 : 01                    	db	DFTK_KW
dec8 : 01                    	db	DFTK_KW
dec9 : 01                    	db	DFTK_KW
deca : 01                    	db	DFTK_KW
decb : 01                    	db	DFTK_KW
decc : 01                    	db	DFTK_KW
AS65 Assembler for R6502 [1.42].                                     Page  172
-------------------------------- bank\bank0.s --------------------------------

decd : 01                    	db	DFTK_KW
dece : 01                    	db	DFTK_KW
                             ;	db	DFTK_KW
decf : 01                    	db	DFTK_KW
ded0 : 01                    	db	DFTK_KW
ded1 : 01                    	db	DFTK_KW
ded2 : 01                    	db	DFTK_KW
ded3 : 01                    	db	DFTK_KW
ded4 : 01                    	db	DFTK_KW
                             ;	db	DFTK_KW
                             ;	db	DFTK_KW
ded5 : 01                    	db	DFTK_KW
ded6 : 01                    	db	DFTK_KW
ded7 : 01                    	db	DFTK_KW
ded8 : 01                    	db	DFTK_KW
ded9 : 01                    	db	DFTK_KW
deda : 01                    	db	DFTK_KW
                             
dedb : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
dedc : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
dedd : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
dede : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
dedf : 42                    	db 	DFTK_FN | DFTK_STR
dee0 : 42                    	db 	DFTK_FN | DFTK_STR
dee1 : 42                    	db 	DFTK_FN | DFTK_STR
dee2 : 42                    	db 	DFTK_FN | DFTK_STR
dee3 : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
dee4 : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
dee5 : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
dee6 : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
dee7 : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
dee8 : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
dee9 : 42                    	db 	DFTK_FN | DFTK_STR
deea : 42                    	db 	DFTK_FN | DFTK_STR
deeb : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
deec : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
deed : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
deee : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
deef : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
def0 : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
                             	;* Operators add the order of precedence (0=high
def1 : 38                    	db 	DFTK_OP | DFTK_INT | DFTK_BYT + 0
def2 : 38                    	db 	DFTK_OP | DFTK_INT | DFTK_BYT + 0
def3 : 38                    	db 	DFTK_OP | DFTK_INT | DFTK_BYT + 0
def4 : 39                    	db 	DFTK_OP | DFTK_INT | DFTK_BYT + 1
def5 : 39                    	db 	DFTK_OP | DFTK_INT | DFTK_BYT + 1
def6 : 3e                    	db 	DFTK_OP | DFTK_STROP | DFTK_INT | DFTK_BYT +
def7 : 3a                    	db 	DFTK_OP | DFTK_INT | DFTK_BYT + 2
                             
def8 : 3d                    	db 	DFTK_OP | DFTK_INT | DFTK_BYT + 5
def9 : 3d                    	db 	DFTK_OP | DFTK_INT | DFTK_BYT + 5
defa : 3d                    	db 	DFTK_OP | DFTK_INT | DFTK_BYT + 5
defb : 3c                    	db 	DFTK_OP | DFTK_INT | DFTK_BYT + 4
defc : 3c                    	db 	DFTK_OP | DFTK_INT | DFTK_BYT + 4
defd : 3c                    	db 	DFTK_OP | DFTK_INT | DFTK_BYT + 4
defe : 3c                    	db 	DFTK_OP | DFTK_INT | DFTK_BYT + 4
deff : 3c                    	db 	DFTK_OP | DFTK_INT | DFTK_BYT + 4
df00 : 3f                    	db 	DFTK_OP | DFTK_INT | DFTK_BYT + 7
                             
                             
                             	
                             	
AS65 Assembler for R6502 [1.42].                                     Page  173
-------------------------------- bank\bank0.s --------------------------------

                             	
                             	
                             
                             	include "dflat/toksubs.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  TOKSUBS.S
                             ;*  Module that implements the tokenisation of ke
                             ;*  When a line is being parsed, the index of the
                             ;*  found in the symbol table is used to call a r
                             ;*  here.  The job of a routine here is then to f
                             ;*  parse the raw input e.g. a command that takes
                             ;*  parameters, need to do what it needs to ident
                             ;*  Despite the number of keywords in dflat, this
                             ;*  anywhere near the size of rtsubs.s (the runti
                             ;*  equivalent of this) because there is so much 
                             ;*  synactically.
                             ;*  The tokenised output is put in to its own buf
                             ;*  if the whole input was tokenised successfully
                             ;*  dflat will either try and execute (if in imme
                             ;*  mode), or save it to program memory in line n
                             ;*  order.
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code  
                             
df01 :                       mod_sz_toksubs_s
                             
                             ;* General routine to tokenise a mandatory variab
df01 :                       df_tk_variable
df01 : 20b0d8           [ 6] 	jsr df_tk_skip_ws
                             	; tokenise a variable
df04 : 204ed8           [ 6] 	jsr df_tk_peek_buf
df07 : 2097d8           [ 6] 	jsr df_tk_isalpha
df0a : 9013             [ 3] 	bcc df_tk_error
df0c : a900             [ 2] 	lda #0
df0e : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Parse assignment preamble
                             ;****************************************
df0f :                       df_tk_preassign
                             	; Put assignment token
                             	; assume its a numeric int for now
df0f : a980             [ 2] 	lda #0x80
df11 : 205fd8           [ 6] 	jsr df_tk_put_tok
                             	
                             	; first find or create a variable
df14 : 2001df           [ 6] 	jsr df_tk_variable
df17 : 208ad9           [ 6] 	jsr df_tk_var
                             	; next char should be '='
df1a : a93d             [ 2] 	lda #'='
df1c : 4cdfd8           [ 3] 	jmp df_tk_expect_tok_err
                             
AS65 Assembler for R6502 [1.42].                                     Page  174
-------------------------------- bank\bank0.s --------------------------------

df1f :                       df_tk_error
                             	SWBRK DFERR_SYNTAX
                             
                             
                             ;****************************************
                             ;* Parse numeric assignment
                             ;****************************************
df21 :                       df_tk_assign
df21 : 200fdf           [ 6] 	jsr df_tk_preassign
                             	; tokenise an expression (int or byte)
df24 : 20d1da           [ 6] 	jsr df_tk_expression
df27 : b0f6             [ 3] 	bcs df_tk_error
df29 : 60               [ 6] 	rts
                             
df2a :                       df_tk_comment
                             	; copy all subsequent chars to token
df2a : 2054d8           [ 6] 	jsr df_tk_get_buf
df2d : f006             [ 3] 	beq df_tk_comment_done
df2f : 205fd8           [ 6] 	jsr df_tk_put_tok
df32 : 4c2adf           [ 3] 	jmp df_tk_comment
df35 :                       df_tk_comment_done
df35 : 18               [ 2] 	clc
df36 : 60               [ 6] 	rts
                             
                             ; Utility to get procedure name with _
df37 :                       df_tk_listp_procname
                             	; try and find the first proc
df37 : a95f             [ 2] 	lda #'_'
df39 : 20d4d8           [ 6] 	jsr df_tk_expect_tok
df3c : b01a             [ 3] 	bcs df_tk_listp_procname_err
                             	; now get first alpha then all alphanum
df3e : 204ed8           [ 6] 	jsr df_tk_peek_buf
df41 : 2097d8           [ 6] 	jsr df_tk_isalpha
df44 : 9012             [ 3] 	bcc df_tk_listp_procname_err
df46 :                       df_tk_listp_procname_ch
df46 : 204ed8           [ 6] 	jsr df_tk_peek_buf
df49 : 20a4d8           [ 6] 	jsr df_tk_isalphanum
df4c : 9009             [ 3] 	bcc df_tk_listp_procname_ok
df4e : 2054d8           [ 6] 	jsr df_tk_get_buf
df51 : 205fd8           [ 6] 	jsr df_tk_put_tok
df54 : 4c46df           [ 3] 	jmp df_tk_listp_procname_ch
df57 :                       df_tk_listp_procname_ok
df57 : 60               [ 6] 	rts		; C=0
df58 :                       df_tk_listp_procname_err
df58 : 38               [ 2] 	sec
df59 : 60               [ 6] 	rts
                             
                             ; list		: list whole program
                             ; list n	: list line n to end
                             ; list *	: list all procedures
                             ; list _proc: list _proc lines
df5a :                       df_tk_list
df5a : 2037df           [ 6] 	jsr df_tk_listp_procname
df5d : 900b             [ 3] 	bcc df_tk_list_done
                             	; if not found try '*' or normal list
df5f :                       df_tk_list_procs
                             	; first try for list symbol
df5f : a92a             [ 2] 	lda #'*'
df61 : 20d4d8           [ 6] 	jsr df_tk_expect_tok
df64 : 9004             [ 3] 	bcc df_tk_list_done
                             	; else normal line number or nothing
df66 :                       df_tk_list_line
AS65 Assembler for R6502 [1.42].                                     Page  175
-------------------------------- bank\bank0.s --------------------------------

                             	; tokenise an expression, nothing is ok
df66 : 20d1da           [ 6] 	jsr df_tk_expression
df69 : 18               [ 2] 	clc
df6a :                       df_tk_list_done
df6a : 60               [ 6] 	rts
                             
                             ; printat,print,println can have 0,1 or many expr
df6b :                       df_tk_printat
                             	; Must get 2 parms for x,y
df6b : 201ce0           [ 6] 	jsr df_tk_2parms
                             	; try getting more parms
df6e : 4c7ddf           [ 3] 	jmp df_tk_expr_more
df71 :                       df_tk_println
df71 :                       df_tk_print
                             	; tokenise an expression ok if null
df71 : 20d1da           [ 6] 	jsr df_tk_expression
df74 : 9007             [ 3] 	bcc df_tk_expr_more
df76 :                       df_tk_print_done
df76 :                       df_tk_data_done
df76 : 18               [ 2] 	clc
df77 : 60               [ 6] 	rts
                             
                             ; these must have 1 or more expressions
df78 :                       df_tk_data
df78 :                       df_tk_asm_db
df78 :                       df_tk_asm_dw
df78 :                       df_tk_next_expr
                             	; tokenise an expression
df78 : 20d1da           [ 6] 	jsr df_tk_expression
df7b : b065             [ 3] 	bcs df_tk_error2
                             ; this loop keeps processing comma seprated exore
df7d :                       df_tk_expr_more
                             	; is there more to come?
df7d : a92c             [ 2] 	lda #','
df7f : 20d4d8           [ 6] 	jsr df_tk_expect_tok
df82 : b0f2             [ 3] 	bcs df_tk_data_done
df84 : 90f2             [ 3] 	bcc df_tk_next_expr
                             
df86 :                       df_tk_input
df86 : 20b0d8           [ 6] 	jsr df_tk_skip_ws
                             	; tokenise a variable
df89 : 2001df           [ 6] 	jsr df_tk_variable
df8c : 4c8ad9           [ 3] 	jmp df_tk_var
                             	
df8f :                       df_tk_read
                             	; tokenise a variable
df8f : 2001df           [ 6] 	jsr df_tk_variable
df92 : 208ad9           [ 6] 	jsr df_tk_var
                             	; if not at the end then keep going
df95 : a92c             [ 2] 	lda #','
df97 : 20d4d8           [ 6] 	jsr df_tk_expect_tok
df9a : 90f3             [ 3] 	bcc df_tk_read
df9c : 18               [ 2] 	clc
df9d : 60               [ 6] 	rts
                             
df9e :                       df_tk_dim
                             	; tokenise a variable
df9e : 2001df           [ 6] 	jsr df_tk_variable
dfa1 : 20d2d9           [ 6] 	jsr df_tk_arrvar
                             	; if not at the end then keep going
dfa4 : a92c             [ 2] 	lda #','
dfa6 : 20d4d8           [ 6] 	jsr df_tk_expect_tok
AS65 Assembler for R6502 [1.42].                                     Page  176
-------------------------------- bank\bank0.s --------------------------------

dfa9 : 90f3             [ 3] 	bcc df_tk_dim
dfab : 18               [ 2] 	clc
dfac : 60               [ 6] 	rts
                             
dfad :                       df_tk_local
                             	; tokenise a variable
dfad : 2001df           [ 6] 	jsr df_tk_variable
dfb0 : 20bcd9           [ 6] 	jsr df_tk_localvar
                             	; if not at the end then keep going
dfb3 : a92c             [ 2] 	lda #','
dfb5 : 20d4d8           [ 6] 	jsr df_tk_expect_tok
dfb8 : 90f3             [ 3] 	bcc df_tk_local
dfba : 18               [ 2] 	clc
dfbb : 60               [ 6] 	rts
                             
                             ; A = 0 : Def
                             ; A = 1 : Call
dfbc :                       df_tk_def
dfbc : a900             [ 2] 	lda #0
dfbe : 4cddd9           [ 3] 	jmp df_tk_proc
                             
                             ; syntax : for a=1,10,1
dfc1 :                       df_tk_for
dfc1 : 20b0d8           [ 6] 	jsr df_tk_skip_ws
                             
                             	; tokenise the for variable
dfc4 : a901             [ 2] 	lda #DFVVT_INT
dfc6 : 208ad9           [ 6] 	jsr df_tk_var
                             
                             	; always expect '='
                             	; then starting value
dfc9 : a93d             [ 2] 	lda #'='
dfcb : 20ddda           [ 6] 	jsr df_tk_tok_expression
                             	
                             	; always expect ',' separator
                             	; then ending value
dfce : a92c             [ 2] 	lda #','
dfd0 : 20ddda           [ 6] 	jsr df_tk_tok_expression
                             
                             	; always expect ',' separator
                             	; then step value
dfd3 : a92c             [ 2] 	lda #','
dfd5 : 4cddda           [ 3] 	jmp df_tk_tok_expression
                             
                             	
                             ; call to proc should not occur by itself
dfd8 :                       df_tk_callproc
dfd8 : 38               [ 2] 	sec
dfd9 : 60               [ 6] 	rts
                             
                             ; timer reset expects an int variable only
dfda :                       df_tk_reset
dfda : 20b0d8           [ 6] 	jsr df_tk_skip_ws
                             
                             	; tokenise a variable
dfdd : a901             [ 2] 	lda #DFVVT_INT
dfdf : 4c8ad9           [ 3] 	jmp df_tk_var
                             
dfe2 :                       df_tk_error2
                             	SWBRK DFERR_SYNTAX
                             
                             
AS65 Assembler for R6502 [1.42].                                     Page  177
-------------------------------- bank\bank0.s --------------------------------

                             ; These functions expect 1 parmeter
dfe4 :                       df_tk_len
dfe4 :                       df_tk_chr
dfe4 :                       df_tk_get
dfe4 :                       df_tk_deek
dfe4 :                       df_tk_vpeek
dfe4 :                       df_tk_peek
dfe4 :                       df_tk_mem
dfe4 :                       df_tk_rnd
dfe4 :                       df_tk_hex
dfe4 :                       df_tk_dec
dfe4 :                       df_tk_asc
dfe4 :                       df_tk_val
dfe4 :                       df_tk_sprhit
dfe4 :                       df_tk_sgn
dfe4 : 20d1da           [ 6] 	jsr df_tk_expression
dfe7 : b0f9             [ 3] 	bcs df_tk_error2
dfe9 :                       df_tk_closebrkt
dfe9 :                       df_tk_stick				; This function needs no parms
dfe9 : a929             [ 2] 	lda #')'
dfeb : 4cdfd8           [ 3] 	jmp df_tk_expect_tok_err
                             
                             ; These function expect a variable only
dfee :                       df_tk_addr
dfee :                       df_tk_elapsed
dfee : 2001df           [ 6] 	jsr df_tk_variable
dff1 : 208ad9           [ 6] 	jsr df_tk_var
                             	; must have close braket
dff4 : 4ce9df           [ 3] 	jmp df_tk_closebrkt
                             
                             ; These functions expect 2 parameters
dff7 :                       df_tk_left
dff7 :                       df_tk_right
dff7 :                       df_tk_scrn
dff7 :                       df_tk_pixel
dff7 : 201ce0           [ 6] 	jsr df_tk_2parms
dffa : 4ce9df           [ 3] 	jmp df_tk_closebrkt
                             
                             ; These functions expect 3 parameters
dffd :                       df_tk_mid
dffd : 2026e0           [ 6] 	jsr df_tk_3parms
e000 : 4ce9df           [ 3] 	jmp df_tk_closebrkt
                             
                             ; These functions expect 4 parameters
e003 :                       df_tk_call
e003 : 201ce0           [ 6] 	jsr df_tk_2parms
e006 : a92c             [ 2] 	lda #','
e008 : 20dfd8           [ 6] 	jsr df_tk_expect_tok_err
e00b : 201ce0           [ 6] 	jsr df_tk_2parms
e00e : 4ce9df           [ 3] 	jmp df_tk_closebrkt
                             
                             ;all these commands require no parameters
e011 :                       df_tk_else
e011 :                       df_tk_endif
e011 :                       df_tk_enddef
e011 :                       df_tk_abort
e011 :                       df_tk_repeat
e011 :                       df_tk_next
e011 :                       df_tk_wend
e011 :                       df_tk_run
e011 :                       df_tk_cls
e011 :                       df_tk_new
AS65 Assembler for R6502 [1.42].                                     Page  178
-------------------------------- bank\bank0.s --------------------------------

e011 :                       df_tk_mult
e011 :                       df_tk_div
e011 :                       df_tk_mod
e011 :                       df_tk_asl
e011 :                       df_tk_lsr
e011 :                       df_tk_add
e011 :                       df_tk_sub
e011 :                       df_tk_and
e011 :                       df_tk_or
e011 :                       df_tk_eor
e011 :                       df_tk_lte
e011 :                       df_tk_lt
e011 :                       df_tk_gte
e011 :                       df_tk_gt
e011 :                       df_tk_ne
e011 :                       df_tk_eq
e011 :                       df_tk_monitor
e011 :                       df_tk_sprupd
e011 :                       df_tk_sprinit
e011 :                       df_tk_text
e011 :                       df_tk_hires
e011 :                       df_tk_dir
e011 : 18               [ 2] 	clc
e012 : 60               [ 6] 	rts
                             
                             ; 0 or 1 parameter special!
e013 :                       df_tk_return
e013 : 4cd1da           [ 3] 	jmp df_tk_expression
                             
                             
                             ; These commands expect 1 parameter	
e016 :                       df_tk_while
e016 :                       df_tk_until
e016 :                       df_tk_if
e016 :                       df_tk_elseif
e016 :                       df_tk_wait
e016 :                       df_tk_cursor
e016 :                       df_tk_del
e016 :                       df_tk_chdir
e016 :                       df_tk_pixmode
e016 :                       df_tk_ink
e016 :                       df_tk_paper
                             ;df_tk_himem
e016 :                       df_tk_tload
e016 :                       df_tk_tsave
e016 :                       df_tk_delete
e016 :                       df_tk_asm_org
e016 :                       df_tk_asm_opt
e016 :                       df_tk_asm_ds
                             
                             	; first parm
e016 : 20d1da           [ 6] 	jsr df_tk_expression
e019 : b0c7             [ 4] 	bcs df_tk_error2
e01b : 60               [ 6] 	rts
                             
                             ; These commands expect 2 numeric parameters
e01c :                       df_tk_poke
e01c :                       df_tk_doke
e01c :                       df_tk_point
e01c :                       df_tk_sprchar
e01c :                       df_tk_sprmulti
                             ;df_tk_load
AS65 Assembler for R6502 [1.42].                                     Page  179
-------------------------------- bank\bank0.s --------------------------------

                             ;df_tk_save
e01c :                       df_tk_bload
e01c :                       df_tk_lineto
e01c :                       df_tk_2parms
                             	; first parm
e01c : 20d1da           [ 6] 	jsr df_tk_expression
e01f : b0c1             [ 4] 	bcs df_tk_error2
                             	; tokenise second parm
e021 : a92c             [ 2] 	lda #','
e023 : 4cddda           [ 3] 	jmp df_tk_tok_expression
                             
                             ; these commands expect 3 numeric parameters
e026 :                       df_tk_hchar
e026 :                       df_tk_plot
e026 :                       df_tk_circle
e026 :                       df_tk_sound
e026 :                       df_tk_colour
e026 :                       df_tk_spritepos
                             ;df_tk_renum
e026 :                       df_tk_sprpos
e026 :                       df_tk_bsave
e026 :                       df_tk_3parms
e026 : 201ce0           [ 6] 	jsr df_tk_2parms
                             	; tokenise third parm
e029 : a92c             [ 2] 	lda #','
e02b : 4cddda           [ 3] 	jmp df_tk_tok_expression
                             
                             ; these commands expect 4 numeric parameters
e02e :                       df_tk_play
e02e :                       df_tk_music
e02e :                       df_tk_line
e02e :                       df_tk_4parms
e02e : 201ce0           [ 6] 	jsr df_tk_2parms
e031 : a92c             [ 2] 	lda #','
e033 : 20dfd8           [ 6] 	jsr df_tk_expect_tok_err
e036 : 4c1ce0           [ 3] 	jmp df_tk_2parms
                             
                             ;df_tk_fill
                             ;df_tk_5parms
                             ;	jsr df_tk_3parms
                             ;	lda #','
                             ;	jsr df_tk_expect_tok_err
                             ;	jmp df_tk_2parms
                             
e039 :                       mod_sz_toksubs_e
                             
                             
e039 :                       mod_sz_tokenise_e
                             
                             
                             
                             	include "dflat/progedit.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  PROGEDIT.S
                             ;*  dflat module to enable editing of a dflat pro
AS65 Assembler for R6502 [1.42].                                     Page  180
-------------------------------- bank\bank0.s --------------------------------

                             ;*  dflat bascially starts here - waiting for use
                             ;*  when a line is entered, if it is not preceede
                             ;*  line number it is tokenised and attempted to 
                             ;*  immediatly.  If it is preceeded by a line num
                             ;*  number is used to save the tokenised line in 
                             ;*  position in memory.
                             ;*  So this is just like a good old editing sessi
                             ;*  nearly any common flavour of 80s basic. Howev
                             ;*  tokenises everything except whitespace and st
                             ;*  constants - even when saving.  Unlike my trus
                             ;*  where I could type in any garbage and it woul
                             ;*  saved with the line number, dflat needs to be
                             ;*  tokenise the line.  So it's actually a bit mo
                             ;*  Atari 8 bit BASIC.
                             ;*
                             ;************************************************
                             
e039 :                       mod_sz_progedit_s
                             
                             ;****************************************
                             ;* df_pg_find_line
                             ;* Find a line number in X(L), A(H)
                             ;* Return X(L), A(H) of line, Y = Length
                             ;* C=1 Exact match not found, C=0 Exact Found
                             ;* If not exact match then next highest line addr
                             ;* Will be in X and A
                             ;****************************************
e039 :                       df_pg_find_line
e039 : 863d             [ 3] 	stx num_a
e03b : 853e             [ 3] 	sta num_a+1
e03d : a565             [ 3] 	lda df_prgstrt
e03f : 8549             [ 3] 	sta num_tmp
e041 : a566             [ 3] 	lda df_prgstrt+1
e043 : 854a             [ 3] 	sta num_tmp+1
e045 :                       df_pg_check_next_line
e045 : a549             [ 3] 	lda num_tmp
e047 : c567             [ 3] 	cmp df_prgend
e049 : d011             [ 3] 	bne df_pg_check_line
e04b : a54a             [ 3] 	lda num_tmp+1
e04d : c568             [ 3] 	cmp df_prgend+1
e04f : d00b             [ 3] 	bne df_pg_check_line
e051 :                       df_pr_line_gt_target	
                             	; End of program or line > target
                             	; X,A = address of finish
                             	; Load Y with the length
e051 : a200             [ 2] 	ldx #0
e053 : a149             [ 6] 	lda (num_tmp,x)
e055 : a8               [ 2] 	tay
e056 : a649             [ 3] 	ldx num_tmp
e058 : a54a             [ 3] 	lda num_tmp+1
e05a : 38               [ 2] 	sec
e05b : 60               [ 6] 	rts
e05c :                       df_pg_check_line
e05c : 38               [ 2] 	sec					; Do a trial subtract of
e05d : a001             [ 2] 	ldy #DFTK_LINNUM	; target - line
e05f : a53d             [ 3] 	lda num_a
e061 : f149             [ 5] 	sbc (num_tmp),y
e063 : 854b             [ 3] 	sta num_tmp+2		; Partial result of sbc
e065 : c8               [ 2] 	iny
e066 : a53e             [ 3] 	lda num_a+1
e068 : f149             [ 5] 	sbc (num_tmp),y
e06a : 054b             [ 3] 	ora num_tmp+2		; or with partial result for z ch
AS65 Assembler for R6502 [1.42].                                     Page  181
-------------------------------- bank\bank0.s --------------------------------

                             	; If C=0 then line > target (done)
e06c : 90e3             [ 3] 	bcc df_pr_line_gt_target
                             	; If partial result Z=0 then got an exact match
e06e : f00f             [ 3] 	beq df_pr_line_match
                             	; Else we go to next line
e070 : a200             [ 2] 	ldx #0
e072 : 18               [ 2] 	clc
e073 : a549             [ 3] 	lda num_tmp
e075 : 6149             [ 6] 	adc (num_tmp,x)
e077 : 8549             [ 3] 	sta num_tmp
e079 : 90ca             [ 3] 	bcc df_pg_check_next_line
e07b : e64a             [ 5] 	inc num_tmp+1
e07d : d0c6             [ 3] 	bne df_pg_check_next_line	; Always
e07f :                       df_pr_line_match
e07f : a200             [ 2] 	ldx #0
e081 : a149             [ 6] 	lda (num_tmp,x)
e083 : a8               [ 2] 	tay
e084 : a649             [ 3] 	ldx num_tmp
e086 : a54a             [ 3] 	lda num_tmp+1
e088 : 18               [ 2] 	clc
e089 : 60               [ 6] 	rts
                             	
                             ;****************************************
                             ;* df_pg_insert_block
                             ;* Insert a block at adr (X, A) of size Y
                             ;* df_prgend updated
                             ;* C=1 Error, C=0 Ok
                             ;****************************************
e08a :                       df_pg_insert_block
                             	; Inserting requires a block copy from
                             	; end of program space to the insert address
                             	
                             	; Save address as this is the lowest address
e08a : 863d             [ 3] 	stx num_a
e08c : 853e             [ 3] 	sta num_a+1
                             	; End of program space is the first byte to move
e08e : a567             [ 3] 	lda df_prgend
e090 : 8545             [ 3] 	sta num_x
e092 : a568             [ 3] 	lda df_prgend+1
e094 : 8546             [ 3] 	sta num_x+1	
e096 :                       df_pg_insert_byte
                             	; Move a byte from the current top
e096 : a200             [ 2] 	ldx #0
e098 : a145             [ 6] 	lda (num_x,x)
                             	; To the new top (+Y)
e09a : 9145             [ 5] 	sta (num_x),y
                             	; Compare current address with lowest
e09c : a545             [ 3] 	lda num_x
e09e : c53d             [ 3] 	cmp num_a
e0a0 : d012             [ 3] 	bne df_pg_insert_next_byte
e0a2 : a546             [ 3] 	lda num_x+1
e0a4 : c53e             [ 3] 	cmp num_a+1
e0a6 : d00c             [ 3] 	bne df_pg_insert_next_byte
                             	; Finished, update program end pointer
e0a8 : 18               [ 2] 	clc
e0a9 : 98               [ 2] 	tya
e0aa : 6567             [ 3] 	adc df_prgend
e0ac : 8567             [ 3] 	sta df_prgend
                             	_bcc 2
                             
e0b0 : e668             [ 5] 	inc df_prgend+1
e0b2 : 18               [ 2] 	clc
AS65 Assembler for R6502 [1.42].                                     Page  182
-------------------------------- bank\bank0.s --------------------------------

e0b3 : 60               [ 6] 	rts	; C=0
e0b4 :                       df_pg_insert_next_byte
                             	; Decrement current address (trashes A)
                             	_decZPWordA num_x
                             
e0bc : 4c96e0           [ 3] 	jmp df_pg_insert_byte
                             
                             ;****************************************
                             ;* df_pg_delete_block
                             ;* Delete a block at adr (X, A) of size Y
                             ;* df_prgend updated
                             ;* C=1 Error, C=0 Ok
                             ;****************************************
e0bf :                       df_pg_delete_block
                             	; Deleting requires a block copy from
                             	; deletion address to end of program
                             	
                             	; Save address as this is the start address
e0bf : 863d             [ 3] 	stx num_a
e0c1 : 853e             [ 3] 	sta num_a+1
e0c3 : a200             [ 2] 	ldx #0	; No indirect indexing
e0c5 :                       df_pg_delete_byte
                             	; Move a byte from current+Y
e0c5 : b13d             [ 5] 	lda (num_a),y
                             	; Down to current (x=0)
e0c7 : 813d             [ 6] 	sta (num_a,x)
                             	; Compare current address with lowest
e0c9 : a53d             [ 3] 	lda num_a
e0cb : c567             [ 3] 	cmp df_prgend
e0cd : d017             [ 3] 	bne df_pg_delete_next_byte
e0cf : a53e             [ 3] 	lda num_a+1
e0d1 : c568             [ 3] 	cmp df_prgend+1
e0d3 : d011             [ 3] 	bne df_pg_delete_next_byte
                             	; Finished, update program end pointer
e0d5 : 843d             [ 3] 	sty num_a
e0d7 : 38               [ 2] 	sec
e0d8 : a567             [ 3] 	lda df_prgend
e0da : e53d             [ 3] 	sbc num_a
e0dc : 8567             [ 3] 	sta df_prgend
e0de : a568             [ 3] 	lda df_prgend+1
e0e0 : e900             [ 2] 	sbc #0
e0e2 : 8568             [ 3] 	sta df_prgend+1
e0e4 : 18               [ 2] 	clc
e0e5 : 60               [ 6] 	rts
e0e6 :                       df_pg_delete_next_byte
                             	; Increment current address
                             	_incZPWord num_a
                             
e0ec : 4cc5e0           [ 3] 	jmp df_pg_delete_byte
                             
                             
                             ;****************************************
                             ;* Get a line of input
                             ;* Input: C=1 for echo, 0 for no echo
                             ;* Output: C=0 means linbuff is valid
                             ;****************************************
e0ef :                       df_pg_inputline
                             	; C is set on input for echo or not
                             	; Read a line of input
e0ef : 203fc4           [ 6] 	jsr io_read_line
                             	
                             	; If nothing entered then sec
AS65 Assembler for R6502 [1.42].                                     Page  183
-------------------------------- bank\bank0.s --------------------------------

e0f2 : 98               [ 2] 	tya
e0f3 : d002             [ 3] 	bne df_pg_inputline_ok
e0f5 : 38               [ 2] 	sec
e0f6 : 60               [ 6] 	rts
e0f7 :                       df_pg_inputline_ok
                             	; Copy input bytes to line buffer
                             	; for lexical analysis
e0f7 :                       df_pg_copyinputtolinbuff
e0f7 : b139             [ 5] 	lda (buf_lo),y
e0f9 : 990004           [ 5] 	sta df_linbuff,y
e0fc : 88               [ 2] 	dey
e0fd : 10f8             [ 3] 	bpl df_pg_copyinputtolinbuff
e0ff : 18               [ 2] 	clc
e100 : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* df_pg_dflat
                             ;* Start a dflat editing session
                             ;****************************************
e101 :                       df_pg_dflat
                             	; reset stack pointer
e101 : a2ff             [ 2] 	ldx #255
e103 : 9a               [ 2] 	txs
                             
                             	; error handler address
e104 : a9aa             [ 2] 	lda #lo(df_trap_error)
e106 : 8560             [ 3] 	sta df_pc
e108 : a9f8             [ 2] 	lda #hi(df_trap_error)
e10a : 8561             [ 3] 	sta df_pc+1
                             	
                             	; make sure normal I/O is resumed
                             	;jsr io_init_default
e10c :                       df_pg_prompt
e10c : a2a3             [ 2] 	ldx #lo(df_pg_prompt_msg)
e10e : a9e1             [ 2] 	lda #hi(df_pg_prompt_msg)
e110 : 2078c4           [ 6] 	jsr io_print_line
e113 : a900             [ 2] 	lda #0
e115 : 855e             [ 3] 	sta df_immed
e117 :                       df_pg_getcommand
                             	; current line is the token buffer when editing
e117 : a980             [ 2] 	lda #lo(df_tokbuff)
e119 : 8586             [ 3] 	sta df_currlin
e11b : a904             [ 2] 	lda #hi(df_tokbuff)
e11d : 8587             [ 3] 	sta df_currlin+1
e11f : 38               [ 2] 	sec
e120 : 20efe0           [ 6] 	jsr df_pg_inputline
e123 : b0e7             [ 3] 	bcs df_pg_prompt	; If no input then back to prom
e125 : 2040e1           [ 6] 	jsr df_pg_tokenise
e128 : a55e             [ 3] 	lda df_immed
e12a : f0eb             [ 3] 	beq df_pg_getcommand
                             	; clear variables ready to run the statement
e12c : 20aae1           [ 6] 	jsr df_initrun
                             	; run from tokbuff
e12f : a280             [ 2] 	ldx #lo(df_tokbuff)
e131 : a904             [ 2] 	lda #hi(df_tokbuff)
                             	; always skip length and line number
e133 : a003             [ 2] 	ldy #3
e135 : 8488             [ 3] 	sty df_exeoff
                             	; init currlin
e137 : 2020e5           [ 6] 	jsr df_rt_init_stat_ptr
                             	; start execution
AS65 Assembler for R6502 [1.42].                                     Page  184
-------------------------------- bank\bank0.s --------------------------------

e13a : 2033e5           [ 6] 	jsr df_rt_exec_stat
                             	; Go and get another line of input
e13d : 4c0ce1           [ 3] 	jmp df_pg_prompt
                             
                             	; tokenise the line
e140 :                       df_pg_tokenise
e140 : a900             [ 2] 	lda #0
e142 : 855d             [ 3] 	sta errno
e144 : 2015db           [ 6] 	jsr df_lexer_line
                             	; check if line number == 0
e147 : ad8104           [ 4] 	lda df_tokbuff+DFTK_LINNUM
e14a : d00f             [ 3] 	bne df_pg_line_number
e14c : ad8204           [ 4] 	lda df_tokbuff+DFTK_LINNUM+1
e14f : d00a             [ 3] 	bne df_pg_line_number
                             	; check if line empty
e151 : ad8004           [ 4] 	lda df_tokbuff
e154 : f004             [ 3] 	beq df_pg_nothing
                             	
                             	; line number == 0 so in immediate mode from tok
                             	; don't zero out the line length as some routine
                             	; run the line in immediate mode
e156 : a901             [ 2] 	lda #1
e158 : 855e             [ 3] 	sta df_immed
e15a :                       df_pg_nothing
e15a : 60               [ 6] 	rts
                             
                             	; put the numbered line in to the right bit of m
e15b :                       df_pg_line_number
                             	; Check if this line exists
e15b : ad8104           [ 4] 	lda df_tokbuff+DFTK_LINNUM
e15e : aa               [ 2] 	tax
e15f : ad8204           [ 4] 	lda df_tokbuff+DFTK_LINNUM+1
e162 : 2039e0           [ 6] 	jsr df_pg_find_line
                             	; Save line address for later X then A
e165 : 8538             [ 3] 	sta tmp_d
e167 : 8a               [ 2] 	txa
e168 : 48               [ 3] 	pha
e169 : a538             [ 3] 	lda tmp_d
e16b : 48               [ 3] 	pha
                             	; If line exists then it needs deleting
e16c : b003             [ 3] 	bcs df_pg_skip_del_line
                             
                             	; delete line from program
e16e : 20bfe0           [ 6] 	jsr df_pg_delete_block
e171 :                       df_pg_skip_del_line
                             	; If line length is zero
                             	; then nothing else to do (i.e. line was deleted
e171 : ad8004           [ 4] 	lda df_tokbuff+DFTK_LINLEN
                             	; save the tokenised line length
e174 : 48               [ 3] 	pha
e175 : d004             [ 3] 	bne df_pg_insertline
                             	; Length was zero, so get temp stuff off stack
e177 : 68               [ 4] 	pla
e178 : 68               [ 4] 	pla
e179 : 68               [ 4] 	pla
e17a : 60               [ 6] 	rts
                             
                             	; insert a program line unless it is immediate
e17b :                       df_pg_insertline
                             	; Restore previously saved length
e17b : 68               [ 4] 	pla
e17c : a8               [ 2] 	tay
AS65 Assembler for R6502 [1.42].                                     Page  185
-------------------------------- bank\bank0.s --------------------------------

                             	; Restore previously saved address to reinsert t
e17d : 68               [ 4] 	pla
e17e : 8538             [ 3] 	sta tmp_d
e180 : 68               [ 4] 	pla
e181 : aa               [ 2] 	tax
e182 : a538             [ 3] 	lda tmp_d
                             	; And save it all back to stack again A,X,Y
                             	_pushAXY
                             
                             	; We now have insert address and length
e18d : 208ae0           [ 6] 	jsr df_pg_insert_block
                             	; Restore length and sub 1 to get index in to th
e190 : 68               [ 4] 	pla
e191 : a8               [ 2] 	tay
e192 : 88               [ 2] 	dey
                             	; Restore address to a pointer, X is pulled firs
e193 : 68               [ 4] 	pla
e194 : aa               [ 2] 	tax
e195 : 863d             [ 3] 	stx num_a
e197 : 68               [ 4] 	pla
e198 : 853e             [ 3] 	sta num_a+1
                             	; num_a is destination, tokbuff is source, Y is 
e19a :                       df_pg_insertlinbyte
e19a : b98004           [ 4] 	lda df_tokbuff,y
e19d : 913d             [ 5] 	sta (num_a),y
e19f : 88               [ 2] 	dey
e1a0 : 10f8             [ 3] 	bpl df_pg_insertlinbyte
e1a2 : 60               [ 6] 	rts
                             	
e1a3 :                       df_pg_prompt_msg
e1a3 : 52656164790d00        	db "Ready",UTF_CR,0
                             
e1aa :                       mod_sz_progedit_e
                             
                             	include "dflat/runtime.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  RUNTIME.S
                             ;*  This module is the runtime coordinator.  When
                             ;*  wants to run a program, execution of statemen
                             ;*  required procedure starts and proceeds from t
                             ;*  according to normal program flow.
                             ;*  This module also contains critical routines f
                             ;*  evaluation of expressions (numeric and string
                             ;*  Whilst the code to implement a specific comma
                             ;*  rtsubs.s, this is the key module that control
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code
                             
e1aa :                       mod_sz_runtime_s
                             
                             ;****************************************
                             ;* df_initrun
AS65 Assembler for R6502 [1.42].                                     Page  186
-------------------------------- bank\bank0.s --------------------------------

                             ;* Initialise program space for runtime
                             ;****************************************
e1aa :                       df_initrun
                             	; Set the key mask to check every 16 instruction
e1aa : a910             [ 2] 	lda #0x10
e1ac : 855c             [ 3] 	sta df_checkmsk
e1ae : 855b             [ 3] 	sta df_checkkey
                             
                             	; String and array heap initialisation
                             	; Grows up from end of prog space PLUS 1
                             	; Initially empty (dim will allocate)
                             	_cpyZPWord df_prgend,df_starstrt
                             
                             	_incZPWord df_starstrt
                             
                             	_cpyZPWord df_starstrt,df_starend
                             
                             
e1c6 : a2ff             [ 2] 	ldx #0xff
                             	; Reset runtime stack (grows down)
e1c8 : 8676             [ 3] 	stx df_rtstop
                             	; make X=0
e1ca : e8               [ 2] 	inx
                             	; Reset parameter stack (grows up)
e1cb : 8677             [ 3] 	stx df_parmtop
                             	; Reset data pointer high byte
e1cd : 8695             [ 3] 	stx df_currdat+1
                             	; if nest counter zeroed
e1cf : 8693             [ 3] 	stx df_ifnest
                             
                             	; clear proc addresses
e1d1 : 20d5e1           [ 6] 	jsr df_rt_init_vvt
                             
                             ;	clc
e1d4 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Initialise vvt
                             ;****************************************
e1d5 :                       df_rt_init_vvt
                             	; starting at beginning of vvt
                             	_cpyZPWord df_vvtend,df_tmpptra
                             
e1dd : a200             [ 2] 	ldx #0
e1df :                       df_rt_init_vvt_slot
e1df : a5a1             [ 3] 	lda df_tmpptra
e1e1 : c56d             [ 3] 	cmp df_vvtstrt
e1e3 : d006             [ 3] 	bne df_rt_init_vvt_slot_undim
e1e5 : a5a2             [ 3] 	lda df_tmpptra+1
e1e7 : c56e             [ 3] 	cmp df_vvtstrt+1
e1e9 : f02c             [ 4] 	beq df_rt_init_done
e1eb :                       df_rt_init_vvt_slot_undim
                             	; Only zero out proc and array pointers
                             	; Scalar variables are not initialised
e1eb : a000             [ 2] 	ldy #0
e1ed : b1a1             [ 5] 	lda (df_tmpptra),y
e1ef : 29c0             [ 2] 	and #DFVVT_PROC|DFVVT_ARRY
e1f1 : f016             [ 4] 	beq df_rt_init_vvt_skip
                             	; skip over the first byte which is variable typ
e1f3 : c8               [ 2] 	iny
                             	; zero out first 3 bytes for proc and arrays
e1f4 : a900             [ 2] 	lda #0
AS65 Assembler for R6502 [1.42].                                     Page  187
-------------------------------- bank\bank0.s --------------------------------

e1f6 : 91a1             [ 5] 	sta (df_tmpptra),y
e1f8 : c8               [ 2] 	iny
e1f9 : 91a1             [ 5] 	sta (df_tmpptra),y
e1fb : c8               [ 2] 	iny
e1fc : 91a1             [ 5] 	sta (df_tmpptra),y
e1fe : c8               [ 2] 	iny
                             	; before doing dim2 check if proc
                             	; as we don't want to erase the parm count
e1ff : a1a1             [ 6] 	lda (df_tmpptra,x)
e201 : 2940             [ 2] 	and #DFVVT_PROC
e203 : d004             [ 3] 	bne df_rt_init_vvt_skip
                             	; if not proc then zero dim2
e205 : a900             [ 2] 	lda #0
e207 : 91a1             [ 5] 	sta (df_tmpptra),y
e209 :                       df_rt_init_vvt_skip
                             	; increment pointer to next slot
                             	_adcZPByte df_tmpptra,#8
                             
e214 : 4cdfe1           [ 3] 	jmp df_rt_init_vvt_slot 	; Don't rely on bcc
e217 :                       df_rt_init_done
e217 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Evaluate a numeric expression
                             ;* pop  X,A result from operator stack
                             ;****************************************
e218 :                       df_rt_getnval
                             	; evaluate the expression
e218 : 201ee2           [ 6] 	jsr df_rt_neval
                             	; get X,A off operator stack
e21b : 4c8ff7           [ 3] 	jmp df_ost_popInt
                             
                             
                             ;****************************************
                             ;* Evaluate a numeric expression
                             ;* Push result to operator stack
                             ;****************************************
e21e :                       df_rt_neval
                             	; push terminator on cpu stack
                             	; so we know where we are
e21e : a900             [ 2] 	lda #0
e220 : 48               [ 3] 	pha
                             
                             	; find escape token or keyword token
                             	; if escape token push on to operand stack
                             	; if keyword token push on to operator stack
e221 :                       df_rt_neval_optk
e221 : a488             [ 3] 	ldy df_exeoff
                             	; check end of line
                             
                             ;	cpy df_eolidx
                             ;	beq df_rt_neval_process
e223 : c47f             [ 3] 	cpy df_nxtstidx
e225 : f03a             [ 3] 	beq df_rt_neval_process
e227 : b186             [ 5] 	lda (df_currlin),y		; Get the byte which could b
e229 : 3024             [ 3] 	bmi df_rt_neval_tk		; N=1 means it's a keyword t
e22b : c920             [ 2] 	cmp #DFTK_ESCVAL		; <=32 means it's an escape to
e22d : 9019             [ 3] 	bcc df_rt_neval_esc
                             	; check for evaluation terminators
                             	; specifically ',' and ']'
e22f : c92c             [ 2] 	cmp #','
e231 : f02e             [ 3] 	beq df_rt_neval_process
AS65 Assembler for R6502 [1.42].                                     Page  188
-------------------------------- bank\bank0.s --------------------------------

e233 : c95d             [ 2] 	cmp #']'
e235 : f02a             [ 3] 	beq df_rt_neval_process
                             	; check for brackets
                             	; if close bracket then process
e237 : c929             [ 2] 	cmp #')'
e239 : f026             [ 3] 	beq df_rt_neval_process
                             	; Nothing of interest matched or it's open brack
                             	; so move to next byte either way
e23b : e688             [ 5] 	inc df_exeoff				; Next byte 
                             	; if bracket then evaluate expression recursivel
e23d : c928             [ 2] 	cmp #'('
e23f : d0e0             [ 3] 	bne df_rt_neval_optk
                             	; call evaluation function recursively
e241 : 201ee2           [ 6] 	jsr df_rt_neval
                             	; move to next byte
e244 : e688             [ 5] 	inc df_exeoff
e246 : d0d9             [ 3] 	bne df_rt_neval_optk		; ALWAYS as exeoff != 0
e248 :                       df_rt_neval_esc
e248 : 20a3e2           [ 6] 	jsr df_rt_eval_esc
                             	; move to next byte
e24b : e688             [ 5] 	inc df_exeoff
e24d : d0d2             [ 3] 	bne df_rt_neval_optk		; ALWAYS as exeoff != 0
                             	; if a token then push on operator stack
e24f :                       df_rt_neval_tk
e24f : 297f             [ 2] 	and #0x7f
                             	; check if op (look up type using X as index)
                             	; X contains the current operator index
                             
e251 : aa               [ 2] 	tax
e252 : bd9fde           [ 4] 	lda df_tk_tokentype,x
                             	; A contains token type
e255 : 48               [ 3] 	pha
e256 : 2908             [ 2] 	and #DFTK_OP
e258 : d01c             [ 3] 	bne df_rt_neval_tk_opp
                             	; check if fn
e25a : 68               [ 4] 	pla
e25b : 2902             [ 2] 	and #DFTK_FN
e25d : d00c             [ 3] 	bne df_rt_neval_tk_fn
                             
                             	; If got here then something wrong
                             	SWBRK DFERR_OK
                             
                             
e261 :                       df_rt_neval_process
                             	; pop operator off stack and execute
                             	; keep popping until reached the terminator
e261 : 68               [ 4] 	pla
e262 : f006             [ 3] 	beq df_rt_neval_done
                             	; run the token code
e264 : 2099e5           [ 6] 	jsr df_rt_run_token
                             	; top two bytes on ost stack is the result
e267 : 4c61e2           [ 3] 	jmp df_rt_neval_process
e26a :                       df_rt_neval_done
e26a : 60               [ 6] 	rts
                             
e26b :                       df_rt_neval_tk_fn
e26b : 18               [ 2] 	clc
e26c : 8a               [ 2] 	txa
                             	; run a fn token - returns a value on stack
e26d : e688             [ 5] 	inc df_exeoff
e26f : 2099e5           [ 6] 	jsr df_rt_run_token
                             	; move to next byte
AS65 Assembler for R6502 [1.42].                                     Page  189
-------------------------------- bank\bank0.s --------------------------------

e272 :                       df_rt_neval_nextbyte
e272 : e688             [ 5] 	inc df_exeoff
e274 : d0ab             [ 3] 	bne df_rt_neval_optk		; ALWAYS as exeoff != 0
                             
e276 :                       df_rt_neval_tk_opp
e276 : 68               [ 4] 	pla				; Get A off stack which is the type
e277 :                       df_rt_neval_tk_op
                             	; X=Op, A=Type
                             	; if this op < current top of op stack
                             	; then do the op as it is higher priority so sho
                             	; not be pushed
                             	; what is top of the op stack?
                             	; save current op token value
                             	; C=0 means process the op now, else don't
                             	; save current operator index
e277 : 86a1             [ 3] 	stx df_tmpptra				; Index in to token table not 
                             	; mask off to keep priority
e279 : 2907             [ 2] 	and #DFTK_OPMSK
e27b : 85a3             [ 3] 	sta df_tmpptrb
                             	; peek top of op stack - pull and push X
e27d : 68               [ 4] 	pla
e27e : 48               [ 3] 	pha
e27f : aa               [ 2] 	tax
                             	; if 0 then nothing so push op
e280 : f01c             [ 3] 	beq df_rt_neval_pushOp
                             	; use it to index in to type table
e282 : bd9fde           [ 4] 	lda df_tk_tokentype,x
                             	; mask off to keep priority
e285 : 2907             [ 2] 	and #DFTK_OPMSK
                             	; compare with the saved token type which includ
e287 : c5a3             [ 3] 	cmp df_tmpptrb
                             	; if top of stack >= current then C=1
                             	; else C=0
                             	; what is the state of C?
                             	; if 1 then just pushOp
e289 : f002             [ 3] 	beq df_rt_neval_donow
e28b : b011             [ 3] 	bcs df_rt_neval_pushOp
e28d :                       df_rt_neval_donow
                             	; was C=0 so process now before pushing the new 
                             	; get operator off cpu stack
e28d : 68               [ 4] 	pla
e28e : a8               [ 2] 	tay		; Save whilst need to push other things
                             	; save the current op on cpu stack
e28f : a5a1             [ 3] 	lda df_tmpptra
e291 : 48               [ 3] 	pha
e292 : aa               [ 2] 	tax		; X = current op
e293 : 98               [ 2] 	tya		; Get A back from Y (new op)
                             	; now run the token in A that came off the stack
e294 : 2099e5           [ 6] 	jsr df_rt_run_token
                             	; get current op off cpu stack in to X
e297 : 68               [ 4] 	pla
e298 : aa               [ 2] 	tax
                             	; get the token type in to A
e299 : bd9fde           [ 4] 	lda df_tk_tokentype,x
                             	; now go back around again to check whether to p
e29c : d0d9             [ 3] 	bne df_rt_neval_tk_op		; ALWAYS as type never ze
e29e :                       df_rt_neval_pushOp
                             	; push the operator
e29e : a5a1             [ 3] 	lda df_tmpptra
e2a0 : 48               [ 3] 	pha
                             	; move to next byte
e2a1 : d0cf             [ 3] 	bne df_rt_neval_nextbyte	; ALWAYS as token index
AS65 Assembler for R6502 [1.42].                                     Page  190
-------------------------------- bank\bank0.s --------------------------------

                             
                             
                             
                             
                             ; jump to escape evaluation routine
e2a3 :                       df_rt_eval_esc
e2a3 : 0a               [ 2] 	asl a
e2a4 : aa               [ 2] 	tax
e2a5 : bdb2e2           [ 4] 	lda df_rt_eval_esc_tab,x
e2a8 : 85a1             [ 3] 	sta df_tmpptra
e2aa : bdb3e2           [ 4] 	lda df_rt_eval_esc_tab+1,x
e2ad : 85a2             [ 3] 	sta df_tmpptra+1
e2af : 6ca100           [ 6] 	jmp (df_tmpptra)
                             
e2b2 :                       df_rt_eval_esc_tab
e2b2 : 6fe3                  	dw df_rt_eval_chr
e2b4 : 7be3                  	dw df_rt_eval_reserved
e2b6 : 7be3                  	dw df_rt_eval_reserved
e2b8 : 7be3                  	dw df_rt_eval_reserved
e2ba : 7be3                  	dw df_rt_eval_reserved
e2bc : 7be3                  	dw df_rt_eval_reserved	; no such thing as bytdec
e2be : 6fe3                  	dw df_rt_eval_bythex
e2c0 : 6fe3                  	dw df_rt_eval_bytbin
e2c2 : 7be3                  	dw df_rt_eval_reserved
e2c4 : 6fe3                  	dw df_rt_eval_intdec
e2c6 : 6fe3                  	dw df_rt_eval_inthex
e2c8 : 6fe3                  	dw df_rt_eval_intbin
e2ca : 7be3                  	dw df_rt_eval_reserved
e2cc : 7be3                  	dw df_rt_eval_reserved
e2ce : 7be3                  	dw df_rt_eval_reserved
e2d0 : 7be3                  	dw df_rt_eval_reserved
e2d2 : 7de3                  	dw df_rt_eval_strlit
e2d4 : c2e3                  	dw df_rt_eval_var
e2d6 : b5e4                  	dw df_rt_eval_proc
                             
                             
                             ;****************************************
                             ;* Evaluate a string expression
                             ;* X, A = Destination is string accumulator
                             ;****************************************
e2d8 :                       df_rt_seval
e2d8 : a67a             [ 3] 	ldx df_sevalptr
e2da : a57b             [ 3] 	lda df_sevalptr+1
                             ;****************************************
                             ;* Evaluate a string expression
                             ;* X, A = Destination buffer / space
                             ;****************************************
e2dc :                       df_rt_sval
                             	; keep X,A on the stack - will be modified
e2dc : 8538             [ 3] 	sta tmp_d
e2de : 48               [ 3] 	pha
e2df : 8a               [ 2] 	txa
e2e0 : 48               [ 3] 	pha
e2e1 : a538             [ 3] 	lda tmp_d
                             	; push original destination
e2e3 : 206af7           [ 6] 	jsr df_ost_pushStr
                             	; Push the destination to the 6502 stack
                             	; hi byte first then lo
                             	; push string idx so we know our starting positi
                             	; in the string buffer
                             	; this limits all evaluations to 255 bytes
                             ;	lda df_stridx
AS65 Assembler for R6502 [1.42].                                     Page  191
-------------------------------- bank\bank0.s --------------------------------

                             ;	jsr df_st_pushOp
                             
                             	; find escape token or keyword token
                             	; if escape token push on to operand stack
                             	; if keyword operator token push on to operator 
                             	; if keyword function token run it
                             
e2e6 :                       df_rt_seval_optk
e2e6 : a488             [ 3] 	ldy df_exeoff
                             	; check end of line
                             ;	cpy df_eolidx
                             ;	beq df_rt_seval_done
e2e8 : c47f             [ 3] 	cpy df_nxtstidx
e2ea : f069             [ 4] 	beq df_rt_seval_done
                             
e2ec : b186             [ 5] 	lda (df_currlin),y
e2ee : 301c             [ 4] 	bmi df_rt_seval_tk
                             
e2f0 : c920             [ 2] 	cmp #DFTK_ESCVAL
e2f2 : 900a             [ 3] 	bcc df_rt_seval_esc
                             	; check for evaluation terminators
                             	; specifically ',' and ')'
e2f4 : c92c             [ 2] 	cmp #','
e2f6 : f05d             [ 4] 	beq df_rt_seval_done
e2f8 : c929             [ 2] 	cmp #')'
e2fa : f059             [ 4] 	beq df_rt_seval_done
e2fc : d04a             [ 4] 	bne df_rt_seval_nextbyte
e2fe :                       df_rt_seval_esc
                             	; the only escape char is STRLIT, VAR or PROC
e2fe : c910             [ 2] 	cmp #DFTK_STRLIT
e300 : f04b             [ 3] 	beq	df_rt_seval_esc_strlit
e302 : c911             [ 2] 	cmp #DFTK_VAR
e304 : f028             [ 3] 	beq	df_rt_seval_esc_var
e306 : c912             [ 2] 	cmp #DFTK_PROC
e308 : f049             [ 3] 	beq	df_rt_seval_esc_proc
                             
                             	; error if got here
                             	SWBRK DFERR_SYNTAX
                             
                             
                             	; if a token then push on operator stack
e30c :                       df_rt_seval_tk
e30c : 8488             [ 3] 	sty df_exeoff
e30e : 297f             [ 2] 	and #0x7f
                             	; check if op
e310 : aa               [ 2] 	tax
e311 : bd9fde           [ 4] 	lda df_tk_tokentype,x
e314 : 2904             [ 2] 	and #DFTK_STROP
e316 : d009             [ 3] 	bne df_rt_seval_tk_op
                             	; check if fn
e318 : bd9fde           [ 4] 	lda df_tk_tokentype,x
e31b : 2902             [ 2] 	and #DFTK_FN
e31d : d006             [ 3] 	bne df_rt_seval_tk_fn
                             
                             	; token type mismatch if got here
                             	SWBRK DFERR_TYPEMISM
                             
                             
e321 :                       df_rt_seval_tk_op
                             	; the only op is $+
                             	; so just ignore!
e321 : 8a               [ 2] 	txa
AS65 Assembler for R6502 [1.42].                                     Page  192
-------------------------------- bank\bank0.s --------------------------------

e322 : 4c48e3           [ 3] 	jmp df_rt_seval_nextbyte
                             
e325 :                       df_rt_seval_tk_fn
e325 : 8a               [ 2] 	txa
e326 : e688             [ 5] 	inc df_exeoff
e328 : 2099e5           [ 6] 	jsr df_rt_run_token
e32b : 4c32e3           [ 3] 	jmp df_rt_seval_copy
                             
e32e :                       df_rt_seval_esc_var
                             	; go process the variable as a normal RVAL
e32e : 18               [ 2] 	clc
e32f : 20c2e3           [ 6] 	jsr df_rt_eval_var
                             	; copy source off rt stack to destination
e332 :                       df_rt_seval_copy
                             	; pull destination pointer
e332 : 68               [ 4] 	pla
e333 : 85a1             [ 3] 	sta df_tmpptra
e335 : 68               [ 4] 	pla
e336 : 85a2             [ 3] 	sta df_tmpptra+1
                             	; pop source string pointer off stack
e338 : 2093f7           [ 6] 	jsr df_ost_popStr
e33b : 86a3             [ 3] 	stx df_tmpptrb
e33d : 85a4             [ 3] 	sta df_tmpptrb+1
                             	; go and copy the string
e33f : 2059e3           [ 6] 	jsr df_rt_copyStr
                             	; now save the destination
e342 : a5a2             [ 3] 	lda df_tmpptra+1
e344 : 48               [ 3] 	pha
e345 : a5a1             [ 3] 	lda df_tmpptra
e347 : 48               [ 3] 	pha
                             
                             ;	jmp df_rt_seval_nextbyte
e348 :                       df_rt_seval_nextbyte
e348 : e688             [ 5] 	inc df_exeoff
e34a : 4ce6e2           [ 3] 	jmp df_rt_seval_optk
                             
e34d :                       df_rt_seval_esc_strlit
                             	; evaluate string literal
e34d : 207de3           [ 6] 	jsr df_rt_eval_strlit
e350 : 4c32e3           [ 3] 	jmp df_rt_seval_copy
                             
e353 :                       df_rt_seval_esc_proc
                             	; not yet suported *******
                             	SWBRK DFERR_OK
                             
                             
                             	; keep going until non-ws char found or end of l
e355 :                       df_rt_seval_done
                             	;
e355 : 68               [ 4] 	pla
e356 : 68               [ 4] 	pla
                             
e357 : 18               [ 2] 	clc
e358 : 60               [ 6] 	rts
                             
                             
                             ; Copy string from ptrb to ptra
e359 :                       df_rt_copyStr
e359 : a000             [ 2] 	ldy #0
e35b :                       df_rt_copyStr_ch
e35b : b1a3             [ 5] 	lda (df_tmpptrb),y
e35d : 91a1             [ 5] 	sta (df_tmpptra),y
AS65 Assembler for R6502 [1.42].                                     Page  193
-------------------------------- bank\bank0.s --------------------------------

e35f : f003             [ 3] 	beq df_rt_copyStr_done
e361 : c8               [ 2] 	iny
e362 : d0f7             [ 3] 	bne df_rt_copyStr_ch	; Always relying in Y never
e364 :                       df_rt_copyStr_done
e364 : 98               [ 2] 	tya
e365 : 18               [ 2] 	clc
e366 : 65a1             [ 3] 	adc df_tmpptra
e368 : 85a1             [ 3] 	sta df_tmpptra
                             	_bcc 2
                             
e36c : e6a2             [ 5] 	inc df_tmpptra+1
e36e : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Evaluate and push numeric value
                             ;****************************************
e36f :                       df_rt_eval_intdec
e36f :                       df_rt_eval_bytdec
e36f :                       df_rt_eval_inthex
e36f :                       df_rt_eval_bythex
e36f :                       df_rt_eval_intbin
e36f :                       df_rt_eval_bytbin
e36f :                       df_rt_eval_chr
                             	; numeric constant
e36f : c8               [ 2] 	iny
e370 : b186             [ 5] 	lda (df_currlin),y
e372 : aa               [ 2] 	tax
e373 : c8               [ 2] 	iny
e374 : b186             [ 5] 	lda (df_currlin),y
                             	; save offset before calling any routine
e376 : 8488             [ 3] 	sty df_exeoff
                             	; push number on to stack
e378 : 4c5ff7           [ 3] 	jmp df_ost_pushInt
                             
e37b :                       df_rt_eval_reserved
                             	; should not get here
                             	SWBRK DFERR_OK
                             
                             
                             ;****************************************
                             ;* Evaluate and push string constant
                             ;****************************************
e37d :                       df_rt_eval_strlit
e37d : 8488             [ 3] 	sty df_exeoff
                             	; calculate the effective address in to AX
                             	; y + currlin
e37f : 98               [ 2] 	tya
                             	; set carry to add one extra
e380 : 38               [ 2] 	sec
e381 : 6586             [ 3] 	adc df_currlin
e383 : aa               [ 2] 	tax
e384 : a587             [ 3] 	lda df_currlin+1
e386 : 6900             [ 2] 	adc #0
                             
                             	; push string on to stack
e388 : 206af7           [ 6] 	jsr df_ost_pushStr
                             	; now proceed until end of string found
e38b : a488             [ 3] 	ldy df_exeoff
e38d :                       df_rt_eval_strlit_ch
e38d : b186             [ 5] 	lda (df_currlin),y
e38f : f003             [ 3] 	beq df_rt_eval_strlit_done
e391 : c8               [ 2] 	iny
AS65 Assembler for R6502 [1.42].                                     Page  194
-------------------------------- bank\bank0.s --------------------------------

e392 : d0f9             [ 3] 	bne df_rt_eval_strlit_ch
e394 :                       df_rt_eval_strlit_done	; Always relying on Y neve
e394 : 8488             [ 3] 	sty df_exeoff
e396 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Return array parameter
                             ;* A has parm
                             ;****************************************
e397 :                       df_rt_arry_parm
                             	; move past open bracket or comma
e397 : e688             [ 5] 	inc df_exeoff
                             	; evaluate expression inside bracket
e399 : 2018e2           [ 6] 	jsr df_rt_getnval
e39c : 8a               [ 2] 	txa
                             ;	clc
e39d : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Return double array parameter
                             ;* X = dim1, Y = dim2
                             ;****************************************
e39e :                       df_rt_arry_parm2
                             	; go get array parm 1
e39e : 2097e3           [ 6] 	jsr df_rt_arry_parm
e3a1 : 48               [ 3] 	pha
e3a2 : a200             [ 2] 	ldx #0
e3a4 : a488             [ 3] 	ldy df_exeoff
e3a6 :                       df_rt_arry_parm2_term
e3a6 : b186             [ 5] 	lda (df_currlin),y
e3a8 : c95d             [ 2] 	cmp #']'
e3aa : f011             [ 3] 	beq df_rt_arry_parm2_skiparry2
e3ac : c92c             [ 2] 	cmp #','
e3ae : f006             [ 3] 	beq df_rt_arry_parm2_arry2
e3b0 : 8488             [ 3] 	sty df_exeoff
e3b2 : c8               [ 2] 	iny
e3b3 : 4ca6e3           [ 3] 	jmp df_rt_arry_parm2_term
e3b6 :                       df_rt_arry_parm2_arry2
                             	; get second dimension and put in Y
e3b6 : 2097e3           [ 6] 	jsr df_rt_arry_parm
e3b9 : a8               [ 2] 	tay
e3ba : 68               [ 4] 	pla
e3bb : aa               [ 2] 	tax
                             ;	clc
e3bc : 60               [ 6] 	rts
e3bd :                       df_rt_arry_parm2_skiparry2
e3bd : a000             [ 2] 	ldy #0
e3bf : 68               [ 4] 	pla
e3c0 : aa               [ 2] 	tax
                             ;	clc
e3c1 : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* Evaluate and push variable
                             ;* The actual value is pushed if numeric
                             ;* The pointer is pushed if string
                             ;* Carry Set = LVAR else normal RVAR
                             ;* LVAR : Y = line index, A=vvt type, tmpptra = v
                             ;****************************************
e3c2 :                       df_rt_eval_var
                             	; save carry bit
AS65 Assembler for R6502 [1.42].                                     Page  195
-------------------------------- bank\bank0.s --------------------------------

e3c2 : 08               [ 3] 	php
                             	; if lvar mode then already passed escape token
e3c3 : b010             [ 3] 	bcs df_rt_eval_lvskip
                             	; move past var escape token
e3c5 : c8               [ 2] 	iny
                             	; get var vvt address
e3c6 : b186             [ 5] 	lda (df_currlin),y
e3c8 : 85a1             [ 3] 	sta df_tmpptra
e3ca : c8               [ 2] 	iny
e3cb : 8488             [ 3] 	sty df_exeoff
e3cd : b186             [ 5] 	lda (df_currlin),y
e3cf : 85a2             [ 3] 	sta df_tmpptra+1
                             	; push vvt type first as this is the last thing 
e3d1 : a200             [ 2] 	ldx #0
e3d3 : a1a1             [ 6] 	lda (df_tmpptra,x)
e3d5 :                       df_rt_eval_lvskip
e3d5 : 48               [ 3] 	pha
                             	; Test A
e3d6 : aa               [ 2] 	tax
                             	; simple variable
e3d7 : 100e             [ 3] 	bpl df_rt_eval_var_notarry
                             	; even if an array if no dimensions then return 
                             	; if at end of statement or line then simple cop
                             ;	cpy df_eolidx
                             ;	beq df_rt_eval_var_simple
e3d9 : c47f             [ 3] 	cpy df_nxtstidx
e3db : f027             [ 4] 	beq df_rt_eval_var_simple
                             	; if next ch is not [ then simple copy
e3dd : c8               [ 2] 	iny
e3de : b186             [ 5] 	lda (df_currlin),y
e3e0 : 88               [ 2] 	dey
e3e1 : c95b             [ 2] 	cmp #'['
e3e3 : d01f             [ 4] 	bne df_rt_eval_var_simple
                             	; go do array handling
e3e5 : f02b             [ 4] 	beq df_rt_eval_var_do_arry
e3e7 :                       df_rt_eval_var_notarry
                             	; pull the type, not needed here
e3e7 : 68               [ 4] 	pla
                             	; pull C and check if lvar wanted rather than rv
e3e8 : 28               [ 4] 	plp
e3e9 : b00c             [ 3] 	bcs df_rt_eval_lvar
                             	; just push the vvt lo,hi value
e3eb : a001             [ 2] 	ldy #DFVVT_LO
e3ed : b1a1             [ 5] 	lda (df_tmpptra),y
e3ef : aa               [ 2] 	tax
e3f0 : a002             [ 2] 	ldy #DFVVT_HI
e3f2 : b1a1             [ 5] 	lda (df_tmpptra),y
                             
e3f4 : 4c5ff7           [ 3] 	jmp df_ost_pushInt
                             
e3f7 :                       df_rt_eval_lvar
                             	; it's not an array, push the address of DFVVT_L
                             	; add DFVVT_LO offset to slot address in X,A
e3f7 : 18               [ 2] 	clc
e3f8 : a901             [ 2] 	lda #DFVVT_LO
e3fa : 65a1             [ 3] 	adc df_tmpptra
e3fc : aa               [ 2] 	tax
e3fd : a5a2             [ 3] 	lda df_tmpptra+1
e3ff : 6900             [ 2] 	adc #0
                             
                             	; push pointer to lo,hi
e401 : 4c6ef7           [ 3] 	jmp df_ost_pushPtr
AS65 Assembler for R6502 [1.42].                                     Page  196
-------------------------------- bank\bank0.s --------------------------------

                             
e404 :                       df_rt_eval_var_simple
                             	; clean up stack
e404 : 68               [ 4] 	pla
e405 : 68               [ 4] 	pla
                             	; simply get lo,hi and push ptr on stack
e406 : a001             [ 2] 	ldy #DFVVT_LO
e408 : b1a1             [ 5] 	lda (df_tmpptra),y
e40a : aa               [ 2] 	tax
e40b : a002             [ 2] 	ldy #DFVVT_HI
e40d : b1a1             [ 5] 	lda (df_tmpptra),y
e40f : 4c6ef7           [ 3] 	jmp df_ost_pushPtr
                             
e412 :                       df_rt_eval_var_do_arry
                             	; move past var index
e412 : e688             [ 5] 	inc df_exeoff
                             	; zero out x,y as they have dimension info
e414 : a200             [ 2] 	ldx #0
e416 : a000             [ 2] 	ldy #0
                             
                             	; ** Array handling routine **
                             	; A on stack = type
                             	; save vvt address
e418 : a5a2             [ 3] 	lda df_tmpptra+1
e41a : 48               [ 3] 	pha
e41b : a5a1             [ 3] 	lda df_tmpptra
e41d : 48               [ 3] 	pha
                             
                             	; get array parms in X,Y
e41e : 209ee3           [ 6] 	jsr df_rt_arry_parm2
                             	; restore vvt address
e421 : 68               [ 4] 	pla
e422 : 85a1             [ 3] 	sta df_tmpptra
e424 : 68               [ 4] 	pla
e425 : 85a2             [ 3] 	sta df_tmpptra+1
                             	; save dimension indices for later
e427 : 86a3             [ 3] 	stx df_tmpptrb
e429 : 84a4             [ 3] 	sty df_tmpptrb+1
                             	; if y is zero then need to decide some stuff
e42b : c000             [ 2] 	cpy #0
e42d : d00e             [ 3] 	bne df_rt_eval_var_dim2adj
                             	; if dim2 > 0 then swap x,y
e42f : a004             [ 2] 	ldy #DFVVT_DIM2
e431 : b1a1             [ 5] 	lda (df_tmpptra),y
e433 : f008             [ 3] 	beq df_rt_eval_var_dim2adj
                             	; swap x,y
e435 : a6a3             [ 3] 	ldx df_tmpptrb
e437 : a4a4             [ 3] 	ldy df_tmpptrb+1
e439 : 86a4             [ 3] 	stx df_tmpptrb+1
e43b : 84a3             [ 3] 	sty df_tmpptrb
                             
e43d :                       df_rt_eval_var_dim2adj
e43d : a6a3             [ 3] 	ldx df_tmpptrb
e43f : a4a4             [ 3] 	ldy df_tmpptrb+1
                             	; don't let y=0
e441 : d001             [ 3] 	bne df_rt_eval_var_dim2adjy
e443 : c8               [ 2] 	iny
e444 :                       df_rt_eval_var_dim2adjy
                             	; don't let x=0
e444 : e000             [ 2] 	cpx #0
e446 : d001             [ 3] 	bne df_rt_eval_var_dim2adjx
e448 : e8               [ 2] 	inx
AS65 Assembler for R6502 [1.42].                                     Page  197
-------------------------------- bank\bank0.s --------------------------------

e449 :                       df_rt_eval_var_dim2adjx
                             	;calculate offset
                             	;(y-1)*dim1 + (x-1)
e449 : ca               [ 2] 	dex
e44a : a900             [ 2] 	lda #0
e44c : 853e             [ 3] 	sta num_a+1
e44e : 88               [ 2] 	dey
                             	; (y-1)
e44f : 843d             [ 3] 	sty num_a
                             	; if y is 0 then no need to multiply
e451 : f00d             [ 3] 	beq df_rt_eval_var_nomult
                             	; (dim1)
e453 : a003             [ 2] 	ldy #DFVVT_DIM1
e455 : a900             [ 2] 	lda #0
e457 : 8542             [ 3] 	sta num_b+1
e459 : b1a1             [ 5] 	lda (df_tmpptra),y
e45b : 8541             [ 3] 	sta num_b
                             	; (y-1)*dim1 num_a has result
e45d : 200cd6           [ 6] 	jsr int_fast_mult
e460 :                       df_rt_eval_var_nomult
                             	; move x to a
e460 : 8a               [ 2] 	txa
                             	; add x to num_a
e461 : 18               [ 2] 	clc
e462 : 653d             [ 3] 	adc num_a
e464 : 853d             [ 3] 	sta num_a
                             	_bcc 2
                             
e468 : e63e             [ 5] 	inc num_a+1
                             	; now have element offset in num_a
                             	; dimensions in x and y
e46a : a6a3             [ 3] 	ldx df_tmpptrb
e46c : a4a4             [ 3] 	ldy df_tmpptrb+1
                             	; get type of variable originally found
e46e : 68               [ 4] 	pla
e46f : 48               [ 3] 	pha
e470 : 2901             [ 2] 	and #DFVVT_INT
e472 : f004             [ 3] 	beq df_rt_eval_var_push
                             	; if it is int then multiply offset by 2
e474 : 063d             [ 5] 	asl num_a
e476 : 263e             [ 5] 	rol num_a+1
e478 :                       df_rt_eval_var_push
                             	; add pointer in lo,hi to num_a
e478 : 18               [ 2] 	clc
e479 : a001             [ 2] 	ldy #DFVVT_LO
e47b : b1a1             [ 5] 	lda (df_tmpptra),y
e47d : 653d             [ 3] 	adc num_a
e47f : 853d             [ 3] 	sta num_a
e481 : a002             [ 2] 	ldy #DFVVT_HI
e483 : b1a1             [ 5] 	lda (df_tmpptra),y
e485 : d002             [ 3] 	bne df_rt_array_exists
                             	; if vvt address hi is zero then array not dimen
                             	SWBRK DFERR_DIM
                             
e489 :                       df_rt_array_exists
e489 : 653e             [ 3] 	adc num_a+1
e48b : 853e             [ 3] 	sta num_a+1
                             	; get the type
e48d : 68               [ 4] 	pla
                             	; if not int or byte then push string
e48e : 2903             [ 2] 	and #DFVVT_INT|DFVVT_BYT
e490 : f01b             [ 3] 	beq df_rt_eval_var_str
AS65 Assembler for R6502 [1.42].                                     Page  198
-------------------------------- bank\bank0.s --------------------------------

                             	; get LVAR preference
e492 : 28               [ 4] 	plp
e493 : b019             [ 3] 	bcs df_rt_eval_ptr
                             	; need to load lo and hi for int
                             	; but only lo for byt
e495 : 2901             [ 2] 	and #DFVVT_INT
e497 : f00b             [ 3] 	beq df_rt_eval_byt
                             	; push the contents pointed to by num_a
e499 : a000             [ 2] 	ldy #0
e49b : b13d             [ 5] 	lda (num_a),y
e49d : aa               [ 2] 	tax
e49e : c8               [ 2] 	iny
e49f : b13d             [ 5] 	lda (num_a),y
e4a1 : 4c5ff7           [ 3] 	jmp df_ost_pushInt
e4a4 :                       df_rt_eval_byt
e4a4 : a000             [ 2] 	ldy #0
e4a6 : b13d             [ 5] 	lda (num_a),y
e4a8 : aa               [ 2] 	tax
e4a9 : 98               [ 2] 	tya			; Make A=0
e4aa : 4c5ff7           [ 3] 	jmp df_ost_pushInt
e4ad :                       df_rt_eval_var_str
e4ad : 28               [ 4] 	plp
e4ae :                       df_rt_eval_ptr
                             ;	clc
                             	; put num_a not contents
e4ae : a63d             [ 3] 	ldx num_a
e4b0 : a53e             [ 3] 	lda num_a+1
e4b2 : 4c6ef7           [ 3] 	jmp df_ost_pushPtr
                             
e4b5 :                       df_rt_eval_proc
e4b5 : a577             [ 3] 	lda df_parmtop				; Save current position of par
e4b7 : 48               [ 3] 	pha
e4b8 : 20b5f5           [ 6] 	jsr df_rt_proc				; Go and call the user functio
e4bb : 68               [ 4] 	pla							; Get back the original parameter stac
e4bc : c577             [ 3] 	cmp df_parmtop				; if it is the same, then no r
e4be : f002             [ 3] 	beq df_rt_eval_proc_err
e4c0 : 18               [ 2] 	clc
e4c1 : 60               [ 6] 	rts
e4c2 :                       df_rt_eval_proc_err
                             	; if no return value then report an errror
                             	SWBRK DFERR_RETURN
                             
                             
                             
                             
                             ;****************************************
                             ;* get two ints off the runtime stack
                             ;* first parm in ptrb, second in ptra
                             ;****************************************
e4c4 :                       df_rt_get2Ints
                             	; the first int popped is actually the second pa
e4c4 : 208ff7           [ 6] 	jsr df_ost_popInt
e4c7 : 86a3             [ 3] 	stx df_tmpptrb
e4c9 : 85a4             [ 3] 	sta df_tmpptrb+1
                             
e4cb : 208ff7           [ 6] 	jsr df_ost_popInt
e4ce : 86a1             [ 3] 	stx df_tmpptra
e4d0 : 85a2             [ 3] 	sta df_tmpptra+1
e4d2 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* get two strings off the runtime stack
AS65 Assembler for R6502 [1.42].                                     Page  199
-------------------------------- bank\bank0.s --------------------------------

                             ;* first parm in ptrb, second in ptra
                             ;****************************************
e4d3 :                       df_rt_get2Strs
                             	; the first int popped is actually the second pa
e4d3 : 2093f7           [ 6] 	jsr df_ost_popStr
e4d6 : 86a3             [ 3] 	stx df_tmpptrb
e4d8 : 85a4             [ 3] 	sta df_tmpptrb+1
                             
e4da : 2093f7           [ 6] 	jsr df_ost_popStr
e4dd : 86a1             [ 3] 	stx df_tmpptra
e4df : 85a2             [ 3] 	sta df_tmpptra+1
e4e1 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ; common code for 2 ints runtime parsing
                             ;****************************************
e4e2 :                       df_rt_parm_2ints
                             	; evaluate 1st parm
e4e2 : 201ee2           [ 6] 	jsr df_rt_neval
                             	; jump over comma
e4e5 : e688             [ 5] 	inc df_exeoff
                             	; evaluate the 2nd parm
e4e7 : 201ee2           [ 6] 	jsr df_rt_neval
                             	
e4ea : 4cc4e4           [ 3] 	jmp df_rt_get2Ints
                             	; pop 2nd parm
                             ;	jsr df_ost_popInt
                             ;	stx df_tmpptrb
                             ;	sta df_tmpptrb+1
                             	; pop 1st parm
                             ;	jsr df_ost_popInt
                             ;	stx df_tmpptra
                             ;	sta df_tmpptra+1
                             ;	rts
                             
                             ;****************************************
                             ; common code for 3 ints runtime parsing
                             ;****************************************
e4ed :                       df_rt_parm_3ints
                             	; evaluate 1st parm
e4ed : 201ee2           [ 6] 	jsr df_rt_neval
e4f0 : e688             [ 5] 	inc df_exeoff
                             	; evaluate the 2nd parm
e4f2 : 201ee2           [ 6] 	jsr df_rt_neval
e4f5 : e688             [ 5] 	inc df_exeoff
                             	; evaluate the 3rd parm
e4f7 : 201ee2           [ 6] 	jsr df_rt_neval
                             
                             	; pop 3rd parm
e4fa :                       df_rt_parm_pop3
e4fa : 208ff7           [ 6] 	jsr df_ost_popInt
e4fd : 86a5             [ 3] 	stx df_tmpptrc
e4ff : 85a6             [ 3] 	sta df_tmpptrc+1
                             	; pop 2nd and 1st
e501 : 4cc4e4           [ 3] 	jmp df_rt_get2Ints
                             ;	jsr df_ost_popInt
                             ;	stx df_tmpptrb
                             ;	sta df_tmpptrb+1
                             	; pop 1st parm
                             ;	jsr df_ost_popInt
                             ;	stx df_tmpptra
                             ;	sta df_tmpptra+1
AS65 Assembler for R6502 [1.42].                                     Page  200
-------------------------------- bank\bank0.s --------------------------------

                             ;	rts
                             
                             ;****************************************
                             ; common code for 4 ints runtime parsing
                             ;****************************************
e504 :                       df_rt_parm_4ints
                             	; evaluate 1st parm
e504 : 201ee2           [ 6] 	jsr df_rt_neval
e507 : e688             [ 5] 	inc df_exeoff
                             	; evaluate the 2nd parm
e509 : 201ee2           [ 6] 	jsr df_rt_neval
e50c : e688             [ 5] 	inc df_exeoff
                             	; evaluate the 3rd parm
e50e : 201ee2           [ 6] 	jsr df_rt_neval
e511 : e688             [ 5] 	inc df_exeoff
                             	; evaluate the 4th parm
e513 : 201ee2           [ 6] 	jsr df_rt_neval
                             
                             	; pop 4th parm
e516 : 208ff7           [ 6] 	jsr df_ost_popInt
e519 : 86a7             [ 3] 	stx df_tmpptrd
e51b : 85a8             [ 3] 	sta df_tmpptrd+1
                             
                             	; pop 3,2,1 parms
e51d : 4cfae4           [ 3] 	jmp df_rt_parm_pop3
                             
                             	; pop 3rd parm
                             ;	jsr df_ost_popInt
                             ;	stx df_tmpptrc
                             ;	sta df_tmpptrc+1
                             	; pop 2nd parm
                             ;	jsr df_ost_popInt
                             ;	stx df_tmpptrb
                             ;	sta df_tmpptrb+1
                             	; pop 1st parm
                             ;	jsr df_ost_popInt
                             ;	stx df_tmpptra
                             ;	sta df_tmpptra+1
                             ;	rts
                             
                             ;****************************************
                             ; common code for 5 ints runtime parsing
                             ;****************************************
                             ;df_rt_parm_5ints
                             ;	; evaluate 1st parm
                             ;	jsr df_rt_neval
                             ;	inc df_exeoff
                             ;	; evaluate the 2nd parm
                             ;	jsr df_rt_neval
                             ;	inc df_exeoff
                             ;	; evaluate the 3rd parm
                             ;	jsr df_rt_neval
                             ;	inc df_exeoff
                             ;	; evaluate the 4th parm
                             ;	jsr df_rt_neval
                             ;	inc df_exeoff
                             ;	; evaluate the 5th parm
                             ;	jsr df_rt_neval
                             ;
                             ;	; pop 5th parm
                             ;	jsr df_ost_popInt
                             ;	stx df_tmpptre
AS65 Assembler for R6502 [1.42].                                     Page  201
-------------------------------- bank\bank0.s --------------------------------

                             ;	sta df_tmpptre+1
                             ;	; pop 4th parm
                             ;	jsr df_ost_popInt
                             ;	stx df_tmpptrd
                             ;	sta df_tmpptrd+1
                             ;	; pop 3rd parm
                             ;	jsr df_ost_popInt
                             ;	stx df_tmpptrc
                             ;	sta df_tmpptrc+1
                             ;	; pop 2nd parm
                             ;	jsr df_ost_popInt
                             ;	stx df_tmpptrb
                             ;	sta df_tmpptrb+1
                             ;	; pop 1st parm
                             ;	jsr df_ost_popInt
                             ;	stx df_tmpptra
                             ;	sta df_tmpptra+1
                             ;
                             ;	rts
                             
                             ;****************************************
                             ;* initialise statement to be executed
                             ;* X,A = line pointer, Y=statement offset
                             ;****************************************
e520 :                       df_rt_init_stat_ptr
                             	; save current line
e520 : 8686             [ 3] 	stx df_currlin
e522 : 8587             [ 3] 	sta df_currlin+1
e524 : 8480             [ 3] 	sty df_curstidx
e526 : 8488             [ 3] 	sty df_exeoff
e528 : b186             [ 5] 	lda (df_currlin),y
e52a : 857f             [ 3] 	sta df_nxtstidx
e52c : a200             [ 2] 	ldx #0
e52e : a186             [ 6] 	lda (df_currlin,x)
e530 : 857e             [ 3] 	sta df_eolidx
                             ;	ldy df_curstidx
                             ;	lda (df_currlin),y
                             ;	sta df_nxtstidx
e532 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Execute from a statement pointed to
                             ;* by currlin and exeoff
                             ;****************************************
e533 :                       df_rt_exec_stat
e533 : a686             [ 3] 	ldx df_currlin
e535 : a587             [ 3] 	lda df_currlin+1
e537 : a488             [ 3] 	ldy df_exeoff
e539 :                       df_rt_exec_init_ptr
e539 : 2020e5           [ 6] 	jsr df_rt_init_stat_ptr
                             	; assume normal flow of control if next line hi 
                             	; this means no line can execute below page 1, n
e53c : a900             [ 2] 	lda #0
e53e : 858a             [ 3] 	sta df_nextlin+1
                             
                             	; find first token in statement
e540 :                       df_rt_exec_find_tok
e540 : c8               [ 2] 	iny
e541 : b186             [ 5] 	lda (df_currlin),y
e543 : 10fb             [ 3] 	bpl df_rt_exec_find_tok
e545 :                       df_rt_exec_found_tok
                             	; skip past token to next byte in readiness
AS65 Assembler for R6502 [1.42].                                     Page  202
-------------------------------- bank\bank0.s --------------------------------

e545 : c8               [ 2] 	iny
e546 : 8488             [ 3] 	sty df_exeoff
                             	; Run that statement - if end of return will pul
                             	; and effectively do an rts from this routine.
e548 : 2099e5           [ 6] 	jsr df_rt_run_token
                             
                             	; check for break, asynch get
e54b : c65b             [ 5] 	dec df_checkkey
e54d : d00a             [ 3] 	bne df_rt_exec_no_key
e54f : a55c             [ 3] 	lda df_checkmsk
e551 : 855b             [ 3] 	sta df_checkkey
e553 : 18               [ 2] 	clc
e554 : 2027c4           [ 6] 	jsr io_get_ch
e557 : 9029             [ 3] 	bcc df_rt_exec_check_key
e559 :                       df_rt_exec_no_key
                             	; check if normal flow of control
e559 : a58a             [ 3] 	lda df_nextlin+1
e55b : d033             [ 3] 	bne df_rt_exec_jump
                             	; try and execute another statement until end of
e55d : a47f             [ 3] 	ldy df_nxtstidx
e55f : c47e             [ 3] 	cpy df_eolidx
e561 : 8488             [ 3] 	sty df_exeoff
e563 : d0ce             [ 3] 	bne df_rt_exec_stat
                             	
                             	; reached end of line, move to next
e565 : a200             [ 2] 	ldx #0
e567 : 18               [ 2] 	clc
e568 : a186             [ 6] 	lda (df_currlin,x)
e56a : 6586             [ 3] 	adc df_currlin
e56c : 8586             [ 3] 	sta df_currlin
                             	_bcc 2
                             
e570 : e687             [ 5] 	inc df_currlin+1
                             
                             	; start from first statement in new line
e572 : a003             [ 2] 	ldy #3
e574 : 8488             [ 3] 	sty df_exeoff
                             
                             	; check if this line has any content (length >0)
e576 : a186             [ 6] 	lda (df_currlin,x)
e578 : 857e             [ 3] 	sta df_eolidx
                             	; no more lines (len = 0), program done
e57a : d0b7             [ 3] 	bne df_rt_exec_stat
                             	; else done
                             	; normally wouldn't get here except immediate mo
                             	; if line number <> 0 then error
e57c : a55e             [ 3] 	lda df_immed
e57e : f00e             [ 3] 	beq df_rt_unexpected_end
e580 :                       df_rt_exec_end
e580 : 18               [ 2] 	clc
e581 : 60               [ 6] 	rts
e582 :                       df_rt_exec_check_key
e582 : c91a             [ 2] 	cmp #UTF_BRK					; CTRK-Z?
e584 : f006             [ 3] 	beq df_rt_exec_ctrl_z
e586 : c903             [ 2] 	cmp #UTF_ETX					; CTRL-C?
e588 : d0cf             [ 3] 	bne df_rt_exec_no_key			; None relevant keys, go
e58a :                       df_rt_exec_ctrl_c
                             	SWBRK DFERR_BREAK
                             
e58c :                       df_rt_exec_ctrl_z
                             	; Force a break with zero error number
                             	; this will drop in to the monitor
AS65 Assembler for R6502 [1.42].                                     Page  203
-------------------------------- bank\bank0.s --------------------------------

                             	SWBRK 0
                             
                             
e58e :                       df_rt_unexpected_end
                             	SWBRK DFERR_IMMEDIATE
                             
                             
                             	; if hi byte of nextline is not zero then
                             	; current line = next line
e590 :                       df_rt_exec_jump
                             	; initialise statement pointer from nextlin,toks
e590 : a689             [ 3] 	ldx df_nextlin
e592 : a58a             [ 3] 	lda df_nextlin+1
e594 : a47f             [ 3] 	ldy df_nxtstidx
e596 : 4c39e5           [ 3] 	jmp df_rt_exec_init_ptr
                             
                             
                             ;****************************************
                             ;* Run statement in A
                             ;****************************************
e599 :                       df_rt_run_token
                             	; mask off MSB
                             ;	and #0x7f
                             	; multiply by 2
e599 : 0a               [ 2] 	asl a
e59a : aa               [ 2] 	tax
e59b : bd84e6           [ 4] 	lda df_rt_tokenjmp,x
e59e : 85a1             [ 3] 	sta df_tmpptra
e5a0 : bd85e6           [ 4] 	lda df_rt_tokenjmp+1,x
e5a3 : 85a2             [ 3] 	sta df_tmpptra+1
                             	; execution code finishes with rts
e5a5 : 6ca100           [ 6] 	jmp (df_tmpptra)
                             
                             
                             ;****************************************
                             ;* X,A : Line Address, Y = Index
                             ;* C=0 Found next statement
                             ;* C=1 No statement found
                             ;****************************************
e5a8 :                       df_rt_nextstat
                             	; save pointer
e5a8 : 8690             [ 3] 	stx df_lineptr
e5aa : 8591             [ 3] 	sta df_lineptr+1
                             	; if end of program then err
e5ac : a200             [ 2] 	ldx #0
e5ae : a190             [ 6] 	lda (df_lineptr,x)
e5b0 : f022             [ 3] 	beq df_rt_nextstat_err
                             	; if next statement idx == line length
                             ;	lda (df_lineptr),y
                             ;	beq df_rt_nextstat_ln
e5b2 : b190             [ 5] 	lda (df_lineptr),y
e5b4 : c190             [ 6] 	cmp (df_lineptr,x)
e5b6 : f007             [ 3] 	beq df_rt_nextstat_ln
                             	; then go to next line
                             	; else make this Y
e5b8 : a8               [ 2] 	tay
                             	; X = line low
e5b9 : a690             [ 3] 	ldx df_lineptr
                             	; A = line high
e5bb : a591             [ 3] 	lda df_lineptr+1
e5bd : 18               [ 2] 	clc
e5be : 60               [ 6] 	rts
AS65 Assembler for R6502 [1.42].                                     Page  204
-------------------------------- bank\bank0.s --------------------------------

e5bf :                       df_rt_nextstat_ln
                             	; for next line, add line length to ptr
e5bf : 18               [ 2] 	clc
                             ;	lda (df_lineptr,x)
e5c0 : 6590             [ 3] 	adc df_lineptr
e5c2 : 8590             [ 3] 	sta df_lineptr
                             	_bcc 2
                             
e5c6 : e691             [ 5] 	inc df_lineptr+1
                             	; if end of program set C as error
e5c8 : a190             [ 6] 	lda (df_lineptr,x)
e5ca : f008             [ 3] 	beq df_rt_nextstat_err
e5cc : a690             [ 3] 	ldx df_lineptr
e5ce : a591             [ 3] 	lda df_lineptr+1
                             	; always skip line number and length for start o
e5d0 : a003             [ 2] 	ldy #3
e5d2 : 18               [ 2] 	clc
e5d3 : 60               [ 6] 	rts
e5d4 :                       df_rt_nextstat_err
e5d4 : a000             [ 2] 	ldy #0
e5d6 : 38               [ 2] 	sec
e5d7 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Push current line and statement to runtime sta
                             ;****************************************
e5d8 :                       df_rt_push_stat
e5d8 : a580             [ 3] 	lda df_curstidx
e5da : 2016f7           [ 6] 	jsr df_rst_pushByte
e5dd : a587             [ 3] 	lda df_currlin+1
e5df : a686             [ 3] 	ldx df_currlin
e5e1 : 4c2ef7           [ 3] 	jmp df_rst_pushWord
                             ;	clc
                             ;	rts
                             
                             ;****************************************
                             ;* Pop line and statement from runtime stack
                             ;* And transfer control to next statement
                             ;****************************************
e5e4 :                       df_rt_pop_stat
e5e4 : 203cf7           [ 6] 	jsr df_rst_popWord
e5e7 : 8689             [ 3] 	stx	df_nextlin
e5e9 : 858a             [ 3] 	sta df_nextlin+1
e5eb : 201ff7           [ 6] 	jsr df_rst_popByte
e5ee : a8               [ 2] 	tay
e5ef : a689             [ 3] 	ldx df_nextlin
e5f1 : a58a             [ 3] 	lda df_nextlin+1
e5f3 : 20a8e5           [ 6] 	jsr df_rt_nextstat
e5f6 : 8689             [ 3] 	stx df_nextlin
e5f8 : 858a             [ 3] 	sta df_nextlin+1
e5fa : 847f             [ 3] 	sty df_nxtstidx
                             ;	clc
e5fc : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Find proc definition in procptr
                             ;* Only call if proc not found before
                             ;****************************************
e5fd :                       df_rt_findproc
                             	; start at program beginning
                             	_cpyZPWord df_prgstrt,df_lineptr
                             
AS65 Assembler for R6502 [1.42].                                     Page  205
-------------------------------- bank\bank0.s --------------------------------

e605 : a003             [ 2] 	ldy #3
e607 : 8492             [ 3] 	sty df_lineidx
e609 : a200             [ 2] 	ldx #0
e60b : a190             [ 6] 	lda (df_lineptr,x)
e60d : f034             [ 3] 	beq df_rt_findproc_err
e60f :                       df_rt_findproc_cmd
e60f : c8               [ 2] 	iny
e610 : b190             [ 5] 	lda (df_lineptr),y
e612 : 10fb             [ 3] 	bpl df_rt_findproc_cmd
e614 : c986             [ 2] 	cmp #DFRT_DEF
e616 : d017             [ 3] 	bne df_rt_findproc_nextstat
                             	; skip def token
e618 : c8               [ 2] 	iny
                             	; skip proc escape token
e619 : c8               [ 2] 	iny
                             	; now check the proc address against procptr
e61a : b190             [ 5] 	lda (df_lineptr),y
e61c : c58e             [ 3] 	cmp df_procptr
e61e : d00f             [ 3] 	bne df_rt_findproc_nextstat
e620 : c8               [ 2] 	iny
e621 : b190             [ 5] 	lda (df_lineptr),y
e623 : c58f             [ 3] 	cmp df_procptr+1
e625 : d008             [ 3] 	bne df_rt_findproc_nextstat
                             
                             	; found it, return AXY with line details
e627 : a690             [ 3] 	ldx df_lineptr
e629 : a591             [ 3] 	lda df_lineptr+1
e62b : a492             [ 3] 	ldy df_lineidx
e62d : 18               [ 2] 	clc
e62e : 60               [ 6] 	rts
e62f :                       df_rt_findproc_nextstat
                             	; restore AXY line details and find next stateme
e62f : a690             [ 3] 	ldx df_lineptr
e631 : a591             [ 3] 	lda df_lineptr+1
e633 : a492             [ 3] 	ldy df_lineidx
e635 : 20a8e5           [ 6] 	jsr df_rt_nextstat
e638 : b009             [ 3] 	bcs df_rt_findproc_err
e63a : 8690             [ 3] 	stx df_lineptr
e63c : 8591             [ 3] 	sta df_lineptr+1
e63e : 8492             [ 3] 	sty df_lineidx
e640 : 4c0fe6           [ 3] 	jmp df_rt_findproc_cmd
                             	; error
e643 :                       df_rt_findproc_err
                             	SWBRK DFERR_NOPROC
                             
                             
                             ;****************************************
                             ;* Find an escape value
                             ;* Does not check for end of line or statement
                             ;****************************************
e645 :                       df_rt_findescval
e645 : a488             [ 3] 	ldy df_exeoff
e647 : 88               [ 2] 	dey
e648 :                       df_rt_findescval_loop
e648 : c8               [ 2] 	iny
e649 : b186             [ 5] 	lda (df_currlin),y
e64b : c920             [ 2] 	cmp #DFTK_ESCVAL
e64d : b0f9             [ 3] 	bcs df_rt_findescval_loop
e64f : 8488             [ 3] 	sty df_exeoff
e651 : 60               [ 6] 	rts
                             
                             ;****************************************
AS65 Assembler for R6502 [1.42].                                     Page  206
-------------------------------- bank\bank0.s --------------------------------

                             ;* Skip white space
                             ;* Does not check for end of line or statement
                             ;* A contains non-ws char, df_exeoff updated
                             ;****************************************
e652 :                       df_rt_skip_ws
e652 : a488             [ 3] 	ldy df_exeoff
e654 : 88               [ 2] 	dey
e655 :                       df_rt_skip_ws_loop
e655 : c8               [ 2] 	iny
e656 : b186             [ 5] 	lda (df_currlin),y
e658 : c920             [ 2] 	cmp #' '
e65a : f0f9             [ 3] 	beq df_rt_skip_ws_loop
e65c : 8488             [ 3] 	sty df_exeoff
e65e : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Get an lvar
                             ;* Assumes next token will be escape DFTK_VAR
                             ;* tmpptra contains vvt slot address
                             ;* X,A is the lvar pointer
                             ;****************************************
e65f :                       df_rt_getlvar
e65f : 2045e6           [ 6] 	jsr df_rt_findescval
                             	; move past the escape value
e662 : c8               [ 2] 	iny
                             
                             	; get variable address
e663 : b186             [ 5] 	lda (df_currlin),y
e665 : 85a1             [ 3] 	sta df_tmpptra
e667 : c8               [ 2] 	iny
e668 : b186             [ 5] 	lda (df_currlin),y
e66a : 85a2             [ 3] 	sta df_tmpptra+1
                             
e66c : 8488             [ 3] 	sty df_exeoff
                             	; get the type
e66e : a000             [ 2] 	ldy #0
e670 : b1a1             [ 5] 	lda (df_tmpptra),y
                             	; set carry flag to return pointer (lvar)
e672 : 38               [ 2] 	sec
e673 : a488             [ 3] 	ldy df_exeoff
e675 : 20c2e3           [ 6] 	jsr df_rt_eval_var
e678 : 4c97f7           [ 3] 	jmp df_ost_popPtr
                             ;	rts
                             
                             ;****************************************
                             ;* Pop stat from rt stack and continue
                             ;* Y MUST BE ON THE CPU STACK AS IT GETS PLYed HE
                             ;****************************************
e67b :                       df_rt_pop_stat_go
e67b : 20e4e5           [ 6] 	jsr df_rt_pop_stat
                             	; restore stack pointer so we don't lose this en
e67e : 68               [ 4] 	pla
e67f : a8               [ 2] 	tay
e680 : 8476             [ 3] 	sty df_rtstop
e682 : 18               [ 2] 	clc
e683 : 60               [ 6] 	rts
                             
                             	include "dflat/rtjmptab.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
AS65 Assembler for R6502 [1.42].                                     Page  207
-------------------------------- bank\bank0.s --------------------------------

                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  RTJUMPTAB.S
                             ;*  Runtime token jump table.
                             ;*  dflat uses four key tables to tokenise and ru
                             ;*  - df_tokensyms    - table of token symbols
                             ;*  - df_tk_tokentype - table of token types
                             ;*  - df_tk_tokenjmp  - table of tokenising routi
                             ;*  - df_rt_tokenjmp  - table of runtime token an
                             ;*  The key is the token symbols.  When a line is
                             ;*  in to the raw (untokenised) buffer, df_tokens
                             ;*  used to identify tokens.  The position of the
                             ;*  token is used to then look up type and jump v
                             ;*  in the other tables.
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code  
                             
                             ; Tokeniser jump table
                             ; In token order of df_tokensyms
e684 :                       df_rt_tokenjmp
e684 : 60ee                  	dw	df_rt_assign
e686 : b5f5                  	dw	df_rt_proc
e688 : 71ee                  	dw	df_rt_comment
e68a : 18ee                  	dw	df_rt_println
e68c : d5ed                  	dw	df_rt_printat
e68e : dfed                  	dw	df_rt_print
e690 : 55f6                  	dw	df_rt_def			; 0x86
e692 : d8f6                  	dw	df_rt_enddef		; 0x87
e694 : d5f6                  	dw	df_rt_return		; 0x88
e696 : 77f5                  	dw	df_rt_abort			; 0x89
e698 : 3dec                  	dw	df_rt_local
e69a : 69ec                  	dw	df_rt_dim
e69c : 0beb                  	dw	df_rt_repeat		; 0x8c
e69e : 13eb                  	dw	df_rt_until
e6a0 : 72ea                  	dw	df_rt_for			; 0x8e
e6a2 : b0ea                  	dw	df_rt_next			; 0x8f
e6a4 : 4be9                  	dw	df_rt_while			; 0x90
e6a6 : aee9                  	dw	df_rt_wend			; 0x81
e6a8 : 31ea                  	dw	df_rt_if			; 0x92
e6aa : 1fea                  	dw	df_rt_else			; 0x93
e6ac : 1aea                  	dw	df_rt_endif			; 0x94
e6ae : 1fea                  	dw	df_rt_elseif		; 0x95
e6b0 : 71ee                  	dw	df_rt_data			; 0x96
e6b2 : 86fa                  	dw	df_rt_asm_assemble	; 0x97 df_rt_asm_assemble
e6b4 : 72ee                  	dw	df_rt_run
e6b6 : 24ef                  	dw	df_rt_list
e6b8 : 01ec                  	dw	df_rt_input
e6ba : 68ed                  	dw	df_rt_text
e6bc : f1ec                  	dw	df_rt_plot
e6be : 62ed                  	dw	df_rt_cursor
e6c0 : eeec                  	dw	df_rt_cls
e6c2 : 80f1                  	dw	df_rt_poke
e6c4 : 71f1                  	dw	df_rt_doke
e6c6 : b3f1                  	dw	df_rt_sound
e6c8 : c6f1                  	dw	df_rt_music
e6ca : dbf1                  	dw	df_rt_play
e6cc : e9eb                  	dw	df_rt_read
AS65 Assembler for R6502 [1.42].                                     Page  208
-------------------------------- bank\bank0.s --------------------------------

e6ce : 48e9                  	dw	df_rt_new
                             ;	dw	df_rt_renum
e6d0 : bfed                  	dw	df_rt_wait
e6d2 : 42f3                  	dw	df_rt_reset
e6d4 : 6bed                  	dw	df_rt_hires
e6d6 : 84ed                  	dw	df_rt_point
e6d8 : aeed                  	dw	df_rt_line
e6da : a0ed                  	dw	df_rt_lineto
e6dc : 6eed                  	dw	df_rt_pixmode
e6de : 74ed                  	dw	df_rt_ink
e6e0 : 7aed                  	dw	df_rt_paper
e6e2 : 8eed                  	dw	df_rt_circle
                             ;	dw	df_rt_himem
e6e4 : 45e9                  	dw	df_rt_monitor
e6e6 : 79f5                  	dw	df_rt_sprchar
e6e8 : 83f5                  	dw	df_rt_sprpos
e6ea : 8ff5                  	dw	df_rt_sprupd
e6ec : 98f5                  	dw	df_rt_sprinit
e6ee : 9bf5                  	dw	df_rt_sprmulti
                             ;	dw	df_rt_save
                             ;	dw	df_rt_load
e6f0 : e4f2                  	dw	df_rt_bsave
e6f2 : b1f2                  	dw	df_rt_bload
e6f4 : 5cf2                  	dw	df_rt_tsave
e6f6 : 76f2                  	dw	df_rt_tload
e6f8 : 3ff2                  	dw	df_rt_delete
e6fa : 4cf2                  	dw	df_rt_dir
                             
e6fc : 59f3                  	dw	df_rt_peek
e6fe : 57f3                  	dw	df_rt_deek
e700 : e2f3                  	dw	df_rt_stick
e702 : e8f3                  	dw	df_rt_get
e704 : a8f4                  	dw	df_rt_chr
e706 : faf4                  	dw	df_rt_left
e708 : 0bf5                  	dw	df_rt_right
e70a : 26f5                  	dw	df_rt_mid
e70c : 44f5                  	dw	df_rt_len
e70e : 94f3                  	dw	df_rt_mem
e710 : fcf3                  	dw	df_rt_scrn
e712 : 72f3                  	dw	df_rt_rnd
e714 : 16f4                  	dw	df_rt_elapsed
e716 : 31f4                  	dw	df_rt_call
e718 : bcf4                  	dw	df_rt_hex
e71a : edf4                  	dw	df_rt_dec
e71c : 50f5                  	dw	df_rt_asc
e71e : 61f5                  	dw	df_rt_val
e720 : 09f4                  	dw	df_rt_pixel
e722 : a1f5                  	dw	df_rt_sprhit
e724 : 43f4                  	dw	df_rt_sgn
e726 : 60f4                  	dw	df_rt_addr
                             	
e728 : 9be7                  	dw	df_rt_mult
e72a : bce7                  	dw	df_rt_div
e72c : dde7                  	dw	df_rt_mod
e72e : fee7                  	dw	df_rt_asl
e730 : 11e8                  	dw	df_rt_lsr
e732 : 75e7                  	dw	df_rt_add
e734 : 88e7                  	dw	df_rt_sub
                             	
e736 : 24e8                  	dw	df_rt_and
e738 : 33e8                  	dw	df_rt_or
e73a : 42e8                  	dw	df_rt_eor
AS65 Assembler for R6502 [1.42].                                     Page  209
-------------------------------- bank\bank0.s --------------------------------

e73c : dbe8                  	dw	df_rt_comlte
e73e : e4e8                  	dw	df_rt_comgte
e740 : ede8                  	dw	df_rt_comne
e742 : c0e8                  	dw	df_rt_comlt
e744 : c9e8                  	dw	df_rt_comgt
e746 : d2e8                  	dw	df_rt_comeq
                             
                             
                             ; escape sequence handlers
                             ; to do the reverse of tokenising during the list
                             ; command which is also used to save to disk.
e748 :                       df_rt_escjmp
e748 : f7ef                  	dw df_rt_lst_chr
e74a : f6ef                  	dw df_rt_lst_reserved
e74c : f6ef                  	dw df_rt_lst_reserved
e74e : f6ef                  	dw df_rt_lst_reserved
e750 : f6ef                  	dw df_rt_lst_reserved	
e752 : f6ef                  	dw df_rt_lst_reserved	; no such thing as bytdec
e754 : 14f0                  	dw df_rt_lst_bythex
e756 : 39f0                  	dw df_rt_lst_bytbin
e758 : f6ef                  	dw df_rt_lst_reserved	
e75a : 5df0                  	dw df_rt_lst_intdec
e75c : 27f0                  	dw df_rt_lst_inthex
e75e : 41f0                  	dw df_rt_lst_intbin
e760 : f6ef                  	dw df_rt_lst_reserved
e762 : f6ef                  	dw df_rt_lst_reserved
e764 : f6ef                  	dw df_rt_lst_reserved
e766 : f6ef                  	dw df_rt_lst_reserved	
e768 : baf0                  	dw df_rt_lst_strlit
e76a : 68f0                  	dw df_rt_lst_var
e76c : 68f0                  	dw df_rt_lst_proc
                             
                             	include "dflat/rtsubs.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  RTSUBS.S
                             ;*  Module that implements the runtime execution 
                             ;*  keywords and functions.
                             ;*  So this is where most of the action is for ru
                             ;*  a line is being executed, the dflat runtime c
                             ;*  jumps through the runtime table to routines h
                             ;*  Every dflat statement begins with a token (ig
                             ;*  whitespace), even the implicit assignment and
                             ;*  invocation.
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code
                             
e76e :                       mod_sz_rtsubs_s
                             
                             	include "dflat/numop.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
AS65 Assembler for R6502 [1.42].                                     Page  210
-------------------------------- bank\bank0.s --------------------------------

                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  NUMOP.S
                             ;*	Dflat number AND string operators.
                             ;*  Uses the operator stack to get parameters, le
                             ;*  result on the operator stack.
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code  
                             
                             ; common pushint code
e76e :                       df_rt_putintres
e76e : a6a1             [ 3] 	ldx df_tmpptra
e770 : a5a2             [ 3] 	lda df_tmpptra+1
e772 : 4c5ff7           [ 3] 	jmp df_ost_pushInt
                             
                             ; add two numbers
e775 :                       df_rt_add
e775 : 20c4e4           [ 6] 	jsr df_rt_get2Ints
                             	_addZPWord df_tmpptra,df_tmpptrb
                             
e785 : 4c6ee7           [ 3] 	jmp df_rt_putintres
                             	
                             ; subtract
e788 :                       df_rt_sub
e788 : 20c4e4           [ 6] 	jsr df_rt_get2Ints
                             	_subZPWord df_tmpptra,df_tmpptrb
                             
e798 : 4c6ee7           [ 3] 	jmp df_rt_putintres
                             
                             ; multiply
e79b :                       df_rt_mult
e79b : 20c4e4           [ 6] 	jsr df_rt_get2Ints
                             	_cpyZPWord df_tmpptra,num_a
                             
                             	_cpyZPWord df_tmpptrb,num_b
                             
e7ae : 2035d6           [ 6] 	jsr int_mult
                             	_cpyZPWord num_a,df_tmpptra
                             
e7b9 : 4c6ee7           [ 3] 	jmp df_rt_putintres
                             
                             ; divide
e7bc :                       df_rt_div
e7bc : 20c4e4           [ 6] 	jsr df_rt_get2Ints
                             	_cpyZPWord df_tmpptra,num_a
                             
                             	_cpyZPWord df_tmpptrb,num_b
                             
e7cf : 2060d6           [ 6] 	jsr int_div
                             	_cpyZPWord num_a,df_tmpptra
                             
e7da : 4c6ee7           [ 3] 	jmp df_rt_putintres
                             
                             ; mod
e7dd :                       df_rt_mod
e7dd : 20c4e4           [ 6] 	jsr df_rt_get2Ints
AS65 Assembler for R6502 [1.42].                                     Page  211
-------------------------------- bank\bank0.s --------------------------------

                             	_cpyZPWord df_tmpptra,num_a
                             
                             	_cpyZPWord df_tmpptrb,num_b
                             
e7f0 : 2060d6           [ 6] 	jsr int_div
                             	_cpyZPWord num_x,df_tmpptra
                             
e7fb : 4c6ee7           [ 3] 	jmp df_rt_putintres
                             
                             ; shift left
e7fe :                       df_rt_asl
e7fe : 20c4e4           [ 6] 	jsr df_rt_get2Ints
                             	; use low byte only for # of shifts
e801 : a6a3             [ 3] 	ldx df_tmpptrb
e803 : e8               [ 2] 	inx
e804 :                       df_rt_aslbit
e804 : ca               [ 2] 	dex
e805 : f007             [ 3] 	beq df_rt_asldone
e807 : 06a1             [ 5] 	asl df_tmpptra
e809 : 26a2             [ 5] 	rol df_tmpptra+1
e80b : 4c04e8           [ 3] 	jmp df_rt_aslbit
e80e :                       df_rt_asldone
e80e : 4c6ee7           [ 3] 	jmp df_rt_putintres
                             
                             ; shift right
e811 :                       df_rt_lsr
e811 : 20c4e4           [ 6] 	jsr df_rt_get2Ints
                             	; use low byte only for # of shifts
e814 : a6a3             [ 3] 	ldx df_tmpptrb
e816 : e8               [ 2] 	inx
e817 :                       df_rt_lsrbit
e817 : ca               [ 2] 	dex
e818 : f007             [ 3] 	beq df_rt_lsrdone
e81a : 46a2             [ 5] 	lsr df_tmpptra+1
e81c : 66a1             [ 5] 	ror df_tmpptra
e81e : 4c17e8           [ 3] 	jmp df_rt_lsrbit
e821 :                       df_rt_lsrdone
e821 : 4c6ee7           [ 3] 	jmp df_rt_putintres
                             
                             ; logical and
e824 :                       df_rt_and
e824 : 20c4e4           [ 6] 	jsr df_rt_get2Ints
e827 : a5a1             [ 3] 	lda df_tmpptra
e829 : 25a3             [ 3] 	and df_tmpptrb
e82b : aa               [ 2] 	tax
e82c : a5a2             [ 3] 	lda df_tmpptra+1
e82e : 25a4             [ 3] 	and df_tmpptrb+1
e830 : 4c5ff7           [ 3] 	jmp df_ost_pushInt
                             	
                             ; logical or
e833 :                       df_rt_or
e833 : 20c4e4           [ 6] 	jsr df_rt_get2Ints
e836 : a5a1             [ 3] 	lda df_tmpptra
e838 : 05a3             [ 3] 	ora df_tmpptrb
e83a : aa               [ 2] 	tax
e83b : a5a2             [ 3] 	lda df_tmpptra+1
e83d : 05a4             [ 3] 	ora df_tmpptrb+1
e83f : 4c5ff7           [ 3] 	jmp df_ost_pushInt
                             
                             ; logical eor
e842 :                       df_rt_eor
e842 : 20c4e4           [ 6] 	jsr df_rt_get2Ints
AS65 Assembler for R6502 [1.42].                                     Page  212
-------------------------------- bank\bank0.s --------------------------------

e845 : a5a1             [ 3] 	lda df_tmpptra
e847 : 45a3             [ 3] 	eor df_tmpptrb
e849 : aa               [ 2] 	tax
e84a : a5a2             [ 3] 	lda df_tmpptra+1
e84c : 45a4             [ 3] 	eor df_tmpptrb+1
e84e : 4c5ff7           [ 3] 	jmp df_ost_pushInt
                             
                             ; a==b common function
e851 :                       df_rt_aequb
e851 : a5a1             [ 3] 	lda df_tmpptra
e853 : c5a3             [ 3] 	cmp df_tmpptrb
e855 : d004             [ 3] 	bne df_rt_aequbFin
e857 : a5a2             [ 3] 	lda df_tmpptra+1
e859 : c5a4             [ 3] 	cmp df_tmpptrb+1
e85b :                       df_rt_aequbFin
e85b : 60               [ 6] 	rts
                             
                             ; a-b common function
e85c :                       df_rt_asubb
e85c : 38               [ 2] 	sec
e85d : a5a1             [ 3] 	lda df_tmpptra
e85f : e5a3             [ 3] 	sbc df_tmpptrb
e861 : a5a2             [ 3] 	lda df_tmpptra+1
e863 : e5a4             [ 3] 	sbc df_tmpptrb+1
e865 : 5002             [ 3] 	bvc df_rt_asubbFin
e867 : 4980             [ 2] 	eor #0x80
e869 :                       df_rt_asubbFin
e869 : 60               [ 6] 	rts
                             
                             ; b-a common function
e86a :                       df_rt_bsuba
e86a : 38               [ 2] 	sec
e86b : a5a3             [ 3] 	lda df_tmpptrb
e86d : e5a1             [ 3] 	sbc df_tmpptra
e86f : a5a4             [ 3] 	lda df_tmpptrb+1
e871 : e5a2             [ 3] 	sbc df_tmpptra+1
e873 : 5002             [ 3] 	bvc df_rt_bsubaFin
e875 : 4980             [ 2] 	eor #0x80
e877 :                       df_rt_bsubaFin
e877 : 60               [ 6] 	rts
                             
                             ; common routine push true
e878 :                       df_rt_true
e878 : a2ff             [ 2] 	ldx #0xff
e87a : 8a               [ 2] 	txa
e87b : 4c5ff7           [ 3] 	jmp df_ost_pushInt
                             
                             ; common routine push false
e87e :                       df_rt_false
e87e : a200             [ 2] 	ldx #0x00
e880 : 8a               [ 2] 	txa
e881 : 4c5ff7           [ 3] 	jmp df_ost_pushInt
                             
                             ; a < b == (a-b) < 0
e884 :                       df_rt_lt
e884 : 20c4e4           [ 6] 	jsr df_rt_get2Ints
e887 : 205ce8           [ 6] 	jsr df_rt_asubb
e88a : 30ec             [ 3] 	bmi df_rt_true
e88c : 10f0             [ 3] 	bpl df_rt_false
                             
                             ; a <=b == !(b-a > 0)
e88e :                       df_rt_lte
AS65 Assembler for R6502 [1.42].                                     Page  213
-------------------------------- bank\bank0.s --------------------------------

e88e : 20c4e4           [ 6] 	jsr df_rt_get2Ints
e891 :                       df_rt_lte_calc
e891 : 206ae8           [ 6] 	jsr df_rt_bsuba
e894 : 30e8             [ 3] 	bmi df_rt_false
e896 : 10e0             [ 3] 	bpl df_rt_true
                             
                             ; a > b == (b-a) < 0
e898 :                       df_rt_gt
e898 : 20c4e4           [ 6] 	jsr df_rt_get2Ints
e89b : 206ae8           [ 6] 	jsr df_rt_bsuba
e89e : 30d8             [ 3] 	bmi df_rt_true
e8a0 : 10dc             [ 3] 	bpl df_rt_false
                             
                             ; a >= b == (a-b >=0)
e8a2 :                       df_rt_gte
e8a2 : 20c4e4           [ 6] 	jsr df_rt_get2Ints
e8a5 :                       df_rt_gte_calc
e8a5 : 205ce8           [ 6] 	jsr df_rt_asubb
e8a8 : 10ce             [ 3] 	bpl df_rt_true
e8aa : 30d2             [ 3] 	bmi df_rt_false
                             
                             ; a == b
e8ac :                       df_rt_eq
e8ac : 20c4e4           [ 6] 	jsr df_rt_get2Ints
e8af : 2051e8           [ 6] 	jsr df_rt_aequb
e8b2 : d0ca             [ 3] 	bne df_rt_false
e8b4 : f0c2             [ 3] 	beq df_rt_true
                             
                             ; a <> b
e8b6 :                       df_rt_ne
e8b6 : 20c4e4           [ 6] 	jsr df_rt_get2Ints
e8b9 : 2051e8           [ 6] 	jsr df_rt_aequb
e8bc : f0c0             [ 3] 	beq df_rt_false
e8be : d0b8             [ 3] 	bne df_rt_true
                             
                             ; Common usage of boolean operators for num and s
                             
e8c0 :                       df_rt_comlt
                             	; First find the data type on the stack
e8c0 : 2089f7           [ 6] 	jsr df_ost_peekType
e8c3 : 2980             [ 2] 	and #DFST_STR
e8c5 : d04a             [ 4] 	bne df_rt_slt
                             	; If not string then assume number
e8c7 : f0bb             [ 3] 	beq df_rt_lt
                             
e8c9 :                       df_rt_comgt
                             	; First find the data type on the stack
e8c9 : 2089f7           [ 6] 	jsr df_ost_peekType
e8cc : 2980             [ 2] 	and #DFST_STR
e8ce : d048             [ 4] 	bne df_rt_sgt
                             	; If not string then assume number
e8d0 : f0c6             [ 3] 	beq df_rt_gt
                             
e8d2 :                       df_rt_comeq
                             	; First find the data type on the stack
e8d2 : 2089f7           [ 6] 	jsr df_ost_peekType
e8d5 : 2980             [ 2] 	and #DFST_STR
e8d7 : d048             [ 4] 	bne df_rt_seq
                             	; If not string then assume number
e8d9 : f0d1             [ 3] 	beq df_rt_eq
                             
e8db :                       df_rt_comlte
AS65 Assembler for R6502 [1.42].                                     Page  214
-------------------------------- bank\bank0.s --------------------------------

                             	; First find the data type on the stack
e8db : 2089f7           [ 6] 	jsr df_ost_peekType
e8de : 2980             [ 2] 	and #DFST_STR
e8e0 : d014             [ 3] 	bne df_rt_slte
                             	; If not string then assume number
e8e2 : f0aa             [ 3] 	beq df_rt_lte
                             	
e8e4 :                       df_rt_comgte
                             	; First find the data type on the stack
e8e4 : 2089f7           [ 6] 	jsr df_ost_peekType
e8e7 : 2980             [ 2] 	and #DFST_STR
e8e9 : d018             [ 4] 	bne df_rt_sgte
                             	; If not string then assume number
e8eb : f0b5             [ 3] 	beq df_rt_gte
                             
e8ed :                       df_rt_comne
                             	; First find the data type on the stack
e8ed : 2089f7           [ 6] 	jsr df_ost_peekType
e8f0 : 2980             [ 2] 	and #DFST_STR
e8f2 : d016             [ 4] 	bne df_rt_sne
                             	; If not string then assume number
e8f4 : f0c0             [ 3] 	beq df_rt_ne
                             
                             
                             ;********** STRING OPS **********
                             
                             ; string less than or equal
e8f6 :                       df_rt_slte
e8f6 : 2028e9           [ 6] 	jsr df_rt_str_comp
e8f9 : 3005             [ 4] 	bmi df_rt_str_comp_true
e8fb : f003             [ 4] 	beq df_rt_str_comp_true
e8fd :                       df_rt_str_comp_false
e8fd : 4c7ee8           [ 3] 	jmp df_rt_false
e900 :                       df_rt_str_comp_true
e900 : 4c78e8           [ 3] 	jmp df_rt_true	
                             
                             ; string greater then or equal	
e903 :                       df_rt_sgte
e903 : 2028e9           [ 6] 	jsr df_rt_str_comp
e906 : 10f8             [ 3] 	bpl df_rt_str_comp_true
e908 : 30f3             [ 4] 	bmi df_rt_str_comp_false
                             
                             ; string not equal
e90a :                       df_rt_sne
e90a : 2028e9           [ 6] 	jsr df_rt_str_comp
e90d : d0f1             [ 3] 	bne df_rt_str_comp_true
e90f : f0ec             [ 4] 	beq df_rt_str_comp_false
                             
                             ; string less than
e911 :                       df_rt_slt
e911 : 2028e9           [ 6] 	jsr df_rt_str_comp
e914 : 30ea             [ 3] 	bmi df_rt_str_comp_true
e916 : 10e5             [ 4] 	bpl df_rt_str_comp_false
                             
                             ; string greater than
e918 :                       df_rt_sgt
e918 : 2028e9           [ 6] 	jsr df_rt_str_comp
e91b : 30e0             [ 4] 	bmi df_rt_str_comp_false
e91d : f0de             [ 4] 	beq df_rt_str_comp_false
e91f : d0df             [ 3] 	bne df_rt_str_comp_true
                             
                             ; string equal
AS65 Assembler for R6502 [1.42].                                     Page  215
-------------------------------- bank\bank0.s --------------------------------

e921 :                       df_rt_seq
e921 : 2028e9           [ 6] 	jsr df_rt_str_comp
e924 : f0da             [ 3] 	beq df_rt_str_comp_true
e926 : d0d5             [ 4] 	bne df_rt_str_comp_false
                             
                             ; common string comparator
                             ; N=1 means <
                             ; Z=0 means >
                             ; Z=1 means ==
e928 :                       df_rt_str_comp
e928 : 20d3e4           [ 6] 	jsr df_rt_get2Strs
e92b : a000             [ 2] 	ldy #0
e92d :                       df_rt_str_comp_byte
e92d : b1a1             [ 5] 	lda (df_tmpptra),y
e92f : aa               [ 2] 	tax							; Save op1 char in X
e930 : d1a3             [ 5] 	cmp (df_tmpptrb),y
                             	; if c=0 then <
e932 : 9008             [ 3] 	bcc df_rt_str_comp_lt
                             	; if c=1 and nz then >
e934 : d009             [ 3] 	bne df_rt_str_comp_gt
                             	; if here then both strings still the same
e936 : 8a               [ 2] 	txa							; What was op1 char
                             	; if char is zero then end
e937 : f009             [ 3] 	beq df_rt_str_comp_eq
                             	; else do next char
e939 : c8               [ 2] 	iny
e93a : d0f1             [ 3] 	bne df_rt_str_comp_byte ; Always - relying on Y 
e93c :                       df_rt_str_comp_lt
e93c : a9ff             [ 2] 	lda #0xff
e93e : 60               [ 6] 	rts
e93f :                       df_rt_str_comp_gt
e93f : a901             [ 2] 	lda #0x01
e941 : 60               [ 6] 	rts
e942 :                       df_rt_str_comp_eq
e942 : a900             [ 2] 	lda #0x00
e944 : 60               [ 6] 	rts
                             
                             
                             
                             
e945 :                       df_rt_monitor
e945 : 4cb0d4           [ 3] 	jmp command_line
                             
e948 :                       df_rt_new
e948 : 4cc0f7           [ 3] 	jmp df_clear
                             
e94b :                       df_rt_while
                             	; push statement address
e94b : 20d8e5           [ 6] 	jsr df_rt_push_stat
                             	; DFRT_WHILE token
e94e : a990             [ 2] 	lda #DFRT_WHILE
e950 : 2016f7           [ 6] 	jsr df_rst_pushByte
                             
                             	; get value in A,X
e953 : 2018e2           [ 6] 	jsr df_rt_getnval
                             
                             	; if value<>0 then continue
e956 : e000             [ 2] 	cpx #0
e958 : f001             [ 3] 	beq df_rt_while_done
e95a : 60               [ 6] 	rts
e95b :                       df_rt_while_done
                             	; pop while data off stack as not needed
AS65 Assembler for R6502 [1.42].                                     Page  216
-------------------------------- bank\bank0.s --------------------------------

e95b : 203cf7           [ 6] 	jsr df_rst_popWord
e95e : 203cf7           [ 6] 	jsr df_rst_popWord
                             	; while evaluated false so find wend
                             	; but check for any nested while/wends
                             	; nest = 1 to start
e961 : a593             [ 3] 	lda df_ifnest
e963 : 48               [ 3] 	pha
e964 : a901             [ 2] 	lda #1
e966 : 8593             [ 3] 	sta df_ifnest
                             	; find the matching else/elseif/endif
                             	; start from current statement
                             	_cpyZPWord df_currlin,df_nextlin
                             
e970 :                       df_rt_findwend
e970 : a689             [ 3] 	ldx df_nextlin
e972 : a58a             [ 3] 	lda df_nextlin+1
e974 : a480             [ 3] 	ldy df_curstidx
e976 : 20a8e5           [ 6] 	jsr df_rt_nextstat
                             	; got to end of program, then a problem
e979 : b031             [ 3] 	bcs df_rt_wend_end
e97b : 8689             [ 3] 	stx df_nextlin
e97d : 858a             [ 3] 	sta df_nextlin+1
e97f : 8480             [ 3] 	sty df_curstidx
                             	; find the command token
e981 :                       df_rt_while_cmd
e981 : c8               [ 2] 	iny
e982 : b189             [ 5] 	lda (df_nextlin),y
e984 : 10fb             [ 3] 	bpl df_rt_while_cmd
                             	; check for wend
e986 : c991             [ 2] 	cmp #DFRT_WEND
e988 : d019             [ 3] 	bne df_rt_check_while
                             	; decrement nest
e98a : c693             [ 5] 	dec df_ifnest
                             	; if not zero then go find more commands
e98c : d0e2             [ 3] 	bne df_rt_findwend
                             	; else found it, restore if nest
                             	; and skip the wend statement
e98e : 68               [ 4] 	pla
e98f : 8593             [ 3] 	sta df_ifnest
e991 : a689             [ 3] 	ldx df_nextlin
e993 : a58a             [ 3] 	lda df_nextlin+1
e995 : a480             [ 3] 	ldy df_curstidx
e997 : 20a8e5           [ 6] 	jsr df_rt_nextstat
                             	; got to end of program, then a problem
e99a : b010             [ 3] 	bcs df_rt_wend_end
                             	; need to update nxtstidx to transfer control
e99c : 8689             [ 3] 	stx df_nextlin
e99e : 858a             [ 3] 	sta df_nextlin+1
e9a0 : 847f             [ 3] 	sty df_nxtstidx
e9a2 : 60               [ 6] 	rts
e9a3 :                       df_rt_check_while
                             	; check for while
e9a3 : c990             [ 2] 	cmp #DFRT_WHILE
e9a5 : d0c9             [ 3] 	bne df_rt_findwend
                             	; if while found then increment nest
e9a7 : e693             [ 5] 	inc df_ifnest
e9a9 : 4c70e9           [ 3] 	jmp df_rt_findwend
e9ac :                       df_rt_wend_end
                             	SWBRK DFERR_IMMEDIATE
                             
                             
e9ae :                       df_rt_wend
AS65 Assembler for R6502 [1.42].                                     Page  217
-------------------------------- bank\bank0.s --------------------------------

e9ae : 201ff7           [ 6] 	jsr df_rst_popByte
e9b1 : c990             [ 2] 	cmp #DFRT_WHILE
e9b3 : d00d             [ 3] 	bne df_rt_wend_err
                             	; pop the stat and continue
e9b5 : 203cf7           [ 6] 	jsr df_rst_popWord
e9b8 : 8689             [ 3] 	stx	df_nextlin
e9ba : 858a             [ 3] 	sta df_nextlin+1
e9bc : 201ff7           [ 6] 	jsr df_rst_popByte
e9bf : 857f             [ 3] 	sta df_nxtstidx
e9c1 : 60               [ 6] 	rts
e9c2 :                       df_rt_wend_err
                             	SWBRK DFERR_WEND
                             
                             
                             ;move to next statement during if/else matching
                             ;end of program is an error
e9c4 :                       df_rt_if_stat
e9c4 : a689             [ 3] 	ldx df_nextlin
e9c6 : a58a             [ 3] 	lda df_nextlin+1
e9c8 : a480             [ 3] 	ldy df_curstidx
e9ca : 20a8e5           [ 6] 	jsr df_rt_nextstat
                             	; got to end of program, then a problem
e9cd : b009             [ 3] 	bcs df_rt_if_stat_err
e9cf : 8689             [ 3] 	stx df_nextlin
e9d1 : 858a             [ 3] 	sta df_nextlin+1
e9d3 : 8480             [ 3] 	sty df_curstidx
e9d5 : 847f             [ 3] 	sty df_nxtstidx
e9d7 : 60               [ 6] 	rts
                             ; program ended with no match
e9d8 :                       df_rt_if_stat_err
                             	SWBRK DFERR_UNCLOSEDIF
                             
                             
                             ; find matching else/elseif/endif
                             ; C = 0 match else/elseif/endif
                             ; C = 1 match endif only
                             ; endif is always matched
                             ; ** MAKE SURE NEXTLIN IS POPULATED! **
e9da :                       df_rt_if_match
                             	; save the current if nest level
e9da : a593             [ 3] 	lda df_ifnest
e9dc : 48               [ 3] 	pha
                             	; local if nest level is zero to start with
e9dd : a900             [ 2] 	lda #0
e9df : 8593             [ 3] 	sta df_ifnest
                             	; save match pref
e9e1 : 08               [ 3] 	php
                             	; find the matching else/elseif/endif
                             	; start from df_nextlin, df_curstidx
e9e2 :                       df_rt_findelseendif
e9e2 : 20c4e9           [ 6] 	jsr df_rt_if_stat
                             	; find command
e9e5 :                       df_rt_ifcmd
e9e5 : c8               [ 2] 	iny
e9e6 : b189             [ 5] 	lda (df_nextlin),y
e9e8 : 10fb             [ 3] 	bpl df_rt_ifcmd
                             	; check for endif
e9ea : c994             [ 2] 	cmp #DFRT_ENDIF
e9ec : f015             [ 4] 	beq df_rt_ifelse
                             
e9ee : 28               [ 4] 	plp
e9ef : 08               [ 3] 	php
AS65 Assembler for R6502 [1.42].                                     Page  218
-------------------------------- bank\bank0.s --------------------------------

                             
e9f0 : b008             [ 3] 	bcs df_rt_ifskipelseif
e9f2 : c993             [ 2] 	cmp #DFRT_ELSE
e9f4 : f00d             [ 4] 	beq df_rt_ifelse
e9f6 : c995             [ 2] 	cmp #DFRT_ELSEIF
e9f8 : f009             [ 4] 	beq df_rt_ifelse
e9fa :                       df_rt_ifskipelseif
                             	; another if token found - increment lcoal if ne
e9fa : c992             [ 2] 	cmp #DFRT_IF
e9fc : d002             [ 4] 	bne df_rt_skipnestif
e9fe : e693             [ 5] 	inc df_ifnest
ea00 :                       df_rt_skipnestif
                             	; no tokens of interest found, so next statement
ea00 : 4ce2e9           [ 3] 	jmp df_rt_findelseendif
                             
                             	; found else/elseif/endif
                             	; but check if this is nested
ea03 :                       df_rt_ifelse
                             	; nest counter zero then found matching else/els
ea03 : a693             [ 3] 	ldx df_ifnest
ea05 : f009             [ 3] 	beq df_rt_if_found
                             	; endif token found so decrement local nest
ea07 : c994             [ 2] 	cmp #DFRT_ENDIF
ea09 : d002             [ 3] 	bne df_rt_skipnestendif
ea0b : c693             [ 5] 	dec df_ifnest
ea0d :                       df_rt_skipnestendif
                             	; continue to search for else/endif
ea0d : 4ce2e9           [ 3] 	jmp df_rt_findelseendif
                             	; ok got a match
ea10 :                       df_rt_if_found
                             	; remove pref
ea10 : 28               [ 4] 	plp
                             	; restore global if nest
ea11 : 8538             [ 3] 	sta tmp_d			; Using as a temp place!
ea13 : 68               [ 4] 	pla					; Get nest from stack
ea14 : aa               [ 2] 	tax					; And put in X
ea15 : a538             [ 3] 	lda tmp_d			; Get a back from temp!
ea17 : 8693             [ 3] 	stx df_ifnest		; Now restore the nest counter
                             
                             	;A contains the token found, Y is index in to df
                             ;	clc
ea19 : 60               [ 6] 	rts
                             
ea1a :                       df_rt_endif
                             	; decrement if next level
ea1a : c693             [ 5] 	dec df_ifnest
ea1c : 3011             [ 3] 	bmi df_rt_noif_err
ea1e :                       df_rt_if_done
ea1e : 60               [ 6] 	rts
                             
                             	; else and ifelse encountered in a normal sequen
                             	; only happens when the clause has been executed
                             	; so we only now need to find the endif
ea1f :                       df_rt_elseif
ea1f :                       df_rt_else
                             	; not in if mode then error
ea1f : a593             [ 3] 	lda df_ifnest
ea21 : f00c             [ 3] 	beq df_rt_noif_err
                             	; find endif only
                             	; starting from current line and curstidx
                             	_cpyZPWord df_currlin,df_nextlin
                             
AS65 Assembler for R6502 [1.42].                                     Page  219
-------------------------------- bank\bank0.s --------------------------------

ea2b : 38               [ 2] 	sec
ea2c : 4cdae9           [ 3] 	jmp df_rt_if_match
                             
                             ; endif/else/elseif encountered outside of an if
ea2f :                       df_rt_noif_err
                             	SWBRK DFERR_NOIF
                             
                             
                             	; when if is encountered, the job of this routin
                             	; to determine which clause to execute, then tra
                             	; program control to that point.  in normal prog
                             	; sequence else/elseif statements will signify t
                             	; of an if construct.
ea31 :                       df_rt_if
                             	; increment global if nest counter
ea31 : e693             [ 5] 	inc df_ifnest
ea33 :                       df_rt_ifeval
                             	; get value
ea33 : 2018e2           [ 6] 	jsr df_rt_getnval
                             	; if X,A<>0 if is successful then continue norma
ea36 : a8               [ 2] 	tay
ea37 : d0e5             [ 3] 	bne df_rt_if_done
ea39 : 8a               [ 2] 	txa
ea3a : d0e2             [ 3] 	bne df_rt_if_done
                             	; got here then if clause evaluated to false
                             	; match with else/elseif/endif
                             	; df_nextlin is used to find the clause to execu
                             	_cpyZPWord df_currlin,df_nextlin
                             
ea44 : 18               [ 2] 	clc
ea45 : 20dae9           [ 6] 	jsr df_rt_if_match
                             	; A contains the token found, Y is index of this
                             
ea48 : c993             [ 2] 	cmp #DFRT_ELSE
                             	; else: df_nextlin and df_nxtstidx points to the
ea4a : f023             [ 3] 	beq df_rt_do_else
                             
ea4c : c994             [ 2] 	cmp #DFRT_ENDIF
                             	; else: df_nextlin and df_nxtstidx points to the
ea4e : f0ce             [ 3] 	beq df_rt_if_done
                             
                             	; elif detected - increment past the token and e
                             	; make this the current line and token index
                             	_cpyZPWord df_nextlin,df_currlin
                             
                             	; move past the token and save position
ea58 : c8               [ 2] 	iny
ea59 : 98               [ 2] 	tya
ea5a : 48               [ 3] 	pha
                             	; initialise statement pointer
ea5b : a480             [ 3] 	ldy df_curstidx
ea5d : a686             [ 3] 	ldx df_currlin
ea5f : a587             [ 3] 	lda df_currlin+1
ea61 : 2020e5           [ 6] 	jsr df_rt_init_stat_ptr
                             	; restore Y (one byte past the token) and save i
ea64 : 68               [ 4] 	pla
ea65 : a8               [ 2] 	tay
ea66 : 8488             [ 3] 	sty df_exeoff
                             	; don't force a jump as we've initalised all var
ea68 : a900             [ 2] 	lda #0
ea6a : 858a             [ 3] 	sta df_nextlin+1
                             	; now everyting is set up to evaluate the elif c
AS65 Assembler for R6502 [1.42].                                     Page  220
-------------------------------- bank\bank0.s --------------------------------

ea6c : 4c33ea           [ 3] 	jmp df_rt_ifeval
                             
ea6f :                       df_rt_do_else
                             	; we need to point to the next statement not thi
ea6f : 4cc4e9           [ 3] 	jmp df_rt_if_stat
                             
ea72 :                       df_rt_for
                             	; push statement address to rt stack
ea72 : 20d8e5           [ 6] 	jsr df_rt_push_stat
                             	; get lvar
ea75 : 205fe6           [ 6] 	jsr df_rt_getlvar
                             	; Save lvar pointer, A is fine to trample
ea78 : 48               [ 3] 	pha
ea79 : 8a               [ 2] 	txa
ea7a : 48               [ 3] 	pha
                             
                             	; find starting value
                             	; evaluate the starting value
                             	; can't use df_rt_getnval as need to use A,X fir
ea7b : e688             [ 5] 	inc df_exeoff
ea7d : 201ee2           [ 6] 	jsr df_rt_neval
                             	; get ready to update the counter using pointer
ea80 : 68               [ 4] 	pla
ea81 : aa               [ 2] 	tax
ea82 : 86a1             [ 3] 	stx df_tmpptra
ea84 : 68               [ 4] 	pla
ea85 : 85a2             [ 3] 	sta df_tmpptra+1
                             	; But remember lvar pointer for later A is ok to
ea87 : 48               [ 3] 	pha
ea88 : 8a               [ 2] 	txa
ea89 : 48               [ 3] 	pha
                             
                             	; get the starting value from op stack
ea8a : 208ff7           [ 6] 	jsr df_ost_popInt
                             	; save it to counter slot
ea8d : a001             [ 2] 	ldy #1
ea8f : 91a1             [ 5] 	sta (df_tmpptra),y
ea91 : 8a               [ 2] 	txa
ea92 : 88               [ 2] 	dey
ea93 : 91a1             [ 5] 	sta (df_tmpptra),y
                             
                             	; find end value
                             	; evaluate the end value
ea95 : e688             [ 5] 	inc df_exeoff
ea97 : 2018e2           [ 6] 	jsr df_rt_getnval
                             	; and put on rt stack
ea9a : 202ef7           [ 6] 	jsr df_rst_pushWord
                             
                             	; find step value
                             	; evaluate the end value
ea9d : e688             [ 5] 	inc df_exeoff
ea9f : 2018e2           [ 6] 	jsr df_rt_getnval
                             	; and push on rt stack
eaa2 : 202ef7           [ 6] 	jsr df_rst_pushWord
                             	; save the counter lvar pointer
eaa5 : 68               [ 4] 	pla
eaa6 : aa               [ 2] 	tax
eaa7 : 68               [ 4] 	pla
eaa8 : 202ef7           [ 6] 	jsr df_rst_pushWord
                             	; all done - counter set to start
                             	; stack contains counter slot, step val, end val
                             	; now push for token
AS65 Assembler for R6502 [1.42].                                     Page  221
-------------------------------- bank\bank0.s --------------------------------

eaab : a98e             [ 2] 	lda #DFRT_FOR
eaad : 4c16f7           [ 3] 	jmp df_rst_pushByte
                             
eab0 :                       df_rt_next
                             	; remember stack position
eab0 : a476             [ 3] 	ldy df_rtstop
eab2 : 98               [ 2] 	tya
eab3 : 48               [ 3] 	pha
eab4 : 201ff7           [ 6] 	jsr df_rst_popByte
eab7 : c98e             [ 2] 	cmp #DFRT_FOR
eab9 : d04e             [ 4] 	bne df_rt_next_err
                             	; get the slot address
eabb : 203cf7           [ 6] 	jsr df_rst_popWord
                             	; save address to ptrd, contents to ptra
eabe : 86a7             [ 3] 	stx df_tmpptrd
eac0 : 85a8             [ 3] 	sta df_tmpptrd+1
eac2 : a000             [ 2] 	ldy #0
eac4 : b1a7             [ 5] 	lda (df_tmpptrd),y
eac6 : 85a1             [ 3] 	sta df_tmpptra
eac8 : c8               [ 2] 	iny
eac9 : b1a7             [ 5] 	lda (df_tmpptrd),y
eacb : 85a2             [ 3] 	sta df_tmpptra+1
                             
                             	; get step value, save in ptrb
eacd : 203cf7           [ 6] 	jsr df_rst_popWord
ead0 : 86a3             [ 3] 	stx df_tmpptrb
ead2 : 85a4             [ 3] 	sta df_tmpptrb+1
ead4 : 48               [ 3] 	pha					; Push A to check for -ve step
                             
                             	; add step to counter and save back to counter
                             	_addZPWord df_tmpptra,df_tmpptrb
                             
eae2 : a5a1             [ 3] 	lda df_tmpptra
eae4 : a000             [ 2] 	ldy #0
eae6 : 91a7             [ 5] 	sta (df_tmpptrd),y
eae8 : a5a2             [ 3] 	lda df_tmpptra+1
eaea : c8               [ 2] 	iny
eaeb : 91a7             [ 5] 	sta (df_tmpptrd),y
                             
                             	; get end value, save in ptrb
eaed : 203cf7           [ 6] 	jsr df_rst_popWord
eaf0 : 86a3             [ 3] 	stx df_tmpptrb
eaf2 : 85a4             [ 3] 	sta df_tmpptrb+1
eaf4 : 68               [ 4] 	pla					; check if if +ve or -ve step
eaf5 : 1006             [ 3] 	bpl df_rt_check_pos
                             	; call gte operation but no need to get ints
                             	; as already in ptra and ptrb
eaf7 : 20a5e8           [ 6] 	jsr df_rt_gte_calc
eafa : 4c00eb           [ 3] 	jmp df_rt_next_check
eafd :                       df_rt_check_pos
                             	; call lte operation but no need to get ints
                             	; as already in ptra and ptrb
eafd : 2091e8           [ 6] 	jsr df_rt_lte_calc
eb00 :                       df_rt_next_check
                             	; check if true or false
eb00 : 208ff7           [ 6] 	jsr df_ost_popInt
eb03 : 8a               [ 2] 	txa
                             	; if false then next is done
eb04 : f020             [ 3] 	beq df_rt_untilnext_done
                             	; else we continue
eb06 : 4c7be6           [ 3] 	jmp df_rt_pop_stat_go
                             
AS65 Assembler for R6502 [1.42].                                     Page  222
-------------------------------- bank\bank0.s --------------------------------

eb09 :                       df_rt_next_err
                             	SWBRK DFERR_NEXTFOR
                             
                             
                             
eb0b :                       df_rt_repeat
                             	; push statement address
eb0b : 20d8e5           [ 6] 	jsr df_rt_push_stat
                             	; DFRT_REPEAT token
eb0e : a98c             [ 2] 	lda #DFRT_REPEAT
eb10 : 4c16f7           [ 3] 	jmp df_rst_pushByte
                             
eb13 :                       df_rt_until
                             	; remember stack position
eb13 : a576             [ 3] 	lda df_rtstop
eb15 : 48               [ 3] 	pha
eb16 : 201ff7           [ 6] 	jsr df_rst_popByte
eb19 : c98c             [ 2] 	cmp #DFRT_REPEAT
eb1b : d011             [ 3] 	bne df_rt_until_err
                             	; evaluate expression in to A,X
eb1d : 2018e2           [ 6] 	jsr df_rt_getnval
                             	; if value<>0 then continue
eb20 : 8a               [ 2] 	txa
eb21 : d003             [ 3] 	bne df_rt_untilnext_done
                             
                             	; pop the stat and continue
eb23 : 4c7be6           [ 3] 	jmp df_rt_pop_stat_go
                             
eb26 :                       df_rt_untilnext_done
eb26 : 68               [ 4] 	pla
eb27 : a8               [ 2] 	tay
                             	; pop 2 items off stack (line address, index)
                             	; and continue
eb28 : 203cf7           [ 6] 	jsr df_rst_popWord
eb2b : 4c1ff7           [ 3] 	jmp df_rst_popByte
                             
eb2e :                       df_rt_until_err
                             	SWBRK DFERR_UNTIL
                             
                             
eb30 :                       df_rt_sadd
eb30 : 60               [ 6] 	rts
                             
eb31 :                       df_rt_print_num
eb31 : 208ff7           [ 6] 	jsr df_ost_popInt
eb34 : 18               [ 2] 	clc
eb35 : 4ce5c3           [ 3] 	jmp print_a_to_d
                             
eb38 :                       df_rt_print_str
eb38 : 2093f7           [ 6] 	jsr df_ost_popStr
eb3b : 86a1             [ 3] 	stx df_tmpptra
eb3d : 85a2             [ 3] 	sta df_tmpptra+1
eb3f : a000             [ 2] 	ldy #0
eb41 :                       df_rt_print_str_ch
eb41 : b1a1             [ 5] 	lda (df_tmpptra),y
eb43 : f006             [ 3] 	beq df_rt_print_str_done
eb45 : 202ac4           [ 6] 	jsr io_put_ch
eb48 : c8               [ 2] 	iny
eb49 : d0f6             [ 3] 	bne df_rt_print_str_ch		; Rely on y not wrapping
eb4b :                       df_rt_print_str_done
eb4b : 60               [ 6] 	rts
                             
AS65 Assembler for R6502 [1.42].                                     Page  223
-------------------------------- bank\bank0.s --------------------------------

                             ; * Find the position of the next data item to re
eb4c :                       df_rt_nextdatum
eb4c : a200             [ 2] 	ldx #0
                             	; load data line offset
eb4e : a496             [ 3] 	ldy df_datoff
                             	; if data pointer unitialised (because high byte
eb50 : a595             [ 3] 	lda df_currdat+1
eb52 : d02e             [ 3] 	bne df_rt_skipinitdataptr
                             	; then start at program beginning
                             	_cpyZPWord df_prgstrt,df_currdat
                             
eb5c :                       df_rt_datlinstart
                             	; if end of program then error
eb5c : a194             [ 6] 	lda (df_currdat,x)
eb5e : f032             [ 3] 	beq df_rt_datumerr
                             	; index in to first line byte
eb60 : a003             [ 2] 	ldy #3
eb62 : 8496             [ 3] 	sty df_datoff
                             	; find first 'data' statement
eb64 :                       df_rt_datastatement
eb64 : c8               [ 2] 	iny
eb65 : 98               [ 2] 	tya
                             	; end of line reached?
eb66 : c194             [ 6] 	cmp (df_currdat,x)
                             	; if not find data token
eb68 : d00e             [ 3] 	bne df_rt_getdatatk
eb6a :                       df_rt_datnextlin
                             	; if so then go to next line
eb6a : 18               [ 2] 	clc
eb6b : a594             [ 3] 	lda df_currdat
eb6d : 6194             [ 6] 	adc (df_currdat,x)
eb6f : 8594             [ 3] 	sta df_currdat
                             	_bcc 2
                             
eb73 : e695             [ 5] 	inc df_currdat+1
eb75 : 4c5ceb           [ 3] 	jmp df_rt_datlinstart
eb78 :                       df_rt_getdatatk
eb78 : b194             [ 5] 	lda (df_currdat),y
eb7a : 10e8             [ 3] 	bpl df_rt_datastatement
                             	; found data statement?
eb7c : c996             [ 2] 	cmp #DFRT_DATA
                             	; if not then go to next line
eb7e : d0ea             [ 3] 	bne df_rt_datnextlin
eb80 : 8496             [ 3] 	sty df_datoff
eb82 :                       df_rt_skipinitdataptr
eb82 : 98               [ 2] 	tya
                             	; end of line reached?
eb83 : c194             [ 6] 	cmp (df_currdat,x)
                             	; if so go to next line
eb85 : f0e3             [ 3] 	beq df_rt_datnextlin
                             	; else see if escape value
eb87 : b194             [ 5] 	lda (df_currdat),y
eb89 : c920             [ 2] 	cmp #DFTK_ESCVAL
eb8b : c8               [ 2] 	iny
eb8c : b0f4             [ 3] 	bcs df_rt_skipinitdataptr
                             	; ok found an escape value
                             	; save position and return
eb8e : 88               [ 2] 	dey
eb8f : 8496             [ 3] 	sty df_datoff
eb91 : 60               [ 6] 	rts
eb92 :                       df_rt_datumerr
                             	SWBRK DFERR_NODATA
AS65 Assembler for R6502 [1.42].                                     Page  224
-------------------------------- bank\bank0.s --------------------------------

                             
                             
                             ; read a datum
eb94 :                       df_rt_readdatum
                             	; update data pointer to next data item
eb94 : 204ceb           [ 6] 	jsr df_rt_nextdatum
                             	; now get lvar X,A from current statement
eb97 : 205fe6           [ 6] 	jsr df_rt_getlvar
                             	; save lvar in tmpb, vvt ptr in tmpa
eb9a : 86a3             [ 3] 	stx df_tmpptrb
eb9c : 85a4             [ 3] 	sta df_tmpptrb+1
                             
                             	; first save save current prgoram line and offse
eb9e : a586             [ 3] 	lda df_currlin
eba0 : 48               [ 3] 	pha
eba1 : a587             [ 3] 	lda df_currlin+1
eba3 : 48               [ 3] 	pha
eba4 : a588             [ 3] 	lda df_exeoff
eba6 : 48               [ 3] 	pha
eba7 : a57e             [ 3] 	lda df_eolidx
eba9 : 48               [ 3] 	pha
ebaa : a57f             [ 3] 	lda df_nxtstidx
ebac : 48               [ 3] 	pha
ebad : a580             [ 3] 	lda df_curstidx
ebaf : 48               [ 3] 	pha
                             
                             	; use data pointer as current position for evalu
                             	_cpyZPWord df_currdat,df_currlin
                             
ebb8 : a596             [ 3] 	lda df_datoff
ebba : 8588             [ 3] 	sta df_exeoff
ebbc : a200             [ 2] 	ldx #0
ebbe : a194             [ 6] 	lda (df_currdat,x)
ebc0 : 857e             [ 3] 	sta df_eolidx
ebc2 : 857f             [ 3] 	sta df_nxtstidx
ebc4 : a903             [ 2] 	lda #3
ebc6 : 8580             [ 3] 	sta df_curstidx
                             
                             	; get type from vvt ptr in tmpa
ebc8 : a1a1             [ 6] 	lda (df_tmpptra,x)
ebca : a8               [ 2] 	tay
                             	; get lvar point from tmpb
ebcb : a6a3             [ 3] 	ldx df_tmpptrb
ebcd : a5a4             [ 3] 	lda df_tmpptrb+1
                             
                             	; X,A and Y set up, now evaluate and perform ass
ebcf : 2063ee           [ 6] 	jsr df_rt_doassign
                             
                             	; update data offset as data has been consumed
ebd2 : a588             [ 3] 	lda df_exeoff
ebd4 : 8596             [ 3] 	sta df_datoff
                             	; restore line settings
ebd6 : 68               [ 4] 	pla
ebd7 : 8580             [ 3] 	sta df_curstidx
ebd9 : 68               [ 4] 	pla
ebda : 857f             [ 3] 	sta df_nxtstidx
ebdc : 68               [ 4] 	pla
ebdd : 857e             [ 3] 	sta df_eolidx
ebdf : 68               [ 4] 	pla
ebe0 : 8588             [ 3] 	sta df_exeoff
ebe2 : 68               [ 4] 	pla
ebe3 : 8587             [ 3] 	sta df_currlin+1
AS65 Assembler for R6502 [1.42].                                     Page  225
-------------------------------- bank\bank0.s --------------------------------

ebe5 : 68               [ 4] 	pla
ebe6 : 8586             [ 3] 	sta df_currlin
ebe8 : 60               [ 6] 	rts
                             
                             
ebe9 :                       df_rt_read
                             	; find variable to read in to from current posit
ebe9 : a488             [ 3] 	ldy df_exeoff
ebeb :                       df_rt_read_find_var
ebeb : c8               [ 2] 	iny
                             	; if end of line or statement then done
                             ;	cpy df_eolidx
                             ;	beq df_rt_read_done
ebec : c47f             [ 3] 	cpy df_nxtstidx
ebee : f00e             [ 3] 	beq df_rt_read_done
                             	; if not found escape then next byte
ebf0 : b186             [ 5] 	lda (df_currlin),y
ebf2 : c920             [ 2] 	cmp #DFTK_ESCVAL
ebf4 : b0f5             [ 3] 	bcs df_rt_read_find_var
                             	; ok found escape, save position
ebf6 : 8488             [ 3] 	sty df_exeoff
                             	; go and read in the value
ebf8 : 2094eb           [ 6] 	jsr df_rt_readdatum
                             	; try find another variable
ebfb : 4ce9eb           [ 3] 	jmp df_rt_read
                             
ebfe :                       df_rt_read_done
                             	; save position
ebfe : 8488             [ 3] 	sty df_exeoff
ec00 : 60               [ 6] 	rts
                             
ec01 :                       df_rt_input
                             	; df_tmpptra has the vvt address, X,A is the lva
ec01 : 205fe6           [ 6] 	jsr df_rt_getlvar
                             	; Save lvar pointer
ec04 : 86a3             [ 3] 	stx df_tmpptrb
ec06 : 85a4             [ 3] 	sta df_tmpptrb+1
                             	; go read a line of input
                             	; buf_lo ptr has the input, Y is size
ec08 : 38               [ 2] 	sec
ec09 : 203fc4           [ 6] 	jsr io_read_line
                             	; check the type
ec0c : a200             [ 2] 	ldx #0
ec0e : a1a1             [ 6] 	lda (df_tmpptra,x)
ec10 : 2904             [ 2] 	and #DFVVT_STR
ec12 : d008             [ 3] 	bne df_rt_input_str
ec14 : a1a1             [ 6] 	lda (df_tmpptra,x)
ec16 : 2903             [ 2] 	and #DFVVT_INT|DFVVT_BYT
ec18 : d00a             [ 3] 	bne df_rt_input_num
                             	; if not int or byte then error
ec1a : f01f             [ 3] 	beq df_rt_input_err
ec1c :                       df_rt_input_str
ec1c : b139             [ 5] 	lda (buf_lo),y
ec1e : 91a3             [ 5] 	sta (df_tmpptrb),y
ec20 : 88               [ 2] 	dey
ec21 : 10f9             [ 3] 	bpl df_rt_input_str
ec23 : 60               [ 6] 	rts
                             
ec24 :                       df_rt_input_num
                             	; X,A = address, linbuff must be on page boundar
ec24 : a53a             [ 3] 	lda buf_lo+1
ec26 : a639             [ 3] 	ldx buf_lo
AS65 Assembler for R6502 [1.42].                                     Page  226
-------------------------------- bank\bank0.s --------------------------------

ec28 : a000             [ 2] 	ldy #0				; any numeric format
ec2a : 20cec1           [ 6] 	jsr con_n_to_a
ec2d : b00c             [ 3] 	bcs df_rt_input_err
ec2f : a000             [ 2] 	ldy #0
ec31 : a53d             [ 3] 	lda num_a
ec33 : 91a3             [ 5] 	sta (df_tmpptrb),y
ec35 : c8               [ 2] 	iny
ec36 : a53e             [ 3] 	lda num_a+1
ec38 : 91a3             [ 5] 	sta (df_tmpptrb),y
ec3a : 60               [ 6] 	rts
ec3b :                       df_rt_input_err
                             	SWBRK DFERR_TYPEMISM
                             
                             
ec3d :                       df_rt_local
                             	; get current local count off rt stack
ec3d : 201ff7           [ 6] 	jsr df_rst_popByte
                             	; save on pc stack for incrmenting
ec40 : 48               [ 3] 	pha
ec41 : a488             [ 3] 	ldy df_exeoff
ec43 : 88               [ 2] 	dey
ec44 :                       df_rt_local_findesc
ec44 : c8               [ 2] 	iny
                             	; check end of line
                             ;	cpy df_eolidx
                             ;	beq df_rt_local_done
ec45 : c47f             [ 3] 	cpy df_nxtstidx
ec47 : f01c             [ 3] 	beq df_rt_local_done
                             	; find a var
ec49 : b186             [ 5] 	lda (df_currlin),y
ec4b : c911             [ 2] 	cmp #DFTK_VAR
ec4d : d0f5             [ 3] 	bne df_rt_local_findesc
                             	; jump over escape value
ec4f : c8               [ 2] 	iny
                             	; get var slot in A,X
ec50 : b186             [ 5] 	lda (df_currlin),y
ec52 : aa               [ 2] 	tax
ec53 : c8               [ 2] 	iny
ec54 : b186             [ 5] 	lda (df_currlin),y
ec56 : 8488             [ 3] 	sty df_exeoff
                             	; localise this variable
ec58 : 2002f7           [ 6] 	jsr df_rt_proc_local
                             	; increment local counter
ec5b : 68               [ 4] 	pla
ec5c : 18               [ 2] 	clc
ec5d : 6901             [ 2] 	adc #1
ec5f : 48               [ 3] 	pha
ec60 : a488             [ 3] 	ldy df_exeoff
ec62 : 4c44ec           [ 3] 	jmp df_rt_local_findesc
ec65 :                       df_rt_local_done
                             	; get the local counter
                             	; put on to rt stack
ec65 : 68               [ 4] 	pla
ec66 : 4c16f7           [ 3] 	jmp df_rst_pushByte
                             
                             
ec69 :                       df_rt_dim
ec69 : a488             [ 3] 	ldy df_exeoff
ec6b : 88               [ 2] 	dey
ec6c :                       df_rt_dim_findesc
                             	; check end of line
ec6c : c8               [ 2] 	iny
AS65 Assembler for R6502 [1.42].                                     Page  227
-------------------------------- bank\bank0.s --------------------------------

                             ;	cpy df_eolidx
                             ;	beq df_rt_dim_done
ec6d : c47f             [ 3] 	cpy df_nxtstidx
ec6f : f07a             [ 3] 	beq df_rt_dim_done
                             	; find a var
ec71 : b186             [ 5] 	lda (df_currlin),y
ec73 : c911             [ 2] 	cmp #DFTK_VAR
ec75 : d0f5             [ 3] 	bne df_rt_dim_findesc
                             	; jump over escape value
ec77 : c8               [ 2] 	iny
                             	; get var address
ec78 : b186             [ 5] 	lda (df_currlin),y
ec7a : 85a1             [ 3] 	sta df_tmpptra
ec7c : c8               [ 2] 	iny
ec7d : b186             [ 5] 	lda (df_currlin),y
ec7f : 85a2             [ 3] 	sta df_tmpptra+1
                             	; move to open bracket
ec81 : c8               [ 2] 	iny
ec82 : 8488             [ 3] 	sty df_exeoff
                             	; check if already dim'd
ec84 : a003             [ 2] 	ldy #DFVVT_DIM1
ec86 : b1a1             [ 5] 	lda (df_tmpptra),y
ec88 : d062             [ 3] 	bne df_rt_dim_err
                             	; Save slot address found earlier
ec8a : a5a1             [ 3] 	lda df_tmpptra
ec8c : 48               [ 3] 	pha
ec8d : a5a2             [ 3] 	lda df_tmpptra+1
ec8f : 48               [ 3] 	pha
ec90 : 209ee3           [ 6] 	jsr df_rt_arry_parm2
                             	; Restore slot address
ec93 : 68               [ 4] 	pla
ec94 : 85a2             [ 3] 	sta df_tmpptra+1
ec96 : 68               [ 4] 	pla
ec97 : 85a1             [ 3] 	sta df_tmpptra
                             ;	bcs df_rt_dim_err
                             	; save x,y to dim1,2
ec99 : 98               [ 2] 	tya
ec9a : 48               [ 3] 	pha
ec9b : 8a               [ 2] 	txa
ec9c : 48               [ 3] 	pha
ec9d : a003             [ 2] 	ldy #DFVVT_DIM1
ec9f : 68               [ 4] 	pla
eca0 : 91a1             [ 5] 	sta (df_tmpptra),y
eca2 : c8               [ 2] 	iny
eca3 : 68               [ 4] 	pla
eca4 : 91a1             [ 5] 	sta (df_tmpptra),y
eca6 :                       df_rt_dim_alloc
                             	; ok we have up to 2 dimensions
                             	; mult dim 1 and 2 if dim 2 <> 0
eca6 : a003             [ 2] 	ldy #DFVVT_DIM1
eca8 : b1a1             [ 5] 	lda (df_tmpptra),y
ecaa : 853d             [ 3] 	sta num_a
ecac : a900             [ 2] 	lda #0
ecae : 853e             [ 3] 	sta num_a+1
ecb0 : c8               [ 2] 	iny
ecb1 : b1a1             [ 5] 	lda (df_tmpptra),y
ecb3 : d002             [ 3] 	bne df_rt_dim2_nz
ecb5 : a901             [ 2] 	lda #1
ecb7 :                       df_rt_dim2_nz
ecb7 : 8541             [ 3] 	sta num_b
ecb9 : a900             [ 2] 	lda #0
ecbb : 8542             [ 3] 	sta num_b+1
AS65 Assembler for R6502 [1.42].                                     Page  228
-------------------------------- bank\bank0.s --------------------------------

ecbd : 200cd6           [ 6] 	jsr int_fast_mult
                             	; check the type if int then mult2
ecc0 : a200             [ 2] 	ldx #0
ecc2 : a1a1             [ 6] 	lda (df_tmpptra,x)
ecc4 : 2901             [ 2] 	and #DFVVT_INT
ecc6 : f004             [ 3] 	beq df_rt_dim2_mul2
ecc8 : 063d             [ 5] 	asl num_a
ecca : 263e             [ 5] 	rol num_a+1
eccc :                       df_rt_dim2_mul2
                             	; finally, we have a size of array
eccc : a63d             [ 3] 	ldx num_a
ecce : a53e             [ 3] 	lda num_a+1
                             
                             	; get a block of that size from heap
ecd0 : 209bf7           [ 6] 	jsr df_st_malloc
                             	; save pointer to block in var
ecd3 : a002             [ 2] 	ldy #DFVVT_HI
ecd5 : 91a1             [ 5] 	sta (df_tmpptra),y
ecd7 : 8a               [ 2] 	txa
ecd8 : 88               [ 2] 	dey
ecd9 : 91a1             [ 5] 	sta (df_tmpptra),y
                             	; finally, update the type to indicate array
ecdb : a200             [ 2] 	ldx #0
ecdd : a1a1             [ 6] 	lda (df_tmpptra,x)
ecdf : 0980             [ 2] 	ora #DFVVT_ARRY
ece1 : 81a1             [ 6] 	sta (df_tmpptra,x)
                             	; don't increment byte again - go check for more
ece3 : 4c69ec           [ 3] 	jmp df_rt_dim
ece6 :                       df_rt_dim_next_byte
ece6 : e688             [ 5] 	inc df_exeoff
ece8 : 4c69ec           [ 3] 	jmp df_rt_dim
eceb :                       df_rt_dim_done
eceb : 60               [ 6] 	rts
ecec :                       df_rt_dim_err
                             	SWBRK DFERR_DIM
                             
                             
                             
ecee :                       df_rt_cls
ecee : 4c3fcf           [ 3] 	jmp gr_cls
                             
                             
ecf1 :                       df_rt_plot
                             	; evaluate the expression
ecf1 : 2018e2           [ 6] 	jsr df_rt_getnval
                             	; save lo byte
ecf4 : 8a               [ 2] 	txa
ecf5 : 48               [ 3] 	pha
                             	; jump over comma
ecf6 : e688             [ 5] 	inc df_exeoff
                             	; evaluate the expression
ecf8 : 2018e2           [ 6] 	jsr df_rt_getnval
                             	; save lo byte
ecfb : 8a               [ 2] 	txa
ecfc : 48               [ 3] 	pha
                             	; jump over comma
ecfd : e688             [ 5] 	inc df_exeoff
                             	; evaluate the expression
ecff : 201ee2           [ 6] 	jsr df_rt_neval
                             	; check the type on the stack
ed02 : 2089f7           [ 6] 	jsr df_ost_peekType
                             	; if >=0x80 then a pointer / string
AS65 Assembler for R6502 [1.42].                                     Page  229
-------------------------------- bank\bank0.s --------------------------------

ed05 : aa               [ 2] 	tax
ed06 : 301b             [ 3] 	bmi df_rt_plotstr
                             	; else it is int
ed08 : 208ff7           [ 6] 	jsr df_ost_popInt
                             	; save  low byte of pop result in a temp
ed0b : 86a1             [ 3] 	stx df_tmpptra
ed0d : a511             [ 3] 	lda gr_scrngeom+gr_mode			; Check screen mode
ed0f : d009             [ 3] 	bne df_rt_plot_h_int
                             	; get X and Y coord in that order
                             	; but Y coord goes in X register!!!
ed11 : 68               [ 4] 	pla
ed12 : aa               [ 2] 	tax
ed13 : 68               [ 4] 	pla
ed14 : a8               [ 2] 	tay
ed15 : a5a1             [ 3] 	lda df_tmpptra	; Get pop result in to A
ed17 : 4c93cf           [ 3] 	jmp gr_plot
ed1a :                       df_rt_plot_h_int
ed1a : 68               [ 4] 	pla
ed1b : a8               [ 2] 	tay
ed1c : 68               [ 4] 	pla
ed1d : aa               [ 2] 	tax
ed1e : a5a1             [ 3] 	lda df_tmpptra	; Get pop result in to A
ed20 : 4c52d1           [ 3] 	jmp gr_hchar
                             
                             
ed23 :                       df_rt_plotstr
                             	; pop string pointer
ed23 : 2097f7           [ 6] 	jsr df_ost_popPtr
                             	; save pointer to tmpa
ed26 : 86a1             [ 3] 	stx df_tmpptra
ed28 : 85a2             [ 3] 	sta df_tmpptra+1
                             	; get y and x in that order
                             	; but X register is Y coord!!
ed2a : 68               [ 4] 	pla
ed2b : 85a5             [ 3] 	sta df_tmpptrc			; Y coord in C
ed2d : 68               [ 4] 	pla
ed2e : 85a3             [ 3] 	sta df_tmpptrb			; X coord in B
                             	; set cursror position
ed30 : a000             [ 2] 	ldy #0
ed32 : 84a9             [ 3] 	sty df_tmpptre
ed34 :                       df_rt_plotstrch
ed34 : a4a9             [ 3] 	ldy df_tmpptre
ed36 : b1a1             [ 5] 	lda (df_tmpptra),y
ed38 : 85a7             [ 3] 	sta df_tmpptrd			; char in D
ed3a : f025             [ 3] 	beq df_rt_plotstrdone
ed3c : e6a9             [ 5] 	inc df_tmpptre
ed3e : a511             [ 3] 	lda gr_scrngeom+gr_mode; Check screen mode
ed40 : d00d             [ 3] 	bne df_rt_plot_h_str
ed42 : a5a7             [ 3] 	lda df_tmpptrd			; Get char to plot
ed44 : a6a5             [ 3] 	ldx df_tmpptrc			; Get Y coord
ed46 : a4a3             [ 3] 	ldy df_tmpptrb			; Get X coord
ed48 : 2093cf           [ 6] 	jsr gr_plot
ed4b : e6a3             [ 5] 	inc df_tmpptrb			; Increment X coord
ed4d : d0e5             [ 3] 	bne df_rt_plotstrch		; Always - assume x is neve
ed4f :                       df_rt_plot_h_str
ed4f : a5a7             [ 3] 	lda df_tmpptrd			; Get char to plot
ed51 : a6a3             [ 3] 	ldx df_tmpptrb			; Get X coord
ed53 : a4a5             [ 3] 	ldy df_tmpptrc			; Get Y coord
ed55 : 2052d1           [ 6] 	jsr gr_hchar
ed58 : 18               [ 2] 	clc
ed59 : a5a3             [ 3] 	lda df_tmpptrb
ed5b : 6520             [ 3] 	adc gr_scrngeom+gr_pitch
AS65 Assembler for R6502 [1.42].                                     Page  230
-------------------------------- bank\bank0.s --------------------------------

ed5d : 85a3             [ 3] 	sta df_tmpptrb
ed5f : d0d3             [ 3] 	bne df_rt_plotstrch		; Always - assume adding pi
ed61 :                       df_rt_plotstrdone
ed61 : 60               [ 6] 	rts
                             
ed62 :                       df_rt_cursor
                             	; evaluate the expression
ed62 : 2018e2           [ 6] 	jsr df_rt_getnval
                             	; write low byte of vdp_curoff
                             	; by writing a zero then cursor on else not
ed65 : 860d             [ 3] 	stx vdp_curoff
ed67 : 60               [ 6] 	rts
                             
                             ;df_rt_himem
                             ;	; evaluate the expression
                             ;	jsr df_rt_getnval
                             ;	; write X,A to df_memtop
                             ;	stx df_memtop
                             ;	sta df_memtop+1
                             ;	; now clear everything down
                             ;	jmp df_clear
                             
ed68 :                       df_rt_text
ed68 : 4ca9ce           [ 3] 	jmp gr_init_screen_txt
                             
ed6b :                       df_rt_hires
ed6b : 4cc2ce           [ 3] 	jmp gr_init_hires
                             
ed6e :                       df_rt_pixmode
                             	; evaluate the expression X = mode
ed6e : 2018e2           [ 6] 	jsr df_rt_getnval
ed71 : 861f             [ 3] 	stx gr_scrngeom+gr_pixmode
ed73 : 60               [ 6] 	rts
                             
ed74 :                       df_rt_ink
                             	; evaluate the expression X = col
ed74 : 2018e2           [ 6] 	jsr df_rt_getnval
ed77 : 8623             [ 3] 	stx gr_scrngeom+gr_ink
ed79 : 60               [ 6] 	rts
                             
ed7a :                       df_rt_paper
                             	; evaluate the expression X = col
ed7a : 2018e2           [ 6] 	jsr df_rt_getnval
                             	; Add 16 to get paper colour
ed7d : 8a               [ 2] 	txa
ed7e : 18               [ 2] 	clc
ed7f : 6910             [ 2] 	adc #16
ed81 : 8524             [ 3] 	sta gr_scrngeom+gr_paper
ed83 : 60               [ 6] 	rts
                             
ed84 :                       df_rt_point
ed84 : 20e2e4           [ 6] 	jsr df_rt_parm_2ints
ed87 : a6a1             [ 3] 	ldx df_tmpptra
ed89 : a4a3             [ 3] 	ldy df_tmpptrb
ed8b : 4c12d2           [ 3] 	jmp gr_point
                             
ed8e :                       df_rt_circle
ed8e : 20ede4           [ 6] 	jsr df_rt_parm_3ints
ed91 : a5a1             [ 3] 	lda df_tmpptra				; load x0
ed93 : 853d             [ 3] 	sta num_a
ed95 : a5a3             [ 3] 	lda	df_tmpptrb				; load y0
ed97 : 853e             [ 3] 	sta num_a+1
AS65 Assembler for R6502 [1.42].                                     Page  231
-------------------------------- bank\bank0.s --------------------------------

ed99 : a5a5             [ 3] 	lda df_tmpptrc				; load r
ed9b : 853f             [ 3] 	sta num_a+2
ed9d : 4c43d2           [ 3] 	jmp gr_circle
                             
eda0 :                       df_rt_lineto
eda0 : 20e2e4           [ 6] 	jsr df_rt_parm_2ints
eda3 : a6a1             [ 3] 	ldx df_tmpptra				; load x1
eda5 : a4a3             [ 3] 	ldy df_tmpptrb				; load y1
eda7 :                       df_rt_doline
eda7 : 863f             [ 3] 	stx num_a+2
eda9 : 8440             [ 3] 	sty num_a+3
edab : 4cf9d2           [ 3] 	jmp gr_line
edae :                       df_rt_line
edae : 2004e5           [ 6] 	jsr df_rt_parm_4ints
edb1 : a6a1             [ 3] 	ldx df_tmpptra				; load x0
edb3 : a4a3             [ 3] 	ldy	df_tmpptrb				; load y0
edb5 : 2007d2           [ 6] 	jsr gr_set_hires_cur		; Start from x,y
edb8 : a6a5             [ 3] 	ldx df_tmpptrc				; load x1
edba : a4a7             [ 3] 	ldy df_tmpptrd				; load y1
edbc : 4ca7ed           [ 3] 	jmp df_rt_doline
                             
edbf :                       df_rt_wait
                             	; evaluate the expression
edbf : 2018e2           [ 6] 	jsr df_rt_getnval
                             	; put high byte in to Y (X,Y)=16 bits
edc2 : a8               [ 2] 	tay
edc3 :                       df_rt_wait_counter
                             	; get vdp low byte timer val in A
edc3 : a508             [ 3] 	lda vdp_cnt
edc5 :                       df_rt_wait_tick
                             	; check if a tick has occurred (i.e. val <> A)
edc5 : c508             [ 3] 	cmp vdp_cnt
edc7 : f0fc             [ 3] 	beq df_rt_wait_tick
                             	; countdown tick
edc9 : 8a               [ 2] 	txa
edca : d001             [ 3] 	bne df_rt_wait_skiphi
edcc : 88               [ 2] 	dey
edcd :                       df_rt_wait_skiphi	
edcd : ca               [ 2] 	dex
edce : 8a               [ 2] 	txa
edcf : d0f2             [ 3] 	bne df_rt_wait_counter
edd1 : 98               [ 2] 	tya
edd2 : d0ef             [ 3] 	bne df_rt_wait_counter
edd4 :                       df_rt_wait_done
edd4 : 60               [ 6] 	rts
                             
edd5 :                       df_rt_printat
                             	; Get x,y
edd5 : 20e2e4           [ 6] 	jsr df_rt_parm_2ints
edd8 : a6a1             [ 3] 	ldx df_tmpptra
edda : a4a3             [ 3] 	ldy df_tmpptrb
                             	; Set the cursror here
eddc : 20accf           [ 6] 	jsr gr_set_cur
                             	; and continue to normal print command
eddf :                       df_rt_print
eddf : a488             [ 3] 	ldy df_exeoff
ede1 : 88               [ 2] 	dey
ede2 :                       df_rt_print_ws
ede2 : c8               [ 2] 	iny
                             
                             	; evaluate an expression
                             ;	cpy df_eolidx
AS65 Assembler for R6502 [1.42].                                     Page  232
-------------------------------- bank\bank0.s --------------------------------

                             ;	beq df_rt_print_done
ede3 : c47f             [ 3] 	cpy df_nxtstidx
ede5 : f02e             [ 4] 	beq df_rt_print_done
ede7 : b186             [ 5] 	lda (df_currlin),y
ede9 : c93a             [ 2] 	cmp #':'
edeb : f028             [ 4] 	beq df_rt_print_done
eded : c920             [ 2] 	cmp #' '
edef : f0f1             [ 3] 	beq df_rt_print_ws
edf1 : c92c             [ 2] 	cmp #','
edf3 : f0ed             [ 3] 	beq df_rt_print_ws
                             	; save index
edf5 : 8488             [ 3] 	sty df_exeoff
                             
                             	; if starts with string literal then process sev
edf7 : c910             [ 2] 	cmp #DFTK_STRLIT
edf9 : f014             [ 4] 	beq df_rt_print_string
                             	; else evaluate a numeric
edfb : 201ee2           [ 6] 	jsr df_rt_neval
                             	; check what is on the argument stack
edfe : 2089f7           [ 6] 	jsr df_ost_peekType
ee01 : 3006             [ 3] 	bmi df_rt_print_gotstr
ee03 : 2031eb           [ 6] 	jsr df_rt_print_num
ee06 : 4cdfed           [ 3] 	jmp df_rt_print
ee09 :                       df_rt_print_gotstr
ee09 : 2038eb           [ 6] 	jsr df_rt_print_str
ee0c : 4cdfed           [ 3] 	jmp df_rt_print
ee0f :                       df_rt_print_string
ee0f : 20d8e2           [ 6] 	jsr df_rt_seval
ee12 : 4c09ee           [ 3] 	jmp df_rt_print_gotstr
ee15 :                       df_rt_print_done
ee15 : 8488             [ 3] 	sty df_exeoff
ee17 : 60               [ 6] 	rts
                             
ee18 :                       df_rt_println
ee18 : 20dfed           [ 6] 	jsr df_rt_print
ee1b : a90d             [ 2] 	lda #UTF_CR
ee1d : 4c2ac4           [ 3] 	jmp io_put_ch
                             
                             
                             ; assign to a number variable
                             ; X,A must have lvar
ee20 :                       df_rt_nassign
                             	; push var address, A ok to trample
ee20 : 48               [ 3] 	pha
ee21 : 8a               [ 2] 	txa
ee22 : 48               [ 3] 	pha
                             
                             	; now go evaluate expression in to A,X
ee23 : 2018e2           [ 6] 	jsr df_rt_getnval
                             	; restore variable address to write to to df_tmp
                             	; but don't lose current A
ee26 : a8               [ 2] 	tay					; Save A in Y
ee27 : 68               [ 4] 	pla
ee28 : 85a1             [ 3] 	sta df_tmpptra
ee2a : 68               [ 4] 	pla
ee2b : 85a2             [ 3] 	sta df_tmpptra+1
ee2d : 98               [ 2] 	tya					; Get A back from Y
                             
                             	; save X,A int in contents section
ee2e : a001             [ 2] 	ldy #1
ee30 : 91a1             [ 5] 	sta (df_tmpptra),y
ee32 : 8a               [ 2] 	txa
AS65 Assembler for R6502 [1.42].                                     Page  233
-------------------------------- bank\bank0.s --------------------------------

ee33 : 88               [ 2] 	dey
ee34 : 91a1             [ 5] 	sta (df_tmpptra),y
                             
ee36 : 60               [ 6] 	rts
                             
                             ; assign to a string variable
                             ; X,A must have lvar
ee37 :                       df_rt_sassign
                             	; now go evaluate expression
                             	; with the destination being already in X,A
ee37 : 20dce2           [ 6] 	jsr df_rt_sval
                             
                             	; get string pointer from top of runtime stack
ee3a : 4c93f7           [ 3] 	jmp df_ost_popStr
                             
                             
                             ; generate lvar from a var token ready for assign
ee3d :                       df_rt_generate_lvar
                             	; move past escape val
ee3d : a488             [ 3] 	ldy df_exeoff
ee3f : c8               [ 2] 	iny
                             	; pointing to variable index
ee40 : b186             [ 5] 	lda (df_currlin),y
ee42 : 85a1             [ 3] 	sta df_tmpptra
ee44 : c8               [ 2] 	iny
ee45 : b186             [ 5] 	lda (df_currlin),y
ee47 : 8488             [ 3] 	sty df_exeoff
ee49 : 85a2             [ 3] 	sta df_tmpptra+1
                             
                             	; get the type and save
ee4b : a200             [ 2] 	ldx #0
ee4d : a1a1             [ 6] 	lda (df_tmpptra,x)
ee4f : 48               [ 3] 	pha
                             
                             	; set carry flag to return pointer (lvar)
ee50 : 38               [ 2] 	sec
ee51 : 20c2e3           [ 6] 	jsr df_rt_eval_var
ee54 : 2097f7           [ 6] 	jsr df_ost_popPtr
                             
                             	; pull the type previously saved into Y
ee57 : 8538             [ 3] 	sta tmp_d		; Save A
ee59 : 68               [ 4] 	pla
ee5a : a8               [ 2] 	tay
ee5b : a538             [ 3] 	lda tmp_d
                             	; move past the lvar variable index
ee5d : e688             [ 5] 	inc df_exeoff
ee5f : 60               [ 6] 	rts
                             
                             ; general assignment execution
                             ; generate lvar first
ee60 :                       df_rt_assign
ee60 : 203dee           [ 6] 	jsr df_rt_generate_lvar
                             ; X,A,Y contain lvar pointer and type
ee63 :                       df_rt_doassign
                             	; save A and put type Y in to A to check for str
ee63 : 48               [ 3] 	pha
ee64 : 98               [ 2] 	tya
ee65 : 2904             [ 2] 	and #DFVVT_STR
                             	; if a string then string expression
ee67 : d004             [ 3] 	bne df_rt_assign_str
                             	;  jump to numeric expression evaluator
                             	; remember to restore A
AS65 Assembler for R6502 [1.42].                                     Page  234
-------------------------------- bank\bank0.s --------------------------------

ee69 : 68               [ 4] 	pla
ee6a : 4c20ee           [ 3] 	jmp df_rt_nassign
ee6d :                       df_rt_assign_str
                             	; else jump to string expression evaluator
                             	; remember to restore A
ee6d : 68               [ 4] 	pla
ee6e : 4c37ee           [ 3] 	jmp df_rt_sassign
                             
                             ; comment or data token is ignored by runtime
ee71 :                       df_rt_comment
ee71 :                       df_rt_data
ee71 : 60               [ 6] 	rts
                             
                             
                             ; run token - future expansion
ee72 :                       df_rt_run
ee72 : 60               [ 6] 	rts
                             
                             ; end of line / statement indicator
                             ; CS = End, CC = not end
ee73 :                       df_rt_eos
ee73 : a488             [ 3] 	ldy df_exeoff
                             ;	cpy df_eolidx
                             ;	beq df_rt_eos_true
ee75 : c47f             [ 3] 	cpy df_nxtstidx
ee77 : f008             [ 3] 	beq df_rt_eos_true
ee79 : b186             [ 5] 	lda (df_currlin),y
ee7b : c93a             [ 2] 	cmp #':'
ee7d : f002             [ 3] 	beq df_rt_eos_true
ee7f : 18               [ 2] 	clc
ee80 : 60               [ 6] 	rts
ee81 :                       df_rt_eos_true
ee81 : 38               [ 2] 	sec
ee82 : 60               [ 6] 	rts
                             
                             ; renum startLine,newStart,increment
                             ; renumbers from the first matching line to end o
                             ;df_rt_renum
                             ;	inc df_exeoff
                             ;	jsr df_rt_parm_3ints
                             ;	; starting line number
                             ;	ldx df_tmpptra
                             ;	lda df_tmpptra+1
                             ;	jsr df_pg_find_line
                             ;	bcc df_rt_renum_ok
                             ;	SWBRK DFERR_NOLINE
                             ;df_rt_renum_ok
                             ;	; save starting position pointer in ptrd
                             ;	stx df_tmpptrd
                             ;	sta df_tmpptrd+1
                             ;df_rt_renum_do
                             ;	; if not end of program
                             ;	ldy #0
                             ;	lda (df_tmpptrd),y
                             ;	; then renumber this line
                             ;	bne df_rt_renum_update
                             ;	; else done
                             ;	rts
                             ;df_rt_renum_update
                             ;	; so set this line number to new line number
                             ;	ldy #DFTK_LINNUM
                             ;	lda df_tmpptrb
AS65 Assembler for R6502 [1.42].                                     Page  235
-------------------------------- bank\bank0.s --------------------------------

                             ;	sta (df_tmpptrd),y
                             ;	iny
                             ;	lda df_tmpptrb+1
                             ;	sta (df_tmpptrd),y
                             ;	; add increment to new line
                             ;	_addZPWord df_tmpptrb,df_tmpptrc
                             ;df_rt_renum_next
                             ;	; point ptrd to the next line
                             ;	clc
                             ;	lda df_tmpptrd
                             ;	ldx #0
                             ;	adc (df_tmpptrd,x)
                             ;	sta df_tmpptrd
                             ;	_bcc 2
                             ;	inc df_tmpptrd+1
                             ;	jmp df_rt_renum_do
                             
                             
                             ; * List all procs in VNT
ee83 :                       df_rt_listprocnames
                             	; start at the beginning of the vnt table
                             	_cpyZPWord df_vntstrt,df_tmpptra
                             
                             	; start at varcnt
ee8b : a571             [ 3] 	lda df_varcnt
ee8d : 85a3             [ 3] 	sta df_tmpptrb
ee8f :                       df_rt_listcheckvnt
                             	; If reached 0 then not found
ee8f : a5a3             [ 3] 	lda df_tmpptrb
ee91 : f03a             [ 3] 	beq df_rt_listpn_done
ee93 : a000             [ 2] 	ldy #0
ee95 : b1a1             [ 5] 	lda (df_tmpptra),y
ee97 : c95f             [ 2] 	cmp #'_'
ee99 : d01b             [ 3] 	bne df_rt_listnextvnt
ee9b :                       df_rt_listprocch
ee9b : b1a1             [ 5] 	lda (df_tmpptra),y
ee9d : 202ac4           [ 6] 	jsr io_put_ch
eea0 : aa               [ 2] 	tax
eea1 : f003             [ 3] 	beq df_rt_listproccr
eea3 : c8               [ 2] 	iny
eea4 : d0f5             [ 3] 	bne df_rt_listprocch		; Always
eea6 :                       df_rt_listproccr
eea6 : a90d             [ 2] 	lda #UTF_CR
eea8 : 202ac4           [ 6] 	jsr io_put_ch
eeab : 18               [ 2] 	clc
eeac :                       df_rt_listprocpause
eeac : 2027c4           [ 6] 	jsr io_get_ch
eeaf : c920             [ 2] 	cmp #' '
eeb1 : d003             [ 3] 	bne df_rt_listnextvnt
eeb3 :                       df_rt_listwait
eeb3 : 38               [ 2] 	sec
eeb4 : b0f6             [ 3] 	bcs df_rt_listprocpause
eeb6 :                       df_rt_listnextvnt
eeb6 : b1a1             [ 5] 	lda (df_tmpptra),y
eeb8 : f003             [ 3] 	beq df_rt_listgotnext
eeba : c8               [ 2] 	iny
eebb : d0f9             [ 3] 	bne df_rt_listnextvnt		; Always
eebd :                       df_rt_listgotnext
                             	; dec vnt #
eebd : c6a3             [ 5] 	dec df_tmpptrb
                             	; skip past zero terminator
eebf : c8               [ 2] 	iny
AS65 Assembler for R6502 [1.42].                                     Page  236
-------------------------------- bank\bank0.s --------------------------------

                             	; add this to vnt pointer
eec0 : 18               [ 2] 	clc
eec1 : 98               [ 2] 	tya
eec2 : 65a1             [ 3] 	adc df_tmpptra
eec4 : 85a1             [ 3] 	sta df_tmpptra
                             	_bcc 2
                             
eec8 : e6a2             [ 5] 	inc df_tmpptra+1
eeca : 4c8fee           [ 3] 	jmp df_rt_listcheckvnt
eecd :                       df_rt_listpn_done
eecd : 60               [ 6] 	rts
                             
eece :                       df_rt_listproc
                             	; A already contains '_'
eece : 8d0004           [ 4] 	sta df_linbuff
eed1 : a200             [ 2] 	ldx #0
eed3 : a488             [ 3] 	ldy df_exeoff
eed5 :                       df_rt_listp_copy
eed5 : c8               [ 2] 	iny
eed6 : e8               [ 2] 	inx
eed7 : b186             [ 5] 	lda (df_currlin),y
eed9 : 9d0004           [ 5] 	sta df_linbuff,x
eedc : 20a4d8           [ 6] 	jsr df_tk_isalphanum
eedf : b0f4             [ 3] 	bcs df_rt_listp_copy
                             	; zero the line index
eee1 : a200             [ 2] 	ldx #0
eee3 : 867c             [ 3] 	stx df_linoff
                             	; save runtime pos
eee5 : 8488             [ 3] 	sty df_exeoff
                             	; Now try and find in VNT
eee7 : 20c3d6           [ 6] 	jsr df_var_find
eeea : b036             [ 4] 	bcs df_rt_listp_notfound
                             	; Ok we have got a match in X,A find the proc
eeec : 868e             [ 3] 	stx df_procptr
eeee : 858f             [ 3] 	sta df_procptr+1
eef0 : 20fde5           [ 6] 	jsr df_rt_findproc
                             	; Save the line pointer
eef3 : 86a1             [ 3] 	stx df_tmpptra
eef5 : 85a2             [ 3] 	sta df_tmpptra+1
                             	; save statement index in to line
                             ;	sty df_lineidx
                             ;	; Check if '-' option used
                             ;	ldy df_exeoff
                             ;	lda (df_currlin),y
                             ;	cmp #'-'
                             ;	; if so, list to end of program
                             ;	beq df_rt_listprgend
                             	; Now try and find the end of this procedure
                             	; enddef or another def
                             	; A,X=Line ptr, Y=line idx
                             ;	ldx df_tmpptra
                             ;	lda df_tmpptra+1
                             ;	ldy df_lineidx
eef7 :                       df_rt_listp_findend
                             	; Go to next stat
eef7 : 20a8e5           [ 6] 	jsr df_rt_nextstat
eefa : b057             [ 4] 	bcs df_rt_listprgend
                             	; save y (a,x in lineptr), A is ok to trample
eefc : 98               [ 2] 	tya
eefd : 48               [ 3] 	pha
                             	; find the command
eefe :                       df_rt_listp_findcmd
AS65 Assembler for R6502 [1.42].                                     Page  237
-------------------------------- bank\bank0.s --------------------------------

eefe : c8               [ 2] 	iny
eeff : b190             [ 5] 	lda (df_lineptr),y
ef01 : 10fb             [ 4] 	bpl df_rt_listp_findcmd
                             	; restore y to stat beginning
ef03 : 8538             [ 3] 	sta tmp_d
ef05 : 68               [ 4] 	pla
ef06 : a8               [ 2] 	tay
ef07 : a538             [ 3] 	lda tmp_d
                             	; check A - looking for enddef or def
ef09 : c987             [ 2] 	cmp #DFRT_ENDDEF
ef0b : f00b             [ 3] 	beq df_rt_listp_done
ef0d : c986             [ 2] 	cmp #DFRT_DEF
ef0f : f007             [ 3] 	beq df_rt_listp_done
                             	; if neither then next stat from current
ef11 : a690             [ 3] 	ldx df_lineptr
ef13 : a591             [ 3] 	lda df_lineptr+1
ef15 : 4cf7ee           [ 3] 	jmp df_rt_listp_findend
ef18 :                       df_rt_listp_done
                             	; Push end line on to stack
ef18 : a591             [ 3] 	lda df_lineptr+1
ef1a : 48               [ 3] 	pha
ef1b : 8a               [ 2] 	txa
ef1c : 48               [ 3] 	pha
ef1d : a591             [ 3] 	lda df_lineptr+1
ef1f : 4c59ef           [ 3] 	jmp df_rt_list_line
ef22 :                       df_rt_listp_notfound
                             	; Fatal error if proc not found
                             	SWBRK DFERR_NOPROC
                             
                             
                             ; list token
ef24 :                       df_rt_list
ef24 : a900             [ 2] 	lda #0
ef26 : 85a9             [ 3] 	sta df_tmpptre		; Zero means in normal list mode
                             	; find non-ws
ef28 : 2052e6           [ 6] 	jsr df_rt_skip_ws
                             	; if end of statement then no line specifiers
ef2b : 2073ee           [ 6] 	jsr df_rt_eos
                             	; so list whole program
ef2e : b01b             [ 3] 	bcs df_rt_listprg
                             
                             	;if '_' then use procnames
ef30 : c95f             [ 2] 	cmp #'_'
ef32 : d003             [ 3] 	bne df_rt_list_all
ef34 : 4cceee           [ 3] 	jmp df_rt_listproc
ef37 :                       df_rt_list_all
                             	;if '*' then display all procnames
ef37 : c92a             [ 2] 	cmp #'*'
ef39 : d003             [ 3] 	bne df_rt_list_linno
ef3b : 4c83ee           [ 3] 	jmp df_rt_listprocnames
ef3e :                       df_rt_list_linno
                             	; else get 1st parameter
ef3e : 2018e2           [ 6] 	jsr df_rt_getnval
                             	; find the starting line number in X,A
ef41 : 2039e0           [ 6] 	jsr df_pg_find_line
                             	; save start in ptra
ef44 : 86a1             [ 3] 	stx df_tmpptra
ef46 : 85a2             [ 3] 	sta df_tmpptra+1
ef48 : 4c53ef           [ 3] 	jmp df_rt_listprgend
                             	; NO ability to choose and ending line number!
                             
                             ; Common listing routine used by LIST and SAVE
AS65 Assembler for R6502 [1.42].                                     Page  238
-------------------------------- bank\bank0.s --------------------------------

                             ; tmpe = 0 means in LIST mode else SAVE mode
                             ; can stop the listing in LIST mode with CTRL-C
ef4b :                       df_rt_listprg
                             	; program start and end as for pointer value
                             	_cpyZPWord df_prgstrt, df_tmpptra
                             
ef53 :                       df_rt_listprgend
ef53 : a568             [ 3] 	lda df_prgend+1
ef55 : 48               [ 3] 	pha
ef56 : a567             [ 3] 	lda df_prgend
ef58 : 48               [ 3] 	pha
ef59 :                       df_rt_list_line
                             	; if line length = 0 then end of program
ef59 : a000             [ 2] 	ldy #0
ef5b : b1a1             [ 5] 	lda (df_tmpptra),y
ef5d : f038             [ 3] 	beq df_rt_list_line_fin
                             	; if in list mode and CTRL-C then also stop
ef5f : a5a9             [ 3] 	lda df_tmpptre
ef61 : d010             [ 3] 	bne df_rt_list_line_cont
                             	; check for break, asynch get
ef63 : 18               [ 2] 	clc
ef64 :                       df_rt_list_synckey
ef64 : a5a9             [ 3] 	lda df_tmpptre					; Ignore keys on save mode
ef66 : d00b             [ 3] 	bne df_rt_list_line_cont
ef68 :                       df_rt_list_pause
ef68 : 2027c4           [ 6] 	jsr io_get_ch
ef6b : c920             [ 2] 	cmp #' '						; Space = PAUSE
ef6d : f0f9             [ 3] 	beq df_rt_list_pause			; C=1 for synchronouse ke
ef6f : c903             [ 2] 	cmp #UTF_ETX					; CTRL-C?
ef71 : f024             [ 3] 	beq df_rt_list_line_fin
ef73 :                       df_rt_list_line_cont
ef73 : a000             [ 2] 	ldy #0
ef75 : 847c             [ 3] 	sty df_linoff
ef77 : 209aef           [ 6] 	jsr df_rt_list_all_line
ef7a :                       df_rt_list_next_line
                             	; new line
ef7a : 2068c1           [ 6] 	jsr utilPrintCRLF
                             	; increment pointer to next line
ef7d : 18               [ 2] 	clc
ef7e : a5a1             [ 3] 	lda df_tmpptra
ef80 : a000             [ 2] 	ldy #0
ef82 : 71a1             [ 5] 	adc (df_tmpptra),y
ef84 : 85a1             [ 3] 	sta df_tmpptra
                             	_bcc 2
                             
ef88 : e6a2             [ 5] 	inc df_tmpptra+1
                             	; if pointer > end then listing is done
ef8a : 38               [ 2] 	sec
ef8b : 68               [ 4] 	pla
ef8c : aa               [ 2] 	tax
ef8d : e5a1             [ 3] 	sbc df_tmpptra
ef8f : 68               [ 4] 	pla
ef90 : 48               [ 3] 	pha
ef91 : e5a2             [ 3] 	sbc df_tmpptra+1
ef93 : 8a               [ 2] 	txa
ef94 : 48               [ 3] 	pha
ef95 : b0c2             [ 3] 	bcs df_rt_list_line
ef97 :                       df_rt_list_line_fin
                             	; if got here then reached tmpb
ef97 : 68               [ 4] 	pla
ef98 : 68               [ 4] 	pla
ef99 :                       df_rt_list_line_only_fin
AS65 Assembler for R6502 [1.42].                                     Page  239
-------------------------------- bank\bank0.s --------------------------------

ef99 : 60               [ 6] 	rts
                             
                             ;Using df_tmpptra as line pointer
                             ;Print decode an entire line
ef9a :                       df_rt_list_all_line				; Start here to include nu
ef9a : 20d4f0           [ 6] 	jsr df_rt_list_linnum
ef9d :                       df_rt_list_line_only			; Start here for just the 
ef9d : a003             [ 2] 	ldy #3
ef9f : b1a1             [ 5] 	lda (df_tmpptra),y
efa1 : 8592             [ 3] 	sta df_lineidx
efa3 : c8               [ 2] 	iny
efa4 : 847c             [ 3] 	sty df_linoff
efa6 :                       df_rt_list_decode
efa6 : a47c             [ 3] 	ldy df_linoff
efa8 : b1a1             [ 5] 	lda (df_tmpptra),y
efaa : 3010             [ 3] 	bmi df_rt_list_token
efac : c920             [ 2] 	cmp #DFTK_ESCVAL
efae : 9006             [ 3] 	bcc df_rt_list_escval
                             	; normal char just print it
efb0 : 202ac4           [ 6] 	jsr io_put_ch
efb3 : 4cbfef           [ 3] 	jmp df_rt_list_nexttok
efb6 :                       df_rt_list_escval
                             	; A and Y need to be valid on entry
efb6 : 20d8ef           [ 6] 	jsr df_rt_list_decode_esc
efb9 : 4cbfef           [ 3] 	jmp df_rt_list_nexttok
efbc :                       df_rt_list_token
efbc : 20e5f0           [ 6] 	jsr df_rt_list_decode_token
efbf :                       df_rt_list_nexttok
                             	; advance the line offset
efbf : e67c             [ 5] 	inc df_linoff
efc1 : a57c             [ 3] 	lda df_linoff
                             	; check if at end of line
efc3 : a200             [ 2] 	ldx #0
efc5 : c1a1             [ 6] 	cmp (df_tmpptra,x)
efc7 : f0d0             [ 3] 	beq df_rt_list_line_only_fin
                             	; check if at end of statement
efc9 : c592             [ 3] 	cmp df_lineidx
efcb : d0d9             [ 3] 	bne df_rt_list_decode
efcd : a8               [ 2] 	tay
                             	; save the next statement offset
efce : b1a1             [ 5] 	lda (df_tmpptra),y
efd0 : 8592             [ 3] 	sta df_lineidx
efd2 : c8               [ 2] 	iny
efd3 : 847c             [ 3] 	sty df_linoff
efd5 : 4ca6ef           [ 3] 	jmp df_rt_list_decode
                             
                             
                             ; decode escape sequences
                             ; Input: A contains the esc val and Y is char lin
efd8 :                       df_rt_list_decode_esc
                             	; jump over esc byte
efd8 : c8               [ 2] 	iny
efd9 : 847c             [ 3] 	sty df_linoff
efdb : 48               [ 3] 	pha
                             	; get the next two bytes in case needed
efdc : b1a1             [ 5] 	lda (df_tmpptra),y
efde : 85a3             [ 3] 	sta df_tmpptrb
efe0 : c8               [ 2] 	iny
efe1 : b1a1             [ 5] 	lda (df_tmpptra),y
efe3 : 85a4             [ 3] 	sta df_tmpptrb+1
efe5 : 88               [ 2] 	dey				; Y is on byte after esc byte
efe6 : 68               [ 4] 	pla
AS65 Assembler for R6502 [1.42].                                     Page  240
-------------------------------- bank\bank0.s --------------------------------

                             	; x2 to get jmp offset
efe7 : 0a               [ 2] 	asl a
efe8 : aa               [ 2] 	tax
efe9 : bd48e7           [ 4] 	lda df_rt_escjmp,x
efec : 85a5             [ 3] 	sta df_tmpptrc
efee : bd49e7           [ 4] 	lda df_rt_escjmp+1,x
eff1 : 85a6             [ 3] 	sta df_tmpptrc+1
                             	; now jump to decoder
eff3 : 6ca500           [ 6] 	jmp (df_tmpptrc)
                             
                             ; reserved
eff6 :                       df_rt_lst_reserved
eff6 : 60               [ 6] 	rts
                             
                             ; decode a byte char
eff7 :                       df_rt_lst_chr
eff7 : a927             [ 2] 	lda #0x27			; Single quote
eff9 : 202ac4           [ 6] 	jsr io_put_ch
effc : a5a3             [ 3] 	lda df_tmpptrb
effe : 202ac4           [ 6] 	jsr io_put_ch
f001 : a927             [ 2] 	lda #0x27			; Single quote
f003 : 202ac4           [ 6] 	jsr io_put_ch
f006 : c8               [ 2] 	iny
f007 : 847c             [ 3] 	sty df_linoff
f009 : 60               [ 6] 	rts
                             
                             ; Output 0x for hex chars
f00a :                       df_rt_lst_hex_pre
f00a : a930             [ 2] 	lda #'0'
f00c : 202ac4           [ 6] 	jsr io_put_ch
f00f : a978             [ 2] 	lda #'x'
f011 : 4c2ac4           [ 3] 	jmp io_put_ch
                             
                             
                             ; Decode a byte hex
f014 :                       df_rt_lst_bythex
f014 : 200af0           [ 6] 	jsr df_rt_lst_hex_pre
f017 :                       df_rt_lst_lo_hex
f017 : a5a3             [ 3] 	lda df_tmpptrb
f019 : 2085c1           [ 6] 	jsr str_a_to_x
f01c : 202ac4           [ 6] 	jsr io_put_ch
f01f : 8a               [ 2] 	txa
f020 : 202ac4           [ 6] 	jsr io_put_ch
f023 :                       df_rt_lst_const_done
f023 : c8               [ 2] 	iny
f024 : 847c             [ 3] 	sty df_linoff
f026 : 60               [ 6] 	rts
                             
                             ; Decode an int hex
f027 :                       df_rt_lst_inthex
f027 : 200af0           [ 6] 	jsr df_rt_lst_hex_pre
f02a : a5a4             [ 3] 	lda df_tmpptrb+1
f02c : 2085c1           [ 6] 	jsr str_a_to_x
f02f : 202ac4           [ 6] 	jsr io_put_ch
f032 : 8a               [ 2] 	txa
f033 : 202ac4           [ 6] 	jsr io_put_ch
f036 : 4c17f0           [ 3] 	jmp df_rt_lst_lo_hex
                             
                             ; Decode a byte binary
f039 :                       df_rt_lst_bytbin
f039 : a5a3             [ 3] 	lda df_tmpptrb
f03b : 85a4             [ 3] 	sta df_tmpptrb+1
AS65 Assembler for R6502 [1.42].                                     Page  241
-------------------------------- bank\bank0.s --------------------------------

f03d : a208             [ 2] 	ldx #8
f03f : d002             [ 3] 	bne df_rt_lst_bin
                             
                             ; Decode a int binary
f041 :                       df_rt_lst_intbin
f041 : a210             [ 2] 	ldx #16
                             	; FALL THROUGH
                             ; Main 01 decoding of binary
f043 :                       df_rt_lst_bin
f043 : a930             [ 2] 	lda #'0'
f045 : 202ac4           [ 6] 	jsr io_put_ch
f048 : a962             [ 2] 	lda #'b'
f04a : 202ac4           [ 6] 	jsr io_put_ch
f04d :                       df_rt_lst_bit
f04d : a930             [ 2] 	lda #'0'
f04f : 06a3             [ 5] 	asl df_tmpptrb
f051 : 26a4             [ 5] 	rol df_tmpptrb+1
f053 : 6900             [ 2] 	adc #0				; If C=1 then '0' becomes '1'
f055 :                       df_rt_lst_bit_skip0
f055 : 202ac4           [ 6] 	jsr io_put_ch
f058 : ca               [ 2] 	dex
f059 : d0f2             [ 3] 	bne df_rt_lst_bit
f05b : f0c6             [ 3] 	beq df_rt_lst_const_done
                             
                             ; Decode a decimal integer
f05d :                       df_rt_lst_intdec
f05d : a6a3             [ 3] 	ldx df_tmpptrb
f05f : a5a4             [ 3] 	lda df_tmpptrb+1
f061 : c8               [ 2] 	iny
f062 : 847c             [ 3] 	sty df_linoff
f064 : 18               [ 2] 	clc
f065 : 4ce5c3           [ 3] 	jmp print_a_to_d
                             
                             
                             ; decode a variable or procedure
                             ; Slot address to decode in ptrb
f068 :                       df_rt_lst_var
f068 :                       df_rt_lst_proc
                             	; jump over the address bytes
f068 : c8               [ 2] 	iny
f069 : 847c             [ 3] 	sty df_linoff
                             
                             	; ptrc starts at VNT start
                             	_cpyZPWord df_vntstrt,df_tmpptrc
                             
                             
                             	; ptrd starts at end of VVT
                             	_cpyZPWord df_vvtend,df_tmpptrd
                             
f07b : a000             [ 2] 	ldy #0
f07d :                       df_rt_list_findvvt
                             	; Check have we reached target addr in vvt?
f07d : a5a7             [ 3] 	lda df_tmpptrd
f07f : c5a3             [ 3] 	cmp df_tmpptrb
f081 : d006             [ 3] 	bne df_rt_list_vvtend
f083 : a5a8             [ 3] 	lda df_tmpptrd+1
f085 : c5a4             [ 3] 	cmp df_tmpptrb+1
f087 : f021             [ 3] 	beq df_rt_list_gotvvt
f089 :                       df_rt_list_vvtend
f089 : b1a5             [ 5] 	lda (df_tmpptrc),y
f08b : f009             [ 3] 	beq df_rt_list_gotvvtend
                             	_incZPWord df_tmpptrc
AS65 Assembler for R6502 [1.42].                                     Page  242
-------------------------------- bank\bank0.s --------------------------------

                             
f093 : 4c89f0           [ 3] 	jmp df_rt_list_vvtend
f096 :                       df_rt_list_gotvvtend
                             	_incZPWord df_tmpptrc
                             
                             	; move target slot address towards top of mem
f09c : 18               [ 2] 	clc
f09d : a5a7             [ 3] 	lda df_tmpptrd
f09f : 6908             [ 2] 	adc #DFVVT_SZ
f0a1 : 85a7             [ 3] 	sta df_tmpptrd
                             	_bcc 2
                             
f0a5 : e6a8             [ 5] 	inc df_tmpptrd+1
                             	; go back and check again
f0a7 : 4c7df0           [ 3] 	jmp df_rt_list_findvvt
f0aa :                       df_rt_list_gotvvt
f0aa : b1a5             [ 5] 	lda (df_tmpptrc),y
f0ac : f025             [ 3] 	beq df_rt_list_donvvt
f0ae : 202ac4           [ 6] 	jsr io_put_ch
                             	_incZPWord df_tmpptrc
                             
f0b7 : 4caaf0           [ 3] 	jmp df_rt_list_gotvvt
                             
f0ba :                       df_rt_lst_strlit
f0ba : a922             [ 2] 	lda #0x22
f0bc : 202ac4           [ 6] 	jsr io_put_ch
f0bf : a47c             [ 3] 	ldy df_linoff
f0c1 :                       df_rt_lst_strlitch
f0c1 : b1a1             [ 5] 	lda (df_tmpptra),y
f0c3 : f007             [ 3] 	beq df_rt_lst_strlitdon
f0c5 : 202ac4           [ 6] 	jsr io_put_ch
f0c8 : c8               [ 2] 	iny
f0c9 : 4cc1f0           [ 3] 	jmp df_rt_lst_strlitch
f0cc :                       df_rt_lst_strlitdon
f0cc : a922             [ 2] 	lda #0x22
f0ce : 202ac4           [ 6] 	jsr io_put_ch
f0d1 : 847c             [ 3] 	sty df_linoff
f0d3 :                       df_rt_list_donvvt
f0d3 : 60               [ 6] 	rts
                             
f0d4 :                       df_rt_list_linnum
f0d4 : a001             [ 2] 	ldy #1
f0d6 : b1a1             [ 5] 	lda (df_tmpptra),y
f0d8 : aa               [ 2] 	tax
f0d9 : c8               [ 2] 	iny
f0da : b1a1             [ 5] 	lda (df_tmpptra),y
f0dc : 18               [ 2] 	clc
f0dd : 20e5c3           [ 6] 	jsr print_a_to_d
f0e0 : a920             [ 2] 	lda #0x20			; Always add a space after line num
f0e2 : 4c2ac4           [ 3] 	jmp io_put_ch
                             
                             ; decode a token value with MSB set
f0e5 :                       df_rt_list_decode_token
                             	; if not assembler then normal listing
f0e5 : c997             [ 2] 	cmp #DFRT_ASM
f0e7 : d003             [ 3] 	bne df_rt_list_decode_token_normal
f0e9 : 4c23f1           [ 3] 	jmp df_rt_asm_decode_token
f0ec :                       df_rt_list_decode_token_normal
f0ec : 297f             [ 2] 	and #0x7f
                             	; token 0 and 1 don't get decoded they are impli
f0ee : c902             [ 2] 	cmp #2
f0f0 : b001             [ 3] 	bcs df_rt_list_do_decode_tkn
AS65 Assembler for R6502 [1.42].                                     Page  243
-------------------------------- bank\bank0.s --------------------------------

f0f2 : 60               [ 6] 	rts
f0f3 :                       df_rt_list_do_decode_tkn
f0f3 : aa               [ 2] 	tax
f0f4 : a946             [ 2] 	lda #lo(df_tokensyms)
f0f6 : 85a3             [ 3] 	sta df_tmpptrb
f0f8 : a9dc             [ 2] 	lda #hi(df_tokensyms)
f0fa : 85a4             [ 3] 	sta df_tmpptrb+1
f0fc :                       df_rt_list_find_sym
f0fc : 8a               [ 2] 	txa
f0fd : f012             [ 4] 	beq df_rt_list_got_sym
f0ff : a000             [ 2] 	ldy #0
f101 :                       df_rt_list_next_ch
f101 : b1a3             [ 5] 	lda (df_tmpptrb),y
f103 : 48               [ 3] 	pha
                             	_incZPWord df_tmpptrb
                             
f10a : 68               [ 4] 	pla
f10b : 10f4             [ 3] 	bpl df_rt_list_next_ch
f10d :                       df_rt_list_got_last_sym
                             	; ok got to the last ch
                             	; advance to next sym
f10d : ca               [ 2] 	dex
f10e : 4cfcf0           [ 3] 	jmp df_rt_list_find_sym
f111 :                       df_rt_list_got_sym
f111 : a1a3             [ 6] 	lda (df_tmpptrb,x)		; Relies on X=0 from branch
f113 : 08               [ 3] 	php
f114 : 297f             [ 2] 	and #0x7f
f116 : 202ac4           [ 6] 	jsr io_put_ch
                             	_incZPWord df_tmpptrb
                             
f11f : 28               [ 4] 	plp
f120 : 10ef             [ 3] 	bpl df_rt_list_got_sym
f122 : 60               [ 6] 	rts
                             
                             ;** Decode assembler token in A **
f123 :                       df_rt_asm_decode_token
f123 : e67c             [ 5] 	inc df_linoff		; Point to token after asm token
f125 : a47c             [ 3] 	ldy df_linoff
f127 : b1a1             [ 5] 	lda (df_tmpptra),y	;If token N=1 then keyword
f129 : 300a             [ 3] 	bmi df_rt_asm_decode_token_keyword
f12b : a92e             [ 2] 	lda #'.'			;Put the '.' before escape processing
f12d : 202ac4           [ 6] 	jsr io_put_ch
f130 : b1a1             [ 5] 	lda (df_tmpptra),y	;Get asm token back
f132 : 4cd8ef           [ 3] 	jmp df_rt_list_decode_esc
f135 :                       df_rt_asm_decode_token_keyword
f135 : 297f             [ 2] 	and #0x7f			; Mask off MSB
f137 : aa               [ 2] 	tax					;Put it in to X as the counter
                             	; Point to asm symbol table
f138 : a9aa             [ 2] 	lda #lo(df_asm_tokensyms)
f13a : 85a3             [ 3] 	sta df_tmpptrb
f13c : a9fd             [ 2] 	lda #hi(df_asm_tokensyms)
f13e : 85a4             [ 3] 	sta df_tmpptrb+1
f140 :                       df_rt_list_find_asm_sym
f140 : 8a               [ 2] 	txa
f141 : f01b             [ 3] 	beq df_rt_list_got_asm_sym
f143 : a000             [ 2] 	ldy #0
f145 :                       df_rt_list_next_asm_ch
                             	_incZPWord df_tmpptrb
                             
f14b : b1a3             [ 5] 	lda (df_tmpptrb),y
f14d : c920             [ 2] 	cmp #' '			; Skip all chars >=' '
f14f : b0f4             [ 3] 	bcs df_rt_list_next_asm_ch
AS65 Assembler for R6502 [1.42].                                     Page  244
-------------------------------- bank\bank0.s --------------------------------

f151 : 38               [ 2] 	sec					; Skip offset and mode bytes
f152 : 65a3             [ 3] 	adc df_tmpptrb
f154 : 85a3             [ 3] 	sta df_tmpptrb
                             	_bcc 2
                             
f158 : e6a4             [ 5] 	inc df_tmpptrb+1
f15a : ca               [ 2] 	dex					; One less symbol to skip over
f15b : 4c40f1           [ 3] 	jmp df_rt_list_find_asm_sym
f15e :                       df_rt_list_got_asm_sym
f15e : a1a3             [ 6] 	lda (df_tmpptrb,x)	; Relies on X=0 from branch
f160 : c920             [ 2] 	cmp #' '
f162 : 900c             [ 3] 	bcc df_rt_asm_decode_token_done
f164 : 202ac4           [ 6] 	jsr io_put_ch
                             	_incZPWord df_tmpptrb
                             
f16d : 4c5ef1           [ 3] 	jmp df_rt_list_got_asm_sym
f170 :                       df_rt_asm_decode_token_done
f170 : 60               [ 6] 	rts
                             
                             
f171 :                       df_rt_doke
f171 : 20e2e4           [ 6] 	jsr df_rt_parm_2ints
f174 : a5a3             [ 3] 	lda df_tmpptrb
f176 : a000             [ 2] 	ldy #0
f178 : 91a1             [ 5] 	sta (df_tmpptra),y
                             	; get high byte to doke
f17a : a5a4             [ 3] 	lda df_tmpptrb+1
f17c : c8               [ 2] 	iny
                             	; poke hi byte
f17d : 91a1             [ 5] 	sta (df_tmpptra),y
f17f : 60               [ 6] 	rts
                             
f180 :                       df_rt_poke
f180 : 20e2e4           [ 6] 	jsr df_rt_parm_2ints
f183 : a5a3             [ 3] 	lda df_tmpptrb
f185 : a000             [ 2] 	ldy #0
f187 : 91a1             [ 5] 	sta (df_tmpptra),y
f189 : 60               [ 6] 	rts
                             
f18a :                       df_rt_snd_common
                             	; 3 inputs
                             	; tmpa = channel (1,2,3), tmpb = period, tmpc = 
f18a : a5a1             [ 3] 	lda df_tmpptra
                             	; tone channel addressing is 0 to 2
f18c : 38               [ 2] 	sec
f18d : e901             [ 2] 	sbc #1
f18f : 2903             [ 2] 	and #3
                             	; ok doing a tone channel, get reg index for per
f191 : 0a               [ 2] 	asl a
f192 : aa               [ 2] 	tax
                             	; get low byte of period
f193 : a5a3             [ 3] 	lda df_tmpptrb
f195 : 206ec0           [ 6] 	jsr snd_set
                             	; increment reg number to high byte
f198 : e8               [ 2] 	inx
                             	; get high byte of period
f199 : a5a4             [ 3] 	lda df_tmpptrb+1
f19b : 290f             [ 2] 	and #0x0f
                             	; set period
f19d : 206ec0           [ 6] 	jsr snd_set
                             	; get volume register index (8 = channel 1)
f1a0 : 18               [ 2] 	clc
AS65 Assembler for R6502 [1.42].                                     Page  245
-------------------------------- bank\bank0.s --------------------------------

f1a1 : a5a1             [ 3] 	lda df_tmpptra
f1a3 : 2903             [ 2] 	and #3
f1a5 : 6907             [ 2] 	adc #7
f1a7 : aa               [ 2] 	tax
                             	; get volume
f1a8 : a5a5             [ 3] 	lda df_tmpptrc
f1aa : 290f             [ 2] 	and #0x0f
f1ac : d002             [ 3] 	bne df_rt_sound_env_skip
                             	; envelope mode
f1ae : 0910             [ 2] 	ora #0x10
f1b0 :                       df_rt_sound_env_skip
f1b0 : 4c6ec0           [ 3] 	jmp snd_set
                             
                             ; sound chan,period,volume
f1b3 :                       df_rt_sound
f1b3 : 20ede4           [ 6] 	jsr df_rt_parm_3ints
f1b6 :                       df_rt_dosound
                             	; check which channel (0 = noise)
f1b6 : a5a1             [ 3] 	lda df_tmpptra
f1b8 : f003             [ 3] 	beq df_rt_sound_noise
f1ba : 4c8af1           [ 3] 	jmp df_rt_snd_common
f1bd :                       df_rt_sound_noise
                             	; ok update the noise channel, volume is irrelev
f1bd : a206             [ 2] 	ldx #6
f1bf : a5a3             [ 3] 	lda df_tmpptrb
f1c1 : 291f             [ 2] 	and #0x1f
f1c3 : 4c6ec0           [ 3] 	jmp snd_set
                             
                             ; music chan,octave,note,volume
f1c6 :                       df_rt_music
f1c6 : 2004e5           [ 6] 	jsr df_rt_parm_4ints
                             	; parm 2 = octave, need to x 12word = 24
                             	; get period A,X (hi/lo)
                             	; pass in octave # in X and note # in Y
f1c9 : a6a3             [ 3] 	ldx df_tmpptrb
f1cb : a4a5             [ 3] 	ldy df_tmpptrc
f1cd : 20bfd5           [ 6] 	jsr snd_get_note
                             	; store note period in b
f1d0 : 86a3             [ 3] 	stx df_tmpptrb
f1d2 : 85a4             [ 3] 	sta df_tmpptrb+1
                             	; put vol in tmpc
f1d4 : a5a7             [ 3] 	lda df_tmpptrd
f1d6 : 85a5             [ 3] 	sta df_tmpptrc
                             	; tmpa,b,c contain chan,per,vol
f1d8 : 4cb6f1           [ 3] 	jmp df_rt_dosound
                             
                             
                             ; play tonemask,noisemask,envelope,period
f1db :                       df_rt_play
f1db : 2004e5           [ 6] 	jsr df_rt_parm_4ints
                             	; parm 1 = tone enable
f1de : a5a1             [ 3] 	lda df_tmpptra
f1e0 : 2907             [ 2] 	and #7
f1e2 : 85a1             [ 3] 	sta df_tmpptra
                             	; parm 2 = noise enable
f1e4 : a5a3             [ 3] 	lda df_tmpptrb
f1e6 : 2907             [ 2] 	and #7
f1e8 : 0a               [ 2] 	asl a
f1e9 : 0a               [ 2] 	asl a
f1ea : 0a               [ 2] 	asl a
f1eb : 05a1             [ 3] 	ora df_tmpptra
                             	; we now have bits set for channels to enable
AS65 Assembler for R6502 [1.42].                                     Page  246
-------------------------------- bank\bank0.s --------------------------------

                             	; but need to invert for the 8910
                             	; top 2 bits are 0 and 1 as these are port b (in
f1ed : 497f             [ 2] 	eor #0x7f
                             	; reg 7 is control register
f1ef : a207             [ 2] 	ldx #7
f1f1 : 206ec0           [ 6] 	jsr snd_set
                             	; parm 3 = envelope mode
f1f4 : a5a5             [ 3] 	lda df_tmpptrc
f1f6 : 290f             [ 2] 	and #0xf
                             	; 13 is envelope shape register
f1f8 : a20d             [ 2] 	ldx #13
f1fa : 206ec0           [ 6] 	jsr snd_set
                             	; parm 4 = envelope period
                             	; 11 is envelope period register
f1fd : a20b             [ 2] 	ldx #11
                             	; get low
f1ff : a5a7             [ 3] 	lda df_tmpptrd
f201 : 206ec0           [ 6] 	jsr snd_set
                             	; get high
f204 : e8               [ 2] 	inx
f205 : a5a8             [ 3] 	lda df_tmpptrd+1
f207 : 4c6ec0           [ 3] 	jmp snd_set
                             
                             ;df_rt_fill
                             ;	jsr df_rt_parm_5ints
                             ;	rts
                             	
                             ;* common filename procesing routine
                             ;*
f20a :                       df_rt_init_filename
                             	; evaluate string
f20a : 201ee2           [ 6] 	jsr df_rt_neval
f20d : 2093f7           [ 6] 	jsr df_ost_popStr
                             
                             	; save string address
f210 : 86a5             [ 3] 	stx df_tmpptrc
f212 : 85a6             [ 3] 	sta df_tmpptrc+1
                             
                             	; Check first 2 chars of string
                             	; if s: then device = sd card
                             	; if t: then device = tape
f214 : a900             [ 2] 	lda #0							; Assume tape i.e. device 0
f216 : 48               [ 3] 	pha
f217 : a001             [ 2] 	ldy #1
f219 : b1a5             [ 5] 	lda (df_tmpptrc),y
f21b : 88               [ 2] 	dey								; Y=0 i.e. assume no s: or t:
f21c : c93a             [ 2] 	cmp #':'						; if no ':' in pos 1 then tape
f21e : d010             [ 3] 	bne df_rt_do_fname
f220 : b1a5             [ 5] 	lda (df_tmpptrc),y				; get first char
f222 : a002             [ 2] 	ldy #2							; filename must start at pos 2
f224 : c974             [ 2] 	cmp #'t'						; if t then still tape
f226 : f008             [ 3] 	beq df_rt_do_fname
f228 : c973             [ 2] 	cmp #'s'						; MUST be s else an error!
f22a : d02e             [ 3] 	bne df_rt_file_errc
f22c : 68               [ 4] 	pla
f22d : a901             [ 2] 	lda #1							; Set to sd card
f22f : 48               [ 3] 	pha
f230 :                       df_rt_do_fname
                             	; copy string to fhandle, Y is at start pos of f
f230 : a200             [ 2] 	ldx #0
f232 :                       df_rt_copy_fn
f232 : b1a5             [ 5] 	lda (df_tmpptrc),y
AS65 Assembler for R6502 [1.42].                                     Page  247
-------------------------------- bank\bank0.s --------------------------------

f234 :                       df_rt_fname_case
f234 : 9d0004           [ 5] 	sta df_linbuff,x				; Put filename in line buffe
f237 : c8               [ 2] 	iny
f238 : e8               [ 2] 	inx
f239 : c900             [ 2] 	cmp #0
f23b : d0f5             [ 3] 	bne df_rt_copy_fn
f23d : 68               [ 4] 	pla								; Get device number in A
f23e : 60               [ 6] 	rts
                             
                             ; Delete a file from SD card
                             ; Only valid for SD card
f23f :                       df_rt_delete
f23f : 204ff2           [ 6] 	jsr df_rt_parse_file
f242 : c901             [ 2] 	cmp #1
f244 : d014             [ 3] 	bne df_rt_file_errc
f246 : 206fc8           [ 6] 	jsr sd_delete
f249 : 4cfec3           [ 3] 	jmp io_set_default
                             
f24c :                       df_rt_dir
f24c : 4c7ac8           [ 3] 	jmp sd_dir
                             
                             ;* common file parsing routine
f24f :                       df_rt_parse_file
                             	; now process filename
f24f : 200af2           [ 6] 	jsr df_rt_init_filename
                             	; device number is in A (0=tape, 1=sdcard)
f252 : 48               [ 3] 	pha								; Save sub-device number
f253 : a900             [ 2] 	lda #0							; Always 0 for file device
f255 : 2001c4           [ 6] 	jsr io_active_device
f258 : 68               [ 4] 	pla								; Exit with device number found
f259 : 60               [ 6] 	rts
f25a :                       df_rt_file_errc
                             	SWBRK DFERR_FNAME
                             
                             
                             ; save "file" as text
f25c :                       df_rt_tsave
f25c : 204ff2           [ 6] 	jsr df_rt_parse_file
f25f : 2030c4           [ 6] 	jsr io_open_write
f262 : b0f6             [ 3] 	bcs df_rt_file_errc
                             	; ok now have redirected output to device
                             	; go and list the program in save mode
f264 : a901             [ 2] 	lda #1
f266 : 85a9             [ 3] 	sta df_tmpptre
f268 : 204bef           [ 6] 	jsr df_rt_listprg
                             	; final CR to end the save
f26b : a90d             [ 2] 	lda #UTF_CR
f26d : 202ac4           [ 6] 	jsr io_put_ch
f270 :                       df_rt_file_cleanup
                             	; close the file
f270 : 2033c4           [ 6] 	jsr io_close
                             	; restore to default device io
f273 : 4cfec3           [ 3] 	jmp io_set_default
                             
                             
                             ; load "file" from text
f276 :                       df_rt_tload
f276 : 204ff2           [ 6] 	jsr df_rt_parse_file
f279 : 202dc4           [ 6] 	jsr io_open_read
f27c : b0dc             [ 3] 	bcs df_rt_file_errc
                             	; no echo - very important
                             	; else might try and write to a device
AS65 Assembler for R6502 [1.42].                                     Page  248
-------------------------------- bank\bank0.s --------------------------------

                             	; only open for reading (i.e. SD CARD)
f27e :                       df_rt_loadline
f27e : 18               [ 2] 	clc					; NO ECHO!
f27f : 20efe0           [ 6] 	jsr df_pg_inputline
                             	; if C clear then tokenise line
f282 : 9015             [ 3] 	bcc df_rt_ldtokenise
                             	; else done
                             	; clear dflat runtime else will try to execute
                             	; the last tokenised line!
f284 : a200             [ 2] 	ldx #0
f286 : 8e8004           [ 4] 	stx df_tokbuff			; Offset to next line
f289 : 8e8104           [ 4] 	stx df_tokbuff+1		; Clear line low
f28c : 8e8204           [ 4] 	stx df_tokbuff+2		; Clear line high
f28f : 867f             [ 3] 	stx df_nxtstidx			; Clear next statement
f291 : 867e             [ 3] 	stx df_eolidx			; Clear end of line too
f293 : e8               [ 2] 	inx						; Set immediate mode
f294 : 865e             [ 3] 	stx df_immed
f296 : 4c70f2           [ 3] 	jmp df_rt_file_cleanup	; Ok now can close and do
f299 :                       df_rt_ldtokenise
f299 : 2040e1           [ 6] 	jsr df_pg_tokenise		; Tokenise loaded string
f29c : 4c7ef2           [ 3] 	jmp df_rt_loadline		; Continue with next until b
                             
                             
                             ; Utility to open in binary mode save
f29f :                       df_rt_openforbinsave
f29f : 204ff2           [ 6] 	jsr df_rt_parse_file
f2a2 : 203cc4           [ 6] 	jsr io_open_ext2		; Ext2 is binary file save
f2a5 : b0b3             [ 3] 	bcs df_rt_file_errc
f2a7 : 60               [ 6] 	rts
                             
                             ; Utility to open in binary mode load
f2a8 :                       df_rt_openforbinload
                             	; Get filename and open file for binary read
f2a8 : 204ff2           [ 6] 	jsr df_rt_parse_file
f2ab : 2039c4           [ 6] 	jsr io_open_ext1		; Ext1 is binary file read
f2ae : b0aa             [ 3] 	bcs df_rt_file_errc
f2b0 : 60               [ 6] 	rts
                             
                             ; bload addr,"file"
f2b1 :                       df_rt_bload
                             	; Get address but keep on stack
f2b1 : e688             [ 5] 	inc df_exeoff
f2b3 : 201ee2           [ 6] 	jsr df_rt_neval
                             
                             	; Get filename and open file for binary read
f2b6 : e688             [ 5] 	inc df_exeoff
f2b8 : 20a8f2           [ 6] 	jsr df_rt_openforbinload
                             
                             	; Get address from stack in to ptra
f2bb : 208ff7           [ 6] 	jsr df_ost_popInt
f2be : 86a1             [ 3] 	stx df_tmpptra
f2c0 : 85a2             [ 3] 	sta df_tmpptra+1
                             
                             	; Get file address to X,Y
f2c2 : 2027c4           [ 6] 	jsr io_get_ch
f2c5 : aa               [ 2] 	tax
f2c6 : 2027c4           [ 6] 	jsr io_get_ch
f2c9 : a8               [ 2] 	tay
                             
                             	; Check if user address is zero
f2ca : a5a1             [ 3] 	lda df_tmpptra
f2cc : 05a2             [ 3] 	ora df_tmpptra+1
AS65 Assembler for R6502 [1.42].                                     Page  249
-------------------------------- bank\bank0.s --------------------------------

f2ce : d004             [ 3] 	bne df_rt_bload_addr
                             	; If it is zero then use address from file
f2d0 : 86a1             [ 3] 	stx df_tmpptra
f2d2 : 84a2             [ 3] 	sty df_tmpptra+1
f2d4 :                       df_rt_bload_addr
                             	; Get file length
f2d4 : 2027c4           [ 6] 	jsr io_get_ch
f2d7 : 85a3             [ 3] 	sta df_tmpptrb
f2d9 : 2027c4           [ 6] 	jsr io_get_ch
f2dc : 85a4             [ 3] 	sta df_tmpptrb+1
                             
                             	; Go and load the bytes
f2de : 2005f3           [ 6] 	jsr df_rt_loadbin
                             	; Close the file
f2e1 : 4c70f2           [ 3] 	jmp df_rt_file_cleanup
                             
                             ; Save a binary file
                             ; addr,length,fname
f2e4 :                       df_rt_bsave
                             	; Get source address and length but leave on sta
                             	; evaluate 1st parm
f2e4 : 201ee2           [ 6] 	jsr df_rt_neval
                             	; jump over comma
f2e7 : e688             [ 5] 	inc df_exeoff
                             	; evaluate the 2nd parm
f2e9 : 201ee2           [ 6] 	jsr df_rt_neval
                             
                             	; Process file and open for binary save
f2ec : e688             [ 5] 	inc df_exeoff
f2ee : 209ff2           [ 6] 	jsr df_rt_openforbinsave
                             
                             	; Get length in to ptrb
f2f1 : 208ff7           [ 6] 	jsr df_ost_popInt
f2f4 : 86a3             [ 3] 	stx df_tmpptrb
f2f6 : 85a4             [ 3] 	sta df_tmpptrb+1
                             
                             	; Get address in to ptra
f2f8 : 208ff7           [ 6] 	jsr df_ost_popInt
f2fb : 86a1             [ 3] 	stx df_tmpptra
f2fd : 85a2             [ 3] 	sta df_tmpptra+1
                             
                             	; now save bytes
f2ff : 2017f3           [ 6] 	jsr df_rt_savebin
                             	; Close the file
f302 : 4c70f2           [ 3] 	jmp df_rt_file_cleanup
                             
                             
                             ; save dflat tokenised program as binary
                             ;df_rt_save
                             ;	; Process file and open for binary save
                             ;	jsr df_rt_openforbinsave
                             ;
                             ;	; first save zero page stuff
                             ;	; ok this saves a bit more than needed
                             ;	; but it's no biggie and doesn't
                             ;	; clobber temp space
                             ;	lda #lo(dflat_zp_save_s)
                             ;	sta df_tmpptra
                             ;	lda #hi(dflat_zp_save_s)
                             ;	sta df_tmpptra+1
                             ;	; save length
                             ;	sec
AS65 Assembler for R6502 [1.42].                                     Page  250
-------------------------------- bank\bank0.s --------------------------------

                             ;	lda #lo(dflat_zp_save_e)
                             ;	sbc #lo(dflat_zp_save_s)
                             ;	sta df_tmpptrb
                             ;	lda #hi(dflat_zp_save_e)
                             ;	sbc #hi(dflat_zp_save_s)
                             ;	sta df_tmpptrb+1
                             ;	; now save bytes
                             ;	jsr df_rt_savebin
                             ;
                             ;	; now save the dflat program
                             ;	lda df_prgstrt
                             ;	sta df_tmpptra
                             ;	lda df_prgstrt+1
                             ;	sta df_tmpptra+1
                             ;	; save length
                             ;	sec
                             ;	lda df_prgend
                             ;	sbc df_prgstrt
                             ;	sta df_tmpptrb
                             ;	lda df_prgend+1
                             ;	sbc df_prgstrt+1
                             ;	sta df_tmpptrb+1
                             ;	; now save bytes
                             ;	jsr df_rt_savebin
                             ;
                             ;	; now save the variables VVT and VNT
                             ;	lda df_vntstrt
                             ;	sta df_tmpptra
                             ;	lda df_vntstrt+1
                             ;	sta df_tmpptra+1
                             ;	; save length
                             ;	sec
                             ;	lda df_vvtstrt
                             ;	sbc df_vntstrt
                             ;	sta df_tmpptrb
                             ;	lda df_vvtstrt+1
                             ;	sbc df_vntstrt+1
                             ;	sta df_tmpptrb+1
                             ;	; now save bytes
                             ;	jsr df_rt_savebin
                             ;
                             ;	; close the file
                             ;	jsr io_close
                             ;	clc
                             ;	; Close the file
                             ;	jmp df_rt_file_cleanup
                             
                             
                             ; load dflat tokenised program as binary
                             ;df_rt_load
                             ;	jsr df_rt_openforbinload
                             ;
                             ;	; Get zero page header
                             ;	jsr df_rt_getbin_parms
                             ;	; and get bytes
                             ;	jsr df_rt_loadbin
                             ;
                             ;	; Get program header
                             ;	jsr df_rt_getbin_parms
                             ;	; and get bytes
                             ;	jsr df_rt_loadbin
                             ;
AS65 Assembler for R6502 [1.42].                                     Page  251
-------------------------------- bank\bank0.s --------------------------------

                             ;	; Get variables header
                             ;	jsr df_rt_getbin_parms
                             ;	; and get bytes
                             ;	jsr df_rt_loadbin
                             ;
                             ;	; close the file
                             ;	jsr io_close
                             ;	clc
                             ;	; Close the file
                             ;	jmp df_rt_file_cleanup
                             ;
                             
                             ; Utility to get 4 parms from binary header
                             ;df_rt_getbin_parms
                             ;	ldx #0
                             ;df_rt_getbin_parms_loop
                             ;	jsr io_get_ch
                             ;	sta df_tmpptra,x
                             ;	inx
                             ;	cpx #4
                             ;	bne df_rt_getbin_parms_loop
                             ;	rts
                             
                             ; Utility to load a bin file in address ptra
                             ; Length in ptr b
f305 :                       df_rt_loadbin
                             	; Now load all bytes
f305 : a000             [ 2] 	ldy #0
f307 :                       df_rt_loadbin_byte
                             	; Get a byte from tape
f307 : 2027c4           [ 6] 	jsr io_get_ch
                             	; Save it to destination
f30a : 91a1             [ 5] 	sta (df_tmpptra),y
                             	; Increment destination
f30c : c8               [ 2] 	iny
f30d : d002             [ 3] 	bne df_rt_loadbin_inc
f30f : e6a2             [ 5] 	inc df_tmpptra+1
f311 :                       df_rt_loadbin_inc
                             	; Decrement length remaining
f311 : 2035f3           [ 6] 	jsr df_rt_dec_binlen
                             	; Not done, do another byte
f314 : d0f1             [ 3] 	bne df_rt_loadbin_byte
                             	; Yes the close the file
f316 : 60               [ 6] 	rts
                             
                             ; Utility to save a bin file from address ptra
                             ; Length in ptr b
f317 :                       df_rt_savebin
                             	; Save dest and length to tape
f317 : a200             [ 2] 	ldx #0
f319 :                       df_rt_bsave_parms
f319 : b5a1             [ 4] 	lda df_tmpptra,x
f31b : 202ac4           [ 6] 	jsr io_put_ch
f31e : e8               [ 2] 	inx
f31f : e004             [ 2] 	cpx #4
f321 : d0f6             [ 3] 	bne df_rt_bsave_parms
                             
                             	; Now save all bytes
f323 : a000             [ 2] 	ldy #0
f325 :                       df_rt_savebin_byte
                             	; Get byte from memory
f325 : b1a1             [ 5] 	lda (df_tmpptra),y
AS65 Assembler for R6502 [1.42].                                     Page  252
-------------------------------- bank\bank0.s --------------------------------

                             	; Put byte to tape
f327 : 202ac4           [ 6] 	jsr io_put_ch
                             	; Increment destination
f32a : c8               [ 2] 	iny
f32b : d002             [ 3] 	bne df_rt_savebin_inc
f32d : e6a2             [ 5] 	inc df_tmpptra+1
f32f :                       df_rt_savebin_inc
                             	; Decrement length remaining
f32f : 2035f3           [ 6] 	jsr df_rt_dec_binlen
                             	; Not done, do another byte
f332 : d0f1             [ 3] 	bne df_rt_savebin_byte
f334 : 60               [ 6] 	rts
                             
                             ; Decrement length in ptrb
f335 :                       df_rt_dec_binlen
                             	; Decrement length remaining
f335 : a5a3             [ 3] 	lda df_tmpptrb
f337 : d002             [ 3] 	bne df_rt_binlen_skip
f339 : c6a4             [ 5] 	dec df_tmpptrb+1
f33b :                       df_rt_binlen_skip
f33b : c6a3             [ 5] 	dec df_tmpptrb
                             	; Reached zero?
f33d : a5a3             [ 3] 	lda df_tmpptrb
f33f : 05a4             [ 3] 	ora df_tmpptrb+1
f341 : 60               [ 6] 	rts
                             
                             
                             ; reset var
f342 :                       df_rt_reset
                             	; now get lvar X,A from current statement
f342 : 205fe6           [ 6] 	jsr df_rt_getlvar
                             	; save lvar in tmpb, vvt ptr in tmpa
f345 : 86a3             [ 3] 	stx df_tmpptrb
f347 : 85a4             [ 3] 	sta df_tmpptrb+1
                             	; load the vdp count as the reset value of timer
                             	; turn off interrupts while reading vdp lo,hi
f349 : a000             [ 2] 	ldy #0	; This is in readiness to read high byte 
                             	; clear interrupts to access 3 byte vdp counter 
f34b : 78               [ 2] 	sei
f34c : a508             [ 3] 	lda vdp_cnt
f34e : 91a3             [ 5] 	sta (df_tmpptrb),y
f350 : a509             [ 3] 	lda vdp_cnt+1
f352 : c8               [ 2] 	iny
f353 : 91a3             [ 5] 	sta (df_tmpptrb),y
                             	; restore interrupts asap
f355 : 58               [ 2] 	cli
f356 : 60               [ 6] 	rts
                             
                             ;***** FUNCTIONS *****
                             
f357 :                       df_rt_deek
f357 : 38               [ 2] 	sec
f358 : 24                    	db 0x24	; BIT skip the clc
f359 :                       df_rt_peek
f359 : 18               [ 2] 	clc
f35a :                       df_rt_readbyte
f35a : 08               [ 3] 	php
                             ;	inc df_exeoff
f35b : 2018e2           [ 6] 	jsr df_rt_getnval
f35e : 86a1             [ 3] 	stx df_tmpptra
f360 : 85a2             [ 3] 	sta df_tmpptra+1
f362 : a000             [ 2] 	ldy #0
AS65 Assembler for R6502 [1.42].                                     Page  253
-------------------------------- bank\bank0.s --------------------------------

f364 : b1a1             [ 5] 	lda (df_tmpptra),y
f366 : aa               [ 2] 	tax
f367 : a900             [ 2] 	lda #0
f369 : 28               [ 4] 	plp
f36a : 9003             [ 3] 	bcc df_rt_readbyte_skip
f36c : c8               [ 2] 	iny
f36d : b1a1             [ 5] 	lda (df_tmpptra),y
f36f :                       df_rt_readbyte_skip
f36f : 4c5ff7           [ 3] 	jmp df_ost_pushInt
                             
                             ; Random number generator
                             ; rnd(0) = get next number
                             ; rnd(>0) = set seed
f372 :                       df_rt_rnd
                             ;	inc df_exeoff
f372 : 2018e2           [ 6] 	jsr df_rt_getnval
                             	; if input is 0 then generate next random number
f375 : e000             [ 2] 	cpx #0
f377 : d014             [ 3] 	bne df_rt_rnd_set
f379 : c900             [ 2] 	cmp #0
f37b : d010             [ 3] 	bne df_rt_rnd_set
                             	; generate next number
f37d : a598             [ 3] 	lda df_rnd+1
f37f : 4a               [ 2] 	lsr a
f380 : 2697             [ 5] 	rol df_rnd
f382 : 9002             [ 3] 	bcc df_rt_rnd_noeor
f384 : 49b4             [ 2] 	eor #0xb4
f386 :                       df_rt_rnd_noeor
f386 : 8598             [ 3] 	sta df_rnd+1
f388 : 4597             [ 3] 	eor df_rnd
f38a : 4c63f7           [ 3] 	jmp df_ost_pushIntA
                             	; else set the seed to that number and done
f38d :                       df_rt_rnd_set
f38d : 8697             [ 3] 	stx df_rnd
f38f : 8598             [ 3] 	sta df_rnd+1
f391 : 4c5ff7           [ 3] 	jmp df_ost_pushInt
                             
                             
                             ;* Return memory footprint as follows:
                             ;* 0	Return free memory (start of vvt - end of he
                             ;* 1	Return program size (end of prg - start of p
                             ;* 2	Return size of vars (end of vnt - start of v
f394 :                       df_rt_mem
                             ;	inc df_exeoff
f394 : 2018e2           [ 6] 	jsr df_rt_getnval
                             	; only low byte is used
f397 : e001             [ 2] 	cpx #1
f399 : f017             [ 3] 	beq df_rt_mem_prg
f39b : e002             [ 2] 	cpx #2
f39d : f026             [ 3] 	beq df_rt_mem_var
                             	; default is free memory
f39f :                       df_rt_mem_free
                             	_cpyZPWord df_vvtstrt,df_tmpptra
                             
                             	_cpyZPWord df_starend,df_tmpptrb
                             
f3af : 4cd5f3           [ 3] 	jmp df_rt_mem_calc
f3b2 :                       df_rt_mem_prg
                             	_cpyZPWord df_prgend,df_tmpptra
                             
                             	_cpyZPWord df_prgstrt,df_tmpptrb
                             
AS65 Assembler for R6502 [1.42].                                     Page  254
-------------------------------- bank\bank0.s --------------------------------

f3c2 : 4cd5f3           [ 3] 	jmp df_rt_mem_calc
f3c5 :                       df_rt_mem_var
                             	_cpyZPWord df_vvtstrt,df_tmpptra
                             
                             	_cpyZPWord df_vntstrt,df_tmpptrb
                             
f3d5 :                       df_rt_mem_calc
                             	; tmpa-tmpb result in X,A
f3d5 : 38               [ 2] 	sec
f3d6 : a5a1             [ 3] 	lda df_tmpptra
f3d8 : e5a3             [ 3] 	sbc df_tmpptrb
f3da : aa               [ 2] 	tax
f3db : a5a2             [ 3] 	lda df_tmpptra+1
f3dd : e5a4             [ 3] 	sbc df_tmpptrb+1
f3df : 4c5ff7           [ 3] 	jmp df_ost_pushInt
                             
                             ;* a=stick()
                             ;* returns bit condition of joystick positions
                             ;* no actual joystick support so this is
                             ;* Check for fire | down | up | right | left
                             ;*        bit  4     3      2     1       0
f3e2 :                       df_rt_stick
                             ;	inc df_exeoff
f3e2 : 20cac8           [ 6] 	jsr kb_stick				; Get pos in to A
f3e5 : 4c63f7           [ 3] 	jmp df_ost_pushIntA
                             
                             ; k=get(sync) sync>=1 means sync
f3e8 :                       df_rt_get
                             ;	inc df_exeoff
f3e8 : 2018e2           [ 6] 	jsr df_rt_getnval
                             	; only low byte is used, check for sync or async
                             	; c=0 if x<1 else x>=1 makes c=1
f3eb : e001             [ 2] 	cpx #1
f3ed :                       df_rt_get_sync
f3ed : 08               [ 3] 	php
f3ee : 2027c4           [ 6] 	jsr io_get_ch				; Return in A, C=0 is good
f3f1 : 9005             [ 3] 	bcc df_rt_get_pushp			; Push A (and do plp)
f3f3 : 28               [ 4] 	plp
f3f4 : b0f7             [ 3] 	bcs df_rt_get_sync			; If sync then check again
f3f6 : 9001             [ 3] 	bcc df_rt_get_push			; Else push zero (no plp)
f3f8 :                       df_rt_get_pushp
f3f8 : 28               [ 4] 	plp
f3f9 :                       df_rt_get_push
f3f9 : 4c63f7           [ 3] 	jmp df_ost_pushIntA
                             
                             ; s = scrn(x,y)
f3fc :                       df_rt_scrn
                             ;	inc df_exeoff
f3fc : 20e2e4           [ 6] 	jsr df_rt_parm_2ints
f3ff : a4a1             [ 3] 	ldy df_tmpptra			; Y is the x coord!
f401 : a6a3             [ 3] 	ldx df_tmpptrb			; X is the y coord!
f403 : 20a6cf           [ 6] 	jsr gr_get
f406 : 4c63f7           [ 3] 	jmp df_ost_pushIntA
                             
                             ; p = pixel(x,y)
f409 :                       df_rt_pixel
                             ;	inc df_exeoff
f409 : 20e2e4           [ 6] 	jsr df_rt_parm_2ints
f40c : a6a1             [ 3] 	ldx df_tmpptra
f40e : a4a3             [ 3] 	ldy df_tmpptrb
f410 : 200cd2           [ 6] 	jsr gr_pixel
f413 : 4c63f7           [ 3] 	jmp df_ost_pushIntA
AS65 Assembler for R6502 [1.42].                                     Page  255
-------------------------------- bank\bank0.s --------------------------------

                             
                             
                             ; e=elapsed(var)
f416 :                       df_rt_elapsed
                             	; now get lvar X,A from current statement
f416 : 205fe6           [ 6] 	jsr df_rt_getlvar
f419 : e688             [ 5] 	inc df_exeoff
                             	; save lvar in tmpb, vvt ptr in tmpa
f41b : 86a3             [ 3] 	stx df_tmpptrb
f41d : 85a4             [ 3] 	sta df_tmpptrb+1
                             	; subtract vdp counter from value
                             	; turn off interrupts while reading vdp lo,hi
f41f : a000             [ 2] 	ldy #0	; This is in readiness to read high byte 
f421 : 38               [ 2] 	sec
                             	; disable interrupts to access vdp counter
f422 : 78               [ 2] 	sei
f423 : a508             [ 3] 	lda vdp_cnt
f425 : f1a3             [ 5] 	sbc (df_tmpptrb),y
f427 : aa               [ 2] 	tax
f428 : a509             [ 3] 	lda vdp_cnt+1
                             	; restore interrupts asap
f42a : 58               [ 2] 	cli
f42b : c8               [ 2] 	iny
f42c : f1a3             [ 5] 	sbc (df_tmpptrb),y
f42e : 4c5ff7           [ 3] 	jmp df_ost_pushInt
                             
f431 :                       df_rt_call
                             ;	inc df_exeoff
f431 : 2004e5           [ 6] 	jsr df_rt_parm_4ints
f434 : a5a3             [ 3] 	lda df_tmpptrb				; load A
f436 : a6a5             [ 3] 	ldx	df_tmpptrc				; load X
f438 : a4a7             [ 3] 	ldy df_tmpptrd				; load Y
f43a : 2040f4           [ 6] 	jsr df_rt_calljsr
f43d :                       df_rt_push_int1
f43d : 4c5ff7           [ 3] 	jmp df_ost_pushInt			; A,X pair is return value
f440 :                       df_rt_calljsr
f440 : 6ca100           [ 6] 	jmp (df_tmpptra)			; tmpptra is address, return 
                             
f443 :                       df_rt_sgn
                             ;	inc df_exeoff
f443 : 2018e2           [ 6] 	jsr df_rt_getnval
f446 : 86a1             [ 3] 	stx df_tmpptra
f448 : 05a1             [ 3] 	ora df_tmpptra
f44a : f00f             [ 3] 	beq df_rt_sgn_z
f44c : 2980             [ 2] 	and #0x80
f44e : d006             [ 3] 	bne df_rt_sgn_n
f450 : a201             [ 2] 	ldx #1
f452 : a900             [ 2] 	lda #0
f454 : f0e7             [ 3] 	beq df_rt_push_int1			; Always
f456 :                       df_rt_sgn_n
f456 : a2ff             [ 2] 	ldx #0xff
f458 : 8a               [ 2] 	txa
f459 : d0e2             [ 3] 	bne df_rt_push_int1			; Always
f45b :                       df_rt_sgn_z
f45b : a200             [ 2] 	ldx #0
f45d : 8a               [ 2] 	txa
f45e : f0dd             [ 3] 	beq df_rt_push_int1			; Always
                             
                             ; addr(X)
f460 :                       df_rt_addr
                             	; get lvar X,A from current statement
f460 : 205fe6           [ 6] 	jsr df_rt_getlvar
AS65 Assembler for R6502 [1.42].                                     Page  256
-------------------------------- bank\bank0.s --------------------------------

f463 : e688             [ 5] 	inc df_exeoff
f465 : 4c5ff7           [ 3] 	jmp df_ost_pushInt
                             
                             ; string length calculator
                             ; X,A = source
                             ; A = length not including zero
f468 :                       df_rt_strlen_common
f468 : 86a1             [ 3] 	stx df_tmpptra
f46a : 85a2             [ 3] 	sta df_tmpptra+1
f46c : a0ff             [ 2] 	ldy #0xff
f46e :                       df_rt_strlen_count
f46e : c8               [ 2] 	iny
f46f : b1a1             [ 5] 	lda (df_tmpptra),y
f471 : d0fb             [ 3] 	bne df_rt_strlen_count
f473 : 98               [ 2] 	tya
f474 : 60               [ 6] 	rts
                             
                             
                             ; common routine to extract a string
                             ; tmpa = source string
                             ; tmpb = dest string
                             ; tmpc = start pos
                             ; tmpd = endpos
f475 :                       df_rt_str_extract
                             	; source string
f475 : 2093f7           [ 6] 	jsr df_ost_popStr
f478 : 86a1             [ 3] 	stx df_tmpptra
f47a : 85a2             [ 3] 	sta df_tmpptra+1
                             	; destination is string accumulator
f47c : a57a             [ 3] 	lda df_sevalptr
f47e : 85a3             [ 3] 	sta df_tmpptrb
f480 : a57b             [ 3] 	lda df_sevalptr+1
f482 : 85a4             [ 3] 	sta df_tmpptrb+1
                             	; start pos
f484 : a4a5             [ 3] 	ldy df_tmpptrc
f486 : a200             [ 2] 	ldx #0
f488 :                       df_rt_str_cpy_ch
f488 : c4a7             [ 3] 	cpy df_tmpptrd
f48a : f011             [ 3] 	beq df_str_src_end
f48c : b1a1             [ 5] 	lda (df_tmpptra),y
f48e : f00d             [ 3] 	beq df_str_src_end
f490 : 81a3             [ 6] 	sta (df_tmpptrb,x)
                             	_incZPWord df_tmpptrb
                             
f498 : c8               [ 2] 	iny
f499 : d0ed             [ 3] 	bne df_rt_str_cpy_ch
                             	SWBRK DFERR_STRLONG
                             
f49d :                       df_str_src_end
f49d : a900             [ 2] 	lda #0
f49f : 81a3             [ 6] 	sta (df_tmpptrb,x)
f4a1 : a67a             [ 3] 	ldx df_sevalptr
f4a3 : a57b             [ 3] 	lda df_sevalptr+1
f4a5 : 4c6af7           [ 3] 	jmp df_ost_pushStr
                             
                             ; $c = chr(x)
f4a8 :                       df_rt_chr
                             ;	inc df_exeoff
                             	; get char in X
f4a8 : 2018e2           [ 6] 	jsr df_rt_getnval
f4ab : a000             [ 2] 	ldy #0
                             	; transfer lo byte to A
AS65 Assembler for R6502 [1.42].                                     Page  257
-------------------------------- bank\bank0.s --------------------------------

f4ad : 8a               [ 2] 	txa
f4ae : 917a             [ 5] 	sta (df_sevalptr),y
f4b0 : c8               [ 2] 	iny
                             	; zero terminator
f4b1 : a900             [ 2] 	lda #0
f4b3 : 917a             [ 5] 	sta (df_sevalptr),y
                             	; point to seval scratch area
f4b5 : a67a             [ 3] 	ldx df_sevalptr
f4b7 : a57b             [ 3] 	lda df_sevalptr+1
f4b9 : 4c6af7           [ 3] 	jmp df_ost_pushStr
                             
                             ; $c = hex(x)
f4bc :                       df_rt_hex
                             ;	inc df_exeoff
                             	; create hex digits
f4bc : 2018e2           [ 6] 	jsr df_rt_getnval
f4bf : 85a1             [ 3] 	sta df_tmpptra	; Save the high byte
f4c1 : 8a               [ 2] 	txa				; Convert low byte first
f4c2 : 2085c1           [ 6] 	jsr str_a_to_x	; Hex digits in A,X
f4c5 : 85a3             [ 3] 	sta df_tmpptrb
f4c7 : 8a               [ 2] 	txa				; Push low digit of low byte from X
f4c8 : 48               [ 3] 	pha
f4c9 : a5a3             [ 3] 	lda df_tmpptrb	; Get A back from temp
f4cb : 48               [ 3] 	pha				; Push high digit of low byte
f4cc : a5a1             [ 3] 	lda df_tmpptra	; Get the high byte
f4ce : 2085c1           [ 6] 	jsr str_a_to_x	; Hex digits in A,X
                             	; create string
f4d1 : a000             [ 2] 	ldy #0			; Index in to string temp area
                             	; hi/hi
f4d3 : 917a             [ 5] 	sta (df_sevalptr),y
f4d5 : c8               [ 2] 	iny
                             	; hi/lo
f4d6 : 8a               [ 2] 	txa
f4d7 : 917a             [ 5] 	sta (df_sevalptr),y
f4d9 : c8               [ 2] 	iny
                             	; lo/hi
f4da : 68               [ 4] 	pla
f4db : 917a             [ 5] 	sta (df_sevalptr),y
f4dd : c8               [ 2] 	iny
                             	; lo/lo
f4de : 68               [ 4] 	pla
f4df : 917a             [ 5] 	sta (df_sevalptr),y
f4e1 : c8               [ 2] 	iny
                             	; zero terminator
f4e2 : a900             [ 2] 	lda #0
f4e4 : 917a             [ 5] 	sta (df_sevalptr),y
                             	; point to seval scratch area
f4e6 : a67a             [ 3] 	ldx df_sevalptr
f4e8 : a57b             [ 3] 	lda df_sevalptr+1
f4ea : 4c6af7           [ 3] 	jmp df_ost_pushStr
                             
                             ; $c = dec(x)
f4ed :                       df_rt_dec
                             ;	inc df_exeoff
                             	; create dec digits
f4ed : 2018e2           [ 6] 	jsr df_rt_getnval
f4f0 : 209bc3           [ 6] 	jsr int_to_str
                             	; point to num_buf scratch area
f4f3 : a24d             [ 2] 	ldx #lo(num_buf)
f4f5 : a900             [ 2] 	lda #hi(num_buf)
f4f7 : 4c6af7           [ 3] 	jmp df_ost_pushStr
                             
AS65 Assembler for R6502 [1.42].                                     Page  258
-------------------------------- bank\bank0.s --------------------------------

                             
                             ; $l = left($s, x)
f4fa :                       df_rt_left
                             ;	inc df_exeoff
                             
                             	; first get the string to act on
                             	; point to string accumulator
f4fa : 20d8e2           [ 6] 	jsr df_rt_seval
                             	; now get the num of chars
f4fd : e688             [ 5] 	inc df_exeoff
f4ff : 2018e2           [ 6] 	jsr df_rt_getnval
                             	; number of chars to extract
f502 : 86a7             [ 3] 	stx df_tmpptrd
                             	; start position
f504 : a000             [ 2] 	ldy #0
f506 : 84a5             [ 3] 	sty df_tmpptrc
f508 : 4c75f4           [ 3] 	jmp df_rt_str_extract
                             
                             ; $r = right($s, x)
f50b :                       df_rt_right
                             ;	inc df_exeoff
                             	; first get the string to act on
                             	; point to string accumulator
f50b : 20d8e2           [ 6] 	jsr df_rt_seval
                             	; now get the num of chars from the right
f50e : e688             [ 5] 	inc df_exeoff
f510 : 2018e2           [ 6] 	jsr df_rt_getnval
                             	; number of chars to extract from the right
f513 : 86a5             [ 3] 	stx df_tmpptrc
                             	; end pos = len
f515 : a67a             [ 3] 	ldx df_sevalptr
f517 : a57b             [ 3] 	lda df_sevalptr+1
f519 : 2068f4           [ 6] 	jsr df_rt_strlen_common
f51c : 85a7             [ 3] 	sta df_tmpptrd
                             	; subtract num chars to extract to get start pos
f51e : 38               [ 2] 	sec
f51f : e5a5             [ 3] 	sbc df_tmpptrc
f521 : 85a5             [ 3] 	sta df_tmpptrc
f523 : 4c75f4           [ 3] 	jmp df_rt_str_extract
                             
                             ; $m = mid($s, x, y)
f526 :                       df_rt_mid
                             ;	inc df_exeoff
                             	; first get the string to act on
                             	; point to string accumulator
f526 : 20d8e2           [ 6] 	jsr df_rt_seval
                             	; now get start of string segment
f529 : e688             [ 5] 	inc df_exeoff
f52b : 201ee2           [ 6] 	jsr df_rt_neval
                             	; number of chars to extract
f52e : e688             [ 5] 	inc df_exeoff
f530 : 2018e2           [ 6] 	jsr df_rt_getnval
f533 : 86a7             [ 3] 	stx df_tmpptrd
                             	; start position
f535 : 208ff7           [ 6] 	jsr df_ost_popInt
f538 : ca               [ 2] 	dex					; zero offset rather than 1
f539 : 86a5             [ 3] 	stx df_tmpptrc
                             	; update end pos by adding start pos
f53b : 8a               [ 2] 	txa
f53c : 18               [ 2] 	clc
f53d : 65a7             [ 3] 	adc df_tmpptrd
f53f : 85a7             [ 3] 	sta df_tmpptrd
AS65 Assembler for R6502 [1.42].                                     Page  259
-------------------------------- bank\bank0.s --------------------------------

f541 : 4c75f4           [ 3] 	jmp df_rt_str_extract
                             
                             ; %l = len($s)
f544 :                       df_rt_len
                             ;	inc df_exeoff
                             	; evaluate the string in the string accumulator
f544 : 20d8e2           [ 6] 	jsr df_rt_seval
f547 : 2093f7           [ 6] 	jsr df_ost_popStr
                             	; now calculate the length of this string
f54a : 2068f4           [ 6] 	jsr df_rt_strlen_common
f54d : 4c63f7           [ 3] 	jmp df_ost_pushIntA
                             
                             ; %l = asc($s)
f550 :                       df_rt_asc
                             ;	inc df_exeoff
                             	; Evaluate string in the string accumulator
f550 : 20d8e2           [ 6] 	jsr df_rt_seval
f553 : 2093f7           [ 6] 	jsr df_ost_popStr
                             	; Store point in ZP
f556 : 86a1             [ 3] 	stx df_tmpptra
f558 : 85a2             [ 3] 	sta df_tmpptra+1
                             	; Find the character at beginning
f55a : a200             [ 2] 	ldx #0
f55c : a1a1             [ 6] 	lda (df_tmpptra,x)
f55e : 4c63f7           [ 3] 	jmp df_ost_pushIntA
                             
                             ; %l = val($s)
f561 :                       df_rt_val
                             ;	inc df_exeoff
                             	; evaluate the string
f561 : 20d8e2           [ 6] 	jsr df_rt_seval
f564 : 2093f7           [ 6] 	jsr df_ost_popStr
f567 : a000             [ 2] 	ldy #0				; any numeric format
f569 : 20cec1           [ 6] 	jsr con_n_to_a		; result in num_a
f56c : b007             [ 3] 	bcs df_rt_val_err
f56e : a63d             [ 3] 	ldx num_a
f570 : a53e             [ 3] 	lda num_a+1
                             	; Save as an int
f572 : 4c5ff7           [ 3] 	jmp df_ost_pushInt
f575 :                       df_rt_val_err
                             	SWBRK DFERR_TYPEMISM
                             
                             
                             ; stop execution
f577 :                       df_rt_abort
                             	SWBRK DFERR_ABORT
                             
                             
f579 :                       df_rt_sprchar
f579 : 20e2e4           [ 6] 	jsr df_rt_parm_2ints
f57c : a5a1             [ 3] 	lda df_tmpptra
f57e : a6a3             [ 3] 	ldx df_tmpptrb
f580 : 4c7fd4           [ 3] 	jmp gr_spr_char
                             
f583 :                       df_rt_sprpos
f583 : 20ede4           [ 6] 	jsr df_rt_parm_3ints
f586 : a5a1             [ 3] 	lda df_tmpptra
f588 : a6a3             [ 3] 	ldx df_tmpptrb
f58a : a4a5             [ 3] 	ldy df_tmpptrc
f58c : 4c8fd4           [ 3] 	jmp gr_spr_pos
                             
f58f :                       df_rt_sprupd
AS65 Assembler for R6502 [1.42].                                     Page  260
-------------------------------- bank\bank0.s --------------------------------

f58f : 201ad4           [ 6] 	jsr gr_spr_erase
f592 : 202cd4           [ 6] 	jsr gr_spr_new
f595 : 4c5ed4           [ 3] 	jmp gr_spr_draw
                             
f598 :                       df_rt_sprinit
f598 : 4c0cd4           [ 3] 	jmp gr_spr_init
                             
f59b :                       df_rt_sprmulti
f59b : 20e2e4           [ 6] 	jsr df_rt_parm_2ints
f59e : 4c9cd4           [ 3] 	jmp gr_spr_multi_pos
                             
f5a1 :                       df_rt_sprhit
                             ;	inc df_exeoff
f5a1 : 2018e2           [ 6] 	jsr df_rt_getnval
f5a4 : 8a               [ 2] 	txa
f5a5 : 2085d4           [ 6] 	jsr gr_spr_hit
f5a8 : b003             [ 3] 	bcs df_rt_sprhit_inactive
                             	; Active sprite hit = background
f5aa : 4c63f7           [ 3] 	jmp df_ost_pushIntA
f5ad :                       df_rt_sprhit_inactive
                             	; Inactive sprite hit = -1
f5ad : a2ff             [ 2] 	ldx #0xff
f5af : 8a               [ 2] 	txa
f5b0 : 4c5ff7           [ 3] 	jmp df_ost_pushInt
                             
                             
f5b3 :                       mod_sz_rtsubs_e
                             
                             
                             	include "dflat/proc.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  PROC.S
                             ;*  dflat module to handle procedures:
                             ;*  - executing a procedure
                             ;*  - find a proc, pass local and non-local param
                             ;*  - return from a proc, unload locals
                             ;*  - save the definition of a proc in the VNT an
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code  
                             
f5b3 :                       mod_sz_proc_s
                             
f5b3 :                       df_rt_proc_parmerr
f5b3 :                       df_rt_deferr
                             	SWBRK DFERR_PROCPARM
                             
                             
                             
                             ; call procedure
f5b5 :                       df_rt_proc
                             	; move past escape token
f5b5 : a488             [ 3] 	ldy df_exeoff
AS65 Assembler for R6502 [1.42].                                     Page  261
-------------------------------- bank\bank0.s --------------------------------

f5b7 : c8               [ 2] 	iny
                             	; Get VVT address X,A and procptr
f5b8 : b186             [ 5] 	lda (df_currlin),y
f5ba : aa               [ 2] 	tax
f5bb : c8               [ 2] 	iny
f5bc : b186             [ 5] 	lda (df_currlin),y
f5be : c8               [ 2] 	iny
f5bf : 8488             [ 3] 	sty df_exeoff
f5c1 : 868e             [ 3] 	stx df_procptr
f5c3 : 858f             [ 3] 	sta df_procptr+1
                             	
                             	; is index 0 (held in dim1)
                             	; then need to find the procedure
f5c5 : a003             [ 2] 	ldy #DFVVT_DIM1
f5c7 : b18e             [ 5] 	lda (df_procptr),y
f5c9 : d014             [ 3] 	bne df_rt_proc_addr
                             	; find proc
f5cb : 20fde5           [ 6] 	jsr df_rt_findproc
                             	; save y (line index)
f5ce : 8438             [ 3] 	sty tmp_d
                             	; now go and update the proc vvt address
f5d0 : a002             [ 2] 	ldy #DFVVT_HI
f5d2 : 918e             [ 5] 	sta (df_procptr),y
f5d4 : a001             [ 2] 	ldy #DFVVT_LO
f5d6 : 8a               [ 2] 	txa
f5d7 : 918e             [ 5] 	sta (df_procptr),y
f5d9 : a003             [ 2] 	ldy #DFVVT_DIM1
                             	; get back line index in to A
f5db : a538             [ 3] 	lda tmp_d
f5dd : 918e             [ 5] 	sta (df_procptr),y
f5df :                       df_rt_proc_addr
                             	; move past first open bracket
f5df : e688             [ 5] 	inc df_exeoff
                             	
                             	; get parm count
f5e1 : a004             [ 2] 	ldy #DFVVT_DIM2
f5e3 : b18e             [ 5] 	lda (df_procptr),y	
f5e5 : f018             [ 3] 	beq df_rt_proc_parm_none
                             	; push the right number of parms on
f5e7 : 48               [ 3] 	pha
                             
f5e8 : c688             [ 5] 	dec df_exeoff		; Pre-adjust
f5ea :                       df_rt_proc_push_parm
                             	; move past comma or opening bracket
f5ea : e688             [ 5] 	inc df_exeoff
                             	; if at end then error!
f5ec : a488             [ 3] 	ldy df_exeoff
f5ee : b186             [ 5] 	lda (df_currlin),y
f5f0 : c929             [ 2] 	cmp #')'
f5f2 : f0bf             [ 3] 	beq df_rt_proc_parmerr
                             	; else try and evaluate
f5f4 : 201ee2           [ 6] 	jsr df_rt_neval
                             	; get parm count off stack
f5f7 : 68               [ 4] 	pla
                             	; decrement
f5f8 : 38               [ 2] 	sec
f5f9 : e901             [ 2] 	sbc #1
                             	; and put back on stack
f5fb : 48               [ 3] 	pha
                             	; go back and do all required parms
f5fc : d0ec             [ 3] 	bne df_rt_proc_push_parm
                             	; remove parm counter from stack
AS65 Assembler for R6502 [1.42].                                     Page  262
-------------------------------- bank\bank0.s --------------------------------

f5fe :                       df_rt_proc_parm_done
f5fe : 68               [ 4] 	pla
f5ff :                       df_rt_proc_parm_none
                             	; should be at close bracket
f5ff : a488             [ 3] 	ldy df_exeoff
f601 : b186             [ 5] 	lda (df_currlin),y
f603 : c929             [ 2] 	cmp #')'
f605 : d0ac             [ 4] 	bne df_rt_proc_parmerr
                             	; should be no more parms
                             	; ok, finally we have all parms on rt stack
                             	; now execute the procedure
                             	; get back the proc address
f607 : a68e             [ 3] 	ldx df_procptr
f609 : a58f             [ 3] 	lda df_procptr+1
                             ;	bne df_rt_exec_proc		; ALWAYS as procptr+1 !=0
                             	
                             ; executing a procedure in VVT slot A,X
f60b :                       df_rt_exec_proc
                             	; save slot address
f60b : 86a1             [ 3] 	stx df_tmpptra
f60d : 85a2             [ 3] 	sta df_tmpptra+1
                             	
                             	; need to save all important vars
f60f : a586             [ 3] 	lda df_currlin
f611 : 48               [ 3] 	pha
f612 : a587             [ 3] 	lda df_currlin+1
f614 : 48               [ 3] 	pha
f615 : a588             [ 3] 	lda df_exeoff
f617 : 48               [ 3] 	pha
f618 : a57f             [ 3] 	lda df_nxtstidx
f61a : 48               [ 3] 	pha
f61b : a580             [ 3] 	lda df_curstidx
f61d : 48               [ 3] 	pha
f61e : a57e             [ 3] 	lda df_eolidx
f620 : 48               [ 3] 	pha
f621 : a593             [ 3] 	lda df_ifnest
f623 : 48               [ 3] 	pha
                             
                             	; now initialise the data
f624 : a001             [ 2] 	ldy #DFVVT_LO
f626 : b1a1             [ 5] 	lda (df_tmpptra),y
f628 : 8586             [ 3] 	sta df_currlin
f62a : c8               [ 2] 	iny
f62b : b1a1             [ 5] 	lda (df_tmpptra),y
f62d : 8587             [ 3] 	sta df_currlin+1
f62f : c8               [ 2] 	iny
f630 : b1a1             [ 5] 	lda (df_tmpptra),y
f632 : 8588             [ 3] 	sta df_exeoff
f634 : 8580             [ 3] 	sta df_curstidx
f636 : a000             [ 2] 	ldy #0		; hmm XXXXX might need to be tay to get 
f638 : b186             [ 5] 	lda (df_currlin),y
f63a : 857f             [ 3] 	sta df_nxtstidx
                             	; now execute statements
f63c : 2033e5           [ 6] 	jsr df_rt_exec_stat
                             ;	bcs df_rt_exec_proc_err
                             	; now restore the position
f63f : 68               [ 4] 	pla
f640 : 8593             [ 3] 	sta df_ifnest
f642 : 68               [ 4] 	pla
f643 : 857e             [ 3] 	sta df_eolidx
f645 : 68               [ 4] 	pla
f646 : 8580             [ 3] 	sta df_curstidx
AS65 Assembler for R6502 [1.42].                                     Page  263
-------------------------------- bank\bank0.s --------------------------------

f648 : 68               [ 4] 	pla
f649 : 857f             [ 3] 	sta df_nxtstidx
f64b : 68               [ 4] 	pla
f64c : 8588             [ 3] 	sta df_exeoff
f64e : 68               [ 4] 	pla
f64f : 8587             [ 3] 	sta df_currlin+1
f651 : 68               [ 4] 	pla
f652 : 8586             [ 3] 	sta df_currlin
                             	; should be all restored, so return
f654 : 60               [ 6] 	rts
                             
                             
f655 :                       df_rt_def
                             	; line offset pointing at DFTK_PROC
                             	; skip over PROC address and open bracket
f655 : a688             [ 3] 	ldx df_exeoff
f657 : e8               [ 2] 	inx
f658 : e8               [ 2] 	inx
f659 : e8               [ 2] 	inx
f65a : 8688             [ 3] 	stx df_exeoff
                             	; parms on stack in reverse order to parm list
                             	; so get each parm and type and save to scratch
f65c : a201             [ 2] 	ldx #1									; index in to scratch
f65e : 868c             [ 3] 	stx df_procargs							; Proc args is the #args-1
f660 : a488             [ 3] 	ldy df_exeoff
f662 :                       df_rt_def_find_var
f662 : c8               [ 2] 	iny
f663 : b186             [ 5] 	lda (df_currlin),y
                             	; check if end of parm list
f665 : c929             [ 2] 	cmp #')'
f667 : f021             [ 3] 	beq df_rt_def_parm_done
                             	; else check if found a variable escape token (<
f669 : c911             [ 2] 	cmp #DFTK_VAR
f66b : f007             [ 3] 	beq df_rt_def_got_var
                             	; else check if non-local specifier
f66d : c926             [ 2] 	cmp #DFTK_VARPARM						; This is a regular ASCII
f66f : d0f1             [ 3] 	bne df_rt_def_find_var
f671 :                       df_rt_def_got_varparm
                             	; set high bit
f671 : 0980             [ 2] 	ora #0x80
                             	; advance over non-local specifier
f673 : c8               [ 2] 	iny
f674 :                       df_rt_def_got_var
f674 : 4980             [ 2] 	eor #0x80			; If was set by '&' qualifier then w
f676 : 9d1f06           [ 5] 	sta scratch,x		; Save parm type (by value or ref
                             	; get address and save in scratch
f679 : c8               [ 2] 	iny
f67a : b186             [ 5] 	lda (df_currlin),y
f67c : 9d3f06           [ 5] 	sta scratch+32,x	; Hope 32 params is enough! :-)
f67f : c8               [ 2] 	iny
f680 : b186             [ 5] 	lda (df_currlin),y
f682 : 9d5f06           [ 5] 	sta scratch+64,x
f685 : e8               [ 2] 	inx
f686 : e68c             [ 5] 	inc df_procargs
f688 : d0d8             [ 3] 	bne df_rt_def_find_var  ; always - relies not ze
f68a :                       df_rt_def_parm_done
                             	; save index that we got to
f68a : 8488             [ 3] 	sty df_exeoff
                             	; save def param list position in temp
f68c : 868b             [ 3] 	stx df_procmode
                             	; all var indices on the operator stack
                             	; now load up variables with parameters
AS65 Assembler for R6502 [1.42].                                     Page  264
-------------------------------- bank\bank0.s --------------------------------

                             	; initially assume no locals
f68e : a900             [ 2] 	lda #0
f690 : 858d             [ 3] 	sta df_procloc
f692 :                       df_rt_def_load_var
f692 : c68c             [ 5] 	dec df_procargs
f694 : f038             [ 3] 	beq df_rt_def_load_var_done
                             	; get var address
f696 : c68b             [ 5] 	dec df_procmode
f698 : a68b             [ 3] 	ldx df_procmode
f69a : bd3f06           [ 4] 	lda scratch+32,x
f69d : 85a1             [ 3] 	sta df_tmpptra
f69f : bd5f06           [ 4] 	lda scratch+64,x
f6a2 : 85a2             [ 3] 	sta df_tmpptra+1
                             	
f6a4 : bd1f06           [ 4] 	lda scratch,x
                             	; if MSB is clear then this is not a local varia
                             	; so just go an initialise with stacking
f6a7 : 1009             [ 3] 	bpl df_rt_def_initialise_parm
                             	; else call the local handling code to 
                             	; push the var address on to the runtime stack
f6a9 : a6a1             [ 3] 	ldx df_tmpptra
f6ab : a5a2             [ 3] 	lda df_tmpptra+1
f6ad : 2002f7           [ 6] 	jsr df_rt_proc_local
                             	; increment number of locals
f6b0 : e68d             [ 5] 	inc df_procloc
f6b2 :                       df_rt_def_initialise_parm
                             	; load type
f6b2 : a000             [ 2] 	ldy #DFVVT_TYPE
f6b4 : b1a1             [ 5] 	lda (df_tmpptra),y
                             	; if array or string type then pop pointer from 
f6b6 : 2984             [ 2] 	and #DFVVT_STR|DFVVT_ARRY
f6b8 : f006             [ 3] 	beq df_rt_def_load_var_int
f6ba : 2097f7           [ 6] 	jsr df_ost_popPtr
f6bd : 4cc3f6           [ 3] 	jmp df_rt_def_load_var_int_skip
f6c0 :                       df_rt_def_load_var_int
                             	; must be int pop it from operator stack
f6c0 : 208ff7           [ 6] 	jsr df_ost_popInt
f6c3 :                       df_rt_def_load_var_int_skip
                             	; update the variable
f6c3 : a002             [ 2] 	ldy #DFVVT_HI
f6c5 : 91a1             [ 5] 	sta (df_tmpptra),y
f6c7 : 88               [ 2] 	dey
f6c8 : 8a               [ 2] 	txa
f6c9 : 91a1             [ 5] 	sta (df_tmpptra),y
                             	
f6cb : 4c92f6           [ 3] 	jmp df_rt_def_load_var
f6ce :                       df_rt_def_load_var_done
                             	; save the number of local parameters found so t
                             	; be unloaded when the proc ends
f6ce : a58d             [ 3] 	lda df_procloc
f6d0 : 2016f7           [ 6] 	jsr df_rst_pushByte
                             	; continue with next statement
f6d3 : 18               [ 2] 	clc
f6d4 : 60               [ 6] 	rts
                             
                             	
                             ; return a value
f6d5 :                       df_rt_return
                             	; evaluate the return and put on the parameter s
                             	; then process this like an end of procedure
f6d5 : 201ee2           [ 6] 	jsr df_rt_neval
                             ; end def for a proc
AS65 Assembler for R6502 [1.42].                                     Page  265
-------------------------------- bank\bank0.s --------------------------------

f6d8 :                       df_rt_enddef
                             	; unload any locals
                             ;	jsr df_rt_proc_unlocal
                             	; nothing to do - main loop will terminate
                             ;	clc
                             ;	rts
                             ; enddef falls through to the unlocal code	
                             	
                             ; unload any local variables from runtime stack
                             ;df_rt_proc_unlocal
f6d8 : 201ff7           [ 6] 	jsr df_rst_popByte
f6db : aa               [ 2] 	tax
f6dc : f020             [ 3] 	beq df_rt_proc_unload_done
f6de :                       df_rt_proc_unloadvar
f6de : 8a               [ 2] 	txa
f6df : 48               [ 3] 	pha
                             	; var value is popped first then index
                             	; get a word and put in tmpb
f6e0 : 203cf7           [ 6] 	jsr df_rst_popWord
f6e3 : 86a3             [ 3] 	stx df_tmpptrb
f6e5 : 85a4             [ 3] 	sta df_tmpptrb+1
                             	; get the var address
f6e7 : 203cf7           [ 6] 	jsr df_rst_popWord
f6ea : 86a1             [ 3] 	stx df_tmpptra
f6ec : 85a2             [ 3] 	sta df_tmpptra+1
                             	; store lo byte first
f6ee : a001             [ 2] 	ldy #DFVVT_LO
f6f0 : a5a3             [ 3] 	lda df_tmpptrb
f6f2 : 91a1             [ 5] 	sta (df_tmpptra),y
                             	; then hi
f6f4 : c8               [ 2] 	iny
f6f5 : a5a4             [ 3] 	lda df_tmpptrb+1
f6f7 : 91a1             [ 5] 	sta (df_tmpptra),y
                             	; restore counter
f6f9 : 68               [ 4] 	pla
f6fa : aa               [ 2] 	tax
f6fb : ca               [ 2] 	dex
f6fc : d0e0             [ 3] 	bne df_rt_proc_unloadvar
f6fe :                       df_rt_proc_unload_done
f6fe : 68               [ 4] 	pla				; Pull old return address from stack
f6ff : 68               [ 4] 	pla
f700 : 18               [ 2] 	clc
f701 : 60               [ 6] 	rts
                             	
                             ; push a local variable to the runtime stack
                             ; X,A = var slot
f702 :                       df_rt_proc_local
                             	; save address
f702 : 86a1             [ 3] 	stx df_tmpptra
f704 : 85a2             [ 3] 	sta df_tmpptra+1
                             	; push var slot on rt stack
f706 : 202ef7           [ 6] 	jsr df_rst_pushWord
f709 :                       df_rt_proc_local_load	
                             	; load x,a with var value lo,hi
f709 : a001             [ 2] 	ldy #DFVVT_LO
f70b : b1a1             [ 5] 	lda (df_tmpptra),y
f70d : aa               [ 2] 	tax
f70e : c8               [ 2] 	iny
f70f : b1a1             [ 5] 	lda (df_tmpptra),y
                             	; push word on to rt stack
f711 : 202ef7           [ 6] 	jsr df_rst_pushWord
f714 : 18               [ 2] 	clc
AS65 Assembler for R6502 [1.42].                                     Page  266
-------------------------------- bank\bank0.s --------------------------------

f715 : 60               [ 6] 	rts
                             		
f716 :                       mod_sz_proc_e
                             
                             
f716 :                       mod_sz_runtime_e
                             
                             
                             
                             	include "dflat/stack.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  STACK.S
                             ;*  This module implements the dflat software sta
                             ;*  needs a few stacks:
                             ;*  - 6502 stack for expression parsing and reent
                             ;*  - dflat runtime stack for things like for/nex
                             ;*  - dflat parameter stack for passing parameter
                             ;*  The two software stacks are implemented in th
                             ;*  with the operator stack growing up from 0 and
                             ;*  runtime stack growing down from 255.  Hopeful
                             ;*  don't meet as there are no checks for this at
                             ;*  purely because I want speed over friendliness
                             ;*  I may come to regret this!
                             ;*  I have also added the only runtime memory all
                             ;*  needed by dflat here.  Humourously I have cal
                             ;*  which is taken from the C language, but it's 
                             ;*  grab some memory after end the of dflat progr
                             ;*  arrays - which of course cannot have storage 
                             ;*  tokenisation time (e.g. because I dimension a
                             ;*  a size from a variable).
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code  
                             
                             
                             ;****************************************
                             ;* Push a byte on to runtime stack
                             ;* A = byte
                             ;****************************************
f716 :                       df_rst_pushByte
f716 : a476             [ 3] 	ldy df_rtstop
f718 : 990005           [ 5] 	sta df_rtstck,y
f71b : 88               [ 2] 	dey
f71c : 8476             [ 3] 	sty df_rtstop
f71e : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Pop a byte off runtime stack
                             ;* A = byte
                             ;****************************************
f71f :                       df_rst_popByte
f71f : a476             [ 3] 	ldy df_rtstop
f721 : c8               [ 2] 	iny
AS65 Assembler for R6502 [1.42].                                     Page  267
-------------------------------- bank\bank0.s --------------------------------

f722 : b90005           [ 4] 	lda df_rtstck,y
f725 : 8476             [ 3] 	sty df_rtstop
f727 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Peek a byte off runtime stack
                             ;* A = byte
                             ;****************************************
f728 :                       df_rst_peekByte
f728 : a476             [ 3] 	ldy df_rtstop
                             	; Look at what is below top of stack
                             	; below means the next address up as
                             	; this stack grows downwards like 6502
f72a : b90105           [ 4] 	lda df_rtstck+1,y
f72d : 60               [ 6] 	rts
                             	
                             ;****************************************
                             ;* Push a word on to runtime stack
                             ;* X,A = word lo,hi
                             ;****************************************
f72e :                       df_rst_pushWord
f72e : a476             [ 3] 	ldy df_rtstop
f730 : 990005           [ 5] 	sta df_rtstck,y
f733 : 88               [ 2] 	dey
f734 : 8a               [ 2] 	txa
f735 : 990005           [ 5] 	sta df_rtstck,y
f738 : 88               [ 2] 	dey
f739 : 8476             [ 3] 	sty df_rtstop
f73b : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Pop a word off runtime stack
                             ;* X,A = word lo,hi
                             ;****************************************
f73c :                       df_rst_popWord
f73c : a476             [ 3] 	ldy df_rtstop
f73e : c8               [ 2] 	iny
f73f : be0005           [ 4] 	ldx df_rtstck,y
f742 : c8               [ 2] 	iny
f743 : b90005           [ 4] 	lda df_rtstck,y
f746 : 8476             [ 3] 	sty df_rtstop
f748 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Push a parameter on to parm stack
                             ;* X,A - int
                             ;* Y - type
                             ;****************************************
f749 :                       df_ost_pushParmX
f749 : 8438             [ 3] 	sty tmp_d		; Save Type
f74b : a477             [ 3] 	ldy df_parmtop	; Get stack index
                             	; push high byte first (A)
f74d : 990005           [ 5] 	sta df_rtstck,y
f750 : c8               [ 2] 	iny
                             	; push low byte next (X)
f751 : 8a               [ 2] 	txa
f752 : 990005           [ 5] 	sta df_rtstck,y
f755 : c8               [ 2] 	iny
f756 : a538             [ 3] 	lda tmp_d		; get Type
f758 : 990005           [ 5] 	sta df_rtstck,y
f75b : c8               [ 2] 	iny
                             	; save new top of stack
AS65 Assembler for R6502 [1.42].                                     Page  268
-------------------------------- bank\bank0.s --------------------------------

f75c : 8477             [ 3] 	sty df_parmtop
f75e : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Push an int on to parm stack
                             ;* X,A - int
                             ;****************************************
f75f :                       df_ost_pushInt
f75f : a001             [ 2] 	ldy #DFST_INT
f761 : d0e6             [ 3] 	bne df_ost_pushParmX		; ALWAYS!
                             
                             ;****************************************
                             ;* Push A on to parm stack
                             ;* X,A - int
                             ;****************************************
f763 :                       df_ost_pushIntA
f763 : a001             [ 2] 	ldy #DFST_INT
f765 : aa               [ 2] 	tax
f766 : a900             [ 2] 	lda #0
f768 : f0df             [ 3] 	beq df_ost_pushParmX		; ALWAYS!
                             
                             ;****************************************
                             ;* Push a string pointer on to parm stack
                             ;* X,A - int
                             ;****************************************
f76a :                       df_ost_pushStr
f76a : a080             [ 2] 	ldy #DFST_STR
f76c : d0db             [ 3] 	bne df_ost_pushParmX		; ALWAYS!
                             
                             ;****************************************
                             ;* Push a general pointer on to parm stack
                             ;* X,A - int
                             ;****************************************
f76e :                       df_ost_pushPtr
f76e : a0ff             [ 2] 	ldy #0xff
f770 : d0d7             [ 3] 	bne df_ost_pushParmX		; ALWAYS!
                             	
                             ;****************************************
                             ;* Pop parameter from the stack
                             ;* X,A - int
                             ;* Y - type expected
                             ;****************************************
f772 :                       df_ost_popParmX
f772 : 98               [ 2] 	tya
f773 : a477             [ 3] 	ldy df_parmtop
                             	; pull type first
f775 : 88               [ 2] 	dey
f776 : 390005           [ 4] 	and df_rtstck,y
f779 : f00c             [ 3] 	beq df_st_typemismatcherr
                             	; pull low byte first
f77b : 88               [ 2] 	dey
f77c : be0005           [ 4] 	ldx df_rtstck,y
                             	; pull high byte next
f77f : 88               [ 2] 	dey
f780 : b90005           [ 4] 	lda df_rtstck,y
                             	; save new top of stack
f783 : 8477             [ 3] 	sty df_parmtop
f785 : 18               [ 2] 	clc
f786 : 60               [ 6] 	rts
f787 :                       df_st_typemismatcherr
                             	SWBRK DFERR_TYPEMISM
                             
AS65 Assembler for R6502 [1.42].                                     Page  269
-------------------------------- bank\bank0.s --------------------------------

                             
                             ;****************************************
                             ;* Return type on top of stack
                             ;* A - type
                             ;****************************************
f789 :                       df_ost_peekType
f789 : a477             [ 3] 	ldy df_parmtop
f78b : b9ff04           [ 4] 	lda df_rtstck-1,y
f78e : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Pop an int off parm stack
                             ;* X,A - int
                             ;****************************************
f78f :                       df_ost_popInt
f78f : a001             [ 2] 	ldy #DFST_INT
f791 : d0df             [ 3] 	bne df_ost_popParmX			; ALWAYS!
                             
                             ;****************************************
                             ;* Pop a string pointer off parm stack
                             ;* X,A - int
                             ;****************************************
f793 :                       df_ost_popStr
f793 : a080             [ 2] 	ldy #DFST_STR
f795 : d0db             [ 3] 	bne df_ost_popParmX			; ALWAYS!
                             	
                             ;****************************************
                             ;* Pop a general pointer off parm stack
                             ;* X,A - int
                             ;****************************************
f797 :                       df_ost_popPtr
f797 : a0ff             [ 2] 	ldy #0xff
f799 : d0d7             [ 3] 	bne df_ost_popParmX			; ALWAYS!
                             	
                             	
                             ;****************************************
                             ;* Allocate space on the heap
                             ;* X, A = Number of bytes to allocate
                             ;* X, A return address of allocated space
                             ;****************************************
f79b :                       df_st_malloc
                             	; save A in Y
f79b : a8               [ 2] 	tay
                             	; save old starend
f79c : a575             [ 3] 	lda df_starend+1
f79e : 48               [ 3] 	pha
f79f : a574             [ 3] 	lda df_starend
f7a1 : 48               [ 3] 	pha
                             	; restore A from Y
f7a2 : 98               [ 2] 	tya
                             	; add X,A to starend
f7a3 : 48               [ 3] 	pha
f7a4 : 8a               [ 2] 	txa
f7a5 : 18               [ 2] 	clc
f7a6 : 6574             [ 3] 	adc df_starend
f7a8 : 8574             [ 3] 	sta df_starend
f7aa : 68               [ 4] 	pla
f7ab : 6575             [ 3] 	adc df_starend+1
f7ad : 8575             [ 3] 	sta df_starend+1
                             	; return old starend as start of space
f7af : 68               [ 4] 	pla
f7b0 : aa               [ 2] 	tax
AS65 Assembler for R6502 [1.42].                                     Page  270
-------------------------------- bank\bank0.s --------------------------------

f7b1 : 68               [ 4] 	pla
f7b2 : 60               [ 6] 	rts
                             	
                             
                             ;****************************************
                             ;* df_init
                             ;* Initialise dflat language settings
                             ;****************************************
f7b3 :                       df_init
                             	; Initialise top of memory to default
                             	; This can be overridden by himem command
f7b3 : a900             [ 2] 	lda #lo(DF_MEMTOP)
f7b5 : 8d1d06           [ 4] 	sta df_memtop
f7b8 : a998             [ 2] 	lda #hi(DF_MEMTOP)
f7ba : 8d1e06           [ 4] 	sta df_memtop+1
                             
                             	; Init program space
f7bd : 4cc0f7           [ 3] 	jmp df_clear
                             
                             	; Initialise assembler
                             ;	jsr asm_init
                             
                             ;	rts
                             
                             
                             ;****************************************
                             ;* df_clear
                             ;* Initialise program space
                             ;****************************************
f7c0 :                       df_clear
                             	; Start of program space
f7c0 : a91f             [ 2] 	lda #lo(DF_PROGSTART)
f7c2 : 8565             [ 3] 	sta df_prgstrt
f7c4 : 8567             [ 3] 	sta df_prgend
f7c6 : a907             [ 2] 	lda #hi(DF_PROGSTART)
f7c8 : 8566             [ 3] 	sta df_prgstrt+1
f7ca : 8568             [ 3] 	sta df_prgend+1
                             	; Terminal value in prog space
f7cc : a900             [ 2] 	lda #0
f7ce : a8               [ 2] 	tay
f7cf : 9165             [ 5] 	sta (df_prgstrt),y
                             	; No variables - zero the count
f7d1 : 8571             [ 3] 	sta df_varcnt
                             
                             	; Variable value table
                             	; Grows down from mem top
f7d3 : ad1d06           [ 4] 	lda df_memtop
f7d6 : 856d             [ 3] 	sta df_vvtstrt
f7d8 : 856f             [ 3] 	sta df_vvtend
f7da : ad1e06           [ 4] 	lda df_memtop+1
f7dd : 856e             [ 3] 	sta df_vvtstrt+1
f7df : 8570             [ 3] 	sta df_vvtend+1
                             
                             	; Variable name table
                             	; Grows down from mem top
f7e1 : a56d             [ 3] 	lda df_vvtstrt
f7e3 : 8569             [ 3] 	sta df_vntstrt
f7e5 : 856b             [ 3] 	sta df_vntend
f7e7 : a56e             [ 3] 	lda df_vvtstrt+1
f7e9 : 856a             [ 3] 	sta df_vntstrt+1
f7eb : 856c             [ 3] 	sta df_vntend+1
                             
AS65 Assembler for R6502 [1.42].                                     Page  271
-------------------------------- bank\bank0.s --------------------------------

                             	; String accumulator
f7ed : a91f             [ 2] 	lda #lo(scratch)
f7ef : 857a             [ 3] 	sta df_sevalptr
f7f1 : a906             [ 2] 	lda #hi(scratch)
f7f3 : 857b             [ 3] 	sta df_sevalptr+1
                             
f7f5 : 60               [ 6] 	rts
                             
f7f6 :                       mod_sz_dflat_e
                             
                             	include "dflat/error.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  ERROR.S
                             ;*  Error handling module.
                             ;*  Whan an error is thrown using BRK, this modul
                             ;*  displaying the error plus any associated line
                             ;*  if it was running a program.  It then resets 
                             ;*  settings and takes the system back to program
                             ;*  mode.  The message uses the general IO handle
                             ;*  output must be set to the right place else fo
                             ;*	the error message will be written to tape!
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code
                             	include "dflat/error.i"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  ERROR.I
                             ;*  Error definitions file.
                             ;*  The macro to throw an error is elswhere, but 
                             ;*  It issues a 6502 BRK commmand with the next b
                             ;*  the error code.  The BRK handler then picks u
                             ;*  code and shows the appropriate message plus a
                             ;*  number if a program was running.
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code  
                             
                             ; Error message numbers
0000 =                       DFERR_OK		=	0
0001 =                       DFERR_SYNTAX	=	1
0002 =                       DFERR_TYPEMISM	=	2
0003 =                       DFERR_DIM		=	3
0004 =                       DFERR_UNTIL		=	4
0005 =                       DFERR_NOPROC	=	5
AS65 Assembler for R6502 [1.42].                                     Page  272
-------------------------------- bank\bank0.s --------------------------------

0006 =                       DFERR_PROCPARM	=	6
0007 =                       DFERR_IMMEDIATE	=	7
0008 =                       DFERR_UNCLOSEDIF=	8
0009 =                       DFERR_NOIF		=	9
000a =                       DFERR_NEXTFOR	=	10
000b =                       DFERR_FNAME		=	11
000c =                       DFERR_STRLONG	=	12
000d =                       DFERR_BREAK		=	13
000e =                       DFERR_NODATA	=	14
000f =                       DFERR_WEND		=	15
0010 =                       DFERR_NOLINE	=	16
0011 =                       DFERR_RETURN	=	17
0012 =                       DFERR_ABORT		=	18
0013 =                       DFERR_QUANTITY	=	19
0014 =                       DFERR_NOORG		=	20
                             
                             
                             
                             
                             
                             ; Error message table, each msg null terminated
f7f6 :                       df_tk_errortab
f7f6 : 4f6b00                	db	"Ok", 0
f7f9 : 53796e74617800        	db	"Syntax", 0
f800 : 5479706500            	db	"Type", 0
f805 : 52652d64696d00        	db	"Re-dim", 0
f80c : 4e6f2072657065..      	db	"No repeat", 0
f816 : 4e6f206465666e00      	db	"No defn", 0
f81e : 5061726d00            	db	"Parm", 0
f823 : 456e64656400          	db	"Ended", 0
f829 : 4e6f20656e6469..      	db	"No endif", 0
f832 : 4e6f20696600          	db	"No if", 0
f838 : 4e6f20666f7200        	db	"No for", 0
f83f : 4e6f7420666f75..      	db	"Not found", 0
f849 : 546f6f206c6f6e..      	db	"Too long", 0
f852 : 427265616b00          	db	"Break", 0
f858 : 4e6f206461746100      	db	"No data", 0
f860 : 4e6f207768696c..      	db	"No while", 0
f869 : 4e6f206c696e6500      	db	"No line", 0
f871 : 4e6f2072657475..      	db	"No return ", 0
f87c : 41626f7274656400      	db	"Aborted", 0
f884 : 426f756e647300        	db	"Bounds", 0
f88b : 4e6f206f726700        	db	"No org", 0
f892 : 00                    	db	0
                             
f893 :                       df_tk_error_inline
f893 : 20696e206c696e..      	db	" in line ", 0
f89d :                       df_tk_error_atpos
f89d : 20706f732000          	db	" pos ", 0
f8a3 :                       df_tk_error_error
f8a3 : 206572726f7200        	db	" error", 0
                             
                             ;****************************************
                             ;* df_trap_error
                             ;* Show an error message
                             ;* errno is error number
                             ;* currlin = Line number
                             ;* exeoff = offset
                             ;* at the end jump to program editor
                             ;****************************************
f8aa :                       df_trap_error
                             	; set IO back to normal
AS65 Assembler for R6502 [1.42].                                     Page  273
-------------------------------- bank\bank0.s --------------------------------

f8aa : 20f7c4           [ 6] 	jsr init_via0
f8ad : 20fec3           [ 6] 	jsr io_set_default
f8b0 : 58               [ 2] 	cli
                             
f8b1 : a9f6             [ 2] 	lda #lo(df_tk_errortab)
f8b3 : 85a1             [ 3] 	sta df_tmpptra
f8b5 : a9f7             [ 2] 	lda #hi(df_tk_errortab)
f8b7 : 85a2             [ 3] 	sta df_tmpptra+1
f8b9 : a65d             [ 3] 	ldx errno				; 0 or >=128 goes to monitor
f8bb : f002             [ 3] 	beq df_trap_go_monitor
f8bd : 1003             [ 3] 	bpl df_trap_normal
f8bf :                       df_trap_go_monitor
f8bf : 4c38f9           [ 3] 	jmp df_trap_monitor
f8c2 :                       df_trap_normal
f8c2 : a000             [ 2] 	ldy #0
f8c4 :                       df_show_err_find
                             	; If on a zero, then error table exhausted
                             	; so drop in to the monitor
f8c4 : b1a1             [ 5] 	lda (df_tmpptra),y
f8c6 : f070             [ 4] 	beq df_trap_monitor
                             	; Skip over this error text including zero termi
f8c8 :                       df_show_err_skip
                             	_incZPWord df_tmpptra
                             
f8ce : b1a1             [ 5] 	lda (df_tmpptra),y
f8d0 : d0f6             [ 3] 	bne df_show_err_skip
                             	_incZPWord df_tmpptra
                             
f8d8 : ca               [ 2] 	dex
f8d9 : d0e9             [ 3] 	bne df_show_err_find
                             	; Error message found
f8db : a6a1             [ 3] 	ldx df_tmpptra
f8dd : a5a2             [ 3] 	lda df_tmpptra+1
f8df : 2078c4           [ 6] 	jsr io_print_line
f8e2 : a2a3             [ 2] 	ldx #lo(df_tk_error_error)
f8e4 : a9f8             [ 2] 	lda #hi(df_tk_error_error)
f8e6 : 2078c4           [ 6] 	jsr io_print_line
                             	; if line number <> 0 then print it
f8e9 : a001             [ 2] 	ldy #DFTK_LINNUM
f8eb : b186             [ 5] 	lda (df_currlin),y
f8ed : aa               [ 2] 	tax
f8ee : c8               [ 2] 	iny
f8ef : b186             [ 5] 	lda (df_currlin),y
f8f1 : d004             [ 3] 	bne df_show_err_linnum
f8f3 : e000             [ 2] 	cpx #0x00
f8f5 : f019             [ 4] 	beq df_show_err_fin
f8f7 :                       df_show_err_linnum
                             	_println df_tk_error_inline
                             
f90c : 18               [ 2] 	clc
f90d : 20e5c3           [ 6] 	jsr print_a_to_d
f910 :                       df_show_err_fin
f910 : a488             [ 3] 	ldy df_exeoff
f912 : f01d             [ 3] 	beq df_show_err_done
                             	_println df_tk_error_atpos
                             
f929 : 98               [ 2] 	tya
f92a : aa               [ 2] 	tax
f92b : a900             [ 2] 	lda #0
f92d : 18               [ 2] 	clc
f92e : 20e5c3           [ 6] 	jsr print_a_to_d
f931 :                       df_show_err_done
AS65 Assembler for R6502 [1.42].                                     Page  274
-------------------------------- bank\bank0.s --------------------------------

f931 : 2068c1           [ 6] 	jsr utilPrintCRLF
f934 : 18               [ 2] 	clc
                             	; back to editor
f935 : 4c01e1           [ 3] 	jmp df_pg_dflat
                             
                             
                             ; For unknown errors, jump to monitor
f938 :                       df_trap_monitor
                             	; Print PC
                             	_println_low df_msg_pc
                             
f93f : a563             [ 3] 	lda df_brkpc+1
f941 : 2070c1           [ 6] 	jsr utilPrintA
f944 : a562             [ 3] 	lda df_brkpc
f946 : 2070c1           [ 6] 	jsr utilPrintA
f949 : 2060c1           [ 6] 	jsr utilPrintSPC
                             
                             	; Print A
                             	_println_low df_msg_acc
                             
f953 : a53d             [ 3] 	lda num_a
f955 : 2070c1           [ 6] 	jsr utilPrintA
f958 : 2060c1           [ 6] 	jsr utilPrintSPC
                             
                             	; Print X
                             	_println_low df_msg_xreg
                             
f962 : a53e             [ 3] 	lda num_a+1
f964 : 2070c1           [ 6] 	jsr utilPrintA
f967 : 2060c1           [ 6] 	jsr utilPrintSPC
                             
                             	; Print Y
                             	_println_low df_msg_yreg
                             
f971 : a53f             [ 3] 	lda num_a+2
f973 : 2070c1           [ 6] 	jsr utilPrintA
f976 : 2068c1           [ 6] 	jsr utilPrintCRLF
                             
f979 : 2045e9           [ 6] 	jsr df_rt_monitor
                             	; back to editor
f97c : 4c01e1           [ 3] 	jmp df_pg_dflat
                             
f97f :                       df_msg_pc
f97f : 50433a00              	db "PC:\x0"
f983 :                       df_msg_acc
f983 : 413a00                	db "A:\x0"
f986 :                       df_msg_xreg
f986 : 583a00                	db "X:\x0"
f989 :                       df_msg_yreg
f989 : 593a00                	db "Y:\x0"
                             
                             	include	"dflat/asm.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  ASM.S
                             ;*  This is the main controller code file for the
AS65 Assembler for R6502 [1.42].                                     Page  275
-------------------------------- bank\bank0.s --------------------------------

                             ;*  This file includes all the required source fi
                             ;*	in addition to dflat.s
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code
                             
f98c :                       mod_sz_asm_s
                             
                             	;	dflat.s is already included, so just the addit
                             	include "dflat/asm.i"
                             ;* Addressing modes - 15 in total, 16 with direct
                             ;*  0   Nothing
                             ;*	1 	Absolute			XXX <word>
                             ;*	2 	Absolute,X			XXX <word>,x
                             ;*	3 	Absolute,Y			XXX <word>,y
                             ;*	4	Zeropage			XXX	<byte>
                             ;*	5	Zeropage,X			XXX	<byte>,x
                             ;*	6	Zeropage,Y			XXX	<byte>,y
                             ;*	7	Indirect			XXX	(<byte>)
                             ;*	8	Indirect,X			XXX	(<byte>,x)
                             ;*	9	Indirect,Y			XXX	(<byte>),y
                             ;*	A	Absolute indirect	XXX	(<word>)
                             ;*	B	Absolute indirect,x	XXX	(<word>,x)
                             ;*	C	Immediate			XXX #<byte>
                             ;*	D	Accumulator			XXX (same as implied)
                             ;*	E	Implied				XXX
                             ;*	F	Relative			XXX	<byte>
                             ;*	10	Assembler directive	XXX .......
                             
0000 =                       AM_NONE		= 0
0001 =                       AM_ABS	 	= 1
0002 =                       AM_ABSX		= 2
0003 =                       AM_ABSY		= 3
0004 =                       AM_ZP		= 4
0005 =                       AM_ZPX		= 5
0006 =                       AM_ZPY		= 6
0007 =                       AM_ZPIND	= 7
0008 =                       AM_ZPINDX	= 8
0009 =                       AM_ZPINDY	= 9
000a =                       AM_ABSIND	= 10
000b =                       AM_ABSINDX	= 11
000c =                       AM_IMM		= 12
000d =                       AM_ACC		= 13
000d =                       AM_IMP		= AM_ACC
000f =                       AM_REL		= 15
0010 =                       AM_DIR		= 16
                             
                             
                             
                             	include "dflat/tkasm.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  ASM.S
                             ;*	Module that implements tokenisation of the ass
AS65 Assembler for R6502 [1.42].                                     Page  276
-------------------------------- bank\bank0.s --------------------------------

                             ;* 	The assembler is an extension to dflat, almos
                             ;*	almost a language within a language, as it has
                             ;*	own symbol tables to allow adding new keywords
                             ;*	running out of space in the main symtol table 
                             ;*	for normal 6502 asembler syntax which is at od
                             ;*	regular dflat.
                             ;*	Hence, this module has to do its own additiona
                             ;*	to tokenise the assembly.
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code  
                             
f98c :                       mod_sz_tkasm_s
                             
                             	; if didn't find regular keywords then try assen
f98c :                       df_tk_asm_parse_command
                             ;	; skip the white space after the dot
                             ;	jsr df_tk_skip_ws
                             	; find the assembler symbol
f98c : 20c1f9           [ 6] 	jsr df_tk_asm_matchtok
                             	; if no match with asm token they maybe a label?
f98f : b01d             [ 3] 	bcs df_tk_asm_label
f991 :                       df_tk_asm_found_command
                             	; Before asm keyword, put the asm handler token
f991 : a997             [ 2] 	lda #DFRT_ASM
f993 : 205fd8           [ 6] 	jsr df_tk_put_tok
                             	; Set the MSB of found symbol index
f996 : a583             [ 3] 	lda df_symoff
f998 : 0980             [ 2] 	ora #0x80
f99a : 205fd8           [ 6] 	jsr df_tk_put_tok
                             	; check the first addressing mode code
                             	; remember to jump over the offset byte
f99d : a001             [ 2] 	ldy #1
f99f : b181             [ 5] 	lda (df_symtab),y
                             	; Directive?
f9a1 : c910             [ 2] 	cmp #AM_DIR
f9a3 : d006             [ 3] 	bne df_tk_asm_mnemonic
                             	; if directive then process it
f9a5 : a583             [ 3] 	lda df_symoff
f9a7 : 4c18fa           [ 3] 	jmp df_tk_asm_exec_parser
f9aa :                       df_tk_asm_parse_command_err
f9aa : 60               [ 6] 	rts
f9ab :                       df_tk_asm_mnemonic
                             	; for all nmemonics, work out the addressing mod
f9ab : 4c27fa           [ 3] 	jmp df_tk_asm_addr_mode
                             
                             ; try to tokenise a label
f9ae :                       df_tk_asm_label
                             	; labels must start with '.'
f9ae : a92e             [ 2] 	lda #'.'
f9b0 : 20c6d8           [ 6] 	jsr df_tk_expect
f9b3 : b0f5             [ 3] 	bcs df_tk_asm_parse_command_err
                             	; Before asm label, put the asm handler token
f9b5 : a997             [ 2] 	lda #DFRT_ASM
f9b7 : 205fd8           [ 6] 	jsr df_tk_put_tok
f9ba : e67c             [ 5] 	inc df_linoff			;Skip the '.'
                             	; Tokenise a variable
f9bc : a900             [ 2] 	lda #0
f9be : 4c8ad9           [ 3] 	jmp df_tk_var
                             
AS65 Assembler for R6502 [1.42].                                     Page  277
-------------------------------- bank\bank0.s --------------------------------

                             ;****************************************
                             ;* df_tk_asm_matchtok
                             ;* Try and find a token match against the table d
                             ;* Input:
                             ;*			Current df_linbuff and df_linoff
                             ;* Return: 	CC = No Error, CS = Error
                             ;*			df_linoff points to next char if CC else unc
                             ;****************************************
f9c1 :                       df_tk_asm_matchtok
                             	; Start at token symbols beginning
f9c1 : a9aa             [ 2] 	lda #lo(df_asm_tokensyms)
f9c3 : 8581             [ 3] 	sta df_symtab
f9c5 : a9fd             [ 2] 	lda #hi(df_asm_tokensyms)
f9c7 : 8582             [ 3] 	sta df_symtab+1
f9c9 : a900             [ 2] 	lda #0
f9cb : 8583             [ 3] 	sta df_symoff
f9cd : a200             [ 2] 	ldx #0
f9cf :                       df_tk_asm_checknexttok
                             	; From the line buffer current pointer
                             	; Check for a token match
f9cf : a47c             [ 3] 	ldy df_linoff
f9d1 :                       df_tk_asm_checktokch
                             	; Get symtable char
f9d1 : a181             [ 6] 	lda (df_symtab,x)
                             	; if less than ascii ' ' then reached end of
                             	; this symbol and everything matched so found!
f9d3 : c920             [ 2] 	cmp #' '
f9d5 : 9033             [ 4] 	bcc df_tk_asm_symfound
                             	; Else compare with current line buffer char
f9d7 : d90004           [ 4] 	cmp df_linbuff,y
                             	; If chars not match then this symbol fails
f9da : d00a             [ 3] 	bne df_tk_asm_symnomatch
                             	; else more chars to match
                             	; so increment line buffer pointers
                             	_incZPWord df_symtab
                             
f9e2 : c8               [ 2] 	iny
f9e3 : 4cd1f9           [ 3] 	jmp df_tk_asm_checktokch
f9e6 :                       df_tk_asm_symnomatch
                             	; Increment symbol counter to next symbol
f9e6 : e683             [ 5] 	inc df_symoff
f9e8 :                       df_tk_asm_symnextentry
f9e8 : a181             [ 6] 	lda (df_symtab,x)
                             	; End of symbol is < ' '
f9ea : c920             [ 2] 	cmp #' '
f9ec : 9009             [ 3] 	bcc  df_tk_asm_foundsymend
                             	_incZPWord df_symtab
                             
f9f4 : 4ce8f9           [ 3] 	jmp df_tk_asm_symnextentry
f9f7 :                       df_tk_asm_foundsymend
                             	; Now at the offset to jump over addressing
                             	; mode and opcode values. Add offset to ptr
                             	; remember than C is clear and A has offset
                             	; set C so always jump over the offset
f9f7 : 38               [ 2] 	sec
f9f8 : 6581             [ 3] 	adc df_symtab
f9fa : 8581             [ 3] 	sta df_symtab
f9fc : a582             [ 3] 	lda df_symtab+1
f9fe : 6900             [ 2] 	adc #0
fa00 : 8582             [ 3] 	sta df_symtab+1
                             	; If next char is not zero then
                             	; try and match with line buffer
AS65 Assembler for R6502 [1.42].                                     Page  278
-------------------------------- bank\bank0.s --------------------------------

fa02 : a181             [ 6] 	lda (df_symtab,x)
fa04 : d0c9             [ 4] 	bne df_tk_asm_checknexttok
                             	; else symbol table exhausted
                             	; so no match found
                             	; Zero symbol counter
fa06 : 8583             [ 3] 	sta df_symoff		; Relies on A=0
                             	; Set C to indicate error (no match)
fa08 : 38               [ 2] 	sec
fa09 : 60               [ 6] 	rts
fa0a :                       df_tk_asm_symfound
                             	; Full match with keyword in symtable but
                             	; check the next buffer char is not alphanum
                             	; as this could be part of a symbol
                             	; Point to next buffer char in any case
                             	; y already points to char after keyword
fa0a : b90004           [ 4] 	lda df_linbuff,y
                             	; if it is an alphanum then
fa0d : 20a4d8           [ 6] 	jsr df_tk_isalphanum
                             	; do not count as a match
fa10 : b0d4             [ 4] 	bcs df_tk_asm_symnomatch
                             	; Save line buffer pointer (points to next char)
                             	; Clear C to indicate success (match)
fa12 : 847c             [ 3] 	sty df_linoff
fa14 : a583             [ 3] 	lda df_symoff
                             	; df_symtab points to the offset
fa16 :                       df_tk_asm_addr_mode_ok
fa16 : 18               [ 2] 	clc
fa17 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* df_tk_asm_exec_parser
                             ;* Execute parse routine for this statement
                             ;* Input: a is the token found
                             ;* Return: CC = Parsed ok, CS = Error
                             ;****************************************
fa18 :                       df_tk_asm_exec_parser
fa18 : 0a               [ 2] 	asl a
fa19 : aa               [ 2] 	tax
fa1a : bddbff           [ 4] 	lda df_tk_asm_tokenjmp,x
fa1d : 85a1             [ 3] 	sta df_tmpptra
fa1f : bddcff           [ 4] 	lda df_tk_asm_tokenjmp+1,x
fa22 : 85a2             [ 3] 	sta df_tmpptra+1
fa24 : 6ca100           [ 6] 	jmp (df_tmpptra)
                             
                             
                             ;****************************************
                             ;* df_tk_asm_addr_mode
                             ;* Tokenise the addressing mode
                             ;* Input: a is the token found
                             ;* Return: CC = Parsed ok, CS = Error
                             ;****************************************
fa27 :                       df_tk_asm_addr_mode
fa27 : 20b0d8           [ 6] 	jsr df_tk_skip_ws		;Skip whitespace
fa2a : c900             [ 2] 	cmp #0					;End of line?
fa2c : f0e8             [ 3] 	beq df_tk_asm_addr_mode_ok
fa2e : c93a             [ 2] 	cmp #':'				;End of statement?
fa30 : f0e4             [ 3] 	beq df_tk_asm_addr_mode_ok
fa32 : a923             [ 2] 	lda #'#'				; Check for immediate
fa34 : 20d4d8           [ 6] 	jsr df_tk_expect_tok
fa37 : b003             [ 3] 	bcs df_tk_asm_addr_mode_1
fa39 : 4c5cfa           [ 3] 	jmp df_tk_imm		; Process immediate
fa3c :                       df_tk_asm_addr_mode_1
AS65 Assembler for R6502 [1.42].                                     Page  279
-------------------------------- bank\bank0.s --------------------------------

fa3c : a928             [ 2] 	lda #'('				; One of indirect modes?
fa3e : 20d4d8           [ 6] 	jsr df_tk_expect_tok
fa41 : b003             [ 3] 	bcs df_tk_asm_addr_mode_2
fa43 : 4c5ffa           [ 3] 	jmp df_tk_indirect
fa46 :                       df_tk_asm_addr_mode_2
                             	; here just a regular address
                             	; Just one expression expected
fa46 : 20d1da           [ 6] 	jsr df_tk_expression
                             	; Is there a comma after the expression
fa49 : a92c             [ 2] 	lda #','
fa4b : 20d4d8           [ 6] 	jsr df_tk_expect_tok
fa4e : b0c6             [ 3] 	bcs df_tk_asm_addr_mode_ok
                             	; must be x or y
fa50 : a978             [ 2] 	lda #'x'
fa52 : 20d4d8           [ 6] 	jsr df_tk_expect_tok
fa55 : 90bf             [ 3] 	bcc df_tk_asm_addr_mode_ok
                             	; got to here, must be y
fa57 : a979             [ 2] 	lda #'y'
fa59 : 4cdfd8           [ 3] 	jmp df_tk_expect_tok_err
                             	
                             	
                             ;* Tokenise immediate addressing mode	
fa5c :                       df_tk_imm
                             	; Just one expression expected
fa5c : 4cd1da           [ 3] 	jmp df_tk_expression
                             	
                             ;* Tokenise indirect
fa5f :                       df_tk_indirect
                             	; Just one expression expected
fa5f : 20d1da           [ 6] 	jsr df_tk_expression
                             	; Is there a comma after the expression
fa62 : a92c             [ 2] 	lda #','
fa64 : 20d4d8           [ 6] 	jsr df_tk_expect_tok
                             	; if not then might be indirect Y
fa67 : b00a             [ 3] 	bcs df_tk_indirect_y
                             	; Else must have be indirect "x)"
fa69 : a978             [ 2] 	lda #'x'
fa6b : 20dfd8           [ 6] 	jsr df_tk_expect_tok_err
fa6e : a929             [ 2] 	lda #')'
fa70 : 4cdfd8           [ 3] 	jmp df_tk_expect_tok_err
                             	
fa73 :                       df_tk_indirect_y
                             	; Definitely has a close bracket
fa73 : a929             [ 2] 	lda #')'
fa75 : 20dfd8           [ 6] 	jsr df_tk_expect_tok_err
                             	; Is there a comma after the expression
fa78 : a92c             [ 2] 	lda #','
fa7a : 20d4d8           [ 6] 	jsr df_tk_expect_tok
fa7d : b005             [ 3] 	bcs df_tk_indirect_done
                             	; if comma then must be indirect y
fa7f : a979             [ 2] 	lda #'y'
fa81 : 4cdfd8           [ 3] 	jmp df_tk_expect_tok_err
                             
fa84 :                       df_tk_indirect_done
fa84 : 18               [ 2] 	clc
fa85 : 60               [ 6] 	rts
                             	
                             
                             	
                             
                             
                             ;************************************************
AS65 Assembler for R6502 [1.42].                                     Page  280
-------------------------------- bank\bank0.s --------------------------------

                             ;*           TOKENISATION SUBROUTINES
                             ;************************************************
                             
                             
                             ;* HANDLE DIRECTIVES
                             
                             ;* All tokenisation is part of regular toksub rou
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
fa86 :                       mod_sz_tkasm_e
                             
                             
                             	include "dflat/rtasm.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  RTASM.S
                             ;*  Module that implements the runtime execution 
                             ;*  assembler.
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code  
                             
fa86 :                       mod_sz_rtasm_s
                             
fa86 :                       df_rt_asm_assemble
                             	; check if >=0x80 (directive or mnemonic)
fa86 : a488             [ 3] 	ldy df_exeoff
fa88 : b186             [ 5] 	lda (df_currlin),y
AS65 Assembler for R6502 [1.42].                                     Page  281
-------------------------------- bank\bank0.s --------------------------------

fa8a : 1009             [ 3] 	bpl df_rt_asm_do_label
fa8c : 2099fa           [ 6] 	jsr df_rt_asm_command
fa8f : 208efc           [ 6] 	jsr df_rt_asm_printCR
fa92 : 4c98fa           [ 3] 	jmp df_rt_asm_assemble_done
fa95 :                       df_rt_asm_do_label
fa95 : 20bdfa           [ 6] 	jsr df_rt_asm_label
fa98 :                       df_rt_asm_assemble_done
                             	; any clean up here
fa98 : 60               [ 6] 	rts
                             
                             ; Jump to mnemonic or 
                             ; directive with index in A ignoring MSB
fa99 :                       df_rt_asm_command
fa99 : 297f             [ 2] 	and #0x7f
fa9b : 48               [ 3] 	pha
fa9c : aa               [ 2] 	tax
                             	; Point to Xth symtable entry of addr modes and 
fa9d : 205cfd           [ 6] 	jsr df_rt_asm_skip_to_sym
                             
                             	; Get first addressing mode (ignoring offset byt
faa0 : a001             [ 2] 	ldy #1
faa2 : b181             [ 5] 	lda (df_symtab),y
                             	; is it a directive?
faa4 : c910             [ 2] 	cmp #AM_DIR
                             	; if directive
faa6 : f003             [ 3] 	beq df_rt_asm_dir
                             	; Else must be a normal mnemonic
faa8 : 4c82fb           [ 3] 	jmp df_rt_asm_mnem
                             
                             ; Jump to the appropriate directive
faab :                       df_rt_asm_dir
                             	; Get the index and *2
                             	; to get jump vector
faab : 68               [ 4] 	pla
faac : 0a               [ 2] 	asl a
faad : aa               [ 2] 	tax
                             	; jump over directive code
faae : e688             [ 5] 	inc df_exeoff
                             	; jump to directive handler
fab0 : bde5ff           [ 4] 	lda df_rt_asm_tokenjmp,x
fab3 : 85a1             [ 3] 	sta df_tmpptra
fab5 : bde6ff           [ 4] 	lda df_rt_asm_tokenjmp+1,x
fab8 : 85a2             [ 3] 	sta df_tmpptra+1
faba : 6ca100           [ 6] 	jmp (df_tmpptra)
                             
                             ; Process label
                             ; Set the label to the PC
fabd :                       df_rt_asm_label
                             	; Get the address of the variable in A,X
fabd : 203dee           [ 6] 	jsr df_rt_generate_lvar
fac0 : 869e             [ 3] 	stx df_asmoprnd
fac2 : 859f             [ 3] 	sta df_asmoprnd+1
                             	; Assign to value of PC
fac4 : a000             [ 2] 	ldy #0
fac6 : a599             [ 3] 	lda df_asmpc
fac8 : 919e             [ 5] 	sta (df_asmoprnd),y
faca : a59a             [ 3] 	lda df_asmpc+1
facc : c8               [ 2] 	iny
facd : 919e             [ 5] 	sta (df_asmoprnd),y
facf : 60               [ 6] 	rts	
                             
                             ;* Set the code origin
AS65 Assembler for R6502 [1.42].                                     Page  282
-------------------------------- bank\bank0.s --------------------------------

fad0 :                       df_rt_asm_org
                             	; Get the address from expression
fad0 : 2039fd           [ 6] 	jsr df_rt_asm_get_operand
                             	; Put this in to PC
fad3 : a59e             [ 3] 	lda df_asmoprnd
fad5 : 8599             [ 3] 	sta df_asmpc
fad7 : a59f             [ 3] 	lda df_asmoprnd+1
fad9 : 859a             [ 3] 	sta df_asmpc+1
fadb : a903             [ 2] 	lda #3
fadd : 85a0             [ 3] 	sta df_asmlen
fadf : 4c50fc           [ 3] 	jmp df_rt_asm_printPC
                             
                             ; Set the assembly option
                             ; Bit 0 set = Print code to console
                             ; But 1 set = Write code to memory
                             ; Be sure to run 2 non-write passes
                             ; before a write pass
                             ; First pass may result in ZP used a lot
                             ; Second pass resolves forward refs to ABS
                             ; Final write pass then stores the code
fae2 :                       df_rt_asm_opt
                             	; Get the value from expression
fae2 : 2039fd           [ 6] 	jsr df_rt_asm_get_operand
                             	; Put this in to OPT
fae5 : a59e             [ 3] 	lda df_asmoprnd
fae7 : 859b             [ 3] 	sta df_asmopt
fae9 : 60               [ 6] 	rts
                             
                             ; dw and db handled here
                             ; keep going through comma separated
                             ; list and write bytes or words
                             ; string expansion also handled
faea :                       df_rt_asm_db
faea : a902             [ 2] 	lda #2
faec : 2c                    	db	0x2c			; BIT abs to ignore next 2 bytes
faed :                       df_rt_asm_dw
faed : a903             [ 2] 	lda #3
faef :                       df_rt_asm_db_start
faef : 85a0             [ 3] 	sta df_asmlen
faf1 : 2050fc           [ 6] 	jsr df_rt_asm_printPC
faf4 : 206bfc           [ 6] 	jsr df_rt_asm_printSPC
faf7 :                       df_rt_asm_data
faf7 : 201ee2           [ 6] 	jsr df_rt_neval		; Evaluate expression
fafa : 2089f7           [ 6] 	jsr df_ost_peekType	; What is the type
fafd : a8               [ 2] 	tay
fafe : 300d             [ 4] 	bmi df_rt_asm_string; If string
fb00 : 208ff7           [ 6] 	jsr df_ost_popInt	; else get number in A,X
fb03 : 869e             [ 3] 	stx df_asmoprnd		; store low value
fb05 : 859f             [ 3] 	sta df_asmoprnd+1	; store high value
fb07 : 2035fb           [ 6] 	jsr df_rt_asm_data_write
fb0a : 4c2afb           [ 3] 	jmp df_rt_asm_data_next
fb0d :                       df_rt_asm_string
fb0d : 2097f7           [ 6] 	jsr df_ost_popPtr	; pop string pointer
fb10 : 86a1             [ 3] 	stx df_tmpptra		; save pointer to tmpa
fb12 : 85a2             [ 3] 	sta df_tmpptra+1
fb14 :                       df_rt_asm_string_ch
fb14 : a000             [ 2] 	ldy #0
fb16 : b1a1             [ 5] 	lda (df_tmpptra),y	; Get string char, 0=done
fb18 : f010             [ 3] 	beq df_rt_asm_data_next
fb1a : 859e             [ 3] 	sta df_asmoprnd		; Save as operand
fb1c : 849f             [ 3] 	sty df_asmoprnd+1	; High is always zero
fb1e : 2035fb           [ 6] 	jsr df_rt_asm_data_write
AS65 Assembler for R6502 [1.42].                                     Page  283
-------------------------------- bank\bank0.s --------------------------------

                             	_incZPWord df_tmpptra
                             
fb27 : 4c14fb           [ 3] 	jmp df_rt_asm_string_ch
fb2a :                       df_rt_asm_data_next
fb2a : 2073ee           [ 6] 	jsr df_rt_eos		; End?
fb2d : b005             [ 3] 	bcs df_rt_asm_data_done
fb2f : e688             [ 5] 	inc df_exeoff		; Jump over ','
fb31 : 4cf7fa           [ 3] 	jmp df_rt_asm_data
fb34 :                       df_rt_asm_data_done
fb34 : 60               [ 6] 	rts	
                             
                             ; Write one db or dw value
                             ; Check for value too big for db
                             ; Advance PC by df_asmlen
fb35 :                       df_rt_asm_data_write
fb35 : 2074fc           [ 6] 	jsr df_rt_asm_printOPR
fb38 :                       df_rt_asm_data_write_skip1
fb38 : a902             [ 2] 	lda #2
fb3a : 259b             [ 3] 	and df_asmopt
fb3c : f017             [ 3] 	beq df_rt_asm_data_write_skip2
fb3e : a59e             [ 3] 	lda df_asmoprnd
fb40 : a000             [ 2] 	ldy #0
fb42 : 9199             [ 5] 	sta (df_asmpc),y
fb44 : c8               [ 2] 	iny
fb45 : a902             [ 2] 	lda #2
fb47 : c5a0             [ 3] 	cmp df_asmlen
fb49 : d006             [ 3] 	bne df_rt_asm_data_write_hi
fb4b : a59f             [ 3] 	lda df_asmoprnd+1
fb4d : d014             [ 3] 	bne df_rt_asm_data_write_err
fb4f : f004             [ 3] 	beq df_rt_asm_data_write_skip2
fb51 :                       df_rt_asm_data_write_hi
fb51 : a59f             [ 3] 	lda df_asmoprnd+1
fb53 : 9199             [ 5] 	sta (df_asmpc),y
fb55 :                       df_rt_asm_data_write_skip2
fb55 : a4a0             [ 3] 	ldy df_asmlen
fb57 : 88               [ 2] 	dey					; Add 1 less!
fb58 : 98               [ 2] 	tya
fb59 : 18               [ 2] 	clc
fb5a : 6599             [ 3] 	adc df_asmpc
fb5c : 8599             [ 3] 	sta df_asmpc
                             	_bcc 2
                             
fb60 : e69a             [ 5] 	inc df_asmpc+1
fb62 : 60               [ 6] 	rts
fb63 :                       df_rt_asm_data_write_err	
                             	SWBRK DFERR_QUANTITY
                             
                             	
                             	
fb65 :                       df_rt_asm_ds
fb65 : 2050fc           [ 6] 	jsr df_rt_asm_printPC
fb68 : 206bfc           [ 6] 	jsr df_rt_asm_printSPC
                             	; Get the address from expression
fb6b : 2039fd           [ 6] 	jsr df_rt_asm_get_operand
                             	; ADD this in to PC
fb6e : 18               [ 2] 	clc
fb6f : a59e             [ 3] 	lda df_asmoprnd
fb71 : 6599             [ 3] 	adc df_asmpc
fb73 : 8599             [ 3] 	sta df_asmpc
fb75 : a59f             [ 3] 	lda df_asmoprnd+1
fb77 : 659a             [ 3] 	adc df_asmpc+1
fb79 : 859a             [ 3] 	sta df_asmpc+1
AS65 Assembler for R6502 [1.42].                                     Page  284
-------------------------------- bank\bank0.s --------------------------------

                             	; len=1 for printing
fb7b : a903             [ 2] 	lda #3
fb7d : 85a0             [ 3] 	sta df_asmlen
fb7f : 4c74fc           [ 3] 	jmp df_rt_asm_printOPR
                             
                             
                             ; Process a normal assembler mnemonic
fb82 :                       df_rt_asm_mnem
fb82 : 68               [ 4] 	pla				; Throw away previous temp variable
                             	; jump over mnemonic code
fb83 : e688             [ 5] 	inc df_exeoff
                             	; work out the addressing mode and get operand
fb85 : 20bcfc           [ 6] 	jsr df_rt_asm_addrmode
                             
fb88 :                       df_rt_asm_mnem_try
fb88 : a59c             [ 3] 	lda df_asmadmd					; With the addressing mode
fb8a : 2044fd           [ 6] 	jsr df_rt_asm_find_addr_mode	; Find it for this 
fb8d : c900             [ 2] 	cmp #AM_NONE					; Exists?
fb8f : d014             [ 3] 	bne	df_rt_asm_mnem_chk			; If does then check it
fb91 :                       df_rt_asm_check_alt
fb91 : a69c             [ 3] 	ldx df_asmadmd					; Use ad mode as an index
fb93 : bd99fd           [ 4] 	lda df_asm_altaddrmode,x		; Else get alternate
fb96 : c900             [ 2] 	cmp #AM_NONE					; Is there an alternate?
fb98 : f02d             [ 3] 	beq df_rt_asm_mnem_err			; If no then error
fb9a : 2044fd           [ 6] 	jsr df_rt_asm_find_addr_mode	; Check does mode e
fb9d : c900             [ 2] 	cmp #AM_NONE					; this instruction
fb9f : f026             [ 3] 	beq df_rt_asm_mnem_err			; if no then error
fba1 : c59c             [ 3] 	cmp df_asmadmd					; Same as the original?
fba3 : f00e             [ 3] 	beq df_rt_asm_mnem_done			; if so then done
fba5 :                       df_rt_asm_mnem_chk
fba5 : 859c             [ 3] 	sta df_asmadmd					; This is the final mode
fba7 : aa               [ 2] 	tax								; Get the length
fba8 : bd88fd           [ 4] 	lda df_asm_length,x
fbab : a69f             [ 3] 	ldx df_asmoprnd+1				; Is operand hi non-zero?
fbad : f004             [ 3] 	beq df_rt_asm_mnem_done			; If zero then done
fbaf : c903             [ 2] 	cmp #3							; Else must be len 3?
fbb1 : d0de             [ 3] 	bne df_rt_asm_check_alt			; Try an alternate
fbb3 :                       df_rt_asm_mnem_done
fbb3 : a69c             [ 3] 	ldx df_asmadmd					; Get the final mode index
fbb5 : bd88fd           [ 4] 	lda df_asm_length,x				; Get the length
fbb8 : 85a0             [ 3] 	sta df_asmlen
fbba : a59c             [ 3] 	lda df_asmadmd					; Get the final mode
fbbc : 2044fd           [ 6] 	jsr df_rt_asm_find_addr_mode	; Get the Y index o
                             	; Ok now get the opcode
fbbf : c8               [ 2] 	iny
fbc0 : b181             [ 5] 	lda (df_symtab),y
fbc2 : 859d             [ 3] 	sta df_asmopcde
                             	; Now have all information to assemble
fbc4 : 4cc9fb           [ 3] 	jmp df_rt_asm_encode
                             	
fbc7 :                       df_rt_asm_mnem_err
                             	SWBRK DFERR_SYNTAX
                             
                             	
                             ; Take assembler data and encode it
                             ; depending on the current option
                             ; Option 0 = No write
                             ; Option 1 = No write, Print
                             ; Option 2 = Write
                             ; Option 3 = Write, Print
fbc9 :                       df_rt_asm_encode
                             	; If relative then need to calculate offset
AS65 Assembler for R6502 [1.42].                                     Page  285
-------------------------------- bank\bank0.s --------------------------------

fbc9 : a59c             [ 3] 	lda df_asmadmd
fbcb : c90f             [ 2] 	cmp #AM_REL
fbcd : d033             [ 4] 	bne df_rt_asm_encode_skiprel
                             	; If high byte is 0 then do nothing
fbcf : a59f             [ 3] 	lda df_asmoprnd+1
fbd1 : f02f             [ 4] 	beq df_rt_asm_encode_skiprel
                             	; else calculate distance from PC
                             	; first take 2 off operand
fbd3 : 38               [ 2] 	sec
fbd4 : a59e             [ 3] 	lda df_asmoprnd
fbd6 : e902             [ 2] 	sbc #2
fbd8 : 859e             [ 3] 	sta df_asmoprnd
fbda : a59f             [ 3] 	lda df_asmoprnd+1
fbdc : e900             [ 2] 	sbc #0
fbde : 859f             [ 3] 	sta df_asmoprnd+1
                             	; now calculate current operand-PC
fbe0 : 38               [ 2] 	sec
fbe1 : a59e             [ 3] 	lda df_asmoprnd
fbe3 : e599             [ 3] 	sbc df_asmpc
fbe5 : 859e             [ 3] 	sta df_asmoprnd
fbe7 : a59f             [ 3] 	lda df_asmoprnd+1
fbe9 : e59a             [ 3] 	sbc df_asmpc+1
                             	; put 0 in high operand storage
                             	; but A contains result of subtraction
                             	; so check that for out of range
fbeb : a000             [ 2] 	ldy #0
fbed : 849f             [ 3] 	sty df_asmoprnd+1
                             	; detect too far; high byte is either 0 or 255
                             	; else it's an error
fbef : a8               [ 2] 	tay
fbf0 : f00a             [ 3] 	beq df_rt_asm_encode_relpos
fbf2 : c9ff             [ 2] 	cmp #0xff
fbf4 : d00a             [ 4] 	bne df_rt_asm_encode_relfar
                             	; if high is ff then low must be same -ve
fbf6 : a59e             [ 3] 	lda df_asmoprnd
fbf8 : 3008             [ 4] 	bmi df_rt_asm_encode_skiprel
                             	; else error
fbfa : 1004             [ 4] 	bpl df_rt_asm_encode_relfar
fbfc :                       df_rt_asm_encode_relpos
                             	; if high is 00 then low must be same +ve
fbfc : a59e             [ 3] 	lda df_asmoprnd
fbfe : 1002             [ 4] 	bpl df_rt_asm_encode_skiprel
                             	; else error
fc00 :                       df_rt_asm_encode_relfar
                             	; set to non-zero value, dec because it is zero 
fc00 : c69f             [ 5] 	dec df_asmoprnd+1
fc02 :                       df_rt_asm_encode_skiprel
                             	; Only write the code if bit 1=1
fc02 : a902             [ 2] 	lda #0x02
fc04 : 259b             [ 3] 	and df_asmopt
fc06 : f028             [ 3] 	beq df_rt_asm_encode_print
fc08 : a000             [ 2] 	ldy #0
fc0a : a59d             [ 3] 	lda df_asmopcde
fc0c : 9199             [ 5] 	sta (df_asmpc),y
fc0e : a5a0             [ 3] 	lda df_asmlen
fc10 : c901             [ 2] 	cmp #1						; No operand
fc12 : f01c             [ 3] 	beq df_rt_asm_encode_print
fc14 : c903             [ 2] 	cmp #3						; Word operand
fc16 : f00e             [ 3] 	beq df_rt_asm_encode_writeword
                             	; byte operand, high byte must be zero
fc18 : a59f             [ 3] 	lda df_asmoprnd+1
fc1a : f002             [ 3] 	beq df_rt_asm_encode_writebyte
AS65 Assembler for R6502 [1.42].                                     Page  286
-------------------------------- bank\bank0.s --------------------------------

                             	SWBRK DFERR_QUANTITY
                             
fc1e :                       df_rt_asm_encode_writebyte
fc1e : c8               [ 2] 	iny 
fc1f : a59e             [ 3] 	lda df_asmoprnd
fc21 : 9199             [ 5] 	sta (df_asmpc),y
fc23 : 4c30fc           [ 3] 	jmp df_rt_asm_encode_print
fc26 :                       df_rt_asm_encode_writeword
fc26 : c8               [ 2] 	iny 
fc27 : a59e             [ 3] 	lda df_asmoprnd
fc29 : 9199             [ 5] 	sta (df_asmpc),y
fc2b : c8               [ 2] 	iny 
fc2c : a59f             [ 3] 	lda df_asmoprnd+1
fc2e : 9199             [ 5] 	sta (df_asmpc),y	
fc30 :                       df_rt_asm_encode_print
fc30 : 2040fc           [ 6] 	jsr df_rt_asm_print_mmen
                             	; advance pc
fc33 : 18               [ 2] 	clc
fc34 : a599             [ 3] 	lda df_asmpc
fc36 : 65a0             [ 3] 	adc df_asmlen
fc38 : 8599             [ 3] 	sta df_asmpc
                             	_bcc 2
                             
fc3c : e69a             [ 5] 	inc df_asmpc+1
fc3e : 18               [ 2] 	clc
fc3f : 60               [ 6] 	rts
                             
                             
                             ; Print the full 1,2,3 byte instruction
                             ; depends on df_asmopt
fc40 :                       df_rt_asm_print_mmen
fc40 : 2050fc           [ 6] 	jsr df_rt_asm_printPC
fc43 : 206bfc           [ 6] 	jsr df_rt_asm_printSPC
fc46 : 2060fc           [ 6] 	jsr df_rt_asm_printOPC
fc49 : 206bfc           [ 6] 	jsr df_rt_asm_printSPC
fc4c : 2074fc           [ 6] 	jsr df_rt_asm_printOPR
fc4f :                       df_rt_asm_print_rts			; Hopefully subs can get he
fc4f : 60               [ 6] 	rts
                             
fc50 :                       df_rt_asm_printPC
                             	; Check the option bit 0 (Print)
fc50 : a901             [ 2] 	lda #0x01
fc52 : 259b             [ 3] 	and df_asmopt
fc54 : f0f9             [ 3] 	beq df_rt_asm_print_rts
                             	; Print current PC
fc56 : a59a             [ 3] 	lda df_asmpc+1
fc58 : 2070c1           [ 6] 	jsr utilPrintA
fc5b : a599             [ 3] 	lda df_asmpc
fc5d : 4c70c1           [ 3] 	jmp utilPrintA
                             
fc60 :                       df_rt_asm_printOPC
                             	; Check the option bit 0 (Print)
fc60 : a901             [ 2] 	lda #0x01
fc62 : 259b             [ 3] 	and df_asmopt
fc64 : f0e9             [ 3] 	beq df_rt_asm_print_rts
fc66 : a59d             [ 3] 	lda df_asmopcde
fc68 : 4c70c1           [ 3] 	jmp utilPrintA
                             
fc6b :                       df_rt_asm_printSPC
                             	; Check the option bit 0 (Print)
fc6b : a901             [ 2] 	lda #0x01
fc6d : 259b             [ 3] 	and df_asmopt
AS65 Assembler for R6502 [1.42].                                     Page  287
-------------------------------- bank\bank0.s --------------------------------

fc6f : f0de             [ 3] 	beq df_rt_asm_print_rts
fc71 : 4c60c1           [ 3] 	jmp utilPrintSPC
                             	
fc74 :                       df_rt_asm_printOPR
                             	; Check the option bit 0 (Print)
fc74 : a901             [ 2] 	lda #0x01
fc76 : 259b             [ 3] 	and df_asmopt
fc78 : f0d5             [ 3] 	beq df_rt_asm_print_rts	
fc7a : a5a0             [ 3] 	lda df_asmlen				; check how may operand bytes
fc7c : c901             [ 2] 	cmp #1						; if only opcode, done
fc7e : f0cf             [ 3] 	beq df_rt_asm_print_rts	
fc80 : c902             [ 2] 	cmp #2
fc82 : f005             [ 3] 	beq df_rt_asm_printOPR_1	; if only 2 do low byte
fc84 : a59f             [ 3] 	lda df_asmoprnd+1
fc86 : 2070c1           [ 6] 	jsr utilPrintA
fc89 :                       df_rt_asm_printOPR_1
fc89 : a59e             [ 3] 	lda df_asmoprnd
fc8b : 4c70c1           [ 3] 	jmp utilPrintA
                             
fc8e :                       df_rt_asm_printCR
                             	; Check the option bit 0 (Print)
fc8e : a901             [ 2] 	lda #0x01
fc90 : 259b             [ 3] 	and df_asmopt
fc92 : f0bb             [ 3] 	beq df_rt_asm_print_rts
fc94 : 4c68c1           [ 3] 	jmp utilPrintCRLF
                             
fc97 :                       df_rt_asm_printCH
fc97 : 8538             [ 3] 	sta tmp_d
                             	; Check the option bit 0 (Print)
fc99 : a901             [ 2] 	lda #0x01
fc9b : 259b             [ 3] 	and df_asmopt
fc9d : f0b0             [ 3] 	beq df_rt_asm_print_rts
fc9f : a538             [ 3] 	lda tmp_d
fca1 : 4c2ac4           [ 3] 	jmp io_put_ch
                             
                             ; Print an entire line, but save df_exeoff
fca4 :                       df_rt_asm_printline
                             	; Check the option bit 0 (Print)
fca4 : a901             [ 2] 	lda #0x01
fca6 : 259b             [ 3] 	and df_asmopt
fca8 : f0a5             [ 3] 	beq df_rt_asm_print_rts
fcaa : a588             [ 3] 	lda df_exeoff
fcac : 48               [ 3] 	pha
                             	; use df_tmpptra
                             	_cpyZPWord df_currlin, df_tmpptra
                             
fcb5 : 209def           [ 6] 	jsr df_rt_list_line_only
fcb8 : 68               [ 4] 	pla
fcb9 : 8588             [ 3] 	sta df_exeoff
fcbb : 60               [ 6] 	rts
                             
                             
                             ; Calculate the addressing mode
                             ; Populate the operand as needed
                             ; A and df_asmadmd contain Addressing Mode
fcbc :                       df_rt_asm_addrmode	
                             	; Store nothing in address mode
fcbc : a900             [ 2] 	lda #AM_NONE
fcbe : 859c             [ 3] 	sta df_asmadmd
                             	; zero out the operand
fcc0 : a900             [ 2] 	lda #0
fcc2 : 859e             [ 3] 	sta df_asmoprnd
AS65 Assembler for R6502 [1.42].                                     Page  288
-------------------------------- bank\bank0.s --------------------------------

fcc4 : 859f             [ 3] 	sta df_asmoprnd+1
fcc6 : 2073ee           [ 6] 	jsr df_rt_eos			; End of statement?
fcc9 : b00d             [ 3] 	bcs df_rt_asm_AM_IMP
                             	; jump over whitespace
fccb : 2052e6           [ 6] 	jsr df_rt_skip_ws
                             	; Check what it is
fcce : c923             [ 2] 	cmp #'#'				; Immediate?
fcd0 : f034             [ 4] 	beq df_rt_asm_AM_IMM
fcd2 : c928             [ 2] 	cmp #'('				; Indirect something?
fcd4 : f03a             [ 4] 	beq df_rt_asm_AM_INDIRECT
                             	; Must be ABS,ZP or REL
fcd6 : d005             [ 3] 	bne df_rt_asm_ABSREL
                             ; Process IMP/ACC
fcd8 :                       df_rt_asm_AM_IMP
fcd8 : a90d             [ 2] 	lda #AM_IMP
fcda : 859c             [ 3] 	sta df_asmadmd
fcdc : 60               [ 6] 	rts
                             ; Process ABS or REL
fcdd :                       df_rt_asm_ABSREL	
                             	; Evaluate operand
fcdd : 2039fd           [ 6] 	jsr df_rt_asm_get_operand
                             
fce0 : 2073ee           [ 6] 	jsr df_rt_eos			; End of statement?
fce3 : b00f             [ 3] 	bcs df_rt_asm_AM_ABS
fce5 : c8               [ 2] 	iny						; Jump over ","
fce6 : b186             [ 5] 	lda (df_currlin),y		; Load X or Y
fce8 : c8               [ 2] 	iny						; Jump over index reg
fce9 : 8588             [ 3] 	sta df_exeoff			; Save exe offset
fceb : c978             [ 2] 	cmp #'x'				; Indirect X?
fced : f012             [ 4] 	beq df_rt_asm_AM_ABSX
                             ; Process ABSY
fcef :                       df_rt_asm_AM_ABSY
fcef : a906             [ 2] 	lda #AM_ZPY				; Go for smallest modes
fcf1 : 859c             [ 3] 	sta df_asmadmd
fcf3 : 60               [ 6] 	rts
                             ; Process what looks like pure ABS, could be REL
fcf4 :                       df_rt_asm_AM_ABS
fcf4 : a001             [ 2] 	ldy #1					; Check first addressing mode
fcf6 : b181             [ 5] 	lda (df_symtab),y
fcf8 : c90f             [ 2] 	cmp #AM_REL
fcfa : f002             [ 3] 	beq df_rt_asm_AM_REL
fcfc : a904             [ 2] 	lda #AM_ZP				; Go for smallest modes
fcfe :                       df_rt_asm_AM_REL
fcfe : 859c             [ 3] 	sta df_asmadmd
fd00 : 60               [ 6] 	rts
                             ; Process ABSX
fd01 :                       df_rt_asm_AM_ABSX
fd01 : a905             [ 2] 	lda #AM_ZPX				; Go for smallest modes
fd03 : 859c             [ 3] 	sta df_asmadmd
fd05 : 60               [ 6] 	rts
                             ; Process Immediate
fd06 :                       df_rt_asm_AM_IMM
                             	; skip over #
fd06 : e688             [ 5] 	inc df_exeoff
                             	; Get operand
fd08 : 2039fd           [ 6] 	jsr df_rt_asm_get_operand
                             	; Mark as immediate
fd0b : a90c             [ 2] 	lda #AM_IMM
fd0d : 859c             [ 3] 	sta df_asmadmd
fd0f : 60               [ 6] 	rts
                             ; Process indirect
fd10 :                       df_rt_asm_AM_INDIRECT
AS65 Assembler for R6502 [1.42].                                     Page  289
-------------------------------- bank\bank0.s --------------------------------

                             	; skip over (
fd10 : e688             [ 5] 	inc df_exeoff
                             	; Calculate the operand
fd12 : 2039fd           [ 6] 	jsr df_rt_asm_get_operand
                             	; what is next char?
fd15 : a488             [ 3] 	ldy df_exeoff
fd17 : b186             [ 5] 	lda (df_currlin),y
fd19 : c929             [ 2] 	cmp #')'			; Could be IND or INDY
fd1b : f009             [ 3] 	beq df_rt_asm_AM_ZPINDORY
                             	; else must be INDX
                             	; skip 'x)'
fd1d : c8               [ 2] 	iny
fd1e : c8               [ 2] 	iny
fd1f : 8488             [ 3] 	sty df_exeoff
fd21 : a908             [ 2] 	lda #AM_ZPINDX
fd23 : 859c             [ 3] 	sta df_asmadmd
fd25 : 60               [ 6] 	rts
                             ; Pure indirect mode found
fd26 :                       df_rt_asm_AM_ZPINDORY
fd26 : a907             [ 2] 	lda #AM_ZPIND			; Assume ZPIND
fd28 : c8               [ 2] 	iny
fd29 : 8488             [ 3] 	sty df_exeoff
                             	; if at end of line/statement then pure indirect
fd2b : 2073ee           [ 6] 	jsr df_rt_eos			; End of statement?
fd2e : b006             [ 3] 	bcs df_rt_asm_AM_ZPIND
                             	; else must be INDY
fd30 : a909             [ 2] 	lda #AM_ZPINDY
                             	; skip ',Y'
fd32 : c8               [ 2] 	iny
fd33 : c8               [ 2] 	iny
fd34 : 8488             [ 3] 	sty df_exeoff
fd36 :                       df_rt_asm_AM_ZPIND
fd36 : 859c             [ 3] 	sta df_asmadmd
fd38 : 60               [ 6] 	rts
                             
                             ; Get and save the operand
                             ; df_asmoprnd contains the result
fd39 :                       df_rt_asm_get_operand
                             	; evaluate
fd39 : 201ee2           [ 6] 	jsr df_rt_neval
                             	; Get the parameter from stack
fd3c : 208ff7           [ 6] 	jsr df_ost_popInt
                             	; put in the operand
fd3f : 869e             [ 3] 	stx df_asmoprnd
fd41 : 859f             [ 3] 	sta df_asmoprnd+1
fd43 : 60               [ 6] 	rts
                             	
                             ; From current symtab entry, find addressing
                             ; mode in A.  AM_NONE=Not found, Y=index
fd44 :                       df_rt_asm_find_addr_mode
                             	; save A in tmp
fd44 : 8538             [ 3] 	sta tmp_d
                             	; Start first entry (1) - 2 = 0xff
fd46 : a0ff             [ 2] 	ldy #0xff
fd48 : a200             [ 2] 	ldx #0
fd4a :                       df_rt_asm_find_addr_mode_loop
                             	; next entry
fd4a : c8               [ 2] 	iny
fd4b : c8               [ 2] 	iny
                             	; if current index > num entries then error
fd4c : 98               [ 2] 	tya
fd4d : 38               [ 2] 	sec
AS65 Assembler for R6502 [1.42].                                     Page  290
-------------------------------- bank\bank0.s --------------------------------

fd4e : e181             [ 6] 	sbc (df_symtab,x)
fd50 : b007             [ 3] 	bcs df_rt_asm_find_addr_mode_err
                             	; is symtab addressing mode what we want?
fd52 : b181             [ 5] 	lda (df_symtab),y
fd54 : c538             [ 3] 	cmp tmp_d
fd56 : d0f2             [ 3] 	bne df_rt_asm_find_addr_mode_loop
                             	; done A=mode, y=index in to df_symtab
fd58 : 60               [ 6] 	rts
fd59 :                       df_rt_asm_find_addr_mode_err
fd59 : a900             [ 2] 	lda #AM_NONE
fd5b :                       df_rt_asm_skip_to_sym_done; Used by function belo
fd5b : 60               [ 6] 	rts
                             
                             
                             ; Skip X amount of symbols in table
                             ; A contains how many addr mode and op code bytes
                             ; df_symtab points to offset byte
fd5c :                       df_rt_asm_skip_to_sym
fd5c : e8               [ 2] 	inx				; so done when X=0
                             	; Start at token symbols beginning
fd5d : a9aa             [ 2] 	lda #lo(df_asm_tokensyms)
fd5f : 8581             [ 3] 	sta df_symtab
fd61 : a9fd             [ 2] 	lda #hi(df_asm_tokensyms)
fd63 : 8582             [ 3] 	sta df_symtab+1
fd65 : a900             [ 2] 	lda #0
fd67 : 8583             [ 3] 	sta df_symoff
fd69 : a8               [ 2] 	tay
fd6a :                       df_rt_asm_skip_to_sym_next
                             	; Get symtable char
fd6a : b181             [ 5] 	lda (df_symtab),y
                             	; if < ' ' then jumped over symbol chars
fd6c : c920             [ 2] 	cmp #' '
fd6e : 9009             [ 3] 	bcc df_rt_asm_skip_to_sym_end
                             	;else next smy tab char
                             	_incZPWord df_symtab
                             
fd76 : 4c6afd           [ 3] 	jmp df_rt_asm_skip_to_sym_next
                             	; Found end of symbol
fd79 :                       df_rt_asm_skip_to_sym_end
                             	;if done then return
fd79 : ca               [ 2] 	dex
fd7a : f0df             [ 3] 	beq df_rt_asm_skip_to_sym_done
                             	;jump over addr and op code by A bytes
fd7c : 38               [ 2] 	sec
fd7d : 6581             [ 3] 	adc df_symtab
fd7f : 8581             [ 3] 	sta df_symtab
                             	_bcc 2
                             
fd83 : e682             [ 5] 	inc df_symtab+1
fd85 : 4c6afd           [ 3] 	jmp df_rt_asm_skip_to_sym_next
                             
fd88 :                       mod_sz_rtasm_e
                             
                             
                             	include "dflat/asmsymtab.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
AS65 Assembler for R6502 [1.42].                                     Page  291
-------------------------------- bank\bank0.s --------------------------------

                             ;*
                             ;*  ASMSYMTAB.S
                             ;*	Mainly this contains the symbol table for asse
                             ;*	mnemonics but also meta data like what address
                             ;*	and the length of opcodes.
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code  
                             
                             	;* Length of each addressing mode
                             	;* ORDER significant!
fd88 :                       df_asm_length
fd88 : 00030303020202..      	db	0,3,3,3,2,2,2,2,2,2,3,3,2,1,1,2,0
                             
                             	; Always try for lowest addressing mode, but
                             	; this table maps to alternative
fd99 :                       df_asm_altaddrmode
fd99 : 00                    	db AM_NONE		;AM_NONE	= 0
fd9a : 00                    	db AM_NONE		;AM_ABS	 	= 1
fd9b : 00                    	db AM_NONE		;AM_ABSX	= 2
fd9c : 00                    	db AM_NONE		;AM_ABSY	= 3
fd9d : 01                    	db AM_ABS		;AM_ZP		= 4
fd9e : 02                    	db AM_ABSX		;AM_ZPX		= 5
fd9f : 03                    	db AM_ABSY		;AM_ZPY		= 6
fda0 : 0a                    	db AM_ABSIND	;AM_ZPIND	= 7
fda1 : 0b                    	db AM_ABSINDX	;AM_ZPINDX	= 8
fda2 : 09                    	db AM_ZPINDY	;AM_ZPINDY	= 9
fda3 : 00                    	db AM_NONE		;AM_ABSIND	= 10
fda4 : 00                    	db AM_NONE		;AM_ABSINDX	= 11
fda5 : 00                    	db AM_NONE		;AM_IMM		= 12
fda6 : 00                    	db AM_NONE		;AM_ACC		= 13
fda7 : 00                    	db AM_NONE		;AM_IMP		= AM_ACC
fda8 : 0f                    	db AM_REL		;AM_REL		= 15
fda9 : 00                    	db AM_NONE		;AM_DIR		= 16
                             
                             
                             	;*	Mnemonic/	How many addressing modes /
                             	;* 	Mode		Opcode for mode
fdaa :                       df_asm_tokensyms
                             	;* Start with directives
fdaa : 2e6f726702            	db	".org",		1*2
fdaf : 1000                  	db	AM_DIR,		0x00
fdb1 : 2e6f707402            	db	".opt",		1*2
fdb6 : 1000                  	db	AM_DIR,		0x00
fdb8 : 2e646202              	db	".db",		1*2
fdbc : 1000                  	db	AM_DIR,		0x00
fdbe : 2e647702              	db	".dw",		1*2
fdc2 : 1000                  	db	AM_DIR,		0x00
fdc4 : 2e647302              	db	".ds",		1*2
fdc8 : 1000                  	db	AM_DIR,		0x00	
                             
fdca : 61646310              	db	"adc",		8*2
fdce : 0c69                  	db	AM_IMM,		0x69
fdd0 : 0465                  	db	AM_ZP,		0x65
fdd2 : 0575                  	db	AM_ZPX,		0x75
fdd4 : 016d                  	db	AM_ABS,		0x6d
fdd6 : 027d                  	db	AM_ABSX,	0x7d
fdd8 : 0379                  	db	AM_ABSY,	0x79
fdda : 0861                  	db	AM_ZPINDX,	0x61
fddc : 0971                  	db	AM_ZPINDY,	0x71
AS65 Assembler for R6502 [1.42].                                     Page  292
-------------------------------- bank\bank0.s --------------------------------

                             	
fdde : 616e6410              	db	"and",		8*2
fde2 : 0c29                  	db	AM_IMM,		0x29
fde4 : 0425                  	db	AM_ZP,		0x25
fde6 : 0535                  	db	AM_ZPX,		0x35
fde8 : 012d                  	db	AM_ABS,		0x2d
fdea : 023d                  	db	AM_ABSX,	0x3d
fdec : 0339                  	db	AM_ABSY,	0x39
fdee : 0821                  	db	AM_ZPINDX,	0x21
fdf0 : 0931                  	db	AM_ZPINDY,	0x31
                             
fdf2 : 636d7010              	db	"cmp",		8*2
fdf6 : 0cc9                  	db	AM_IMM,		0xc9
fdf8 : 04c5                  	db	AM_ZP,		0xc5
fdfa : 05d5                  	db	AM_ZPX,		0xd5
fdfc : 01cd                  	db	AM_ABS,		0xcd
fdfe : 02dd                  	db	AM_ABSX,	0xdd
fe00 : 03d9                  	db	AM_ABSY,	0xd9
fe02 : 08c1                  	db	AM_ZPINDX,	0xc1
fe04 : 09d1                  	db	AM_ZPINDY,	0xd1
                             
fe06 : 656f7210              	db	"eor",		8*2
fe0a : 0c49                  	db	AM_IMM,		0x49
fe0c : 0445                  	db	AM_ZP,		0x45
fe0e : 0555                  	db	AM_ZPX,		0x55
fe10 : 014d                  	db	AM_ABS,		0x4d
fe12 : 025d                  	db	AM_ABSX,	0x5d
fe14 : 0359                  	db	AM_ABSY,	0x59
fe16 : 0841                  	db	AM_ZPINDX,	0x41
fe18 : 0951                  	db	AM_ZPINDY,	0x51
                             
fe1a : 6c646110              	db	"lda",		8*2
fe1e : 0ca9                  	db	AM_IMM,		0xa9
fe20 : 04a5                  	db	AM_ZP,		0xa5
fe22 : 05b5                  	db	AM_ZPX,		0xb5
fe24 : 01ad                  	db	AM_ABS,		0xad
fe26 : 02bd                  	db	AM_ABSX,	0xbd
fe28 : 03b9                  	db	AM_ABSY,	0xb9
fe2a : 08a1                  	db	AM_ZPINDX,	0xa1
fe2c : 09b1                  	db	AM_ZPINDY,	0xb1
                             
fe2e : 6f726110              	db	"ora",		8*2
fe32 : 0c09                  	db	AM_IMM,		0x09
fe34 : 0405                  	db	AM_ZP,		0x05
fe36 : 0515                  	db	AM_ZPX,		0x15
fe38 : 010d                  	db	AM_ABS,		0x0d
fe3a : 021d                  	db	AM_ABSX,	0x1d
fe3c : 0319                  	db	AM_ABSY,	0x19
fe3e : 0801                  	db	AM_ZPINDX,	0x01
fe40 : 0911                  	db	AM_ZPINDY,	0x11
                             
fe42 : 73626310              	db	"sbc",		8*2
fe46 : 0ce9                  	db	AM_IMM,		0xe9
fe48 : 04e5                  	db	AM_ZP,		0xe5
fe4a : 05f5                  	db	AM_ZPX,		0xf5
fe4c : 01ed                  	db	AM_ABS,		0xed
fe4e : 02fd                  	db	AM_ABSX,	0xfd
fe50 : 03f9                  	db	AM_ABSY,	0xf9
fe52 : 08e1                  	db	AM_ZPINDX,	0xe1
fe54 : 09f1                  	db	AM_ZPINDY,	0xf1
                             
fe56 : 73746110              	db	"sta",		8*2
AS65 Assembler for R6502 [1.42].                                     Page  293
-------------------------------- bank\bank0.s --------------------------------

fe5a : 0485                  	db	AM_ZP,		0x85
fe5c : 0595                  	db	AM_ZPX,		0x95
fe5e : 018d                  	db	AM_ABS,		0x8d
fe60 : 029d                  	db	AM_ABSX,	0x9d
fe62 : 0399                  	db	AM_ABSY,	0x99
fe64 : 0881                  	db	AM_ZPINDX,	0x81
fe66 : 0991                  	db	AM_ZPINDY,	0x91
fe68 : 0792                  	db	AM_ZPIND,	0x92
                             
fe6a : 61736c0a              	db	"asl",		5*2
fe6e : 0d0a                  	db	AM_IMP,		0x0a
fe70 : 0406                  	db	AM_ZP,		0x06
fe72 : 0516                  	db	AM_ZPX,		0x16
fe74 : 010e                  	db	AM_ABS,		0x0e
fe76 : 021e                  	db	AM_ABSX,	0x1e
fe78 : 64656308              	db	"dec",		4*2
fe7c : 04c6                  	db	AM_ZP,		0xc6
fe7e : 05d6                  	db	AM_ZPX,		0xd6
fe80 : 01ce                  	db	AM_ABS,		0xce
fe82 : 02de                  	db	AM_ABSX,	0xde
fe84 : 696e6308              	db	"inc",		4*2
fe88 : 04e6                  	db	AM_ZP,		0xe6
fe8a : 05f6                  	db	AM_ZPX,		0xf6
fe8c : 01ee                  	db	AM_ABS,		0xee
fe8e : 02fe                  	db	AM_ABSX,	0xfe
fe90 : 6c73720a              	db	"lsr",		5*2
fe94 : 0d4a                  	db	AM_IMP,		0x4a
fe96 : 0446                  	db	AM_ZP,		0x46
fe98 : 0556                  	db	AM_ZPX,		0x56
fe9a : 014e                  	db	AM_ABS,		0x4e
fe9c : 025e                  	db	AM_ABSX,	0x5e
fe9e : 726f6c0a              	db	"rol",		5*2
fea2 : 0d2a                  	db	AM_IMP,		0x2a
fea4 : 0426                  	db	AM_ZP,		0x26
fea6 : 0536                  	db	AM_ZPX,		0x36
fea8 : 012e                  	db	AM_ABS,		0x2e
feaa : 023e                  	db	AM_ABSX,	0x3e
feac : 726f720a              	db	"ror",		5*2
feb0 : 0d6a                  	db	AM_IMP,		0x6a
feb2 : 0466                  	db	AM_ZP,		0x66
feb4 : 0576                  	db	AM_ZPX,		0x76
feb6 : 016e                  	db	AM_ABS,		0x6e
feb8 : 027e                  	db	AM_ABSX,	0x7e
                             
feba : 62697404              	db	"bit",		2*2
febe : 0424                  	db	AM_ZP,		0x24
fec0 : 012c                  	db	AM_ABS,		0x2c
                             	
fec2 : 62726b02              	db	"brk",		1*2
fec6 : 0d00                  	db	AM_IMP,		0x00
                             	
fec8 : 636c6302              	db	"clc",		1*2
fecc : 0d18                  	db	AM_IMP,		0x18
fece : 636c6402              	db	"cld",		1*2
fed2 : 0dd8                  	db	AM_IMP,		0xd8
fed4 : 636c6902              	db	"cli",		1*2
fed8 : 0d58                  	db	AM_IMP,		0x58
feda : 636c7602              	db	"clv",		1*2
fede : 0db8                  	db	AM_IMP,		0xb8
fee0 : 73656302              	db	"sec",		1*2
fee4 : 0d38                  	db	AM_IMP,		0x38
fee6 : 73656402              	db	"sed",		1*2
AS65 Assembler for R6502 [1.42].                                     Page  294
-------------------------------- bank\bank0.s --------------------------------

feea : 0df8                  	db	AM_IMP,		0xf8
feec : 73656902              	db	"sei",		1*2
fef0 : 0d78                  	db	AM_IMP,		0x78
                             	
fef2 : 63707806              	db	"cpx",		3*2
fef6 : 0ce0                  	db	AM_IMM,		0xe0
fef8 : 04e4                  	db	AM_ZP,		0xe4
fefa : 01ec                  	db	AM_ABS,		0xec
fefc : 63707906              	db	"cpy",		3*2
ff00 : 0cc0                  	db	AM_IMM,		0xc0
ff02 : 04c4                  	db	AM_ZP,		0xc4
ff04 : 01cc                  	db	AM_ABS,		0xcc
ff06 : 64657802              	db	"dex",		1*2
ff0a : 0dca                  	db	AM_IMP,		0xca
ff0c : 64657902              	db	"dey",		1*2
ff10 : 0d88                  	db	AM_IMP,		0x88
ff12 : 696e7802              	db	"inx",		1*2
ff16 : 0de8                  	db	AM_IMP,		0xe8
ff18 : 696e7902              	db	"iny",		1*2
ff1c : 0dc8                  	db	AM_IMP,		0xc8
ff1e : 6c64780a              	db	"ldx",		5*2
ff22 : 0ca2                  	db	AM_IMM,		0xa2
ff24 : 04a6                  	db	AM_ZP,		0xa6
ff26 : 06b6                  	db	AM_ZPY,		0xb6
ff28 : 01ae                  	db	AM_ABS,		0xae
ff2a : 03be                  	db	AM_ABSY,	0xbe
ff2c : 6c64790a              	db	"ldy",		5*2
ff30 : 0ca0                  	db	AM_IMM,		0xa0
ff32 : 04a4                  	db	AM_ZP,		0xa4
ff34 : 05b4                  	db	AM_ZPX,		0xb4
ff36 : 01ac                  	db	AM_ABS,		0xac
ff38 : 02bc                  	db	AM_ABSX,	0xbc
ff3a : 73747806              	db	"stx",		3*2
ff3e : 0486                  	db	AM_ZP,		0x86
ff40 : 0696                  	db	AM_ZPY,		0x96
ff42 : 018e                  	db	AM_ABS,		0x8e
ff44 : 73747906              	db	"sty",		3*2
ff48 : 0484                  	db	AM_ZP,		0x84
ff4a : 0594                  	db	AM_ZPX,		0x94
ff4c : 018c                  	db	AM_ABS,		0x8c
                             
ff4e : 62636302              	db	"bcc",		1*2
ff52 : 0f90                  	db	AM_REL,		0x90
ff54 : 62637302              	db	"bcs",		1*2
ff58 : 0fb0                  	db	AM_REL,		0xb0
ff5a : 62657102              	db	"beq",		1*2
ff5e : 0ff0                  	db	AM_REL,		0xf0
ff60 : 626d6902              	db	"bmi",		1*2
ff64 : 0f30                  	db	AM_REL,		0x30
ff66 : 626e6502              	db	"bne",		1*2
ff6a : 0fd0                  	db	AM_REL,		0xd0
ff6c : 62706c02              	db	"bpl",		1*2
ff70 : 0f10                  	db	AM_REL,		0x10
ff72 : 62766302              	db	"bvc",		1*2
ff76 : 0f50                  	db	AM_REL,		0x50
ff78 : 62767302              	db	"bvs",		1*2
ff7c : 0f70                  	db	AM_REL,		0x70
ff7e : 6a6d7004              	db	"jmp",		2*2
ff82 : 014c                  	db	AM_ABS,		0x4c
ff84 : 0a6c                  	db	AM_ABSIND,	0x6c
ff86 : 6a737202              	db	"jsr",		1*2
ff8a : 0120                  	db	AM_ABS,		0x20
AS65 Assembler for R6502 [1.42].                                     Page  295
-------------------------------- bank\bank0.s --------------------------------

                             	
ff8c : 6e6f7002              	db	"nop",		1*2
ff90 : 0dea                  	db	AM_IMP,		0xea
ff92 : 70686102              	db	"pha",		1*2
ff96 : 0d48                  	db	AM_IMP,		0x48
ff98 : 70687002              	db	"php",		1*2
ff9c : 0d08                  	db	AM_IMP,		0x08
ff9e : 706c6102              	db	"pla",		1*2
ffa2 : 0d68                  	db	AM_IMP,		0x68
ffa4 : 706c7002              	db	"plp",		1*2
ffa8 : 0d28                  	db	AM_IMP,		0x28
ffaa : 72746902              	db	"rti",		1*2
ffae : 0d40                  	db	AM_IMP,		0x40
ffb0 : 72747302              	db	"rts",		1*2
ffb4 : 0d60                  	db	AM_IMP,		0x60
ffb6 : 74617802              	db	"tax",		1*2
ffba : 0daa                  	db	AM_IMP,		0xaa
ffbc : 74617902              	db	"tay",		1*2
ffc0 : 0da8                  	db	AM_IMP,		0xa8
ffc2 : 74737802              	db	"tsx",		1*2
ffc6 : 0dba                  	db	AM_IMP,		0xba
ffc8 : 74786102              	db	"txa",		1*2
ffcc : 0d8a                  	db	AM_IMP,		0x8a
ffce : 74787302              	db	"txs",		1*2
ffd2 : 0d9a                  	db	AM_IMP,		0x9a
ffd4 : 74796102              	db	"tya",		1*2
ffd8 : 0d98                  	db	AM_IMP,		0x98	
                             	
                             	;* Terminates with a zero
ffda : 00                    	db	0
                             
                             	include	"dflat/asmjmptab.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  ASMJUMPTAB.S
                             ;*  Runtime token jump table for assembler.
                             ;*  dflat uses four key tables to tokenise and ru
                             ;*  - df_tokensyms    - table of token symbols
                             ;*  - df_tk_tokentype - table of token types
                             ;*  - df_tk_tokenjmp  - table of tokenising routi
                             ;*  - df_rt_tokenjmp  - table of runtime routines
                             ;*  The key is the token symbols.  When a line is
                             ;*  in to the raw (untokenised) buffer, df_tokens
                             ;*  used to identify tokens.  The position of the
                             ;*  token is used to then look up type and jump v
                             ;*  in the other tables.
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code  
                             
                             ; Tokeniser jump table
                             ; Only directives needed as all opcodes are handl
                             ; through a single routine
ffdb :                       df_tk_asm_tokenjmp
AS65 Assembler for R6502 [1.42].                                     Page  296
-------------------------------- bank\bank0.s --------------------------------

ffdb : 16e0                  	dw	df_tk_asm_org
ffdd : 16e0                  	dw	df_tk_asm_opt
ffdf : 78df                  	dw	df_tk_asm_db
ffe1 : 78df                  	dw	df_tk_asm_dw
ffe3 : 16e0                  	dw	df_tk_asm_ds
                             
ffe5 :                       df_rt_asm_tokenjmp
ffe5 : d0fa                  	dw	df_rt_asm_org
ffe7 : e2fa                  	dw	df_rt_asm_opt
ffe9 : eafa                  	dw	df_rt_asm_db
ffeb : edfa                  	dw	df_rt_asm_dw
ffed : 65fb                  	dw	df_rt_asm_ds
                             
                             
                             ;****************************************
                             ;* as_init
                             ;* Initialise assembler settings
                             ;****************************************
ffef :                       asm_init
                             	; Zero the PC
ffef : a900             [ 2] 	lda #0
fff1 : 8599             [ 3] 	sta df_asmpc
fff3 : 859a             [ 3] 	sta df_asmpc+1
                             	; Zero the option
fff5 : 859b             [ 3] 	sta df_asmopt
fff7 : 60               [ 6] 	rts
                             
fff8 :                       mod_sz_asm_e
                             
fff8 :                       mod_sz_language_e
                             	; End of Code
fff8 :                       _code_end
                             
No errors in pass 2.
Wrote binary from address $c000 through $ffff.
Total size 16384 bytes.
