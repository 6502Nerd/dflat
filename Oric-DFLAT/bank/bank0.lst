AS65 Assembler for R6502 [1.42].                                     Page    1
-------------------------------- bank\bank0.s --------------------------------

-------------------------------- Symbol Table --------------------------------

              Symbol   Value        Decimal

                 ACR : $000b             11   *
              AM_ABS : $0001              1   *
           AM_ABSIND : $000a             10   *
          AM_ABSINDX : $000b             11   *
             AM_ABSX : $0002              2   *
             AM_ABSY : $0003              3   *
              AM_ACC : $000d             13   *
              AM_DIR : $0010             16   *
              AM_IMM : $000c             12   *
              AM_IMP : $000d             13   *
             AM_NONE : $0000              0   *
              AM_REL : $000f             15   *
               AM_ZP : $0004              4   *
            AM_ZPIND : $0007              7   *
           AM_ZPINDX : $0008              8   *
           AM_ZPINDY : $0009              9   *
              AM_ZPX : $0005              5   *
              AM_ZPY : $0006              6   *
            asm_init : $fed4          65236
               BANK0 : $0001              1
      bin_to_bcd_bit : $c37b          50043
              buf_ef : $003c             60
              buf_hi : $003a             58
              buf_lo : $0039             57
              buf_sz : $003b             59
     CMD_ERR_NOERROR : $0000              0   *
    CMD_ERR_NOTFOUND : $0001              1   *
        CMD_ERR_PARM : $0002              2   *
         CMD_ERR_VAL : $0003              3   *
           CRSR_DOWN : $000a             10   *
           CRSR_LEFT : $0008              8   *
          CRSR_RIGHT : $0009              9   *
             CRSR_UP : $000b             11   *
           CTRL_CAPS : $0014             20   *
        call_irq_brk : $c0e9          49385
     call_irq_master : $c0e6          49382
   call_irq_usercia0 : $c0ec          49388
       cmd_check_cmd : $d305          54021
         cmd_check_d : $d318          54040
         cmd_check_s : $d31c          54044
         cmd_dumpmem : $d34c          54092
    cmd_dumpmemASCII : $d370          54128
      cmd_dumpmemFin : $d3a5          54181
   cmd_dumpmem_ascii : $d382          54146
   cmd_dumpmem_block : $d352          54098
    cmd_dumpmem_byte : $d361          54113
  cmd_dump_skip_ctrl : $d38c          54156
   cmd_dump_skip_del : $d391          54161
           cmd_error : $d30d          54029
       cmd_find_parm : $d3f0          54256
              cmd_hi : $0095            149   *
          cmd_incmem : $d3ac          54188
              cmd_lo : $0094            148   *
   cmd_next_parm_err : $d3fa          54266
       cmd_not_found : $d320          54048
           cmd_parse : $d317          54039
      cmd_parse_byte : $d3c1          54209
  cmd_parse_byte_err : $d3db          54235
AS65 Assembler for R6502 [1.42].                                     Page    2
-------------------------------- bank\bank0.s --------------------------------

 cmd_parse_byte_errp : $d3da          54234
 cmd_parse_next_parm : $d3ef          54255
      cmd_parse_word : $d3dd          54237
            cmd_peek : $d3b3          54195
            cmd_poke : $d3b8          54200
           cmd_ready : $d2f1          54001
          cmd_setmem : $d326          54054
     cmd_setmem_byte : $d32b          54059
      cmd_setmem_err : $d34a          54090
        cmd_word_err : $d3ed          54253
        command_line : $d2f1          54001
       con_bin_digit : $c260          49760
        con_bin_done : $c276          49782
         con_bin_err : $c280          49792
         con_bin_jmp : $c1fe          49662
        con_bin_to_a : $c258          49752
    con_bin_to_a_int : $c25c          49756
         con_dec_jmp : $c1f2          49650
        con_dec_to_a : $c282          49794
    con_dec_to_a_int : $c286          49798
       con_hex_digit : $c221          49697
        con_hex_done : $c24e          49742
         con_hex_err : $c24c          49740
         con_hex_jmp : $c1f8          49656
  con_hex_skip_x_f_1 : $c22e          49710
        con_hex_to_a : $c219          49689
    con_hex_to_a_int : $c21d          49693
           con_n_err : $c201          49665
       con_n_not_dec : $c1f5          49653
       con_n_not_hex : $c1fb          49659
          con_n_to_a : $c1e1          49633
   con_n_to_a_detect : $c203          49667
                DDRA : $0003              3   *
                DDRB : $0002              2   *
         DFERR_ABORT : $0012             18   *
         DFERR_BREAK : $000d             13   *
           DFERR_DIM : $0003              3   *
         DFERR_FNAME : $000b             11   *
     DFERR_IMMEDIATE : $0007              7   *
       DFERR_NEXTFOR : $000a             10   *
        DFERR_NODATA : $000e             14   *
          DFERR_NOIF : $0009              9   *
        DFERR_NOLINE : $0010             16   *
         DFERR_NOORG : $0014             20   *
        DFERR_NOPROC : $0005              5   *
            DFERR_OK : $0000              0   *
      DFERR_PROCPARM : $0006              6   *
      DFERR_QUANTITY : $0013             19   *
        DFERR_RETURN : $0011             17   *
       DFERR_STRLONG : $000c             12   *
        DFERR_SYNTAX : $0001              1   *
      DFERR_TYPEMISM : $0002              2   *
    DFERR_UNCLOSEDIF : $0008              8   *
         DFERR_UNTIL : $0004              4   *
          DFERR_WEND : $000f             15   *
          DFRT_ABORT : $0089            137   *
            DFRT_ASM : $0097            151   *
           DFRT_DATA : $0096            150   *
            DFRT_DEF : $0086            134   *
           DFRT_ELSE : $0093            147   *
         DFRT_ELSEIF : $0095            149   *
         DFRT_ENDDEF : $0087            135   *
AS65 Assembler for R6502 [1.42].                                     Page    3
-------------------------------- bank\bank0.s --------------------------------

          DFRT_ENDIF : $0094            148   *
            DFRT_FOR : $008e            142   *
             DFRT_IF : $0092            146   *
           DFRT_NEXT : $008f            143   *
         DFRT_REPEAT : $008c            140   *
         DFRT_RETURN : $0088            136   *
           DFRT_WEND : $0091            145   *
          DFRT_WHILE : $0090            144   *
            DFST_INT : $0001              1   *
            DFST_STR : $0080            128   *
            DFTK_BYT : $0020             32   *
         DFTK_BYTBIN : $0007              7   *
         DFTK_BYTDEC : $0005              5   *
         DFTK_BYTHEX : $0006              6   *
            DFTK_CHR : $0000              0   *
            DFTK_EOL : $0000              0   *
         DFTK_ESCVAL : $0020             32   *
            DFTK_FLT : $0080            128   *
             DFTK_FN : $0002              2   *
            DFTK_INT : $0010             16   *
         DFTK_INTBIN : $000b             11   *
         DFTK_INTDEC : $0009              9   *
         DFTK_INTHEX : $000a             10   *
             DFTK_KW : $0001              1   *
         DFTK_LINLEN : $0000              0   *
         DFTK_LINNUM : $0001              1   *
             DFTK_OP : $0008              8   *
          DFTK_OPMSK : $0007              7   *
           DFTK_PROC : $0012             18   *
          DFTK_RESVC : $000c             12   *
          DFTK_RESVD : $000d             13   *
          DFTK_RESVE : $000e             14   *
          DFTK_RESVF : $000f             15   *
          DFTK_RESV1 : $0001              1   *
          DFTK_RESV2 : $0002              2   *
          DFTK_RESV3 : $0003              3   *
          DFTK_RESV4 : $0004              4   *
          DFTK_RESV8 : $0008              8   *
          DFTK_RTMSK : $00f8            248   *
          DFTK_STEND : $001f             31   *
            DFTK_STR : $0040             64   *
         DFTK_STRLIT : $0010             16   *
          DFTK_STROP : $0004              4   *
          DFTK_TOKEN : $0080            128   *
            DFTK_VAR : $0011             17   *
        DFTK_VARPARM : $0026             38   *
          DFVVT_ARRY : $0080            128   *
           DFVVT_BYT : $0002              2   *
          DFVVT_DIM1 : $0003              3   *
          DFVVT_DIM2 : $0004              4   *
           DFVVT_FLT : $0008              8   *
            DFVVT_HI : $0002              2   *
           DFVVT_INT : $0001              1   *
            DFVVT_LO : $0001              1   *
          DFVVT_PROC : $0040             64   *
           DFVVT_STR : $0004              4   *
            DFVVT_SZ : $0008              8   *
          DFVVT_TYPE : $0000              0   *
           DF_MEMTOP : $9800          38912   *
        DF_PROGSTART : $0713           1811   *
          dflat_zp_e : $00ab            171
          dflat_zp_s : $005b             91
AS65 Assembler for R6502 [1.42].                                     Page    4
-------------------------------- bank\bank0.s --------------------------------

     dflat_zp_save_e : $00a1            161
     dflat_zp_save_s : $005b             91
          df_asmadmd : $009c            156
           df_asmlen : $00a0            160
         df_asmopcde : $009d            157
         df_asmoprnd : $009e            158
           df_asmopt : $009b            155
            df_asmpc : $0099            153
  df_asm_altaddrmode : $fc83          64643
       df_asm_length : $fc72          64626
    df_asm_tokensyms : $fc94          64660
            df_brkpc : $0062             98
           df_brkval : $0064            100
         df_checkkey : $005b             91
         df_checkmsk : $005c             92
            df_clear : $f6b1          63153
          df_currdat : $0094            148
          df_currlin : $0086            134
         df_curstidx : $0080            128
           df_datoff : $0096            150
           df_eolidx : $007e            126
           df_exeoff : $0088            136
           df_ifnest : $0093            147
            df_immed : $005e             94
             df_init : $f6a4          63140
          df_initrun : $dff3          57331
       df_lexer_line : $d956          55638
  df_lexer_skip_lnum : $d977          55671
          df_linbuff : $0400           1024
          df_lineidx : $0092            146
          df_lineptr : $0090            144
           df_linoff : $007c            124
           df_memtop : $0611           1553
          df_msg_acc : $f874          63604
           df_msg_pc : $f870          63600
         df_msg_xreg : $f877          63607
         df_msg_yreg : $f87a          63610
          df_nextlin : $0089            137
         df_nxtstidx : $007f            127
     df_ost_peekType : $f67a          63098
       df_ost_popInt : $f680          63104
     df_ost_popParmX : $f663          63075
       df_ost_popPtr : $f688          63112
       df_ost_popStr : $f684          63108
      df_ost_pushInt : $f650          63056
     df_ost_pushIntA : $f654          63060
    df_ost_pushParmX : $f63a          63034
      df_ost_pushPtr : $f65f          63071
      df_ost_pushStr : $f65b          63067
          df_parmtop : $0077            119
               df_pc : $0060             96
    df_pg_check_line : $dea5          56997
df_pg_check_next_line : $de8e          56974
df_pg_copyinputtolinbuff : $df40          57152
  df_pg_delete_block : $df08          57096
   df_pg_delete_byte : $df0e          57102
df_pg_delete_next_byte : $df2f          57135
         df_pg_dflat : $df4a          57162
     df_pg_find_line : $de82          56962
    df_pg_getcommand : $df60          57184
     df_pg_inputline : $df38          57144
  df_pg_inputline_ok : $df40          57152
AS65 Assembler for R6502 [1.42].                                     Page    5
-------------------------------- bank\bank0.s --------------------------------

 df_pg_insertlinbyte : $dfe3          57315
    df_pg_insertline : $dfc4          57284
  df_pg_insert_block : $ded3          57043
   df_pg_insert_byte : $dedf          57055
df_pg_insert_next_byte : $defd          57085
   df_pg_line_number : $dfa4          57252
       df_pg_nothing : $dfa3          57251
        df_pg_prompt : $df55          57173
    df_pg_prompt_msg : $dfec          57324
 df_pg_skip_del_line : $dfba          57274
      df_pg_tokenise : $df89          57225
           df_prgend : $0067            103
          df_prgstrt : $0065            101
         df_procargs : $008c            140
          df_procloc : $008d            141
         df_procmode : $008b            139
          df_procptr : $008e            142
df_pr_line_gt_target : $de9a          56986
    df_pr_line_match : $dec8          57032
              df_raw : $0400           1024
              df_rnd : $0097            151
     df_rst_peekByte : $f619          63001
      df_rst_popByte : $f610          62992
      df_rst_popWord : $f62d          63021
     df_rst_pushByte : $f607          62983
     df_rst_pushWord : $f61f          63007
          df_rtspace : $0500           1280
           df_rtstck : $0500           1280
           df_rtstop : $0076            118
         df_rt_abort : $f468          62568
           df_rt_add : $e5c2          58818
          df_rt_addr : $f351          62289
         df_rt_aequb : $e69e          59038
      df_rt_aequbFin : $e6a8          59048
           df_rt_and : $e671          58993
  df_rt_array_exists : $e2d2          58066
     df_rt_arry_parm : $e1e0          57824
    df_rt_arry_parm2 : $e1e7          57831
df_rt_arry_parm2_arry2 : $e1ff          57855
df_rt_arry_parm2_skiparry2 : $e206          57862
df_rt_arry_parm2_term : $e1ef          57839
           df_rt_asc : $f441          62529
           df_rt_asl : $e64b          58955
        df_rt_aslbit : $e651          58961
       df_rt_asldone : $e65b          58971
    df_rt_asm_ABSREL : $fbc7          64455
    df_rt_asm_AM_ABS : $fbde          64478
   df_rt_asm_AM_ABSX : $fbeb          64491
   df_rt_asm_AM_ABSY : $fbd9          64473
    df_rt_asm_AM_IMM : $fbf0          64496
    df_rt_asm_AM_IMP : $fbc2          64450
df_rt_asm_AM_INDIRECT : $fbfa          64506
    df_rt_asm_AM_REL : $fbe8          64488
  df_rt_asm_AM_ZPIND : $fc20          64544
df_rt_asm_AM_ZPINDORY : $fc10          64528
  df_rt_asm_addrmode : $fba6          64422
  df_rt_asm_assemble : $f970          63856
df_rt_asm_assemble_done : $f982          63874
 df_rt_asm_check_alt : $fa7b          64123
   df_rt_asm_command : $f983          63875
      df_rt_asm_data : $f9e1          63969
 df_rt_asm_data_done : $fa1e          64030
AS65 Assembler for R6502 [1.42].                                     Page    6
-------------------------------- bank\bank0.s --------------------------------

 df_rt_asm_data_next : $fa14          64020
df_rt_asm_data_write : $fa1f          64031
df_rt_asm_data_write_err : $fa4d          64077
df_rt_asm_data_write_hi : $fa3b          64059
df_rt_asm_data_write_skip1 : $fa22          64034
df_rt_asm_data_write_skip2 : $fa3f          64063
        df_rt_asm_db : $f9d4          63956
  df_rt_asm_db_start : $f9d9          63961
df_rt_asm_decode_token : $efbf          61375
df_rt_asm_decode_token_done : $f018          61464
df_rt_asm_decode_token_found : $efd6          61398
df_rt_asm_decode_token_keyword : $efdd          61405
df_rt_asm_decode_token_ws : $efc6          61382
       df_rt_asm_dir : $f995          63893
  df_rt_asm_do_label : $f97f          63871
        df_rt_asm_ds : $fa4f          64079
        df_rt_asm_dw : $f9d7          63959
    df_rt_asm_encode : $fab3          64179
df_rt_asm_encode_print : $fb1a          64282
df_rt_asm_encode_relfar : $faea          64234
df_rt_asm_encode_relpos : $fae6          64230
df_rt_asm_encode_skiprel : $faec          64236
df_rt_asm_encode_writebyte : $fb08          64264
df_rt_asm_encode_writeword : $fb10          64272
df_rt_asm_find_addr_mode : $fc2e          64558
df_rt_asm_find_addr_mode_err : $fc43          64579
df_rt_asm_find_addr_mode_loop : $fc34          64564
df_rt_asm_get_operand : $fc23          64547
     df_rt_asm_label : $f9a7          63911
      df_rt_asm_mnem : $fa6c          64108
  df_rt_asm_mnem_chk : $fa8f          64143
 df_rt_asm_mnem_done : $fa9d          64157
  df_rt_asm_mnem_err : $fab1          64177
  df_rt_asm_mnem_try : $fa72          64114
       df_rt_asm_opt : $f9cc          63948
       df_rt_asm_org : $f9ba          63930
   df_rt_asm_printCH : $fb81          64385
   df_rt_asm_printCR : $fb78          64376
 df_rt_asm_printline : $fb8e          64398
  df_rt_asm_printOPC : $fb4a          64330
  df_rt_asm_printOPR : $fb5e          64350
df_rt_asm_printOPR_1 : $fb73          64371
   df_rt_asm_printPC : $fb3a          64314
  df_rt_asm_printSPC : $fb55          64341
df_rt_asm_print_mmen : $fb2a          64298
 df_rt_asm_print_rts : $fb39          64313
df_rt_asm_skip_to_sym : $fc46          64582
df_rt_asm_skip_to_sym_done : $fc45          64581
df_rt_asm_skip_to_sym_end : $fc63          64611
df_rt_asm_skip_to_sym_next : $fc54          64596
    df_rt_asm_string : $f9f7          63991
 df_rt_asm_string_ch : $f9fe          63998
  df_rt_asm_tokenjmp : $feca          65226
        df_rt_assign : $ecb9          60601
    df_rt_assign_str : $ecc6          60614
         df_rt_asubb : $e6a9          59049
      df_rt_asubbFin : $e6b6          59062
   df_rt_binlen_skip : $f22c          61996
         df_rt_bload : $f127          61735
    df_rt_bload_addr : $f14a          61770
         df_rt_bsave : $f15a          61786
   df_rt_bsave_parms : $f20a          61962
AS65 Assembler for R6502 [1.42].                                     Page    7
-------------------------------- bank\bank0.s --------------------------------

         df_rt_bsuba : $e6b7          59063
      df_rt_bsubaFin : $e6c4          59076
          df_rt_call : $f322          62242
       df_rt_calljsr : $f331          62257
     df_rt_check_pos : $e94a          59722
   df_rt_check_while : $e7f0          59376
           df_rt_chr : $f399          62361
        df_rt_circle : $ebe7          60391
           df_rt_cls : $eb3b          60219
         df_rt_comeq : $e71f          59167
         df_rt_comgt : $e716          59158
        df_rt_comgte : $e731          59185
         df_rt_comlt : $e70d          59149
        df_rt_comlte : $e728          59176
       df_rt_comment : $ecca          60618
         df_rt_comne : $e73a          59194
       df_rt_copyStr : $e1a2          57762
    df_rt_copyStr_ch : $e1a4          57764
  df_rt_copyStr_done : $e1ad          57773
       df_rt_copy_fn : $f0be          61630
        df_rt_cursor : $ebaf          60335
          df_rt_data : $ecca          60618
 df_rt_datastatement : $e9b1          59825
   df_rt_datlinstart : $e9a9          59817
    df_rt_datnextlin : $e9b7          59831
      df_rt_datumerr : $e9df          59871
           df_rt_dec : $f3de          62430
    df_rt_dec_binlen : $f226          61990
          df_rt_deek : $f248          62024
           df_rt_def : $f546          62790
        df_rt_deferr : $f4a4          62628
  df_rt_def_find_var : $f553          62803
   df_rt_def_got_var : $f565          62821
df_rt_def_got_varparm : $f562          62818
df_rt_def_initialise_parm : $f5a3          62883
  df_rt_def_load_var : $f583          62851
df_rt_def_load_var_done : $f5bf          62911
df_rt_def_load_var_int : $f5b1          62897
df_rt_def_load_var_int_skip : $f5b4          62900
 df_rt_def_parm_done : $f57b          62843
           df_rt_dim : $eab6          60086
     df_rt_dim2_mul2 : $eb19          60185
       df_rt_dim2_nz : $eb04          60164
     df_rt_dim_alloc : $eaf3          60147
      df_rt_dim_done : $eb38          60216
       df_rt_dim_err : $eb39          60217
   df_rt_dim_findesc : $eab9          60089
 df_rt_dim_next_byte : $eb33          60211
           df_rt_div : $e609          58889
      df_rt_doassign : $ecbc          60604
          df_rt_doke : $f019          61465
        df_rt_doline : $ec00          60416
       df_rt_dosound : $f05e          61534
       df_rt_do_else : $e8bc          59580
       df_rt_elapsed : $f307          62215
          df_rt_else : $e86c          59500
        df_rt_elseif : $e86c          59500
        df_rt_enddef : $f5c9          62921
         df_rt_endif : $e867          59495
           df_rt_eor : $e68f          59023
           df_rt_eos : $eccc          60620
      df_rt_eos_true : $ecda          60634
AS65 Assembler for R6502 [1.42].                                     Page    8
-------------------------------- bank\bank0.s --------------------------------

            df_rt_eq : $e6f9          59129
        df_rt_escjmp : $e595          58773
      df_rt_eval_byt : $e2ed          58093
   df_rt_eval_bytbin : $e1b8          57784
   df_rt_eval_bytdec : $e1b8          57784
   df_rt_eval_bythex : $e1b8          57784
      df_rt_eval_chr : $e1b8          57784
      df_rt_eval_esc : $e0ec          57580
  df_rt_eval_esc_tab : $e0fb          57595
   df_rt_eval_intbin : $e1b8          57784
   df_rt_eval_intdec : $e1b8          57784
   df_rt_eval_inthex : $e1b8          57784
     df_rt_eval_lvar : $e240          57920
   df_rt_eval_lvskip : $e21e          57886
     df_rt_eval_proc : $e2fe          58110
 df_rt_eval_proc_err : $e30b          58123
      df_rt_eval_ptr : $e2f7          58103
 df_rt_eval_reserved : $e1c4          57796
   df_rt_eval_strlit : $e1c6          57798
df_rt_eval_strlit_ch : $e1d6          57814
df_rt_eval_strlit_done : $e1dd          57821
      df_rt_eval_var : $e20b          57867
df_rt_eval_var_dim2adj : $e286          57990
df_rt_eval_var_dim2adjx : $e292          58002
df_rt_eval_var_dim2adjy : $e28d          57997
df_rt_eval_var_do_arry : $e25b          57947
df_rt_eval_var_nomult : $e2a9          58025
df_rt_eval_var_notarry : $e230          57904
 df_rt_eval_var_push : $e2c1          58049
df_rt_eval_var_simple : $e24d          57933
  df_rt_eval_var_str : $e2f6          58102
df_rt_exec_check_key : $e3cb          58315
   df_rt_exec_ctrl_c : $e3d3          58323
   df_rt_exec_ctrl_z : $e3d5          58325
      df_rt_exec_end : $e3c9          58313
 df_rt_exec_find_tok : $e389          58249
df_rt_exec_found_tok : $e38e          58254
 df_rt_exec_init_ptr : $e382          58242
     df_rt_exec_jump : $e3d9          58329
   df_rt_exec_no_key : $e3a2          58274
     df_rt_exec_proc : $f4fc          62716
     df_rt_exec_stat : $e37c          58236
         df_rt_false : $e6cb          59083
  df_rt_file_cleanup : $f0e6          61670
     df_rt_file_errc : $f0d0          61648
 df_rt_findelseendif : $e82f          59439
    df_rt_findescval : $e48e          58510
df_rt_findescval_loop : $e491          58513
      df_rt_findproc : $e446          58438
  df_rt_findproc_cmd : $e458          58456
  df_rt_findproc_err : $e48c          58508
df_rt_findproc_nextstat : $e478          58488
      df_rt_findwend : $e7bd          59325
    df_rt_fname_case : $f0c0          61632
           df_rt_for : $e8bf          59583
 df_rt_generate_lvar : $ec96          60566
           df_rt_get : $f2d9          62169
  df_rt_getbin_parms : $f1e9          61929
df_rt_getbin_parms_loop : $f1eb          61931
     df_rt_getdatatk : $e9c5          59845
       df_rt_getlvar : $e4a8          58536
       df_rt_getnval : $e061          57441
AS65 Assembler for R6502 [1.42].                                     Page    9
-------------------------------- bank\bank0.s --------------------------------

      df_rt_get2Ints : $e30d          58125
      df_rt_get2Strs : $e31c          58140
      df_rt_get_push : $f2ea          62186
     df_rt_get_pushp : $f2e9          62185
      df_rt_get_sync : $f2de          62174
            df_rt_gt : $e6e5          59109
           df_rt_gte : $e6ef          59119
      df_rt_gte_calc : $e6f2          59122
           df_rt_hex : $f3ad          62381
         df_rt_himem : $ebb5          60341
         df_rt_hires : $ebc4          60356
            df_rt_if : $e87e          59518
         df_rt_ifcmd : $e832          59442
        df_rt_ifelse : $e850          59472
        df_rt_ifeval : $e880          59520
  df_rt_ifskipelseif : $e847          59463
       df_rt_if_done : $e86b          59499
      df_rt_if_found : $e85d          59485
      df_rt_if_match : $e827          59431
       df_rt_if_stat : $e811          59409
   df_rt_if_stat_err : $e825          59429
     df_rt_init_done : $e060          57440
 df_rt_init_filename : $f0b2          61618
 df_rt_init_stat_ptr : $e369          58217
      df_rt_init_vvt : $e01e          57374
 df_rt_init_vvt_skip : $e052          57426
 df_rt_init_vvt_slot : $e028          57384
df_rt_init_vvt_slot_undim : $e034          57396
           df_rt_ink : $ebcd          60365
         df_rt_input : $ea4e          59982
     df_rt_input_err : $ea88          60040
     df_rt_input_num : $ea71          60017
     df_rt_input_str : $ea69          60009
    df_rt_ldtokenise : $f10f          61711
          df_rt_left : $f3eb          62443
           df_rt_len : $f435          62517
          df_rt_line : $ec07          60423
        df_rt_lineto : $ebf9          60409
          df_rt_list : $edc0          60864
  df_rt_listcheckvnt : $ed2b          60715
   df_rt_listgotnext : $ed59          60761
   df_rt_listnextvnt : $ed52          60754
   df_rt_listpn_done : $ed69          60777
       df_rt_listprg : $ede7          60903
    df_rt_listprgend : $edef          60911
      df_rt_listproc : $ed6a          60778
    df_rt_listprocch : $ed37          60727
    df_rt_listproccr : $ed42          60738
 df_rt_listprocnames : $ed1f          60703
 df_rt_listprocpause : $ed48          60744
    df_rt_listp_copy : $ed71          60785
    df_rt_listp_done : $edb4          60852
 df_rt_listp_findcmd : $ed9a          60826
 df_rt_listp_findend : $ed93          60819
df_rt_listp_notfound : $edbe          60862
      df_rt_listwait : $ed4f          60751
      df_rt_list_all : $edd3          60883
 df_rt_list_all_line : $ee36          60982
   df_rt_list_decode : $ee42          60994
df_rt_list_decode_esc : $ee74          61044
df_rt_list_decode_token : $ef81          61313
df_rt_list_decode_token_normal : $ef88          61320
AS65 Assembler for R6502 [1.42].                                     Page   10
-------------------------------- bank\bank0.s --------------------------------

   df_rt_list_donvvt : $ef6f          61295
df_rt_list_do_decode_tkn : $ef8f          61327
   df_rt_list_escval : $ee52          61010
  df_rt_list_findvvt : $ef19          61209
df_rt_list_find_asm_sym : $efe8          61416
 df_rt_list_find_sym : $ef98          61336
   df_rt_list_gotvvt : $ef46          61254
df_rt_list_gotvvtend : $ef32          61234
df_rt_list_got_asm_sym : $f006          61446
df_rt_list_got_last_sym : $efa9          61353
  df_rt_list_got_sym : $efad          61357
     df_rt_list_line : $edf5          60917
df_rt_list_line_cont : $ee0f          60943
 df_rt_list_line_fin : $ee33          60979
df_rt_list_line_only : $ee39          60985
df_rt_list_line_only_fin : $ee35          60981
    df_rt_list_linno : $edda          60890
   df_rt_list_linnum : $ef70          61296
  df_rt_list_nexttok : $ee5b          61019
df_rt_list_next_asm_ch : $efed          61421
  df_rt_list_next_ch : $ef9d          61341
df_rt_list_next_line : $ee16          60950
    df_rt_list_pause : $ee04          60932
  df_rt_list_synckey : $ee00          60928
    df_rt_list_token : $ee58          61016
   df_rt_list_vvtend : $ef25          61221
          df_rt_load : $f1cd          61901
       df_rt_loadbin : $f1f6          61942
  df_rt_loadbin_byte : $f1f8          61944
   df_rt_loadbin_inc : $f202          61954
      df_rt_loadline : $f0f4          61684
         df_rt_local : $ea8a          60042
    df_rt_local_done : $eab2          60082
 df_rt_local_findesc : $ea91          60049
           df_rt_lsr : $e65e          58974
        df_rt_lsrbit : $e664          58980
       df_rt_lsrdone : $e66e          58990
       df_rt_lst_bin : $eedf          61151
       df_rt_lst_bit : $eee9          61161
 df_rt_lst_bit_skip0 : $eef1          61169
    df_rt_lst_bytbin : $eed5          61141
    df_rt_lst_bythex : $eeb0          61104
       df_rt_lst_chr : $ee93          61075
df_rt_lst_const_done : $eebf          61119
   df_rt_lst_hex_pre : $eea6          61094
    df_rt_lst_intbin : $eedd          61149
    df_rt_lst_intdec : $eef9          61177
    df_rt_lst_inthex : $eec3          61123
    df_rt_lst_lo_hex : $eeb3          61107
      df_rt_lst_proc : $ef04          61188
  df_rt_lst_reserved : $ee92          61074
    df_rt_lst_strlit : $ef56          61270
  df_rt_lst_strlitch : $ef5d          61277
 df_rt_lst_strlitdon : $ef68          61288
       df_rt_lst_var : $ef04          61188
            df_rt_lt : $e6d1          59089
           df_rt_lte : $e6db          59099
      df_rt_lte_calc : $e6de          59102
           df_rt_mem : $f285          62085
      df_rt_mem_calc : $f2c6          62150
      df_rt_mem_free : $f290          62096
       df_rt_mem_prg : $f2a3          62115
AS65 Assembler for R6502 [1.42].                                     Page   11
-------------------------------- bank\bank0.s --------------------------------

       df_rt_mem_var : $f2b6          62134
           df_rt_mid : $f417          62487
           df_rt_mod : $e62a          58922
       df_rt_monitor : $e792          59282
          df_rt_mult : $e5e8          58856
         df_rt_music : $f06e          61550
       df_rt_nassign : $ec79          60537
            df_rt_ne : $e703          59139
         df_rt_neval : $e067          57447
    df_rt_neval_done : $e0b3          57523
   df_rt_neval_donow : $e0d6          57558
     df_rt_neval_esc : $e091          57489
df_rt_neval_nextbyte : $e0bb          57531
    df_rt_neval_optk : $e06a          57450
 df_rt_neval_process : $e0aa          57514
  df_rt_neval_pushOp : $e0e7          57575
      df_rt_neval_tk : $e098          57496
   df_rt_neval_tk_fn : $e0b4          57524
   df_rt_neval_tk_op : $e0c0          57536
  df_rt_neval_tk_opp : $e0bf          57535
           df_rt_new : $e795          59285
          df_rt_next : $e8fd          59645
     df_rt_nextdatum : $e999          59801
      df_rt_nextstat : $e3f1          58353
  df_rt_nextstat_err : $e41d          58397
   df_rt_nextstat_ln : $e408          58376
    df_rt_next_check : $e94d          59725
      df_rt_next_err : $e956          59734
      df_rt_noif_err : $e87c          59516
df_rt_openforbinload : $f11e          61726
df_rt_openforbinsave : $f115          61717
            df_rt_or : $e680          59008
         df_rt_paper : $ebd3          60371
     df_rt_parm_pop3 : $e343          58179
    df_rt_parm_2ints : $e32b          58155
    df_rt_parm_3ints : $e336          58166
    df_rt_parm_4ints : $e34d          58189
    df_rt_parse_file : $f0c8          61640
          df_rt_peek : $f24a          62026
         df_rt_pixel : $f2fa          62202
       df_rt_pixmode : $ebc7          60359
          df_rt_play : $f083          61571
          df_rt_plot : $eb3e          60222
       df_rt_plotstr : $eb70          60272
     df_rt_plotstrch : $eb81          60289
   df_rt_plotstrdone : $ebae          60334
    df_rt_plot_h_int : $eb67          60263
    df_rt_plot_h_str : $eb9c          60316
         df_rt_point : $ebdd          60381
          df_rt_poke : $f028          61480
      df_rt_pop_stat : $e42d          58413
   df_rt_pop_stat_go : $e4c4          58564
         df_rt_print : $ec38          60472
       df_rt_printat : $ec2e          60462
       df_rt_println : $ec71          60529
    df_rt_print_done : $ec6e          60526
  df_rt_print_gotstr : $ec62          60514
     df_rt_print_num : $e97e          59774
     df_rt_print_str : $e985          59781
  df_rt_print_string : $ec68          60520
  df_rt_print_str_ch : $e98e          59790
df_rt_print_str_done : $e998          59800
AS65 Assembler for R6502 [1.42].                                     Page   12
-------------------------------- bank\bank0.s --------------------------------

      df_rt_print_ws : $ec3b          60475
          df_rt_proc : $f4a6          62630
     df_rt_proc_addr : $f4d0          62672
    df_rt_proc_local : $f5f3          62963
df_rt_proc_local_load : $f5fa          62970
  df_rt_proc_parmerr : $f4a4          62628
df_rt_proc_parm_done : $f4ef          62703
df_rt_proc_parm_none : $f4f0          62704
df_rt_proc_push_parm : $f4db          62683
df_rt_proc_unloadvar : $f5cf          62927
df_rt_proc_unload_done : $f5ef          62959
     df_rt_push_int1 : $f32e          62254
     df_rt_push_stat : $e421          58401
     df_rt_putintres : $e5bb          58811
          df_rt_read : $ea36          59958
      df_rt_readbyte : $f24b          62027
 df_rt_readbyte_skip : $f260          62048
     df_rt_readdatum : $e9e1          59873
     df_rt_read_done : $ea4b          59979
 df_rt_read_find_var : $ea38          59960
         df_rt_renum : $ecdc          60636
      df_rt_renum_do : $ecf0          60656
    df_rt_renum_next : $ed0f          60687
      df_rt_renum_ok : $ecec          60652
  df_rt_renum_update : $ecf7          60663
        df_rt_repeat : $e958          59736
         df_rt_reset : $f233          62003
        df_rt_return : $f5c6          62918
         df_rt_right : $f3fc          62460
           df_rt_rnd : $f263          62051
     df_rt_rnd_noeor : $f277          62071
       df_rt_rnd_set : $f27e          62078
           df_rt_run : $eccb          60619
     df_rt_run_token : $e3e2          58338
          df_rt_sadd : $e97d          59773
       df_rt_sassign : $ec90          60560
          df_rt_save : $f17b          61819
       df_rt_savebin : $f208          61960
  df_rt_savebin_byte : $f216          61974
   df_rt_savebin_inc : $f220          61984
          df_rt_scrn : $f2ed          62189
           df_rt_seq : $e76e          59246
         df_rt_seval : $e121          57633
    df_rt_seval_copy : $e17b          57723
    df_rt_seval_done : $e19e          57758
     df_rt_seval_esc : $e147          57671
df_rt_seval_esc_proc : $e19c          57756
df_rt_seval_esc_strlit : $e196          57750
 df_rt_seval_esc_var : $e177          57719
df_rt_seval_nextbyte : $e191          57745
    df_rt_seval_optk : $e12f          57647
      df_rt_seval_tk : $e155          57685
   df_rt_seval_tk_fn : $e16e          57710
   df_rt_seval_tk_op : $e16a          57706
           df_rt_sgn : $f334          62260
         df_rt_sgn_n : $f347          62279
         df_rt_sgn_z : $f34c          62284
           df_rt_sgt : $e765          59237
          df_rt_sgte : $e750          59216
df_rt_skipinitdataptr : $e9cf          59855
 df_rt_skipnestendif : $e85a          59482
    df_rt_skipnestif : $e84d          59469
AS65 Assembler for R6502 [1.42].                                     Page   13
-------------------------------- bank\bank0.s --------------------------------

       df_rt_skip_ws : $e49b          58523
  df_rt_skip_ws_loop : $e49e          58526
           df_rt_slt : $e75e          59230
          df_rt_slte : $e743          59203
    df_rt_snd_common : $f032          61490
           df_rt_sne : $e757          59223
         df_rt_sound : $f05b          61531
df_rt_sound_env_skip : $f058          61528
   df_rt_sound_noise : $f065          61541
       df_rt_sprchar : $f46a          62570
        df_rt_sprhit : $f492          62610
df_rt_sprhit_inactive : $f49e          62622
       df_rt_sprinit : $f489          62601
      df_rt_sprmulti : $f48c          62604
        df_rt_sprpos : $f474          62580
        df_rt_sprupd : $f480          62592
         df_rt_stick : $f2d3          62163
 df_rt_strlen_common : $f359          62297
  df_rt_strlen_count : $f35f          62303
      df_rt_str_comp : $e775          59253
 df_rt_str_comp_byte : $e77a          59258
   df_rt_str_comp_eq : $e78f          59279
df_rt_str_comp_false : $e74a          59210
   df_rt_str_comp_gt : $e78c          59276
   df_rt_str_comp_lt : $e789          59273
 df_rt_str_comp_true : $e74d          59213
    df_rt_str_cpy_ch : $f379          62329
   df_rt_str_extract : $f366          62310
           df_rt_sub : $e5d5          58837
          df_rt_sval : $e125          57637
          df_rt_text : $ebc1          60353
         df_rt_tload : $f0ec          61676
      df_rt_tokenjmp : $e4cd          58573
          df_rt_true : $e6c5          59077
         df_rt_tsave : $f0d2          61650
df_rt_unexpected_end : $e3d7          58327
         df_rt_until : $e960          59744
df_rt_untilnext_done : $e973          59763
     df_rt_until_err : $e97b          59771
           df_rt_val : $f452          62546
       df_rt_val_err : $f466          62566
          df_rt_wait : $ec18          60440
  df_rt_wait_counter : $ec1c          60444
     df_rt_wait_done : $ec2d          60461
   df_rt_wait_skiphi : $ec26          60454
     df_rt_wait_tick : $ec1e          60446
          df_rt_wend : $e7fb          59387
      df_rt_wend_end : $e7f9          59385
      df_rt_wend_err : $e80f          59407
         df_rt_while : $e798          59288
     df_rt_while_cmd : $e7ce          59342
    df_rt_while_done : $e7a8          59304
         df_sevalptr : $007a            122
    df_show_err_done : $f822          63522
     df_show_err_fin : $f801          63489
    df_show_err_find : $f7b5          63413
  df_show_err_linnum : $f7e8          63464
    df_show_err_skip : $f7b9          63417
               df_sp : $005f             95
          df_starend : $0074            116
         df_starstrt : $0072            114
         df_strbuffz : $0078            120
AS65 Assembler for R6502 [1.42].                                     Page   14
-------------------------------- bank\bank0.s --------------------------------

          df_stridxz : $0079            121
      df_str_src_end : $f38e          62350
        df_st_malloc : $f68c          63116
df_st_typemismatcherr : $f678          63096
          df_syminiz : $0084            132
           df_symoff : $0083            131
           df_symtab : $0081            129
         df_tk_abort : $de5a          56922
           df_tk_add : $de5a          56922
          df_tk_addr : $de37          56887
           df_tk_and : $de5a          56922
        df_tk_arrvar : $d813          55315
           df_tk_asc : $de2d          56877
           df_tk_asl : $de5a          56922
 df_tk_asm_addr_mode : $f911          63761
df_tk_asm_addr_mode_ok : $f900          63744
df_tk_asm_addr_mode_1 : $f926          63782
df_tk_asm_addr_mode_2 : $f930          63792
df_tk_asm_checknexttok : $f8b9          63673
df_tk_asm_checktokch : $f8bb          63675
        df_tk_asm_db : $ddc1          56769
        df_tk_asm_ds : $de5f          56927
        df_tk_asm_dw : $ddc1          56769
df_tk_asm_exec_parser : $f902          63746
df_tk_asm_foundsymend : $f8e1          63713
  df_tk_asm_matchtok : $f8ab          63659
  df_tk_asm_mnemonic : $f8a0          63648
       df_tk_asm_opt : $de5f          56927
       df_tk_asm_org : $de5f          56927
df_tk_asm_parse_command : $f87d          63613
df_tk_asm_parse_command_err : $f89f          63647
df_tk_asm_parse_command_symbol : $f8a6          63654
  df_tk_asm_symfound : $f8f4          63732
df_tk_asm_symnextentry : $f8d2          63698
df_tk_asm_symnomatch : $f8d0          63696
  df_tk_asm_tokenjmp : $fec0          65216
        df_tk_assign : $dd6a          56682
         df_tk_bload : $de65          56933
          df_tk_body : $d97f          55679
         df_tk_bsave : $de6f          56943
          df_tk_call : $de4c          56908
      df_tk_callproc : $de21          56865
          df_tk_char : $d76b          55147
      df_tk_char_err : $d713          55059
         df_tk_chdir : $de5f          56927
  df_tk_checknexttok : $da0b          55819
    df_tk_checktokch : $da28          55848
           df_tk_chr : $de2d          56877
        df_tk_circle : $de6f          56943
     df_tk_closebrkt : $de32          56882
           df_tk_cls : $de5a          56922
        df_tk_colour : $de6f          56943
       df_tk_comment : $dd73          56691
  df_tk_comment_done : $dd7e          56702
         df_tk_const : $d7a9          55209
     df_tk_const_err : $d7c9          55241
df_tk_const_try_char : $d7c2          55234
 df_tk_const_try_num : $d7b8          55224
 df_tk_const_try_str : $d7bb          55227
        df_tk_cursor : $de5f          56927
          df_tk_data : $ddc1          56769
     df_tk_data_done : $ddbf          56767
AS65 Assembler for R6502 [1.42].                                     Page   15
-------------------------------- bank\bank0.s --------------------------------

           df_tk_dec : $de2d          56877
          df_tk_deek : $de2d          56877
           df_tk_def : $de05          56837
           df_tk_del : $de5f          56927
           df_tk_dim : $dde7          56807
           df_tk_dir : $de5a          56922
           df_tk_div : $de5a          56922
          df_tk_doke : $de65          56933
          df_tk_done : $d9ae          55726
       df_tk_elapsed : $de37          56887
          df_tk_else : $de5a          56922
        df_tk_elseif : $de5f          56927
        df_tk_enddef : $de5a          56922
         df_tk_endif : $de5a          56922
           df_tk_eor : $de5a          56922
            df_tk_eq : $de5a          56922
         df_tk_error : $dd68          56680
      df_tk_errortab : $f6e7          63207
        df_tk_error2 : $de2b          56875
   df_tk_error_atpos : $f78e          63374
   df_tk_error_error : $f794          63380
  df_tk_error_inline : $f784          63364
   df_tk_exec_parser : $d9d0          55760
        df_tk_expect : $d707          55047
      df_tk_expectok : $d705          55045
    df_tk_expect_tok : $d715          55061
df_tk_expect_tok_err : $d720          55072
df_tk_expect_tok_fatal : $d725          55077
    df_tk_expression : $d912          55570
     df_tk_expre_err : $d91d          55581
     df_tk_expr_more : $ddc6          56774
           df_tk_for : $de0a          56842
   df_tk_foundsymend : $da57          55895
           df_tk_get : $de2d          56877
       df_tk_get_buf : $d695          54933
  df_tk_get_buf_null : $d69f          54943
            df_tk_gt : $de5a          56922
           df_tk_gte : $de5a          56922
         df_tk_hchar : $de6f          56943
           df_tk_hex : $de2d          56877
         df_tk_himem : $de5f          56927
         df_tk_hires : $de5a          56922
            df_tk_if : $de5f          56927
           df_tk_imm : $f946          63814
      df_tk_indirect : $f949          63817
 df_tk_indirect_done : $f96e          63854
    df_tk_indirect_y : $f95d          63837
           df_tk_ink : $de5f          56927
         df_tk_input : $ddcf          56783
       df_tk_isalpha : $d6d8          55000
    df_tk_isalphanum : $d6e5          55013
 df_tk_isalpha_false : $d6d5          54997
         df_tk_isbin : $d6b9          54969
    df_tk_isbin_true : $d6c2          54978
       df_tk_isdigit : $d6ae          54958
 df_tk_isdigit_false : $d6b7          54967
         df_tk_isEOS : $d924          55588
         df_tk_ishex : $d6c3          54979
   df_tk_ishex_false : $d6d5          54997
   df_tk_ishex_truep : $d6d3          54995
        df_tk_isproc : $d6eb          55019
   df_tk_isproc_true : $d6f0          55024
AS65 Assembler for R6502 [1.42].                                     Page   16
-------------------------------- bank\bank0.s --------------------------------

          df_tk_isws : $d700          55040
    df_tk_isws_false : $d705          55045
          df_tk_left : $de40          56896
           df_tk_len : $de2d          56877
          df_tk_line : $de77          56951
       df_tk_linenum : $d9df          55775
        df_tk_lineto : $de65          56933
    df_tk_line_empty : $d9cc          55756
          df_tk_list : $dda3          56739
df_tk_listp_procname : $dd80          56704
df_tk_listp_procname_ch : $dd8f          56719
df_tk_listp_procname_err : $dda1          56737
df_tk_listp_procname_ok : $dda0          56736
     df_tk_list_done : $ddb3          56755
     df_tk_list_line : $ddaf          56751
    df_tk_list_procs : $dda8          56744
          df_tk_load : $de5f          56927
         df_tk_local : $ddf6          56822
      df_tk_localvar : $d7fd          55293
 df_tk_localvar_cont : $d803          55299
           df_tk_lsr : $de5a          56922
            df_tk_lt : $de5a          56922
           df_tk_lte : $de5a          56922
      df_tk_matchtok : $d9fe          55806
df_tk_matchtok_skip_op : $da24          55844
           df_tk_mem : $de2d          56877
           df_tk_mid : $de46          56902
           df_tk_mod : $de5a          56922
       df_tk_monitor : $de5a          56922
          df_tk_mult : $de5a          56922
         df_tk_music : $de77          56951
         df_tk_narry : $d892          55442
     df_tk_narry_end : $d89f          55455
         df_tk_nbrkt : $d8a4          55460
            df_tk_ne : $de5a          56922
           df_tk_new : $de5a          56922
          df_tk_next : $de5a          56922
     df_tk_next_expr : $ddc1          56769
           df_tk_nop : $d8fd          55549
     df_tk_nop_false : $d8bc          55484
       df_tk_not_eos : $d91c          55580
         df_tk_nterm : $d8b1          55473
    df_tk_nterm_cont : $d8be          55486
    df_tk_nterm_done : $d8bc          55484
     df_tk_nterm_err : $d8fb          55547
    df_tk_nterm_proc : $d8ac          55468
   df_tk_nterm_tryfn : $d8cb          55499
df_tk_nterm_try_const : $d8f5          55541
df_tk_nterm_try_proc : $d8e1          55521
 df_tk_nterm_try_var : $d8ed          55533
           df_tk_num : $d727          55079
       df_tk_num_bin : $d756          55126
       df_tk_num_err : $d713          55059
    df_tk_num_hexbin : $d748          55112
       df_tk_num_put : $d75e          55134
            df_tk_or : $de5a          56922
         df_tk_paper : $de5f          56927
          df_tk_parm : $d7eb          55275
 df_tk_parm_skip_var : $d7f8          55288
    df_tk_parseerror : $d9ce          55758
 df_tk_parse_command : $d93e          55614
df_tk_parse_command_done : $d954          55636
AS65 Assembler for R6502 [1.42].                                     Page   17
-------------------------------- bank\bank0.s --------------------------------

df_tk_parse_command_err : $d955          55637
df_tk_parse_user_proc : $d934          55604
          df_tk_peek : $de2d          56877
      df_tk_peek_buf : $d68f          54927
         df_tk_pixel : $de40          56896
       df_tk_pixmode : $de5f          56927
          df_tk_play : $de77          56951
          df_tk_plot : $de6f          56943
         df_tk_point : $de65          56933
          df_tk_poke : $de65          56933
     df_tk_preassign : $dd58          56664
         df_tk_print : $ddba          56762
       df_tk_printat : $ddb4          56756
       df_tk_println : $ddba          56762
    df_tk_print_done : $ddbf          56767
          df_tk_proc : $d81e          55326
     df_tk_proc_call : $d85a          55386
    df_tk_proc_comma : $d874          55412
      df_tk_proc_err : $d890          55440
     df_tk_proc_errp : $d88f          55439
   df_tk_proc_noparm : $d87d          55421
    df_tk_proc_parms : $d84d          55373
df_tk_proc_skip_args : $d88d          55437
df_tk_proc_skip_call : $d863          55395
  df_tk_put_overflow : $d6ac          54956
       df_tk_put_tok : $d6a0          54944
          df_tk_read : $ddd8          56792
         df_tk_renum : $de6f          56943
        df_tk_repeat : $de5a          56922
         df_tk_reset : $de23          56867
        df_tk_return : $de5c          56924
         df_tk_right : $de40          56896
           df_tk_rnd : $de2d          56877
          df_tk_rts1 : $d6ea          55018
           df_tk_run : $de5a          56922
          df_tk_save : $de5f          56927
          df_tk_scrn : $de40          56896
           df_tk_sgn : $de2d          56877
       df_tk_skip_ws : $d6f1          55025
    df_tk_skip_1_spc : $d992          55698
         df_tk_sound : $de6f          56943
       df_tk_sprchar : $de65          56933
        df_tk_sprhit : $de2d          56877
       df_tk_sprinit : $de5a          56922
     df_tk_spritepos : $de6f          56943
      df_tk_sprmulti : $de65          56933
        df_tk_sprpos : $de6f          56943
        df_tk_sprupd : $de5a          56922
         df_tk_stick : $de32          56882
           df_tk_str : $d787          55175
        df_tk_str_ch : $d78f          55183
       df_tk_str_don : $d7a0          55200
       df_tk_str_err : $d7a7          55207
           df_tk_sub : $de5a          56922
      df_tk_symfound : $da68          55912
df_tk_symfound_final : $da78          55928
  df_tk_symnextentry : $da48          55880
    df_tk_symnomatch : $da46          55878
   df_tk_symnomatchp : $da45          55877
          df_tk_text : $de5a          56922
         df_tk_tload : $de5f          56927
      df_tk_tokenjmp : $dc1e          56350
AS65 Assembler for R6502 [1.42].                                     Page   18
-------------------------------- bank\bank0.s --------------------------------

     df_tk_tokentype : $dce6          56550
df_tk_tok_expression : $d91e          55582
    df_tk_try_assign : $d9a9          55721
   df_tk_try_command : $d9a4          55716
         df_tk_tsave : $de5f          56927
         df_tk_until : $de5f          56927
           df_tk_val : $de2d          56877
           df_tk_var : $d7cb          55243
      df_tk_variable : $dd4a          56650
        df_tk_var_ck : $d7e1          55265
      df_tk_var_cont : $d7d1          55249
    df_tk_var_noarry : $d7a5          55205
         df_tk_vpeek : $de2d          56877
          df_tk_wait : $de5f          56927
          df_tk_wend : $de5a          56922
         df_tk_while : $de5f          56927
      df_tk_ws_loop1 : $d6f1          55025
        df_tk_2parms : $de65          56933
        df_tk_3parms : $de6f          56943
        df_tk_4parms : $de77          56951
          df_tmpptra : $00a1            161
          df_tmpptrb : $00a3            163
          df_tmpptrc : $00a5            165
          df_tmpptrd : $00a7            167
          df_tmpptre : $00a9            169
              df_tok : $0480           1152
          df_tokbuff : $0480           1152
        df_tokensyms : $da80          55936
           df_tokoff : $007d            125
       df_trap_error : $f79b          63387
  df_trap_go_monitor : $f7b0          63408
     df_trap_monitor : $f829          63529
      df_trap_normal : $f7b3          63411
           df_varcnt : $0071            113
      df_var_analyse : $d5c9          54729
df_var_analyse_chk_arry : $d610          54800
df_var_analyse_chk_dollar : $d601          54785
df_var_analyse_chk_post : $d601          54785
  df_var_analyse_err : $d5f7          54775
df_var_analyse_fatal_err : $d5ff          54783
   df_var_analyse_ok : $d656          54870
   df_var_check_type : $d53e          54590
         df_var_find : $d504          54532
   df_var_findcreate : $d62a          54826
df_var_findcreate_copy : $d678          54904
df_var_findcreate_create : $d643          54851
df_var_findcreate_err : $d654          54868
df_var_findcreate_errp : $d653          54867
df_var_findcreate_found : $d63c          54844
  df_var_find_no_vnt : $d562          54626
    df_var_find_true : $d567          54631
df_var_initialise_var : $d663          54883
 df_var_insert_space : $d56f          54639
    df_var_match_vnt : $d514          54548
 df_var_match_vnt_do : $d520          54560
df_var_match_vnt_sym : $d524          54564
    df_var_move_byte : $d591          54673
 df_var_move_byte_do : $d59d          54685
df_var_move_byte_fin : $d5ae          54702
     df_var_not_arry : $d621          54817
     df_var_not_proc : $d5db          54747
df_var_type_countlen : $d5de          54750
AS65 Assembler for R6502 [1.42].                                     Page   19
-------------------------------- bank\bank0.s --------------------------------

df_var_type_countlen_alphanum : $d5ee          54766
df_var_type_countlen_done : $d5f3          54771
df_var_vnt_entry_end : $d54f          54607
df_var_vnt_sym_nomatch : $d542          54594
     df_var_zero_vnt : $d66f          54895
           df_vntend : $006b            107
          df_vntstrt : $0069            105
           df_vvtend : $006f            111
          df_vvtstrt : $006d            109
               errno : $005d             93
 fd_cload_getname_pc : $c575          50549
 fd_csave_getname_pc : $c5ca          50634
     fd_getname_addr : $0400           1024
               grc_d : $0043             67   *
               grc_r : $003f             63   *
               grc_x : $0040             64   *
              grc_x0 : $003d             61   *
               grc_y : $0042             66   *
              grc_y0 : $003e             62   *
              grl_dx : $0041             65   *
              grl_dy : $0042             66   *
               grl_p : $004b             75   *
            grl_sinx : $004a             74   *
            grl_siny : $004d             77   *
            grl_xyyx : $0043             67   *
              grl_x0 : $003d             61   *
              grl_x1 : $003f             63   *
              grl_y0 : $003e             62   *
              grl_y1 : $0040             64   *
             grl_2dx : $0044             68   *
            grl_2dxy : $0048             72   *
             grl_2dy : $0046             70   *
             gr_char : $0003              3
  gr_check_font_copy : $cc95          52373
gr_check_font_copy_done : $ccac          52396
           gr_circle : $d084          53380
      gr_circle_done : $d0c1          53441
    gr_circle_d_lte0 : $d0b4          53428
      gr_circle_plot : $d091          53393
    gr_circle_points : $d0c2          53442
              gr_cls : $cd80          52608
          gr_cls_col : $cda0          52640
          gr_cls_row : $cd8c          52620
    gr_cls_skip_marg : $cd9c          52636
        gr_copy_byte : $cc6c          52332
         gr_copy_mem : $cc62          52322
         gr_cur_down : $cec5          52933
         gr_cur_left : $cea7          52903
          gr_cur_ptr : $000c             12
        gr_cur_right : $ce95          52885
  gr_cur_skip_at_bot : $ced1          52945
 gr_cur_skip_at_left : $ceb6          52918
   gr_cur_skip_at_tl : $ceba          52922
           gr_cur_up : $cebb          52923
            gr_cur_x : $000a             10
            gr_cur_y : $000b             11
              gr_del : $ced2          52946
       gr_geom_fill1 : $0007              7
         gr_geom_tmp : $0015             21
        gr_geom_tmp2 : $0017             23
              gr_get : $cde7          52711
       gr_getXY_base : $cdc4          52676
AS65 Assembler for R6502 [1.42].                                     Page   20
-------------------------------- bank\bank0.s --------------------------------

          gr_get_key : $ceda          52954
        gr_get_key_2 : $cede          52958
            gr_hchar : $cf93          53139
   gr_hchar_copyline : $cfeb          53227
gr_hchar_copyline_eor : $d001          53249
gr_hchar_copyline_erase : $d011          53265
gr_hchar_copyline_nx : $d026          53286
    gr_hchar_getfont : $cfc6          53190
       gr_hchar_mask : $cfbe          53182
    gr_hchar_rot1bit : $cfd0          53200
gr_hchar_rot1bit_bcc : $cfdb          53211
 gr_hchar_rot1bit_nx : $cfe0          53216
            gr_hcode : $cf79          53113
       gr_hcode_loop : $cf7f          53119
          gr_hires_x : $0010             16
          gr_hires_y : $0011             17
         gr_hi_start : $0001              1
             gr_init : $cc7c          52348
        gr_init_font : $cc4c          52300
        gr_init_geom : $ccad          52397
   gr_init_geom_done : $ccac          52396
       gr_init_hires : $cd03          52483
gr_init_hires_tables : $cd3c          52540
  gr_init_screen_txt : $ccea          52458
     gr_init_tab_col : $cd68          52584
gr_init_tab_col_skip : $cd7a          52602
     gr_init_tab_row : $cd46          52550
              gr_ink : $0012             18
    gr_key_check_key : $ceea          52970
      gr_key_got_key : $cf01          52993
       gr_key_no_key : $cf0c          53004
    gr_key_skip_copy : $cef2          52978
      gr_key_tidy_up : $cf03          52995
             gr_line : $d13a          53562
        gr_line_done : $d214          53780
       gr_line_neg_p : $d204          53764
       gr_line_pixel : $d1cd          53709
 gr_line_skip_dx_neg : $d158          53592
 gr_line_skip_dy_neg : $d165          53605
   gr_line_skip_left : $d195          53653
gr_line_skip_xy_swap : $d185          53637
   gr_line_skip_y_up : $d19d          53661
     gr_line_yx_skip : $d1d9          53721
           gr_margin : $0014             20
             gr_mode : $0000              0
           gr_new_ln : $ce7d          52861
       gr_nl_skip_nl : $ce92          52882
       gr_no_special : $cf21          53025
      gr_offset_40hi : $d231          53809
      gr_offset_40lo : $d215          53781
            gr_paper : $0013             19
            gr_pitch : $000f             15
            gr_pixel : $d04d          53325
          gr_pixmode : $000e             14
             gr_plot : $cdd4          52692
            gr_point : $d053          53331
       gr_point_done : $d083          53379
        gr_point_eor : $d07f          53375
      gr_point_setup : $d035          53301
  gr_point_skip_attr : $d075          53365
      gr_point_write : $d081          53377
        gr_printable : $cf45          53061
AS65 Assembler for R6502 [1.42].                                     Page   21
-------------------------------- bank\bank0.s --------------------------------

        gr_print_msg : $cf64          53092
   gr_print_msg_done : $cf74          53108
   gr_print_msg_loop : $cf6a          53098
  gr_process_special : $cf2a          53034
              gr_put : $cddc          52700
         gr_put_byte : $cf10          53008
     gr_put_byte_low : $cf22          53026
           gr_screen : $0018             24
         gr_scrngeom : $0011             17
    gr_scrngeom_base : $ccbc          52412
   gr_scrngeom_hires : $ccd1          52433
    gr_scrngeom_text : $ccc2          52418
      gr_scroll_char : $ce3f          52799
    gr_scroll_cpy_ln : $ce3c          52796
  gr_scroll_erase_ln : $ce73          52851
      gr_scroll_marg : $ce6f          52847
   gr_scroll_routine : $ce86          52870
        gr_scroll_up : $ce20          52768
          gr_set_cur : $cded          52717
     gr_set_cur_init : $cdee          52718
     gr_set_cur_skip : $ce00          52736
    gr_set_hires_cur : $d048          53320
       gr_special_ch : $cf4b          53067
    gr_special_fn_hi : $cf5c          53084
    gr_special_fn_lo : $cf54          53076
     gr_special_loop : $cf2e          53038
         gr_spr_char : $d2c0          53952
         gr_spr_draw : $d29f          53919
    gr_spr_draw_loop : $d2a1          53921
    gr_spr_draw_next : $d2ad          53933
        gr_spr_erase : $d25b          53851
     gr_spr_erase_do : $d263          53859
   gr_spr_erase_loop : $d25d          53853
   gr_spr_erase_next : $d269          53865
          gr_spr_hit : $d2c6          53958
         gr_spr_init : $d24d          53837
    gr_spr_init_loop : $d24f          53839
   gr_spr_multi_loop : $d2e1          53985
    gr_spr_multi_pos : $d2dd          53981
          gr_spr_new : $d26d          53869
     gr_spr_new_loop : $d26f          53871
     gr_spr_new_next : $d29b          53915
          gr_spr_pos : $d2d0          53968
          gr_spr_put : $d2b1          53937
           gr_text_h : $0009              9
       gr_text_start : $0005              5
           gr_text_w : $0008              8
              HICHAR : $9800          38912   *
              HISCRN : $a000          40960   *
              HITEXT : $bf68          49000   *
          hex_to_bcd : $c364          50020
           hires_col : $9d90          40336   *
          hires_mask : $9e80          40576   *
        hires_row_hi : $9cc8          40136   *
       hires_row_low : $9c00          39936   *
                 IER : $000e             14   *
                 IFR : $000d             13   *
             IFR_CA1 : $0002              2   *
             IFR_CA2 : $0001              1   *
             IFR_CB1 : $0010             16   *
                IO_0 : $0300            768   *
       inc_kb_timers : $c166          49510
AS65 Assembler for R6502 [1.42].                                     Page   22
-------------------------------- bank\bank0.s --------------------------------

            infinity : $c07e          49278
                init : $c4c2          50370
            init_irq : $c0cd          49357
       init_keyboard : $c750          51024
            init_ram : $c4ee          50414
       init_ram_fill : $c4fb          50427
       init_ram_skip : $c500          50432
          init_ram_1 : $c4f7          50423
            init_snd : $d417          54295
       init_snd_regs : $d419          54297
       init_tape_tab : $c538          50488
           init_via0 : $c50e          50446
      init_via0_done : $c520          50464
      init_via0_loop : $c510          50448
       init_via0_tab : $c521          50465
      init_via0_tape : $c50b          50443
              init_2 : $c4c7          50375
             int_div : $d4a1          54433
       int_div_cycle : $d4d3          54483
      int_div_noflip : $d503          54531
        int_div_skip : $d4ed          54509
   int_div_skip_negA : $d4b8          54456
   int_div_skip_negB : $d4cb          54475
       int_fast_mult : $d44d          54349
 int_fast_mult_cycle : $d45d          54365
  int_fast_mult_next : $d46e          54382
            int_mult : $d476          54390
      int_mult_cycle : $d486          54406
       int_mult_next : $d499          54425
             int_str : $c3cd          50125
          int_to_str : $c3ae          50094
       int_to_str_ch : $c399          50073
   int_to_str_ch_fin : $c3ad          50093
      int_to_str_fin : $c3ec          50156
       int_to_str_nz : $c3a6          50086
 int_to_str_skip_neg : $c3c8          50120
         int_vdp_fin : $c15b          49499
     int_vdp_handler : $c140          49472
    io_active_device : $c414          50196
          io_address : $0300            768
            io_block : $0601           1537
           io_buf_sz : $c4a0          50336
            io_close : $c446          50246
          io_close_f : $0008              8
        io_copy_data : $c421          50209
          io_default : $0600           1536
           io_delete : $c449          50249
            io_del_f : $000a             10
          io_devices : $c4a2          50338
          io_device0 : $c4a2          50338
          io_device1 : $c4b2          50354
          io_do_echo : $c469          50281
             io_ext1 : $000c             12
             io_ext2 : $000e             14
         io_get_byte : $0000              0
           io_get_ch : $c43a          50234
    io_get_line_byte : $c456          50262
    io_get_line_done : $c483          50307
             io_init : $c409          50185
          io_null_op : $c49e          50334
        io_open_ext1 : $c44c          50252
        io_open_ext2 : $c44f          50255
AS65 Assembler for R6502 [1.42].                                     Page   23
-------------------------------- bank\bank0.s --------------------------------

           io_open_r : $0004              4
        io_open_read : $c440          50240
           io_open_w : $0006              6
       io_open_write : $c443          50243
       io_print_done : $c49c          50332
       io_print_line : $c48b          50315
  io_print_line_byte : $c492          50322
         io_put_byte : $0002              2
           io_put_ch : $c43d          50237
        io_read_line : $c452          50258
      io_set_default : $c411          50193
        io_skip_echo : $c46c          50284
     io_skip_special : $c477          50295
           io_struct : $0010             16
                 irq : $c0f1          49393
             irq_brk : $c113          49427
             irq_fin : $c10d          49421
           KB_CAPSLK : $0001              1   *
         KB_DEBOUNCE : $0001              1   *
              KB_PRB : $00b0            176   *
          KB_REP_DEL : $0014             20   *
          KB_REP_TIM : $0003              3   *
            KB_SENSE : $0008              8   *
          kb_any_key : $c789          51081
     kb_any_key_none : $c7a9          51113
  kb_any_key_pressed : $c7ab          51115
      kb_any_key_row : $c790          51088
              kb_brk : $c89f          51359
 kb_check_matrix_col : $c7c5          51141
 kb_check_matrix_row : $c7c7          51143
      kb_check_skip4 : $c7ed          51181
             kb_code : $002b             43
         kb_col_mask : $c93f          51519
              kb_deb : $002d             45
          kb_deb_tim : $002e             46
        kb_do_repeat : $c88f          51343
          kb_get_key : $c8a1          51361
          kb_get_try : $c8a5          51365
        kb_in_repeat : $c89b          51355
             kb_last : $002a             42
          kb_no_scan : $c822          51234
      kb_process_new : $c830          51248
              kb_raw : $0029             41
         kb_rdel_tim : $0031             49
         kb_read_got : $c7ab          51115
     kb_read_noshift : $c85d          51293
     kb_read_nothing : $c7f8          51192
         kb_read_raw : $c7ad          51117
   kb_read_raw_force : $c7b2          51122
     kb_read_raw_got : $c7fc          51196
              kb_rep : $002f             47
          kb_rep_tim : $0030             48
      kb_scan_decode : $c826          51238
     kb_scan_got_key : $c8b6          51382
         kb_scan_key : $c80b          51211
        kb_skip_ctrl : $c879          51321
             kb_stat : $002c             44
            kb_stick : $c761          51041
       kb_stick_mask : $c947          51527
        kb_stick_pos : $c770          51056
       kb_store_last : $c897          51351
      kb_table_shift : $c8ff          51455
AS65 Assembler for R6502 [1.42].                                     Page   24
-------------------------------- bank\bank0.s --------------------------------

        kb_table_std : $c8bf          51391
         kernel_init : $c4d0          50384
         kernel_test : $c4ed          50413
                main : $c077          49271
           mem_start : $0713           1811
        mod_sz_asm_e : $fedd          65245
        mod_sz_asm_s : $f87d          63613
       mod_sz_bios_e : $d44d          54349
       mod_sz_bios_s : $c000          49152
        mod_sz_cia_e : $c547          50503
        mod_sz_cia_s : $c50b          50443
      mod_sz_dflat_e : $f6e7          63207
      mod_sz_dflat_s : $d504          54532
      mod_sz_graph_e : $d2f1          54001
      mod_sz_graph_s : $c94c          51532
         mod_sz_io_e : $c4c2          50370
         mod_sz_io_s : $c409          50185
     mod_sz_kernel_e : $c50b          50443
     mod_sz_kernel_s : $c000          49152
   mod_sz_language_e : $fedd          65245
   mod_sz_language_s : $d44d          54349
       mod_sz_proc_e : $f607          62983
       mod_sz_proc_s : $f4a4          62628
   mod_sz_progedit_e : $dff3          57331
   mod_sz_progedit_s : $de82          56962
      mod_sz_rtasm_e : $fc72          64626
      mod_sz_rtasm_s : $f970          63856
     mod_sz_rtsubs_e : $f4a4          62628
     mod_sz_rtsubs_s : $e5bb          58811
    mod_sz_runtime_e : $f607          62983
    mod_sz_runtime_s : $dff3          57331
      mod_sz_sound_e : $d44d          54349
      mod_sz_sound_s : $d400          54272
     mod_sz_sprite_e : $d2f1          54001
     mod_sz_sprite_s : $d24d          53837
      mod_sz_tkasm_e : $f970          63856
      mod_sz_tkasm_s : $f87d          63613
   mod_sz_tokenise_e : $de82          56962
   mod_sz_tokenise_s : $d68f          54927
    mod_sz_toksubs_e : $de82          56962
    mod_sz_toksubs_s : $dd4a          56650
        mod_sz_var_e : $d68f          54927
        mod_sz_var_s : $d504          54532
          msg_errmsg : $d3fd          54269
     msg_hello_world : $c081          49281
           msg_ready : $d3fb          54267
             NUM_ANY : $0000              0   *
             NUM_BIN : $0003              3   *
             NUM_DEC : $0001              1   *
             NUM_HEX : $0002              2   *
                 nmi : $c50a          50442
        null_handler : $c0f0          49392
            null_irq : $c0ef          49391
               num_a : $003d             61
               num_b : $0041             65
             num_buf : $004d             77
             num_tmp : $0049             73
               num_x : $0045             69
                 PCR : $000c             12   *
                 PRA : $0001              1   *
                PRAH : $000f             15   *
                 PRB : $0000              0   *
AS65 Assembler for R6502 [1.42].                                     Page   25
-------------------------------- bank\bank0.s --------------------------------

        print_a_to_d : $c3f8          50168
     print_a_to_d_ch : $c3fd          50173
    print_a_to_d_fin : $c408          50184
           SND_ADBUS : $030f            783   *
        SND_DESELECT : $00dd            221   *
            SND_MODE : $030c            780   *
       SND_REG_CHAPH : $0001              1   *
       SND_REG_CHAPL : $0000              0   *
      SND_REG_CHAVOL : $0008              8   *
       SND_REG_CHBPH : $0003              3   *
       SND_REG_CHBPL : $0002              2   *
      SND_REG_CHBVOL : $000a             10   *
       SND_REG_CHCPH : $0005              5   *
       SND_REG_CHCPL : $0004              4   *
        SND_REG_CHNP : $0006              6   *
         SND_REG_CTL : $0007              7   *
      SND_REG_ENVCYC : $000d             13   *
       SND_REG_ENVPH : $000c             12   *
       SND_REG_ENVPL : $000b             11   *
         SND_REG_IOA : $000e             14   *
         SND_REG_IOB : $000f             15   *
         SND_SELREAD : $00df            223   *
      SND_SELSETADDR : $00ff            255   *
        SND_SELWRITE : $00fd            253   *
                  SR : $000a             10   *
               SWBRK : <macro>
             scratch : $0613           1555
          skip_a_f_1 : $c1a4          49572
          skip_a_f_2 : $c1b3          49587
         skip_kb_deb : $c16c          49516
         skip_kb_rep : $c172          49522
          skip_x_f_1 : $c1bf          49599
          skip_x_f_2 : $c1d4          49620
        snd_get_note : $d400          54272
    snd_get_note_oct : $d40b          54283
        snd_init_tab : $d423          54307
       snd_music_tab : $d433          54323
       snd_note_done : $d414          54292
         snd_sel_reg : $c04e          49230
             snd_set : $c06e          49262
         snd_set_reg : $c05e          49246
        spr_baseadrh : $b4e0          46304   *
        spr_baseadrl : $b4c0          46272   *
            spr_bgnd : $b4a0          46240   *
             spr_chr : $b480          46208   *
            spr_curX : $b400          46080   *
            spr_curY : $b440          46144   *
            spr_newX : $b420          46112   *
            spr_newY : $b460          46176   *
          str_a_to_x : $c198          49560
   str_d_digits_done : $c2d4          49876
         str_d_error : $c280          49792
      str_d_find_end : $c28f          49807
     str_d_found_end : $c29c          49820
        str_d_powers : $c2f1          49905
 str_d_process_digit : $c2aa          49834
      str_d_skip_neg : $c2eb          49899
          str_x_to_a : $c1b4          49588
      str_x_to_a_err : $c1df          49631
     str_x_to_a_errl : $c1de          49630
           TAPE_RATE : $00d0            208   *
            TEXTCHAR : $b400          46080   *
AS65 Assembler for R6502 [1.42].                                     Page   26
-------------------------------- bank\bank0.s --------------------------------

            TEXTSCRN : $bb80          48000   *
         TIMER1_RATE : $4e20          20000   *
                T1CH : $0005              5   *
                T1CL : $0004              4   *
                T1LH : $0007              7   *
                T1LL : $0006              6   *
                T2CH : $0009              9   *
                T2CL : $0008              8   *
             tmp_ahi : $0033             51
             tmp_alo : $0032             50
           tmp_bank1 : $0000              0
           tmp_bank2 : $0001              1
             tmp_bhi : $0035             53
             tmp_blo : $0034             52
             tmp_chi : $0037             55
             tmp_clo : $0036             54
               tmp_d : $0038             56
            tp_back4 : $c558          50520
            tp_block : $0055             85
        tp_block_gap : $c682          50818
      tp_block_gap_1 : $c686          50822
              tp_buf : $0200            512
            tp_close : $c5a8          50600
   tp_close_no_flush : $c5b1          50609
            tp_delay : $0059             89
             tp_flag : $0058             88
        tp_get_block : $c702          50946
  tp_get_block_bytes : $c713          50963
         tp_get_byte : $c6e5          50917
     tp_get_byte_buf : $c6f2          50930
        tp_get_fname : $c58e          50574
  tp_get_fname_start : $c57f          50559
       tp_get_header : $c588          50568
              tp_idx : $0057             87
             tp_init : $c55d          50525
         tp_io_error : $c74e          51022
       tp_open_bread : $c575          50549
      tp_open_bwrite : $c5c0          50624
      tp_open_common : $c565          50533
         tp_open_msg : $c547          50503
        tp_open_read : $c575          50549
       tp_open_write : $c5c6          50630
 tp_open_write_start : $c5ca          50634
      tp_print_block : $c662          50786
        tp_put_block : $c63e          50750
  tp_put_block_bytes : $c654          50772
         tp_put_byte : $c60c          50700
    tp_put_byte_done : $c62f          50735
        tp_put_delay : $c636          50742
         tp_read_bit : $c735          50997
     tp_read_bit_cb1 : $c739          51001
        tp_read_byte : $c721          50977
   tp_read_byte_bits : $c72d          50989
     tp_read_byte_st : $c721          50977
         tp_save_msg : $c550          50512
        tp_write_bit : $c6b0          50864
   tp_write_bit_chk1 : $c6c1          50881
   tp_write_bit_chk2 : $c6d9          50905
     tp_write_bit_t1 : $c6d0          50896
       tp_write_byte : $c68d          50829
   tp_write_byte_bit : $c699          50841
tp_write_byte_nodelay : $c6ae          50862
AS65 Assembler for R6502 [1.42].                                     Page   27
-------------------------------- bank\bank0.s --------------------------------

      tp_write_fname : $c5fe          50686
     tp_write_header : $c5f5          50677
     tt_csave_end_pc : $c5be          50622
   tt_getsync_end_pc : $c5a7          50599
  tt_getsync_loop_pc : $c739          51001
       tt_getsync_pc : $c5a7          50599
   tt_putbyte_end_pc : $c6af          50863
       tt_putbyte_pc : $c68d          50829
  tt_readbyte_end_pc : $c734          50996
      tt_readbyte_pc : $c721          50977
tt_writeleader_end_pc : $c5e6          50662
   tt_writeleader_pc : $c5e6          50662
     twos_complement : $c355          50005
twos_complement_skip_X : $c363          50019
             UTF_ACK : $0001              1   *
             UTF_BEL : $0007              7   *
             UTF_BRK : $001a             26   *
              UTF_CR : $000d             13   *
             UTF_DEL : $007f            127   *
             UTF_ETX : $0003              3   *
              UTF_FF : $000c             12   *
         UTF_SPECIAL : $0020             32   *
       update_timers : $c15c          49500
          utilPrintA : $c183          49539
       utilPrintCRLF : $c17b          49531
        utilPrintSPC : $c173          49523
           VDP_FLASH : $0010             16   *
           vdp_blank : $0010             16
             vdp_cnt : $0008              8
          vdp_cnt_hi : $0009              9
         vdp_cnt_hi2 : $000a             10
          vdp_curcnt : $000c             12
          vdp_curoff : $000d             13
         vdp_curstat : $000e             14
          vdp_curtim : $000b             11
          vdp_curval : $000f             15
  vdp_fill_vram_loop : $cd24          52516
 vdp_fill_vram_noinc : $cd2c          52524
            vdp_font : $c94c          51532
          vdp_font_a : $ca54          51796
             vec_brk : $0004              4
             vec_irq : $0002              2
        vec_usercia0 : $0006              6
             zp_tmp1 : $00ab            171
             zp_tmp2 : $00ac            172
             zp_tmp3 : $00ad            173
             zp_tmp4 : $00ae            174
             ztmp_24 : $003d             61
          _adcZPByte : <macro>
          _addZPWord : <macro>
                _bcc : <macro>
                _bcs : <macro>
           _code_end : $fedd          65245
         _code_start : $c000          49152
          _cpu_stack : $0100            256
          _cpyZPWord : <macro>
              _debug : <macro>
          _decZPWord : <macro>
         _decZPWordA : <macro>
      _end_zero_page : $00af            175
          _incZPWord : <macro>
       _mod_sz_cmd_e : $d400          54272
AS65 Assembler for R6502 [1.42].                                     Page   28
-------------------------------- bank\bank0.s --------------------------------

       _mod_sz_cmd_s : $d2f1          54001
       _PushFalseJmp : <macro>
        _PushTrueJmp : <macro>
             _printA : <macro>
             _printC : <macro>
            _printCA : <macro>
          _printCRLF : <macro>
            _println : <macro>
        _println_low : <macro>
          _printmsgA : <macro>
            _pullAXY : <macro>
            _pushAXY : <macro>
         _rom_vec_0a : $c01e          49182
         _rom_vec_0b : $c021          49185
         _rom_vec_0c : $c024          49188
         _rom_vec_0d : $c027          49191
         _rom_vec_0e : $c02a          49194
         _rom_vec_0f : $c02d          49197
         _rom_vec_00 : $c000          49152
         _rom_vec_01 : $c003          49155
         _rom_vec_02 : $c006          49158
         _rom_vec_03 : $c009          49161
         _rom_vec_04 : $c00c          49164
         _rom_vec_05 : $c00f          49167
         _rom_vec_06 : $c012          49170
         _rom_vec_07 : $c015          49173
         _rom_vec_08 : $c018          49176
         _rom_vec_09 : $c01b          49179
         _rom_vec_10 : $c030          49200
         _rom_vec_11 : $c033          49203
         _rom_vec_12 : $c036          49206
         _rom_vec_13 : $c039          49209
         _rom_vec_14 : $c03c          49212
         _rom_vec_15 : $c03f          49215
         _rom_vec_16 : $c042          49218
         _rom_vec_17 : $c045          49221
         _rom_vec_18 : $c048          49224
         _rom_vec_19 : $c04b          49227
          _sbcZPByte : <macro>
            _sendcmd : <macro>
          _subZPWord : <macro>
            __6502__ : $0001              1

1688 labels used

15783 lines read, no errors in pass 1.
AS65 Assembler for R6502 [1.42].                                     Page   29
-------------------------------- bank\bank0.s --------------------------------

c000 =                       	org 0xc000
c000 :                       mod_sz_bios_s
                             	include "kernel/kernel.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  KERNEL.S
                             ;*	Lol, I thought this would become more sophisti
                             ;*	hence the name 'kernel'. But no, it just initi
                             ;*	memory, VIA, sound and screen, before passing 
                             ;*	to main.
                             ;*	References to banks etc. are from ported code 
                             ;*	did do more stuff, namely helping with ROM ban
                             ;*
                             ;************************************************
                             
                             ;* Include all definition and code files in the r
                             	include "inc/includes.i"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  INCLUDES.S
                             ;*  Main include file for key definitions and mac
                             ;*  Many of the settings here are exremely machin
                             ;*  Defines : IO block addresses, VIA port usage,
                             ;*  settings, useful macros, sound chip registers
                             ;*  and ACIA registers.
                             ;*	Of course the Oric doesn't have a VDP or an AC
                             ;*	so this file could be optimised.
                             ;*
                             ;************************************************
                             
                             ;* The IO block is at 0x0300
0300 =                       IO_0		= 0x0300
                             
0010 =                       VDP_FLASH	= 16				;* 32/50 second flash
                             
4e20 =                       TIMER1_RATE	= 1000000 / 50		;* 50 times per secon
00d0 =                       TAPE_RATE	= 0xd0				;* Assumed required FM freque
                             
                             ;* Standard definitions of 6522 registers
                             ;* As found in the datasheets
0000 =                       PRB			= 0x00
0001 =                       PRA			= 0x01
0002 =                       DDRB		= 0x02
0003 =                       DDRA		= 0x03
0004 =                       T1CL		= 0x04
0005 =                       T1CH		= 0x05
0006 =                       T1LL		= 0x06
0007 =                       T1LH		= 0x07
0008 =                       T2CL		= 0x08
0009 =                       T2CH		= 0x09
AS65 Assembler for R6502 [1.42].                                     Page   30
-------------------------------- bank\bank0.s --------------------------------

000a =                       SR			= 0x0a
000b =                       ACR			= 0x0b
000c =                       PCR			= 0x0c
000d =                       IFR			= 0x0d
000e =                       IER			= 0x0e
000f =                       PRAH		= 0x0f
                             
0001 =                       IFR_CA2		= 0x01
0002 =                       IFR_CA1		= 0x02
0010 =                       IFR_CB1		= 0x10
                             
                             ;* AY-3-8912 definitions
                             ;* The sound chip is accessed through VIA Port A
030f =                       SND_ADBUS	= IO_0+PRAH
030c =                       SND_MODE	= IO_0+PCR
                             
                             ; Values for the PCR register - always enable CB1
00df =                       SND_SELREAD			= 0b11011111
00fd =                       SND_SELWRITE		= 0b11111101
00ff =                       SND_SELSETADDR		= 0b11111111
00dd =                       SND_DESELECT		= 0b11011101
                             
0000 =                       SND_REG_CHAPL	= 0x00
0001 =                       SND_REG_CHAPH	= 0x01
0002 =                       SND_REG_CHBPL	= 0x02
0003 =                       SND_REG_CHBPH	= 0x03
0004 =                       SND_REG_CHCPL	= 0x04
0005 =                       SND_REG_CHCPH	= 0x05
0006 =                       SND_REG_CHNP	= 0x06
0007 =                       SND_REG_CTL		= 0x07
0008 =                       SND_REG_CHAVOL	= 0x08
0009 =                       SND_REG_CHBVOL	= 0x09
000a =                       SND_REG_CHBVOL	= 0x0a
000b =                       SND_REG_ENVPL	= 0x0b
000c =                       SND_REG_ENVPH	= 0x0c
000d =                       SND_REG_ENVCYC	= 0x0d
                             
000e =                       SND_REG_IOA	= 0x0e
000f =                       SND_REG_IOB	= 0x0f
                             
                             
                             ;* Port B
00b0 =                       KB_PRB		= 0xb0			; Upper nibble of PRB default st
0008 =                       KB_SENSE	= 0x08			; Input - Bit 3 port A
0001 =                       KB_CAPSLK	= 0x01			; Id of Caps Lock - maps to Le
                             
0003 =                       KB_REP_TIM	= 3 			; Number of VB periods for the 
0014 =                       KB_REP_DEL	= 20			; Number of VB periods before r
0001 =                       KB_DEBOUNCE	= 1				; Number of VB periods before 
                             
0003 =                       UTF_ETX		= 0x03			; Break character
0007 =                       UTF_BEL		= 0x07
0008 =                       CRSR_LEFT	= 0x08
0009 =                       CRSR_RIGHT	= 0x09
000a =                       CRSR_DOWN	= 0x0a
000b =                       CRSR_UP		= 0x0b
0014 =                       CTRL_CAPS	= 0x14			; CTRL-T to toggle caps
0001 =                       UTF_ACK		= 0x01			; Used for the CTRL-A copy in t
000c =                       UTF_FF		= 0x0c
000d =                       UTF_CR		= 0x0d
001a =                       UTF_BRK		= 0x1a			; Debug - drop in to monitor
007f =                       UTF_DEL		= 0x7f
AS65 Assembler for R6502 [1.42].                                     Page   31
-------------------------------- bank\bank0.s --------------------------------

0020 =                       UTF_SPECIAL = 0x20
                             
0000 =                       CMD_ERR_NOERROR			= 0x00
0001 =                       CMD_ERR_NOTFOUND		= 0x01
0002 =                       CMD_ERR_PARM			= 0x02
0003 =                       CMD_ERR_VAL				= 0x03
                             
                             ;* Number formats for conversion routines
0000 =                       NUM_ANY		= 0x00
0001 =                       NUM_DEC		= 0x01
0002 =                       NUM_HEX		= 0x02
0003 =                       NUM_BIN		= 0x03
                             
                             	
                             
                             ;* USEFUL MACROS HERE
                             
                             ;* Software break to throw errors
                             ;* use like this : SWBRK XX
                             ;* Where XX is the error code
                             SWBRK macro sig
                             	brk
                             	db sig
                             	endm
                             
                             _pushAXY macro
                             	pha
                             	sta tmp_d
                             	txa
                             	pha
                             	tya
                             	pha
                             	lda tmp_d
                             	endm
                             
                             _pullAXY macro
                             	pla
                             	tay
                             	pla
                             	tax
                             	pla
                             	endm
                             
                             _println macro msg
                             	_pushAXY
                             	ldx #lo(msg)
                             	lda #hi(msg)
                             	jsr io_print_line
                             	_pullAXY
                             	endm
                             
                             _println_low macro msg
                             	ldx #lo(msg)
                             	lda #hi(msg)
                             	jsr io_print_line
                             	endm
                             
                             _printmsgA macro msg
                             	_pushAXY
                             	ldx #lo(msg)
                             	lda #hi(msg)
                             	jsr io_print_line
AS65 Assembler for R6502 [1.42].                                     Page   32
-------------------------------- bank\bank0.s --------------------------------

                             	pla
                             	pha
                             	jsr str_a_to_x
                             	jsr _put_byte
                             	txa
                             	jsr _put_byte
                             	lda #UTF_CR
                             	jsr _put_byte
                             	_pullAXY
                             	endm
                             
                             _printA macro
                             	_pushAXY
                             	jsr str_a_to_x
                             	jsr io_put_ch
                             	txa
                             	jsr io_put_ch
                             	_pullAXY
                             	endm
                             
                             _printCRLF macro
                             	pha
                             	lda #UTF_CR
                             	jsr _put_byte
                             	pla
                             	endm
                             
                             _printC macro ch
                             	pha
                             	lda #ch
                             	jsr io_put_ch
                             	pla
                             	endm
                             
                             _printCA macro
                             	pha
                             	jsr _put_byte
                             	pla
                             	endm
                             
                             _sendcmd macro cmd
                             	_pushAXY
                             	ldx #lo(cmd)
                             	lda #hi(cmd)
                             	jsr sd_sendcmd
                             	_pullAXY
                             	endm
                             
                             _incZPWord macro wordp
                             	inc wordp
                             	db	0xd0, 0x02
                             	inc wordp+1
                             	endm
                             
                             _decZPWordA macro wordp
                             	lda wordp
                             	db	0xd0, 0x02
                             	dec wordp+1
                             	dec wordp
                             	endm
                             	
                             _decZPWord macro wordp
AS65 Assembler for R6502 [1.42].                                     Page   33
-------------------------------- bank\bank0.s --------------------------------

                             	pha
                             	sec
                             	lda wordp
                             	sbc #1
                             	sta wordp
                             	lda wordp+1
                             	sbc #0
                             	sta wordp+1
                             	pla
                             	endm
                             
                             _cpyZPWord macro worda,wordb
                             	lda worda
                             	sta wordb
                             	lda worda+1
                             	sta wordb+1
                             	endm
                             	
                             _addZPWord macro worda, wordb
                             	clc
                             	lda worda
                             	adc wordb
                             	sta worda
                             	lda worda+1
                             	adc wordb+1
                             	sta worda+1
                             	endm
                             
                             _subZPWord macro worda, wordb
                             	sec
                             	lda worda
                             	sbc wordb
                             	sta worda
                             	lda worda+1
                             	sbc wordb+1
                             	sta worda+1
                             	endm
                             	
                             _adcZPByte macro worda, byte
                             	clc
                             	lda worda
                             	adc byte
                             	sta worda
                             	db 0x90, 0x02		; bcc 2
                             	inc worda+1
                             	endm
                             
                             _sbcZPByte macro worda, byte
                             	sec
                             	lda worda
                             	sbc byte
                             	sta worda
                             	db 0xb0, 0x02		; bcs 2
                             	inc worda+1
                             	endm
                             
                             _bcc macro skip
                             	db 0x90, skip
                             	endm
                             
                             _bcs macro skip
                             	db 0xb0, skip
AS65 Assembler for R6502 [1.42].                                     Page   34
-------------------------------- bank\bank0.s --------------------------------

                             	endm
                             
                             _debug macro ch
                             	pha
                             	lda #ch
                             	sta 48000
                             	pla
                             	endm
                             	
                             
                             
                             	include "inc/graph.i"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  GRAPH.I
                             ;*  This is the definition file for graphics, spe
                             ;*  The graphics screen handling module.  It is j
                             ;*  structure definition - but this structure is 
                             ;*  record the important attributes of a text scr
                             ;*	This was needed in the previous code due to 32
                             ;*	byte width screens, but Oric only  has 40, so 
                             ;*	could be optimised a little.
                             ;*
                             ;************************************************
                             
                             ; Important screen addresses for the Oric ULA
bb80 =                       TEXTSCRN	=	0xbb80
b400 =                       TEXTCHAR	=	0xb400
a000 =                       HISCRN		=	0xa000
9800 =                       HICHAR		=	0x9800
bf68 =                       HITEXT		=	0xbf68
                             
0000 =                       	struct gr_screen
0000 =                       	db gr_mode					; Text or Hires mode
0001 =                       	dw gr_hi_start				; Address fo hires screen
0003 =                       	dw gr_char					; Start address of charset
0005 =                       	dw gr_text_start			; Start of text memory
0007 =                       	db gr_geom_fill1			; (Not used, maintained for a
0008 =                       	db gr_text_w				; Number of columns
0009 =                       	db gr_text_h				; Number of rows
000a =                       	db gr_cur_x					; Current X position of cursor
000b =                       	db gr_cur_y					; Current Y position of cursor
000c =                       	dw gr_cur_ptr				; VDP address of cursor
000e =                       	db gr_pixmode				; Pixel plot mode (0=Erase, 1=P
000f =                       	db gr_pitch					; Pixel pitch for char plotting
0010 =                       	db gr_hires_x				; X pos of hires cursor
0011 =                       	db gr_hires_y				; Y pos of hires cursor
0012 =                       	db gr_ink					; Ink colour
0013 =                       	db gr_paper					; Paper colour
0014 =                       	db gr_margin				; Left margin
0015 =                       	dw gr_geom_tmp				; One word of temp storage for
0017 =                       	db gr_geom_tmp2				; One byte of temp storage fo
                             	end struct
                             	
                             ; Sprite data stored in free 256 in font space
b400 =                       spr_curX	= TEXTCHAR			; Sprite current X pos
AS65 Assembler for R6502 [1.42].                                     Page   35
-------------------------------- bank\bank0.s --------------------------------

b420 =                       spr_newX	= TEXTCHAR+32		; Sprite new X pos
b440 =                       spr_curY	= TEXTCHAR+64		; Sprite current Y pos
b460 =                       spr_newY	= TEXTCHAR+96		; Sprite new Y pos
b480 =                       spr_chr		= TEXTCHAR+128		; Sprite character
b4a0 =                       spr_bgnd	= TEXTCHAR+160		; Background character u
b4c0 =                       spr_baseadrl= TEXTCHAR+192		; Y low address of sp
b4e0 =                       spr_baseadrh= TEXTCHAR+224		; Y high address of s
                             
                             ; Tables stored in alternate character set area
                             ; only used for high-resolution screen handling
9c00 =                       hires_row_low	=	HICHAR+0x400		; Low byte of row p
9cc8 =                       hires_row_hi	=	hires_row_low+200	; High byte of r
9d90 =                       hires_col		=	hires_row_hi+200	; Pixel to byte col
9e80 =                       hires_mask		=	hires_col+240		; Pixel column to pi
                             
                             
                             	include "io/io.i"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  IO.I
                             ;*  Definitions file for the IO module.  The key 
                             ;*  used by the IO system is defined here.
                             ;*	Some over-engineering here for future possibil
                             ;*
                             ;************************************************
                             
                             ;* General IO structure allows the system to swap
                             ;* different IO devices by using indirect calls t
                             ;* the appropriate routines.
0000 =                       	struct io_struct
0000 =                       	ds	io_get_byte,	2			;* Address of get byte
0002 =                       	ds	io_put_byte,	2			;* Address of put byte
0004 =                       	ds	io_open_r,		2			;* Address of open file for r
0006 =                       	ds	io_open_w,		2			;* Address of open file for w
0008 =                       	ds	io_close_f,		2			;* Address of close file
000a =                       	ds	io_del_f,		2			;* Address of delete file
000c =                       	ds	io_ext1,		2			;* Address of extended function
000e =                       	ds	io_ext2,		2			;* Address of extended function
                             	end struct
                             	include "dflat/dflat.i"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  DFLAT.I
                             ;*  This is the main definitions file for dflat. 
                             ;*  definitions are in here to access the data st
                             ;*  used by dflat.
                             ;*
                             ;************************************************
                             
                             ;* Start dflat program memory
AS65 Assembler for R6502 [1.42].                                     Page   36
-------------------------------- bank\bank0.s --------------------------------

0713 =                       DF_PROGSTART=	mem_start
                             ;* This is the top of usable dflat memory plus 1
9800 =                       DF_MEMTOP	=	0x9800
                             
                             ;* Offset in to tokenised line of length and line
0000 =                       DFTK_LINLEN	=	0x00
0001 =                       DFTK_LINNUM	=	0x01
                             
                             ;* Flags for token, escape value for data types a
0080 =                       DFTK_TOKEN	=	0x80
0020 =                       DFTK_ESCVAL	=	0x20
0000 =                       DFTK_EOL	=	0x00
                             
                             ;* Numeric constants are encoded based on size an
                             ;* user representation.
                             ;* For example the decimal value 16 will be encod
                             ;* DFTK_INTDEC followed by the bytes 0 and 16 to 
                             ;* The same value in binary will be encoded as DF
                             ;* followed by the same 0 and 16 bytes.  This is 
                             ;* tokenised value to be displayed in original re
                             ;* So in the two examples, they will be shown as 
                             ;* '0x0010' respectively.
0000 =                       DFTK_CHR	=	0x00
0001 =                       DFTK_RESV1	=	0x01
0002 =                       DFTK_RESV2	=	0x02
0003 =                       DFTK_RESV3	=	0x03
0004 =                       DFTK_RESV4	=	0x04
0005 =                       DFTK_BYTDEC	=	0x05
0006 =                       DFTK_BYTHEX = 	0x06
0007 =                       DFTK_BYTBIN =	0x07
0008 =                       DFTK_RESV8	=	0x08
0009 =                       DFTK_INTDEC	=	0x09
000a =                       DFTK_INTHEX =	0x0a
000b =                       DFTK_INTBIN	=	0x0b
000c =                       DFTK_RESVC	=	0x0c
000d =                       DFTK_RESVD	=	0x0d
000e =                       DFTK_RESVE	=	0x0e
000f =                       DFTK_RESVF	=	0x0f
                             
                             ;* String constant, variable and procedure tokens
0010 =                       DFTK_STRLIT	=	0x10
0011 =                       DFTK_VAR	=	0x11
0012 =                       DFTK_PROC	=	0x12
001f =                       DFTK_STEND	=	0x1f
                             
                             ;* Qualifier for non-local parameters passed to a
0026 =                       DFTK_VARPARM=	'&'
                             
                             ;* Variable Value Table (VVT) definitions
                             ;* The VVT records the values of variables define
                             ;* the Variable Name Table (VNT).  When a variabl
                             ;* used, it is added to the VNT, and the position
                             ;* VNT is used as an index in to the VVT.
                             ;* Every VVT entry is 8 bytes - so the VNT index 
                             ;* shifted left 3 bits to get the VVT offset.
                             ;* The VNT grows from top of memory down, the VVT
                             ;* grows from start of VNT down.
                             
                             ;* Index in to each entry of the VVT
0000 =                       DFVVT_TYPE	=	0x00
0001 =                       DFVVT_LO	=	0x01
0002 =                       DFVVT_HI	=	0x02
AS65 Assembler for R6502 [1.42].                                     Page   37
-------------------------------- bank\bank0.s --------------------------------

0003 =                       DFVVT_DIM1	=	0x03
0004 =                       DFVVT_DIM2	=	0x04
0008 =                       DFVVT_SZ	=	0x08	;VVT is aligned to 8 byte blocks
                             
                             ;* The meaning of the DFVVT_TYPE entry
0001 =                       DFVVT_INT	=	0x01
0002 =                       DFVVT_BYT	=	0x02
0004 =                       DFVVT_STR	=	0x04
0008 =                       DFVVT_FLT	=	0x08
0040 =                       DFVVT_PROC	=	0x40
0080 =                       DFVVT_ARRY	=	0x80
                             
                             ;* Flags indicating the meaning of a token
                             ;* A token has the top bit set (0x80), then the
                             ;* remaining bits indicate what it represents.
0001 =                       DFTK_KW		=	0x01
0002 =                       DFTK_FN		=	0x02
0004 =                       DFTK_STROP	=	0x04
0008 =                       DFTK_OP		=	0x08
0010 =                       DFTK_INT	=	0x10
0020 =                       DFTK_BYT	=	0x20
0040 =                       DFTK_STR	=	0x40
0080 =                       DFTK_FLT	=	0x80
0007 =                       DFTK_OPMSK	=	0x07
00f8 =                       DFTK_RTMSK	= 	0xf8
                             
                             ;* Defines what type of value is on the parameter
                             ;* All numerics are stored as INT, all STR
                             ;* are pointers to the actual string, thus
                             ;* all entries in the parmeter stack are 3 bytes
0001 =                       DFST_INT	=	0x01
0080 =                       DFST_STR	=	0x80
                             
                             ;* Token values of specific commands, used during
                             ;* command processing.
                             ;* ANY CHANGE TO THE ORDER OF KEYWORDS NEEDS TO R
0086 =                       DFRT_DEF	=	0x86
0087 =                       DFRT_ENDDEF	=	0x87
0088 =                       DFRT_RETURN	=	0x88
0089 =                       DFRT_ABORT	=	0x89
008c =                       DFRT_REPEAT	=	0x8c
008e =                       DFRT_FOR	=	0x8e
008f =                       DFRT_NEXT	=	0x8f
0090 =                       DFRT_WHILE	=	0x90
0091 =                       DFRT_WEND	=	0x91
0092 =                       DFRT_IF		=	0x92
0093 =                       DFRT_ELSE	=	0x93
0094 =                       DFRT_ENDIF	=	0x94
0095 =                       DFRT_ELSEIF	=	0x95
0096 =                       DFRT_DATA	=	0x96
0097 =                       DFRT_ASM	=	0x97
                             
                             _PushTrueJmp macro
                             	ldx #0xff
                             	txa
                             	jmp df_st_pushInt
                             	endm
                             
                             _PushFalseJmp macro
                             	ldx #0x00
                             	txa
                             	jmp df_st_pushInt
AS65 Assembler for R6502 [1.42].                                     Page   38
-------------------------------- bank\bank0.s --------------------------------

                             	endm
                             
                             	include "kernel/zeropage.i"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  ZEROPAGE.I
                             ;*  This module name is misleading it is not only
                             ;*  allocations, but also page 2, 3, 4, 5, 6, 7 a
                             ;*  memstart is a handy label that indicates the 
                             ;*  location that we can store dflat programs fro
                             ;*  Zero page is a valuable asset as the 6502 can
                             ;*  this page one cycle quicker than the rest of 
                             ;*  and infact some addressing modes can only use
                             ;*  Due to the value of zero page, a lot of syste
                             ;*  dflat variables are put here.  But we don't h
                             ;*  luxury for single use variables - so you will
                             ;*  see a lot of temporary sounding names which a
                             ;*  have multiple uses across the code base.
                             ;*
                             ;************************************************
                             
                             	; Zero page declarations
                             	bss
0000 =                       	org 0x0000
                             
0000 =                       tmp_bank1	ds	1		; Temp storage ONLY FOR USE BY BA
0001 =                       tmp_bank2	ds	1		; Temp storage ONLY FOR USE BY BA
                             
                             ; Interrupt routine addresses
0002 =                       vec_irq		 ds	2		; Master IRQ handler
0004 =                       vec_brk		 ds	2		; Master BRK handler
0006 =                       vec_usercia0 ds	2		; Where to jump for CIA0 inter
                             
                             ; VDP parameters
0008 =                       vdp_cnt		ds	1		; VDP interrupt counter
0009 =                       vdp_cnt_hi 	ds	1		; VDP counter high
000a =                       vdp_cnt_hi2	ds	1		; VDP counter high 2
000b =                       vdp_curtim	ds	1		; Cursor blink speed
000c =                       vdp_curcnt	ds	1		; Cursor blink countdown
000d =                       vdp_curoff	ds	1		; Cursor off (0 = On)
000e =                       vdp_curstat	ds	1		; Cursor status
000f =                       vdp_curval	ds	1		; Cursor value on screen
0010 =                       vdp_blank	ds	1		; Screen blank value normally 32
                             
                             ; Screen geometry
0011 =                       gr_scrngeom	ds	gr_screen
                             
                             ;Keyboard parameters
0029 =                       kb_raw  	ds	1		; Raw keyboard code
002a =                       kb_last		ds	1		; Code of last key
002b =                       kb_code 	ds	1		; Converted keyboard code
002c =                       kb_stat		ds	1		; Keyboard status for caps and shi
002d =                       kb_deb		ds	1		; Debounce timer
002e =                       kb_deb_tim  ds	1		; Default debounce delay
002f =                       kb_rep		ds	1		; Keyboard repeat speed timer
0030 =                       kb_rep_tim 	ds	1		; Default repeat speed
AS65 Assembler for R6502 [1.42].                                     Page   39
-------------------------------- bank\bank0.s --------------------------------

0031 =                       kb_rdel_tim	ds	1		; Default repeat delay (until s
                             
0032 =                       tmp_alo 	ds	1		; VDP addresses lo
0033 =                       tmp_ahi 	ds	1		; VDP addresses hi
0034 =                       tmp_blo 	ds	1		; Temp address lo
0035 =                       tmp_bhi		ds	1		; Temp address hi
0036 =                       tmp_clo		ds	1		; Temp address lo
0037 =                       tmp_chi		ds	1		; Temp address hi
0038 =                       tmp_d		ds	1		; Temp storage d
                             
                             ; Raw input/output parameters
0039 =                       buf_lo		ds	1		; Line buffer address low
003a =                       buf_hi		ds	1		; Line buffer address high
003b =                       buf_sz		ds	1		; Buffer size
003c =                       buf_ef		ds	1		; End file / line marker
                             
                             
                             ; ** Integer function storage **
003d =                       ztmp_24					; Start of 24 byte scratch area (all 
003d =                       num_a		ds	4		; 4 byte primary accumulator
0041 =                       num_b		ds	4		; 4 byte secondary accumulator
0045 =                       num_x		ds	4		; 4 byte x register
0049 =                       num_tmp		ds	4		; 4 byte temp space
004d =                       num_buf		ds	8		; 8 byte string buffer
                             
                             ; ** Tape function storage **
0055 =                       tp_block	ds	2		; Block number (int)
0057 =                       tp_idx		ds	1		; Current buffer index
0058 =                       tp_flag		ds	1		; zero = closed, 1=read, 2=write
0059 =                       tp_delay	ds	2		; Interblock delay
                             
                             ;
                             ; **** INTERPRETER ZERO PAGE ****
                             ;
005b =                       dflat_zp_s
005b =                       dflat_zp_save_s			; ZP save dflat from here
005b =                       df_checkkey	ds	1		; Key check interval counter
005c =                       df_checkmsk	ds	1		; Mask for check key
005d =                       errno		ds	1		; General error condition status
005e =                       df_immed	ds	1		; Immediate mode (0 = not immediat
005f =                       df_sp		ds	1		; Stack pointer after error to resto
0060 =                       df_pc		ds	2		; PC after error to return to
0062 =                       df_brkpc	ds	2		; PC pushed on the stack for BRK
0064 =                       df_brkval	ds	1		; Byte after BRK instruction
0065 =                       df_prgstrt	ds	2		; Start of program code
0067 =                       df_prgend	ds	2		; End of program code
0069 =                       df_vntstrt	ds	2		; Variable name table start
006b =                       df_vntend	ds	2		; Variable name table end
006d =                       df_vvtstrt	ds	2		; Variable value table start
006f =                       df_vvtend	ds	2		; Variable value table end
0071 =                       df_varcnt	ds	1		; Variable counter
0072 =                       df_starstrt	ds	2		; String and array table start
0074 =                       df_starend	ds	2		; String and array table end
0076 =                       df_rtstop	ds	1		; Runtime stack pointer
0077 =                       df_parmtop	ds	1		; Top of parameter stack (grows 
0078 =                       df_strbuffz	ds	1		; String expression buffer (*un
0079 =                       df_stridxz	ds	1		; Top of string buffer (grows do
007a =                       df_sevalptr	ds	2		; Pointer to next free char in 
                             
007c =                       df_linoff	ds	1		; Offset in to line buffer
007d =                       df_tokoff	ds	1		; Offset in to tokenised buffer
007e =                       df_eolidx	ds	1		; End of line index (i.e length)
AS65 Assembler for R6502 [1.42].                                     Page   40
-------------------------------- bank\bank0.s --------------------------------

007f =                       df_nxtstidx	ds	1		; Offset to the next statement 
0080 =                       df_curstidx	ds	1		; Offset to the start of curren
0081 =                       df_symtab	ds	2		; Pointer to next free symtab ent
0083 =                       df_symoff	ds	1		; Offset in to token table
0084 =                       df_syminiz	ds	2		; Start of symtab (*unused*)
0086 =                       df_currlin	ds	2		; Execution current line pointer
0088 =                       df_exeoff	ds	1		; Execution line buffer offset
0089 =                       df_nextlin	ds	2		; Next line to execute
008b =                       df_procmode	ds	1		; Only used during tokenisation
008c =                       df_procargs	ds	1		; Only used during tokenisation
008d =                       df_procloc	ds	1		; Counts the number of local par
008e =                       df_procptr	ds	2		; Pointer to proc vvt slot
0090 =                       df_lineptr	ds	2		; Pointer to line during searche
0092 =                       df_lineidx	ds	1		; Pointer to line index during s
0093 =                       df_ifnest	ds	1		; Global nested if counter
0094 =                       df_currdat	ds	2		; Data current line pointer
0096 =                       df_datoff	ds	1		; Data line buffer offset
0097 =                       df_rnd		ds	2		; Random number seed
                             
0099 =                       df_asmpc	ds	2		; Assembler program counter
009b =                       df_asmopt	ds	1		; Assembler current option
009c =                       df_asmadmd	ds	1		; Addressing mode
009d =                       df_asmopcde	ds	1		; Current opcode
009e =                       df_asmoprnd	ds	2		; Current operand
00a0 =                       df_asmlen	ds	1		; Instruction length
                             
00a1 =                       dflat_zp_save_e			; Save up to this place
                             
                             ; Temp space for dflat
00a1 =                       df_tmpptra	ds	2		; Temp pointer a
00a3 =                       df_tmpptrb	ds	2		; Temp pointer b
00a5 =                       df_tmpptrc	ds	2		; Temp pointer c
00a7 =                       df_tmpptrd	ds	2		; Temp pointer d
00a9 =                       df_tmpptre	ds	2		; Temp pointer e
                             
00ab =                       dflat_zp_e
                             
00ab =                       zp_tmp1		ds	1		; General zero page temporary
00ac =                       zp_tmp2		ds	1		; General zero page temporary
00ad =                       zp_tmp3		ds	1		; General zero page temporary
00ae =                       zp_tmp4		ds	1		; General zero page temporary
                             
                             ;***** END OF ZERO PAGE *****
00af =                       _end_zero_page
                             
                             ;***** Page 1 is CPU stack ****
0100 =                       	org 0x0100
0100 =                       _cpu_stack
0100 =                       			ds	256		; All of page 1
                             
                             ;***** Page 2 is tape buffer *****
0200 =                       	org 0x0200
0200 =                       tp_buf		ds	256		; Serial input / output line buff
                             
                             ;***** 3 is IO *****
0300 =                       	org 0x0300			; IO mapped to Page 3 on Oric
0300 =                       io_address	ds	256
                             
0400 =                       	org 0x0400			; Page 4 = dflat space
0400 =                       fd_getname_addr			; ** FOR ORICUTRON EMULATOR **
0400 =                       df_linbuff
0400 =                       df_raw		ds	128		; untokenised input line
AS65 Assembler for R6502 [1.42].                                     Page   41
-------------------------------- bank\bank0.s --------------------------------

0480 =                       df_tokbuff
0480 =                       df_tok		ds 	128		; tokenised output line
                             
0500 =                       	org 0x0500			; Page 5 = fixed space for interpre
0500 =                       df_rtstck				; operator stack grow up, runtime gr
0500 =                       df_rtspace	ds	256
                             
                             
                             ;***** NON-ZERO PAGE VARIABLES *****
                             
                             ; Acticve IO device settings
0600 =                       io_default	ds	1		; The default device number
0601 =                       io_block	ds	io_struct
                             
                             
                             ; Dflat top of memory+1 - initialised at boot tim
0611 =                       df_memtop	ds	2
                             
                             ; Scratch area e.g. string and numeric expression
0613 =                       scratch		ds	256
                             
                             ;***** THIS IS THE START OF FREE SPACE for DFLAT 
0713 =                       mem_start
                             
                             
                             	include "dflat/dflat.i"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  DFLAT.I
                             ;*  This is the main definitions file for dflat. 
                             ;*  definitions are in here to access the data st
                             ;*  used by dflat.
                             ;*
                             ;************************************************
                             
                             ;* Start dflat program memory
0713 =                       DF_PROGSTART=	mem_start
                             ;* This is the top of usable dflat memory plus 1
9800 =                       DF_MEMTOP	=	0x9800
                             
                             ;* Offset in to tokenised line of length and line
0000 =                       DFTK_LINLEN	=	0x00
0001 =                       DFTK_LINNUM	=	0x01
                             
                             ;* Flags for token, escape value for data types a
0080 =                       DFTK_TOKEN	=	0x80
0020 =                       DFTK_ESCVAL	=	0x20
0000 =                       DFTK_EOL	=	0x00
                             
                             ;* Numeric constants are encoded based on size an
                             ;* user representation.
                             ;* For example the decimal value 16 will be encod
                             ;* DFTK_INTDEC followed by the bytes 0 and 16 to 
                             ;* The same value in binary will be encoded as DF
                             ;* followed by the same 0 and 16 bytes.  This is 
                             ;* tokenised value to be displayed in original re
AS65 Assembler for R6502 [1.42].                                     Page   42
-------------------------------- bank\bank0.s --------------------------------

                             ;* So in the two examples, they will be shown as 
                             ;* '0x0010' respectively.
0000 =                       DFTK_CHR	=	0x00
0001 =                       DFTK_RESV1	=	0x01
0002 =                       DFTK_RESV2	=	0x02
0003 =                       DFTK_RESV3	=	0x03
0004 =                       DFTK_RESV4	=	0x04
0005 =                       DFTK_BYTDEC	=	0x05
0006 =                       DFTK_BYTHEX = 	0x06
0007 =                       DFTK_BYTBIN =	0x07
0008 =                       DFTK_RESV8	=	0x08
0009 =                       DFTK_INTDEC	=	0x09
000a =                       DFTK_INTHEX =	0x0a
000b =                       DFTK_INTBIN	=	0x0b
000c =                       DFTK_RESVC	=	0x0c
000d =                       DFTK_RESVD	=	0x0d
000e =                       DFTK_RESVE	=	0x0e
000f =                       DFTK_RESVF	=	0x0f
                             
                             ;* String constant, variable and procedure tokens
0010 =                       DFTK_STRLIT	=	0x10
0011 =                       DFTK_VAR	=	0x11
0012 =                       DFTK_PROC	=	0x12
001f =                       DFTK_STEND	=	0x1f
                             
                             ;* Qualifier for non-local parameters passed to a
0026 =                       DFTK_VARPARM=	'&'
                             
                             ;* Variable Value Table (VVT) definitions
                             ;* The VVT records the values of variables define
                             ;* the Variable Name Table (VNT).  When a variabl
                             ;* used, it is added to the VNT, and the position
                             ;* VNT is used as an index in to the VVT.
                             ;* Every VVT entry is 8 bytes - so the VNT index 
                             ;* shifted left 3 bits to get the VVT offset.
                             ;* The VNT grows from top of memory down, the VVT
                             ;* grows from start of VNT down.
                             
                             ;* Index in to each entry of the VVT
0000 =                       DFVVT_TYPE	=	0x00
0001 =                       DFVVT_LO	=	0x01
0002 =                       DFVVT_HI	=	0x02
0003 =                       DFVVT_DIM1	=	0x03
0004 =                       DFVVT_DIM2	=	0x04
0008 =                       DFVVT_SZ	=	0x08	;VVT is aligned to 8 byte blocks
                             
                             ;* The meaning of the DFVVT_TYPE entry
0001 =                       DFVVT_INT	=	0x01
0002 =                       DFVVT_BYT	=	0x02
0004 =                       DFVVT_STR	=	0x04
0008 =                       DFVVT_FLT	=	0x08
0040 =                       DFVVT_PROC	=	0x40
0080 =                       DFVVT_ARRY	=	0x80
                             
                             ;* Flags indicating the meaning of a token
                             ;* A token has the top bit set (0x80), then the
                             ;* remaining bits indicate what it represents.
0001 =                       DFTK_KW		=	0x01
0002 =                       DFTK_FN		=	0x02
0004 =                       DFTK_STROP	=	0x04
0008 =                       DFTK_OP		=	0x08
0010 =                       DFTK_INT	=	0x10
AS65 Assembler for R6502 [1.42].                                     Page   43
-------------------------------- bank\bank0.s --------------------------------

0020 =                       DFTK_BYT	=	0x20
0040 =                       DFTK_STR	=	0x40
0080 =                       DFTK_FLT	=	0x80
0007 =                       DFTK_OPMSK	=	0x07
00f8 =                       DFTK_RTMSK	= 	0xf8
                             
                             ;* Defines what type of value is on the parameter
                             ;* All numerics are stored as INT, all STR
                             ;* are pointers to the actual string, thus
                             ;* all entries in the parmeter stack are 3 bytes
0001 =                       DFST_INT	=	0x01
0080 =                       DFST_STR	=	0x80
                             
                             ;* Token values of specific commands, used during
                             ;* command processing.
                             ;* ANY CHANGE TO THE ORDER OF KEYWORDS NEEDS TO R
0086 =                       DFRT_DEF	=	0x86
0087 =                       DFRT_ENDDEF	=	0x87
0088 =                       DFRT_RETURN	=	0x88
0089 =                       DFRT_ABORT	=	0x89
008c =                       DFRT_REPEAT	=	0x8c
008e =                       DFRT_FOR	=	0x8e
008f =                       DFRT_NEXT	=	0x8f
0090 =                       DFRT_WHILE	=	0x90
0091 =                       DFRT_WEND	=	0x91
0092 =                       DFRT_IF		=	0x92
0093 =                       DFRT_ELSE	=	0x93
0094 =                       DFRT_ENDIF	=	0x94
0095 =                       DFRT_ELSEIF	=	0x95
0096 =                       DFRT_DATA	=	0x96
0097 =                       DFRT_ASM	=	0x97
                             
                             _PushTrueJmp macro
                             	ldx #0xff
                             	txa
                             	jmp df_st_pushInt
                             	endm
                             
                             _PushFalseJmp macro
                             	ldx #0x00
                             	txa
                             	jmp df_st_pushInt
                             	endm
                             
                             	include "dflat/error.i"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  ERROR.I
                             ;*  Error definitions file.
                             ;*  The macro to throw an error is elswhere, but 
                             ;*  It issues a 6502 BRK commmand with the next b
                             ;*  the error code.  The BRK handler then picks u
                             ;*  code and shows the appropriate message plus a
                             ;*  number if a program was running.
                             ;*
                             ;************************************************
AS65 Assembler for R6502 [1.42].                                     Page   44
-------------------------------- bank\bank0.s --------------------------------

                             
                             	; ROM code
                             	code  
                             
                             ; Error message numbers
0000 =                       DFERR_OK		=	0
0001 =                       DFERR_SYNTAX	=	1
0002 =                       DFERR_TYPEMISM	=	2
0003 =                       DFERR_DIM		=	3
0004 =                       DFERR_UNTIL		=	4
0005 =                       DFERR_NOPROC	=	5
0006 =                       DFERR_PROCPARM	=	6
0007 =                       DFERR_IMMEDIATE	=	7
0008 =                       DFERR_UNCLOSEDIF=	8
0009 =                       DFERR_NOIF		=	9
000a =                       DFERR_NEXTFOR	=	10
000b =                       DFERR_FNAME		=	11
000c =                       DFERR_STRLONG	=	12
000d =                       DFERR_BREAK		=	13
000e =                       DFERR_NODATA	=	14
000f =                       DFERR_WEND		=	15
0010 =                       DFERR_NOLINE	=	16
0011 =                       DFERR_RETURN	=	17
0012 =                       DFERR_ABORT		=	18
0013 =                       DFERR_QUANTITY	=	19
0014 =                       DFERR_NOORG		=	20
                             
                             
                             
                             
                             
                             ;****************************************
                             ;*	Set 6502 default vectors	*
                             ;****************************************
                             	data				; Set vectors
fffa =                       	org 0xfffa			; Vectors are at these addresses
fffa : 0ac5                  	fcw nmi				; 0xfffa : NMI Vector
fffc : c2c4                  	fcw init			; 0xfffc : Reset Vector
fffe : e6c0                  	fcw call_irq_master	; 0xfffe : IRQ Vector
                             
                             	; ROM code
                             	code				;
c000 =                       	org 0xc000			; Start of ROM
                             
c000 :                       _code_start
                             	; Restore current bank always at address c001 * 
c000 :                       mod_sz_kernel_s
                             	; include OS ROM calls - must be from 0xc000
                             	include "kernel/osromvec.i"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2021
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  OSROMVEC.I
                             ;*	This include file sets up the OS ROM vectors w
                             ;*	be invoked by user programs to access ROM func
                             ;*	will be maintained across versions of dflat to
                             ;*	backward and forward compatibility.
AS65 Assembler for R6502 [1.42].                                     Page   45
-------------------------------- bank\bank0.s --------------------------------

                             ;*	Make sure these vectors are set up from 0xc000
                             ;*	what user programs will rely on!
                             ;*
                             ;************************************************
                             	
                             	; Common OS ROM calls - user programs should JMP
                             	; through these routines where possible to maint
                             	; compatibility with ROM changes as these calls 
                             	; always be in the same position
c000 : 4ceacc           [ 3] _rom_vec_00	jmp	gr_init_screen_txt			; Go in to t
c003 : 4c80cd           [ 3] _rom_vec_01	jmp gr_cls						; Clear text screen
c006 : 4cedcd           [ 3] _rom_vec_02	jmp	gr_set_cur					; Set text cursor 
c009 : 4c03cd           [ 3] _rom_vec_03	jmp	gr_init_hires				; Go in to hires
c00c : 6c0106           [ 6] _rom_vec_04	jmp (io_block+io_get_byte)		; Get byt
c00f : 6c0306           [ 6] _rom_vec_05	jmp (io_block+io_put_byte)		; Put byt
c012 : 4c52c4           [ 3] _rom_vec_06 jmp io_read_line				; Read a line
c015 : 4c8bc4           [ 3] _rom_vec_07	jmp io_print_line				; Print a line
c018 : 4c6ec0           [ 3] _rom_vec_08	jmp snd_set						; Set sound register
c01b : 4c61c7           [ 3] _rom_vec_09	jmp kb_stick					; Get joystick statu
c01e : 4cd4cd           [ 3] _rom_vec_0a	jmp gr_plot						; Plot a lores chara
c021 : 4c93cf           [ 3] _rom_vec_0b	jmp	gr_hchar					; Plot a hires chara
c024 : 4c35d0           [ 3] _rom_vec_0c	jmp gr_point_setup				; Get address, 
c027 : 4c53d0           [ 3] _rom_vec_0d	jmp gr_point					; Plot a hires pixel
c02a : 4c80f4           [ 3] _rom_vec_0e	jmp df_rt_sprupd				; Refresh sprites
c02d : 4cc4cd           [ 3] _rom_vec_0f	jmp	gr_getXY_base				; Get row addres
c030 : 4c4dd0           [ 3] _rom_vec_10	jmp gr_pixel					; Get a pixel value 
c033 : 4ce7cd           [ 3] _rom_vec_11 jmp gr_get						; Get screen at coord
c036 : 4c14c4           [ 3] _rom_vec_12 jmp io_active_device			; Set the acti
c039 : 6c0506           [ 6] _rom_vec_13	jmp (io_block+io_open_r)		; Open file
c03c : 6c0706           [ 6] _rom_vec_14	jmp (io_block+io_open_w)		; Open file
c03f : 6c0906           [ 6] _rom_vec_15	jmp (io_block+io_close_f)		; Close fi
c042 : 6c0b06           [ 6] _rom_vec_16	jmp (io_block+io_del_f)			; Delete fi
c045 : 6c0d06           [ 6] _rom_vec_17	jmp (io_block+io_ext1)			; Extended o
c048 : 6c0f06           [ 6] _rom_vec_18	jmp (io_block+io_ext2)			; Extended o
c04b : 4c00d4           [ 3] _rom_vec_19 jmp snd_get_note				; Get for an octa
                             
                             
                             ;* Include all core code in the right order
                             	include "kernel/snd-low.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  SND-LOW.S
                             ;*	Routines to access the AY-3-8912, which is don
                             ;*	lines of the VIA - CB2 and CA2 for chip select
                             ;*	Port A for data interface. This makes accessin
                             ;*	8912 a bit slow..
                             ;*
                             ;* 	CB2		CA2		Function		CB2=BDIR, CA2=BC1
                             ;*	0		0		Not selected
                             ;*	0		1		Read register in to Port A
                             ;*	1		0		Write register from Port A
                             ;*	1		1		Select register # from Port A
                             ;************************************************
                             
                             ;****************************************
                             ;* snd_sel_reg
AS65 Assembler for R6502 [1.42].                                     Page   46
-------------------------------- bank\bank0.s --------------------------------

                             ;* Select AY register from A
                             ;* Input : A = Value
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
c04e :                       snd_sel_reg
c04e : 48               [ 3] 	pha
c04f : 8d0f03           [ 4] 	sta SND_ADBUS			; Put reg # on Port A (sound bus
                             
c052 : a9ff             [ 2] 	lda #SND_SELSETADDR		; Get ready to select the r
c054 : 8d0c03           [ 4] 	sta SND_MODE			; Latch the reg # on Port A
                             
c057 : a9dd             [ 2] 	lda #SND_DESELECT		; Deselect AY
c059 : 8d0c03           [ 4] 	sta SND_MODE
                             
c05c : 68               [ 4] 	pla
c05d : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* snd_set_reg
                             ;* Set previosuly selected AY register
                             ;* Input : A = Value to set
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
c05e :                       snd_set_reg
c05e : 48               [ 3] 	pha
                             
c05f : 8d0f03           [ 4] 	sta SND_ADBUS			; Put reg value on Port A (sound
c062 : a9fd             [ 2] 	lda #SND_SELWRITE		; Select mode for writing dat
c064 : 8d0c03           [ 4] 	sta SND_MODE			; Latch reg value on Port A	
c067 : a9dd             [ 2] 	lda #SND_DESELECT		; Deselect AY
c069 : 8d0c03           [ 4] 	sta SND_MODE
                             
c06c : 68               [ 4] 	pla
c06d : 60               [ 6] 	rts
                             	
                             ;****************************************
                             ;* snd_set
                             ;* Set reg X to value A
                             ;* Input : X=Reg, A = Value to set
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
c06e :                       snd_set
c06e : 48               [ 3] 	pha
c06f : 8a               [ 2] 	txa
c070 : 204ec0           [ 6] 	jsr snd_sel_reg
c073 : 68               [ 4] 	pla
c074 : 4c5ec0           [ 3] 	jmp snd_set_reg
                             
                             
                             ;****************************************
                             ;* snd_get
                             ;* Get AY register X value
                             ;* Input : X = Reg no
                             ;* Output : A = Value
                             ;* Regs affected : None
                             ;****************************************
                             ;snd_get
                             ;
                             ;	lda #0xff				; Set Port A to output
AS65 Assembler for R6502 [1.42].                                     Page   47
-------------------------------- bank\bank0.s --------------------------------

                             ;	sta IO_0+DDRA
                             ;
                             ;	stx SND_ADBUS			; Put X on the sound bus (X = r
                             ;
                             ;	lda #SND_SELSETADDR		; Get ready to select the 
                             ;	sta SND_MODE			; Latch the reg # on Port A
                             ;
                             ;	lda #SND_DESELECT		; Deselect AY
                             ;	sta SND_MODE
                             ;
                             ;	lda #0x00				; Set Port A to input
                             ;	sta IO_0+DDRA
                             ;
                             ;	lda #SND_SELREAD		; Select mode for reading dat
                             ;	sta SND_MODE			; Set read mode on AY
                             ;
                             ;	lda SND_ADBUS			; Get value in to Y from Port A
                             ;	pha						; Save it to stack
                             ;	
                             ;	lda #SND_DESELECT		; Deselect AY
                             ;	sta SND_MODE
                             ;
                             ;	lda #0xff				; Set Port A back to output
                             ;	sta IO_0+DDRA
                             ;
                             ;	pla						; Get the value off stack
                             ;	
                             ;	rts
                             
                             
                             	include "kernel/main.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  MAIN.S
                             ;*  This is where the main user program is execut
                             ;*  the 'kernel' once the system is initialised a
                             ;*  Today, main does very little - first shows th
                             ;*  boot up message, and then passes control to d
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code
                             
c077 :                       main
c077 : a281             [ 2] 	ldx #lo(msg_hello_world)
c079 : a9c0             [ 2] 	lda #hi(msg_hello_world)
c07b : 208bc4           [ 6] 	jsr io_print_line
                             
c07e :                       infinity
c07e : 4c4adf           [ 3] 	jmp df_pg_dflat
                             
c081 :                       msg_hello_world
                             	;* build.s is generate by the assemble.bat file
                             	;* all it does is echo an assembler line to
                             	;* including the build date in the message.
AS65 Assembler for R6502 [1.42].                                     Page   48
-------------------------------- bank\bank0.s --------------------------------

                             	include "kernel/build.s"
c081 : 4f726963206466..       db "Oric dflat custom ROM\r" 
c097 : 42792040363530..       db "By @6502Nerd\r" 
c0a4 : 4275696c64203a..       db "Build : 0.17 [BETA]\r" 
c0b8 : 436f7079726967..       db "Copyright (c) 2023\r\r",0 
                             
                             
                             	include "kernel/irq.s"
                             	
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  IRQ.S
                             ;*	This is the IRQ handler
                             ;*	There is only one regular interrupt source whi
                             ;*	T1 timeout on a 50Hz cycle, whose main job is 
                             ;*	flash the cursor and decrement some timers.
                             ;*	But there are handlers for BRK, user and VIA s
                             ;*	By default the user and VIA do nothing, but ca
                             ;*	redirected to user routines.
                             ;*
                             ;************************************************
                             
                             ;* Obviously this can only be done with
                             ;* interrupts disabled!
c0cd :                       init_irq
                             	; Core IRQ handler
c0cd : a9f1             [ 2] 	lda #lo(irq)
c0cf : 8502             [ 3] 	sta vec_irq
c0d1 : a9c0             [ 2] 	lda #hi(irq)
c0d3 : 8503             [ 3] 	sta vec_irq+1
                             	
                             	; Core BRK handler
c0d5 : a913             [ 2] 	lda #lo(irq_brk)
c0d7 : 8504             [ 3] 	sta vec_brk
c0d9 : a9c1             [ 2] 	lda #hi(irq_brk)
c0db : 8505             [ 3] 	sta vec_brk+1
                             
                             	; User handlers VIA0 interrupts
c0dd : a9f0             [ 2] 	lda #lo(null_handler)
c0df : 8506             [ 3] 	sta vec_usercia0
c0e1 : a9c0             [ 2] 	lda #hi(null_handler)
c0e3 : 8507             [ 3] 	sta vec_usercia0+1
                             
c0e5 : 60               [ 6] 	rts
                             
                             
                             ;* Calls the master IRQ handler - from the ROM
c0e6 :                       call_irq_master
c0e6 : 6c0200           [ 6] 	jmp (vec_irq)
                             	
                             ;* Calls the BRK handler
c0e9 :                       call_irq_brk
c0e9 : 6c0400           [ 6] 	jmp (vec_brk)
                             
                             ;* Call the user CIA0 handler
c0ec :                       call_irq_usercia0
AS65 Assembler for R6502 [1.42].                                     Page   49
-------------------------------- bank\bank0.s --------------------------------

c0ec : 6c0600           [ 6] 	jmp (vec_usercia0)
                             
                             ;* null interrupt
c0ef :                       null_irq
c0ef : 40               [ 6] 	rti
                             
                             ;* null handler
c0f0 :                       null_handler
c0f0 : 60               [ 6] 	rts
                             	
                             
                             ;* Master IRQ handler
c0f1 :                       irq
                             	; Don't use _pushAXY as it uses a temp location!
c0f1 : 48               [ 3] 	pha
c0f2 : 8a               [ 2] 	txa
c0f3 : 48               [ 3] 	pha
c0f4 : 98               [ 2] 	tya
c0f5 : 48               [ 3] 	pha
                             
c0f6 : d8               [ 2] 	cld						; Just in case!
c0f7 : 18               [ 2] 	clc						; Standard behaviour
                             
                             	; Check if IRQ or BRK
                             	; load P from stack in to A
c0f8 : ba               [ 2] 	tsx
c0f9 : bd0401           [ 4] 	lda 0x104,x
                             	; BRK bit set?
c0fc : 2910             [ 2] 	and #0x10
c0fe : d0e9             [ 3] 	bne call_irq_brk
                             	
                             	;* Primary interrupt is timer 1
c100 : ad0d03           [ 4] 	lda IO_0 + IFR
c103 : 2940             [ 2] 	and #0x40				; Bit 6 = Timer 1 interrupt
c105 : f006             [ 3] 	beq irq_fin				; If nothing then end
                             
                             	; Service the timer 1 interrupt
c107 : 8d0d03           [ 4] 	sta IO_0 + IFR			; Clear the interrupt
c10a : 2040c1           [ 6] 	jsr int_vdp_handler
                             
c10d :                       irq_fin
                             	_pullAXY
                             
c112 : 40               [ 6] 	rti
                             	
                             ;* Handle BRK
c113 :                       irq_brk
                             	; Handle BRK
                             	; Get PCL,H minus 2 gives the BRK instruction ad
c113 : 38               [ 2] 	sec
c114 : bd0501           [ 4] 	lda 0x0105,x
c117 : e902             [ 2] 	sbc #2
c119 : 8562             [ 3] 	sta df_brkpc
c11b : bd0601           [ 4] 	lda 0x0106,x
c11e : e900             [ 2] 	sbc #0
c120 : 8563             [ 3] 	sta df_brkpc+1
                             	; Get the byte pointed to by old PC
                             	; which is 1 on from the BRK
c122 : a001             [ 2] 	ldy #1
c124 : b162             [ 5] 	lda (df_brkpc),y
c126 : 8564             [ 3] 	sta df_brkval
c128 : 855d             [ 3] 	sta errno
AS65 Assembler for R6502 [1.42].                                     Page   50
-------------------------------- bank\bank0.s --------------------------------

                             	; now update the return address
c12a : a560             [ 3] 	lda df_pc
c12c : 9d0501           [ 5] 	sta 0x105,x
c12f : a561             [ 3] 	lda df_pc+1
c131 : 9d0601           [ 5] 	sta 0x106,x
                             	
                             	_pullAXY
                             
                             	; Save the registers in temp area
c139 : 853d             [ 3] 	sta num_a
c13b : 863e             [ 3] 	stx num_a+1
c13d : 843f             [ 3] 	sty num_a+2
                             	; when RTI occurs:
                             	;  will return to error handler
                             	;  df_brkval will contain signature
c13f : 40               [ 6] 	rti
                             	
                             	
                             ;****************************************
                             ;* int_vdp_handler
                             ;* VDP interrupt handler
                             ;****************************************
c140 :                       int_vdp_handler
c140 : 205cc1           [ 6] 	jsr update_timers	; If it is then update system 
c143 : a50d             [ 3] 	lda vdp_curoff		; Is cursor enabled?
c145 : d014             [ 3] 	bne int_vdp_fin		; Skip if disabled
                             
c147 : c60c             [ 5] 	dec vdp_curcnt		; Decrement countdown
c149 : d010             [ 3] 	bne int_vdp_fin		; If not expired, do nothing
c14b : a50b             [ 3] 	lda vdp_curtim		; Reset cursor countdown
c14d : 850c             [ 3] 	sta vdp_curcnt
c14f : a50e             [ 3] 	lda vdp_curstat		; Get the flash status
c151 : 4980             [ 2] 	eor #0x80			; Invert top bit
c153 : 850e             [ 3] 	sta vdp_curstat
c155 : 450f             [ 3] 	eor vdp_curval		; EOR with whats under cursor
                             	; Use cursor address, write to screen
                             	; ptr is base, offset with X coord in Y register
c157 : a41b             [ 3] 	ldy gr_scrngeom+gr_cur_x
c159 : 911d             [ 5] 	sta (gr_scrngeom+gr_cur_ptr),y
                             
c15b :                       int_vdp_fin	
c15b : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* update_timers
                             ;* Update 24 bit timer and debounce counters
                             ;****************************************
c15c :                       update_timers
c15c : e608             [ 5] 	inc vdp_cnt
c15e : d006             [ 3] 	bne inc_kb_timers
c160 : e609             [ 5] 	inc vdp_cnt_hi
c162 : d002             [ 3] 	bne inc_kb_timers
c164 : e60a             [ 5] 	inc vdp_cnt_hi2
c166 :                       inc_kb_timers
c166 : a62d             [ 3] 	ldx kb_deb			; Is debounce 0?
c168 : f002             [ 3] 	beq skip_kb_deb
c16a : c62d             [ 5] 	dec kb_deb
c16c :                       skip_kb_deb
c16c : a62f             [ 3] 	ldx kb_rep			; Is repeat timer 0?
c16e : f002             [ 3] 	beq skip_kb_rep
c170 : c62f             [ 5] 	dec kb_rep
AS65 Assembler for R6502 [1.42].                                     Page   51
-------------------------------- bank\bank0.s --------------------------------

c172 :                       skip_kb_rep
c172 : 60               [ 6] 	rts
                             	
                             
                             	include "utils/utils.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  UTILS.S
                             ;*  This module implements various utility functi
                             ;*  converting from ASCII to binary form for numb
                             ;*  vice-versa to allow humans to actually be abl
                             ;*  and read numbers in their prefered form!
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code
                             
c173 :                       utilPrintSPC
c173 : 48               [ 3] 	pha
c174 : a920             [ 2] 	lda #' '
c176 : 203dc4           [ 6] 	jsr io_put_ch
c179 : 68               [ 4] 	pla
c17a : 60               [ 6] 	rts
                             
c17b :                       utilPrintCRLF
c17b : 48               [ 3] 	pha
c17c : a90d             [ 2] 	lda #UTF_CR
c17e : 203dc4           [ 6] 	jsr io_put_ch
c181 : 68               [ 4] 	pla
c182 : 60               [ 6] 	rts
                             
c183 :                       utilPrintA
c183 : 8538             [ 3] 	sta tmp_d
c185 : 48               [ 3] 	pha
c186 : 8a               [ 2] 	txa
c187 : 48               [ 3] 	pha
c188 : a538             [ 3] 	lda tmp_d
c18a : 2098c1           [ 6] 	jsr str_a_to_x
c18d : 203dc4           [ 6] 	jsr io_put_ch
c190 : 8a               [ 2] 	txa
c191 : 203dc4           [ 6] 	jsr io_put_ch
c194 : 68               [ 4] 	pla
c195 : aa               [ 2] 	tax
c196 : 68               [ 4] 	pla
c197 : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* str_a_to_x
                             ;* Convert accumulator to hex string
                             ;* Input : A = Byte to convert
                             ;* Output : A = High Char, X = Low Char
                             ;* Regs affected : P
                             ;****************************************
c198 :                       str_a_to_x
AS65 Assembler for R6502 [1.42].                                     Page   52
-------------------------------- bank\bank0.s --------------------------------

c198 : 48               [ 3] 	pha					; Save the byte using later on
c199 : 290f             [ 2] 	and #0x0f			; Mask low nibble
c19b : 18               [ 2] 	clc
c19c : 6930             [ 2] 	adc #'0'			; Convert to UTF
c19e : c93a             [ 2] 	cmp #('9'+1)		; If A greater than '9' then
c1a0 : 9002             [ 3] 	bcc skip_a_f_1		; skip a-f adjustment
c1a2 : 6926             [ 2] 	adc #0x26			; Add 27 (6+C) to get in to A-F rang
c1a4 :                       skip_a_f_1
c1a4 : aa               [ 2] 	tax					; Low char is in X
c1a5 : 68               [ 4] 	pla					; Get byte back
c1a6 : 4a               [ 2] 	lsr a				; Make high nibble low
c1a7 : 4a               [ 2] 	lsr a
c1a8 : 4a               [ 2] 	lsr a
c1a9 : 4a               [ 2] 	lsr a
c1aa : 18               [ 2] 	clc
c1ab : 6930             [ 2] 	adc #'0'			; Convert to UTF
c1ad : c93a             [ 2] 	cmp #('9'+1)		; If A greater than '9' then
c1af : 9002             [ 3] 	bcc skip_a_f_2		; skip a-f adjustment
c1b1 : 6926             [ 2] 	adc #0x26			; Add 27 (6+C) to get in to A-F rang
c1b3 :                       skip_a_f_2
c1b3 : 60               [ 6] 	rts					; A high nibble, C=0
                             
                             ;****************************************
                             ;* str_x_to_a
                             ;* Convert hex string to accumulator
                             ;* Input : A = High Char, X = Low Char
                             ;* Output : A = Value
                             ;* Regs affected : P
                             ;****************************************
c1b4 :                       str_x_to_a
c1b4 : 0920             [ 2] 	ora #0x20			; Make alpha in to lower case
c1b6 : 38               [ 2] 	sec					; Process high char in A
c1b7 : e930             [ 2] 	sbc #'0'			; Convert to hex nibble
c1b9 : c90a             [ 2] 	cmp #10				; If A < 10 then
c1bb : 9002             [ 3] 	bcc skip_x_f_1		; skip a-f adjustment
c1bd : e927             [ 2] 	sbc #0x27			; Sub 7 to get in to A-F range
c1bf :                       skip_x_f_1
c1bf : c910             [ 2] 	cmp #0x10			; Nibble should be <= 0x0f
c1c1 : b01c             [ 3] 	bcs	str_x_to_a_err	; Error if not
                             
c1c3 : 0a               [ 2] 	asl a				; This is the high nibble
c1c4 : 0a               [ 2] 	asl a
c1c5 : 0a               [ 2] 	asl a
c1c6 : 0a               [ 2] 	asl a
c1c7 : 48               [ 3] 	pha					; Save the high nibble
c1c8 : 8a               [ 2] 	txa					; Now process the low char in X
c1c9 : 0920             [ 2] 	ora #0x20			; Make alpha in to lower case
c1cb : 38               [ 2] 	sec
c1cc : e930             [ 2] 	sbc #'0'			; Convert to hex nibble
c1ce : c90a             [ 2] 	cmp #10				; If A < 10 then
c1d0 : 9002             [ 3] 	bcc skip_x_f_2		; skip a-f adjustment
c1d2 : e927             [ 2] 	sbc #0x27			; Sub 7 to get in to A-F range
c1d4 :                       skip_x_f_2
c1d4 : c910             [ 2] 	cmp #0x10			; Nibble should be <= 0x0f
c1d6 : b006             [ 3] 	bcs	str_x_to_a_errl	; Error if not
                             
c1d8 : 853d             [ 3] 	sta num_a			; Store low nibble in temp
c1da : 68               [ 4] 	pla					; Get high nibble
c1db : 053d             [ 3] 	ora num_a			; OR with low nibble
                             
c1dd : 60               [ 6] 	rts					; A contains value, C=0
                             
AS65 Assembler for R6502 [1.42].                                     Page   53
-------------------------------- bank\bank0.s --------------------------------

c1de :                       str_x_to_a_errl
c1de : 68               [ 4] 	pla
c1df :                       str_x_to_a_err
                             	SWBRK CMD_ERR_VAL
                             
                             
                             ;****************************************
                             ;* con_n_to_a
                             ;* Convert numeric string to accumulator (unsigne
                             ;* Input : Pointer to string (X=L, A=H), Y = Sour
                             ;* Output : num_a, num_a+1 contains word, X=numbe
                             ;* A = Source type detected
                             ;* Regs affected : CS = Error
                             ;****************************************
c1e1 :                       con_n_to_a
c1e1 : 8649             [ 3] 	stx num_tmp
c1e3 : 854a             [ 3] 	sta num_tmp+1
c1e5 : a900             [ 2] 	lda #0
c1e7 : 853d             [ 3] 	sta num_a
c1e9 : 853e             [ 3] 	sta num_a+1
c1eb : c000             [ 2] 	cpy #NUM_ANY
c1ed : f014             [ 4] 	beq con_n_to_a_detect
c1ef : 88               [ 2] 	dey
c1f0 : d003             [ 3] 	bne con_n_not_dec
c1f2 :                       con_dec_jmp
c1f2 : 4c86c2           [ 3] 	jmp con_dec_to_a_int
c1f5 :                       con_n_not_dec
c1f5 : 88               [ 2] 	dey
c1f6 : d003             [ 3] 	bne con_n_not_hex
c1f8 :                       con_hex_jmp
c1f8 : 4c1dc2           [ 3] 	jmp con_hex_to_a_int
c1fb :                       con_n_not_hex
c1fb : 88               [ 2] 	dey
c1fc : d003             [ 4] 	bne con_n_err
c1fe :                       con_bin_jmp
c1fe : 4c5cc2           [ 3] 	jmp con_bin_to_a_int
c201 :                       con_n_err
c201 : 38               [ 2] 	sec
c202 : 60               [ 6] 	rts
c203 :                       con_n_to_a_detect		; Y is zero on entry
c203 : b149             [ 5] 	lda (num_tmp),y
c205 : c930             [ 2] 	cmp #'0'
c207 : d0e9             [ 4] 	bne con_dec_jmp
c209 : a001             [ 2] 	ldy #1
c20b : b149             [ 5] 	lda (num_tmp),y
c20d : 0920             [ 2] 	ora #0x20
c20f : c978             [ 2] 	cmp #'x'
c211 : f0e5             [ 4] 	beq con_hex_jmp
c213 : c962             [ 2] 	cmp #'b'
c215 : f0e7             [ 4] 	beq con_bin_jmp
c217 : d0d9             [ 4] 	bne con_dec_jmp		; Always branches
                             
                             ;****************************************
                             ;* con_hex_to_a
                             ;* Convert hex string to accumulator (unsigned)
                             ;* Input : Pointer to string (X=L, A=H)
                             ;* Output : num_a, num_a+1 contains word, X=numbe
                             ;* Regs affected : CS = Error
                             ;****************************************
c219 :                       con_hex_to_a
c219 : 8649             [ 3] 	stx num_tmp
c21b : 854a             [ 3] 	sta num_tmp+1
AS65 Assembler for R6502 [1.42].                                     Page   54
-------------------------------- bank\bank0.s --------------------------------

c21d :                       con_hex_to_a_int
c21d : a205             [ 2] 	ldx #5			; > 4 digits will cause error
c21f : a002             [ 2] 	ldy #2			; start at first digit
c221 :                       con_hex_digit
c221 : b149             [ 5] 	lda (num_tmp),y
c223 : 0920             [ 2] 	ora #0x20					; Make alpha in to lower case
c225 : 38               [ 2] 	sec							; Process high char in A
c226 : e930             [ 2] 	sbc #'0'					; Convert to hex nibble
c228 : c90a             [ 2] 	cmp #10						; If A < 10 then
c22a : 9002             [ 3] 	bcc con_hex_skip_x_f_1		; skip a-f adjustment
c22c : e927             [ 2] 	sbc #0x27					; Sub 7 to get in to A-F range
c22e :                       con_hex_skip_x_f_1
c22e : c910             [ 2] 	cmp #0x10					; Nibble should be <= 0x0f
c230 : b01c             [ 3] 	bcs	con_hex_done			; Potentially done if not
c232 : 48               [ 3] 	pha
c233 : a53d             [ 3] 	lda num_a
                             	; make room for lo nibble
c235 : 0a               [ 2] 	asl a
c236 : 263e             [ 5] 	rol num_a+1
c238 : 0a               [ 2] 	asl a
c239 : 263e             [ 5] 	rol num_a+1
c23b : 0a               [ 2] 	asl a
c23c : 263e             [ 5] 	rol num_a+1
c23e : 0a               [ 2] 	asl a
c23f : 263e             [ 5] 	rol num_a+1
c241 : 853d             [ 3] 	sta num_a
                             	; save in low nibble
c243 : 68               [ 4] 	pla
c244 : 053d             [ 3] 	ora num_a
c246 : 853d             [ 3] 	sta num_a
c248 : c8               [ 2] 	iny
c249 : ca               [ 2] 	dex
c24a : d0d5             [ 3] 	bne con_hex_digit
                             	; if got to a 5th digit then error
c24c :                       con_hex_err
c24c : 38               [ 2] 	sec
c24d : 60               [ 6] 	rts
                             	; found a non-hex digit
c24e :                       con_hex_done
                             	; if no digits processed then error
c24e : c002             [ 2] 	cpy #2
c250 : f0fa             [ 3] 	beq con_hex_err
                             	; move y to x for digits processed
c252 : 98               [ 2] 	tya
c253 : aa               [ 2] 	tax
c254 : a902             [ 2] 	lda #NUM_HEX
c256 : 18               [ 2] 	clc
c257 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* con_bin_to_a
                             ;* Convert bin string to accumulator (unsigned)
                             ;* Input : Pointer to string (X=L, A=H)
                             ;* Output : num_a, num_a+1 contains word, X=numbe
                             ;* Regs affected : CS = Error
                             ;****************************************
c258 :                       con_bin_to_a
c258 : 8649             [ 3] 	stx num_tmp
c25a : 854a             [ 3] 	sta num_tmp+1
c25c :                       con_bin_to_a_int
c25c : a002             [ 2] 	ldy #2
c25e : a211             [ 2] 	ldx #17						; Max 16 binary digits allowed
AS65 Assembler for R6502 [1.42].                                     Page   55
-------------------------------- bank\bank0.s --------------------------------

c260 :                       con_bin_digit
c260 : b149             [ 5] 	lda (num_tmp),y
c262 : c930             [ 2] 	cmp #'0'
c264 : 9010             [ 3] 	bcc con_bin_done
c266 : c932             [ 2] 	cmp #'1'+1
c268 : b00c             [ 3] 	bcs con_bin_done
                             	; sets C if '1' else resets C
c26a : 69cf             [ 2] 	adc #0xff-'0'
                             	; shift in digit
c26c : 263d             [ 5] 	rol num_a
c26e : 263e             [ 5] 	rol num_a+1
c270 : c8               [ 2] 	iny
c271 : ca               [ 2] 	dex
c272 : d0ec             [ 3] 	bne con_bin_digit
                             	; on the 17th digit is too much, error
c274 : f00a             [ 3] 	beq con_bin_err
c276 :                       con_bin_done
                             	; didn't process any digit = error
c276 : c002             [ 2] 	cpy #2
c278 : f006             [ 3] 	beq con_bin_err
                             	; put digits processed in to X
c27a : 98               [ 2] 	tya
c27b : aa               [ 2] 	tax
c27c : a903             [ 2] 	lda #NUM_BIN
c27e : 18               [ 2] 	clc
c27f : 60               [ 6] 	rts
c280 :                       con_bin_err
c280 :                       str_d_error
c280 : 38               [ 2] 	sec
c281 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* con_d_to_a
                             ;* Convert decimal string to accumulator (SIGNED)
                             ;* Input : Pointer to string (X=L, A=H)
                             ;* Output : num_a, num_a+1 contains word, X=numbe
                             ;* Regs affected : CS = Error
                             ;****************************************
c282 :                       con_dec_to_a
c282 : 8649             [ 3] 	stx num_tmp
c284 : 854a             [ 3] 	sta num_tmp+1
c286 :                       con_dec_to_a_int
c286 : a000             [ 2] 	ldy #0
                             	; Detect if leading minus sign
c288 : b149             [ 5] 	lda (num_tmp),y
c28a : c92d             [ 2] 	cmp #'-'
c28c : d001             [ 3] 	bne str_d_find_end
                             	; skip over minus if found
c28e : c8               [ 2] 	iny
c28f :                       str_d_find_end
c28f : b149             [ 5] 	lda (num_tmp),y
c291 : c930             [ 2] 	cmp #'0'
c293 : 9007             [ 3] 	bcc str_d_found_end
c295 : c93a             [ 2] 	cmp #'9'+1
c297 : b003             [ 3] 	bcs str_d_found_end
c299 : c8               [ 2] 	iny
c29a : d0f3             [ 3] 	bne str_d_find_end	; Possble wraparound but shou
c29c :                       str_d_found_end
c29c : c007             [ 2] 	cpy #7				; Biggest int is 6 chars
c29e : b0e0             [ 3] 	bcs str_d_error		; e.g. -32767
c2a0 : 844c             [ 3] 	sty num_tmp+3
c2a2 : a900             [ 2] 	lda #0
AS65 Assembler for R6502 [1.42].                                     Page   56
-------------------------------- bank\bank0.s --------------------------------

c2a4 : 854b             [ 3] 	sta num_tmp+2
c2a6 : 853d             [ 3] 	sta num_a
c2a8 : 853e             [ 3] 	sta num_a+1
c2aa :                       str_d_process_digit
c2aa : 88               [ 2] 	dey
c2ab : 3027             [ 3] 	bmi str_d_digits_done
                             
c2ad : b149             [ 5] 	lda (num_tmp),y
                             
c2af : c92d             [ 2] 	cmp #'-'			; Got to minus sign?
c2b1 : f021             [ 3] 	beq str_d_digits_done ; also done
                             
c2b3 : 38               [ 2] 	sec
c2b4 : e930             [ 2] 	sbc #'0'
                             	; Convert digit to number
                             	; and then offset in to
                             	; look up table of powers
c2b6 : 18               [ 2] 	clc
c2b7 : 0a               [ 2] 	asl a
c2b8 : 654b             [ 3] 	adc num_tmp+2
                             	; X contains index to powers
c2ba : aa               [ 2] 	tax
c2bb : a53d             [ 3] 	lda num_a
c2bd : 7df1c2           [ 4] 	adc str_d_powers,x
c2c0 : 853d             [ 3] 	sta num_a
c2c2 : a53e             [ 3] 	lda num_a+1
c2c4 : 7df2c2           [ 4] 	adc str_d_powers+1,x
c2c7 : 853e             [ 3] 	sta num_a+1
c2c9 : b0b5             [ 3] 	bcs str_d_error
                             	; Move to next power of 10 index
c2cb : a54b             [ 3] 	lda num_tmp+2
c2cd : 6914             [ 2] 	adc #20
c2cf : 854b             [ 3] 	sta num_tmp+2
c2d1 : 4caac2           [ 3] 	jmp str_d_process_digit
c2d4 :                       str_d_digits_done
                             	; check if minus
c2d4 : b149             [ 5] 	lda (num_tmp),y
c2d6 : c92d             [ 2] 	cmp #'-'
c2d8 : d011             [ 3] 	bne str_d_skip_neg
c2da : a64c             [ 3] 	ldx num_tmp+3		; Must have >= 2 chars
c2dc : e002             [ 2] 	cpx #2				; else it's an error
c2de : 90a0             [ 3] 	bcc str_d_error
c2e0 : a63d             [ 3] 	ldx num_a
c2e2 : a53e             [ 3] 	lda num_a+1
c2e4 : 2055c3           [ 6] 	jsr twos_complement
c2e7 : 863d             [ 3] 	stx num_a
c2e9 : 853e             [ 3] 	sta num_a+1
c2eb :                       str_d_skip_neg
c2eb : a64c             [ 3] 	ldx num_tmp+3
c2ed : a901             [ 2] 	lda #NUM_DEC
c2ef : 18               [ 2] 	clc
c2f0 : 60               [ 6] 	rts
                             
c2f1 :                       str_d_powers
c2f1 : 00000100020003..      	dw	0, 1, 2, 3, 4, 5, 6, 7, 8, 9
c305 : 00000a0014001e..      	dw	0, 10, 20, 30, 40, 50, 60, 70, 80, 90
c319 : 00006400c8002c..      	dw	0, 100, 200, 300, 400, 500, 600, 700, 800, 90
c32d : 0000e803d007b8..      	dw	0, 1000, 2000, 3000, 4000, 5000, 6000, 7000, 
c341 : 00001027204e30..      	dw	0, 10000, 20000, 30000, 40000, 50000, 60000, 
                             	
                             
                             ;****************************************
AS65 Assembler for R6502 [1.42].                                     Page   57
-------------------------------- bank\bank0.s --------------------------------

                             ;* twos_complement
                             ;* Twos complement of X,A (X=low)
                             ;* Input : X = Low byte, A = High Byte to convert
                             ;* Output : X,A in 2's complement
                             ;* Regs affected : P
                             ;****************************************
c355 :                       twos_complement
c355 : 49ff             [ 2] 	eor #0xff
c357 : 48               [ 3] 	pha
c358 : 8a               [ 2] 	txa
c359 : 49ff             [ 2] 	eor #0xff
c35b : aa               [ 2] 	tax
c35c : 68               [ 4] 	pla
c35d : e8               [ 2] 	inx
c35e : d003             [ 3] 	bne twos_complement_skip_X
c360 : 38               [ 2] 	sec			; Add 1 to A
c361 : 6900             [ 2] 	adc #0
c363 :                       twos_complement_skip_X
c363 : 60               [ 6] 	rts
                             	
                             
                             ;****************************************
                             ;* hex_to_bcd
                             ;* Convert accumulator,X to BCD
                             ;* Input : X = Low byte, A = High Byte to convert
                             ;* Output : 3 bytes of num_a is updated
                             ;* Regs affected : P
                             ;****************************************
c364 :                       hex_to_bcd
c364 : 08               [ 3] 	php
c365 : 48               [ 3] 	pha
c366 : 8538             [ 3] 	sta tmp_d
c368 : 8a               [ 2] 	txa
c369 : 48               [ 3] 	pha
c36a : a538             [ 3] 	lda tmp_d
                             
c36c : 8649             [ 3] 	stx num_tmp
c36e : 854a             [ 3] 	sta num_tmp+1
                             	
                             ;	bmi hex_to_bcd_skip_neg	; A is negative?
                             ;	jsr twos_complement
                             ;hex_to_bcd_skip_neg
c370 : a200             [ 2] 	ldx #0
c372 : 863d             [ 3] 	stx num_a
c374 : 863e             [ 3] 	stx num_a+1
c376 : 863f             [ 3] 	stx num_a+2
                             ;	stx num_a+3
c378 : a210             [ 2] 	ldx #16
c37a : f8               [ 2] 	sed
c37b :                       bin_to_bcd_bit
c37b : 0649             [ 5] 	asl num_tmp
c37d : 264a             [ 5] 	rol num_tmp+1
c37f : a53d             [ 3] 	lda num_a
c381 : 653d             [ 3] 	adc num_a
c383 : 853d             [ 3] 	sta num_a
c385 : a53e             [ 3] 	lda num_a+1
c387 : 653e             [ 3] 	adc num_a+1
c389 : 853e             [ 3] 	sta num_a+1
c38b : a53f             [ 3] 	lda num_a+2
c38d : 653f             [ 3] 	adc num_a+2
c38f : 853f             [ 3] 	sta num_a+2
c391 : ca               [ 2] 	dex
AS65 Assembler for R6502 [1.42].                                     Page   58
-------------------------------- bank\bank0.s --------------------------------

c392 : d0e7             [ 3] 	bne bin_to_bcd_bit
                             	
c394 : 68               [ 4] 	pla
c395 : aa               [ 2] 	tax
c396 : 68               [ 4] 	pla
c397 : 28               [ 4] 	plp
c398 : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* int_to_str_ch
                             ;* Helper routine to stuff decimal char in to num
                             ;* Input : A=BCD digit, Y=num_buf index, C=insert
                             ;* Output : num_buf in ASCII, A=ASCII digit
                             ;* Regs affected : C cleared if non-zero
                             ;****************************************
c399 :                       int_to_str_ch
c399 : 290f             [ 2] 	and #0xf
c39b : 0930             [ 2] 	ora #0x30					; Convert to ascii
c39d : 4930             [ 2] 	eor #0x30					; Check if zero digit
c39f : d005             [ 3] 	bne int_to_str_nz			; If not zero definitely sto
c3a1 : b003             [ 3] 	bcs int_to_str_nz			; Also if C=1
c3a3 : 4930             [ 2] 	eor #0x30					; Restore A
c3a5 : 60               [ 6] 	rts							; Return without storing anything
c3a6 :                       int_to_str_nz
c3a6 : 4930             [ 2] 	eor #0x30					; Restore A
c3a8 : 994d00           [ 5] 	sta num_buf,y
c3ab : c8               [ 2] 	iny
c3ac : 38               [ 2] 	sec							; Set C as a non-zero encountered
c3ad :                       int_to_str_ch_fin
c3ad : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* int_to_str
                             ;* Convert int to string
                             ;* Input : in X,A (low,high), C=leading zeros wan
                             ;* Output : num_buf in ASCII 6 digits + zero term
                             ;* Regs affected : P
                             ;****************************************
c3ae :                       int_to_str
                             	_pushAXY
                             
c3b7 : a000             [ 2] 	ldy #0						; first pos of num_buf
c3b9 : 0900             [ 2] 	ora #0						; Test A for sign bit
c3bb : 08               [ 3] 	php							; Remember C bit of P
c3bc : 100a             [ 3] 	bpl int_to_str_skip_neg		; Skip if not (postive 
c3be : 2055c3           [ 6] 	jsr twos_complement			; Flip X,A from 2s complem
c3c1 : 48               [ 3] 	pha							; Remember A
c3c2 : a92d             [ 2] 	lda #'-'					; Put in negative sign
c3c4 : 854d             [ 3] 	sta num_buf
c3c6 : c8               [ 2] 	iny							; Start at second buffer pos
c3c7 : 68               [ 4] 	pla							; Restore A
c3c8 :                       int_to_str_skip_neg
c3c8 : 2064c3           [ 6]  	jsr hex_to_bcd				; Convert X,A to BCD
c3cb : a202             [ 2] 	ldx #2						; Start at BCD high byte
c3cd :                       int_str
c3cd : 28               [ 4] 	plp							; Get C but immediately
c3ce : 08               [ 3] 	php							; Save C (due to loop check later)
c3cf : b53d             [ 4] 	lda num_a,x					; Get BCD digit
c3d1 : 8554             [ 3] 	sta num_buf+7				; Save A it for the units later
c3d3 : 4a               [ 2] 	lsr a						; Tens - shift to lower nibble
AS65 Assembler for R6502 [1.42].                                     Page   59
-------------------------------- bank\bank0.s --------------------------------

c3d4 : 4a               [ 2] 	lsr a
c3d5 : 4a               [ 2] 	lsr a
c3d6 : 4a               [ 2] 	lsr a
c3d7 : 28               [ 4] 	plp							; Get C
c3d8 : 2099c3           [ 6] 	jsr int_to_str_ch			; Put ASCII code in num_buf
c3db : a554             [ 3] 	lda num_buf+7				; Get A for the units
c3dd : 2099c3           [ 6] 	jsr int_to_str_ch			; Put ASCII code in num_buf
c3e0 : 08               [ 3] 	php							; Save C
c3e1 : ca               [ 2] 	dex
c3e2 : 10e9             [ 3] 	bpl int_str
c3e4 : 28               [ 4] 	plp							; Check C
c3e5 : b005             [ 3] 	bcs	int_to_str_fin			; If set then something pri
c3e7 : a930             [ 2] 	lda #'0'					; Stuff a zero
c3e9 : 854d             [ 3] 	sta num_buf					; Must be in first position..
c3eb : c8               [ 2] 	iny
c3ec :                       int_to_str_fin
c3ec : a900             [ 2] 	lda #0						; Terminator
c3ee : 994d00           [ 5] 	sta num_buf,y
c3f1 : c8               [ 2] 	iny
                             	_pullAXY
                             
c3f7 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* bcd_to_str
                             ;* Convert num_buf to chars
                             ;* Input : num_a in BCD format
                             ;* Output : num_buf in ASCII 6 digits
                             ;* Output is big endian, input is not
                             ;* Regs affected : P
                             ;****************************************
                             ;bcd_to_str
                             ;	_pushAXY
                             ;
                             ;	ldx #5						; Index in to string
                             ;	ldy #0						; Current BCD digit
                             ;bcd_str
                             ;	lda num_a,y
                             ;	; Convert 1s digit of byte
                             ;	pha
                             ;	and #0xf
                             ;	clc
                             ;	adc #0x30
                             ;	sta num_buf,x
                             ;	; Convert 10s digit of byte
                             ;	pla
                             ;	lsr a
                             ;	lsr a
                             ;	lsr a
                             ;	lsr a
                             ;	clc
                             ;	adc #0x30					; Convert to ASCII
                             ;	sta num_buf-1,x
                             ;	dex
                             ;	dex
                             ;	iny
                             ;	cpy #3						; 3 BCD digits max
                             ;	bne bcd_str
                             ;
                             ;	_pullAXY
                             ;	rts
                             	
AS65 Assembler for R6502 [1.42].                                     Page   60
-------------------------------- bank\bank0.s --------------------------------

                             ;****************************************
                             ;* out_bcd
                             ;* Output a bcd string in num_buf
                             ;* Input : num_buf has the ASCII
                             ;* Input : C=1 print leading zeros else not
                             ;* Output : num_buf in ASCII 6 digits
                             ;* Output is big endian, input is not, Y=digits p
                             ;* Regs affected : P
                             ;****************************************
                             ;out_bcd
                             ;	pha
                             ;	txa
                             ;	pha
                             ;	php
                             ;	ldy #0						; How many digits printed
                             ;	ldx #0						; Index in to string
                             ;out_bcd_digit
                             ;	lda num_buf,x
                             ;	cpy #0						; If not in leading zero mode
                             ;	bne out_bcd_print			; No then go print
                             ;
                             ;	cmp #'0'					; else check if zero
                             ;	bne out_bcd_print			; No then go print
                             ;
                             ;	plp
                             ;	php
                             ;	bcc out_bcd_next			; If C=0 go to next digit, e
                             ;out_bcd_print
                             ;	iny
                             ;	jsr io_put_ch
                             ;out_bcd_next
                             ;	inx
                             ;	cpx #6
                             ;	bne out_bcd_digit
                             ;	tya							; If nothing printed
                             ;	bne out_bcd_fin
                             ;	lda #'0'					; Need to put out 1 zero
                             ;	jsr io_put_ch
                             ;	iny
                             ;out_bcd_fin
                             ;	plp
                             ;	pla
                             ;	tax
                             ;	pla
                             ;	clc
                             ;	rts
                             	
                             	
                             ;****************************************
                             ;* print_a_to_d
                             ;* Convert X,A to decimal string
                             ;* Input : X,A = number Low,High
                             ;* Input : C=1 print leading zeros else not
                             ;* Output : num_buf in ASCII max 6 digits
                             ;*          Y=digits printed including sign
                             ;* Output is big endian, input is not
                             ;* Regs affected : P
                             ;****************************************
c3f8 :                       print_a_to_d
c3f8 : 20aec3           [ 6] 	jsr int_to_str
c3fb : a000             [ 2] 	ldy #0
c3fd :                       print_a_to_d_ch
AS65 Assembler for R6502 [1.42].                                     Page   61
-------------------------------- bank\bank0.s --------------------------------

c3fd : b94d00           [ 4] 	lda num_buf,y
c400 : f006             [ 3] 	beq print_a_to_d_fin
c402 : 203dc4           [ 6] 	jsr io_put_ch
c405 : c8               [ 2] 	iny
c406 : d0f5             [ 4] 	bne print_a_to_d_ch
c408 :                       print_a_to_d_fin
c408 : 60               [ 6] 	rts
                             
                             ;	php
                             ;	cmp #0x80					; Check if sign bit is set
                             ;	bcc print_a_to_d_skip_neg	; Skip if not (postiv
                             ;	jsr twos_complement			; Flip from 2s complement
                             ;	jsr hex_to_bcd				; Convert to BCD
                             ;	jsr bcd_to_str				; Convert BCD to string
                             ;	lda #'-'
                             ;	jsr io_put_ch
                             ;	plp							; Leading zeros preference
                             ;	jsr out_bcd
                             ;	iny							; Account for sign
                             ;	rts
                             ;print_a_to_d_skip_neg
                             ;	jsr hex_to_bcd				; Convert to BCD
                             ;	jsr bcd_to_str				; Convert BCD to string
                             ;	plp							; Leading zeros preference
                             ;	jmp out_bcd					; Print +ve string
                             	
                             	include "io/io.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  IO.S
                             ;*  General IO module.  Allows different IO devic
                             ;*  utilised transparently by the rest of the cod
                             ;*  Other code should use "io_" commands so that 
                             ;*  do not need to know what specific device is p
                             ;*  input and output capabilities.
                             ;*	On startup, the kernel defaults to keyboard an
                             ;*  examines the BBC DIP switch to decide whether
                             ;*	but when saving and loading points to tape rou
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code
                             
c409 :                       mod_sz_io_s
                             
                             ;****************************************
                             ;* io_init
                             ;* Initialise the default device and make active
                             ;* No keys pressed = serial (default)
                             ;* F0 pressed = KB/VDP
                             ;* F1 pressed = Serial
                             ;* Keyboard and screen or serial port
                             ;* Output : None
                             ;* Regs affected : P, A
                             ;****************************************
AS65 Assembler for R6502 [1.42].                                     Page   62
-------------------------------- bank\bank0.s --------------------------------

c409 :                       io_init
c409 : a901             [ 2] 	lda #1				; Default = KB/VDP
c40b : 8d0006           [ 4] 	sta io_default
c40e : 4c14c4           [ 3] 	jmp io_active_device; Activate the device
                             
                             
                             ;****************************************
                             ;* io_set_default, io_active_device
                             ;* Activate device based on default or A
                             ;* Input : A = Device number
                             ;* Output : None
                             ;* Regs affected : P, A
                             ;****************************************
c411 :                       io_set_default			; Entry point for default
c411 : ad0006           [ 4] 	lda io_default
c414 :                       io_active_device		; Entry point for A set
c414 : aa               [ 2] 	tax					; X=buf size index
c415 : 0a               [ 2] 	asl	a				; x16 the Block number
c416 : 0a               [ 2] 	asl a
c417 : 0a               [ 2] 	asl a
c418 : 0a               [ 2] 	asl a
c419 : a8               [ 2] 	tay					; Y=index in to device table
c41a : bda0c4           [ 4] 	lda io_buf_sz,x
c41d : 853b             [ 3] 	sta buf_sz
c41f : a200             [ 2] 	ldx #0
                             	; Copy device settings to io block
c421 :                       io_copy_data
c421 : b9a2c4           [ 4] 	lda io_devices,y
c424 : 9d0106           [ 5] 	sta io_block,x
c427 : c8               [ 2] 	iny
c428 : e8               [ 2] 	inx
c429 : e010             [ 2] 	cpx #16
c42b : d0f4             [ 3] 	bne io_copy_data
                             	
c42d : a913             [ 2] 	lda #lo(scratch)	; Initialise IO buffer and size
c42f : 8539             [ 3] 	sta buf_lo
c431 : a906             [ 2] 	lda #hi(scratch)
c433 : 853a             [ 3] 	sta buf_hi
c435 : a90d             [ 2] 	lda #UTF_CR			; Line terminator is CR
c437 : 853c             [ 3] 	sta buf_ef
c439 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* io_get_ch
                             ;* Get a char (wait forever or just check)
                             ;* Input : C = 1 for synchronous, 0 for async
                             ;* Output : A = Byte code, C = 1 means A is inval
                             ;* Regs affected : P, A
                             ;****************************************
c43a :                       io_get_ch
c43a : 6c0106           [ 6] 	jmp (io_block+io_get_byte)
                             	
                             
                             ;****************************************
                             ;* io_put_ch
                             ;* Put a char
                             ;* Input : A = char
                             ;* Regs affected : P, A
                             ;****************************************
c43d :                       io_put_ch
c43d : 6c0306           [ 6] 	jmp (io_block+io_put_byte)
                             	
AS65 Assembler for R6502 [1.42].                                     Page   63
-------------------------------- bank\bank0.s --------------------------------

                             ;****************************************
                             ;* io_open_read
                             ;* Open for reading
                             ;* Input : X,A = pointer to filename (zero termin
                             ;* Output : C=0 success
                             ;* Regs affected : All
                             ;****************************************
c440 :                       io_open_read
c440 : 6c0506           [ 6] 	jmp (io_block+io_open_r)
                             	
                             ;****************************************
                             ;* io_open_write
                             ;* Open for reading
                             ;* Input : X,A = pointer to filename (zero termin
                             ;* Output : C=0 success
                             ;* Regs affected : All
                             ;****************************************
c443 :                       io_open_write
c443 : 6c0706           [ 6] 	jmp (io_block+io_open_w)
                             
                             ;****************************************
                             ;* io_close
                             ;* Close a file
                             ;* Input : 
                             ;* Output : C=0 success
                             ;* Regs affected : All
                             ;****************************************
c446 :                       io_close
c446 : 6c0906           [ 6] 	jmp (io_block+io_close_f)
                             	
                             ;****************************************
                             ;* io_delete
                             ;* Delete a file
                             ;* Input : 
                             ;* Output : C=0 success
                             ;* Regs affected : All
                             ;****************************************
c449 :                       io_delete
c449 : 6c0b06           [ 6] 	jmp (io_block+io_del_f)
                             
                             ;****************************************
                             ;* io_open_ext1
                             ;* Extended function 1
                             ;* Input : 
                             ;* Output : C=0 success
                             ;* Regs affected : All
                             ;****************************************
c44c :                       io_open_ext1
c44c : 6c0d06           [ 6] 	jmp (io_block+io_ext1)
                             	
                             ;****************************************
                             ;* io_open_ext2
                             ;* Extended function 2
                             ;* Input : 
                             ;* Output : C=0 success
                             ;* Regs affected : All
                             ;****************************************
c44f :                       io_open_ext2
c44f : 6c0f06           [ 6] 	jmp (io_block+io_ext2)
                             	
                             ;****************************************
                             ;* io_read_line
AS65 Assembler for R6502 [1.42].                                     Page   64
-------------------------------- bank\bank0.s --------------------------------

                             ;* Read a line, terminated by terminating char or
                             ;* Input : buf_(lo/hi/sz/ef) : Address, Max size,
                             ;* Output : Y = Line length C = Buffer limit reac
                             ;* Regs affected : None
                             ;****************************************
c452 :                       io_read_line
c452 : 48               [ 3] 	pha
                             
c453 : 08               [ 3] 	php					; Save echo state
                             	
c454 : a000             [ 2] 	ldy #0x00			; Starting at first byte
c456 :                       io_get_line_byte
c456 : 38               [ 2] 	sec					; Getting bytes synchronously
c457 : 203ac4           [ 6] 	jsr io_get_ch		; Get a byte
c45a : b027             [ 3] 	bcs io_get_line_done; Got nothing then finish
c45c : 28               [ 4] 	plp					; Get echo state
c45d : 08               [ 3] 	php					; Instantly save it back
c45e : 900c             [ 3] 	bcc io_skip_echo	; Carry not set = don't echo
c460 : c97f             [ 2] 	cmp #UTF_DEL		; Delete?
c462 : d005             [ 3] 	bne io_do_echo
c464 : c000             [ 2] 	cpy #0				; Already at beginning?
c466 : f004             [ 3] 	beq io_skip_echo	; Don't echo delete
c468 : 88               [ 2] 	dey					; Else decrement length
c469 :                       io_do_echo
c469 : 203dc4           [ 6] 	jsr io_put_ch		; Echo it
c46c :                       io_skip_echo
c46c : c920             [ 2] 	cmp #UTF_SPECIAL	; Special character?
c46e : 9007             [ 3] 	bcc io_skip_special	; Skip if so (don't add to b
c470 : c97f             [ 2] 	cmp #UTF_DEL		; Don't proces DEL either
c472 : f003             [ 3] 	beq io_skip_special
c474 : 9139             [ 5] 	sta (buf_lo),y		; Save it
c476 : c8               [ 2] 	iny					; Increase length
c477 :                       io_skip_special
c477 : c53c             [ 3] 	cmp buf_ef			; Is it the terminating char?
c479 : f008             [ 3] 	beq io_get_line_done	; If yes then done
c47b : c43b             [ 3] 	cpy buf_sz			; Reached the buffer max size?
c47d : d0d7             [ 3] 	bne io_get_line_byte	; No, get another byte
c47f : 28               [ 4] 	plp					; Remember to pull echo state off stack
c480 : 38               [ 2] 	sec					; Yes, set carry flag
c481 : 68               [ 4] 	pla
c482 : 60               [ 6] 	rts					; And done
c483 :                       io_get_line_done
c483 : a900             [ 2] 	lda #0
c485 : 9139             [ 5] 	sta (buf_lo),y		; Terminate with 0
c487 : 28               [ 4] 	plp					; Remember to pull echo state off stack
c488 : 18               [ 2] 	clc					; Clear carry flag
c489 : 68               [ 4] 	pla
c48a : 60               [ 6] 	rts					; Fin
                             
                             ;****************************************
                             ;* io_print_line
                             ;* Print a line (when data is not already in seri
                             ;* Input : X = Address Lo, A = Address Hi
                             ;* Output : Y=number chars output
                             ;* Regs affected : All
                             ;****************************************
c48b :                       io_print_line
c48b : 48               [ 3] 	pha
                             
c48c : 8636             [ 3] 	stx tmp_clo					; Store the string pointer
c48e : 8537             [ 3] 	sta tmp_chi					; lo and hi
c490 : a000             [ 2] 	ldy #0						; Start at the beginning!
AS65 Assembler for R6502 [1.42].                                     Page   65
-------------------------------- bank\bank0.s --------------------------------

c492 :                       io_print_line_byte
c492 : b136             [ 5] 	lda (tmp_clo),y				; Copy byte to
c494 : f006             [ 3] 	beq io_print_done			; If zero then done - print
c496 : 203dc4           [ 6] 	jsr io_put_ch				; Transmit
c499 : c8               [ 2] 	iny
c49a : d0f6             [ 3] 	bne io_print_line_byte		; Carry on until zero fo
c49c :                       io_print_done
c49c : 68               [ 4] 	pla
c49d : 60               [ 6] 	rts
                             
                             
                             ;*** Null operation just clc and return ***
c49e :                       io_null_op
c49e : 18               [ 2] 	clc
c49f : 60               [ 6] 	rts
                             	
                             ;* IO buffer sizes
c4a0 :                       io_buf_sz
c4a0 : ff                    	db 255					; Device 0 = Tape
c4a1 : 7f                    	db 127					; Device 1 = keyboard/screen
                             
                             ;* IO devices defined here
c4a2 :                       io_devices
                             ;* Device zero is the tape system
                             ;* only offers get and put
                             ;* This is a block based device
c4a2 :                       io_device0					; Tape device, input = Tape, outpu
c4a2 : e5c6                  	dw	tp_get_byte			; io_get_ch
c4a4 : 0cc6                  	dw	tp_put_byte			; io_put_ch
c4a6 : 75c5                  	dw	tp_open_read		; io_open_r
c4a8 : c6c5                  	dw	tp_open_write		; io_open_w
c4aa : a8c5                  	dw	tp_close			; io_close_f
c4ac : 9ec4                  	dw	io_null_op			; io_del_f
c4ae : 75c5                  	dw	tp_open_bread		; io_ext1 - open for binary re
c4b0 : c0c5                  	dw	tp_open_bwrite		; io_ext2 - open for binary w
                             ;* Device one is keyboard / screen
                             ;* only offers get and put
                             ;* This is a char based device
c4b2 :                       io_device1					; Default device, input = screen e
c4b2 : dace                  	dw	gr_get_key			; io_get_ch
c4b4 : 10cf                  	dw	gr_put_byte			; io_put_ch
c4b6 : 9ec4                  	dw	io_null_op			; io_open_r
c4b8 : 9ec4                  	dw	io_null_op			; io_open_w
c4ba : 9ec4                  	dw	io_null_op			; io_close_f
c4bc : 9ec4                  	dw	io_null_op			; io_del_f
c4be : 9ec4                  	dw	io_null_op			; io_ext1
c4c0 : 9ec4                  	dw	io_null_op			; io_ext2
                             ;* Serial device using printer port ACK (input) a
                             ;* This is a char based device
                             ;io_device2					; Serial device, input = Ser, out
                             ;	dw	ser_get_byte		; io_get_ch
                             ;	dw	ser_put_byte		; io_put_ch
                             ;	dw	ser_open			; io_open_r
                             ;	dw	ser_open			; io_open_w
                             ;	dw	ser_close			; io_close_f
                             ;	dw	io_null_op			; io_del_f
                             ;	dw	io_null_op			; io_ext1
                             ;	dw	io_null_op			; io_ext2
                             
c4c2 :                       mod_sz_io_e
                             
                             
AS65 Assembler for R6502 [1.42].                                     Page   66
-------------------------------- bank\bank0.s --------------------------------

                             
                             ;* Reset vector points here - 6502 starts here
c4c2 :                       init
                             ;	jmp init_test
                             	; First clear ram
c4c2 : 78               [ 2] 	sei					; Need this for MOS 6502
c4c3 : d8               [ 2] 	cld					; Need this for MOS 6502
c4c4 : 4ceec4           [ 3] 	jmp init_ram		; jmp not jsr to ram initialiser
c4c7 :                       init_2					; init_ram will jump back to here
c4c7 : a2ff             [ 2] 	ldx #0xff			; Initialise stack pointer
c4c9 : 9a               [ 2] 	txs
                             
c4ca : 20d0c4           [ 6] 	jsr kernel_init
                             
c4cd : 4c77c0           [ 3] 	jmp main
                             
c4d0 :                       kernel_init
c4d0 : 20cdc0           [ 6] 	jsr init_irq		; Initialise IRQ handling
                             
c4d3 : 200ec5           [ 6] 	jsr init_via0		; initialise cia 0 - tape inactiv
c4d6 : 205dc5           [ 6] 	jsr tp_init			; Initialise tape handling
                             
c4d9 : 2017d4           [ 6] 	jsr init_snd		; initialise the sound chip
                             
c4dc : 207ccc           [ 6] 	jsr gr_init			; Initialise graphics, default is 
                             
c4df : 2050c7           [ 6] 	jsr init_keyboard	; initialise keyboard timer se
c4e2 : 2009c4           [ 6] 	jsr io_init			; Set default input/output device
                             
c4e5 : a900             [ 2] 	lda #0
c4e7 : 8508             [ 3] 	sta vdp_cnt
                             
c4e9 : 20a4f6           [ 6] 	jsr df_init			; Initialise interpreter
                             
c4ec : 58               [ 2] 	cli					; irq interrupts enable
                             
c4ed :                       kernel_test
                             ;	jsr kb_read_raw
                             ;	jsr utilPrintA
                             ;	jsr utilPrintCRLF
                             ;	jmp kernel_test
                             	
c4ed : 60               [ 6] 	rts
                             
                             
                             ;* Initialises RAM, skipping page 3 which is for 
                             ;* Zeroes all addressable RAM in the default bank
c4ee :                       init_ram
c4ee : a900             [ 2] 	lda #0				; Normal RAM filled with zero
c4f0 : a002             [ 2] 	ldy #0x02			; But Y initially at 2 to not overwr
c4f2 : aa               [ 2] 	tax 				; Page counter starts at zero
c4f3 : 8600             [ 3] 	stx 0x00			; Start at page 0
c4f5 : 8601             [ 3] 	stx 0x01
c4f7 :                       init_ram_1
c4f7 : e003             [ 2] 	cpx	#3				; Ignore page 3 (IO page)
c4f9 : f005             [ 4] 	beq init_ram_skip
c4fb :                       init_ram_fill
c4fb : 9100             [ 5] 	sta (0x00),y		; Write byte to RAM (zero or copy 
c4fd : c8               [ 2] 	iny
c4fe : d0f7             [ 3] 	bne init_ram_1		; Do a whole page
c500 :                       init_ram_skip
c500 : e601             [ 5] 	inc 0x01			; Increase page pointer
AS65 Assembler for R6502 [1.42].                                     Page   67
-------------------------------- bank\bank0.s --------------------------------

c502 : e8               [ 2] 	inx					; Reduce page count
c503 : e0c0             [ 2] 	cpx #0xc0			; Do all pages until page until we g
c505 : d0f0             [ 4] 	bne init_ram_1
                             
c507 : 4cc7c4           [ 3] 	jmp init_2			; Carry on initialisation
                             
                             ; 6502 Non-maskable interrupt come here
c50a :                       nmi
c50a : 40               [ 6] 	rti
                             
c50b :                       mod_sz_kernel_e
                             
                             
                             
                             ; Bank specific code goes here
                             	include "cia/cia.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  CIA.S
                             ;*  Code to initialise and utilise the 6522, whic
                             ;*	for various functions on the Oric including;
                             ;*		Port A:
                             ;*			[7..0] 	Printer data bits
                             ;*			[7..0] 	Interface to AY-3-8912
                             ;*		Port B:
                             ;*			[2..0] 	Keyboard matrix row selector
                             ;*			[7]	   	Tape output
                             ;*			[6]    	Tape player motor signal
                             ;*			[4]		Printer strobe
                             ;*		CA1:		Printer ACK
                             ;*		CB1: 		Tape input
                             ;*		CA2,CB2: 	Selecting the AY-3-8912
                             ;*
                             ;*  This file is called cia.s because code was or
                             ;*  for a MOS 6526 from a CMB64, but didn't get a
                             ;*	renaming this file ;-)
                             ;*
                             ;************************************************
                             
                             
                             	; ROM code
                             	code
                             
c50b :                       mod_sz_cia_s
                             
                             
                             ;****************************************
                             ;* init_via0
                             ;* Initialise cia 0
                             ;* Input : None
                             ;* Output : None
                             ;* Regs affected : A
                             ;****************************************
c50b :                       init_via0_tape					; initialisation bytes for tap
c50b : a017             [ 2] 	ldy #init_tape_tab-init_via0_tab
c50d : 2c                    	db 0x2c						; Ignore next two bytes
AS65 Assembler for R6502 [1.42].                                     Page   68
-------------------------------- bank\bank0.s --------------------------------

c50e :                       init_via0
c50e : a000             [ 2] 	ldy #0						; Standard initialisation of VIA
c510 :                       init_via0_loop
c510 : b921c5           [ 4] 	lda init_via0_tab,y
c513 : 300b             [ 3] 	bmi init_via0_done
c515 : aa               [ 2] 	tax
c516 : c8               [ 2] 	iny
c517 : b921c5           [ 4] 	lda init_via0_tab,y
c51a : 9d0003           [ 5] 	sta IO_0,x
c51d : c8               [ 2] 	iny
c51e : d0f0             [ 3] 	bne init_via0_loop
                             
c520 :                       init_via0_done
c520 : 60               [ 6] 	rts							; return from sub
                             
c521 :                       init_via0_tab
c521 : 0e7f                  	db IER, 	0x7f
c523 : 03ff                  	db DDRA,	0xff			; Port A output by default
c525 : 02f7                  	db DDRB,	0xf7			; Tape motor + KB select
c527 : 00b7                  	db PRB,		KB_PRB+7		; Port B default (cassette mo
c529 : 0cdd                  	db PCR,		0xdd			; Ensure AY is not selected (CB1
c52b : 0420                  	db T1CL,	lo(TIMER1_RATE)	; 50Hz
c52d : 0620                  	db T1LL,	lo(TIMER1_RATE)	; 50Hz
c52f : 054e                  	db T1CH,	hi(TIMER1_RATE)	; 50Hz
c531 : 074e                  	db T1LH,	hi(TIMER1_RATE)	; 50Hz
c533 : 0b40                  	db ACR,		0x40			; Timer 1 continuous
c535 : 0ec0                  	db IER,		0xc0			; Timer 1 interrupt enabled
c537 : ff                    	db -1
c538 :                       init_tape_tab
c538 : 0e7f                  	db IER,		0x7f			; Disable all interrupts
c53a : 08f4                  	db T2CL,	0xf4			; Timer 2 used for measuring CB1
c53c : 0c10                  	db PCR,		0x10			; Interrupt on CB1 positive edge
                             ;	db DDRB,	0xff			; Set port B output
c53e : 0bc0                  	db ACR,		0xc0			; T1 continuous and toggle PB7
c540 : 04a0                  	db T1CL,	lo(TAPE_RATE*2)	; Tape rate /2 = 0
c542 : 0501                  	db T1CH,	hi(TAPE_RATE*2)	; Tape rate /2 = 0
c544 : 00f0                  	db PRB,		KB_PRB+0x40		; Tape motor ON
c546 : ff                    	db -1
                             ;init_ser_tab
                             ;	db IER,		0x7f			; Disable all interrupts
                             ;	db T2CL,	0xf4			; Timer 2 used for measuring bi
                             ;	db PCR,		0xdd			; Ensure AY is not selected (CB
                             ;	db DDRB,	0xff			; Set port B output
                             ;	db -1
                             
c547 :                       mod_sz_cia_e
                             
                             	include "tape/tape.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  TAPE.S
                             ;*	These routines allow for tape input/output
                             ;*	The tape format is not compatible with a regul
                             ;*	but is a block format as follows;
                             ;*	Some zero bits (64) start a block.
                             ;*	Then two bytes of data representing the block 
AS65 Assembler for R6502 [1.42].                                     Page   69
-------------------------------- bank\bank0.s --------------------------------

                             ;*	Then 256 bytes of block data.
                             ;*	Each byte above consists of two '1' start bits
                             ;*	one '0' stop bit.
                             ;*	After each block, 1 second of 4800Hz (seen as 
                             ;*	is transmitted to allow the CPU to deal with t
                             ;*	when subsequently loading.
                             ;*	A bit is 4800Hz half cycle then 4800Hz half cy
                             ;*	'1' or 2400Hz half cycle for a '0', except for
                             ;*	block which is one second of 2400Hz.
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code
                             
c547 :                       tp_open_msg
c547 : 4c6f6164696e67..      	db	"Loading:",0
c550 :                       tp_save_msg
c550 : 536176696e673a00      	db	"Saving:",0
c558 :                       tp_back4
c558 : 0808080800            	db	8,8,8,8,0
                             	
                             ;* tp_init
                             ;* Basic initialisation for tape handling
c55d :                       tp_init
c55d : a900             [ 2] 	lda #0
c55f : 8558             [ 3] 	sta tp_flag
c561 : 8557             [ 3] 	sta tp_idx
c563 : 18               [ 2] 	clc
c564 : 60               [ 6] 	rts
                             
                             ;* Common function to open tape
c565 :                       tp_open_common				; Used by open write too
c565 : 78               [ 2] 	sei						; Interrupts disabled from here..
c566 : 200bc5           [ 6] 	jsr init_via0_tape		; Get ready to output (tape 
                             
                             
c569 : a200             [ 2] 	ldx #0
c56b : 8657             [ 3] 	stx tp_idx				; Initialise block
c56d : 8655             [ 3] 	stx tp_block
c56f : 8656             [ 3] 	stx tp_block+1
c571 : e8               [ 2] 	inx
c572 : 8658             [ 3] 	stx tp_flag				; assume 1 = Read mode
c574 : 60               [ 6] 	rts
                             
                             ;* tp_open_read
                             ;* Open tape settings
                             
c575 :                       fd_cload_getname_pc			; ** FOR ORICUTRON EMULATOR
                             
c575 :                       tp_open_bread
c575 :                       tp_open_read
c575 : a047             [ 2] 	ldy #lo(tp_open_msg)
c577 : a9c5             [ 2] 	lda #hi(tp_open_msg)
c579 : 2064cf           [ 6] 	jsr gr_print_msg
                             	
c57c : 2065c5           [ 6] 	jsr tp_open_common
                             
c57f :                       tp_get_fname_start
c57f : 2021c7           [ 6] 	jsr tp_read_byte
c582 : c924             [ 2] 	cmp #'$'				; Find the $ symbol
c584 : d0f9             [ 3] 	bne tp_get_fname_start
AS65 Assembler for R6502 [1.42].                                     Page   70
-------------------------------- bank\bank0.s --------------------------------

                             	
c586 : a209             [ 2] 	ldx #9					; 9 byte header - skip
c588 :                       tp_get_header
c588 : 2021c7           [ 6] 	jsr tp_read_byte
c58b : ca               [ 2] 	dex
c58c : d0fa             [ 3] 	bne tp_get_header
                             	
                             	; X= zero here, now get null terminated filename
c58e :                       tp_get_fname
c58e : 2021c7           [ 6] 	jsr tp_read_byte
c591 : 9d0004           [ 5] 	sta df_linbuff,x
c594 : e8               [ 2] 	inx
c595 : c900             [ 2] 	cmp #0
c597 : d0f5             [ 3] 	bne tp_get_fname
                             
c599 : a000             [ 2] 	ldy #lo(df_linbuff)
c59b : a904             [ 2] 	lda #hi(df_linbuff)
c59d : 2064cf           [ 6] 	jsr gr_print_msg
c5a0 : a920             [ 2] 	lda #' '
c5a2 : 2010cf           [ 6] 	jsr gr_put_byte
                             
c5a5 : 18               [ 2] 	clc
c5a6 : 60               [ 6] 	rts
                             
c5a7 :                       tt_getsync_pc				; ** FOR ORICUTRON EMULATOR **
c5a7 :                       tt_getsync_end_pc			; ** FOR ORICUTRON EMULATOR *
                             
c5a7 : ea               [ 2] 	nop
                             	
                             
                             ;* tp_close
                             ;* Close tape settings
c5a8 :                       tp_close
c5a8 : a558             [ 3] 	lda tp_flag
c5aa : c902             [ 2] 	cmp #2					; Write mode?
c5ac : d003             [ 3] 	bne tp_close_no_flush	; If not no need to flush
c5ae : 203ec6           [ 6] 	jsr tp_put_block		; Flush the current block
c5b1 :                       tp_close_no_flush
c5b1 : a90d             [ 2] 	lda #0x0d				; Line feed
c5b3 : 2010cf           [ 6] 	jsr gr_put_byte
                             	
c5b6 : 200ec5           [ 6] 	jsr init_via0			; Back to normal
c5b9 : 58               [ 2] 	cli
c5ba : a900             [ 2] 	lda #0					; Zero tape flag
c5bc : 8558             [ 3] 	sta tp_flag
                             
c5be :                       tt_csave_end_pc				; ** FOR ORICUTRON EMULATOR **
                             
c5be : 18               [ 2] 	clc
c5bf : 60               [ 6] 	rts
                             
                             ;* tp_open_write
                             ;* Open tape settings
c5c0 :                       tp_open_bwrite
c5c0 : a001             [ 2] 	ldy #hi(0x101)
c5c2 : a201             [ 2] 	ldx #lo(0x101)
c5c4 : d004             [ 3] 	bne tp_open_write_start
c5c6 :                       tp_open_write
c5c6 : a018             [ 2] 	ldy #hi(6000+0x101)
c5c8 : a271             [ 2] 	ldx #lo(6000+0x101)
                             
c5ca :                       fd_csave_getname_pc			; ** FOR ORICUTRON EMULATOR
AS65 Assembler for R6502 [1.42].                                     Page   71
-------------------------------- bank\bank0.s --------------------------------

                             
c5ca :                       tp_open_write_start
c5ca : 845a             [ 3] 	sty tp_delay+1
c5cc : 8659             [ 3] 	stx tp_delay
c5ce : a050             [ 2] 	ldy #lo(tp_save_msg)
c5d0 : a9c5             [ 2] 	lda #hi(tp_save_msg)
c5d2 : 2064cf           [ 6] 	jsr gr_print_msg
c5d5 : a000             [ 2] 	ldy #lo(df_linbuff)
c5d7 : a904             [ 2] 	lda #hi(df_linbuff)
c5d9 : 2064cf           [ 6] 	jsr gr_print_msg
c5dc : a920             [ 2] 	lda #' '
c5de : 2010cf           [ 6] 	jsr gr_put_byte
                             	
c5e1 : 2065c5           [ 6] 	jsr tp_open_common		; Same as reading but
c5e4 : e658             [ 5] 	inc tp_flag				; Make flag = 2 for write mode
                             
c5e6 :                       tt_writeleader_pc			; ** FOR ORICUTRON EMULATOR *
c5e6 :                       tt_writeleader_end_pc		; ** FOR ORICUTRON EMULATO
c5e6 : a280             [ 2] 	ldx #128				; 128 low bits
c5e8 : 2036c6           [ 6] 	jsr tp_put_delay
                             
c5eb : a924             [ 2] 	lda #'$'				; Start of header symbol
c5ed : 38               [ 2] 	sec
c5ee : 208dc6           [ 6] 	jsr tp_write_byte
                             	
c5f1 : a209             [ 2] 	ldx #9					; Header, for future expansion
c5f3 : a9ff             [ 2] 	lda #0xff
c5f5 :                       tp_write_header	
c5f5 : 38               [ 2] 	sec
c5f6 : 208dc6           [ 6] 	jsr tp_write_byte
c5f9 : ca               [ 2] 	dex
c5fa : d0f9             [ 3] 	bne tp_write_header
                             	
c5fc : a200             [ 2] 	ldx #0
c5fe :                       tp_write_fname
c5fe : bd0004           [ 4] 	lda df_linbuff,x		; Put the filename
c601 : 38               [ 2] 	sec
c602 : 208dc6           [ 6] 	jsr tp_write_byte
c605 : e8               [ 2] 	inx
c606 : c900             [ 2] 	cmp #0
c608 : d0f4             [ 4] 	bne tp_write_fname
                             	
c60a : 18               [ 2] 	clc
c60b : 60               [ 6] 	rts
                             
                             
                             ;* tp_put_byte
                             ;* Put to byte to tape - if got a block then save
                             
c60c :                       tp_put_byte
c60c : 48               [ 3] 	pha
c60d : 8538             [ 3] 	sta tmp_d
c60f : 8a               [ 2] 	txa
c610 : 48               [ 3] 	pha
c611 : 98               [ 2] 	tya
c612 : 48               [ 3] 	pha
c613 : a538             [ 3] 	lda tmp_d
                             	
c615 : a457             [ 3] 	ldy tp_idx				; Save byte to buffer
c617 : 990002           [ 5] 	sta tp_buf,y
c61a : c8               [ 2] 	iny
c61b : 8457             [ 3] 	sty tp_idx
AS65 Assembler for R6502 [1.42].                                     Page   72
-------------------------------- bank\bank0.s --------------------------------

c61d : d010             [ 3] 	bne tp_put_byte_done
c61f : 203ec6           [ 6] 	jsr tp_put_block		; Flush block to tape
c622 : 18               [ 2] 	clc						; Increment block #
c623 : a555             [ 3] 	lda tp_block
c625 : 6901             [ 2] 	adc #1
c627 : 8555             [ 3] 	sta tp_block
c629 : a556             [ 3] 	lda tp_block+1
c62b : 6900             [ 2] 	adc #0
c62d : 8556             [ 3] 	sta tp_block+1
c62f :                       tp_put_byte_done
c62f : 68               [ 4] 	pla
c630 : a8               [ 2] 	tay
c631 : 68               [ 4] 	pla
c632 : aa               [ 2] 	tax
c633 : 68               [ 4] 	pla
c634 : 18               [ 2] 	clc
c635 : 60               [ 6] 	rts
                             
                             ; tp_put_delay
                             ;* X = number of zero bits to insert
c636 :                       tp_put_delay
c636 : 18               [ 2] 	clc
c637 : 20b0c6           [ 6] 	jsr tp_write_bit
c63a : ca               [ 2] 	dex
c63b : d0f9             [ 3] 	bne tp_put_delay
c63d : 60               [ 6] 	rts
                             
                             ;* tp_put_block
                             ;* flush a block to tape
c63e :                       tp_put_block
c63e : 2062c6           [ 6] 	jsr tp_print_block
                             		
c641 : a280             [ 2] 	ldx #128				; 128 low bits
c643 : 2036c6           [ 6] 	jsr tp_put_delay
                             
c646 : a555             [ 3] 	lda tp_block			; Save block number low then high
c648 : 18               [ 2] 	clc
c649 : 208dc6           [ 6] 	jsr tp_write_byte
c64c : a556             [ 3] 	lda tp_block+1
c64e : 38               [ 2] 	sec
c64f : 208dc6           [ 6] 	jsr tp_write_byte
                             
c652 : a200             [ 2] 	ldx #0
c654 :                       tp_put_block_bytes
c654 : bd0002           [ 4] 	lda tp_buf,x			; Then write out all bytes in blo
c657 : 18               [ 2] 	clc
c658 : 208dc6           [ 6] 	jsr tp_write_byte
c65b : e8               [ 2] 	inx
c65c : d0f6             [ 3] 	bne tp_put_block_bytes	; Always 256 bytes
                             	
c65e : 2082c6           [ 6] 	jsr tp_block_gap		; Wait a while, still outputti
                             
c661 : 60               [ 6] 	rts
                             
                             ; tp_print_block
c662 :                       tp_print_block
c662 : a556             [ 3] 	lda tp_block+1			; Print block number hi byte
c664 : 2098c1           [ 6] 	jsr str_a_to_x
c667 : 2010cf           [ 6] 	jsr gr_put_byte
c66a : 8a               [ 2] 	txa
c66b : 2010cf           [ 6] 	jsr gr_put_byte
c66e : a555             [ 3] 	lda tp_block			; Print block number lo byte
AS65 Assembler for R6502 [1.42].                                     Page   73
-------------------------------- bank\bank0.s --------------------------------

c670 : 2098c1           [ 6] 	jsr str_a_to_x
c673 : 2010cf           [ 6] 	jsr gr_put_byte
c676 : 8a               [ 2] 	txa
c677 : 2010cf           [ 6] 	jsr gr_put_byte
c67a : a9c5             [ 2] 	lda #hi(tp_back4)		; Go back 4 characters to pri
c67c : a058             [ 2] 	ldy #lo(tp_back4)
c67e : 2064cf           [ 6] 	jsr gr_print_msg
c681 : 60               [ 6] 	rts
                             
                             ; tp_block_gap
                             ; Send 2400 bits of zero ~ 1.5 seconds
                             ; add 0x101 due to how counters decrement
                             ; For binary mode it is just 1 bit gap
c682 :                       tp_block_gap
c682 : a45a             [ 3] 	ldy tp_delay+1
c684 : a659             [ 3] 	ldx tp_delay
c686 :                       tp_block_gap_1
c686 : 2036c6           [ 6] 	jsr tp_put_delay
c689 : 88               [ 2] 	dey
c68a : d0fa             [ 3] 	bne tp_block_gap_1
c68c : 60               [ 6] 	rts	
                             
                             ;* tp_write_byte
                             ;* Write a byte to tape which looks like this
                             ;* 11xxxxxxxx0
c68d :                       tt_putbyte_pc				; ** FOR ORICUTRON EMULATOR **
c68d :                       tp_write_byte
c68d : 48               [ 3] 	pha
c68e : 08               [ 3] 	php
c68f : 38               [ 2] 	sec					; 1 for start bit
c690 : 20b0c6           [ 6] 	jsr tp_write_bit
c693 : 38               [ 2] 	sec					; 1 for start bit
c694 : 20b0c6           [ 6] 	jsr tp_write_bit
c697 : a008             [ 2] 	ldy #8				; 8 bits of data
c699 :                       tp_write_byte_bit
c699 : 6a               [ 2] 	ror a
c69a : 20b0c6           [ 6] 	jsr tp_write_bit
c69d : 88               [ 2] 	dey
c69e : d0f9             [ 3] 	bne tp_write_byte_bit
c6a0 : 18               [ 2] 	clc					; 0 for stop bit
c6a1 : 20b0c6           [ 6] 	jsr tp_write_bit
c6a4 : 28               [ 4] 	plp
c6a5 : 9007             [ 3] 	bcc tp_write_byte_nodelay
c6a7 : 8a               [ 2] 	txa
c6a8 : a220             [ 2] 	ldx #32					; Delays needed
c6aa : 2036c6           [ 6] 	jsr tp_put_delay
c6ad : aa               [ 2] 	tax
c6ae :                       tp_write_byte_nodelay
c6ae : 68               [ 4] 	pla
c6af :                       tt_putbyte_end_pc			; ** FOR ORICUTRON EMULATOR *
c6af : 60               [ 6] 	rts
                             	
                             
                             ;* tp_write_bit
                             ;* Write a bit in C to tape which looks like this
                             ;* Half cycle of 4800Hz, then
                             ;*		half cycle of 4800Hz for a 1
                             ;*		half cycle of 2400Hz for a 0
c6b0 :                       tp_write_bit
c6b0 : 48               [ 3] 	pha
c6b1 : 8a               [ 2] 	txa
c6b2 : 48               [ 3] 	pha
AS65 Assembler for R6502 [1.42].                                     Page   74
-------------------------------- bank\bank0.s --------------------------------

c6b3 : 08               [ 3] 	php						; Save the bit to be stored
                             
c6b4 : a9d0             [ 2] 	lda #TAPE_RATE			; Half cycle first of 4800Hz
c6b6 : a200             [ 2] 	ldx #0
c6b8 : 8d0603           [ 4] 	sta IO_0+T1LL
c6bb : 8e0703           [ 4] 	stx IO_0+T1LH			; This starts the timer
c6be : ad0403           [ 4] 	lda IO_0+T1CL			; Clear any interrupt flag
c6c1 :                       tp_write_bit_chk1
c6c1 : 2c0d03           [ 4] 	bit IO_0+IFR			; Check IRF for bit 6
c6c4 : 50fb             [ 3] 	bvc tp_write_bit_chk1	; V=0? Keep checking
c6c6 : ad0403           [ 4] 	lda IO_0+T1CL			; Clear interrupt flag
                             	
c6c9 : 28               [ 4] 	plp						; Get the bit to be stored
c6ca : a9d0             [ 2] 	lda #TAPE_RATE			; Assume putting out a 1 in 2nd
c6cc : b002             [ 3] 	bcs tp_write_bit_t1		; A zero is half the rate (
c6ce : 0a               [ 2] 	asl	a					; TAPE_RATE * 2 need to inc X
c6cf : e8               [ 2] 	inx
c6d0 :                       tp_write_bit_t1
c6d0 : 8d0603           [ 4] 	sta IO_0+T1LL
c6d3 : 8e0703           [ 4] 	stx IO_0+T1LH			; This starts the timer
c6d6 : ad0403           [ 4] 	lda IO_0+T1CL			; Clear any interrupt flag
c6d9 :                       tp_write_bit_chk2
c6d9 : 2c0d03           [ 4] 	bit IO_0+IFR			; Check IRF for bit 6
c6dc : 50fb             [ 3] 	bvc tp_write_bit_chk2	; V=0? Keep checking
c6de : ad0403           [ 4] 	lda IO_0+T1CL			; Clear interrupt flag
c6e1 : 68               [ 4] 	pla
c6e2 : aa               [ 2] 	tax
c6e3 : 68               [ 4] 	pla
c6e4 : 60               [ 6] 	rts
                             
                             
                             
                             ;* tp_get_byte
                             ;* Get a byte from buffer - load blocks as needed
c6e5 :                       tp_get_byte
c6e5 : 8a               [ 2] 	txa
c6e6 : 48               [ 3] 	pha
c6e7 : 98               [ 2] 	tya
c6e8 : 48               [ 3] 	pha
                             	
c6e9 : a457             [ 3] 	ldy tp_idx				; Index in to buffer
c6eb : d005             [ 3] 	bne tp_get_byte_buf		; No need to load from tape
c6ed : 2002c7           [ 6] 	jsr tp_get_block		; Else load a block from tape
c6f0 : a000             [ 2] 	ldy #0					; 0 index is now valid
c6f2 :                       tp_get_byte_buf
c6f2 : b90002           [ 4] 	lda tp_buf,y			; Get from memory buffer
c6f5 : c8               [ 2] 	iny
c6f6 : 8457             [ 3] 	sty tp_idx				; Never zero on leaving
c6f8 : 8538             [ 3] 	sta tmp_d
c6fa : 68               [ 4] 	pla
c6fb : a8               [ 2] 	tay
c6fc : 68               [ 4] 	pla
c6fd : aa               [ 2] 	tax
c6fe : a538             [ 3] 	lda tmp_d
c700 : 18               [ 2] 	clc
c701 : 60               [ 6] 	rts						; Except when buffer done
                             
                             ;* tp_get_block
                             ;* Load a block in to memory
c702 :                       tp_get_block
                             
c702 : 2021c7           [ 6] 	jsr tp_read_byte		; Get block number
AS65 Assembler for R6502 [1.42].                                     Page   75
-------------------------------- bank\bank0.s --------------------------------

c705 : 8555             [ 3] 	sta tp_block
c707 : 2021c7           [ 6] 	jsr tp_read_byte
c70a : 8556             [ 3] 	sta tp_block+1
                             	
c70c : 2062c6           [ 6] 	jsr tp_print_block
                             	
c70f : a000             [ 2] 	ldy #0
c711 : 8457             [ 3] 	sty tp_idx
c713 :                       tp_get_block_bytes
c713 : 2021c7           [ 6] 	jsr tp_read_byte		; Fill buffer
c716 : a457             [ 3] 	ldy tp_idx
c718 : 990002           [ 5] 	sta tp_buf,y
c71b : c8               [ 2] 	iny
c71c : 8457             [ 3] 	sty tp_idx
c71e : d0f3             [ 3] 	bne tp_get_block_bytes	; Always 256 bytes
                             
c720 : 60               [ 6] 	rts
                             	
                             
                             ;* tp_read_byte
                             ;* Read a byte from tape, always expects one '1' 
c721 :                       tt_readbyte_pc				; ** FOR ORICUTRON EMULATOR **
c721 :                       tp_read_byte
c721 :                       tp_read_byte_st
c721 : 2035c7           [ 6] 	jsr tp_read_bit			; Expecting a 1
c724 : 90fb             [ 3] 	bcc tp_read_byte_st
c726 : 2035c7           [ 6] 	jsr tp_read_bit			; Should be another 1
c729 : 90f6             [ 3] 	bcc tp_read_byte_st
                             	; Ok got 2 start
                             	
c72b : a008             [ 2] 	ldy #8				; Get 8 bits
c72d :                       tp_read_byte_bits
c72d : 2035c7           [ 6] 	jsr tp_read_bit
c730 : 6a               [ 2] 	ror a
c731 : 88               [ 2] 	dey
c732 : d0f9             [ 3] 	bne tp_read_byte_bits
                             	; Byte is in A, stop bit is not waited for..
c734 :                       tt_readbyte_end_pc			; ** FOR ORICUTRON EMULATOR 
c734 : 60               [ 6] 	rts
                             
                             ;* tp_read_bit
                             ;* Get a CB1 transition and measure the time
                             ;* The measurement indicates a 1 or 0 received
c735 :                       tp_read_bit
c735 : 48               [ 3] 	pha
c736 : ad0003           [ 4] 	lda IO_0+PRB			; Clear CB1 interrupt flag by rea
c739 :                       tp_read_bit_cb1
c739 :                       tt_getsync_loop_pc			; ** FOR ORICUTRON EMULATOR 
c739 : ad0d03           [ 4] 	lda IO_0+IFR
c73c : 2910             [ 2] 	and #IFR_CB1
c73e : f0f9             [ 3] 	beq tp_read_bit_cb1		; Keep checking until CB1 a
                             
c740 : ad0903           [ 4] 	lda IO_0+T2CH			; Get the high byte of T2 counte
c743 : 48               [ 3] 	pha
c744 : a9ff             [ 2] 	lda #0xff				; Reset T2 counter high byte
c746 : 8d0903           [ 4] 	sta IO_0+T2CH			; Reset high byte of T2 counter
c749 : 68               [ 4] 	pla						; What was previous counter?
                             ;	beq tp_io_error			; If down to zero, then some 
c74a : c9fe             [ 2] 	cmp #0xfe				; C=1 if T2 >= 0xfe else C=0
c74c : 68               [ 4] 	pla
c74d : 60               [ 6] 	rts						; Carry contains the bit received
c74e :                       tp_io_error
AS65 Assembler for R6502 [1.42].                                     Page   76
-------------------------------- bank\bank0.s --------------------------------

                             	SWBRK DFERR_BREAK		; DEFINE A NEW ERROR!
                             
                             
                             
                             
                             	include "keyboard/keyboard.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  KEYBOARD.S
                             ;*	Keyboard driver code. It is very slow to scan 
                             ;*	routines here do a basic scan for any key befo
                             ;*	the specific key. Still, it has a noticeable i
                             ;*	CPU especially in dflat which checks the key a
                             ;*	keyword is executed.
                             ;*	Rather than working off interrupts these routi
                             ;*	need to be called as needed. The T1 interrupt 
                             ;*	track of keyboard timers for repeat delay and 
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code
                             
                             ;****************************************
                             ;* init_keyboard
                             ;* Initialise the keyboard settings
                             ;****************************************
c750 :                       init_keyboard
c750 : a914             [ 2] 	lda #KB_REP_DEL
c752 : 8531             [ 3] 	sta kb_rdel_tim
c754 : a903             [ 2] 	lda #KB_REP_TIM
c756 : 8530             [ 3] 	sta kb_rep_tim
c758 : a901             [ 2] 	lda #KB_DEBOUNCE
c75a : 852e             [ 3] 	sta kb_deb_tim
c75c : a900             [ 2] 	lda #0
c75e : 852c             [ 3] 	sta kb_stat
                             
c760 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* kb_stick
                             ;* Check for fire | down | up | right | left
                             ;*        bit  4     3      2     1       0
                             ;* Returns bit mask of keys pressed
                             ;****************************************
c761 :                       kb_stick
                             	; Select Row 4 only, all keys on this row
c761 : a9b4             [ 2] 	lda #4+KB_PRB			; Maintain upper nibble of PRB
c763 : 8d0003           [ 4] 	sta IO_0+PRB
c766 : a90e             [ 2] 	lda #SND_REG_IOA		; Select AY Port A for columns
c768 : 204ec0           [ 6] 	jsr snd_sel_reg
c76b : a900             [ 2] 	lda #0					; Result will be in A
c76d : 48               [ 3] 	pha
c76e : a004             [ 2] 	ldy #4					; Go through the 5 cols on row 4
c770 :                       kb_stick_pos
c770 : b947c9           [ 4] 	lda kb_stick_mask,y		; Get the column mask
AS65 Assembler for R6502 [1.42].                                     Page   77
-------------------------------- bank\bank0.s --------------------------------

c773 : 205ec0           [ 6] 	jsr snd_set_reg			; Activate column
c776 : ea               [ 2] 	nop
c777 : ea               [ 2] 	nop
c778 : ea               [ 2] 	nop
c779 : ea               [ 2] 	nop
c77a : a908             [ 2] 	lda #KB_SENSE			; Something pressed?
c77c : 2d0003           [ 4] 	and IO_0+PRB			; Read Port B
c77f : c908             [ 2] 	cmp #KB_SENSE			; C=1 if set else 0
c781 : 68               [ 4] 	pla
c782 : 2a               [ 2] 	rol a					; Get C in to A
c783 : 48               [ 3] 	pha
c784 : 88               [ 2] 	dey
c785 : 10e9             [ 3] 	bpl kb_stick_pos		; Do all 5 positions
c787 : 68               [ 4] 	pla						; Result in A
c788 : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* kb_any_key
                             ;* Quick check for any key except shifts & ctrl
                             ;* Carry = 1 means key pressed
                             ;****************************************
c789 :                       kb_any_key
c789 : a90e             [ 2] 	lda #SND_REG_IOA		; Select Port A of AY
c78b : 204ec0           [ 6] 	jsr snd_sel_reg
                             
c78e : a0b7             [ 2] 	ldy #7+KB_PRB			; Start from row 7
c790 :                       kb_any_key_row
c790 : 8c0003           [ 4] 	sty IO_0+PRB			; Select row on port B
                             	; Select all columns except 4
c793 : a910             [ 2] 	lda #0b00010000			; Deselect only col 4
c795 : 205ec0           [ 6] 	jsr snd_set_reg
                             
c798 : ea               [ 2] 	nop
c799 : ea               [ 2] 	nop
c79a : ea               [ 2] 	nop						; New NOP
c79b : ea               [ 2] 	nop
c79c : ea               [ 2] 	nop
                             ;	nop						; New NOP
                             
c79d : a908             [ 2] 	lda #KB_SENSE			; Something pressed?
c79f : 2d0003           [ 4] 	and IO_0+PRB			; Read Port B
c7a2 : d007             [ 3] 	bne kb_any_key_pressed
c7a4 : 88               [ 2] 	dey						; If not then next row
c7a5 : c0af             [ 2] 	cpy #KB_PRB-1			; Done rows 0..8?
c7a7 : d0e7             [ 3] 	bne kb_any_key_row		; Until all rows done
c7a9 :                       kb_any_key_none
c7a9 : 18               [ 2] 	clc						; C=0 means not pressed
c7aa : 60               [ 6] 	rts
c7ab :                       kb_any_key_pressed
c7ab :                       kb_read_got
c7ab : 38               [ 2] 	sec						; C=1 means pressed
c7ac : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* kb_read_raw
                             ;* Read keyboard
                             ;* Y = Keyboard code
                             ;* Carry = 1 means key found, 0 = no keys found
                             ;****************************************
c7ad :                       kb_read_raw
c7ad : 2089c7           [ 6] 	jsr kb_any_key			; Quick check is anything down?
AS65 Assembler for R6502 [1.42].                                     Page   78
-------------------------------- bank\bank0.s --------------------------------

c7b0 : 9046             [ 3] 	bcc kb_read_nothing		; Don't bother if not
c7b2 :                       kb_read_raw_force
c7b2 : a20e             [ 2] 	ldx #SND_REG_IOA		; Select Port A of AY
c7b4 : 8e0f03           [ 4] 	stx SND_ADBUS			; Put reg # on Port A (sound bus
c7b7 : a2ff             [ 2] 	ldx #SND_SELSETADDR		; Get ready to select the r
c7b9 : 8e0c03           [ 4] 	stx SND_MODE			; Latch the reg # on Port A
c7bc : a2dd             [ 2] 	ldx #SND_DESELECT		; Deselect AY
c7be : 8e0c03           [ 4] 	stx SND_MODE
c7c1 : a200             [ 2] 	ldx #0					; Start at column 0
c7c3 : 86ab             [ 3] 	stx zp_tmp1
c7c5 :                       kb_check_matrix_col
c7c5 : a0b0             [ 2] 	ldy #0+KB_PRB			; Start at row 0 (maintain PRB u
c7c7 :                       kb_check_matrix_row
c7c7 : 8c0003           [ 4] 	sty IO_0+PRB			; Select row from Y
                             	; Get the col value for AY port A
c7ca : a6ab             [ 3] 	ldx zp_tmp1
c7cc : bd3fc9           [ 4] 	lda kb_col_mask,x
                             	; Write it to AY port A
c7cf : 8d0f03           [ 4] 	sta SND_ADBUS			; Put col value on AY bus
c7d2 : a2fd             [ 2] 	ldx #SND_SELWRITE		; Select mode for writing dat
c7d4 : 8e0c03           [ 4] 	stx SND_MODE			; Latch reg value on Port A
c7d7 : a2dd             [ 2] 	ldx #SND_DESELECT		; Deselect AY
c7d9 : 8e0c03           [ 4] 	stx SND_MODE
                             
c7dc : ea               [ 2] 	nop						; Wait 10 cycles before reading sense p
c7dd : ea               [ 2] 	nop
c7de : ea               [ 2] 	nop
                             
c7df : a908             [ 2] 	lda #KB_SENSE			; Bit 3 is the sense
c7e1 : 2d0003           [ 4] 	and IO_0+PRB			; And with Port B
                             
c7e4 : d016             [ 3] 	bne kb_read_raw_got
                             	; No key for this row/col, next
c7e6 : c8               [ 2] 	iny
c7e7 : c0b8             [ 2] 	cpy #8+KB_PRB			; Done 8 rows?
c7e9 : d0dc             [ 3] 	bne kb_check_matrix_row
                             	; ok check next row
c7eb : a6ab             [ 3] 	ldx zp_tmp1
c7ed :                       kb_check_skip4
c7ed : e8               [ 2] 	inx
c7ee : e004             [ 2] 	cpx #4					; Skip 4?
c7f0 : f0fb             [ 3] 	beq kb_check_skip4
c7f2 : 86ab             [ 3] 	stx zp_tmp1
c7f4 : e008             [ 2] 	cpx #8					; Done 8 cols?
c7f6 : d0cd             [ 3] 	bne kb_check_matrix_col
                             	; No key was sensed
c7f8 :                       kb_read_nothing
c7f8 : a000             [ 2] 	ldy #0					; Raw key codes
c7fa : 18               [ 2] 	clc						; No key sensed flag
c7fb : 60               [ 6] 	rts
c7fc :                       kb_read_raw_got
                             	;Y=row, zp_temp1=col
c7fc : a5ab             [ 3] 	lda zp_tmp1				; Get the column num
c7fe : 0a               [ 2] 	asl a					; Shift in to bits 5,4,3
c7ff : 0a               [ 2] 	asl a
c800 : 0a               [ 2] 	asl a
c801 : 85ab             [ 3] 	sta zp_tmp1
c803 : 98               [ 2] 	tya						; Now or with row number
c804 : 2907             [ 2] 	and #7					; Only bottom 3 bits!
c806 : 05ab             [ 3] 	ora zp_tmp1
c808 : a8               [ 2] 	tay						; Put in to Y
c809 : 38               [ 2] 	sec
AS65 Assembler for R6502 [1.42].                                     Page   79
-------------------------------- bank\bank0.s --------------------------------

c80a : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* kb_scan_key
                             ;* Scans for a key, returns zero for no key found
                             ;* Processes caps and shift lock but these don't 
                             ;* A = Key code
                             ;****************************************
c80b :                       kb_scan_key
c80b : a52d             [ 3] 	lda kb_deb				; Do not scan keyboard too often
c80d : d013             [ 3] 	bne kb_no_scan
c80f : a52e             [ 3] 	lda kb_deb_tim			; Else reset debounce timer
c811 : 852d             [ 3] 	sta kb_deb
c813 : 20adc7           [ 6] 	jsr kb_read_raw			; Check if a key is sensed
c816 : b00e             [ 3] 	bcs kb_scan_decode		; go ahead and decode
                             	; If pressed nothing then reset timers
c818 : a9ff             [ 2] 	lda #255
c81a : 8529             [ 3] 	sta kb_raw				; Reset raw key settings
c81c : 852a             [ 3] 	sta kb_last				; And last key
c81e : a531             [ 3] 	lda kb_rdel_tim			; Reset repeat timer to initia
c820 : 852f             [ 3] 	sta kb_rep
c822 :                       kb_no_scan
c822 : a900             [ 2] 	lda #0
c824 : 38               [ 2] 	sec						; Code not valid
c825 : 60               [ 6] 	rts						; And done (A=0)
c826 :                       kb_scan_decode
                             	; If got here then raw key is good
c826 : a52a             [ 3] 	lda kb_last				; Preload A with last decoded key
c828 : c429             [ 3] 	cpy kb_raw				; Same as last raw key?
c82a : 8429             [ 3] 	sty kb_raw				; Already save new raw key
c82c : d002             [ 3] 	bne kb_process_new		; If is new raw key, look at
c82e : f05f             [ 3] 	beq kb_do_repeat		; Else go handle repeating wit
c830 :                       kb_process_new
c830 : a531             [ 3] 	lda kb_rdel_tim			; Reset repeat timer to initia
c832 : 852f             [ 3] 	sta kb_rep
                             	; Now to get a proper key code translated from r
                             	; Check for shift and ctrl (not debounced!)
c834 : a9ef             [ 2] 	lda #0b11101111			; Select column 4
c836 : a20e             [ 2] 	ldx #SND_REG_IOA		; On AY port A
c838 : 206ec0           [ 6] 	jsr snd_set
                             
                             	; check shifted keys
c83b : a2b4             [ 2] 	ldx #4+KB_PRB			; Row 4 (left shift)
c83d : 8e0003           [ 4] 	stx IO_0+PRB			; Select row on port B
c840 : ea               [ 2] 	nop
c841 : ea               [ 2] 	nop
c842 : ea               [ 2] 	nop
c843 : ea               [ 2] 	nop
                             
c844 : ad0003           [ 4] 	lda IO_0+PRB			; Read Port B
                             
c847 : a2b7             [ 2] 	ldx #7+KB_PRB			; Row 7 (right shift)
c849 : 8e0003           [ 4] 	stx IO_0+PRB			; Select row on port B
c84c : ea               [ 2] 	nop
c84d : ea               [ 2] 	nop
c84e : ea               [ 2] 	nop
c84f : ea               [ 2] 	nop
                             
c850 : 0d0003           [ 4] 	ora IO_0+PRB			; Combine Port B
c853 : bebfc8           [ 4] 	ldx kb_table_std,y		; Pre-load standard key code
c856 : 2908             [ 2] 	and #KB_SENSE			; Bit 3 is the sense
c858 : f003             [ 3] 	beq kb_read_noshift		; Skip over if no shift
AS65 Assembler for R6502 [1.42].                                     Page   80
-------------------------------- bank\bank0.s --------------------------------

c85a : beffc8           [ 4] 	ldx kb_table_shift,y	; Load up standard key code
c85d :                       kb_read_noshift
c85d : 862b             [ 3] 	stx kb_code				; Save the mapped keycode
                             	; check ctrl key
c85f : a2b2             [ 2] 	ldx #2+KB_PRB			; Row 2 (ctrl key)
c861 : 8e0003           [ 4] 	stx IO_0+PRB			; Select row on port B
c864 : ea               [ 2] 	nop
c865 : ea               [ 2] 	nop
c866 : ea               [ 2] 	nop
c867 : ea               [ 2] 	nop
                             
c868 : ad0003           [ 4] 	lda IO_0+PRB			; Read Port B
c86b : 2908             [ 2] 	and #KB_SENSE
c86d : f00a             [ 3] 	beq kb_skip_ctrl
c86f : a52b             [ 3] 	lda kb_code
c871 : 291f             [ 2] 	and #0x1f				; Ctrl will result in codes 0 to 31
c873 : 852b             [ 3] 	sta kb_code				; Override the keycode
c875 : f028             [ 3] 	beq kb_brk
c877 : 101e             [ 3] 	bpl	kb_store_last		; Check repeat (bpl is always
c879 :                       kb_skip_ctrl
c879 : a52c             [ 3] 	lda kb_stat				; Check caps lock
c87b : 2901             [ 2] 	and #KB_CAPSLK
c87d : f018             [ 3] 	beq kb_store_last
c87f : a52b             [ 3] 	lda kb_code
c881 : c961             [ 2] 	cmp #'a'				; If < 'a' then skip
c883 : 9012             [ 3] 	bcc kb_store_last
c885 : c97b             [ 2] 	cmp #'z'+1				; If > 'z' then skip
c887 : b00e             [ 3] 	bcs kb_store_last
c889 : a52b             [ 3] 	lda kb_code				; Get the actual code
c88b : 4920             [ 2] 	eor #0x20				; Switch off bit 0x20
c88d : d008             [ 3] 	bne kb_store_last
c88f :                       kb_do_repeat
c88f : a62f             [ 3] 	ldx kb_rep				; Has repeat expired?
c891 : d008             [ 3] 	bne	kb_in_repeat		; If not then still in repeat
c893 : a630             [ 3] 	ldx kb_rep_tim			; Set repeat speed
c895 : 862f             [ 3] 	stx kb_rep
c897 :                       kb_store_last
c897 : 852a             [ 3] 	sta kb_last				; Make last code same as this
c899 : 18               [ 2] 	clc						; Code valid
c89a : 60               [ 6] 	rts
c89b :                       kb_in_repeat
c89b : a900             [ 2] 	lda #0					; Don't emit a keycode
c89d : 38               [ 2] 	sec
c89e : 60               [ 6] 	rts
c89f :                       kb_brk
                             	SWBRK DFERR_OK
                             
                             
                             ;****************************************
                             ;* kb_get_key
                             ;* Waits for a key press, C=1 synchronous
                             ;* A = Key code, C=1 means valid
                             ;****************************************
c8a1 :                       kb_get_key
c8a1 : 8a               [ 2] 	txa
c8a2 : 48               [ 3] 	pha
c8a3 : 98               [ 2] 	tya
c8a4 : 48               [ 3] 	pha
                             
c8a5 :                       kb_get_try
c8a5 : 08               [ 3] 	php
c8a6 : 200bc8           [ 6] 	jsr kb_scan_key
AS65 Assembler for R6502 [1.42].                                     Page   81
-------------------------------- bank\bank0.s --------------------------------

c8a9 : 900b             [ 3] 	bcc kb_scan_got_key
c8ab : 28               [ 4] 	plp						; No key, so check C
c8ac : b0f7             [ 3] 	bcs kb_get_try			; Keep looking if C
c8ae : 38               [ 2] 	sec						; Indicate key not valid
                             
c8af : 68               [ 4] 	pla
c8b0 : a8               [ 2] 	tay
c8b1 : 68               [ 4] 	pla
c8b2 : aa               [ 2] 	tax
c8b3 : a900             [ 2] 	lda #0
                             
c8b5 : 60               [ 6] 	rts
c8b6 :                       kb_scan_got_key
c8b6 : 28               [ 4] 	plp						; Pull stack
c8b7 : 18               [ 2] 	clc						; Indicate key valid
                             
c8b8 : 68               [ 4] 	pla
c8b9 : a8               [ 2] 	tay
c8ba : 68               [ 4] 	pla
c8bb : aa               [ 2] 	tax
                             
c8bc : a52b             [ 3] 	lda kb_code
                             
c8be : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* kb_table_std (no shift)
                             ;* Each line is one column
                             ;****************************************
c8bf :                       kb_table_std
c8bf : 376a6d6b20757938      	db '7' ,'j' ,'m' ,'k' ,' ' ,'u' ,'y' ,'8'
c8c7 : 6e7436392c69686c      	db 'n' ,'t' ,'6' ,'9' ,',' ,'i' ,'h' ,'l'
c8cf : 3572623b2e6f6730      	db '5' ,'r' ,'b' ,';' ,'.' ,'o' ,'g' ,'0'
c8d7 : 7666342d0b70652f      	db 'v' ,'f' ,'4' ,'-' ,0x0b,'p' ,'e' ,'/'
c8df : 0000000000000000      	db 0,0,0,0,0,0,0,0 ; Column 4 is shift and ctrl 
c8e7 : 311b7a00087f610d      	db '1' ,0x1b,'z' ,0   ,0x08,0x7f,'a' ,0x0d
c8ef : 7871325c0a5d7300      	db 'x' ,'q' ,'2' ,0x5c,0x0a,']' ,'s' ,0
c8f7 : 33646327095b773d      	db '3' ,'d' ,'c' ,0x27,0x09,'[' ,'w' ,'='
                             
                             ;* kb_table_shift (with shift)
c8ff :                       kb_table_shift
c8ff : 264a4d4b2055592a      	db '&' ,'J' ,'M' ,'K' ,' ' ,'U' ,'Y' ,'*'
c907 : 4e545e283c49484c      	db 'N' ,'T' ,'^' ,'(' ,'<' ,'I' ,'H' ,'L'
c90f : 2552423a3e4f4729      	db '%' ,'R' ,'B' ,':' ,'>' ,'O' ,'G' ,')'
c917 : 5646245f0b50453f      	db 'V' ,'F' ,'$' ,'_' ,0x0b,'P' ,'E' ,'?'
c91f : 0000000000000000      	db 0,0,0,0,0,0,0,0 ; Column 4 is shift and ctrl 
c927 : 211b5a00087f410d      	db '!' ,0x1b,'Z' ,0   ,0x08,0x7f,'A' ,0x0d
c92f : 5851407c0a7d5300      	db 'X' ,'Q' ,'@' ,'|' ,0x0a,'}' ,'S' ,0
c937 : 23444322097b572b      	db '#' ,'D' ,'C' ,0x22,0x09,'{' ,'W' ,'+'
                             
c93f :                       kb_col_mask
c93f : fe                    	db 0b11111110
c940 : fd                    	db 0b11111101
c941 : fb                    	db 0b11111011
c942 : f7                    	db 0b11110111
c943 : ef                    	db 0b11101111
c944 : df                    	db 0b11011111
c945 : bf                    	db 0b10111111
c946 : 7f                    	db 0b01111111
                             
c947 :                       kb_stick_mask
c947 : df                    	db 0b11011111		; Left 	= Bit 0
AS65 Assembler for R6502 [1.42].                                     Page   82
-------------------------------- bank\bank0.s --------------------------------

c948 : 7f                    	db 0b01111111		; Right = Bit 1
c949 : f7                    	db 0b11110111		; Up	= Bit 2
c94a : bf                    	db 0b10111111		; Down	= Bit 3
c94b : fe                    	db 0b11111110		; Space	= Bit 4
                             
                             	include "vdp/graph.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  GRAPH.S
                             ;*  This is the graphics module, to handle text a
                             ;*  graphics.
                             ;*  For text modes, this module keeps track of wh
                             ;*  next put a character, and also takes care of 
                             ;*  to the next line as well as scrolling the con
                             ;*  when the cursor has reached the bottom right.
                             ;*  module also enables text input which is echoe
                             ;*  screen, to allow interactive input and editin
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code
                             
c94c :                       mod_sz_graph_s
                             
                             
                             	include "vdp/font.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  FONT.S
                             ;*  This is the font definition, used to initiali
                             ;*  character set.  This is the standard Oric-1 f
                             ;*	Still called vdp as this code was ported from 
                             ;*	machine using the TMS9918a.
                             ;*
                             ;************************************************
                             
c94c :                       vdp_font
                             ; char 32
c94c : 00                    	db %000000
c94d : 00                    	db %000000
c94e : 00                    	db %000000
c94f : 00                    	db %000000
c950 : 00                    	db %000000
c951 : 00                    	db %000000
c952 : 00                    	db %000000
c953 : 00                    	db %000000
                             ; char 33
c954 : 0c                    	db %001100
c955 : 0c                    	db %001100
AS65 Assembler for R6502 [1.42].                                     Page   83
-------------------------------- bank\bank0.s --------------------------------

c956 : 0c                    	db %001100
c957 : 08                    	db %001000
c958 : 08                    	db %001000
c959 : 00                    	db %000000
c95a : 08                    	db %001000
c95b : 00                    	db %000000
                             ; char 34
c95c : 36                    	db %110110
c95d : 36                    	db %110110
c95e : 12                    	db %010010
c95f : 00                    	db %000000
c960 : 00                    	db %000000
c961 : 00                    	db %000000
c962 : 00                    	db %000000
c963 : 00                    	db %000000
                             ; char 35
c964 : 14                    	db %010100
c965 : 14                    	db %010100
c966 : 3e                    	db %111110
c967 : 14                    	db %010100
c968 : 3e                    	db %111110
c969 : 14                    	db %010100
c96a : 14                    	db %010100
c96b : 00                    	db %000000
                             ; char 36
c96c : 08                    	db %001000
c96d : 1e                    	db %011110
c96e : 28                    	db %101000
c96f : 1c                    	db %011100
c970 : 0a                    	db %001010
c971 : 3c                    	db %111100
c972 : 08                    	db %001000
c973 : 00                    	db %000000
                             ; char 37
c974 : 30                    	db %110000
c975 : 32                    	db %110010
c976 : 04                    	db %000100
c977 : 08                    	db %001000
c978 : 10                    	db %010000
c979 : 26                    	db %100110
c97a : 06                    	db %000110
c97b : 00                    	db %000000
                             ; char 38
c97c : 10                    	db %010000
c97d : 28                    	db %101000
c97e : 28                    	db %101000
c97f : 10                    	db %010000
c980 : 2a                    	db %101010
c981 : 24                    	db %100100
c982 : 1a                    	db %011010
c983 : 00                    	db %000000
                             ; char 39
c984 : 0c                    	db %001100
c985 : 0c                    	db %001100
c986 : 04                    	db %000100
c987 : 00                    	db %000000
c988 : 00                    	db %000000
c989 : 00                    	db %000000
c98a : 00                    	db %000000
c98b : 00                    	db %000000
                             ; char 40
c98c : 04                    	db %000100
AS65 Assembler for R6502 [1.42].                                     Page   84
-------------------------------- bank\bank0.s --------------------------------

c98d : 08                    	db %001000
c98e : 10                    	db %010000
c98f : 10                    	db %010000
c990 : 10                    	db %010000
c991 : 08                    	db %001000
c992 : 04                    	db %000100
c993 : 00                    	db %000000
                             ; char 41
c994 : 10                    	db %010000
c995 : 08                    	db %001000
c996 : 04                    	db %000100
c997 : 04                    	db %000100
c998 : 04                    	db %000100
c999 : 08                    	db %001000
c99a : 10                    	db %010000
c99b : 00                    	db %000000
                             ; char 42
c99c : 08                    	db %001000
c99d : 2a                    	db %101010
c99e : 1c                    	db %011100
c99f : 08                    	db %001000
c9a0 : 1c                    	db %011100
c9a1 : 2a                    	db %101010
c9a2 : 08                    	db %001000
c9a3 : 00                    	db %000000
                             ; char 43
c9a4 : 00                    	db %000000
c9a5 : 08                    	db %001000
c9a6 : 08                    	db %001000
c9a7 : 3e                    	db %111110
c9a8 : 08                    	db %001000
c9a9 : 08                    	db %001000
c9aa : 00                    	db %000000
c9ab : 00                    	db %000000
                             ; char 44
c9ac : 00                    	db %000000
c9ad : 00                    	db %000000
c9ae : 00                    	db %000000
c9af : 00                    	db %000000
c9b0 : 00                    	db %000000
c9b1 : 08                    	db %001000
c9b2 : 08                    	db %001000
c9b3 : 10                    	db %010000
                             ; char 45
c9b4 : 00                    	db %000000
c9b5 : 00                    	db %000000
c9b6 : 00                    	db %000000
c9b7 : 3e                    	db %111110
c9b8 : 00                    	db %000000
c9b9 : 00                    	db %000000
c9ba : 00                    	db %000000
c9bb : 00                    	db %000000
                             ; char 46
c9bc : 00                    	db %000000
c9bd : 00                    	db %000000
c9be : 00                    	db %000000
c9bf : 00                    	db %000000
c9c0 : 00                    	db %000000
c9c1 : 04                    	db %000100
c9c2 : 00                    	db %000000
c9c3 : 00                    	db %000000
                             ; char 47
AS65 Assembler for R6502 [1.42].                                     Page   85
-------------------------------- bank\bank0.s --------------------------------

c9c4 : 00                    	db %000000
c9c5 : 02                    	db %000010
c9c6 : 04                    	db %000100
c9c7 : 08                    	db %001000
c9c8 : 10                    	db %010000
c9c9 : 20                    	db %100000
c9ca : 00                    	db %000000
c9cb : 00                    	db %000000
                             ; char 48
c9cc : 1c                    	db %011100
c9cd : 22                    	db %100010
c9ce : 26                    	db %100110
c9cf : 2a                    	db %101010
c9d0 : 32                    	db %110010
c9d1 : 22                    	db %100010
c9d2 : 1c                    	db %011100
c9d3 : 00                    	db %000000
                             ; char 49
c9d4 : 08                    	db %001000
c9d5 : 18                    	db %011000
c9d6 : 08                    	db %001000
c9d7 : 08                    	db %001000
c9d8 : 08                    	db %001000
c9d9 : 08                    	db %001000
c9da : 1c                    	db %011100
c9db : 00                    	db %000000
                             ; char 50
c9dc : 1c                    	db %011100
c9dd : 22                    	db %100010
c9de : 02                    	db %000010
c9df : 04                    	db %000100
c9e0 : 08                    	db %001000
c9e1 : 10                    	db %010000
c9e2 : 3e                    	db %111110
c9e3 : 00                    	db %000000
                             ; char 51
c9e4 : 3e                    	db %111110
c9e5 : 02                    	db %000010
c9e6 : 04                    	db %000100
c9e7 : 0c                    	db %001100
c9e8 : 02                    	db %000010
c9e9 : 22                    	db %100010
c9ea : 1c                    	db %011100
c9eb : 00                    	db %000000
                             ; char 52
c9ec : 04                    	db %000100
c9ed : 0c                    	db %001100
c9ee : 14                    	db %010100
c9ef : 24                    	db %100100
c9f0 : 3e                    	db %111110
c9f1 : 04                    	db %000100
c9f2 : 04                    	db %000100
c9f3 : 00                    	db %000000
                             ; char 53
c9f4 : 3e                    	db %111110
c9f5 : 20                    	db %100000
c9f6 : 3c                    	db %111100
c9f7 : 02                    	db %000010
c9f8 : 02                    	db %000010
c9f9 : 22                    	db %100010
c9fa : 1c                    	db %011100
c9fb : 00                    	db %000000
AS65 Assembler for R6502 [1.42].                                     Page   86
-------------------------------- bank\bank0.s --------------------------------

                             ; char 54
c9fc : 0c                    	db %001100
c9fd : 10                    	db %010000
c9fe : 20                    	db %100000
c9ff : 3c                    	db %111100
ca00 : 22                    	db %100010
ca01 : 22                    	db %100010
ca02 : 1c                    	db %011100
ca03 : 00                    	db %000000
                             ; char 55
ca04 : 3e                    	db %111110
ca05 : 02                    	db %000010
ca06 : 04                    	db %000100
ca07 : 08                    	db %001000
ca08 : 10                    	db %010000
ca09 : 10                    	db %010000
ca0a : 10                    	db %010000
ca0b : 00                    	db %000000
                             ; char 56
ca0c : 1c                    	db %011100
ca0d : 22                    	db %100010
ca0e : 22                    	db %100010
ca0f : 1c                    	db %011100
ca10 : 22                    	db %100010
ca11 : 22                    	db %100010
ca12 : 1c                    	db %011100
ca13 : 00                    	db %000000
                             ; char 57
ca14 : 1c                    	db %011100
ca15 : 22                    	db %100010
ca16 : 22                    	db %100010
ca17 : 1e                    	db %011110
ca18 : 02                    	db %000010
ca19 : 04                    	db %000100
ca1a : 18                    	db %011000
ca1b : 00                    	db %000000
                             ; char 58
ca1c : 00                    	db %000000
ca1d : 00                    	db %000000
ca1e : 08                    	db %001000
ca1f : 00                    	db %000000
ca20 : 00                    	db %000000
ca21 : 08                    	db %001000
ca22 : 00                    	db %000000
ca23 : 00                    	db %000000
                             ; char 59
ca24 : 00                    	db %000000
ca25 : 00                    	db %000000
ca26 : 08                    	db %001000
ca27 : 00                    	db %000000
ca28 : 00                    	db %000000
ca29 : 08                    	db %001000
ca2a : 08                    	db %001000
ca2b : 10                    	db %010000
                             ; char 60
ca2c : 04                    	db %000100
ca2d : 08                    	db %001000
ca2e : 10                    	db %010000
ca2f : 20                    	db %100000
ca30 : 10                    	db %010000
ca31 : 08                    	db %001000
ca32 : 04                    	db %000100
AS65 Assembler for R6502 [1.42].                                     Page   87
-------------------------------- bank\bank0.s --------------------------------

ca33 : 00                    	db %000000
                             ; char 61
ca34 : 00                    	db %000000
ca35 : 00                    	db %000000
ca36 : 3e                    	db %111110
ca37 : 00                    	db %000000
ca38 : 3e                    	db %111110
ca39 : 00                    	db %000000
ca3a : 00                    	db %000000
ca3b : 00                    	db %000000
                             ; char 62
ca3c : 10                    	db %010000
ca3d : 08                    	db %001000
ca3e : 04                    	db %000100
ca3f : 02                    	db %000010
ca40 : 04                    	db %000100
ca41 : 08                    	db %001000
ca42 : 10                    	db %010000
ca43 : 00                    	db %000000
                             ; char 63
ca44 : 1c                    	db %011100
ca45 : 22                    	db %100010
ca46 : 04                    	db %000100
ca47 : 08                    	db %001000
ca48 : 08                    	db %001000
ca49 : 00                    	db %000000
ca4a : 08                    	db %001000
ca4b : 00                    	db %000000
                             ; char 64
ca4c : 1c                    	db %011100
ca4d : 22                    	db %100010
ca4e : 2a                    	db %101010
ca4f : 2e                    	db %101110
ca50 : 2c                    	db %101100
ca51 : 20                    	db %100000
ca52 : 1e                    	db %011110
ca53 : 00                    	db %000000
ca54 :                       vdp_font_a
                             ; char 65
ca54 : 1c                    	db %011100
ca55 : 22                    	db %100010
ca56 : 22                    	db %100010
ca57 : 3e                    	db %111110
ca58 : 22                    	db %100010
ca59 : 22                    	db %100010
ca5a : 22                    	db %100010
ca5b : 00                    	db %000000
                             ; char 66
ca5c : 3c                    	db %111100
ca5d : 22                    	db %100010
ca5e : 22                    	db %100010
ca5f : 3c                    	db %111100
ca60 : 22                    	db %100010
ca61 : 22                    	db %100010
ca62 : 3c                    	db %111100
ca63 : 00                    	db %000000
                             ; char 67
ca64 : 1c                    	db %011100
ca65 : 22                    	db %100010
ca66 : 20                    	db %100000
ca67 : 20                    	db %100000
ca68 : 20                    	db %100000
AS65 Assembler for R6502 [1.42].                                     Page   88
-------------------------------- bank\bank0.s --------------------------------

ca69 : 22                    	db %100010
ca6a : 1c                    	db %011100
ca6b : 00                    	db %000000
                             ; char 68
ca6c : 3c                    	db %111100
ca6d : 22                    	db %100010
ca6e : 22                    	db %100010
ca6f : 22                    	db %100010
ca70 : 22                    	db %100010
ca71 : 22                    	db %100010
ca72 : 3c                    	db %111100
ca73 : 00                    	db %000000
                             ; char 69
ca74 : 3e                    	db %111110
ca75 : 20                    	db %100000
ca76 : 20                    	db %100000
ca77 : 3c                    	db %111100
ca78 : 20                    	db %100000
ca79 : 20                    	db %100000
ca7a : 3e                    	db %111110
ca7b : 00                    	db %000000
                             ; char 70
ca7c : 3e                    	db %111110
ca7d : 20                    	db %100000
ca7e : 20                    	db %100000
ca7f : 3c                    	db %111100
ca80 : 20                    	db %100000
ca81 : 20                    	db %100000
ca82 : 20                    	db %100000
ca83 : 00                    	db %000000
                             ; char 71
ca84 : 1e                    	db %011110
ca85 : 20                    	db %100000
ca86 : 20                    	db %100000
ca87 : 20                    	db %100000
ca88 : 26                    	db %100110
ca89 : 22                    	db %100010
ca8a : 1e                    	db %011110
ca8b : 00                    	db %000000
                             ; char 72
ca8c : 22                    	db %100010
ca8d : 22                    	db %100010
ca8e : 22                    	db %100010
ca8f : 3e                    	db %111110
ca90 : 22                    	db %100010
ca91 : 22                    	db %100010
ca92 : 22                    	db %100010
ca93 : 00                    	db %000000
                             ; char 73
ca94 : 1c                    	db %011100
ca95 : 08                    	db %001000
ca96 : 08                    	db %001000
ca97 : 08                    	db %001000
ca98 : 08                    	db %001000
ca99 : 08                    	db %001000
ca9a : 1c                    	db %011100
ca9b : 00                    	db %000000
                             ; char 74
ca9c : 02                    	db %000010
ca9d : 02                    	db %000010
ca9e : 02                    	db %000010
ca9f : 02                    	db %000010
AS65 Assembler for R6502 [1.42].                                     Page   89
-------------------------------- bank\bank0.s --------------------------------

caa0 : 02                    	db %000010
caa1 : 22                    	db %100010
caa2 : 1c                    	db %011100
caa3 : 00                    	db %000000
                             ; char 75
caa4 : 22                    	db %100010
caa5 : 24                    	db %100100
caa6 : 28                    	db %101000
caa7 : 30                    	db %110000
caa8 : 28                    	db %101000
caa9 : 24                    	db %100100
caaa : 22                    	db %100010
caab : 00                    	db %000000
                             ; char 76
caac : 20                    	db %100000
caad : 20                    	db %100000
caae : 20                    	db %100000
caaf : 20                    	db %100000
cab0 : 20                    	db %100000
cab1 : 20                    	db %100000
cab2 : 3e                    	db %111110
cab3 : 00                    	db %000000
                             ; char 77
cab4 : 22                    	db %100010
cab5 : 36                    	db %110110
cab6 : 2a                    	db %101010
cab7 : 2a                    	db %101010
cab8 : 22                    	db %100010
cab9 : 22                    	db %100010
caba : 22                    	db %100010
cabb : 00                    	db %000000
                             ; char 78
cabc : 22                    	db %100010
cabd : 22                    	db %100010
cabe : 32                    	db %110010
cabf : 2a                    	db %101010
cac0 : 26                    	db %100110
cac1 : 22                    	db %100010
cac2 : 22                    	db %100010
cac3 : 00                    	db %000000
                             ; char 79
cac4 : 1c                    	db %011100
cac5 : 22                    	db %100010
cac6 : 22                    	db %100010
cac7 : 22                    	db %100010
cac8 : 22                    	db %100010
cac9 : 22                    	db %100010
caca : 1c                    	db %011100
cacb : 00                    	db %000000
                             ; char 80
cacc : 3c                    	db %111100
cacd : 22                    	db %100010
cace : 22                    	db %100010
cacf : 3c                    	db %111100
cad0 : 20                    	db %100000
cad1 : 20                    	db %100000
cad2 : 20                    	db %100000
cad3 : 00                    	db %000000
                             ; char 81
cad4 : 1c                    	db %011100
cad5 : 22                    	db %100010
cad6 : 22                    	db %100010
AS65 Assembler for R6502 [1.42].                                     Page   90
-------------------------------- bank\bank0.s --------------------------------

cad7 : 22                    	db %100010
cad8 : 2a                    	db %101010
cad9 : 24                    	db %100100
cada : 1a                    	db %011010
cadb : 00                    	db %000000
                             ; char 82
cadc : 3c                    	db %111100
cadd : 22                    	db %100010
cade : 22                    	db %100010
cadf : 3c                    	db %111100
cae0 : 28                    	db %101000
cae1 : 24                    	db %100100
cae2 : 22                    	db %100010
cae3 : 00                    	db %000000
                             ; char 83
cae4 : 1c                    	db %011100
cae5 : 22                    	db %100010
cae6 : 20                    	db %100000
cae7 : 1c                    	db %011100
cae8 : 02                    	db %000010
cae9 : 22                    	db %100010
caea : 1c                    	db %011100
caeb : 00                    	db %000000
                             ; char 84
caec : 3e                    	db %111110
caed : 08                    	db %001000
caee : 08                    	db %001000
caef : 08                    	db %001000
caf0 : 08                    	db %001000
caf1 : 08                    	db %001000
caf2 : 08                    	db %001000
caf3 : 00                    	db %000000
                             ; char 85
caf4 : 22                    	db %100010
caf5 : 22                    	db %100010
caf6 : 22                    	db %100010
caf7 : 22                    	db %100010
caf8 : 22                    	db %100010
caf9 : 22                    	db %100010
cafa : 1c                    	db %011100
cafb : 00                    	db %000000
                             ; char 86
cafc : 22                    	db %100010
cafd : 22                    	db %100010
cafe : 22                    	db %100010
caff : 22                    	db %100010
cb00 : 22                    	db %100010
cb01 : 14                    	db %010100
cb02 : 08                    	db %001000
cb03 : 00                    	db %000000
                             ; char 87
cb04 : 22                    	db %100010
cb05 : 22                    	db %100010
cb06 : 22                    	db %100010
cb07 : 2a                    	db %101010
cb08 : 2a                    	db %101010
cb09 : 36                    	db %110110
cb0a : 22                    	db %100010
cb0b : 00                    	db %000000
                             ; char 88
cb0c : 22                    	db %100010
cb0d : 22                    	db %100010
AS65 Assembler for R6502 [1.42].                                     Page   91
-------------------------------- bank\bank0.s --------------------------------

cb0e : 14                    	db %010100
cb0f : 08                    	db %001000
cb10 : 14                    	db %010100
cb11 : 22                    	db %100010
cb12 : 22                    	db %100010
cb13 : 00                    	db %000000
                             ; char 89
cb14 : 22                    	db %100010
cb15 : 22                    	db %100010
cb16 : 14                    	db %010100
cb17 : 08                    	db %001000
cb18 : 08                    	db %001000
cb19 : 08                    	db %001000
cb1a : 08                    	db %001000
cb1b : 00                    	db %000000
                             ; char 90
cb1c : 3e                    	db %111110
cb1d : 02                    	db %000010
cb1e : 04                    	db %000100
cb1f : 08                    	db %001000
cb20 : 10                    	db %010000
cb21 : 20                    	db %100000
cb22 : 3e                    	db %111110
cb23 : 00                    	db %000000
                             ; char 91
cb24 : 1c                    	db %011100
cb25 : 10                    	db %010000
cb26 : 10                    	db %010000
cb27 : 10                    	db %010000
cb28 : 10                    	db %010000
cb29 : 10                    	db %010000
cb2a : 1c                    	db %011100
cb2b : 00                    	db %000000
                             ; char 92
cb2c : 00                    	db %000000
cb2d : 20                    	db %100000
cb2e : 10                    	db %010000
cb2f : 08                    	db %001000
cb30 : 04                    	db %000100
cb31 : 02                    	db %000010
cb32 : 00                    	db %000000
cb33 : 00                    	db %000000
                             ; char 93
cb34 : 1c                    	db %011100
cb35 : 04                    	db %000100
cb36 : 04                    	db %000100
cb37 : 04                    	db %000100
cb38 : 04                    	db %000100
cb39 : 04                    	db %000100
cb3a : 1c                    	db %011100
cb3b : 00                    	db %000000
                             ; char 94
cb3c : 08                    	db %001000
cb3d : 1c                    	db %011100
cb3e : 3e                    	db %111110
cb3f : 08                    	db %001000
cb40 : 08                    	db %001000
cb41 : 08                    	db %001000
cb42 : 08                    	db %001000
cb43 : 00                    	db %000000
                             ; char 95
cb44 : 00                    	db %000000
AS65 Assembler for R6502 [1.42].                                     Page   92
-------------------------------- bank\bank0.s --------------------------------

cb45 : 00                    	db %000000
cb46 : 00                    	db %000000
cb47 : 00                    	db %000000
cb48 : 00                    	db %000000
cb49 : 00                    	db %000000
cb4a : 3e                    	db %111110
cb4b : 00                    	db %000000
                             ; char 96
cb4c : 0e                    	db %001110
cb4d : 10                    	db %010000
cb4e : 10                    	db %010000
cb4f : 3c                    	db %111100
cb50 : 10                    	db %010000
cb51 : 10                    	db %010000
cb52 : 3e                    	db %111110
cb53 : 00                    	db %000000
                             ; char 97
cb54 : 00                    	db %000000
cb55 : 00                    	db %000000
cb56 : 1c                    	db %011100
cb57 : 02                    	db %000010
cb58 : 1e                    	db %011110
cb59 : 22                    	db %100010
cb5a : 1e                    	db %011110
cb5b : 00                    	db %000000
                             ; char 98
cb5c : 20                    	db %100000
cb5d : 20                    	db %100000
cb5e : 3c                    	db %111100
cb5f : 22                    	db %100010
cb60 : 22                    	db %100010
cb61 : 22                    	db %100010
cb62 : 3c                    	db %111100
cb63 : 00                    	db %000000
                             ; char 99
cb64 : 00                    	db %000000
cb65 : 00                    	db %000000
cb66 : 1e                    	db %011110
cb67 : 20                    	db %100000
cb68 : 20                    	db %100000
cb69 : 20                    	db %100000
cb6a : 1e                    	db %011110
cb6b : 00                    	db %000000
                             ; char 100
cb6c : 02                    	db %000010
cb6d : 02                    	db %000010
cb6e : 1e                    	db %011110
cb6f : 22                    	db %100010
cb70 : 22                    	db %100010
cb71 : 22                    	db %100010
cb72 : 1e                    	db %011110
cb73 : 00                    	db %000000
                             ; char 101
cb74 : 00                    	db %000000
cb75 : 00                    	db %000000
cb76 : 1c                    	db %011100
cb77 : 22                    	db %100010
cb78 : 3e                    	db %111110
cb79 : 20                    	db %100000
cb7a : 1e                    	db %011110
cb7b : 00                    	db %000000
                             ; char 102
AS65 Assembler for R6502 [1.42].                                     Page   93
-------------------------------- bank\bank0.s --------------------------------

cb7c : 0c                    	db %001100
cb7d : 12                    	db %010010
cb7e : 10                    	db %010000
cb7f : 3c                    	db %111100
cb80 : 10                    	db %010000
cb81 : 10                    	db %010000
cb82 : 10                    	db %010000
cb83 : 00                    	db %000000
                             ; char 103
cb84 : 00                    	db %000000
cb85 : 00                    	db %000000
cb86 : 1c                    	db %011100
cb87 : 22                    	db %100010
cb88 : 22                    	db %100010
cb89 : 1e                    	db %011110
cb8a : 02                    	db %000010
cb8b : 1c                    	db %011100
                             ; char 104
cb8c : 20                    	db %100000
cb8d : 20                    	db %100000
cb8e : 3c                    	db %111100
cb8f : 22                    	db %100010
cb90 : 22                    	db %100010
cb91 : 22                    	db %100010
cb92 : 22                    	db %100010
cb93 : 00                    	db %000000
                             ; char 105
cb94 : 08                    	db %001000
cb95 : 00                    	db %000000
cb96 : 18                    	db %011000
cb97 : 08                    	db %001000
cb98 : 08                    	db %001000
cb99 : 08                    	db %001000
cb9a : 1c                    	db %011100
cb9b : 00                    	db %000000
                             ; char 106
cb9c : 04                    	db %000100
cb9d : 00                    	db %000000
cb9e : 0c                    	db %001100
cb9f : 04                    	db %000100
cba0 : 04                    	db %000100
cba1 : 04                    	db %000100
cba2 : 24                    	db %100100
cba3 : 18                    	db %011000
                             ; char 107
cba4 : 20                    	db %100000
cba5 : 20                    	db %100000
cba6 : 22                    	db %100010
cba7 : 24                    	db %100100
cba8 : 38                    	db %111000
cba9 : 24                    	db %100100
cbaa : 22                    	db %100010
cbab : 00                    	db %000000
                             ; char 108
cbac : 18                    	db %011000
cbad : 08                    	db %001000
cbae : 08                    	db %001000
cbaf : 08                    	db %001000
cbb0 : 08                    	db %001000
cbb1 : 08                    	db %001000
cbb2 : 1c                    	db %011100
cbb3 : 00                    	db %000000
AS65 Assembler for R6502 [1.42].                                     Page   94
-------------------------------- bank\bank0.s --------------------------------

                             ; char 109
cbb4 : 00                    	db %000000
cbb5 : 00                    	db %000000
cbb6 : 36                    	db %110110
cbb7 : 2a                    	db %101010
cbb8 : 2a                    	db %101010
cbb9 : 2a                    	db %101010
cbba : 22                    	db %100010
cbbb : 00                    	db %000000
                             ; char 110
cbbc : 00                    	db %000000
cbbd : 00                    	db %000000
cbbe : 3c                    	db %111100
cbbf : 22                    	db %100010
cbc0 : 22                    	db %100010
cbc1 : 22                    	db %100010
cbc2 : 22                    	db %100010
cbc3 : 00                    	db %000000
                             ; char 111
cbc4 : 00                    	db %000000
cbc5 : 00                    	db %000000
cbc6 : 1c                    	db %011100
cbc7 : 22                    	db %100010
cbc8 : 22                    	db %100010
cbc9 : 22                    	db %100010
cbca : 1c                    	db %011100
cbcb : 00                    	db %000000
                             ; char 112
cbcc : 00                    	db %000000
cbcd : 00                    	db %000000
cbce : 3c                    	db %111100
cbcf : 22                    	db %100010
cbd0 : 22                    	db %100010
cbd1 : 3c                    	db %111100
cbd2 : 20                    	db %100000
cbd3 : 20                    	db %100000
                             ; char 113
cbd4 : 00                    	db %000000
cbd5 : 00                    	db %000000
cbd6 : 1e                    	db %011110
cbd7 : 22                    	db %100010
cbd8 : 22                    	db %100010
cbd9 : 1e                    	db %011110
cbda : 02                    	db %000010
cbdb : 02                    	db %000010
                             ; char 114
cbdc : 00                    	db %000000
cbdd : 00                    	db %000000
cbde : 2e                    	db %101110
cbdf : 30                    	db %110000
cbe0 : 20                    	db %100000
cbe1 : 20                    	db %100000
cbe2 : 20                    	db %100000
cbe3 : 00                    	db %000000
                             ; char 115
cbe4 : 00                    	db %000000
cbe5 : 00                    	db %000000
cbe6 : 1e                    	db %011110
cbe7 : 20                    	db %100000
cbe8 : 1c                    	db %011100
cbe9 : 02                    	db %000010
cbea : 3c                    	db %111100
AS65 Assembler for R6502 [1.42].                                     Page   95
-------------------------------- bank\bank0.s --------------------------------

cbeb : 00                    	db %000000
                             ; char 116
cbec : 10                    	db %010000
cbed : 10                    	db %010000
cbee : 3c                    	db %111100
cbef : 10                    	db %010000
cbf0 : 10                    	db %010000
cbf1 : 12                    	db %010010
cbf2 : 0c                    	db %001100
cbf3 : 00                    	db %000000
                             ; char 117
cbf4 : 00                    	db %000000
cbf5 : 00                    	db %000000
cbf6 : 22                    	db %100010
cbf7 : 22                    	db %100010
cbf8 : 22                    	db %100010
cbf9 : 26                    	db %100110
cbfa : 1a                    	db %011010
cbfb : 00                    	db %000000
                             ; char 118
cbfc : 00                    	db %000000
cbfd : 00                    	db %000000
cbfe : 22                    	db %100010
cbff : 22                    	db %100010
cc00 : 22                    	db %100010
cc01 : 14                    	db %010100
cc02 : 08                    	db %001000
cc03 : 00                    	db %000000
                             ; char 119
cc04 : 00                    	db %000000
cc05 : 00                    	db %000000
cc06 : 22                    	db %100010
cc07 : 22                    	db %100010
cc08 : 2a                    	db %101010
cc09 : 2a                    	db %101010
cc0a : 36                    	db %110110
cc0b : 00                    	db %000000
                             ; char 120
cc0c : 00                    	db %000000
cc0d : 00                    	db %000000
cc0e : 22                    	db %100010
cc0f : 14                    	db %010100
cc10 : 08                    	db %001000
cc11 : 14                    	db %010100
cc12 : 22                    	db %100010
cc13 : 00                    	db %000000
                             ; char 121
cc14 : 00                    	db %000000
cc15 : 00                    	db %000000
cc16 : 22                    	db %100010
cc17 : 22                    	db %100010
cc18 : 22                    	db %100010
cc19 : 1e                    	db %011110
cc1a : 02                    	db %000010
cc1b : 1c                    	db %011100
                             ; char 122
cc1c : 00                    	db %000000
cc1d : 00                    	db %000000
cc1e : 3e                    	db %111110
cc1f : 04                    	db %000100
cc20 : 08                    	db %001000
cc21 : 10                    	db %010000
AS65 Assembler for R6502 [1.42].                                     Page   96
-------------------------------- bank\bank0.s --------------------------------

cc22 : 3e                    	db %111110
cc23 : 00                    	db %000000
                             ; char 123
cc24 : 0e                    	db %001110
cc25 : 18                    	db %011000
cc26 : 18                    	db %011000
cc27 : 30                    	db %110000
cc28 : 18                    	db %011000
cc29 : 18                    	db %011000
cc2a : 0e                    	db %001110
cc2b : 00                    	db %000000
                             ; char 124
cc2c : 08                    	db %001000
cc2d : 08                    	db %001000
cc2e : 08                    	db %001000
cc2f : 08                    	db %001000
cc30 : 08                    	db %001000
cc31 : 08                    	db %001000
cc32 : 08                    	db %001000
cc33 : 00                    	db %000000
                             ; char 125
cc34 : 38                    	db %111000
cc35 : 0c                    	db %001100
cc36 : 0c                    	db %001100
cc37 : 06                    	db %000110
cc38 : 0c                    	db %001100
cc39 : 0c                    	db %001100
cc3a : 38                    	db %111000
cc3b : 00                    	db %000000
                             ; char 126
cc3c : 00                    	db %000000
cc3d : 00                    	db %000000
cc3e : 10                    	db %010000
cc3f : 2a                    	db %101010
cc40 : 04                    	db %000100
cc41 : 00                    	db %000000
cc42 : 00                    	db %000000
cc43 : 00                    	db %000000
                             ; char 127
cc44 : 2a                    	db %101010
cc45 : 15                    	db %010101
cc46 : 2a                    	db %101010
cc47 : 15                    	db %010101
cc48 : 2a                    	db %101010
cc49 : 15                    	db %010101
cc4a : 2a                    	db %101010
cc4b : 15                    	db %010101
                             	
                             	
                             
                             ;****************************************
                             ;* vdp_init_font
                             ;* Initialise fonts from ROM
                             ;* Input : None
                             ;* Output : None
                             ;* Regs affected : All
                             ;****************************************
cc4c :                       gr_init_font
                             	; Get char base from vdp structure
cc4c : a614             [ 3] 	ldx gr_scrngeom+gr_char
cc4e : 8634             [ 3] 	stx tmp_blo
cc50 : a615             [ 3] 	ldx gr_scrngeom+gr_char+1
AS65 Assembler for R6502 [1.42].                                     Page   97
-------------------------------- bank\bank0.s --------------------------------

cc52 : e8               [ 2] 	inx						; ASCII patterns start 1 page later
cc53 : 8635             [ 3] 	stx tmp_bhi
                             
cc55 : a94c             [ 2] 	lda #lo(vdp_font)		; Low byte of fonts source
cc57 : 8536             [ 3] 	sta tmp_clo
cc59 : a9c9             [ 2] 	lda #hi(vdp_font)		; High byte of fonts source
cc5b : 8537             [ 3] 	sta tmp_chi
cc5d : a203             [ 2] 	ldx #3					; Copy 3 pages
cc5f : 4c62cc           [ 3] 	jmp gr_copy_mem
                             
                             
                             ;****************************************
                             ;* vdp_copy_mem
                             ;* Copy memory pages at a time
                             ;* Input :	clo/hi	=	source
                             ;*			blo/hi	=	dest
                             ;*			X		=	pages to copy
                             ;* Output : None
                             ;* Regs affected : All
                             ;****************************************
cc62 :                       gr_copy_mem
cc62 : a000             [ 2] 	ldy #0					; byte within page
cc64 : a536             [ 3] 	lda tmp_clo				; Low byte of source
cc66 : 8532             [ 3] 	sta tmp_alo
cc68 : a537             [ 3] 	lda tmp_chi				; High byte of source
cc6a : 8533             [ 3] 	sta tmp_ahi
cc6c :                       gr_copy_byte
cc6c : 98               [ 2] 	tya
cc6d : b132             [ 5] 	lda (tmp_alo),y			; Get byte from font table
cc6f : 9134             [ 5] 	sta (tmp_blo),y			; Put it to the memory
cc71 : c8               [ 2] 	iny
cc72 : d0f8             [ 3] 	bne gr_copy_byte		; keep going for 1 page
cc74 : e633             [ 5] 	inc tmp_ahi				; only need to increment high byt
cc76 : e635             [ 5] 	inc tmp_bhi				; source and destination ptr
cc78 : ca               [ 2] 	dex						; page counter
cc79 : d0f1             [ 3] 	bne gr_copy_byte		; keep going for X pages
cc7b : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* gr_init
                             ;* First initialisation of screen
                             ;****************************************
cc7c :                       gr_init
cc7c : a210             [ 2] 	ldx #VDP_FLASH			; Default cursor flash rate
cc7e : 860b             [ 3] 	stx vdp_curtim
cc80 : 860c             [ 3] 	stx vdp_curcnt
cc82 : a200             [ 2] 	ldx #0
cc84 : 860e             [ 3] 	stx vdp_curstat
                             
                             	; Hard reset initial geom values (X=0)
cc86 : 20adcc           [ 6] 	jsr gr_init_geom
                             
                             	; Copy font from ROM to char base
cc89 : 204ccc           [ 6] 	jsr gr_init_font
                             
                             	; Go in to hires mode to generate tables
cc8c : 2003cd           [ 6] 	jsr gr_init_hires
cc8f : 203ccd           [ 6] 	jsr gr_init_hires_tables
                             
                             	; But start in text mode
cc92 : 4ceacc           [ 3] 	jmp gr_init_screen_txt
AS65 Assembler for R6502 [1.42].                                     Page   98
-------------------------------- bank\bank0.s --------------------------------

                             
                             
                             ;****************************************
                             ;* gr_check_font_copy
                             ;* check font needs to be copied from
                             ;* current location to another
                             ;* A=high byte of page aligned font addr
                             ;* that the font needs to be at
                             ;****************************************
cc95 :                       gr_check_font_copy
                             	; Compare with current high byte
cc95 : c515             [ 3] 	cmp gr_scrngeom+gr_char+1
cc97 : f013             [ 3] 	beq gr_check_font_copy_done
                             	; save A as high byte of destination
cc99 : 8535             [ 3] 	sta tmp_blo+1
                             	; destination low is 0
cc9b : a900             [ 2] 	lda #0
cc9d : 8534             [ 3] 	sta tmp_blo
                             
                             	; Get source from current vdp structure
cc9f : a515             [ 3] 	lda gr_scrngeom+gr_char+1
cca1 : 8537             [ 3] 	sta tmp_clo+1
cca3 : a514             [ 3] 	lda gr_scrngeom+gr_char
cca5 : 8536             [ 3] 	sta tmp_clo
                             
                             	; Copy all 8 pages of font (std + alt) data
cca7 : a208             [ 2] 	ldx #8
cca9 : 2062cc           [ 6] 	jsr gr_copy_mem
ccac :                       gr_check_font_copy_done
ccac :                       gr_init_geom_done
ccac : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* gr_init_geom
                             ;* initialise geometry entries from X
                             ;* position from base until -1
                             ;****************************************
ccad :                       gr_init_geom
                             	; Which geom entry to init = Y
ccad : bcbccc           [ 4] 	ldy gr_scrngeom_base,x
ccb0 : 30fa             [ 3] 	bmi gr_init_geom_done		; Just somewhere with an 
                             	; skip to data and put in A
ccb2 : e8               [ 2] 	inx
ccb3 : bdbccc           [ 4] 	lda gr_scrngeom_base,x
                             	; save it in Y
ccb6 : 991100           [ 5] 	sta gr_scrngeom,y
                             	; next entry
ccb9 : e8               [ 2] 	inx
ccba : d0f1             [ 3] 	bne gr_init_geom	; Always
                             	; Hope we don't get here - will crash!
                             
                             ; Geometry initialisation tables
ccbc :                       gr_scrngeom_base
ccbc : 1200                  	db gr_ink, 0
ccbe : 1316                  	db gr_paper, 16+6
ccc0 : 1402                  	db gr_margin, 2
                             	; Not terminated by -1 : continues in to _txt va
                             ;* Geometry for text/lores
ccc2 :                       gr_scrngeom_text
ccc2 : 0000                  	db gr_mode, 0
                             
AS65 Assembler for R6502 [1.42].                                     Page   99
-------------------------------- bank\bank0.s --------------------------------

ccc4 : 0300                  	db gr_char,   lo(TEXTCHAR)
ccc6 : 04b4                  	db gr_char+1, hi(TEXTCHAR)
                             
ccc8 : 0580                  	db gr_text_start,   lo(TEXTSCRN)
ccca : 06bb                  	db gr_text_start+1, hi(TEXTSCRN)
                             
cccc : 0828                  	db gr_text_w, 40
ccce : 091c                  	db gr_text_h, 28
ccd0 : ff                    	db -1
                             ;* Geometry for hires
ccd1 :                       gr_scrngeom_hires
ccd1 : 0001                  	db gr_mode, 1
                             
ccd3 : 0100                  	db gr_hi_start,   lo(HISCRN)
ccd5 : 02a0                  	db gr_hi_start+1, hi(HISCRN)
ccd7 : 0300                  	db gr_char,   lo(HICHAR)
ccd9 : 0498                  	db gr_char+1, hi(HICHAR)
                             
ccdb : 0568                  	db gr_text_start,   lo(HITEXT)
ccdd : 06bf                  	db gr_text_start+1, hi(HITEXT)
                             
ccdf : 1000                  	db gr_hires_x, 0
cce1 : 1100                  	db gr_hires_y, 0
                             
                             	; Only need to initialise text height, width is 
cce3 : 0903                  	db gr_text_h, 3
                             
cce5 : 0e01                  	db gr_pixmode, 1
cce7 : 0f06                  	db gr_pitch, 6
cce9 : ff                    	db -1
                             
                             
                             
                             ;****************************************
                             ;* gr_init_screen_txt
                             ;* initialise the screen in text mode
                             ;****************************************
ccea :                       gr_init_screen_txt
ccea : e60d             [ 5] 	inc vdp_curoff
                             
                             	; Check if font copy needed to 0xb400
ccec : a9b4             [ 2] 	lda #hi(TEXTCHAR)
ccee : 2095cc           [ 6] 	jsr gr_check_font_copy
                             
                             	; Initialise geom for text
ccf1 : a206             [ 2] 	ldx #gr_scrngeom_text-gr_scrngeom_base
ccf3 : 20adcc           [ 6] 	jsr gr_init_geom
                             
ccf6 : 204dd2           [ 6] 	jsr gr_spr_init					; SW Sprites are reset
                             
ccf9 : a920             [ 2] 	lda #' '						; Blank is SPACE
ccfb : 8510             [ 3] 	sta vdp_blank
ccfd : 2080cd           [ 6] 	jsr gr_cls
                             
cd00 : c60d             [ 5] 	dec vdp_curoff
                             
cd02 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* gr_init_hires
                             ;* Input : X = Colour table fill value
                             ;* initialise the screen in hires mode
AS65 Assembler for R6502 [1.42].                                     Page  100
-------------------------------- bank\bank0.s --------------------------------

                             ;****************************************
cd03 :                       gr_init_hires
cd03 : e60d             [ 5] 	inc vdp_curoff
                             	; Check if font copy needed to 0x9800
cd05 : a998             [ 2] 	lda #hi(HICHAR)
cd07 : 2095cc           [ 6] 	jsr gr_check_font_copy
                             
                             	; Initialise geom for hires
cd0a : a215             [ 2] 	ldx #gr_scrngeom_hires-gr_scrngeom_base
cd0c : 20adcc           [ 6] 	jsr gr_init_geom
                             
cd0f : a920             [ 2] 	lda #' '						; Blank is SPACE
cd11 : 8510             [ 3] 	sta vdp_blank
cd13 : 2080cd           [ 6] 	jsr gr_cls
                             
                             	; Zero out hires area 0xa000 for 8000 (0x1f40) b
cd16 : a900             [ 2] 	lda #lo(HISCRN)
cd18 : 8532             [ 3] 	sta tmp_alo
cd1a : a9a0             [ 2] 	lda #hi(HISCRN)
cd1c : 8533             [ 3] 	sta tmp_ahi
cd1e : a940             [ 2] 	lda #0x40						; Set bit 6
cd20 : a000             [ 2] 	ldy #0
cd22 : a200             [ 2] 	ldx #0
cd24 :                       vdp_fill_vram_loop
cd24 : 9132             [ 5] 	sta (tmp_alo),y
cd26 : c8               [ 2] 	iny
cd27 : d003             [ 3] 	bne vdp_fill_vram_noinc
cd29 : e633             [ 5] 	inc tmp_ahi
cd2b : e8               [ 2] 	inx
cd2c :                       vdp_fill_vram_noinc
cd2c : e01f             [ 2] 	cpx #hi(0x1f40)			; Reached page count?
cd2e : d0f4             [ 3] 	bne vdp_fill_vram_loop
cd30 : c040             [ 2] 	cpy #lo(0x1f40)			; Reached byte in page?
cd32 : d0f0             [ 3] 	bne vdp_fill_vram_loop
                             
                             	; Set hires attribute in the magic location
cd34 : a91e             [ 2] 	lda #30			; Hires attribute
cd36 : 8ddfbf           [ 4] 	sta 0xbfdf		; Last pos of screen memory
                             
cd39 : c60d             [ 5] 	dec vdp_curoff
cd3b : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* gr_init_hires_tables
                             ;* Generate the hires tables
                             ;* Do this whilst in hires mode
                             ;****************************************
cd3c :                       gr_init_hires_tables
                             	; Initialise address pointer to start of high re
cd3c : a900             [ 2] 	lda #lo(HISCRN)
cd3e : 8532             [ 3] 	sta tmp_alo
cd40 : a9a0             [ 2] 	lda #hi(HISCRN)
cd42 : 8533             [ 3] 	sta tmp_ahi
                             	; Starting from row zero, do 200 rows
cd44 : a000             [ 2] 	ldy #0
cd46 :                       gr_init_tab_row
                             	; Save low and high bytes of screen address in t
cd46 : a532             [ 3] 	lda tmp_alo
cd48 : 99009c           [ 5] 	sta hires_row_low,y
cd4b : a533             [ 3] 	lda tmp_ahi
cd4d : 99c89c           [ 5] 	sta hires_row_hi,y
                             	; add 40 ready for next row
AS65 Assembler for R6502 [1.42].                                     Page  101
-------------------------------- bank\bank0.s --------------------------------

cd50 : 18               [ 2] 	clc
cd51 : a532             [ 3] 	lda tmp_alo
cd53 : 6928             [ 2] 	adc #40
cd55 : 8532             [ 3] 	sta tmp_alo
                             	_bcc 2
                             
cd59 : e633             [ 5] 	inc tmp_ahi
                             	; Max 200 rows
cd5b : c8               [ 2] 	iny
cd5c : c0c8             [ 2] 	cpy #200
cd5e : d0e6             [ 3] 	bne gr_init_tab_row
                             	; From column 0, do 240 columns
                             	; Mask starts at 0x20, when shifts to 0 then
                             	; the column increments
cd60 : a920             [ 2] 	lda #0x20
cd62 : 8534             [ 3] 	sta tmp_blo			; Pixel mask
cd64 : a200             [ 2] 	ldx #0				; Pixel column
cd66 : a000             [ 2] 	ldy #0				; Byte column
cd68 :                       gr_init_tab_col
                             	; Save current mask and column
cd68 : a534             [ 3] 	lda tmp_blo
cd6a : 9d809e           [ 5] 	sta hires_mask,x
cd6d : 98               [ 2] 	tya
cd6e : 9d909d           [ 5] 	sta hires_col,x
                             	; shift mask, if zero then increment col and res
cd71 : 4634             [ 5] 	lsr tmp_blo
cd73 : d005             [ 3] 	bne gr_init_tab_col_skip
cd75 : a920             [ 2] 	lda #0x20
cd77 : 8534             [ 3] 	sta tmp_blo
cd79 : c8               [ 2] 	iny
cd7a :                       gr_init_tab_col_skip
cd7a : e8               [ 2] 	inx
cd7b : e0f0             [ 2] 	cpx #240
cd7d : d0e9             [ 3] 	bne gr_init_tab_col
cd7f : 60               [ 6] 	rts
                             
                             
                             
                             ;****************************************
                             ;* gr_cls
                             ;* Clear the text screen
                             ;****************************************
cd80 :                       gr_cls
cd80 : e60d             [ 5] 	inc vdp_curoff
                             	; Set screen address for text mode
cd82 : a516             [ 3] 	lda gr_scrngeom+gr_text_start
cd84 : 8526             [ 3] 	sta gr_scrngeom+gr_geom_tmp
cd86 : a517             [ 3] 	lda gr_scrngeom+gr_text_start+1
cd88 : 8527             [ 3] 	sta gr_scrngeom+gr_geom_tmp+1
                             
cd8a : a61a             [ 3] 	ldx gr_scrngeom+gr_text_h		; Count of rows to cl
                             
                             	; X and Y count bytes to fill
cd8c :                       gr_cls_row
cd8c : a000             [ 2] 	ldy #0							; Count of columns
cd8e : a525             [ 3] 	lda gr_scrngeom+gr_margin		; Is there a margin?
cd90 : f00a             [ 3] 	beq gr_cls_skip_marg
cd92 : a524             [ 3] 	lda gr_scrngeom+gr_paper		; Set Paper
cd94 : 9126             [ 5] 	sta (gr_scrngeom+gr_geom_tmp),y
cd96 : c8               [ 2] 	iny
cd97 : a523             [ 3] 	lda gr_scrngeom+gr_ink			; Set Ink
cd99 : 9126             [ 5] 	sta (gr_scrngeom+gr_geom_tmp),y
AS65 Assembler for R6502 [1.42].                                     Page  102
-------------------------------- bank\bank0.s --------------------------------

cd9b : c8               [ 2] 	iny
cd9c :                       gr_cls_skip_marg
cd9c : a510             [ 3] 	lda vdp_blank
cd9e : 850f             [ 3] 	sta vdp_curval					; Under cursor is also blank
cda0 :                       gr_cls_col
cda0 : 9126             [ 5] 	sta (gr_scrngeom+gr_geom_tmp),y
cda2 : c8               [ 2] 	iny
cda3 : c419             [ 3] 	cpy gr_scrngeom+gr_text_w		; Done all columns?
cda5 : d0f9             [ 3] 	bne gr_cls_col
                             	; Update pointer
cda7 : 18               [ 2] 	clc
cda8 : a526             [ 3] 	lda gr_scrngeom+gr_geom_tmp
cdaa : 6519             [ 3] 	adc gr_scrngeom+gr_text_w
cdac : 8526             [ 3] 	sta gr_scrngeom+gr_geom_tmp
                             	_bcc 2
                             
cdb0 : e627             [ 5] 	inc gr_scrngeom+gr_geom_tmp+1
cdb2 : ca               [ 2] 	dex								; 1 row done
cdb3 : d0d7             [ 3] 	bne gr_cls_row					; Done all rows?
                             
                             	; set cursror position to top left
cdb5 : a510             [ 3] 	lda vdp_blank
cdb7 : 850f             [ 3] 	sta vdp_curval
cdb9 : a625             [ 3] 	ldx gr_scrngeom+gr_margin
cdbb : a000             [ 2] 	ldy #0
cdbd : 38               [ 2] 	sec								; Init mode
cdbe : 20eecd           [ 6] 	jsr gr_set_cur_init
                             
cdc1 : c60d             [ 5] 	dec vdp_curoff
                             
cdc3 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* gr_getXY_base
                             ;* Get base screen address using Y coord only
                             ;* Input : X = y coord
                             ;* Output :	gr_geom_tmp updated with base
                             ;* Regs affected : A
                             ;****************************************
cdc4 :                       gr_getXY_base
                             	; Find y offset using **X register**
cdc4 : 18               [ 2] 	clc
cdc5 : bd15d2           [ 4] 	lda gr_offset_40lo,x
cdc8 : 6516             [ 3] 	adc gr_scrngeom+gr_text_start
cdca : 8526             [ 3] 	sta gr_scrngeom+gr_geom_tmp
cdcc : bd31d2           [ 4] 	lda gr_offset_40hi,x
cdcf : 6517             [ 3] 	adc gr_scrngeom+gr_text_start+1
cdd1 : 8527             [ 3] 	sta gr_scrngeom+gr_geom_tmp+1
                             
                             	; A = high byte of base address
cdd3 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* gr_plot
                             ;* Write a byte in the screen pos
                             ;* Input :	Y,X = coord, A = Byte to put
                             ;*			X = Y COORDINATE
                             ;*			Y = X COORDINATE!!
                             ;* Output : None
                             ;* Regs affected : All
                             ;****************************************
cdd4 :                       gr_plot
AS65 Assembler for R6502 [1.42].                                     Page  103
-------------------------------- bank\bank0.s --------------------------------

cdd4 : 48               [ 3] 	pha					; Save byte to put
cdd5 : 20c4cd           [ 6] 	jsr gr_getXY_base	; base addre
cdd8 : 68               [ 4] 	pla					; Get byte to put
cdd9 : 9126             [ 5] 	sta (gr_scrngeom+gr_geom_tmp),y
cddb : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* gr_put
                             ;* Write a byte in the current cursor position
                             ;* Input : A = Byte to put
                             ;* Output : None
                             ;* Regs affected : All
                             ;****************************************
cddc :                       gr_put
cddc : e60d             [ 5] 	inc vdp_curoff		; Disable cusror
cdde : 850f             [ 3] 	sta vdp_curval		; Update cursor value
                             	; Base address plus X offset
cde0 : a41b             [ 3] 	ldy gr_scrngeom+gr_cur_x
cde2 : 911d             [ 5] 	sta (gr_scrngeom+gr_cur_ptr),y
cde4 : c60d             [ 5] 	dec vdp_curoff		; Allow cursor flashing
cde6 : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* gr_get
                             ;* Get the byte in the screen pos
                             ;* Input : Y,X = coord (**Y = X coordinate!!)
                             ;* Output : X,Y = address, A = peeked byte
                             ;* Regs affected : All
                             ;****************************************
cde7 :                       gr_get
cde7 : 20c4cd           [ 6] 	jsr gr_getXY_base	; Base address
cdea : b126             [ 5] 	lda (gr_scrngeom+gr_geom_tmp),y
cdec : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* gr_set_cur
                             ;* Set the cursor position
                             ;* Input : X, Y = position
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
cded :                       gr_set_cur
cded : 18               [ 2] 	clc
cdee :                       gr_set_cur_init
cdee : e60d             [ 5] 	inc vdp_curoff				; Disable cursor
                             
cdf0 : b00e             [ 4] 	bcs gr_set_cur_skip			; Skip restore if C=1
cdf2 : 8632             [ 3] 	stx tmp_alo
cdf4 : 8433             [ 3] 	sty tmp_ahi
                             	; First restore what is under the cursor
                             	; in case cursor is ON
cdf6 : 8426             [ 3] 	sty gr_scrngeom+gr_geom_tmp
cdf8 : a50f             [ 3] 	lda vdp_curval
cdfa : a41b             [ 3] 	ldy gr_scrngeom+gr_cur_x
cdfc : 911d             [ 5] 	sta (gr_scrngeom+gr_cur_ptr),y
cdfe : a426             [ 3] 	ldy gr_scrngeom+gr_geom_tmp
ce00 :                       gr_set_cur_skip
                             	; Save new cursor position
ce00 : 861b             [ 3] 	stx gr_scrngeom+gr_cur_x
ce02 : 841c             [ 3] 	sty gr_scrngeom+gr_cur_y
                             
AS65 Assembler for R6502 [1.42].                                     Page  104
-------------------------------- bank\bank0.s --------------------------------

                             	; Now calculate the new cursor vram address
ce04 : a61c             [ 3] 	ldx gr_scrngeom+gr_cur_y
ce06 : 20c4cd           [ 6] 	jsr gr_getXY_base
                             	; Update pointer in tmp, A already has high byte
ce09 : 851e             [ 3] 	sta gr_scrngeom+gr_cur_ptr+1
ce0b : a526             [ 3] 	lda gr_scrngeom+gr_geom_tmp
ce0d : 851d             [ 3] 	sta gr_scrngeom+gr_cur_ptr
                             	; Read screen at this position, offset with X co
ce0f : a41b             [ 3] 	ldy gr_scrngeom+gr_cur_x
ce11 : b11d             [ 5] 	lda (gr_scrngeom+gr_cur_ptr),y
ce13 : 850f             [ 3] 	sta vdp_curval
                             	; Reset cursor so it's visible
ce15 : a900             [ 2] 	lda #0
ce17 : 850e             [ 3] 	sta vdp_curstat
ce19 : a901             [ 2] 	lda #1
ce1b : 850c             [ 3] 	sta vdp_curcnt
                             
ce1d : c60d             [ 5] 	dec vdp_curoff
                             
ce1f : 60               [ 6] 	rts
                             
                             
                             
                             ;****************************************
                             ;* gr_scroll_up
                             ;* Scroll screen one line up
                             ;****************************************
ce20 :                       gr_scroll_up
ce20 : e60d             [ 5] 	inc vdp_curoff
                             
                             	; Set source in a and dest in b
                             	; b is first line, source is second
ce22 : 18               [ 2] 	clc
ce23 : a516             [ 3] 	lda gr_scrngeom+gr_text_start
ce25 : 8534             [ 3] 	sta tmp_blo
ce27 : 6519             [ 3] 	adc gr_scrngeom+gr_text_w
ce29 : 8532             [ 3] 	sta tmp_alo
ce2b : a517             [ 3] 	lda gr_scrngeom+gr_text_start+1
ce2d : 8535             [ 3] 	sta tmp_bhi
ce2f : 6900             [ 2] 	adc #0
ce31 : 8533             [ 3] 	sta tmp_ahi
                             
                             	; Restore what was underneath cursor
ce33 : a50f             [ 3] 	lda vdp_curval
ce35 : a41b             [ 3] 	ldy gr_scrngeom+gr_cur_x
ce37 : 911d             [ 5] 	sta (gr_scrngeom+gr_cur_ptr),y
                             
                             	; x = lines to scroll (1 less than screen height
ce39 : a61a             [ 3] 	ldx gr_scrngeom+gr_text_h
ce3b : ca               [ 2] 	dex
                             
ce3c :                       gr_scroll_cpy_ln
                             	; Start from right hand edge (easier)
ce3c : a419             [ 3] 	ldy gr_scrngeom+gr_text_w
ce3e : 88               [ 2] 	dey
ce3f :                       gr_scroll_char
                             	; get char from source and copy to dest
ce3f : b132             [ 5] 	lda (tmp_alo),y
ce41 : 9134             [ 5] 	sta (tmp_blo),y
ce43 : 88               [ 2] 	dey
ce44 : 10f9             [ 3] 	bpl gr_scroll_char
                             
AS65 Assembler for R6502 [1.42].                                     Page  105
-------------------------------- bank\bank0.s --------------------------------

                             	; Update source address
ce46 : 18               [ 2] 	clc
ce47 : a532             [ 3] 	lda tmp_alo
ce49 : 6519             [ 3] 	adc gr_scrngeom+gr_text_w
ce4b : 8532             [ 3] 	sta tmp_alo
                             	_bcc 2
                             
ce4f : e633             [ 5] 	inc tmp_ahi
                             	; Update destination address
ce51 : 18               [ 2] 	clc
ce52 : a534             [ 3] 	lda tmp_blo
ce54 : 6519             [ 3] 	adc gr_scrngeom+gr_text_w
ce56 : 8534             [ 3] 	sta tmp_blo
                             	_bcc 2
                             
ce5a : e635             [ 5] 	inc tmp_bhi
                             
                             	; One line complete
ce5c : ca               [ 2] 	dex
ce5d : d0dd             [ 3] 	bne gr_scroll_cpy_ln
                             
                             	; Source is pointing at last line
                             	; Last line needs filling
ce5f : a000             [ 2] 	ldy #0							; Start from left
ce61 : a525             [ 3] 	lda gr_scrngeom+gr_margin		; Margin?
ce63 : f00a             [ 3] 	beq gr_scroll_marg				; Skip if not
ce65 : a524             [ 3] 	lda gr_scrngeom+gr_paper		; Set Paper
ce67 : 9126             [ 5] 	sta (gr_scrngeom+gr_geom_tmp),y
ce69 : c8               [ 2] 	iny
ce6a : a523             [ 3] 	lda gr_scrngeom+gr_ink			; Set Ink
ce6c : 9126             [ 5] 	sta (gr_scrngeom+gr_geom_tmp),y
ce6e : c8               [ 2] 	iny
ce6f :                       gr_scroll_marg
                             	; Needs to be filled with blank
ce6f : a510             [ 3] 	lda vdp_blank
ce71 : 850f             [ 3] 	sta vdp_curval			; Also this is the cursor value
ce73 :                       gr_scroll_erase_ln
ce73 : 9134             [ 5] 	sta (tmp_blo),y
ce75 : c8               [ 2] 	iny
ce76 : c419             [ 3] 	cpy gr_scrngeom+gr_text_w
ce78 : d0f9             [ 3] 	bne gr_scroll_erase_ln
                             
ce7a : c60d             [ 5] 	dec vdp_curoff
                             
ce7c : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* gr_new_ln
                             ;* Carry out a new line
                             ;* Input : None
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
ce7d :                       gr_new_ln
                             	; X pos is zero, Y needs to increment
ce7d : a625             [ 3] 	ldx gr_scrngeom+gr_margin
ce7f : a41c             [ 3] 	ldy gr_scrngeom+gr_cur_y
ce81 : c8               [ 2] 	iny
ce82 : c41a             [ 3] 	cpy gr_scrngeom+gr_text_h
ce84 : d00c             [ 3] 	bne gr_nl_skip_nl
                             	; If got here then screen needs to scroll
                             	; Common routine also used by cursor right
AS65 Assembler for R6502 [1.42].                                     Page  106
-------------------------------- bank\bank0.s --------------------------------

ce86 :                       gr_scroll_routine
ce86 : 88               [ 2] 	dey
ce87 : 8a               [ 2] 	txa
ce88 : 48               [ 3] 	pha
ce89 : 98               [ 2] 	tya
ce8a : 48               [ 3] 	pha
ce8b : 2020ce           [ 6] 	jsr gr_scroll_up
ce8e : 68               [ 4] 	pla
ce8f : a8               [ 2] 	tay
ce90 : 68               [ 4] 	pla
ce91 : aa               [ 2] 	tax
ce92 :                       gr_nl_skip_nl
ce92 : 4cedcd           [ 3] 	jmp gr_set_cur
                             
                             
                             ;****************************************
                             ;* gr_cur_right
                             ;* Advance cursor position
                             ;* Input : None
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
ce95 :                       gr_cur_right
                             	; Load cursor x,y position
ce95 : a61b             [ 3] 	ldx gr_scrngeom+gr_cur_x
ce97 : a41c             [ 3] 	ldy gr_scrngeom+gr_cur_y
                             
                             	; Move cursor right
ce99 : e8               [ 2] 	inx
                             	; Check if reached past edge of line
ce9a : e419             [ 3] 	cpx gr_scrngeom+gr_text_w
ce9c : d0f4             [ 3] 	bne gr_nl_skip_nl
                             	; If got here then wrap to next line
ce9e : a625             [ 3] 	ldx gr_scrngeom+gr_margin
cea0 : c8               [ 2] 	iny
cea1 : c41a             [ 3] 	cpy gr_scrngeom+gr_text_h
cea3 : f0e1             [ 3] 	beq gr_scroll_routine		; Common scroll routine
cea5 : d0eb             [ 3] 	bne gr_nl_skip_nl			; Common set cursor
                             
                             ;****************************************
                             ;* gr_cur_left
                             ;* Advance cursor left
                             ;* Input : None
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
cea7 :                       gr_cur_left
                             	; Load cursor x,y position, load X last to check
cea7 : a41c             [ 3] 	ldy gr_scrngeom+gr_cur_y
cea9 : a61b             [ 3] 	ldx gr_scrngeom+gr_cur_x
                             
                             	; Decrement screen pointer
                             	; Move cursor left
ceab : e425             [ 3] 	cpx gr_scrngeom+gr_margin	; Already at left marg
cead : d007             [ 3] 	bne gr_cur_skip_at_left		; No, then just go left
ceaf : c000             [ 2] 	cpy #0						; Else check if can wrap up
ceb1 : f007             [ 3] 	beq gr_cur_skip_at_tl
ceb3 : 88               [ 2] 	dey
ceb4 : a619             [ 3] 	ldx gr_scrngeom+gr_text_w
ceb6 :                       gr_cur_skip_at_left
ceb6 : ca               [ 2] 	dex
ceb7 : 4cedcd           [ 3] 	jmp gr_set_cur
AS65 Assembler for R6502 [1.42].                                     Page  107
-------------------------------- bank\bank0.s --------------------------------

                             
ceba :                       gr_cur_skip_at_tl
ceba : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* gr_cur_up
                             ;* Advance cursor up
                             ;* Input : None
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
cebb :                       gr_cur_up
                             	; Load cursor x,y position, load Y last to check
cebb : a61b             [ 3] 	ldx gr_scrngeom+gr_cur_x
cebd : a41c             [ 3] 	ldy gr_scrngeom+gr_cur_y
                             	; if y==0 then don't do anything
cebf : f0f9             [ 3] 	beq gr_cur_skip_at_tl	; Just somewhere with an r
cec1 : 88               [ 2] 	dey
cec2 : 4cedcd           [ 3] 	jmp gr_set_cur
                             
                             ;****************************************
                             ;* gr_cur_down
                             ;* Advance cursor down
                             ;* Input : None
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
cec5 :                       gr_cur_down
                             	; Load cursor x,y position
cec5 : a61b             [ 3] 	ldx gr_scrngeom+gr_cur_x
cec7 : a41c             [ 3] 	ldy gr_scrngeom+gr_cur_y
cec9 : c8               [ 2] 	iny
                             	; If already at  bottom then don't do anything
ceca : c41a             [ 3] 	cpy gr_scrngeom+gr_text_h			
cecc : f0ec             [ 3] 	beq gr_cur_skip_at_tl				; Just somewhere with a
cece : 20edcd           [ 6] 	jsr gr_set_cur
                             
ced1 :                       gr_cur_skip_at_bot
ced1 : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* gr_del
                             ;* Action del
                             ;* Input : None
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
ced2 :                       gr_del
ced2 : 20a7ce           [ 6] 	jsr gr_cur_left
ced5 : a920             [ 2] 	lda #' '							; Put a space
ced7 : 4cdccd           [ 3] 	jmp gr_put
                             
                             ;****************************************
                             ;* gr_get_key
                             ;* Waits for a key press, C=1 synchronous
                             ;* A = Key code, C=0 means valid code
                             ;****************************************
ceda :                       gr_get_key
                             	; save X,Y but A is ok to trample
ceda : 8a               [ 2] 	txa
cedb : 48               [ 3] 	pha
AS65 Assembler for R6502 [1.42].                                     Page  108
-------------------------------- bank\bank0.s --------------------------------

cedc : 98               [ 2] 	tya
cedd : 48               [ 3] 	pha
cede :                       gr_get_key_2
cede : 08               [ 3] 	php
cedf : 20a1c8           [ 6] 	jsr kb_get_key
cee2 : 9006             [ 3] 	bcc gr_key_check_key
cee4 : 28               [ 4] 	plp									; Get async pref
cee5 : b0f7             [ 3] 	bcs	gr_get_key_2					; Keep checking if sync
cee7 : 38               [ 2] 	sec
cee8 : b019             [ 4] 	bcs gr_key_tidy_up					; Finish if not
ceea :                       gr_key_check_key						; Check the key pressed
ceea : c901             [ 2] 	cmp #UTF_ACK						; Copy key pressed?
ceec : d004             [ 3] 	bne gr_key_skip_copy
ceee : a50f             [ 3] 	lda vdp_curval						; If yes the get char under 
cef0 : b00f             [ 4] 	bcs gr_key_got_key					; Always branches (n=1, c
cef2 :                       gr_key_skip_copy
cef2 : c914             [ 2] 	cmp #CTRL_CAPS
cef4 : d00b             [ 4] 	bne gr_key_got_key
cef6 : a52c             [ 3] 	lda kb_stat							; Toggle caps bit
cef8 : 4901             [ 2] 	eor #KB_CAPSLK
cefa : 852c             [ 3] 	sta kb_stat
cefc : 28               [ 4] 	plp									; Get back synchronous pref
cefd : b0df             [ 3] 	bcs gr_get_key_2					; And check again for sync
ceff : 900b             [ 4] 	bcc gr_key_no_key					; Else no key
cf01 :                       gr_key_got_key
cf01 : 28               [ 4] 	plp
cf02 : 18               [ 2] 	clc									; Ensure C=0 for valid key
cf03 :                       gr_key_tidy_up
                             	; restore X,Y but don't lose A
cf03 : 8538             [ 3] 	sta tmp_d
cf05 : 68               [ 4] 	pla
cf06 : a8               [ 2] 	tay
cf07 : 68               [ 4] 	pla
cf08 : aa               [ 2] 	tax
cf09 : a538             [ 3] 	lda tmp_d
cf0b : 60               [ 6] 	rts
cf0c :                       gr_key_no_key
cf0c : 28               [ 4] 	plp
cf0d : 38               [ 2] 	sec									; Ensure C=1 for invalid key
cf0e : b0f3             [ 3] 	bcs gr_key_tidy_up					; Always branches
                             
                             ;****************************************
                             ;* gr_put_byte
                             ;* Put a byte out
                             ;* Input : A = Byte to put
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
cf10 :                       gr_put_byte
                             	_pushAXY
                             
cf19 : 2022cf           [ 6] 	jsr gr_put_byte_low
                             	_pullAXY
                             
cf21 :                       gr_no_special
cf21 : 60               [ 6] 	rts
                             
cf22 :                       gr_put_byte_low
cf22 : c97f             [ 2] 	cmp #UTF_DEL			; Del key
cf24 : f004             [ 3] 	beq gr_process_special
cf26 : c920             [ 2] 	cmp #32					; Special char?
cf28 : b01b             [ 3] 	bcs gr_printable		; >=32 == carry clear
AS65 Assembler for R6502 [1.42].                                     Page  109
-------------------------------- bank\bank0.s --------------------------------

cf2a :                       gr_process_special
                             	; Else find special behaviour to do
cf2a : a2ff             [ 2] 	ldx #-1
cf2c : 8532             [ 3] 	sta tmp_alo
cf2e :                       gr_special_loop
cf2e : e8               [ 2] 	inx
cf2f : bd4bcf           [ 4] 	lda gr_special_ch,x
cf32 : f0ed             [ 3] 	beq gr_no_special		; Somewhere with an rts!
cf34 : c532             [ 3] 	cmp tmp_alo
cf36 : d0f6             [ 3] 	bne gr_special_loop
cf38 : bd54cf           [ 4] 	lda gr_special_fn_lo,x
cf3b : 8532             [ 3] 	sta tmp_alo
cf3d : bd5ccf           [ 4] 	lda gr_special_fn_hi,x
cf40 : 8533             [ 3] 	sta tmp_ahi
cf42 : 6c3200           [ 6] 	jmp (tmp_alo)
                             
                             	;	Normal caracter processing here.
cf45 :                       gr_printable
                             	; Place in current position and move right
cf45 : 20dccd           [ 6] 	jsr gr_put
cf48 : 4c95ce           [ 3] 	jmp gr_cur_right
                             
cf4b :                       gr_special_ch
cf4b : 0d                    	db UTF_CR
cf4c : 7f                    	db UTF_DEL
cf4d : 08                    	db CRSR_LEFT
cf4e : 09                    	db CRSR_RIGHT
cf4f : 0b                    	db CRSR_UP
cf50 : 0a                    	db CRSR_DOWN
cf51 : 0c                    	db UTF_FF
cf52 : 07                    	db UTF_BEL
cf53 : 00                    	db 0
                             
cf54 :                       gr_special_fn_lo
cf54 : 7d                    	db lo(gr_new_ln)
cf55 : d2                    	db lo(gr_del)
cf56 : a7                    	db lo(gr_cur_left)
cf57 : 95                    	db lo(gr_cur_right)
cf58 : bb                    	db lo(gr_cur_up)
cf59 : c5                    	db lo(gr_cur_down)
cf5a : 80                    	db lo(gr_cls)
cf5b : 17                    	db lo(init_snd)
                             
cf5c :                       gr_special_fn_hi
cf5c : ce                    	db hi(gr_new_ln)
cf5d : ce                    	db hi(gr_del)
cf5e : ce                    	db hi(gr_cur_left)
cf5f : ce                    	db hi(gr_cur_right)
cf60 : ce                    	db hi(gr_cur_up)
cf61 : ce                    	db hi(gr_cur_down)
cf62 : cd                    	db hi(gr_cls)
cf63 : d4                    	db hi(init_snd)
                             
                             ; Special command to print to the screen
                             ; Y,A=Message, zero terminated
cf64 :                       gr_print_msg
cf64 : 8449             [ 3] 	sty num_tmp
cf66 : 854a             [ 3] 	sta num_tmp+1
cf68 : a000             [ 2] 	ldy #0
cf6a :                       gr_print_msg_loop
cf6a : b149             [ 5] 	lda (num_tmp),y
cf6c : f006             [ 3] 	beq gr_print_msg_done
AS65 Assembler for R6502 [1.42].                                     Page  110
-------------------------------- bank\bank0.s --------------------------------

cf6e : 2010cf           [ 6] 	jsr gr_put_byte
cf71 : c8               [ 2] 	iny
cf72 : d0f6             [ 3] 	bne gr_print_msg_loop
cf74 :                       gr_print_msg_done
cf74 : a54a             [ 3] 	lda num_tmp+1
cf76 : a449             [ 3] 	ldy num_tmp
cf78 : 60               [ 6] 	rts
                             
                             ;******* HIRES STUFF *****
                             
                             
                             ;****************************************
                             ;* gr_hcode
                             ;* Plot bytecode at hires X,Y coordinates with co
                             ;* Input : X,Y = coord, A = Char code
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
cf79 :                       gr_hcode
cf79 : 48               [ 3] 	pha
                             	; Set up destination position tmpalo,hi and Y
cf7a : 2035d0           [ 6] 	jsr gr_point_setup
cf7d : a208             [ 2] 	ldx #8				; Always do 8 rows like a character
cf7f :                       gr_hcode_loop
cf7f : 68               [ 4] 	pla 				; Get the code to place
cf80 : 48               [ 3] 	pha					; Need to save it back
cf81 : 9126             [ 5] 	sta (gr_scrngeom+gr_geom_tmp),y		; Store it in d
cf83 : 18               [ 2] 	clc
cf84 : a526             [ 3] 	lda gr_scrngeom+gr_geom_tmp			; Update base poin
cf86 : 6519             [ 3] 	adc gr_scrngeom+gr_text_w
cf88 : 8526             [ 3] 	sta gr_scrngeom+gr_geom_tmp
                             	_bcc 2
                             
cf8c : e627             [ 5] 	inc gr_scrngeom+gr_geom_tmp+1
cf8e : ca               [ 2] 	dex
cf8f : d0ee             [ 3] 	bne gr_hcode_loop
cf91 : 68               [ 4] 	pla
cf92 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* gr_hchar
                             ;* Plot character to hires X,Y coordinates with c
                             ;* Input : X,Y = coord, A = Char code
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
cf93 :                       gr_hchar
                             	; If char code < 32 then plot attribute
cf93 : c91f             [ 2] 	cmp #31
cf95 : 90e2             [ 3] 	bcc gr_hcode
                             	; Multiply char code by 8
                             	; and add to char font base
                             	; tmp_clo contains base address
cf97 : 0a               [ 2] 	asl a
cf98 : 2637             [ 5] 	rol tmp_chi
cf9a : 0a               [ 2] 	asl a
cf9b : 2637             [ 5] 	rol tmp_chi
cf9d : 0a               [ 2] 	asl a
cf9e : 2637             [ 5] 	rol tmp_chi
cfa0 : 18               [ 2] 	clc
cfa1 : 6514             [ 3] 	adc gr_scrngeom+gr_char
cfa3 : 8536             [ 3] 	sta tmp_clo
AS65 Assembler for R6502 [1.42].                                     Page  111
-------------------------------- bank\bank0.s --------------------------------

cfa5 : a537             [ 3] 	lda tmp_chi
cfa7 : 2907             [ 2] 	and #7
cfa9 : 6515             [ 3] 	adc gr_scrngeom+gr_char+1
cfab : 8537             [ 3] 	sta tmp_chi
                             
                             	; Set up destination position
cfad : 2035d0           [ 6] 	jsr gr_point_setup
                             	; tmp needs to contains address including column
cfb0 : 18               [ 2] 	clc
cfb1 : 98               [ 2] 	tya
cfb2 : 6526             [ 3] 	adc gr_scrngeom+gr_geom_tmp
cfb4 : 8526             [ 3] 	sta gr_scrngeom+gr_geom_tmp
                             	_bcc 2
                             
cfb8 : e627             [ 5] 	inc gr_scrngeom+gr_geom_tmp+1
                             
cfba : a528             [ 3] 	lda gr_scrngeom+gr_geom_tmp2		; Get the mask
cfbc : a207             [ 2] 	ldx #7
cfbe :                       gr_hchar_mask							; Calculate how many shifts t
cfbe : ca               [ 2] 	dex
cfbf : 4a               [ 2] 	lsr a
cfc0 : d0fc             [ 3] 	bne gr_hchar_mask
cfc2 : 8628             [ 3] 	stx gr_scrngeom+gr_geom_tmp2		; number between 1
                             
                             	; copy font bytes and shift the required number 
                             	; go from bottom to top as data gets stored on t
cfc4 : a007             [ 2] 	ldy #7
cfc6 :                       gr_hchar_getfont
cfc6 : b136             [ 5] 	lda (tmp_clo),y
cfc8 : 853d             [ 3] 	sta ztmp_24
cfca : a900             [ 2] 	lda #0
cfcc : 853e             [ 3] 	sta ztmp_24+1
                             
                             	; shift the right number of times
cfce : a628             [ 3] 	ldx gr_scrngeom+gr_geom_tmp2
cfd0 :                       gr_hchar_rot1bit
cfd0 : ca               [ 2] 	dex
cfd1 : f00d             [ 3] 	beq gr_hchar_rot1bit_nx
cfd3 : 463d             [ 5] 	lsr ztmp_24					; Rotate left hand side
cfd5 : a53e             [ 3] 	lda ztmp_24+1				; Rotate right hand side
cfd7 : 9002             [ 3] 	bcc gr_hchar_rot1bit_bcc
cfd9 : 0940             [ 2] 	ora #0x40					; account for 6 bits per byte
cfdb :                       gr_hchar_rot1bit_bcc
cfdb : 4a               [ 2] 	lsr a
cfdc : 853e             [ 3] 	sta ztmp_24+1
cfde : 10f0             [ 3] 	bpl gr_hchar_rot1bit		; Always as lsr sets N=0
cfe0 :                       gr_hchar_rot1bit_nx
cfe0 : a53e             [ 3] 	lda ztmp_24+1				; Get RHS
cfe2 : 48               [ 3] 	pha							; Push RHS on to stack
cfe3 : a53d             [ 3] 	lda ztmp_24					; Get LHS
cfe5 : 48               [ 3] 	pha							; Push that too - LH gets pulled first
cfe6 : 88               [ 2] 	dey							; Bottom to to lines
cfe7 : 10dd             [ 3] 	bpl gr_hchar_getfont
                             
                             	; Now copy shift source to destination, accounti
cfe9 : a208             [ 2] 	ldx #8
cfeb :                       gr_hchar_copyline
cfeb : a41f             [ 3] 	ldy gr_scrngeom+gr_pixmode	; Mode determines how
cfed : f022             [ 4] 	beq gr_hchar_copyline_erase
cfef : 3010             [ 4] 	bmi gr_hchar_copyline_eor
                             
                             	; Mode = ~Z : OR
AS65 Assembler for R6502 [1.42].                                     Page  112
-------------------------------- bank\bank0.s --------------------------------

cff1 : a000             [ 2] 	ldy #0						; Get lh side source
cff3 : 68               [ 4] 	pla
cff4 : 1126             [ 5] 	ora (gr_scrngeom+gr_geom_tmp),y
cff6 : 9126             [ 5] 	sta (gr_scrngeom+gr_geom_tmp),y
cff8 : c8               [ 2] 	iny							; Get rh side source
cff9 : 68               [ 4] 	pla
cffa : 1126             [ 5] 	ora (gr_scrngeom+gr_geom_tmp),y
cffc : 9126             [ 5] 	sta (gr_scrngeom+gr_geom_tmp),y
cffe : 4c26d0           [ 3] 	jmp gr_hchar_copyline_nx
d001 :                       gr_hchar_copyline_eor
                             	; Mode = N : EOR
d001 : a000             [ 2] 	ldy #0						; Get lh side source
d003 : 68               [ 4] 	pla
d004 : 5126             [ 5] 	eor (gr_scrngeom+gr_geom_tmp),y
d006 : 9126             [ 5] 	sta (gr_scrngeom+gr_geom_tmp),y
d008 : c8               [ 2] 	iny							; Get rh side source
d009 : 68               [ 4] 	pla
d00a : 5126             [ 5] 	eor (gr_scrngeom+gr_geom_tmp),y
d00c : 9126             [ 5] 	sta (gr_scrngeom+gr_geom_tmp),y
d00e : 4c26d0           [ 3] 	jmp gr_hchar_copyline_nx
d011 :                       gr_hchar_copyline_erase
                             	; Mode = Z : erase
d011 : a000             [ 2] 	ldy #0						; Get lh side source
d013 : 68               [ 4] 	pla
d014 : 853d             [ 3] 	sta ztmp_24
d016 : 1126             [ 5] 	ora (gr_scrngeom+gr_geom_tmp),y
d018 : 453d             [ 3] 	eor ztmp_24
d01a : 9126             [ 5] 	sta (gr_scrngeom+gr_geom_tmp),y
d01c : c8               [ 2] 	iny							; Get rh side source
d01d : 68               [ 4] 	pla
d01e : 853d             [ 3] 	sta ztmp_24
d020 : 1126             [ 5] 	ora (gr_scrngeom+gr_geom_tmp),y
d022 : 453d             [ 3] 	eor ztmp_24
d024 : 9126             [ 5] 	sta (gr_scrngeom+gr_geom_tmp),y
d026 :                       gr_hchar_copyline_nx
d026 : 18               [ 2] 	clc							; Next address
d027 : a526             [ 3] 	lda gr_scrngeom+gr_geom_tmp
d029 : 6928             [ 2] 	adc #40
d02b : 8526             [ 3] 	sta gr_scrngeom+gr_geom_tmp
                             	_bcc 2
                             
d02f : e627             [ 5] 	inc gr_scrngeom+gr_geom_tmp+1
d031 : ca               [ 2] 	dex
d032 : d0b7             [ 4] 	bne gr_hchar_copyline
d034 : 60               [ 6] 	rts							; Done after 8 lines
                             
                             ;****************************************
                             ;* gr_point_setup
                             ;* Calculate information about a pixel location
                             ;* Input : X,Y = coord
                             ;* Output : None
                             ;* Regs affected :
                             ;* gr_geom_tmp contains the row base address
                             ;* gr_geom_tmp2 contains the mask
                             ;* A contains the mask
                             ;* X untouched
                             ;* Y contains column offet from base address
                             ;****************************************
d035 :                       gr_point_setup
                             	; Get row address
d035 : b9009c           [ 4] 	lda hires_row_low,y
d038 : 8526             [ 3] 	sta gr_scrngeom+gr_geom_tmp
AS65 Assembler for R6502 [1.42].                                     Page  113
-------------------------------- bank\bank0.s --------------------------------

d03a : b9c89c           [ 4] 	lda hires_row_hi,y
d03d : 8527             [ 3] 	sta gr_scrngeom+gr_geom_tmp+1
                             	; Get the pixel mask
d03f : bd809e           [ 4] 	lda hires_mask,x
d042 : 8528             [ 3] 	sta gr_scrngeom+gr_geom_tmp2
                             	; Get the column offset to Y
d044 : bc909d           [ 4] 	ldy hires_col,x
d047 : 60               [ 6] 	rts
                             
d048 :                       gr_set_hires_cur
d048 : 8621             [ 3] 	stx gr_scrngeom+gr_hires_x
d04a : 8422             [ 3] 	sty gr_scrngeom+gr_hires_y
d04c : 60               [ 6] 	rts
                             
                             ;* Get pixel value at X,Y in to A
d04d :                       gr_pixel
d04d : 2035d0           [ 6] 	jsr gr_point_setup				; Set up mask and addresse
d050 : 3126             [ 5] 	and (gr_scrngeom+gr_geom_tmp),y	; And with scree
d052 : 60               [ 6] 	rts
                             
                             ;* Plot a point based on X,Y coordinates
d053 :                       gr_point
d053 : e0f0             [ 2] 	cpx #240						; Check bounds
d055 : b02c             [ 3] 	bcs gr_point_done
d057 : c0c8             [ 2] 	cpy #200
d059 : b028             [ 3] 	bcs gr_point_done
                             
                             	;** FOR SPEED COPYING THE POINT SETUP ROUTINE **
                             	;** OBVS MAKE SURE THIS REFLECTS ANY POINT SETUP
                             	; Get row address
d05b : b9009c           [ 4] 	lda hires_row_low,y
d05e : 8526             [ 3] 	sta gr_scrngeom+gr_geom_tmp
d060 : b9c89c           [ 4] 	lda hires_row_hi,y
d063 : 8527             [ 3] 	sta gr_scrngeom+gr_geom_tmp+1
                             	; Get the pixel mask
d065 : bd809e           [ 4] 	lda hires_mask,x
d068 : 8528             [ 3] 	sta gr_scrngeom+gr_geom_tmp2
                             	; Get the column offset to Y
d06a : bc909d           [ 4] 	ldy hires_col,x
                             
                             ;* Plot a point based on gr_geom_tmp base, Y offs
d06d : b126             [ 5] 	lda (gr_scrngeom+gr_geom_tmp),y	; Get screen byt
d06f : c920             [ 2] 	cmp #32							; If less than 32 (i.e. an attribu
d071 : b002             [ 3] 	bcs gr_point_skip_attr
d073 : a940             [ 2] 	lda #64							; then make it a normal cell (else
d075 :                       gr_point_skip_attr
d075 : a61f             [ 3] 	ldx gr_scrngeom+gr_pixmode		; Look at the mode
d077 : 3006             [ 3] 	bmi gr_point_eor				; If eor mode then go and wr
d079 : 0528             [ 3] 	ora gr_scrngeom+gr_geom_tmp2	; Or with MASK
d07b : e000             [ 2] 	cpx #0							; But if zero mode then eor
d07d : d002             [ 3] 	bne gr_point_write
d07f :                       gr_point_eor
d07f : 4528             [ 3] 	eor gr_scrngeom+gr_geom_tmp2	; EOR with MASK
d081 :                       gr_point_write
d081 : 9126             [ 5] 	sta (gr_scrngeom+gr_geom_tmp),y
d083 :                       gr_point_done
d083 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* gr_circle
                             ;* Draw a circle centre x0,y0, radius r
                             ;* Input :	num_a   = x0
AS65 Assembler for R6502 [1.42].                                     Page  114
-------------------------------- bank\bank0.s --------------------------------

                             ;*			num_a+1 = y0
                             ;*			num_a+2 = r
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
d084 :                       gr_circle
                             ; Local definitions of temp space to make
                             ; the rest of the code easier to read
003d =                       grc_x0 	= (num_a)
003e =                       grc_y0 	= (num_a+1)
003f =                       grc_r 	= (num_a+2)
0040 =                       grc_x 	= (num_a+3)
0042 =                       grc_y	= (num_b+1)
0043 =                       grc_d	= (num_b+2)
                             
                             	;x = radius
d084 : a53f             [ 3] 	lda grc_r
d086 : 8540             [ 3] 	sta grc_x
                             	;decision = 1 - x
d088 : a900             [ 2] 	lda #0
                             	;y = 0
d08a : 8542             [ 3] 	sta grc_y
d08c : 18               [ 2] 	clc			; A=0 so CLC subtracts 1 :-)
d08d : e540             [ 3] 	sbc grc_x
d08f : 8543             [ 3] 	sta grc_d
d091 :                       gr_circle_plot
                             	;while(x >= y)
d091 : a540             [ 3] 	lda grc_x
d093 : c542             [ 3] 	cmp grc_y
d095 : 902a             [ 3] 	bcc gr_circle_done
                             	;plot 8 points on current x,y
d097 : 20c2d0           [ 6] 	jsr gr_circle_points
                             	;y++
d09a : e642             [ 5] 	inc grc_y
                             	;if d<=0
d09c : a543             [ 3] 	lda grc_d
d09e : f014             [ 3] 	beq gr_circle_d_lte0
d0a0 : 3012             [ 3] 	bmi gr_circle_d_lte0
                             	;else
                             	;x--
d0a2 : c640             [ 5] 	dec grc_x
                             	;decision += 2 * (y - x) + 1
d0a4 : a542             [ 3] 	lda grc_y
d0a6 : 38               [ 2] 	sec
d0a7 : e540             [ 3] 	sbc grc_x
d0a9 : 0a               [ 2] 	asl a
d0aa : 18               [ 2] 	clc
d0ab : 6901             [ 2] 	adc #1
d0ad : 6543             [ 3] 	adc grc_d
d0af : 8543             [ 3] 	sta grc_d
d0b1 : 4c91d0           [ 3] 	jmp gr_circle_plot
d0b4 :                       gr_circle_d_lte0
                             	;decision += 2 * y + 1
d0b4 : a542             [ 3] 	lda grc_y
d0b6 : 0a               [ 2] 	asl a
d0b7 : 18               [ 2] 	clc
d0b8 : 6901             [ 2] 	adc #1
d0ba : 6543             [ 3] 	adc grc_d
d0bc : 8543             [ 3] 	sta grc_d
d0be : 4c91d0           [ 3] 	jmp gr_circle_plot
d0c1 :                       gr_circle_done
d0c1 : 60               [ 6] 	rts
AS65 Assembler for R6502 [1.42].                                     Page  115
-------------------------------- bank\bank0.s --------------------------------

d0c2 :                       gr_circle_points
                             ; Local names of temp storage
                             ; to make code easier to read
                             	;DrawPixel( x + x0,  yh + y0);
d0c2 : a540             [ 3] 	lda grc_x
d0c4 : 18               [ 2] 	clc
d0c5 : 653d             [ 3] 	adc grc_x0
d0c7 : aa               [ 2] 	tax
d0c8 : a542             [ 3] 	lda grc_y
d0ca : 18               [ 2] 	clc
d0cb : 653e             [ 3] 	adc grc_y0
d0cd : a8               [ 2] 	tay
d0ce : 2053d0           [ 6] 	jsr gr_point
                             	;DrawPixel( y + x0,  xh + y0);
d0d1 : a542             [ 3] 	lda grc_y
d0d3 : 18               [ 2] 	clc
d0d4 : 653d             [ 3] 	adc grc_x0
d0d6 : aa               [ 2] 	tax
d0d7 : a540             [ 3] 	lda grc_x
d0d9 : 18               [ 2] 	clc
d0da : 653e             [ 3] 	adc grc_y0
d0dc : a8               [ 2] 	tay
d0dd : 2053d0           [ 6] 	jsr gr_point
                             	;DrawPixel(-x + x0,  yh + y0);
d0e0 : a53d             [ 3] 	lda grc_x0
d0e2 : 38               [ 2] 	sec
d0e3 : e540             [ 3] 	sbc grc_x
d0e5 : aa               [ 2] 	tax
d0e6 : a542             [ 3] 	lda grc_y
d0e8 : 18               [ 2] 	clc
d0e9 : 653e             [ 3] 	adc grc_y0
d0eb : a8               [ 2] 	tay
d0ec : 2053d0           [ 6] 	jsr gr_point
                             	;DrawPixel(-y + x0,  xh + y0);
d0ef : a53d             [ 3] 	lda grc_x0
d0f1 : 38               [ 2] 	sec
d0f2 : e542             [ 3] 	sbc grc_y
d0f4 : aa               [ 2] 	tax
d0f5 : a540             [ 3] 	lda grc_x
d0f7 : 18               [ 2] 	clc
d0f8 : 653e             [ 3] 	adc grc_y0
d0fa : a8               [ 2] 	tay
d0fb : 2053d0           [ 6] 	jsr gr_point
                             	;DrawPixel(-x + x0, -yh + y0);
d0fe : a53d             [ 3] 	lda grc_x0
d100 : 38               [ 2] 	sec
d101 : e540             [ 3] 	sbc grc_x
d103 : aa               [ 2] 	tax
d104 : a53e             [ 3] 	lda grc_y0
d106 : 38               [ 2] 	sec
d107 : e542             [ 3] 	sbc grc_y
d109 : a8               [ 2] 	tay
d10a : 2053d0           [ 6] 	jsr gr_point
                             	;DrawPixel(-y + x0, -xh + y0);
d10d : a53d             [ 3] 	lda grc_x0
d10f : 38               [ 2] 	sec
d110 : e542             [ 3] 	sbc grc_y
d112 : aa               [ 2] 	tax
d113 : a53e             [ 3] 	lda grc_y0
d115 : 38               [ 2] 	sec
d116 : e540             [ 3] 	sbc grc_x
d118 : a8               [ 2] 	tay
AS65 Assembler for R6502 [1.42].                                     Page  116
-------------------------------- bank\bank0.s --------------------------------

d119 : 2053d0           [ 6] 	jsr gr_point
                             	;DrawPixel( x + x0, -yh + y0);
d11c : a540             [ 3] 	lda grc_x
d11e : 18               [ 2] 	clc
d11f : 653d             [ 3] 	adc grc_x0
d121 : aa               [ 2] 	tax
d122 : a53e             [ 3] 	lda grc_y0
d124 : 38               [ 2] 	sec
d125 : e542             [ 3] 	sbc grc_y
d127 : a8               [ 2] 	tay
d128 : 2053d0           [ 6] 	jsr gr_point
                             	;DrawPixel( y + x0, -xh + y0);
d12b : a542             [ 3] 	lda grc_y
d12d : 18               [ 2] 	clc
d12e : 653d             [ 3] 	adc grc_x0
d130 : aa               [ 2] 	tax
d131 : a53e             [ 3] 	lda grc_y0
d133 : 38               [ 2] 	sec
d134 : e540             [ 3] 	sbc grc_x
d136 : a8               [ 2] 	tay
d137 : 4c53d0           [ 3] 	jmp gr_point
                             
                             
                             
                             ;****************************************
                             ;* gr_line
                             ;* Draw a line from x0,y0 -> x1,y1
                             ;* Input :	num_a   = x0
                             ;*			num_a+1 = y0
                             ;*			num_a+2 = x1
                             ;*			num_a+3 = y1
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
d13a :                       gr_line
                             
                             ; Local definitions of temp space to make
                             ; the rest of the code easier to read
003d =                       grl_x0 	= (num_a)
003e =                       grl_y0 	= (num_a+1)
003f =                       grl_x1 	= (num_a+2)
0040 =                       grl_y1 	= (num_a+3)
0041 =                       grl_dx	= (ztmp_24+4)
0042 =                       grl_dy	= (ztmp_24+5)
0043 =                       grl_xyyx= (ztmp_24+6)
0044 =                       grl_2dx	= (ztmp_24+7)			; Word
0046 =                       grl_2dy	= (ztmp_24+9)			; Word
0048 =                       grl_2dxy= (ztmp_24+11)			; Word
004a =                       grl_sinx= (ztmp_24+13)
004b =                       grl_p	= (ztmp_24+14)			; Word
004d =                       grl_siny= (ztmp_24+16)
                             
                             	; Start from hires cursor position
                             	; New cursor pos = end of line pos
d13a : a521             [ 3] 	lda gr_scrngeom+gr_hires_x
d13c : 853d             [ 3] 	sta grl_x0
d13e : a522             [ 3] 	lda gr_scrngeom+gr_hires_y
d140 : 853e             [ 3] 	sta grl_y0
d142 : a63f             [ 3] 	ldx grl_x1
d144 : a440             [ 3] 	ldy grl_y1
d146 : 2048d0           [ 6] 	jsr gr_set_hires_cur
                             	
AS65 Assembler for R6502 [1.42].                                     Page  117
-------------------------------- bank\bank0.s --------------------------------

d149 : a900             [ 2] 	lda #0
d14b : 8543             [ 3] 	sta grl_xyyx				; Assume normal xy axis
                             
                             	; check if abs(dy)>abs(dx) if so need to swap xy
                             	; num_b = abs(x), num_b+1 = abs(dy)
d14d : 38               [ 2] 	sec
d14e : a53f             [ 3] 	lda grl_x1
d150 : e53d             [ 3] 	sbc grl_x0
d152 : b004             [ 3] 	bcs gr_line_skip_dx_neg
d154 : 49ff             [ 2] 	eor #0xff
d156 : 6901             [ 2] 	adc #1
d158 :                       gr_line_skip_dx_neg
d158 : 8541             [ 3] 	sta grl_dx
d15a : 38               [ 2] 	sec
d15b : a540             [ 3] 	lda grl_y1
d15d : e53e             [ 3] 	sbc grl_y0
d15f : b004             [ 3] 	bcs gr_line_skip_dy_neg
d161 : 49ff             [ 2] 	eor #0xff
d163 : 6901             [ 2] 	adc #1
d165 :                       gr_line_skip_dy_neg
d165 : 8542             [ 3] 	sta grl_dy
d167 : c541             [ 3] 	cmp grl_dx
d169 : 901a             [ 3] 	bcc gr_line_skip_xy_swap
                             	; swap xy axes and also dx and dy
d16b : a53d             [ 3] 	lda grl_x0					; swap x0 and y0
d16d : a63e             [ 3] 	ldx grl_y0
d16f : 853e             [ 3] 	sta grl_y0
d171 : 863d             [ 3] 	stx grl_x0
d173 : a53f             [ 3] 	lda grl_x1					; swap x1 and y1
d175 : a640             [ 3] 	ldx grl_y1
d177 : 8540             [ 3] 	sta grl_y1
d179 : 863f             [ 3] 	stx grl_x1
d17b : a541             [ 3] 	lda grl_dx					; swap dy and dx
d17d : a642             [ 3] 	ldx grl_dy
d17f : 8542             [ 3] 	sta grl_dy
d181 : 8641             [ 3] 	stx grl_dx
d183 : e643             [ 5] 	inc grl_xyyx				; set flag to Not Z to know abou
                             
d185 :                       gr_line_skip_xy_swap
                             	; assume going from left to right and top to bot
d185 : a901             [ 2] 	lda #1
d187 : a0ff             [ 2] 	ldy #255					; -1
d189 : 854a             [ 3] 	sta grl_sinx
d18b : 854d             [ 3] 	sta grl_siny
                             
                             	; check going right to left
d18d : a53d             [ 3] 	lda grl_x0
d18f : c53f             [ 3] 	cmp grl_x1
d191 : 9002             [ 3] 	bcc gr_line_skip_left
d193 : 844a             [ 3] 	sty grl_sinx				; make -1
d195 :                       gr_line_skip_left
                             	; check going bottom to top
d195 : a53e             [ 3] 	lda grl_y0
d197 : c540             [ 3] 	cmp grl_y1
d199 : 9002             [ 3] 	bcc gr_line_skip_y_up
d19b : 844d             [ 3] 	sty grl_siny				; make -1
                             
d19d :                       gr_line_skip_y_up
d19d : a541             [ 3] 	lda grl_dx
d19f : 0a               [ 2] 	asl a
d1a0 : 8544             [ 3] 	sta grl_2dx					; 2*dx (word)
d1a2 : a900             [ 2] 	lda #0
AS65 Assembler for R6502 [1.42].                                     Page  118
-------------------------------- bank\bank0.s --------------------------------

d1a4 : 8545             [ 3] 	sta grl_2dx+1
d1a6 : 2645             [ 5] 	rol grl_2dx+1
                             
d1a8 : a542             [ 3] 	lda grl_dy
d1aa : 0a               [ 2] 	asl a
d1ab : 8546             [ 3] 	sta grl_2dy					; 2*dy (word)
d1ad : a900             [ 2] 	lda #0
d1af : 8547             [ 3] 	sta grl_2dy+1
d1b1 : 2647             [ 5] 	rol grl_2dy+1
                             
                             ;    p=2*dy-dx;					; p (word)
d1b3 : 38               [ 2] 	sec
d1b4 : a546             [ 3] 	lda grl_2dy
d1b6 : e541             [ 3] 	sbc grl_dx
d1b8 : 854b             [ 3] 	sta grl_p
d1ba : a547             [ 3] 	lda grl_2dy+1
d1bc : e900             [ 2] 	sbc #0
d1be : 854c             [ 3] 	sta grl_p+1
                             
                             ;   2*(dy-dx)					; num_tmp+2 = 2*(dy-dx)
d1c0 : 38               [ 2] 	sec
d1c1 : a546             [ 3] 	lda grl_2dy
d1c3 : e544             [ 3] 	sbc grl_2dx
d1c5 : 8548             [ 3] 	sta grl_2dxy
d1c7 : a547             [ 3] 	lda grl_2dy+1
d1c9 : e545             [ 3] 	sbc grl_2dx+1
d1cb : 8549             [ 3] 	sta grl_2dxy+1
                             
d1cd :                       gr_line_pixel
d1cd : a63d             [ 3] 	ldx grl_x0
d1cf : a43e             [ 3] 	ldy grl_y0
d1d1 : a543             [ 3] 	lda grl_xyyx				; Swapped?
d1d3 : f004             [ 3] 	beq gr_line_yx_skip
d1d5 : a63e             [ 3] 	ldx grl_y0
d1d7 : a43d             [ 3] 	ldy grl_x0
d1d9 :                       gr_line_yx_skip
d1d9 : 2053d0           [ 6] 	jsr gr_point				; Plot point x,y
                             
d1dc : a53d             [ 3] 	lda grl_x0					; Check if done
d1de : c53f             [ 3] 	cmp grl_x1
d1e0 : f032             [ 4] 	beq gr_line_done
                             
                             	; Increment x always
d1e2 : 18               [ 2] 	clc
d1e3 : a53d             [ 3] 	lda grl_x0
d1e5 : 654a             [ 3] 	adc grl_sinx
d1e7 : 853d             [ 3] 	sta grl_x0
                             
                             	; check sign of p
d1e9 : a54c             [ 3] 	lda grl_p+1
d1eb : 3017             [ 4] 	bmi gr_line_neg_p
                             
                             	; if p >=0
                             
                             	; y=y+increment
d1ed : 18               [ 2] 	clc
d1ee : a53e             [ 3] 	lda grl_y0
d1f0 : 654d             [ 3] 	adc grl_siny
d1f2 : 853e             [ 3] 	sta grl_y0
                             
                             	; p=p+2*dy-2*dx
                             	_addZPWord grl_p,grl_2dxy
AS65 Assembler for R6502 [1.42].                                     Page  119
-------------------------------- bank\bank0.s --------------------------------

                             
d201 : 4ccdd1           [ 3] 	jmp gr_line_pixel
                             
d204 :                       gr_line_neg_p
                             	; if p < 0
                             	; p=p+2*dy
                             	_addZPWord grl_p,grl_2dy
                             
                             
d211 : 4ccdd1           [ 3] 	jmp gr_line_pixel
d214 :                       gr_line_done
d214 : 60               [ 6] 	rts
                             
                             
                             ; Line drawing pseudo code
                             ;    while(x<x1)
                             ;    {
                             ;        putpixel(x,y);
                             ;        if(p>=0)
                             ;        {
                             ;            y=y+1;
                             ;            p=p+2*dy-2*dx;
                             ;        }
                             ;        else
                             ;        {
                             ;            p=p+2*dy;
                             ;        }
                             ;        x=x+1;
                             ;    }
                             
                             
                             ;* These tables are to speed up calculating the
                             ;* offset for plot commands
d215 :                       gr_offset_40lo
d215 : 00285078a0            	db lo(000*40), lo(001*40), lo(002*40), lo(003*40
d21a : c8f0184068            	db lo(005*40), lo(006*40), lo(007*40), lo(008*40
d21f : 90b8e00830            	db lo(010*40), lo(011*40), lo(012*40), lo(013*40
d224 : 5880a8d0f8            	db lo(015*40), lo(016*40), lo(017*40), lo(018*40
d229 : 20487098c0            	db lo(020*40), lo(021*40), lo(022*40), lo(023*40
d22e : e81038                	db lo(025*40), lo(026*40), lo(027*40)
d231 :                       gr_offset_40hi
d231 : 0000000000            	db hi(000*40), hi(001*40), hi(002*40), hi(003*40
d236 : 0000010101            	db hi(005*40), hi(006*40), hi(007*40), hi(008*40
d23b : 0101010202            	db hi(010*40), hi(011*40), hi(012*40), hi(013*40
d240 : 0202020202            	db hi(015*40), hi(016*40), hi(017*40), hi(018*40
d245 : 0303030303            	db hi(020*40), hi(021*40), hi(022*40), hi(023*40
d24a : 030404                	db hi(025*40), hi(026*40), hi(027*40)
                             
                             
                             ;* Character based sprites for text mode only
d24d :                       mod_sz_sprite_s
                             ;* Initialisation
d24d :                       gr_spr_init
d24d : a21f             [ 2] 	ldx #31							; Start at last sprite
d24f :                       gr_spr_init_loop
d24f : a9ff             [ 2] 	lda #-1							; Put -1 in the x coords
d251 : 9d00b4           [ 5] 	sta spr_curX,x
d254 : 9d20b4           [ 5] 	sta spr_newX,x
d257 : ca               [ 2] 	dex								; Next sprite
d258 : 10f5             [ 3] 	bpl gr_spr_init_loop			; Until all 32 sprites in
d25a : 60               [ 6] 	rts
                             
AS65 Assembler for R6502 [1.42].                                     Page  120
-------------------------------- bank\bank0.s --------------------------------

                             
                             ;* Erase all active sprites
d25b :                       gr_spr_erase
                             	; First restore background from sprites
                             	; that are active and new pos is different from 
d25b : a21f             [ 2] 	ldx #31							; Start at last sprite
d25d :                       gr_spr_erase_loop
d25d : bd00b4           [ 4] 	lda spr_curX,x					; Is sprite active?
d260 : 3007             [ 3] 	bmi gr_spr_erase_next
d262 : a8               [ 2] 	tay								; x pos in to Y
d263 :                       gr_spr_erase_do
d263 : bda0b4           [ 4] 	lda spr_bgnd,x					; Get the background
d266 : 20b1d2           [ 6] 	jsr gr_spr_put					; And restore it
d269 :                       gr_spr_erase_next
d269 : ca               [ 2] 	dex
d26a : 10f1             [ 3] 	bpl gr_spr_erase_loop
d26c : 60               [ 6] 	rts
                             
                             ;* Get ready for new position
d26d :                       gr_spr_new
d26d : a21f             [ 2] 	ldx #31							; Start at last sprite
d26f :                       gr_spr_new_loop
d26f : bd60b4           [ 4] 	lda spr_newY,x					; Get new Y
d272 : 9d40b4           [ 5] 	sta spr_curY,x					; Update new->cur Y
d275 : a8               [ 2] 	tay								; Used for address calc.
d276 : bd20b4           [ 4] 	lda spr_newX,x					; Get new X
d279 : 9d00b4           [ 5] 	sta spr_curX,x					; Update new->cur X
d27c : 301d             [ 3] 	bmi gr_spr_new_next				; Is the new position act
d27e : 48               [ 3] 	pha 							; x pos saved for later
                             	; Calculate screen address
                             	; save as part of sprite data and in zp area
d27f : 18               [ 2] 	clc
d280 : b915d2           [ 4] 	lda gr_offset_40lo,y
d283 : 6980             [ 2] 	adc #lo(TEXTSCRN)
d285 : 8526             [ 3] 	sta gr_scrngeom+gr_geom_tmp
d287 : 9dc0b4           [ 5] 	sta spr_baseadrl,x
d28a : b931d2           [ 4] 	lda gr_offset_40hi,y
d28d : 69bb             [ 2] 	adc #hi(TEXTSCRN)
d28f : 8527             [ 3] 	sta gr_scrngeom+gr_geom_tmp+1
d291 : 9de0b4           [ 5] 	sta spr_baseadrh,x
d294 : 68               [ 4] 	pla								; Get x pos back in to Y reg
d295 : a8               [ 2] 	tay
d296 : b126             [ 5] 	lda (gr_scrngeom+gr_geom_tmp),y	; Get background
d298 : 9da0b4           [ 5] 	sta spr_bgnd,x					; And save this
d29b :                       gr_spr_new_next
d29b : ca               [ 2] 	dex
d29c : 10d1             [ 3] 	bpl gr_spr_new_loop
d29e : 60               [ 6] 	rts
                             
                             
                             ; Draw all active sprites
                             ; Active sprites are always drawn - 0 = highest p
d29f :                       gr_spr_draw
d29f : a21f             [ 2] 	ldx #31							; Start at last sprite
d2a1 :                       gr_spr_draw_loop
d2a1 : bd20b4           [ 4] 	lda spr_newX,x					; Is sprite active?
d2a4 : 3007             [ 3] 	bmi gr_spr_draw_next
d2a6 : a8               [ 2] 	tay								; X pos in to Y
d2a7 : bd80b4           [ 4] 	lda spr_chr,x					; Get the sprite char
d2aa : 20b1d2           [ 6] 	jsr gr_spr_put
d2ad :                       gr_spr_draw_next
d2ad : ca               [ 2] 	dex
AS65 Assembler for R6502 [1.42].                                     Page  121
-------------------------------- bank\bank0.s --------------------------------

d2ae : 10f1             [ 3] 	bpl gr_spr_draw_loop
d2b0 : 60               [ 6] 	rts
                             
                             
                             ;* Common routine to put A to screen address
                             ;* Used for erase and draw of sprites
                             ;* X=index in to sprite table
                             ;* Y=X offset from screen pointer
d2b1 :                       gr_spr_put
d2b1 : 48               [ 3] 	pha
d2b2 : bdc0b4           [ 4] 	lda spr_baseadrl,x		; Get the screen pointer
d2b5 : 8526             [ 3] 	sta gr_scrngeom+gr_geom_tmp
d2b7 : bde0b4           [ 4] 	lda spr_baseadrh,x
d2ba : 8527             [ 3] 	sta gr_scrngeom+gr_geom_tmp+1
d2bc : 68               [ 4] 	pla								; Get back the char to
d2bd : 9126             [ 5] 	sta (gr_scrngeom+gr_geom_tmp),y	; put on to scre
d2bf : 60               [ 6] 	rts
                             
                             
                             ;* Update spr A with char X
d2c0 :                       gr_spr_char
d2c0 : a8               [ 2] 	tay
d2c1 : 8a               [ 2] 	txa
d2c2 : 9980b4           [ 5] 	sta spr_chr,y
d2c5 : 60               [ 6] 	rts
                             
                             ;* Locate what is at the location of sprite A, re
                             ;* C=1 if sprite it not active
d2c6 :                       gr_spr_hit
d2c6 : aa               [ 2] 	tax
d2c7 : bd00b4           [ 4] 	lda spr_curX,x
d2ca : c980             [ 2] 	cmp #0x80						; If A>=0x80 then C=1
d2cc : bda0b4           [ 4] 	lda spr_bgnd,x
d2cf : 60               [ 6] 	rts
                             
                             ;* Update spr A with coords X,Y
d2d0 :                       gr_spr_pos
d2d0 : 8432             [ 3] 	sty tmp_alo
d2d2 : a8               [ 2] 	tay
d2d3 : 8a               [ 2] 	txa								; X coord still in X reg
d2d4 : 9920b4           [ 5] 	sta spr_newX,y
d2d7 : a532             [ 3] 	lda tmp_alo						; Y coord from temp
d2d9 : 9960b4           [ 5] 	sta spr_newY,y
d2dc : 60               [ 6] 	rts
                             
                             ;* Update all sprite positions from df_tmpptra, d
d2dd :                       gr_spr_multi_pos
d2dd : a03e             [ 2] 	ldy #62
d2df : a21f             [ 2] 	ldx #31
d2e1 :                       gr_spr_multi_loop
d2e1 : b1a1             [ 5] 	lda (df_tmpptra),y
d2e3 : 9d20b4           [ 5] 	sta spr_newX,x
d2e6 : b1a3             [ 5] 	lda (df_tmpptrb),y
d2e8 : 9d60b4           [ 5] 	sta spr_newY,x
d2eb : 88               [ 2] 	dey
d2ec : 88               [ 2] 	dey
d2ed : ca               [ 2] 	dex
d2ee : 10f1             [ 3] 	bpl gr_spr_multi_loop
d2f0 : 60               [ 6] 	rts
                             
d2f1 :                       mod_sz_sprite_e
d2f1 :                       mod_sz_graph_e
AS65 Assembler for R6502 [1.42].                                     Page  122
-------------------------------- bank\bank0.s --------------------------------

                             
                             ; Old version of point calculator - in case I nee
                             ;	; Calculate destination address
                             ;	lda #0
                             ;	sta tmp_ahi
                             ;
                             ;	tya				; Row number in A
                             ;	; Multiply 8
                             ;	asl a
                             ;	rol tmp_ahi
                             ;	asl a
                             ;	rol tmp_ahi
                             ;	asl a
                             ;	rol tmp_ahi
                             ;	sta tmp_alo
                             ;
                             ;	; Multiply 32
                             ;	; Use partial result from m8
                             ;	lda tmp_ahi
                             ;	sta tmp_bhi
                             ;	lda tmp_alo
                             ;	; Just two more rotates to get m32
                             ;	asl a
                             ;	rol tmp_bhi
                             ;	asl a
                             ;	rol tmp_bhi
                             ;	sta tmp_blo
                             ;	; Add m8 and m32 for m40
                             ;	clc
                             ;	lda tmp_alo
                             ;	adc tmp_blo
                             ;	sta tmp_alo
                             ;	lda tmp_ahi
                             ;	adc tmp_bhi
                             ;	; Add high byte of screen address
                             ;	adc gr_scrngeom+vdp_scrn+1
                             ;	sta tmp_ahi
                             ;	; Dest offset in tmp_alo
                             ;
                             ;	; pixel x coord in to A
                             ;	; We dvide by 48 doing trial subtracts
                             ;	; This leaves Y with a number 0..5
                             ;	; And A has the remainder 0..47
                             ;	; Use these to look up byte column and mask
                             ;	; We don't do more than 5 trial subtracts
                             ;	; plus the table size is much smaller
                             ;	; Comprimise of space vs speed
                             ;	txa
                             ;	ldy #0				; Start at segment 0
                             ;	sec
                             ;gr_point_d48
                             ;	sbc #48
                             ;	iny
                             ;	bcs gr_point_d48				; Keep going until underflo
                             ;
                             ;	dey								; Adjust segment count
                             ;	adc #48							; Get remainder in A
                             ;	tax								; Put remainder in to X (0..47)
                             ;	lda gr_col_seg,y				; Get the start column of s
                             ;	clc
                             ;	adc gr_col_offset,x				; Add segment offset usi
                             ;	tay								; We have the byte column in Y
AS65 Assembler for R6502 [1.42].                                     Page  123
-------------------------------- bank\bank0.s --------------------------------

                             ;	sty tmp_bhi						; Save in tmp, also still in Y
                             ;	stx tmp_blo						; Save remainder 0..47
                             ;	rts
                             
                             ;gr_point_mask
                             ;	db 0x20,0x10,0x08,0x04,0x02,0x01
                             ;	db 0x20,0x10,0x08,0x04,0x02,0x01
                             ;	db 0x20,0x10,0x08,0x04,0x02,0x01
                             ;	db 0x20,0x10,0x08,0x04,0x02,0x01
                             ;	db 0x20,0x10,0x08,0x04,0x02,0x01
                             ;	db 0x20,0x10,0x08,0x04,0x02,0x01
                             ;	db 0x20,0x10,0x08,0x04,0x02,0x01
                             ;	db 0x20,0x10,0x08,0x04,0x02,0x01
                             ;gr_col_offset
                             ;	db 0,0,0,0,0,0
                             ;	db 1,1,1,1,1,1
                             ;	db 2,2,2,2,2,2
                             ;	db 3,3,3,3,3,3
                             ;	db 4,4,4,4,4,4
                             ;	db 5,5,5,5,5,5
                             ;	db 6,6,6,6,6,6
                             ;	db 7,7,7,7,7,7
                             ;gr_col_seg
                             ;	db 0,8,16,24,32
                             
                             	include "monitor/cmd.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  CMD.S
                             ;*	A really simple monitor that needs to be impro
                             ;*	optimised.  Only has these commands;
                             ;*		dxxxx			Dump memory location xxxx
                             ;*						Press enter for more else stop
                             ;*		sxxxx [yy]		Set memory location xxxx with hex
                             ;*						bytes, respond with next location
                             ;*		q				Quit
                             ;*	Now you see why this needs optimising!
                             ;*
                             ;************************************************
                             
0094 =                       cmd_lo					= df_currdat
0095 =                       cmd_hi					= (df_currdat+1)
                             
                             	; ROM code
                             	code  
                             
d2f1 :                       _mod_sz_cmd_s
                             
d2f1 :                       command_line
                             
d2f1 :                       cmd_ready
                             	_println_low msg_ready
                             
                             
d2f8 : 38               [ 2] 	sec							; Set carry flag = echo characters
d2f9 : 2052c4           [ 6] 	jsr io_read_line			; Get a command line
AS65 Assembler for R6502 [1.42].                                     Page  124
-------------------------------- bank\bank0.s --------------------------------

d2fc : a000             [ 2] 	ldy #0
d2fe : b139             [ 5] 	lda (buf_lo),y
d300 : c971             [ 2] 	cmp #'q'
d302 : d001             [ 3] 	bne cmd_check_cmd
d304 : 60               [ 6] 	rts
d305 :                       cmd_check_cmd
d305 : 2017d3           [ 6] 	jsr cmd_parse				; Find command and execute
d308 : b003             [ 3] 	bcs cmd_error				; Carry set = error condition
d30a : 4cf1d2           [ 3] 	jmp cmd_ready
                             
d30d :                       cmd_error
                             	_println_low msg_errmsg
                             
d314 : 4cf1d2           [ 3] 	jmp cmd_ready
                             
                             
                             ;****************************************
                             ;* cmd_parse
                             ;* Parse the command line in the io buffer
                             ;* Regs affected : 
                             ;****************************************
d317 :                       cmd_parse
d317 : c8               [ 2] 	iny						; Ready for next char
                             	
d318 :                       cmd_check_d
d318 : c964             [ 2] 	cmp #'d'				; Check for d
d31a : f030             [ 3] 	beq cmd_dumpmem
d31c :                       cmd_check_s
d31c : c973             [ 2] 	cmp #'s'				; Check for s
d31e : f006             [ 3] 	beq cmd_setmem
                             
d320 :                       cmd_not_found
d320 : a901             [ 2] 	lda #CMD_ERR_NOTFOUND
d322 : 855d             [ 3] 	sta errno
d324 : 38               [ 2] 	sec
d325 : 60               [ 6] 	rts
                             	
                             ;****************************************
                             ;* cmd_setmem
                             ;* Set the memory at address AAAA to byte string
                             ;* Input : buflo, bufhi
                             ;* Output : y = start of first parm byte
                             ;*          x = index to routine pointer
                             ;* Regs affected : A
                             ;****************************************
d326 :                       cmd_setmem
d326 : 20ddd3           [ 6] 	jsr cmd_parse_word
d329 : b01f             [ 3] 	bcs cmd_setmem_err
d32b :                       cmd_setmem_byte
d32b : 20c1d3           [ 6] 	jsr cmd_parse_byte
d32e : b01a             [ 3] 	bcs cmd_setmem_err
d330 : 20b8d3           [ 6] 	jsr cmd_poke				; Poke A in to cmd_lo, hi
d333 : 20acd3           [ 6] 	jsr cmd_incmem
d336 : 20efd3           [ 6] 	jsr cmd_parse_next_parm		; Try and find another 
d339 : 90f0             [ 3] 	bcc cmd_setmem_byte			; Process if found, else f
d33b : a595             [ 3] 	lda cmd_hi
d33d : 2083c1           [ 6] 	jsr utilPrintA
d340 : a594             [ 3] 	lda cmd_lo
d342 : 2083c1           [ 6] 	jsr utilPrintA
d345 : 207bc1           [ 6] 	jsr utilPrintCRLF
d348 : 18               [ 2] 	clc
d349 : 60               [ 6] 	rts
AS65 Assembler for R6502 [1.42].                                     Page  125
-------------------------------- bank\bank0.s --------------------------------

d34a :                       cmd_setmem_err
d34a : 38               [ 2] 	sec
d34b : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* cmd_dumpmem
                             ;* Dump memory at address AAAA
                             ;* Input : buflo, bufhi
                             ;* Output : y = start of first parm byte
                             ;* Regs affected : A
                             ;****************************************
d34c :                       cmd_dumpmem
d34c : 20ddd3           [ 6] 	jsr cmd_parse_word			; Get address to dump
d34f : 9001             [ 3] 	bcc cmd_dumpmem_block
d351 : 60               [ 6] 	rts							; C is set
d352 :                       cmd_dumpmem_block
d352 : a595             [ 3] 	lda cmd_hi					; Show the address
d354 : 2083c1           [ 6] 	jsr utilPrintA
d357 : a594             [ 3] 	lda cmd_lo
d359 : 2083c1           [ 6] 	jsr utilPrintA
d35c : 2073c1           [ 6] 	jsr utilPrintSPC
                             	
d35f : a008             [ 2] 	ldy #8						; 8 Bytes per line
d361 :                       cmd_dumpmem_byte
d361 : 20b3d3           [ 6] 	jsr cmd_peek
d364 : 2083c1           [ 6] 	jsr utilPrintA
d367 : 2073c1           [ 6] 	jsr utilPrintSPC
d36a : 20acd3           [ 6] 	jsr cmd_incmem
d36d : 88               [ 2] 	dey
d36e : d0f1             [ 3] 	bne cmd_dumpmem_byte
d370 :                       cmd_dumpmemASCII
d370 : 38               [ 2] 	sec							; Move pointer back to start
d371 : a594             [ 3] 	lda cmd_lo
d373 : e908             [ 2] 	sbc #8
d375 : 8594             [ 3] 	sta cmd_lo
d377 : a595             [ 3] 	lda cmd_hi
d379 : e900             [ 2] 	sbc #0
d37b : 8595             [ 3] 	sta cmd_hi
                             	
d37d : 2073c1           [ 6] 	jsr utilPrintSPC
d380 : a008             [ 2] 	ldy #8						; 8 Bytes per line
d382 :                       cmd_dumpmem_ascii
d382 : 20b3d3           [ 6] 	jsr cmd_peek
d385 : a22e             [ 2] 	ldx #'.'					; Non-printable char
d387 : c920             [ 2] 	cmp #' '					; A<32 is unprintable
d389 : b001             [ 3] 	bcs cmd_dump_skip_ctrl
d38b : 8a               [ 2] 	txa							; Replace with dot
d38c :                       cmd_dump_skip_ctrl
d38c : c97f             [ 2] 	cmp #UTF_DEL				; >= DEL is unprintable
d38e : 9001             [ 3] 	bcc cmd_dump_skip_del
d390 : 8a               [ 2] 	txa							; Replace with dot
d391 :                       cmd_dump_skip_del	
d391 : 203dc4           [ 6] 	jsr io_put_ch
d394 : 20acd3           [ 6] 	jsr cmd_incmem
d397 : 88               [ 2] 	dey		
d398 : d0e8             [ 3] 	bne cmd_dumpmem_ascii		; Show 8 bytes
d39a : 38               [ 2] 	sec
d39b : 203ac4           [ 6] 	jsr io_get_ch				; Wait for key press
d39e : c90d             [ 2] 	cmp #UTF_CR		
d3a0 : d003             [ 3] 	bne cmd_dumpmemFin			; Any key but enter finishe
                             ;	jsr io_put_ch				; Do new line
AS65 Assembler for R6502 [1.42].                                     Page  126
-------------------------------- bank\bank0.s --------------------------------

d3a2 : 4c52d3           [ 3] 	jmp cmd_dumpmem_block
d3a5 :                       cmd_dumpmemFin
d3a5 : a90d             [ 2] 	lda #UTF_CR
d3a7 : 203dc4           [ 6] 	jsr io_put_ch
d3aa : 18               [ 2] 	clc
d3ab : 60               [ 6] 	rts
                             	
                             	
                             ;****************************************
                             ;* cmd_incmem
                             ;* Increment pointer
                             ;* Input : cmd_lo, cmd_hi
                             ;* Output : cmd_lo, cmd_hi
                             ;* Regs affected : 
                             ;****************************************
d3ac :                       cmd_incmem
                             	_incZPWord cmd_lo
                             
d3b2 : 60               [ 6] 	rts
                             	
                             ;****************************************
                             ;* cmd_peek
                             ;* Read byte
                             ;* Input : cmd_lo, cmd_hi
                             ;* Output : A
                             ;* Regs affected : 
                             ;****************************************
d3b3 :                       cmd_peek
d3b3 : a200             [ 2] 	ldx #0
d3b5 : a194             [ 6] 	lda (cmd_lo,x)
d3b7 : 60               [ 6] 	rts
                             	
                             ;****************************************
                             ;* cmd_poke
                             ;* Read byte
                             ;* Input : cmd_lo, cmd_hi, A
                             ;* Output : A
                             ;* Regs affected : 
                             ;****************************************
d3b8 :                       cmd_poke
d3b8 : 8638             [ 3] 	stx tmp_d
d3ba : a200             [ 2] 	ldx #0
d3bc : 8194             [ 6] 	sta (cmd_lo,x)
d3be : a638             [ 3] 	ldx tmp_d
d3c0 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* cmd_parse_byte
                             ;* Find 2 char hex byte
                             ;* Input : buflo, bufhi, y offset
                             ;* Output : y = char after hex byte, A = value
                             ;* Regs affected : A,Y
                             ;****************************************
d3c1 :                       cmd_parse_byte
d3c1 : 20efd3           [ 6] 	jsr cmd_parse_next_parm	; Find the next paramete
d3c4 : b015             [ 3] 	bcs cmd_parse_byte_err
d3c6 : b139             [ 5] 	lda (buf_lo),y			; Get hi nibble of high byte
d3c8 : f011             [ 3] 	beq cmd_parse_byte_err	; If no char then error w
d3ca : 48               [ 3] 	pha						; Save on stack
d3cb : c8               [ 2] 	iny
d3cc : b139             [ 5] 	lda (buf_lo),y			; Get lo nibble of high byte
d3ce : f00a             [ 3] 	beq cmd_parse_byte_errp	; If no char then error 
AS65 Assembler for R6502 [1.42].                                     Page  127
-------------------------------- bank\bank0.s --------------------------------

d3d0 : aa               [ 2] 	tax						; Lo nibble goes to X
d3d1 : 68               [ 4] 	pla						; Restore hi nibble
d3d2 : 20b4c1           [ 6] 	jsr str_x_to_a			; Convert from hex to A
d3d5 : b004             [ 3] 	bcs cmd_parse_byte_err	; If error then stop
d3d7 : c8               [ 2] 	iny						; Point to next char
d3d8 : 18               [ 2] 	clc
d3d9 : 60               [ 6] 	rts						; A contains the byte
d3da :                       cmd_parse_byte_errp
d3da : 68               [ 4] 	pla
d3db :                       cmd_parse_byte_err
d3db : aa               [ 2] 	tax
d3dc : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* cmd_parse_word
                             ;* Find 4 char hex word
                             ;* Input : buflo, bufhi, y offset
                             ;* Output : y = char after hex byte, A = hi, X = 
                             ;* Regs affected : A,X,Y
                             ;****************************************
d3dd :                       cmd_parse_word
d3dd : 20c1d3           [ 6] 	jsr cmd_parse_byte			; Get hi byte of word
d3e0 : b00b             [ 3] 	bcs cmd_word_err
d3e2 : 8595             [ 3] 	sta cmd_hi					; Save hi byte of word
d3e4 : 20c1d3           [ 6] 	jsr cmd_parse_byte			; Get lo byte of word
d3e7 : b004             [ 3] 	bcs cmd_word_err
d3e9 : 8594             [ 3] 	sta cmd_lo
d3eb : 18               [ 2] 	clc
d3ec : 60               [ 6] 	rts
d3ed :                       cmd_word_err
d3ed : 38               [ 2] 	sec
d3ee : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* cmd_parse_next_parm
                             ;* Find next non-white space
                             ;* Input : buflo, bufhi, y offset
                             ;* Output : y = start of first parm byte
                             ;* Regs affected : A
                             ;****************************************
d3ef :                       cmd_parse_next_parm
d3ef : 88               [ 2] 	dey
d3f0 :                       cmd_find_parm
d3f0 : c8               [ 2] 	iny
d3f1 : b139             [ 5] 	lda (buf_lo),y
d3f3 : f005             [ 3] 	beq cmd_next_parm_err	; If z then no parms, fin 
d3f5 : c921             [ 2] 	cmp #' '+1				; Ignore space or less
d3f7 : f0f7             [ 3] 	beq cmd_find_parm
d3f9 : 18               [ 2] 	clc						; else ok, C is cleared
d3fa :                       cmd_next_parm_err
d3fa : 60               [ 6] 	rts
                             
                             	
d3fb : 3e00                  msg_ready				db ">\x0"
d3fd : 3f0d00                msg_errmsg				db "?\xd\x0"
d400 :                       _mod_sz_cmd_e
                             
                             	include "sound/sound.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
AS65 Assembler for R6502 [1.42].                                     Page  128
-------------------------------- bank\bank0.s --------------------------------

                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  SOUND.S
                             ;*  Sound driver module - routines to access the 
                             ;*  This sound chip was found in a number of popu
                             ;*  in the early to mid 80s, including my first c
                             ;*  the Oric-1, as well as the MSX range.
                             ;*
                             ;************************************************
                             
                             
                             	; ROM code
                             	code
                             
d400 :                       mod_sz_sound_s
                             
                             
                             ;****************************************
                             ;* snd_get_note
                             ;* Get a note from the music scale table
                             ;* Input : Octave in X, note in Y
                             ;*         Octave between 1 and 6
                             ;* Output : A,X = Value hi,lo
                             ;* Regs affected : X
                             ;****************************************
d400 :                       snd_get_note
d400 : 98               [ 2] 	tya
d401 : 0a               [ 2] 	asl a
d402 : a8               [ 2] 	tay
                             	; Get note for octave 1
d403 : b933d4           [ 4] 	lda snd_music_tab,y
d406 : 8532             [ 3] 	sta tmp_alo
d408 : b934d4           [ 4] 	lda snd_music_tab+1,y
                             	
d40b :                       snd_get_note_oct
d40b : ca               [ 2] 	dex
d40c : f006             [ 3] 	beq snd_note_done
                             	; Divide freq by 2 each octave
d40e : 4a               [ 2] 	lsr a
d40f : 6632             [ 5] 	ror tmp_alo
d411 : 4c0bd4           [ 3] 	jmp snd_get_note_oct
d414 :                       snd_note_done
d414 : a632             [ 3] 	ldx tmp_alo
d416 : 60               [ 6] 	rts
                             
                             	
                             ;****************************************
                             ;* init_snd
                             ;* Initialise sound - after cia 1 has been initia
                             ;* Input : None
                             ;* Output : None
                             ;* Regs affected : All
                             ;****************************************
d417 :                       init_snd
d417 : a20f             [ 2] 	ldx #15
d419 :                       init_snd_regs
d419 : bd23d4           [ 4] 	lda snd_init_tab,x
d41c : 206ec0           [ 6] 	jsr snd_set				; Set X to A
d41f : ca               [ 2] 	dex
d420 : 10f7             [ 3] 	bpl init_snd_regs		; 16 regs
AS65 Assembler for R6502 [1.42].                                     Page  129
-------------------------------- bank\bank0.s --------------------------------

                             	
d422 : 60               [ 6] 	rts						; return from sub
                             
                             	; Register array initialisation values
                             	; Assuming 1.34Mhz input clock
d423 :                       snd_init_tab
d423 : 40                    	db 0x40				; R0 = Channel A Tone Low
d424 : 00                    	db 0x00				; R1 = Channel A Tone High
d425 : 00                    	db 0x00				; R2 = Channel B Tone Low
d426 : 01                    	db 0x01				; R3 = Channel B Tone High
d427 : 00                    	db 0x00				; R4 = Channel C Tone Low
d428 : 02                    	db 0x02				; R5 = Channel C Tone High
d429 : 00                    	db 0x00				; R6 = Noise period
d42a : 7e                    	db 0b01111110		; R7 = Control : IOB input, IOA o
d42b : 1f                    	db 0x1f				; R8 = Channel A Vol
d42c : 1f                    	db 0x1f				; R9 = Channel B Vol
d42d : 1f                    	db 0x1f				; R10 = Channel C Vol
d42e : 00                    	db 0x00				; R11 = Envelope Period Low
d42f : 03                    	db 0x03				; R12 = Envelope Period High
d430 : 00                    	db 0b00000000		; R13 = Envelope Shape : 0000
d431 : ff                    	db 0xff				; R14 = IO Port A - KB lines disabled
d432 : 00                    	db 0x00				; R15 = IO Port B ; Initialise to 0 (
                             
d433 :                       snd_music_tab
d433 : f20b                  	dw 3058				; C		0 (Octave 1 3058Hz)
d435 : 460b                  	dw 2886				; C#	1
d437 : a40a                  	dw 2724				; D		2
d439 : 0b0a                  	dw 2571				; D#	3
d43b : 7b09                  	dw 2427				; E		4
d43d : f308                  	dw 2291				; F		5
d43f : 7208                  	dw 2162				; F#	6
d441 : f907                  	dw 2041				; G		7
d443 : 8607                  	dw 1926				; G#	8
d445 : 1a07                  	dw 1818				; A		9
d447 : b406                  	dw 1716				; A#	10
d449 : 5406                  	dw 1620				; B		11
d44b : 0000                  	dw 0				; Null  12
                             
d44d :                       mod_sz_sound_e
                             
d44d :                       mod_sz_bios_e
d44d :                       mod_sz_language_s
                             	include "utils/intmath.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  INTMATH.S
                             ;*  Core module for integer maths supported by df
                             ;*  Now supports signed integers in 2s complement
                             ;*  Uses the intmath registers: num_a, num_b, num
                             ;*  Most inputs are through num_a and num_b, with
                             ;*  num_a
                             ;*  Operations: add, sub, swap, 8 bit mult, mult,
                             ;*
                             ;************************************************
                             
                             	; ROM code
AS65 Assembler for R6502 [1.42].                                     Page  130
-------------------------------- bank\bank0.s --------------------------------

                             	code
                             
                             ;****************************************
                             ;* Add : A + B result in A
                             ;****************************************
                             ;int_add
                             ;	clc
                             ;	lda num_a
                             ;	adc num_b
                             ;	sta num_a
                             ;	lda num_a+1
                             ;	adc num_b+1
                             ;	sta num_a+1
                             ;	rts
                             	
                             ;****************************************
                             ;* Sub : A - B result in A
                             ;****************************************
                             ;int_sub
                             ;	sec
                             ;	lda num_a
                             ;	sbc num_b
                             ;	sta num_a
                             ;	lda num_a+1
                             ;	sbc num_b+1
                             ;	sta num_a+1
                             ;	rts
                             	
                             ;****************************************
                             ;* Swp : A <-> B 
                             ;****************************************
                             ;int_swp
                             ;	lda num_a
                             ;	ldx num_b
                             ;	sta num_b
                             ;	stx num_a
                             ;	lda num_a+1
                             ;	ldx num_b+1
                             ;	sta num_b+1
                             ;	stx num_a+1
                             ;	rts
                             	
                             ;****************************************
                             ;* Mult : A * B result in A
                             ;* B assumed to be an 8 bit quantity 
                             ;****************************************
d44d :                       int_fast_mult
                             	_cpyZPWord num_a,num_tmp
                             
d455 : a900             [ 2] 	lda #0
d457 : 853d             [ 3] 	sta num_a
d459 : 853e             [ 3] 	sta num_a+1
d45b : a008             [ 2] 	ldy #8
d45d :                       int_fast_mult_cycle
d45d : 4641             [ 5] 	lsr num_b
d45f : 900d             [ 3] 	bcc int_fast_mult_next
d461 : 18               [ 2] 	clc
d462 : a53d             [ 3] 	lda num_a
d464 : 6549             [ 3] 	adc num_tmp
d466 : 853d             [ 3] 	sta num_a
d468 : a53e             [ 3] 	lda num_a+1
d46a : 654a             [ 3] 	adc num_tmp+1
AS65 Assembler for R6502 [1.42].                                     Page  131
-------------------------------- bank\bank0.s --------------------------------

d46c : 853e             [ 3] 	sta num_a+1
d46e :                       int_fast_mult_next
d46e : 0649             [ 5] 	asl num_tmp
d470 : 264a             [ 5] 	rol num_tmp+1
d472 : 88               [ 2] 	dey
d473 : d0e8             [ 3] 	bne int_fast_mult_cycle
d475 : 60               [ 6] 	rts
                             	
                             ;****************************************
                             ;* Mult : A * B result in A
                             ;****************************************
d476 :                       int_mult
                             	_cpyZPWord num_a,num_tmp
                             
d47e : a900             [ 2] 	lda #0
d480 : 853d             [ 3] 	sta num_a
d482 : 853e             [ 3] 	sta num_a+1
d484 : a010             [ 2] 	ldy #16
d486 :                       int_mult_cycle
d486 : 4642             [ 5] 	lsr num_b+1
d488 : 6641             [ 5] 	ror num_b
d48a : 900d             [ 3] 	bcc int_mult_next
d48c : 18               [ 2] 	clc
d48d : a53d             [ 3] 	lda num_a
d48f : 6549             [ 3] 	adc num_tmp
d491 : 853d             [ 3] 	sta num_a
d493 : a53e             [ 3] 	lda num_a+1
d495 : 654a             [ 3] 	adc num_tmp+1
d497 : 853e             [ 3] 	sta num_a+1
d499 :                       int_mult_next
d499 : 0649             [ 5] 	asl num_tmp
d49b : 264a             [ 5] 	rol num_tmp+1
d49d : 88               [ 2] 	dey
d49e : d0e6             [ 3] 	bne int_mult_cycle
d4a0 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Div : A / B result in A, remainder X
                             ;****************************************
d4a1 :                       int_div
                             	; adjust signs
d4a1 : a900             [ 2] 	lda #0
d4a3 : 8549             [ 3] 	sta num_tmp				; Assume all +ve
d4a5 : a53e             [ 3] 	lda num_a+1				; Check A hi
d4a7 : 100f             [ 3] 	bpl int_div_skip_negA
d4a9 : e649             [ 5] 	inc num_tmp				; Record sign flip
d4ab : 38               [ 2] 	sec						; 2's complement A
d4ac : a900             [ 2] 	lda #0					; by 0-A
d4ae : e53d             [ 3] 	sbc num_a				; A is now +ve
d4b0 : 853d             [ 3] 	sta num_a
d4b2 : a900             [ 2] 	lda #0
d4b4 : e53e             [ 3] 	sbc num_a+1
d4b6 : 853e             [ 3] 	sta num_a+1	
d4b8 :                       int_div_skip_negA
d4b8 : a542             [ 3] 	lda num_b+1				; Check B hi
d4ba : 100f             [ 3] 	bpl int_div_skip_negB
d4bc : e649             [ 5] 	inc num_tmp				; Record sign flip
d4be : 38               [ 2] 	sec						; 2's complement B
d4bf : a900             [ 2] 	lda #0					; by 0-B
d4c1 : e541             [ 3] 	sbc num_b				; B is now +ve
d4c3 : 8541             [ 3] 	sta num_b
d4c5 : a900             [ 2] 	lda #0
AS65 Assembler for R6502 [1.42].                                     Page  132
-------------------------------- bank\bank0.s --------------------------------

d4c7 : e542             [ 3] 	sbc num_b+1
d4c9 : 8542             [ 3] 	sta num_b+1
d4cb :                       int_div_skip_negB			; num_tmp bit 0=1 for result 
                             	; x is the remainder
d4cb : a900             [ 2] 	lda #0
d4cd : 8545             [ 3] 	sta num_x
d4cf : 8546             [ 3] 	sta num_x+1
                             	; 16 bit division
d4d1 : a010             [ 2] 	ldy #16
d4d3 :                       int_div_cycle
                             	; shift a left 1 bit
d4d3 : 063d             [ 5] 	asl num_a
d4d5 : 263e             [ 5] 	rol num_a+1
                             	; shift in to remainder
d4d7 : 2645             [ 5] 	rol num_x
d4d9 : 2646             [ 5] 	rol num_x+1
                             	; try and subtract b from remainder
d4db : 38               [ 2] 	sec
d4dc : a545             [ 3] 	lda num_x
d4de : e541             [ 3] 	sbc num_b
d4e0 : aa               [ 2] 	tax
d4e1 : a546             [ 3] 	lda num_x+1
d4e3 : e542             [ 3] 	sbc num_b+1
d4e5 : 9006             [ 3] 	bcc int_div_skip
                             	; so b did fit in to remainder, save it
d4e7 : 8645             [ 3] 	stx num_x
d4e9 : 8546             [ 3] 	sta num_x+1
d4eb : e63d             [ 5] 	inc num_a
d4ed :                       int_div_skip
                             	; carry on for 16 bits
d4ed : 88               [ 2] 	dey
d4ee : d0e3             [ 3] 	bne int_div_cycle
                             	; result in a, remainder in x
                             	; check num_tmp bit 0
d4f0 : a549             [ 3] 	lda num_tmp
d4f2 : 2901             [ 2] 	and #1
d4f4 : f00d             [ 4] 	beq int_div_noflip
d4f6 : 38               [ 2] 	sec						; 2's complement A
d4f7 : a900             [ 2] 	lda #0					; by 0-A
d4f9 : e53d             [ 3] 	sbc num_a				; A is now +ve
d4fb : 853d             [ 3] 	sta num_a
d4fd : a900             [ 2] 	lda #0
d4ff : e53e             [ 3] 	sbc num_a+1
d501 : 853e             [ 3] 	sta num_a+1	
d503 :                       int_div_noflip
d503 : 60               [ 6] 	rts
                             	
                             
                             	include "dflat/dflat.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  DFLAT.S
                             ;*  This is the main controller code file for dfl
                             ;*  This file includes all the required dflat sou
                             ;*  needed:
                             ;*  - error.s is the error handling module
AS65 Assembler for R6502 [1.42].                                     Page  133
-------------------------------- bank\bank0.s --------------------------------

                             ;*  - var.s is the variable handling module
                             ;*  - tokenise.s is the tokenisation module
                             ;*  - progedit.s is the program editing module
                             ;*  - runtime.s is the runtime module
                             ;*  - stack.s is the stack handling module
                             ;*  The above modules include further source file
                             ;*  needed.
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code
                             
d504 :                       mod_sz_dflat_s
                             
                             ;	include "dflat/error.s"  ** included in the mai
                             	include "dflat/var.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  VAR.S
                             ;*  This module handles all the variable manageme
                             ;*  When a new variable is detected during tokeni
                             ;*  is added to the variable tables.  Any subsequ
                             ;*  that variable is tokenised as an index in to 
                             ;*  table.  There are two variable tables:
                             ;*  Variable name table (VNT) keeps track of vari
                             ;*  Variable value table (VVT) maintains variable
                             ;*  including type, dimension (if array) and of c
                             ;*  actual values.  For an array, the value is a 
                             ;*  memory grabbed using the 'malloc' function (s
                             ;*  This approach to variable managemet is direct
                             ;*  Atari 8 bit.  The disadvantage is that during
                             ;*  session you may end up having a much larger v
                             ;*  table than you need.  Why?  Well because say 
                             ;*  a as a new variable, but then later change it
                             ;*  In this case a remains in the variable tables
                             ;*  only ever adds to the table!  However it is e
                             ;*  solved - when you save and then reload from n
                             ;*  program, the variable table is built up as th
                             ;*  is loaded.
                             ;*  The VNT grows DOWN from the top of free memor
                             ;*  the VVT growing UP from just below the VNT.
                             ;*	This means that the VVT for a variable will al
                             ;*	found in a fixed place in the VVT table and me
                             ;*	For the VNT (names) it grows from vvstart at l
                             ;*
                             ;************************************************
                             
                             
                             	; ROM code
                             	code  
                             
d504 :                       mod_sz_var_s
                             
                             
                             ;****************************************
AS65 Assembler for R6502 [1.42].                                     Page  134
-------------------------------- bank\bank0.s --------------------------------

                             ;* Find a variable
                             ;* CC if found, A has index
                             ;****************************************
d504 :                       df_var_find
                             	; start at the beginning of the vnt table
                             	; vars are stored in reverse order
                             	_cpyZPWord df_vntstrt,df_tmpptrb
                             
                             	; start at end of VVT
                             	_cpyZPWord df_vvtend,df_tmpptra
                             
d514 :                       df_var_match_vnt
                             	; If reached top of VVT then not found
d514 : a5a1             [ 3] 	lda df_tmpptra
d516 : c56d             [ 3] 	cmp df_vvtstrt
d518 : d006             [ 3] 	bne df_var_match_vnt_do
d51a : a5a2             [ 3] 	lda df_tmpptra+1
d51c : c56e             [ 3] 	cmp df_vvtstrt+1
d51e : f042             [ 3] 	beq df_var_find_no_vnt
d520 :                       df_var_match_vnt_do
                             	; match each char in buffer with vnt
d520 : a47c             [ 3] 	ldy df_linoff
d522 : a200             [ 2] 	ldx #0
d524 :                       df_var_match_vnt_sym
d524 : b90004           [ 4] 	lda df_linbuff,y
d527 : c1a3             [ 6] 	cmp (df_tmpptrb,x)
d529 : d017             [ 3] 	bne df_var_vnt_sym_nomatch
                             	; if single char match then increment
                             	; source and search
d52b : c8               [ 2] 	iny
                             	_incZPWord df_tmpptrb
                             
                             	; if more chars in vnt entry then continue
d532 : a1a3             [ 6] 	lda (df_tmpptrb,x)
d534 : d0ee             [ 3] 	bne df_var_match_vnt_sym
                             	; if no more chars in vnt entry but
                             	; but chars in buffer then try next vnt
d536 : b90004           [ 4] 	lda df_linbuff,y
                             	; check for valid alpha-numeric
d539 : 20e5d6           [ 6] 	jsr df_tk_isalphanum
                             	; if there is a valid alpha-num then no match
d53c : b004             [ 3] 	bcs df_var_vnt_sym_nomatch
                             	; else check type
d53e :                       df_var_check_type
                             	; if not alpha-num then check for type
                             	; string or int postfix didn't match with VNT
                             ;	cmp #'%'
                             ;	beq df_var_vnt_sym_nomatch
d53e : c924             [ 2] 	cmp #'$'
                             	; ok, all good got a match
d540 : d025             [ 3] 	bne df_var_find_true
d542 :                       df_var_vnt_sym_nomatch
                             	; find the zero terminator
d542 : a1a3             [ 6] 	lda (df_tmpptrb,x)
d544 : f009             [ 3] 	beq	df_var_vnt_entry_end
                             	_incZPWord df_tmpptrb
                             
d54c : 4c42d5           [ 3] 	jmp df_var_vnt_sym_nomatch
d54f :                       df_var_vnt_entry_end
                             	; skip over zero terminator
                             	_incZPWord df_tmpptrb
                             
AS65 Assembler for R6502 [1.42].                                     Page  135
-------------------------------- bank\bank0.s --------------------------------

                             	; update vvt address pointer
d555 : 18               [ 2] 	clc
d556 : a5a1             [ 3] 	lda df_tmpptra
d558 : 6908             [ 2] 	adc #8
d55a : 85a1             [ 3] 	sta df_tmpptra
                             	_bcc 2
                             
d55e : e6a2             [ 5] 	inc df_tmpptra+1
d560 : d0b2             [ 3] 	bne df_var_match_vnt		; Always - high byte is no
                             
                             	; if at end of vnt then no matches found
d562 :                       df_var_find_no_vnt
d562 : a900             [ 2] 	lda #0
d564 : aa               [ 2] 	tax
d565 : 38               [ 2] 	sec
d566 : 60               [ 6] 	rts
                             
d567 :                       df_var_find_true
                             	; Get slot address into x,a
d567 : a6a1             [ 3] 	ldx df_tmpptra
d569 : a5a2             [ 3] 	lda df_tmpptra+1
                             	
                             	; Consume characters found in source
d56b : 847c             [ 3] 	sty df_linoff
d56d : 18               [ 2] 	clc
d56e : 60               [ 6] 	rts
                             
                             	
                             ;****************************************
                             ;* Insert a variable name in to vnt
                             ;* X = number of bytes to make room
                             ;* Space allocated is;
                             ;*	8 bytes for the new VVT entry
                             ;*  X bytes for the new VNT entry
                             ;* df_vntstrt is new var name entry
                             ;* df_vvtend is new vvt entry
                             ;****************************************
d56f :                       df_var_insert_space
                             	; *** REMEMBER TO DO A SPACE CHECK EVENTUALLY! *
                             
                             	; adjust down the VNT start by VVT size (for ext
                             	; put it in tmpptrb
d56f : 38               [ 2] 	sec
d570 : a569             [ 3] 	lda df_vntstrt
d572 : e908             [ 2] 	sbc #DFVVT_SZ
d574 : 8569             [ 3] 	sta df_vntstrt
d576 : a56a             [ 3] 	lda df_vntstrt+1
d578 : e900             [ 2] 	sbc #0
d57a : 856a             [ 3] 	sta df_vntstrt+1
                             	
                             	; adjust VNT end by VVT size (for extra VVT entr
                             	; and put it in tmpptrc
d57c : 38               [ 2] 	sec
d57d : a56b             [ 3] 	lda df_vntend
d57f : e908             [ 2] 	sbc #DFVVT_SZ
d581 : 856b             [ 3] 	sta df_vntend
d583 : a56c             [ 3] 	lda df_vntend+1
d585 : e900             [ 2] 	sbc #0
d587 : 856c             [ 3] 	sta df_vntend+1
                             
                             	; Set copy point to new start of VNT
                             	_cpyZPWord df_vntstrt,df_tmpptra
AS65 Assembler for R6502 [1.42].                                     Page  136
-------------------------------- bank\bank0.s --------------------------------

                             
                             
                             	; Now move all bytes from old VNT (higher up) to
d591 :                       df_var_move_byte
                             	; When pointer = vntend then done
d591 : a5a1             [ 3] 	lda df_tmpptra
d593 : c56b             [ 3] 	cmp df_vntend
d595 : d006             [ 3] 	bne df_var_move_byte_do
d597 : a5a2             [ 3] 	lda df_tmpptra+1
d599 : c56c             [ 3] 	cmp df_vntend+1
d59b : f011             [ 3] 	beq df_var_move_byte_fin
d59d :                       df_var_move_byte_do
                             	; First the source byte VVT size higher in memor
d59d : a008             [ 2] 	ldy #DFVVT_SZ
d59f : b1a1             [ 5] 	lda (df_tmpptra),y
                             	; And copy to new position lower in memory
d5a1 : a000             [ 2] 	ldy #0
d5a3 : 91a1             [ 5] 	sta (df_tmpptra),y
                             	; Increment memory pointer
                             	_incZPWord df_tmpptra
                             
d5ab : 4c91d5           [ 3] 	jmp df_var_move_byte		; Always as C is not touch
d5ae :                       df_var_move_byte_fin
                             	
                             	; Now subtract X bytes from VNT start to accommo
d5ae : 8638             [ 3] 	stx tmp_d
d5b0 : 38               [ 2] 	sec
d5b1 : a569             [ 3] 	lda df_vntstrt
d5b3 : e538             [ 3] 	sbc tmp_d
d5b5 : 8569             [ 3] 	sta df_vntstrt
d5b7 : a56a             [ 3] 	lda df_vntstrt+1
d5b9 : e900             [ 2] 	sbc #0
d5bb : 856a             [ 3] 	sta df_vntstrt+1
                             
                             	; VVT end is the same as VNT end
                             	_cpyZPWord df_vntend,df_vvtend
                             
                             
                             	; Copy done increment variable count
d5c5 : e671             [ 5] 	inc df_varcnt
d5c7 : 18               [ 2] 	clc
d5c8 : 60               [ 6] 	rts
                             	
                             	
                             ;****************************************
                             ;* Analyse variable name
                             ;* Return type in A
                             ;* NOT C = It is a variable
                             ;* C = It is not a variable
                             ;* X = Length including pre-fixes
                             ;* Y = Offset to next char after var name
                             ;****************************************
d5c9 :                       df_var_analyse
                             	; Default type is INT
d5c9 : a901             [ 2] 	lda #DFVVT_INT
d5cb : 85a1             [ 3] 	sta df_tmpptra
                             	
                             	; start at the current buffer position
d5cd : a47c             [ 3] 	ldy df_linoff
                             	
                             	; check for PROC prefix
d5cf : b90004           [ 4] 	lda df_linbuff,y
AS65 Assembler for R6502 [1.42].                                     Page  137
-------------------------------- bank\bank0.s --------------------------------

d5d2 : c95f             [ 2] 	cmp #'_'
                             	; if it is not proc then get the name
d5d4 : d005             [ 3] 	bne df_var_not_proc
                             	; else set type to PROC
d5d6 : a940             [ 2] 	lda #DFVVT_PROC
d5d8 : 85a1             [ 3] 	sta df_tmpptra
                             	; skip over prefix
d5da : c8               [ 2] 	iny
d5db :                       df_var_not_proc
                             	; found the actual number of alpha nums
d5db : a2ff             [ 2] 	ldx #0xff
                             	; go back on pos on index as loop always does in
d5dd : 88               [ 2] 	dey
d5de :                       df_var_type_countlen
                             	; count alpha nums
d5de : c8               [ 2] 	iny
d5df : e8               [ 2] 	inx
d5e0 : b90004           [ 4] 	lda df_linbuff,y
                             	; first char has to be alpha, rest can be alpha-
d5e3 : e000             [ 2] 	cpx #0
d5e5 : d007             [ 3] 	bne df_var_type_countlen_alphanum
d5e7 : 20d8d6           [ 6] 	jsr df_tk_isalpha
d5ea : b0f2             [ 3] 	bcs df_var_type_countlen
d5ec : 9005             [ 3] 	bcc df_var_type_countlen_done
d5ee :                       df_var_type_countlen_alphanum
d5ee : 20e5d6           [ 6] 	jsr df_tk_isalphanum
d5f1 : b0eb             [ 3] 	bcs df_var_type_countlen
d5f3 :                       df_var_type_countlen_done
d5f3 : e000             [ 2] 	cpx #0
d5f5 : d00a             [ 4] 	bne df_var_analyse_chk_post
                             	; if zero alphanums error but not fatal
d5f7 :                       df_var_analyse_err
                             	; If already prefix of PROC then fatal error
d5f7 : a5a1             [ 3] 	lda df_tmpptra
d5f9 : c940             [ 2] 	cmp #DFVVT_PROC
d5fb : f002             [ 3] 	beq df_var_analyse_fatal_err
d5fd : 38               [ 2] 	sec
d5fe : 60               [ 6] 	rts
d5ff :                       df_var_analyse_fatal_err
                             	SWBRK DFERR_SYNTAX
                             
d601 :                       df_var_analyse_chk_post
                             	; first see if the char is $
                             	; but cannot already have PROC prefix
                             ;	cmp #'%'
                             ;	bne df_var_analyse_chk_dollar
                             ;	ldx df_tmpptra
                             ;	cpx #DFVVT_PROC
                             ;	beq df_var_analyse_fatal_err
                             	; Set to INT type although it is the default alr
                             ;	lda #DFVVT_INT
                             ;	sta df_tmpptra
                             	; advance the buffer index
                             ;	iny
                             ;	bne df_var_analyse_chk_arry
d601 :                       df_var_analyse_chk_dollar
                             	; now see if the char is $
                             	; but cannot already have PROC prefix
d601 : c924             [ 2] 	cmp #'$'
d603 : d00b             [ 3] 	bne df_var_analyse_chk_arry
d605 : a6a1             [ 3] 	ldx df_tmpptra
d607 : e040             [ 2] 	cpx #DFVVT_PROC
AS65 Assembler for R6502 [1.42].                                     Page  138
-------------------------------- bank\bank0.s --------------------------------

d609 : f0f4             [ 4] 	beq df_var_analyse_fatal_err
                             	; Set to STRING type
d60b : a904             [ 2] 	lda #DFVVT_STR
d60d : 85a1             [ 3] 	sta df_tmpptra
                             	; advance the buffer index
d60f : c8               [ 2] 	iny
d610 :                       df_var_analyse_chk_arry
                             	; Check for array type vs PROC
d610 : b90004           [ 4] 	lda df_linbuff,y
d613 : c95b             [ 2] 	cmp #'['
d615 : d00a             [ 3] 	bne df_var_not_arry
                             	; array and proc type not compatible
d617 : a5a1             [ 3] 	lda df_tmpptra
d619 : c940             [ 2] 	cmp #DFVVT_PROC
d61b : f0e2             [ 4] 	beq df_var_analyse_fatal_err
d61d : 0980             [ 2] 	ora #DFVVT_ARRY
d61f : 85a1             [ 3] 	sta df_tmpptra
d621 :                       df_var_not_arry
                             	; Ok got everything
                             	; calculate length from y
                             	; y is next char after var name
d621 : 98               [ 2] 	tya
d622 : 38               [ 2] 	sec
d623 : e57c             [ 3] 	sbc df_linoff			; where we started
                             	; put len in X
d625 : aa               [ 2] 	tax
                             	; put type in A
d626 : a5a1             [ 3] 	lda df_tmpptra
d628 : 18               [ 2] 	clc
d629 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Find or create a variable
                             ;* If found then type needs to match mask
                             ;* Not a fatal error because could be part
                             ;* of a trial of different parsing options
                             ;****************************************
d62a :                       df_var_findcreate
                             	; save mask
d62a : 48               [ 3] 	pha
d62b : 2004d5           [ 6] 	jsr df_var_find
d62e : b013             [ 3] 	bcs df_var_findcreate_create
                             	; restore mask to check for 0 then push
d630 : 68               [ 4] 	pla
d631 : 48               [ 3] 	pha
                             	; don't check mask if zero
d632 : f008             [ 3] 	beq df_var_findcreate_found
                             	; restore mask
d634 : 68               [ 4] 	pla
d635 : a000             [ 2] 	ldy #DFVVT_TYPE
d637 : 31a1             [ 5] 	and (df_tmpptra),y
                             	; but if mask is non zero then this must be non 
d639 : f019             [ 3] 	beq df_var_findcreate_err
d63b : 48               [ 3] 	pha		; Dummy push to match the pla
d63c :                       df_var_findcreate_found
                             	; discard mask
d63c : 68               [ 4] 	pla	
                             	; put slot address in x,a
d63d : a6a1             [ 3] 	ldx df_tmpptra
d63f : a5a2             [ 3] 	lda df_tmpptra+1
d641 : 18               [ 2] 	clc
d642 : 60               [ 6] 	rts
AS65 Assembler for R6502 [1.42].                                     Page  139
-------------------------------- bank\bank0.s --------------------------------

                             	
                             	;* If no existing variable found, add one to VNT
d643 :                       df_var_findcreate_create
                             	; find type (A) and length (X)
d643 : 20c9d5           [ 6] 	jsr df_var_analyse
                             	; keep A temporarily
d646 : 85a1             [ 3] 	sta df_tmpptra
                             	; if not a variable then return with C=1
d648 : b009             [ 3] 	bcs df_var_findcreate_errp
                             	; check if mask needs to be applied
d64a : 68               [ 4] 	pla
d64b : f009             [ 3] 	beq df_var_analyse_ok
                             	; else mask and check
d64d : 25a1             [ 3] 	and df_tmpptra
                             	; mask match is ok
d64f : d005             [ 3] 	bne df_var_analyse_ok
                             	; else return not found
d651 : f001             [ 3] 	beq df_var_findcreate_err
d653 :                       df_var_findcreate_errp
d653 : 68               [ 4] 	pla
d654 :                       df_var_findcreate_err
d654 : 38               [ 2] 	sec
d655 : 60               [ 6] 	rts
                             
d656 :                       df_var_analyse_ok
                             	; extra space for zero terminator
d656 : e8               [ 2] 	inx
                             	; save data in reverse order to when needed
                             	; by the initialise section x,a (var name sz, ty
                             	; insert space of X bytes
d657 : a5a1             [ 3] 	lda df_tmpptra
d659 : 48               [ 3] 	pha
d65a : 8a               [ 2] 	txa
d65b : 48               [ 3] 	pha
                             	
d65c : 206fd5           [ 6] 	jsr df_var_insert_space
d65f : 9002             [ 3] 	bcc df_var_initialise_var
                             	; error inserting space
                             	SWBRK DFERR_OK
                             
                             	
d663 :                       df_var_initialise_var
d663 : 68               [ 4] 	pla
d664 : 85a5             [ 3] 	sta df_tmpptrc				; var name size + 1
                             
d666 : 68               [ 4] 	pla							; type
d667 : a000             [ 2] 	ldy #DFVVT_TYPE
d669 : 916f             [ 5] 	sta (df_vvtend),y			; put type in vvt slot
d66b : a900             [ 2] 	lda #0						; zero the rest
d66d : a007             [ 2] 	ldy #7
d66f :                       df_var_zero_vnt
d66f : 916f             [ 5] 	sta (df_vvtend),y
d671 : 88               [ 2] 	dey
d672 : d0fb             [ 3] 	bne df_var_zero_vnt			; Don't zero out the type
                             
d674 : c6a5             [ 5] 	dec df_tmpptrc				; 1 less to copy variable name
                             
d676 : a67c             [ 3] 	ldx df_linoff				; Start at var name beginning, 
                             	; copy variable name to vnt slot
d678 :                       df_var_findcreate_copy
d678 : bd0004           [ 4] 	lda df_linbuff,x
d67b : 9169             [ 5] 	sta (df_vntstrt),y
AS65 Assembler for R6502 [1.42].                                     Page  140
-------------------------------- bank\bank0.s --------------------------------

d67d : e8               [ 2] 	inx
d67e : c8               [ 2] 	iny
d67f : c6a5             [ 5] 	dec df_tmpptrc
d681 : d0f5             [ 3] 	bne df_var_findcreate_copy
                             	; put in zero terminator
d683 : a900             [ 2] 	lda #0
d685 : 9169             [ 5] 	sta (df_vntstrt),y
                             
d687 : 867c             [ 3] 	stx df_linoff				; Update line pointer
                             
                             	; Return address of slot in X,A
d689 : a66f             [ 3] 	ldx df_vvtend
d68b : a570             [ 3] 	lda df_vvtend+1
                             	
d68d : 18               [ 2] 	clc
d68e : 60               [ 6] 	rts
                             	
d68f :                       mod_sz_var_e
                             
                             	include "dflat/tokenise.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  TOKENISE.S
                             ;*  Controlling module for tokenisation.  Basical
                             ;*  module is given a raw input buffer, which it 
                             ;*  attempt to tokenise fully.  Any syntax errors
                             ;*  thrown at the first point of detection.  If a
                             ;*  well, the parsed input will be in a tokenised
                             ;*  which can be executed in immediate mode or sa
                             ;*  line number order to memory.
                             ;*  dflat syntax is very simple - every statement
                             ;*  with a keyword.  The only exception is assign
                             ;*  procedure invocation - but even these scenari
                             ;*  tokenised so during runtime we just execute t
                             ;*  The raw buffer is consumed one byte at a time
                             ;*  tokenised buffer is written one byte at a tim
                             ;*  syntax means there is no need to undo reads o
                             ;*  or tokenised buffer.  The only refinement is 
                             ;*  allowed to peek a character in the raw buffer
                             ;*  consuming it.
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code
                             
d68f :                       mod_sz_tokenise_s
                             
                             
                             ;****************************************
                             ;* df_tk_peek_buf
                             ;* Return next char in A but no change to pointer
                             ;****************************************
d68f :                       df_tk_peek_buf
d68f : a47c             [ 3] 	ldy df_linoff
d691 : b90004           [ 4] 	lda df_linbuff,y
AS65 Assembler for R6502 [1.42].                                     Page  141
-------------------------------- bank\bank0.s --------------------------------

d694 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* df_tk_get_buf
                             ;* Return next char in A and inc pointer
                             ;* Don't advance if null char found and Z=1
                             ;****************************************
d695 :                       df_tk_get_buf
d695 : a47c             [ 3] 	ldy df_linoff
d697 : b90004           [ 4] 	lda df_linbuff,y
d69a : f003             [ 3] 	beq df_tk_get_buf_null
d69c : c8               [ 2] 	iny
d69d : 847c             [ 3] 	sty df_linoff
d69f :                       df_tk_get_buf_null
d69f : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* df_tk_put_tok
                             ;* Put A in token buffer and inc pointer
                             ;* C=Clear on exit
                             ;****************************************
d6a0 :                       df_tk_put_tok
d6a0 : a47d             [ 3] 	ldy df_tokoff
d6a2 : 998004           [ 5] 	sta df_tokbuff,y
d6a5 : c8               [ 2] 	iny
d6a6 : 3004             [ 3] 	bmi df_tk_put_overflow
d6a8 : 847d             [ 3] 	sty df_tokoff
d6aa : 18               [ 2] 	clc
d6ab : 60               [ 6] 	rts
d6ac :                       df_tk_put_overflow
                             	SWBRK DFERR_STRLONG
                             
                             
                             ;****************************************
                             ;* df_tk_isdigit
                             ;* Check char in A for number 0-9
                             ;* Return: CC = False, CS = True
                             ;****************************************
d6ae :                       df_tk_isdigit
d6ae : c93a             [ 2] 	cmp #'9'+1
d6b0 : b005             [ 3] 	bcs df_tk_isdigit_false
d6b2 : c930             [ 2] 	cmp #'0'
d6b4 : 9001             [ 3] 	bcc df_tk_isdigit_false
d6b6 : 60               [ 6] 	rts						; C must be 1
d6b7 :                       df_tk_isdigit_false
d6b7 : 18               [ 2] 	clc
d6b8 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* df_tk_isbin
                             ;* Check char in A for binary digit
                             ;* Return: CC = False, CS = True
                             ;****************************************
d6b9 :                       df_tk_isbin
d6b9 : c930             [ 2] 	cmp #'0'
d6bb : f005             [ 3] 	beq df_tk_isbin_true	; C=1
d6bd : c931             [ 2] 	cmp #'1'
d6bf : f001             [ 3] 	beq df_tk_isbin_true	; C=1
d6c1 : 18               [ 2] 	clc
d6c2 :                       df_tk_isbin_true
d6c2 : 60               [ 6] 	rts
                             
AS65 Assembler for R6502 [1.42].                                     Page  142
-------------------------------- bank\bank0.s --------------------------------

                             ;****************************************
                             ;* df_tk_ishex
                             ;* Check char in A for number 0-9, A-F, a-f
                             ;* Return: CC = False, CS = True
                             ;****************************************
d6c3 :                       df_tk_ishex
d6c3 : 48               [ 3] 	pha
d6c4 : 20aed6           [ 6] 	jsr df_tk_isdigit
d6c7 : b00a             [ 3] 	bcs df_tk_ishex_truep
d6c9 : 0920             [ 2] 	ora #0x20
d6cb : c967             [ 2] 	cmp #'f'+1
d6cd : b006             [ 3] 	bcs df_tk_ishex_false
d6cf : c961             [ 2] 	cmp #'a'
d6d1 : 9002             [ 3] 	bcc df_tk_ishex_false
                             	; C must be 1 here
d6d3 :                       df_tk_ishex_truep
d6d3 : 68               [ 4] 	pla
d6d4 : 60               [ 6] 	rts
d6d5 :                       df_tk_ishex_false
d6d5 :                       df_tk_isalpha_false
d6d5 : 18               [ 2] 	clc
d6d6 : 68               [ 4] 	pla
d6d7 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* df_tk_isalpha
                             ;* Check next char in A alpha a-z, A-Z
                             ;* Return: CC = False, CS = True
                             ;****************************************
d6d8 :                       df_tk_isalpha
d6d8 : 48               [ 3] 	pha
d6d9 : 0920             [ 2] 	ora #0x20					; Convert to lower case for checki
d6db : c97b             [ 2] 	cmp #'z'+1
d6dd : b0f6             [ 3] 	bcs df_tk_isalpha_false
d6df : c961             [ 2] 	cmp #'a'
d6e1 : 90f2             [ 3] 	bcc df_tk_isalpha_false
                             	; C must be 1 here
d6e3 : 68               [ 4] 	pla
d6e4 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* df_tk_isalphanum
                             ;* Check next char A for a-z,A-Z,0-9
                             ;* Return: CC = False, CS = True
                             ;****************************************
d6e5 :                       df_tk_isalphanum
d6e5 : 20d8d6           [ 6] 	jsr df_tk_isalpha
d6e8 : 90c4             [ 3] 	bcc df_tk_isdigit
d6ea :                       df_tk_rts1				; branch to this RTS where possible
d6ea : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* df_tk_isproc
                             ;* Check next char A for _
                             ;* Return: CC = False, CS = True
                             ;****************************************
d6eb :                       df_tk_isproc
d6eb : c95f             [ 2] 	cmp #'_'
d6ed : f001             [ 3] 	beq df_tk_isproc_true	; C=1
d6ef : 18               [ 2] 	clc
d6f0 :                       df_tk_isproc_true
d6f0 : 60               [ 6] 	rts
AS65 Assembler for R6502 [1.42].                                     Page  143
-------------------------------- bank\bank0.s --------------------------------

                             
                             ;****************************************
                             ;* df_tk_skip_ws
                             ;* Skip ws in linbuff
                             ;* Return: linoff updated to next non-ws, A = cha
                             ;****************************************
d6f1 :                       df_tk_skip_ws
d6f1 :                       df_tk_ws_loop1
d6f1 : 208fd6           [ 6] 	jsr df_tk_peek_buf
d6f4 : 2000d7           [ 6] 	jsr df_tk_isws
d6f7 : 90f1             [ 3] 	bcc df_tk_rts1
d6f9 : e67c             [ 5] 	inc df_linoff
d6fb : 20a0d6           [ 6] 	jsr df_tk_put_tok
d6fe : 90f1             [ 3] 	bcc df_tk_ws_loop1		; Always as put_tok clears C
                             
                             ;****************************************
                             ;* df_tk_skip_ws
                             ;* Skip ws in linbuff
                             ;* Return: linoff updated to next non-ws, A = cha
                             ;****************************************
                             ;df_tk_strip_ws
                             ;df_tk_sws_loop1
                             ;	jsr df_tk_peek_buf
                             ;	jsr df_tk_isws
                             ;	bcc df_tk_rts1
                             ;	inc df_linoff
                             ;	bcs df_tk_sws_loop1		; Always as C is not touch
                             
                             ;****************************************
                             ;* df_tk_isws
                             ;* Check char is ws (only space is counted)
                             ;* Return: CC = False, CS = True
                             ;****************************************
d700 :                       df_tk_isws
d700 : c920             [ 2] 	cmp #' '
d702 : d001             [ 3] 	bne df_tk_isws_false
                             	; C must be 1 here
d704 : 60               [ 6] 	rts
d705 :                       df_tk_isws_false
d705 :                       df_tk_expectok
d705 : 18               [ 2] 	clc
d706 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Find a character expected ignoring ws
                             ;* Input A = expected char
                             ;* CC = found, CS = Error
                             ;****************************************
d707 :                       df_tk_expect
d707 : 48               [ 3] 	pha
                             	; skip ws
d708 : 20f1d6           [ 6] 	jsr df_tk_skip_ws
                             	; peek the buffer
d70b : 68               [ 4] 	pla
d70c : a47c             [ 3] 	ldy df_linoff
d70e : d90004           [ 4] 	cmp df_linbuff,y
                             	; if expected char then ok
d711 : f0f2             [ 3] 	beq df_tk_expectok
                             	; else error
d713 :                       df_tk_num_err
d713 :                       df_tk_char_err
d713 : 38               [ 2] 	sec
AS65 Assembler for R6502 [1.42].                                     Page  144
-------------------------------- bank\bank0.s --------------------------------

d714 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Find a character expected ignoring ws
                             ;* Input A = expected char
                             ;* Tokenises the character as well
                             ;* CC = found, CS = Error
                             ;****************************************
d715 :                       df_tk_expect_tok
d715 : 2007d7           [ 6] 	jsr df_tk_expect
d718 : b0d0             [ 4] 	bcs df_tk_rts1
d71a : 2095d6           [ 6] 	jsr df_tk_get_buf
d71d : 4ca0d6           [ 3] 	jmp df_tk_put_tok
                             
                             ;****************************************
                             ;* Find a character expected ignoring ws
                             ;* Input A = expected char
                             ;* Tokenises the character as well
                             ;* FATAL IF NOT FOUND
                             ;****************************************
d720 :                       df_tk_expect_tok_err
d720 : 2015d7           [ 6] 	jsr df_tk_expect_tok
d723 : 90c5             [ 4] 	bcc df_tk_rts1
d725 :                       df_tk_expect_tok_fatal
                             	SWBRK DFERR_SYNTAX
                             
                             
                             ;****************************************
                             ;* Tokenise a constant number
                             ;****************************************
d727 :                       df_tk_num
                             	; X,A = address, linbuff must be on page boundar
d727 : 18               [ 2] 	clc
d728 : a900             [ 2] 	lda #lo(df_linbuff)
d72a : 657c             [ 3] 	adc df_linoff
d72c : aa               [ 2] 	tax
d72d : a904             [ 2] 	lda #hi(df_linbuff)
d72f : 6900             [ 2] 	adc #0
d731 : a000             [ 2] 	ldy #0				; any numeric format
d733 : 20e1c1           [ 6] 	jsr con_n_to_a
d736 : b0db             [ 3] 	bcs df_tk_num_err
                             	; A = format
                             	; X = how many digits processed
                             	; Jump over that many chars
d738 : a8               [ 2] 	tay
d739 : 18               [ 2] 	clc
d73a : 8a               [ 2] 	txa
d73b : 657c             [ 3] 	adc df_linoff
d73d : 857c             [ 3] 	sta df_linoff
                             	; Now tokenise an integer (always 2 bytes, but t
d73f : 98               [ 2] 	tya
d740 : c901             [ 2] 	cmp #NUM_DEC
d742 : d004             [ 3] 	bne df_tk_num_hexbin
d744 : a909             [ 2] 	lda #DFTK_INTDEC	; decimal always an int
d746 : d016             [ 3] 	bne df_tk_num_put
d748 :                       df_tk_num_hexbin
d748 : c902             [ 2] 	cmp #NUM_HEX
d74a : d00a             [ 3] 	bne df_tk_num_bin
d74c : a906             [ 2] 	lda #DFTK_BYTHEX	; Assume BYT
d74e : e005             [ 2] 	cpx #5				; If >4 chars then INT
d750 : 900c             [ 3] 	bcc df_tk_num_put
d752 : a90a             [ 2] 	lda #DFTK_INTHEX
AS65 Assembler for R6502 [1.42].                                     Page  145
-------------------------------- bank\bank0.s --------------------------------

d754 : d008             [ 3] 	bne df_tk_num_put
d756 :                       df_tk_num_bin
d756 : a907             [ 2] 	lda #DFTK_BYTBIN	; Assume BYT
d758 : e00b             [ 2] 	cpx #11				; If >10 chars then INT
d75a : 9002             [ 3] 	bcc df_tk_num_put
d75c : a90b             [ 2] 	lda #DFTK_INTBIN
d75e :                       df_tk_num_put
d75e : 20a0d6           [ 6] 	jsr df_tk_put_tok	; Save number type (DEC,HEX,BI
d761 : a53d             [ 3] 	lda num_a
d763 : 20a0d6           [ 6] 	jsr df_tk_put_tok
d766 : a53e             [ 3] 	lda num_a+1
d768 : 4ca0d6           [ 3] 	jmp df_tk_put_tok
                             
                             ;****************************************
                             ;* Tokenise a constant char
                             ;****************************************
d76b :                       df_tk_char
                             	; skip the first quote
d76b : 2095d6           [ 6] 	jsr df_tk_get_buf
                             	; put in the token
d76e : a900             [ 2] 	lda #DFTK_CHR
d770 : 20a0d6           [ 6] 	jsr df_tk_put_tok
                             	; get the char value and save
d773 : 2095d6           [ 6] 	jsr df_tk_get_buf
d776 : 20a0d6           [ 6] 	jsr df_tk_put_tok
                             	; always put two bytes in, even for a BYTE type
d779 : a900             [ 2] 	lda #0
d77b : 20a0d6           [ 6] 	jsr df_tk_put_tok
                             	; next byte must be single quote
d77e : 2095d6           [ 6] 	jsr df_tk_get_buf
d781 : c927             [ 2] 	cmp #0x27
d783 : d08e             [ 3] 	bne df_tk_char_err
d785 : 18               [ 2] 	clc
d786 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Tokenise a constant string
                             ;****************************************
d787 :                       df_tk_str
                             	; skip the first quote
d787 : 2095d6           [ 6] 	jsr df_tk_get_buf
                             	; put in the token
d78a : a910             [ 2] 	lda #DFTK_STRLIT
d78c : 20a0d6           [ 6] 	jsr df_tk_put_tok
d78f :                       df_tk_str_ch
                             	; copy string chars in to token buffer
                             	; until another quote or end of line
d78f : 2095d6           [ 6] 	jsr df_tk_get_buf
d792 : c900             [ 2] 	cmp #0
d794 : f011             [ 3] 	beq df_tk_str_err
d796 : c922             [ 2] 	cmp #0x22
d798 : f006             [ 3] 	beq df_tk_str_don
d79a : 20a0d6           [ 6] 	jsr df_tk_put_tok
d79d : 4c8fd7           [ 3] 	jmp df_tk_str_ch
d7a0 :                       df_tk_str_don
                             	; zero terminated strings
d7a0 : a900             [ 2] 	lda #0
d7a2 : 4ca0d6           [ 3] 	jmp df_tk_put_tok
d7a5 :                       df_tk_var_noarry
d7a5 : 18               [ 2] 	clc
d7a6 : 60               [ 6] 	rts
d7a7 :                       df_tk_str_err
AS65 Assembler for R6502 [1.42].                                     Page  146
-------------------------------- bank\bank0.s --------------------------------

                             	SWBRK DFERR_SYNTAX
                             
                             
                             ;****************************************
                             ;* Tokenise a constant (num, string, char)
                             ;****************************************
d7a9 :                       df_tk_const
d7a9 : 20f1d6           [ 6] 	jsr df_tk_skip_ws
                             	; Check what constant it is
d7ac : 208fd6           [ 6] 	jsr df_tk_peek_buf
                             	; Minus symbol could be start of a number
d7af : c92d             [ 2] 	cmp #'-'
d7b1 : f005             [ 3] 	beq df_tk_const_try_num
d7b3 : 20aed6           [ 6] 	jsr df_tk_isdigit
d7b6 : 9003             [ 3] 	bcc df_tk_const_try_str
d7b8 :                       df_tk_const_try_num
d7b8 : 4c27d7           [ 3] 	jmp df_tk_num
d7bb :                       df_tk_const_try_str
                             	; check for double quote
d7bb : c922             [ 2] 	cmp #0x22
d7bd : d003             [ 3] 	bne df_tk_const_try_char
d7bf : 4c87d7           [ 3] 	jmp df_tk_str
d7c2 :                       df_tk_const_try_char
                             	; check for single apostrophe
d7c2 : c927             [ 2] 	cmp #0x27
d7c4 : d003             [ 3] 	bne df_tk_const_err
d7c6 : 4c6bd7           [ 3] 	jmp df_tk_char
d7c9 :                       df_tk_const_err
                             	SWBRK DFERR_SYNTAX
                             
                             
                             ;****************************************
                             ;* Tokenise a variable - A = mask
                             ;* Return : A = variable index
                             ;****************************************
d7cb :                       df_tk_var
                             	; Find or create variable, address in X,A
d7cb : 202ad6           [ 6] 	jsr df_var_findcreate
d7ce : 9001             [ 3] 	bcc df_tk_var_cont
d7d0 : 60               [ 6] 	rts
d7d1 :                       df_tk_var_cont
                             	; Save X,A for later
d7d1 : 48               [ 3] 	pha
d7d2 : 8a               [ 2] 	txa
d7d3 : 48               [ 3] 	pha
                             	; Put VAR escape in token buffer
d7d4 : a911             [ 2] 	lda #DFTK_VAR
d7d6 : 20a0d6           [ 6] 	jsr df_tk_put_tok
                             	; Get variable address and put in token buffer
d7d9 : 68               [ 4] 	pla
d7da : 20a0d6           [ 6] 	jsr df_tk_put_tok
d7dd : 68               [ 4] 	pla
d7de : 20a0d6           [ 6] 	jsr df_tk_put_tok
                             	; count of any array indices
d7e1 :                       df_tk_var_ck
                             	; check if array procesing needed
d7e1 : a95b             [ 2] 	lda #'['
d7e3 : 2015d7           [ 6] 	jsr df_tk_expect_tok
d7e6 : b0bd             [ 3] 	bcs df_tk_var_noarry
                             	; process numeric expression in bracket
d7e8 : 4c92d8           [ 3] 	jmp df_tk_narry
                             
AS65 Assembler for R6502 [1.42].                                     Page  147
-------------------------------- bank\bank0.s --------------------------------

                             
                             ;****************************************
                             ;* Tokenise a parameter in proc definition
                             ;* Return : A = variable index
                             ;****************************************
d7eb :                       df_tk_parm
                             	; if preceeding with non-local qualifier DFTK_VA
d7eb : 208fd6           [ 6] 	jsr df_tk_peek_buf
d7ee : c926             [ 2] 	cmp #DFTK_VARPARM
d7f0 : d006             [ 3] 	bne df_tk_parm_skip_var
                             	; get the qualifier and put in token buffer
d7f2 : 2095d6           [ 6] 	jsr df_tk_get_buf
d7f5 : 20a0d6           [ 6] 	jsr df_tk_put_tok
d7f8 :                       df_tk_parm_skip_var
                             	; don't have a certain type of var
d7f8 : a900             [ 2] 	lda #0
d7fa : 4ccbd7           [ 3] 	jmp df_tk_var
                             
                             
                             ;****************************************
                             ;* Tokenise a variable to localise
                             ;* Return : A,X = variable index
                             ;****************************************
d7fd :                       df_tk_localvar
                             	; Find or create variable, index in A
d7fd : 202ad6           [ 6] 	jsr df_var_findcreate
d800 : 9001             [ 3] 	bcc df_tk_localvar_cont
d802 : 60               [ 6] 	rts
d803 :                       df_tk_localvar_cont
                             	; Save variable address for later
d803 : 48               [ 3] 	pha
d804 : 8a               [ 2] 	txa
d805 : 48               [ 3] 	pha
                             	; Put VAR escape in token buffer
d806 : a911             [ 2] 	lda #DFTK_VAR
d808 : 20a0d6           [ 6] 	jsr df_tk_put_tok
                             	; Get variable index and put in token buffer
d80b : 68               [ 4] 	pla
d80c : 20a0d6           [ 6] 	jsr df_tk_put_tok
d80f : 68               [ 4] 	pla
d810 : 4ca0d6           [ 3] 	jmp df_tk_put_tok
                             
                             ;****************************************
                             ;* Tokenise array variable
                             ;* Return : A = variable index
                             ;****************************************
d813 :                       df_tk_arrvar
                             	; Like a local var at first
d813 : 20fdd7           [ 6] 	jsr df_tk_localvar
                             	; but must be array
d816 : a95b             [ 2] 	lda #'['
d818 : 2020d7           [ 6] 	jsr df_tk_expect_tok_err
                             	; process numeric expression in bracket
d81b : 4c92d8           [ 3] 	jmp df_tk_narry
                             
                             ;****************************************
                             ;* Tokenise call or def of proc
                             ;* Mode : A = 0 means def, else call
                             ;****************************************
d81e :                       df_tk_proc
d81e : 858b             [ 3] 	sta df_procmode
d820 : 20f1d6           [ 6] 	jsr df_tk_skip_ws
AS65 Assembler for R6502 [1.42].                                     Page  148
-------------------------------- bank\bank0.s --------------------------------

                             	; Find or create proc, index in A
d823 : a940             [ 2] 	lda #DFVVT_PROC
d825 : 202ad6           [ 6] 	jsr df_var_findcreate
d828 : b066             [ 3] 	bcs df_tk_proc_err
                             
                             	; Save variable address for later
d82a : 868e             [ 3] 	stx df_procptr
d82c : 858f             [ 3] 	sta df_procptr+1
                             
                             	; Put PROC escape in token buffer
d82e : a912             [ 2] 	lda #DFTK_PROC
d830 : 20a0d6           [ 6] 	jsr df_tk_put_tok
                             	; Get variable address and put in token buffer
d833 : a58e             [ 3] 	lda df_procptr
d835 : 20a0d6           [ 6] 	jsr df_tk_put_tok
d838 : a58f             [ 3] 	lda df_procptr+1
d83a : 20a0d6           [ 6] 	jsr df_tk_put_tok
                             
                             	; initially assume no args
d83d : a900             [ 2] 	lda #0
d83f : 858c             [ 3] 	sta df_procargs
                             
                             	; Must have an open bracket
d841 : a928             [ 2] 	lda #'('
d843 : 2020d7           [ 6] 	jsr df_tk_expect_tok_err
                             	; if immediately followed by close bracket then 
d846 : 208fd6           [ 6] 	jsr df_tk_peek_buf
d849 : c929             [ 2] 	cmp #')'
d84b : f030             [ 3] 	beq df_tk_proc_noparm
                             	; else tokenise parm variables
d84d :                       df_tk_proc_parms
d84d : 20f1d6           [ 6] 	jsr df_tk_skip_ws
                             	; call appropriate routine for mode
d850 : a58b             [ 3] 	lda df_procmode
d852 : d006             [ 3] 	bne df_tk_proc_call
                             	; tokenise parameter variable in def mode
d854 : 20ebd7           [ 6] 	jsr df_tk_parm
d857 : 4c63d8           [ 3] 	jmp df_tk_proc_skip_call
d85a :                       df_tk_proc_call
                             	; tokenise expression in call mode
                             	;**CHECK**
d85a : a58c             [ 3] 	lda df_procargs	; procargs could be impacted ins
d85c : 48               [ 3] 	pha
d85d : 2012d9           [ 6] 	jsr df_tk_expression
d860 : 68               [ 4] 	pla
d861 : 858c             [ 3] 	sta df_procargs
d863 :                       df_tk_proc_skip_call
d863 : b02a             [ 3] 	bcs df_tk_proc_errp
                             	; increment number of args
d865 : e68c             [ 5] 	inc df_procargs
                             	; what is next non ws char
d867 : 20f1d6           [ 6] 	jsr df_tk_skip_ws
d86a : c92c             [ 2] 	cmp #','
d86c : f006             [ 3] 	beq df_tk_proc_comma
d86e : c929             [ 2] 	cmp #')'
d870 : d01d             [ 3] 	bne df_tk_proc_errp
d872 : f009             [ 3] 	beq df_tk_proc_noparm
                             	; comma found, more parms to process
d874 :                       df_tk_proc_comma
d874 : 2095d6           [ 6] 	jsr df_tk_get_buf
d877 : 20a0d6           [ 6] 	jsr df_tk_put_tok
d87a : 4c4dd8           [ 3] 	jmp df_tk_proc_parms
AS65 Assembler for R6502 [1.42].                                     Page  149
-------------------------------- bank\bank0.s --------------------------------

d87d :                       df_tk_proc_noparm
                             	; consume the close bracket
d87d : 2095d6           [ 6] 	jsr df_tk_get_buf
d880 : 20a0d6           [ 6] 	jsr df_tk_put_tok
                             
                             	; update arg count if def mode
d883 : a68b             [ 3] 	ldx df_procmode
d885 : d006             [ 3] 	bne df_tk_proc_skip_args
                             	; use address of proc
                             	; put arg count in dim2
d887 : a004             [ 2] 	ldy #DFVVT_DIM2
d889 : a58c             [ 3] 	lda df_procargs
d88b : 918e             [ 5] 	sta (df_procptr),y
d88d :                       df_tk_proc_skip_args
d88d : 18               [ 2] 	clc
d88e : 60               [ 6] 	rts
d88f :                       df_tk_proc_errp
d88f : 68               [ 4] 	pla
d890 :                       df_tk_proc_err
                             	SWBRK DFERR_SYNTAX
                             
                             
                             ;****************************************
                             ;* Parse array index
                             ;****************************************
d892 :                       df_tk_narry
                             	; if array open bracket encountered
                             	; then tokenise a numeric expression
d892 : 2012d9           [ 6] 	jsr df_tk_expression
                             	; If a comma is next, then another expression
d895 : a92c             [ 2] 	lda #','
d897 : 2015d7           [ 6] 	jsr df_tk_expect_tok
d89a : b003             [ 3] 	bcs df_tk_narry_end
d89c : 2012d9           [ 6] 	jsr df_tk_expression
d89f :                       df_tk_narry_end
                             	; after the second dimension, must be close sq b
d89f : a95d             [ 2] 	lda #']'
d8a1 : 4c20d7           [ 3] 	jmp df_tk_expect_tok_err
                             
                             ;****************************************
                             ;* Parse bracket
                             ;****************************************
d8a4 :                       df_tk_nbrkt
                             	; if  open bracket encountered
                             	; then tokenise a numeric expression
d8a4 : 2012d9           [ 6] 	jsr df_tk_expression
d8a7 : a929             [ 2] 	lda #')'
d8a9 : 4c20d7           [ 3] 	jmp df_tk_expect_tok_err
                             
                             ;****************************************
                             ;* Parse call to numeric proc
                             ;****************************************
d8ac :                       df_tk_nterm_proc
                             	; call mode
d8ac : a901             [ 2] 	lda #1
d8ae : 4c1ed8           [ 3] 	jmp df_tk_proc
                             
                             ;****************************************
                             ;* Parse numeric term
                             ;****************************************
d8b1 :                       df_tk_nterm
                             	; skip any ws first, copying in to tokbuff
AS65 Assembler for R6502 [1.42].                                     Page  150
-------------------------------- bank\bank0.s --------------------------------

                             	; A containts the non-ws char
d8b1 : 20f1d6           [ 6] 	jsr df_tk_skip_ws
d8b4 : c900             [ 2] 	cmp #0
d8b6 : f004             [ 3] 	beq df_tk_nterm_done
d8b8 : c93a             [ 2] 	cmp #':'
d8ba : d002             [ 3] 	bne df_tk_nterm_cont
d8bc :                       df_tk_nterm_done
d8bc :                       df_tk_nop_false
d8bc : 38               [ 2] 	sec
d8bd : 60               [ 6] 	rts
d8be :                       df_tk_nterm_cont
                             	; if open bracket then process it
d8be : c928             [ 2] 	cmp #'('
d8c0 : d009             [ 3] 	bne df_tk_nterm_tryfn
                             	; get the bracket and put in token buffer
d8c2 : 2095d6           [ 6] 	jsr df_tk_get_buf
d8c5 : 20a0d6           [ 6] 	jsr df_tk_put_tok
                             	; go process the open bracket
d8c8 : 4ca4d8           [ 3] 	jmp df_tk_nbrkt
d8cb :                       df_tk_nterm_tryfn
d8cb : 48               [ 3] 	pha
                             	; try decoding a built-in function
d8cc : a902             [ 2] 	lda #DFTK_FN
d8ce : 20fed9           [ 6] 	jsr df_tk_matchtok
d8d1 : b00e             [ 3] 	bcs df_tk_nterm_try_proc
                             	; pull old A in to Y but don't use
d8d3 : 68               [ 4] 	pla
d8d4 : a8               [ 2] 	tay
                             	; restore A and put the token with MSB set
d8d5 : 8a               [ 2] 	txa
d8d6 : 0980             [ 2] 	ora #0x80
d8d8 : 20a0d6           [ 6] 	jsr df_tk_put_tok
d8db : 20d0d9           [ 6] 	jsr df_tk_exec_parser
d8de : b01b             [ 3] 	bcs df_tk_nterm_err
d8e0 : 60               [ 6] 	rts
d8e1 :                       df_tk_nterm_try_proc
d8e1 : 68               [ 4] 	pla
                             	; if it's not a func then try proc
d8e2 : 20ebd6           [ 6] 	jsr df_tk_isproc
d8e5 : 9006             [ 3] 	bcc df_tk_nterm_try_var
d8e7 : 20acd8           [ 6] 	jsr df_tk_nterm_proc
d8ea : b00f             [ 3] 	bcs df_tk_nterm_err
d8ec : 60               [ 6] 	rts
d8ed :                       df_tk_nterm_try_var
                             	; Non-zero mask means var must be this type
d8ed : a900             [ 2] 	lda #0
d8ef : 20cbd7           [ 6] 	jsr df_tk_var
d8f2 : b001             [ 3] 	bcs df_tk_nterm_try_const
d8f4 : 60               [ 6] 	rts
d8f5 :                       df_tk_nterm_try_const
                             	; Try decoding a constant
d8f5 : 20a9d7           [ 6] 	jsr df_tk_const
d8f8 : b001             [ 3] 	bcs df_tk_nterm_err
d8fa : 60               [ 6] 	rts
d8fb :                       df_tk_nterm_err
                             	SWBRK DFERR_SYNTAX
                             
                             
                             ;****************************************
                             ;* Parse numeric operator
                             ;****************************************
d8fd :                       df_tk_nop
AS65 Assembler for R6502 [1.42].                                     Page  151
-------------------------------- bank\bank0.s --------------------------------

d8fd : 20f1d6           [ 6] 	jsr df_tk_skip_ws
d900 : c900             [ 2] 	cmp #0
d902 : f0b8             [ 4] 	beq df_tk_nop_false
                             	; must be an operator token for numeric
d904 : a90c             [ 2] 	lda #DFTK_OP | DFTK_STROP
d906 : 20fed9           [ 6] 	jsr df_tk_matchtok
d909 : b0b1             [ 4] 	bcs df_tk_nop_false
                             	; got a token
d90b : 0980             [ 2] 	ora #DFTK_TOKEN
d90d : 20a0d6           [ 6] 	jsr df_tk_put_tok
d910 : 18               [ 2] 	clc
d911 : 60               [ 6] 	rts
                             
                             	
                             ;****************************************
                             ;* Parse numeric expression
                             ;****************************************
d912 :                       df_tk_expression
                             	; Tokenise a numeric term
d912 : 20b1d8           [ 6] 	jsr df_tk_nterm
d915 : b006             [ 3] 	bcs df_tk_expre_err
                             	; Try and tokenise a numeric operator
d917 : 20fdd8           [ 6] 	jsr df_tk_nop
                             	; If an operator was tokenised
                             	; then loop back for another term
d91a : 90f6             [ 3] 	bcc df_tk_expression
                             	; If no operator was found then
                             	; expression is done
d91c :                       df_tk_not_eos
d91c : 18               [ 2] 	clc
d91d :                       df_tk_expre_err
d91d : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Find expected token and parse expression
                             ;****************************************
d91e :                       df_tk_tok_expression
d91e : 2020d7           [ 6] 	jsr df_tk_expect_tok_err
d921 : 4c12d9           [ 3] 	jmp df_tk_expression
                             
                             
                             ;****************************************
                             ;* Check end of statement
                             ;****************************************
d924 :                       df_tk_isEOS
d924 : a93a             [ 2] 	lda #':'
d926 : 2015d7           [ 6] 	jsr df_tk_expect_tok
d929 : b0f1             [ 3] 	bcs df_tk_not_eos
                             	; this is the position of the next statement
d92b : a57d             [ 3] 	lda df_tokoff
                             	; put it in the last statement offset slot
d92d : a47f             [ 3] 	ldy df_nxtstidx
d92f : 998004           [ 5] 	sta df_tokbuff,y
d932 : 38               [ 2] 	sec
d933 : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* Parse user defined proc
                             ;****************************************
d934 :                       df_tk_parse_user_proc
                             	; put proc token in as a call
AS65 Assembler for R6502 [1.42].                                     Page  152
-------------------------------- bank\bank0.s --------------------------------

d934 : a981             [ 2] 	lda #0x81
d936 : 20a0d6           [ 6] 	jsr df_tk_put_tok
d939 : a901             [ 2] 	lda #1
d93b : 4c1ed8           [ 3] 	jmp df_tk_proc
                             
                             
                             ;****************************************
                             ;* Parse a command
                             ;* Do not fatal error if this fails
                             ;****************************************
d93e :                       df_tk_parse_command
                             	; only looking for keywords
d93e : a901             [ 2] 	lda #DFTK_KW
d940 : 20fed9           [ 6] 	jsr df_tk_matchtok
                             	; if didn't find regular keywords then try non f
d943 : b010             [ 3] 	bcs df_tk_parse_command_err
                             	; if match then store token in the line buffer
                             	; Set MSB
d945 : 0980             [ 2] 	ora #0x80
d947 : 20a0d6           [ 6] 	jsr df_tk_put_tok
                             	; call the parser to do tokenise based on the st
d94a : a583             [ 3] 	lda df_symoff
d94c : 20d0d9           [ 6] 	jsr df_tk_exec_parser
d94f : b004             [ 3] 	bcs df_tk_parse_command_err
                             	; [1] ignore white space but keep it
d951 : 20f1d6           [ 6] 	jsr df_tk_skip_ws
                             	; No error in parsing this command
d954 :                       df_tk_parse_command_done
d954 : 18               [ 2] 	clc
d955 :                       df_tk_parse_command_err
d955 : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* lexer
                             ;****************************************
d956 :                       df_lexer_line
d956 : a900             [ 2] 	lda #0
                             	; start at the beginning of the line buffer
d958 : 857c             [ 3] 	sta df_linoff
                             	; start at the beginning of the tokenised buffer
d95a : 857d             [ 3] 	sta df_tokoff
                             	; set current line to the token buffer
d95c : a980             [ 2] 	lda #lo(df_tokbuff)
d95e : 8586             [ 3] 	sta df_currlin
d960 : a904             [ 2] 	lda #hi(df_tokbuff)
d962 : 8587             [ 3] 	sta df_currlin+1
                             	; Set the line length to 0
d964 : a900             [ 2] 	lda #0
d966 : 20a0d6           [ 6] 	jsr df_tk_put_tok
                             
                             	; any leading white space, ignore and discard
                             ;	jsr df_tk_strip_ws
                             
                             	; if peek next character is a number then assume
                             	; else assume a statement
d969 : 208fd6           [ 6] 	jsr df_tk_peek_buf
d96c : 20aed6           [ 6] 	jsr df_tk_isdigit
d96f : 9006             [ 3] 	bcc df_lexer_skip_lnum
                             	; if line number then capture the line number an
d971 : 20dfd9           [ 6] 	jsr df_tk_linenum
d974 : 4c7fd9           [ 3] 	jmp df_tk_body
AS65 Assembler for R6502 [1.42].                                     Page  153
-------------------------------- bank\bank0.s --------------------------------

d977 :                       df_lexer_skip_lnum
                             	; if no line number then zero out the line numbe
                             	; line zero will indicate an immediate mode comm
d977 : a900             [ 2] 	lda #0
d979 : 20a0d6           [ 6] 	jsr df_tk_put_tok				; Line num low byte
d97c : 20a0d6           [ 6] 	jsr df_tk_put_tok				; Line num high byte
d97f :                       df_tk_body
                             	; Offset for next statement
d97f : a57d             [ 3] 	lda df_tokoff
d981 : 857f             [ 3] 	sta df_nxtstidx
d983 : a900             [ 2] 	lda #0
d985 : 20a0d6           [ 6] 	jsr df_tk_put_tok				; Offset to next statement
d988 : 208fd6           [ 6] 	jsr df_tk_peek_buf				; Check for a single space
d98b : 2000d7           [ 6] 	jsr df_tk_isws					; and first character
d98e : 9002             [ 3] 	bcc df_tk_skip_1_spc
d990 : e67c             [ 5] 	inc df_linoff					; Don't tokenise this single s
d992 :                       df_tk_skip_1_spc
                             	; [1] capture white space from line buffer in to
d992 : 20f1d6           [ 6] 	jsr df_tk_skip_ws
                             	; If next non ws is zero then this is an empty l
                             	; so return with length zero but line number fil
                             	; token buffer
d995 : c900             [ 2] 	cmp #0
d997 : f033             [ 3] 	beq df_tk_line_empty
                             	; if next char is _ then parse a user defined pr
d999 : 20ebd6           [ 6] 	jsr df_tk_isproc
d99c : 9006             [ 3] 	bcc df_tk_try_command
d99e : 2034d9           [ 6] 	jsr df_tk_parse_user_proc
d9a1 : 4caed9           [ 3] 	jmp df_tk_done
d9a4 :                       df_tk_try_command
                             	; try  a keyword
d9a4 : 203ed9           [ 6] 	jsr df_tk_parse_command
                             ;	bcs	df_tk_try_assign
d9a7 : 9005             [ 3] 	bcc df_tk_done
d9a9 :                       df_tk_try_assign
                             	; nothing but to try an assignment operation
d9a9 : 206add           [ 6] 	jsr df_tk_assign
d9ac : b020             [ 3] 	bcs	df_tk_parseerror
d9ae :                       df_tk_done
                             	; put statement index stuff here in case of mult
                             	; check for : and if present tokenise plus updat
                             	; then go back to try and process another statem
d9ae : 2024d9           [ 6] 	jsr df_tk_isEOS
d9b1 : b0cc             [ 3] 	bcs df_tk_body
                             	; if not at end of line, then must be error
d9b3 : 208fd6           [ 6] 	jsr df_tk_peek_buf
d9b6 : c900             [ 2] 	cmp #0
d9b8 : d014             [ 3] 	bne df_tk_parseerror
                             	; this is the position of the next line
d9ba : a57d             [ 3] 	lda df_tokoff
                             	; put it in the last statement offset slot
d9bc : a47f             [ 3] 	ldy df_nxtstidx
d9be : 998004           [ 5] 	sta df_tokbuff,y
                             	; Get line length
d9c1 : a47d             [ 3] 	ldy df_tokoff
                             	; ensure there is always a zero after the last t
                             	; A is already zero
d9c3 : a900             [ 2] 	lda #0
d9c5 : 998004           [ 5] 	sta df_tokbuff,y
                             	; save the line length
d9c8 : 98               [ 2] 	tya
d9c9 : 8d8004           [ 4] 	sta df_tokbuff
AS65 Assembler for R6502 [1.42].                                     Page  154
-------------------------------- bank\bank0.s --------------------------------

d9cc :                       df_tk_line_empty
d9cc : 18               [ 2] 	clc
d9cd : 60               [ 6] 	rts
d9ce :                       df_tk_parseerror
                             	SWBRK DFERR_SYNTAX
                             
                             
                             ;****************************************
                             ;* df_tk_parsestatement
                             ;* Execute parse routine for this statement
                             ;* Input: df_tokoff is the token found
                             ;* Return: CC = Parsed ok, CS = Error
                             ;****************************************
d9d0 :                       df_tk_exec_parser
d9d0 : 0a               [ 2] 	asl a
d9d1 : aa               [ 2] 	tax
d9d2 : bd1edc           [ 4] 	lda df_tk_tokenjmp,x
d9d5 : 85a1             [ 3] 	sta df_tmpptra
d9d7 : bd1fdc           [ 4] 	lda df_tk_tokenjmp+1,x
d9da : 85a2             [ 3] 	sta df_tmpptra+1
d9dc : 6ca100           [ 6] 	jmp (df_tmpptra)
                             
                             
                             ;****************************************
                             ;* df_tk_linenum
                             ;* Tokenise line number
                             ;****************************************
d9df :                       df_tk_linenum
                             	; Convert line number to 16 bit number
                             	; Save the line number
                             	; Increment the buffer pointer
d9df : 18               [ 2] 	clc
d9e0 : a900             [ 2] 	lda #lo(df_linbuff)
d9e2 : 657c             [ 3] 	adc df_linoff
d9e4 : aa               [ 2] 	tax
d9e5 : a904             [ 2] 	lda #hi(df_linbuff)
d9e7 : 6900             [ 2] 	adc #0
d9e9 : a001             [ 2] 	ldy #1			; Decimal format only
d9eb : 20e1c1           [ 6] 	jsr con_n_to_a
d9ee : 18               [ 2] 	clc
d9ef : 8a               [ 2] 	txa
d9f0 : 657c             [ 3] 	adc df_linoff
d9f2 : 857c             [ 3] 	sta df_linoff
                             	; Now save line number
d9f4 : a53d             [ 3] 	lda num_a
d9f6 : 20a0d6           [ 6] 	jsr df_tk_put_tok
d9f9 : a53e             [ 3] 	lda num_a+1
d9fb : 4ca0d6           [ 3] 	jmp df_tk_put_tok
                             
                             ;****************************************
                             ;* df_tk_matchtok
                             ;* Try and find a token match against the table d
                             ;* Input:
                             ;*			Current df_linbuff and df_linoff
                             ;* Return: 	CC = No Error, CS = Error
                             ;*			df_linoff points to next char if CC else unc
                             ;*			df_symoff is the symbol table index
                             ;****************************************
d9fe :                       df_tk_matchtok
                             	; save the mask to check types against
d9fe : 48               [ 3] 	pha
                             	; Start at token symbols beginning
AS65 Assembler for R6502 [1.42].                                     Page  155
-------------------------------- bank\bank0.s --------------------------------

d9ff : a980             [ 2] 	lda #lo(df_tokensyms)
da01 : 8581             [ 3] 	sta df_symtab
da03 : a9da             [ 2] 	lda #hi(df_tokensyms)
da05 : 8582             [ 3] 	sta df_symtab+1
da07 : a900             [ 2] 	lda #0
da09 : 8583             [ 3] 	sta df_symoff
da0b :                       df_tk_checknexttok
                             	; check this token type first
da0b : 68               [ 4] 	pla
da0c : 48               [ 3] 	pha
da0d : a683             [ 3] 	ldx df_symoff
da0f : 3de6dc           [ 4] 	and df_tk_tokentype,x
da12 : f032             [ 3] 	beq df_tk_symnomatch
                             	; Special check for operator token
                             	; because of order of precedence fudge
                             	; ******FIX THIS ONE DAY!!!!!!******
                             	; if parm and token type = DFTK_OP then ok
                             	; if parm and token type <> DFTK_OP then not ok
da14 : bde6dc           [ 4] 	lda df_tk_tokentype,x
da17 : 2908             [ 2] 	and #DFTK_OP
da19 : f009             [ 3] 	beq df_tk_matchtok_skip_op
da1b : 68               [ 4] 	pla
da1c : 48               [ 3] 	pha
da1d : 2908             [ 2] 	and #DFTK_OP
da1f : 3de6dc           [ 4] 	and df_tk_tokentype,x
da22 : f022             [ 3] 	beq df_tk_symnomatch
da24 :                       df_tk_matchtok_skip_op
                             	; From the line buffer current pointer
                             	; Check for a token match
da24 : a47c             [ 3] 	ldy df_linoff
da26 : a200             [ 2] 	ldx #0
da28 :                       df_tk_checktokch
                             	; Get symtable char
                             	; and mask off MSB
da28 : a181             [ 6] 	lda (df_symtab,x)
                             	; Save the value and mask off MSB
da2a : 48               [ 3] 	pha
da2b : 297f             [ 2] 	and #0x7f
                             	; Compare with current line buffer char
da2d : d90004           [ 4] 	cmp df_linbuff,y
                             	; If chars not match then this symbol fails
da30 : d013             [ 3] 	bne df_tk_symnomatchp
                             	; If match and symbol has MSB then
                             	; all of the symbol matched
da32 : 68               [ 4] 	pla
da33 : 3033             [ 3] 	bmi df_tk_symfound
                             	; else more chars to match
                             	; so increment line buffer pointers
                             	_incZPWord df_symtab
                             
da3b : c8               [ 2] 	iny
                             	; If buffer is '.' then let this be a match
da3c : b90004           [ 4] 	lda df_linbuff,y
da3f : c92e             [ 2] 	cmp #'.'
da41 : f025             [ 3] 	beq df_tk_symfound
da43 : d0e3             [ 3] 	bne df_tk_checktokch	; branch always
da45 :                       df_tk_symnomatchp
da45 : 68               [ 4] 	pla
da46 :                       df_tk_symnomatch
                             	; Increment symbol counter to next symbol
da46 : e683             [ 5] 	inc df_symoff
da48 :                       df_tk_symnextentry
AS65 Assembler for R6502 [1.42].                                     Page  156
-------------------------------- bank\bank0.s --------------------------------

da48 : a200             [ 2] 	ldx #0
da4a : a181             [ 6] 	lda (df_symtab,x)
                             	; End of symbol is MSB
da4c : 3009             [ 3] 	bmi  df_tk_foundsymend
                             	_incZPWord df_symtab
                             
da54 : 4c48da           [ 3] 	jmp df_tk_symnextentry
da57 :                       df_tk_foundsymend
                             	; Increment char to point to new symbol
                             	; for matching with line buffer
                             	_incZPWord df_symtab
                             
                             	; If next char is not zero then
                             	; try and match with line buffer
da5d : a181             [ 6] 	lda (df_symtab,x)
da5f : d0aa             [ 3] 	bne df_tk_checknexttok
                             	; else symbol table exhausted
                             	; so no match found
                             	; pop mask off stack
da61 : 68               [ 4] 	pla
                             	; Zero symbol counter
da62 : a900             [ 2] 	lda #0
da64 : 8583             [ 3] 	sta df_symoff
                             	; Set C to indicate error (no match)
da66 : 38               [ 2] 	sec
da67 : 60               [ 6] 	rts
da68 :                       df_tk_symfound
                             	; Full match with keyword in symtable but
                             	; if matching with something that ended in alpha
                             	; then check the next buffer char is not alphanu
                             	; as this could be part of a variable name
                             	; Point to next buffer char in any case
da68 : c8               [ 2] 	iny
                             	; First mask off MSB
da69 : 297f             [ 2] 	and #0x7f
                             	; Then check if alpha
da6b : 20d8d6           [ 6] 	jsr df_tk_isalpha
                             	; if not alpha then we're definitely done
da6e : 9008             [ 3] 	bcc df_tk_symfound_final
                             	; else check buffer
da70 : b90004           [ 4] 	lda df_linbuff,y
                             	; if it is an alphanum then
da73 : 20e5d6           [ 6] 	jsr df_tk_isalphanum
                             	; do not count as a match
da76 : b0ce             [ 3] 	bcs df_tk_symnomatch
da78 :                       df_tk_symfound_final
                             	; pop mask off stack
da78 : 68               [ 4] 	pla
                             	; Save line buffer pointer (points to next char)
                             	; Clear C to indicate success (match)
da79 : 847c             [ 3] 	sty df_linoff
da7b : a583             [ 3] 	lda df_symoff
da7d : aa               [ 2] 	tax
da7e : 18               [ 2] 	clc
da7f : 60               [ 6] 	rts
                             
                             	include "dflat/tksymtab.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
AS65 Assembler for R6502 [1.42].                                     Page  157
-------------------------------- bank\bank0.s --------------------------------

                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  TKSYMTAB.S
                             ;*  Runtime token jump table.
                             ;*  dflat uses four key tables to tokenise and ru
                             ;*  - df_tokensyms    - table of token symbols
                             ;*  - df_tk_tokentype - table of token types
                             ;*  - df_tk_tokenjmp  - table of tokenising routi
                             ;*  - df_rt_tokenjmp  - table of runtime routines
                             ;*  The key is the token symbols.  When a line is
                             ;*  in to the raw (untokenised) buffer, df_tokens
                             ;*  used to identify tokens.  The position of the
                             ;*  token is used to then look up type and jump v
                             ;*  in the other tables.
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code  
                             
                             ; Statement Token table
                             ; keywords
da80 :                       df_tokensyms
da80 : 80                    	db	0x80						; Implicit numeric assign
da81 : 80                    	db	0x80						; Implicit call procedure
da82 : bb                    	db	";"+0x80					; Comment
da83 : 7072696e746cee        	db	"printl",'n'+0x80			; println exprlist
da8a : 7072696e7461f4        	db	"printa",'t'+0x80			; printat x,y,exprlist
da91 : 7072696ef4            	db	"prin",'t'+0x80				; print exprlist
da96 : 6465e6                	db	"de",'f'+0x80				; def_subname
da99 : 656e646465e6          	db	"endde",'f'+0x80			; enddef
da9f : 7265747572ee          	db	"retur",'n'+0x80			; return
daa5 : 61626f72f4            	db	"abor",'t'+0x80				; abort
daaa : 6c6f6361ec            	db	"loca",'l'+0x80				; local varlist
daaf : 6469ed                	db	"di",'m'+0x80				; dim varlist
dab2 : 7265706561f4          	db	"repea",'t'+0x80			; repeat
dab8 : 756e7469ec            	db	"unti", 'l'+0x80			; until condition
dabd : 666ff2                	db	"fo",'r'+0x80				; for var=start,end,incremen
dac0 : 6e6578f4              	db	"nex",'t'+0x80				; next
dac4 : 7768696ce5            	db	"whil",'e'+0x80				; while condition
dac9 : 77656ee4              	db	"wen",'d'+0x80				; wend
dacd : 69e6                  	db	"i",'f'+0x80				; if condition
dacf : 656c73e5              	db	"els",'e'+0x80				; else
dad3 : 656e6469e6            	db	"endi",'f'+0x80				; endif
dad8 : 656c69e6              	db	"eli",'f'+0x80				; elif condition
dadc : 646174e1              	db	"dat",'a'+0x80				; data
dae0 : ae                    	db	'.'+0x80					; assembler command
dae1 : 7275ee                	db	"ru",'n'+0x80				; run
dae4 : 6c6973f4              	db	"lis",'t'+0x80				; list _proc-|*|line,line
dae8 : 696e7075f4            	db	"inpu",'t'+0x80				; input var
daed : 746578f4              	db	"tex",'t'+0x80				; text
daf1 : 706c6ff4              	db	"plo",'t'+0x80				; plot x,y,char|string
daf5 : 637572736ff2          	db	"curso",'r'+0x80			; cursor n
dafb : 636cf3                	db	"cl",'s'+0x80				; cls
dafe : 706f6be5              	db	"pok",'e'+0x80				; poke a,v
db02 : 646f6be5              	db	"dok",'e'+0x80				; doke a,v
db06 : 736f756ee4            	db	"soun",'d'+0x80				; sound
db0b : 6d757369e3            	db	"musi",'c'+0x80				; music
db10 : 706c61f9              	db	"pla",'y'+0x80				; play
db14 : 736176e5              	db	"sav",'e'+0x80				; save "fname"
db18 : 6c6f61e4              	db	"loa",'d'+0x80				; load "fname"
AS65 Assembler for R6502 [1.42].                                     Page  158
-------------------------------- bank\bank0.s --------------------------------

db1c : 726561e4              	db	"rea",'d'+0x80				; read
db20 : 6e65f7                	db	"ne",'w'+0x80				; new
db23 : 72656e75ed            	db	"renu",'m'+0x80				; renum start,offset,incre
db28 : 776169f4              	db	"wai",'t'+0x80				; wait delay
db2c : 72657365f4            	db	"rese",'t'+0x80				; reset var
db31 : 68697265f3            	db	"hire",'s'+0x80				; hires col
db36 : 706f696ef4            	db	"poin",'t'+0x80				; point x,y
db3b : 6c696ee5              	db	"lin",'e'+0x80				; line x0,y0,x1,y1
db3f : 6c696e6574ef          	db	"linet",'o'+0x80			; lineto x1,y1
db45 : 7069786d6f64e5        	db	"pixmod",'e'+0x80			; pixmode n
db4c : 696eeb                	db	"in",'k'+0x80				; ink n
db4f : 70617065f2            	db	"pape",'r'+0x80				; paper n
db54 : 636972636ce5          	db	"circl",'e'+0x80			; circle x,y,r
                             ;	db	"fil",'l'+0x80				; fill x,y,w,h,v
db5a : 68696d65ed            	db	"hime",'m'+0x80				; himem addr
db5f : 6d6f6e69746ff2        	db	"monito",'r'+0x80			; monitor
db66 : 737072636861f2        	db	"sprcha",'r'+0x80			; sprchar sp,ch
db6d : 737072706ff3          	db	"sprpo",'s'+0x80			; sprpos sp,x,y
db73 : 7370727570e4          	db	"sprup",'d'+0x80			; sprupd
db79 : 737072696e69f4        	db	"sprini",'t'+0x80			; sprinit
db80 : 7370726d756c74e9      	db	"sprmult",'i'+0x80			; sprmulti x[],y[]
db88 : 62736176e5            	db	"bsav",'e'+0x80				; bsave addr,len,"fname"
db8d : 626c6f61e4            	db	"bloa",'d'+0x80				; bload addr,"fname"
db92 : 74736176e5            	db	"tsav",'e'+0x80				; tsave "fname"
db97 : 746c6f61e4            	db	"tloa",'d'+0x80				; tload "fname"
                             ; Functions
db9c : 7065656ba8            	db	"peek",'('+0x80				; peek(x)
dba1 : 6465656ba8            	db	"deek",'('+0x80				; peek(x)
dba6 : 737469636ba8          	db	"stick",'('+0x80			; stick(x)
dbac : 676574a8              	db	"get",'('+0x80				; get(x)
dbb0 : 636872a8              	db	"chr",'('+0x80				; chr(x)
dbb4 : 6c656674a8            	db	"left",'('+0x80				; left(x$,y)
dbb9 : 7269676874a8          	db	"right",'('+0x80			; right(x$,y)
dbbf : 6d6964a8              	db	"mid",'('+0x80				; mid(x$,y)
dbc3 : 6c656ea8              	db	"len",'('+0x80				; len(x$)
dbc7 : 6d656da8              	db	"mem",'('+0x80				; mem(x)
dbcb : 7363726ea8            	db	"scrn",'('+0x80				; scrn(x,y)
dbd0 : 726e64a8              	db	"rnd",'('+0x80				; rnd(x)
dbd4 : 656c6170736564a8      	db	"elapsed",'('+0x80			; elapsed(var)
dbdc : 63616c6ca8            	db	"call",'('+0x80				; call(addr,A,X,Y)
dbe1 : 686578a8              	db	"hex",'('+0x80				; hex(x)
dbe5 : 646563a8              	db	"dec",'('+0x80				; dec(x)
dbe9 : 617363a8              	db	"asc",'('+0x80				; asc(x$)
dbed : 76616ca8              	db	"val",'('+0x80				; val(x$)
dbf1 : 706978656ca8          	db	"pixel",'('+0x80			; pixel(x,y)
dbf7 : 737072686974a8        	db	"sprhit",'('+0x80			; sprhit(sp)
dbfe : 73676ea8              	db	"sgn",'('+0x80				; sgn(x)
dc02 : 61646472a8            	db	"addr",'('+0x80				; addr(var)
                             ; Numeric operators, in priority
dc07 : aa                    	db	'*'+0x80					; Multiply
dc08 : af                    	db 	'/'+0x80					; Divide
dc09 : dc                    	db 	'\\'+0x80					; Modulus
dc0a : 3cbc                  	db	'<','<'+0x80				; Shift left
dc0c : 3ebe                  	db	'>','>'+0x80				; Shift right
dc0e : ab                    	db 	'+'+0x80					; Add
dc0f : ad                    	db	'-'+0x80					; Subtract
                             ; Bool and conditional operators, in priority
dc10 : a6                    	db '&'+0x80						; AND
dc11 : fc                    	db '|'+0x80						; OR
dc12 : de                    	db '^'+0x80						; EOR
dc13 : 3cbd                  	db "<",'='+0x80					; Less than or equal
dc15 : 3ebd                  	db ">",'='+0x80					; Greater than or equal
AS65 Assembler for R6502 [1.42].                                     Page  159
-------------------------------- bank\bank0.s --------------------------------

dc17 : 3cbe                  	db "<",'>'+0x80					; Not equal
dc19 : bc                    	db '<'+0x80						; Less than
dc1a : be                    	db '>'+0x80						; Greater than
dc1b : 3dbd                  	db "=",'='+0x80					; Equality (always last)
                             
dc1d : 00                    	db  0
                             
                             
                             	
                             	
                             	include "dflat/tkjmptab.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  TKJUMPTAB.S
                             ;*  Runtime token jump table.
                             ;*  dflat uses four key tables to tokenise and ru
                             ;*  - df_tokensyms    - table of token symbols
                             ;*  - df_tk_tokentype - table of token types
                             ;*  - df_tk_tokenjmp  - table of tokenising routi
                             ;*  - df_rt_tokenjmp  - table of runtime routines
                             ;*  The key is the token symbols.  When a line is
                             ;*  in to the raw (untokenised) buffer, df_tokens
                             ;*  used to identify tokens.  The position of the
                             ;*  token is used to then look up type and jump v
                             ;*  in the other tables.
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code  
                             
                             ; Tokeniser jump table
                             ; In token order of df_tokensyms
dc1e :                       df_tk_tokenjmp
dc1e : 6add                  	dw	df_tk_assign
dc20 : 21de                  	dw	df_tk_callproc
dc22 : 73dd                  	dw	df_tk_comment
dc24 : badd                  	dw	df_tk_println
dc26 : b4dd                  	dw	df_tk_printat
dc28 : badd                  	dw	df_tk_print
dc2a : 05de                  	dw	df_tk_def
dc2c : 5ade                  	dw	df_tk_enddef
dc2e : 5cde                  	dw	df_tk_return
dc30 : 5ade                  	dw	df_tk_abort
dc32 : f6dd                  	dw	df_tk_local
dc34 : e7dd                  	dw	df_tk_dim
dc36 : 5ade                  	dw	df_tk_repeat
dc38 : 5fde                  	dw	df_tk_until
dc3a : 0ade                  	dw	df_tk_for
dc3c : 5ade                  	dw	df_tk_next
dc3e : 5fde                  	dw	df_tk_while
dc40 : 5ade                  	dw	df_tk_wend
dc42 : 5fde                  	dw	df_tk_if
dc44 : 5ade                  	dw	df_tk_else
dc46 : 5ade                  	dw	df_tk_endif
dc48 : 5fde                  	dw	df_tk_elseif
AS65 Assembler for R6502 [1.42].                                     Page  160
-------------------------------- bank\bank0.s --------------------------------

dc4a : c1dd                  	dw	df_tk_data
dc4c : 7df8                  	dw	df_tk_asm_parse_command
dc4e : 5ade                  	dw	df_tk_run
dc50 : a3dd                  	dw	df_tk_list
dc52 : cfdd                  	dw	df_tk_input
dc54 : 5ade                  	dw	df_tk_text
dc56 : 6fde                  	dw	df_tk_plot
dc58 : 5fde                  	dw	df_tk_cursor
dc5a : 5ade                  	dw	df_tk_cls
dc5c : 65de                  	dw	df_tk_poke
dc5e : 65de                  	dw	df_tk_doke
dc60 : 6fde                  	dw	df_tk_sound
dc62 : 77de                  	dw	df_tk_music
dc64 : 77de                  	dw	df_tk_play
dc66 : 5fde                  	dw	df_tk_save
dc68 : 5fde                  	dw	df_tk_load
dc6a : d8dd                  	dw	df_tk_read
dc6c : 5ade                  	dw	df_tk_new
dc6e : 6fde                  	dw	df_tk_renum
dc70 : 5fde                  	dw	df_tk_wait
dc72 : 23de                  	dw	df_tk_reset
dc74 : 5ade                  	dw	df_tk_hires
dc76 : 65de                  	dw	df_tk_point
dc78 : 77de                  	dw	df_tk_line
dc7a : 65de                  	dw	df_tk_lineto
dc7c : 5fde                  	dw	df_tk_pixmode
dc7e : 5fde                  	dw	df_tk_ink
dc80 : 5fde                  	dw	df_tk_paper
dc82 : 6fde                  	dw	df_tk_circle
                             ;	dw	df_tk_fill
dc84 : 5fde                  	dw	df_tk_himem
dc86 : 5ade                  	dw	df_tk_monitor
dc88 : 65de                  	dw	df_tk_sprchar
dc8a : 6fde                  	dw	df_tk_sprpos
dc8c : 5ade                  	dw	df_tk_sprupd
dc8e : 5ade                  	dw	df_tk_sprinit
dc90 : 65de                  	dw	df_tk_sprmulti
dc92 : 6fde                  	dw	df_tk_bsave
dc94 : 65de                  	dw	df_tk_bload
dc96 : 5fde                  	dw	df_tk_tsave
dc98 : 5fde                  	dw	df_tk_tload
                             	
dc9a : 2dde                  	dw	df_tk_peek
dc9c : 2dde                  	dw	df_tk_deek
dc9e : 32de                  	dw	df_tk_stick
dca0 : 2dde                  	dw	df_tk_get
dca2 : 2dde                  	dw	df_tk_chr
dca4 : 40de                  	dw	df_tk_left
dca6 : 40de                  	dw	df_tk_right
dca8 : 46de                  	dw	df_tk_mid
dcaa : 2dde                  	dw	df_tk_len
dcac : 2dde                  	dw	df_tk_mem
dcae : 40de                  	dw	df_tk_scrn
dcb0 : 2dde                  	dw	df_tk_rnd
dcb2 : 37de                  	dw	df_tk_elapsed
dcb4 : 4cde                  	dw	df_tk_call
dcb6 : 2dde                  	dw	df_tk_hex
dcb8 : 2dde                  	dw	df_tk_dec
dcba : 2dde                  	dw	df_tk_asc
dcbc : 2dde                  	dw	df_tk_val
dcbe : 40de                  	dw	df_tk_pixel
dcc0 : 2dde                  	dw	df_tk_sprhit
AS65 Assembler for R6502 [1.42].                                     Page  161
-------------------------------- bank\bank0.s --------------------------------

dcc2 : 2dde                  	dw	df_tk_sgn
dcc4 : 37de                  	dw	df_tk_addr
                             	
dcc6 : 5ade                  	dw	df_tk_mult
dcc8 : 5ade                  	dw	df_tk_div
dcca : 5ade                  	dw	df_tk_mod
dccc : 5ade                  	dw	df_tk_asl
dcce : 5ade                  	dw	df_tk_lsr
dcd0 : 5ade                  	dw	df_tk_add
dcd2 : 5ade                  	dw	df_tk_sub
                             	
dcd4 : 5ade                  	dw	df_tk_and
dcd6 : 5ade                  	dw	df_tk_or
dcd8 : 5ade                  	dw	df_tk_eor
dcda : 5ade                  	dw	df_tk_lte
dcdc : 5ade                  	dw	df_tk_gte
dcde : 5ade                  	dw	df_tk_ne
dce0 : 5ade                  	dw	df_tk_lt
dce2 : 5ade                  	dw	df_tk_gt
dce4 : 5ade                  	dw	df_tk_eq
                             
                             
                             	
                             	
                             	
                             	
                             	
                             	include "dflat/tktyptab.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  RTJUMPTAB.S
                             ;*  Runtime token jump table.
                             ;*  dflat uses four key tables to tokenise and ru
                             ;*  - df_tokensyms    - table of token symbols
                             ;*  - df_tk_tokentype - table of token types
                             ;*  - df_tk_tokenjmp  - table of tokenising routi
                             ;*  - df_rt_tokenjmp  - table of runtime routines
                             ;*  The key is the token symbols.  When a line is
                             ;*  in to the raw (untokenised) buffer, df_tokens
                             ;*  used to identify tokens.  The position of the
                             ;*  token is used to then look up type and jump v
                             ;*  in the other tables.
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code  
                             
                             ; Tokeniser type table (is it a keyword, function
                             ; In token order of df_tokensyms
dce6 :                       df_tk_tokentype
dce6 : 01                    	db	DFTK_KW
dce7 : 01                    	db	DFTK_KW
dce8 : 01                    	db	DFTK_KW
dce9 : 01                    	db	DFTK_KW
dcea : 01                    	db	DFTK_KW
AS65 Assembler for R6502 [1.42].                                     Page  162
-------------------------------- bank\bank0.s --------------------------------

dceb : 01                    	db	DFTK_KW
dcec : 01                    	db	DFTK_KW
dced : 01                    	db	DFTK_KW
dcee : 01                    	db	DFTK_KW
dcef : 01                    	db	DFTK_KW
dcf0 : 01                    	db	DFTK_KW
dcf1 : 01                    	db	DFTK_KW
dcf2 : 01                    	db	DFTK_KW
dcf3 : 01                    	db	DFTK_KW
dcf4 : 01                    	db	DFTK_KW
dcf5 : 01                    	db	DFTK_KW
dcf6 : 01                    	db	DFTK_KW
dcf7 : 01                    	db	DFTK_KW
dcf8 : 01                    	db	DFTK_KW
dcf9 : 01                    	db	DFTK_KW
dcfa : 01                    	db	DFTK_KW
dcfb : 01                    	db	DFTK_KW
dcfc : 01                    	db	DFTK_KW
dcfd : 01                    	db	DFTK_KW
dcfe : 01                    	db	DFTK_KW
dcff : 01                    	db	DFTK_KW
dd00 : 01                    	db	DFTK_KW
dd01 : 01                    	db	DFTK_KW
dd02 : 01                    	db	DFTK_KW
dd03 : 01                    	db	DFTK_KW
dd04 : 01                    	db	DFTK_KW
dd05 : 01                    	db	DFTK_KW
dd06 : 01                    	db	DFTK_KW
dd07 : 01                    	db	DFTK_KW
dd08 : 01                    	db	DFTK_KW
dd09 : 01                    	db	DFTK_KW
dd0a : 01                    	db	DFTK_KW
dd0b : 01                    	db	DFTK_KW
dd0c : 01                    	db	DFTK_KW
dd0d : 01                    	db	DFTK_KW
dd0e : 01                    	db	DFTK_KW
dd0f : 01                    	db	DFTK_KW
dd10 : 01                    	db	DFTK_KW
dd11 : 01                    	db	DFTK_KW
dd12 : 01                    	db	DFTK_KW
dd13 : 01                    	db	DFTK_KW
dd14 : 01                    	db	DFTK_KW
dd15 : 01                    	db	DFTK_KW
dd16 : 01                    	db	DFTK_KW
dd17 : 01                    	db	DFTK_KW
dd18 : 01                    	db	DFTK_KW
                             ;	db	DFTK_KW
dd19 : 01                    	db	DFTK_KW
dd1a : 01                    	db	DFTK_KW
dd1b : 01                    	db	DFTK_KW
dd1c : 01                    	db	DFTK_KW
dd1d : 01                    	db	DFTK_KW
dd1e : 01                    	db	DFTK_KW
dd1f : 01                    	db	DFTK_KW
dd20 : 01                    	db	DFTK_KW
dd21 : 01                    	db	DFTK_KW
dd22 : 01                    	db	DFTK_KW
dd23 : 01                    	db	DFTK_KW
                             
dd24 : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
dd25 : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
dd26 : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
AS65 Assembler for R6502 [1.42].                                     Page  163
-------------------------------- bank\bank0.s --------------------------------

dd27 : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
dd28 : 42                    	db 	DFTK_FN | DFTK_STR
dd29 : 42                    	db 	DFTK_FN | DFTK_STR
dd2a : 42                    	db 	DFTK_FN | DFTK_STR
dd2b : 42                    	db 	DFTK_FN | DFTK_STR
dd2c : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
dd2d : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
dd2e : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
dd2f : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
dd30 : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
dd31 : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
dd32 : 42                    	db 	DFTK_FN | DFTK_STR
dd33 : 42                    	db 	DFTK_FN | DFTK_STR
dd34 : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
dd35 : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
dd36 : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
dd37 : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
dd38 : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
dd39 : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
                             	;* Operators add the order of precedence (0=high
dd3a : 38                    	db 	DFTK_OP | DFTK_INT | DFTK_BYT + 0
dd3b : 38                    	db 	DFTK_OP | DFTK_INT | DFTK_BYT + 0
dd3c : 38                    	db 	DFTK_OP | DFTK_INT | DFTK_BYT + 0
dd3d : 39                    	db 	DFTK_OP | DFTK_INT | DFTK_BYT + 1
dd3e : 39                    	db 	DFTK_OP | DFTK_INT | DFTK_BYT + 1
dd3f : 3e                    	db 	DFTK_OP | DFTK_STROP | DFTK_INT | DFTK_BYT +
dd40 : 3a                    	db 	DFTK_OP | DFTK_INT | DFTK_BYT + 2
                             
dd41 : 3d                    	db 	DFTK_OP | DFTK_INT | DFTK_BYT + 5
dd42 : 3d                    	db 	DFTK_OP | DFTK_INT | DFTK_BYT + 5
dd43 : 3d                    	db 	DFTK_OP | DFTK_INT | DFTK_BYT + 5
dd44 : 3c                    	db 	DFTK_OP | DFTK_INT | DFTK_BYT + 4
dd45 : 3c                    	db 	DFTK_OP | DFTK_INT | DFTK_BYT + 4
dd46 : 3c                    	db 	DFTK_OP | DFTK_INT | DFTK_BYT + 4
dd47 : 3c                    	db 	DFTK_OP | DFTK_INT | DFTK_BYT + 4
dd48 : 3c                    	db 	DFTK_OP | DFTK_INT | DFTK_BYT + 4
dd49 : 3f                    	db 	DFTK_OP | DFTK_INT | DFTK_BYT + 7
                             
                             
                             	
                             	
                             	
                             	
                             
                             	include "dflat/toksubs.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  TOKSUBS.S
                             ;*  Module that implements the tokenisation of ke
                             ;*  When a line is being parsed, the index of the
                             ;*  found in the symbol table is used to call a r
                             ;*  here.  The job of a routine here is then to f
                             ;*  parse the raw input e.g. a command that takes
                             ;*  parameters, need to do what it needs to ident
                             ;*  Despite the number of keywords in dflat, this
                             ;*  anywhere near the size of rtsubs.s (the runti
AS65 Assembler for R6502 [1.42].                                     Page  164
-------------------------------- bank\bank0.s --------------------------------

                             ;*  equivalent of this) because there is so much 
                             ;*  synactically.
                             ;*  The tokenised output is put in to its own buf
                             ;*  if the whole input was tokenised successfully
                             ;*  dflat will either try and execute (if in imme
                             ;*  mode), or save it to program memory in line n
                             ;*  order.
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code  
                             
dd4a :                       mod_sz_toksubs_s
                             
                             ;* General routine to tokenise a mandatory variab
dd4a :                       df_tk_variable
dd4a : 20f1d6           [ 6] 	jsr df_tk_skip_ws
                             	; tokenise a variable
dd4d : 208fd6           [ 6] 	jsr df_tk_peek_buf
dd50 : 20d8d6           [ 6] 	jsr df_tk_isalpha
dd53 : 9013             [ 3] 	bcc df_tk_error
dd55 : a900             [ 2] 	lda #0
dd57 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Parse assignment preamble
                             ;****************************************
dd58 :                       df_tk_preassign
                             	; Put assignment token
                             	; assume its a numeric int for now
dd58 : a980             [ 2] 	lda #0x80
dd5a : 20a0d6           [ 6] 	jsr df_tk_put_tok
                             	
                             	; first find or create a variable
dd5d : 204add           [ 6] 	jsr df_tk_variable
dd60 : 20cbd7           [ 6] 	jsr df_tk_var
                             	; next char should be '='
dd63 : a93d             [ 2] 	lda #'='
dd65 : 4c20d7           [ 3] 	jmp df_tk_expect_tok_err
                             
dd68 :                       df_tk_error
                             	SWBRK DFERR_SYNTAX
                             
                             
                             ;****************************************
                             ;* Parse numeric assignment
                             ;****************************************
dd6a :                       df_tk_assign
dd6a : 2058dd           [ 6] 	jsr df_tk_preassign
                             	; tokenise an expression (int or byte)
dd6d : 2012d9           [ 6] 	jsr df_tk_expression
dd70 : b0f6             [ 3] 	bcs df_tk_error
dd72 : 60               [ 6] 	rts
                             
dd73 :                       df_tk_comment
                             	; copy all subsequent chars to token
dd73 : 2095d6           [ 6] 	jsr df_tk_get_buf
dd76 : f006             [ 3] 	beq df_tk_comment_done
dd78 : 20a0d6           [ 6] 	jsr df_tk_put_tok
dd7b : 4c73dd           [ 3] 	jmp df_tk_comment
dd7e :                       df_tk_comment_done
AS65 Assembler for R6502 [1.42].                                     Page  165
-------------------------------- bank\bank0.s --------------------------------

dd7e : 18               [ 2] 	clc
dd7f : 60               [ 6] 	rts
                             
                             ; Utility to get procedure name with _
dd80 :                       df_tk_listp_procname
                             	; try and find the first proc
dd80 : a95f             [ 2] 	lda #'_'
dd82 : 2015d7           [ 6] 	jsr df_tk_expect_tok
dd85 : b01a             [ 3] 	bcs df_tk_listp_procname_err
                             	; now get first alpha then all alphanum
dd87 : 208fd6           [ 6] 	jsr df_tk_peek_buf
dd8a : 20d8d6           [ 6] 	jsr df_tk_isalpha
dd8d : 9012             [ 3] 	bcc df_tk_listp_procname_err
dd8f :                       df_tk_listp_procname_ch
dd8f : 208fd6           [ 6] 	jsr df_tk_peek_buf
dd92 : 20e5d6           [ 6] 	jsr df_tk_isalphanum
dd95 : 9009             [ 3] 	bcc df_tk_listp_procname_ok
dd97 : 2095d6           [ 6] 	jsr df_tk_get_buf
dd9a : 20a0d6           [ 6] 	jsr df_tk_put_tok
dd9d : 4c8fdd           [ 3] 	jmp df_tk_listp_procname_ch
dda0 :                       df_tk_listp_procname_ok
dda0 : 60               [ 6] 	rts		; C=0
dda1 :                       df_tk_listp_procname_err
dda1 : 38               [ 2] 	sec
dda2 : 60               [ 6] 	rts
                             
                             ; list		: list whole program
                             ; list n	: list line n to end
                             ; list *	: list all procedures
                             ; list _proc: list _proc lines
dda3 :                       df_tk_list
dda3 : 2080dd           [ 6] 	jsr df_tk_listp_procname
dda6 : 900b             [ 3] 	bcc df_tk_list_done
                             	; if not found try '*' or normal list
dda8 :                       df_tk_list_procs
                             	; first try for list symbol
dda8 : a92a             [ 2] 	lda #'*'
ddaa : 2015d7           [ 6] 	jsr df_tk_expect_tok
ddad : 9004             [ 3] 	bcc df_tk_list_done
                             	; else normal line number or nothing
ddaf :                       df_tk_list_line
                             	; tokenise an expression, nothing is ok
ddaf : 2012d9           [ 6] 	jsr df_tk_expression
ddb2 : 18               [ 2] 	clc
ddb3 :                       df_tk_list_done
ddb3 : 60               [ 6] 	rts
                             
                             ; printat,print,println can have 0,1 or many expr
ddb4 :                       df_tk_printat
                             	; Must get 2 parms for x,y
ddb4 : 2065de           [ 6] 	jsr df_tk_2parms
                             	; try getting more parms
ddb7 : 4cc6dd           [ 3] 	jmp df_tk_expr_more
ddba :                       df_tk_println
ddba :                       df_tk_print
                             	; tokenise an expression ok if null
ddba : 2012d9           [ 6] 	jsr df_tk_expression
ddbd : 9007             [ 3] 	bcc df_tk_expr_more
ddbf :                       df_tk_print_done
ddbf :                       df_tk_data_done
ddbf : 18               [ 2] 	clc
ddc0 : 60               [ 6] 	rts
AS65 Assembler for R6502 [1.42].                                     Page  166
-------------------------------- bank\bank0.s --------------------------------

                             
                             ; these must have 1 or more expressions
ddc1 :                       df_tk_data
ddc1 :                       df_tk_asm_db
ddc1 :                       df_tk_asm_dw
ddc1 :                       df_tk_next_expr
                             	; tokenise an expression
ddc1 : 2012d9           [ 6] 	jsr df_tk_expression
ddc4 : b065             [ 4] 	bcs df_tk_error2
                             ; this loop keeps processing comma seprated exore
ddc6 :                       df_tk_expr_more
                             	; is there more to come?
ddc6 : a92c             [ 2] 	lda #','
ddc8 : 2015d7           [ 6] 	jsr df_tk_expect_tok
ddcb : b0f2             [ 3] 	bcs df_tk_data_done
ddcd : 90f2             [ 3] 	bcc df_tk_next_expr
                             
ddcf :                       df_tk_input
ddcf : 20f1d6           [ 6] 	jsr df_tk_skip_ws
                             	; tokenise a variable
ddd2 : 204add           [ 6] 	jsr df_tk_variable
ddd5 : 4ccbd7           [ 3] 	jmp df_tk_var
                             	
ddd8 :                       df_tk_read
                             	; tokenise a variable
ddd8 : 204add           [ 6] 	jsr df_tk_variable
dddb : 20cbd7           [ 6] 	jsr df_tk_var
                             	; if not at the end then keep going
ddde : a92c             [ 2] 	lda #','
dde0 : 2015d7           [ 6] 	jsr df_tk_expect_tok
dde3 : 90f3             [ 3] 	bcc df_tk_read
dde5 : 18               [ 2] 	clc
dde6 : 60               [ 6] 	rts
                             
dde7 :                       df_tk_dim
                             	; tokenise a variable
dde7 : 204add           [ 6] 	jsr df_tk_variable
ddea : 2013d8           [ 6] 	jsr df_tk_arrvar
                             	; if not at the end then keep going
dded : a92c             [ 2] 	lda #','
ddef : 2015d7           [ 6] 	jsr df_tk_expect_tok
ddf2 : 90f3             [ 3] 	bcc df_tk_dim
ddf4 : 18               [ 2] 	clc
ddf5 : 60               [ 6] 	rts
                             
ddf6 :                       df_tk_local
                             	; tokenise a variable
ddf6 : 204add           [ 6] 	jsr df_tk_variable
ddf9 : 20fdd7           [ 6] 	jsr df_tk_localvar
                             	; if not at the end then keep going
ddfc : a92c             [ 2] 	lda #','
ddfe : 2015d7           [ 6] 	jsr df_tk_expect_tok
de01 : 90f3             [ 4] 	bcc df_tk_local
de03 : 18               [ 2] 	clc
de04 : 60               [ 6] 	rts
                             
                             ; A = 0 : Def
                             ; A = 1 : Call
de05 :                       df_tk_def
de05 : a900             [ 2] 	lda #0
de07 : 4c1ed8           [ 3] 	jmp df_tk_proc
                             
AS65 Assembler for R6502 [1.42].                                     Page  167
-------------------------------- bank\bank0.s --------------------------------

                             ; syntax : for a=1,10,1
de0a :                       df_tk_for
de0a : 20f1d6           [ 6] 	jsr df_tk_skip_ws
                             
                             	; tokenise the for variable
de0d : a901             [ 2] 	lda #DFVVT_INT
de0f : 20cbd7           [ 6] 	jsr df_tk_var
                             
                             	; always expect '='
                             	; then starting value
de12 : a93d             [ 2] 	lda #'='
de14 : 201ed9           [ 6] 	jsr df_tk_tok_expression
                             	
                             	; always expect ',' separator
                             	; then ending value
de17 : a92c             [ 2] 	lda #','
de19 : 201ed9           [ 6] 	jsr df_tk_tok_expression
                             
                             	; always expect ',' separator
                             	; then step value
de1c : a92c             [ 2] 	lda #','
de1e : 4c1ed9           [ 3] 	jmp df_tk_tok_expression
                             
                             	
                             ; call to proc should not occur by itself
de21 :                       df_tk_callproc
de21 : 38               [ 2] 	sec
de22 : 60               [ 6] 	rts
                             
                             ; timer reset expects an int variable only
de23 :                       df_tk_reset
de23 : 20f1d6           [ 6] 	jsr df_tk_skip_ws
                             
                             	; tokenise a variable
de26 : a901             [ 2] 	lda #DFVVT_INT
de28 : 4ccbd7           [ 3] 	jmp df_tk_var
                             
de2b :                       df_tk_error2
                             	SWBRK DFERR_SYNTAX
                             
                             
                             ; These functions expect 1 parmeter
de2d :                       df_tk_len
de2d :                       df_tk_chr
de2d :                       df_tk_get
de2d :                       df_tk_deek
de2d :                       df_tk_vpeek
de2d :                       df_tk_peek
de2d :                       df_tk_mem
de2d :                       df_tk_rnd
de2d :                       df_tk_hex
de2d :                       df_tk_dec
de2d :                       df_tk_asc
de2d :                       df_tk_val
de2d :                       df_tk_sprhit
de2d :                       df_tk_sgn
de2d : 2012d9           [ 6] 	jsr df_tk_expression
de30 : b0f9             [ 3] 	bcs df_tk_error2
de32 :                       df_tk_closebrkt
de32 :                       df_tk_stick				; This function needs no parms
de32 : a929             [ 2] 	lda #')'
de34 : 4c20d7           [ 3] 	jmp df_tk_expect_tok_err
AS65 Assembler for R6502 [1.42].                                     Page  168
-------------------------------- bank\bank0.s --------------------------------

                             
                             ; These function expect a variable only
de37 :                       df_tk_addr
de37 :                       df_tk_elapsed
de37 : 204add           [ 6] 	jsr df_tk_variable
de3a : 20cbd7           [ 6] 	jsr df_tk_var
                             	; must have close braket
de3d : 4c32de           [ 3] 	jmp df_tk_closebrkt
                             
                             ; These functions expect 2 parameters
de40 :                       df_tk_left
de40 :                       df_tk_right
de40 :                       df_tk_scrn
de40 :                       df_tk_pixel
de40 : 2065de           [ 6] 	jsr df_tk_2parms
de43 : 4c32de           [ 3] 	jmp df_tk_closebrkt
                             
                             ; These functions expect 3 parameters
de46 :                       df_tk_mid
de46 : 206fde           [ 6] 	jsr df_tk_3parms
de49 : 4c32de           [ 3] 	jmp df_tk_closebrkt
                             
                             ; These functions expect 4 parameters
de4c :                       df_tk_call
de4c : 2065de           [ 6] 	jsr df_tk_2parms
de4f : a92c             [ 2] 	lda #','
de51 : 2020d7           [ 6] 	jsr df_tk_expect_tok_err
de54 : 2065de           [ 6] 	jsr df_tk_2parms
de57 : 4c32de           [ 3] 	jmp df_tk_closebrkt
                             
                             ;all these commands require no parameters
de5a :                       df_tk_else
de5a :                       df_tk_endif
de5a :                       df_tk_enddef
de5a :                       df_tk_abort
de5a :                       df_tk_repeat
de5a :                       df_tk_next
de5a :                       df_tk_wend
de5a :                       df_tk_run
de5a :                       df_tk_dir
de5a :                       df_tk_cls
de5a :                       df_tk_new
de5a :                       df_tk_mult
de5a :                       df_tk_div
de5a :                       df_tk_mod
de5a :                       df_tk_asl
de5a :                       df_tk_lsr
de5a :                       df_tk_add
de5a :                       df_tk_sub
de5a :                       df_tk_and
de5a :                       df_tk_or
de5a :                       df_tk_eor
de5a :                       df_tk_lte
de5a :                       df_tk_lt
de5a :                       df_tk_gte
de5a :                       df_tk_gt
de5a :                       df_tk_ne
de5a :                       df_tk_eq
de5a :                       df_tk_monitor
de5a :                       df_tk_sprupd
de5a :                       df_tk_sprinit
de5a :                       df_tk_text
AS65 Assembler for R6502 [1.42].                                     Page  169
-------------------------------- bank\bank0.s --------------------------------

de5a :                       df_tk_hires
de5a : 18               [ 2] 	clc
de5b : 60               [ 6] 	rts
                             
                             ; 0 or 1 parameter special!
de5c :                       df_tk_return
de5c : 4c12d9           [ 3] 	jmp df_tk_expression
                             
                             
                             ; These commands expect 1 parameter	
de5f :                       df_tk_while
de5f :                       df_tk_until
de5f :                       df_tk_if
de5f :                       df_tk_elseif
de5f :                       df_tk_wait
de5f :                       df_tk_cursor
de5f :                       df_tk_del
de5f :                       df_tk_chdir
de5f :                       df_tk_load
de5f :                       df_tk_save
de5f :                       df_tk_tload
de5f :                       df_tk_tsave
de5f :                       df_tk_pixmode
de5f :                       df_tk_ink
de5f :                       df_tk_paper
de5f :                       df_tk_himem
                             
de5f :                       df_tk_asm_org
de5f :                       df_tk_asm_opt
de5f :                       df_tk_asm_ds
                             
                             	; first parm
de5f : 2012d9           [ 6] 	jsr df_tk_expression
de62 : b0c7             [ 3] 	bcs df_tk_error2
de64 : 60               [ 6] 	rts
                             
                             ; These commands expect 2 numeric parameters
de65 :                       df_tk_poke
de65 :                       df_tk_doke
de65 :                       df_tk_point
de65 :                       df_tk_sprchar
de65 :                       df_tk_sprmulti
de65 :                       df_tk_bload
de65 :                       df_tk_lineto
de65 :                       df_tk_2parms
                             	; first parm
de65 : 2012d9           [ 6] 	jsr df_tk_expression
de68 : b0c1             [ 3] 	bcs df_tk_error2
                             	; tokenise second parm
de6a : a92c             [ 2] 	lda #','
de6c : 4c1ed9           [ 3] 	jmp df_tk_tok_expression
                             
                             ; these commands expect 3 numeric parameters
de6f :                       df_tk_hchar
de6f :                       df_tk_plot
de6f :                       df_tk_circle
de6f :                       df_tk_sound
de6f :                       df_tk_colour
de6f :                       df_tk_spritepos
de6f :                       df_tk_renum
de6f :                       df_tk_sprpos
de6f :                       df_tk_bsave
AS65 Assembler for R6502 [1.42].                                     Page  170
-------------------------------- bank\bank0.s --------------------------------

de6f :                       df_tk_3parms
de6f : 2065de           [ 6] 	jsr df_tk_2parms
                             	; tokenise third parm
de72 : a92c             [ 2] 	lda #','
de74 : 4c1ed9           [ 3] 	jmp df_tk_tok_expression
                             
                             ; these commands expect 4 numeric parameters
de77 :                       df_tk_play
de77 :                       df_tk_music
de77 :                       df_tk_line
de77 :                       df_tk_4parms
de77 : 2065de           [ 6] 	jsr df_tk_2parms
de7a : a92c             [ 2] 	lda #','
de7c : 2020d7           [ 6] 	jsr df_tk_expect_tok_err
de7f : 4c65de           [ 3] 	jmp df_tk_2parms
                             
                             ;df_tk_fill
                             ;df_tk_5parms
                             ;	jsr df_tk_3parms
                             ;	lda #','
                             ;	jsr df_tk_expect_tok_err
                             ;	jmp df_tk_2parms
                             
de82 :                       mod_sz_toksubs_e
                             
                             
de82 :                       mod_sz_tokenise_e
                             
                             
                             
                             	include "dflat/progedit.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  PROGEDIT.S
                             ;*  dflat module to enable editing of a dflat pro
                             ;*  dflat bascially starts here - waiting for use
                             ;*  when a line is entered, if it is not preceede
                             ;*  line number it is tokenised and attempted to 
                             ;*  immediatly.  If it is preceeded by a line num
                             ;*  number is used to save the tokenised line in 
                             ;*  position in memory.
                             ;*  So this is just like a good old editing sessi
                             ;*  nearly any common flavour of 80s basic. Howev
                             ;*  tokenises everything except whitespace and st
                             ;*  constants - even when saving.  Unlike my trus
                             ;*  where I could type in any garbage and it woul
                             ;*  saved with the line number, dflat needs to be
                             ;*  tokenise the line.  So it's actually a bit mo
                             ;*  Atari 8 bit BASIC.
                             ;*
                             ;************************************************
                             
de82 :                       mod_sz_progedit_s
                             
                             ;****************************************
                             ;* df_pg_find_line
AS65 Assembler for R6502 [1.42].                                     Page  171
-------------------------------- bank\bank0.s --------------------------------

                             ;* Find a line number in X(L), A(H)
                             ;* Return X(L), A(H) of line, Y = Length
                             ;* C=1 Exact match not found, C=0 Exact Found
                             ;* If not exact match then next highest line addr
                             ;* Will be in X and A
                             ;****************************************
de82 :                       df_pg_find_line
de82 : 863d             [ 3] 	stx num_a
de84 : 853e             [ 3] 	sta num_a+1
de86 : a565             [ 3] 	lda df_prgstrt
de88 : 8549             [ 3] 	sta num_tmp
de8a : a566             [ 3] 	lda df_prgstrt+1
de8c : 854a             [ 3] 	sta num_tmp+1
de8e :                       df_pg_check_next_line
de8e : a549             [ 3] 	lda num_tmp
de90 : c567             [ 3] 	cmp df_prgend
de92 : d011             [ 3] 	bne df_pg_check_line
de94 : a54a             [ 3] 	lda num_tmp+1
de96 : c568             [ 3] 	cmp df_prgend+1
de98 : d00b             [ 3] 	bne df_pg_check_line
de9a :                       df_pr_line_gt_target	
                             	; End of program or line > target
                             	; X,A = address of finish
                             	; Load Y with the length
de9a : a200             [ 2] 	ldx #0
de9c : a149             [ 6] 	lda (num_tmp,x)
de9e : a8               [ 2] 	tay
de9f : a649             [ 3] 	ldx num_tmp
dea1 : a54a             [ 3] 	lda num_tmp+1
dea3 : 38               [ 2] 	sec
dea4 : 60               [ 6] 	rts
dea5 :                       df_pg_check_line
dea5 : 38               [ 2] 	sec					; Do a trial subtract of
dea6 : a001             [ 2] 	ldy #DFTK_LINNUM	; target - line
dea8 : a53d             [ 3] 	lda num_a
deaa : f149             [ 5] 	sbc (num_tmp),y
deac : 854b             [ 3] 	sta num_tmp+2		; Partial result of sbc
deae : c8               [ 2] 	iny
deaf : a53e             [ 3] 	lda num_a+1
deb1 : f149             [ 5] 	sbc (num_tmp),y
deb3 : 054b             [ 3] 	ora num_tmp+2		; or with partial result for z ch
                             	; If C=0 then line > target (done)
deb5 : 90e3             [ 3] 	bcc df_pr_line_gt_target
                             	; If partial result Z=0 then got an exact match
deb7 : f00f             [ 3] 	beq df_pr_line_match
                             	; Else we go to next line
deb9 : a200             [ 2] 	ldx #0
debb : 18               [ 2] 	clc
debc : a549             [ 3] 	lda num_tmp
debe : 6149             [ 6] 	adc (num_tmp,x)
dec0 : 8549             [ 3] 	sta num_tmp
dec2 : 90ca             [ 3] 	bcc df_pg_check_next_line
dec4 : e64a             [ 5] 	inc num_tmp+1
dec6 : d0c6             [ 3] 	bne df_pg_check_next_line	; Always
dec8 :                       df_pr_line_match
dec8 : a200             [ 2] 	ldx #0
deca : a149             [ 6] 	lda (num_tmp,x)
decc : a8               [ 2] 	tay
decd : a649             [ 3] 	ldx num_tmp
decf : a54a             [ 3] 	lda num_tmp+1
ded1 : 18               [ 2] 	clc
ded2 : 60               [ 6] 	rts
AS65 Assembler for R6502 [1.42].                                     Page  172
-------------------------------- bank\bank0.s --------------------------------

                             	
                             ;****************************************
                             ;* df_pg_insert_block
                             ;* Insert a block at adr (X, A) of size Y
                             ;* df_prgend updated
                             ;* C=1 Error, C=0 Ok
                             ;****************************************
ded3 :                       df_pg_insert_block
                             	; Inserting requires a block copy from
                             	; end of program space to the insert address
                             	
                             	; Save address as this is the lowest address
ded3 : 863d             [ 3] 	stx num_a
ded5 : 853e             [ 3] 	sta num_a+1
                             	; End of program space is the first byte to move
ded7 : a567             [ 3] 	lda df_prgend
ded9 : 8545             [ 3] 	sta num_x
dedb : a568             [ 3] 	lda df_prgend+1
dedd : 8546             [ 3] 	sta num_x+1	
dedf :                       df_pg_insert_byte
                             	; Move a byte from the current top
dedf : a200             [ 2] 	ldx #0
dee1 : a145             [ 6] 	lda (num_x,x)
                             	; To the new top (+Y)
dee3 : 9145             [ 5] 	sta (num_x),y
                             	; Compare current address with lowest
dee5 : a545             [ 3] 	lda num_x
dee7 : c53d             [ 3] 	cmp num_a
dee9 : d012             [ 3] 	bne df_pg_insert_next_byte
deeb : a546             [ 3] 	lda num_x+1
deed : c53e             [ 3] 	cmp num_a+1
deef : d00c             [ 3] 	bne df_pg_insert_next_byte
                             	; Finished, update program end pointer
def1 : 18               [ 2] 	clc
def2 : 98               [ 2] 	tya
def3 : 6567             [ 3] 	adc df_prgend
def5 : 8567             [ 3] 	sta df_prgend
                             	_bcc 2
                             
def9 : e668             [ 5] 	inc df_prgend+1
defb : 18               [ 2] 	clc
defc : 60               [ 6] 	rts	; C=0
defd :                       df_pg_insert_next_byte
                             	; Decrement current address (trashes A)
                             	_decZPWordA num_x
                             
df05 : 4cdfde           [ 3] 	jmp df_pg_insert_byte
                             
                             ;****************************************
                             ;* df_pg_delete_block
                             ;* Delete a block at adr (X, A) of size Y
                             ;* df_prgend updated
                             ;* C=1 Error, C=0 Ok
                             ;****************************************
df08 :                       df_pg_delete_block
                             	; Deleting requires a block copy from
                             	; deletion address to end of program
                             	
                             	; Save address as this is the start address
df08 : 863d             [ 3] 	stx num_a
df0a : 853e             [ 3] 	sta num_a+1
df0c : a200             [ 2] 	ldx #0	; No indirect indexing
AS65 Assembler for R6502 [1.42].                                     Page  173
-------------------------------- bank\bank0.s --------------------------------

df0e :                       df_pg_delete_byte
                             	; Move a byte from current+Y
df0e : b13d             [ 5] 	lda (num_a),y
                             	; Down to current (x=0)
df10 : 813d             [ 6] 	sta (num_a,x)
                             	; Compare current address with lowest
df12 : a53d             [ 3] 	lda num_a
df14 : c567             [ 3] 	cmp df_prgend
df16 : d017             [ 3] 	bne df_pg_delete_next_byte
df18 : a53e             [ 3] 	lda num_a+1
df1a : c568             [ 3] 	cmp df_prgend+1
df1c : d011             [ 3] 	bne df_pg_delete_next_byte
                             	; Finished, update program end pointer
df1e : 843d             [ 3] 	sty num_a
df20 : 38               [ 2] 	sec
df21 : a567             [ 3] 	lda df_prgend
df23 : e53d             [ 3] 	sbc num_a
df25 : 8567             [ 3] 	sta df_prgend
df27 : a568             [ 3] 	lda df_prgend+1
df29 : e900             [ 2] 	sbc #0
df2b : 8568             [ 3] 	sta df_prgend+1
df2d : 18               [ 2] 	clc
df2e : 60               [ 6] 	rts
df2f :                       df_pg_delete_next_byte
                             	; Increment current address
                             	_incZPWord num_a
                             
df35 : 4c0edf           [ 3] 	jmp df_pg_delete_byte
                             
                             
                             ;****************************************
                             ;* Get a line of input
                             ;* Input: C=1 for echo, 0 for no echo
                             ;* Output: C=0 means linbuff is valid
                             ;****************************************
df38 :                       df_pg_inputline
                             	; C is set on input for echo or not
                             	; Read a line of input
df38 : 2052c4           [ 6] 	jsr io_read_line
                             	
                             	; If nothing entered then sec
df3b : 98               [ 2] 	tya
df3c : d002             [ 3] 	bne df_pg_inputline_ok
df3e : 38               [ 2] 	sec
df3f : 60               [ 6] 	rts
df40 :                       df_pg_inputline_ok
                             	; Copy input bytes to line buffer
                             	; for lexical analysis
df40 :                       df_pg_copyinputtolinbuff
df40 : b139             [ 5] 	lda (buf_lo),y
df42 : 990004           [ 5] 	sta df_linbuff,y
df45 : 88               [ 2] 	dey
df46 : 10f8             [ 3] 	bpl df_pg_copyinputtolinbuff
df48 : 18               [ 2] 	clc
df49 : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* df_pg_dflat
                             ;* Start a dflat editing session
                             ;****************************************
df4a :                       df_pg_dflat
AS65 Assembler for R6502 [1.42].                                     Page  174
-------------------------------- bank\bank0.s --------------------------------

                             	; reset stack pointer
df4a : a2ff             [ 2] 	ldx #255
df4c : 9a               [ 2] 	txs
                             
                             	; error handler address
df4d : a99b             [ 2] 	lda #lo(df_trap_error)
df4f : 8560             [ 3] 	sta df_pc
df51 : a9f7             [ 2] 	lda #hi(df_trap_error)
df53 : 8561             [ 3] 	sta df_pc+1
                             	
                             	; make sure normal I/O is resumed
                             	;jsr io_init_default
df55 :                       df_pg_prompt
df55 : a2ec             [ 2] 	ldx #lo(df_pg_prompt_msg)
df57 : a9df             [ 2] 	lda #hi(df_pg_prompt_msg)
df59 : 208bc4           [ 6] 	jsr io_print_line
df5c : a900             [ 2] 	lda #0
df5e : 855e             [ 3] 	sta df_immed
df60 :                       df_pg_getcommand
                             	; current line is the token buffer when editing
df60 : a980             [ 2] 	lda #lo(df_tokbuff)
df62 : 8586             [ 3] 	sta df_currlin
df64 : a904             [ 2] 	lda #hi(df_tokbuff)
df66 : 8587             [ 3] 	sta df_currlin+1
df68 : 38               [ 2] 	sec
df69 : 2038df           [ 6] 	jsr df_pg_inputline
df6c : b0e7             [ 3] 	bcs df_pg_prompt	; If no input then back to prom
df6e : 2089df           [ 6] 	jsr df_pg_tokenise
df71 : a55e             [ 3] 	lda df_immed
df73 : f0eb             [ 3] 	beq df_pg_getcommand
                             	; clear variables ready to run the statement
df75 : 20f3df           [ 6] 	jsr df_initrun
                             	; run from tokbuff
df78 : a280             [ 2] 	ldx #lo(df_tokbuff)
df7a : a904             [ 2] 	lda #hi(df_tokbuff)
                             	; always skip length and line number
df7c : a003             [ 2] 	ldy #3
df7e : 8488             [ 3] 	sty df_exeoff
                             	; init currlin
df80 : 2069e3           [ 6] 	jsr df_rt_init_stat_ptr
                             	; start execution
df83 : 207ce3           [ 6] 	jsr df_rt_exec_stat
                             	; Go and get another line of input
df86 : 4c55df           [ 3] 	jmp df_pg_prompt
                             
                             	; tokenise the line
df89 :                       df_pg_tokenise
df89 : a900             [ 2] 	lda #0
df8b : 855d             [ 3] 	sta errno
df8d : 2056d9           [ 6] 	jsr df_lexer_line
                             	; check if line number == 0
df90 : ad8104           [ 4] 	lda df_tokbuff+DFTK_LINNUM
df93 : d00f             [ 3] 	bne df_pg_line_number
df95 : ad8204           [ 4] 	lda df_tokbuff+DFTK_LINNUM+1
df98 : d00a             [ 3] 	bne df_pg_line_number
                             	; check if line empty
df9a : ad8004           [ 4] 	lda df_tokbuff
df9d : f004             [ 3] 	beq df_pg_nothing
                             	
                             	; line number == 0 so in immediate mode from tok
                             	; don't zero out the line length as some routine
                             	; run the line in immediate mode
AS65 Assembler for R6502 [1.42].                                     Page  175
-------------------------------- bank\bank0.s --------------------------------

df9f : a901             [ 2] 	lda #1
dfa1 : 855e             [ 3] 	sta df_immed
dfa3 :                       df_pg_nothing
dfa3 : 60               [ 6] 	rts
                             
                             	; put the numbered line in to the right bit of m
dfa4 :                       df_pg_line_number
                             	; Check if this line exists
dfa4 : ad8104           [ 4] 	lda df_tokbuff+DFTK_LINNUM
dfa7 : aa               [ 2] 	tax
dfa8 : ad8204           [ 4] 	lda df_tokbuff+DFTK_LINNUM+1
dfab : 2082de           [ 6] 	jsr df_pg_find_line
                             	; Save line address for later X then A
dfae : 8538             [ 3] 	sta tmp_d
dfb0 : 8a               [ 2] 	txa
dfb1 : 48               [ 3] 	pha
dfb2 : a538             [ 3] 	lda tmp_d
dfb4 : 48               [ 3] 	pha
                             	; If line exists then it needs deleting
dfb5 : b003             [ 3] 	bcs df_pg_skip_del_line
                             
                             	; delete line from program
dfb7 : 2008df           [ 6] 	jsr df_pg_delete_block
dfba :                       df_pg_skip_del_line
                             	; If line length is zero
                             	; then nothing else to do (i.e. line was deleted
dfba : ad8004           [ 4] 	lda df_tokbuff+DFTK_LINLEN
                             	; save the tokenised line length
dfbd : 48               [ 3] 	pha
dfbe : d004             [ 3] 	bne df_pg_insertline
                             	; Length was zero, so get temp stuff off stack
dfc0 : 68               [ 4] 	pla
dfc1 : 68               [ 4] 	pla
dfc2 : 68               [ 4] 	pla
dfc3 : 60               [ 6] 	rts
                             
                             	; insert a program line unless it is immediate
dfc4 :                       df_pg_insertline
                             	; Restore previously saved length
dfc4 : 68               [ 4] 	pla
dfc5 : a8               [ 2] 	tay
                             	; Restore previously saved address to reinsert t
dfc6 : 68               [ 4] 	pla
dfc7 : 8538             [ 3] 	sta tmp_d
dfc9 : 68               [ 4] 	pla
dfca : aa               [ 2] 	tax
dfcb : a538             [ 3] 	lda tmp_d
                             	; And save it all back to stack again A,X,Y
                             	_pushAXY
                             
                             	; We now have insert address and length
dfd6 : 20d3de           [ 6] 	jsr df_pg_insert_block
                             	; Restore length and sub 1 to get index in to th
dfd9 : 68               [ 4] 	pla
dfda : a8               [ 2] 	tay
dfdb : 88               [ 2] 	dey
                             	; Restore address to a pointer, X is pulled firs
dfdc : 68               [ 4] 	pla
dfdd : aa               [ 2] 	tax
dfde : 863d             [ 3] 	stx num_a
dfe0 : 68               [ 4] 	pla
dfe1 : 853e             [ 3] 	sta num_a+1
AS65 Assembler for R6502 [1.42].                                     Page  176
-------------------------------- bank\bank0.s --------------------------------

                             	; num_a is destination, tokbuff is source, Y is 
dfe3 :                       df_pg_insertlinbyte
dfe3 : b98004           [ 4] 	lda df_tokbuff,y
dfe6 : 913d             [ 5] 	sta (num_a),y
dfe8 : 88               [ 2] 	dey
dfe9 : 10f8             [ 3] 	bpl df_pg_insertlinbyte
dfeb : 60               [ 6] 	rts
                             	
dfec :                       df_pg_prompt_msg
dfec : 52656164790d00        	db "Ready",UTF_CR,0
                             
dff3 :                       mod_sz_progedit_e
                             
                             	include "dflat/runtime.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  RUNTIME.S
                             ;*  This module is the runtime coordinator.  When
                             ;*  wants to run a program, execution of statemen
                             ;*  required procedure starts and proceeds from t
                             ;*  according to normal program flow.
                             ;*  This module also contains critical routines f
                             ;*  evaluation of expressions (numeric and string
                             ;*  Whilst the code to implement a specific comma
                             ;*  rtsubs.s, this is the key module that control
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code
                             
dff3 :                       mod_sz_runtime_s
                             
                             ;****************************************
                             ;* df_initrun
                             ;* Initialise program space for runtime
                             ;****************************************
dff3 :                       df_initrun
                             	; Set the key mask to check every 16 instruction
dff3 : a910             [ 2] 	lda #0x10
dff5 : 855c             [ 3] 	sta df_checkmsk
dff7 : 855b             [ 3] 	sta df_checkkey
                             
                             	; String and array heap initialisation
                             	; Grows up from end of prog space PLUS 1
                             	; Initially empty (dim will allocate)
                             	_cpyZPWord df_prgend,df_starstrt
                             
                             	_incZPWord df_starstrt
                             
                             	_cpyZPWord df_starstrt,df_starend
                             
                             
e00f : a2ff             [ 2] 	ldx #0xff
                             	; Reset runtime stack (grows down)
e011 : 8676             [ 3] 	stx df_rtstop
AS65 Assembler for R6502 [1.42].                                     Page  177
-------------------------------- bank\bank0.s --------------------------------

                             	; make X=0
e013 : e8               [ 2] 	inx
                             	; Reset parameter stack (grows up)
e014 : 8677             [ 3] 	stx df_parmtop
                             	; Reset data pointer high byte
e016 : 8695             [ 3] 	stx df_currdat+1
                             	; if nest counter zeroed
e018 : 8693             [ 3] 	stx df_ifnest
                             
                             	; clear proc addresses
e01a : 201ee0           [ 6] 	jsr df_rt_init_vvt
                             
                             ;	clc
e01d : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Initialise vvt
                             ;****************************************
e01e :                       df_rt_init_vvt
                             	; starting at beginning of vvt
                             	_cpyZPWord df_vvtend,df_tmpptra
                             
e026 : a200             [ 2] 	ldx #0
e028 :                       df_rt_init_vvt_slot
e028 : a5a1             [ 3] 	lda df_tmpptra
e02a : c56d             [ 3] 	cmp df_vvtstrt
e02c : d006             [ 3] 	bne df_rt_init_vvt_slot_undim
e02e : a5a2             [ 3] 	lda df_tmpptra+1
e030 : c56e             [ 3] 	cmp df_vvtstrt+1
e032 : f02c             [ 3] 	beq df_rt_init_done
e034 :                       df_rt_init_vvt_slot_undim
                             	; Only zero out proc and array pointers
                             	; Scalar variables are not initialised
e034 : a000             [ 2] 	ldy #0
e036 : b1a1             [ 5] 	lda (df_tmpptra),y
e038 : 29c0             [ 2] 	and #DFVVT_PROC|DFVVT_ARRY
e03a : f016             [ 3] 	beq df_rt_init_vvt_skip
                             	; skip over the first byte which is variable typ
e03c : c8               [ 2] 	iny
                             	; zero out first 3 bytes for proc and arrays
e03d : a900             [ 2] 	lda #0
e03f : 91a1             [ 5] 	sta (df_tmpptra),y
e041 : c8               [ 2] 	iny
e042 : 91a1             [ 5] 	sta (df_tmpptra),y
e044 : c8               [ 2] 	iny
e045 : 91a1             [ 5] 	sta (df_tmpptra),y
e047 : c8               [ 2] 	iny
                             	; before doing dim2 check if proc
                             	; as we don't want to erase the parm count
e048 : a1a1             [ 6] 	lda (df_tmpptra,x)
e04a : 2940             [ 2] 	and #DFVVT_PROC
e04c : d004             [ 3] 	bne df_rt_init_vvt_skip
                             	; if not proc then zero dim2
e04e : a900             [ 2] 	lda #0
e050 : 91a1             [ 5] 	sta (df_tmpptra),y
e052 :                       df_rt_init_vvt_skip
                             	; increment pointer to next slot
                             	_adcZPByte df_tmpptra,#8
                             
e05d : 4c28e0           [ 3] 	jmp df_rt_init_vvt_slot 	; Don't rely on bcc
e060 :                       df_rt_init_done
e060 : 60               [ 6] 	rts
AS65 Assembler for R6502 [1.42].                                     Page  178
-------------------------------- bank\bank0.s --------------------------------

                             
                             ;****************************************
                             ;* Evaluate a numeric expression
                             ;* pop  X,A result from operator stack
                             ;****************************************
e061 :                       df_rt_getnval
                             	; evaluate the expression
e061 : 2067e0           [ 6] 	jsr df_rt_neval
                             	; get X,A off operator stack
e064 : 4c80f6           [ 3] 	jmp df_ost_popInt
                             
                             
                             ;****************************************
                             ;* Evaluate a numeric expression
                             ;* Push result to operator stack
                             ;****************************************
e067 :                       df_rt_neval
                             	; push terminator on cpu stack
                             	; so we know where we are
e067 : a900             [ 2] 	lda #0
e069 : 48               [ 3] 	pha
                             
                             	; find escape token or keyword token
                             	; if escape token push on to operand stack
                             	; if keyword token push on to operator stack
e06a :                       df_rt_neval_optk
e06a : a488             [ 3] 	ldy df_exeoff
                             	; check end of line
                             
                             ;	cpy df_eolidx
                             ;	beq df_rt_neval_process
e06c : c47f             [ 3] 	cpy df_nxtstidx
e06e : f03a             [ 3] 	beq df_rt_neval_process
e070 : b186             [ 5] 	lda (df_currlin),y		; Get the byte which could b
e072 : 3024             [ 3] 	bmi df_rt_neval_tk		; N=1 means it's a keyword t
e074 : c920             [ 2] 	cmp #DFTK_ESCVAL		; <=32 means it's an escape to
e076 : 9019             [ 3] 	bcc df_rt_neval_esc
                             	; check for evaluation terminators
                             	; specifically ',' and ']'
e078 : c92c             [ 2] 	cmp #','
e07a : f02e             [ 3] 	beq df_rt_neval_process
e07c : c95d             [ 2] 	cmp #']'
e07e : f02a             [ 3] 	beq df_rt_neval_process
                             	; check for brackets
                             	; if close bracket then process
e080 : c929             [ 2] 	cmp #')'
e082 : f026             [ 3] 	beq df_rt_neval_process
                             	; Nothing of interest matched or it's open brack
                             	; so move to next byte either way
e084 : e688             [ 5] 	inc df_exeoff				; Next byte 
                             	; if bracket then evaluate expression recursivel
e086 : c928             [ 2] 	cmp #'('
e088 : d0e0             [ 3] 	bne df_rt_neval_optk
                             	; call evaluation function recursively
e08a : 2067e0           [ 6] 	jsr df_rt_neval
                             	; move to next byte
e08d : e688             [ 5] 	inc df_exeoff
e08f : d0d9             [ 3] 	bne df_rt_neval_optk		; ALWAYS as exeoff != 0
e091 :                       df_rt_neval_esc
e091 : 20ece0           [ 6] 	jsr df_rt_eval_esc
                             	; move to next byte
e094 : e688             [ 5] 	inc df_exeoff
AS65 Assembler for R6502 [1.42].                                     Page  179
-------------------------------- bank\bank0.s --------------------------------

e096 : d0d2             [ 3] 	bne df_rt_neval_optk		; ALWAYS as exeoff != 0
                             	; if a token then push on operator stack
e098 :                       df_rt_neval_tk
e098 : 297f             [ 2] 	and #0x7f
                             	; check if op (look up type using X as index)
                             	; X contains the current operator index
                             
e09a : aa               [ 2] 	tax
e09b : bde6dc           [ 4] 	lda df_tk_tokentype,x
                             	; A contains token type
e09e : 48               [ 3] 	pha
e09f : 2908             [ 2] 	and #DFTK_OP
e0a1 : d01c             [ 3] 	bne df_rt_neval_tk_opp
                             	; check if fn
e0a3 : 68               [ 4] 	pla
e0a4 : 2902             [ 2] 	and #DFTK_FN
e0a6 : d00c             [ 3] 	bne df_rt_neval_tk_fn
                             
                             	; If got here then something wrong
                             	SWBRK DFERR_OK
                             
                             
e0aa :                       df_rt_neval_process
                             	; pop operator off stack and execute
                             	; keep popping until reached the terminator
e0aa : 68               [ 4] 	pla
e0ab : f006             [ 3] 	beq df_rt_neval_done
                             	; run the token code
e0ad : 20e2e3           [ 6] 	jsr df_rt_run_token
                             	; top two bytes on ost stack is the result
e0b0 : 4caae0           [ 3] 	jmp df_rt_neval_process
e0b3 :                       df_rt_neval_done
e0b3 : 60               [ 6] 	rts
                             
e0b4 :                       df_rt_neval_tk_fn
e0b4 : 18               [ 2] 	clc
e0b5 : 8a               [ 2] 	txa
                             	; run a fn token - returns a value on stack
e0b6 : e688             [ 5] 	inc df_exeoff
e0b8 : 20e2e3           [ 6] 	jsr df_rt_run_token
                             	; move to next byte
e0bb :                       df_rt_neval_nextbyte
e0bb : e688             [ 5] 	inc df_exeoff
e0bd : d0ab             [ 3] 	bne df_rt_neval_optk		; ALWAYS as exeoff != 0
                             
e0bf :                       df_rt_neval_tk_opp
e0bf : 68               [ 4] 	pla				; Get A off stack which is the type
e0c0 :                       df_rt_neval_tk_op
                             	; X=Op, A=Type
                             	; if this op < current top of op stack
                             	; then do the op as it is higher priority so sho
                             	; not be pushed
                             	; what is top of the op stack?
                             	; save current op token value
                             	; C=0 means process the op now, else don't
                             	; save current operator index
e0c0 : 86a1             [ 3] 	stx df_tmpptra				; Index in to token table not 
                             	; mask off to keep priority
e0c2 : 2907             [ 2] 	and #DFTK_OPMSK
e0c4 : 85a3             [ 3] 	sta df_tmpptrb
                             	; peek top of op stack - pull and push X
e0c6 : 68               [ 4] 	pla
AS65 Assembler for R6502 [1.42].                                     Page  180
-------------------------------- bank\bank0.s --------------------------------

e0c7 : 48               [ 3] 	pha
e0c8 : aa               [ 2] 	tax
                             	; if 0 then nothing so push op
e0c9 : f01c             [ 3] 	beq df_rt_neval_pushOp
                             	; use it to index in to type table
e0cb : bde6dc           [ 4] 	lda df_tk_tokentype,x
                             	; mask off to keep priority
e0ce : 2907             [ 2] 	and #DFTK_OPMSK
                             	; compare with the saved token type which includ
e0d0 : c5a3             [ 3] 	cmp df_tmpptrb
                             	; if top of stack >= current then C=1
                             	; else C=0
                             	; what is the state of C?
                             	; if 1 then just pushOp
e0d2 : f002             [ 3] 	beq df_rt_neval_donow
e0d4 : b011             [ 3] 	bcs df_rt_neval_pushOp
e0d6 :                       df_rt_neval_donow
                             	; was C=0 so process now before pushing the new 
                             	; get operator off cpu stack
e0d6 : 68               [ 4] 	pla
e0d7 : a8               [ 2] 	tay		; Save whilst need to push other things
                             	; save the current op on cpu stack
e0d8 : a5a1             [ 3] 	lda df_tmpptra
e0da : 48               [ 3] 	pha
e0db : aa               [ 2] 	tax		; X = current op
e0dc : 98               [ 2] 	tya		; Get A back from Y (new op)
                             	; now run the token in A that came off the stack
e0dd : 20e2e3           [ 6] 	jsr df_rt_run_token
                             	; get current op off cpu stack in to X
e0e0 : 68               [ 4] 	pla
e0e1 : aa               [ 2] 	tax
                             	; get the token type in to A
e0e2 : bde6dc           [ 4] 	lda df_tk_tokentype,x
                             	; now go back around again to check whether to p
e0e5 : d0d9             [ 3] 	bne df_rt_neval_tk_op		; ALWAYS as type never ze
e0e7 :                       df_rt_neval_pushOp
                             	; push the operator
e0e7 : a5a1             [ 3] 	lda df_tmpptra
e0e9 : 48               [ 3] 	pha
                             	; move to next byte
e0ea : d0cf             [ 3] 	bne df_rt_neval_nextbyte	; ALWAYS as token index
                             
                             
                             
                             
                             ; jump to escape evaluation routine
e0ec :                       df_rt_eval_esc
e0ec : 0a               [ 2] 	asl a
e0ed : aa               [ 2] 	tax
e0ee : bdfbe0           [ 4] 	lda df_rt_eval_esc_tab,x
e0f1 : 85a1             [ 3] 	sta df_tmpptra
e0f3 : bdfce0           [ 4] 	lda df_rt_eval_esc_tab+1,x
e0f6 : 85a2             [ 3] 	sta df_tmpptra+1
e0f8 : 6ca100           [ 6] 	jmp (df_tmpptra)
                             
e0fb :                       df_rt_eval_esc_tab
e0fb : b8e1                  	dw df_rt_eval_chr
e0fd : c4e1                  	dw df_rt_eval_reserved
e0ff : c4e1                  	dw df_rt_eval_reserved
e101 : c4e1                  	dw df_rt_eval_reserved
e103 : c4e1                  	dw df_rt_eval_reserved
e105 : c4e1                  	dw df_rt_eval_reserved	; no such thing as bytdec
AS65 Assembler for R6502 [1.42].                                     Page  181
-------------------------------- bank\bank0.s --------------------------------

e107 : b8e1                  	dw df_rt_eval_bythex
e109 : b8e1                  	dw df_rt_eval_bytbin
e10b : c4e1                  	dw df_rt_eval_reserved
e10d : b8e1                  	dw df_rt_eval_intdec
e10f : b8e1                  	dw df_rt_eval_inthex
e111 : b8e1                  	dw df_rt_eval_intbin
e113 : c4e1                  	dw df_rt_eval_reserved
e115 : c4e1                  	dw df_rt_eval_reserved
e117 : c4e1                  	dw df_rt_eval_reserved
e119 : c4e1                  	dw df_rt_eval_reserved
e11b : c6e1                  	dw df_rt_eval_strlit
e11d : 0be2                  	dw df_rt_eval_var
e11f : fee2                  	dw df_rt_eval_proc
                             
                             
                             ;****************************************
                             ;* Evaluate a string expression
                             ;* X, A = Destination is string accumulator
                             ;****************************************
e121 :                       df_rt_seval
e121 : a67a             [ 3] 	ldx df_sevalptr
e123 : a57b             [ 3] 	lda df_sevalptr+1
                             ;****************************************
                             ;* Evaluate a string expression
                             ;* X, A = Destination buffer / space
                             ;****************************************
e125 :                       df_rt_sval
                             	; keep X,A on the stack - will be modified
e125 : 8538             [ 3] 	sta tmp_d
e127 : 48               [ 3] 	pha
e128 : 8a               [ 2] 	txa
e129 : 48               [ 3] 	pha
e12a : a538             [ 3] 	lda tmp_d
                             	; push original destination
e12c : 205bf6           [ 6] 	jsr df_ost_pushStr
                             	; Push the destination to the 6502 stack
                             	; hi byte first then lo
                             	; push string idx so we know our starting positi
                             	; in the string buffer
                             	; this limits all evaluations to 255 bytes
                             ;	lda df_stridx
                             ;	jsr df_st_pushOp
                             
                             	; find escape token or keyword token
                             	; if escape token push on to operand stack
                             	; if keyword operator token push on to operator 
                             	; if keyword function token run it
                             
e12f :                       df_rt_seval_optk
e12f : a488             [ 3] 	ldy df_exeoff
                             	; check end of line
                             ;	cpy df_eolidx
                             ;	beq df_rt_seval_done
e131 : c47f             [ 3] 	cpy df_nxtstidx
e133 : f069             [ 3] 	beq df_rt_seval_done
                             
e135 : b186             [ 5] 	lda (df_currlin),y
e137 : 301c             [ 3] 	bmi df_rt_seval_tk
                             
e139 : c920             [ 2] 	cmp #DFTK_ESCVAL
e13b : 900a             [ 3] 	bcc df_rt_seval_esc
                             	; check for evaluation terminators
AS65 Assembler for R6502 [1.42].                                     Page  182
-------------------------------- bank\bank0.s --------------------------------

                             	; specifically ',' and ')'
e13d : c92c             [ 2] 	cmp #','
e13f : f05d             [ 3] 	beq df_rt_seval_done
e141 : c929             [ 2] 	cmp #')'
e143 : f059             [ 3] 	beq df_rt_seval_done
e145 : d04a             [ 3] 	bne df_rt_seval_nextbyte
e147 :                       df_rt_seval_esc
                             	; the only escape char is STRLIT, VAR or PROC
e147 : c910             [ 2] 	cmp #DFTK_STRLIT
e149 : f04b             [ 3] 	beq	df_rt_seval_esc_strlit
e14b : c911             [ 2] 	cmp #DFTK_VAR
e14d : f028             [ 3] 	beq	df_rt_seval_esc_var
e14f : c912             [ 2] 	cmp #DFTK_PROC
e151 : f049             [ 3] 	beq	df_rt_seval_esc_proc
                             
                             	; error if got here
                             	SWBRK DFERR_SYNTAX
                             
                             
                             	; if a token then push on operator stack
e155 :                       df_rt_seval_tk
e155 : 8488             [ 3] 	sty df_exeoff
e157 : 297f             [ 2] 	and #0x7f
                             	; check if op
e159 : aa               [ 2] 	tax
e15a : bde6dc           [ 4] 	lda df_tk_tokentype,x
e15d : 2904             [ 2] 	and #DFTK_STROP
e15f : d009             [ 3] 	bne df_rt_seval_tk_op
                             	; check if fn
e161 : bde6dc           [ 4] 	lda df_tk_tokentype,x
e164 : 2902             [ 2] 	and #DFTK_FN
e166 : d006             [ 3] 	bne df_rt_seval_tk_fn
                             
                             	; token type mismatch if got here
                             	SWBRK DFERR_TYPEMISM
                             
                             
e16a :                       df_rt_seval_tk_op
                             	; the only op is $+
                             	; so just ignore!
e16a : 8a               [ 2] 	txa
e16b : 4c91e1           [ 3] 	jmp df_rt_seval_nextbyte
                             
e16e :                       df_rt_seval_tk_fn
e16e : 8a               [ 2] 	txa
e16f : e688             [ 5] 	inc df_exeoff
e171 : 20e2e3           [ 6] 	jsr df_rt_run_token
e174 : 4c7be1           [ 3] 	jmp df_rt_seval_copy
                             
e177 :                       df_rt_seval_esc_var
                             	; go process the variable as a normal RVAL
e177 : 18               [ 2] 	clc
e178 : 200be2           [ 6] 	jsr df_rt_eval_var
                             	; copy source off rt stack to destination
e17b :                       df_rt_seval_copy
                             	; pull destination pointer
e17b : 68               [ 4] 	pla
e17c : 85a1             [ 3] 	sta df_tmpptra
e17e : 68               [ 4] 	pla
e17f : 85a2             [ 3] 	sta df_tmpptra+1
                             	; pop source string pointer off stack
e181 : 2084f6           [ 6] 	jsr df_ost_popStr
AS65 Assembler for R6502 [1.42].                                     Page  183
-------------------------------- bank\bank0.s --------------------------------

e184 : 86a3             [ 3] 	stx df_tmpptrb
e186 : 85a4             [ 3] 	sta df_tmpptrb+1
                             	; go and copy the string
e188 : 20a2e1           [ 6] 	jsr df_rt_copyStr
                             	; now save the destination
e18b : a5a2             [ 3] 	lda df_tmpptra+1
e18d : 48               [ 3] 	pha
e18e : a5a1             [ 3] 	lda df_tmpptra
e190 : 48               [ 3] 	pha
                             
                             ;	jmp df_rt_seval_nextbyte
e191 :                       df_rt_seval_nextbyte
e191 : e688             [ 5] 	inc df_exeoff
e193 : 4c2fe1           [ 3] 	jmp df_rt_seval_optk
                             
e196 :                       df_rt_seval_esc_strlit
                             	; evaluate string literal
e196 : 20c6e1           [ 6] 	jsr df_rt_eval_strlit
e199 : 4c7be1           [ 3] 	jmp df_rt_seval_copy
                             
e19c :                       df_rt_seval_esc_proc
                             	; not yet suported *******
                             	SWBRK DFERR_OK
                             
                             
                             	; keep going until non-ws char found or end of l
e19e :                       df_rt_seval_done
                             	;
e19e : 68               [ 4] 	pla
e19f : 68               [ 4] 	pla
                             
e1a0 : 18               [ 2] 	clc
e1a1 : 60               [ 6] 	rts
                             
                             
                             ; Copy string from ptrb to ptra
e1a2 :                       df_rt_copyStr
e1a2 : a000             [ 2] 	ldy #0
e1a4 :                       df_rt_copyStr_ch
e1a4 : b1a3             [ 5] 	lda (df_tmpptrb),y
e1a6 : 91a1             [ 5] 	sta (df_tmpptra),y
e1a8 : f003             [ 3] 	beq df_rt_copyStr_done
e1aa : c8               [ 2] 	iny
e1ab : d0f7             [ 3] 	bne df_rt_copyStr_ch	; Always relying in Y never
e1ad :                       df_rt_copyStr_done
e1ad : 98               [ 2] 	tya
e1ae : 18               [ 2] 	clc
e1af : 65a1             [ 3] 	adc df_tmpptra
e1b1 : 85a1             [ 3] 	sta df_tmpptra
                             	_bcc 2
                             
e1b5 : e6a2             [ 5] 	inc df_tmpptra+1
e1b7 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Evaluate and push numeric value
                             ;****************************************
e1b8 :                       df_rt_eval_intdec
e1b8 :                       df_rt_eval_bytdec
e1b8 :                       df_rt_eval_inthex
e1b8 :                       df_rt_eval_bythex
e1b8 :                       df_rt_eval_intbin
AS65 Assembler for R6502 [1.42].                                     Page  184
-------------------------------- bank\bank0.s --------------------------------

e1b8 :                       df_rt_eval_bytbin
e1b8 :                       df_rt_eval_chr
                             	; numeric constant
e1b8 : c8               [ 2] 	iny
e1b9 : b186             [ 5] 	lda (df_currlin),y
e1bb : aa               [ 2] 	tax
e1bc : c8               [ 2] 	iny
e1bd : b186             [ 5] 	lda (df_currlin),y
                             	; save offset before calling any routine
e1bf : 8488             [ 3] 	sty df_exeoff
                             	; push number on to stack
e1c1 : 4c50f6           [ 3] 	jmp df_ost_pushInt
                             
e1c4 :                       df_rt_eval_reserved
                             	; should not get here
                             	SWBRK DFERR_OK
                             
                             
                             ;****************************************
                             ;* Evaluate and push string constant
                             ;****************************************
e1c6 :                       df_rt_eval_strlit
e1c6 : 8488             [ 3] 	sty df_exeoff
                             	; calculate the effective address in to AX
                             	; y + currlin
e1c8 : 98               [ 2] 	tya
                             	; set carry to add one extra
e1c9 : 38               [ 2] 	sec
e1ca : 6586             [ 3] 	adc df_currlin
e1cc : aa               [ 2] 	tax
e1cd : a587             [ 3] 	lda df_currlin+1
e1cf : 6900             [ 2] 	adc #0
                             
                             	; push string on to stack
e1d1 : 205bf6           [ 6] 	jsr df_ost_pushStr
                             	; now proceed until end of string found
e1d4 : a488             [ 3] 	ldy df_exeoff
e1d6 :                       df_rt_eval_strlit_ch
e1d6 : b186             [ 5] 	lda (df_currlin),y
e1d8 : f003             [ 3] 	beq df_rt_eval_strlit_done
e1da : c8               [ 2] 	iny
e1db : d0f9             [ 3] 	bne df_rt_eval_strlit_ch
e1dd :                       df_rt_eval_strlit_done	; Always relying on Y neve
e1dd : 8488             [ 3] 	sty df_exeoff
e1df : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Return array parameter
                             ;* A has parm
                             ;****************************************
e1e0 :                       df_rt_arry_parm
                             	; move past open bracket or comma
e1e0 : e688             [ 5] 	inc df_exeoff
                             	; evaluate expression inside bracket
e1e2 : 2061e0           [ 6] 	jsr df_rt_getnval
e1e5 : 8a               [ 2] 	txa
                             ;	clc
e1e6 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Return double array parameter
                             ;* X = dim1, Y = dim2
AS65 Assembler for R6502 [1.42].                                     Page  185
-------------------------------- bank\bank0.s --------------------------------

                             ;****************************************
e1e7 :                       df_rt_arry_parm2
                             	; go get array parm 1
e1e7 : 20e0e1           [ 6] 	jsr df_rt_arry_parm
e1ea : 48               [ 3] 	pha
e1eb : a200             [ 2] 	ldx #0
e1ed : a488             [ 3] 	ldy df_exeoff
e1ef :                       df_rt_arry_parm2_term
e1ef : b186             [ 5] 	lda (df_currlin),y
e1f1 : c95d             [ 2] 	cmp #']'
e1f3 : f011             [ 4] 	beq df_rt_arry_parm2_skiparry2
e1f5 : c92c             [ 2] 	cmp #','
e1f7 : f006             [ 3] 	beq df_rt_arry_parm2_arry2
e1f9 : 8488             [ 3] 	sty df_exeoff
e1fb : c8               [ 2] 	iny
e1fc : 4cefe1           [ 3] 	jmp df_rt_arry_parm2_term
e1ff :                       df_rt_arry_parm2_arry2
                             	; get second dimension and put in Y
e1ff : 20e0e1           [ 6] 	jsr df_rt_arry_parm
e202 : a8               [ 2] 	tay
e203 : 68               [ 4] 	pla
e204 : aa               [ 2] 	tax
                             ;	clc
e205 : 60               [ 6] 	rts
e206 :                       df_rt_arry_parm2_skiparry2
e206 : a000             [ 2] 	ldy #0
e208 : 68               [ 4] 	pla
e209 : aa               [ 2] 	tax
                             ;	clc
e20a : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* Evaluate and push variable
                             ;* The actual value is pushed if numeric
                             ;* The pointer is pushed if string
                             ;* Carry Set = LVAR else normal RVAR
                             ;* LVAR : Y = line index, A=vvt type, tmpptra = v
                             ;****************************************
e20b :                       df_rt_eval_var
                             	; save carry bit
e20b : 08               [ 3] 	php
                             	; if lvar mode then already passed escape token
e20c : b010             [ 3] 	bcs df_rt_eval_lvskip
                             	; move past var escape token
e20e : c8               [ 2] 	iny
                             	; get var vvt address
e20f : b186             [ 5] 	lda (df_currlin),y
e211 : 85a1             [ 3] 	sta df_tmpptra
e213 : c8               [ 2] 	iny
e214 : 8488             [ 3] 	sty df_exeoff
e216 : b186             [ 5] 	lda (df_currlin),y
e218 : 85a2             [ 3] 	sta df_tmpptra+1
                             	; push vvt type first as this is the last thing 
e21a : a200             [ 2] 	ldx #0
e21c : a1a1             [ 6] 	lda (df_tmpptra,x)
e21e :                       df_rt_eval_lvskip
e21e : 48               [ 3] 	pha
                             	; Test A
e21f : aa               [ 2] 	tax
                             	; simple variable
e220 : 100e             [ 3] 	bpl df_rt_eval_var_notarry
AS65 Assembler for R6502 [1.42].                                     Page  186
-------------------------------- bank\bank0.s --------------------------------

                             	; even if an array if no dimensions then return 
                             	; if at end of statement or line then simple cop
                             ;	cpy df_eolidx
                             ;	beq df_rt_eval_var_simple
e222 : c47f             [ 3] 	cpy df_nxtstidx
e224 : f027             [ 3] 	beq df_rt_eval_var_simple
                             	; if next ch is not [ then simple copy
e226 : c8               [ 2] 	iny
e227 : b186             [ 5] 	lda (df_currlin),y
e229 : 88               [ 2] 	dey
e22a : c95b             [ 2] 	cmp #'['
e22c : d01f             [ 3] 	bne df_rt_eval_var_simple
                             	; go do array handling
e22e : f02b             [ 3] 	beq df_rt_eval_var_do_arry
e230 :                       df_rt_eval_var_notarry
                             	; pull the type, not needed here
e230 : 68               [ 4] 	pla
                             	; pull C and check if lvar wanted rather than rv
e231 : 28               [ 4] 	plp
e232 : b00c             [ 3] 	bcs df_rt_eval_lvar
                             	; just push the vvt lo,hi value
e234 : a001             [ 2] 	ldy #DFVVT_LO
e236 : b1a1             [ 5] 	lda (df_tmpptra),y
e238 : aa               [ 2] 	tax
e239 : a002             [ 2] 	ldy #DFVVT_HI
e23b : b1a1             [ 5] 	lda (df_tmpptra),y
                             
e23d : 4c50f6           [ 3] 	jmp df_ost_pushInt
                             
e240 :                       df_rt_eval_lvar
                             	; it's not an array, push the address of DFVVT_L
                             	; add DFVVT_LO offset to slot address in X,A
e240 : 18               [ 2] 	clc
e241 : a901             [ 2] 	lda #DFVVT_LO
e243 : 65a1             [ 3] 	adc df_tmpptra
e245 : aa               [ 2] 	tax
e246 : a5a2             [ 3] 	lda df_tmpptra+1
e248 : 6900             [ 2] 	adc #0
                             
                             	; push pointer to lo,hi
e24a : 4c5ff6           [ 3] 	jmp df_ost_pushPtr
                             
e24d :                       df_rt_eval_var_simple
                             	; clean up stack
e24d : 68               [ 4] 	pla
e24e : 68               [ 4] 	pla
                             	; simply get lo,hi and push ptr on stack
e24f : a001             [ 2] 	ldy #DFVVT_LO
e251 : b1a1             [ 5] 	lda (df_tmpptra),y
e253 : aa               [ 2] 	tax
e254 : a002             [ 2] 	ldy #DFVVT_HI
e256 : b1a1             [ 5] 	lda (df_tmpptra),y
e258 : 4c5ff6           [ 3] 	jmp df_ost_pushPtr
                             
e25b :                       df_rt_eval_var_do_arry
                             	; move past var index
e25b : e688             [ 5] 	inc df_exeoff
                             	; zero out x,y as they have dimension info
e25d : a200             [ 2] 	ldx #0
e25f : a000             [ 2] 	ldy #0
                             
                             	; ** Array handling routine **
AS65 Assembler for R6502 [1.42].                                     Page  187
-------------------------------- bank\bank0.s --------------------------------

                             	; A on stack = type
                             	; save vvt address
e261 : a5a2             [ 3] 	lda df_tmpptra+1
e263 : 48               [ 3] 	pha
e264 : a5a1             [ 3] 	lda df_tmpptra
e266 : 48               [ 3] 	pha
                             
                             	; get array parms in X,Y
e267 : 20e7e1           [ 6] 	jsr df_rt_arry_parm2
                             	; restore vvt address
e26a : 68               [ 4] 	pla
e26b : 85a1             [ 3] 	sta df_tmpptra
e26d : 68               [ 4] 	pla
e26e : 85a2             [ 3] 	sta df_tmpptra+1
                             	; save dimension indices for later
e270 : 86a3             [ 3] 	stx df_tmpptrb
e272 : 84a4             [ 3] 	sty df_tmpptrb+1
                             	; if y is zero then need to decide some stuff
e274 : c000             [ 2] 	cpy #0
e276 : d00e             [ 3] 	bne df_rt_eval_var_dim2adj
                             	; if dim2 > 0 then swap x,y
e278 : a004             [ 2] 	ldy #DFVVT_DIM2
e27a : b1a1             [ 5] 	lda (df_tmpptra),y
e27c : f008             [ 3] 	beq df_rt_eval_var_dim2adj
                             	; swap x,y
e27e : a6a3             [ 3] 	ldx df_tmpptrb
e280 : a4a4             [ 3] 	ldy df_tmpptrb+1
e282 : 86a4             [ 3] 	stx df_tmpptrb+1
e284 : 84a3             [ 3] 	sty df_tmpptrb
                             
e286 :                       df_rt_eval_var_dim2adj
e286 : a6a3             [ 3] 	ldx df_tmpptrb
e288 : a4a4             [ 3] 	ldy df_tmpptrb+1
                             	; don't let y=0
e28a : d001             [ 3] 	bne df_rt_eval_var_dim2adjy
e28c : c8               [ 2] 	iny
e28d :                       df_rt_eval_var_dim2adjy
                             	; don't let x=0
e28d : e000             [ 2] 	cpx #0
e28f : d001             [ 3] 	bne df_rt_eval_var_dim2adjx
e291 : e8               [ 2] 	inx
e292 :                       df_rt_eval_var_dim2adjx
                             	;calculate offset
                             	;(y-1)*dim1 + (x-1)
e292 : ca               [ 2] 	dex
e293 : a900             [ 2] 	lda #0
e295 : 853e             [ 3] 	sta num_a+1
e297 : 88               [ 2] 	dey
                             	; (y-1)
e298 : 843d             [ 3] 	sty num_a
                             	; if y is 0 then no need to multiply
e29a : f00d             [ 3] 	beq df_rt_eval_var_nomult
                             	; (dim1)
e29c : a003             [ 2] 	ldy #DFVVT_DIM1
e29e : a900             [ 2] 	lda #0
e2a0 : 8542             [ 3] 	sta num_b+1
e2a2 : b1a1             [ 5] 	lda (df_tmpptra),y
e2a4 : 8541             [ 3] 	sta num_b
                             	; (y-1)*dim1 num_a has result
e2a6 : 204dd4           [ 6] 	jsr int_fast_mult
e2a9 :                       df_rt_eval_var_nomult
                             	; move x to a
AS65 Assembler for R6502 [1.42].                                     Page  188
-------------------------------- bank\bank0.s --------------------------------

e2a9 : 8a               [ 2] 	txa
                             	; add x to num_a
e2aa : 18               [ 2] 	clc
e2ab : 653d             [ 3] 	adc num_a
e2ad : 853d             [ 3] 	sta num_a
                             	_bcc 2
                             
e2b1 : e63e             [ 5] 	inc num_a+1
                             	; now have element offset in num_a
                             	; dimensions in x and y
e2b3 : a6a3             [ 3] 	ldx df_tmpptrb
e2b5 : a4a4             [ 3] 	ldy df_tmpptrb+1
                             	; get type of variable originally found
e2b7 : 68               [ 4] 	pla
e2b8 : 48               [ 3] 	pha
e2b9 : 2901             [ 2] 	and #DFVVT_INT
e2bb : f004             [ 3] 	beq df_rt_eval_var_push
                             	; if it is int then multiply offset by 2
e2bd : 063d             [ 5] 	asl num_a
e2bf : 263e             [ 5] 	rol num_a+1
e2c1 :                       df_rt_eval_var_push
                             	; add pointer in lo,hi to num_a
e2c1 : 18               [ 2] 	clc
e2c2 : a001             [ 2] 	ldy #DFVVT_LO
e2c4 : b1a1             [ 5] 	lda (df_tmpptra),y
e2c6 : 653d             [ 3] 	adc num_a
e2c8 : 853d             [ 3] 	sta num_a
e2ca : a002             [ 2] 	ldy #DFVVT_HI
e2cc : b1a1             [ 5] 	lda (df_tmpptra),y
e2ce : d002             [ 3] 	bne df_rt_array_exists
                             	; if vvt address hi is zero then array not dimen
                             	SWBRK DFERR_DIM
                             
e2d2 :                       df_rt_array_exists
e2d2 : 653e             [ 3] 	adc num_a+1
e2d4 : 853e             [ 3] 	sta num_a+1
                             	; get the type
e2d6 : 68               [ 4] 	pla
                             	; if not int or byte then push string
e2d7 : 2903             [ 2] 	and #DFVVT_INT|DFVVT_BYT
e2d9 : f01b             [ 3] 	beq df_rt_eval_var_str
                             	; get LVAR preference
e2db : 28               [ 4] 	plp
e2dc : b019             [ 3] 	bcs df_rt_eval_ptr
                             	; need to load lo and hi for int
                             	; but only lo for byt
e2de : 2901             [ 2] 	and #DFVVT_INT
e2e0 : f00b             [ 3] 	beq df_rt_eval_byt
                             	; push the contents pointed to by num_a
e2e2 : a000             [ 2] 	ldy #0
e2e4 : b13d             [ 5] 	lda (num_a),y
e2e6 : aa               [ 2] 	tax
e2e7 : c8               [ 2] 	iny
e2e8 : b13d             [ 5] 	lda (num_a),y
e2ea : 4c50f6           [ 3] 	jmp df_ost_pushInt
e2ed :                       df_rt_eval_byt
e2ed : a000             [ 2] 	ldy #0
e2ef : b13d             [ 5] 	lda (num_a),y
e2f1 : aa               [ 2] 	tax
e2f2 : 98               [ 2] 	tya			; Make A=0
e2f3 : 4c50f6           [ 3] 	jmp df_ost_pushInt
e2f6 :                       df_rt_eval_var_str
AS65 Assembler for R6502 [1.42].                                     Page  189
-------------------------------- bank\bank0.s --------------------------------

e2f6 : 28               [ 4] 	plp
e2f7 :                       df_rt_eval_ptr
                             ;	clc
                             	; put num_a not contents
e2f7 : a63d             [ 3] 	ldx num_a
e2f9 : a53e             [ 3] 	lda num_a+1
e2fb : 4c5ff6           [ 3] 	jmp df_ost_pushPtr
                             
e2fe :                       df_rt_eval_proc
e2fe : a577             [ 3] 	lda df_parmtop				; Save current position of par
e300 : 48               [ 3] 	pha
e301 : 20a6f4           [ 6] 	jsr df_rt_proc				; Go and call the user functio
e304 : 68               [ 4] 	pla							; Get back the original parameter stac
e305 : c577             [ 3] 	cmp df_parmtop				; if it is the same, then no r
e307 : f002             [ 3] 	beq df_rt_eval_proc_err
e309 : 18               [ 2] 	clc
e30a : 60               [ 6] 	rts
e30b :                       df_rt_eval_proc_err
                             	; if no return value then report an errror
                             	SWBRK DFERR_RETURN
                             
                             
                             
                             
                             ;****************************************
                             ;* get two ints off the runtime stack
                             ;* first parm in ptrb, second in ptra
                             ;****************************************
e30d :                       df_rt_get2Ints
                             	; the first int popped is actually the second pa
e30d : 2080f6           [ 6] 	jsr df_ost_popInt
e310 : 86a3             [ 3] 	stx df_tmpptrb
e312 : 85a4             [ 3] 	sta df_tmpptrb+1
                             
e314 : 2080f6           [ 6] 	jsr df_ost_popInt
e317 : 86a1             [ 3] 	stx df_tmpptra
e319 : 85a2             [ 3] 	sta df_tmpptra+1
e31b : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* get two strings off the runtime stack
                             ;* first parm in ptrb, second in ptra
                             ;****************************************
e31c :                       df_rt_get2Strs
                             	; the first int popped is actually the second pa
e31c : 2084f6           [ 6] 	jsr df_ost_popStr
e31f : 86a3             [ 3] 	stx df_tmpptrb
e321 : 85a4             [ 3] 	sta df_tmpptrb+1
                             
e323 : 2084f6           [ 6] 	jsr df_ost_popStr
e326 : 86a1             [ 3] 	stx df_tmpptra
e328 : 85a2             [ 3] 	sta df_tmpptra+1
e32a : 60               [ 6] 	rts
                             
                             ;****************************************
                             ; common code for 2 ints runtime parsing
                             ;****************************************
e32b :                       df_rt_parm_2ints
                             	; evaluate 1st parm
e32b : 2067e0           [ 6] 	jsr df_rt_neval
                             	; jump over comma
e32e : e688             [ 5] 	inc df_exeoff
AS65 Assembler for R6502 [1.42].                                     Page  190
-------------------------------- bank\bank0.s --------------------------------

                             	; evaluate the 2nd parm
e330 : 2067e0           [ 6] 	jsr df_rt_neval
                             	
e333 : 4c0de3           [ 3] 	jmp df_rt_get2Ints
                             	; pop 2nd parm
                             ;	jsr df_ost_popInt
                             ;	stx df_tmpptrb
                             ;	sta df_tmpptrb+1
                             	; pop 1st parm
                             ;	jsr df_ost_popInt
                             ;	stx df_tmpptra
                             ;	sta df_tmpptra+1
                             ;	rts
                             
                             ;****************************************
                             ; common code for 3 ints runtime parsing
                             ;****************************************
e336 :                       df_rt_parm_3ints
                             	; evaluate 1st parm
e336 : 2067e0           [ 6] 	jsr df_rt_neval
e339 : e688             [ 5] 	inc df_exeoff
                             	; evaluate the 2nd parm
e33b : 2067e0           [ 6] 	jsr df_rt_neval
e33e : e688             [ 5] 	inc df_exeoff
                             	; evaluate the 3rd parm
e340 : 2067e0           [ 6] 	jsr df_rt_neval
                             
                             	; pop 3rd parm
e343 :                       df_rt_parm_pop3
e343 : 2080f6           [ 6] 	jsr df_ost_popInt
e346 : 86a5             [ 3] 	stx df_tmpptrc
e348 : 85a6             [ 3] 	sta df_tmpptrc+1
                             	; pop 2nd and 1st
e34a : 4c0de3           [ 3] 	jmp df_rt_get2Ints
                             ;	jsr df_ost_popInt
                             ;	stx df_tmpptrb
                             ;	sta df_tmpptrb+1
                             	; pop 1st parm
                             ;	jsr df_ost_popInt
                             ;	stx df_tmpptra
                             ;	sta df_tmpptra+1
                             ;	rts
                             
                             ;****************************************
                             ; common code for 4 ints runtime parsing
                             ;****************************************
e34d :                       df_rt_parm_4ints
                             	; evaluate 1st parm
e34d : 2067e0           [ 6] 	jsr df_rt_neval
e350 : e688             [ 5] 	inc df_exeoff
                             	; evaluate the 2nd parm
e352 : 2067e0           [ 6] 	jsr df_rt_neval
e355 : e688             [ 5] 	inc df_exeoff
                             	; evaluate the 3rd parm
e357 : 2067e0           [ 6] 	jsr df_rt_neval
e35a : e688             [ 5] 	inc df_exeoff
                             	; evaluate the 4th parm
e35c : 2067e0           [ 6] 	jsr df_rt_neval
                             
                             	; pop 4th parm
e35f : 2080f6           [ 6] 	jsr df_ost_popInt
e362 : 86a7             [ 3] 	stx df_tmpptrd
AS65 Assembler for R6502 [1.42].                                     Page  191
-------------------------------- bank\bank0.s --------------------------------

e364 : 85a8             [ 3] 	sta df_tmpptrd+1
                             
                             	; pop 3,2,1 parms
e366 : 4c43e3           [ 3] 	jmp df_rt_parm_pop3
                             
                             	; pop 3rd parm
                             ;	jsr df_ost_popInt
                             ;	stx df_tmpptrc
                             ;	sta df_tmpptrc+1
                             	; pop 2nd parm
                             ;	jsr df_ost_popInt
                             ;	stx df_tmpptrb
                             ;	sta df_tmpptrb+1
                             	; pop 1st parm
                             ;	jsr df_ost_popInt
                             ;	stx df_tmpptra
                             ;	sta df_tmpptra+1
                             ;	rts
                             
                             ;****************************************
                             ; common code for 5 ints runtime parsing
                             ;****************************************
                             ;df_rt_parm_5ints
                             ;	; evaluate 1st parm
                             ;	jsr df_rt_neval
                             ;	inc df_exeoff
                             ;	; evaluate the 2nd parm
                             ;	jsr df_rt_neval
                             ;	inc df_exeoff
                             ;	; evaluate the 3rd parm
                             ;	jsr df_rt_neval
                             ;	inc df_exeoff
                             ;	; evaluate the 4th parm
                             ;	jsr df_rt_neval
                             ;	inc df_exeoff
                             ;	; evaluate the 5th parm
                             ;	jsr df_rt_neval
                             ;
                             ;	; pop 5th parm
                             ;	jsr df_ost_popInt
                             ;	stx df_tmpptre
                             ;	sta df_tmpptre+1
                             ;	; pop 4th parm
                             ;	jsr df_ost_popInt
                             ;	stx df_tmpptrd
                             ;	sta df_tmpptrd+1
                             ;	; pop 3rd parm
                             ;	jsr df_ost_popInt
                             ;	stx df_tmpptrc
                             ;	sta df_tmpptrc+1
                             ;	; pop 2nd parm
                             ;	jsr df_ost_popInt
                             ;	stx df_tmpptrb
                             ;	sta df_tmpptrb+1
                             ;	; pop 1st parm
                             ;	jsr df_ost_popInt
                             ;	stx df_tmpptra
                             ;	sta df_tmpptra+1
                             ;
                             ;	rts
                             
                             ;****************************************
AS65 Assembler for R6502 [1.42].                                     Page  192
-------------------------------- bank\bank0.s --------------------------------

                             ;* initialise statement to be executed
                             ;* X,A = line pointer, Y=statement offset
                             ;****************************************
e369 :                       df_rt_init_stat_ptr
                             	; save current line
e369 : 8686             [ 3] 	stx df_currlin
e36b : 8587             [ 3] 	sta df_currlin+1
e36d : 8480             [ 3] 	sty df_curstidx
e36f : 8488             [ 3] 	sty df_exeoff
e371 : b186             [ 5] 	lda (df_currlin),y
e373 : 857f             [ 3] 	sta df_nxtstidx
e375 : a200             [ 2] 	ldx #0
e377 : a186             [ 6] 	lda (df_currlin,x)
e379 : 857e             [ 3] 	sta df_eolidx
                             ;	ldy df_curstidx
                             ;	lda (df_currlin),y
                             ;	sta df_nxtstidx
e37b : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Execute from a statement pointed to
                             ;* by currlin and exeoff
                             ;****************************************
e37c :                       df_rt_exec_stat
e37c : a686             [ 3] 	ldx df_currlin
e37e : a587             [ 3] 	lda df_currlin+1
e380 : a488             [ 3] 	ldy df_exeoff
e382 :                       df_rt_exec_init_ptr
e382 : 2069e3           [ 6] 	jsr df_rt_init_stat_ptr
                             	; assume normal flow of control if next line hi 
                             	; this means no line can execute below page 1, n
e385 : a900             [ 2] 	lda #0
e387 : 858a             [ 3] 	sta df_nextlin+1
                             
                             	; find first token in statement
e389 :                       df_rt_exec_find_tok
e389 : c8               [ 2] 	iny
e38a : b186             [ 5] 	lda (df_currlin),y
e38c : 10fb             [ 3] 	bpl df_rt_exec_find_tok
e38e :                       df_rt_exec_found_tok
                             	; skip past token to next byte in readiness
e38e : c8               [ 2] 	iny
e38f : 8488             [ 3] 	sty df_exeoff
                             	; Run that statement - if end of return will pul
                             	; and effectively do an rts from this routine.
e391 : 20e2e3           [ 6] 	jsr df_rt_run_token
                             
                             	; check for break, asynch get
e394 : c65b             [ 5] 	dec df_checkkey
e396 : d00a             [ 3] 	bne df_rt_exec_no_key
e398 : a55c             [ 3] 	lda df_checkmsk
e39a : 855b             [ 3] 	sta df_checkkey
e39c : 18               [ 2] 	clc
e39d : 203ac4           [ 6] 	jsr io_get_ch
e3a0 : 9029             [ 3] 	bcc df_rt_exec_check_key
e3a2 :                       df_rt_exec_no_key
                             	; check if normal flow of control
e3a2 : a58a             [ 3] 	lda df_nextlin+1
e3a4 : d033             [ 3] 	bne df_rt_exec_jump
                             	; try and execute another statement until end of
e3a6 : a47f             [ 3] 	ldy df_nxtstidx
e3a8 : c47e             [ 3] 	cpy df_eolidx
AS65 Assembler for R6502 [1.42].                                     Page  193
-------------------------------- bank\bank0.s --------------------------------

e3aa : 8488             [ 3] 	sty df_exeoff
e3ac : d0ce             [ 3] 	bne df_rt_exec_stat
                             	
                             	; reached end of line, move to next
e3ae : a200             [ 2] 	ldx #0
e3b0 : 18               [ 2] 	clc
e3b1 : a186             [ 6] 	lda (df_currlin,x)
e3b3 : 6586             [ 3] 	adc df_currlin
e3b5 : 8586             [ 3] 	sta df_currlin
                             	_bcc 2
                             
e3b9 : e687             [ 5] 	inc df_currlin+1
                             
                             	; start from first statement in new line
e3bb : a003             [ 2] 	ldy #3
e3bd : 8488             [ 3] 	sty df_exeoff
                             
                             	; check if this line has any content (length >0)
e3bf : a186             [ 6] 	lda (df_currlin,x)
e3c1 : 857e             [ 3] 	sta df_eolidx
                             	; no more lines (len = 0), program done
e3c3 : d0b7             [ 3] 	bne df_rt_exec_stat
                             	; else done
                             	; normally wouldn't get here except immediate mo
                             	; if line number <> 0 then error
e3c5 : a55e             [ 3] 	lda df_immed
e3c7 : f00e             [ 3] 	beq df_rt_unexpected_end
e3c9 :                       df_rt_exec_end
e3c9 : 18               [ 2] 	clc
e3ca : 60               [ 6] 	rts
e3cb :                       df_rt_exec_check_key
e3cb : c91a             [ 2] 	cmp #UTF_BRK					; CTRK-Z?
e3cd : f006             [ 3] 	beq df_rt_exec_ctrl_z
e3cf : c903             [ 2] 	cmp #UTF_ETX					; CTRL-C?
e3d1 : d0cf             [ 3] 	bne df_rt_exec_no_key			; None relevant keys, go
e3d3 :                       df_rt_exec_ctrl_c
                             	SWBRK DFERR_BREAK
                             
e3d5 :                       df_rt_exec_ctrl_z
                             	; Force a break with zero error number
                             	; this will drop in to the monitor
                             	SWBRK 0
                             
                             
e3d7 :                       df_rt_unexpected_end
                             	SWBRK DFERR_IMMEDIATE
                             
                             
                             	; if hi byte of nextline is not zero then
                             	; current line = next line
e3d9 :                       df_rt_exec_jump
                             	; initialise statement pointer from nextlin,toks
e3d9 : a689             [ 3] 	ldx df_nextlin
e3db : a58a             [ 3] 	lda df_nextlin+1
e3dd : a47f             [ 3] 	ldy df_nxtstidx
e3df : 4c82e3           [ 3] 	jmp df_rt_exec_init_ptr
                             
                             
                             ;****************************************
                             ;* Run statement in A
                             ;****************************************
e3e2 :                       df_rt_run_token
AS65 Assembler for R6502 [1.42].                                     Page  194
-------------------------------- bank\bank0.s --------------------------------

                             	; mask off MSB
                             ;	and #0x7f
                             	; multiply by 2
e3e2 : 0a               [ 2] 	asl a
e3e3 : aa               [ 2] 	tax
e3e4 : bdcde4           [ 4] 	lda df_rt_tokenjmp,x
e3e7 : 85a1             [ 3] 	sta df_tmpptra
e3e9 : bdcee4           [ 4] 	lda df_rt_tokenjmp+1,x
e3ec : 85a2             [ 3] 	sta df_tmpptra+1
                             	; execution code finishes with rts
e3ee : 6ca100           [ 6] 	jmp (df_tmpptra)
                             
                             
                             ;****************************************
                             ;* X,A : Line Address, Y = Index
                             ;* C=0 Found next statement
                             ;* C=1 No statement found
                             ;****************************************
e3f1 :                       df_rt_nextstat
                             	; save pointer
e3f1 : 8690             [ 3] 	stx df_lineptr
e3f3 : 8591             [ 3] 	sta df_lineptr+1
                             	; if end of program then err
e3f5 : a200             [ 2] 	ldx #0
e3f7 : a190             [ 6] 	lda (df_lineptr,x)
e3f9 : f022             [ 4] 	beq df_rt_nextstat_err
                             	; if next statement idx == line length
                             ;	lda (df_lineptr),y
                             ;	beq df_rt_nextstat_ln
e3fb : b190             [ 5] 	lda (df_lineptr),y
e3fd : c190             [ 6] 	cmp (df_lineptr,x)
e3ff : f007             [ 4] 	beq df_rt_nextstat_ln
                             	; then go to next line
                             	; else make this Y
e401 : a8               [ 2] 	tay
                             	; X = line low
e402 : a690             [ 3] 	ldx df_lineptr
                             	; A = line high
e404 : a591             [ 3] 	lda df_lineptr+1
e406 : 18               [ 2] 	clc
e407 : 60               [ 6] 	rts
e408 :                       df_rt_nextstat_ln
                             	; for next line, add line length to ptr
e408 : 18               [ 2] 	clc
                             ;	lda (df_lineptr,x)
e409 : 6590             [ 3] 	adc df_lineptr
e40b : 8590             [ 3] 	sta df_lineptr
                             	_bcc 2
                             
e40f : e691             [ 5] 	inc df_lineptr+1
                             	; if end of program set C as error
e411 : a190             [ 6] 	lda (df_lineptr,x)
e413 : f008             [ 3] 	beq df_rt_nextstat_err
e415 : a690             [ 3] 	ldx df_lineptr
e417 : a591             [ 3] 	lda df_lineptr+1
                             	; always skip line number and length for start o
e419 : a003             [ 2] 	ldy #3
e41b : 18               [ 2] 	clc
e41c : 60               [ 6] 	rts
e41d :                       df_rt_nextstat_err
e41d : a000             [ 2] 	ldy #0
e41f : 38               [ 2] 	sec
AS65 Assembler for R6502 [1.42].                                     Page  195
-------------------------------- bank\bank0.s --------------------------------

e420 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Push current line and statement to runtime sta
                             ;****************************************
e421 :                       df_rt_push_stat
e421 : a580             [ 3] 	lda df_curstidx
e423 : 2007f6           [ 6] 	jsr df_rst_pushByte
e426 : a587             [ 3] 	lda df_currlin+1
e428 : a686             [ 3] 	ldx df_currlin
e42a : 4c1ff6           [ 3] 	jmp df_rst_pushWord
                             ;	clc
                             ;	rts
                             
                             ;****************************************
                             ;* Pop line and statement from runtime stack
                             ;* And transfer control to next statement
                             ;****************************************
e42d :                       df_rt_pop_stat
e42d : 202df6           [ 6] 	jsr df_rst_popWord
e430 : 8689             [ 3] 	stx	df_nextlin
e432 : 858a             [ 3] 	sta df_nextlin+1
e434 : 2010f6           [ 6] 	jsr df_rst_popByte
e437 : a8               [ 2] 	tay
e438 : a689             [ 3] 	ldx df_nextlin
e43a : a58a             [ 3] 	lda df_nextlin+1
e43c : 20f1e3           [ 6] 	jsr df_rt_nextstat
e43f : 8689             [ 3] 	stx df_nextlin
e441 : 858a             [ 3] 	sta df_nextlin+1
e443 : 847f             [ 3] 	sty df_nxtstidx
                             ;	clc
e445 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Find proc definition in procptr
                             ;* Only call if proc not found before
                             ;****************************************
e446 :                       df_rt_findproc
                             	; start at program beginning
                             	_cpyZPWord df_prgstrt,df_lineptr
                             
e44e : a003             [ 2] 	ldy #3
e450 : 8492             [ 3] 	sty df_lineidx
e452 : a200             [ 2] 	ldx #0
e454 : a190             [ 6] 	lda (df_lineptr,x)
e456 : f034             [ 3] 	beq df_rt_findproc_err
e458 :                       df_rt_findproc_cmd
e458 : c8               [ 2] 	iny
e459 : b190             [ 5] 	lda (df_lineptr),y
e45b : 10fb             [ 3] 	bpl df_rt_findproc_cmd
e45d : c986             [ 2] 	cmp #DFRT_DEF
e45f : d017             [ 3] 	bne df_rt_findproc_nextstat
                             	; skip def token
e461 : c8               [ 2] 	iny
                             	; skip proc escape token
e462 : c8               [ 2] 	iny
                             	; now check the proc address against procptr
e463 : b190             [ 5] 	lda (df_lineptr),y
e465 : c58e             [ 3] 	cmp df_procptr
e467 : d00f             [ 3] 	bne df_rt_findproc_nextstat
e469 : c8               [ 2] 	iny
e46a : b190             [ 5] 	lda (df_lineptr),y
AS65 Assembler for R6502 [1.42].                                     Page  196
-------------------------------- bank\bank0.s --------------------------------

e46c : c58f             [ 3] 	cmp df_procptr+1
e46e : d008             [ 3] 	bne df_rt_findproc_nextstat
                             
                             	; found it, return AXY with line details
e470 : a690             [ 3] 	ldx df_lineptr
e472 : a591             [ 3] 	lda df_lineptr+1
e474 : a492             [ 3] 	ldy df_lineidx
e476 : 18               [ 2] 	clc
e477 : 60               [ 6] 	rts
e478 :                       df_rt_findproc_nextstat
                             	; restore AXY line details and find next stateme
e478 : a690             [ 3] 	ldx df_lineptr
e47a : a591             [ 3] 	lda df_lineptr+1
e47c : a492             [ 3] 	ldy df_lineidx
e47e : 20f1e3           [ 6] 	jsr df_rt_nextstat
e481 : b009             [ 3] 	bcs df_rt_findproc_err
e483 : 8690             [ 3] 	stx df_lineptr
e485 : 8591             [ 3] 	sta df_lineptr+1
e487 : 8492             [ 3] 	sty df_lineidx
e489 : 4c58e4           [ 3] 	jmp df_rt_findproc_cmd
                             	; error
e48c :                       df_rt_findproc_err
                             	SWBRK DFERR_NOPROC
                             
                             
                             ;****************************************
                             ;* Find an escape value
                             ;* Does not check for end of line or statement
                             ;****************************************
e48e :                       df_rt_findescval
e48e : a488             [ 3] 	ldy df_exeoff
e490 : 88               [ 2] 	dey
e491 :                       df_rt_findescval_loop
e491 : c8               [ 2] 	iny
e492 : b186             [ 5] 	lda (df_currlin),y
e494 : c920             [ 2] 	cmp #DFTK_ESCVAL
e496 : b0f9             [ 3] 	bcs df_rt_findescval_loop
e498 : 8488             [ 3] 	sty df_exeoff
e49a : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Skip white space
                             ;* Does not check for end of line or statement
                             ;* A contains non-ws char, df_exeoff updated
                             ;****************************************
e49b :                       df_rt_skip_ws
e49b : a488             [ 3] 	ldy df_exeoff
e49d : 88               [ 2] 	dey
e49e :                       df_rt_skip_ws_loop
e49e : c8               [ 2] 	iny
e49f : b186             [ 5] 	lda (df_currlin),y
e4a1 : c920             [ 2] 	cmp #' '
e4a3 : f0f9             [ 3] 	beq df_rt_skip_ws_loop
e4a5 : 8488             [ 3] 	sty df_exeoff
e4a7 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Get an lvar
                             ;* Assumes next token will be escape DFTK_VAR
                             ;* tmpptra contains vvt slot address
                             ;* X,A is the lvar pointer
                             ;****************************************
AS65 Assembler for R6502 [1.42].                                     Page  197
-------------------------------- bank\bank0.s --------------------------------

e4a8 :                       df_rt_getlvar
e4a8 : 208ee4           [ 6] 	jsr df_rt_findescval
                             	; move past the escape value
e4ab : c8               [ 2] 	iny
                             
                             	; get variable address
e4ac : b186             [ 5] 	lda (df_currlin),y
e4ae : 85a1             [ 3] 	sta df_tmpptra
e4b0 : c8               [ 2] 	iny
e4b1 : b186             [ 5] 	lda (df_currlin),y
e4b3 : 85a2             [ 3] 	sta df_tmpptra+1
                             
e4b5 : 8488             [ 3] 	sty df_exeoff
                             	; get the type
e4b7 : a000             [ 2] 	ldy #0
e4b9 : b1a1             [ 5] 	lda (df_tmpptra),y
                             	; set carry flag to return pointer (lvar)
e4bb : 38               [ 2] 	sec
e4bc : a488             [ 3] 	ldy df_exeoff
e4be : 200be2           [ 6] 	jsr df_rt_eval_var
e4c1 : 4c88f6           [ 3] 	jmp df_ost_popPtr
                             ;	rts
                             
                             ;****************************************
                             ;* Pop stat from rt stack and continue
                             ;* Y MUST BE ON THE CPU STACK AS IT GETS PLYed HE
                             ;****************************************
e4c4 :                       df_rt_pop_stat_go
e4c4 : 202de4           [ 6] 	jsr df_rt_pop_stat
                             	; restore stack pointer so we don't lose this en
e4c7 : 68               [ 4] 	pla
e4c8 : a8               [ 2] 	tay
e4c9 : 8476             [ 3] 	sty df_rtstop
e4cb : 18               [ 2] 	clc
e4cc : 60               [ 6] 	rts
                             
                             	include "dflat/rtjmptab.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  RTJUMPTAB.S
                             ;*  Runtime token jump table.
                             ;*  dflat uses four key tables to tokenise and ru
                             ;*  - df_tokensyms    - table of token symbols
                             ;*  - df_tk_tokentype - table of token types
                             ;*  - df_tk_tokenjmp  - table of tokenising routi
                             ;*  - df_rt_tokenjmp  - table of runtime token an
                             ;*  The key is the token symbols.  When a line is
                             ;*  in to the raw (untokenised) buffer, df_tokens
                             ;*  used to identify tokens.  The position of the
                             ;*  token is used to then look up type and jump v
                             ;*  in the other tables.
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code  
AS65 Assembler for R6502 [1.42].                                     Page  198
-------------------------------- bank\bank0.s --------------------------------

                             
                             ; Tokeniser jump table
                             ; In token order of df_tokensyms
e4cd :                       df_rt_tokenjmp
e4cd : b9ec                  	dw	df_rt_assign
e4cf : a6f4                  	dw	df_rt_proc
e4d1 : caec                  	dw	df_rt_comment
e4d3 : 71ec                  	dw	df_rt_println
e4d5 : 2eec                  	dw	df_rt_printat
e4d7 : 38ec                  	dw	df_rt_print
e4d9 : 46f5                  	dw	df_rt_def			; 0x86
e4db : c9f5                  	dw	df_rt_enddef		; 0x87
e4dd : c6f5                  	dw	df_rt_return		; 0x88
e4df : 68f4                  	dw	df_rt_abort			; 0x89
e4e1 : 8aea                  	dw	df_rt_local
e4e3 : b6ea                  	dw	df_rt_dim
e4e5 : 58e9                  	dw	df_rt_repeat		; 0x8c
e4e7 : 60e9                  	dw	df_rt_until
e4e9 : bfe8                  	dw	df_rt_for			; 0x8e
e4eb : fde8                  	dw	df_rt_next			; 0x8f
e4ed : 98e7                  	dw	df_rt_while			; 0x90
e4ef : fbe7                  	dw	df_rt_wend			; 0x81
e4f1 : 7ee8                  	dw	df_rt_if			; 0x92
e4f3 : 6ce8                  	dw	df_rt_else			; 0x93
e4f5 : 67e8                  	dw	df_rt_endif			; 0x94
e4f7 : 6ce8                  	dw	df_rt_elseif		; 0x95
e4f9 : caec                  	dw	df_rt_data			; 0x96
e4fb : 70f9                  	dw	df_rt_asm_assemble	; 0x97 df_rt_asm_assemble
e4fd : cbec                  	dw	df_rt_run
e4ff : c0ed                  	dw	df_rt_list
e501 : 4eea                  	dw	df_rt_input
e503 : c1eb                  	dw	df_rt_text
e505 : 3eeb                  	dw	df_rt_plot
e507 : afeb                  	dw	df_rt_cursor
e509 : 3beb                  	dw	df_rt_cls
e50b : 28f0                  	dw	df_rt_poke
e50d : 19f0                  	dw	df_rt_doke
e50f : 5bf0                  	dw	df_rt_sound
e511 : 6ef0                  	dw	df_rt_music
e513 : 83f0                  	dw	df_rt_play
e515 : 7bf1                  	dw	df_rt_save
e517 : cdf1                  	dw	df_rt_load
e519 : 36ea                  	dw	df_rt_read
e51b : 95e7                  	dw	df_rt_new
e51d : dcec                  	dw	df_rt_renum
e51f : 18ec                  	dw	df_rt_wait
e521 : 33f2                  	dw	df_rt_reset
e523 : c4eb                  	dw	df_rt_hires
e525 : ddeb                  	dw	df_rt_point
e527 : 07ec                  	dw	df_rt_line
e529 : f9eb                  	dw	df_rt_lineto
e52b : c7eb                  	dw	df_rt_pixmode
e52d : cdeb                  	dw	df_rt_ink
e52f : d3eb                  	dw	df_rt_paper
e531 : e7eb                  	dw	df_rt_circle
                             ;	dw	df_rt_fill
e533 : b5eb                  	dw	df_rt_himem
e535 : 92e7                  	dw	df_rt_monitor
e537 : 6af4                  	dw	df_rt_sprchar
e539 : 74f4                  	dw	df_rt_sprpos
e53b : 80f4                  	dw	df_rt_sprupd
e53d : 89f4                  	dw	df_rt_sprinit
AS65 Assembler for R6502 [1.42].                                     Page  199
-------------------------------- bank\bank0.s --------------------------------

e53f : 8cf4                  	dw	df_rt_sprmulti
e541 : 5af1                  	dw	df_rt_bsave
e543 : 27f1                  	dw	df_rt_bload
e545 : d2f0                  	dw	df_rt_tsave
e547 : ecf0                  	dw	df_rt_tload
                             
e549 : 4af2                  	dw	df_rt_peek
e54b : 48f2                  	dw	df_rt_deek
e54d : d3f2                  	dw	df_rt_stick
e54f : d9f2                  	dw	df_rt_get
e551 : 99f3                  	dw	df_rt_chr
e553 : ebf3                  	dw	df_rt_left
e555 : fcf3                  	dw	df_rt_right
e557 : 17f4                  	dw	df_rt_mid
e559 : 35f4                  	dw	df_rt_len
e55b : 85f2                  	dw	df_rt_mem
e55d : edf2                  	dw	df_rt_scrn
e55f : 63f2                  	dw	df_rt_rnd
e561 : 07f3                  	dw	df_rt_elapsed
e563 : 22f3                  	dw	df_rt_call
e565 : adf3                  	dw	df_rt_hex
e567 : def3                  	dw	df_rt_dec
e569 : 41f4                  	dw	df_rt_asc
e56b : 52f4                  	dw	df_rt_val
e56d : faf2                  	dw	df_rt_pixel
e56f : 92f4                  	dw	df_rt_sprhit
e571 : 34f3                  	dw	df_rt_sgn
e573 : 51f3                  	dw	df_rt_addr
                             	
e575 : e8e5                  	dw	df_rt_mult
e577 : 09e6                  	dw	df_rt_div
e579 : 2ae6                  	dw	df_rt_mod
e57b : 4be6                  	dw	df_rt_asl
e57d : 5ee6                  	dw	df_rt_lsr
e57f : c2e5                  	dw	df_rt_add
e581 : d5e5                  	dw	df_rt_sub
                             	
e583 : 71e6                  	dw	df_rt_and
e585 : 80e6                  	dw	df_rt_or
e587 : 8fe6                  	dw	df_rt_eor
e589 : 28e7                  	dw	df_rt_comlte
e58b : 31e7                  	dw	df_rt_comgte
e58d : 3ae7                  	dw	df_rt_comne
e58f : 0de7                  	dw	df_rt_comlt
e591 : 16e7                  	dw	df_rt_comgt
e593 : 1fe7                  	dw	df_rt_comeq
                             
                             
                             ; escape sequence handlers
                             ; to do the reverse of tokenising during the list
                             ; command which is also used to save to disk.
e595 :                       df_rt_escjmp
e595 : 93ee                  	dw df_rt_lst_chr
e597 : 92ee                  	dw df_rt_lst_reserved
e599 : 92ee                  	dw df_rt_lst_reserved
e59b : 92ee                  	dw df_rt_lst_reserved
e59d : 92ee                  	dw df_rt_lst_reserved	
e59f : 92ee                  	dw df_rt_lst_reserved	; no such thing as bytdec
e5a1 : b0ee                  	dw df_rt_lst_bythex
e5a3 : d5ee                  	dw df_rt_lst_bytbin
e5a5 : 92ee                  	dw df_rt_lst_reserved	
e5a7 : f9ee                  	dw df_rt_lst_intdec
AS65 Assembler for R6502 [1.42].                                     Page  200
-------------------------------- bank\bank0.s --------------------------------

e5a9 : c3ee                  	dw df_rt_lst_inthex
e5ab : ddee                  	dw df_rt_lst_intbin
e5ad : 92ee                  	dw df_rt_lst_reserved
e5af : 92ee                  	dw df_rt_lst_reserved
e5b1 : 92ee                  	dw df_rt_lst_reserved
e5b3 : 92ee                  	dw df_rt_lst_reserved	
e5b5 : 56ef                  	dw df_rt_lst_strlit
e5b7 : 04ef                  	dw df_rt_lst_var
e5b9 : 04ef                  	dw df_rt_lst_proc
                             
                             	include "dflat/rtsubs.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  RTSUBS.S
                             ;*  Module that implements the runtime execution 
                             ;*  keywords and functions.
                             ;*  So this is where most of the action is for ru
                             ;*  a line is being executed, the dflat runtime c
                             ;*  jumps through the runtime table to routines h
                             ;*  Every dflat statement begins with a token (ig
                             ;*  whitespace), even the implicit assignment and
                             ;*  invocation.
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code
                             
e5bb :                       mod_sz_rtsubs_s
                             
                             	include "dflat/numop.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  NUMOP.S
                             ;*	Dflat number AND string operators.
                             ;*  Uses the operator stack to get parameters, le
                             ;*  result on the operator stack.
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code  
                             
                             ; common pushint code
e5bb :                       df_rt_putintres
e5bb : a6a1             [ 3] 	ldx df_tmpptra
e5bd : a5a2             [ 3] 	lda df_tmpptra+1
e5bf : 4c50f6           [ 3] 	jmp df_ost_pushInt
                             
                             ; add two numbers
AS65 Assembler for R6502 [1.42].                                     Page  201
-------------------------------- bank\bank0.s --------------------------------

e5c2 :                       df_rt_add
e5c2 : 200de3           [ 6] 	jsr df_rt_get2Ints
                             	_addZPWord df_tmpptra,df_tmpptrb
                             
e5d2 : 4cbbe5           [ 3] 	jmp df_rt_putintres
                             	
                             ; subtract
e5d5 :                       df_rt_sub
e5d5 : 200de3           [ 6] 	jsr df_rt_get2Ints
                             	_subZPWord df_tmpptra,df_tmpptrb
                             
e5e5 : 4cbbe5           [ 3] 	jmp df_rt_putintres
                             
                             ; multiply
e5e8 :                       df_rt_mult
e5e8 : 200de3           [ 6] 	jsr df_rt_get2Ints
                             	_cpyZPWord df_tmpptra,num_a
                             
                             	_cpyZPWord df_tmpptrb,num_b
                             
e5fb : 2076d4           [ 6] 	jsr int_mult
                             	_cpyZPWord num_a,df_tmpptra
                             
e606 : 4cbbe5           [ 3] 	jmp df_rt_putintres
                             
                             ; divide
e609 :                       df_rt_div
e609 : 200de3           [ 6] 	jsr df_rt_get2Ints
                             	_cpyZPWord df_tmpptra,num_a
                             
                             	_cpyZPWord df_tmpptrb,num_b
                             
e61c : 20a1d4           [ 6] 	jsr int_div
                             	_cpyZPWord num_a,df_tmpptra
                             
e627 : 4cbbe5           [ 3] 	jmp df_rt_putintres
                             
                             ; mod
e62a :                       df_rt_mod
e62a : 200de3           [ 6] 	jsr df_rt_get2Ints
                             	_cpyZPWord df_tmpptra,num_a
                             
                             	_cpyZPWord df_tmpptrb,num_b
                             
e63d : 20a1d4           [ 6] 	jsr int_div
                             	_cpyZPWord num_x,df_tmpptra
                             
e648 : 4cbbe5           [ 3] 	jmp df_rt_putintres
                             
                             ; shift left
e64b :                       df_rt_asl
e64b : 200de3           [ 6] 	jsr df_rt_get2Ints
                             	; use low byte only for # of shifts
e64e : a6a3             [ 3] 	ldx df_tmpptrb
e650 : e8               [ 2] 	inx
e651 :                       df_rt_aslbit
e651 : ca               [ 2] 	dex
e652 : f007             [ 3] 	beq df_rt_asldone
e654 : 06a1             [ 5] 	asl df_tmpptra
e656 : 26a2             [ 5] 	rol df_tmpptra+1
e658 : 4c51e6           [ 3] 	jmp df_rt_aslbit
e65b :                       df_rt_asldone
AS65 Assembler for R6502 [1.42].                                     Page  202
-------------------------------- bank\bank0.s --------------------------------

e65b : 4cbbe5           [ 3] 	jmp df_rt_putintres
                             
                             ; shift right
e65e :                       df_rt_lsr
e65e : 200de3           [ 6] 	jsr df_rt_get2Ints
                             	; use low byte only for # of shifts
e661 : a6a3             [ 3] 	ldx df_tmpptrb
e663 : e8               [ 2] 	inx
e664 :                       df_rt_lsrbit
e664 : ca               [ 2] 	dex
e665 : f007             [ 3] 	beq df_rt_lsrdone
e667 : 46a2             [ 5] 	lsr df_tmpptra+1
e669 : 66a1             [ 5] 	ror df_tmpptra
e66b : 4c64e6           [ 3] 	jmp df_rt_lsrbit
e66e :                       df_rt_lsrdone
e66e : 4cbbe5           [ 3] 	jmp df_rt_putintres
                             
                             ; logical and
e671 :                       df_rt_and
e671 : 200de3           [ 6] 	jsr df_rt_get2Ints
e674 : a5a1             [ 3] 	lda df_tmpptra
e676 : 25a3             [ 3] 	and df_tmpptrb
e678 : aa               [ 2] 	tax
e679 : a5a2             [ 3] 	lda df_tmpptra+1
e67b : 25a4             [ 3] 	and df_tmpptrb+1
e67d : 4c50f6           [ 3] 	jmp df_ost_pushInt
                             	
                             ; logical or
e680 :                       df_rt_or
e680 : 200de3           [ 6] 	jsr df_rt_get2Ints
e683 : a5a1             [ 3] 	lda df_tmpptra
e685 : 05a3             [ 3] 	ora df_tmpptrb
e687 : aa               [ 2] 	tax
e688 : a5a2             [ 3] 	lda df_tmpptra+1
e68a : 05a4             [ 3] 	ora df_tmpptrb+1
e68c : 4c50f6           [ 3] 	jmp df_ost_pushInt
                             
                             ; logical eor
e68f :                       df_rt_eor
e68f : 200de3           [ 6] 	jsr df_rt_get2Ints
e692 : a5a1             [ 3] 	lda df_tmpptra
e694 : 45a3             [ 3] 	eor df_tmpptrb
e696 : aa               [ 2] 	tax
e697 : a5a2             [ 3] 	lda df_tmpptra+1
e699 : 45a4             [ 3] 	eor df_tmpptrb+1
e69b : 4c50f6           [ 3] 	jmp df_ost_pushInt
                             
                             ; a==b common function
e69e :                       df_rt_aequb
e69e : a5a1             [ 3] 	lda df_tmpptra
e6a0 : c5a3             [ 3] 	cmp df_tmpptrb
e6a2 : d004             [ 3] 	bne df_rt_aequbFin
e6a4 : a5a2             [ 3] 	lda df_tmpptra+1
e6a6 : c5a4             [ 3] 	cmp df_tmpptrb+1
e6a8 :                       df_rt_aequbFin
e6a8 : 60               [ 6] 	rts
                             
                             ; a-b common function
e6a9 :                       df_rt_asubb
e6a9 : 38               [ 2] 	sec
e6aa : a5a1             [ 3] 	lda df_tmpptra
e6ac : e5a3             [ 3] 	sbc df_tmpptrb
AS65 Assembler for R6502 [1.42].                                     Page  203
-------------------------------- bank\bank0.s --------------------------------

e6ae : a5a2             [ 3] 	lda df_tmpptra+1
e6b0 : e5a4             [ 3] 	sbc df_tmpptrb+1
e6b2 : 5002             [ 3] 	bvc df_rt_asubbFin
e6b4 : 4980             [ 2] 	eor #0x80
e6b6 :                       df_rt_asubbFin
e6b6 : 60               [ 6] 	rts
                             
                             ; b-a common function
e6b7 :                       df_rt_bsuba
e6b7 : 38               [ 2] 	sec
e6b8 : a5a3             [ 3] 	lda df_tmpptrb
e6ba : e5a1             [ 3] 	sbc df_tmpptra
e6bc : a5a4             [ 3] 	lda df_tmpptrb+1
e6be : e5a2             [ 3] 	sbc df_tmpptra+1
e6c0 : 5002             [ 3] 	bvc df_rt_bsubaFin
e6c2 : 4980             [ 2] 	eor #0x80
e6c4 :                       df_rt_bsubaFin
e6c4 : 60               [ 6] 	rts
                             
                             ; common routine push true
e6c5 :                       df_rt_true
e6c5 : a2ff             [ 2] 	ldx #0xff
e6c7 : 8a               [ 2] 	txa
e6c8 : 4c50f6           [ 3] 	jmp df_ost_pushInt
                             
                             ; common routine push false
e6cb :                       df_rt_false
e6cb : a200             [ 2] 	ldx #0x00
e6cd : 8a               [ 2] 	txa
e6ce : 4c50f6           [ 3] 	jmp df_ost_pushInt
                             
                             ; a < b == (a-b) < 0
e6d1 :                       df_rt_lt
e6d1 : 200de3           [ 6] 	jsr df_rt_get2Ints
e6d4 : 20a9e6           [ 6] 	jsr df_rt_asubb
e6d7 : 30ec             [ 3] 	bmi df_rt_true
e6d9 : 10f0             [ 3] 	bpl df_rt_false
                             
                             ; a <=b == !(b-a > 0)
e6db :                       df_rt_lte
e6db : 200de3           [ 6] 	jsr df_rt_get2Ints
e6de :                       df_rt_lte_calc
e6de : 20b7e6           [ 6] 	jsr df_rt_bsuba
e6e1 : 30e8             [ 3] 	bmi df_rt_false
e6e3 : 10e0             [ 3] 	bpl df_rt_true
                             
                             ; a > b == (b-a) < 0
e6e5 :                       df_rt_gt
e6e5 : 200de3           [ 6] 	jsr df_rt_get2Ints
e6e8 : 20b7e6           [ 6] 	jsr df_rt_bsuba
e6eb : 30d8             [ 3] 	bmi df_rt_true
e6ed : 10dc             [ 3] 	bpl df_rt_false
                             
                             ; a >= b == (a-b >=0)
e6ef :                       df_rt_gte
e6ef : 200de3           [ 6] 	jsr df_rt_get2Ints
e6f2 :                       df_rt_gte_calc
e6f2 : 20a9e6           [ 6] 	jsr df_rt_asubb
e6f5 : 10ce             [ 3] 	bpl df_rt_true
e6f7 : 30d2             [ 3] 	bmi df_rt_false
                             
                             ; a == b
AS65 Assembler for R6502 [1.42].                                     Page  204
-------------------------------- bank\bank0.s --------------------------------

e6f9 :                       df_rt_eq
e6f9 : 200de3           [ 6] 	jsr df_rt_get2Ints
e6fc : 209ee6           [ 6] 	jsr df_rt_aequb
e6ff : d0ca             [ 3] 	bne df_rt_false
e701 : f0c2             [ 4] 	beq df_rt_true
                             
                             ; a <> b
e703 :                       df_rt_ne
e703 : 200de3           [ 6] 	jsr df_rt_get2Ints
e706 : 209ee6           [ 6] 	jsr df_rt_aequb
e709 : f0c0             [ 4] 	beq df_rt_false
e70b : d0b8             [ 4] 	bne df_rt_true
                             
                             ; Common usage of boolean operators for num and s
                             
e70d :                       df_rt_comlt
                             	; First find the data type on the stack
e70d : 207af6           [ 6] 	jsr df_ost_peekType
e710 : 2980             [ 2] 	and #DFST_STR
e712 : d04a             [ 3] 	bne df_rt_slt
                             	; If not string then assume number
e714 : f0bb             [ 4] 	beq df_rt_lt
                             
e716 :                       df_rt_comgt
                             	; First find the data type on the stack
e716 : 207af6           [ 6] 	jsr df_ost_peekType
e719 : 2980             [ 2] 	and #DFST_STR
e71b : d048             [ 3] 	bne df_rt_sgt
                             	; If not string then assume number
e71d : f0c6             [ 4] 	beq df_rt_gt
                             
e71f :                       df_rt_comeq
                             	; First find the data type on the stack
e71f : 207af6           [ 6] 	jsr df_ost_peekType
e722 : 2980             [ 2] 	and #DFST_STR
e724 : d048             [ 3] 	bne df_rt_seq
                             	; If not string then assume number
e726 : f0d1             [ 4] 	beq df_rt_eq
                             
e728 :                       df_rt_comlte
                             	; First find the data type on the stack
e728 : 207af6           [ 6] 	jsr df_ost_peekType
e72b : 2980             [ 2] 	and #DFST_STR
e72d : d014             [ 3] 	bne df_rt_slte
                             	; If not string then assume number
e72f : f0aa             [ 4] 	beq df_rt_lte
                             	
e731 :                       df_rt_comgte
                             	; First find the data type on the stack
e731 : 207af6           [ 6] 	jsr df_ost_peekType
e734 : 2980             [ 2] 	and #DFST_STR
e736 : d018             [ 3] 	bne df_rt_sgte
                             	; If not string then assume number
e738 : f0b5             [ 4] 	beq df_rt_gte
                             
e73a :                       df_rt_comne
                             	; First find the data type on the stack
e73a : 207af6           [ 6] 	jsr df_ost_peekType
e73d : 2980             [ 2] 	and #DFST_STR
e73f : d016             [ 3] 	bne df_rt_sne
                             	; If not string then assume number
e741 : f0c0             [ 3] 	beq df_rt_ne
AS65 Assembler for R6502 [1.42].                                     Page  205
-------------------------------- bank\bank0.s --------------------------------

                             
                             
                             ;********** STRING OPS **********
                             
                             ; string less than or equal
e743 :                       df_rt_slte
e743 : 2075e7           [ 6] 	jsr df_rt_str_comp
e746 : 3005             [ 3] 	bmi df_rt_str_comp_true
e748 : f003             [ 3] 	beq df_rt_str_comp_true
e74a :                       df_rt_str_comp_false
e74a : 4ccbe6           [ 3] 	jmp df_rt_false
e74d :                       df_rt_str_comp_true
e74d : 4cc5e6           [ 3] 	jmp df_rt_true	
                             
                             ; string greater then or equal	
e750 :                       df_rt_sgte
e750 : 2075e7           [ 6] 	jsr df_rt_str_comp
e753 : 10f8             [ 3] 	bpl df_rt_str_comp_true
e755 : 30f3             [ 3] 	bmi df_rt_str_comp_false
                             
                             ; string not equal
e757 :                       df_rt_sne
e757 : 2075e7           [ 6] 	jsr df_rt_str_comp
e75a : d0f1             [ 3] 	bne df_rt_str_comp_true
e75c : f0ec             [ 3] 	beq df_rt_str_comp_false
                             
                             ; string less than
e75e :                       df_rt_slt
e75e : 2075e7           [ 6] 	jsr df_rt_str_comp
e761 : 30ea             [ 3] 	bmi df_rt_str_comp_true
e763 : 10e5             [ 3] 	bpl df_rt_str_comp_false
                             
                             ; string greater than
e765 :                       df_rt_sgt
e765 : 2075e7           [ 6] 	jsr df_rt_str_comp
e768 : 30e0             [ 3] 	bmi df_rt_str_comp_false
e76a : f0de             [ 3] 	beq df_rt_str_comp_false
e76c : d0df             [ 3] 	bne df_rt_str_comp_true
                             
                             ; string equal
e76e :                       df_rt_seq
e76e : 2075e7           [ 6] 	jsr df_rt_str_comp
e771 : f0da             [ 3] 	beq df_rt_str_comp_true
e773 : d0d5             [ 3] 	bne df_rt_str_comp_false
                             
                             ; common string comparator
                             ; N=1 means <
                             ; Z=0 means >
                             ; Z=1 means ==
e775 :                       df_rt_str_comp
e775 : 201ce3           [ 6] 	jsr df_rt_get2Strs
e778 : a000             [ 2] 	ldy #0
e77a :                       df_rt_str_comp_byte
e77a : b1a1             [ 5] 	lda (df_tmpptra),y
e77c : aa               [ 2] 	tax							; Save op1 char in X
e77d : d1a3             [ 5] 	cmp (df_tmpptrb),y
                             	; if c=0 then <
e77f : 9008             [ 3] 	bcc df_rt_str_comp_lt
                             	; if c=1 and nz then >
e781 : d009             [ 3] 	bne df_rt_str_comp_gt
                             	; if here then both strings still the same
e783 : 8a               [ 2] 	txa							; What was op1 char
AS65 Assembler for R6502 [1.42].                                     Page  206
-------------------------------- bank\bank0.s --------------------------------

                             	; if char is zero then end
e784 : f009             [ 3] 	beq df_rt_str_comp_eq
                             	; else do next char
e786 : c8               [ 2] 	iny
e787 : d0f1             [ 3] 	bne df_rt_str_comp_byte ; Always - relying on Y 
e789 :                       df_rt_str_comp_lt
e789 : a9ff             [ 2] 	lda #0xff
e78b : 60               [ 6] 	rts
e78c :                       df_rt_str_comp_gt
e78c : a901             [ 2] 	lda #0x01
e78e : 60               [ 6] 	rts
e78f :                       df_rt_str_comp_eq
e78f : a900             [ 2] 	lda #0x00
e791 : 60               [ 6] 	rts
                             
                             
                             
                             
e792 :                       df_rt_monitor
e792 : 4cf1d2           [ 3] 	jmp command_line
                             
e795 :                       df_rt_new
e795 : 4cb1f6           [ 3] 	jmp df_clear
                             
e798 :                       df_rt_while
                             	; push statement address
e798 : 2021e4           [ 6] 	jsr df_rt_push_stat
                             	; DFRT_WHILE token
e79b : a990             [ 2] 	lda #DFRT_WHILE
e79d : 2007f6           [ 6] 	jsr df_rst_pushByte
                             
                             	; get value in A,X
e7a0 : 2061e0           [ 6] 	jsr df_rt_getnval
                             
                             	; if value<>0 then continue
e7a3 : e000             [ 2] 	cpx #0
e7a5 : f001             [ 3] 	beq df_rt_while_done
e7a7 : 60               [ 6] 	rts
e7a8 :                       df_rt_while_done
                             	; pop while data off stack as not needed
e7a8 : 202df6           [ 6] 	jsr df_rst_popWord
e7ab : 202df6           [ 6] 	jsr df_rst_popWord
                             	; while evaluated false so find wend
                             	; but check for any nested while/wends
                             	; nest = 1 to start
e7ae : a593             [ 3] 	lda df_ifnest
e7b0 : 48               [ 3] 	pha
e7b1 : a901             [ 2] 	lda #1
e7b3 : 8593             [ 3] 	sta df_ifnest
                             	; find the matching else/elseif/endif
                             	; start from current statement
                             	_cpyZPWord df_currlin,df_nextlin
                             
e7bd :                       df_rt_findwend
e7bd : a689             [ 3] 	ldx df_nextlin
e7bf : a58a             [ 3] 	lda df_nextlin+1
e7c1 : a480             [ 3] 	ldy df_curstidx
e7c3 : 20f1e3           [ 6] 	jsr df_rt_nextstat
                             	; got to end of program, then a problem
e7c6 : b031             [ 3] 	bcs df_rt_wend_end
e7c8 : 8689             [ 3] 	stx df_nextlin
e7ca : 858a             [ 3] 	sta df_nextlin+1
AS65 Assembler for R6502 [1.42].                                     Page  207
-------------------------------- bank\bank0.s --------------------------------

e7cc : 8480             [ 3] 	sty df_curstidx
                             	; find the command token
e7ce :                       df_rt_while_cmd
e7ce : c8               [ 2] 	iny
e7cf : b189             [ 5] 	lda (df_nextlin),y
e7d1 : 10fb             [ 3] 	bpl df_rt_while_cmd
                             	; check for wend
e7d3 : c991             [ 2] 	cmp #DFRT_WEND
e7d5 : d019             [ 3] 	bne df_rt_check_while
                             	; decrement nest
e7d7 : c693             [ 5] 	dec df_ifnest
                             	; if not zero then go find more commands
e7d9 : d0e2             [ 3] 	bne df_rt_findwend
                             	; else found it, restore if nest
                             	; and skip the wend statement
e7db : 68               [ 4] 	pla
e7dc : 8593             [ 3] 	sta df_ifnest
e7de : a689             [ 3] 	ldx df_nextlin
e7e0 : a58a             [ 3] 	lda df_nextlin+1
e7e2 : a480             [ 3] 	ldy df_curstidx
e7e4 : 20f1e3           [ 6] 	jsr df_rt_nextstat
                             	; got to end of program, then a problem
e7e7 : b010             [ 3] 	bcs df_rt_wend_end
                             	; need to update nxtstidx to transfer control
e7e9 : 8689             [ 3] 	stx df_nextlin
e7eb : 858a             [ 3] 	sta df_nextlin+1
e7ed : 847f             [ 3] 	sty df_nxtstidx
e7ef : 60               [ 6] 	rts
e7f0 :                       df_rt_check_while
                             	; check for while
e7f0 : c990             [ 2] 	cmp #DFRT_WHILE
e7f2 : d0c9             [ 3] 	bne df_rt_findwend
                             	; if while found then increment nest
e7f4 : e693             [ 5] 	inc df_ifnest
e7f6 : 4cbde7           [ 3] 	jmp df_rt_findwend
e7f9 :                       df_rt_wend_end
                             	SWBRK DFERR_IMMEDIATE
                             
                             
e7fb :                       df_rt_wend
e7fb : 2010f6           [ 6] 	jsr df_rst_popByte
e7fe : c990             [ 2] 	cmp #DFRT_WHILE
e800 : d00d             [ 3] 	bne df_rt_wend_err
                             	; pop the stat and continue
e802 : 202df6           [ 6] 	jsr df_rst_popWord
e805 : 8689             [ 3] 	stx	df_nextlin
e807 : 858a             [ 3] 	sta df_nextlin+1
e809 : 2010f6           [ 6] 	jsr df_rst_popByte
e80c : 857f             [ 3] 	sta df_nxtstidx
e80e : 60               [ 6] 	rts
e80f :                       df_rt_wend_err
                             	SWBRK DFERR_WEND
                             
                             
                             ;move to next statement during if/else matching
                             ;end of program is an error
e811 :                       df_rt_if_stat
e811 : a689             [ 3] 	ldx df_nextlin
e813 : a58a             [ 3] 	lda df_nextlin+1
e815 : a480             [ 3] 	ldy df_curstidx
e817 : 20f1e3           [ 6] 	jsr df_rt_nextstat
                             	; got to end of program, then a problem
AS65 Assembler for R6502 [1.42].                                     Page  208
-------------------------------- bank\bank0.s --------------------------------

e81a : b009             [ 3] 	bcs df_rt_if_stat_err
e81c : 8689             [ 3] 	stx df_nextlin
e81e : 858a             [ 3] 	sta df_nextlin+1
e820 : 8480             [ 3] 	sty df_curstidx
e822 : 847f             [ 3] 	sty df_nxtstidx
e824 : 60               [ 6] 	rts
                             ; program ended with no match
e825 :                       df_rt_if_stat_err
                             	SWBRK DFERR_UNCLOSEDIF
                             
                             
                             ; find matching else/elseif/endif
                             ; C = 0 match else/elseif/endif
                             ; C = 1 match endif only
                             ; endif is always matched
                             ; ** MAKE SURE NEXTLIN IS POPULATED! **
e827 :                       df_rt_if_match
                             	; save the current if nest level
e827 : a593             [ 3] 	lda df_ifnest
e829 : 48               [ 3] 	pha
                             	; local if nest level is zero to start with
e82a : a900             [ 2] 	lda #0
e82c : 8593             [ 3] 	sta df_ifnest
                             	; save match pref
e82e : 08               [ 3] 	php
                             	; find the matching else/elseif/endif
                             	; start from df_nextlin, df_curstidx
e82f :                       df_rt_findelseendif
e82f : 2011e8           [ 6] 	jsr df_rt_if_stat
                             	; find command
e832 :                       df_rt_ifcmd
e832 : c8               [ 2] 	iny
e833 : b189             [ 5] 	lda (df_nextlin),y
e835 : 10fb             [ 3] 	bpl df_rt_ifcmd
                             	; check for endif
e837 : c994             [ 2] 	cmp #DFRT_ENDIF
e839 : f015             [ 3] 	beq df_rt_ifelse
                             
e83b : 28               [ 4] 	plp
e83c : 08               [ 3] 	php
                             
e83d : b008             [ 3] 	bcs df_rt_ifskipelseif
e83f : c993             [ 2] 	cmp #DFRT_ELSE
e841 : f00d             [ 3] 	beq df_rt_ifelse
e843 : c995             [ 2] 	cmp #DFRT_ELSEIF
e845 : f009             [ 3] 	beq df_rt_ifelse
e847 :                       df_rt_ifskipelseif
                             	; another if token found - increment lcoal if ne
e847 : c992             [ 2] 	cmp #DFRT_IF
e849 : d002             [ 3] 	bne df_rt_skipnestif
e84b : e693             [ 5] 	inc df_ifnest
e84d :                       df_rt_skipnestif
                             	; no tokens of interest found, so next statement
e84d : 4c2fe8           [ 3] 	jmp df_rt_findelseendif
                             
                             	; found else/elseif/endif
                             	; but check if this is nested
e850 :                       df_rt_ifelse
                             	; nest counter zero then found matching else/els
e850 : a693             [ 3] 	ldx df_ifnest
e852 : f009             [ 3] 	beq df_rt_if_found
                             	; endif token found so decrement local nest
AS65 Assembler for R6502 [1.42].                                     Page  209
-------------------------------- bank\bank0.s --------------------------------

e854 : c994             [ 2] 	cmp #DFRT_ENDIF
e856 : d002             [ 3] 	bne df_rt_skipnestendif
e858 : c693             [ 5] 	dec df_ifnest
e85a :                       df_rt_skipnestendif
                             	; continue to search for else/endif
e85a : 4c2fe8           [ 3] 	jmp df_rt_findelseendif
                             	; ok got a match
e85d :                       df_rt_if_found
                             	; remove pref
e85d : 28               [ 4] 	plp
                             	; restore global if nest
e85e : 8538             [ 3] 	sta tmp_d			; Using as a temp place!
e860 : 68               [ 4] 	pla					; Get nest from stack
e861 : aa               [ 2] 	tax					; And put in X
e862 : a538             [ 3] 	lda tmp_d			; Get a back from temp!
e864 : 8693             [ 3] 	stx df_ifnest		; Now restore the nest counter
                             
                             	;A contains the token found, Y is index in to df
                             ;	clc
e866 : 60               [ 6] 	rts
                             
e867 :                       df_rt_endif
                             	; decrement if next level
e867 : c693             [ 5] 	dec df_ifnest
e869 : 3011             [ 3] 	bmi df_rt_noif_err
e86b :                       df_rt_if_done
e86b : 60               [ 6] 	rts
                             
                             	; else and ifelse encountered in a normal sequen
                             	; only happens when the clause has been executed
                             	; so we only now need to find the endif
e86c :                       df_rt_elseif
e86c :                       df_rt_else
                             	; not in if mode then error
e86c : a593             [ 3] 	lda df_ifnest
e86e : f00c             [ 3] 	beq df_rt_noif_err
                             	; find endif only
                             	; starting from current line and curstidx
                             	_cpyZPWord df_currlin,df_nextlin
                             
e878 : 38               [ 2] 	sec
e879 : 4c27e8           [ 3] 	jmp df_rt_if_match
                             
                             ; endif/else/elseif encountered outside of an if
e87c :                       df_rt_noif_err
                             	SWBRK DFERR_NOIF
                             
                             
                             	; when if is encountered, the job of this routin
                             	; to determine which clause to execute, then tra
                             	; program control to that point.  in normal prog
                             	; sequence else/elseif statements will signify t
                             	; of an if construct.
e87e :                       df_rt_if
                             	; increment global if nest counter
e87e : e693             [ 5] 	inc df_ifnest
e880 :                       df_rt_ifeval
                             	; get value
e880 : 2061e0           [ 6] 	jsr df_rt_getnval
                             	; if X,A<>0 if is successful then continue norma
e883 : a8               [ 2] 	tay
e884 : d0e5             [ 3] 	bne df_rt_if_done
AS65 Assembler for R6502 [1.42].                                     Page  210
-------------------------------- bank\bank0.s --------------------------------

e886 : 8a               [ 2] 	txa
e887 : d0e2             [ 3] 	bne df_rt_if_done
                             	; got here then if clause evaluated to false
                             	; match with else/elseif/endif
                             	; df_nextlin is used to find the clause to execu
                             	_cpyZPWord df_currlin,df_nextlin
                             
e891 : 18               [ 2] 	clc
e892 : 2027e8           [ 6] 	jsr df_rt_if_match
                             	; A contains the token found, Y is index of this
                             
e895 : c993             [ 2] 	cmp #DFRT_ELSE
                             	; else: df_nextlin and df_nxtstidx points to the
e897 : f023             [ 3] 	beq df_rt_do_else
                             
e899 : c994             [ 2] 	cmp #DFRT_ENDIF
                             	; else: df_nextlin and df_nxtstidx points to the
e89b : f0ce             [ 3] 	beq df_rt_if_done
                             
                             	; elif detected - increment past the token and e
                             	; make this the current line and token index
                             	_cpyZPWord df_nextlin,df_currlin
                             
                             	; move past the token and save position
e8a5 : c8               [ 2] 	iny
e8a6 : 98               [ 2] 	tya
e8a7 : 48               [ 3] 	pha
                             	; initialise statement pointer
e8a8 : a480             [ 3] 	ldy df_curstidx
e8aa : a686             [ 3] 	ldx df_currlin
e8ac : a587             [ 3] 	lda df_currlin+1
e8ae : 2069e3           [ 6] 	jsr df_rt_init_stat_ptr
                             	; restore Y (one byte past the token) and save i
e8b1 : 68               [ 4] 	pla
e8b2 : a8               [ 2] 	tay
e8b3 : 8488             [ 3] 	sty df_exeoff
                             	; don't force a jump as we've initalised all var
e8b5 : a900             [ 2] 	lda #0
e8b7 : 858a             [ 3] 	sta df_nextlin+1
                             	; now everyting is set up to evaluate the elif c
e8b9 : 4c80e8           [ 3] 	jmp df_rt_ifeval
                             
e8bc :                       df_rt_do_else
                             	; we need to point to the next statement not thi
e8bc : 4c11e8           [ 3] 	jmp df_rt_if_stat
                             
e8bf :                       df_rt_for
                             	; push statement address to rt stack
e8bf : 2021e4           [ 6] 	jsr df_rt_push_stat
                             	; get lvar
e8c2 : 20a8e4           [ 6] 	jsr df_rt_getlvar
                             	; Save lvar pointer, A is fine to trample
e8c5 : 48               [ 3] 	pha
e8c6 : 8a               [ 2] 	txa
e8c7 : 48               [ 3] 	pha
                             
                             	; find starting value
                             	; evaluate the starting value
                             	; can't use df_rt_getnval as need to use A,X fir
e8c8 : e688             [ 5] 	inc df_exeoff
e8ca : 2067e0           [ 6] 	jsr df_rt_neval
                             	; get ready to update the counter using pointer
AS65 Assembler for R6502 [1.42].                                     Page  211
-------------------------------- bank\bank0.s --------------------------------

e8cd : 68               [ 4] 	pla
e8ce : aa               [ 2] 	tax
e8cf : 86a1             [ 3] 	stx df_tmpptra
e8d1 : 68               [ 4] 	pla
e8d2 : 85a2             [ 3] 	sta df_tmpptra+1
                             	; But remember lvar pointer for later A is ok to
e8d4 : 48               [ 3] 	pha
e8d5 : 8a               [ 2] 	txa
e8d6 : 48               [ 3] 	pha
                             
                             	; get the starting value from op stack
e8d7 : 2080f6           [ 6] 	jsr df_ost_popInt
                             	; save it to counter slot
e8da : a001             [ 2] 	ldy #1
e8dc : 91a1             [ 5] 	sta (df_tmpptra),y
e8de : 8a               [ 2] 	txa
e8df : 88               [ 2] 	dey
e8e0 : 91a1             [ 5] 	sta (df_tmpptra),y
                             
                             	; find end value
                             	; evaluate the end value
e8e2 : e688             [ 5] 	inc df_exeoff
e8e4 : 2061e0           [ 6] 	jsr df_rt_getnval
                             	; and put on rt stack
e8e7 : 201ff6           [ 6] 	jsr df_rst_pushWord
                             
                             	; find step value
                             	; evaluate the end value
e8ea : e688             [ 5] 	inc df_exeoff
e8ec : 2061e0           [ 6] 	jsr df_rt_getnval
                             	; and push on rt stack
e8ef : 201ff6           [ 6] 	jsr df_rst_pushWord
                             	; save the counter lvar pointer
e8f2 : 68               [ 4] 	pla
e8f3 : aa               [ 2] 	tax
e8f4 : 68               [ 4] 	pla
e8f5 : 201ff6           [ 6] 	jsr df_rst_pushWord
                             	; all done - counter set to start
                             	; stack contains counter slot, step val, end val
                             	; now push for token
e8f8 : a98e             [ 2] 	lda #DFRT_FOR
e8fa : 4c07f6           [ 3] 	jmp df_rst_pushByte
                             
e8fd :                       df_rt_next
                             	; remember stack position
e8fd : a476             [ 3] 	ldy df_rtstop
e8ff : 98               [ 2] 	tya
e900 : 48               [ 3] 	pha
e901 : 2010f6           [ 6] 	jsr df_rst_popByte
e904 : c98e             [ 2] 	cmp #DFRT_FOR
e906 : d04e             [ 3] 	bne df_rt_next_err
                             	; get the slot address
e908 : 202df6           [ 6] 	jsr df_rst_popWord
                             	; save address to ptrd, contents to ptra
e90b : 86a7             [ 3] 	stx df_tmpptrd
e90d : 85a8             [ 3] 	sta df_tmpptrd+1
e90f : a000             [ 2] 	ldy #0
e911 : b1a7             [ 5] 	lda (df_tmpptrd),y
e913 : 85a1             [ 3] 	sta df_tmpptra
e915 : c8               [ 2] 	iny
e916 : b1a7             [ 5] 	lda (df_tmpptrd),y
e918 : 85a2             [ 3] 	sta df_tmpptra+1
AS65 Assembler for R6502 [1.42].                                     Page  212
-------------------------------- bank\bank0.s --------------------------------

                             
                             	; get step value, save in ptrb
e91a : 202df6           [ 6] 	jsr df_rst_popWord
e91d : 86a3             [ 3] 	stx df_tmpptrb
e91f : 85a4             [ 3] 	sta df_tmpptrb+1
e921 : 48               [ 3] 	pha					; Push A to check for -ve step
                             
                             	; add step to counter and save back to counter
                             	_addZPWord df_tmpptra,df_tmpptrb
                             
e92f : a5a1             [ 3] 	lda df_tmpptra
e931 : a000             [ 2] 	ldy #0
e933 : 91a7             [ 5] 	sta (df_tmpptrd),y
e935 : a5a2             [ 3] 	lda df_tmpptra+1
e937 : c8               [ 2] 	iny
e938 : 91a7             [ 5] 	sta (df_tmpptrd),y
                             
                             	; get end value, save in ptrb
e93a : 202df6           [ 6] 	jsr df_rst_popWord
e93d : 86a3             [ 3] 	stx df_tmpptrb
e93f : 85a4             [ 3] 	sta df_tmpptrb+1
e941 : 68               [ 4] 	pla					; check if if +ve or -ve step
e942 : 1006             [ 3] 	bpl df_rt_check_pos
                             	; call gte operation but no need to get ints
                             	; as already in ptra and ptrb
e944 : 20f2e6           [ 6] 	jsr df_rt_gte_calc
e947 : 4c4de9           [ 3] 	jmp df_rt_next_check
e94a :                       df_rt_check_pos
                             	; call lte operation but no need to get ints
                             	; as already in ptra and ptrb
e94a : 20dee6           [ 6] 	jsr df_rt_lte_calc
e94d :                       df_rt_next_check
                             	; check if true or false
e94d : 2080f6           [ 6] 	jsr df_ost_popInt
e950 : 8a               [ 2] 	txa
                             	; if false then next is done
e951 : f020             [ 3] 	beq df_rt_untilnext_done
                             	; else we continue
e953 : 4cc4e4           [ 3] 	jmp df_rt_pop_stat_go
                             
e956 :                       df_rt_next_err
                             	SWBRK DFERR_NEXTFOR
                             
                             
                             
e958 :                       df_rt_repeat
                             	; push statement address
e958 : 2021e4           [ 6] 	jsr df_rt_push_stat
                             	; DFRT_REPEAT token
e95b : a98c             [ 2] 	lda #DFRT_REPEAT
e95d : 4c07f6           [ 3] 	jmp df_rst_pushByte
                             
e960 :                       df_rt_until
                             	; remember stack position
e960 : a576             [ 3] 	lda df_rtstop
e962 : 48               [ 3] 	pha
e963 : 2010f6           [ 6] 	jsr df_rst_popByte
e966 : c98c             [ 2] 	cmp #DFRT_REPEAT
e968 : d011             [ 3] 	bne df_rt_until_err
                             	; evaluate expression in to A,X
e96a : 2061e0           [ 6] 	jsr df_rt_getnval
                             	; if value<>0 then continue
AS65 Assembler for R6502 [1.42].                                     Page  213
-------------------------------- bank\bank0.s --------------------------------

e96d : 8a               [ 2] 	txa
e96e : d003             [ 3] 	bne df_rt_untilnext_done
                             
                             	; pop the stat and continue
e970 : 4cc4e4           [ 3] 	jmp df_rt_pop_stat_go
                             
e973 :                       df_rt_untilnext_done
e973 : 68               [ 4] 	pla
e974 : a8               [ 2] 	tay
                             	; pop 2 items off stack (line address, index)
                             	; and continue
e975 : 202df6           [ 6] 	jsr df_rst_popWord
e978 : 4c10f6           [ 3] 	jmp df_rst_popByte
                             
e97b :                       df_rt_until_err
                             	SWBRK DFERR_UNTIL
                             
                             
e97d :                       df_rt_sadd
e97d : 60               [ 6] 	rts
                             
e97e :                       df_rt_print_num
e97e : 2080f6           [ 6] 	jsr df_ost_popInt
e981 : 18               [ 2] 	clc
e982 : 4cf8c3           [ 3] 	jmp print_a_to_d
                             
e985 :                       df_rt_print_str
e985 : 2084f6           [ 6] 	jsr df_ost_popStr
e988 : 86a1             [ 3] 	stx df_tmpptra
e98a : 85a2             [ 3] 	sta df_tmpptra+1
e98c : a000             [ 2] 	ldy #0
e98e :                       df_rt_print_str_ch
e98e : b1a1             [ 5] 	lda (df_tmpptra),y
e990 : f006             [ 3] 	beq df_rt_print_str_done
e992 : 203dc4           [ 6] 	jsr io_put_ch
e995 : c8               [ 2] 	iny
e996 : d0f6             [ 3] 	bne df_rt_print_str_ch		; Rely on y not wrapping
e998 :                       df_rt_print_str_done
e998 : 60               [ 6] 	rts
                             
                             ; * Find the position of the next data item to re
e999 :                       df_rt_nextdatum
e999 : a200             [ 2] 	ldx #0
                             	; load data line offset
e99b : a496             [ 3] 	ldy df_datoff
                             	; if data pointer unitialised (because high byte
e99d : a595             [ 3] 	lda df_currdat+1
e99f : d02e             [ 3] 	bne df_rt_skipinitdataptr
                             	; then start at program beginning
                             	_cpyZPWord df_prgstrt,df_currdat
                             
e9a9 :                       df_rt_datlinstart
                             	; if end of program then error
e9a9 : a194             [ 6] 	lda (df_currdat,x)
e9ab : f032             [ 3] 	beq df_rt_datumerr
                             	; index in to first line byte
e9ad : a003             [ 2] 	ldy #3
e9af : 8496             [ 3] 	sty df_datoff
                             	; find first 'data' statement
e9b1 :                       df_rt_datastatement
e9b1 : c8               [ 2] 	iny
e9b2 : 98               [ 2] 	tya
AS65 Assembler for R6502 [1.42].                                     Page  214
-------------------------------- bank\bank0.s --------------------------------

                             	; end of line reached?
e9b3 : c194             [ 6] 	cmp (df_currdat,x)
                             	; if not find data token
e9b5 : d00e             [ 3] 	bne df_rt_getdatatk
e9b7 :                       df_rt_datnextlin
                             	; if so then go to next line
e9b7 : 18               [ 2] 	clc
e9b8 : a594             [ 3] 	lda df_currdat
e9ba : 6194             [ 6] 	adc (df_currdat,x)
e9bc : 8594             [ 3] 	sta df_currdat
                             	_bcc 2
                             
e9c0 : e695             [ 5] 	inc df_currdat+1
e9c2 : 4ca9e9           [ 3] 	jmp df_rt_datlinstart
e9c5 :                       df_rt_getdatatk
e9c5 : b194             [ 5] 	lda (df_currdat),y
e9c7 : 10e8             [ 3] 	bpl df_rt_datastatement
                             	; found data statement?
e9c9 : c996             [ 2] 	cmp #DFRT_DATA
                             	; if not then go to next line
e9cb : d0ea             [ 3] 	bne df_rt_datnextlin
e9cd : 8496             [ 3] 	sty df_datoff
e9cf :                       df_rt_skipinitdataptr
e9cf : 98               [ 2] 	tya
                             	; end of line reached?
e9d0 : c194             [ 6] 	cmp (df_currdat,x)
                             	; if so go to next line
e9d2 : f0e3             [ 3] 	beq df_rt_datnextlin
                             	; else see if escape value
e9d4 : b194             [ 5] 	lda (df_currdat),y
e9d6 : c920             [ 2] 	cmp #DFTK_ESCVAL
e9d8 : c8               [ 2] 	iny
e9d9 : b0f4             [ 3] 	bcs df_rt_skipinitdataptr
                             	; ok found an escape value
                             	; save position and return
e9db : 88               [ 2] 	dey
e9dc : 8496             [ 3] 	sty df_datoff
e9de : 60               [ 6] 	rts
e9df :                       df_rt_datumerr
                             	SWBRK DFERR_NODATA
                             
                             
                             ; read a datum
e9e1 :                       df_rt_readdatum
                             	; update data pointer to next data item
e9e1 : 2099e9           [ 6] 	jsr df_rt_nextdatum
                             	; now get lvar X,A from current statement
e9e4 : 20a8e4           [ 6] 	jsr df_rt_getlvar
                             	; save lvar in tmpb, vvt ptr in tmpa
e9e7 : 86a3             [ 3] 	stx df_tmpptrb
e9e9 : 85a4             [ 3] 	sta df_tmpptrb+1
                             
                             	; first save save current prgoram line and offse
e9eb : a586             [ 3] 	lda df_currlin
e9ed : 48               [ 3] 	pha
e9ee : a587             [ 3] 	lda df_currlin+1
e9f0 : 48               [ 3] 	pha
e9f1 : a588             [ 3] 	lda df_exeoff
e9f3 : 48               [ 3] 	pha
e9f4 : a57e             [ 3] 	lda df_eolidx
e9f6 : 48               [ 3] 	pha
e9f7 : a57f             [ 3] 	lda df_nxtstidx
AS65 Assembler for R6502 [1.42].                                     Page  215
-------------------------------- bank\bank0.s --------------------------------

e9f9 : 48               [ 3] 	pha
e9fa : a580             [ 3] 	lda df_curstidx
e9fc : 48               [ 3] 	pha
                             
                             	; use data pointer as current position for evalu
                             	_cpyZPWord df_currdat,df_currlin
                             
ea05 : a596             [ 3] 	lda df_datoff
ea07 : 8588             [ 3] 	sta df_exeoff
ea09 : a200             [ 2] 	ldx #0
ea0b : a194             [ 6] 	lda (df_currdat,x)
ea0d : 857e             [ 3] 	sta df_eolidx
ea0f : 857f             [ 3] 	sta df_nxtstidx
ea11 : a903             [ 2] 	lda #3
ea13 : 8580             [ 3] 	sta df_curstidx
                             
                             	; get type from vvt ptr in tmpa
ea15 : a1a1             [ 6] 	lda (df_tmpptra,x)
ea17 : a8               [ 2] 	tay
                             	; get lvar point from tmpb
ea18 : a6a3             [ 3] 	ldx df_tmpptrb
ea1a : a5a4             [ 3] 	lda df_tmpptrb+1
                             
                             	; X,A and Y set up, now evaluate and perform ass
ea1c : 20bcec           [ 6] 	jsr df_rt_doassign
                             
                             	; update data offset as data has been consumed
ea1f : a588             [ 3] 	lda df_exeoff
ea21 : 8596             [ 3] 	sta df_datoff
                             	; restore line settings
ea23 : 68               [ 4] 	pla
ea24 : 8580             [ 3] 	sta df_curstidx
ea26 : 68               [ 4] 	pla
ea27 : 857f             [ 3] 	sta df_nxtstidx
ea29 : 68               [ 4] 	pla
ea2a : 857e             [ 3] 	sta df_eolidx
ea2c : 68               [ 4] 	pla
ea2d : 8588             [ 3] 	sta df_exeoff
ea2f : 68               [ 4] 	pla
ea30 : 8587             [ 3] 	sta df_currlin+1
ea32 : 68               [ 4] 	pla
ea33 : 8586             [ 3] 	sta df_currlin
ea35 : 60               [ 6] 	rts
                             
                             
ea36 :                       df_rt_read
                             	; find variable to read in to from current posit
ea36 : a488             [ 3] 	ldy df_exeoff
ea38 :                       df_rt_read_find_var
ea38 : c8               [ 2] 	iny
                             	; if end of line or statement then done
                             ;	cpy df_eolidx
                             ;	beq df_rt_read_done
ea39 : c47f             [ 3] 	cpy df_nxtstidx
ea3b : f00e             [ 3] 	beq df_rt_read_done
                             	; if not found escape then next byte
ea3d : b186             [ 5] 	lda (df_currlin),y
ea3f : c920             [ 2] 	cmp #DFTK_ESCVAL
ea41 : b0f5             [ 3] 	bcs df_rt_read_find_var
                             	; ok found escape, save position
ea43 : 8488             [ 3] 	sty df_exeoff
                             	; go and read in the value
AS65 Assembler for R6502 [1.42].                                     Page  216
-------------------------------- bank\bank0.s --------------------------------

ea45 : 20e1e9           [ 6] 	jsr df_rt_readdatum
                             	; try find another variable
ea48 : 4c36ea           [ 3] 	jmp df_rt_read
                             
ea4b :                       df_rt_read_done
                             	; save position
ea4b : 8488             [ 3] 	sty df_exeoff
ea4d : 60               [ 6] 	rts
                             
ea4e :                       df_rt_input
                             	; df_tmpptra has the vvt address, X,A is the lva
ea4e : 20a8e4           [ 6] 	jsr df_rt_getlvar
                             	; Save lvar pointer
ea51 : 86a3             [ 3] 	stx df_tmpptrb
ea53 : 85a4             [ 3] 	sta df_tmpptrb+1
                             	; go read a line of input
                             	; buf_lo ptr has the input, Y is size
ea55 : 38               [ 2] 	sec
ea56 : 2052c4           [ 6] 	jsr io_read_line
                             	; check the type
ea59 : a200             [ 2] 	ldx #0
ea5b : a1a1             [ 6] 	lda (df_tmpptra,x)
ea5d : 2904             [ 2] 	and #DFVVT_STR
ea5f : d008             [ 3] 	bne df_rt_input_str
ea61 : a1a1             [ 6] 	lda (df_tmpptra,x)
ea63 : 2903             [ 2] 	and #DFVVT_INT|DFVVT_BYT
ea65 : d00a             [ 3] 	bne df_rt_input_num
                             	; if not int or byte then error
ea67 : f01f             [ 3] 	beq df_rt_input_err
ea69 :                       df_rt_input_str
ea69 : b139             [ 5] 	lda (buf_lo),y
ea6b : 91a3             [ 5] 	sta (df_tmpptrb),y
ea6d : 88               [ 2] 	dey
ea6e : 10f9             [ 3] 	bpl df_rt_input_str
ea70 : 60               [ 6] 	rts
                             
ea71 :                       df_rt_input_num
                             	; X,A = address, linbuff must be on page boundar
ea71 : a53a             [ 3] 	lda buf_lo+1
ea73 : a639             [ 3] 	ldx buf_lo
ea75 : a000             [ 2] 	ldy #0				; any numeric format
ea77 : 20e1c1           [ 6] 	jsr con_n_to_a
ea7a : b00c             [ 3] 	bcs df_rt_input_err
ea7c : a000             [ 2] 	ldy #0
ea7e : a53d             [ 3] 	lda num_a
ea80 : 91a3             [ 5] 	sta (df_tmpptrb),y
ea82 : c8               [ 2] 	iny
ea83 : a53e             [ 3] 	lda num_a+1
ea85 : 91a3             [ 5] 	sta (df_tmpptrb),y
ea87 : 60               [ 6] 	rts
ea88 :                       df_rt_input_err
                             	SWBRK DFERR_TYPEMISM
                             
                             
ea8a :                       df_rt_local
                             	; get current local count off rt stack
ea8a : 2010f6           [ 6] 	jsr df_rst_popByte
                             	; save on pc stack for incrmenting
ea8d : 48               [ 3] 	pha
ea8e : a488             [ 3] 	ldy df_exeoff
ea90 : 88               [ 2] 	dey
ea91 :                       df_rt_local_findesc
AS65 Assembler for R6502 [1.42].                                     Page  217
-------------------------------- bank\bank0.s --------------------------------

ea91 : c8               [ 2] 	iny
                             	; check end of line
                             ;	cpy df_eolidx
                             ;	beq df_rt_local_done
ea92 : c47f             [ 3] 	cpy df_nxtstidx
ea94 : f01c             [ 3] 	beq df_rt_local_done
                             	; find a var
ea96 : b186             [ 5] 	lda (df_currlin),y
ea98 : c911             [ 2] 	cmp #DFTK_VAR
ea9a : d0f5             [ 3] 	bne df_rt_local_findesc
                             	; jump over escape value
ea9c : c8               [ 2] 	iny
                             	; get var slot in A,X
ea9d : b186             [ 5] 	lda (df_currlin),y
ea9f : aa               [ 2] 	tax
eaa0 : c8               [ 2] 	iny
eaa1 : b186             [ 5] 	lda (df_currlin),y
eaa3 : 8488             [ 3] 	sty df_exeoff
                             	; localise this variable
eaa5 : 20f3f5           [ 6] 	jsr df_rt_proc_local
                             	; increment local counter
eaa8 : 68               [ 4] 	pla
eaa9 : 18               [ 2] 	clc
eaaa : 6901             [ 2] 	adc #1
eaac : 48               [ 3] 	pha
eaad : a488             [ 3] 	ldy df_exeoff
eaaf : 4c91ea           [ 3] 	jmp df_rt_local_findesc
eab2 :                       df_rt_local_done
                             	; get the local counter
                             	; put on to rt stack
eab2 : 68               [ 4] 	pla
eab3 : 4c07f6           [ 3] 	jmp df_rst_pushByte
                             
                             
eab6 :                       df_rt_dim
eab6 : a488             [ 3] 	ldy df_exeoff
eab8 : 88               [ 2] 	dey
eab9 :                       df_rt_dim_findesc
                             	; check end of line
eab9 : c8               [ 2] 	iny
                             ;	cpy df_eolidx
                             ;	beq df_rt_dim_done
eaba : c47f             [ 3] 	cpy df_nxtstidx
eabc : f07a             [ 4] 	beq df_rt_dim_done
                             	; find a var
eabe : b186             [ 5] 	lda (df_currlin),y
eac0 : c911             [ 2] 	cmp #DFTK_VAR
eac2 : d0f5             [ 3] 	bne df_rt_dim_findesc
                             	; jump over escape value
eac4 : c8               [ 2] 	iny
                             	; get var address
eac5 : b186             [ 5] 	lda (df_currlin),y
eac7 : 85a1             [ 3] 	sta df_tmpptra
eac9 : c8               [ 2] 	iny
eaca : b186             [ 5] 	lda (df_currlin),y
eacc : 85a2             [ 3] 	sta df_tmpptra+1
                             	; move to open bracket
eace : c8               [ 2] 	iny
eacf : 8488             [ 3] 	sty df_exeoff
                             	; check if already dim'd
ead1 : a003             [ 2] 	ldy #DFVVT_DIM1
ead3 : b1a1             [ 5] 	lda (df_tmpptra),y
AS65 Assembler for R6502 [1.42].                                     Page  218
-------------------------------- bank\bank0.s --------------------------------

ead5 : d062             [ 4] 	bne df_rt_dim_err
                             	; Save slot address found earlier
ead7 : a5a1             [ 3] 	lda df_tmpptra
ead9 : 48               [ 3] 	pha
eada : a5a2             [ 3] 	lda df_tmpptra+1
eadc : 48               [ 3] 	pha
eadd : 20e7e1           [ 6] 	jsr df_rt_arry_parm2
                             	; Restore slot address
eae0 : 68               [ 4] 	pla
eae1 : 85a2             [ 3] 	sta df_tmpptra+1
eae3 : 68               [ 4] 	pla
eae4 : 85a1             [ 3] 	sta df_tmpptra
                             ;	bcs df_rt_dim_err
                             	; save x,y to dim1,2
eae6 : 98               [ 2] 	tya
eae7 : 48               [ 3] 	pha
eae8 : 8a               [ 2] 	txa
eae9 : 48               [ 3] 	pha
eaea : a003             [ 2] 	ldy #DFVVT_DIM1
eaec : 68               [ 4] 	pla
eaed : 91a1             [ 5] 	sta (df_tmpptra),y
eaef : c8               [ 2] 	iny
eaf0 : 68               [ 4] 	pla
eaf1 : 91a1             [ 5] 	sta (df_tmpptra),y
eaf3 :                       df_rt_dim_alloc
                             	; ok we have up to 2 dimensions
                             	; mult dim 1 and 2 if dim 2 <> 0
eaf3 : a003             [ 2] 	ldy #DFVVT_DIM1
eaf5 : b1a1             [ 5] 	lda (df_tmpptra),y
eaf7 : 853d             [ 3] 	sta num_a
eaf9 : a900             [ 2] 	lda #0
eafb : 853e             [ 3] 	sta num_a+1
eafd : c8               [ 2] 	iny
eafe : b1a1             [ 5] 	lda (df_tmpptra),y
eb00 : d002             [ 3] 	bne df_rt_dim2_nz
eb02 : a901             [ 2] 	lda #1
eb04 :                       df_rt_dim2_nz
eb04 : 8541             [ 3] 	sta num_b
eb06 : a900             [ 2] 	lda #0
eb08 : 8542             [ 3] 	sta num_b+1
eb0a : 204dd4           [ 6] 	jsr int_fast_mult
                             	; check the type if int then mult2
eb0d : a200             [ 2] 	ldx #0
eb0f : a1a1             [ 6] 	lda (df_tmpptra,x)
eb11 : 2901             [ 2] 	and #DFVVT_INT
eb13 : f004             [ 3] 	beq df_rt_dim2_mul2
eb15 : 063d             [ 5] 	asl num_a
eb17 : 263e             [ 5] 	rol num_a+1
eb19 :                       df_rt_dim2_mul2
                             	; finally, we have a size of array
eb19 : a63d             [ 3] 	ldx num_a
eb1b : a53e             [ 3] 	lda num_a+1
                             
                             	; get a block of that size from heap
eb1d : 208cf6           [ 6] 	jsr df_st_malloc
                             	; save pointer to block in var
eb20 : a002             [ 2] 	ldy #DFVVT_HI
eb22 : 91a1             [ 5] 	sta (df_tmpptra),y
eb24 : 8a               [ 2] 	txa
eb25 : 88               [ 2] 	dey
eb26 : 91a1             [ 5] 	sta (df_tmpptra),y
                             	; finally, update the type to indicate array
AS65 Assembler for R6502 [1.42].                                     Page  219
-------------------------------- bank\bank0.s --------------------------------

eb28 : a200             [ 2] 	ldx #0
eb2a : a1a1             [ 6] 	lda (df_tmpptra,x)
eb2c : 0980             [ 2] 	ora #DFVVT_ARRY
eb2e : 81a1             [ 6] 	sta (df_tmpptra,x)
                             	; don't increment byte again - go check for more
eb30 : 4cb6ea           [ 3] 	jmp df_rt_dim
eb33 :                       df_rt_dim_next_byte
eb33 : e688             [ 5] 	inc df_exeoff
eb35 : 4cb6ea           [ 3] 	jmp df_rt_dim
eb38 :                       df_rt_dim_done
eb38 : 60               [ 6] 	rts
eb39 :                       df_rt_dim_err
                             	SWBRK DFERR_DIM
                             
                             
                             
eb3b :                       df_rt_cls
eb3b : 4c80cd           [ 3] 	jmp gr_cls
                             
                             
eb3e :                       df_rt_plot
                             	; evaluate the expression
eb3e : 2061e0           [ 6] 	jsr df_rt_getnval
                             	; save lo byte
eb41 : 8a               [ 2] 	txa
eb42 : 48               [ 3] 	pha
                             	; jump over comma
eb43 : e688             [ 5] 	inc df_exeoff
                             	; evaluate the expression
eb45 : 2061e0           [ 6] 	jsr df_rt_getnval
                             	; save lo byte
eb48 : 8a               [ 2] 	txa
eb49 : 48               [ 3] 	pha
                             	; jump over comma
eb4a : e688             [ 5] 	inc df_exeoff
                             	; evaluate the expression
eb4c : 2067e0           [ 6] 	jsr df_rt_neval
                             	; check the type on the stack
eb4f : 207af6           [ 6] 	jsr df_ost_peekType
                             	; if >=0x80 then a pointer / string
eb52 : aa               [ 2] 	tax
eb53 : 301b             [ 3] 	bmi df_rt_plotstr
                             	; else it is int
eb55 : 2080f6           [ 6] 	jsr df_ost_popInt
                             	; save  low byte of pop result in a temp
eb58 : 86a1             [ 3] 	stx df_tmpptra
eb5a : a511             [ 3] 	lda gr_scrngeom+gr_mode			; Check screen mode
eb5c : d009             [ 3] 	bne df_rt_plot_h_int
                             	; get X and Y coord in that order
                             	; but Y coord goes in X register!!!
eb5e : 68               [ 4] 	pla
eb5f : aa               [ 2] 	tax
eb60 : 68               [ 4] 	pla
eb61 : a8               [ 2] 	tay
eb62 : a5a1             [ 3] 	lda df_tmpptra	; Get pop result in to A
eb64 : 4cd4cd           [ 3] 	jmp gr_plot
eb67 :                       df_rt_plot_h_int
eb67 : 68               [ 4] 	pla
eb68 : a8               [ 2] 	tay
eb69 : 68               [ 4] 	pla
eb6a : aa               [ 2] 	tax
eb6b : a5a1             [ 3] 	lda df_tmpptra	; Get pop result in to A
AS65 Assembler for R6502 [1.42].                                     Page  220
-------------------------------- bank\bank0.s --------------------------------

eb6d : 4c93cf           [ 3] 	jmp gr_hchar
                             
                             
eb70 :                       df_rt_plotstr
                             	; pop string pointer
eb70 : 2088f6           [ 6] 	jsr df_ost_popPtr
                             	; save pointer to tmpa
eb73 : 86a1             [ 3] 	stx df_tmpptra
eb75 : 85a2             [ 3] 	sta df_tmpptra+1
                             	; get y and x in that order
                             	; but X register is Y coord!!
eb77 : 68               [ 4] 	pla
eb78 : 85a5             [ 3] 	sta df_tmpptrc			; Y coord in C
eb7a : 68               [ 4] 	pla
eb7b : 85a3             [ 3] 	sta df_tmpptrb			; X coord in B
                             	; set cursror position
eb7d : a000             [ 2] 	ldy #0
eb7f : 84a9             [ 3] 	sty df_tmpptre
eb81 :                       df_rt_plotstrch
eb81 : a4a9             [ 3] 	ldy df_tmpptre
eb83 : b1a1             [ 5] 	lda (df_tmpptra),y
eb85 : 85a7             [ 3] 	sta df_tmpptrd			; char in D
eb87 : f025             [ 3] 	beq df_rt_plotstrdone
eb89 : e6a9             [ 5] 	inc df_tmpptre
eb8b : a511             [ 3] 	lda gr_scrngeom+gr_mode; Check screen mode
eb8d : d00d             [ 3] 	bne df_rt_plot_h_str
eb8f : a5a7             [ 3] 	lda df_tmpptrd			; Get char to plot
eb91 : a6a5             [ 3] 	ldx df_tmpptrc			; Get Y coord
eb93 : a4a3             [ 3] 	ldy df_tmpptrb			; Get X coord
eb95 : 20d4cd           [ 6] 	jsr gr_plot
eb98 : e6a3             [ 5] 	inc df_tmpptrb			; Increment X coord
eb9a : d0e5             [ 3] 	bne df_rt_plotstrch		; Always - assume x is neve
eb9c :                       df_rt_plot_h_str
eb9c : a5a7             [ 3] 	lda df_tmpptrd			; Get char to plot
eb9e : a6a3             [ 3] 	ldx df_tmpptrb			; Get X coord
eba0 : a4a5             [ 3] 	ldy df_tmpptrc			; Get Y coord
eba2 : 2093cf           [ 6] 	jsr gr_hchar
eba5 : 18               [ 2] 	clc
eba6 : a5a3             [ 3] 	lda df_tmpptrb
eba8 : 6520             [ 3] 	adc gr_scrngeom+gr_pitch
ebaa : 85a3             [ 3] 	sta df_tmpptrb
ebac : d0d3             [ 3] 	bne df_rt_plotstrch		; Always - assume adding pi
ebae :                       df_rt_plotstrdone
ebae : 60               [ 6] 	rts
                             
ebaf :                       df_rt_cursor
                             	; evaluate the expression
ebaf : 2061e0           [ 6] 	jsr df_rt_getnval
                             	; write low byte of vdp_curoff
                             	; by writing a zero then cursor on else not
ebb2 : 860d             [ 3] 	stx vdp_curoff
ebb4 : 60               [ 6] 	rts
                             
ebb5 :                       df_rt_himem
                             	; evaluate the expression
ebb5 : 2061e0           [ 6] 	jsr df_rt_getnval
                             	; write X,A to df_memtop
ebb8 : 8e1106           [ 4] 	stx df_memtop
ebbb : 8d1206           [ 4] 	sta df_memtop+1
                             	; now clear everything down
ebbe : 4cb1f6           [ 3] 	jmp df_clear
                             
AS65 Assembler for R6502 [1.42].                                     Page  221
-------------------------------- bank\bank0.s --------------------------------

ebc1 :                       df_rt_text
ebc1 : 4ceacc           [ 3] 	jmp gr_init_screen_txt
                             
ebc4 :                       df_rt_hires
ebc4 : 4c03cd           [ 3] 	jmp gr_init_hires
                             
ebc7 :                       df_rt_pixmode
                             	; evaluate the expression X = mode
ebc7 : 2061e0           [ 6] 	jsr df_rt_getnval
ebca : 861f             [ 3] 	stx gr_scrngeom+gr_pixmode
ebcc : 60               [ 6] 	rts
                             
ebcd :                       df_rt_ink
                             	; evaluate the expression X = col
ebcd : 2061e0           [ 6] 	jsr df_rt_getnval
ebd0 : 8623             [ 3] 	stx gr_scrngeom+gr_ink
ebd2 : 60               [ 6] 	rts
                             
ebd3 :                       df_rt_paper
                             	; evaluate the expression X = col
ebd3 : 2061e0           [ 6] 	jsr df_rt_getnval
                             	; Add 16 to get paper colour
ebd6 : 8a               [ 2] 	txa
ebd7 : 18               [ 2] 	clc
ebd8 : 6910             [ 2] 	adc #16
ebda : 8524             [ 3] 	sta gr_scrngeom+gr_paper
ebdc : 60               [ 6] 	rts
                             
ebdd :                       df_rt_point
ebdd : 202be3           [ 6] 	jsr df_rt_parm_2ints
ebe0 : a6a1             [ 3] 	ldx df_tmpptra
ebe2 : a4a3             [ 3] 	ldy df_tmpptrb
ebe4 : 4c53d0           [ 3] 	jmp gr_point
                             
ebe7 :                       df_rt_circle
ebe7 : 2036e3           [ 6] 	jsr df_rt_parm_3ints
ebea : a5a1             [ 3] 	lda df_tmpptra				; load x0
ebec : 853d             [ 3] 	sta num_a
ebee : a5a3             [ 3] 	lda	df_tmpptrb				; load y0
ebf0 : 853e             [ 3] 	sta num_a+1
ebf2 : a5a5             [ 3] 	lda df_tmpptrc				; load r
ebf4 : 853f             [ 3] 	sta num_a+2
ebf6 : 4c84d0           [ 3] 	jmp gr_circle
                             
ebf9 :                       df_rt_lineto
ebf9 : 202be3           [ 6] 	jsr df_rt_parm_2ints
ebfc : a6a1             [ 3] 	ldx df_tmpptra				; load x1
ebfe : a4a3             [ 3] 	ldy df_tmpptrb				; load y1
ec00 :                       df_rt_doline
ec00 : 863f             [ 3] 	stx num_a+2
ec02 : 8440             [ 3] 	sty num_a+3
ec04 : 4c3ad1           [ 3] 	jmp gr_line
ec07 :                       df_rt_line
ec07 : 204de3           [ 6] 	jsr df_rt_parm_4ints
ec0a : a6a1             [ 3] 	ldx df_tmpptra				; load x0
ec0c : a4a3             [ 3] 	ldy	df_tmpptrb				; load y0
ec0e : 2048d0           [ 6] 	jsr gr_set_hires_cur		; Start from x,y
ec11 : a6a5             [ 3] 	ldx df_tmpptrc				; load x1
ec13 : a4a7             [ 3] 	ldy df_tmpptrd				; load y1
ec15 : 4c00ec           [ 3] 	jmp df_rt_doline
                             
ec18 :                       df_rt_wait
AS65 Assembler for R6502 [1.42].                                     Page  222
-------------------------------- bank\bank0.s --------------------------------

                             	; evaluate the expression
ec18 : 2061e0           [ 6] 	jsr df_rt_getnval
                             	; put high byte in to Y (X,Y)=16 bits
ec1b : a8               [ 2] 	tay
                             ;	bne df_rt_wait_counter
                             	; If A=X=0 then don't try to wait
                             ;	txa
                             ;	beq df_rt_wait_done
ec1c :                       df_rt_wait_counter
                             	; get vdp low byte timer val in A
ec1c : a508             [ 3] 	lda vdp_cnt
ec1e :                       df_rt_wait_tick
                             	; check if a tick has occurred (i.e. val <> A)
ec1e : c508             [ 3] 	cmp vdp_cnt
ec20 : f0fc             [ 3] 	beq df_rt_wait_tick
                             	; countdown tick
ec22 : 8a               [ 2] 	txa
ec23 : d001             [ 3] 	bne df_rt_wait_skiphi
ec25 : 88               [ 2] 	dey
ec26 :                       df_rt_wait_skiphi	
ec26 : ca               [ 2] 	dex
ec27 : 8a               [ 2] 	txa
ec28 : d0f2             [ 3] 	bne df_rt_wait_counter
ec2a : 98               [ 2] 	tya
ec2b : d0ef             [ 3] 	bne df_rt_wait_counter
ec2d :                       df_rt_wait_done
ec2d : 60               [ 6] 	rts
                             
ec2e :                       df_rt_printat
                             	; Get x,y
ec2e : 202be3           [ 6] 	jsr df_rt_parm_2ints
ec31 : a6a1             [ 3] 	ldx df_tmpptra
ec33 : a4a3             [ 3] 	ldy df_tmpptrb
                             	; Set the cursror here
ec35 : 20edcd           [ 6] 	jsr gr_set_cur
                             	; and continue to normal print command
ec38 :                       df_rt_print
ec38 : a488             [ 3] 	ldy df_exeoff
ec3a : 88               [ 2] 	dey
ec3b :                       df_rt_print_ws
ec3b : c8               [ 2] 	iny
                             
                             	; evaluate an expression
                             ;	cpy df_eolidx
                             ;	beq df_rt_print_done
ec3c : c47f             [ 3] 	cpy df_nxtstidx
ec3e : f02e             [ 3] 	beq df_rt_print_done
ec40 : b186             [ 5] 	lda (df_currlin),y
ec42 : c93a             [ 2] 	cmp #':'
ec44 : f028             [ 3] 	beq df_rt_print_done
ec46 : c920             [ 2] 	cmp #' '
ec48 : f0f1             [ 3] 	beq df_rt_print_ws
ec4a : c92c             [ 2] 	cmp #','
ec4c : f0ed             [ 3] 	beq df_rt_print_ws
                             	; save index
ec4e : 8488             [ 3] 	sty df_exeoff
                             
                             	; if starts with string literal then process sev
ec50 : c910             [ 2] 	cmp #DFTK_STRLIT
ec52 : f014             [ 3] 	beq df_rt_print_string
                             	; else evaluate a numeric
ec54 : 2067e0           [ 6] 	jsr df_rt_neval
AS65 Assembler for R6502 [1.42].                                     Page  223
-------------------------------- bank\bank0.s --------------------------------

                             	; check what is on the argument stack
ec57 : 207af6           [ 6] 	jsr df_ost_peekType
ec5a : 3006             [ 3] 	bmi df_rt_print_gotstr
ec5c : 207ee9           [ 6] 	jsr df_rt_print_num
ec5f : 4c38ec           [ 3] 	jmp df_rt_print
ec62 :                       df_rt_print_gotstr
ec62 : 2085e9           [ 6] 	jsr df_rt_print_str
ec65 : 4c38ec           [ 3] 	jmp df_rt_print
ec68 :                       df_rt_print_string
ec68 : 2021e1           [ 6] 	jsr df_rt_seval
ec6b : 4c62ec           [ 3] 	jmp df_rt_print_gotstr
ec6e :                       df_rt_print_done
ec6e : 8488             [ 3] 	sty df_exeoff
ec70 : 60               [ 6] 	rts
                             
ec71 :                       df_rt_println
ec71 : 2038ec           [ 6] 	jsr df_rt_print
ec74 : a90d             [ 2] 	lda #UTF_CR
ec76 : 4c3dc4           [ 3] 	jmp io_put_ch
                             
                             
                             ; assign to a number variable
                             ; X,A must have lvar
ec79 :                       df_rt_nassign
                             	; push var address, A ok to trample
ec79 : 48               [ 3] 	pha
ec7a : 8a               [ 2] 	txa
ec7b : 48               [ 3] 	pha
                             
                             	; now go evaluate expression in to A,X
ec7c : 2061e0           [ 6] 	jsr df_rt_getnval
                             	; restore variable address to write to to df_tmp
                             	; but don't lose current A
ec7f : a8               [ 2] 	tay					; Save A in Y
ec80 : 68               [ 4] 	pla
ec81 : 85a1             [ 3] 	sta df_tmpptra
ec83 : 68               [ 4] 	pla
ec84 : 85a2             [ 3] 	sta df_tmpptra+1
ec86 : 98               [ 2] 	tya					; Get A back from Y
                             
                             	; save X,A int in contents section
ec87 : a001             [ 2] 	ldy #1
ec89 : 91a1             [ 5] 	sta (df_tmpptra),y
ec8b : 8a               [ 2] 	txa
ec8c : 88               [ 2] 	dey
ec8d : 91a1             [ 5] 	sta (df_tmpptra),y
                             
ec8f : 60               [ 6] 	rts
                             
                             ; assign to a string variable
                             ; X,A must have lvar
ec90 :                       df_rt_sassign
                             	; now go evaluate expression
                             	; with the destination being already in X,A
ec90 : 2025e1           [ 6] 	jsr df_rt_sval
                             
                             	; get string pointer from top of runtime stack
ec93 : 4c84f6           [ 3] 	jmp df_ost_popStr
                             
                             
                             ; generate lvar from a var token ready for assign
ec96 :                       df_rt_generate_lvar
AS65 Assembler for R6502 [1.42].                                     Page  224
-------------------------------- bank\bank0.s --------------------------------

                             	; move past escape val
ec96 : a488             [ 3] 	ldy df_exeoff
ec98 : c8               [ 2] 	iny
                             	; pointing to variable index
ec99 : b186             [ 5] 	lda (df_currlin),y
ec9b : 85a1             [ 3] 	sta df_tmpptra
ec9d : c8               [ 2] 	iny
ec9e : b186             [ 5] 	lda (df_currlin),y
eca0 : 8488             [ 3] 	sty df_exeoff
eca2 : 85a2             [ 3] 	sta df_tmpptra+1
                             
                             	; get the type and save
eca4 : a200             [ 2] 	ldx #0
eca6 : a1a1             [ 6] 	lda (df_tmpptra,x)
eca8 : 48               [ 3] 	pha
                             
                             	; set carry flag to return pointer (lvar)
eca9 : 38               [ 2] 	sec
ecaa : 200be2           [ 6] 	jsr df_rt_eval_var
ecad : 2088f6           [ 6] 	jsr df_ost_popPtr
                             
                             	; pull the type previously saved into Y
ecb0 : 8538             [ 3] 	sta tmp_d		; Save A
ecb2 : 68               [ 4] 	pla
ecb3 : a8               [ 2] 	tay
ecb4 : a538             [ 3] 	lda tmp_d
                             	; move past the lvar variable index
ecb6 : e688             [ 5] 	inc df_exeoff
ecb8 : 60               [ 6] 	rts
                             
                             ; general assignment execution
                             ; generate lvar first
ecb9 :                       df_rt_assign
ecb9 : 2096ec           [ 6] 	jsr df_rt_generate_lvar
                             ; X,A,Y contain lvar pointer and type
ecbc :                       df_rt_doassign
                             	; save A and put type Y in to A to check for str
ecbc : 48               [ 3] 	pha
ecbd : 98               [ 2] 	tya
ecbe : 2904             [ 2] 	and #DFVVT_STR
                             	; if a string then string expression
ecc0 : d004             [ 3] 	bne df_rt_assign_str
                             	;  jump to numeric expression evaluator
                             	; remember to restore A
ecc2 : 68               [ 4] 	pla
ecc3 : 4c79ec           [ 3] 	jmp df_rt_nassign
ecc6 :                       df_rt_assign_str
                             	; else jump to string expression evaluator
                             	; remember to restore A
ecc6 : 68               [ 4] 	pla
ecc7 : 4c90ec           [ 3] 	jmp df_rt_sassign
                             
                             ; comment or data token is ignored by runtime
ecca :                       df_rt_comment
ecca :                       df_rt_data
ecca : 60               [ 6] 	rts
                             
                             
                             ; run token - future expansion
eccb :                       df_rt_run
eccb : 60               [ 6] 	rts
                             
AS65 Assembler for R6502 [1.42].                                     Page  225
-------------------------------- bank\bank0.s --------------------------------

                             ; end of line / statement indicator
                             ; CS = End, CC = not end
eccc :                       df_rt_eos
eccc : a488             [ 3] 	ldy df_exeoff
                             ;	cpy df_eolidx
                             ;	beq df_rt_eos_true
ecce : c47f             [ 3] 	cpy df_nxtstidx
ecd0 : f008             [ 3] 	beq df_rt_eos_true
ecd2 : b186             [ 5] 	lda (df_currlin),y
ecd4 : c93a             [ 2] 	cmp #':'
ecd6 : f002             [ 3] 	beq df_rt_eos_true
ecd8 : 18               [ 2] 	clc
ecd9 : 60               [ 6] 	rts
ecda :                       df_rt_eos_true
ecda : 38               [ 2] 	sec
ecdb : 60               [ 6] 	rts
                             
                             ; renum startLine,newStart,increment
                             ; renumbers from the first matching line to end o
ecdc :                       df_rt_renum
ecdc : e688             [ 5] 	inc df_exeoff
ecde : 2036e3           [ 6] 	jsr df_rt_parm_3ints
                             	; starting line number
ece1 : a6a1             [ 3] 	ldx df_tmpptra
ece3 : a5a2             [ 3] 	lda df_tmpptra+1
ece5 : 2082de           [ 6] 	jsr df_pg_find_line
ece8 : 9002             [ 3] 	bcc df_rt_renum_ok
                             	SWBRK DFERR_NOLINE
                             
ecec :                       df_rt_renum_ok
                             	; save starting position pointer in ptrd
ecec : 86a7             [ 3] 	stx df_tmpptrd
ecee : 85a8             [ 3] 	sta df_tmpptrd+1
ecf0 :                       df_rt_renum_do
                             	; if not end of program
ecf0 : a000             [ 2] 	ldy #0
ecf2 : b1a7             [ 5] 	lda (df_tmpptrd),y
                             	; then renumber this line
ecf4 : d001             [ 3] 	bne df_rt_renum_update
                             	; else done
ecf6 : 60               [ 6] 	rts
ecf7 :                       df_rt_renum_update
                             	; so set this line number to new line number
ecf7 : a001             [ 2] 	ldy #DFTK_LINNUM
ecf9 : a5a3             [ 3] 	lda df_tmpptrb
ecfb : 91a7             [ 5] 	sta (df_tmpptrd),y
ecfd : c8               [ 2] 	iny
ecfe : a5a4             [ 3] 	lda df_tmpptrb+1
ed00 : 91a7             [ 5] 	sta (df_tmpptrd),y
                             	; add increment to new line
                             	_addZPWord df_tmpptrb,df_tmpptrc
                             
ed0f :                       df_rt_renum_next
                             	; point ptrd to the next line
ed0f : 18               [ 2] 	clc
ed10 : a5a7             [ 3] 	lda df_tmpptrd
ed12 : a200             [ 2] 	ldx #0
ed14 : 61a7             [ 6] 	adc (df_tmpptrd,x)
ed16 : 85a7             [ 3] 	sta df_tmpptrd
                             	_bcc 2
                             
ed1a : e6a8             [ 5] 	inc df_tmpptrd+1
AS65 Assembler for R6502 [1.42].                                     Page  226
-------------------------------- bank\bank0.s --------------------------------

ed1c : 4cf0ec           [ 3] 	jmp df_rt_renum_do
                             
                             
                             ; * List all procs in VNT
ed1f :                       df_rt_listprocnames
                             	; start at the beginning of the vnt table
                             	_cpyZPWord df_vntstrt,df_tmpptra
                             
                             	; start at varcnt
ed27 : a571             [ 3] 	lda df_varcnt
ed29 : 85a3             [ 3] 	sta df_tmpptrb
ed2b :                       df_rt_listcheckvnt
                             	; If reached 0 then not found
ed2b : a5a3             [ 3] 	lda df_tmpptrb
ed2d : f03a             [ 3] 	beq df_rt_listpn_done
ed2f : a000             [ 2] 	ldy #0
ed31 : b1a1             [ 5] 	lda (df_tmpptra),y
ed33 : c95f             [ 2] 	cmp #'_'
ed35 : d01b             [ 3] 	bne df_rt_listnextvnt
ed37 :                       df_rt_listprocch
ed37 : b1a1             [ 5] 	lda (df_tmpptra),y
ed39 : 203dc4           [ 6] 	jsr io_put_ch
ed3c : aa               [ 2] 	tax
ed3d : f003             [ 3] 	beq df_rt_listproccr
ed3f : c8               [ 2] 	iny
ed40 : d0f5             [ 3] 	bne df_rt_listprocch		; Always
ed42 :                       df_rt_listproccr
ed42 : a90d             [ 2] 	lda #UTF_CR
ed44 : 203dc4           [ 6] 	jsr io_put_ch
ed47 : 18               [ 2] 	clc
ed48 :                       df_rt_listprocpause
ed48 : 203ac4           [ 6] 	jsr io_get_ch
ed4b : c920             [ 2] 	cmp #' '
ed4d : d003             [ 3] 	bne df_rt_listnextvnt
ed4f :                       df_rt_listwait
ed4f : 38               [ 2] 	sec
ed50 : b0f6             [ 3] 	bcs df_rt_listprocpause
ed52 :                       df_rt_listnextvnt
ed52 : b1a1             [ 5] 	lda (df_tmpptra),y
ed54 : f003             [ 3] 	beq df_rt_listgotnext
ed56 : c8               [ 2] 	iny
ed57 : d0f9             [ 3] 	bne df_rt_listnextvnt		; Always
ed59 :                       df_rt_listgotnext
                             	; dec vnt #
ed59 : c6a3             [ 5] 	dec df_tmpptrb
                             	; skip past zero terminator
ed5b : c8               [ 2] 	iny
                             	; add this to vnt pointer
ed5c : 18               [ 2] 	clc
ed5d : 98               [ 2] 	tya
ed5e : 65a1             [ 3] 	adc df_tmpptra
ed60 : 85a1             [ 3] 	sta df_tmpptra
                             	_bcc 2
                             
ed64 : e6a2             [ 5] 	inc df_tmpptra+1
ed66 : 4c2bed           [ 3] 	jmp df_rt_listcheckvnt
ed69 :                       df_rt_listpn_done
ed69 : 60               [ 6] 	rts
                             
ed6a :                       df_rt_listproc
                             	; A already contains '_'
ed6a : 8d0004           [ 4] 	sta df_linbuff
AS65 Assembler for R6502 [1.42].                                     Page  227
-------------------------------- bank\bank0.s --------------------------------

ed6d : a200             [ 2] 	ldx #0
ed6f : a488             [ 3] 	ldy df_exeoff
ed71 :                       df_rt_listp_copy
ed71 : c8               [ 2] 	iny
ed72 : e8               [ 2] 	inx
ed73 : b186             [ 5] 	lda (df_currlin),y
ed75 : 9d0004           [ 5] 	sta df_linbuff,x
ed78 : 20e5d6           [ 6] 	jsr df_tk_isalphanum
ed7b : b0f4             [ 3] 	bcs df_rt_listp_copy
                             	; zero the line index
ed7d : a200             [ 2] 	ldx #0
ed7f : 867c             [ 3] 	stx df_linoff
                             	; save runtime pos
ed81 : 8488             [ 3] 	sty df_exeoff
                             	; Now try and find in VNT
ed83 : 2004d5           [ 6] 	jsr df_var_find
ed86 : b036             [ 3] 	bcs df_rt_listp_notfound
                             	; Ok we have got a match in X,A find the proc
ed88 : 868e             [ 3] 	stx df_procptr
ed8a : 858f             [ 3] 	sta df_procptr+1
ed8c : 2046e4           [ 6] 	jsr df_rt_findproc
                             	; Save the line pointer
ed8f : 86a1             [ 3] 	stx df_tmpptra
ed91 : 85a2             [ 3] 	sta df_tmpptra+1
                             	; save statement index in to line
                             ;	sty df_lineidx
                             ;	; Check if '-' option used
                             ;	ldy df_exeoff
                             ;	lda (df_currlin),y
                             ;	cmp #'-'
                             ;	; if so, list to end of program
                             ;	beq df_rt_listprgend
                             	; Now try and find the end of this procedure
                             	; enddef or another def
                             	; A,X=Line ptr, Y=line idx
                             ;	ldx df_tmpptra
                             ;	lda df_tmpptra+1
                             ;	ldy df_lineidx
ed93 :                       df_rt_listp_findend
                             	; Go to next stat
ed93 : 20f1e3           [ 6] 	jsr df_rt_nextstat
ed96 : b057             [ 3] 	bcs df_rt_listprgend
                             	; save y (a,x in lineptr), A is ok to trample
ed98 : 98               [ 2] 	tya
ed99 : 48               [ 3] 	pha
                             	; find the command
ed9a :                       df_rt_listp_findcmd
ed9a : c8               [ 2] 	iny
ed9b : b190             [ 5] 	lda (df_lineptr),y
ed9d : 10fb             [ 3] 	bpl df_rt_listp_findcmd
                             	; restore y to stat beginning
ed9f : 8538             [ 3] 	sta tmp_d
eda1 : 68               [ 4] 	pla
eda2 : a8               [ 2] 	tay
eda3 : a538             [ 3] 	lda tmp_d
                             	; check A - looking for enddef or def
eda5 : c987             [ 2] 	cmp #DFRT_ENDDEF
eda7 : f00b             [ 3] 	beq df_rt_listp_done
eda9 : c986             [ 2] 	cmp #DFRT_DEF
edab : f007             [ 3] 	beq df_rt_listp_done
                             	; if neither then next stat from current
edad : a690             [ 3] 	ldx df_lineptr
AS65 Assembler for R6502 [1.42].                                     Page  228
-------------------------------- bank\bank0.s --------------------------------

edaf : a591             [ 3] 	lda df_lineptr+1
edb1 : 4c93ed           [ 3] 	jmp df_rt_listp_findend
edb4 :                       df_rt_listp_done
                             	; Push end line on to stack
edb4 : a591             [ 3] 	lda df_lineptr+1
edb6 : 48               [ 3] 	pha
edb7 : 8a               [ 2] 	txa
edb8 : 48               [ 3] 	pha
edb9 : a591             [ 3] 	lda df_lineptr+1
edbb : 4cf5ed           [ 3] 	jmp df_rt_list_line
edbe :                       df_rt_listp_notfound
                             	; Fatal error if proc not found
                             	SWBRK DFERR_NOPROC
                             
                             
                             ; list token
edc0 :                       df_rt_list
edc0 : a900             [ 2] 	lda #0
edc2 : 85a9             [ 3] 	sta df_tmpptre		; Zero means in normal list mode
                             	; find non-ws
edc4 : 209be4           [ 6] 	jsr df_rt_skip_ws
                             	; if end of statement then no line specifiers
edc7 : 20ccec           [ 6] 	jsr df_rt_eos
                             	; so list whole program
edca : b01b             [ 3] 	bcs df_rt_listprg
                             
                             	;if '_' then use procnames
edcc : c95f             [ 2] 	cmp #'_'
edce : d003             [ 3] 	bne df_rt_list_all
edd0 : 4c6aed           [ 3] 	jmp df_rt_listproc
edd3 :                       df_rt_list_all
                             	;if '*' then display all procnames
edd3 : c92a             [ 2] 	cmp #'*'
edd5 : d003             [ 3] 	bne df_rt_list_linno
edd7 : 4c1fed           [ 3] 	jmp df_rt_listprocnames
edda :                       df_rt_list_linno
                             	; else get 1st parameter
edda : 2061e0           [ 6] 	jsr df_rt_getnval
                             	; find the starting line number in X,A
eddd : 2082de           [ 6] 	jsr df_pg_find_line
                             	; save start in ptra
ede0 : 86a1             [ 3] 	stx df_tmpptra
ede2 : 85a2             [ 3] 	sta df_tmpptra+1
ede4 : 4cefed           [ 3] 	jmp df_rt_listprgend
                             	; NO ability to choose and ending line number!
                             
                             ; Common listing routine used by LIST and SAVE
                             ; tmpe = 0 means in LIST mode else SAVE mode
                             ; can stop the listing in LIST mode with CTRL-C
ede7 :                       df_rt_listprg
                             	; program start and end as for pointer value
                             	_cpyZPWord df_prgstrt, df_tmpptra
                             
edef :                       df_rt_listprgend
edef : a568             [ 3] 	lda df_prgend+1
edf1 : 48               [ 3] 	pha
edf2 : a567             [ 3] 	lda df_prgend
edf4 : 48               [ 3] 	pha
edf5 :                       df_rt_list_line
                             	; if line length = 0 then end of program
edf5 : a000             [ 2] 	ldy #0
edf7 : b1a1             [ 5] 	lda (df_tmpptra),y
AS65 Assembler for R6502 [1.42].                                     Page  229
-------------------------------- bank\bank0.s --------------------------------

edf9 : f038             [ 4] 	beq df_rt_list_line_fin
                             	; if in list mode and CTRL-C then also stop
edfb : a5a9             [ 3] 	lda df_tmpptre
edfd : d010             [ 4] 	bne df_rt_list_line_cont
                             	; check for break, asynch get
edff : 18               [ 2] 	clc
ee00 :                       df_rt_list_synckey
ee00 : a5a9             [ 3] 	lda df_tmpptre					; Ignore keys on save mode
ee02 : d00b             [ 3] 	bne df_rt_list_line_cont
ee04 :                       df_rt_list_pause
ee04 : 203ac4           [ 6] 	jsr io_get_ch
ee07 : c920             [ 2] 	cmp #' '						; Space = PAUSE
ee09 : f0f9             [ 3] 	beq df_rt_list_pause			; C=1 for synchronouse ke
ee0b : c903             [ 2] 	cmp #UTF_ETX					; CTRL-C?
ee0d : f024             [ 3] 	beq df_rt_list_line_fin
ee0f :                       df_rt_list_line_cont
ee0f : a000             [ 2] 	ldy #0
ee11 : 847c             [ 3] 	sty df_linoff
ee13 : 2036ee           [ 6] 	jsr df_rt_list_all_line
ee16 :                       df_rt_list_next_line
                             	; new line
ee16 : 207bc1           [ 6] 	jsr utilPrintCRLF
                             	; increment pointer to next line
ee19 : 18               [ 2] 	clc
ee1a : a5a1             [ 3] 	lda df_tmpptra
ee1c : a000             [ 2] 	ldy #0
ee1e : 71a1             [ 5] 	adc (df_tmpptra),y
ee20 : 85a1             [ 3] 	sta df_tmpptra
                             	_bcc 2
                             
ee24 : e6a2             [ 5] 	inc df_tmpptra+1
                             	; if pointer > end then listing is done
ee26 : 38               [ 2] 	sec
ee27 : 68               [ 4] 	pla
ee28 : aa               [ 2] 	tax
ee29 : e5a1             [ 3] 	sbc df_tmpptra
ee2b : 68               [ 4] 	pla
ee2c : 48               [ 3] 	pha
ee2d : e5a2             [ 3] 	sbc df_tmpptra+1
ee2f : 8a               [ 2] 	txa
ee30 : 48               [ 3] 	pha
ee31 : b0c2             [ 4] 	bcs df_rt_list_line
ee33 :                       df_rt_list_line_fin
                             	; if got here then reached tmpb
ee33 : 68               [ 4] 	pla
ee34 : 68               [ 4] 	pla
ee35 :                       df_rt_list_line_only_fin
ee35 : 60               [ 6] 	rts
                             
                             ;Using df_tmpptra as line pointer
                             ;Print decode an entire line
ee36 :                       df_rt_list_all_line				; Start here to include nu
ee36 : 2070ef           [ 6] 	jsr df_rt_list_linnum
ee39 :                       df_rt_list_line_only			; Start here for just the 
ee39 : a003             [ 2] 	ldy #3
ee3b : b1a1             [ 5] 	lda (df_tmpptra),y
ee3d : 8592             [ 3] 	sta df_lineidx
ee3f : c8               [ 2] 	iny
ee40 : 847c             [ 3] 	sty df_linoff
ee42 :                       df_rt_list_decode
ee42 : a47c             [ 3] 	ldy df_linoff
ee44 : b1a1             [ 5] 	lda (df_tmpptra),y
AS65 Assembler for R6502 [1.42].                                     Page  230
-------------------------------- bank\bank0.s --------------------------------

ee46 : 3010             [ 3] 	bmi df_rt_list_token
ee48 : c920             [ 2] 	cmp #DFTK_ESCVAL
ee4a : 9006             [ 3] 	bcc df_rt_list_escval
                             	; normal char just print it
ee4c : 203dc4           [ 6] 	jsr io_put_ch
ee4f : 4c5bee           [ 3] 	jmp df_rt_list_nexttok
ee52 :                       df_rt_list_escval
                             	; A and Y need to be valid on entry
ee52 : 2074ee           [ 6] 	jsr df_rt_list_decode_esc
ee55 : 4c5bee           [ 3] 	jmp df_rt_list_nexttok
ee58 :                       df_rt_list_token
ee58 : 2081ef           [ 6] 	jsr df_rt_list_decode_token
ee5b :                       df_rt_list_nexttok
                             	; advance the line offset
ee5b : e67c             [ 5] 	inc df_linoff
ee5d : a57c             [ 3] 	lda df_linoff
                             	; check if at end of line
ee5f : a200             [ 2] 	ldx #0
ee61 : c1a1             [ 6] 	cmp (df_tmpptra,x)
ee63 : f0d0             [ 3] 	beq df_rt_list_line_only_fin
                             	; check if at end of statement
ee65 : c592             [ 3] 	cmp df_lineidx
ee67 : d0d9             [ 3] 	bne df_rt_list_decode
ee69 : a8               [ 2] 	tay
                             	; save the next statement offset
ee6a : b1a1             [ 5] 	lda (df_tmpptra),y
ee6c : 8592             [ 3] 	sta df_lineidx
ee6e : c8               [ 2] 	iny
ee6f : 847c             [ 3] 	sty df_linoff
ee71 : 4c42ee           [ 3] 	jmp df_rt_list_decode
                             
                             
                             ; decode escape sequences
                             ; Input: A contains the esc val and Y is char lin
ee74 :                       df_rt_list_decode_esc
                             	; jump over esc byte
ee74 : c8               [ 2] 	iny
ee75 : 847c             [ 3] 	sty df_linoff
ee77 : 48               [ 3] 	pha
                             	; get the next two bytes in case needed
ee78 : b1a1             [ 5] 	lda (df_tmpptra),y
ee7a : 85a3             [ 3] 	sta df_tmpptrb
ee7c : c8               [ 2] 	iny
ee7d : b1a1             [ 5] 	lda (df_tmpptra),y
ee7f : 85a4             [ 3] 	sta df_tmpptrb+1
ee81 : 88               [ 2] 	dey				; Y is on byte after esc byte
ee82 : 68               [ 4] 	pla
                             	; x2 to get jmp offset
ee83 : 0a               [ 2] 	asl a
ee84 : aa               [ 2] 	tax
ee85 : bd95e5           [ 4] 	lda df_rt_escjmp,x
ee88 : 85a5             [ 3] 	sta df_tmpptrc
ee8a : bd96e5           [ 4] 	lda df_rt_escjmp+1,x
ee8d : 85a6             [ 3] 	sta df_tmpptrc+1
                             	; now jump to decoder
ee8f : 6ca500           [ 6] 	jmp (df_tmpptrc)
                             
                             ; reserved
ee92 :                       df_rt_lst_reserved
ee92 : 60               [ 6] 	rts
                             
                             ; decode a byte char
AS65 Assembler for R6502 [1.42].                                     Page  231
-------------------------------- bank\bank0.s --------------------------------

ee93 :                       df_rt_lst_chr
ee93 : a927             [ 2] 	lda #0x27			; Single quote
ee95 : 203dc4           [ 6] 	jsr io_put_ch
ee98 : a5a3             [ 3] 	lda df_tmpptrb
ee9a : 203dc4           [ 6] 	jsr io_put_ch
ee9d : a927             [ 2] 	lda #0x27			; Single quote
ee9f : 203dc4           [ 6] 	jsr io_put_ch
eea2 : c8               [ 2] 	iny
eea3 : 847c             [ 3] 	sty df_linoff
eea5 : 60               [ 6] 	rts
                             
                             ; Output 0x for hex chars
eea6 :                       df_rt_lst_hex_pre
eea6 : a930             [ 2] 	lda #'0'
eea8 : 203dc4           [ 6] 	jsr io_put_ch
eeab : a978             [ 2] 	lda #'x'
eead : 4c3dc4           [ 3] 	jmp io_put_ch
                             
                             
                             ; Decode a byte hex
eeb0 :                       df_rt_lst_bythex
eeb0 : 20a6ee           [ 6] 	jsr df_rt_lst_hex_pre
eeb3 :                       df_rt_lst_lo_hex
eeb3 : a5a3             [ 3] 	lda df_tmpptrb
eeb5 : 2098c1           [ 6] 	jsr str_a_to_x
eeb8 : 203dc4           [ 6] 	jsr io_put_ch
eebb : 8a               [ 2] 	txa
eebc : 203dc4           [ 6] 	jsr io_put_ch
eebf :                       df_rt_lst_const_done
eebf : c8               [ 2] 	iny
eec0 : 847c             [ 3] 	sty df_linoff
eec2 : 60               [ 6] 	rts
                             
                             ; Decode an int hex
eec3 :                       df_rt_lst_inthex
eec3 : 20a6ee           [ 6] 	jsr df_rt_lst_hex_pre
eec6 : a5a4             [ 3] 	lda df_tmpptrb+1
eec8 : 2098c1           [ 6] 	jsr str_a_to_x
eecb : 203dc4           [ 6] 	jsr io_put_ch
eece : 8a               [ 2] 	txa
eecf : 203dc4           [ 6] 	jsr io_put_ch
eed2 : 4cb3ee           [ 3] 	jmp df_rt_lst_lo_hex
                             
                             ; Decode a byte binary
eed5 :                       df_rt_lst_bytbin
eed5 : a5a3             [ 3] 	lda df_tmpptrb
eed7 : 85a4             [ 3] 	sta df_tmpptrb+1
eed9 : a208             [ 2] 	ldx #8
eedb : d002             [ 3] 	bne df_rt_lst_bin
                             
                             ; Decode a int binary
eedd :                       df_rt_lst_intbin
eedd : a210             [ 2] 	ldx #16
                             	; FALL THROUGH
                             ; Main 01 decoding of binary
eedf :                       df_rt_lst_bin
eedf : a930             [ 2] 	lda #'0'
eee1 : 203dc4           [ 6] 	jsr io_put_ch
eee4 : a962             [ 2] 	lda #'b'
eee6 : 203dc4           [ 6] 	jsr io_put_ch
eee9 :                       df_rt_lst_bit
eee9 : a930             [ 2] 	lda #'0'
AS65 Assembler for R6502 [1.42].                                     Page  232
-------------------------------- bank\bank0.s --------------------------------

eeeb : 06a3             [ 5] 	asl df_tmpptrb
eeed : 26a4             [ 5] 	rol df_tmpptrb+1
eeef : 6900             [ 2] 	adc #0				; If C=1 then '0' becomes '1'
eef1 :                       df_rt_lst_bit_skip0
eef1 : 203dc4           [ 6] 	jsr io_put_ch
eef4 : ca               [ 2] 	dex
eef5 : d0f2             [ 3] 	bne df_rt_lst_bit
eef7 : f0c6             [ 3] 	beq df_rt_lst_const_done
                             
                             ; Decode a decimal integer
eef9 :                       df_rt_lst_intdec
eef9 : a6a3             [ 3] 	ldx df_tmpptrb
eefb : a5a4             [ 3] 	lda df_tmpptrb+1
eefd : c8               [ 2] 	iny
eefe : 847c             [ 3] 	sty df_linoff
ef00 : 18               [ 2] 	clc
ef01 : 4cf8c3           [ 3] 	jmp print_a_to_d
                             
                             
                             ; decode a variable or procedure
                             ; Slot address to decode in ptrb
ef04 :                       df_rt_lst_var
ef04 :                       df_rt_lst_proc
                             	; jump over the address bytes
ef04 : c8               [ 2] 	iny
ef05 : 847c             [ 3] 	sty df_linoff
                             
                             	; ptrc starts at VNT start
                             	_cpyZPWord df_vntstrt,df_tmpptrc
                             
                             
                             	; ptrd starts at end of VVT
                             	_cpyZPWord df_vvtend,df_tmpptrd
                             
ef17 : a000             [ 2] 	ldy #0
ef19 :                       df_rt_list_findvvt
                             	; Check have we reached target addr in vvt?
ef19 : a5a7             [ 3] 	lda df_tmpptrd
ef1b : c5a3             [ 3] 	cmp df_tmpptrb
ef1d : d006             [ 3] 	bne df_rt_list_vvtend
ef1f : a5a8             [ 3] 	lda df_tmpptrd+1
ef21 : c5a4             [ 3] 	cmp df_tmpptrb+1
ef23 : f021             [ 3] 	beq df_rt_list_gotvvt
ef25 :                       df_rt_list_vvtend
ef25 : b1a5             [ 5] 	lda (df_tmpptrc),y
ef27 : f009             [ 3] 	beq df_rt_list_gotvvtend
                             	_incZPWord df_tmpptrc
                             
ef2f : 4c25ef           [ 3] 	jmp df_rt_list_vvtend
ef32 :                       df_rt_list_gotvvtend
                             	_incZPWord df_tmpptrc
                             
                             	; move target slot address towards top of mem
ef38 : 18               [ 2] 	clc
ef39 : a5a7             [ 3] 	lda df_tmpptrd
ef3b : 6908             [ 2] 	adc #DFVVT_SZ
ef3d : 85a7             [ 3] 	sta df_tmpptrd
                             	_bcc 2
                             
ef41 : e6a8             [ 5] 	inc df_tmpptrd+1
                             	; go back and check again
ef43 : 4c19ef           [ 3] 	jmp df_rt_list_findvvt
AS65 Assembler for R6502 [1.42].                                     Page  233
-------------------------------- bank\bank0.s --------------------------------

ef46 :                       df_rt_list_gotvvt
ef46 : b1a5             [ 5] 	lda (df_tmpptrc),y
ef48 : f025             [ 3] 	beq df_rt_list_donvvt
ef4a : 203dc4           [ 6] 	jsr io_put_ch
                             	_incZPWord df_tmpptrc
                             
ef53 : 4c46ef           [ 3] 	jmp df_rt_list_gotvvt
                             
ef56 :                       df_rt_lst_strlit
ef56 : a922             [ 2] 	lda #0x22
ef58 : 203dc4           [ 6] 	jsr io_put_ch
ef5b : a47c             [ 3] 	ldy df_linoff
ef5d :                       df_rt_lst_strlitch
ef5d : b1a1             [ 5] 	lda (df_tmpptra),y
ef5f : f007             [ 3] 	beq df_rt_lst_strlitdon
ef61 : 203dc4           [ 6] 	jsr io_put_ch
ef64 : c8               [ 2] 	iny
ef65 : 4c5def           [ 3] 	jmp df_rt_lst_strlitch
ef68 :                       df_rt_lst_strlitdon
ef68 : a922             [ 2] 	lda #0x22
ef6a : 203dc4           [ 6] 	jsr io_put_ch
ef6d : 847c             [ 3] 	sty df_linoff
ef6f :                       df_rt_list_donvvt
ef6f : 60               [ 6] 	rts
                             
ef70 :                       df_rt_list_linnum
ef70 : a001             [ 2] 	ldy #1
ef72 : b1a1             [ 5] 	lda (df_tmpptra),y
ef74 : aa               [ 2] 	tax
ef75 : c8               [ 2] 	iny
ef76 : b1a1             [ 5] 	lda (df_tmpptra),y
ef78 : 18               [ 2] 	clc
ef79 : 20f8c3           [ 6] 	jsr print_a_to_d
ef7c : a920             [ 2] 	lda #0x20			; Always add a space after line num
ef7e : 4c3dc4           [ 3] 	jmp io_put_ch
                             
                             ; decode a token value with MSB set
ef81 :                       df_rt_list_decode_token
                             	; if not assembler then normal listing
ef81 : c997             [ 2] 	cmp #DFRT_ASM
ef83 : d003             [ 3] 	bne df_rt_list_decode_token_normal
ef85 : 4cbfef           [ 3] 	jmp df_rt_asm_decode_token
ef88 :                       df_rt_list_decode_token_normal
ef88 : 297f             [ 2] 	and #0x7f
                             	; token 0 and 1 don't get decoded they are impli
ef8a : c902             [ 2] 	cmp #2
ef8c : b001             [ 3] 	bcs df_rt_list_do_decode_tkn
ef8e : 60               [ 6] 	rts
ef8f :                       df_rt_list_do_decode_tkn
ef8f : aa               [ 2] 	tax
ef90 : a980             [ 2] 	lda #lo(df_tokensyms)
ef92 : 85a3             [ 3] 	sta df_tmpptrb
ef94 : a9da             [ 2] 	lda #hi(df_tokensyms)
ef96 : 85a4             [ 3] 	sta df_tmpptrb+1
ef98 :                       df_rt_list_find_sym
ef98 : 8a               [ 2] 	txa
ef99 : f012             [ 3] 	beq df_rt_list_got_sym
ef9b : a000             [ 2] 	ldy #0
ef9d :                       df_rt_list_next_ch
ef9d : b1a3             [ 5] 	lda (df_tmpptrb),y
ef9f : 48               [ 3] 	pha
                             	_incZPWord df_tmpptrb
AS65 Assembler for R6502 [1.42].                                     Page  234
-------------------------------- bank\bank0.s --------------------------------

                             
efa6 : 68               [ 4] 	pla
efa7 : 10f4             [ 3] 	bpl df_rt_list_next_ch
efa9 :                       df_rt_list_got_last_sym
                             	; ok got to the last ch
                             	; advance to next sym
efa9 : ca               [ 2] 	dex
efaa : 4c98ef           [ 3] 	jmp df_rt_list_find_sym
efad :                       df_rt_list_got_sym
efad : a1a3             [ 6] 	lda (df_tmpptrb,x)		; Relies on X=0 from branch
efaf : 08               [ 3] 	php
efb0 : 297f             [ 2] 	and #0x7f
efb2 : 203dc4           [ 6] 	jsr io_put_ch
                             	_incZPWord df_tmpptrb
                             
efbb : 28               [ 4] 	plp
efbc : 10ef             [ 3] 	bpl df_rt_list_got_sym
efbe : 60               [ 6] 	rts
                             
                             ;** Decode assembler token in A **
efbf :                       df_rt_asm_decode_token
efbf : a92e             [ 2] 	lda #'.'			;Always put out the . symbol
efc1 : 203dc4           [ 6] 	jsr io_put_ch
efc4 : a47c             [ 3] 	ldy df_linoff		;Print out any whitespace
efc6 :                       df_rt_asm_decode_token_ws
efc6 : c8               [ 2] 	iny					;Point to char after the asm token
efc7 : 847c             [ 3] 	sty df_linoff
efc9 : b1a1             [ 5] 	lda (df_tmpptra),y	;What is the char?
efcb : 2000d7           [ 6] 	jsr df_tk_isws		;If not then found the keyword
efce : 9006             [ 3] 	bcc df_rt_asm_decode_token_found
efd0 : 203dc4           [ 6] 	jsr io_put_ch		;Print the space
efd3 : 4cc6ef           [ 3] 	jmp df_rt_asm_decode_token_ws
efd6 :                       df_rt_asm_decode_token_found
efd6 : c911             [ 2] 	cmp #DFTK_VAR		; If is a label variable?
efd8 : d003             [ 3] 	bne df_rt_asm_decode_token_keyword
                             	; if so then process as normal escape handling
efda : 4c74ee           [ 3] 	jmp df_rt_list_decode_esc
efdd :                       df_rt_asm_decode_token_keyword
efdd : 297f             [ 2] 	and #0x7f			; Mask off MSB
efdf : aa               [ 2] 	tax					;Put it in to X as the counter
                             	; Point to asm symbol table
efe0 : a994             [ 2] 	lda #lo(df_asm_tokensyms)
efe2 : 85a3             [ 3] 	sta df_tmpptrb
efe4 : a9fc             [ 2] 	lda #hi(df_asm_tokensyms)
efe6 : 85a4             [ 3] 	sta df_tmpptrb+1
efe8 :                       df_rt_list_find_asm_sym
efe8 : 8a               [ 2] 	txa
efe9 : f01b             [ 4] 	beq df_rt_list_got_asm_sym
efeb : a000             [ 2] 	ldy #0
efed :                       df_rt_list_next_asm_ch
                             	_incZPWord df_tmpptrb
                             
eff3 : b1a3             [ 5] 	lda (df_tmpptrb),y
eff5 : c920             [ 2] 	cmp #' '			; Skip all chars >=' '
eff7 : b0f4             [ 3] 	bcs df_rt_list_next_asm_ch
eff9 : 38               [ 2] 	sec					; Skip offset and mode bytes
effa : 65a3             [ 3] 	adc df_tmpptrb
effc : 85a3             [ 3] 	sta df_tmpptrb
                             	_bcc 2
                             
f000 : e6a4             [ 5] 	inc df_tmpptrb+1
f002 : ca               [ 2] 	dex					; One less symbol to skip over
AS65 Assembler for R6502 [1.42].                                     Page  235
-------------------------------- bank\bank0.s --------------------------------

f003 : 4ce8ef           [ 3] 	jmp df_rt_list_find_asm_sym
f006 :                       df_rt_list_got_asm_sym
f006 : a1a3             [ 6] 	lda (df_tmpptrb,x)	; Relies on X=0 from branch
f008 : c920             [ 2] 	cmp #' '
f00a : 900c             [ 3] 	bcc df_rt_asm_decode_token_done
f00c : 203dc4           [ 6] 	jsr io_put_ch
                             	_incZPWord df_tmpptrb
                             
f015 : 4c06f0           [ 3] 	jmp df_rt_list_got_asm_sym
f018 :                       df_rt_asm_decode_token_done
f018 : 60               [ 6] 	rts
                             
                             
f019 :                       df_rt_doke
f019 : 202be3           [ 6] 	jsr df_rt_parm_2ints
f01c : a5a3             [ 3] 	lda df_tmpptrb
f01e : a000             [ 2] 	ldy #0
f020 : 91a1             [ 5] 	sta (df_tmpptra),y
                             	; get high byte to doke
f022 : a5a4             [ 3] 	lda df_tmpptrb+1
f024 : c8               [ 2] 	iny
                             	; poke hi byte
f025 : 91a1             [ 5] 	sta (df_tmpptra),y
f027 : 60               [ 6] 	rts
                             
f028 :                       df_rt_poke
f028 : 202be3           [ 6] 	jsr df_rt_parm_2ints
f02b : a5a3             [ 3] 	lda df_tmpptrb
f02d : a000             [ 2] 	ldy #0
f02f : 91a1             [ 5] 	sta (df_tmpptra),y
f031 : 60               [ 6] 	rts
                             
f032 :                       df_rt_snd_common
                             	; 3 inputs
                             	; tmpa = channel (1,2,3), tmpb = period, tmpc = 
f032 : a5a1             [ 3] 	lda df_tmpptra
                             	; tone channel addressing is 0 to 2
f034 : 38               [ 2] 	sec
f035 : e901             [ 2] 	sbc #1
f037 : 2903             [ 2] 	and #3
                             	; ok doing a tone channel, get reg index for per
f039 : 0a               [ 2] 	asl a
f03a : aa               [ 2] 	tax
                             	; get low byte of period
f03b : a5a3             [ 3] 	lda df_tmpptrb
f03d : 206ec0           [ 6] 	jsr snd_set
                             	; increment reg number to high byte
f040 : e8               [ 2] 	inx
                             	; get high byte of period
f041 : a5a4             [ 3] 	lda df_tmpptrb+1
f043 : 290f             [ 2] 	and #0x0f
                             	; set period
f045 : 206ec0           [ 6] 	jsr snd_set
                             	; get volume register index (8 = channel 1)
f048 : 18               [ 2] 	clc
f049 : a5a1             [ 3] 	lda df_tmpptra
f04b : 2903             [ 2] 	and #3
f04d : 6907             [ 2] 	adc #7
f04f : aa               [ 2] 	tax
                             	; get volume
f050 : a5a5             [ 3] 	lda df_tmpptrc
f052 : 290f             [ 2] 	and #0x0f
AS65 Assembler for R6502 [1.42].                                     Page  236
-------------------------------- bank\bank0.s --------------------------------

f054 : d002             [ 3] 	bne df_rt_sound_env_skip
                             	; envelope mode
f056 : 0910             [ 2] 	ora #0x10
f058 :                       df_rt_sound_env_skip
f058 : 4c6ec0           [ 3] 	jmp snd_set
                             
                             ; sound chan,period,volume
f05b :                       df_rt_sound
f05b : 2036e3           [ 6] 	jsr df_rt_parm_3ints
f05e :                       df_rt_dosound
                             	; check which channel (0 = noise)
f05e : a5a1             [ 3] 	lda df_tmpptra
f060 : f003             [ 3] 	beq df_rt_sound_noise
f062 : 4c32f0           [ 3] 	jmp df_rt_snd_common
f065 :                       df_rt_sound_noise
                             	; ok update the noise channel, volume is irrelev
f065 : a206             [ 2] 	ldx #6
f067 : a5a3             [ 3] 	lda df_tmpptrb
f069 : 291f             [ 2] 	and #0x1f
f06b : 4c6ec0           [ 3] 	jmp snd_set
                             
                             ; music chan,octave,note,volume
f06e :                       df_rt_music
f06e : 204de3           [ 6] 	jsr df_rt_parm_4ints
                             	; parm 2 = octave, need to x 12word = 24
                             	; get period A,X (hi/lo)
                             	; pass in octave # in X and note # in Y
f071 : a6a3             [ 3] 	ldx df_tmpptrb
f073 : a4a5             [ 3] 	ldy df_tmpptrc
f075 : 2000d4           [ 6] 	jsr snd_get_note
                             	; store note period in b
f078 : 86a3             [ 3] 	stx df_tmpptrb
f07a : 85a4             [ 3] 	sta df_tmpptrb+1
                             	; put vol in tmpc
f07c : a5a7             [ 3] 	lda df_tmpptrd
f07e : 85a5             [ 3] 	sta df_tmpptrc
                             	; tmpa,b,c contain chan,per,vol
f080 : 4c5ef0           [ 3] 	jmp df_rt_dosound
                             
                             
                             ; play tonemask,noisemask,envelope,period
f083 :                       df_rt_play
f083 : 204de3           [ 6] 	jsr df_rt_parm_4ints
                             	; parm 1 = tone enable
f086 : a5a1             [ 3] 	lda df_tmpptra
f088 : 2907             [ 2] 	and #7
f08a : 85a1             [ 3] 	sta df_tmpptra
                             	; parm 2 = noise enable
f08c : a5a3             [ 3] 	lda df_tmpptrb
f08e : 2907             [ 2] 	and #7
f090 : 0a               [ 2] 	asl a
f091 : 0a               [ 2] 	asl a
f092 : 0a               [ 2] 	asl a
f093 : 05a1             [ 3] 	ora df_tmpptra
                             	; we now have bits set for channels to enable
                             	; but need to invert for the 8910
                             	; top 2 bits are 0 and 1 as these are port b (in
f095 : 497f             [ 2] 	eor #0x7f
                             	; reg 7 is control register
f097 : a207             [ 2] 	ldx #7
f099 : 206ec0           [ 6] 	jsr snd_set
                             	; parm 3 = envelope mode
AS65 Assembler for R6502 [1.42].                                     Page  237
-------------------------------- bank\bank0.s --------------------------------

f09c : a5a5             [ 3] 	lda df_tmpptrc
f09e : 290f             [ 2] 	and #0xf
                             	; 13 is envelope shape register
f0a0 : a20d             [ 2] 	ldx #13
f0a2 : 206ec0           [ 6] 	jsr snd_set
                             	; parm 4 = envelope period
                             	; 11 is envelope period register
f0a5 : a20b             [ 2] 	ldx #11
                             	; get low
f0a7 : a5a7             [ 3] 	lda df_tmpptrd
f0a9 : 206ec0           [ 6] 	jsr snd_set
                             	; get high
f0ac : e8               [ 2] 	inx
f0ad : a5a8             [ 3] 	lda df_tmpptrd+1
f0af : 4c6ec0           [ 3] 	jmp snd_set
                             
                             ;df_rt_fill
                             ;	jsr df_rt_parm_5ints
                             ;	rts
                             	
                             ;* common filename procesing routine
                             ;*
f0b2 :                       df_rt_init_filename
                             	; evaluate string
f0b2 : 2067e0           [ 6] 	jsr df_rt_neval
f0b5 : 2084f6           [ 6] 	jsr df_ost_popStr
                             
                             	; save string address
f0b8 : 86a5             [ 3] 	stx df_tmpptrc
f0ba : 85a6             [ 3] 	sta df_tmpptrc+1
                             
                             	; copy string to fhandle
f0bc : a000             [ 2] 	ldy #0
f0be :                       df_rt_copy_fn
f0be : b1a5             [ 5] 	lda (df_tmpptrc),y
f0c0 :                       df_rt_fname_case
f0c0 : 990004           [ 5] 	sta df_linbuff,y				; Put filename in line buffe
f0c3 : c8               [ 2] 	iny
f0c4 : aa               [ 2] 	tax
f0c5 : d0f7             [ 3] 	bne df_rt_copy_fn
f0c7 : 60               [ 6] 	rts
                             
                             ;* common file parsing routine
f0c8 :                       df_rt_parse_file
                             	; now process filename
f0c8 : 20b2f0           [ 6] 	jsr df_rt_init_filename
f0cb : a900             [ 2] 	lda #0						; Initialise tape system
f0cd : 4c14c4           [ 3] 	jmp io_active_device
f0d0 :                       df_rt_file_errc
                             	SWBRK DFERR_FNAME
                             
                             
                             ; save "file" as text
f0d2 :                       df_rt_tsave
f0d2 : 20c8f0           [ 6] 	jsr df_rt_parse_file
f0d5 : 2043c4           [ 6] 	jsr io_open_write
f0d8 : b0f6             [ 3] 	bcs df_rt_file_errc
                             	; ok now have redirected output to device
                             	; go and list the program in save mode
f0da : a901             [ 2] 	lda #1
f0dc : 85a9             [ 3] 	sta df_tmpptre
f0de : 20e7ed           [ 6] 	jsr df_rt_listprg
AS65 Assembler for R6502 [1.42].                                     Page  238
-------------------------------- bank\bank0.s --------------------------------

                             	; final CR to end the save
f0e1 : a90d             [ 2] 	lda #UTF_CR
f0e3 : 203dc4           [ 6] 	jsr io_put_ch
f0e6 :                       df_rt_file_cleanup
                             	; close the file
f0e6 : 2046c4           [ 6] 	jsr io_close
                             	; restore to default device io
f0e9 : 4c11c4           [ 3] 	jmp io_set_default
                             
                             
                             ; load "file" from text
f0ec :                       df_rt_tload
f0ec : 20c8f0           [ 6] 	jsr df_rt_parse_file
f0ef : 2040c4           [ 6] 	jsr io_open_read
f0f2 : b0dc             [ 3] 	bcs df_rt_file_errc
                             	; no echo - very important
                             	; else might try and write to a device
                             	; only open for reading (i.e. SD CARD)
f0f4 :                       df_rt_loadline
f0f4 : 18               [ 2] 	clc					; NO ECHO!
f0f5 : 2038df           [ 6] 	jsr df_pg_inputline
                             	; if C clear then tokenise line
f0f8 : 9015             [ 4] 	bcc df_rt_ldtokenise
                             	; else done
                             	; clear dflat runtime else will try to execute
                             	; the last tokenised line!
f0fa : a200             [ 2] 	ldx #0
f0fc : 8e8004           [ 4] 	stx df_tokbuff			; Offset to next line
f0ff : 8e8104           [ 4] 	stx df_tokbuff+1		; Clear line low
f102 : 8e8204           [ 4] 	stx df_tokbuff+2		; Clear line high
f105 : 867f             [ 3] 	stx df_nxtstidx			; Clear next statement
f107 : 867e             [ 3] 	stx df_eolidx			; Clear end of line too
f109 : e8               [ 2] 	inx						; Set immediate mode
f10a : 865e             [ 3] 	stx df_immed
f10c : 4ce6f0           [ 3] 	jmp df_rt_file_cleanup	; Ok now can close and do
f10f :                       df_rt_ldtokenise
f10f : 2089df           [ 6] 	jsr df_pg_tokenise		; Tokenise loaded string
f112 : 4cf4f0           [ 3] 	jmp df_rt_loadline		; Continue with next until b
                             
                             
                             ; Utility to open in binary mode save
f115 :                       df_rt_openforbinsave
f115 : 20c8f0           [ 6] 	jsr df_rt_parse_file
f118 : 204fc4           [ 6] 	jsr io_open_ext2		; Ext2 is binary file save
f11b : b0b3             [ 4] 	bcs df_rt_file_errc
f11d : 60               [ 6] 	rts
                             
                             ; Utility to open in binary mode load
f11e :                       df_rt_openforbinload
                             	; Get filename and open file for binary read
f11e : 20c8f0           [ 6] 	jsr df_rt_parse_file
f121 : 204cc4           [ 6] 	jsr io_open_ext1		; Ext1 is binary file read
f124 : b0aa             [ 4] 	bcs df_rt_file_errc
f126 : 60               [ 6] 	rts
                             
                             ; bload addr,"file"
f127 :                       df_rt_bload
                             	; Get address but keep on stack
f127 : e688             [ 5] 	inc df_exeoff
f129 : 2067e0           [ 6] 	jsr df_rt_neval
                             
                             	; Get filename and open file for binary read
AS65 Assembler for R6502 [1.42].                                     Page  239
-------------------------------- bank\bank0.s --------------------------------

f12c : e688             [ 5] 	inc df_exeoff
f12e : 201ef1           [ 6] 	jsr df_rt_openforbinload
                             
                             	; Get address from stack in to ptra
f131 : 2080f6           [ 6] 	jsr df_ost_popInt
f134 : 86a1             [ 3] 	stx df_tmpptra
f136 : 85a2             [ 3] 	sta df_tmpptra+1
                             
                             	; Get file address to X,Y
f138 : 203ac4           [ 6] 	jsr io_get_ch
f13b : aa               [ 2] 	tax
f13c : 203ac4           [ 6] 	jsr io_get_ch
f13f : a8               [ 2] 	tay
                             
                             	; Check if user address is zero
f140 : a5a1             [ 3] 	lda df_tmpptra
f142 : 05a2             [ 3] 	ora df_tmpptra+1
f144 : d004             [ 3] 	bne df_rt_bload_addr
                             	; If it is zero then use address from file
f146 : 86a1             [ 3] 	stx df_tmpptra
f148 : 84a2             [ 3] 	sty df_tmpptra+1
f14a :                       df_rt_bload_addr
                             	; Get file length
f14a : 203ac4           [ 6] 	jsr io_get_ch
f14d : 85a3             [ 3] 	sta df_tmpptrb
f14f : 203ac4           [ 6] 	jsr io_get_ch
f152 : 85a4             [ 3] 	sta df_tmpptrb+1
                             
                             	; Go and load the bytes
f154 : 20f6f1           [ 6] 	jsr df_rt_loadbin
                             	; Close the file
f157 : 4ce6f0           [ 3] 	jmp df_rt_file_cleanup
                             
                             ; Save a binary file
                             ; addr,length,fname
f15a :                       df_rt_bsave
                             	; Get source address and length but leave on sta
                             	; evaluate 1st parm
f15a : 2067e0           [ 6] 	jsr df_rt_neval
                             	; jump over comma
f15d : e688             [ 5] 	inc df_exeoff
                             	; evaluate the 2nd parm
f15f : 2067e0           [ 6] 	jsr df_rt_neval
                             
                             	; Process file and open for binary save
f162 : e688             [ 5] 	inc df_exeoff
f164 : 2015f1           [ 6] 	jsr df_rt_openforbinsave
                             
                             	; Get length in to ptrb
f167 : 2080f6           [ 6] 	jsr df_ost_popInt
f16a : 86a3             [ 3] 	stx df_tmpptrb
f16c : 85a4             [ 3] 	sta df_tmpptrb+1
                             
                             	; Get address in to ptra
f16e : 2080f6           [ 6] 	jsr df_ost_popInt
f171 : 86a1             [ 3] 	stx df_tmpptra
f173 : 85a2             [ 3] 	sta df_tmpptra+1
                             
                             	; now save bytes
f175 : 2008f2           [ 6] 	jsr df_rt_savebin
                             	; Close the file
f178 : 4ce6f0           [ 3] 	jmp df_rt_file_cleanup
AS65 Assembler for R6502 [1.42].                                     Page  240
-------------------------------- bank\bank0.s --------------------------------

                             
                             
                             ; save dflat tokenised program as binary
f17b :                       df_rt_save
                             	; Process file and open for binary save
f17b : 2015f1           [ 6] 	jsr df_rt_openforbinsave
                             
                             	; first save zero page stuff
                             	; ok this saves a bit more than needed
                             	; but it's no biggie and doesn't
                             	; clobber temp space
f17e : a95b             [ 2] 	lda #lo(dflat_zp_save_s)
f180 : 85a1             [ 3] 	sta df_tmpptra
f182 : a900             [ 2] 	lda #hi(dflat_zp_save_s)
f184 : 85a2             [ 3] 	sta df_tmpptra+1
                             	; save length
f186 : 38               [ 2] 	sec
f187 : a9a1             [ 2] 	lda #lo(dflat_zp_save_e)
f189 : e95b             [ 2] 	sbc #lo(dflat_zp_save_s)
f18b : 85a3             [ 3] 	sta df_tmpptrb
f18d : a900             [ 2] 	lda #hi(dflat_zp_save_e)
f18f : e900             [ 2] 	sbc #hi(dflat_zp_save_s)
f191 : 85a4             [ 3] 	sta df_tmpptrb+1
                             	; now save bytes
f193 : 2008f2           [ 6] 	jsr df_rt_savebin
                             
                             	; now save the dflat program
f196 : a565             [ 3] 	lda df_prgstrt
f198 : 85a1             [ 3] 	sta df_tmpptra
f19a : a566             [ 3] 	lda df_prgstrt+1
f19c : 85a2             [ 3] 	sta df_tmpptra+1
                             	; save length
f19e : 38               [ 2] 	sec
f19f : a567             [ 3] 	lda df_prgend
f1a1 : e565             [ 3] 	sbc df_prgstrt
f1a3 : 85a3             [ 3] 	sta df_tmpptrb
f1a5 : a568             [ 3] 	lda df_prgend+1
f1a7 : e566             [ 3] 	sbc df_prgstrt+1
f1a9 : 85a4             [ 3] 	sta df_tmpptrb+1
                             	; now save bytes
f1ab : 2008f2           [ 6] 	jsr df_rt_savebin
                             
                             	; now save the variables VVT and VNT
f1ae : a569             [ 3] 	lda df_vntstrt
f1b0 : 85a1             [ 3] 	sta df_tmpptra
f1b2 : a56a             [ 3] 	lda df_vntstrt+1
f1b4 : 85a2             [ 3] 	sta df_tmpptra+1
                             	; save length
f1b6 : 38               [ 2] 	sec
f1b7 : a56d             [ 3] 	lda df_vvtstrt
f1b9 : e569             [ 3] 	sbc df_vntstrt
f1bb : 85a3             [ 3] 	sta df_tmpptrb
f1bd : a56e             [ 3] 	lda df_vvtstrt+1
f1bf : e56a             [ 3] 	sbc df_vntstrt+1
f1c1 : 85a4             [ 3] 	sta df_tmpptrb+1
                             	; now save bytes
f1c3 : 2008f2           [ 6] 	jsr df_rt_savebin
                             
                             	; close the file
f1c6 : 2046c4           [ 6] 	jsr io_close
f1c9 : 18               [ 2] 	clc
                             	; Close the file
AS65 Assembler for R6502 [1.42].                                     Page  241
-------------------------------- bank\bank0.s --------------------------------

f1ca : 4ce6f0           [ 3] 	jmp df_rt_file_cleanup
                             
                             
                             ; load dflat tokenised program as binary
f1cd :                       df_rt_load
f1cd : 201ef1           [ 6] 	jsr df_rt_openforbinload
                             
                             	; Get zero page header
f1d0 : 20e9f1           [ 6] 	jsr df_rt_getbin_parms
                             	; and get bytes
f1d3 : 20f6f1           [ 6] 	jsr df_rt_loadbin
                             
                             	; Get program header
f1d6 : 20e9f1           [ 6] 	jsr df_rt_getbin_parms
                             	; and get bytes
f1d9 : 20f6f1           [ 6] 	jsr df_rt_loadbin
                             
                             	; Get variables header
f1dc : 20e9f1           [ 6] 	jsr df_rt_getbin_parms
                             	; and get bytes
f1df : 20f6f1           [ 6] 	jsr df_rt_loadbin
                             
                             	; close the file
f1e2 : 2046c4           [ 6] 	jsr io_close
f1e5 : 18               [ 2] 	clc
                             	; Close the file
f1e6 : 4ce6f0           [ 3] 	jmp df_rt_file_cleanup
                             
                             
                             ; Utility to get 4 parms from binary header
f1e9 :                       df_rt_getbin_parms
f1e9 : a200             [ 2] 	ldx #0
f1eb :                       df_rt_getbin_parms_loop
f1eb : 203ac4           [ 6] 	jsr io_get_ch
f1ee : 95a1             [ 4] 	sta df_tmpptra,x
f1f0 : e8               [ 2] 	inx
f1f1 : e004             [ 2] 	cpx #4
f1f3 : d0f6             [ 3] 	bne df_rt_getbin_parms_loop
f1f5 : 60               [ 6] 	rts
                             
                             ; Utility to load a bin file in address ptra
                             ; Length in ptr b
f1f6 :                       df_rt_loadbin
                             	; Now load all bytes
f1f6 : a000             [ 2] 	ldy #0
f1f8 :                       df_rt_loadbin_byte
                             	; Get a byte from tape
f1f8 : 203ac4           [ 6] 	jsr io_get_ch
                             	; Save it to destination
f1fb : 91a1             [ 5] 	sta (df_tmpptra),y
                             	; Increment destination
f1fd : c8               [ 2] 	iny
f1fe : d002             [ 4] 	bne df_rt_loadbin_inc
f200 : e6a2             [ 5] 	inc df_tmpptra+1
f202 :                       df_rt_loadbin_inc
                             	; Decrement length remaining
f202 : 2026f2           [ 6] 	jsr df_rt_dec_binlen
                             	; Not done, do another byte
f205 : d0f1             [ 4] 	bne df_rt_loadbin_byte
                             	; Yes the close the file
f207 : 60               [ 6] 	rts
                             
AS65 Assembler for R6502 [1.42].                                     Page  242
-------------------------------- bank\bank0.s --------------------------------

                             ; Utility to save a bin file from address ptra
                             ; Length in ptr b
f208 :                       df_rt_savebin
                             	; Save dest and length to tape
f208 : a200             [ 2] 	ldx #0
f20a :                       df_rt_bsave_parms
f20a : b5a1             [ 4] 	lda df_tmpptra,x
f20c : 203dc4           [ 6] 	jsr io_put_ch
f20f : e8               [ 2] 	inx
f210 : e004             [ 2] 	cpx #4
f212 : d0f6             [ 3] 	bne df_rt_bsave_parms
                             
                             	; Now save all bytes
f214 : a000             [ 2] 	ldy #0
f216 :                       df_rt_savebin_byte
                             	; Get byte from memory
f216 : b1a1             [ 5] 	lda (df_tmpptra),y
                             	; Put byte to tape
f218 : 203dc4           [ 6] 	jsr io_put_ch
                             	; Increment destination
f21b : c8               [ 2] 	iny
f21c : d002             [ 3] 	bne df_rt_savebin_inc
f21e : e6a2             [ 5] 	inc df_tmpptra+1
f220 :                       df_rt_savebin_inc
                             	; Decrement length remaining
f220 : 2026f2           [ 6] 	jsr df_rt_dec_binlen
                             	; Not done, do another byte
f223 : d0f1             [ 3] 	bne df_rt_savebin_byte
f225 : 60               [ 6] 	rts
                             
                             ; Decrement length in ptrb
f226 :                       df_rt_dec_binlen
                             	; Decrement length remaining
f226 : a5a3             [ 3] 	lda df_tmpptrb
f228 : d002             [ 3] 	bne df_rt_binlen_skip
f22a : c6a4             [ 5] 	dec df_tmpptrb+1
f22c :                       df_rt_binlen_skip
f22c : c6a3             [ 5] 	dec df_tmpptrb
                             	; Reached zero?
f22e : a5a3             [ 3] 	lda df_tmpptrb
f230 : 05a4             [ 3] 	ora df_tmpptrb+1
f232 : 60               [ 6] 	rts
                             
                             
                             ; reset var
f233 :                       df_rt_reset
                             	; now get lvar X,A from current statement
f233 : 20a8e4           [ 6] 	jsr df_rt_getlvar
                             	; save lvar in tmpb, vvt ptr in tmpa
f236 : 86a3             [ 3] 	stx df_tmpptrb
f238 : 85a4             [ 3] 	sta df_tmpptrb+1
                             	; load the vdp count as the reset value of timer
                             	; turn off interrupts while reading vdp lo,hi
f23a : a000             [ 2] 	ldy #0	; This is in readiness to read high byte 
                             	; clear interrupts to access 3 byte vdp counter 
f23c : 78               [ 2] 	sei
f23d : a508             [ 3] 	lda vdp_cnt
f23f : 91a3             [ 5] 	sta (df_tmpptrb),y
f241 : a509             [ 3] 	lda vdp_cnt+1
f243 : c8               [ 2] 	iny
f244 : 91a3             [ 5] 	sta (df_tmpptrb),y
                             	; restore interrupts asap
AS65 Assembler for R6502 [1.42].                                     Page  243
-------------------------------- bank\bank0.s --------------------------------

f246 : 58               [ 2] 	cli
f247 : 60               [ 6] 	rts
                             
                             ;***** FUNCTIONS *****
                             
f248 :                       df_rt_deek
f248 : 38               [ 2] 	sec
f249 : 24                    	db 0x24	; BIT skip the clc
f24a :                       df_rt_peek
f24a : 18               [ 2] 	clc
f24b :                       df_rt_readbyte
f24b : 08               [ 3] 	php
                             ;	inc df_exeoff
f24c : 2061e0           [ 6] 	jsr df_rt_getnval
f24f : 86a1             [ 3] 	stx df_tmpptra
f251 : 85a2             [ 3] 	sta df_tmpptra+1
f253 : a000             [ 2] 	ldy #0
f255 : b1a1             [ 5] 	lda (df_tmpptra),y
f257 : aa               [ 2] 	tax
f258 : a900             [ 2] 	lda #0
f25a : 28               [ 4] 	plp
f25b : 9003             [ 3] 	bcc df_rt_readbyte_skip
f25d : c8               [ 2] 	iny
f25e : b1a1             [ 5] 	lda (df_tmpptra),y
f260 :                       df_rt_readbyte_skip
f260 : 4c50f6           [ 3] 	jmp df_ost_pushInt
                             
                             ; Random number generator
                             ; rnd(0) = get next number
                             ; rnd(>0) = set seed
f263 :                       df_rt_rnd
                             ;	inc df_exeoff
f263 : 2061e0           [ 6] 	jsr df_rt_getnval
                             	; if input is 0 then generate next random number
f266 : e000             [ 2] 	cpx #0
f268 : d014             [ 3] 	bne df_rt_rnd_set
f26a : c900             [ 2] 	cmp #0
f26c : d010             [ 3] 	bne df_rt_rnd_set
                             	; generate next number
f26e : a598             [ 3] 	lda df_rnd+1
f270 : 4a               [ 2] 	lsr a
f271 : 2697             [ 5] 	rol df_rnd
f273 : 9002             [ 3] 	bcc df_rt_rnd_noeor
f275 : 49b4             [ 2] 	eor #0xb4
f277 :                       df_rt_rnd_noeor
f277 : 8598             [ 3] 	sta df_rnd+1
f279 : 4597             [ 3] 	eor df_rnd
f27b : 4c54f6           [ 3] 	jmp df_ost_pushIntA
                             	; else set the seed to that number and done
f27e :                       df_rt_rnd_set
f27e : 8697             [ 3] 	stx df_rnd
f280 : 8598             [ 3] 	sta df_rnd+1
f282 : 4c50f6           [ 3] 	jmp df_ost_pushInt
                             
                             
                             ;* Return memory footprint as follows:
                             ;* 0	Return free memory (start of vvt - end of he
                             ;* 1	Return program size (end of prg - start of p
                             ;* 2	Return size of vars (end of vnt - start of v
f285 :                       df_rt_mem
                             ;	inc df_exeoff
f285 : 2061e0           [ 6] 	jsr df_rt_getnval
AS65 Assembler for R6502 [1.42].                                     Page  244
-------------------------------- bank\bank0.s --------------------------------

                             	; only low byte is used
f288 : e001             [ 2] 	cpx #1
f28a : f017             [ 3] 	beq df_rt_mem_prg
f28c : e002             [ 2] 	cpx #2
f28e : f026             [ 3] 	beq df_rt_mem_var
                             	; default is free memory
f290 :                       df_rt_mem_free
                             	_cpyZPWord df_vvtstrt,df_tmpptra
                             
                             	_cpyZPWord df_starend,df_tmpptrb
                             
f2a0 : 4cc6f2           [ 3] 	jmp df_rt_mem_calc
f2a3 :                       df_rt_mem_prg
                             	_cpyZPWord df_prgend,df_tmpptra
                             
                             	_cpyZPWord df_prgstrt,df_tmpptrb
                             
f2b3 : 4cc6f2           [ 3] 	jmp df_rt_mem_calc
f2b6 :                       df_rt_mem_var
                             	_cpyZPWord df_vvtstrt,df_tmpptra
                             
                             	_cpyZPWord df_vntstrt,df_tmpptrb
                             
f2c6 :                       df_rt_mem_calc
                             	; tmpa-tmpb result in X,A
f2c6 : 38               [ 2] 	sec
f2c7 : a5a1             [ 3] 	lda df_tmpptra
f2c9 : e5a3             [ 3] 	sbc df_tmpptrb
f2cb : aa               [ 2] 	tax
f2cc : a5a2             [ 3] 	lda df_tmpptra+1
f2ce : e5a4             [ 3] 	sbc df_tmpptrb+1
f2d0 : 4c50f6           [ 3] 	jmp df_ost_pushInt
                             
                             ;* a=stick()
                             ;* returns bit condition of joystick positions
                             ;* no actual joystick support so this is
                             ;* Check for fire | down | up | right | left
                             ;*        bit  4     3      2     1       0
f2d3 :                       df_rt_stick
                             ;	inc df_exeoff
f2d3 : 2061c7           [ 6] 	jsr kb_stick				; Get pos in to A
f2d6 : 4c54f6           [ 3] 	jmp df_ost_pushIntA
                             
                             ; k=get(sync) sync>=1 means sync
f2d9 :                       df_rt_get
                             ;	inc df_exeoff
f2d9 : 2061e0           [ 6] 	jsr df_rt_getnval
                             	; only low byte is used, check for sync or async
                             	; c=0 if x<1 else x>=1 makes c=1
f2dc : e001             [ 2] 	cpx #1
f2de :                       df_rt_get_sync
f2de : 08               [ 3] 	php
f2df : 203ac4           [ 6] 	jsr io_get_ch				; Return in A, C=0 is good
f2e2 : 9005             [ 3] 	bcc df_rt_get_pushp			; Push A (and do plp)
f2e4 : 28               [ 4] 	plp
f2e5 : b0f7             [ 3] 	bcs df_rt_get_sync			; If sync then check again
f2e7 : 9001             [ 3] 	bcc df_rt_get_push			; Else push zero (no plp)
f2e9 :                       df_rt_get_pushp
f2e9 : 28               [ 4] 	plp
f2ea :                       df_rt_get_push
f2ea : 4c54f6           [ 3] 	jmp df_ost_pushIntA
                             
AS65 Assembler for R6502 [1.42].                                     Page  245
-------------------------------- bank\bank0.s --------------------------------

                             ; s = scrn(x,y)
f2ed :                       df_rt_scrn
                             ;	inc df_exeoff
f2ed : 202be3           [ 6] 	jsr df_rt_parm_2ints
f2f0 : a4a1             [ 3] 	ldy df_tmpptra			; Y is the x coord!
f2f2 : a6a3             [ 3] 	ldx df_tmpptrb			; X is the y coord!
f2f4 : 20e7cd           [ 6] 	jsr gr_get
f2f7 : 4c54f6           [ 3] 	jmp df_ost_pushIntA
                             
                             ; p = pixel(x,y)
f2fa :                       df_rt_pixel
                             ;	inc df_exeoff
f2fa : 202be3           [ 6] 	jsr df_rt_parm_2ints
f2fd : a6a1             [ 3] 	ldx df_tmpptra
f2ff : a4a3             [ 3] 	ldy df_tmpptrb
f301 : 204dd0           [ 6] 	jsr gr_pixel
f304 : 4c54f6           [ 3] 	jmp df_ost_pushIntA
                             
                             
                             ; e=elapsed(var)
f307 :                       df_rt_elapsed
                             	; now get lvar X,A from current statement
f307 : 20a8e4           [ 6] 	jsr df_rt_getlvar
f30a : e688             [ 5] 	inc df_exeoff
                             	; save lvar in tmpb, vvt ptr in tmpa
f30c : 86a3             [ 3] 	stx df_tmpptrb
f30e : 85a4             [ 3] 	sta df_tmpptrb+1
                             	; subtract vdp counter from value
                             	; turn off interrupts while reading vdp lo,hi
f310 : a000             [ 2] 	ldy #0	; This is in readiness to read high byte 
f312 : 38               [ 2] 	sec
                             	; disable interrupts to access vdp counter
f313 : 78               [ 2] 	sei
f314 : a508             [ 3] 	lda vdp_cnt
f316 : f1a3             [ 5] 	sbc (df_tmpptrb),y
f318 : aa               [ 2] 	tax
f319 : a509             [ 3] 	lda vdp_cnt+1
                             	; restore interrupts asap
f31b : 58               [ 2] 	cli
f31c : c8               [ 2] 	iny
f31d : f1a3             [ 5] 	sbc (df_tmpptrb),y
f31f : 4c50f6           [ 3] 	jmp df_ost_pushInt
                             
f322 :                       df_rt_call
                             ;	inc df_exeoff
f322 : 204de3           [ 6] 	jsr df_rt_parm_4ints
f325 : a5a3             [ 3] 	lda df_tmpptrb				; load A
f327 : a6a5             [ 3] 	ldx	df_tmpptrc				; load X
f329 : a4a7             [ 3] 	ldy df_tmpptrd				; load Y
f32b : 2031f3           [ 6] 	jsr df_rt_calljsr
f32e :                       df_rt_push_int1
f32e : 4c50f6           [ 3] 	jmp df_ost_pushInt			; A,X pair is return value
f331 :                       df_rt_calljsr
f331 : 6ca100           [ 6] 	jmp (df_tmpptra)			; tmpptra is address, return 
                             
f334 :                       df_rt_sgn
                             ;	inc df_exeoff
f334 : 2061e0           [ 6] 	jsr df_rt_getnval
f337 : 86a1             [ 3] 	stx df_tmpptra
f339 : 05a1             [ 3] 	ora df_tmpptra
f33b : f00f             [ 3] 	beq df_rt_sgn_z
f33d : 2980             [ 2] 	and #0x80
AS65 Assembler for R6502 [1.42].                                     Page  246
-------------------------------- bank\bank0.s --------------------------------

f33f : d006             [ 3] 	bne df_rt_sgn_n
f341 : a201             [ 2] 	ldx #1
f343 : a900             [ 2] 	lda #0
f345 : f0e7             [ 3] 	beq df_rt_push_int1			; Always
f347 :                       df_rt_sgn_n
f347 : a2ff             [ 2] 	ldx #0xff
f349 : 8a               [ 2] 	txa
f34a : d0e2             [ 3] 	bne df_rt_push_int1			; Always
f34c :                       df_rt_sgn_z
f34c : a200             [ 2] 	ldx #0
f34e : 8a               [ 2] 	txa
f34f : f0dd             [ 3] 	beq df_rt_push_int1			; Always
                             
                             ; addr(X)
f351 :                       df_rt_addr
                             	; get lvar X,A from current statement
f351 : 20a8e4           [ 6] 	jsr df_rt_getlvar
f354 : e688             [ 5] 	inc df_exeoff
f356 : 4c50f6           [ 3] 	jmp df_ost_pushInt
                             
                             ; string length calculator
                             ; X,A = source
                             ; A = length not including zero
f359 :                       df_rt_strlen_common
f359 : 86a1             [ 3] 	stx df_tmpptra
f35b : 85a2             [ 3] 	sta df_tmpptra+1
f35d : a0ff             [ 2] 	ldy #0xff
f35f :                       df_rt_strlen_count
f35f : c8               [ 2] 	iny
f360 : b1a1             [ 5] 	lda (df_tmpptra),y
f362 : d0fb             [ 3] 	bne df_rt_strlen_count
f364 : 98               [ 2] 	tya
f365 : 60               [ 6] 	rts
                             
                             
                             ; common routine to extract a string
                             ; tmpa = source string
                             ; tmpb = dest string
                             ; tmpc = start pos
                             ; tmpd = endpos
f366 :                       df_rt_str_extract
                             	; source string
f366 : 2084f6           [ 6] 	jsr df_ost_popStr
f369 : 86a1             [ 3] 	stx df_tmpptra
f36b : 85a2             [ 3] 	sta df_tmpptra+1
                             	; destination is string accumulator
f36d : a57a             [ 3] 	lda df_sevalptr
f36f : 85a3             [ 3] 	sta df_tmpptrb
f371 : a57b             [ 3] 	lda df_sevalptr+1
f373 : 85a4             [ 3] 	sta df_tmpptrb+1
                             	; start pos
f375 : a4a5             [ 3] 	ldy df_tmpptrc
f377 : a200             [ 2] 	ldx #0
f379 :                       df_rt_str_cpy_ch
f379 : c4a7             [ 3] 	cpy df_tmpptrd
f37b : f011             [ 3] 	beq df_str_src_end
f37d : b1a1             [ 5] 	lda (df_tmpptra),y
f37f : f00d             [ 3] 	beq df_str_src_end
f381 : 81a3             [ 6] 	sta (df_tmpptrb,x)
                             	_incZPWord df_tmpptrb
                             
f389 : c8               [ 2] 	iny
AS65 Assembler for R6502 [1.42].                                     Page  247
-------------------------------- bank\bank0.s --------------------------------

f38a : d0ed             [ 3] 	bne df_rt_str_cpy_ch
                             	SWBRK DFERR_STRLONG
                             
f38e :                       df_str_src_end
f38e : a900             [ 2] 	lda #0
f390 : 81a3             [ 6] 	sta (df_tmpptrb,x)
f392 : a67a             [ 3] 	ldx df_sevalptr
f394 : a57b             [ 3] 	lda df_sevalptr+1
f396 : 4c5bf6           [ 3] 	jmp df_ost_pushStr
                             
                             ; $c = chr(x)
f399 :                       df_rt_chr
                             ;	inc df_exeoff
                             	; get char in X
f399 : 2061e0           [ 6] 	jsr df_rt_getnval
f39c : a000             [ 2] 	ldy #0
                             	; transfer lo byte to A
f39e : 8a               [ 2] 	txa
f39f : 917a             [ 5] 	sta (df_sevalptr),y
f3a1 : c8               [ 2] 	iny
                             	; zero terminator
f3a2 : a900             [ 2] 	lda #0
f3a4 : 917a             [ 5] 	sta (df_sevalptr),y
                             	; point to seval scratch area
f3a6 : a67a             [ 3] 	ldx df_sevalptr
f3a8 : a57b             [ 3] 	lda df_sevalptr+1
f3aa : 4c5bf6           [ 3] 	jmp df_ost_pushStr
                             
                             ; $c = hex(x)
f3ad :                       df_rt_hex
                             ;	inc df_exeoff
                             	; create hex digits
f3ad : 2061e0           [ 6] 	jsr df_rt_getnval
f3b0 : 85a1             [ 3] 	sta df_tmpptra	; Save the high byte
f3b2 : 8a               [ 2] 	txa				; Convert low byte first
f3b3 : 2098c1           [ 6] 	jsr str_a_to_x	; Hex digits in A,X
f3b6 : 85a3             [ 3] 	sta df_tmpptrb
f3b8 : 8a               [ 2] 	txa				; Push low digit of low byte from X
f3b9 : 48               [ 3] 	pha
f3ba : a5a3             [ 3] 	lda df_tmpptrb	; Get A back from temp
f3bc : 48               [ 3] 	pha				; Push high digit of low byte
f3bd : a5a1             [ 3] 	lda df_tmpptra	; Get the high byte
f3bf : 2098c1           [ 6] 	jsr str_a_to_x	; Hex digits in A,X
                             	; create string
f3c2 : a000             [ 2] 	ldy #0			; Index in to string temp area
                             	; hi/hi
f3c4 : 917a             [ 5] 	sta (df_sevalptr),y
f3c6 : c8               [ 2] 	iny
                             	; hi/lo
f3c7 : 8a               [ 2] 	txa
f3c8 : 917a             [ 5] 	sta (df_sevalptr),y
f3ca : c8               [ 2] 	iny
                             	; lo/hi
f3cb : 68               [ 4] 	pla
f3cc : 917a             [ 5] 	sta (df_sevalptr),y
f3ce : c8               [ 2] 	iny
                             	; lo/lo
f3cf : 68               [ 4] 	pla
f3d0 : 917a             [ 5] 	sta (df_sevalptr),y
f3d2 : c8               [ 2] 	iny
                             	; zero terminator
f3d3 : a900             [ 2] 	lda #0
AS65 Assembler for R6502 [1.42].                                     Page  248
-------------------------------- bank\bank0.s --------------------------------

f3d5 : 917a             [ 5] 	sta (df_sevalptr),y
                             	; point to seval scratch area
f3d7 : a67a             [ 3] 	ldx df_sevalptr
f3d9 : a57b             [ 3] 	lda df_sevalptr+1
f3db : 4c5bf6           [ 3] 	jmp df_ost_pushStr
                             
                             ; $c = dec(x)
f3de :                       df_rt_dec
                             ;	inc df_exeoff
                             	; create dec digits
f3de : 2061e0           [ 6] 	jsr df_rt_getnval
f3e1 : 20aec3           [ 6] 	jsr int_to_str
                             	; point to num_buf scratch area
f3e4 : a24d             [ 2] 	ldx #lo(num_buf)
f3e6 : a900             [ 2] 	lda #hi(num_buf)
f3e8 : 4c5bf6           [ 3] 	jmp df_ost_pushStr
                             
                             
                             ; $l = left($s, x)
f3eb :                       df_rt_left
                             ;	inc df_exeoff
                             
                             	; first get the string to act on
                             	; point to string accumulator
f3eb : 2021e1           [ 6] 	jsr df_rt_seval
                             	; now get the num of chars
f3ee : e688             [ 5] 	inc df_exeoff
f3f0 : 2061e0           [ 6] 	jsr df_rt_getnval
                             	; number of chars to extract
f3f3 : 86a7             [ 3] 	stx df_tmpptrd
                             	; start position
f3f5 : a000             [ 2] 	ldy #0
f3f7 : 84a5             [ 3] 	sty df_tmpptrc
f3f9 : 4c66f3           [ 3] 	jmp df_rt_str_extract
                             
                             ; $r = right($s, x)
f3fc :                       df_rt_right
                             ;	inc df_exeoff
                             	; first get the string to act on
                             	; point to string accumulator
f3fc : 2021e1           [ 6] 	jsr df_rt_seval
                             	; now get the num of chars from the right
f3ff : e688             [ 5] 	inc df_exeoff
f401 : 2061e0           [ 6] 	jsr df_rt_getnval
                             	; number of chars to extract from the right
f404 : 86a5             [ 3] 	stx df_tmpptrc
                             	; end pos = len
f406 : a67a             [ 3] 	ldx df_sevalptr
f408 : a57b             [ 3] 	lda df_sevalptr+1
f40a : 2059f3           [ 6] 	jsr df_rt_strlen_common
f40d : 85a7             [ 3] 	sta df_tmpptrd
                             	; subtract num chars to extract to get start pos
f40f : 38               [ 2] 	sec
f410 : e5a5             [ 3] 	sbc df_tmpptrc
f412 : 85a5             [ 3] 	sta df_tmpptrc
f414 : 4c66f3           [ 3] 	jmp df_rt_str_extract
                             
                             ; $m = mid($s, x, y)
f417 :                       df_rt_mid
                             ;	inc df_exeoff
                             	; first get the string to act on
                             	; point to string accumulator
AS65 Assembler for R6502 [1.42].                                     Page  249
-------------------------------- bank\bank0.s --------------------------------

f417 : 2021e1           [ 6] 	jsr df_rt_seval
                             	; now get start of string segment
f41a : e688             [ 5] 	inc df_exeoff
f41c : 2067e0           [ 6] 	jsr df_rt_neval
                             	; number of chars to extract
f41f : e688             [ 5] 	inc df_exeoff
f421 : 2061e0           [ 6] 	jsr df_rt_getnval
f424 : 86a7             [ 3] 	stx df_tmpptrd
                             	; start position
f426 : 2080f6           [ 6] 	jsr df_ost_popInt
f429 : ca               [ 2] 	dex					; zero offset rather than 1
f42a : 86a5             [ 3] 	stx df_tmpptrc
                             	; update end pos by adding start pos
f42c : 8a               [ 2] 	txa
f42d : 18               [ 2] 	clc
f42e : 65a7             [ 3] 	adc df_tmpptrd
f430 : 85a7             [ 3] 	sta df_tmpptrd
f432 : 4c66f3           [ 3] 	jmp df_rt_str_extract
                             
                             ; %l = len($s)
f435 :                       df_rt_len
                             ;	inc df_exeoff
                             	; evaluate the string in the string accumulator
f435 : 2021e1           [ 6] 	jsr df_rt_seval
f438 : 2084f6           [ 6] 	jsr df_ost_popStr
                             	; now calculate the length of this string
f43b : 2059f3           [ 6] 	jsr df_rt_strlen_common
f43e : 4c54f6           [ 3] 	jmp df_ost_pushIntA
                             
                             ; %l = asc($s)
f441 :                       df_rt_asc
                             ;	inc df_exeoff
                             	; Evaluate string in the string accumulator
f441 : 2021e1           [ 6] 	jsr df_rt_seval
f444 : 2084f6           [ 6] 	jsr df_ost_popStr
                             	; Store point in ZP
f447 : 86a1             [ 3] 	stx df_tmpptra
f449 : 85a2             [ 3] 	sta df_tmpptra+1
                             	; Find the character at beginning
f44b : a200             [ 2] 	ldx #0
f44d : a1a1             [ 6] 	lda (df_tmpptra,x)
f44f : 4c54f6           [ 3] 	jmp df_ost_pushIntA
                             
                             ; %l = val($s)
f452 :                       df_rt_val
                             ;	inc df_exeoff
                             	; evaluate the string
f452 : 2021e1           [ 6] 	jsr df_rt_seval
f455 : 2084f6           [ 6] 	jsr df_ost_popStr
f458 : a000             [ 2] 	ldy #0				; any numeric format
f45a : 20e1c1           [ 6] 	jsr con_n_to_a		; result in num_a
f45d : b007             [ 3] 	bcs df_rt_val_err
f45f : a63d             [ 3] 	ldx num_a
f461 : a53e             [ 3] 	lda num_a+1
                             	; Save as an int
f463 : 4c50f6           [ 3] 	jmp df_ost_pushInt
f466 :                       df_rt_val_err
                             	SWBRK DFERR_TYPEMISM
                             
                             
                             ; stop execution
f468 :                       df_rt_abort
AS65 Assembler for R6502 [1.42].                                     Page  250
-------------------------------- bank\bank0.s --------------------------------

                             	SWBRK DFERR_ABORT
                             
                             
f46a :                       df_rt_sprchar
f46a : 202be3           [ 6] 	jsr df_rt_parm_2ints
f46d : a5a1             [ 3] 	lda df_tmpptra
f46f : a6a3             [ 3] 	ldx df_tmpptrb
f471 : 4cc0d2           [ 3] 	jmp gr_spr_char
                             
f474 :                       df_rt_sprpos
f474 : 2036e3           [ 6] 	jsr df_rt_parm_3ints
f477 : a5a1             [ 3] 	lda df_tmpptra
f479 : a6a3             [ 3] 	ldx df_tmpptrb
f47b : a4a5             [ 3] 	ldy df_tmpptrc
f47d : 4cd0d2           [ 3] 	jmp gr_spr_pos
                             
f480 :                       df_rt_sprupd
f480 : 205bd2           [ 6] 	jsr gr_spr_erase
f483 : 206dd2           [ 6] 	jsr gr_spr_new
f486 : 4c9fd2           [ 3] 	jmp gr_spr_draw
                             
f489 :                       df_rt_sprinit
f489 : 4c4dd2           [ 3] 	jmp gr_spr_init
                             
f48c :                       df_rt_sprmulti
f48c : 202be3           [ 6] 	jsr df_rt_parm_2ints
f48f : 4cddd2           [ 3] 	jmp gr_spr_multi_pos
                             
f492 :                       df_rt_sprhit
                             ;	inc df_exeoff
f492 : 2061e0           [ 6] 	jsr df_rt_getnval
f495 : 8a               [ 2] 	txa
f496 : 20c6d2           [ 6] 	jsr gr_spr_hit
f499 : b003             [ 3] 	bcs df_rt_sprhit_inactive
                             	; Active sprite hit = background
f49b : 4c54f6           [ 3] 	jmp df_ost_pushIntA
f49e :                       df_rt_sprhit_inactive
                             	; Inactive sprite hit = -1
f49e : a2ff             [ 2] 	ldx #0xff
f4a0 : 8a               [ 2] 	txa
f4a1 : 4c50f6           [ 3] 	jmp df_ost_pushInt
                             
                             
f4a4 :                       mod_sz_rtsubs_e
                             
                             
                             	include "dflat/proc.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  PROC.S
                             ;*  dflat module to handle procedures:
                             ;*  - executing a procedure
                             ;*  - find a proc, pass local and non-local param
                             ;*  - return from a proc, unload locals
                             ;*  - save the definition of a proc in the VNT an
                             ;*
AS65 Assembler for R6502 [1.42].                                     Page  251
-------------------------------- bank\bank0.s --------------------------------

                             ;************************************************
                             
                             	; ROM code
                             	code  
                             
f4a4 :                       mod_sz_proc_s
                             
f4a4 :                       df_rt_proc_parmerr
f4a4 :                       df_rt_deferr
                             	SWBRK DFERR_PROCPARM
                             
                             
                             
                             ; call procedure
f4a6 :                       df_rt_proc
                             	; move past escape token
f4a6 : a488             [ 3] 	ldy df_exeoff
f4a8 : c8               [ 2] 	iny
                             	; Get VVT address X,A and procptr
f4a9 : b186             [ 5] 	lda (df_currlin),y
f4ab : aa               [ 2] 	tax
f4ac : c8               [ 2] 	iny
f4ad : b186             [ 5] 	lda (df_currlin),y
f4af : c8               [ 2] 	iny
f4b0 : 8488             [ 3] 	sty df_exeoff
f4b2 : 868e             [ 3] 	stx df_procptr
f4b4 : 858f             [ 3] 	sta df_procptr+1
                             	
                             	; is index 0 (held in dim1)
                             	; then need to find the procedure
f4b6 : a003             [ 2] 	ldy #DFVVT_DIM1
f4b8 : b18e             [ 5] 	lda (df_procptr),y
f4ba : d014             [ 3] 	bne df_rt_proc_addr
                             	; find proc
f4bc : 2046e4           [ 6] 	jsr df_rt_findproc
                             	; save y (line index)
f4bf : 8438             [ 3] 	sty tmp_d
                             	; now go and update the proc vvt address
f4c1 : a002             [ 2] 	ldy #DFVVT_HI
f4c3 : 918e             [ 5] 	sta (df_procptr),y
f4c5 : a001             [ 2] 	ldy #DFVVT_LO
f4c7 : 8a               [ 2] 	txa
f4c8 : 918e             [ 5] 	sta (df_procptr),y
f4ca : a003             [ 2] 	ldy #DFVVT_DIM1
                             	; get back line index in to A
f4cc : a538             [ 3] 	lda tmp_d
f4ce : 918e             [ 5] 	sta (df_procptr),y
f4d0 :                       df_rt_proc_addr
                             	; move past first open bracket
f4d0 : e688             [ 5] 	inc df_exeoff
                             	
                             	; get parm count
f4d2 : a004             [ 2] 	ldy #DFVVT_DIM2
f4d4 : b18e             [ 5] 	lda (df_procptr),y	
f4d6 : f018             [ 3] 	beq df_rt_proc_parm_none
                             	; push the right number of parms on
f4d8 : 48               [ 3] 	pha
                             
f4d9 : c688             [ 5] 	dec df_exeoff		; Pre-adjust
f4db :                       df_rt_proc_push_parm
                             	; move past comma or opening bracket
f4db : e688             [ 5] 	inc df_exeoff
AS65 Assembler for R6502 [1.42].                                     Page  252
-------------------------------- bank\bank0.s --------------------------------

                             	; if at end then error!
f4dd : a488             [ 3] 	ldy df_exeoff
f4df : b186             [ 5] 	lda (df_currlin),y
f4e1 : c929             [ 2] 	cmp #')'
f4e3 : f0bf             [ 3] 	beq df_rt_proc_parmerr
                             	; else try and evaluate
f4e5 : 2067e0           [ 6] 	jsr df_rt_neval
                             	; get parm count off stack
f4e8 : 68               [ 4] 	pla
                             	; decrement
f4e9 : 38               [ 2] 	sec
f4ea : e901             [ 2] 	sbc #1
                             	; and put back on stack
f4ec : 48               [ 3] 	pha
                             	; go back and do all required parms
f4ed : d0ec             [ 3] 	bne df_rt_proc_push_parm
                             	; remove parm counter from stack
f4ef :                       df_rt_proc_parm_done
f4ef : 68               [ 4] 	pla
f4f0 :                       df_rt_proc_parm_none
                             	; should be at close bracket
f4f0 : a488             [ 3] 	ldy df_exeoff
f4f2 : b186             [ 5] 	lda (df_currlin),y
f4f4 : c929             [ 2] 	cmp #')'
f4f6 : d0ac             [ 3] 	bne df_rt_proc_parmerr
                             	; should be no more parms
                             	; ok, finally we have all parms on rt stack
                             	; now execute the procedure
                             	; get back the proc address
f4f8 : a68e             [ 3] 	ldx df_procptr
f4fa : a58f             [ 3] 	lda df_procptr+1
                             ;	bne df_rt_exec_proc		; ALWAYS as procptr+1 !=0
                             	
                             ; executing a procedure in VVT slot A,X
f4fc :                       df_rt_exec_proc
                             	; save slot address
f4fc : 86a1             [ 3] 	stx df_tmpptra
f4fe : 85a2             [ 3] 	sta df_tmpptra+1
                             	
                             	; need to save all important vars
f500 : a586             [ 3] 	lda df_currlin
f502 : 48               [ 3] 	pha
f503 : a587             [ 3] 	lda df_currlin+1
f505 : 48               [ 3] 	pha
f506 : a588             [ 3] 	lda df_exeoff
f508 : 48               [ 3] 	pha
f509 : a57f             [ 3] 	lda df_nxtstidx
f50b : 48               [ 3] 	pha
f50c : a580             [ 3] 	lda df_curstidx
f50e : 48               [ 3] 	pha
f50f : a57e             [ 3] 	lda df_eolidx
f511 : 48               [ 3] 	pha
f512 : a593             [ 3] 	lda df_ifnest
f514 : 48               [ 3] 	pha
                             
                             	; now initialise the data
f515 : a001             [ 2] 	ldy #DFVVT_LO
f517 : b1a1             [ 5] 	lda (df_tmpptra),y
f519 : 8586             [ 3] 	sta df_currlin
f51b : c8               [ 2] 	iny
f51c : b1a1             [ 5] 	lda (df_tmpptra),y
f51e : 8587             [ 3] 	sta df_currlin+1
AS65 Assembler for R6502 [1.42].                                     Page  253
-------------------------------- bank\bank0.s --------------------------------

f520 : c8               [ 2] 	iny
f521 : b1a1             [ 5] 	lda (df_tmpptra),y
f523 : 8588             [ 3] 	sta df_exeoff
f525 : 8580             [ 3] 	sta df_curstidx
f527 : a000             [ 2] 	ldy #0		; hmm XXXXX might need to be tay to get 
f529 : b186             [ 5] 	lda (df_currlin),y
f52b : 857f             [ 3] 	sta df_nxtstidx
                             	; now execute statements
f52d : 207ce3           [ 6] 	jsr df_rt_exec_stat
                             ;	bcs df_rt_exec_proc_err
                             	; now restore the position
f530 : 68               [ 4] 	pla
f531 : 8593             [ 3] 	sta df_ifnest
f533 : 68               [ 4] 	pla
f534 : 857e             [ 3] 	sta df_eolidx
f536 : 68               [ 4] 	pla
f537 : 8580             [ 3] 	sta df_curstidx
f539 : 68               [ 4] 	pla
f53a : 857f             [ 3] 	sta df_nxtstidx
f53c : 68               [ 4] 	pla
f53d : 8588             [ 3] 	sta df_exeoff
f53f : 68               [ 4] 	pla
f540 : 8587             [ 3] 	sta df_currlin+1
f542 : 68               [ 4] 	pla
f543 : 8586             [ 3] 	sta df_currlin
                             	; should be all restored, so return
f545 : 60               [ 6] 	rts
                             
                             
f546 :                       df_rt_def
                             	; line offset pointing at DFTK_PROC
                             	; skip over PROC address and open bracket
f546 : a688             [ 3] 	ldx df_exeoff
f548 : e8               [ 2] 	inx
f549 : e8               [ 2] 	inx
f54a : e8               [ 2] 	inx
f54b : 8688             [ 3] 	stx df_exeoff
                             	; parms on stack in reverse order to parm list
                             	; so get each parm and type and save to scratch
f54d : a201             [ 2] 	ldx #1									; index in to scratch
f54f : 868c             [ 3] 	stx df_procargs							; Proc args is the #args-1
f551 : a488             [ 3] 	ldy df_exeoff
f553 :                       df_rt_def_find_var
f553 : c8               [ 2] 	iny
f554 : b186             [ 5] 	lda (df_currlin),y
                             	; check if end of parm list
f556 : c929             [ 2] 	cmp #')'
f558 : f021             [ 3] 	beq df_rt_def_parm_done
                             	; else check if found a variable escape token (<
f55a : c911             [ 2] 	cmp #DFTK_VAR
f55c : f007             [ 3] 	beq df_rt_def_got_var
                             	; else check if non-local specifier
f55e : c926             [ 2] 	cmp #DFTK_VARPARM						; This is a regular ASCII
f560 : d0f1             [ 3] 	bne df_rt_def_find_var
f562 :                       df_rt_def_got_varparm
                             	; set high bit
f562 : 0980             [ 2] 	ora #0x80
                             	; advance over non-local specifier
f564 : c8               [ 2] 	iny
f565 :                       df_rt_def_got_var
f565 : 4980             [ 2] 	eor #0x80			; If was set by '&' qualifier then w
f567 : 9d1306           [ 5] 	sta scratch,x		; Save parm type (by value or ref
AS65 Assembler for R6502 [1.42].                                     Page  254
-------------------------------- bank\bank0.s --------------------------------

                             	; get address and save in scratch
f56a : c8               [ 2] 	iny
f56b : b186             [ 5] 	lda (df_currlin),y
f56d : 9d3306           [ 5] 	sta scratch+32,x	; Hope 32 params is enough! :-)
f570 : c8               [ 2] 	iny
f571 : b186             [ 5] 	lda (df_currlin),y
f573 : 9d5306           [ 5] 	sta scratch+64,x
f576 : e8               [ 2] 	inx
f577 : e68c             [ 5] 	inc df_procargs
f579 : d0d8             [ 3] 	bne df_rt_def_find_var  ; always - relies not ze
f57b :                       df_rt_def_parm_done
                             	; save index that we got to
f57b : 8488             [ 3] 	sty df_exeoff
                             	; save def param list position in temp
f57d : 868b             [ 3] 	stx df_procmode
                             	; all var indices on the operator stack
                             	; now load up variables with parameters
                             	; initially assume no locals
f57f : a900             [ 2] 	lda #0
f581 : 858d             [ 3] 	sta df_procloc
f583 :                       df_rt_def_load_var
f583 : c68c             [ 5] 	dec df_procargs
f585 : f038             [ 3] 	beq df_rt_def_load_var_done
                             	; get var address
f587 : c68b             [ 5] 	dec df_procmode
f589 : a68b             [ 3] 	ldx df_procmode
f58b : bd3306           [ 4] 	lda scratch+32,x
f58e : 85a1             [ 3] 	sta df_tmpptra
f590 : bd5306           [ 4] 	lda scratch+64,x
f593 : 85a2             [ 3] 	sta df_tmpptra+1
                             	
f595 : bd1306           [ 4] 	lda scratch,x
                             	; if MSB is clear then this is not a local varia
                             	; so just go an initialise with stacking
f598 : 1009             [ 3] 	bpl df_rt_def_initialise_parm
                             	; else call the local handling code to 
                             	; push the var address on to the runtime stack
f59a : a6a1             [ 3] 	ldx df_tmpptra
f59c : a5a2             [ 3] 	lda df_tmpptra+1
f59e : 20f3f5           [ 6] 	jsr df_rt_proc_local
                             	; increment number of locals
f5a1 : e68d             [ 5] 	inc df_procloc
f5a3 :                       df_rt_def_initialise_parm
                             	; load type
f5a3 : a000             [ 2] 	ldy #DFVVT_TYPE
f5a5 : b1a1             [ 5] 	lda (df_tmpptra),y
                             	; if array or string type then pop pointer from 
f5a7 : 2984             [ 2] 	and #DFVVT_STR|DFVVT_ARRY
f5a9 : f006             [ 3] 	beq df_rt_def_load_var_int
f5ab : 2088f6           [ 6] 	jsr df_ost_popPtr
f5ae : 4cb4f5           [ 3] 	jmp df_rt_def_load_var_int_skip
f5b1 :                       df_rt_def_load_var_int
                             	; must be int pop it from operator stack
f5b1 : 2080f6           [ 6] 	jsr df_ost_popInt
f5b4 :                       df_rt_def_load_var_int_skip
                             	; update the variable
f5b4 : a002             [ 2] 	ldy #DFVVT_HI
f5b6 : 91a1             [ 5] 	sta (df_tmpptra),y
f5b8 : 88               [ 2] 	dey
f5b9 : 8a               [ 2] 	txa
f5ba : 91a1             [ 5] 	sta (df_tmpptra),y
                             	
AS65 Assembler for R6502 [1.42].                                     Page  255
-------------------------------- bank\bank0.s --------------------------------

f5bc : 4c83f5           [ 3] 	jmp df_rt_def_load_var
f5bf :                       df_rt_def_load_var_done
                             	; save the number of local parameters found so t
                             	; be unloaded when the proc ends
f5bf : a58d             [ 3] 	lda df_procloc
f5c1 : 2007f6           [ 6] 	jsr df_rst_pushByte
                             	; continue with next statement
f5c4 : 18               [ 2] 	clc
f5c5 : 60               [ 6] 	rts
                             
                             	
                             ; return a value
f5c6 :                       df_rt_return
                             	; evaluate the return and put on the parameter s
                             	; then process this like an end of procedure
f5c6 : 2067e0           [ 6] 	jsr df_rt_neval
                             ; end def for a proc
f5c9 :                       df_rt_enddef
                             	; unload any locals
                             ;	jsr df_rt_proc_unlocal
                             	; nothing to do - main loop will terminate
                             ;	clc
                             ;	rts
                             ; enddef falls through to the unlocal code	
                             	
                             ; unload any local variables from runtime stack
                             ;df_rt_proc_unlocal
f5c9 : 2010f6           [ 6] 	jsr df_rst_popByte
f5cc : aa               [ 2] 	tax
f5cd : f020             [ 3] 	beq df_rt_proc_unload_done
f5cf :                       df_rt_proc_unloadvar
f5cf : 8a               [ 2] 	txa
f5d0 : 48               [ 3] 	pha
                             	; var value is popped first then index
                             	; get a word and put in tmpb
f5d1 : 202df6           [ 6] 	jsr df_rst_popWord
f5d4 : 86a3             [ 3] 	stx df_tmpptrb
f5d6 : 85a4             [ 3] 	sta df_tmpptrb+1
                             	; get the var address
f5d8 : 202df6           [ 6] 	jsr df_rst_popWord
f5db : 86a1             [ 3] 	stx df_tmpptra
f5dd : 85a2             [ 3] 	sta df_tmpptra+1
                             	; store lo byte first
f5df : a001             [ 2] 	ldy #DFVVT_LO
f5e1 : a5a3             [ 3] 	lda df_tmpptrb
f5e3 : 91a1             [ 5] 	sta (df_tmpptra),y
                             	; then hi
f5e5 : c8               [ 2] 	iny
f5e6 : a5a4             [ 3] 	lda df_tmpptrb+1
f5e8 : 91a1             [ 5] 	sta (df_tmpptra),y
                             	; restore counter
f5ea : 68               [ 4] 	pla
f5eb : aa               [ 2] 	tax
f5ec : ca               [ 2] 	dex
f5ed : d0e0             [ 3] 	bne df_rt_proc_unloadvar
f5ef :                       df_rt_proc_unload_done
f5ef : 68               [ 4] 	pla				; Pull old return address from stack
f5f0 : 68               [ 4] 	pla
f5f1 : 18               [ 2] 	clc
f5f2 : 60               [ 6] 	rts
                             	
                             ; push a local variable to the runtime stack
AS65 Assembler for R6502 [1.42].                                     Page  256
-------------------------------- bank\bank0.s --------------------------------

                             ; X,A = var slot
f5f3 :                       df_rt_proc_local
                             	; save address
f5f3 : 86a1             [ 3] 	stx df_tmpptra
f5f5 : 85a2             [ 3] 	sta df_tmpptra+1
                             	; push var slot on rt stack
f5f7 : 201ff6           [ 6] 	jsr df_rst_pushWord
f5fa :                       df_rt_proc_local_load	
                             	; load x,a with var value lo,hi
f5fa : a001             [ 2] 	ldy #DFVVT_LO
f5fc : b1a1             [ 5] 	lda (df_tmpptra),y
f5fe : aa               [ 2] 	tax
f5ff : c8               [ 2] 	iny
f600 : b1a1             [ 5] 	lda (df_tmpptra),y
                             	; push word on to rt stack
f602 : 201ff6           [ 6] 	jsr df_rst_pushWord
f605 : 18               [ 2] 	clc
f606 : 60               [ 6] 	rts
                             		
f607 :                       mod_sz_proc_e
                             
                             
f607 :                       mod_sz_runtime_e
                             
                             
                             
                             	include "dflat/stack.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  STACK.S
                             ;*  This module implements the dflat software sta
                             ;*  needs a few stacks:
                             ;*  - 6502 stack for expression parsing and reent
                             ;*  - dflat runtime stack for things like for/nex
                             ;*  - dflat parameter stack for passing parameter
                             ;*  The two software stacks are implemented in th
                             ;*  with the operator stack growing up from 0 and
                             ;*  runtime stack growing down from 255.  Hopeful
                             ;*  don't meet as there are no checks for this at
                             ;*  purely because I want speed over friendliness
                             ;*  I may come to regret this!
                             ;*  I have also added the only runtime memory all
                             ;*  needed by dflat here.  Humourously I have cal
                             ;*  which is taken from the C language, but it's 
                             ;*  grab some memory after end the of dflat progr
                             ;*  arrays - which of course cannot have storage 
                             ;*  tokenisation time (e.g. because I dimension a
                             ;*  a size from a variable).
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code  
                             
                             
                             ;****************************************
AS65 Assembler for R6502 [1.42].                                     Page  257
-------------------------------- bank\bank0.s --------------------------------

                             ;* Push a byte on to runtime stack
                             ;* A = byte
                             ;****************************************
f607 :                       df_rst_pushByte
f607 : a476             [ 3] 	ldy df_rtstop
f609 : 990005           [ 5] 	sta df_rtstck,y
f60c : 88               [ 2] 	dey
f60d : 8476             [ 3] 	sty df_rtstop
f60f : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Pop a byte off runtime stack
                             ;* A = byte
                             ;****************************************
f610 :                       df_rst_popByte
f610 : a476             [ 3] 	ldy df_rtstop
f612 : c8               [ 2] 	iny
f613 : b90005           [ 4] 	lda df_rtstck,y
f616 : 8476             [ 3] 	sty df_rtstop
f618 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Peek a byte off runtime stack
                             ;* A = byte
                             ;****************************************
f619 :                       df_rst_peekByte
f619 : a476             [ 3] 	ldy df_rtstop
                             	; Look at what is below top of stack
                             	; below means the next address up as
                             	; this stack grows downwards like 6502
f61b : b90105           [ 4] 	lda df_rtstck+1,y
f61e : 60               [ 6] 	rts
                             	
                             ;****************************************
                             ;* Push a word on to runtime stack
                             ;* X,A = word lo,hi
                             ;****************************************
f61f :                       df_rst_pushWord
f61f : a476             [ 3] 	ldy df_rtstop
f621 : 990005           [ 5] 	sta df_rtstck,y
f624 : 88               [ 2] 	dey
f625 : 8a               [ 2] 	txa
f626 : 990005           [ 5] 	sta df_rtstck,y
f629 : 88               [ 2] 	dey
f62a : 8476             [ 3] 	sty df_rtstop
f62c : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Pop a word off runtime stack
                             ;* X,A = word lo,hi
                             ;****************************************
f62d :                       df_rst_popWord
f62d : a476             [ 3] 	ldy df_rtstop
f62f : c8               [ 2] 	iny
f630 : be0005           [ 4] 	ldx df_rtstck,y
f633 : c8               [ 2] 	iny
f634 : b90005           [ 4] 	lda df_rtstck,y
f637 : 8476             [ 3] 	sty df_rtstop
f639 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Push a parameter on to parm stack
AS65 Assembler for R6502 [1.42].                                     Page  258
-------------------------------- bank\bank0.s --------------------------------

                             ;* X,A - int
                             ;* Y - type
                             ;****************************************
f63a :                       df_ost_pushParmX
f63a : 8438             [ 3] 	sty tmp_d		; Save Type
f63c : a477             [ 3] 	ldy df_parmtop	; Get stack index
                             	; push high byte first (A)
f63e : 990005           [ 5] 	sta df_rtstck,y
f641 : c8               [ 2] 	iny
                             	; push low byte next (X)
f642 : 8a               [ 2] 	txa
f643 : 990005           [ 5] 	sta df_rtstck,y
f646 : c8               [ 2] 	iny
f647 : a538             [ 3] 	lda tmp_d		; get Type
f649 : 990005           [ 5] 	sta df_rtstck,y
f64c : c8               [ 2] 	iny
                             	; save new top of stack
f64d : 8477             [ 3] 	sty df_parmtop
f64f : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Push an int on to parm stack
                             ;* X,A - int
                             ;****************************************
f650 :                       df_ost_pushInt
f650 : a001             [ 2] 	ldy #DFST_INT
f652 : d0e6             [ 3] 	bne df_ost_pushParmX		; ALWAYS!
                             
                             ;****************************************
                             ;* Push A on to parm stack
                             ;* X,A - int
                             ;****************************************
f654 :                       df_ost_pushIntA
f654 : a001             [ 2] 	ldy #DFST_INT
f656 : aa               [ 2] 	tax
f657 : a900             [ 2] 	lda #0
f659 : f0df             [ 3] 	beq df_ost_pushParmX		; ALWAYS!
                             
                             ;****************************************
                             ;* Push a string pointer on to parm stack
                             ;* X,A - int
                             ;****************************************
f65b :                       df_ost_pushStr
f65b : a080             [ 2] 	ldy #DFST_STR
f65d : d0db             [ 3] 	bne df_ost_pushParmX		; ALWAYS!
                             
                             ;****************************************
                             ;* Push a general pointer on to parm stack
                             ;* X,A - int
                             ;****************************************
f65f :                       df_ost_pushPtr
f65f : a0ff             [ 2] 	ldy #0xff
f661 : d0d7             [ 3] 	bne df_ost_pushParmX		; ALWAYS!
                             	
                             ;****************************************
                             ;* Pop parameter from the stack
                             ;* X,A - int
                             ;* Y - type expected
                             ;****************************************
f663 :                       df_ost_popParmX
f663 : 98               [ 2] 	tya
f664 : a477             [ 3] 	ldy df_parmtop
AS65 Assembler for R6502 [1.42].                                     Page  259
-------------------------------- bank\bank0.s --------------------------------

                             	; pull type first
f666 : 88               [ 2] 	dey
f667 : 390005           [ 4] 	and df_rtstck,y
f66a : f00c             [ 3] 	beq df_st_typemismatcherr
                             	; pull low byte first
f66c : 88               [ 2] 	dey
f66d : be0005           [ 4] 	ldx df_rtstck,y
                             	; pull high byte next
f670 : 88               [ 2] 	dey
f671 : b90005           [ 4] 	lda df_rtstck,y
                             	; save new top of stack
f674 : 8477             [ 3] 	sty df_parmtop
f676 : 18               [ 2] 	clc
f677 : 60               [ 6] 	rts
f678 :                       df_st_typemismatcherr
                             	SWBRK DFERR_TYPEMISM
                             
                             
                             ;****************************************
                             ;* Return type on top of stack
                             ;* A - type
                             ;****************************************
f67a :                       df_ost_peekType
f67a : a477             [ 3] 	ldy df_parmtop
f67c : b9ff04           [ 4] 	lda df_rtstck-1,y
f67f : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Pop an int off parm stack
                             ;* X,A - int
                             ;****************************************
f680 :                       df_ost_popInt
f680 : a001             [ 2] 	ldy #DFST_INT
f682 : d0df             [ 3] 	bne df_ost_popParmX			; ALWAYS!
                             
                             ;****************************************
                             ;* Pop a string pointer off parm stack
                             ;* X,A - int
                             ;****************************************
f684 :                       df_ost_popStr
f684 : a080             [ 2] 	ldy #DFST_STR
f686 : d0db             [ 3] 	bne df_ost_popParmX			; ALWAYS!
                             	
                             ;****************************************
                             ;* Pop a general pointer off parm stack
                             ;* X,A - int
                             ;****************************************
f688 :                       df_ost_popPtr
f688 : a0ff             [ 2] 	ldy #0xff
f68a : d0d7             [ 3] 	bne df_ost_popParmX			; ALWAYS!
                             	
                             	
                             ;****************************************
                             ;* Allocate space on the heap
                             ;* X, A = Number of bytes to allocate
                             ;* X, A return address of allocated space
                             ;****************************************
f68c :                       df_st_malloc
                             	; save A in Y
f68c : a8               [ 2] 	tay
                             	; save old starend
f68d : a575             [ 3] 	lda df_starend+1
AS65 Assembler for R6502 [1.42].                                     Page  260
-------------------------------- bank\bank0.s --------------------------------

f68f : 48               [ 3] 	pha
f690 : a574             [ 3] 	lda df_starend
f692 : 48               [ 3] 	pha
                             	; restore A from Y
f693 : 98               [ 2] 	tya
                             	; add X,A to starend
f694 : 48               [ 3] 	pha
f695 : 8a               [ 2] 	txa
f696 : 18               [ 2] 	clc
f697 : 6574             [ 3] 	adc df_starend
f699 : 8574             [ 3] 	sta df_starend
f69b : 68               [ 4] 	pla
f69c : 6575             [ 3] 	adc df_starend+1
f69e : 8575             [ 3] 	sta df_starend+1
                             	; return old starend as start of space
f6a0 : 68               [ 4] 	pla
f6a1 : aa               [ 2] 	tax
f6a2 : 68               [ 4] 	pla
f6a3 : 60               [ 6] 	rts
                             	
                             
                             ;****************************************
                             ;* df_init
                             ;* Initialise dflat language settings
                             ;****************************************
f6a4 :                       df_init
                             	; Initialise top of memory to default
                             	; This can be overridden by himem command
f6a4 : a900             [ 2] 	lda #lo(DF_MEMTOP)
f6a6 : 8d1106           [ 4] 	sta df_memtop
f6a9 : a998             [ 2] 	lda #hi(DF_MEMTOP)
f6ab : 8d1206           [ 4] 	sta df_memtop+1
                             
                             	; Init program space
f6ae : 4cb1f6           [ 3] 	jmp df_clear
                             
                             	; Initialise assembler
                             ;	jsr asm_init
                             
                             ;	rts
                             
                             
                             ;****************************************
                             ;* df_clear
                             ;* Initialise program space
                             ;****************************************
f6b1 :                       df_clear
                             	; Start of program space
f6b1 : a913             [ 2] 	lda #lo(DF_PROGSTART)
f6b3 : 8565             [ 3] 	sta df_prgstrt
f6b5 : 8567             [ 3] 	sta df_prgend
f6b7 : a907             [ 2] 	lda #hi(DF_PROGSTART)
f6b9 : 8566             [ 3] 	sta df_prgstrt+1
f6bb : 8568             [ 3] 	sta df_prgend+1
                             	; Terminal value in prog space
f6bd : a900             [ 2] 	lda #0
f6bf : a8               [ 2] 	tay
f6c0 : 9165             [ 5] 	sta (df_prgstrt),y
                             	; No variables - zero the count
f6c2 : 8571             [ 3] 	sta df_varcnt
                             
                             	; Variable value table
AS65 Assembler for R6502 [1.42].                                     Page  261
-------------------------------- bank\bank0.s --------------------------------

                             	; Grows down from mem top
f6c4 : ad1106           [ 4] 	lda df_memtop
f6c7 : 856d             [ 3] 	sta df_vvtstrt
f6c9 : 856f             [ 3] 	sta df_vvtend
f6cb : ad1206           [ 4] 	lda df_memtop+1
f6ce : 856e             [ 3] 	sta df_vvtstrt+1
f6d0 : 8570             [ 3] 	sta df_vvtend+1
                             
                             	; Variable name table
                             	; Grows down from mem top
f6d2 : a56d             [ 3] 	lda df_vvtstrt
f6d4 : 8569             [ 3] 	sta df_vntstrt
f6d6 : 856b             [ 3] 	sta df_vntend
f6d8 : a56e             [ 3] 	lda df_vvtstrt+1
f6da : 856a             [ 3] 	sta df_vntstrt+1
f6dc : 856c             [ 3] 	sta df_vntend+1
                             
                             	; String accumulator
f6de : a913             [ 2] 	lda #lo(scratch)
f6e0 : 857a             [ 3] 	sta df_sevalptr
f6e2 : a906             [ 2] 	lda #hi(scratch)
f6e4 : 857b             [ 3] 	sta df_sevalptr+1
                             
f6e6 : 60               [ 6] 	rts
                             
f6e7 :                       mod_sz_dflat_e
                             
                             	include "dflat/error.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  ERROR.S
                             ;*  Error handling module.
                             ;*  Whan an error is thrown using BRK, this modul
                             ;*  displaying the error plus any associated line
                             ;*  if it was running a program.  It then resets 
                             ;*  settings and takes the system back to program
                             ;*  mode.  The message uses the general IO handle
                             ;*  output must be set to the right place else fo
                             ;*	the error message will be written to tape!
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code
                             	include "dflat/error.i"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  ERROR.I
                             ;*  Error definitions file.
                             ;*  The macro to throw an error is elswhere, but 
AS65 Assembler for R6502 [1.42].                                     Page  262
-------------------------------- bank\bank0.s --------------------------------

                             ;*  It issues a 6502 BRK commmand with the next b
                             ;*  the error code.  The BRK handler then picks u
                             ;*  code and shows the appropriate message plus a
                             ;*  number if a program was running.
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code  
                             
                             ; Error message numbers
0000 =                       DFERR_OK		=	0
0001 =                       DFERR_SYNTAX	=	1
0002 =                       DFERR_TYPEMISM	=	2
0003 =                       DFERR_DIM		=	3
0004 =                       DFERR_UNTIL		=	4
0005 =                       DFERR_NOPROC	=	5
0006 =                       DFERR_PROCPARM	=	6
0007 =                       DFERR_IMMEDIATE	=	7
0008 =                       DFERR_UNCLOSEDIF=	8
0009 =                       DFERR_NOIF		=	9
000a =                       DFERR_NEXTFOR	=	10
000b =                       DFERR_FNAME		=	11
000c =                       DFERR_STRLONG	=	12
000d =                       DFERR_BREAK		=	13
000e =                       DFERR_NODATA	=	14
000f =                       DFERR_WEND		=	15
0010 =                       DFERR_NOLINE	=	16
0011 =                       DFERR_RETURN	=	17
0012 =                       DFERR_ABORT		=	18
0013 =                       DFERR_QUANTITY	=	19
0014 =                       DFERR_NOORG		=	20
                             
                             
                             
                             
                             
                             ; Error message table, each msg null terminated
f6e7 :                       df_tk_errortab
f6e7 : 4f6b00                	db	"Ok", 0
f6ea : 53796e74617800        	db	"Syntax", 0
f6f1 : 5479706500            	db	"Type", 0
f6f6 : 52652d64696d00        	db	"Re-dim", 0
f6fd : 4e6f2072657065..      	db	"No repeat", 0
f707 : 4e6f206465666e00      	db	"No defn", 0
f70f : 5061726d00            	db	"Parm", 0
f714 : 456e64656400          	db	"Ended", 0
f71a : 4e6f20656e6469..      	db	"No endif", 0
f723 : 4e6f20696600          	db	"No if", 0
f729 : 4e6f20666f7200        	db	"No for", 0
f730 : 4e6f7420666f75..      	db	"Not found", 0
f73a : 546f6f206c6f6e..      	db	"Too long", 0
f743 : 427265616b00          	db	"Break", 0
f749 : 4e6f206461746100      	db	"No data", 0
f751 : 4e6f207768696c..      	db	"No while", 0
f75a : 4e6f206c696e6500      	db	"No line", 0
f762 : 4e6f2072657475..      	db	"No return ", 0
f76d : 41626f7274656400      	db	"Aborted", 0
f775 : 426f756e647300        	db	"Bounds", 0
f77c : 4e6f206f726700        	db	"No org", 0
f783 : 00                    	db	0
                             
AS65 Assembler for R6502 [1.42].                                     Page  263
-------------------------------- bank\bank0.s --------------------------------

f784 :                       df_tk_error_inline
f784 : 20696e206c696e..      	db	" in line ", 0
f78e :                       df_tk_error_atpos
f78e : 20706f732000          	db	" pos ", 0
f794 :                       df_tk_error_error
f794 : 206572726f7200        	db	" error", 0
                             
                             ;****************************************
                             ;* df_trap_error
                             ;* Show an error message
                             ;* errno is error number
                             ;* currlin = Line number
                             ;* exeoff = offset
                             ;* at the end jump to program editor
                             ;****************************************
f79b :                       df_trap_error
                             	; set IO back to normal
f79b : 200ec5           [ 6] 	jsr init_via0
f79e : 2011c4           [ 6] 	jsr io_set_default
f7a1 : 58               [ 2] 	cli
                             
f7a2 : a9e7             [ 2] 	lda #lo(df_tk_errortab)
f7a4 : 85a1             [ 3] 	sta df_tmpptra
f7a6 : a9f6             [ 2] 	lda #hi(df_tk_errortab)
f7a8 : 85a2             [ 3] 	sta df_tmpptra+1
f7aa : a65d             [ 3] 	ldx errno				; 0 or >=128 goes to monitor
f7ac : f002             [ 3] 	beq df_trap_go_monitor
f7ae : 1003             [ 3] 	bpl df_trap_normal
f7b0 :                       df_trap_go_monitor
f7b0 : 4c29f8           [ 3] 	jmp df_trap_monitor
f7b3 :                       df_trap_normal
f7b3 : a000             [ 2] 	ldy #0
f7b5 :                       df_show_err_find
                             	; If on a zero, then error table exhausted
                             	; so drop in to the monitor
f7b5 : b1a1             [ 5] 	lda (df_tmpptra),y
f7b7 : f070             [ 4] 	beq df_trap_monitor
                             	; Skip over this error text including zero termi
f7b9 :                       df_show_err_skip
                             	_incZPWord df_tmpptra
                             
f7bf : b1a1             [ 5] 	lda (df_tmpptra),y
f7c1 : d0f6             [ 3] 	bne df_show_err_skip
                             	_incZPWord df_tmpptra
                             
f7c9 : ca               [ 2] 	dex
f7ca : d0e9             [ 3] 	bne df_show_err_find
                             	; Error message found
f7cc : a6a1             [ 3] 	ldx df_tmpptra
f7ce : a5a2             [ 3] 	lda df_tmpptra+1
f7d0 : 208bc4           [ 6] 	jsr io_print_line
f7d3 : a294             [ 2] 	ldx #lo(df_tk_error_error)
f7d5 : a9f7             [ 2] 	lda #hi(df_tk_error_error)
f7d7 : 208bc4           [ 6] 	jsr io_print_line
                             	; if line number <> 0 then print it
f7da : a001             [ 2] 	ldy #DFTK_LINNUM
f7dc : b186             [ 5] 	lda (df_currlin),y
f7de : aa               [ 2] 	tax
f7df : c8               [ 2] 	iny
f7e0 : b186             [ 5] 	lda (df_currlin),y
f7e2 : d004             [ 3] 	bne df_show_err_linnum
f7e4 : e000             [ 2] 	cpx #0x00
AS65 Assembler for R6502 [1.42].                                     Page  264
-------------------------------- bank\bank0.s --------------------------------

f7e6 : f019             [ 4] 	beq df_show_err_fin
f7e8 :                       df_show_err_linnum
                             	_println df_tk_error_inline
                             
f7fd : 18               [ 2] 	clc
f7fe : 20f8c3           [ 6] 	jsr print_a_to_d
f801 :                       df_show_err_fin
f801 : a488             [ 3] 	ldy df_exeoff
f803 : f01d             [ 3] 	beq df_show_err_done
                             	_println df_tk_error_atpos
                             
f81a : 98               [ 2] 	tya
f81b : aa               [ 2] 	tax
f81c : a900             [ 2] 	lda #0
f81e : 18               [ 2] 	clc
f81f : 20f8c3           [ 6] 	jsr print_a_to_d
f822 :                       df_show_err_done
f822 : 207bc1           [ 6] 	jsr utilPrintCRLF
f825 : 18               [ 2] 	clc
                             	; back to editor
f826 : 4c4adf           [ 3] 	jmp df_pg_dflat
                             
                             
                             ; For unknown errors, jump to monitor
f829 :                       df_trap_monitor
                             	; Print PC
                             	_println_low df_msg_pc
                             
f830 : a563             [ 3] 	lda df_brkpc+1
f832 : 2083c1           [ 6] 	jsr utilPrintA
f835 : a562             [ 3] 	lda df_brkpc
f837 : 2083c1           [ 6] 	jsr utilPrintA
f83a : 2073c1           [ 6] 	jsr utilPrintSPC
                             
                             	; Print A
                             	_println_low df_msg_acc
                             
f844 : a53d             [ 3] 	lda num_a
f846 : 2083c1           [ 6] 	jsr utilPrintA
f849 : 2073c1           [ 6] 	jsr utilPrintSPC
                             
                             	; Print X
                             	_println_low df_msg_xreg
                             
f853 : a53e             [ 3] 	lda num_a+1
f855 : 2083c1           [ 6] 	jsr utilPrintA
f858 : 2073c1           [ 6] 	jsr utilPrintSPC
                             
                             	; Print Y
                             	_println_low df_msg_yreg
                             
f862 : a53f             [ 3] 	lda num_a+2
f864 : 2083c1           [ 6] 	jsr utilPrintA
f867 : 207bc1           [ 6] 	jsr utilPrintCRLF
                             
f86a : 2092e7           [ 6] 	jsr df_rt_monitor
                             	; back to editor
f86d : 4c4adf           [ 3] 	jmp df_pg_dflat
                             
f870 :                       df_msg_pc
f870 : 50433a00              	db "PC:\x0"
f874 :                       df_msg_acc
AS65 Assembler for R6502 [1.42].                                     Page  265
-------------------------------- bank\bank0.s --------------------------------

f874 : 413a00                	db "A:\x0"
f877 :                       df_msg_xreg
f877 : 583a00                	db "X:\x0"
f87a :                       df_msg_yreg
f87a : 593a00                	db "Y:\x0"
                             
                             	include	"dflat/asm.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  ASM.S
                             ;*  This is the main controller code file for the
                             ;*  This file includes all the required source fi
                             ;*	in addition to dflat.s
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code
                             
f87d :                       mod_sz_asm_s
                             
                             	;	dflat.s is already included, so just the addit
                             	include "dflat/asm.i"
                             ;* Addressing modes - 15 in total, 16 with direct
                             ;*  0   Nothing
                             ;*	1 	Absolute			XXX <word>
                             ;*	2 	Absolute,X			XXX <word>,x
                             ;*	3 	Absolute,Y			XXX <word>,y
                             ;*	4	Zeropage			XXX	<byte>
                             ;*	5	Zeropage,X			XXX	<byte>,x
                             ;*	6	Zeropage,Y			XXX	<byte>,y
                             ;*	7	Indirect			XXX	(<byte>)
                             ;*	8	Indirect,X			XXX	(<byte>,x)
                             ;*	9	Indirect,Y			XXX	(<byte>),y
                             ;*	A	Absolute indirect	XXX	(<word>)
                             ;*	B	Absolute indirect,x	XXX	(<word>,x)
                             ;*	C	Immediate			XXX #<byte>
                             ;*	D	Accumulator			XXX (same as implied)
                             ;*	E	Implied				XXX
                             ;*	F	Relative			XXX	<byte>
                             ;*	10	Assembler directive	XXX .......
                             
0000 =                       AM_NONE		= 0
0001 =                       AM_ABS	 	= 1
0002 =                       AM_ABSX		= 2
0003 =                       AM_ABSY		= 3
0004 =                       AM_ZP		= 4
0005 =                       AM_ZPX		= 5
0006 =                       AM_ZPY		= 6
0007 =                       AM_ZPIND	= 7
0008 =                       AM_ZPINDX	= 8
0009 =                       AM_ZPINDY	= 9
000a =                       AM_ABSIND	= 10
000b =                       AM_ABSINDX	= 11
000c =                       AM_IMM		= 12
000d =                       AM_ACC		= 13
AS65 Assembler for R6502 [1.42].                                     Page  266
-------------------------------- bank\bank0.s --------------------------------

000d =                       AM_IMP		= AM_ACC
000f =                       AM_REL		= 15
0010 =                       AM_DIR		= 16
                             
                             
                             
                             	include "dflat/tkasm.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  ASM.S
                             ;*	Module that implements tokenisation of the ass
                             ;* 	The assembler is an extension to dflat, almos
                             ;*	almost a language within a language, as it has
                             ;*	own symbol tables to allow adding new keywords
                             ;*	running out of space in the main symtol table 
                             ;*	for normal 6502 asembler syntax which is at od
                             ;*	regular dflat.
                             ;*	Hence, this module has to do its own additiona
                             ;*	to tokenise the assembly.
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code  
                             
f87d :                       mod_sz_tkasm_s
                             
                             	; if didn't find regular keywords then try assen
f87d :                       df_tk_asm_parse_command
                             	; skip the white space after the dot
f87d : 20f1d6           [ 6] 	jsr df_tk_skip_ws
                             	; find the assembler symbol
f880 : 20abf8           [ 6] 	jsr df_tk_asm_matchtok
                             	; if not found then must be a label assignment
f883 : b021             [ 3] 	bcs df_tk_asm_parse_command_symbol
                             	; Get the assembler symbol and put the token
f885 : a583             [ 3] 	lda df_symoff
                             	; Set the MSB
f887 : 0980             [ 2] 	ora #0x80
f889 : 20a0d6           [ 6] 	jsr df_tk_put_tok
                             	; check the first addressing mode code
                             	; remember to jump over the offset byte
f88c : a001             [ 2] 	ldy #1
f88e : b181             [ 5] 	lda (df_symtab),y
                             	; Directive?
f890 : c910             [ 2] 	cmp #AM_DIR
f892 : d00c             [ 3] 	bne df_tk_asm_mnemonic
                             	; if directive then process it
f894 : a583             [ 3] 	lda df_symoff
f896 : 2002f9           [ 6] 	jsr df_tk_asm_exec_parser
f899 : b004             [ 3] 	bcs df_tk_asm_parse_command_err
                             	; [1] ignore white space but keep it
f89b : 20f1d6           [ 6] 	jsr df_tk_skip_ws
                             	; No error in parsing this command
f89e : 18               [ 2] 	clc
f89f :                       df_tk_asm_parse_command_err
AS65 Assembler for R6502 [1.42].                                     Page  267
-------------------------------- bank\bank0.s --------------------------------

f89f : 60               [ 6] 	rts
f8a0 :                       df_tk_asm_mnemonic
                             	; for all nmemonics, work out the addressing mod
f8a0 : 2011f9           [ 6] 	jsr df_tk_asm_addr_mode
f8a3 : b0fa             [ 3] 	bcs df_tk_asm_parse_command_err
f8a5 : 60               [ 6] 	rts
f8a6 :                       df_tk_asm_parse_command_symbol
                             	; No mask
f8a6 : a900             [ 2] 	lda #0
f8a8 : 4ccbd7           [ 3] 	jmp df_tk_var
                             
                             
                             ;****************************************
                             ;* df_tk_asm_matchtok
                             ;* Try and find a token match against the table d
                             ;* Input:
                             ;*			Current df_linbuff and df_linoff
                             ;* Return: 	CC = No Error, CS = Error
                             ;*			df_linoff points to next char if CC else unc
                             ;****************************************
f8ab :                       df_tk_asm_matchtok
                             	; Start at token symbols beginning
f8ab : a994             [ 2] 	lda #lo(df_asm_tokensyms)
f8ad : 8581             [ 3] 	sta df_symtab
f8af : a9fc             [ 2] 	lda #hi(df_asm_tokensyms)
f8b1 : 8582             [ 3] 	sta df_symtab+1
f8b3 : a900             [ 2] 	lda #0
f8b5 : 8583             [ 3] 	sta df_symoff
f8b7 : a200             [ 2] 	ldx #0
f8b9 :                       df_tk_asm_checknexttok
                             	; From the line buffer current pointer
                             	; Check for a token match
f8b9 : a47c             [ 3] 	ldy df_linoff
f8bb :                       df_tk_asm_checktokch
                             	; Get symtable char
f8bb : a181             [ 6] 	lda (df_symtab,x)
                             	; if less than ascii ' ' then reached end of
                             	; this symbol and everything matched so found!
f8bd : c920             [ 2] 	cmp #' '
f8bf : 9033             [ 3] 	bcc df_tk_asm_symfound
                             	; Else compare with current line buffer char
f8c1 : d90004           [ 4] 	cmp df_linbuff,y
                             	; If chars not match then this symbol fails
f8c4 : d00a             [ 3] 	bne df_tk_asm_symnomatch
                             	; else more chars to match
                             	; so increment line buffer pointers
                             	_incZPWord df_symtab
                             
f8cc : c8               [ 2] 	iny
f8cd : 4cbbf8           [ 3] 	jmp df_tk_asm_checktokch
f8d0 :                       df_tk_asm_symnomatch
                             	; Increment symbol counter to next symbol
f8d0 : e683             [ 5] 	inc df_symoff
f8d2 :                       df_tk_asm_symnextentry
f8d2 : a181             [ 6] 	lda (df_symtab,x)
                             	; End of symbol is < ' '
f8d4 : c920             [ 2] 	cmp #' '
f8d6 : 9009             [ 3] 	bcc  df_tk_asm_foundsymend
                             	_incZPWord df_symtab
                             
f8de : 4cd2f8           [ 3] 	jmp df_tk_asm_symnextentry
f8e1 :                       df_tk_asm_foundsymend
AS65 Assembler for R6502 [1.42].                                     Page  268
-------------------------------- bank\bank0.s --------------------------------

                             	; Now at the offset to jump over addressing
                             	; mode and opcode values. Add offset to ptr
                             	; remember than C is clear and A has offset
                             	; set C so always jump over the offset
f8e1 : 38               [ 2] 	sec
f8e2 : 6581             [ 3] 	adc df_symtab
f8e4 : 8581             [ 3] 	sta df_symtab
f8e6 : a582             [ 3] 	lda df_symtab+1
f8e8 : 6900             [ 2] 	adc #0
f8ea : 8582             [ 3] 	sta df_symtab+1
                             	; If next char is not zero then
                             	; try and match with line buffer
f8ec : a181             [ 6] 	lda (df_symtab,x)
f8ee : d0c9             [ 3] 	bne df_tk_asm_checknexttok
                             	; else symbol table exhausted
                             	; so no match found
                             	; Zero symbol counter
f8f0 : 8583             [ 3] 	sta df_symoff		; Relies on A=0
                             	; Set C to indicate error (no match)
f8f2 : 38               [ 2] 	sec
f8f3 : 60               [ 6] 	rts
f8f4 :                       df_tk_asm_symfound
                             	; Full match with keyword in symtable but
                             	; check the next buffer char is not alphanum
                             	; as this could be part of a symbol
                             	; Point to next buffer char in any case
                             	; y already points to char after keyword
f8f4 : b90004           [ 4] 	lda df_linbuff,y
                             	; if it is an alphanum then
f8f7 : 20e5d6           [ 6] 	jsr df_tk_isalphanum
                             	; do not count as a match
f8fa : b0d4             [ 3] 	bcs df_tk_asm_symnomatch
                             	; Save line buffer pointer (points to next char)
                             	; Clear C to indicate success (match)
f8fc : 847c             [ 3] 	sty df_linoff
f8fe : a583             [ 3] 	lda df_symoff
                             	; df_symtab points to the offset
f900 :                       df_tk_asm_addr_mode_ok
f900 : 18               [ 2] 	clc
f901 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* df_tk_asm_exec_parser
                             ;* Execute parse routine for this statement
                             ;* Input: a is the token found
                             ;* Return: CC = Parsed ok, CS = Error
                             ;****************************************
f902 :                       df_tk_asm_exec_parser
f902 : 0a               [ 2] 	asl a
f903 : aa               [ 2] 	tax
f904 : bdc0fe           [ 4] 	lda df_tk_asm_tokenjmp,x
f907 : 85a1             [ 3] 	sta df_tmpptra
f909 : bdc1fe           [ 4] 	lda df_tk_asm_tokenjmp+1,x
f90c : 85a2             [ 3] 	sta df_tmpptra+1
f90e : 6ca100           [ 6] 	jmp (df_tmpptra)
                             
                             
                             ;****************************************
                             ;* df_tk_asm_addr_mode
                             ;* Tokenise the addressing mode
                             ;* Input: a is the token found
                             ;* Return: CC = Parsed ok, CS = Error
AS65 Assembler for R6502 [1.42].                                     Page  269
-------------------------------- bank\bank0.s --------------------------------

                             ;****************************************
f911 :                       df_tk_asm_addr_mode
f911 : 20f1d6           [ 6] 	jsr df_tk_skip_ws		;Skip whitespace
f914 : c900             [ 2] 	cmp #0					;End of line?
f916 : f0e8             [ 3] 	beq df_tk_asm_addr_mode_ok
f918 : c93a             [ 2] 	cmp #':'				;End of statement?
f91a : f0e4             [ 3] 	beq df_tk_asm_addr_mode_ok
f91c : a923             [ 2] 	lda #'#'				; Check for immediate
f91e : 2015d7           [ 6] 	jsr df_tk_expect_tok
f921 : b003             [ 3] 	bcs df_tk_asm_addr_mode_1
f923 : 4c46f9           [ 3] 	jmp df_tk_imm		; Process immediate
f926 :                       df_tk_asm_addr_mode_1
f926 : a928             [ 2] 	lda #'('				; One of indirect modes?
f928 : 2015d7           [ 6] 	jsr df_tk_expect_tok
f92b : b003             [ 3] 	bcs df_tk_asm_addr_mode_2
f92d : 4c49f9           [ 3] 	jmp df_tk_indirect
f930 :                       df_tk_asm_addr_mode_2
                             	; here just a regular address
                             	; Just one expression expected
f930 : 2012d9           [ 6] 	jsr df_tk_expression
                             	; Is there a comma after the expression
f933 : a92c             [ 2] 	lda #','
f935 : 2015d7           [ 6] 	jsr df_tk_expect_tok
f938 : b0c6             [ 3] 	bcs df_tk_asm_addr_mode_ok
                             	; must be x or y
f93a : a978             [ 2] 	lda #'x'
f93c : 2015d7           [ 6] 	jsr df_tk_expect_tok
f93f : 90bf             [ 3] 	bcc df_tk_asm_addr_mode_ok
                             	; got to here, must be y
f941 : a979             [ 2] 	lda #'y'
f943 : 4c20d7           [ 3] 	jmp df_tk_expect_tok_err
                             	
                             	
                             ;* Tokenise immediate addressing mode	
f946 :                       df_tk_imm
                             	; Just one expression expected
f946 : 4c12d9           [ 3] 	jmp df_tk_expression
                             	
                             ;* Tokenise indirect
f949 :                       df_tk_indirect
                             	; Just one expression expected
f949 : 2012d9           [ 6] 	jsr df_tk_expression
                             	; Is there a comma after the expression
f94c : a92c             [ 2] 	lda #','
f94e : 2015d7           [ 6] 	jsr df_tk_expect_tok
                             	; if not then might be indirect Y
f951 : b00a             [ 3] 	bcs df_tk_indirect_y
                             	; Else must have be indirect "x)"
f953 : a978             [ 2] 	lda #'x'
f955 : 2020d7           [ 6] 	jsr df_tk_expect_tok_err
f958 : a929             [ 2] 	lda #')'
f95a : 4c20d7           [ 3] 	jmp df_tk_expect_tok_err
                             	
f95d :                       df_tk_indirect_y
                             	; Definitely has a close bracket
f95d : a929             [ 2] 	lda #')'
f95f : 2020d7           [ 6] 	jsr df_tk_expect_tok_err
                             	; Is there a comma after the expression
f962 : a92c             [ 2] 	lda #','
f964 : 2015d7           [ 6] 	jsr df_tk_expect_tok
f967 : b005             [ 3] 	bcs df_tk_indirect_done
                             	; if comma then must be indirect y
AS65 Assembler for R6502 [1.42].                                     Page  270
-------------------------------- bank\bank0.s --------------------------------

f969 : a979             [ 2] 	lda #'y'
f96b : 4c20d7           [ 3] 	jmp df_tk_expect_tok_err
                             
f96e :                       df_tk_indirect_done
f96e : 18               [ 2] 	clc
f96f : 60               [ 6] 	rts
                             	
                             
                             	
                             
                             
                             ;************************************************
                             ;*           TOKENISATION SUBROUTINES
                             ;************************************************
                             
                             
                             ;* HANDLE DIRECTIVES
                             
                             ;* All tokenisation is part of regular toksub rou
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
f970 :                       mod_sz_tkasm_e
                             
                             
                             	include "dflat/rtasm.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  RTASM.S
                             ;*  Module that implements the runtime execution 
                             ;*  assembler.
AS65 Assembler for R6502 [1.42].                                     Page  271
-------------------------------- bank\bank0.s --------------------------------

                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code  
                             
f970 :                       mod_sz_rtasm_s
                             
f970 :                       df_rt_asm_assemble
                             	; check if >=0x80 (directive or mnemonic)
f970 : a488             [ 3] 	ldy df_exeoff
f972 : b186             [ 5] 	lda (df_currlin),y
f974 : 1009             [ 3] 	bpl df_rt_asm_do_label
f976 : 2083f9           [ 6] 	jsr df_rt_asm_command
f979 : 2078fb           [ 6] 	jsr df_rt_asm_printCR
f97c : 4c82f9           [ 3] 	jmp df_rt_asm_assemble_done
f97f :                       df_rt_asm_do_label
f97f : 20a7f9           [ 6] 	jsr df_rt_asm_label
f982 :                       df_rt_asm_assemble_done
                             	; any clean up here
f982 : 60               [ 6] 	rts
                             
                             ; Jump to mnemonic or 
                             ; directive with index in A ignoring MSB
f983 :                       df_rt_asm_command
f983 : 297f             [ 2] 	and #0x7f
f985 : 48               [ 3] 	pha
f986 : aa               [ 2] 	tax
                             	; Point to Xth symtable entry of addr modes and 
f987 : 2046fc           [ 6] 	jsr df_rt_asm_skip_to_sym
                             
                             	; Get first addressing mode (ignoring offset byt
f98a : a001             [ 2] 	ldy #1
f98c : b181             [ 5] 	lda (df_symtab),y
                             	; is it a directive?
f98e : c910             [ 2] 	cmp #AM_DIR
                             	; if directive
f990 : f003             [ 3] 	beq df_rt_asm_dir
                             	; Else must be a normal mnemonic
f992 : 4c6cfa           [ 3] 	jmp df_rt_asm_mnem
                             
                             ; Jump to the appropriate directive
f995 :                       df_rt_asm_dir
                             	; Get the index and *2
                             	; to get jump vector
f995 : 68               [ 4] 	pla
f996 : 0a               [ 2] 	asl a
f997 : aa               [ 2] 	tax
                             	; jump over directive code
f998 : e688             [ 5] 	inc df_exeoff
                             	; jump to directive handler
f99a : bdcafe           [ 4] 	lda df_rt_asm_tokenjmp,x
f99d : 85a1             [ 3] 	sta df_tmpptra
f99f : bdcbfe           [ 4] 	lda df_rt_asm_tokenjmp+1,x
f9a2 : 85a2             [ 3] 	sta df_tmpptra+1
f9a4 : 6ca100           [ 6] 	jmp (df_tmpptra)
                             
                             ; Process label
                             ; Set the label to the PC
f9a7 :                       df_rt_asm_label
                             	; Get the address of the variable in A,X
f9a7 : 2096ec           [ 6] 	jsr df_rt_generate_lvar
AS65 Assembler for R6502 [1.42].                                     Page  272
-------------------------------- bank\bank0.s --------------------------------

f9aa : 869e             [ 3] 	stx df_asmoprnd
f9ac : 859f             [ 3] 	sta df_asmoprnd+1
                             	; Assign to value of PC
f9ae : a000             [ 2] 	ldy #0
f9b0 : a599             [ 3] 	lda df_asmpc
f9b2 : 919e             [ 5] 	sta (df_asmoprnd),y
f9b4 : a59a             [ 3] 	lda df_asmpc+1
f9b6 : c8               [ 2] 	iny
f9b7 : 919e             [ 5] 	sta (df_asmoprnd),y
f9b9 : 60               [ 6] 	rts	
                             
                             ;* Set the code origin
f9ba :                       df_rt_asm_org
                             	; Get the address from expression
f9ba : 2023fc           [ 6] 	jsr df_rt_asm_get_operand
                             	; Put this in to PC
f9bd : a59e             [ 3] 	lda df_asmoprnd
f9bf : 8599             [ 3] 	sta df_asmpc
f9c1 : a59f             [ 3] 	lda df_asmoprnd+1
f9c3 : 859a             [ 3] 	sta df_asmpc+1
f9c5 : a903             [ 2] 	lda #3
f9c7 : 85a0             [ 3] 	sta df_asmlen
f9c9 : 4c3afb           [ 3] 	jmp df_rt_asm_printPC
                             
                             ; Set the assembly option
                             ; Bit 0 set = Print code to console
                             ; But 1 set = Write code to memory
                             ; Be sure to run 2 non-write passes
                             ; before a write pass
                             ; First pass may result in ZP used a lot
                             ; Second pass resolves forward refs to ABS
                             ; Final write pass then stores the code
f9cc :                       df_rt_asm_opt
                             	; Get the value from expression
f9cc : 2023fc           [ 6] 	jsr df_rt_asm_get_operand
                             	; Put this in to OPT
f9cf : a59e             [ 3] 	lda df_asmoprnd
f9d1 : 859b             [ 3] 	sta df_asmopt
f9d3 : 60               [ 6] 	rts
                             
                             ; dw and db handled here
                             ; keep going through comma separated
                             ; list and write bytes or words
                             ; string expansion also handled
f9d4 :                       df_rt_asm_db
f9d4 : a902             [ 2] 	lda #2
f9d6 : 2c                    	db	0x2c			; BIT abs to ignore next 2 bytes
f9d7 :                       df_rt_asm_dw
f9d7 : a903             [ 2] 	lda #3
f9d9 :                       df_rt_asm_db_start
f9d9 : 85a0             [ 3] 	sta df_asmlen
f9db : 203afb           [ 6] 	jsr df_rt_asm_printPC
f9de : 2055fb           [ 6] 	jsr df_rt_asm_printSPC
f9e1 :                       df_rt_asm_data
f9e1 : 2067e0           [ 6] 	jsr df_rt_neval		; Evaluate expression
f9e4 : 207af6           [ 6] 	jsr df_ost_peekType	; What is the type
f9e7 : a8               [ 2] 	tay
f9e8 : 300d             [ 3] 	bmi df_rt_asm_string; If string
f9ea : 2080f6           [ 6] 	jsr df_ost_popInt	; else get number in A,X
f9ed : 869e             [ 3] 	stx df_asmoprnd		; store low value
f9ef : 859f             [ 3] 	sta df_asmoprnd+1	; store high value
f9f1 : 201ffa           [ 6] 	jsr df_rt_asm_data_write
AS65 Assembler for R6502 [1.42].                                     Page  273
-------------------------------- bank\bank0.s --------------------------------

f9f4 : 4c14fa           [ 3] 	jmp df_rt_asm_data_next
f9f7 :                       df_rt_asm_string
f9f7 : 2088f6           [ 6] 	jsr df_ost_popPtr	; pop string pointer
f9fa : 86a1             [ 3] 	stx df_tmpptra		; save pointer to tmpa
f9fc : 85a2             [ 3] 	sta df_tmpptra+1
f9fe :                       df_rt_asm_string_ch
f9fe : a000             [ 2] 	ldy #0
fa00 : b1a1             [ 5] 	lda (df_tmpptra),y	; Get string char, 0=done
fa02 : f010             [ 3] 	beq df_rt_asm_data_next
fa04 : 859e             [ 3] 	sta df_asmoprnd		; Save as operand
fa06 : 849f             [ 3] 	sty df_asmoprnd+1	; High is always zero
fa08 : 201ffa           [ 6] 	jsr df_rt_asm_data_write
                             	_incZPWord df_tmpptra
                             
fa11 : 4cfef9           [ 3] 	jmp df_rt_asm_string_ch
fa14 :                       df_rt_asm_data_next
fa14 : 20ccec           [ 6] 	jsr df_rt_eos		; End?
fa17 : b005             [ 3] 	bcs df_rt_asm_data_done
fa19 : e688             [ 5] 	inc df_exeoff		; Jump over ','
fa1b : 4ce1f9           [ 3] 	jmp df_rt_asm_data
fa1e :                       df_rt_asm_data_done
fa1e : 60               [ 6] 	rts	
                             
                             ; Write one db or dw value
                             ; Check for value too big for db
                             ; Advance PC by df_asmlen
fa1f :                       df_rt_asm_data_write
fa1f : 205efb           [ 6] 	jsr df_rt_asm_printOPR
fa22 :                       df_rt_asm_data_write_skip1
fa22 : a902             [ 2] 	lda #2
fa24 : 259b             [ 3] 	and df_asmopt
fa26 : f017             [ 3] 	beq df_rt_asm_data_write_skip2
fa28 : a59e             [ 3] 	lda df_asmoprnd
fa2a : a000             [ 2] 	ldy #0
fa2c : 9199             [ 5] 	sta (df_asmpc),y
fa2e : c8               [ 2] 	iny
fa2f : a902             [ 2] 	lda #2
fa31 : c5a0             [ 3] 	cmp df_asmlen
fa33 : d006             [ 3] 	bne df_rt_asm_data_write_hi
fa35 : a59f             [ 3] 	lda df_asmoprnd+1
fa37 : d014             [ 3] 	bne df_rt_asm_data_write_err
fa39 : f004             [ 3] 	beq df_rt_asm_data_write_skip2
fa3b :                       df_rt_asm_data_write_hi
fa3b : a59f             [ 3] 	lda df_asmoprnd+1
fa3d : 9199             [ 5] 	sta (df_asmpc),y
fa3f :                       df_rt_asm_data_write_skip2
fa3f : a4a0             [ 3] 	ldy df_asmlen
fa41 : 88               [ 2] 	dey					; Add 1 less!
fa42 : 98               [ 2] 	tya
fa43 : 18               [ 2] 	clc
fa44 : 6599             [ 3] 	adc df_asmpc
fa46 : 8599             [ 3] 	sta df_asmpc
                             	_bcc 2
                             
fa4a : e69a             [ 5] 	inc df_asmpc+1
fa4c : 60               [ 6] 	rts
fa4d :                       df_rt_asm_data_write_err	
                             	SWBRK DFERR_QUANTITY
                             
                             	
                             	
fa4f :                       df_rt_asm_ds
AS65 Assembler for R6502 [1.42].                                     Page  274
-------------------------------- bank\bank0.s --------------------------------

fa4f : 203afb           [ 6] 	jsr df_rt_asm_printPC
fa52 : 2055fb           [ 6] 	jsr df_rt_asm_printSPC
                             	; Get the address from expression
fa55 : 2023fc           [ 6] 	jsr df_rt_asm_get_operand
                             	; ADD this in to PC
fa58 : 18               [ 2] 	clc
fa59 : a59e             [ 3] 	lda df_asmoprnd
fa5b : 6599             [ 3] 	adc df_asmpc
fa5d : 8599             [ 3] 	sta df_asmpc
fa5f : a59f             [ 3] 	lda df_asmoprnd+1
fa61 : 659a             [ 3] 	adc df_asmpc+1
fa63 : 859a             [ 3] 	sta df_asmpc+1
                             	; len=1 for printing
fa65 : a903             [ 2] 	lda #3
fa67 : 85a0             [ 3] 	sta df_asmlen
fa69 : 4c5efb           [ 3] 	jmp df_rt_asm_printOPR
                             
                             
                             ; Process a normal assembler mnemonic
fa6c :                       df_rt_asm_mnem
fa6c : 68               [ 4] 	pla				; Throw away previous temp variable
                             	; jump over mnemonic code
fa6d : e688             [ 5] 	inc df_exeoff
                             	; work out the addressing mode and get operand
fa6f : 20a6fb           [ 6] 	jsr df_rt_asm_addrmode
                             
fa72 :                       df_rt_asm_mnem_try
fa72 : a59c             [ 3] 	lda df_asmadmd					; With the addressing mode
fa74 : 202efc           [ 6] 	jsr df_rt_asm_find_addr_mode	; Find it for this 
fa77 : c900             [ 2] 	cmp #AM_NONE					; Exists?
fa79 : d014             [ 3] 	bne	df_rt_asm_mnem_chk			; If does then check it
fa7b :                       df_rt_asm_check_alt
fa7b : a69c             [ 3] 	ldx df_asmadmd					; Use ad mode as an index
fa7d : bd83fc           [ 4] 	lda df_asm_altaddrmode,x		; Else get alternate
fa80 : c900             [ 2] 	cmp #AM_NONE					; Is there an alternate?
fa82 : f02d             [ 3] 	beq df_rt_asm_mnem_err			; If no then error
fa84 : 202efc           [ 6] 	jsr df_rt_asm_find_addr_mode	; Check does mode e
fa87 : c900             [ 2] 	cmp #AM_NONE					; this instruction
fa89 : f026             [ 3] 	beq df_rt_asm_mnem_err			; if no then error
fa8b : c59c             [ 3] 	cmp df_asmadmd					; Same as the original?
fa8d : f00e             [ 3] 	beq df_rt_asm_mnem_done			; if so then done
fa8f :                       df_rt_asm_mnem_chk
fa8f : 859c             [ 3] 	sta df_asmadmd					; This is the final mode
fa91 : aa               [ 2] 	tax								; Get the length
fa92 : bd72fc           [ 4] 	lda df_asm_length,x
fa95 : a69f             [ 3] 	ldx df_asmoprnd+1				; Is operand hi non-zero?
fa97 : f004             [ 3] 	beq df_rt_asm_mnem_done			; If zero then done
fa99 : c903             [ 2] 	cmp #3							; Else must be len 3?
fa9b : d0de             [ 3] 	bne df_rt_asm_check_alt			; Try an alternate
fa9d :                       df_rt_asm_mnem_done
fa9d : a69c             [ 3] 	ldx df_asmadmd					; Get the final mode index
fa9f : bd72fc           [ 4] 	lda df_asm_length,x				; Get the length
faa2 : 85a0             [ 3] 	sta df_asmlen
faa4 : a59c             [ 3] 	lda df_asmadmd					; Get the final mode
faa6 : 202efc           [ 6] 	jsr df_rt_asm_find_addr_mode	; Get the Y index o
                             	; Ok now get the opcode
faa9 : c8               [ 2] 	iny
faaa : b181             [ 5] 	lda (df_symtab),y
faac : 859d             [ 3] 	sta df_asmopcde
                             	; Now have all information to assemble
faae : 4cb3fa           [ 3] 	jmp df_rt_asm_encode
                             	
AS65 Assembler for R6502 [1.42].                                     Page  275
-------------------------------- bank\bank0.s --------------------------------

fab1 :                       df_rt_asm_mnem_err
                             	SWBRK DFERR_SYNTAX
                             
                             	
                             ; Take assembler data and encode it
                             ; depending on the current option
                             ; Option 0 = No write
                             ; Option 1 = No write, Print
                             ; Option 2 = Write
                             ; Option 3 = Write, Print
fab3 :                       df_rt_asm_encode
                             	; If relative then need to calculate offset
fab3 : a59c             [ 3] 	lda df_asmadmd
fab5 : c90f             [ 2] 	cmp #AM_REL
fab7 : d033             [ 3] 	bne df_rt_asm_encode_skiprel
                             	; If high byte is 0 then do nothing
fab9 : a59f             [ 3] 	lda df_asmoprnd+1
fabb : f02f             [ 3] 	beq df_rt_asm_encode_skiprel
                             	; else calculate distance from PC
                             	; first take 2 off operand
fabd : 38               [ 2] 	sec
fabe : a59e             [ 3] 	lda df_asmoprnd
fac0 : e902             [ 2] 	sbc #2
fac2 : 859e             [ 3] 	sta df_asmoprnd
fac4 : a59f             [ 3] 	lda df_asmoprnd+1
fac6 : e900             [ 2] 	sbc #0
fac8 : 859f             [ 3] 	sta df_asmoprnd+1
                             	; now calculate current operand-PC
faca : 38               [ 2] 	sec
facb : a59e             [ 3] 	lda df_asmoprnd
facd : e599             [ 3] 	sbc df_asmpc
facf : 859e             [ 3] 	sta df_asmoprnd
fad1 : a59f             [ 3] 	lda df_asmoprnd+1
fad3 : e59a             [ 3] 	sbc df_asmpc+1
                             	; put 0 in high operand storage
                             	; but A contains result of subtraction
                             	; so check that for out of range
fad5 : a000             [ 2] 	ldy #0
fad7 : 849f             [ 3] 	sty df_asmoprnd+1
                             	; detect too far; high byte is either 0 or 255
                             	; else it's an error
fad9 : a8               [ 2] 	tay
fada : f00a             [ 3] 	beq df_rt_asm_encode_relpos
fadc : c9ff             [ 2] 	cmp #0xff
fade : d00a             [ 3] 	bne df_rt_asm_encode_relfar
                             	; if high is ff then low must be same -ve
fae0 : a59e             [ 3] 	lda df_asmoprnd
fae2 : 3008             [ 3] 	bmi df_rt_asm_encode_skiprel
                             	; else error
fae4 : 1004             [ 3] 	bpl df_rt_asm_encode_relfar
fae6 :                       df_rt_asm_encode_relpos
                             	; if high is 00 then low must be same +ve
fae6 : a59e             [ 3] 	lda df_asmoprnd
fae8 : 1002             [ 3] 	bpl df_rt_asm_encode_skiprel
                             	; else error
faea :                       df_rt_asm_encode_relfar
                             	; set to non-zero value, dec because it is zero 
faea : c69f             [ 5] 	dec df_asmoprnd+1
faec :                       df_rt_asm_encode_skiprel
                             	; Only write the code if bit 1=1
faec : a902             [ 2] 	lda #0x02
faee : 259b             [ 3] 	and df_asmopt
AS65 Assembler for R6502 [1.42].                                     Page  276
-------------------------------- bank\bank0.s --------------------------------

faf0 : f028             [ 4] 	beq df_rt_asm_encode_print
faf2 : a000             [ 2] 	ldy #0
faf4 : a59d             [ 3] 	lda df_asmopcde
faf6 : 9199             [ 5] 	sta (df_asmpc),y
faf8 : a5a0             [ 3] 	lda df_asmlen
fafa : c901             [ 2] 	cmp #1						; No operand
fafc : f01c             [ 4] 	beq df_rt_asm_encode_print
fafe : c903             [ 2] 	cmp #3						; Word operand
fb00 : f00e             [ 3] 	beq df_rt_asm_encode_writeword
                             	; byte operand, high byte must be zero
fb02 : a59f             [ 3] 	lda df_asmoprnd+1
fb04 : f002             [ 3] 	beq df_rt_asm_encode_writebyte
                             	SWBRK DFERR_QUANTITY
                             
fb08 :                       df_rt_asm_encode_writebyte
fb08 : c8               [ 2] 	iny 
fb09 : a59e             [ 3] 	lda df_asmoprnd
fb0b : 9199             [ 5] 	sta (df_asmpc),y
fb0d : 4c1afb           [ 3] 	jmp df_rt_asm_encode_print
fb10 :                       df_rt_asm_encode_writeword
fb10 : c8               [ 2] 	iny 
fb11 : a59e             [ 3] 	lda df_asmoprnd
fb13 : 9199             [ 5] 	sta (df_asmpc),y
fb15 : c8               [ 2] 	iny 
fb16 : a59f             [ 3] 	lda df_asmoprnd+1
fb18 : 9199             [ 5] 	sta (df_asmpc),y	
fb1a :                       df_rt_asm_encode_print
fb1a : 202afb           [ 6] 	jsr df_rt_asm_print_mmen
                             	; advance pc
fb1d : 18               [ 2] 	clc
fb1e : a599             [ 3] 	lda df_asmpc
fb20 : 65a0             [ 3] 	adc df_asmlen
fb22 : 8599             [ 3] 	sta df_asmpc
                             	_bcc 2
                             
fb26 : e69a             [ 5] 	inc df_asmpc+1
fb28 : 18               [ 2] 	clc
fb29 : 60               [ 6] 	rts
                             
                             
                             ; Print the full 1,2,3 byte instruction
                             ; depends on df_asmopt
fb2a :                       df_rt_asm_print_mmen
fb2a : 203afb           [ 6] 	jsr df_rt_asm_printPC
fb2d : 2055fb           [ 6] 	jsr df_rt_asm_printSPC
fb30 : 204afb           [ 6] 	jsr df_rt_asm_printOPC
fb33 : 2055fb           [ 6] 	jsr df_rt_asm_printSPC
fb36 : 205efb           [ 6] 	jsr df_rt_asm_printOPR
fb39 :                       df_rt_asm_print_rts			; Hopefully subs can get he
fb39 : 60               [ 6] 	rts
                             
fb3a :                       df_rt_asm_printPC
                             	; Check the option bit 0 (Print)
fb3a : a901             [ 2] 	lda #0x01
fb3c : 259b             [ 3] 	and df_asmopt
fb3e : f0f9             [ 3] 	beq df_rt_asm_print_rts
                             	; Print current PC
fb40 : a59a             [ 3] 	lda df_asmpc+1
fb42 : 2083c1           [ 6] 	jsr utilPrintA
fb45 : a599             [ 3] 	lda df_asmpc
fb47 : 4c83c1           [ 3] 	jmp utilPrintA
                             
AS65 Assembler for R6502 [1.42].                                     Page  277
-------------------------------- bank\bank0.s --------------------------------

fb4a :                       df_rt_asm_printOPC
                             	; Check the option bit 0 (Print)
fb4a : a901             [ 2] 	lda #0x01
fb4c : 259b             [ 3] 	and df_asmopt
fb4e : f0e9             [ 3] 	beq df_rt_asm_print_rts
fb50 : a59d             [ 3] 	lda df_asmopcde
fb52 : 4c83c1           [ 3] 	jmp utilPrintA
                             
fb55 :                       df_rt_asm_printSPC
                             	; Check the option bit 0 (Print)
fb55 : a901             [ 2] 	lda #0x01
fb57 : 259b             [ 3] 	and df_asmopt
fb59 : f0de             [ 3] 	beq df_rt_asm_print_rts
fb5b : 4c73c1           [ 3] 	jmp utilPrintSPC
                             	
fb5e :                       df_rt_asm_printOPR
                             	; Check the option bit 0 (Print)
fb5e : a901             [ 2] 	lda #0x01
fb60 : 259b             [ 3] 	and df_asmopt
fb62 : f0d5             [ 3] 	beq df_rt_asm_print_rts	
fb64 : a5a0             [ 3] 	lda df_asmlen				; check how may operand bytes
fb66 : c901             [ 2] 	cmp #1						; if only opcode, done
fb68 : f0cf             [ 3] 	beq df_rt_asm_print_rts	
fb6a : c902             [ 2] 	cmp #2
fb6c : f005             [ 3] 	beq df_rt_asm_printOPR_1	; if only 2 do low byte
fb6e : a59f             [ 3] 	lda df_asmoprnd+1
fb70 : 2083c1           [ 6] 	jsr utilPrintA
fb73 :                       df_rt_asm_printOPR_1
fb73 : a59e             [ 3] 	lda df_asmoprnd
fb75 : 4c83c1           [ 3] 	jmp utilPrintA
                             
fb78 :                       df_rt_asm_printCR
                             	; Check the option bit 0 (Print)
fb78 : a901             [ 2] 	lda #0x01
fb7a : 259b             [ 3] 	and df_asmopt
fb7c : f0bb             [ 3] 	beq df_rt_asm_print_rts
fb7e : 4c7bc1           [ 3] 	jmp utilPrintCRLF
                             
fb81 :                       df_rt_asm_printCH
fb81 : 8538             [ 3] 	sta tmp_d
                             	; Check the option bit 0 (Print)
fb83 : a901             [ 2] 	lda #0x01
fb85 : 259b             [ 3] 	and df_asmopt
fb87 : f0b0             [ 3] 	beq df_rt_asm_print_rts
fb89 : a538             [ 3] 	lda tmp_d
fb8b : 4c3dc4           [ 3] 	jmp io_put_ch
                             
                             ; Print an entire line, but save df_exeoff
fb8e :                       df_rt_asm_printline
                             	; Check the option bit 0 (Print)
fb8e : a901             [ 2] 	lda #0x01
fb90 : 259b             [ 3] 	and df_asmopt
fb92 : f0a5             [ 3] 	beq df_rt_asm_print_rts
fb94 : a588             [ 3] 	lda df_exeoff
fb96 : 48               [ 3] 	pha
                             	; use df_tmpptra
                             	_cpyZPWord df_currlin, df_tmpptra
                             
fb9f : 2039ee           [ 6] 	jsr df_rt_list_line_only
fba2 : 68               [ 4] 	pla
fba3 : 8588             [ 3] 	sta df_exeoff
fba5 : 60               [ 6] 	rts
AS65 Assembler for R6502 [1.42].                                     Page  278
-------------------------------- bank\bank0.s --------------------------------

                             
                             
                             ; Calculate the addressing mode
                             ; Populate the operand as needed
                             ; A and df_asmadmd contain Addressing Mode
fba6 :                       df_rt_asm_addrmode	
                             	; Store nothing in address mode
fba6 : a900             [ 2] 	lda #AM_NONE
fba8 : 859c             [ 3] 	sta df_asmadmd
                             	; zero out the operand
fbaa : a900             [ 2] 	lda #0
fbac : 859e             [ 3] 	sta df_asmoprnd
fbae : 859f             [ 3] 	sta df_asmoprnd+1
fbb0 : 20ccec           [ 6] 	jsr df_rt_eos			; End of statement?
fbb3 : b00d             [ 3] 	bcs df_rt_asm_AM_IMP
                             	; jump over whitespace
fbb5 : 209be4           [ 6] 	jsr df_rt_skip_ws
                             	; Check what it is
fbb8 : c923             [ 2] 	cmp #'#'				; Immediate?
fbba : f034             [ 3] 	beq df_rt_asm_AM_IMM
fbbc : c928             [ 2] 	cmp #'('				; Indirect something?
fbbe : f03a             [ 3] 	beq df_rt_asm_AM_INDIRECT
                             	; Must be ABS,ZP or REL
fbc0 : d005             [ 3] 	bne df_rt_asm_ABSREL
                             ; Process IMP/ACC
fbc2 :                       df_rt_asm_AM_IMP
fbc2 : a90d             [ 2] 	lda #AM_IMP
fbc4 : 859c             [ 3] 	sta df_asmadmd
fbc6 : 60               [ 6] 	rts
                             ; Process ABS or REL
fbc7 :                       df_rt_asm_ABSREL	
                             	; Evaluate operand
fbc7 : 2023fc           [ 6] 	jsr df_rt_asm_get_operand
                             
fbca : 20ccec           [ 6] 	jsr df_rt_eos			; End of statement?
fbcd : b00f             [ 3] 	bcs df_rt_asm_AM_ABS
fbcf : c8               [ 2] 	iny						; Jump over ","
fbd0 : b186             [ 5] 	lda (df_currlin),y		; Load X or Y
fbd2 : c8               [ 2] 	iny						; Jump over index reg
fbd3 : 8588             [ 3] 	sta df_exeoff			; Save exe offset
fbd5 : c978             [ 2] 	cmp #'x'				; Indirect X?
fbd7 : f012             [ 3] 	beq df_rt_asm_AM_ABSX
                             ; Process ABSY
fbd9 :                       df_rt_asm_AM_ABSY
fbd9 : a906             [ 2] 	lda #AM_ZPY				; Go for smallest modes
fbdb : 859c             [ 3] 	sta df_asmadmd
fbdd : 60               [ 6] 	rts
                             ; Process what looks like pure ABS, could be REL
fbde :                       df_rt_asm_AM_ABS
fbde : a001             [ 2] 	ldy #1					; Check first addressing mode
fbe0 : b181             [ 5] 	lda (df_symtab),y
fbe2 : c90f             [ 2] 	cmp #AM_REL
fbe4 : f002             [ 3] 	beq df_rt_asm_AM_REL
fbe6 : a904             [ 2] 	lda #AM_ZP				; Go for smallest modes
fbe8 :                       df_rt_asm_AM_REL
fbe8 : 859c             [ 3] 	sta df_asmadmd
fbea : 60               [ 6] 	rts
                             ; Process ABSX
fbeb :                       df_rt_asm_AM_ABSX
fbeb : a905             [ 2] 	lda #AM_ZPX				; Go for smallest modes
fbed : 859c             [ 3] 	sta df_asmadmd
fbef : 60               [ 6] 	rts
AS65 Assembler for R6502 [1.42].                                     Page  279
-------------------------------- bank\bank0.s --------------------------------

                             ; Process Immediate
fbf0 :                       df_rt_asm_AM_IMM
                             	; skip over #
fbf0 : e688             [ 5] 	inc df_exeoff
                             	; Get operand
fbf2 : 2023fc           [ 6] 	jsr df_rt_asm_get_operand
                             	; Mark as immediate
fbf5 : a90c             [ 2] 	lda #AM_IMM
fbf7 : 859c             [ 3] 	sta df_asmadmd
fbf9 : 60               [ 6] 	rts
                             ; Process indirect
fbfa :                       df_rt_asm_AM_INDIRECT
                             	; skip over (
fbfa : e688             [ 5] 	inc df_exeoff
                             	; Calculate the operand
fbfc : 2023fc           [ 6] 	jsr df_rt_asm_get_operand
                             	; what is next char?
fbff : a488             [ 3] 	ldy df_exeoff
fc01 : b186             [ 5] 	lda (df_currlin),y
fc03 : c929             [ 2] 	cmp #')'			; Could be IND or INDY
fc05 : f009             [ 3] 	beq df_rt_asm_AM_ZPINDORY
                             	; else must be INDX
                             	; skip 'x)'
fc07 : c8               [ 2] 	iny
fc08 : c8               [ 2] 	iny
fc09 : 8488             [ 3] 	sty df_exeoff
fc0b : a908             [ 2] 	lda #AM_ZPINDX
fc0d : 859c             [ 3] 	sta df_asmadmd
fc0f : 60               [ 6] 	rts
                             ; Pure indirect mode found
fc10 :                       df_rt_asm_AM_ZPINDORY
fc10 : a907             [ 2] 	lda #AM_ZPIND			; Assume ZPIND
fc12 : c8               [ 2] 	iny
fc13 : 8488             [ 3] 	sty df_exeoff
                             	; if at end of line/statement then pure indirect
fc15 : 20ccec           [ 6] 	jsr df_rt_eos			; End of statement?
fc18 : b006             [ 3] 	bcs df_rt_asm_AM_ZPIND
                             	; else must be INDY
fc1a : a909             [ 2] 	lda #AM_ZPINDY
                             	; skip ',Y'
fc1c : c8               [ 2] 	iny
fc1d : c8               [ 2] 	iny
fc1e : 8488             [ 3] 	sty df_exeoff
fc20 :                       df_rt_asm_AM_ZPIND
fc20 : 859c             [ 3] 	sta df_asmadmd
fc22 : 60               [ 6] 	rts
                             
                             ; Get and save the operand
                             ; df_asmoprnd contains the result
fc23 :                       df_rt_asm_get_operand
                             	; evaluate
fc23 : 2067e0           [ 6] 	jsr df_rt_neval
                             	; Get the parameter from stack
fc26 : 2080f6           [ 6] 	jsr df_ost_popInt
                             	; put in the operand
fc29 : 869e             [ 3] 	stx df_asmoprnd
fc2b : 859f             [ 3] 	sta df_asmoprnd+1
fc2d : 60               [ 6] 	rts
                             	
                             ; From current symtab entry, find addressing
                             ; mode in A.  AM_NONE=Not found, Y=index
fc2e :                       df_rt_asm_find_addr_mode
AS65 Assembler for R6502 [1.42].                                     Page  280
-------------------------------- bank\bank0.s --------------------------------

                             	; save A in tmp
fc2e : 8538             [ 3] 	sta tmp_d
                             	; Start first entry (1) - 2 = 0xff
fc30 : a0ff             [ 2] 	ldy #0xff
fc32 : a200             [ 2] 	ldx #0
fc34 :                       df_rt_asm_find_addr_mode_loop
                             	; next entry
fc34 : c8               [ 2] 	iny
fc35 : c8               [ 2] 	iny
                             	; if current index > num entries then error
fc36 : 98               [ 2] 	tya
fc37 : 38               [ 2] 	sec
fc38 : e181             [ 6] 	sbc (df_symtab,x)
fc3a : b007             [ 3] 	bcs df_rt_asm_find_addr_mode_err
                             	; is symtab addressing mode what we want?
fc3c : b181             [ 5] 	lda (df_symtab),y
fc3e : c538             [ 3] 	cmp tmp_d
fc40 : d0f2             [ 3] 	bne df_rt_asm_find_addr_mode_loop
                             	; done A=mode, y=index in to df_symtab
fc42 : 60               [ 6] 	rts
fc43 :                       df_rt_asm_find_addr_mode_err
fc43 : a900             [ 2] 	lda #AM_NONE
fc45 :                       df_rt_asm_skip_to_sym_done; Used by function belo
fc45 : 60               [ 6] 	rts
                             
                             
                             ; Skip X amount of symbols in table
                             ; A contains how many addr mode and op code bytes
                             ; df_symtab points to offset byte
fc46 :                       df_rt_asm_skip_to_sym
fc46 : e8               [ 2] 	inx				; so done when X=0
                             	; Start at token symbols beginning
fc47 : a994             [ 2] 	lda #lo(df_asm_tokensyms)
fc49 : 8581             [ 3] 	sta df_symtab
fc4b : a9fc             [ 2] 	lda #hi(df_asm_tokensyms)
fc4d : 8582             [ 3] 	sta df_symtab+1
fc4f : a900             [ 2] 	lda #0
fc51 : 8583             [ 3] 	sta df_symoff
fc53 : a8               [ 2] 	tay
fc54 :                       df_rt_asm_skip_to_sym_next
                             	; Get symtable char
fc54 : b181             [ 5] 	lda (df_symtab),y
                             	; if < ' ' then jumped over symbol chars
fc56 : c920             [ 2] 	cmp #' '
fc58 : 9009             [ 3] 	bcc df_rt_asm_skip_to_sym_end
                             	;else next smy tab char
                             	_incZPWord df_symtab
                             
fc60 : 4c54fc           [ 3] 	jmp df_rt_asm_skip_to_sym_next
                             	; Found end of symbol
fc63 :                       df_rt_asm_skip_to_sym_end
                             	;if done then return
fc63 : ca               [ 2] 	dex
fc64 : f0df             [ 3] 	beq df_rt_asm_skip_to_sym_done
                             	;jump over addr and op code by A bytes
fc66 : 38               [ 2] 	sec
fc67 : 6581             [ 3] 	adc df_symtab
fc69 : 8581             [ 3] 	sta df_symtab
                             	_bcc 2
                             
fc6d : e682             [ 5] 	inc df_symtab+1
fc6f : 4c54fc           [ 3] 	jmp df_rt_asm_skip_to_sym_next
AS65 Assembler for R6502 [1.42].                                     Page  281
-------------------------------- bank\bank0.s --------------------------------

                             
fc72 :                       mod_sz_rtasm_e
                             
                             
                             	include "dflat/asmsymtab.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  ASMSYMTAB.S
                             ;*	Mainly this contains the symbol table for asse
                             ;*	mnemonics but also meta data like what address
                             ;*	and the length of opcodes.
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code  
                             
                             	;* Length of each addressing mode
                             	;* ORDER significant!
fc72 :                       df_asm_length
fc72 : 00030303020202..      	db	0,3,3,3,2,2,2,2,2,2,3,3,2,1,1,2,0
                             
                             	; Always try for lowest addressing mode, but
                             	; this table maps to alternative
fc83 :                       df_asm_altaddrmode
fc83 : 00                    	db AM_NONE		;AM_NONE	= 0
fc84 : 00                    	db AM_NONE		;AM_ABS	 	= 1
fc85 : 00                    	db AM_NONE		;AM_ABSX	= 2
fc86 : 00                    	db AM_NONE		;AM_ABSY	= 3
fc87 : 01                    	db AM_ABS		;AM_ZP		= 4
fc88 : 02                    	db AM_ABSX		;AM_ZPX		= 5
fc89 : 03                    	db AM_ABSY		;AM_ZPY		= 6
fc8a : 0a                    	db AM_ABSIND	;AM_ZPIND	= 7
fc8b : 0b                    	db AM_ABSINDX	;AM_ZPINDX	= 8
fc8c : 09                    	db AM_ZPINDY	;AM_ZPINDY	= 9
fc8d : 00                    	db AM_NONE		;AM_ABSIND	= 10
fc8e : 00                    	db AM_NONE		;AM_ABSINDX	= 11
fc8f : 00                    	db AM_NONE		;AM_IMM		= 12
fc90 : 00                    	db AM_NONE		;AM_ACC		= 13
fc91 : 00                    	db AM_NONE		;AM_IMP		= AM_ACC
fc92 : 0f                    	db AM_REL		;AM_REL		= 15
fc93 : 00                    	db AM_NONE		;AM_DIR		= 16
                             
                             
                             	;*	Mnemonic/	How many addressing modes /
                             	;* 	Mode		Opcode for mode
fc94 :                       df_asm_tokensyms
                             	;* Start with directives
fc94 : 6f726702              	db	"org",		1*2
fc98 : 1000                  	db	AM_DIR,		0x00
fc9a : 6f707402              	db	"opt",		1*2
fc9e : 1000                  	db	AM_DIR,		0x00
fca0 : 646202                	db	"db",		1*2
fca3 : 1000                  	db	AM_DIR,		0x00
fca5 : 647702                	db	"dw",		1*2
fca8 : 1000                  	db	AM_DIR,		0x00
AS65 Assembler for R6502 [1.42].                                     Page  282
-------------------------------- bank\bank0.s --------------------------------

fcaa : 647302                	db	"ds",		1*2
fcad : 1000                  	db	AM_DIR,		0x00	
                             
fcaf : 61646310              	db	"adc",		8*2
fcb3 : 0c69                  	db	AM_IMM,		0x69
fcb5 : 0465                  	db	AM_ZP,		0x65
fcb7 : 0575                  	db	AM_ZPX,		0x75
fcb9 : 016d                  	db	AM_ABS,		0x6d
fcbb : 027d                  	db	AM_ABSX,	0x7d
fcbd : 0379                  	db	AM_ABSY,	0x79
fcbf : 0861                  	db	AM_ZPINDX,	0x61
fcc1 : 0971                  	db	AM_ZPINDY,	0x71
                             	
fcc3 : 616e6410              	db	"and",		8*2
fcc7 : 0c29                  	db	AM_IMM,		0x29
fcc9 : 0425                  	db	AM_ZP,		0x25
fccb : 0535                  	db	AM_ZPX,		0x35
fccd : 012d                  	db	AM_ABS,		0x2d
fccf : 023d                  	db	AM_ABSX,	0x3d
fcd1 : 0339                  	db	AM_ABSY,	0x39
fcd3 : 0821                  	db	AM_ZPINDX,	0x21
fcd5 : 0931                  	db	AM_ZPINDY,	0x31
                             
fcd7 : 636d7010              	db	"cmp",		8*2
fcdb : 0cc9                  	db	AM_IMM,		0xc9
fcdd : 04c5                  	db	AM_ZP,		0xc5
fcdf : 05d5                  	db	AM_ZPX,		0xd5
fce1 : 01cd                  	db	AM_ABS,		0xcd
fce3 : 02dd                  	db	AM_ABSX,	0xdd
fce5 : 03d9                  	db	AM_ABSY,	0xd9
fce7 : 08c1                  	db	AM_ZPINDX,	0xc1
fce9 : 09d1                  	db	AM_ZPINDY,	0xd1
                             
fceb : 656f7210              	db	"eor",		8*2
fcef : 0c49                  	db	AM_IMM,		0x49
fcf1 : 0445                  	db	AM_ZP,		0x45
fcf3 : 0555                  	db	AM_ZPX,		0x55
fcf5 : 014d                  	db	AM_ABS,		0x4d
fcf7 : 025d                  	db	AM_ABSX,	0x5d
fcf9 : 0359                  	db	AM_ABSY,	0x59
fcfb : 0841                  	db	AM_ZPINDX,	0x41
fcfd : 0951                  	db	AM_ZPINDY,	0x51
                             
fcff : 6c646110              	db	"lda",		8*2
fd03 : 0ca9                  	db	AM_IMM,		0xa9
fd05 : 04a5                  	db	AM_ZP,		0xa5
fd07 : 05b5                  	db	AM_ZPX,		0xb5
fd09 : 01ad                  	db	AM_ABS,		0xad
fd0b : 02bd                  	db	AM_ABSX,	0xbd
fd0d : 03b9                  	db	AM_ABSY,	0xb9
fd0f : 08a1                  	db	AM_ZPINDX,	0xa1
fd11 : 09b1                  	db	AM_ZPINDY,	0xb1
                             
fd13 : 6f726110              	db	"ora",		8*2
fd17 : 0c09                  	db	AM_IMM,		0x09
fd19 : 0405                  	db	AM_ZP,		0x05
fd1b : 0515                  	db	AM_ZPX,		0x15
fd1d : 010d                  	db	AM_ABS,		0x0d
fd1f : 021d                  	db	AM_ABSX,	0x1d
fd21 : 0319                  	db	AM_ABSY,	0x19
fd23 : 0801                  	db	AM_ZPINDX,	0x01
fd25 : 0911                  	db	AM_ZPINDY,	0x11
AS65 Assembler for R6502 [1.42].                                     Page  283
-------------------------------- bank\bank0.s --------------------------------

                             
fd27 : 73626310              	db	"sbc",		8*2
fd2b : 0ce9                  	db	AM_IMM,		0xe9
fd2d : 04e5                  	db	AM_ZP,		0xe5
fd2f : 05f5                  	db	AM_ZPX,		0xf5
fd31 : 01ed                  	db	AM_ABS,		0xed
fd33 : 02fd                  	db	AM_ABSX,	0xfd
fd35 : 03f9                  	db	AM_ABSY,	0xf9
fd37 : 08e1                  	db	AM_ZPINDX,	0xe1
fd39 : 09f1                  	db	AM_ZPINDY,	0xf1
                             
fd3b : 73746110              	db	"sta",		8*2
fd3f : 0485                  	db	AM_ZP,		0x85
fd41 : 0595                  	db	AM_ZPX,		0x95
fd43 : 018d                  	db	AM_ABS,		0x8d
fd45 : 029d                  	db	AM_ABSX,	0x9d
fd47 : 0399                  	db	AM_ABSY,	0x99
fd49 : 0881                  	db	AM_ZPINDX,	0x81
fd4b : 0991                  	db	AM_ZPINDY,	0x91
fd4d : 0792                  	db	AM_ZPIND,	0x92
                             
fd4f : 61736c0a              	db	"asl",		5*2
fd53 : 0d0a                  	db	AM_IMP,		0x0a
fd55 : 0406                  	db	AM_ZP,		0x06
fd57 : 0516                  	db	AM_ZPX,		0x16
fd59 : 010e                  	db	AM_ABS,		0x0e
fd5b : 021e                  	db	AM_ABSX,	0x1e
fd5d : 64656308              	db	"dec",		4*2
fd61 : 04c6                  	db	AM_ZP,		0xc6
fd63 : 05d6                  	db	AM_ZPX,		0xd6
fd65 : 01ce                  	db	AM_ABS,		0xce
fd67 : 02de                  	db	AM_ABSX,	0xde
fd69 : 696e6308              	db	"inc",		4*2
fd6d : 04e6                  	db	AM_ZP,		0xe6
fd6f : 05f6                  	db	AM_ZPX,		0xf6
fd71 : 01ee                  	db	AM_ABS,		0xee
fd73 : 02fe                  	db	AM_ABSX,	0xfe
fd75 : 6c73720a              	db	"lsr",		5*2
fd79 : 0d4a                  	db	AM_IMP,		0x4a
fd7b : 0446                  	db	AM_ZP,		0x46
fd7d : 0556                  	db	AM_ZPX,		0x56
fd7f : 014e                  	db	AM_ABS,		0x4e
fd81 : 025e                  	db	AM_ABSX,	0x5e
fd83 : 726f6c0a              	db	"rol",		5*2
fd87 : 0d2a                  	db	AM_IMP,		0x2a
fd89 : 0426                  	db	AM_ZP,		0x26
fd8b : 0536                  	db	AM_ZPX,		0x36
fd8d : 012e                  	db	AM_ABS,		0x2e
fd8f : 023e                  	db	AM_ABSX,	0x3e
fd91 : 726f720a              	db	"ror",		5*2
fd95 : 0d6a                  	db	AM_IMP,		0x6a
fd97 : 0466                  	db	AM_ZP,		0x66
fd99 : 0576                  	db	AM_ZPX,		0x76
fd9b : 016e                  	db	AM_ABS,		0x6e
fd9d : 027e                  	db	AM_ABSX,	0x7e
                             
fd9f : 62697404              	db	"bit",		2*2
fda3 : 0424                  	db	AM_ZP,		0x24
fda5 : 012c                  	db	AM_ABS,		0x2c
                             	
fda7 : 62726b02              	db	"brk",		1*2
fdab : 0d00                  	db	AM_IMP,		0x00
AS65 Assembler for R6502 [1.42].                                     Page  284
-------------------------------- bank\bank0.s --------------------------------

                             	
fdad : 636c6302              	db	"clc",		1*2
fdb1 : 0d18                  	db	AM_IMP,		0x18
fdb3 : 636c6402              	db	"cld",		1*2
fdb7 : 0dd8                  	db	AM_IMP,		0xd8
fdb9 : 636c6902              	db	"cli",		1*2
fdbd : 0d58                  	db	AM_IMP,		0x58
fdbf : 636c7602              	db	"clv",		1*2
fdc3 : 0db8                  	db	AM_IMP,		0xb8
fdc5 : 73656302              	db	"sec",		1*2
fdc9 : 0d38                  	db	AM_IMP,		0x38
fdcb : 73656402              	db	"sed",		1*2
fdcf : 0df8                  	db	AM_IMP,		0xf8
fdd1 : 73656902              	db	"sei",		1*2
fdd5 : 0d78                  	db	AM_IMP,		0x78
                             	
fdd7 : 63707806              	db	"cpx",		3*2
fddb : 0ce0                  	db	AM_IMM,		0xe0
fddd : 04e4                  	db	AM_ZP,		0xe4
fddf : 01ec                  	db	AM_ABS,		0xec
fde1 : 63707906              	db	"cpy",		3*2
fde5 : 0cc0                  	db	AM_IMM,		0xc0
fde7 : 04c4                  	db	AM_ZP,		0xc4
fde9 : 01cc                  	db	AM_ABS,		0xcc
fdeb : 64657802              	db	"dex",		1*2
fdef : 0dca                  	db	AM_IMP,		0xca
fdf1 : 64657902              	db	"dey",		1*2
fdf5 : 0d88                  	db	AM_IMP,		0x88
fdf7 : 696e7802              	db	"inx",		1*2
fdfb : 0de8                  	db	AM_IMP,		0xe8
fdfd : 696e7902              	db	"iny",		1*2
fe01 : 0dc8                  	db	AM_IMP,		0xc8
fe03 : 6c64780a              	db	"ldx",		5*2
fe07 : 0ca2                  	db	AM_IMM,		0xa2
fe09 : 04a6                  	db	AM_ZP,		0xa6
fe0b : 06b6                  	db	AM_ZPY,		0xb6
fe0d : 01ae                  	db	AM_ABS,		0xae
fe0f : 03be                  	db	AM_ABSY,	0xbe
fe11 : 6c64790a              	db	"ldy",		5*2
fe15 : 0ca0                  	db	AM_IMM,		0xa0
fe17 : 04a4                  	db	AM_ZP,		0xa4
fe19 : 05b4                  	db	AM_ZPX,		0xb4
fe1b : 01ac                  	db	AM_ABS,		0xac
fe1d : 02bc                  	db	AM_ABSX,	0xbc
fe1f : 73747806              	db	"stx",		3*2
fe23 : 0486                  	db	AM_ZP,		0x86
fe25 : 0696                  	db	AM_ZPY,		0x96
fe27 : 018e                  	db	AM_ABS,		0x8e
fe29 : 73747906              	db	"sty",		3*2
fe2d : 0484                  	db	AM_ZP,		0x84
fe2f : 0594                  	db	AM_ZPX,		0x94
fe31 : 018c                  	db	AM_ABS,		0x8c
                             
fe33 : 62636302              	db	"bcc",		1*2
fe37 : 0f90                  	db	AM_REL,		0x90
fe39 : 62637302              	db	"bcs",		1*2
fe3d : 0fb0                  	db	AM_REL,		0xb0
fe3f : 62657102              	db	"beq",		1*2
fe43 : 0ff0                  	db	AM_REL,		0xf0
fe45 : 626d6902              	db	"bmi",		1*2
fe49 : 0f30                  	db	AM_REL,		0x30
fe4b : 626e6502              	db	"bne",		1*2
AS65 Assembler for R6502 [1.42].                                     Page  285
-------------------------------- bank\bank0.s --------------------------------

fe4f : 0fd0                  	db	AM_REL,		0xd0
fe51 : 62706c02              	db	"bpl",		1*2
fe55 : 0f10                  	db	AM_REL,		0x10
fe57 : 62766302              	db	"bvc",		1*2
fe5b : 0f50                  	db	AM_REL,		0x50
fe5d : 62767302              	db	"bvs",		1*2
fe61 : 0f70                  	db	AM_REL,		0x70
fe63 : 6a6d7004              	db	"jmp",		2*2
fe67 : 014c                  	db	AM_ABS,		0x4c
fe69 : 0a6c                  	db	AM_ABSIND,	0x6c
fe6b : 6a737202              	db	"jsr",		1*2
fe6f : 0120                  	db	AM_ABS,		0x20
                             	
fe71 : 6e6f7002              	db	"nop",		1*2
fe75 : 0dea                  	db	AM_IMP,		0xea
fe77 : 70686102              	db	"pha",		1*2
fe7b : 0d48                  	db	AM_IMP,		0x48
fe7d : 70687002              	db	"php",		1*2
fe81 : 0d08                  	db	AM_IMP,		0x08
fe83 : 706c6102              	db	"pla",		1*2
fe87 : 0d68                  	db	AM_IMP,		0x68
fe89 : 706c7002              	db	"plp",		1*2
fe8d : 0d28                  	db	AM_IMP,		0x28
fe8f : 72746902              	db	"rti",		1*2
fe93 : 0d40                  	db	AM_IMP,		0x40
fe95 : 72747302              	db	"rts",		1*2
fe99 : 0d60                  	db	AM_IMP,		0x60
fe9b : 74617802              	db	"tax",		1*2
fe9f : 0daa                  	db	AM_IMP,		0xaa
fea1 : 74617902              	db	"tay",		1*2
fea5 : 0da8                  	db	AM_IMP,		0xa8
fea7 : 74737802              	db	"tsx",		1*2
feab : 0dba                  	db	AM_IMP,		0xba
fead : 74786102              	db	"txa",		1*2
feb1 : 0d8a                  	db	AM_IMP,		0x8a
feb3 : 74787302              	db	"txs",		1*2
feb7 : 0d9a                  	db	AM_IMP,		0x9a
feb9 : 74796102              	db	"tya",		1*2
febd : 0d98                  	db	AM_IMP,		0x98	
                             	
                             	;* Terminates with a zero
febf : 00                    	db	0
                             
                             	include	"dflat/asmjmptab.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  ASMJUMPTAB.S
                             ;*  Runtime token jump table for assembler.
                             ;*  dflat uses four key tables to tokenise and ru
                             ;*  - df_tokensyms    - table of token symbols
                             ;*  - df_tk_tokentype - table of token types
                             ;*  - df_tk_tokenjmp  - table of tokenising routi
                             ;*  - df_rt_tokenjmp  - table of runtime routines
                             ;*  The key is the token symbols.  When a line is
                             ;*  in to the raw (untokenised) buffer, df_tokens
                             ;*  used to identify tokens.  The position of the
AS65 Assembler for R6502 [1.42].                                     Page  286
-------------------------------- bank\bank0.s --------------------------------

                             ;*  token is used to then look up type and jump v
                             ;*  in the other tables.
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code  
                             
                             ; Tokeniser jump table
                             ; Only directives needed as all opcodes are handl
                             ; through a single routine
fec0 :                       df_tk_asm_tokenjmp
fec0 : 5fde                  	dw	df_tk_asm_org
fec2 : 5fde                  	dw	df_tk_asm_opt
fec4 : c1dd                  	dw	df_tk_asm_db
fec6 : c1dd                  	dw	df_tk_asm_dw
fec8 : 5fde                  	dw	df_tk_asm_ds
                             
feca :                       df_rt_asm_tokenjmp
feca : baf9                  	dw	df_rt_asm_org
fecc : ccf9                  	dw	df_rt_asm_opt
fece : d4f9                  	dw	df_rt_asm_db
fed0 : d7f9                  	dw	df_rt_asm_dw
fed2 : 4ffa                  	dw	df_rt_asm_ds
                             
                             
                             ;****************************************
                             ;* as_init
                             ;* Initialise assembler settings
                             ;****************************************
fed4 :                       asm_init
                             	; Zero the PC
fed4 : a900             [ 2] 	lda #0
fed6 : 8599             [ 3] 	sta df_asmpc
fed8 : 859a             [ 3] 	sta df_asmpc+1
                             	; Zero the option
feda : 859b             [ 3] 	sta df_asmopt
fedc : 60               [ 6] 	rts
                             
fedd :                       mod_sz_asm_e
                             
fedd :                       mod_sz_language_e
                             	; End of Code
fedd :                       _code_end
                             
No errors in pass 2.
Wrote binary from address $c000 through $ffff.
Total size 16384 bytes.
