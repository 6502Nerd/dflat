AS65 Assembler for R6502 [1.42].                                     Page    1
-------------------------------- bank\bank0.s --------------------------------

-------------------------------- Symbol Table --------------------------------

              Symbol   Value        Decimal

                 ACR : $000b             11   *
              AM_ABS : $0001              1   *
           AM_ABSIND : $000a             10   *
          AM_ABSINDX : $000b             11   *
             AM_ABSX : $0002              2   *
             AM_ABSY : $0003              3   *
              AM_ACC : $000d             13   *
              AM_DIR : $0010             16   *
              AM_IMM : $000c             12   *
              AM_IMP : $000d             13   *
             AM_NONE : $0000              0   *
              AM_REL : $000f             15   *
               AM_ZP : $0004              4   *
            AM_ZPIND : $0007              7   *
           AM_ZPINDX : $0008              8   *
           AM_ZPINDY : $0009              9   *
              AM_ZPX : $0005              5   *
              AM_ZPY : $0006              6   *
            asm_init : $ffe5          65509
               BANK0 : $0001              1
             bcd_str : $c3a3          50083
          bcd_to_str : $c396          50070
      bin_to_bcd_bit : $c378          50040
              buf_ef : $003c             60
              buf_hi : $003a             58
              buf_lo : $0039             57
              buf_sz : $003b             59
     CMD_ERR_NOERROR : $0000              0   *
    CMD_ERR_NOTFOUND : $0001              1   *
        CMD_ERR_PARM : $0002              2   *
         CMD_ERR_VAL : $0003              3   *
           CRSR_DOWN : $000a             10   *
           CRSR_LEFT : $0008              8   *
          CRSR_RIGHT : $0009              9   *
             CRSR_UP : $000b             11   *
           CTRL_CAPS : $0014             20   *
        call_irq_brk : $c0da          49370
     call_irq_master : $c0d7          49367
   call_irq_usercia0 : $c0dd          49373
       cmd_check_cmd : $d2e2          53986
         cmd_check_d : $d2f5          54005
         cmd_check_s : $d2fc          54012
         cmd_dumpmem : $d32f          54063
    cmd_dumpmemASCII : $d355          54101
      cmd_dumpmemFin : $d38a          54154
   cmd_dumpmem_ascii : $d367          54119
   cmd_dumpmem_block : $d335          54069
    cmd_dumpmem_byte : $d346          54086
  cmd_dump_skip_ctrl : $d371          54129
   cmd_dump_skip_del : $d376          54134
           cmd_error : $d2ea          53994
       cmd_find_parm : $d3d9          54233
              cmd_hi : $0095            149   *
          cmd_incmem : $d391          54161
              cmd_lo : $0094            148   *
   cmd_next_parm_err : $d3e5          54245
       cmd_not_found : $d303          54019
           cmd_parse : $d2f4          54004
AS65 Assembler for R6502 [1.42].                                     Page    2
-------------------------------- bank\bank0.s --------------------------------

      cmd_parse_byte : $d3aa          54186
  cmd_parse_byte_err : $d3c4          54212
 cmd_parse_byte_errp : $d3c3          54211
 cmd_parse_next_parm : $d3d8          54232
      cmd_parse_word : $d3c6          54214
            cmd_peek : $d398          54168
            cmd_poke : $d3a1          54177
           cmd_ready : $d2ce          53966
          cmd_setmem : $d309          54025
     cmd_setmem_byte : $d30e          54030
      cmd_setmem_err : $d32d          54061
        cmd_word_err : $d3d6          54230
        command_line : $d2ce          53966
       con_bin_digit : $c254          49748
        con_bin_done : $c26a          49770
         con_bin_err : $c274          49780
         con_bin_jmp : $c1f1          49649
        con_bin_to_a : $c24c          49740
    con_bin_to_a_int : $c250          49744
         con_dec_jmp : $c1e5          49637
        con_dec_to_a : $c276          49782
    con_dec_to_a_int : $c27a          49786
       con_hex_digit : $c215          49685
        con_hex_done : $c242          49730
         con_hex_err : $c240          49728
         con_hex_jmp : $c1eb          49643
  con_hex_skip_x_f_1 : $c222          49698
        con_hex_to_a : $c20d          49677
    con_hex_to_a_int : $c211          49681
           con_n_err : $c1f4          49652
       con_n_not_dec : $c1e8          49640
       con_n_not_hex : $c1ee          49646
          con_n_to_a : $c1d4          49620
   con_n_to_a_detect : $c1f6          49654
                DDRA : $0003              3   *
                DDRB : $0002              2   *
         DFERR_ABORT : $0012             18   *
         DFERR_BREAK : $000d             13   *
           DFERR_DIM : $0003              3   *
         DFERR_FNAME : $000b             11   *
     DFERR_IMMEDIATE : $0007              7   *
       DFERR_NEXTFOR : $000a             10   *
        DFERR_NODATA : $000e             14   *
          DFERR_NOIF : $0009              9   *
        DFERR_NOLINE : $0010             16   *
         DFERR_NOORG : $0014             20   *
        DFERR_NOPROC : $0005              5   *
            DFERR_OK : $0000              0   *
      DFERR_PROCPARM : $0006              6   *
      DFERR_QUANTITY : $0013             19   *
        DFERR_RETURN : $0011             17   *
       DFERR_STRLONG : $000c             12   *
        DFERR_SYNTAX : $0001              1   *
      DFERR_TYPEMISM : $0002              2   *
    DFERR_UNCLOSEDIF : $0008              8   *
         DFERR_UNTIL : $0004              4   *
          DFERR_WEND : $000f             15   *
          DFRT_ABORT : $0089            137   *
            DFRT_ASM : $0097            151   *
           DFRT_DATA : $0096            150   *
            DFRT_DEF : $0086            134   *
           DFRT_ELSE : $0093            147   *
AS65 Assembler for R6502 [1.42].                                     Page    3
-------------------------------- bank\bank0.s --------------------------------

         DFRT_ELSEIF : $0095            149   *
         DFRT_ENDDEF : $0087            135   *
          DFRT_ENDIF : $0094            148   *
            DFRT_FOR : $008e            142   *
             DFRT_IF : $0092            146   *
           DFRT_NEXT : $008f            143   *
         DFRT_REPEAT : $008c            140   *
         DFRT_RETURN : $0088            136   *
           DFRT_WEND : $0091            145   *
          DFRT_WHILE : $0090            144   *
            DFST_INT : $0001              1   *
            DFST_STR : $0080            128   *
            DFTK_BYT : $0020             32   *
         DFTK_BYTBIN : $0007              7   *
         DFTK_BYTDEC : $0005              5   *
         DFTK_BYTHEX : $0006              6   *
            DFTK_CHR : $0000              0   *
            DFTK_EOL : $0000              0   *
         DFTK_ESCVAL : $0020             32   *
            DFTK_FLT : $0080            128   *
             DFTK_FN : $0002              2   *
            DFTK_INT : $0010             16   *
         DFTK_INTBIN : $000b             11   *
         DFTK_INTDEC : $0009              9   *
         DFTK_INTHEX : $000a             10   *
             DFTK_KW : $0001              1   *
         DFTK_LINLEN : $0000              0   *
         DFTK_LINNUM : $0001              1   *
             DFTK_OP : $0008              8   *
          DFTK_OPMSK : $0007              7   *
           DFTK_PROC : $0012             18   *
          DFTK_RESVC : $000c             12   *
          DFTK_RESVD : $000d             13   *
          DFTK_RESVE : $000e             14   *
          DFTK_RESVF : $000f             15   *
          DFTK_RESV1 : $0001              1   *
          DFTK_RESV2 : $0002              2   *
          DFTK_RESV3 : $0003              3   *
          DFTK_RESV4 : $0004              4   *
          DFTK_RESV8 : $0008              8   *
          DFTK_RTMSK : $00f8            248   *
          DFTK_STEND : $001f             31   *
            DFTK_STR : $0040             64   *
         DFTK_STRLIT : $0010             16   *
          DFTK_STROP : $0004              4   *
          DFTK_TOKEN : $0080            128   *
            DFTK_VAR : $0011             17   *
        DFTK_VARPARM : $0026             38   *
          DFVVT_ARRY : $0080            128   *
           DFVVT_BYT : $0002              2   *
          DFVVT_DIM1 : $0003              3   *
          DFVVT_DIM2 : $0004              4   *
           DFVVT_FLT : $0008              8   *
            DFVVT_HI : $0002              2   *
           DFVVT_INT : $0001              1   *
            DFVVT_LO : $0001              1   *
          DFVVT_PROC : $0040             64   *
           DFVVT_STR : $0004              4   *
            DFVVT_SZ : $0008              8   *
          DFVVT_TYPE : $0000              0   *
           DF_MEMTOP : $9800          38912   *
        DF_PROGSTART : $0713           1811   *
AS65 Assembler for R6502 [1.42].                                     Page    4
-------------------------------- bank\bank0.s --------------------------------

          dflat_zp_e : $00ab            171
          dflat_zp_s : $005b             91
     dflat_zp_save_e : $00a1            161
     dflat_zp_save_s : $005b             91
          df_asmadmd : $009c            156
           df_asmlen : $00a0            160
         df_asmopcde : $009d            157
         df_asmoprnd : $009e            158
           df_asmopt : $009b            155
            df_asmpc : $0099            153
  df_asm_altaddrmode : $fd94          64916
       df_asm_length : $fd83          64899
    df_asm_tokensyms : $fda5          64933
            df_brkpc : $0062             98
           df_brkval : $0064            100
         df_checkkey : $005b             91
         df_checkmsk : $005c             92
            df_clear : $f798          63384
          df_currdat : $0094            148
          df_currlin : $0086            134
         df_curstidx : $0080            128
           df_datoff : $0096            150
           df_eolidx : $007e            126
           df_exeoff : $0088            136
           df_ifnest : $0093            147
            df_immed : $005e             94
             df_init : $f78a          63370
          df_initrun : $e01b          57371
       df_lexer_line : $d995          55701
  df_lexer_skip_lnum : $d9b6          55734
          df_linbuff : $0400           1024
          df_lineidx : $0092            146
          df_lineptr : $0090            144
           df_linoff : $007c            124
           df_memtop : $0611           1553
          df_msg_acc : $f96c          63852
           df_msg_pc : $f968          63848
         df_msg_xreg : $f96f          63855
         df_msg_yreg : $f972          63858
          df_nextlin : $0089            137
        df_next_done : $ea06          59910
         df_nxtstidx : $007f            127
     df_ost_peekType : $f760          63328
       df_ost_popInt : $f766          63334
     df_ost_popParmX : $f745          63301
       df_ost_popPtr : $f76e          63342
       df_ost_popStr : $f76a          63338
      df_ost_pushInt : $f732          63282
     df_ost_pushIntA : $f736          63286
    df_ost_pushParmX : $f71c          63260
      df_ost_pushPtr : $f741          63297
      df_ost_pushStr : $f73d          63293
          df_parmtop : $0077            119
               df_pc : $0060             96
    df_pg_check_line : $deb0          57008
df_pg_check_next_line : $de99          56985
df_pg_copyinputtolinbuff : $df66          57190
  df_pg_delete_block : $df26          57126
   df_pg_delete_byte : $df2a          57130
df_pg_delete_next_byte : $df4d          57165
         df_pg_dflat : $df70          57200
          df_pg_done : $dfaf          57263
AS65 Assembler for R6502 [1.42].                                     Page    5
-------------------------------- bank\bank0.s --------------------------------

     df_pg_find_line : $de8d          56973
    df_pg_getcommand : $df86          57222
     df_pg_inputline : $df5d          57181
  df_pg_inputline_ok : $df66          57190
 df_pg_insertlinbyte : $e00b          57355
    df_pg_insertline : $dfec          57324
  df_pg_insert_block : $deea          57066
   df_pg_insert_byte : $def6          57078
df_pg_insert_next_byte : $df16          57110
   df_pg_line_number : $dfcc          57292
       df_pg_nothing : $dfcb          57291
        df_pg_prompt : $df7b          57211
    df_pg_prompt_msg : $e014          57364
 df_pg_skip_del_line : $dfe2          57314
      df_pg_tokenise : $dfb1          57265
           df_prgend : $0067            103
          df_prgstrt : $0065            101
         df_procargs : $008c            140
          df_procloc : $008d            141
         df_procmode : $008b            139
          df_procptr : $008e            142
df_pr_line_gt_target : $dea5          56997
     df_pr_line_next : $ded8          57048
  df_pr_line_nomatch : $deca          57034
              df_raw : $0400           1024
              df_rnd : $0097            151
     df_rst_peekByte : $f6fa          63226
      df_rst_popByte : $f6f1          63217
      df_rst_popWord : $f70e          63246
     df_rst_pushByte : $f6e8          63208
     df_rst_pushWord : $f700          63232
          df_rtspace : $0500           1280
           df_rtstck : $0500           1280
           df_rtstop : $0076            118
         df_rt_abort : $f53d          62781
           df_rt_add : $e66f          58991
         df_rt_aequb : $e74b          59211
      df_rt_aequbFin : $e755          59221
           df_rt_and : $e71e          59166
  df_rt_array_exists : $e30c          58124
     df_rt_arry_parm : $e210          57872
    df_rt_arry_parm2 : $e217          57879
df_rt_arry_parm2_arry2 : $e22f          57903
df_rt_arry_parm2_skiparry2 : $e236          57910
df_rt_arry_parm2_term : $e21f          57887
           df_rt_asc : $f512          62738
           df_rt_asl : $e6f8          59128
        df_rt_aslbit : $e6fe          59134
       df_rt_asldone : $e708          59144
    df_rt_asm_ABSREL : $fcd4          64724
    df_rt_asm_AM_ABS : $fceb          64747
   df_rt_asm_AM_ABSX : $fcf8          64760
   df_rt_asm_AM_ABSY : $fce6          64742
    df_rt_asm_AM_IMM : $fcfd          64765
    df_rt_asm_AM_IMP : $fccf          64719
df_rt_asm_AM_INDIRECT : $fd07          64775
    df_rt_asm_AM_REL : $fcf5          64757
  df_rt_asm_AM_ZPIND : $fd2d          64813
df_rt_asm_AM_ZPINDORY : $fd1d          64797
  df_rt_asm_addrmode : $fcb3          64691
  df_rt_asm_assemble : $fa68          64104
df_rt_asm_assemble_done : $fa7c          64124
AS65 Assembler for R6502 [1.42].                                     Page    6
-------------------------------- bank\bank0.s --------------------------------

 df_rt_asm_check_alt : $fb7c          64380
   df_rt_asm_command : $fa7d          64125
      df_rt_asm_data : $fadf          64223
 df_rt_asm_data_done : $fb1d          64285
 df_rt_asm_data_next : $fb13          64275
df_rt_asm_data_write : $fb1e          64286
df_rt_asm_data_write_err : $fb4d          64333
df_rt_asm_data_write_hi : $fb38          64312
df_rt_asm_data_write_skip1 : $fb21          64289
df_rt_asm_data_write_skip2 : $fb3c          64316
        df_rt_asm_db : $facf          64207
  df_rt_asm_db_start : $fad9          64217
df_rt_asm_decode_token : $f0a2          61602
df_rt_asm_decode_token_done : $f0fe          61694
df_rt_asm_decode_token_found : $f0b9          61625
df_rt_asm_decode_token_keyword : $f0c0          61632
df_rt_asm_decode_token_ws : $f0a9          61609
       df_rt_asm_dir : $fa8f          64143
  df_rt_asm_do_label : $fa79          64121
        df_rt_asm_ds : $fb4f          64335
        df_rt_asm_dw : $fad5          64213
    df_rt_asm_encode : $fbb5          64437
df_rt_asm_encode_print : $fc1f          64543
df_rt_asm_encode_relfar : $fbed          64493
df_rt_asm_encode_relpos : $fbe9          64489
df_rt_asm_encode_skiprel : $fbf1          64497
df_rt_asm_encode_writebyte : $fc0d          64525
df_rt_asm_encode_writeword : $fc15          64533
df_rt_asm_find_addr_mode : $fd3b          64827
df_rt_asm_find_addr_mode_err : $fd50          64848
df_rt_asm_find_addr_mode_loop : $fd41          64833
df_rt_asm_get_operand : $fd30          64816
     df_rt_asm_label : $faa1          64161
      df_rt_asm_mnem : $fb6d          64365
  df_rt_asm_mnem_chk : $fb90          64400
 df_rt_asm_mnem_done : $fb9e          64414
  df_rt_asm_mnem_err : $fbb3          64435
  df_rt_asm_mnem_try : $fb73          64371
       df_rt_asm_opt : $fac7          64199
       df_rt_asm_org : $fab4          64180
   df_rt_asm_printCH : $fc8d          64653
   df_rt_asm_printCR : $fc83          64643
 df_rt_asm_printline : $fc9b          64667
  df_rt_asm_printOPC : $fc52          64594
  df_rt_asm_printOPR : $fc68          64616
df_rt_asm_printOPR_1 : $fc7d          64637
   df_rt_asm_printPC : $fc41          64577
  df_rt_asm_printSPC : $fc5e          64606
df_rt_asm_print_mmen : $fc31          64561
 df_rt_asm_print_rts : $fc40          64576
df_rt_asm_skip_to_sym : $fd53          64851
df_rt_asm_skip_to_sym_done : $fd82          64898
df_rt_asm_skip_to_sym_end : $fd71          64881
df_rt_asm_skip_to_sym_next : $fd62          64866
    df_rt_asm_string : $faf6          64246
 df_rt_asm_string_ch : $fafd          64253
  df_rt_asm_tokenjmp : $ffdb          65499
        df_rt_assign : $ed88          60808
    df_rt_assign_str : $ed95          60821
         df_rt_asubb : $e756          59222
      df_rt_asubbFin : $e763          59235
   df_rt_binlen_skip : $f312          62226
AS65 Assembler for R6502 [1.42].                                     Page    7
-------------------------------- bank\bank0.s --------------------------------

         df_rt_bload : $f20d          61965
    df_rt_bload_addr : $f230          62000
         df_rt_bsave : $f240          62016
   df_rt_bsave_parms : $f2f0          62192
         df_rt_bsuba : $e764          59236
      df_rt_bsubaFin : $e771          59249
          df_rt_call : $f417          62487
       df_rt_calljsr : $f428          62504
     df_rt_check_pos : $e9f9          59897
   df_rt_check_while : $e89d          59549
           df_rt_chr : $f46b          62571
        df_rt_circle : $ecaf          60591
           df_rt_cls : $ec00          60416
         df_rt_comeq : $e7cc          59340
         df_rt_comgt : $e7c3          59331
        df_rt_comgte : $e7de          59358
         df_rt_comlt : $e7ba          59322
        df_rt_comlte : $e7d5          59349
       df_rt_comment : $ed99          60825
         df_rt_comne : $e7e7          59367
       df_rt_copyStr : $e1cb          57803
    df_rt_copyStr_ch : $e1cd          57805
  df_rt_copyStr_done : $e1d6          57814
       df_rt_copy_fn : $f1a4          61860
        df_rt_cursor : $ec77          60535
          df_rt_data : $ed99          60825
 df_rt_datastatement : $ea66          60006
   df_rt_datlinstart : $ea5e          59998
    df_rt_datnextlin : $ea6c          60012
      df_rt_datumerr : $ea96          60054
    df_rt_dec_binlen : $f30c          62220
          df_rt_deek : $f32e          62254
           df_rt_def : $f61f          63007
  df_rt_def_find_var : $f62b          63019
   df_rt_def_got_var : $f63f          63039
df_rt_def_got_varparm : $f63c          63036
df_rt_def_initialise_parm : $f67e          63102
  df_rt_def_load_var : $f65d          63069
df_rt_def_load_var_done : $f69a          63130
df_rt_def_load_var_int : $f68c          63116
df_rt_def_load_var_int_skip : $f68f          63119
 df_rt_def_parm_done : $f655          63061
           df_rt_dim : $eb77          60279
     df_rt_dim2_mul2 : $ebde          60382
       df_rt_dim2_nz : $ebc9          60361
     df_rt_dim_alloc : $ebb8          60344
      df_rt_dim_done : $ebfd          60413
       df_rt_dim_err : $ebfe          60414
   df_rt_dim_findesc : $eb7a          60282
 df_rt_dim_next_byte : $ebf8          60408
           df_rt_div : $e6b6          59062
      df_rt_doassign : $ed8b          60811
          df_rt_doke : $f0ff          61695
        df_rt_doline : $ecc8          60616
       df_rt_dosound : $f144          61764
       df_rt_do_else : $e96b          59755
       df_rt_elapsed : $f3fc          62460
          df_rt_else : $e919          59673
        df_rt_elseif : $e919          59673
        df_rt_enddef : $f6a1          63137
         df_rt_endif : $e914          59668
           df_rt_eor : $e73c          59196
AS65 Assembler for R6502 [1.42].                                     Page    8
-------------------------------- bank\bank0.s --------------------------------

           df_rt_eos : $ed9b          60827
      df_rt_eos_true : $edad          60845
            df_rt_eq : $e7a6          59302
        df_rt_escjmp : $e642          58946
      df_rt_eval_byt : $e327          58151
   df_rt_eval_bytbin : $e1e4          57828
   df_rt_eval_bytdec : $e1e4          57828
   df_rt_eval_bythex : $e1e4          57828
      df_rt_eval_chr : $e1e4          57828
      df_rt_eval_esc : $e113          57619
  df_rt_eval_esc_tab : $e122          57634
   df_rt_eval_intbin : $e1e4          57828
   df_rt_eval_intdec : $e1e4          57828
   df_rt_eval_inthex : $e1e4          57828
     df_rt_eval_lvar : $e274          57972
   df_rt_eval_lvskip : $e24e          57934
     df_rt_eval_proc : $e339          58169
 df_rt_eval_proc_err : $e346          58182
      df_rt_eval_ptr : $e332          58162
 df_rt_eval_reserved : $e1f0          57840
   df_rt_eval_strlit : $e1f2          57842
df_rt_eval_strlit_ch : $e206          57862
df_rt_eval_strlit_done : $e20d          57869
      df_rt_eval_var : $e23b          57915
df_rt_eval_var_dim2adj : $e2be          58046
df_rt_eval_var_dim2adjx : $e2c8          58056
df_rt_eval_var_dim2adjy : $e2c3          58051
df_rt_eval_var_do_arry : $e28f          57999
df_rt_eval_var_nomult : $e2e1          58081
df_rt_eval_var_notarry : $e264          57956
 df_rt_eval_var_push : $e2fb          58107
df_rt_eval_var_simple : $e281          57985
  df_rt_eval_var_str : $e331          58161
   df_rt_exec_ctrl_c : $e484          58500
   df_rt_exec_ctrl_z : $e488          58504
      df_rt_exec_end : $e482          58498
 df_rt_exec_find_tok : $e42c          58412
df_rt_exec_found_tok : $e431          58417
 df_rt_exec_init_ptr : $e425          58405
     df_rt_exec_jump : $e48a          58506
   df_rt_exec_no_key : $e45b          58459
     df_rt_exec_proc : $f5d5          62933
     df_rt_exec_stat : $e41f          58399
         df_rt_false : $e778          59256
  df_rt_file_cleanup : $f1cd          61901
     df_rt_file_errc : $f1b7          61879
 df_rt_findelseendif : $e8dc          59612
    df_rt_findescval : $e541          58689
df_rt_findescval_loop : $e544          58692
      df_rt_findproc : $e4f9          58617
  df_rt_findproc_cmd : $e50b          58635
  df_rt_findproc_err : $e53f          58687
df_rt_findproc_nextstat : $e52b          58667
      df_rt_findwend : $e86a          59498
    df_rt_fname_case : $f1a6          61862
           df_rt_for : $e96e          59758
 df_rt_generate_lvar : $ed65          60773
           df_rt_get : $f3c8          62408
  df_rt_getbin_parms : $f2cf          62159
df_rt_getbin_parms_loop : $f2d1          62161
     df_rt_getdatatk : $ea7c          60028
       df_rt_getlvar : $e55b          58715
AS65 Assembler for R6502 [1.42].                                     Page    9
-------------------------------- bank\bank0.s --------------------------------

       df_rt_getnval : $e088          57480
      df_rt_get2Ints : $e348          58184
      df_rt_get2Strs : $e357          58199
      df_rt_get_push : $f3db          62427
     df_rt_get_pushp : $f3da          62426
      df_rt_get_sync : $f3cf          62415
            df_rt_gt : $e792          59282
           df_rt_gte : $e79c          59292
      df_rt_gte_calc : $e79f          59295
           df_rt_hex : $f481          62593
         df_rt_himem : $ec7d          60541
         df_rt_hires : $ec8c          60556
            df_rt_if : $e92b          59691
         df_rt_ifcmd : $e8df          59615
        df_rt_ifelse : $e8fd          59645
        df_rt_ifeval : $e92d          59693
  df_rt_ifskipelseif : $e8f4          59636
       df_rt_if_done : $e918          59672
      df_rt_if_found : $e90a          59658
      df_rt_if_match : $e8d4          59604
       df_rt_if_stat : $e8be          59582
   df_rt_if_stat_err : $e8d2          59602
     df_rt_init_done : $e087          57479
 df_rt_init_filename : $f198          61848
 df_rt_init_stat_ptr : $e40a          58378
      df_rt_init_vvt : $e044          57412
 df_rt_init_vvt_skip : $e078          57464
 df_rt_init_vvt_slot : $e04e          57422
df_rt_init_vvt_slot_undim : $e05a          57434
           df_rt_ink : $ec95          60565
         df_rt_input : $eb0b          60171
     df_rt_input_err : $eb45          60229
     df_rt_input_num : $eb2e          60206
     df_rt_input_str : $eb26          60198
    df_rt_ldtokenise : $f1f5          61941
          df_rt_left : $f4b4          62644
           df_rt_len : $f504          62724
          df_rt_line : $eccf          60623
        df_rt_lineto : $ecc1          60609
          df_rt_list : $ee9a          61082
  df_rt_listcheckvnt : $ee00          60928
   df_rt_listgotnext : $ee2f          60975
   df_rt_listnextvnt : $ee28          60968
   df_rt_listpn_done : $ee41          60993
       df_rt_listprg : $eec1          61121
    df_rt_listprgend : $eec9          61129
      df_rt_listproc : $ee42          60994
    df_rt_listprocch : $ee0c          60940
    df_rt_listproccr : $ee18          60952
 df_rt_listprocnames : $edf4          60916
 df_rt_listprocpause : $ee1e          60958
    df_rt_listp_copy : $ee49          61001
    df_rt_listp_done : $ee8e          61070
 df_rt_listp_findcmd : $ee74          61044
 df_rt_listp_findend : $ee6d          61037
df_rt_listp_notfound : $ee98          61080
      df_rt_listwait : $ee25          60965
      df_rt_list_all : $eead          61101
 df_rt_list_all_line : $ef12          61202
   df_rt_list_decode : $ef1e          61214
df_rt_list_decode_esc : $ef50          61264
df_rt_list_decode_token : $f063          61539
AS65 Assembler for R6502 [1.42].                                     Page   10
-------------------------------- bank\bank0.s --------------------------------

df_rt_list_decode_token_normal : $f06a          61546
   df_rt_list_donvvt : $f055          61525
df_rt_list_do_decode_tkn : $f071          61553
   df_rt_list_escval : $ef2e          61230
  df_rt_list_findvvt : $effd          61437
df_rt_list_find_asm_sym : $f0cb          61643
 df_rt_list_find_sym : $f07a          61562
   df_rt_list_gotvvt : $f02c          61484
df_rt_list_gotvvtend : $f016          61462
df_rt_list_got_asm_sym : $f0ec          61676
df_rt_list_got_last_sym : $f08c          61580
  df_rt_list_got_sym : $f090          61584
     df_rt_list_line : $eecf          61135
df_rt_list_line_cont : $eee9          61161
 df_rt_list_line_fin : $ef0f          61199
df_rt_list_line_only : $ef15          61205
df_rt_list_line_only_fin : $ef11          61201
    df_rt_list_linno : $eeb4          61108
   df_rt_list_linnum : $f056          61526
  df_rt_list_nexttok : $ef37          61239
df_rt_list_next_asm_ch : $f0d1          61649
  df_rt_list_next_ch : $f080          61568
df_rt_list_next_line : $eef0          61168
    df_rt_list_pause : $eede          61150
  df_rt_list_synckey : $eeda          61146
    df_rt_list_token : $ef34          61236
   df_rt_list_vvtend : $f009          61449
          df_rt_load : $f2b3          62131
       df_rt_loadbin : $f2dc          62172
  df_rt_loadbin_byte : $f2de          62174
   df_rt_loadbin_inc : $f2e8          62184
      df_rt_loadline : $f1db          61915
         df_rt_local : $eb47          60231
    df_rt_local_done : $eb73          60275
 df_rt_local_findesc : $eb4e          60238
           df_rt_lsr : $e70b          59147
        df_rt_lsrbit : $e711          59153
       df_rt_lsrdone : $e71b          59163
       df_rt_lst_bin : $efbf          61375
       df_rt_lst_bit : $efc9          61385
 df_rt_lst_bit_skip0 : $efd3          61395
    df_rt_lst_bytbin : $efb1          61361
    df_rt_lst_bythex : $ef8c          61324
       df_rt_lst_chr : $ef6f          61295
   df_rt_lst_hex_pre : $ef82          61314
    df_rt_lst_intbin : $efba          61370
    df_rt_lst_intdec : $efdd          61405
    df_rt_lst_inthex : $ef9f          61343
    df_rt_lst_lo_hex : $ef8f          61327
      df_rt_lst_proc : $efe8          61416
  df_rt_lst_reserved : $ef6e          61294
    df_rt_lst_strlit : $f03c          61500
  df_rt_lst_strlitch : $f043          61507
 df_rt_lst_strlitdon : $f04e          61518
       df_rt_lst_var : $efe8          61416
            df_rt_lt : $e77e          59262
           df_rt_lte : $e788          59272
      df_rt_lte_calc : $e78b          59275
           df_rt_mem : $f370          62320
      df_rt_mem_calc : $f3b3          62387
      df_rt_mem_free : $f37d          62333
       df_rt_mem_prg : $f390          62352
AS65 Assembler for R6502 [1.42].                                     Page   11
-------------------------------- bank\bank0.s --------------------------------

       df_rt_mem_var : $f3a3          62371
           df_rt_mid : $f4e4          62692
           df_rt_mod : $e6d7          59095
       df_rt_monitor : $e83f          59455
          df_rt_mult : $e695          59029
         df_rt_music : $f154          61780
       df_rt_nassign : $ed48          60744
            df_rt_ne : $e7b0          59312
         df_rt_neval : $e08e          57486
    df_rt_neval_done : $e0dc          57564
   df_rt_neval_donow : $e0fd          57597
     df_rt_neval_esc : $e0bb          57531
df_rt_neval_nextbyte : $e0e2          57570
    df_rt_neval_optk : $e091          57489
 df_rt_neval_process : $e0d3          57555
  df_rt_neval_pushOp : $e10e          57614
      df_rt_neval_tk : $e0c1          57537
   df_rt_neval_tk_fn : $e0dd          57565
   df_rt_neval_tk_op : $e0e7          57575
  df_rt_neval_tk_opp : $e0e6          57574
           df_rt_new : $e842          59458
          df_rt_next : $e9ac          59820
     df_rt_nextdatum : $ea4e          59982
      df_rt_nextstat : $e4a2          58530
   df_rt_nextstat_dn : $e4cc          58572
  df_rt_nextstat_err : $e4c8          58568
   df_rt_nextstat_ln : $e4b7          58551
    df_rt_next_check : $e9fc          59900
      df_rt_next_err : $ea09          59913
      df_rt_noif_err : $e929          59689
df_rt_openforbinload : $f204          61956
df_rt_openforbinsave : $f1fb          61947
            df_rt_or : $e72d          59181
         df_rt_paper : $ec9b          60571
    df_rt_parm_2ints : $e366          58214
    df_rt_parm_3ints : $e37d          58237
    df_rt_parm_4ints : $e3a0          58272
    df_rt_parm_5ints : $e3cf          58319
    df_rt_parse_file : $f1af          61871
          df_rt_peek : $f331          62257
         df_rt_pixel : $f3ed          62445
       df_rt_pixmode : $ec8f          60559
          df_rt_play : $f169          61801
          df_rt_plot : $ec03          60419
       df_rt_plotstr : $ec36          60470
     df_rt_plotstrch : $ec47          60487
   df_rt_plotstrdone : $ec76          60534
    df_rt_plot_h_int : $ec2d          60461
    df_rt_plot_h_str : $ec64          60516
         df_rt_point : $eca5          60581
          df_rt_poke : $f10e          61710
      df_rt_pop_stat : $e4e0          58592
   df_rt_pop_stat_go : $e577          58743
         df_rt_print : $ed03          60675
       df_rt_printat : $ecf9          60665
       df_rt_println : $ed40          60736
    df_rt_print_done : $ed3d          60733
  df_rt_print_gotstr : $ed31          60721
     df_rt_print_num : $ea33          59955
     df_rt_print_str : $ea3a          59962
  df_rt_print_string : $ed37          60727
  df_rt_print_str_ch : $ea43          59971
AS65 Assembler for R6502 [1.42].                                     Page   12
-------------------------------- bank\bank0.s --------------------------------

df_rt_print_str_done : $ea4d          59981
      df_rt_print_ws : $ed06          60678
          df_rt_proc : $f57d          62845
     df_rt_proc_addr : $f5a7          62887
    df_rt_proc_local : $f6d4          63188
df_rt_proc_local_load : $f6db          63195
  df_rt_proc_parmerr : $f57b          62843
df_rt_proc_parm_done : $f5c6          62918
df_rt_proc_parm_none : $f5c7          62919
df_rt_proc_push_parm : $f5b2          62898
df_rt_proc_unloadvar : $f6b3          63155
df_rt_proc_unload_done : $f6d3          63187
  df_rt_proc_unlocal : $f6ad          63149
     df_rt_push_stat : $e4d4          58580
     df_rt_putintres : $e668          58984
          df_rt_read : $eaef          60143
      df_rt_readbyte : $f332          62258
 df_rt_readbyte_skip : $f349          62281
     df_rt_readdatum : $ea98          60056
     df_rt_read_done : $eb08          60168
 df_rt_read_find_var : $eaf1          60145
         df_rt_renum : $edaf          60847
      df_rt_renum_do : $edc3          60867
    df_rt_renum_next : $ede2          60898
      df_rt_renum_ok : $edbf          60863
  df_rt_renum_update : $edca          60874
        df_rt_repeat : $ea0b          59915
         df_rt_reset : $f319          62233
        df_rt_return : $f6a6          63142
         df_rt_right : $f4c7          62663
           df_rt_rnd : $f34c          62284
     df_rt_rnd_noeor : $f362          62306
       df_rt_rnd_set : $f369          62313
           df_rt_run : $ed9a          60826
     df_rt_run_token : $e493          58515
          df_rt_sadd : $ea32          59954
       df_rt_sassign : $ed5f          60767
          df_rt_save : $f261          62049
       df_rt_savebin : $f2ee          62190
  df_rt_savebin_byte : $f2fc          62204
   df_rt_savebin_inc : $f306          62214
          df_rt_scrn : $f3de          62430
           df_rt_seq : $e81b          59419
         df_rt_seval : $e148          57672
    df_rt_seval_copy : $e1a4          57764
    df_rt_seval_done : $e1c7          57799
     df_rt_seval_esc : $e172          57714
df_rt_seval_esc_proc : $e1c5          57797
df_rt_seval_esc_strlit : $e1bf          57791
 df_rt_seval_esc_var : $e1a0          57760
df_rt_seval_nextbyte : $e1ba          57786
    df_rt_seval_optk : $e156          57686
      df_rt_seval_tk : $e180          57728
   df_rt_seval_tk_fn : $e199          57753
   df_rt_seval_tk_op : $e195          57749
           df_rt_sgt : $e812          59410
          df_rt_sgte : $e7fd          59389
df_rt_skipinitdataptr : $ea86          60038
 df_rt_skipnestendif : $e907          59655
    df_rt_skipnestif : $e8fa          59642
       df_rt_skip_ws : $e54e          58702
  df_rt_skip_ws_loop : $e551          58705
AS65 Assembler for R6502 [1.42].                                     Page   13
-------------------------------- bank\bank0.s --------------------------------

           df_rt_slt : $e80b          59403
          df_rt_slte : $e7f0          59376
    df_rt_snd_common : $f118          61720
           df_rt_sne : $e804          59396
         df_rt_sound : $f141          61761
df_rt_sound_env_skip : $f13e          61758
   df_rt_sound_noise : $f14b          61771
       df_rt_sprchar : $f53f          62783
        df_rt_sprhit : $f567          62823
df_rt_sprhit_inactive : $f575          62837
       df_rt_sprinit : $f55e          62814
      df_rt_sprmulti : $f561          62817
        df_rt_sprpos : $f549          62793
        df_rt_sprupd : $f555          62805
         df_rt_stick : $f3c0          62400
 df_rt_strlen_common : $f42b          62507
  df_rt_strlen_count : $f431          62513
      df_rt_str_comp : $e822          59426
 df_rt_str_comp_byte : $e827          59431
   df_rt_str_comp_eq : $e83c          59452
df_rt_str_comp_false : $e7f7          59383
   df_rt_str_comp_gt : $e839          59449
   df_rt_str_comp_lt : $e836          59446
 df_rt_str_comp_true : $e7fa          59386
    df_rt_str_cpy_ch : $f44b          62539
   df_rt_str_extract : $f438          62520
           df_rt_sub : $e682          59010
          df_rt_sval : $e14c          57676
          df_rt_text : $ec89          60553
         df_rt_tload : $f1d3          61907
      df_rt_tokenjmp : $e580          58752
          df_rt_true : $e772          59250
         df_rt_tsave : $f1b9          61881
df_rt_unexpected_end : $e486          58502
         df_rt_until : $ea13          59923
df_rt_untilnext_done : $ea28          59944
     df_rt_until_err : $ea30          59952
           df_rt_val : $f525          62757
       df_rt_val_err : $f53b          62779
          df_rt_wait : $ece0          60640
  df_rt_wait_counter : $ece4          60644
   df_rt_wait_skiphi : $ecf0          60656
     df_rt_wait_tick : $ece6          60646
          df_rt_wend : $e8a8          59560
      df_rt_wend_end : $e8a6          59558
      df_rt_wend_err : $e8bc          59580
         df_rt_while : $e845          59461
     df_rt_while_cmd : $e87b          59515
    df_rt_while_done : $e855          59477
         df_sevalptr : $007a            122
    df_show_err_done : $f918          63768
     df_show_err_fin : $f8f7          63735
    df_show_err_find : $f8a2          63650
   df_show_err_found : $f8be          63678
  df_show_err_linnum : $f8de          63710
    df_show_err_skip : $f8aa          63658
               df_sp : $005f             95
          df_starend : $0074            116
         df_starstrt : $0072            114
          df_strbuff : $0078            120
           df_stridx : $0079            121
      df_str_src_end : $f460          62560
AS65 Assembler for R6502 [1.42].                                     Page   14
-------------------------------- bank\bank0.s --------------------------------

        df_st_malloc : $f772          63346
df_st_typemismatcherr : $f75e          63326
           df_symini : $0084            132
           df_symoff : $0083            131
           df_symtab : $0081            129
         df_tk_abort : $de62          56930
           df_tk_add : $de62          56930
           df_tk_and : $de62          56930
           df_tk_asc : $de32          56882
           df_tk_asl : $de62          56930
 df_tk_asm_addr_mode : $fa09          64009
df_tk_asm_addr_mode_ok : $f9f8          63992
df_tk_asm_addr_mode_1 : $fa1e          64030
df_tk_asm_addr_mode_2 : $fa28          64040
df_tk_asm_checknexttok : $f9b1          63921
df_tk_asm_checktokch : $f9b3          63923
        df_tk_asm_db : $ddcd          56781
        df_tk_asm_ds : $de68          56936
        df_tk_asm_dw : $ddcd          56781
df_tk_asm_exec_parser : $f9fa          63994
df_tk_asm_foundsymend : $f9d9          63961
  df_tk_asm_matchtok : $f9a3          63907
  df_tk_asm_mnemonic : $f998          63896
       df_tk_asm_opt : $de68          56936
       df_tk_asm_org : $de68          56936
df_tk_asm_parse_command : $f975          63861
df_tk_asm_parse_command_err : $f997          63895
df_tk_asm_parse_command_symbol : $f99e          63902
  df_tk_asm_symfound : $f9ec          63980
df_tk_asm_symnextentry : $f9ca          63946
df_tk_asm_symnomatch : $f9c8          63944
  df_tk_asm_tokenjmp : $ffd1          65489
        df_tk_assign : $dd75          56693
         df_tk_bload : $de6e          56942
          df_tk_body : $d9be          55742
         df_tk_bsave : $de78          56952
          df_tk_call : $de54          56916
      df_tk_callproc : $de25          56869
          df_tk_char : $d7b5          55221
      df_tk_char_err : $d75d          55133
         df_tk_chdir : $de68          56936
  df_tk_checknexttok : $da3b          55867
    df_tk_checktokch : $da58          55896
           df_tk_chr : $de32          56882
        df_tk_circle : $de78          56952
     df_tk_closebrkt : $de37          56887
           df_tk_cls : $de62          56930
        df_tk_colour : $de78          56952
       df_tk_comment : $dd7e          56702
  df_tk_comment_done : $dd89          56713
         df_tk_const : $d7f3          55283
     df_tk_const_err : $d813          55315
df_tk_const_try_char : $d80c          55308
 df_tk_const_try_num : $d802          55298
 df_tk_const_try_str : $d805          55301
        df_tk_cursor : $de68          56936
          df_tk_data : $ddcd          56781
     df_tk_data_done : $ddcb          56779
          df_tk_deek : $de32          56882
           df_tk_def : $de06          56838
           df_tk_del : $de68          56936
           df_tk_dim : $dde4          56804
AS65 Assembler for R6502 [1.42].                                     Page   15
-------------------------------- bank\bank0.s --------------------------------

           df_tk_dir : $de62          56930
           df_tk_div : $de62          56930
          df_tk_doke : $de6e          56942
          df_tk_done : $d9e5          55781
       df_tk_elapsed : $de3d          56893
          df_tk_else : $de62          56930
        df_tk_elseif : $de68          56936
        df_tk_enddef : $de62          56930
         df_tk_endif : $de62          56930
           df_tk_eor : $de62          56930
            df_tk_eq : $de62          56930
         df_tk_error : $dd73          56691
      df_tk_errortab : $f7cf          63439
        df_tk_error2 : $de30          56880
   df_tk_error_atpos : $f876          63606
   df_tk_error_error : $f87c          63612
  df_tk_error_inline : $f86c          63596
   df_tk_exec_parser : $da00          55808
        df_tk_expect : $d751          55121
      df_tk_expectok : $d74f          55119
  df_tk_expecttokret : $d76a          55146
    df_tk_expect_tok : $d75f          55135
df_tk_expect_tok_err : $d76b          55147
df_tk_expect_tok_fatal : $d771          55153
    df_tk_expression : $d951          55633
     df_tk_expre_err : $d95c          55644
     df_tk_expr_more : $ddd2          56786
           df_tk_for : $de0c          56844
      df_tk_for_done : $de23          56867
   df_tk_foundsymend : $da87          55943
           df_tk_get : $de32          56882
       df_tk_get_buf : $d6cc          54988
  df_tk_get_buf_null : $d6d6          54998
            df_tk_gt : $de62          56930
           df_tk_gte : $de62          56930
         df_tk_hchar : $de78          56952
           df_tk_hex : $de32          56882
         df_tk_himem : $de68          56936
         df_tk_hires : $de62          56930
            df_tk_if : $de68          56936
           df_tk_imm : $fa3e          64062
      df_tk_indirect : $fa41          64065
 df_tk_indirect_done : $fa66          64102
    df_tk_indirect_y : $fa55          64085
           df_tk_ink : $de68          56936
         df_tk_input : $dddb          56795
       df_tk_isalpha : $d714          55060
    df_tk_isalphanum : $d721          55073
 df_tk_isalpha_false : $d711          55057
         df_tk_isbin : $d6f5          55029
    df_tk_isbin_true : $d6fe          55038
       df_tk_isdigit : $d6ea          55018
 df_tk_isdigit_false : $d6f3          55027
         df_tk_isEOS : $d963          55651
         df_tk_ishex : $d6ff          55039
   df_tk_ishex_false : $d711          55057
   df_tk_ishex_truep : $d70f          55055
        df_tk_isproc : $d727          55079
   df_tk_isproc_true : $d72c          55084
          df_tk_isws : $d74a          55114
    df_tk_isws_false : $d74f          55119
          df_tk_left : $de48          56904
AS65 Assembler for R6502 [1.42].                                     Page   16
-------------------------------- bank\bank0.s --------------------------------

           df_tk_len : $de32          56882
          df_tk_line : $de81          56961
       df_tk_linenum : $da0f          55823
        df_tk_lineto : $de6e          56942
    df_tk_line_empty : $d9fc          55804
          df_tk_list : $ddaf          56751
df_tk_listp_procname : $dd8b          56715
df_tk_listp_procname_ch : $dd9a          56730
df_tk_listp_procname_err : $ddad          56749
df_tk_listp_procname_ok : $ddab          56747
     df_tk_list_done : $ddbe          56766
     df_tk_list_line : $ddbb          56763
    df_tk_list_procs : $ddb4          56756
          df_tk_load : $de68          56936
         df_tk_local : $ddf5          56821
      df_tk_localvar : $d847          55367
 df_tk_localvar_cont : $d84d          55373
           df_tk_lsr : $de62          56930
            df_tk_lt : $de62          56930
           df_tk_lte : $de62          56930
      df_tk_matchtok : $da2e          55854
df_tk_matchtok_skip_op : $da54          55892
           df_tk_mem : $de32          56882
           df_tk_mid : $de4e          56910
           df_tk_mod : $de62          56930
       df_tk_monitor : $de62          56930
          df_tk_mult : $de62          56930
         df_tk_music : $de81          56961
         df_tk_narry : $d8d1          55505
     df_tk_narry_end : $d8de          55518
         df_tk_nbrkt : $d8e3          55523
            df_tk_ne : $de62          56930
           df_tk_new : $de62          56930
          df_tk_next : $de62          56930
     df_tk_next_expr : $ddcd          56781
           df_tk_nop : $d93c          55612
     df_tk_nop_false : $d8fb          55547
       df_tk_not_eos : $d95b          55643
         df_tk_nterm : $d8f0          55536
    df_tk_nterm_cont : $d8fd          55549
    df_tk_nterm_done : $d8fb          55547
     df_tk_nterm_err : $d93a          55610
    df_tk_nterm_proc : $d8eb          55531
   df_tk_nterm_tryfn : $d90a          55562
df_tk_nterm_try_const : $d934          55604
df_tk_nterm_try_proc : $d920          55584
 df_tk_nterm_try_var : $d92c          55596
           df_tk_num : $d773          55155
       df_tk_num_bin : $d7a4          55204
       df_tk_num_err : $d75d          55133
    df_tk_num_hexbin : $d794          55188
   df_tk_num_makeint : $d79f          55199
       df_tk_num_put : $d7a8          55208
            df_tk_or : $de62          56930
         df_tk_paper : $de68          56936
          df_tk_parm : $d835          55349
 df_tk_parm_skip_var : $d842          55362
    df_tk_parseerror : $d9fe          55806
 df_tk_parse_command : $d97d          55677
df_tk_parse_command_done : $d993          55699
df_tk_parse_command_err : $d994          55700
df_tk_parse_user_proc : $d973          55667
AS65 Assembler for R6502 [1.42].                                     Page   17
-------------------------------- bank\bank0.s --------------------------------

          df_tk_peek : $de32          56882
      df_tk_peek_buf : $d6c6          54982
         df_tk_pixel : $de48          56904
       df_tk_pixmode : $de68          56936
          df_tk_play : $de81          56961
          df_tk_plot : $de78          56952
         df_tk_point : $de6e          56942
          df_tk_poke : $de6e          56942
     df_tk_preassign : $dd64          56676
         df_tk_print : $ddc6          56774
       df_tk_printat : $ddc0          56768
       df_tk_println : $ddc6          56774
    df_tk_print_done : $ddcb          56779
          df_tk_proc : $d85d          55389
     df_tk_proc_call : $d899          55449
    df_tk_proc_comma : $d8b3          55475
      df_tk_proc_err : $d8cf          55503
     df_tk_proc_errp : $d8ce          55502
   df_tk_proc_noparm : $d8bc          55484
    df_tk_proc_parms : $d88c          55436
df_tk_proc_skip_args : $d8cc          55500
df_tk_proc_skip_call : $d8a2          55458
  df_tk_put_overflow : $d6e3          55011
       df_tk_put_tok : $d6d7          54999
          df_tk_read : $dde4          56804
         df_tk_renum : $de78          56952
        df_tk_repeat : $de62          56930
         df_tk_reset : $de27          56871
        df_tk_return : $de64          56932
         df_tk_right : $de48          56904
           df_tk_rnd : $de32          56882
           df_tk_run : $de62          56930
          df_tk_save : $de68          56936
          df_tk_scrn : $de48          56904
       df_tk_skip_ws : $d72d          55085
         df_tk_sound : $de78          56952
       df_tk_sprchar : $de6e          56942
        df_tk_sprhit : $de32          56882
       df_tk_sprinit : $de62          56930
     df_tk_spritepos : $de78          56952
      df_tk_sprmulti : $de6e          56942
        df_tk_sprpos : $de78          56952
        df_tk_sprupd : $de62          56930
         df_tk_stick : $de37          56887
           df_tk_str : $d7d1          55249
      df_tk_strip_ws : $d73d          55101
        df_tk_str_ch : $d7d9          55257
       df_tk_str_don : $d7ea          55274
       df_tk_str_err : $d7f1          55281
           df_tk_sub : $de62          56930
      df_tk_sws_done : $d749          55113
     df_tk_sws_loop1 : $d73d          55101
      df_tk_symfound : $da98          55960
df_tk_symfound_final : $daa8          55976
  df_tk_symnextentry : $da78          55928
    df_tk_symnomatch : $da76          55926
   df_tk_symnomatchp : $da75          55925
          df_tk_text : $de62          56930
         df_tk_tload : $de68          56936
      df_tk_tokenjmp : $dc41          56385
     df_tk_tokentype : $dd03          56579
df_tk_tok_expression : $d95d          55645
AS65 Assembler for R6502 [1.42].                                     Page   18
-------------------------------- bank\bank0.s --------------------------------

    df_tk_try_assign : $d9e0          55776
   df_tk_try_command : $d9d9          55769
         df_tk_tsave : $de68          56936
         df_tk_until : $de68          56936
           df_tk_val : $de32          56882
           df_tk_var : $d815          55317
        df_tk_var_ck : $d82b          55339
      df_tk_var_cont : $d81b          55323
    df_tk_var_noarry : $d7ef          55279
         df_tk_vpeek : $de32          56882
          df_tk_wait : $de68          56936
          df_tk_wend : $de62          56930
         df_tk_while : $de68          56936
       df_tk_ws_done : $d73c          55100
      df_tk_ws_loop1 : $d72d          55085
        df_tk_2parms : $de6e          56942
        df_tk_3parms : $de78          56952
        df_tk_4parms : $de81          56961
          df_tmpptra : $00a1            161
          df_tmpptrb : $00a3            163
          df_tmpptrc : $00a5            165
          df_tmpptrd : $00a7            167
          df_tmpptre : $00a9            169
              df_tok : $0480           1152
          df_tokbuff : $0480           1152
        df_tokensyms : $dab0          55984
           df_tokoff : $007d            125
       df_trap_error : $f883          63619
  df_trap_go_monitor : $f89d          63645
     df_trap_monitor : $f921          63777
      df_trap_normal : $f8a0          63648
           df_varcnt : $0071            113
      df_var_analyse : $d5eb          54763
df_var_analyse_chk_arry : $d643          54851
df_var_analyse_chk_dollar : $d634          54836
df_var_analyse_chk_post : $d623          54819
  df_var_analyse_err : $d619          54809
df_var_analyse_fatal_err : $d621          54817
   df_var_analyse_ok : $d689          54921
   df_var_check_type : $d556          54614
         df_var_find : $d51a          54554
   df_var_findcreate : $d65d          54877
df_var_findcreate_copy : $d6ad          54957
df_var_findcreate_create : $d676          54902
df_var_findcreate_err : $d687          54919
df_var_findcreate_errp : $d686          54918
df_var_findcreate_found : $d66f          54895
  df_var_find_no_vnt : $d582          54658
    df_var_find_true : $d588          54664
df_var_initialise_var : $d696          54934
 df_var_insert_space : $d590          54672
    df_var_match_vnt : $d52a          54570
 df_var_match_vnt_do : $d536          54582
df_var_match_vnt_sym : $d53a          54586
    df_var_move_byte : $d5b3          54707
 df_var_move_byte_do : $d5bf          54719
df_var_move_byte_fin : $d5d0          54736
     df_var_not_arry : $d654          54868
     df_var_not_proc : $d5fd          54781
df_var_type_countlen : $d600          54784
df_var_type_countlen_alphanum : $d610          54800
df_var_type_countlen_done : $d615          54805
AS65 Assembler for R6502 [1.42].                                     Page   19
-------------------------------- bank\bank0.s --------------------------------

df_var_vnt_entry_end : $d56d          54637
df_var_vnt_sym_nomatch : $d560          54624
     df_var_zero_vnt : $d6a2          54946
           df_vntend : $006b            107
          df_vntstrt : $0069            105
           df_vvtend : $006f            111
          df_vvtstrt : $006d            109
               errno : $005d             93
 fd_cload_getname_pc : $c585          50565
 fd_csave_getname_pc : $c5da          50650
     fd_getname_addr : $0400           1024
               grc_d : $0043             67   *
               grc_r : $003f             63   *
               grc_x : $0040             64   *
              grc_x0 : $003d             61   *
               grc_y : $0042             66   *
              grc_y0 : $003e             62   *
              grl_dx : $0041             65   *
              grl_dy : $0042             66   *
               grl_p : $004b             75   *
            grl_sinx : $004a             74   *
            grl_siny : $004d             77   *
            grl_xyyx : $0043             67   *
              grl_x0 : $003d             61   *
              grl_x1 : $003f             63   *
              grl_y0 : $003e             62   *
              grl_y1 : $0040             64   *
             grl_2dx : $0044             68   *
            grl_2dxy : $0048             72   *
             grl_2dy : $0046             70   *
             gr_char : $0003              3
  gr_check_font_copy : $cc6d          52333
gr_check_font_copy_done : $cc84          52356
           gr_circle : $d05b          53339
      gr_circle_done : $d098          53400
    gr_circle_d_lte0 : $d08b          53387
      gr_circle_plot : $d068          53352
    gr_circle_points : $d099          53401
              gr_cls : $cd69          52585
          gr_cls_col : $cd89          52617
          gr_cls_row : $cd75          52597
    gr_cls_skip_marg : $cd85          52613
        gr_copy_byte : $cc44          52292
         gr_copy_mem : $cc3a          52282
         gr_cur_down : $ceb4          52916
         gr_cur_left : $ce96          52886
          gr_cur_ptr : $000d             13
        gr_cur_right : $ce84          52868
  gr_cur_skip_at_bot : $cec0          52928
 gr_cur_skip_at_left : $cea5          52901
   gr_cur_skip_at_tl : $cea9          52905
           gr_cur_up : $ceaa          52906
            gr_cur_x : $000b             11
            gr_cur_y : $000c             12
              gr_del : $cec1          52929
         gr_geom_tmp : $0016             22
              gr_get : $cdd2          52690
       gr_getXY_base : $cdaf          52655
          gr_get_key : $cec9          52937
        gr_get_key_2 : $cecd          52941
            gr_hchar : $cf68          53096
   gr_hchar_copyline : $cfbe          53182
AS65 Assembler for R6502 [1.42].                                     Page   20
-------------------------------- bank\bank0.s --------------------------------

gr_hchar_copyline_nx : $cffb          53243
 gr_hchar_copyline_0 : $cfe6          53222
 gr_hchar_copyline_2 : $cfd6          53206
    gr_hchar_getfont : $cf99          53145
       gr_hchar_mask : $cf91          53137
    gr_hchar_rot1bit : $cfa3          53155
gr_hchar_rot1bit_bcc : $cfae          53166
 gr_hchar_rot1bit_nx : $cfb3          53171
          gr_hires_x : $0011             17
          gr_hires_y : $0012             18
         gr_hi_start : $0001              1
             gr_init : $cc54          52308
        gr_init_font : $cc24          52260
        gr_init_geom : $cc85          52357
   gr_init_geom_done : $cc84          52356
       gr_init_hires : $ccea          52458
gr_init_hires_tables : $cd23          52515
  gr_init_screen_txt : $ccd1          52433
     gr_init_tab_col : $cd51          52561
gr_init_tab_col_skip : $cd63          52579
     gr_init_tab_row : $cd2d          52525
              gr_ink : $0013             19
    gr_key_check_key : $ced9          52953
      gr_key_got_key : $cef0          52976
       gr_key_no_key : $cefb          52987
    gr_key_skip_copy : $cee1          52961
      gr_key_tidy_up : $cef2          52978
             gr_line : $d111          53521
        gr_line_done : $d1eb          53739
       gr_line_neg_p : $d1db          53723
       gr_line_pixel : $d1a4          53668
 gr_line_skip_dx_neg : $d12f          53551
 gr_line_skip_dy_neg : $d13c          53564
   gr_line_skip_left : $d16c          53612
gr_line_skip_xy_swap : $d15c          53596
   gr_line_skip_y_up : $d174          53620
     gr_line_yx_skip : $d1b0          53680
           gr_margin : $0015             21
             gr_mode : $0000              0
           gr_new_ln : $ce6c          52844
       gr_nl_skip_nl : $ce81          52865
       gr_no_special : $cf10          53008
      gr_offset_40hi : $d208          53768
      gr_offset_40lo : $d1ec          53740
            gr_paper : $0014             20
            gr_pitch : $0010             16
            gr_pixel : $d026          53286
          gr_pixmode : $000f             15
             gr_plot : $cdbf          52671
            gr_point : $d02e          53294
       gr_point_done : $d05a          53338
        gr_point_eor : $d056          53334
      gr_point_setup : $d00e          53262
      gr_point_write : $d058          53336
        gr_printable : $cf34          53044
        gr_print_msg : $cf53          53075
   gr_print_msg_done : $cf63          53091
   gr_print_msg_loop : $cf59          53081
  gr_process_special : $cf19          53017
              gr_put : $cdc7          52679
         gr_put_byte : $ceff          52991
     gr_put_byte_low : $cf11          53009
AS65 Assembler for R6502 [1.42].                                     Page   21
-------------------------------- bank\bank0.s --------------------------------

           gr_screen : $0018             24
         gr_scrngeom : $0011             17
    gr_scrngeom_base : $cc94          52372
   gr_scrngeom_hires : $ccb4          52404
    gr_scrngeom_text : $cca1          52385
      gr_scroll_char : $ce2a          52778
    gr_scroll_cpy_ln : $ce27          52775
  gr_scroll_erase_ln : $ce62          52834
      gr_scroll_marg : $ce5e          52830
   gr_scroll_routine : $ce75          52853
        gr_scroll_up : $ce0b          52747
          gr_set_cur : $cdd8          52696
     gr_set_cur_init : $cdd9          52697
     gr_set_cur_skip : $cdeb          52715
    gr_set_hires_cur : $d021          53281
       gr_special_ch : $cf3a          53050
    gr_special_fn_hi : $cf4b          53067
    gr_special_fn_lo : $cf43          53059
     gr_special_loop : $cf1d          53021
         gr_spr_char : $d29d          53917
         gr_spr_draw : $d279          53881
    gr_spr_draw_loop : $d27b          53883
    gr_spr_draw_next : $d288          53896
        gr_spr_erase : $d232          53810
     gr_spr_erase_do : $d23b          53819
   gr_spr_erase_loop : $d234          53812
   gr_spr_erase_next : $d241          53825
          gr_spr_hit : $d2a3          53923
         gr_spr_init : $d224          53796
    gr_spr_init_loop : $d226          53798
   gr_spr_multi_loop : $d2be          53950
    gr_spr_multi_pos : $d2ba          53946
          gr_spr_new : $d245          53829
     gr_spr_new_loop : $d247          53831
     gr_spr_new_next : $d275          53877
      gr_spr_new_pos : $d24e          53838
          gr_spr_pos : $d2ad          53933
          gr_spr_put : $d28c          53900
           gr_text_h : $000a             10
        gr_text_size : $0007              7
       gr_text_start : $0005              5
           gr_text_w : $0009              9
              HICHAR : $9800          38912   *
              HISCRN : $a000          40960   *
              HITEXT : $bf68          49000   *
          hex_to_bcd : $c358          50008
 hex_to_bcd_skip_neg : $c36b          50027
           hires_col : $9d90          40336   *
          hires_mask : $9e80          40576   *
        hires_row_hi : $9cc8          40136   *
       hires_row_low : $9c00          39936   *
                 IER : $000e             14   *
                 IFR : $000d             13   *
             IFR_CA1 : $0002              2   *
             IFR_CA2 : $0001              1   *
             IFR_CB1 : $0010             16   *
                IO_0 : $0300            768   *
       inc_kb_timers : $c157          49495
            infinity : $c060          49248
                init : $c4d0          50384
            init_irq : $c0be          49342
       init_keyboard : $c760          51040
AS65 Assembler for R6502 [1.42].                                     Page   22
-------------------------------- bank\bank0.s --------------------------------

            init_ram : $c4fc          50428
       init_ram_fill : $c508          50440
       init_ram_skip : $c50c          50444
          init_ram_1 : $c504          50436
            init_snd : $d402          54274
       init_snd_regs : $d404          54276
       init_tape_tab : $c548          50504
           init_via0 : $c51e          50462
      init_via0_done : $c530          50480
      init_via0_loop : $c520          50464
       init_via0_tab : $c531          50481
      init_via0_tape : $c51a          50458
              init_2 : $c4d5          50389
             int_add : $d436          54326
             int_div : $d4b7          54455
       int_div_cycle : $d4e9          54505
      int_div_noflip : $d519          54553
        int_div_skip : $d503          54531
   int_div_skip_negA : $d4ce          54478
   int_div_skip_negB : $d4e1          54497
       int_fast_mult : $d463          54371
 int_fast_mult_cycle : $d473          54387
  int_fast_mult_next : $d484          54404
            int_mult : $d48c          54412
      int_mult_cycle : $d49c          54428
       int_mult_next : $d4af          54447
             int_sub : $d444          54340
             int_swp : $d452          54354
         int_vdp_fin : $c14c          49484
     int_vdp_handler : $c131          49457
    io_active_device : $c422          50210
          io_address : $0300            768
            io_block : $0601           1537
           io_buf_sz : $c4ae          50350
            io_close : $c454          50260
          io_close_f : $0008              8
        io_copy_data : $c42f          50223
          io_default : $0600           1536
           io_delete : $c457          50263
            io_del_f : $000a             10
          io_devices : $c4b0          50352
          io_device0 : $c4b0          50352
          io_device1 : $c4c0          50368
          io_do_echo : $c477          50295
             io_ext1 : $000c             12
             io_ext2 : $000e             14
         io_get_byte : $0000              0
           io_get_ch : $c448          50248
    io_get_line_byte : $c464          50276
    io_get_line_done : $c491          50321
             io_init : $c417          50199
          io_null_op : $c4ac          50348
        io_open_ext1 : $c45a          50266
        io_open_ext2 : $c45d          50269
           io_open_r : $0004              4
        io_open_read : $c44e          50254
           io_open_w : $0006              6
       io_open_write : $c451          50257
       io_print_done : $c4aa          50346
       io_print_line : $c499          50329
  io_print_line_byte : $c4a0          50336
         io_put_byte : $0002              2
AS65 Assembler for R6502 [1.42].                                     Page   23
-------------------------------- bank\bank0.s --------------------------------

           io_put_ch : $c44b          50251
        io_read_line : $c460          50272
      io_set_default : $c41f          50207
        io_skip_echo : $c47a          50298
     io_skip_special : $c485          50309
           io_struct : $0010             16
                 irq : $c0e2          49378
             irq_brk : $c104          49412
             irq_fin : $c0fe          49406
           KB_CAPSLK : $0001              1   *
         KB_DEBOUNCE : $0002              2   *
          KB_REP_DEL : $0014             20   *
          KB_REP_TIM : $0003              3   *
            KB_SENSE : $0008              8   *
          kb_any_key : $c792          51090
     kb_any_key_none : $c7aa          51114
  kb_any_key_pressed : $c7ac          51116
      kb_any_key_row : $c79b          51099
              kb_brk : $c877          51319
 kb_check_matrix_col : $c7b7          51127
 kb_check_matrix_row : $c7c1          51137
      kb_check_skip4 : $c7d7          51159
             kb_code : $002b             43
         kb_col_mask : $c917          51479
              kb_deb : $002d             45
          kb_deb_tim : $002e             46
        kb_do_repeat : $c867          51303
          kb_get_key : $c879          51321
          kb_get_try : $c87d          51325
         kb_hw_delay : $c7c6          51142
        kb_in_repeat : $c873          51315
             kb_last : $002a             42
      kb_process_new : $c80e          51214
              kb_raw : $0029             41
         kb_rdel_tim : $0031             49
         kb_read_got : $c7ac          51116
     kb_read_noshift : $c837          51255
     kb_read_nothing : $c7e2          51170
         kb_read_raw : $c7ae          51118
   kb_read_raw_force : $c7b3          51123
     kb_read_raw_got : $c7e6          51174
              kb_rep : $002f             47
          kb_rep_tim : $0030             48
      kb_scan_decode : $c804          51204
     kb_scan_got_key : $c88e          51342
         kb_scan_key : $c7f3          51187
        kb_scan_wait : $c802          51202
        kb_skip_ctrl : $c851          51281
             kb_stat : $002c             44
            kb_stick : $c771          51057
       kb_stick_mask : $c91f          51487
        kb_stick_pos : $c77d          51069
       kb_store_last : $c86f          51311
      kb_table_shift : $c8d7          51415
        kb_table_std : $c897          51351
         kernel_init : $c4de          50398
         kernel_test : $c4e7          50407
                main : $c04b          49227
           mem_start : $0713           1811
        mod_sz_asm_e : $ffee          65518
        mod_sz_asm_s : $f975          63861
       mod_sz_bios_e : $d436          54326
AS65 Assembler for R6502 [1.42].                                     Page   24
-------------------------------- bank\bank0.s --------------------------------

       mod_sz_bios_s : $c000          49152
        mod_sz_cia_e : $c557          50519
        mod_sz_cia_s : $c51a          50458
      mod_sz_dflat_e : $f7cf          63439
      mod_sz_dflat_s : $d51a          54554
      mod_sz_graph_e : $d2ce          53966
      mod_sz_graph_s : $c924          51492
         mod_sz_io_e : $c4d0          50384
         mod_sz_io_s : $c417          50199
     mod_sz_kernel_e : $c51a          50458
     mod_sz_kernel_s : $c000          49152
   mod_sz_language_e : $ffee          65518
   mod_sz_language_s : $d436          54326
       mod_sz_proc_e : $f6e8          63208
       mod_sz_proc_s : $f57b          62843
   mod_sz_progedit_e : $e01b          57371
   mod_sz_progedit_s : $de8d          56973
      mod_sz_rtasm_e : $fd83          64899
      mod_sz_rtasm_s : $fa68          64104
     mod_sz_rtsubs_e : $f57b          62843
     mod_sz_rtsubs_s : $e668          58984
    mod_sz_runtime_e : $f6e8          63208
    mod_sz_runtime_s : $e01b          57371
      mod_sz_sound_e : $d436          54326
      mod_sz_sound_s : $d3eb          54251
     mod_sz_sprite_e : $d2ce          53966
     mod_sz_sprite_s : $d224          53796
      mod_sz_tkasm_e : $fa68          64104
      mod_sz_tkasm_s : $f975          63861
   mod_sz_tokenise_e : $de8d          56973
   mod_sz_tokenise_s : $d6c6          54982
    mod_sz_toksubs_e : $de8d          56973
    mod_sz_toksubs_s : $dd64          56676
        mod_sz_var_e : $d6c6          54982
        mod_sz_var_s : $d51a          54554
          msg_errmsg : $d3e8          54248
     msg_hello_world : $c066          49254
           msg_ready : $d3e6          54246
             NUM_ANY : $0000              0   *
             NUM_BIN : $0003              3   *
             NUM_DEC : $0001              1   *
             NUM_HEX : $0002              2   *
                 nmi : $c519          50457
        null_handler : $c0e1          49377
            null_irq : $c0e0          49376
               num_a : $003d             61
               num_b : $0041             65
             num_buf : $004d             77
             num_tmp : $0049             73
               num_x : $0045             69
             out_bcd : $c3c5          50117
       out_bcd_digit : $c3cd          50125
         out_bcd_fin : $c3ee          50158
        out_bcd_next : $c3df          50143
       out_bcd_print : $c3db          50139
                 PCR : $000c             12   *
                 PRA : $0001              1   *
                PRAH : $000f             15   *
                 PRB : $0000              0   *
        print_a_to_d : $c3f4          50164
print_a_to_d_skip_neg : $c40d          50189
           SND_ADBUS : $030f            783   *
AS65 Assembler for R6502 [1.42].                                     Page   25
-------------------------------- bank\bank0.s --------------------------------

        SND_DESELECT : $00dd            221   *
            SND_MODE : $030c            780   *
       SND_REG_CHAPH : $0001              1   *
       SND_REG_CHAPL : $0000              0   *
      SND_REG_CHAVOL : $0008              8   *
       SND_REG_CHBPH : $0003              3   *
       SND_REG_CHBPL : $0002              2   *
      SND_REG_CHBVOL : $000a             10   *
       SND_REG_CHCPH : $0005              5   *
       SND_REG_CHCPL : $0004              4   *
        SND_REG_CHNP : $0006              6   *
         SND_REG_CTL : $0007              7   *
      SND_REG_ENVCYC : $000d             13   *
       SND_REG_ENVPH : $000c             12   *
       SND_REG_ENVPL : $000b             11   *
         SND_REG_IOA : $000e             14   *
         SND_REG_IOB : $000f             15   *
         SND_SELREAD : $00df            223   *
      SND_SELSETADDR : $00ff            255   *
        SND_SELWRITE : $00fd            253   *
                  SR : $000a             10   *
               SWBRK : <macro>
             scratch : $0613           1555
          skip_a_f_1 : $c195          49557
          skip_a_f_2 : $c1a4          49572
         skip_kb_deb : $c15d          49501
         skip_kb_rep : $c163          49507
          skip_x_f_1 : $c1b1          49585
          skip_x_f_2 : $c1c6          49606
             snd_get : $c024          49188
        snd_get_note : $d3eb          54251
    snd_get_note_oct : $d3f6          54262
        snd_init_tab : $d40e          54286
       snd_music_tab : $d41e          54302
       snd_note_done : $d3ff          54271
             snd_set : $c000          49152
        spr_baseadrh : $b4e0          46304   *
        spr_baseadrl : $b4c0          46272   *
            spr_bgnd : $b4a0          46240   *
             spr_chr : $b480          46208   *
            spr_curX : $b400          46080   *
            spr_curY : $b440          46144   *
            spr_newX : $b420          46112   *
            spr_newY : $b460          46176   *
          str_a_to_x : $c189          49545
   str_d_digits_done : $c2c8          49864
         str_d_error : $c274          49780
      str_d_find_end : $c283          49795
     str_d_found_end : $c290          49808
        str_d_powers : $c2e5          49893
 str_d_process_digit : $c29e          49822
      str_d_skip_neg : $c2df          49887
          str_x_to_a : $c1a6          49574
      str_x_to_a_err : $c1d2          49618
     str_x_to_a_errl : $c1d1          49617
           TAPE_RATE : $00d0            208   *
            TEXTCHAR : $b400          46080   *
            TEXTSCRN : $bb80          48000   *
         TIMER1_RATE : $4e20          20000   *
                T1CH : $0005              5   *
                T1CL : $0004              4   *
                T1LH : $0007              7   *
AS65 Assembler for R6502 [1.42].                                     Page   26
-------------------------------- bank\bank0.s --------------------------------

                T1LL : $0006              6   *
                T2CH : $0009              9   *
                T2CL : $0008              8   *
             tmp_ahi : $0033             51
             tmp_alo : $0032             50
           tmp_bank1 : $0000              0
           tmp_bank2 : $0001              1
             tmp_bhi : $0035             53
             tmp_blo : $0034             52
             tmp_chi : $0037             55
             tmp_clo : $0036             54
               tmp_d : $0038             56
            tp_back4 : $c568          50536
            tp_block : $0055             85
        tp_block_gap : $c692          50834
      tp_block_gap_1 : $c696          50838
              tp_buf : $0200            512
            tp_close : $c5b8          50616
   tp_close_no_flush : $c5c1          50625
            tp_delay : $0059             89
             tp_flag : $0058             88
        tp_get_block : $c712          50962
  tp_get_block_bytes : $c723          50979
         tp_get_byte : $c6f5          50933
     tp_get_byte_buf : $c702          50946
        tp_get_fname : $c59e          50590
  tp_get_fname_start : $c58f          50575
       tp_get_header : $c598          50584
              tp_idx : $0057             87
             tp_init : $c56d          50541
         tp_io_error : $c75e          51038
       tp_open_bread : $c585          50565
      tp_open_bwrite : $c5d0          50640
      tp_open_common : $c575          50549
         tp_open_msg : $c557          50519
        tp_open_read : $c585          50565
       tp_open_write : $c5d6          50646
 tp_open_write_start : $c5da          50650
      tp_print_block : $c672          50802
        tp_put_block : $c64e          50766
  tp_put_block_bytes : $c664          50788
         tp_put_byte : $c61c          50716
    tp_put_byte_done : $c63f          50751
        tp_put_delay : $c646          50758
         tp_read_bit : $c745          51013
     tp_read_bit_cb1 : $c749          51017
        tp_read_byte : $c731          50993
   tp_read_byte_bits : $c73d          51005
     tp_read_byte_st : $c731          50993
         tp_save_msg : $c560          50528
        tp_write_bit : $c6c0          50880
   tp_write_bit_chk1 : $c6d1          50897
   tp_write_bit_chk2 : $c6e9          50921
     tp_write_bit_t1 : $c6e0          50912
       tp_write_byte : $c69d          50845
   tp_write_byte_bit : $c6a9          50857
tp_write_byte_nodelay : $c6be          50878
      tp_write_fname : $c60e          50702
     tp_write_header : $c605          50693
     tt_csave_end_pc : $c5ce          50638
   tt_getsync_end_pc : $c5b7          50615
  tt_getsync_loop_pc : $c749          51017
AS65 Assembler for R6502 [1.42].                                     Page   27
-------------------------------- bank\bank0.s --------------------------------

       tt_getsync_pc : $c5b7          50615
   tt_putbyte_end_pc : $c6bf          50879
       tt_putbyte_pc : $c69d          50845
  tt_readbyte_end_pc : $c744          51012
      tt_readbyte_pc : $c731          50993
tt_writeleader_end_pc : $c5f6          50678
   tt_writeleader_pc : $c5f6          50678
     twos_complement : $c349          49993
twos_complement_skip_X : $c357          50007
             UTF_ACK : $0001              1   *
             UTF_BEL : $0007              7   *
             UTF_BRK : $001a             26   *
              UTF_CR : $000d             13   *
             UTF_DEL : $007f            127   *
             UTF_ETX : $0003              3   *
              UTF_FF : $000c             12   *
         UTF_SPECIAL : $0020             32   *
       update_timers : $c14d          49485
          utilPrintA : $c174          49524
       utilPrintCRLF : $c16c          49516
        utilPrintSPC : $c164          49508
           VDP_FLASH : $0010             16   *
           vdp_blank : $0010             16
             vdp_cnt : $0008              8
          vdp_cnt_hi : $0009              9
         vdp_cnt_hi2 : $000a             10
          vdp_curcnt : $000c             12
          vdp_curoff : $000d             13
         vdp_curstat : $000e             14
          vdp_curtim : $000b             11
          vdp_curval : $000f             15
  vdp_fill_vram_loop : $cd0b          52491
 vdp_fill_vram_noinc : $cd13          52499
            vdp_font : $c924          51492
          vdp_font_a : $ca2c          51756
             vec_brk : $0004              4
             vec_irq : $0002              2
        vec_usercia0 : $0006              6
             zp_tmp1 : $00ab            171
             zp_tmp2 : $00ac            172
             zp_tmp3 : $00ad            173
             zp_tmp4 : $00ae            174
             ztmp_24 : $003d             61
          _adcZPWord : <macro>
          _addZPWord : <macro>
           _code_end : $ffee          65518
         _code_start : $c000          49152
          _cpu_stack : $0100            256
          _cpyZPWord : <macro>
              _debug : <macro>
          _decZPWord : <macro>
      _end_zero_page : $00af            175
          _incZPWord : <macro>
       _mod_sz_cmd_e : $d3eb          54251
       _mod_sz_cmd_s : $d2ce          53966
       _PushFalseJmp : <macro>
        _PushTrueJmp : <macro>
             _printA : <macro>
             _printC : <macro>
            _printCA : <macro>
          _printCRLF : <macro>
            _println : <macro>
AS65 Assembler for R6502 [1.42].                                     Page   28
-------------------------------- bank\bank0.s --------------------------------

        _println_low : <macro>
          _printmsgA : <macro>
            _pullAXY : <macro>
            _pushAXY : <macro>
            _sendcmd : <macro>
          _subZPWord : <macro>
            __6502__ : $0001              1

1657 labels used

15552 lines read, no errors in pass 1.
AS65 Assembler for R6502 [1.42].                                     Page   29
-------------------------------- bank\bank0.s --------------------------------

c000 =                       	org 0xc000
c000 :                       mod_sz_bios_s
                             	include "kernel/kernel.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  KERNEL.S
                             ;*	Lol, I thought this would become more sophisti
                             ;*	hence the name 'kernel'. But no, it just initi
                             ;*	memory, VIA, sound and screen, before passing 
                             ;*	to main.
                             ;*	References to banks etc. are from ported code 
                             ;*	did do more stuff, namely helping with ROM ban
                             ;*
                             ;************************************************
                             
                             ;* Include all definition and code files in the r
                             	include "inc/includes.i"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  INCLUDES.S
                             ;*  Main include file for key definitions and mac
                             ;*  Many of the settings here are exremely machin
                             ;*  Defines : IO block addresses, VIA port usage,
                             ;*  settings, useful macros, sound chip registers
                             ;*  and ACIA registers.
                             ;*	Of course the Oric doesn't have a VDP or an AC
                             ;*	so this file could be optimised.
                             ;*
                             ;************************************************
                             
                             ;* The IO block is at 0x04000 and decodes up to
                             ;* eight IO addresses, at 0x0080 intervals
                             ;* All eight are not used at the present time:
                             ;* - 0 : VIA 1 (Keyboard)
                             ;* - 1 : VIA 2 (Sound and SD card interface)
                             ;* - 2 : VDP (Video)
                             ;* - 3 : ACIA (Serial)
0300 =                       IO_0		= 0x0300
                             
0010 =                       VDP_FLASH	= 16				;* 32/50 second flash
                             
4e20 =                       TIMER1_RATE	= 1000000 / 50		;* 50 times per secon
00d0 =                       TAPE_RATE	= 0xd0				;* Assumed required FM freque
                             
                             ;* Standard definitions of 6522 registers
                             ;* As found in the datasheets
0000 =                       PRB			= 0x00
0001 =                       PRA			= 0x01
0002 =                       DDRB		= 0x02
0003 =                       DDRA		= 0x03
AS65 Assembler for R6502 [1.42].                                     Page   30
-------------------------------- bank\bank0.s --------------------------------

0004 =                       T1CL		= 0x04
0005 =                       T1CH		= 0x05
0006 =                       T1LL		= 0x06
0007 =                       T1LH		= 0x07
0008 =                       T2CL		= 0x08
0009 =                       T2CH		= 0x09
000a =                       SR			= 0x0a
000b =                       ACR			= 0x0b
000c =                       PCR			= 0x0c
000d =                       IFR			= 0x0d
000e =                       IER			= 0x0e
000f =                       PRAH		= 0x0f
                             
0001 =                       IFR_CA2		= 0x01
0002 =                       IFR_CA1		= 0x02
0010 =                       IFR_CB1		= 0x10
                             
                             ;* AY-3-8910 definitions
                             ;* The sound chip is accessed through VIA 2
030f =                       SND_ADBUS	= IO_0+PRAH
030c =                       SND_MODE	= IO_0+PCR
                             
                             ; Values for the PCR register - always enable CB1
00df =                       SND_SELREAD			= 0b11011111
00fd =                       SND_SELWRITE		= 0b11111101
00ff =                       SND_SELSETADDR		= 0b11111111
00dd =                       SND_DESELECT		= 0b11011101
                             
0000 =                       SND_REG_CHAPL	= 0x00
0001 =                       SND_REG_CHAPH	= 0x01
0002 =                       SND_REG_CHBPL	= 0x02
0003 =                       SND_REG_CHBPH	= 0x03
0004 =                       SND_REG_CHCPL	= 0x04
0005 =                       SND_REG_CHCPH	= 0x05
0006 =                       SND_REG_CHNP	= 0x06
0007 =                       SND_REG_CTL		= 0x07
0008 =                       SND_REG_CHAVOL	= 0x08
0009 =                       SND_REG_CHBVOL	= 0x09
000a =                       SND_REG_CHBVOL	= 0x0a
000b =                       SND_REG_ENVPL	= 0x0b
000c =                       SND_REG_ENVPH	= 0x0c
000d =                       SND_REG_ENVCYC	= 0x0d
                             
000e =                       SND_REG_IOA	= 0x0e
000f =                       SND_REG_IOB	= 0x0f
                             
                             
                             ;* Port B
0008 =                       KB_SENSE	= 0x08			; Input - Bit 3 port A
0001 =                       KB_CAPSLK	= 0x01			; Id of Caps Lock - maps to Le
                             
0003 =                       KB_REP_TIM	= 3 			; Number of VB periods for the 
0014 =                       KB_REP_DEL	= 20			; Number of VB periods before r
0002 =                       KB_DEBOUNCE	= 2				; Number of VB periods before 
                             
0003 =                       UTF_ETX		= 0x03			; Break character
0007 =                       UTF_BEL		= 0x07
0008 =                       CRSR_LEFT	= 0x08
0009 =                       CRSR_RIGHT	= 0x09
000a =                       CRSR_DOWN	= 0x0a
000b =                       CRSR_UP		= 0x0b
0014 =                       CTRL_CAPS	= 0x14			; CTRL-T to toggle caps
AS65 Assembler for R6502 [1.42].                                     Page   31
-------------------------------- bank\bank0.s --------------------------------

0001 =                       UTF_ACK		= 0x01			; Used for the CTRL-A copy in t
000c =                       UTF_FF		= 0x0c
000d =                       UTF_CR		= 0x0d
001a =                       UTF_BRK		= 0x1a			; Debug - drop in to monitor
007f =                       UTF_DEL		= 0x7f
0020 =                       UTF_SPECIAL = 0x20
                             
0000 =                       CMD_ERR_NOERROR			= 0x00
0001 =                       CMD_ERR_NOTFOUND		= 0x01
0002 =                       CMD_ERR_PARM			= 0x02
0003 =                       CMD_ERR_VAL				= 0x03
                             
                             ;* Number formats for conversion routines
0000 =                       NUM_ANY		= 0x00
0001 =                       NUM_DEC		= 0x01
0002 =                       NUM_HEX		= 0x02
0003 =                       NUM_BIN		= 0x03
                             
                             	
                             
                             ;* USEFUL MACROS HERE
                             
                             ;* Software break to throw errors
                             ;* use like this : SWBRK XX
                             ;* Where XX is the error code
                             SWBRK macro sig
                             	brk
                             	db sig
                             	endm
                             
                             _pushAXY macro
                             	pha
                             	sta tmp_d
                             	txa
                             	pha
                             	tya
                             	pha
                             	lda tmp_d
                             	endm
                             
                             _pullAXY macro
                             	pla
                             	tay
                             	pla
                             	tax
                             	pla
                             	endm
                             
                             _println macro msg
                             	_pushAXY
                             	ldx #lo(msg)
                             	lda #hi(msg)
                             	jsr io_print_line
                             	_pullAXY
                             	endm
                             
                             _println_low macro msg
                             	ldx #lo(msg)
                             	lda #hi(msg)
                             	jsr io_print_line
                             	endm
                             
AS65 Assembler for R6502 [1.42].                                     Page   32
-------------------------------- bank\bank0.s --------------------------------

                             _printmsgA macro msg
                             	_pushAXY
                             	ldx #lo(msg)
                             	lda #hi(msg)
                             	jsr io_print_line
                             	pla
                             	pha
                             	jsr str_a_to_x
                             	jsr _put_byte
                             	txa
                             	jsr _put_byte
                             	lda #UTF_CR
                             	jsr _put_byte
                             	_pullAXY
                             	endm
                             
                             _printA macro
                             	_pushAXY
                             	jsr str_a_to_x
                             	jsr io_put_ch
                             	txa
                             	jsr io_put_ch
                             	_pullAXY
                             	endm
                             
                             _printCRLF macro
                             	pha
                             	lda #UTF_CR
                             	jsr _put_byte
                             	pla
                             	endm
                             
                             _printC macro ch
                             	pha
                             	lda #ch
                             	jsr io_put_ch
                             	pla
                             	endm
                             
                             _printCA macro
                             	pha
                             	jsr _put_byte
                             	pla
                             	endm
                             
                             _sendcmd macro cmd
                             	_pushAXY
                             	ldx #lo(cmd)
                             	lda #hi(cmd)
                             	jsr sd_sendcmd
                             	_pullAXY
                             	endm
                             
                             _incZPWord macro wordp
                             	inc wordp
                             	db	0xd0, 0x02
                             	inc wordp+1
                             	endm
                             
                             _decZPWord macro wordp
                             	pha
                             	sec
AS65 Assembler for R6502 [1.42].                                     Page   33
-------------------------------- bank\bank0.s --------------------------------

                             	lda wordp
                             	sbc #1
                             	sta wordp
                             	lda wordp+1
                             	sbc #0
                             	sta wordp+1
                             	pla
                             	endm
                             
                             _cpyZPWord macro worda,wordb
                             	lda worda
                             	sta wordb
                             	lda worda+1
                             	sta wordb+1
                             	endm
                             	
                             _addZPWord macro worda, wordb
                             	clc
                             	lda worda
                             	adc wordb
                             	sta worda
                             	lda worda+1
                             	adc wordb+1
                             	sta worda+1
                             	endm
                             
                             _subZPWord macro worda, wordb
                             	sec
                             	lda worda
                             	sbc wordb
                             	sta worda
                             	lda worda+1
                             	sbc wordb+1
                             	sta worda+1
                             	endm
                             	
                             _adcZPWord macro worda,const
                             	clc
                             	lda worda
                             	adc #const
                             	sta worda
                             	lda worda+1
                             	adc #0
                             	sta worda+1
                             	endm
                             	
                             _debug macro ch
                             	pha
                             	lda #ch
                             	sta 48000
                             	pla
                             	endm
                             	
                             
                             
                             	include "inc/graph.i"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
AS65 Assembler for R6502 [1.42].                                     Page   34
-------------------------------- bank\bank0.s --------------------------------

                             ;*  credit of original my authorship please!
                             ;*
                             ;*  GRAPH.I
                             ;*  This is the definition file for graphics, spe
                             ;*  The graphics screen handling module.  It is j
                             ;*  structure definition - but this structure is 
                             ;*  record the important attributes of a text scr
                             ;*	This was needed in the previous code due to 32
                             ;*	byte width screens, but Oric only  has 40, so 
                             ;*	could be optimised a little.
                             ;*
                             ;************************************************
                             
                             ; Important screen addresses for the Oric ULA
bb80 =                       TEXTSCRN	=	0xbb80
b400 =                       TEXTCHAR	=	0xb400
a000 =                       HISCRN		=	0xa000
9800 =                       HICHAR		=	0x9800
bf68 =                       HITEXT		=	0xbf68
                             
0000 =                       	struct gr_screen
0000 =                       	db gr_mode					; Text or Hires mode
0001 =                       	dw gr_hi_start				; Address fo hires screen
0003 =                       	dw gr_char					; Start address of charset
0005 =                       	dw gr_text_start			; Start of text memory
0007 =                       	dw gr_text_size				; Number of bytes screen occu
0009 =                       	db gr_text_w				; Number of columns
000a =                       	db gr_text_h				; Number of rows
000b =                       	db gr_cur_x					; Current X position of cursor
000c =                       	db gr_cur_y					; Current Y position of cursor
000d =                       	dw gr_cur_ptr				; VDP address of cursor
000f =                       	db gr_pixmode				; Pixel plot mode (0=Erase, 1=P
0010 =                       	db gr_pitch					; Pixel pitch for char plotting
0011 =                       	db gr_hires_x				; X pos of hires cursor
0012 =                       	db gr_hires_y				; Y pos of hires cursor
0013 =                       	db gr_ink					; Ink colour
0014 =                       	db gr_paper					; Paper colour
0015 =                       	db gr_margin				; Left margin
0016 =                       	dw gr_geom_tmp				; One word of temp storage for
                             	end struct
                             	
                             ; Sprite data stored in free 256 in font space
b400 =                       spr_curX	= TEXTCHAR			; Sprite current X pos
b420 =                       spr_newX	= TEXTCHAR+32		; Sprite new X pos
b440 =                       spr_curY	= TEXTCHAR+64		; Sprite current Y pos
b460 =                       spr_newY	= TEXTCHAR+96		; Sprite new Y pos
b480 =                       spr_chr		= TEXTCHAR+128		; Sprite character
b4a0 =                       spr_bgnd	= TEXTCHAR+160		; Background character u
b4c0 =                       spr_baseadrl= TEXTCHAR+192		; Y low address of sp
b4e0 =                       spr_baseadrh= TEXTCHAR+224		; Y high address of s
                             
                             ; Tables stored in alternate character set area
                             ; only used for high-resolution screen handling
9c00 =                       hires_row_low	=	HICHAR+0x400		; Low byte of row p
9cc8 =                       hires_row_hi	=	hires_row_low+200	; High byte of r
9d90 =                       hires_col		=	hires_row_hi+200	; Pixel to byte col
9e80 =                       hires_mask		=	hires_col+240		; Pixel column to pi
                             
                             
                             	include "io/io.i"
                             ;************************************************
                             ;*
AS65 Assembler for R6502 [1.42].                                     Page   35
-------------------------------- bank\bank0.s --------------------------------

                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  IO.I
                             ;*  Definitions file for the IO module.  The key 
                             ;*  used by the IO system is defined here.
                             ;*	Some over-engineering here for future possibil
                             ;*
                             ;************************************************
                             
                             ;* General IO structure allows the system to swap
                             ;* different IO devices by using indirect calls t
                             ;* the appropriate routines.
0000 =                       	struct io_struct
0000 =                       	ds	io_get_byte,	2			;* Address of get byte
0002 =                       	ds	io_put_byte,	2			;* Address of put byte
0004 =                       	ds	io_open_r,		2			;* Address of open file for r
0006 =                       	ds	io_open_w,		2			;* Address of open file for w
0008 =                       	ds	io_close_f,		2			;* Address of close file
000a =                       	ds	io_del_f,		2			;* Address of delete file
000c =                       	ds	io_ext1,		2			;* Address of extended function
000e =                       	ds	io_ext2,		2			;* Address of extended function
                             	end struct
                             	include "dflat/dflat.i"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  DFLAT.I
                             ;*  This is the main definitions file for dflat. 
                             ;*  definitions are in here to access the data st
                             ;*  used by dflat.
                             ;*
                             ;************************************************
                             
                             ;* Start dflat program memory
0713 =                       DF_PROGSTART=	mem_start
                             ;* This is the top of usable dflat memory plus 1
9800 =                       DF_MEMTOP	=	0x9800
                             
                             ;* Offset in to tokenised line of length and line
0000 =                       DFTK_LINLEN	=	0x00
0001 =                       DFTK_LINNUM	=	0x01
                             
                             ;* Flags for token, escape value for data types a
0080 =                       DFTK_TOKEN	=	0x80
0020 =                       DFTK_ESCVAL	=	0x20
0000 =                       DFTK_EOL	=	0x00
                             
                             ;* Numeric constants are encoded based on size an
                             ;* user representation.
                             ;* For example the decimal value 16 will be encod
                             ;* DFTK_INTDEC followed by the bytes 0 and 16 to 
                             ;* The same value in binary will be encoded as DF
                             ;* followed by the same 0 and 16 bytes.  This is 
AS65 Assembler for R6502 [1.42].                                     Page   36
-------------------------------- bank\bank0.s --------------------------------

                             ;* tokenised value to be displayed in original re
                             ;* So in the two examples, they will be shown as 
                             ;* '0x0010' respectively.
0000 =                       DFTK_CHR	=	0x00
0001 =                       DFTK_RESV1	=	0x01
0002 =                       DFTK_RESV2	=	0x02
0003 =                       DFTK_RESV3	=	0x03
0004 =                       DFTK_RESV4	=	0x04
0005 =                       DFTK_BYTDEC	=	0x05
0006 =                       DFTK_BYTHEX = 	0x06
0007 =                       DFTK_BYTBIN =	0x07
0008 =                       DFTK_RESV8	=	0x08
0009 =                       DFTK_INTDEC	=	0x09
000a =                       DFTK_INTHEX =	0x0a
000b =                       DFTK_INTBIN	=	0x0b
000c =                       DFTK_RESVC	=	0x0c
000d =                       DFTK_RESVD	=	0x0d
000e =                       DFTK_RESVE	=	0x0e
000f =                       DFTK_RESVF	=	0x0f
                             
                             ;* String constant, variable and procedure tokens
0010 =                       DFTK_STRLIT	=	0x10
0011 =                       DFTK_VAR	=	0x11
0012 =                       DFTK_PROC	=	0x12
001f =                       DFTK_STEND	=	0x1f
                             
                             ;* Qualifier for non-local parameters passed to a
0026 =                       DFTK_VARPARM=	'&'
                             
                             ;* Variable Value Table (VVT) definitions
                             ;* The VVT records the values of variables define
                             ;* the Variable Name Table (VNT).  When a variabl
                             ;* used, it is added to the VNT, and the position
                             ;* VNT is used as an index in to the VVT.
                             ;* Every VVT entry is 8 bytes - so the VNT index 
                             ;* shifted left 3 bits to get the VVT offset.
                             ;* The VNT grows from top of memory down, the VVT
                             ;* grows from start of VNT down.
                             
                             ;* Index in to each entry of the VVT
0000 =                       DFVVT_TYPE	=	0x00
0001 =                       DFVVT_LO	=	0x01
0002 =                       DFVVT_HI	=	0x02
0003 =                       DFVVT_DIM1	=	0x03
0004 =                       DFVVT_DIM2	=	0x04
0008 =                       DFVVT_SZ	=	0x08	;VVT is aligned to 8 byte blocks
                             
                             ;* The meaning of the DFVVT_TYPE entry
0001 =                       DFVVT_INT	=	0x01
0002 =                       DFVVT_BYT	=	0x02
0004 =                       DFVVT_STR	=	0x04
0008 =                       DFVVT_FLT	=	0x08
0040 =                       DFVVT_PROC	=	0x40
0080 =                       DFVVT_ARRY	=	0x80
                             
                             ;* Flags indicating the meaning of a token
                             ;* A token has the top bit set (0x80), then the
                             ;* remaining bits indicate what it represents.
0001 =                       DFTK_KW		=	0x01
0002 =                       DFTK_FN		=	0x02
0004 =                       DFTK_STROP	=	0x04
0008 =                       DFTK_OP		=	0x08
AS65 Assembler for R6502 [1.42].                                     Page   37
-------------------------------- bank\bank0.s --------------------------------

0010 =                       DFTK_INT	=	0x10
0020 =                       DFTK_BYT	=	0x20
0040 =                       DFTK_STR	=	0x40
0080 =                       DFTK_FLT	=	0x80
0007 =                       DFTK_OPMSK	=	0x07
00f8 =                       DFTK_RTMSK	= 	0xf8
                             
                             ;* Defines what type of value is on the parameter
                             ;* All numerics are stored as INT, all STR
                             ;* are pointers to the actual string, thus
                             ;* all entries in the parmeter stack are 3 bytes
0001 =                       DFST_INT	=	0x01
0080 =                       DFST_STR	=	0x80
                             
                             ;* Token values of specific commands, used during
                             ;* command processing.
                             ;* ANY CHANGE TO THE ORDER OF KEYWORDS NEEDS TO R
0086 =                       DFRT_DEF	=	0x86
0087 =                       DFRT_ENDDEF	=	0x87
0088 =                       DFRT_RETURN	=	0x88
0089 =                       DFRT_ABORT	=	0x89
008c =                       DFRT_REPEAT	=	0x8c
008e =                       DFRT_FOR	=	0x8e
008f =                       DFRT_NEXT	=	0x8f
0090 =                       DFRT_WHILE	=	0x90
0091 =                       DFRT_WEND	=	0x91
0092 =                       DFRT_IF		=	0x92
0093 =                       DFRT_ELSE	=	0x93
0094 =                       DFRT_ENDIF	=	0x94
0095 =                       DFRT_ELSEIF	=	0x95
0096 =                       DFRT_DATA	=	0x96
0097 =                       DFRT_ASM	=	0x97
                             
                             _PushTrueJmp macro
                             	ldx #0xff
                             	txa
                             	jmp df_st_pushInt
                             	endm
                             
                             _PushFalseJmp macro
                             	ldx #0x00
                             	txa
                             	jmp df_st_pushInt
                             	endm
                             
                             	include "kernel/zeropage.i"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  ZEROPAGE.I
                             ;*  This module name is misleading it is not only
                             ;*  allocations, but also page 2, 3, 4, 5, 6, 7 a
                             ;*  memstart is a handy label that indicates the 
                             ;*  location that we can store dflat programs fro
                             ;*  Zero page is a valuable asset as the 6502 can
                             ;*  this page one cycle quicker than the rest of 
                             ;*  and infact some addressing modes can only use
AS65 Assembler for R6502 [1.42].                                     Page   38
-------------------------------- bank\bank0.s --------------------------------

                             ;*  Due to the value of zero page, a lot of syste
                             ;*  dflat variables are put here.  But we don't h
                             ;*  luxury for single use variables - so you will
                             ;*  see a lot of temporary sounding names which a
                             ;*  have multiple uses across the code base.
                             ;*
                             ;************************************************
                             
                             	; Zero page declarations
                             	bss
0000 =                       	org 0x0000
                             
0000 =                       tmp_bank1	ds	1		; Temp storage ONLY FOR USE BY BA
0001 =                       tmp_bank2	ds	1		; Temp storage ONLY FOR USE BY BA
                             
                             ; Interrupt routine addresses
0002 =                       vec_irq		 ds	2		; Master IRQ handler
0004 =                       vec_brk		 ds	2		; Master BRK handler
0006 =                       vec_usercia0 ds	2		; Where to jump for CIA0 inter
                             
                             ; VDP parameters
0008 =                       vdp_cnt		ds	1		; VDP interrupt counter
0009 =                       vdp_cnt_hi 	ds	1		; VDP counter high
000a =                       vdp_cnt_hi2	ds	1		; VDP counter high 2
000b =                       vdp_curtim	ds	1		; Cursor blink speed
000c =                       vdp_curcnt	ds	1		; Cursor blink countdown
000d =                       vdp_curoff	ds	1		; Cursor off (0 = On)
000e =                       vdp_curstat	ds	1		; Cursor status
000f =                       vdp_curval	ds	1		; Cursor value on screen
0010 =                       vdp_blank	ds	1		; Screen blank value normally 32
                             
                             ; Screen geometry
0011 =                       gr_scrngeom	ds	gr_screen
                             
                             ;Keyboard parameters
0029 =                       kb_raw  	ds	1		; Raw keyboard code
002a =                       kb_last		ds	1		; Code of last key
002b =                       kb_code 	ds	1		; Converted keyboard code
002c =                       kb_stat		ds	1		; Keyboard status for caps and shi
002d =                       kb_deb		ds	1		; Debounce timer
002e =                       kb_deb_tim  ds	1		; Default debounce delay
002f =                       kb_rep		ds	1		; Keyboard repeat speed timer
0030 =                       kb_rep_tim 	ds	1		; Default repeat speed
0031 =                       kb_rdel_tim	ds	1		; Default repeat delay (until s
                             
0032 =                       tmp_alo 	ds	1		; VDP addresses lo
0033 =                       tmp_ahi 	ds	1		; VDP addresses hi
0034 =                       tmp_blo 	ds	1		; Temp address lo
0035 =                       tmp_bhi		ds	1		; Temp address hi
0036 =                       tmp_clo		ds	1		; Temp address lo
0037 =                       tmp_chi		ds	1		; Temp address hi
0038 =                       tmp_d		ds	1		; Temp storage d
                             
                             ; Raw input/output parameters
0039 =                       buf_lo		ds	1		; Line buffer address low
003a =                       buf_hi		ds	1		; Line buffer address high
003b =                       buf_sz		ds	1		; Buffer size
003c =                       buf_ef		ds	1		; End file / line marker
                             
                             
                             ; ** Integer function storage **
003d =                       ztmp_24					; Start of 24 byte scratch area (all 
AS65 Assembler for R6502 [1.42].                                     Page   39
-------------------------------- bank\bank0.s --------------------------------

003d =                       num_a		ds	4		; 4 byte primary accumulator
0041 =                       num_b		ds	4		; 4 byte secondary accumulator
0045 =                       num_x		ds	4		; 4 byte x register
0049 =                       num_tmp		ds	4		; 4 byte temp space
004d =                       num_buf		ds	8		; 8 byte string buffer
                             
                             ; ** Tape function storage **
0055 =                       tp_block	ds	2		; Block number (int)
0057 =                       tp_idx		ds	1		; Current buffer index
0058 =                       tp_flag		ds	1		; zero = closed, 1=read, 2=write
0059 =                       tp_delay	ds	2		; Interblock delay
                             
                             ;
                             ; **** INTERPRETER ZERO PAGE ****
                             ;
005b =                       dflat_zp_s
005b =                       dflat_zp_save_s			; ZP save dflat from here
005b =                       df_checkkey	ds	1		; Key check interval counter
005c =                       df_checkmsk	ds	1		; Mask for check key
005d =                       errno		ds	1		; General error condition status
005e =                       df_immed	ds	1		; Immediate mode (0 = not immediat
005f =                       df_sp		ds	1		; Stack pointer after error to resto
0060 =                       df_pc		ds	2		; PC after error to return to
0062 =                       df_brkpc	ds	2		; PC pushed on the stack for BRK
0064 =                       df_brkval	ds	1		; Byte after BRK instruction
0065 =                       df_prgstrt	ds	2		; Start of program code
0067 =                       df_prgend	ds	2		; End of program code
0069 =                       df_vntstrt	ds	2		; Variable name table start
006b =                       df_vntend	ds	2		; Variable name table end
006d =                       df_vvtstrt	ds	2		; Variable value table start
006f =                       df_vvtend	ds	2		; Variable value table end
0071 =                       df_varcnt	ds	1		; Variable counter
0072 =                       df_starstrt	ds	2		; String and array table start
0074 =                       df_starend	ds	2		; String and array table end
0076 =                       df_rtstop	ds	1		; Runtime stack pointer
0077 =                       df_parmtop	ds	1		; Top of parameter stack (grows 
0078 =                       df_strbuff	ds	1		; String expression buffer
0079 =                       df_stridx	ds	1		; Top of string buffer (grows dow
007a =                       df_sevalptr	ds	2		; Pointer to next free char in 
                             
007c =                       df_linoff	ds	1		; Offset in to line buffer
007d =                       df_tokoff	ds	1		; Offset in to tokenised buffer
007e =                       df_eolidx	ds	1		; End of line index (i.e length)
007f =                       df_nxtstidx	ds	1		; Offset to the next statement 
0080 =                       df_curstidx	ds	1		; Offset to the start of curren
0081 =                       df_symtab	ds	2		; Pointer to next free symtab ent
0083 =                       df_symoff	ds	1		; Offset in to token table
0084 =                       df_symini	ds	2		; Start of symtab
0086 =                       df_currlin	ds	2		; Execution current line pointer
0088 =                       df_exeoff	ds	1		; Execution line buffer offset
0089 =                       df_nextlin	ds	2		; Next line to execute
008b =                       df_procmode	ds	1		; Only used during tokenisation
008c =                       df_procargs	ds	1		; Only used during tokenisation
008d =                       df_procloc	ds	1		; Counts the number of local par
008e =                       df_procptr	ds	2		; Pointer to proc vvt slot
0090 =                       df_lineptr	ds	2		; Pointer to line during searche
0092 =                       df_lineidx	ds	1		; Pointer to line index during s
0093 =                       df_ifnest	ds	1		; Global nested if counter
0094 =                       df_currdat	ds	2		; Data current line pointer
0096 =                       df_datoff	ds	1		; Data line buffer offset
0097 =                       df_rnd		ds	2		; Random number seed
                             
AS65 Assembler for R6502 [1.42].                                     Page   40
-------------------------------- bank\bank0.s --------------------------------

0099 =                       df_asmpc	ds	2		; Assembler program counter
009b =                       df_asmopt	ds	1		; Assembler current option
009c =                       df_asmadmd	ds	1		; Addressing mode
009d =                       df_asmopcde	ds	1		; Current opcode
009e =                       df_asmoprnd	ds	2		; Current operand
00a0 =                       df_asmlen	ds	1		; Instruction length
                             
00a1 =                       dflat_zp_save_e			; Save up to this place
                             
                             ; Temp space for dflat
00a1 =                       df_tmpptra	ds	2		; Temp pointer a
00a3 =                       df_tmpptrb	ds	2		; Temp pointer b
00a5 =                       df_tmpptrc	ds	2		; Temp pointer c
00a7 =                       df_tmpptrd	ds	2		; Temp pointer d
00a9 =                       df_tmpptre	ds	2		; Temp pointer e
                             
00ab =                       dflat_zp_e
                             
00ab =                       zp_tmp1		ds	1		; General zero page temporary
00ac =                       zp_tmp2		ds	1		; General zero page temporary
00ad =                       zp_tmp3		ds	1		; General zero page temporary
00ae =                       zp_tmp4		ds	1		; General zero page temporary
                             
                             ;***** END OF ZERO PAGE *****
00af =                       _end_zero_page
                             
                             ;***** Page 1 is CPU stack ****
0100 =                       	org 0x0100
0100 =                       _cpu_stack
0100 =                       			ds	256		; All of page 1
                             
                             ;***** Page 2 is tape buffer *****
0200 =                       	org 0x0200
0200 =                       tp_buf		ds	256		; Serial input / output line buff
                             
                             ;***** 3 is IO *****
0300 =                       	org 0x0300			; IO mapped to Page 3 on Oric
0300 =                       io_address	ds	256
                             
0400 =                       	org 0x0400			; Page 4 = dflat space
0400 =                       fd_getname_addr			; ** FOR ORICUTRON EMULATOR **
0400 =                       df_linbuff
0400 =                       df_raw		ds	128		; untokenised input line
0480 =                       df_tokbuff
0480 =                       df_tok		ds 	128		; tokenised output line
                             
0500 =                       	org 0x0500			; Page 5 = fixed space for interpre
0500 =                       df_rtstck				; operator stack grow up, runtime gr
0500 =                       df_rtspace	ds	256
                             
                             
                             ;***** NON-ZERO PAGE VARIABLES *****
                             
                             ; Acticve IO device settings
0600 =                       io_default	ds	1		; The default device number
0601 =                       io_block	ds	io_struct
                             
                             
                             ; Dflat top of memory+1 - initialised at boot tim
0611 =                       df_memtop	ds	2
                             
                             ; Scratch area e.g. string and numeric expression
AS65 Assembler for R6502 [1.42].                                     Page   41
-------------------------------- bank\bank0.s --------------------------------

0613 =                       scratch		ds	256
                             
                             ;***** THIS IS THE START OF FREE SPACE for DFLAT 
0713 =                       mem_start
                             
                             
                             	include "dflat/dflat.i"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  DFLAT.I
                             ;*  This is the main definitions file for dflat. 
                             ;*  definitions are in here to access the data st
                             ;*  used by dflat.
                             ;*
                             ;************************************************
                             
                             ;* Start dflat program memory
0713 =                       DF_PROGSTART=	mem_start
                             ;* This is the top of usable dflat memory plus 1
9800 =                       DF_MEMTOP	=	0x9800
                             
                             ;* Offset in to tokenised line of length and line
0000 =                       DFTK_LINLEN	=	0x00
0001 =                       DFTK_LINNUM	=	0x01
                             
                             ;* Flags for token, escape value for data types a
0080 =                       DFTK_TOKEN	=	0x80
0020 =                       DFTK_ESCVAL	=	0x20
0000 =                       DFTK_EOL	=	0x00
                             
                             ;* Numeric constants are encoded based on size an
                             ;* user representation.
                             ;* For example the decimal value 16 will be encod
                             ;* DFTK_INTDEC followed by the bytes 0 and 16 to 
                             ;* The same value in binary will be encoded as DF
                             ;* followed by the same 0 and 16 bytes.  This is 
                             ;* tokenised value to be displayed in original re
                             ;* So in the two examples, they will be shown as 
                             ;* '0x0010' respectively.
0000 =                       DFTK_CHR	=	0x00
0001 =                       DFTK_RESV1	=	0x01
0002 =                       DFTK_RESV2	=	0x02
0003 =                       DFTK_RESV3	=	0x03
0004 =                       DFTK_RESV4	=	0x04
0005 =                       DFTK_BYTDEC	=	0x05
0006 =                       DFTK_BYTHEX = 	0x06
0007 =                       DFTK_BYTBIN =	0x07
0008 =                       DFTK_RESV8	=	0x08
0009 =                       DFTK_INTDEC	=	0x09
000a =                       DFTK_INTHEX =	0x0a
000b =                       DFTK_INTBIN	=	0x0b
000c =                       DFTK_RESVC	=	0x0c
000d =                       DFTK_RESVD	=	0x0d
000e =                       DFTK_RESVE	=	0x0e
000f =                       DFTK_RESVF	=	0x0f
                             
AS65 Assembler for R6502 [1.42].                                     Page   42
-------------------------------- bank\bank0.s --------------------------------

                             ;* String constant, variable and procedure tokens
0010 =                       DFTK_STRLIT	=	0x10
0011 =                       DFTK_VAR	=	0x11
0012 =                       DFTK_PROC	=	0x12
001f =                       DFTK_STEND	=	0x1f
                             
                             ;* Qualifier for non-local parameters passed to a
0026 =                       DFTK_VARPARM=	'&'
                             
                             ;* Variable Value Table (VVT) definitions
                             ;* The VVT records the values of variables define
                             ;* the Variable Name Table (VNT).  When a variabl
                             ;* used, it is added to the VNT, and the position
                             ;* VNT is used as an index in to the VVT.
                             ;* Every VVT entry is 8 bytes - so the VNT index 
                             ;* shifted left 3 bits to get the VVT offset.
                             ;* The VNT grows from top of memory down, the VVT
                             ;* grows from start of VNT down.
                             
                             ;* Index in to each entry of the VVT
0000 =                       DFVVT_TYPE	=	0x00
0001 =                       DFVVT_LO	=	0x01
0002 =                       DFVVT_HI	=	0x02
0003 =                       DFVVT_DIM1	=	0x03
0004 =                       DFVVT_DIM2	=	0x04
0008 =                       DFVVT_SZ	=	0x08	;VVT is aligned to 8 byte blocks
                             
                             ;* The meaning of the DFVVT_TYPE entry
0001 =                       DFVVT_INT	=	0x01
0002 =                       DFVVT_BYT	=	0x02
0004 =                       DFVVT_STR	=	0x04
0008 =                       DFVVT_FLT	=	0x08
0040 =                       DFVVT_PROC	=	0x40
0080 =                       DFVVT_ARRY	=	0x80
                             
                             ;* Flags indicating the meaning of a token
                             ;* A token has the top bit set (0x80), then the
                             ;* remaining bits indicate what it represents.
0001 =                       DFTK_KW		=	0x01
0002 =                       DFTK_FN		=	0x02
0004 =                       DFTK_STROP	=	0x04
0008 =                       DFTK_OP		=	0x08
0010 =                       DFTK_INT	=	0x10
0020 =                       DFTK_BYT	=	0x20
0040 =                       DFTK_STR	=	0x40
0080 =                       DFTK_FLT	=	0x80
0007 =                       DFTK_OPMSK	=	0x07
00f8 =                       DFTK_RTMSK	= 	0xf8
                             
                             ;* Defines what type of value is on the parameter
                             ;* All numerics are stored as INT, all STR
                             ;* are pointers to the actual string, thus
                             ;* all entries in the parmeter stack are 3 bytes
0001 =                       DFST_INT	=	0x01
0080 =                       DFST_STR	=	0x80
                             
                             ;* Token values of specific commands, used during
                             ;* command processing.
                             ;* ANY CHANGE TO THE ORDER OF KEYWORDS NEEDS TO R
0086 =                       DFRT_DEF	=	0x86
0087 =                       DFRT_ENDDEF	=	0x87
0088 =                       DFRT_RETURN	=	0x88
AS65 Assembler for R6502 [1.42].                                     Page   43
-------------------------------- bank\bank0.s --------------------------------

0089 =                       DFRT_ABORT	=	0x89
008c =                       DFRT_REPEAT	=	0x8c
008e =                       DFRT_FOR	=	0x8e
008f =                       DFRT_NEXT	=	0x8f
0090 =                       DFRT_WHILE	=	0x90
0091 =                       DFRT_WEND	=	0x91
0092 =                       DFRT_IF		=	0x92
0093 =                       DFRT_ELSE	=	0x93
0094 =                       DFRT_ENDIF	=	0x94
0095 =                       DFRT_ELSEIF	=	0x95
0096 =                       DFRT_DATA	=	0x96
0097 =                       DFRT_ASM	=	0x97
                             
                             _PushTrueJmp macro
                             	ldx #0xff
                             	txa
                             	jmp df_st_pushInt
                             	endm
                             
                             _PushFalseJmp macro
                             	ldx #0x00
                             	txa
                             	jmp df_st_pushInt
                             	endm
                             
                             	include "dflat/error.i"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  ERROR.I
                             ;*  Error definitions file.
                             ;*  The macro to throw an error is elswhere, but 
                             ;*  It issues a 6502 BRK commmand with the next b
                             ;*  the error code.  The BRK handler then picks u
                             ;*  code and shows the appropriate message plus a
                             ;*  number if a program was running.
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code  
                             
                             ; Error message numbers
0000 =                       DFERR_OK		=	0
0001 =                       DFERR_SYNTAX	=	1
0002 =                       DFERR_TYPEMISM	=	2
0003 =                       DFERR_DIM		=	3
0004 =                       DFERR_UNTIL		=	4
0005 =                       DFERR_NOPROC	=	5
0006 =                       DFERR_PROCPARM	=	6
0007 =                       DFERR_IMMEDIATE	=	7
0008 =                       DFERR_UNCLOSEDIF=	8
0009 =                       DFERR_NOIF		=	9
000a =                       DFERR_NEXTFOR	=	10
000b =                       DFERR_FNAME		=	11
000c =                       DFERR_STRLONG	=	12
000d =                       DFERR_BREAK		=	13
AS65 Assembler for R6502 [1.42].                                     Page   44
-------------------------------- bank\bank0.s --------------------------------

000e =                       DFERR_NODATA	=	14
000f =                       DFERR_WEND		=	15
0010 =                       DFERR_NOLINE	=	16
0011 =                       DFERR_RETURN	=	17
0012 =                       DFERR_ABORT		=	18
0013 =                       DFERR_QUANTITY	=	19
0014 =                       DFERR_NOORG		=	20
                             
                             
                             
                             
                             
                             ;****************************************
                             ;*	Set 6502 default vectors	*
                             ;****************************************
                             	data				; Set vectors
fffa =                       	org 0xfffa			; Vectors are at these addresses
fffa : 19c5                  	fcw nmi				; 0xfffa : NMI Vector
fffc : d0c4                  	fcw init			; 0xfffc : Reset Vector
fffe : d7c0                  	fcw call_irq_master	; 0xfffe : IRQ Vector
                             
                             	; ROM code
                             	code				;
c000 =                       	org 0xc000			; Start of ROM
                             
c000 :                       _code_start
                             	; Restore current bank always at address c001
c000 :                       mod_sz_kernel_s
                             
                             ;* Include all core code in the right order
                             	include "kernel/snd-low.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  SND-LOW.S
                             ;*	Routines to access the AY-3-8912, which is don
                             ;*	lines of the VIA - CB2 and CA2 for chip select
                             ;*	Port A for data interface. This makes accessin
                             ;*	8912 a bit slow..
                             ;*
                             ;* 	CB2		CA2		Function		CB2=BDIR, CA2=BC1
                             ;*	0		0		Not selected
                             ;*	0		1		Read register in to Port A
                             ;*	1		0		Write register from Port A
                             ;*	1		1		Select register # from Port A
                             ;************************************************
                             
                             ;****************************************
                             ;* snd_set
                             ;* Set AY register X to value A
                             ;* Input : X = Reg no, A = Value
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
c000 :                       snd_set
c000 : 48               [ 3] 	pha
                             
AS65 Assembler for R6502 [1.42].                                     Page   45
-------------------------------- bank\bank0.s --------------------------------

c001 : a9ff             [ 2] 	lda #0xff				; Set Port A to output
c003 : 8d0303           [ 4] 	sta IO_0+DDRA
                             
c006 : 8e0f03           [ 4] 	stx SND_ADBUS			; Put reg # on Port A (sound bus
                             
c009 : a9ff             [ 2] 	lda #SND_SELSETADDR		; Get ready to select the r
c00b : 8d0c03           [ 4] 	sta SND_MODE			; Latch the reg # on Port A
                             
c00e : a9dd             [ 2] 	lda #SND_DESELECT		; Deselect AY
c010 : 8d0c03           [ 4] 	sta SND_MODE
                             
c013 : 68               [ 4] 	pla						; Get value
c014 : 48               [ 3] 	pha						; but don't lose it
c015 : 8d0f03           [ 4] 	sta SND_ADBUS			; Put reg value on Port A (sound
c018 : a9fd             [ 2] 	lda #SND_SELWRITE		; Select mode for writing dat
c01a : 8d0c03           [ 4] 	sta SND_MODE			; Latch reg value on Port A
                             	
c01d : a9dd             [ 2] 	lda #SND_DESELECT		; Deselect AY
c01f : 8d0c03           [ 4] 	sta SND_MODE
                             
c022 : 68               [ 4] 	pla
                             	
c023 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* snd_get
                             ;* Get AY register X value
                             ;* Input : X = Reg no
                             ;* Output : A = Value
                             ;* Regs affected : None
                             ;****************************************
c024 :                       snd_get
                             
c024 : a9ff             [ 2] 	lda #0xff				; Set Port A to output
c026 : 8d0303           [ 4] 	sta IO_0+DDRA
                             
c029 : 8e0f03           [ 4] 	stx SND_ADBUS			; Put X on the sound bus (X = re
                             
c02c : a9ff             [ 2] 	lda #SND_SELSETADDR		; Get ready to select the r
c02e : 8d0c03           [ 4] 	sta SND_MODE			; Latch the reg # on Port A
                             
c031 : a9dd             [ 2] 	lda #SND_DESELECT		; Deselect AY
c033 : 8d0c03           [ 4] 	sta SND_MODE
                             
c036 : a900             [ 2] 	lda #0x00				; Set Port A to input
c038 : 8d0303           [ 4] 	sta IO_0+DDRA
                             
c03b : a9df             [ 2] 	lda #SND_SELREAD		; Select mode for reading data
c03d : 8d0c03           [ 4] 	sta SND_MODE			; Set read mode on AY
                             
c040 : ad0f03           [ 4] 	lda SND_ADBUS			; Get value in to Y from Port A
c043 : 48               [ 3] 	pha						; Save it to stack
                             	
c044 : a9dd             [ 2] 	lda #SND_DESELECT		; Deselect AY
c046 : 8d0c03           [ 4] 	sta SND_MODE
                             
c049 : 68               [ 4] 	pla						; Get the value off stack
                             	
c04a : 60               [ 6] 	rts
                             
                             
                             	include "kernel/main.s"
AS65 Assembler for R6502 [1.42].                                     Page   46
-------------------------------- bank\bank0.s --------------------------------

                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  MAIN.S
                             ;*  This is where the main user program is execut
                             ;*  the 'kernel' once the system is initialised a
                             ;*  Today, main does very little - first shows th
                             ;*  boot up message, and then passes control to d
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code
                             
c04b :                       main
                             	_println msg_hello_world
                             
                             
                             
c060 :                       infinity
c060 : 2070df           [ 6] 	jsr df_pg_dflat
c063 : 4c60c0           [ 3] 	jmp infinity
                             
c066 :                       msg_hello_world
                             	;* build.s is generate by the assemble.bat file
                             	;* all it does is echo an assembler line to
                             	;* including the build date in the message.
                             	include "kernel/build.s"
c066 : 4f726963206466..       db "Oric dflat custom ROM\r" 
c07c : 42792040363530..       db "By @6502Nerd (Dolo Miah)\r" 
c095 : 4275696c64203a..       db "Build : 0.12 [BETA]\r" 
c0a9 : 436f7079726967..       db "Copyright (c) 2021\r\r",0 
                             
                             
                             	include "kernel/irq.s"
                             	
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  IRQ.S
                             ;*	This is the IRQ handler
                             ;*	There is only one regular interrupt source whi
                             ;*	T1 timeout on a 50Hz cycle, whose main job is 
                             ;*	flash the cursor and decrement some timers.
                             ;*	But there are handlers for BRK, user and VIA s
                             ;*	By default the user and VIA do nothing, but ca
                             ;*	redirected to user routines.
                             ;*
                             ;************************************************
                             
                             ;* Obviously this can only be done with
                             ;* interrupts disabled!
AS65 Assembler for R6502 [1.42].                                     Page   47
-------------------------------- bank\bank0.s --------------------------------

c0be :                       init_irq
                             	; Core IRQ handler
c0be : a9e2             [ 2] 	lda #lo(irq)
c0c0 : 8502             [ 3] 	sta vec_irq
c0c2 : a9c0             [ 2] 	lda #hi(irq)
c0c4 : 8503             [ 3] 	sta vec_irq+1
                             	
                             	; Core BRK handler
c0c6 : a904             [ 2] 	lda #lo(irq_brk)
c0c8 : 8504             [ 3] 	sta vec_brk
c0ca : a9c1             [ 2] 	lda #hi(irq_brk)
c0cc : 8505             [ 3] 	sta vec_brk+1
                             
                             	; User handlers VIA0 interrupts
c0ce : a9e1             [ 2] 	lda #lo(null_handler)
c0d0 : 8506             [ 3] 	sta vec_usercia0
c0d2 : a9c0             [ 2] 	lda #hi(null_handler)
c0d4 : 8507             [ 3] 	sta vec_usercia0+1
                             
c0d6 : 60               [ 6] 	rts
                             
                             
                             ;* Calls the master IRQ handler - from the ROM
c0d7 :                       call_irq_master
c0d7 : 6c0200           [ 6] 	jmp (vec_irq)
                             	
                             ;* Calls the BRK handler
c0da :                       call_irq_brk
c0da : 6c0400           [ 6] 	jmp (vec_brk)
                             
                             ;* Call the user CIA0 handler
c0dd :                       call_irq_usercia0
c0dd : 6c0600           [ 6] 	jmp (vec_usercia0)
                             
                             ;* null interrupt
c0e0 :                       null_irq
c0e0 : 40               [ 6] 	rti
                             
                             ;* null handler
c0e1 :                       null_handler
c0e1 : 60               [ 6] 	rts
                             	
                             
                             ;* Master IRQ handler
c0e2 :                       irq
                             	; Don't use _pushAXY as it uses a temp location!
c0e2 : 48               [ 3] 	pha
c0e3 : 8a               [ 2] 	txa
c0e4 : 48               [ 3] 	pha
c0e5 : 98               [ 2] 	tya
c0e6 : 48               [ 3] 	pha
                             
c0e7 : d8               [ 2] 	cld						; Just in case!
c0e8 : 18               [ 2] 	clc						; Standard behaviour
                             
                             	; Check if IRQ or BRK
                             	; load P from stack in to A
c0e9 : ba               [ 2] 	tsx
c0ea : bd0401           [ 4] 	lda 0x104,x
                             	; BRK bit set?
c0ed : 2910             [ 2] 	and #0x10
c0ef : d0e9             [ 3] 	bne call_irq_brk
AS65 Assembler for R6502 [1.42].                                     Page   48
-------------------------------- bank\bank0.s --------------------------------

                             	
                             	;* Primary interrupt is timer 1
c0f1 : ad0d03           [ 4] 	lda IO_0 + IFR
c0f4 : 2940             [ 2] 	and #0x40				; Bit 6 = Timer 1 interrupt
c0f6 : f006             [ 3] 	beq irq_fin				; If nothing then end
                             
                             	; Service the timer 1 interrupt
c0f8 : 8d0d03           [ 4] 	sta IO_0 + IFR			; Clear the interrupt
c0fb : 2031c1           [ 6] 	jsr int_vdp_handler
                             
c0fe :                       irq_fin
                             	_pullAXY
                             
c103 : 40               [ 6] 	rti
                             	
                             ;* Handle BRK
c104 :                       irq_brk
                             	; Handle BRK
                             	; Get PCL,H minus 2 gives the BRK instruction ad
c104 : 38               [ 2] 	sec
c105 : bd0501           [ 4] 	lda 0x0105,x
c108 : e902             [ 2] 	sbc #2
c10a : 8562             [ 3] 	sta df_brkpc
c10c : bd0601           [ 4] 	lda 0x0106,x
c10f : e900             [ 2] 	sbc #0
c111 : 8563             [ 3] 	sta df_brkpc+1
                             	; Get the byte pointed to by old PC
                             	; which is 1 on from the BRK
c113 : a001             [ 2] 	ldy #1
c115 : b162             [ 5] 	lda (df_brkpc),y
c117 : 8564             [ 3] 	sta df_brkval
c119 : 855d             [ 3] 	sta errno
                             	; now update the return address
c11b : a560             [ 3] 	lda df_pc
c11d : 9d0501           [ 5] 	sta 0x105,x
c120 : a561             [ 3] 	lda df_pc+1
c122 : 9d0601           [ 5] 	sta 0x106,x
                             	
                             	_pullAXY
                             
                             	; Save the registers in temp area
c12a : 853d             [ 3] 	sta num_a
c12c : 863e             [ 3] 	stx num_a+1
c12e : 843f             [ 3] 	sty num_a+2
                             	; when RTI occurs:
                             	;  will return to error handler
                             	;  df_brkval will contain signature
c130 : 40               [ 6] 	rti
                             	
                             	
                             ;****************************************
                             ;* int_vdp_handler
                             ;* VDP interrupt handler
                             ;****************************************
c131 :                       int_vdp_handler
c131 : 204dc1           [ 6] 	jsr update_timers	; If it is then update system 
c134 : a50d             [ 3] 	lda vdp_curoff		; Is cursor enabled?
c136 : d014             [ 3] 	bne int_vdp_fin		; Skip if disabled
                             
c138 : c60c             [ 5] 	dec vdp_curcnt		; Decrement countdown
c13a : d010             [ 3] 	bne int_vdp_fin		; If not expired, do nothing
c13c : a50b             [ 3] 	lda vdp_curtim		; Reset cursor countdown
AS65 Assembler for R6502 [1.42].                                     Page   49
-------------------------------- bank\bank0.s --------------------------------

c13e : 850c             [ 3] 	sta vdp_curcnt
c140 : a50e             [ 3] 	lda vdp_curstat		; Get the flash status
c142 : 4980             [ 2] 	eor #0x80			; Invert top bit
c144 : 850e             [ 3] 	sta vdp_curstat
c146 : 450f             [ 3] 	eor vdp_curval		; EOR with whats under cursor
                             	; Use cursor address, write to screen
                             	; ptr is base, offset with X coord in Y register
c148 : a41c             [ 3] 	ldy gr_scrngeom+gr_cur_x
c14a : 911e             [ 5] 	sta (gr_scrngeom+gr_cur_ptr),y
                             
c14c :                       int_vdp_fin	
c14c : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* update_timers
                             ;* Update 24 bit timer and debounce counters
                             ;****************************************
c14d :                       update_timers
c14d : e608             [ 5] 	inc vdp_cnt
c14f : d006             [ 3] 	bne inc_kb_timers
c151 : e609             [ 5] 	inc vdp_cnt_hi
c153 : d002             [ 3] 	bne inc_kb_timers
c155 : e60a             [ 5] 	inc vdp_cnt_hi2
c157 :                       inc_kb_timers
c157 : a62d             [ 3] 	ldx kb_deb			; Is debounce 0?
c159 : f002             [ 3] 	beq skip_kb_deb
c15b : c62d             [ 5] 	dec kb_deb
c15d :                       skip_kb_deb
c15d : a62f             [ 3] 	ldx kb_rep			; Is repeat timer 0?
c15f : f002             [ 3] 	beq skip_kb_rep
c161 : c62f             [ 5] 	dec kb_rep
c163 :                       skip_kb_rep
c163 : 60               [ 6] 	rts
                             	
                             
                             	include "utils/utils.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  UTILS.S
                             ;*  This module implements various utility functi
                             ;*  converting from ASCII to binary form for numb
                             ;*  vice-versa to allow humans to actually be abl
                             ;*  and read numbers in their prefered form!
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code
                             
c164 :                       utilPrintSPC
c164 : 48               [ 3] 	pha
c165 : a920             [ 2] 	lda #' '
c167 : 204bc4           [ 6] 	jsr io_put_ch
c16a : 68               [ 4] 	pla
c16b : 60               [ 6] 	rts
AS65 Assembler for R6502 [1.42].                                     Page   50
-------------------------------- bank\bank0.s --------------------------------

                             
c16c :                       utilPrintCRLF
c16c : 48               [ 3] 	pha
c16d : a90d             [ 2] 	lda #UTF_CR
c16f : 204bc4           [ 6] 	jsr io_put_ch
c172 : 68               [ 4] 	pla
c173 : 60               [ 6] 	rts
                             
c174 :                       utilPrintA
c174 : 8538             [ 3] 	sta tmp_d
c176 : 48               [ 3] 	pha
c177 : 8a               [ 2] 	txa
c178 : 48               [ 3] 	pha
c179 : a538             [ 3] 	lda tmp_d
c17b : 2089c1           [ 6] 	jsr str_a_to_x
c17e : 204bc4           [ 6] 	jsr io_put_ch
c181 : 8a               [ 2] 	txa
c182 : 204bc4           [ 6] 	jsr io_put_ch
c185 : 68               [ 4] 	pla
c186 : aa               [ 2] 	tax
c187 : 68               [ 4] 	pla
c188 : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* str_a_to_x
                             ;* Convert accumulator to hex string
                             ;* Input : A = Byte to convert
                             ;* Output : A = High Char, X = Low Char
                             ;* Regs affected : P
                             ;****************************************
c189 :                       str_a_to_x
c189 : 48               [ 3] 	pha					; Save the byte using later on
c18a : 290f             [ 2] 	and #0x0f			; Mask low nibble
c18c : 18               [ 2] 	clc
c18d : 6930             [ 2] 	adc #'0'			; Convert to UTF
c18f : c93a             [ 2] 	cmp #('9'+1)		; If A greater than '9' then
c191 : 9002             [ 3] 	bcc skip_a_f_1		; skip a-f adjustment
c193 : 6926             [ 2] 	adc #0x26			; Add 27 (6+C) to get in to A-F rang
c195 :                       skip_a_f_1
c195 : aa               [ 2] 	tax					; Low char is in X
c196 : 68               [ 4] 	pla					; Get byte back
c197 : 4a               [ 2] 	lsr a				; Make high nibble low
c198 : 4a               [ 2] 	lsr a
c199 : 4a               [ 2] 	lsr a
c19a : 4a               [ 2] 	lsr a
c19b : 18               [ 2] 	clc
c19c : 6930             [ 2] 	adc #'0'			; Convert to UTF
c19e : c93a             [ 2] 	cmp #('9'+1)		; If A greater than '9' then
c1a0 : 9002             [ 3] 	bcc skip_a_f_2		; skip a-f adjustment
c1a2 : 6926             [ 2] 	adc #0x26			; Add 27 (6+C) to get in to A-F rang
c1a4 :                       skip_a_f_2
                             
c1a4 : 18               [ 2] 	clc					; No error
c1a5 : 60               [ 6] 	rts					; A high nibble
                             
                             ;****************************************
                             ;* str_x_to_a
                             ;* Convert hex string to accumulator
                             ;* Input : A = High Char, X = Low Char
                             ;* Output : A = Value
                             ;* Regs affected : P
AS65 Assembler for R6502 [1.42].                                     Page   51
-------------------------------- bank\bank0.s --------------------------------

                             ;****************************************
c1a6 :                       str_x_to_a
c1a6 : 0920             [ 2] 	ora #0x20			; Make alpha in to lower case
c1a8 : 38               [ 2] 	sec					; Process high char in A
c1a9 : e930             [ 2] 	sbc #'0'			; Convert to hex nibble
c1ab : c90a             [ 2] 	cmp #10				; If A < 10 then
c1ad : 9002             [ 3] 	bcc skip_x_f_1		; skip a-f adjustment
c1af : e927             [ 2] 	sbc #0x27			; Sub 7 to get in to A-F range
c1b1 :                       skip_x_f_1
c1b1 : c910             [ 2] 	cmp #0x10			; Nibble should be <= 0x0f
c1b3 : b01d             [ 3] 	bcs	str_x_to_a_err	; Error if not
                             
c1b5 : 0a               [ 2] 	asl a				; This is the high nibble
c1b6 : 0a               [ 2] 	asl a
c1b7 : 0a               [ 2] 	asl a
c1b8 : 0a               [ 2] 	asl a
c1b9 : 48               [ 3] 	pha					; Save the high nibble
c1ba : 8a               [ 2] 	txa					; Now process the low char in X
c1bb : 0920             [ 2] 	ora #0x20			; Make alpha in to lower case
c1bd : 38               [ 2] 	sec
c1be : e930             [ 2] 	sbc #'0'			; Convert to hex nibble
c1c0 : c90a             [ 2] 	cmp #10				; If A < 10 then
c1c2 : 9002             [ 3] 	bcc skip_x_f_2		; skip a-f adjustment
c1c4 : e927             [ 2] 	sbc #0x27			; Sub 7 to get in to A-F range
c1c6 :                       skip_x_f_2
c1c6 : c910             [ 2] 	cmp #0x10			; Nibble should be <= 0x0f
c1c8 : b007             [ 3] 	bcs	str_x_to_a_errl	; Error if not
                             
c1ca : 853d             [ 3] 	sta num_a			; Store low nibble in temp
c1cc : 68               [ 4] 	pla					; Get high nibble
c1cd : 053d             [ 3] 	ora num_a			; OR with low nibble
                             
c1cf : 18               [ 2] 	clc					; No error
c1d0 : 60               [ 6] 	rts					; A contains value
                             
c1d1 :                       str_x_to_a_errl
c1d1 : 68               [ 4] 	pla
c1d2 :                       str_x_to_a_err
                             	SWBRK CMD_ERR_VAL
                             
                             
                             ;****************************************
                             ;* con_n_to_a
                             ;* Convert numeric string to accumulator (unsigne
                             ;* Input : Pointer to string (X=L, A=H), Y = Sour
                             ;* Output : num_a, num_a+1 contains word, X=numbe
                             ;* A = Source type detected
                             ;* Regs affected : CS = Error
                             ;****************************************
c1d4 :                       con_n_to_a
c1d4 : 8649             [ 3] 	stx num_tmp
c1d6 : 854a             [ 3] 	sta num_tmp+1
c1d8 : a900             [ 2] 	lda #0
c1da : 853d             [ 3] 	sta num_a
c1dc : 853e             [ 3] 	sta num_a+1
c1de : c000             [ 2] 	cpy #NUM_ANY
c1e0 : f014             [ 3] 	beq con_n_to_a_detect
c1e2 : 88               [ 2] 	dey
c1e3 : d003             [ 3] 	bne con_n_not_dec
c1e5 :                       con_dec_jmp
c1e5 : 4c7ac2           [ 3] 	jmp con_dec_to_a_int
c1e8 :                       con_n_not_dec
AS65 Assembler for R6502 [1.42].                                     Page   52
-------------------------------- bank\bank0.s --------------------------------

c1e8 : 88               [ 2] 	dey
c1e9 : d003             [ 3] 	bne con_n_not_hex
c1eb :                       con_hex_jmp
c1eb : 4c11c2           [ 3] 	jmp con_hex_to_a_int
c1ee :                       con_n_not_hex
c1ee : 88               [ 2] 	dey
c1ef : d003             [ 3] 	bne con_n_err
c1f1 :                       con_bin_jmp
c1f1 : 4c50c2           [ 3] 	jmp con_bin_to_a_int
c1f4 :                       con_n_err
c1f4 : 38               [ 2] 	sec
c1f5 : 60               [ 6] 	rts
c1f6 :                       con_n_to_a_detect		; Y is zero on entry
c1f6 : b149             [ 5] 	lda (num_tmp),y
c1f8 : c930             [ 2] 	cmp #'0'
c1fa : d0e9             [ 3] 	bne con_dec_jmp
c1fc : a001             [ 2] 	ldy #1
c1fe : b149             [ 5] 	lda (num_tmp),y
c200 : 0920             [ 2] 	ora #0x20
c202 : c978             [ 2] 	cmp #'x'
c204 : f0e5             [ 4] 	beq con_hex_jmp
c206 : c962             [ 2] 	cmp #'b'
c208 : f0e7             [ 4] 	beq con_bin_jmp
c20a : 4ce5c1           [ 3] 	jmp con_dec_jmp
                             
                             ;****************************************
                             ;* con_hex_to_a
                             ;* Convert hex string to accumulator (unsigned)
                             ;* Input : Pointer to string (X=L, A=H)
                             ;* Output : num_a, num_a+1 contains word, X=numbe
                             ;* Regs affected : CS = Error
                             ;****************************************
c20d :                       con_hex_to_a
c20d : 8649             [ 3] 	stx num_tmp
c20f : 854a             [ 3] 	sta num_tmp+1
c211 :                       con_hex_to_a_int
c211 : a205             [ 2] 	ldx #5			; > 4 digits will cause error
c213 : a002             [ 2] 	ldy #2			; start at first digit
c215 :                       con_hex_digit
c215 : b149             [ 5] 	lda (num_tmp),y
c217 : 0920             [ 2] 	ora #0x20					; Make alpha in to lower case
c219 : 38               [ 2] 	sec							; Process high char in A
c21a : e930             [ 2] 	sbc #'0'					; Convert to hex nibble
c21c : c90a             [ 2] 	cmp #10						; If A < 10 then
c21e : 9002             [ 3] 	bcc con_hex_skip_x_f_1		; skip a-f adjustment
c220 : e927             [ 2] 	sbc #0x27					; Sub 7 to get in to A-F range
c222 :                       con_hex_skip_x_f_1
c222 : c910             [ 2] 	cmp #0x10					; Nibble should be <= 0x0f
c224 : b01c             [ 3] 	bcs	con_hex_done			; Potentially done if not
c226 : 48               [ 3] 	pha
c227 : a53d             [ 3] 	lda num_a
                             	; make room for lo nibble
c229 : 0a               [ 2] 	asl a
c22a : 263e             [ 5] 	rol num_a+1
c22c : 0a               [ 2] 	asl a
c22d : 263e             [ 5] 	rol num_a+1
c22f : 0a               [ 2] 	asl a
c230 : 263e             [ 5] 	rol num_a+1
c232 : 0a               [ 2] 	asl a
c233 : 263e             [ 5] 	rol num_a+1
c235 : 853d             [ 3] 	sta num_a
                             	; save in low nibble
AS65 Assembler for R6502 [1.42].                                     Page   53
-------------------------------- bank\bank0.s --------------------------------

c237 : 68               [ 4] 	pla
c238 : 053d             [ 3] 	ora num_a
c23a : 853d             [ 3] 	sta num_a
c23c : c8               [ 2] 	iny
c23d : ca               [ 2] 	dex
c23e : d0d5             [ 3] 	bne con_hex_digit
                             	; if got to a 5th digit then error
c240 :                       con_hex_err
c240 : 38               [ 2] 	sec
c241 : 60               [ 6] 	rts
                             	; found a non-hex digit
c242 :                       con_hex_done
                             	; if no digits processed then error
c242 : c002             [ 2] 	cpy #2
c244 : f0fa             [ 3] 	beq con_hex_err
                             	; move y to x for digits processed
c246 : 98               [ 2] 	tya
c247 : aa               [ 2] 	tax
c248 : a902             [ 2] 	lda #NUM_HEX
c24a : 18               [ 2] 	clc
c24b : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* con_bin_to_a
                             ;* Convert bin string to accumulator (unsigned)
                             ;* Input : Pointer to string (X=L, A=H)
                             ;* Output : num_a, num_a+1 contains word, X=numbe
                             ;* Regs affected : CS = Error
                             ;****************************************
c24c :                       con_bin_to_a
c24c : 8649             [ 3] 	stx num_tmp
c24e : 854a             [ 3] 	sta num_tmp+1
c250 :                       con_bin_to_a_int
c250 : a002             [ 2] 	ldy #2
c252 : a211             [ 2] 	ldx #17						; Max 16 binary digits allowed
c254 :                       con_bin_digit
c254 : b149             [ 5] 	lda (num_tmp),y
c256 : c930             [ 2] 	cmp #'0'
c258 : 9010             [ 3] 	bcc con_bin_done
c25a : c932             [ 2] 	cmp #'1'+1
c25c : b00c             [ 3] 	bcs con_bin_done
                             	; sets C if '1' else resets C
c25e : 69cf             [ 2] 	adc #0xff-'0'
                             	; shift in digit
c260 : 263d             [ 5] 	rol num_a
c262 : 263e             [ 5] 	rol num_a+1
c264 : c8               [ 2] 	iny
c265 : ca               [ 2] 	dex
c266 : d0ec             [ 3] 	bne con_bin_digit
                             	; on the 17th digit is too much, error
c268 : f00a             [ 3] 	beq con_bin_err
c26a :                       con_bin_done
                             	; didn't process any digit = error
c26a : c002             [ 2] 	cpy #2
c26c : f006             [ 3] 	beq con_bin_err
                             	; put digits processed in to X
c26e : 98               [ 2] 	tya
c26f : aa               [ 2] 	tax
c270 : a903             [ 2] 	lda #NUM_BIN
c272 : 18               [ 2] 	clc
c273 : 60               [ 6] 	rts
c274 :                       con_bin_err
AS65 Assembler for R6502 [1.42].                                     Page   54
-------------------------------- bank\bank0.s --------------------------------

c274 :                       str_d_error
c274 : 38               [ 2] 	sec
c275 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* con_d_to_a
                             ;* Convert decimal string to accumulator (SIGNED)
                             ;* Input : Pointer to string (X=L, A=H)
                             ;* Output : num_a, num_a+1 contains word, X=numbe
                             ;* Regs affected : CS = Error
                             ;****************************************
c276 :                       con_dec_to_a
c276 : 8649             [ 3] 	stx num_tmp
c278 : 854a             [ 3] 	sta num_tmp+1
c27a :                       con_dec_to_a_int
c27a : a000             [ 2] 	ldy #0
                             	; Detect if leading minus sign
c27c : b149             [ 5] 	lda (num_tmp),y
c27e : c92d             [ 2] 	cmp #'-'
c280 : d001             [ 3] 	bne str_d_find_end
                             	; skip over minus if found
c282 : c8               [ 2] 	iny
c283 :                       str_d_find_end
c283 : b149             [ 5] 	lda (num_tmp),y
c285 : c930             [ 2] 	cmp #'0'
c287 : 9007             [ 3] 	bcc str_d_found_end
c289 : c93a             [ 2] 	cmp #'9'+1
c28b : b003             [ 3] 	bcs str_d_found_end
c28d : c8               [ 2] 	iny
c28e : d0f3             [ 3] 	bne str_d_find_end	; Possble wraparound but shou
c290 :                       str_d_found_end
c290 : c007             [ 2] 	cpy #7				; Biggest int is 6 chars
c292 : b0e0             [ 3] 	bcs str_d_error		; e.g. -32767
c294 : 844c             [ 3] 	sty num_tmp+3
c296 : a900             [ 2] 	lda #0
c298 : 854b             [ 3] 	sta num_tmp+2
c29a : 853d             [ 3] 	sta num_a
c29c : 853e             [ 3] 	sta num_a+1
c29e :                       str_d_process_digit
c29e : 88               [ 2] 	dey
c29f : 3027             [ 3] 	bmi str_d_digits_done
                             
c2a1 : b149             [ 5] 	lda (num_tmp),y
                             
c2a3 : c92d             [ 2] 	cmp #'-'			; Got to minus sign?
c2a5 : f021             [ 3] 	beq str_d_digits_done ; also done
                             
c2a7 : 38               [ 2] 	sec
c2a8 : e930             [ 2] 	sbc #'0'
                             	; Convert digit to number
                             	; and then offset in to
                             	; look up table of powers
c2aa : 18               [ 2] 	clc
c2ab : 0a               [ 2] 	asl a
c2ac : 654b             [ 3] 	adc num_tmp+2
                             	; X contains index to powers
c2ae : aa               [ 2] 	tax
c2af : a53d             [ 3] 	lda num_a
c2b1 : 7de5c2           [ 4] 	adc str_d_powers,x
c2b4 : 853d             [ 3] 	sta num_a
c2b6 : a53e             [ 3] 	lda num_a+1
c2b8 : 7de6c2           [ 4] 	adc str_d_powers+1,x
AS65 Assembler for R6502 [1.42].                                     Page   55
-------------------------------- bank\bank0.s --------------------------------

c2bb : 853e             [ 3] 	sta num_a+1
c2bd : b0b5             [ 3] 	bcs str_d_error
                             	; Move to next power of 10 index
c2bf : a54b             [ 3] 	lda num_tmp+2
c2c1 : 6914             [ 2] 	adc #20
c2c3 : 854b             [ 3] 	sta num_tmp+2
c2c5 : 4c9ec2           [ 3] 	jmp str_d_process_digit
c2c8 :                       str_d_digits_done
                             	; check if minus
c2c8 : b149             [ 5] 	lda (num_tmp),y
c2ca : c92d             [ 2] 	cmp #'-'
c2cc : d011             [ 3] 	bne str_d_skip_neg
c2ce : a64c             [ 3] 	ldx num_tmp+3		; Must have >= 2 chars
c2d0 : e002             [ 2] 	cpx #2				; else it's an error
c2d2 : 90a0             [ 3] 	bcc str_d_error
c2d4 : a63d             [ 3] 	ldx num_a
c2d6 : a53e             [ 3] 	lda num_a+1
c2d8 : 2049c3           [ 6] 	jsr twos_complement
c2db : 863d             [ 3] 	stx num_a
c2dd : 853e             [ 3] 	sta num_a+1
c2df :                       str_d_skip_neg
c2df : a64c             [ 3] 	ldx num_tmp+3
c2e1 : a901             [ 2] 	lda #NUM_DEC
c2e3 : 18               [ 2] 	clc
c2e4 : 60               [ 6] 	rts
                             
c2e5 :                       str_d_powers
c2e5 : 00000100020003..      	dw	0, 1, 2, 3, 4, 5, 6, 7, 8, 9
c2f9 : 00000a0014001e..      	dw	0, 10, 20, 30, 40, 50, 60, 70, 80, 90
c30d : 00006400c8002c..      	dw	0, 100, 200, 300, 400, 500, 600, 700, 800, 90
c321 : 0000e803d007b8..      	dw	0, 1000, 2000, 3000, 4000, 5000, 6000, 7000, 
c335 : 00001027204e30..      	dw	0, 10000, 20000, 30000, 40000, 50000, 60000, 
                             	
                             
                             ;****************************************
                             ;* twos_complement
                             ;* Twos complement of X,A (X=low)
                             ;* Input : X = Low byte, A = High Byte to convert
                             ;* Output : X,A in 2's complement
                             ;* Regs affected : P
                             ;****************************************
c349 :                       twos_complement
c349 : 49ff             [ 2] 	eor #0xff
c34b : 48               [ 3] 	pha
c34c : 8a               [ 2] 	txa
c34d : 49ff             [ 2] 	eor #0xff
c34f : aa               [ 2] 	tax
c350 : 68               [ 4] 	pla
c351 : e8               [ 2] 	inx
c352 : d003             [ 3] 	bne twos_complement_skip_X
c354 : 38               [ 2] 	sec			; Add 1 to A
c355 : 6900             [ 2] 	adc #0
c357 :                       twos_complement_skip_X
c357 : 60               [ 6] 	rts
                             	
                             
                             ;****************************************
                             ;* hex_to_bcd
                             ;* Convert accumulator,X to BCD
                             ;* Input : X = Low byte, A = High Byte to convert
                             ;* Output : 3 bytes of num_a is updated
                             ;* Regs affected : P
AS65 Assembler for R6502 [1.42].                                     Page   56
-------------------------------- bank\bank0.s --------------------------------

                             ;****************************************
c358 :                       hex_to_bcd
c358 : 08               [ 3] 	php
c359 : 48               [ 3] 	pha
c35a : 8538             [ 3] 	sta tmp_d
c35c : 8a               [ 2] 	txa
c35d : 48               [ 3] 	pha
c35e : a538             [ 3] 	lda tmp_d
                             
c360 : 8649             [ 3] 	stx num_tmp
c362 : 854a             [ 3] 	sta num_tmp+1
c364 : c980             [ 2] 	cmp #0x80			; Negative?
c366 : 9003             [ 3] 	bcc hex_to_bcd_skip_neg
c368 : 2049c3           [ 6] 	jsr twos_complement
c36b :                       hex_to_bcd_skip_neg
c36b : a200             [ 2] 	ldx #0
c36d : 863d             [ 3] 	stx num_a
c36f : 863e             [ 3] 	stx num_a+1
c371 : 863f             [ 3] 	stx num_a+2
c373 : 8640             [ 3] 	stx num_a+3
c375 : a210             [ 2] 	ldx #16
c377 : f8               [ 2] 	sed
c378 :                       bin_to_bcd_bit
c378 : 0649             [ 5] 	asl num_tmp
c37a : 264a             [ 5] 	rol num_tmp+1
c37c : a53d             [ 3] 	lda num_a
c37e : 653d             [ 3] 	adc num_a
c380 : 853d             [ 3] 	sta num_a
c382 : a53e             [ 3] 	lda num_a+1
c384 : 653e             [ 3] 	adc num_a+1
c386 : 853e             [ 3] 	sta num_a+1
c388 : a53f             [ 3] 	lda num_a+2
c38a : 653f             [ 3] 	adc num_a+2
c38c : 853f             [ 3] 	sta num_a+2
c38e : ca               [ 2] 	dex
c38f : d0e7             [ 3] 	bne bin_to_bcd_bit
                             	
c391 : 68               [ 4] 	pla
c392 : aa               [ 2] 	tax
c393 : 68               [ 4] 	pla
c394 : 28               [ 4] 	plp
c395 : 60               [ 6] 	rts
                             	
                             ;****************************************
                             ;* bcd_to_str
                             ;* Convert num_buf to chars
                             ;* Input : num_a in BCD format
                             ;* Output : num_buf in ASCII 6 digits
                             ;* Output is big endian, input is not
                             ;* Regs affected : P
                             ;****************************************
c396 :                       bcd_to_str
                             	_pushAXY
                             
                             
c39f : a205             [ 2] 	ldx #5						; Index in to string
c3a1 : a000             [ 2] 	ldy #0						; Current BCD digit
c3a3 :                       bcd_str
c3a3 : b93d00           [ 4] 	lda num_a,y
                             	; Convert 1s digit of byte
c3a6 : 48               [ 3] 	pha
c3a7 : 290f             [ 2] 	and #0xf
AS65 Assembler for R6502 [1.42].                                     Page   57
-------------------------------- bank\bank0.s --------------------------------

c3a9 : 18               [ 2] 	clc
c3aa : 6930             [ 2] 	adc #0x30
c3ac : 954d             [ 4] 	sta num_buf,x
                             	; Convert 10s digit of byte
c3ae : 68               [ 4] 	pla
c3af : 4a               [ 2] 	lsr a
c3b0 : 4a               [ 2] 	lsr a
c3b1 : 4a               [ 2] 	lsr a
c3b2 : 4a               [ 2] 	lsr a
c3b3 : 18               [ 2] 	clc
c3b4 : 6930             [ 2] 	adc #0x30					; Convert to ASCII
c3b6 : 954c             [ 4] 	sta num_buf-1,x
c3b8 : ca               [ 2] 	dex
c3b9 : ca               [ 2] 	dex
c3ba : c8               [ 2] 	iny
c3bb : c003             [ 2] 	cpy #3						; 3 BCD digits max
c3bd : d0e4             [ 3] 	bne bcd_str
                             
                             	_pullAXY
                             
c3c4 : 60               [ 6] 	rts
                             	
                             ;****************************************
                             ;* out_bcd
                             ;* Output a bcd string in num_buf
                             ;* Input : num_buf has the ASCII
                             ;* Input : C=1 print leading zeros else not
                             ;* Output : num_buf in ASCII 6 digits
                             ;* Output is big endian, input is not, Y=digits p
                             ;* Regs affected : P
                             ;****************************************
c3c5 :                       out_bcd
c3c5 : 48               [ 3] 	pha
c3c6 : 8a               [ 2] 	txa
c3c7 : 48               [ 3] 	pha
c3c8 : 08               [ 3] 	php
c3c9 : a000             [ 2] 	ldy #0						; How many digits printed
c3cb : a200             [ 2] 	ldx #0						; Index in to string
c3cd :                       out_bcd_digit
c3cd : b54d             [ 4] 	lda num_buf,x
c3cf : c000             [ 2] 	cpy #0						; If not in leading zero mode
c3d1 : d008             [ 3] 	bne out_bcd_print			; No then go print
                             
c3d3 : c930             [ 2] 	cmp #'0'					; else check if zero
c3d5 : d004             [ 3] 	bne out_bcd_print			; No then go print
                             
c3d7 : 28               [ 4] 	plp
c3d8 : 08               [ 3] 	php
c3d9 : 9004             [ 3] 	bcc out_bcd_next			; If C=0 go to next digit, el
c3db :                       out_bcd_print
c3db : c8               [ 2] 	iny
c3dc : 204bc4           [ 6] 	jsr io_put_ch
c3df :                       out_bcd_next
c3df : e8               [ 2] 	inx
c3e0 : e006             [ 2] 	cpx #6
c3e2 : d0e9             [ 3] 	bne out_bcd_digit
c3e4 : c000             [ 2] 	cpy #0						; If nothing printed
c3e6 : d006             [ 3] 	bne out_bcd_fin
c3e8 : a930             [ 2] 	lda #'0'					; Need to put out 1 zero
c3ea : 204bc4           [ 6] 	jsr io_put_ch
c3ed : c8               [ 2] 	iny
c3ee :                       out_bcd_fin
AS65 Assembler for R6502 [1.42].                                     Page   58
-------------------------------- bank\bank0.s --------------------------------

c3ee : 28               [ 4] 	plp
c3ef : 68               [ 4] 	pla
c3f0 : aa               [ 2] 	tax
c3f1 : 68               [ 4] 	pla
c3f2 : 18               [ 2] 	clc
c3f3 : 60               [ 6] 	rts
                             	
                             	
                             ;****************************************
                             ;* print_a_to_d
                             ;* Convert X,A to decimal string
                             ;* Input : X,A = number Low,High
                             ;* Input : C=1 print leading zeros else not
                             ;* Output : num_buf in ASCII max 6 digits
                             ;*          Y=digits printed including sign
                             ;* Output is big endian, input is not
                             ;* Regs affected : P
                             ;****************************************
c3f4 :                       print_a_to_d
c3f4 : 08               [ 3] 	php
c3f5 : c980             [ 2] 	cmp #0x80					; Check if sign bit is set
c3f7 : 9014             [ 4] 	bcc print_a_to_d_skip_neg	; Skip if not (postive
c3f9 : 2049c3           [ 6] 	jsr twos_complement			; Flip from 2s complement
c3fc : 2058c3           [ 6] 	jsr hex_to_bcd				; Convert to BCD
c3ff : 2096c3           [ 6] 	jsr bcd_to_str				; Convert BCD to string
c402 : a92d             [ 2] 	lda #'-'
c404 : 204bc4           [ 6] 	jsr io_put_ch
c407 : 28               [ 4] 	plp							; Leading zeros preference
c408 : 20c5c3           [ 6] 	jsr out_bcd
c40b : c8               [ 2] 	iny							; Account for sign
c40c : 60               [ 6] 	rts
c40d :                       print_a_to_d_skip_neg
c40d : 2058c3           [ 6] 	jsr hex_to_bcd				; Convert to BCD
c410 : 2096c3           [ 6] 	jsr bcd_to_str				; Convert BCD to string
c413 : 28               [ 4] 	plp							; Leading zeros preference
c414 : 4cc5c3           [ 3] 	jmp out_bcd					; Print +ve string
                             	
                             	include "io/io.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  IO.S
                             ;*  General IO module.  Allows different IO devic
                             ;*  utilised transparently by the rest of the cod
                             ;*  Other code should use "io_" commands so that 
                             ;*  do not need to know what specific device is p
                             ;*  input and output capabilities.
                             ;*	On startup, the kernel defaults to keyboard an
                             ;*  examines the BBC DIP switch to decide whether
                             ;*	but when saving and loading points to tape rou
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code
                             
c417 :                       mod_sz_io_s
AS65 Assembler for R6502 [1.42].                                     Page   59
-------------------------------- bank\bank0.s --------------------------------

                             
                             ;****************************************
                             ;* io_init
                             ;* Initialise the default device and make active
                             ;* No keys pressed = serial (default)
                             ;* F0 pressed = KB/VDP
                             ;* F1 pressed = Serial
                             ;* Keyboard and screen or serial port
                             ;* Output : None
                             ;* Regs affected : P, A
                             ;****************************************
c417 :                       io_init
c417 : a901             [ 2] 	lda #1				; Default = KB/VDP
c419 : 8d0006           [ 4] 	sta io_default
c41c : 4c22c4           [ 3] 	jmp io_active_device; Activate the device
                             
                             
                             ;****************************************
                             ;* io_set_default, io_active_device
                             ;* Activate device based on default or A
                             ;* Input : A = Device number
                             ;* Output : None
                             ;* Regs affected : P, A
                             ;****************************************
c41f :                       io_set_default			; Entry point for default
c41f : ad0006           [ 4] 	lda io_default
c422 :                       io_active_device		; Entry point for A set
c422 : aa               [ 2] 	tax					; X=buf size index
c423 : 0a               [ 2] 	asl	a				; x16 the Block number
c424 : 0a               [ 2] 	asl a
c425 : 0a               [ 2] 	asl a
c426 : 0a               [ 2] 	asl a
c427 : a8               [ 2] 	tay					; Y=index in to device table
c428 : bdaec4           [ 4] 	lda io_buf_sz,x
c42b : 853b             [ 3] 	sta buf_sz
c42d : a200             [ 2] 	ldx #0
                             	; Copy device settings to io block
c42f :                       io_copy_data
c42f : b9b0c4           [ 4] 	lda io_devices,y
c432 : 9d0106           [ 5] 	sta io_block,x
c435 : c8               [ 2] 	iny
c436 : e8               [ 2] 	inx
c437 : e010             [ 2] 	cpx #16
c439 : d0f4             [ 3] 	bne io_copy_data
                             	
c43b : a913             [ 2] 	lda #lo(scratch)	; Initialise IO buffer and size
c43d : 8539             [ 3] 	sta buf_lo
c43f : a906             [ 2] 	lda #hi(scratch)
c441 : 853a             [ 3] 	sta buf_hi
c443 : a90d             [ 2] 	lda #UTF_CR			; Line terminator is CR
c445 : 853c             [ 3] 	sta buf_ef
c447 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* io_get_ch
                             ;* Get a char (wait forever or just check)
                             ;* Input : C = 1 for synchronous, 0 for async
                             ;* Output : A = Byte code, C = 0 means A is inval
                             ;* Regs affected : P, A
                             ;****************************************
c448 :                       io_get_ch
c448 : 6c0106           [ 6] 	jmp (io_block+io_get_byte)
AS65 Assembler for R6502 [1.42].                                     Page   60
-------------------------------- bank\bank0.s --------------------------------

                             	
                             
                             ;****************************************
                             ;* io_put_ch
                             ;* Put a char
                             ;* Input : A = char
                             ;* Regs affected : P, A
                             ;****************************************
c44b :                       io_put_ch
c44b : 6c0306           [ 6] 	jmp (io_block+io_put_byte)
                             	
                             ;****************************************
                             ;* io_open_read
                             ;* Open for reading
                             ;* Input : X,A = pointer to filename (zero termin
                             ;* Output : C=0 success
                             ;* Regs affected : All
                             ;****************************************
c44e :                       io_open_read
c44e : 6c0506           [ 6] 	jmp (io_block+io_open_r)
                             	
                             ;****************************************
                             ;* io_open_write
                             ;* Open for reading
                             ;* Input : X,A = pointer to filename (zero termin
                             ;* Output : C=0 success
                             ;* Regs affected : All
                             ;****************************************
c451 :                       io_open_write
c451 : 6c0706           [ 6] 	jmp (io_block+io_open_w)
                             
                             ;****************************************
                             ;* io_close
                             ;* Close a file
                             ;* Input : 
                             ;* Output : C=0 success
                             ;* Regs affected : All
                             ;****************************************
c454 :                       io_close
c454 : 6c0906           [ 6] 	jmp (io_block+io_close_f)
                             	
                             ;****************************************
                             ;* io_delete
                             ;* Delete a file
                             ;* Input : 
                             ;* Output : C=0 success
                             ;* Regs affected : All
                             ;****************************************
c457 :                       io_delete
c457 : 6c0b06           [ 6] 	jmp (io_block+io_del_f)
                             
                             ;****************************************
                             ;* io_open_ext1
                             ;* Extended function 1
                             ;* Input : 
                             ;* Output : C=0 success
                             ;* Regs affected : All
                             ;****************************************
c45a :                       io_open_ext1
c45a : 6c0d06           [ 6] 	jmp (io_block+io_ext1)
                             	
                             ;****************************************
AS65 Assembler for R6502 [1.42].                                     Page   61
-------------------------------- bank\bank0.s --------------------------------

                             ;* io_open_ext2
                             ;* Extended function 2
                             ;* Input : 
                             ;* Output : C=0 success
                             ;* Regs affected : All
                             ;****************************************
c45d :                       io_open_ext2
c45d : 6c0f06           [ 6] 	jmp (io_block+io_ext2)
                             	
                             ;****************************************
                             ;* io_read_line
                             ;* Read a line, terminated by terminating char or
                             ;* Input : buf_(lo/hi/sz/ef) : Address, Max size,
                             ;* Output : Y = Line length C = Buffer limit reac
                             ;* Regs affected : None
                             ;****************************************
c460 :                       io_read_line
c460 : 48               [ 3] 	pha
                             
c461 : 08               [ 3] 	php					; Save echo state
                             	
c462 : a000             [ 2] 	ldy #0x00			; Starting at first byte
c464 :                       io_get_line_byte
c464 : 38               [ 2] 	sec					; Getting bytes synchronously
c465 : 2048c4           [ 6] 	jsr io_get_ch		; Get a byte
c468 : b027             [ 3] 	bcs io_get_line_done; Got nothing then finish
c46a : 28               [ 4] 	plp					; Get echo state
c46b : 08               [ 3] 	php					; Instantly save it back
c46c : 900c             [ 3] 	bcc io_skip_echo	; Carry not set = don't echo
c46e : c97f             [ 2] 	cmp #UTF_DEL		; Delete?
c470 : d005             [ 3] 	bne io_do_echo
c472 : c000             [ 2] 	cpy #0				; Already at beginning?
c474 : f004             [ 3] 	beq io_skip_echo	; Don't echo delete
c476 : 88               [ 2] 	dey					; Else decrement length
c477 :                       io_do_echo
c477 : 204bc4           [ 6] 	jsr io_put_ch		; Echo it
c47a :                       io_skip_echo
c47a : c920             [ 2] 	cmp #UTF_SPECIAL	; Special character?
c47c : 9007             [ 3] 	bcc io_skip_special	; Skip if so (don't add to b
c47e : c97f             [ 2] 	cmp #UTF_DEL		; Don't proces DEL either
c480 : f003             [ 3] 	beq io_skip_special
c482 : 9139             [ 5] 	sta (buf_lo),y		; Save it
c484 : c8               [ 2] 	iny					; Increase length
c485 :                       io_skip_special
c485 : c53c             [ 3] 	cmp buf_ef			; Is it the terminating char?
c487 : f008             [ 3] 	beq io_get_line_done	; If yes then done
c489 : c43b             [ 3] 	cpy buf_sz			; Reached the buffer max size?
c48b : d0d7             [ 3] 	bne io_get_line_byte	; No, get another byte
c48d : 28               [ 4] 	plp					; Remember to pull echo state off stack
c48e : 38               [ 2] 	sec					; Yes, set carry flag
c48f : 68               [ 4] 	pla
c490 : 60               [ 6] 	rts					; And done
c491 :                       io_get_line_done
c491 : a900             [ 2] 	lda #0
c493 : 9139             [ 5] 	sta (buf_lo),y		; Terminate with 0
c495 : 28               [ 4] 	plp					; Remember to pull echo state off stack
c496 : 18               [ 2] 	clc					; Clear carry flag
c497 : 68               [ 4] 	pla
c498 : 60               [ 6] 	rts					; Fin
                             
                             ;****************************************
                             ;* io_print_line
AS65 Assembler for R6502 [1.42].                                     Page   62
-------------------------------- bank\bank0.s --------------------------------

                             ;* Print a line (when data is not already in seri
                             ;* Input : X = Address Lo, A = Address Hi
                             ;* Output : Y=number chars output
                             ;* Regs affected : All
                             ;****************************************
c499 :                       io_print_line
c499 : 48               [ 3] 	pha
                             
c49a : 8636             [ 3] 	stx tmp_clo					; Store the string pointer
c49c : 8537             [ 3] 	sta tmp_chi					; lo and hi
c49e : a000             [ 2] 	ldy #0						; Start at the beginning!
c4a0 :                       io_print_line_byte
c4a0 : b136             [ 5] 	lda (tmp_clo),y				; Copy byte to
c4a2 : f006             [ 3] 	beq io_print_done			; If zero then done - print
c4a4 : 204bc4           [ 6] 	jsr io_put_ch				; Transmit
c4a7 : c8               [ 2] 	iny
c4a8 : d0f6             [ 3] 	bne io_print_line_byte		; Carry on until zero fo
c4aa :                       io_print_done
c4aa : 68               [ 4] 	pla
c4ab : 60               [ 6] 	rts
                             
                             
                             ;*** Null operation just clc and return ***
c4ac :                       io_null_op
c4ac : 18               [ 2] 	clc
c4ad : 60               [ 6] 	rts
                             	
                             ;* IO buffer sizes
c4ae :                       io_buf_sz
c4ae : ff                    	db 255					; Device 0 = Tape
c4af : 7f                    	db 127					; Device 1 = keyboard/screen
                             
                             ;* IO devices defined here
c4b0 :                       io_devices
                             ;* Device zero is the tape system
                             ;* only offers get and put
                             ;* This is a block based device
c4b0 :                       io_device0					; Tape device, input = Tape, outpu
c4b0 : f5c6                  	dw	tp_get_byte			; io_get_ch
c4b2 : 1cc6                  	dw	tp_put_byte			; io_put_ch
c4b4 : 85c5                  	dw	tp_open_read		; io_open_r
c4b6 : d6c5                  	dw	tp_open_write		; io_open_w
c4b8 : b8c5                  	dw	tp_close			; io_close_f
c4ba : acc4                  	dw	io_null_op			; io_del_f
c4bc : 85c5                  	dw	tp_open_bread		; io_ext1 - open for binary re
c4be : d0c5                  	dw	tp_open_bwrite		; io_ext2 - open for binary w
                             ;* Device one is keyboard / screen
                             ;* only offers get and put
                             ;* This is a char based device
c4c0 :                       io_device1					; Default device, input = screen e
c4c0 : c9ce                  	dw	gr_get_key			; io_get_ch
c4c2 : ffce                  	dw	gr_put_byte			; io_put_ch
c4c4 : acc4                  	dw	io_null_op			; io_open_r
c4c6 : acc4                  	dw	io_null_op			; io_open_w
c4c8 : acc4                  	dw	io_null_op			; io_close_f
c4ca : acc4                  	dw	io_null_op			; io_del_f
c4cc : acc4                  	dw	io_null_op			; io_ext1
c4ce : acc4                  	dw	io_null_op			; io_ext2
                             ;* Serial device using printer port ACK (input) a
                             ;* This is a char based device
                             ;io_device2					; Serial device, input = Ser, out
                             ;	dw	ser_get_byte		; io_get_ch
AS65 Assembler for R6502 [1.42].                                     Page   63
-------------------------------- bank\bank0.s --------------------------------

                             ;	dw	ser_put_byte		; io_put_ch
                             ;	dw	ser_open			; io_open_r
                             ;	dw	ser_open			; io_open_w
                             ;	dw	ser_close			; io_close_f
                             ;	dw	io_null_op			; io_del_f
                             ;	dw	io_null_op			; io_ext1
                             ;	dw	io_null_op			; io_ext2
                             
c4d0 :                       mod_sz_io_e
                             
                             
                             
                             ;* Reset vector points here - 6502 starts here
c4d0 :                       init
                             ;	jmp init_test
                             	; First clear ram
c4d0 : 78               [ 2] 	sei					; Need this for MOS 6502
c4d1 : d8               [ 2] 	cld					; Need this for MOS 6502
c4d2 : 4cfcc4           [ 3] 	jmp init_ram		; jmp not jsr to ram initialiser
c4d5 :                       init_2					; init_ram will jump back to here
c4d5 : a2ff             [ 2] 	ldx #0xff			; Initialise stack pointer
c4d7 : 9a               [ 2] 	txs
                             
c4d8 : 20dec4           [ 6] 	jsr kernel_init
                             
c4db : 4c4bc0           [ 3] 	jmp main
                             
c4de :                       kernel_init
c4de : 20bec0           [ 6] 	jsr init_irq		; Initialise IRQ handling
                             
c4e1 : 201ec5           [ 6] 	jsr init_via0		; initialise cia 0 - tape inactiv
c4e4 : 206dc5           [ 6] 	jsr tp_init			; Initialise tape handling
                             
c4e7 :                       kernel_test
c4e7 : 2002d4           [ 6] 	jsr init_snd		; initialise the sound chip
                             
c4ea : 2054cc           [ 6] 	jsr gr_init			; Initialise graphics, default is 
                             
c4ed : 2060c7           [ 6] 	jsr init_keyboard	; initialise keyboard timer se
c4f0 : 2017c4           [ 6] 	jsr io_init			; Set default input/output device
                             
c4f3 : a900             [ 2] 	lda #0
c4f5 : 8508             [ 3] 	sta vdp_cnt
                             
c4f7 : 208af7           [ 6] 	jsr df_init			; Initialise interpreter
                             
c4fa : 58               [ 2] 	cli					; irq interrupts enable
                             
c4fb : 60               [ 6] 	rts
                             
                             
                             ;* Initialises RAM, skipping page 3 which is for 
                             ;* Zeroes all addressable RAM in the default bank
c4fc :                       init_ram
c4fc : a002             [ 2] 	ldy #0x02			; But Y initially at 2 to not overwr
c4fe : a200             [ 2] 	ldx #0x00			; Page counter starts at zero
c500 : 8600             [ 3] 	stx 0x00			; Start at page 0
c502 : 8601             [ 3] 	stx 0x01
c504 :                       init_ram_1
c504 : e003             [ 2] 	cpx	#3				; Ignore page 3 (IO page)
c506 : f004             [ 3] 	beq init_ram_skip
c508 :                       init_ram_fill
AS65 Assembler for R6502 [1.42].                                     Page   64
-------------------------------- bank\bank0.s --------------------------------

c508 : a900             [ 2] 	lda #0				; Normal RAM filled with zero
c50a : 9100             [ 5] 	sta (0x00),y		; Write byte to RAM (zero or copy 
c50c :                       init_ram_skip
c50c : c8               [ 2] 	iny
c50d : d0f5             [ 3] 	bne init_ram_1		; Do a whole page
c50f : e601             [ 5] 	inc 0x01			; Increase page pointer
c511 : e8               [ 2] 	inx					; Reduce page count
c512 : e0c0             [ 2] 	cpx #0xc0			; Do all pages until page until we g
c514 : d0ee             [ 3] 	bne init_ram_1
                             
c516 : 4cd5c4           [ 3] 	jmp init_2			; Carry on initialisation
                             
                             ; 6502 Non-maskable interrupt come here
c519 :                       nmi
c519 : 40               [ 6] 	rti
                             
c51a :                       mod_sz_kernel_e
                             
                             
                             
                             ; Bank specific code goes here
                             	include "cia/cia.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  CIA.S
                             ;*  Code to initialise and utilise the 6522, whic
                             ;*	for various functions on the Oric including;
                             ;*		Port A:
                             ;*			[7..0] 	Printer data bits
                             ;*			[7..0] 	Interface to AY-3-8912
                             ;*		Port B:
                             ;*			[2..0] 	Keyboard matrix row selector
                             ;*			[7]	   	Tape output
                             ;*			[6]    	Tape player motor signal
                             ;*			[4]		Printer strobe
                             ;*		CA1:		Printer ACK
                             ;*		CB1: 		Tape input
                             ;*		CA2,CB2: 	Selecting the AY-3-8912
                             ;*
                             ;*  This file is called cia.s because code was or
                             ;*  for a MOS 6526 from a CMB64, but didn't get a
                             ;*	renaming this file ;-)
                             ;*
                             ;************************************************
                             
                             
                             	; ROM code
                             	code
                             
c51a :                       mod_sz_cia_s
                             	
                             
                             ;****************************************
                             ;* init_via0
                             ;* Initialise cia 0
                             ;* Input : None
AS65 Assembler for R6502 [1.42].                                     Page   65
-------------------------------- bank\bank0.s --------------------------------

                             ;* Output : None
                             ;* Regs affected : A
                             ;****************************************
                             ;init_via0_ser					; initialisation bytes for ser
                             ;	ldy #init_ser_tab-init_via0_tab
                             ;	bne init_via0_loop			; always branch
c51a :                       init_via0_tape					; initialisation bytes for tap
c51a : a017             [ 2] 	ldy #init_tape_tab-init_via0_tab
c51c : d002             [ 3] 	bne init_via0_loop			; always branch
c51e :                       init_via0
c51e : a000             [ 2] 	ldy #0						; Standard initialisation of VIA
c520 :                       init_via0_loop
c520 : b931c5           [ 4] 	lda init_via0_tab,y
c523 : 300b             [ 3] 	bmi init_via0_done
c525 : aa               [ 2] 	tax
c526 : c8               [ 2] 	iny
c527 : b931c5           [ 4] 	lda init_via0_tab,y
c52a : 9d0003           [ 5] 	sta IO_0,x
c52d : c8               [ 2] 	iny
c52e : d0f0             [ 3] 	bne init_via0_loop
                             	
c530 :                       init_via0_done	
c530 : 60               [ 6] 	rts							; return from sub
                             	
c531 :                       init_via0_tab
c531 : 0e7f                  	db IER, 	0x7f
c533 : 03ff                  	db DDRA,	0xff
c535 : 02f7                  	db DDRB,	0xf7			; Tape motor + KB select
c537 : 00b7                  	db PRB,		0xb7			; Port B default = cassette moto
c539 : 0cdd                  	db PCR,		0xdd			; Ensure AY is not selected (CB1
c53b : 0420                  	db T1CL,	lo(TIMER1_RATE)	; 50Hz
c53d : 0620                  	db T1LL,	lo(TIMER1_RATE)	; 50Hz
c53f : 054e                  	db T1CH,	hi(TIMER1_RATE)	; 50Hz
c541 : 074e                  	db T1LH,	hi(TIMER1_RATE)	; 50Hz
c543 : 0b40                  	db ACR,		0x40			; Timer 1 continuous
c545 : 0ec0                  	db IER,		0xc0			; Timer 1 interrupt enabled
c547 : ff                    	db -1
c548 :                       init_tape_tab
c548 : 0e7f                  	db IER,		0x7f			; Disable all interrupts
c54a : 08f4                  	db T2CL,	0xf4			; Timer 2 used for measuring CB1
c54c : 0c10                  	db PCR,		0x10			; Interrupt on CB1 positive edge
                             ;	db DDRB,	0xff			; Set port B output
c54e : 0bc0                  	db ACR,		0xc0			; T1 continuous and toggle PB7
c550 : 04a0                  	db T1CL,	lo(TAPE_RATE*2)	; Tape rate /2 = 0
c552 : 0501                  	db T1CH,	hi(TAPE_RATE*2)	; Tape rate /2 = 0
c554 : 0040                  	db PRB,		0x40			; Tape motor ON
c556 : ff                    	db -1
                             ;init_ser_tab
                             ;	db IER,		0x7f			; Disable all interrupts
                             ;	db T2CL,	0xf4			; Timer 2 used for measuring bi
                             ;	db PCR,		0xdd			; Ensure AY is not selected (CB
                             ;	db DDRB,	0xff			; Set port B output
                             ;	db -1
                             	
c557 :                       mod_sz_cia_e
                             
                             	include "tape/tape.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
AS65 Assembler for R6502 [1.42].                                     Page   66
-------------------------------- bank\bank0.s --------------------------------

                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  TAPE.S
                             ;*	These routines allow for tape input/output
                             ;*	The tape format is not compatible with a regul
                             ;*	but is a block format as follows;
                             ;*	Some zero bits (64) start a block.
                             ;*	Then two bytes of data representing the block 
                             ;*	Then 256 bytes of block data.
                             ;*	Each byte above consists of two '1' start bits
                             ;*	one '0' stop bit.
                             ;*	After each block, 1 second of 4800Hz (seen as 
                             ;*	is transmitted to allow the CPU to deal with t
                             ;*	when subsequently loading.
                             ;*	A bit is 4800Hz half cycle then 4800Hz half cy
                             ;*	'1' or 2400Hz half cycle for a '0', except for
                             ;*	block which is one second of 2400Hz.
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code
                             
c557 :                       tp_open_msg
c557 : 4c6f6164696e67..      	db	"Loading:",0
c560 :                       tp_save_msg
c560 : 536176696e673a00      	db	"Saving:",0
c568 :                       tp_back4
c568 : 0808080800            	db	8,8,8,8,0
                             	
                             ;* tp_init
                             ;* Basic initialisation for tape handling
c56d :                       tp_init
c56d : a900             [ 2] 	lda #0
c56f : 8558             [ 3] 	sta tp_flag
c571 : 8557             [ 3] 	sta tp_idx
c573 : 18               [ 2] 	clc
c574 : 60               [ 6] 	rts
                             
                             ;* Common function to open tape
c575 :                       tp_open_common				; Used by open write too
c575 : 78               [ 2] 	sei						; Interrupts disabled from here..
c576 : 201ac5           [ 6] 	jsr init_via0_tape		; Get ready to output (tape 
                             
                             
c579 : a200             [ 2] 	ldx #0
c57b : 8657             [ 3] 	stx tp_idx				; Initialise block
c57d : 8655             [ 3] 	stx tp_block
c57f : 8656             [ 3] 	stx tp_block+1
c581 : e8               [ 2] 	inx
c582 : 8658             [ 3] 	stx tp_flag				; assume 1 = Read mode
c584 : 60               [ 6] 	rts
                             
                             ;* tp_open_read
                             ;* Open tape settings
                             
c585 :                       fd_cload_getname_pc			; ** FOR ORICUTRON EMULATOR
                             
c585 :                       tp_open_bread
c585 :                       tp_open_read
c585 : a057             [ 2] 	ldy #lo(tp_open_msg)
AS65 Assembler for R6502 [1.42].                                     Page   67
-------------------------------- bank\bank0.s --------------------------------

c587 : a9c5             [ 2] 	lda #hi(tp_open_msg)
c589 : 2053cf           [ 6] 	jsr gr_print_msg
                             	
c58c : 2075c5           [ 6] 	jsr tp_open_common
                             
c58f :                       tp_get_fname_start
c58f : 2031c7           [ 6] 	jsr tp_read_byte
c592 : c924             [ 2] 	cmp #'$'				; Find the $ symbol
c594 : d0f9             [ 3] 	bne tp_get_fname_start
                             	
c596 : a209             [ 2] 	ldx #9					; 9 byte header - skip
c598 :                       tp_get_header
c598 : 2031c7           [ 6] 	jsr tp_read_byte
c59b : ca               [ 2] 	dex
c59c : d0fa             [ 3] 	bne tp_get_header
                             	
                             	; X= zero here, now get null terminated filename
c59e :                       tp_get_fname
c59e : 2031c7           [ 6] 	jsr tp_read_byte
c5a1 : 9d0004           [ 5] 	sta df_linbuff,x
c5a4 : e8               [ 2] 	inx
c5a5 : c900             [ 2] 	cmp #0
c5a7 : d0f5             [ 3] 	bne tp_get_fname
                             
c5a9 : a000             [ 2] 	ldy #lo(df_linbuff)
c5ab : a904             [ 2] 	lda #hi(df_linbuff)
c5ad : 2053cf           [ 6] 	jsr gr_print_msg
c5b0 : a920             [ 2] 	lda #' '
c5b2 : 20ffce           [ 6] 	jsr gr_put_byte
                             
c5b5 : 18               [ 2] 	clc
c5b6 : 60               [ 6] 	rts
                             
c5b7 :                       tt_getsync_pc				; ** FOR ORICUTRON EMULATOR **
c5b7 :                       tt_getsync_end_pc			; ** FOR ORICUTRON EMULATOR *
                             
c5b7 : ea               [ 2] 	nop
                             	
                             
                             ;* tp_close
                             ;* Close tape settings
c5b8 :                       tp_close
c5b8 : a558             [ 3] 	lda tp_flag
c5ba : c902             [ 2] 	cmp #2					; Write mode?
c5bc : d003             [ 3] 	bne tp_close_no_flush	; If not no need to flush
c5be : 204ec6           [ 6] 	jsr tp_put_block		; Flush the current block
c5c1 :                       tp_close_no_flush
c5c1 : a90d             [ 2] 	lda #0x0d				; Line feed
c5c3 : 20ffce           [ 6] 	jsr gr_put_byte
                             	
c5c6 : 201ec5           [ 6] 	jsr init_via0			; Back to normal
c5c9 : 58               [ 2] 	cli
c5ca : a900             [ 2] 	lda #0					; Zero tape flag
c5cc : 8558             [ 3] 	sta tp_flag
                             
c5ce :                       tt_csave_end_pc				; ** FOR ORICUTRON EMULATOR **
                             
c5ce : 18               [ 2] 	clc
c5cf : 60               [ 6] 	rts
                             
                             ;* tp_open_write
                             ;* Open tape settings
AS65 Assembler for R6502 [1.42].                                     Page   68
-------------------------------- bank\bank0.s --------------------------------

c5d0 :                       tp_open_bwrite
c5d0 : a001             [ 2] 	ldy #hi(0x101)
c5d2 : a201             [ 2] 	ldx #lo(0x101)
c5d4 : d004             [ 3] 	bne tp_open_write_start
c5d6 :                       tp_open_write
c5d6 : a018             [ 2] 	ldy #hi(6000+0x101)
c5d8 : a271             [ 2] 	ldx #lo(6000+0x101)
                             
c5da :                       fd_csave_getname_pc			; ** FOR ORICUTRON EMULATOR
                             
c5da :                       tp_open_write_start
c5da : 845a             [ 3] 	sty tp_delay+1
c5dc : 8659             [ 3] 	stx tp_delay
c5de : a060             [ 2] 	ldy #lo(tp_save_msg)
c5e0 : a9c5             [ 2] 	lda #hi(tp_save_msg)
c5e2 : 2053cf           [ 6] 	jsr gr_print_msg
c5e5 : a000             [ 2] 	ldy #lo(df_linbuff)
c5e7 : a904             [ 2] 	lda #hi(df_linbuff)
c5e9 : 2053cf           [ 6] 	jsr gr_print_msg
c5ec : a920             [ 2] 	lda #' '
c5ee : 20ffce           [ 6] 	jsr gr_put_byte
                             	
c5f1 : 2075c5           [ 6] 	jsr tp_open_common		; Same as reading but
c5f4 : e658             [ 5] 	inc tp_flag				; Make flag = 2 for write mode
                             
c5f6 :                       tt_writeleader_pc			; ** FOR ORICUTRON EMULATOR *
c5f6 :                       tt_writeleader_end_pc		; ** FOR ORICUTRON EMULATO
c5f6 : a280             [ 2] 	ldx #128				; 128 low bits
c5f8 : 2046c6           [ 6] 	jsr tp_put_delay
                             
c5fb : a924             [ 2] 	lda #'$'				; Start of header symbol
c5fd : 38               [ 2] 	sec
c5fe : 209dc6           [ 6] 	jsr tp_write_byte
                             	
c601 : a209             [ 2] 	ldx #9					; Header, for future expansion
c603 : a9ff             [ 2] 	lda #0xff
c605 :                       tp_write_header	
c605 : 38               [ 2] 	sec
c606 : 209dc6           [ 6] 	jsr tp_write_byte
c609 : ca               [ 2] 	dex
c60a : d0f9             [ 3] 	bne tp_write_header
                             	
c60c : a200             [ 2] 	ldx #0
c60e :                       tp_write_fname
c60e : bd0004           [ 4] 	lda df_linbuff,x		; Put the filename
c611 : 38               [ 2] 	sec
c612 : 209dc6           [ 6] 	jsr tp_write_byte
c615 : e8               [ 2] 	inx
c616 : c900             [ 2] 	cmp #0
c618 : d0f4             [ 3] 	bne tp_write_fname
                             	
c61a : 18               [ 2] 	clc
c61b : 60               [ 6] 	rts
                             
                             
                             ;* tp_put_byte
                             ;* Put to byte to tape - if got a block then save
                             
c61c :                       tp_put_byte
c61c : 48               [ 3] 	pha
c61d : 8538             [ 3] 	sta tmp_d
c61f : 8a               [ 2] 	txa
AS65 Assembler for R6502 [1.42].                                     Page   69
-------------------------------- bank\bank0.s --------------------------------

c620 : 48               [ 3] 	pha
c621 : 98               [ 2] 	tya
c622 : 48               [ 3] 	pha
c623 : a538             [ 3] 	lda tmp_d
                             	
c625 : a457             [ 3] 	ldy tp_idx				; Save byte to buffer
c627 : 990002           [ 5] 	sta tp_buf,y
c62a : c8               [ 2] 	iny
c62b : 8457             [ 3] 	sty tp_idx
c62d : d010             [ 3] 	bne tp_put_byte_done
c62f : 204ec6           [ 6] 	jsr tp_put_block		; Flush block to tape
c632 : 18               [ 2] 	clc						; Increment block #
c633 : a555             [ 3] 	lda tp_block
c635 : 6901             [ 2] 	adc #1
c637 : 8555             [ 3] 	sta tp_block
c639 : a556             [ 3] 	lda tp_block+1
c63b : 6900             [ 2] 	adc #0
c63d : 8556             [ 3] 	sta tp_block+1
c63f :                       tp_put_byte_done
c63f : 68               [ 4] 	pla
c640 : a8               [ 2] 	tay
c641 : 68               [ 4] 	pla
c642 : aa               [ 2] 	tax
c643 : 68               [ 4] 	pla
c644 : 18               [ 2] 	clc
c645 : 60               [ 6] 	rts
                             
                             ; tp_put_delay
                             ;* X = number of zero bits to insert
c646 :                       tp_put_delay
c646 : 18               [ 2] 	clc
c647 : 20c0c6           [ 6] 	jsr tp_write_bit
c64a : ca               [ 2] 	dex
c64b : d0f9             [ 3] 	bne tp_put_delay
c64d : 60               [ 6] 	rts
                             
                             ;* tp_put_block
                             ;* flush a block to tape
c64e :                       tp_put_block
c64e : 2072c6           [ 6] 	jsr tp_print_block
                             		
c651 : a280             [ 2] 	ldx #128				; 128 low bits
c653 : 2046c6           [ 6] 	jsr tp_put_delay
                             
c656 : a555             [ 3] 	lda tp_block			; Save block number low then high
c658 : 18               [ 2] 	clc
c659 : 209dc6           [ 6] 	jsr tp_write_byte
c65c : a556             [ 3] 	lda tp_block+1
c65e : 38               [ 2] 	sec
c65f : 209dc6           [ 6] 	jsr tp_write_byte
                             
c662 : a200             [ 2] 	ldx #0
c664 :                       tp_put_block_bytes
c664 : bd0002           [ 4] 	lda tp_buf,x			; Then write out all bytes in blo
c667 : 18               [ 2] 	clc
c668 : 209dc6           [ 6] 	jsr tp_write_byte
c66b : e8               [ 2] 	inx
c66c : d0f6             [ 3] 	bne tp_put_block_bytes	; Always 256 bytes
                             	
c66e : 2092c6           [ 6] 	jsr tp_block_gap		; Wait a while, still outputti
                             
c671 : 60               [ 6] 	rts
AS65 Assembler for R6502 [1.42].                                     Page   70
-------------------------------- bank\bank0.s --------------------------------

                             
                             ; tp_print_block
c672 :                       tp_print_block
c672 : a556             [ 3] 	lda tp_block+1			; Print block number hi byte
c674 : 2089c1           [ 6] 	jsr str_a_to_x
c677 : 20ffce           [ 6] 	jsr gr_put_byte
c67a : 8a               [ 2] 	txa
c67b : 20ffce           [ 6] 	jsr gr_put_byte
c67e : a555             [ 3] 	lda tp_block			; Print block number lo byte
c680 : 2089c1           [ 6] 	jsr str_a_to_x
c683 : 20ffce           [ 6] 	jsr gr_put_byte
c686 : 8a               [ 2] 	txa
c687 : 20ffce           [ 6] 	jsr gr_put_byte
c68a : a9c5             [ 2] 	lda #hi(tp_back4)		; Go back 4 characters to pri
c68c : a068             [ 2] 	ldy #lo(tp_back4)
c68e : 2053cf           [ 6] 	jsr gr_print_msg
c691 : 60               [ 6] 	rts
                             
                             ; tp_block_gap
                             ; Send 2400 bits of zero ~ 1.5 seconds
                             ; add 0x101 due to how counters decrement
                             ; For binary mode it is just 1 bit gap
c692 :                       tp_block_gap
c692 : a45a             [ 3] 	ldy tp_delay+1
c694 : a659             [ 3] 	ldx tp_delay
c696 :                       tp_block_gap_1
c696 : 2046c6           [ 6] 	jsr tp_put_delay
c699 : 88               [ 2] 	dey
c69a : d0fa             [ 3] 	bne tp_block_gap_1
c69c : 60               [ 6] 	rts	
                             
                             ;* tp_write_byte
                             ;* Write a byte to tape which looks like this
                             ;* 11xxxxxxxx0
c69d :                       tt_putbyte_pc				; ** FOR ORICUTRON EMULATOR **
c69d :                       tp_write_byte
c69d : 48               [ 3] 	pha
c69e : 08               [ 3] 	php
c69f : 38               [ 2] 	sec					; 1 for start bit
c6a0 : 20c0c6           [ 6] 	jsr tp_write_bit
c6a3 : 38               [ 2] 	sec					; 1 for start bit
c6a4 : 20c0c6           [ 6] 	jsr tp_write_bit
c6a7 : a008             [ 2] 	ldy #8				; 8 bits of data
c6a9 :                       tp_write_byte_bit
c6a9 : 6a               [ 2] 	ror a
c6aa : 20c0c6           [ 6] 	jsr tp_write_bit
c6ad : 88               [ 2] 	dey
c6ae : d0f9             [ 3] 	bne tp_write_byte_bit
c6b0 : 18               [ 2] 	clc					; 0 for stop bit
c6b1 : 20c0c6           [ 6] 	jsr tp_write_bit
c6b4 : 28               [ 4] 	plp
c6b5 : 9007             [ 3] 	bcc tp_write_byte_nodelay
c6b7 : 8a               [ 2] 	txa
c6b8 : a220             [ 2] 	ldx #32					; Delays needed
c6ba : 2046c6           [ 6] 	jsr tp_put_delay
c6bd : aa               [ 2] 	tax
c6be :                       tp_write_byte_nodelay
c6be : 68               [ 4] 	pla
c6bf :                       tt_putbyte_end_pc			; ** FOR ORICUTRON EMULATOR *
c6bf : 60               [ 6] 	rts
                             	
                             
AS65 Assembler for R6502 [1.42].                                     Page   71
-------------------------------- bank\bank0.s --------------------------------

                             ;* tp_write_bit
                             ;* Write a bit in C to tape which looks like this
                             ;* Half cycle of 4800Hz, then
                             ;*		half cycle of 4800Hz for a 1
                             ;*		half cycle of 2400Hz for a 0
c6c0 :                       tp_write_bit
c6c0 : 48               [ 3] 	pha
c6c1 : 8a               [ 2] 	txa
c6c2 : 48               [ 3] 	pha
c6c3 : 08               [ 3] 	php						; Save the bit to be stored
                             
c6c4 : a9d0             [ 2] 	lda #TAPE_RATE			; Half cycle first of 4800Hz
c6c6 : a200             [ 2] 	ldx #0
c6c8 : 8d0603           [ 4] 	sta IO_0+T1LL
c6cb : 8e0703           [ 4] 	stx IO_0+T1LH			; This starts the timer
c6ce : ad0403           [ 4] 	lda IO_0+T1CL			; Clear any interrupt flag
c6d1 :                       tp_write_bit_chk1
c6d1 : 2c0d03           [ 4] 	bit IO_0+IFR			; Check IRF for bit 6
c6d4 : 50fb             [ 3] 	bvc tp_write_bit_chk1	; V=0? Keep checking
c6d6 : ad0403           [ 4] 	lda IO_0+T1CL			; Clear interrupt flag
                             	
c6d9 : 28               [ 4] 	plp						; Get the bit to be stored
c6da : a9d0             [ 2] 	lda #TAPE_RATE			; Assume putting out a 1 in 2nd
c6dc : b002             [ 3] 	bcs tp_write_bit_t1		; A zero is half the rate (
c6de : 0a               [ 2] 	asl	a					; TAPE_RATE * 2 need to inc X
c6df : e8               [ 2] 	inx
c6e0 :                       tp_write_bit_t1
c6e0 : 8d0603           [ 4] 	sta IO_0+T1LL
c6e3 : 8e0703           [ 4] 	stx IO_0+T1LH			; This starts the timer
c6e6 : ad0403           [ 4] 	lda IO_0+T1CL			; Clear any interrupt flag
c6e9 :                       tp_write_bit_chk2
c6e9 : 2c0d03           [ 4] 	bit IO_0+IFR			; Check IRF for bit 6
c6ec : 50fb             [ 3] 	bvc tp_write_bit_chk2	; V=0? Keep checking
c6ee : ad0403           [ 4] 	lda IO_0+T1CL			; Clear interrupt flag
c6f1 : 68               [ 4] 	pla
c6f2 : aa               [ 2] 	tax
c6f3 : 68               [ 4] 	pla
c6f4 : 60               [ 6] 	rts
                             
                             
                             
                             ;* tp_get_byte
                             ;* Get a byte from buffer - load blocks as needed
c6f5 :                       tp_get_byte
c6f5 : 8a               [ 2] 	txa
c6f6 : 48               [ 3] 	pha
c6f7 : 98               [ 2] 	tya
c6f8 : 48               [ 3] 	pha
                             	
c6f9 : a457             [ 3] 	ldy tp_idx				; Index in to buffer
c6fb : d005             [ 4] 	bne tp_get_byte_buf		; No need to load from tape
c6fd : 2012c7           [ 6] 	jsr tp_get_block		; Else load a block from tape
c700 : a000             [ 2] 	ldy #0					; 0 index is now valid
c702 :                       tp_get_byte_buf
c702 : b90002           [ 4] 	lda tp_buf,y			; Get from memory buffer
c705 : c8               [ 2] 	iny
c706 : 8457             [ 3] 	sty tp_idx				; Never zero on leaving
c708 : 8538             [ 3] 	sta tmp_d
c70a : 68               [ 4] 	pla
c70b : a8               [ 2] 	tay
c70c : 68               [ 4] 	pla
c70d : aa               [ 2] 	tax
AS65 Assembler for R6502 [1.42].                                     Page   72
-------------------------------- bank\bank0.s --------------------------------

c70e : a538             [ 3] 	lda tmp_d
c710 : 18               [ 2] 	clc
c711 : 60               [ 6] 	rts						; Except when buffer done
                             
                             ;* tp_get_block
                             ;* Load a block in to memory
c712 :                       tp_get_block
                             
c712 : 2031c7           [ 6] 	jsr tp_read_byte		; Get block number
c715 : 8555             [ 3] 	sta tp_block
c717 : 2031c7           [ 6] 	jsr tp_read_byte
c71a : 8556             [ 3] 	sta tp_block+1
                             	
c71c : 2072c6           [ 6] 	jsr tp_print_block
                             	
c71f : a000             [ 2] 	ldy #0
c721 : 8457             [ 3] 	sty tp_idx
c723 :                       tp_get_block_bytes
c723 : 2031c7           [ 6] 	jsr tp_read_byte		; Fill buffer
c726 : a457             [ 3] 	ldy tp_idx
c728 : 990002           [ 5] 	sta tp_buf,y
c72b : c8               [ 2] 	iny
c72c : 8457             [ 3] 	sty tp_idx
c72e : d0f3             [ 3] 	bne tp_get_block_bytes	; Always 256 bytes
                             
c730 : 60               [ 6] 	rts
                             	
                             
                             ;* tp_read_byte
                             ;* Read a byte from tape, always expects one '1' 
c731 :                       tt_readbyte_pc				; ** FOR ORICUTRON EMULATOR **
c731 :                       tp_read_byte
c731 :                       tp_read_byte_st
c731 : 2045c7           [ 6] 	jsr tp_read_bit			; Expecting a 1
c734 : 90fb             [ 3] 	bcc tp_read_byte_st
c736 : 2045c7           [ 6] 	jsr tp_read_bit			; Should be another 1
c739 : 90f6             [ 3] 	bcc tp_read_byte_st
                             	; Ok got 2 start
                             	
c73b : a008             [ 2] 	ldy #8				; Get 8 bits
c73d :                       tp_read_byte_bits
c73d : 2045c7           [ 6] 	jsr tp_read_bit
c740 : 6a               [ 2] 	ror a
c741 : 88               [ 2] 	dey
c742 : d0f9             [ 3] 	bne tp_read_byte_bits
                             	; Byte is in A, stop bit is not waited for..
c744 :                       tt_readbyte_end_pc			; ** FOR ORICUTRON EMULATOR 
c744 : 60               [ 6] 	rts
                             
                             ;* tp_read_bit
                             ;* Get a CB1 transition and measure the time
                             ;* The measurement indicates a 1 or 0 received
c745 :                       tp_read_bit
c745 : 48               [ 3] 	pha
c746 : ad0003           [ 4] 	lda IO_0+PRB			; Clear CB1 interrupt flag by rea
c749 :                       tp_read_bit_cb1
c749 :                       tt_getsync_loop_pc			; ** FOR ORICUTRON EMULATOR 
c749 : ad0d03           [ 4] 	lda IO_0+IFR
c74c : 2910             [ 2] 	and #IFR_CB1
c74e : f0f9             [ 3] 	beq tp_read_bit_cb1		; Keep checking until CB1 a
                             
c750 : ad0903           [ 4] 	lda IO_0+T2CH			; Get the high byte of T2 counte
AS65 Assembler for R6502 [1.42].                                     Page   73
-------------------------------- bank\bank0.s --------------------------------

c753 : 48               [ 3] 	pha
c754 : a9ff             [ 2] 	lda #0xff				; Reset T2 counter high byte
c756 : 8d0903           [ 4] 	sta IO_0+T2CH			; Reset high byte of T2 counter
c759 : 68               [ 4] 	pla						; What was previous counter?
                             ;	beq tp_io_error			; If down to zero, then some 
c75a : c9fe             [ 2] 	cmp #0xfe				; C=1 if T2 >= 0xfe else C=0
c75c : 68               [ 4] 	pla
c75d : 60               [ 6] 	rts						; Carry contains the bit received
c75e :                       tp_io_error
                             	SWBRK DFERR_BREAK		; DEFINE A NEW ERROR!
                             
                             
                             
                             
                             	include "keyboard/keyboard.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  KEYBOARD.S
                             ;*	Keyboard driver code. It is very slow to scan 
                             ;*	routines here do a basic scan for any key befo
                             ;*	the specific key. Still, it has a noticeable i
                             ;*	CPU especially in dflat which checks the key a
                             ;*	keyword is executed.
                             ;*	Rather than working off interrupts these routi
                             ;*	need to be called as needed. The T1 interrupt 
                             ;*	track of keyboard timers for repeat delay and 
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code
                             
                             ;****************************************
                             ;* init_keyboard
                             ;* Initialise the keyboard settings
                             ;****************************************
c760 :                       init_keyboard
c760 : a914             [ 2] 	lda #KB_REP_DEL
c762 : 8531             [ 3] 	sta kb_rdel_tim
c764 : a903             [ 2] 	lda #KB_REP_TIM
c766 : 8530             [ 3] 	sta kb_rep_tim
c768 : a902             [ 2] 	lda #KB_DEBOUNCE
c76a : 852e             [ 3] 	sta kb_deb_tim
c76c : a900             [ 2] 	lda #0
c76e : 852c             [ 3] 	sta kb_stat
                             
c770 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* kb_stick
                             ;* Check for fire | down | up | right | left
                             ;*        bit  4     3      2     1       0
                             ;* Returns bit mask of keys pressed
                             ;****************************************
c771 :                       kb_stick
c771 : a900             [ 2] 	lda #0					; Result will be in A
AS65 Assembler for R6502 [1.42].                                     Page   74
-------------------------------- bank\bank0.s --------------------------------

c773 : 48               [ 3] 	pha	
                             	; Select Row 4 only, all keys on this row
c774 : a904             [ 2] 	lda #4
c776 : 8d0003           [ 4] 	sta IO_0+PRB
c779 : a004             [ 2] 	ldy #4
c77b : a20e             [ 2] 	ldx #SND_REG_IOA		; AY Port A for columns
c77d :                       kb_stick_pos
c77d : b91fc9           [ 4] 	lda kb_stick_mask,y		; Get the column mask
c780 : 2000c0           [ 6] 	jsr snd_set				; Activate column
c783 : ad0003           [ 4] 	lda IO_0+PRB			; Read Port B
c786 : 2908             [ 2] 	and #KB_SENSE			; Something pressed?
c788 : c908             [ 2] 	cmp #KB_SENSE			; C=1 if set else 0
c78a : 68               [ 4] 	pla
c78b : 2a               [ 2] 	rol a					; Get C in to A
c78c : 48               [ 3] 	pha
c78d : 88               [ 2] 	dey
c78e : 10ed             [ 3] 	bpl kb_stick_pos		; Do all 5 positions
c790 : 68               [ 4] 	pla						; Result in A
c791 : 60               [ 6] 	rts
                             
                             	
                             ;****************************************
                             ;* kb_any_key
                             ;* Quick check for any key except shifts & ctrl
                             ;* Carry = 1 means key pressed
                             ;****************************************
c792 :                       kb_any_key
                             	; Select all columns except 4
c792 : a910             [ 2] 	lda #0b00010000			; Deselect only col 4
c794 : a20e             [ 2] 	ldx #SND_REG_IOA		; On AY port A
c796 : 2000c0           [ 6] 	jsr snd_set
                             
c799 : a007             [ 2] 	ldy #7					; Start from row 7
c79b :                       kb_any_key_row
c79b : 8c0003           [ 4] 	sty IO_0+PRB			; Select row on port B
c79e : ea               [ 2] 	nop
c79f : ea               [ 2] 	nop
                             	
c7a0 : ad0003           [ 4] 	lda IO_0+PRB			; Read Port B
c7a3 : 2908             [ 2] 	and #KB_SENSE			; Something pressed?
c7a5 : d005             [ 3] 	bne kb_any_key_pressed
c7a7 : 88               [ 2] 	dey						; If not then next row
c7a8 : 10f1             [ 3] 	bpl kb_any_key_row		; Until all rows done
c7aa :                       kb_any_key_none
c7aa : 18               [ 2] 	clc						; C=0 means not pressed
c7ab : 60               [ 6] 	rts
c7ac :                       kb_any_key_pressed
c7ac :                       kb_read_got
c7ac : 38               [ 2] 	sec						; C=1 means pressed
c7ad : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* kb_read_raw
                             ;* Read keyboard
                             ;* Y = Keyboard code
                             ;* Carry = 1 means key found, 0 = no keys found
                             ;****************************************
c7ae :                       kb_read_raw
c7ae : 2092c7           [ 6] 	jsr kb_any_key			; Quick check is anything down?
c7b1 : 902f             [ 3] 	bcc kb_read_nothing		; Don't bother if not
c7b3 :                       kb_read_raw_force
c7b3 : a200             [ 2] 	ldx #0					; Start at column 0	
AS65 Assembler for R6502 [1.42].                                     Page   75
-------------------------------- bank\bank0.s --------------------------------

c7b5 : 86ab             [ 3] 	stx zp_tmp1
c7b7 :                       kb_check_matrix_col
                             	; else set the col in the AY port A
c7b7 : bd17c9           [ 4] 	lda kb_col_mask,x
c7ba : a20e             [ 2] 	ldx #SND_REG_IOA		; Select Port A of AY
c7bc : 2000c0           [ 6] 	jsr snd_set				; Set Port A to column mask
c7bf : a000             [ 2] 	ldy #0
c7c1 :                       kb_check_matrix_row
c7c1 : 8c0003           [ 4] 	sty IO_0+PRB			; Select row from Y
                             	
c7c4 : a202             [ 2] 	ldx #2
c7c6 :                       kb_hw_delay
c7c6 : ca               [ 2] 	dex
c7c7 : d0fd             [ 3] 	bne kb_hw_delay
                             
c7c9 : ad0003           [ 4] 	lda IO_0+PRB			; Read Port B
c7cc : 2908             [ 2] 	and #KB_SENSE			; Bit 3 is the sense
c7ce : d016             [ 3] 	bne kb_read_raw_got
                             	; No key for this row/col, next
c7d0 : c8               [ 2] 	iny
c7d1 : c008             [ 2] 	cpy #8					; Done 8 rows?
c7d3 : d0ec             [ 3] 	bne kb_check_matrix_row
                             	; ok check next row
c7d5 : a6ab             [ 3] 	ldx zp_tmp1
c7d7 :                       kb_check_skip4
c7d7 : e8               [ 2] 	inx
c7d8 : e004             [ 2] 	cpx #4					; Skip 4?
c7da : f0fb             [ 3] 	beq kb_check_skip4
c7dc : 86ab             [ 3] 	stx zp_tmp1
c7de : e008             [ 2] 	cpx #8					; Done 8 cols?
c7e0 : d0d5             [ 3] 	bne kb_check_matrix_col
                             	; No key was sensed
c7e2 :                       kb_read_nothing
c7e2 : a000             [ 2] 	ldy #0					; Raw key codes
c7e4 : 18               [ 2] 	clc						; No key sensed flag
c7e5 : 60               [ 6] 	rts
c7e6 :                       kb_read_raw_got
                             	;Y=row, zp_temp1=col
c7e6 : a5ab             [ 3] 	lda zp_tmp1				; Get the column num
c7e8 : 0a               [ 2] 	asl a					; Shift in to bits 5,4,3
c7e9 : 0a               [ 2] 	asl a
c7ea : 0a               [ 2] 	asl a
c7eb : 85ab             [ 3] 	sta zp_tmp1
c7ed : 98               [ 2] 	tya						; Now or with row number
c7ee : 05ab             [ 3] 	ora zp_tmp1
c7f0 : a8               [ 2] 	tay						; Put in to Y
c7f1 : 38               [ 2] 	sec
c7f2 : 60               [ 6] 	rts
                             	
                             ;****************************************
                             ;* kb_scan_key
                             ;* Scans for a key, returns zero for no key found
                             ;* Processes caps and shift lock but these don't 
                             ;* A = Key code
                             ;****************************************
c7f3 :                       kb_scan_key
c7f3 : 20aec7           [ 6] 	jsr kb_read_raw			; Check if a key is sensed
c7f6 : b00c             [ 4] 	bcs kb_scan_decode		; go ahead and decode
                             	; If pressed nothing then reset timers
c7f8 : a9ff             [ 2] 	lda #255
c7fa : 8529             [ 3] 	sta kb_raw				; Reset raw key settings
c7fc : 852a             [ 3] 	sta kb_last				; And last key
AS65 Assembler for R6502 [1.42].                                     Page   76
-------------------------------- bank\bank0.s --------------------------------

c7fe : a531             [ 3] 	lda kb_rdel_tim			; Reset repeat timer to initia
c800 : 852f             [ 3] 	sta kb_rep
c802 :                       kb_scan_wait
c802 : 38               [ 2] 	sec						; Code not valid
c803 : 60               [ 6] 	rts						; And done (A=0)	
c804 :                       kb_scan_decode
                             	; If got here then raw key is good
c804 : a52a             [ 3] 	lda kb_last				; Preload A with last decoded key
c806 : c429             [ 3] 	cpy kb_raw				; Same as last raw key?
c808 : 8429             [ 3] 	sty kb_raw				; Already save new raw key
c80a : d002             [ 3] 	bne kb_process_new		; If is new raw key, look at
c80c : f059             [ 3] 	beq kb_do_repeat		; Else go handle repeating wit
c80e :                       kb_process_new
c80e : a531             [ 3] 	lda kb_rdel_tim			; Reset repeat timer to initia
c810 : 852f             [ 3] 	sta kb_rep
                             	; Now to get a proper key code translated from r
                             	; Check for shift and ctrl (not debounced!)
c812 : a9ef             [ 2] 	lda #0b11101111			; Select column 4
c814 : a20e             [ 2] 	ldx #SND_REG_IOA		; On AY port A
c816 : 2000c0           [ 6] 	jsr snd_set
                             
                             	; check shifted keys
c819 : a204             [ 2] 	ldx #4					; Row 4 (left shift)
c81b : 8e0003           [ 4] 	stx IO_0+PRB			; Select row on port B
c81e : ea               [ 2] 	nop
c81f : ea               [ 2] 	nop
                             
c820 : ad0003           [ 4] 	lda IO_0+PRB			; Read Port B
                             
c823 : a207             [ 2] 	ldx #7					; Row 7 (right shift)
c825 : 8e0003           [ 4] 	stx IO_0+PRB			; Select row on port B
c828 : ea               [ 2] 	nop
c829 : ea               [ 2] 	nop
                             
c82a : 0d0003           [ 4] 	ora IO_0+PRB			; Combine Port B
c82d : be97c8           [ 4] 	ldx kb_table_std,y		; Pre-load standard key code
c830 : 2908             [ 2] 	and #KB_SENSE			; Bit 3 is the sense
c832 : f003             [ 3] 	beq kb_read_noshift		; Skip over if no shift
c834 : bed7c8           [ 4] 	ldx kb_table_shift,y	; Load up standard key code
c837 :                       kb_read_noshift
c837 : 862b             [ 3] 	stx kb_code				; Save the mapped keycode
                             	; check ctrl key
c839 : a202             [ 2] 	ldx #2					; Row 2 (ctrl key)
c83b : 8e0003           [ 4] 	stx IO_0+PRB			; Select row on port B
c83e : ea               [ 2] 	nop
c83f : ea               [ 2] 	nop
                             
c840 : ad0003           [ 4] 	lda IO_0+PRB			; Read Port B
c843 : 2908             [ 2] 	and #KB_SENSE
c845 : f00a             [ 3] 	beq kb_skip_ctrl
c847 : a52b             [ 3] 	lda kb_code
c849 : 291f             [ 2] 	and #0x1f				; Ctrl will result in codes 0 to 31
c84b : 852b             [ 3] 	sta kb_code				; Override the keycode
c84d : f028             [ 3] 	beq kb_brk
c84f : 101e             [ 3] 	bpl	kb_store_last		; Check repeat (bpl is always
c851 :                       kb_skip_ctrl
c851 : a52c             [ 3] 	lda kb_stat				; Check caps lock
c853 : 2901             [ 2] 	and #KB_CAPSLK
c855 : f018             [ 3] 	beq kb_store_last
c857 : a52b             [ 3] 	lda kb_code
c859 : c961             [ 2] 	cmp #'a'				; If < 'a' then skip
c85b : 9012             [ 3] 	bcc kb_store_last
AS65 Assembler for R6502 [1.42].                                     Page   77
-------------------------------- bank\bank0.s --------------------------------

c85d : c97b             [ 2] 	cmp #'z'+1				; If > 'z' then skip
c85f : b00e             [ 3] 	bcs kb_store_last
c861 : a52b             [ 3] 	lda kb_code				; Get the actual code	
c863 : 4920             [ 2] 	eor #0x20				; Switch off bit 0x20
c865 : d008             [ 3] 	bne kb_store_last
c867 :                       kb_do_repeat
c867 : a62f             [ 3] 	ldx kb_rep				; Has repeat expired?
c869 : d008             [ 3] 	bne	kb_in_repeat		; If not then still in repeat
c86b : a630             [ 3] 	ldx kb_rep_tim			; Set repeat speed
c86d : 862f             [ 3] 	stx kb_rep
c86f :                       kb_store_last
c86f : 852a             [ 3] 	sta kb_last				; Make last code same as this
c871 : 18               [ 2] 	clc						; Code valid
c872 : 60               [ 6] 	rts	
c873 :                       kb_in_repeat
c873 : a900             [ 2] 	lda #0					; Don't emit a keycode
c875 : 38               [ 2] 	sec
c876 : 60               [ 6] 	rts
c877 :                       kb_brk
                             	SWBRK DFERR_OK
                             
                             
                             ;****************************************
                             ;* kb_get_key
                             ;* Waits for a key press, C=1 synchronous
                             ;* A = Key code, C=1 means valid
                             ;****************************************
c879 :                       kb_get_key
c879 : 8a               [ 2] 	txa
c87a : 48               [ 3] 	pha
c87b : 98               [ 2] 	tya
c87c : 48               [ 3] 	pha
                             
c87d :                       kb_get_try	
c87d : 08               [ 3] 	php
c87e : 20f3c7           [ 6] 	jsr kb_scan_key
c881 : 900b             [ 3] 	bcc kb_scan_got_key
c883 : 28               [ 4] 	plp						; No key, so check C
c884 : b0f7             [ 3] 	bcs kb_get_try			; Keep looking if C
c886 : 38               [ 2] 	sec						; Indicate key not valid
                             	
c887 : 68               [ 4] 	pla
c888 : a8               [ 2] 	tay
c889 : 68               [ 4] 	pla
c88a : aa               [ 2] 	tax
c88b : a900             [ 2] 	lda #0
                             	
c88d : 60               [ 6] 	rts
c88e :                       kb_scan_got_key
c88e : 28               [ 4] 	plp						; Pull stack
c88f : 18               [ 2] 	clc						; Indicate key valid
                             
c890 : 68               [ 4] 	pla
c891 : a8               [ 2] 	tay
c892 : 68               [ 4] 	pla
c893 : aa               [ 2] 	tax
                             	
c894 : a52b             [ 3] 	lda kb_code
                             	
c896 : 60               [ 6] 	rts
                             	
                             ;****************************************
AS65 Assembler for R6502 [1.42].                                     Page   78
-------------------------------- bank\bank0.s --------------------------------

                             ;* kb_table_std (no shift)
                             ;* Each line is one column
                             ;****************************************
c897 :                       kb_table_std
c897 : 376a6d6b20757938      	db '7' ,'j' ,'m' ,'k' ,' ' ,'u' ,'y' ,'8'
c89f : 6e7436392c69686c      	db 'n' ,'t' ,'6' ,'9' ,',' ,'i' ,'h' ,'l'
c8a7 : 3572623b2e6f6730      	db '5' ,'r' ,'b' ,';' ,'.' ,'o' ,'g' ,'0'
c8af : 7666342d0b70652f      	db 'v' ,'f' ,'4' ,'-' ,0x0b,'p' ,'e' ,'/'
c8b7 : 0000000000000000      	db 0,0,0,0,0,0,0,0 ; Column 4 is shift and ctrl 
c8bf : 311b7a00087f610d      	db '1' ,0x1b,'z' ,0   ,0x08,0x7f,'a' ,0x0d
c8c7 : 7871325c0a5d7300      	db 'x' ,'q' ,'2' ,0x5c,0x0a,']' ,'s' ,0
c8cf : 33646327095b773d      	db '3' ,'d' ,'c' ,0x27,0x09,'[' ,'w' ,'='
                             
                             ;* kb_table_shift (with shift)
c8d7 :                       kb_table_shift
c8d7 : 264a4d4b2055592a      	db '&' ,'J' ,'M' ,'K' ,' ' ,'U' ,'Y' ,'*'
c8df : 4e545e283c49484c      	db 'N' ,'T' ,'^' ,'(' ,'<' ,'I' ,'H' ,'L'
c8e7 : 2552423a3e4f4729      	db '%' ,'R' ,'B' ,':' ,'>' ,'O' ,'G' ,')'
c8ef : 5646245f0b50453f      	db 'V' ,'F' ,'$' ,'_' ,0x0b,'P' ,'E' ,'?'
c8f7 : 0000000000000000      	db 0,0,0,0,0,0,0,0 ; Column 4 is shift and ctrl 
c8ff : 211b5a00087f410d      	db '!' ,0x1b,'Z' ,0   ,0x08,0x7f,'A' ,0x0d
c907 : 5851407c0a7d5300      	db 'X' ,'Q' ,'@' ,'|' ,0x0a,'}' ,'S' ,0
c90f : 23444322097b572b      	db '#' ,'D' ,'C' ,0x22,0x09,'{' ,'W' ,'+'
                             
c917 :                       kb_col_mask
c917 : fe                    	db 0b11111110
c918 : fd                    	db 0b11111101
c919 : fb                    	db 0b11111011
c91a : f7                    	db 0b11110111
c91b : ef                    	db 0b11101111
c91c : df                    	db 0b11011111
c91d : bf                    	db 0b10111111
c91e : 7f                    	db 0b01111111
                             
c91f :                       kb_stick_mask
c91f : df                    	db 0b11011111		; Left 	= Bit 0
c920 : 7f                    	db 0b01111111		; Right = Bit 1
c921 : f7                    	db 0b11110111		; Up	= Bit 2
c922 : bf                    	db 0b10111111		; Down	= Bit 3
c923 : fe                    	db 0b11111110		; Space	= Bit 4
                             
                             	include "vdp/graph.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  GRAPH.S
                             ;*  This is the graphics module, to handle text a
                             ;*  graphics.
                             ;*  For text modes, this module keeps track of wh
                             ;*  next put a character, and also takes care of 
                             ;*  to the next line as well as scrolling the con
                             ;*  when the cursor has reached the bottom right.
                             ;*  module also enables text input which is echoe
                             ;*  screen, to allow interactive input and editin
                             ;*
                             ;************************************************
                             
AS65 Assembler for R6502 [1.42].                                     Page   79
-------------------------------- bank\bank0.s --------------------------------

                             	; ROM code
                             	code
                             
c924 :                       mod_sz_graph_s
                             
                             
                             	include "vdp/font.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  FONT.S
                             ;*  This is the font definition, used to initiali
                             ;*  character set.  This is the standard Oric-1 f
                             ;*	Still called vdp as this code was ported from 
                             ;*	machine using the TMS9918a.
                             ;*
                             ;************************************************
                             
c924 :                       vdp_font
                             ; char 32
c924 : 00                    	db %00000000
c925 : 00                    	db %00000000
c926 : 00                    	db %00000000
c927 : 00                    	db %00000000
c928 : 00                    	db %00000000
c929 : 00                    	db %00000000
c92a : 00                    	db %00000000
c92b : 00                    	db %00000000
                             ; char 33
c92c : 08                    	db %00001000
c92d : 08                    	db %00001000
c92e : 08                    	db %00001000
c92f : 08                    	db %00001000
c930 : 08                    	db %00001000
c931 : 00                    	db %00000000
c932 : 08                    	db %00001000
c933 : 00                    	db %00000000
                             ; char 34
c934 : 14                    	db %00010100
c935 : 14                    	db %00010100
c936 : 14                    	db %00010100
c937 : 00                    	db %00000000
c938 : 00                    	db %00000000
c939 : 00                    	db %00000000
c93a : 00                    	db %00000000
c93b : 00                    	db %00000000
                             ; char 35
c93c : 14                    	db %00010100
c93d : 14                    	db %00010100
c93e : 3e                    	db %00111110
c93f : 14                    	db %00010100
c940 : 3e                    	db %00111110
c941 : 14                    	db %00010100
c942 : 14                    	db %00010100
c943 : 00                    	db %00000000
                             ; char 36
c944 : 08                    	db %00001000
AS65 Assembler for R6502 [1.42].                                     Page   80
-------------------------------- bank\bank0.s --------------------------------

c945 : 1e                    	db %00011110
c946 : 28                    	db %00101000
c947 : 1c                    	db %00011100
c948 : 0a                    	db %00001010
c949 : 3c                    	db %00111100
c94a : 08                    	db %00001000
c94b : 00                    	db %00000000
                             ; char 37
c94c : 30                    	db %00110000
c94d : 32                    	db %00110010
c94e : 04                    	db %00000100
c94f : 08                    	db %00001000
c950 : 10                    	db %00010000
c951 : 26                    	db %00100110
c952 : 06                    	db %00000110
c953 : 00                    	db %00000000
                             ; char 38
c954 : 10                    	db %00010000
c955 : 28                    	db %00101000
c956 : 28                    	db %00101000
c957 : 10                    	db %00010000
c958 : 2a                    	db %00101010
c959 : 24                    	db %00100100
c95a : 1a                    	db %00011010
c95b : 00                    	db %00000000
                             ; char 39
c95c : 08                    	db %00001000
c95d : 08                    	db %00001000
c95e : 08                    	db %00001000
c95f : 00                    	db %00000000
c960 : 00                    	db %00000000
c961 : 00                    	db %00000000
c962 : 00                    	db %00000000
c963 : 00                    	db %00000000
                             ; char 40
c964 : 08                    	db %00001000
c965 : 10                    	db %00010000
c966 : 20                    	db %00100000
c967 : 20                    	db %00100000
c968 : 20                    	db %00100000
c969 : 10                    	db %00010000
c96a : 08                    	db %00001000
c96b : 00                    	db %00000000
                             ; char 41
c96c : 08                    	db %00001000
c96d : 04                    	db %00000100
c96e : 02                    	db %00000010
c96f : 02                    	db %00000010
c970 : 02                    	db %00000010
c971 : 04                    	db %00000100
c972 : 08                    	db %00001000
c973 : 00                    	db %00000000
                             ; char 42
c974 : 08                    	db %00001000
c975 : 2a                    	db %00101010
c976 : 1c                    	db %00011100
c977 : 08                    	db %00001000
c978 : 1c                    	db %00011100
c979 : 2a                    	db %00101010
c97a : 08                    	db %00001000
c97b : 00                    	db %00000000
                             ; char 43
AS65 Assembler for R6502 [1.42].                                     Page   81
-------------------------------- bank\bank0.s --------------------------------

c97c : 00                    	db %00000000
c97d : 08                    	db %00001000
c97e : 08                    	db %00001000
c97f : 3e                    	db %00111110
c980 : 08                    	db %00001000
c981 : 08                    	db %00001000
c982 : 00                    	db %00000000
c983 : 00                    	db %00000000
                             ; char 44
c984 : 00                    	db %00000000
c985 : 00                    	db %00000000
c986 : 00                    	db %00000000
c987 : 00                    	db %00000000
c988 : 00                    	db %00000000
c989 : 08                    	db %00001000
c98a : 08                    	db %00001000
c98b : 10                    	db %00010000
                             ; char 45
c98c : 00                    	db %00000000
c98d : 00                    	db %00000000
c98e : 00                    	db %00000000
c98f : 3e                    	db %00111110
c990 : 00                    	db %00000000
c991 : 00                    	db %00000000
c992 : 00                    	db %00000000
c993 : 00                    	db %00000000
                             ; char 46
c994 : 00                    	db %00000000
c995 : 00                    	db %00000000
c996 : 00                    	db %00000000
c997 : 00                    	db %00000000
c998 : 00                    	db %00000000
c999 : 04                    	db %00000100
c99a : 00                    	db %00000000
c99b : 00                    	db %00000000
                             ; char 47
c99c : 00                    	db %00000000
c99d : 02                    	db %00000010
c99e : 04                    	db %00000100
c99f : 08                    	db %00001000
c9a0 : 10                    	db %00010000
c9a1 : 20                    	db %00100000
c9a2 : 00                    	db %00000000
c9a3 : 00                    	db %00000000
                             ; char 48
c9a4 : 1c                    	db %00011100
c9a5 : 22                    	db %00100010
c9a6 : 26                    	db %00100110
c9a7 : 2a                    	db %00101010
c9a8 : 32                    	db %00110010
c9a9 : 22                    	db %00100010
c9aa : 1c                    	db %00011100
c9ab : 00                    	db %00000000
                             ; char 49
c9ac : 08                    	db %00001000
c9ad : 18                    	db %00011000
c9ae : 08                    	db %00001000
c9af : 08                    	db %00001000
c9b0 : 08                    	db %00001000
c9b1 : 08                    	db %00001000
c9b2 : 1c                    	db %00011100
c9b3 : 00                    	db %00000000
AS65 Assembler for R6502 [1.42].                                     Page   82
-------------------------------- bank\bank0.s --------------------------------

                             ; char 50
c9b4 : 1c                    	db %00011100
c9b5 : 22                    	db %00100010
c9b6 : 02                    	db %00000010
c9b7 : 04                    	db %00000100
c9b8 : 08                    	db %00001000
c9b9 : 10                    	db %00010000
c9ba : 3e                    	db %00111110
c9bb : 00                    	db %00000000
                             ; char 51
c9bc : 3e                    	db %00111110
c9bd : 02                    	db %00000010
c9be : 04                    	db %00000100
c9bf : 0c                    	db %00001100
c9c0 : 02                    	db %00000010
c9c1 : 22                    	db %00100010
c9c2 : 1c                    	db %00011100
c9c3 : 00                    	db %00000000
                             ; char 52
c9c4 : 04                    	db %00000100
c9c5 : 0c                    	db %00001100
c9c6 : 14                    	db %00010100
c9c7 : 24                    	db %00100100
c9c8 : 3e                    	db %00111110
c9c9 : 04                    	db %00000100
c9ca : 04                    	db %00000100
c9cb : 00                    	db %00000000
                             ; char 53
c9cc : 3e                    	db %00111110
c9cd : 20                    	db %00100000
c9ce : 3c                    	db %00111100
c9cf : 02                    	db %00000010
c9d0 : 02                    	db %00000010
c9d1 : 22                    	db %00100010
c9d2 : 1c                    	db %00011100
c9d3 : 00                    	db %00000000
                             ; char 54
c9d4 : 0c                    	db %00001100
c9d5 : 10                    	db %00010000
c9d6 : 20                    	db %00100000
c9d7 : 3c                    	db %00111100
c9d8 : 22                    	db %00100010
c9d9 : 22                    	db %00100010
c9da : 1c                    	db %00011100
c9db : 00                    	db %00000000
                             ; char 55
c9dc : 3e                    	db %00111110
c9dd : 02                    	db %00000010
c9de : 04                    	db %00000100
c9df : 08                    	db %00001000
c9e0 : 10                    	db %00010000
c9e1 : 10                    	db %00010000
c9e2 : 10                    	db %00010000
c9e3 : 00                    	db %00000000
                             ; char 56
c9e4 : 1c                    	db %00011100
c9e5 : 22                    	db %00100010
c9e6 : 22                    	db %00100010
c9e7 : 1c                    	db %00011100
c9e8 : 22                    	db %00100010
c9e9 : 22                    	db %00100010
c9ea : 1c                    	db %00011100
AS65 Assembler for R6502 [1.42].                                     Page   83
-------------------------------- bank\bank0.s --------------------------------

c9eb : 00                    	db %00000000
                             ; char 57
c9ec : 1c                    	db %00011100
c9ed : 22                    	db %00100010
c9ee : 22                    	db %00100010
c9ef : 1e                    	db %00011110
c9f0 : 02                    	db %00000010
c9f1 : 04                    	db %00000100
c9f2 : 18                    	db %00011000
c9f3 : 00                    	db %00000000
                             ; char 58
c9f4 : 00                    	db %00000000
c9f5 : 00                    	db %00000000
c9f6 : 08                    	db %00001000
c9f7 : 00                    	db %00000000
c9f8 : 00                    	db %00000000
c9f9 : 08                    	db %00001000
c9fa : 00                    	db %00000000
c9fb : 00                    	db %00000000
                             ; char 59
c9fc : 00                    	db %00000000
c9fd : 00                    	db %00000000
c9fe : 08                    	db %00001000
c9ff : 00                    	db %00000000
ca00 : 00                    	db %00000000
ca01 : 08                    	db %00001000
ca02 : 08                    	db %00001000
ca03 : 10                    	db %00010000
                             ; char 60
ca04 : 04                    	db %00000100
ca05 : 08                    	db %00001000
ca06 : 10                    	db %00010000
ca07 : 20                    	db %00100000
ca08 : 10                    	db %00010000
ca09 : 08                    	db %00001000
ca0a : 04                    	db %00000100
ca0b : 00                    	db %00000000
                             ; char 61
ca0c : 00                    	db %00000000
ca0d : 00                    	db %00000000
ca0e : 3e                    	db %00111110
ca0f : 00                    	db %00000000
ca10 : 3e                    	db %00111110
ca11 : 00                    	db %00000000
ca12 : 00                    	db %00000000
ca13 : 00                    	db %00000000
                             ; char 62
ca14 : 10                    	db %00010000
ca15 : 08                    	db %00001000
ca16 : 04                    	db %00000100
ca17 : 02                    	db %00000010
ca18 : 04                    	db %00000100
ca19 : 08                    	db %00001000
ca1a : 10                    	db %00010000
ca1b : 00                    	db %00000000
                             ; char 63
ca1c : 1c                    	db %00011100
ca1d : 22                    	db %00100010
ca1e : 04                    	db %00000100
ca1f : 08                    	db %00001000
ca20 : 08                    	db %00001000
ca21 : 00                    	db %00000000
AS65 Assembler for R6502 [1.42].                                     Page   84
-------------------------------- bank\bank0.s --------------------------------

ca22 : 08                    	db %00001000
ca23 : 00                    	db %00000000
                             ; char 64
ca24 : 1c                    	db %00011100
ca25 : 22                    	db %00100010
ca26 : 2a                    	db %00101010
ca27 : 2e                    	db %00101110
ca28 : 2c                    	db %00101100
ca29 : 20                    	db %00100000
ca2a : 1e                    	db %00011110
ca2b : 00                    	db %00000000
ca2c :                       vdp_font_a
                             ; char 60
ca2c : 08                    	db %00001000
ca2d : 14                    	db %00010100
ca2e : 22                    	db %00100010
ca2f : 22                    	db %00100010
ca30 : 3e                    	db %00111110
ca31 : 22                    	db %00100010
ca32 : 22                    	db %00100010
ca33 : 00                    	db %00000000
                             ; char 60
ca34 : 3c                    	db %00111100
ca35 : 22                    	db %00100010
ca36 : 22                    	db %00100010
ca37 : 3c                    	db %00111100
ca38 : 22                    	db %00100010
ca39 : 22                    	db %00100010
ca3a : 3c                    	db %00111100
ca3b : 00                    	db %00000000
                             ; char 60
ca3c : 1c                    	db %00011100
ca3d : 22                    	db %00100010
ca3e : 20                    	db %00100000
ca3f : 20                    	db %00100000
ca40 : 20                    	db %00100000
ca41 : 22                    	db %00100010
ca42 : 1c                    	db %00011100
ca43 : 00                    	db %00000000
                             ; char 68
ca44 : 3c                    	db %00111100
ca45 : 22                    	db %00100010
ca46 : 22                    	db %00100010
ca47 : 22                    	db %00100010
ca48 : 22                    	db %00100010
ca49 : 22                    	db %00100010
ca4a : 3c                    	db %00111100
ca4b : 00                    	db %00000000
                             ; char 69
ca4c : 3e                    	db %00111110
ca4d : 20                    	db %00100000
ca4e : 20                    	db %00100000
ca4f : 3c                    	db %00111100
ca50 : 20                    	db %00100000
ca51 : 20                    	db %00100000
ca52 : 3e                    	db %00111110
ca53 : 00                    	db %00000000
                             ; char 70
ca54 : 3e                    	db %00111110
ca55 : 20                    	db %00100000
ca56 : 20                    	db %00100000
ca57 : 3c                    	db %00111100
AS65 Assembler for R6502 [1.42].                                     Page   85
-------------------------------- bank\bank0.s --------------------------------

ca58 : 20                    	db %00100000
ca59 : 20                    	db %00100000
ca5a : 20                    	db %00100000
ca5b : 00                    	db %00000000
                             ; char 71
ca5c : 1e                    	db %00011110
ca5d : 20                    	db %00100000
ca5e : 20                    	db %00100000
ca5f : 20                    	db %00100000
ca60 : 26                    	db %00100110
ca61 : 22                    	db %00100010
ca62 : 1e                    	db %00011110
ca63 : 00                    	db %00000000
                             ; char 72
ca64 : 22                    	db %00100010
ca65 : 22                    	db %00100010
ca66 : 22                    	db %00100010
ca67 : 3e                    	db %00111110
ca68 : 22                    	db %00100010
ca69 : 22                    	db %00100010
ca6a : 22                    	db %00100010
ca6b : 00                    	db %00000000
                             ; char 73
ca6c : 1c                    	db %00011100
ca6d : 08                    	db %00001000
ca6e : 08                    	db %00001000
ca6f : 08                    	db %00001000
ca70 : 08                    	db %00001000
ca71 : 08                    	db %00001000
ca72 : 1c                    	db %00011100
ca73 : 00                    	db %00000000
                             ; char 74
ca74 : 02                    	db %00000010
ca75 : 02                    	db %00000010
ca76 : 02                    	db %00000010
ca77 : 02                    	db %00000010
ca78 : 02                    	db %00000010
ca79 : 22                    	db %00100010
ca7a : 1c                    	db %00011100
ca7b : 00                    	db %00000000
                             ; char 75
ca7c : 22                    	db %00100010
ca7d : 24                    	db %00100100
ca7e : 28                    	db %00101000
ca7f : 30                    	db %00110000
ca80 : 28                    	db %00101000
ca81 : 24                    	db %00100100
ca82 : 22                    	db %00100010
ca83 : 00                    	db %00000000
                             ; char 76
ca84 : 20                    	db %00100000
ca85 : 20                    	db %00100000
ca86 : 20                    	db %00100000
ca87 : 20                    	db %00100000
ca88 : 20                    	db %00100000
ca89 : 20                    	db %00100000
ca8a : 3e                    	db %00111110
ca8b : 00                    	db %00000000
                             ; char 77
ca8c : 22                    	db %00100010
ca8d : 36                    	db %00110110
ca8e : 2a                    	db %00101010
AS65 Assembler for R6502 [1.42].                                     Page   86
-------------------------------- bank\bank0.s --------------------------------

ca8f : 2a                    	db %00101010
ca90 : 22                    	db %00100010
ca91 : 22                    	db %00100010
ca92 : 22                    	db %00100010
ca93 : 00                    	db %00000000
                             ; char 78
ca94 : 22                    	db %00100010
ca95 : 22                    	db %00100010
ca96 : 32                    	db %00110010
ca97 : 2a                    	db %00101010
ca98 : 26                    	db %00100110
ca99 : 22                    	db %00100010
ca9a : 22                    	db %00100010
ca9b : 00                    	db %00000000
                             ; char 79
ca9c : 1c                    	db %00011100
ca9d : 22                    	db %00100010
ca9e : 22                    	db %00100010
ca9f : 22                    	db %00100010
caa0 : 22                    	db %00100010
caa1 : 22                    	db %00100010
caa2 : 1c                    	db %00011100
caa3 : 00                    	db %00000000
                             ; char 80
caa4 : 3c                    	db %00111100
caa5 : 22                    	db %00100010
caa6 : 22                    	db %00100010
caa7 : 3c                    	db %00111100
caa8 : 20                    	db %00100000
caa9 : 20                    	db %00100000
caaa : 20                    	db %00100000
caab : 00                    	db %00000000
                             ; char 81
caac : 1c                    	db %00011100
caad : 22                    	db %00100010
caae : 22                    	db %00100010
caaf : 22                    	db %00100010
cab0 : 2a                    	db %00101010
cab1 : 24                    	db %00100100
cab2 : 1a                    	db %00011010
cab3 : 00                    	db %00000000
                             ; char 82
cab4 : 3c                    	db %00111100
cab5 : 22                    	db %00100010
cab6 : 22                    	db %00100010
cab7 : 3c                    	db %00111100
cab8 : 28                    	db %00101000
cab9 : 24                    	db %00100100
caba : 22                    	db %00100010
cabb : 00                    	db %00000000
                             ; char 83
cabc : 1c                    	db %00011100
cabd : 22                    	db %00100010
cabe : 20                    	db %00100000
cabf : 1c                    	db %00011100
cac0 : 02                    	db %00000010
cac1 : 22                    	db %00100010
cac2 : 1c                    	db %00011100
cac3 : 00                    	db %00000000
                             ; char 84
cac4 : 3e                    	db %00111110
cac5 : 08                    	db %00001000
AS65 Assembler for R6502 [1.42].                                     Page   87
-------------------------------- bank\bank0.s --------------------------------

cac6 : 08                    	db %00001000
cac7 : 08                    	db %00001000
cac8 : 08                    	db %00001000
cac9 : 08                    	db %00001000
caca : 08                    	db %00001000
cacb : 00                    	db %00000000
                             ; char 85
cacc : 22                    	db %00100010
cacd : 22                    	db %00100010
cace : 22                    	db %00100010
cacf : 22                    	db %00100010
cad0 : 22                    	db %00100010
cad1 : 22                    	db %00100010
cad2 : 1c                    	db %00011100
cad3 : 00                    	db %00000000
                             ; char 86
cad4 : 22                    	db %00100010
cad5 : 22                    	db %00100010
cad6 : 22                    	db %00100010
cad7 : 22                    	db %00100010
cad8 : 22                    	db %00100010
cad9 : 14                    	db %00010100
cada : 08                    	db %00001000
cadb : 00                    	db %00000000
                             ; char 87
cadc : 22                    	db %00100010
cadd : 22                    	db %00100010
cade : 22                    	db %00100010
cadf : 2a                    	db %00101010
cae0 : 2a                    	db %00101010
cae1 : 36                    	db %00110110
cae2 : 22                    	db %00100010
cae3 : 00                    	db %00000000
                             ; char 88
cae4 : 22                    	db %00100010
cae5 : 22                    	db %00100010
cae6 : 14                    	db %00010100
cae7 : 08                    	db %00001000
cae8 : 14                    	db %00010100
cae9 : 22                    	db %00100010
caea : 22                    	db %00100010
caeb : 00                    	db %00000000
                             ; char 89
caec : 22                    	db %00100010
caed : 22                    	db %00100010
caee : 14                    	db %00010100
caef : 08                    	db %00001000
caf0 : 08                    	db %00001000
caf1 : 08                    	db %00001000
caf2 : 08                    	db %00001000
caf3 : 00                    	db %00000000
                             ; char 90
caf4 : 3e                    	db %00111110
caf5 : 02                    	db %00000010
caf6 : 04                    	db %00000100
caf7 : 08                    	db %00001000
caf8 : 10                    	db %00010000
caf9 : 20                    	db %00100000
cafa : 3e                    	db %00111110
cafb : 00                    	db %00000000
                             ; char 91
cafc : 1e                    	db %00011110
AS65 Assembler for R6502 [1.42].                                     Page   88
-------------------------------- bank\bank0.s --------------------------------

cafd : 10                    	db %00010000
cafe : 10                    	db %00010000
caff : 10                    	db %00010000
cb00 : 10                    	db %00010000
cb01 : 10                    	db %00010000
cb02 : 1e                    	db %00011110
cb03 : 00                    	db %00000000
                             ; char 92
cb04 : 00                    	db %00000000
cb05 : 20                    	db %00100000
cb06 : 10                    	db %00010000
cb07 : 08                    	db %00001000
cb08 : 04                    	db %00000100
cb09 : 02                    	db %00000010
cb0a : 00                    	db %00000000
cb0b : 00                    	db %00000000
                             ; char 93
cb0c : 3c                    	db %00111100
cb0d : 04                    	db %00000100
cb0e : 04                    	db %00000100
cb0f : 04                    	db %00000100
cb10 : 04                    	db %00000100
cb11 : 04                    	db %00000100
cb12 : 3c                    	db %00111100
cb13 : 00                    	db %00000000
                             ; char 94
cb14 : 08                    	db %00001000
cb15 : 14                    	db %00010100
cb16 : 2a                    	db %00101010
cb17 : 08                    	db %00001000
cb18 : 08                    	db %00001000
cb19 : 08                    	db %00001000
cb1a : 08                    	db %00001000
cb1b : 00                    	db %00000000
                             ; char 95
cb1c : 00                    	db %00000000
cb1d : 00                    	db %00000000
cb1e : 00                    	db %00000000
cb1f : 00                    	db %00000000
cb20 : 00                    	db %00000000
cb21 : 00                    	db %00000000
cb22 : 3e                    	db %00111110
cb23 : 00                    	db %00000000
                             ; char 96
cb24 : 0e                    	db %00001110
cb25 : 10                    	db %00010000
cb26 : 10                    	db %00010000
cb27 : 10                    	db %00010000
cb28 : 3c                    	db %00111100
cb29 : 10                    	db %00010000
cb2a : 3e                    	db %00111110
cb2b : 00                    	db %00000000
                             ; char 97
cb2c : 00                    	db %00000000
cb2d : 00                    	db %00000000
cb2e : 1c                    	db %00011100
cb2f : 02                    	db %00000010
cb30 : 1e                    	db %00011110
cb31 : 22                    	db %00100010
cb32 : 1e                    	db %00011110
cb33 : 00                    	db %00000000
                             ; char 98
AS65 Assembler for R6502 [1.42].                                     Page   89
-------------------------------- bank\bank0.s --------------------------------

cb34 : 20                    	db %00100000
cb35 : 20                    	db %00100000
cb36 : 3c                    	db %00111100
cb37 : 22                    	db %00100010
cb38 : 22                    	db %00100010
cb39 : 22                    	db %00100010
cb3a : 3c                    	db %00111100
cb3b : 00                    	db %00000000
                             ; char 99
cb3c : 00                    	db %00000000
cb3d : 00                    	db %00000000
cb3e : 1e                    	db %00011110
cb3f : 20                    	db %00100000
cb40 : 20                    	db %00100000
cb41 : 20                    	db %00100000
cb42 : 1e                    	db %00011110
cb43 : 00                    	db %00000000
                             ; char 100
cb44 : 02                    	db %00000010
cb45 : 02                    	db %00000010
cb46 : 1e                    	db %00011110
cb47 : 22                    	db %00100010
cb48 : 22                    	db %00100010
cb49 : 22                    	db %00100010
cb4a : 1e                    	db %00011110
cb4b : 00                    	db %00000000
                             ; char 101
cb4c : 00                    	db %00000000
cb4d : 00                    	db %00000000
cb4e : 1c                    	db %00011100
cb4f : 22                    	db %00100010
cb50 : 3e                    	db %00111110
cb51 : 20                    	db %00100000
cb52 : 1e                    	db %00011110
cb53 : 00                    	db %00000000
                             ; char 102
cb54 : 0c                    	db %00001100
cb55 : 12                    	db %00010010
cb56 : 10                    	db %00010000
cb57 : 3c                    	db %00111100
cb58 : 10                    	db %00010000
cb59 : 10                    	db %00010000
cb5a : 10                    	db %00010000
cb5b : 00                    	db %00000000
                             ; char 103
cb5c : 00                    	db %00000000
cb5d : 00                    	db %00000000
cb5e : 1c                    	db %00011100
cb5f : 22                    	db %00100010
cb60 : 22                    	db %00100010
cb61 : 1e                    	db %00011110
cb62 : 02                    	db %00000010
cb63 : 1c                    	db %00011100
                             ; char 104
cb64 : 20                    	db %00100000
cb65 : 20                    	db %00100000
cb66 : 3c                    	db %00111100
cb67 : 22                    	db %00100010
cb68 : 22                    	db %00100010
cb69 : 22                    	db %00100010
cb6a : 22                    	db %00100010
cb6b : 00                    	db %00000000
AS65 Assembler for R6502 [1.42].                                     Page   90
-------------------------------- bank\bank0.s --------------------------------

                             ; char 105
cb6c : 08                    	db %00001000
cb6d : 00                    	db %00000000
cb6e : 18                    	db %00011000
cb6f : 08                    	db %00001000
cb70 : 08                    	db %00001000
cb71 : 08                    	db %00001000
cb72 : 1c                    	db %00011100
cb73 : 00                    	db %00000000
                             ; char 106
cb74 : 04                    	db %00000100
cb75 : 00                    	db %00000000
cb76 : 0c                    	db %00001100
cb77 : 04                    	db %00000100
cb78 : 04                    	db %00000100
cb79 : 04                    	db %00000100
cb7a : 24                    	db %00100100
cb7b : 18                    	db %00011000
                             ; char 107
cb7c : 20                    	db %00100000
cb7d : 20                    	db %00100000
cb7e : 22                    	db %00100010
cb7f : 24                    	db %00100100
cb80 : 38                    	db %00111000
cb81 : 24                    	db %00100100
cb82 : 22                    	db %00100010
cb83 : 00                    	db %00000000
                             ; char 108
cb84 : 18                    	db %00011000
cb85 : 08                    	db %00001000
cb86 : 08                    	db %00001000
cb87 : 08                    	db %00001000
cb88 : 08                    	db %00001000
cb89 : 08                    	db %00001000
cb8a : 1c                    	db %00011100
cb8b : 00                    	db %00000000
                             ; char 109
cb8c : 00                    	db %00000000
cb8d : 00                    	db %00000000
cb8e : 36                    	db %00110110
cb8f : 2a                    	db %00101010
cb90 : 2a                    	db %00101010
cb91 : 2a                    	db %00101010
cb92 : 22                    	db %00100010
cb93 : 00                    	db %00000000
                             ; char 110
cb94 : 00                    	db %00000000
cb95 : 00                    	db %00000000
cb96 : 3c                    	db %00111100
cb97 : 22                    	db %00100010
cb98 : 22                    	db %00100010
cb99 : 22                    	db %00100010
cb9a : 22                    	db %00100010
cb9b : 00                    	db %00000000
                             ; char 111
cb9c : 00                    	db %00000000
cb9d : 00                    	db %00000000
cb9e : 1c                    	db %00011100
cb9f : 22                    	db %00100010
cba0 : 22                    	db %00100010
cba1 : 22                    	db %00100010
cba2 : 1c                    	db %00011100
AS65 Assembler for R6502 [1.42].                                     Page   91
-------------------------------- bank\bank0.s --------------------------------

cba3 : 00                    	db %00000000
                             ; char 112
cba4 : 00                    	db %00000000
cba5 : 00                    	db %00000000
cba6 : 3c                    	db %00111100
cba7 : 22                    	db %00100010
cba8 : 22                    	db %00100010
cba9 : 3c                    	db %00111100
cbaa : 20                    	db %00100000
cbab : 20                    	db %00100000
                             ; char 113
cbac : 00                    	db %00000000
cbad : 00                    	db %00000000
cbae : 1e                    	db %00011110
cbaf : 22                    	db %00100010
cbb0 : 22                    	db %00100010
cbb1 : 1e                    	db %00011110
cbb2 : 02                    	db %00000010
cbb3 : 02                    	db %00000010
                             ; char 114
cbb4 : 00                    	db %00000000
cbb5 : 00                    	db %00000000
cbb6 : 2e                    	db %00101110
cbb7 : 30                    	db %00110000
cbb8 : 20                    	db %00100000
cbb9 : 20                    	db %00100000
cbba : 20                    	db %00100000
cbbb : 00                    	db %00000000
                             ; char 115
cbbc : 00                    	db %00000000
cbbd : 00                    	db %00000000
cbbe : 1e                    	db %00011110
cbbf : 20                    	db %00100000
cbc0 : 1c                    	db %00011100
cbc1 : 02                    	db %00000010
cbc2 : 3c                    	db %00111100
cbc3 : 00                    	db %00000000
                             ; char 116
cbc4 : 10                    	db %00010000
cbc5 : 10                    	db %00010000
cbc6 : 3c                    	db %00111100
cbc7 : 10                    	db %00010000
cbc8 : 10                    	db %00010000
cbc9 : 12                    	db %00010010
cbca : 0c                    	db %00001100
cbcb : 00                    	db %00000000
                             ; char 117
cbcc : 00                    	db %00000000
cbcd : 00                    	db %00000000
cbce : 22                    	db %00100010
cbcf : 22                    	db %00100010
cbd0 : 22                    	db %00100010
cbd1 : 26                    	db %00100110
cbd2 : 1a                    	db %00011010
cbd3 : 00                    	db %00000000
                             ; char 118
cbd4 : 00                    	db %00000000
cbd5 : 00                    	db %00000000
cbd6 : 22                    	db %00100010
cbd7 : 22                    	db %00100010
cbd8 : 22                    	db %00100010
cbd9 : 14                    	db %00010100
AS65 Assembler for R6502 [1.42].                                     Page   92
-------------------------------- bank\bank0.s --------------------------------

cbda : 08                    	db %00001000
cbdb : 00                    	db %00000000
                             ; char 119
cbdc : 00                    	db %00000000
cbdd : 00                    	db %00000000
cbde : 22                    	db %00100010
cbdf : 22                    	db %00100010
cbe0 : 2a                    	db %00101010
cbe1 : 2a                    	db %00101010
cbe2 : 36                    	db %00110110
cbe3 : 00                    	db %00000000
                             ; char 120
cbe4 : 00                    	db %00000000
cbe5 : 00                    	db %00000000
cbe6 : 22                    	db %00100010
cbe7 : 14                    	db %00010100
cbe8 : 08                    	db %00001000
cbe9 : 14                    	db %00010100
cbea : 22                    	db %00100010
cbeb : 00                    	db %00000000
                             ; char 121
cbec : 00                    	db %00000000
cbed : 00                    	db %00000000
cbee : 22                    	db %00100010
cbef : 22                    	db %00100010
cbf0 : 22                    	db %00100010
cbf1 : 1e                    	db %00011110
cbf2 : 02                    	db %00000010
cbf3 : 1c                    	db %00011100
                             ; char 122
cbf4 : 00                    	db %00000000
cbf5 : 00                    	db %00000000
cbf6 : 3e                    	db %00111110
cbf7 : 04                    	db %00000100
cbf8 : 08                    	db %00001000
cbf9 : 10                    	db %00010000
cbfa : 3e                    	db %00111110
cbfb : 00                    	db %00000000
                             ; char 123
cbfc : 0e                    	db %00001110
cbfd : 18                    	db %00011000
cbfe : 18                    	db %00011000
cbff : 30                    	db %00110000
cc00 : 18                    	db %00011000
cc01 : 18                    	db %00011000
cc02 : 0e                    	db %00001110
cc03 : 00                    	db %00000000
                             ; char 124
cc04 : 08                    	db %00001000
cc05 : 08                    	db %00001000
cc06 : 08                    	db %00001000
cc07 : 08                    	db %00001000
cc08 : 08                    	db %00001000
cc09 : 08                    	db %00001000
cc0a : 08                    	db %00001000
cc0b : 08                    	db %00001000
                             ; char 125
cc0c : 38                    	db %00111000
cc0d : 0c                    	db %00001100
cc0e : 0c                    	db %00001100
cc0f : 06                    	db %00000110
cc10 : 0c                    	db %00001100
AS65 Assembler for R6502 [1.42].                                     Page   93
-------------------------------- bank\bank0.s --------------------------------

cc11 : 0c                    	db %00001100
cc12 : 38                    	db %00111000
cc13 : 00                    	db %00000000
                             ; char 126
cc14 : 00                    	db %00000000
cc15 : 00                    	db %00000000
cc16 : 10                    	db %00010000
cc17 : 2a                    	db %00101010
cc18 : 04                    	db %00000100
cc19 : 00                    	db %00000000
cc1a : 00                    	db %00000000
cc1b : 00                    	db %00000000
                             ; char 127
cc1c : 3e                    	db %00111110
cc1d : 3e                    	db %00111110
cc1e : 3e                    	db %00111110
cc1f : 3e                    	db %00111110
cc20 : 3e                    	db %00111110
cc21 : 3e                    	db %00111110
cc22 : 3e                    	db %00111110
cc23 : 00                    	db %00000000
                             	
                             	
                             
                             ;****************************************
                             ;* vdp_init_font
                             ;* Initialise fonts from ROM
                             ;* Input : None
                             ;* Output : None
                             ;* Regs affected : All
                             ;****************************************
cc24 :                       gr_init_font
                             	; Get char base from vdp structure
cc24 : a614             [ 3] 	ldx gr_scrngeom+gr_char
cc26 : 8634             [ 3] 	stx tmp_blo
cc28 : a615             [ 3] 	ldx gr_scrngeom+gr_char+1
cc2a : e8               [ 2] 	inx						; ASCII patterns start 1 page later
cc2b : 8635             [ 3] 	stx tmp_bhi
                             
cc2d : a924             [ 2] 	lda #lo(vdp_font)		; Low byte of fonts source
cc2f : 8536             [ 3] 	sta tmp_clo
cc31 : a9c9             [ 2] 	lda #hi(vdp_font)		; High byte of fonts source
cc33 : 8537             [ 3] 	sta tmp_chi
cc35 : a203             [ 2] 	ldx #3					; Copy 3 pages
cc37 : 4c3acc           [ 3] 	jmp gr_copy_mem
                             
                             
                             ;****************************************
                             ;* vdp_copy_mem
                             ;* Copy memory pages at a time
                             ;* Input :	clo/hi	=	source
                             ;*			blo/hi	=	dest
                             ;*			X		=	pages to copy
                             ;* Output : None
                             ;* Regs affected : All
                             ;****************************************
cc3a :                       gr_copy_mem
cc3a : a000             [ 2] 	ldy #0					; byte within page
cc3c : a536             [ 3] 	lda tmp_clo				; Low byte of source
cc3e : 8532             [ 3] 	sta tmp_alo
cc40 : a537             [ 3] 	lda tmp_chi				; High byte of source
cc42 : 8533             [ 3] 	sta tmp_ahi
AS65 Assembler for R6502 [1.42].                                     Page   94
-------------------------------- bank\bank0.s --------------------------------

cc44 :                       gr_copy_byte
cc44 : 98               [ 2] 	tya
cc45 : b132             [ 5] 	lda (tmp_alo),y			; Get byte from font table
cc47 : 9134             [ 5] 	sta (tmp_blo),y			; Put it to the memory
cc49 : c8               [ 2] 	iny
cc4a : d0f8             [ 3] 	bne gr_copy_byte		; keep going for 1 page
cc4c : e633             [ 5] 	inc tmp_ahi				; only need to increment high byt
cc4e : e635             [ 5] 	inc tmp_bhi				; source and destination ptr
cc50 : ca               [ 2] 	dex						; page counter
cc51 : d0f1             [ 3] 	bne gr_copy_byte		; keep going for X pages
cc53 : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* gr_init
                             ;* First initialisation of screen
                             ;****************************************
cc54 :                       gr_init
cc54 : a210             [ 2] 	ldx #VDP_FLASH			; Default cursor flash rate
cc56 : 860b             [ 3] 	stx vdp_curtim
cc58 : 860c             [ 3] 	stx vdp_curcnt
cc5a : a200             [ 2] 	ldx #0
cc5c : 860e             [ 3] 	stx vdp_curstat
                             
                             	; Hard reset initial geom values (X=0)
cc5e : 2085cc           [ 6] 	jsr gr_init_geom
                             
                             	; Copy font from ROM to char base
cc61 : 2024cc           [ 6] 	jsr gr_init_font
                             
                             	; Go in to hires mode to generate tables
cc64 : 20eacc           [ 6] 	jsr gr_init_hires
cc67 : 2023cd           [ 6] 	jsr gr_init_hires_tables
                             
                             	; But start in text mode
cc6a : 4cd1cc           [ 3] 	jmp gr_init_screen_txt
                             
                             
                             ;****************************************
                             ;* gr_check_font_copy
                             ;* check font needs to be copied from
                             ;* current location to another
                             ;* A=high byte of page aligned font addr
                             ;* that the font needs to be at
                             ;****************************************
cc6d :                       gr_check_font_copy
                             	; Compare with current high byte
cc6d : c515             [ 3] 	cmp gr_scrngeom+gr_char+1
cc6f : f013             [ 3] 	beq gr_check_font_copy_done
                             	; save A as high byte of destination
cc71 : 8535             [ 3] 	sta tmp_blo+1
                             	; destination low is 0
cc73 : a900             [ 2] 	lda #0
cc75 : 8534             [ 3] 	sta tmp_blo
                             
                             	; Get source from current vdp structure
cc77 : a515             [ 3] 	lda gr_scrngeom+gr_char+1
cc79 : 8537             [ 3] 	sta tmp_clo+1
cc7b : a514             [ 3] 	lda gr_scrngeom+gr_char
cc7d : 8536             [ 3] 	sta tmp_clo
                             
                             	; Copy all 8 pages of font (std + alt) data
AS65 Assembler for R6502 [1.42].                                     Page   95
-------------------------------- bank\bank0.s --------------------------------

cc7f : a208             [ 2] 	ldx #8
cc81 : 203acc           [ 6] 	jsr gr_copy_mem
cc84 :                       gr_check_font_copy_done
cc84 :                       gr_init_geom_done
cc84 : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* gr_init_geom
                             ;* initialise geometry entries from X
                             ;* position from base until -1
                             ;****************************************
cc85 :                       gr_init_geom
                             	; Which geom entry to init = Y
cc85 : bc94cc           [ 4] 	ldy gr_scrngeom_base,x
cc88 : 30fa             [ 3] 	bmi gr_init_geom_done		; Just somewhere with an 
                             	; skip to data and put in A
cc8a : e8               [ 2] 	inx
cc8b : bd94cc           [ 4] 	lda gr_scrngeom_base,x
                             	; save it in Y
cc8e : 991100           [ 5] 	sta gr_scrngeom,y
                             	; next entry
cc91 : e8               [ 2] 	inx
cc92 : d0f1             [ 3] 	bne gr_init_geom	; Always
                             	; Hope we don't get here - will crash!
                             
                             ; Geometry initialisation tables
cc94 :                       gr_scrngeom_base
cc94 : 0000                  	db gr_mode, 0
cc96 : 0300                  	db gr_char,   lo(TEXTCHAR)
cc98 : 04b4                  	db gr_char+1, hi(TEXTCHAR)
cc9a : 1300                  	db gr_ink, 0
cc9c : 1416                  	db gr_paper, 16+6
cc9e : 1502                  	db gr_margin, 2
cca0 : ff                    	db -1
                             ;* Geometry for text/lores
cca1 :                       gr_scrngeom_text
cca1 : 0000                  	db gr_mode, 0
                             
cca3 : 0300                  	db gr_char,   lo(TEXTCHAR)
cca5 : 04b4                  	db gr_char+1, hi(TEXTCHAR)
                             
cca7 : 0580                  	db gr_text_start,   lo(TEXTSCRN)
cca9 : 06bb                  	db gr_text_start+1, hi(TEXTSCRN)
                             
ccab : 0760                  	db gr_text_size,   lo(40*28)
ccad : 0804                  	db gr_text_size+1, hi(40*28)
                             
ccaf : 0928                  	db gr_text_w, 40
ccb1 : 0a1c                  	db gr_text_h, 28
ccb3 : ff                    	db -1
                             ;* Geometry for hires
ccb4 :                       gr_scrngeom_hires
ccb4 : 0001                  	db gr_mode, 1
                             
ccb6 : 0100                  	db gr_hi_start,   lo(HISCRN)
ccb8 : 02a0                  	db gr_hi_start+1, hi(HISCRN)
ccba : 0300                  	db gr_char,   lo(HICHAR)
ccbc : 0498                  	db gr_char+1, hi(HICHAR)
                             
ccbe : 0568                  	db gr_text_start,   lo(HITEXT)
ccc0 : 06bf                  	db gr_text_start+1, hi(HITEXT)
AS65 Assembler for R6502 [1.42].                                     Page   96
-------------------------------- bank\bank0.s --------------------------------

                             
ccc2 : 0778                  	db gr_text_size,   lo(40*3)
ccc4 : 0800                  	db gr_text_size+1, hi(40*3)
                             
ccc6 : 1100                  	db gr_hires_x, 0
ccc8 : 1200                  	db gr_hires_y, 0
                             
                             	; Only need to initialise text height, width is 
ccca : 0a03                  	db gr_text_h, 3
                             
cccc : 0f01                  	db gr_pixmode, 1
ccce : 1006                  	db gr_pitch, 6
ccd0 : ff                    	db -1
                             
                             
                             
                             ;****************************************
                             ;* gr_init_screen_txt
                             ;* initialise the screen in text mode
                             ;****************************************
ccd1 :                       gr_init_screen_txt
ccd1 : e60d             [ 5] 	inc vdp_curoff
                             
                             	; Check if font copy needed to 0xb400
ccd3 : a9b4             [ 2] 	lda #hi(TEXTCHAR)
ccd5 : 206dcc           [ 6] 	jsr gr_check_font_copy
                             
                             	; Initialise geom for text
ccd8 : a20d             [ 2] 	ldx #gr_scrngeom_text-gr_scrngeom_base
ccda : 2085cc           [ 6] 	jsr gr_init_geom
                             
ccdd : 2024d2           [ 6] 	jsr gr_spr_init					; SW Sprites are reset
                             
cce0 : a920             [ 2] 	lda #' '						; Blank is SPACE
cce2 : 8510             [ 3] 	sta vdp_blank
cce4 : 2069cd           [ 6] 	jsr gr_cls
                             
cce7 : c60d             [ 5] 	dec vdp_curoff
                             
cce9 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* gr_init_hires
                             ;* Input : X = Colour table fill value
                             ;* initialise the screen in hires mode
                             ;****************************************
ccea :                       gr_init_hires
ccea : e60d             [ 5] 	inc vdp_curoff
                             	; Check if font copy needed to 0x9800
ccec : a998             [ 2] 	lda #hi(HICHAR)
ccee : 206dcc           [ 6] 	jsr gr_check_font_copy
                             
                             	; Initialise geom for hires
ccf1 : a220             [ 2] 	ldx #gr_scrngeom_hires-gr_scrngeom_base
ccf3 : 2085cc           [ 6] 	jsr gr_init_geom
                             
ccf6 : a920             [ 2] 	lda #' '						; Blank is SPACE
ccf8 : 8510             [ 3] 	sta vdp_blank
ccfa : 2069cd           [ 6] 	jsr gr_cls
                             
                             	; Zero out hires area 0xa000 for 8000 (0x1f40) b
ccfd : a900             [ 2] 	lda #lo(HISCRN)
AS65 Assembler for R6502 [1.42].                                     Page   97
-------------------------------- bank\bank0.s --------------------------------

ccff : 8532             [ 3] 	sta tmp_alo
cd01 : a9a0             [ 2] 	lda #hi(HISCRN)
cd03 : 8533             [ 3] 	sta tmp_ahi
cd05 : a940             [ 2] 	lda #0x40						; Set bit 6
cd07 : a000             [ 2] 	ldy #0
cd09 : a200             [ 2] 	ldx #0
cd0b :                       vdp_fill_vram_loop
cd0b : 9132             [ 5] 	sta (tmp_alo),y
cd0d : c8               [ 2] 	iny
cd0e : d003             [ 3] 	bne vdp_fill_vram_noinc
cd10 : e633             [ 5] 	inc tmp_ahi
cd12 : e8               [ 2] 	inx
cd13 :                       vdp_fill_vram_noinc
cd13 : e01f             [ 2] 	cpx #hi(0x1f40)			; Reached page count?
cd15 : d0f4             [ 3] 	bne vdp_fill_vram_loop
cd17 : c040             [ 2] 	cpy #lo(0x1f40)			; Reached byte in page?
cd19 : d0f0             [ 3] 	bne vdp_fill_vram_loop
                             
                             	; Set hires attribute in the magic location
cd1b : a91e             [ 2] 	lda #30			; Hires attribute
cd1d : 8ddfbf           [ 4] 	sta 0xbfdf		; Last pos of screen memory
                             
cd20 : c60d             [ 5] 	dec vdp_curoff
cd22 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* gr_init_hires_tables
                             ;* Generate the hires tables
                             ;* Do this whilst in hires mode
                             ;****************************************
cd23 :                       gr_init_hires_tables
                             	; Initialise address pointer to start of high re
cd23 : a900             [ 2] 	lda #lo(HISCRN)
cd25 : 8532             [ 3] 	sta tmp_alo
cd27 : a9a0             [ 2] 	lda #hi(HISCRN)
cd29 : 8533             [ 3] 	sta tmp_ahi
                             	; Starting from row zero, do 200 rows
cd2b : a000             [ 2] 	ldy #0
cd2d :                       gr_init_tab_row
                             	; Save low and high bytes of screen address in t
cd2d : a532             [ 3] 	lda tmp_alo
cd2f : 99009c           [ 5] 	sta hires_row_low,y
cd32 : a533             [ 3] 	lda tmp_ahi
cd34 : 99c89c           [ 5] 	sta hires_row_hi,y
                             	; add 40 ready for next row
cd37 : 18               [ 2] 	clc
cd38 : a532             [ 3] 	lda tmp_alo
cd3a : 6928             [ 2] 	adc #40
cd3c : 8532             [ 3] 	sta tmp_alo
cd3e : a533             [ 3] 	lda tmp_ahi
cd40 : 6900             [ 2] 	adc #0
cd42 : 8533             [ 3] 	sta tmp_ahi
                             	; Max 200 rows
cd44 : c8               [ 2] 	iny
cd45 : c0c8             [ 2] 	cpy #200
cd47 : d0e4             [ 3] 	bne gr_init_tab_row
                             	; From column 0, do 240 columns
                             	; Mask starts at 0x20, when shifts to 0 then
                             	; the column increments
cd49 : a920             [ 2] 	lda #0x20
cd4b : 8534             [ 3] 	sta tmp_blo			; Pixel mask
cd4d : a200             [ 2] 	ldx #0				; Pixel column
AS65 Assembler for R6502 [1.42].                                     Page   98
-------------------------------- bank\bank0.s --------------------------------

cd4f : a000             [ 2] 	ldy #0				; Byte column
cd51 :                       gr_init_tab_col
                             	; Save current mask and column
cd51 : a534             [ 3] 	lda tmp_blo
cd53 : 9d809e           [ 5] 	sta hires_mask,x
cd56 : 98               [ 2] 	tya
cd57 : 9d909d           [ 5] 	sta hires_col,x
                             	; shift mask, if zero then increment col and res
cd5a : 4634             [ 5] 	lsr tmp_blo
cd5c : d005             [ 3] 	bne gr_init_tab_col_skip
cd5e : a920             [ 2] 	lda #0x20
cd60 : 8534             [ 3] 	sta tmp_blo
cd62 : c8               [ 2] 	iny
cd63 :                       gr_init_tab_col_skip
cd63 : e8               [ 2] 	inx
cd64 : e0f0             [ 2] 	cpx #240
cd66 : d0e9             [ 3] 	bne gr_init_tab_col
cd68 : 60               [ 6] 	rts
                             
                             
                             
                             ;****************************************
                             ;* gr_cls
                             ;* Clear the text screen
                             ;****************************************
cd69 :                       gr_cls
cd69 : e60d             [ 5] 	inc vdp_curoff
                             	; Set screen address for text mode
cd6b : a516             [ 3] 	lda gr_scrngeom+gr_text_start
cd6d : 8527             [ 3] 	sta gr_scrngeom+gr_geom_tmp
cd6f : a517             [ 3] 	lda gr_scrngeom+gr_text_start+1
cd71 : 8528             [ 3] 	sta gr_scrngeom+gr_geom_tmp+1
                             
cd73 : a61b             [ 3] 	ldx gr_scrngeom+gr_text_h		; Count of rows to cl
                             
                             	; X and Y count bytes to fill
cd75 :                       gr_cls_row
cd75 : a000             [ 2] 	ldy #0							; Count of columns
cd77 : a526             [ 3] 	lda gr_scrngeom+gr_margin		; Is there a margin?
cd79 : f00a             [ 3] 	beq gr_cls_skip_marg
cd7b : a525             [ 3] 	lda gr_scrngeom+gr_paper		; Set Paper
cd7d : 9127             [ 5] 	sta (gr_scrngeom+gr_geom_tmp),y
cd7f : c8               [ 2] 	iny
cd80 : a524             [ 3] 	lda gr_scrngeom+gr_ink			; Set Ink
cd82 : 9127             [ 5] 	sta (gr_scrngeom+gr_geom_tmp),y
cd84 : c8               [ 2] 	iny
cd85 :                       gr_cls_skip_marg
cd85 : a510             [ 3] 	lda vdp_blank
cd87 : 850f             [ 3] 	sta vdp_curval					; Under cursor is also blank
cd89 :                       gr_cls_col
cd89 : 9127             [ 5] 	sta (gr_scrngeom+gr_geom_tmp),y
cd8b : c8               [ 2] 	iny
cd8c : c41a             [ 3] 	cpy gr_scrngeom+gr_text_w		; Done all columns?
cd8e : d0f9             [ 3] 	bne gr_cls_col
                             	; Update pointer
cd90 : 18               [ 2] 	clc
cd91 : a527             [ 3] 	lda gr_scrngeom+gr_geom_tmp
cd93 : 651a             [ 3] 	adc gr_scrngeom+gr_text_w
cd95 : 8527             [ 3] 	sta gr_scrngeom+gr_geom_tmp
cd97 : a528             [ 3] 	lda gr_scrngeom+gr_geom_tmp+1
cd99 : 6900             [ 2] 	adc #0
cd9b : 8528             [ 3] 	sta gr_scrngeom+gr_geom_tmp+1
AS65 Assembler for R6502 [1.42].                                     Page   99
-------------------------------- bank\bank0.s --------------------------------

cd9d : ca               [ 2] 	dex								; 1 row done
cd9e : d0d5             [ 3] 	bne gr_cls_row					; Done all rows?
                             
                             	; set cursror position to top left
cda0 : a510             [ 3] 	lda vdp_blank
cda2 : 850f             [ 3] 	sta vdp_curval
cda4 : a626             [ 3] 	ldx gr_scrngeom+gr_margin
cda6 : a000             [ 2] 	ldy #0
cda8 : 38               [ 2] 	sec								; Init mode
cda9 : 20d9cd           [ 6] 	jsr gr_set_cur_init
                             
cdac : c60d             [ 5] 	dec vdp_curoff
                             
cdae : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* gr_getXY_base
                             ;* Get base screen address using Y coord only
                             ;* Input : X = y coord
                             ;* Output :	gr_geom_tmp updated with base
                             ;* Regs affected : A
                             ;****************************************
cdaf :                       gr_getXY_base
                             	; Find y offset using **X register**
cdaf : 18               [ 2] 	clc
cdb0 : bdecd1           [ 4] 	lda gr_offset_40lo,x
cdb3 : 6516             [ 3] 	adc gr_scrngeom+gr_text_start
cdb5 : 8527             [ 3] 	sta gr_scrngeom+gr_geom_tmp
cdb7 : bd08d2           [ 4] 	lda gr_offset_40hi,x
cdba : 6517             [ 3] 	adc gr_scrngeom+gr_text_start+1
cdbc : 8528             [ 3] 	sta gr_scrngeom+gr_geom_tmp+1
                             
                             	; A = high byte of base address
cdbe : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* gr_plot
                             ;* Write a byte in the screen pos
                             ;* Input :	Y,X = coord, A = Byte to put
                             ;*			X = Y COORDINATE
                             ;*			Y = X COORDINATE!!
                             ;* Output : None
                             ;* Regs affected : All
                             ;****************************************
cdbf :                       gr_plot
cdbf : 48               [ 3] 	pha					; Save byte to put
cdc0 : 20afcd           [ 6] 	jsr gr_getXY_base	; base addre
cdc3 : 68               [ 4] 	pla					; Get byte to put
cdc4 : 9127             [ 5] 	sta (gr_scrngeom+gr_geom_tmp),y
cdc6 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* gr_put
                             ;* Write a byte in the current cursor position
                             ;* Input : A = Byte to put
                             ;* Output : None
                             ;* Regs affected : All
                             ;****************************************
cdc7 :                       gr_put
cdc7 : e60d             [ 5] 	inc vdp_curoff		; Disable cusror
cdc9 : 850f             [ 3] 	sta vdp_curval		; Update cursor value
                             	; Base address plus X offset
AS65 Assembler for R6502 [1.42].                                     Page  100
-------------------------------- bank\bank0.s --------------------------------

cdcb : a41c             [ 3] 	ldy gr_scrngeom+gr_cur_x
cdcd : 911e             [ 5] 	sta (gr_scrngeom+gr_cur_ptr),y
cdcf : c60d             [ 5] 	dec vdp_curoff		; Allow cursor flashing
cdd1 : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* gr_get
                             ;* Get the byte in the screen pos
                             ;* Input : Y,X = coord (**Y = X coordinate!!)
                             ;* Output : X,Y = address, A = peeked byte
                             ;* Regs affected : All
                             ;****************************************
cdd2 :                       gr_get
cdd2 : 20afcd           [ 6] 	jsr gr_getXY_base	; Base address
cdd5 : b127             [ 5] 	lda (gr_scrngeom+gr_geom_tmp),y
cdd7 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* gr_set_cur
                             ;* Set the cursor position
                             ;* Input : X, Y = position
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
cdd8 :                       gr_set_cur
cdd8 : 18               [ 2] 	clc
cdd9 :                       gr_set_cur_init
cdd9 : e60d             [ 5] 	inc vdp_curoff				; Disable cursor
                             
cddb : b00e             [ 3] 	bcs gr_set_cur_skip			; Skip restore if C=1
cddd : 8632             [ 3] 	stx tmp_alo
cddf : 8433             [ 3] 	sty tmp_ahi
                             	; First restore what is under the cursor
                             	; in case cursor is ON
cde1 : 8427             [ 3] 	sty gr_scrngeom+gr_geom_tmp
cde3 : a50f             [ 3] 	lda vdp_curval
cde5 : a41c             [ 3] 	ldy gr_scrngeom+gr_cur_x
cde7 : 911e             [ 5] 	sta (gr_scrngeom+gr_cur_ptr),y
cde9 : a427             [ 3] 	ldy gr_scrngeom+gr_geom_tmp
cdeb :                       gr_set_cur_skip
                             	; Save new cursor position
cdeb : 861c             [ 3] 	stx gr_scrngeom+gr_cur_x
cded : 841d             [ 3] 	sty gr_scrngeom+gr_cur_y
                             
                             	; Now calculate the new cursor vram address
cdef : a61d             [ 3] 	ldx gr_scrngeom+gr_cur_y
cdf1 : 20afcd           [ 6] 	jsr gr_getXY_base
                             	; Update pointer in tmp, A already has high byte
cdf4 : 851f             [ 3] 	sta gr_scrngeom+gr_cur_ptr+1
cdf6 : a527             [ 3] 	lda gr_scrngeom+gr_geom_tmp
cdf8 : 851e             [ 3] 	sta gr_scrngeom+gr_cur_ptr
                             	; Read screen at this position, offset with X co
cdfa : a41c             [ 3] 	ldy gr_scrngeom+gr_cur_x
cdfc : b11e             [ 5] 	lda (gr_scrngeom+gr_cur_ptr),y
cdfe : 850f             [ 3] 	sta vdp_curval
                             	; Reset cursor so it's visible
ce00 : a900             [ 2] 	lda #0
ce02 : 850e             [ 3] 	sta vdp_curstat
ce04 : a901             [ 2] 	lda #1
ce06 : 850c             [ 3] 	sta vdp_curcnt
                             
AS65 Assembler for R6502 [1.42].                                     Page  101
-------------------------------- bank\bank0.s --------------------------------

ce08 : c60d             [ 5] 	dec vdp_curoff
                             
ce0a : 60               [ 6] 	rts
                             
                             
                             
                             ;****************************************
                             ;* gr_scroll_up
                             ;* Scroll screen one line up
                             ;****************************************
ce0b :                       gr_scroll_up
ce0b : e60d             [ 5] 	inc vdp_curoff
                             
                             	; Set source in a and dest in b
                             	; b is first line, source is second
ce0d : 18               [ 2] 	clc
ce0e : a516             [ 3] 	lda gr_scrngeom+gr_text_start
ce10 : 8534             [ 3] 	sta tmp_blo
ce12 : 651a             [ 3] 	adc gr_scrngeom+gr_text_w
ce14 : 8532             [ 3] 	sta tmp_alo
ce16 : a517             [ 3] 	lda gr_scrngeom+gr_text_start+1
ce18 : 8535             [ 3] 	sta tmp_bhi
ce1a : 6900             [ 2] 	adc #0
ce1c : 8533             [ 3] 	sta tmp_ahi
                             
                             	; Restore what was underneath cursor
ce1e : a50f             [ 3] 	lda vdp_curval
ce20 : a41c             [ 3] 	ldy gr_scrngeom+gr_cur_x
ce22 : 911e             [ 5] 	sta (gr_scrngeom+gr_cur_ptr),y
                             
                             	; x = lines to scroll (1 less than screen height
ce24 : a61b             [ 3] 	ldx gr_scrngeom+gr_text_h
ce26 : ca               [ 2] 	dex
                             
ce27 :                       gr_scroll_cpy_ln
                             	; Start from right hand edge (easier)
ce27 : a41a             [ 3] 	ldy gr_scrngeom+gr_text_w
ce29 : 88               [ 2] 	dey
ce2a :                       gr_scroll_char
                             	; get char from source and copy to dest
ce2a : b132             [ 5] 	lda (tmp_alo),y
ce2c : 9134             [ 5] 	sta (tmp_blo),y
ce2e : 88               [ 2] 	dey
ce2f : 10f9             [ 3] 	bpl gr_scroll_char
                             
                             	; Update source address
ce31 : 18               [ 2] 	clc
ce32 : a532             [ 3] 	lda tmp_alo
ce34 : 651a             [ 3] 	adc gr_scrngeom+gr_text_w
ce36 : 8532             [ 3] 	sta tmp_alo
ce38 : a533             [ 3] 	lda tmp_ahi
ce3a : 6900             [ 2] 	adc #0
ce3c : 8533             [ 3] 	sta tmp_ahi
                             	; Update destination address
ce3e : 18               [ 2] 	clc
ce3f : a534             [ 3] 	lda tmp_blo
ce41 : 651a             [ 3] 	adc gr_scrngeom+gr_text_w
ce43 : 8534             [ 3] 	sta tmp_blo
ce45 : a535             [ 3] 	lda tmp_bhi
ce47 : 6900             [ 2] 	adc #0
ce49 : 8535             [ 3] 	sta tmp_bhi
                             
AS65 Assembler for R6502 [1.42].                                     Page  102
-------------------------------- bank\bank0.s --------------------------------

                             	; One line complete
ce4b : ca               [ 2] 	dex
ce4c : d0d9             [ 3] 	bne gr_scroll_cpy_ln
                             
                             	; Source is pointing at last line
                             	; Last line needs filling
ce4e : a000             [ 2] 	ldy #0							; Start from left
ce50 : a526             [ 3] 	lda gr_scrngeom+gr_margin		; Margin?
ce52 : f00a             [ 3] 	beq gr_scroll_marg				; Skip if not
ce54 : a525             [ 3] 	lda gr_scrngeom+gr_paper		; Set Paper
ce56 : 9127             [ 5] 	sta (gr_scrngeom+gr_geom_tmp),y
ce58 : c8               [ 2] 	iny
ce59 : a524             [ 3] 	lda gr_scrngeom+gr_ink			; Set Ink
ce5b : 9127             [ 5] 	sta (gr_scrngeom+gr_geom_tmp),y
ce5d : c8               [ 2] 	iny
ce5e :                       gr_scroll_marg
                             	; Needs to be filled with blank
ce5e : a510             [ 3] 	lda vdp_blank
ce60 : 850f             [ 3] 	sta vdp_curval			; Also this is the cursor value
ce62 :                       gr_scroll_erase_ln
ce62 : 9134             [ 5] 	sta (tmp_blo),y
ce64 : c8               [ 2] 	iny
ce65 : c41a             [ 3] 	cpy gr_scrngeom+gr_text_w
ce67 : d0f9             [ 3] 	bne gr_scroll_erase_ln
                             
ce69 : c60d             [ 5] 	dec vdp_curoff
                             
ce6b : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* gr_new_ln
                             ;* Carry out a new line
                             ;* Input : None
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
ce6c :                       gr_new_ln
                             	; X pos is zero, Y needs to increment
ce6c : a626             [ 3] 	ldx gr_scrngeom+gr_margin
ce6e : a41d             [ 3] 	ldy gr_scrngeom+gr_cur_y
ce70 : c8               [ 2] 	iny
ce71 : c41b             [ 3] 	cpy gr_scrngeom+gr_text_h
ce73 : d00c             [ 3] 	bne gr_nl_skip_nl
                             	; If got here then screen needs to scroll
                             	; Common routine also used by cursor right
ce75 :                       gr_scroll_routine
ce75 : 88               [ 2] 	dey
ce76 : 8a               [ 2] 	txa
ce77 : 48               [ 3] 	pha
ce78 : 98               [ 2] 	tya
ce79 : 48               [ 3] 	pha
ce7a : 200bce           [ 6] 	jsr gr_scroll_up
ce7d : 68               [ 4] 	pla
ce7e : a8               [ 2] 	tay
ce7f : 68               [ 4] 	pla
ce80 : aa               [ 2] 	tax
ce81 :                       gr_nl_skip_nl
ce81 : 4cd8cd           [ 3] 	jmp gr_set_cur
                             
                             
                             ;****************************************
                             ;* gr_cur_right
AS65 Assembler for R6502 [1.42].                                     Page  103
-------------------------------- bank\bank0.s --------------------------------

                             ;* Advance cursor position
                             ;* Input : None
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
ce84 :                       gr_cur_right
                             	; Load cursor x,y position
ce84 : a61c             [ 3] 	ldx gr_scrngeom+gr_cur_x
ce86 : a41d             [ 3] 	ldy gr_scrngeom+gr_cur_y
                             
                             	; Move cursor right
ce88 : e8               [ 2] 	inx
                             	; Check if reached past edge of line
ce89 : e41a             [ 3] 	cpx gr_scrngeom+gr_text_w
ce8b : d0f4             [ 3] 	bne gr_nl_skip_nl
                             	; If got here then wrap to next line
ce8d : a626             [ 3] 	ldx gr_scrngeom+gr_margin
ce8f : c8               [ 2] 	iny
ce90 : c41b             [ 3] 	cpy gr_scrngeom+gr_text_h
ce92 : f0e1             [ 3] 	beq gr_scroll_routine		; Common scroll routine
ce94 : d0eb             [ 3] 	bne gr_nl_skip_nl			; Common set cursor
                             
                             ;****************************************
                             ;* gr_cur_left
                             ;* Advance cursor left
                             ;* Input : None
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
ce96 :                       gr_cur_left
                             	; Load cursor x,y position, load X last to check
ce96 : a41d             [ 3] 	ldy gr_scrngeom+gr_cur_y
ce98 : a61c             [ 3] 	ldx gr_scrngeom+gr_cur_x
                             
                             	; Decrement screen pointer
                             	; Move cursor left
ce9a : e426             [ 3] 	cpx gr_scrngeom+gr_margin	; Already at left marg
ce9c : d007             [ 3] 	bne gr_cur_skip_at_left		; No, then just go left
ce9e : c000             [ 2] 	cpy #0						; Else check if can wrap up
cea0 : f007             [ 3] 	beq gr_cur_skip_at_tl
cea2 : 88               [ 2] 	dey
cea3 : a61a             [ 3] 	ldx gr_scrngeom+gr_text_w
cea5 :                       gr_cur_skip_at_left
cea5 : ca               [ 2] 	dex
cea6 : 4cd8cd           [ 3] 	jmp gr_set_cur
                             
cea9 :                       gr_cur_skip_at_tl
cea9 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* gr_cur_up
                             ;* Advance cursor up
                             ;* Input : None
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
ceaa :                       gr_cur_up
                             	; Load cursor x,y position, load Y last to check
ceaa : a61c             [ 3] 	ldx gr_scrngeom+gr_cur_x
ceac : a41d             [ 3] 	ldy gr_scrngeom+gr_cur_y
                             	; if y==0 then don't do anything
ceae : f0f9             [ 3] 	beq gr_cur_skip_at_tl	; Just somewhere with an r
AS65 Assembler for R6502 [1.42].                                     Page  104
-------------------------------- bank\bank0.s --------------------------------

ceb0 : 88               [ 2] 	dey
ceb1 : 4cd8cd           [ 3] 	jmp gr_set_cur
                             
                             ;****************************************
                             ;* gr_cur_down
                             ;* Advance cursor down
                             ;* Input : None
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
ceb4 :                       gr_cur_down
                             	; Load cursor x,y position
ceb4 : a61c             [ 3] 	ldx gr_scrngeom+gr_cur_x
ceb6 : a41d             [ 3] 	ldy gr_scrngeom+gr_cur_y
ceb8 : c8               [ 2] 	iny
                             	; If already at  bottom then don't do anything
ceb9 : c41b             [ 3] 	cpy gr_scrngeom+gr_text_h			
cebb : f0ec             [ 3] 	beq gr_cur_skip_at_tl				; Just somewhere with a
cebd : 20d8cd           [ 6] 	jsr gr_set_cur
                             
cec0 :                       gr_cur_skip_at_bot
cec0 : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* gr_del
                             ;* Action del
                             ;* Input : None
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
cec1 :                       gr_del
cec1 : 2096ce           [ 6] 	jsr gr_cur_left
cec4 : a920             [ 2] 	lda #' '							; Put a space
cec6 : 4cc7cd           [ 3] 	jmp gr_put
                             
                             ;****************************************
                             ;* gr_get_key
                             ;* Waits for a key press, C=1 synchronous
                             ;* A = Key code, C=0 means valid code
                             ;****************************************
cec9 :                       gr_get_key
                             	; save X,Y but A is ok to trample
cec9 : 8a               [ 2] 	txa
ceca : 48               [ 3] 	pha
cecb : 98               [ 2] 	tya
cecc : 48               [ 3] 	pha
cecd :                       gr_get_key_2
cecd : 08               [ 3] 	php
cece : 2079c8           [ 6] 	jsr kb_get_key
ced1 : 9006             [ 3] 	bcc gr_key_check_key
ced3 : 28               [ 4] 	plp									; Get async pref
ced4 : b0f7             [ 3] 	bcs	gr_get_key_2					; Keep checking if sync
ced6 : 38               [ 2] 	sec
ced7 : b019             [ 3] 	bcs gr_key_tidy_up					; Finish if not
ced9 :                       gr_key_check_key						; Check the key pressed
ced9 : c901             [ 2] 	cmp #UTF_ACK						; Copy key pressed?
cedb : d004             [ 3] 	bne gr_key_skip_copy
cedd : a50f             [ 3] 	lda vdp_curval						; If yes the get char under 
cedf : b00f             [ 3] 	bcs gr_key_got_key					; Always branches (n=1, c
cee1 :                       gr_key_skip_copy
cee1 : c914             [ 2] 	cmp #CTRL_CAPS
AS65 Assembler for R6502 [1.42].                                     Page  105
-------------------------------- bank\bank0.s --------------------------------

cee3 : d00b             [ 3] 	bne gr_key_got_key
cee5 : a52c             [ 3] 	lda kb_stat							; Toggle caps bit
cee7 : 4901             [ 2] 	eor #KB_CAPSLK
cee9 : 852c             [ 3] 	sta kb_stat
ceeb : 28               [ 4] 	plp									; Get back synchronous pref
ceec : b0df             [ 3] 	bcs gr_get_key_2					; And check again for sync
ceee : 900b             [ 3] 	bcc gr_key_no_key					; Else no key
cef0 :                       gr_key_got_key
cef0 : 28               [ 4] 	plp
cef1 : 18               [ 2] 	clc									; Ensure C=0 for valid key
cef2 :                       gr_key_tidy_up
                             	; restore X,Y but don't lose A
cef2 : 8538             [ 3] 	sta tmp_d
cef4 : 68               [ 4] 	pla
cef5 : a8               [ 2] 	tay
cef6 : 68               [ 4] 	pla
cef7 : aa               [ 2] 	tax
cef8 : a538             [ 3] 	lda tmp_d
cefa : 60               [ 6] 	rts
cefb :                       gr_key_no_key
cefb : 28               [ 4] 	plp
cefc : 38               [ 2] 	sec									; Ensure C=1 for invalid key
cefd : b0f3             [ 3] 	bcs gr_key_tidy_up					; Always branches
                             
                             ;****************************************
                             ;* gr_put_byte
                             ;* Put a byte out
                             ;* Input : A = Byte to put
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
ceff :                       gr_put_byte
                             	_pushAXY
                             
cf08 : 2011cf           [ 6] 	jsr gr_put_byte_low
                             	_pullAXY
                             
cf10 :                       gr_no_special
cf10 : 60               [ 6] 	rts
                             
cf11 :                       gr_put_byte_low
cf11 : c97f             [ 2] 	cmp #UTF_DEL			; Del key
cf13 : f004             [ 3] 	beq gr_process_special
cf15 : c920             [ 2] 	cmp #32					; Special char?
cf17 : b01b             [ 3] 	bcs gr_printable		; >=32 == carry clear
cf19 :                       gr_process_special
                             	; Else find special behaviour to do
cf19 : a2ff             [ 2] 	ldx #-1
cf1b : 8532             [ 3] 	sta tmp_alo
cf1d :                       gr_special_loop
cf1d : e8               [ 2] 	inx
cf1e : bd3acf           [ 4] 	lda gr_special_ch,x
cf21 : f0ed             [ 3] 	beq gr_no_special		; Somewhere with an rts!
cf23 : c532             [ 3] 	cmp tmp_alo
cf25 : d0f6             [ 3] 	bne gr_special_loop
cf27 : bd43cf           [ 4] 	lda gr_special_fn_lo,x
cf2a : 8532             [ 3] 	sta tmp_alo
cf2c : bd4bcf           [ 4] 	lda gr_special_fn_hi,x
cf2f : 8533             [ 3] 	sta tmp_ahi
cf31 : 6c3200           [ 6] 	jmp (tmp_alo)
                             
                             	;	Normal caracter processing here.
AS65 Assembler for R6502 [1.42].                                     Page  106
-------------------------------- bank\bank0.s --------------------------------

cf34 :                       gr_printable
                             	; Place in current position and move right
cf34 : 20c7cd           [ 6] 	jsr gr_put
cf37 : 4c84ce           [ 3] 	jmp gr_cur_right
                             
cf3a :                       gr_special_ch
cf3a : 0d                    	db UTF_CR
cf3b : 7f                    	db UTF_DEL
cf3c : 08                    	db CRSR_LEFT
cf3d : 09                    	db CRSR_RIGHT
cf3e : 0b                    	db CRSR_UP
cf3f : 0a                    	db CRSR_DOWN
cf40 : 0c                    	db UTF_FF
cf41 : 07                    	db UTF_BEL
cf42 : 00                    	db 0
                             
cf43 :                       gr_special_fn_lo
cf43 : 6c                    	db lo(gr_new_ln)
cf44 : c1                    	db lo(gr_del)
cf45 : 96                    	db lo(gr_cur_left)
cf46 : 84                    	db lo(gr_cur_right)
cf47 : aa                    	db lo(gr_cur_up)
cf48 : b4                    	db lo(gr_cur_down)
cf49 : 69                    	db lo(gr_cls)
cf4a : 02                    	db lo(init_snd)
                             
cf4b :                       gr_special_fn_hi
cf4b : ce                    	db hi(gr_new_ln)
cf4c : ce                    	db hi(gr_del)
cf4d : ce                    	db hi(gr_cur_left)
cf4e : ce                    	db hi(gr_cur_right)
cf4f : ce                    	db hi(gr_cur_up)
cf50 : ce                    	db hi(gr_cur_down)
cf51 : cd                    	db hi(gr_cls)
cf52 : d4                    	db hi(init_snd)
                             
                             ; Special command to print to the screen
                             ; Y,A=Message, zero terminated
cf53 :                       gr_print_msg
cf53 : 8449             [ 3] 	sty num_tmp
cf55 : 854a             [ 3] 	sta num_tmp+1
cf57 : a000             [ 2] 	ldy #0
cf59 :                       gr_print_msg_loop
cf59 : b149             [ 5] 	lda (num_tmp),y
cf5b : f006             [ 3] 	beq gr_print_msg_done
cf5d : 20ffce           [ 6] 	jsr gr_put_byte
cf60 : c8               [ 2] 	iny
cf61 : d0f6             [ 3] 	bne gr_print_msg_loop
cf63 :                       gr_print_msg_done
cf63 : a54a             [ 3] 	lda num_tmp+1
cf65 : a449             [ 3] 	ldy num_tmp
cf67 : 60               [ 6] 	rts
                             
                             ;******* HIRES STUFF *****
                             
                             ;****************************************
                             ;* gr_fill
                             ;* Fill bytes X,Y coordinates with char code A
                             ;* Input : X,Y = coord, A = Char code
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
AS65 Assembler for R6502 [1.42].                                     Page  107
-------------------------------- bank\bank0.s --------------------------------

                             
                             ;****************************************
                             ;* gr_hchar
                             ;* Plot character to hires X,Y coordinates with c
                             ;* Input : X,Y = coord, A = Char code
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
cf68 :                       gr_hchar
                             	; Multiply char code by 8
                             	; and add to char font base
                             	; tmp_clo contains base address
cf68 : 0a               [ 2] 	asl a
cf69 : 2637             [ 5] 	rol tmp_chi
cf6b : 0a               [ 2] 	asl a
cf6c : 2637             [ 5] 	rol tmp_chi
cf6e : 0a               [ 2] 	asl a
cf6f : 2637             [ 5] 	rol tmp_chi
cf71 : 18               [ 2] 	clc
cf72 : 6514             [ 3] 	adc gr_scrngeom+gr_char
cf74 : 8536             [ 3] 	sta tmp_clo
cf76 : a537             [ 3] 	lda tmp_chi
cf78 : 2907             [ 2] 	and #7
cf7a : 6515             [ 3] 	adc gr_scrngeom+gr_char+1
cf7c : 8537             [ 3] 	sta tmp_chi
                             
                             	; Set up destination position
cf7e : 200ed0           [ 6] 	jsr gr_point_setup
                             	; tmp_alo contains address including column offs
cf81 : 18               [ 2] 	clc
cf82 : 98               [ 2] 	tya
cf83 : 6532             [ 3] 	adc tmp_alo
cf85 : 8532             [ 3] 	sta tmp_alo
cf87 : a533             [ 3] 	lda tmp_ahi
cf89 : 6900             [ 2] 	adc #0
cf8b : 8533             [ 3] 	sta tmp_ahi
                             
cf8d : a534             [ 3] 	lda tmp_blo					; Get the mask
cf8f : a207             [ 2] 	ldx #7
cf91 :                       gr_hchar_mask					; Calculate how many shifts to 
cf91 : ca               [ 2] 	dex
cf92 : 4a               [ 2] 	lsr a
cf93 : d0fc             [ 3] 	bne gr_hchar_mask
cf95 : 8634             [ 3] 	stx tmp_blo					; number between 1 and 6 : shift
                             
                             	; copy font bytes and shift the required number 
                             	; go from bottom to top as data gets stored on t
cf97 : a007             [ 2] 	ldy #7
cf99 :                       gr_hchar_getfont
cf99 : b136             [ 5] 	lda (tmp_clo),y
cf9b : 853d             [ 3] 	sta ztmp_24
cf9d : a900             [ 2] 	lda #0
cf9f : 853e             [ 3] 	sta ztmp_24+1
                             
                             	; shift right number of times
cfa1 : a634             [ 3] 	ldx tmp_blo
cfa3 :                       gr_hchar_rot1bit
cfa3 : ca               [ 2] 	dex
cfa4 : f00d             [ 3] 	beq gr_hchar_rot1bit_nx
cfa6 : 463d             [ 5] 	lsr ztmp_24					; Rotate left hand side
cfa8 : a53e             [ 3] 	lda ztmp_24+1				; Rotate right hand side
cfaa : 9002             [ 3] 	bcc gr_hchar_rot1bit_bcc
AS65 Assembler for R6502 [1.42].                                     Page  108
-------------------------------- bank\bank0.s --------------------------------

cfac : 0940             [ 2] 	ora #0x40					; account for 6 bits per byte
cfae :                       gr_hchar_rot1bit_bcc
cfae : 4a               [ 2] 	lsr a
cfaf : 853e             [ 3] 	sta ztmp_24+1
cfb1 : 10f0             [ 3] 	bpl gr_hchar_rot1bit		; Always as lsr sets N=0
cfb3 :                       gr_hchar_rot1bit_nx
cfb3 : a53e             [ 3] 	lda ztmp_24+1				; Get RHS
cfb5 : 48               [ 3] 	pha							; Push RHS on to stack
cfb6 : a53d             [ 3] 	lda ztmp_24					; Get LHS
cfb8 : 48               [ 3] 	pha							; Push that too - LH gets pulled first
cfb9 : 88               [ 2] 	dey							; Bottom to to lines
cfba : 10dd             [ 3] 	bpl gr_hchar_getfont
                             
                             	; Now copy shift source to destination, accounti
cfbc : a200             [ 2] 	ldx #0
cfbe :                       gr_hchar_copyline
cfbe : a420             [ 3] 	ldy gr_scrngeom+gr_pixmode	; Mode determines how
cfc0 : f024             [ 3] 	beq gr_hchar_copyline_0
cfc2 : c002             [ 2] 	cpy #2
cfc4 : f010             [ 3] 	beq gr_hchar_copyline_2
                             
                             	; Mode = 1 : OR
cfc6 : a000             [ 2] 	ldy #0						; Get lh side source
cfc8 : 68               [ 4] 	pla
cfc9 : 1132             [ 5] 	ora (tmp_alo),y
cfcb : 9132             [ 5] 	sta (tmp_alo),y
cfcd : c8               [ 2] 	iny							; Get rh side source
cfce : 68               [ 4] 	pla
cfcf : 1132             [ 5] 	ora (tmp_alo),y
cfd1 : 9132             [ 5] 	sta (tmp_alo),y
cfd3 : 4cfbcf           [ 3] 	jmp gr_hchar_copyline_nx
cfd6 :                       gr_hchar_copyline_2
                             	; Mode = 2 : EOR
cfd6 : a000             [ 2] 	ldy #0						; Get lh side source
cfd8 : 68               [ 4] 	pla
cfd9 : 5132             [ 5] 	eor (tmp_alo),y
cfdb : 9132             [ 5] 	sta (tmp_alo),y
cfdd : c8               [ 2] 	iny							; Get rh side source
cfde : 68               [ 4] 	pla
cfdf : 5132             [ 5] 	eor (tmp_alo),y
cfe1 : 9132             [ 5] 	sta (tmp_alo),y
cfe3 : 4cfbcf           [ 3] 	jmp gr_hchar_copyline_nx
cfe6 :                       gr_hchar_copyline_0
                             	; Mode = 0 : erase
cfe6 : a000             [ 2] 	ldy #0						; Get lh side source
cfe8 : 68               [ 4] 	pla
cfe9 : 853d             [ 3] 	sta ztmp_24
cfeb : 1132             [ 5] 	ora (tmp_alo),y
cfed : 453d             [ 3] 	eor ztmp_24
cfef : 9132             [ 5] 	sta (tmp_alo),y
cff1 : c8               [ 2] 	iny							; Get rh side source
cff2 : 68               [ 4] 	pla
cff3 : 853d             [ 3] 	sta ztmp_24
cff5 : 1132             [ 5] 	ora (tmp_alo),y
cff7 : 453d             [ 3] 	eor ztmp_24
cff9 : 9132             [ 5] 	sta (tmp_alo),y
cffb :                       gr_hchar_copyline_nx
cffb : 18               [ 2] 	clc							; Next address
cffc : a532             [ 3] 	lda tmp_alo
cffe : 6928             [ 2] 	adc #40
d000 : 8532             [ 3] 	sta tmp_alo
d002 : a533             [ 3] 	lda tmp_alo+1
AS65 Assembler for R6502 [1.42].                                     Page  109
-------------------------------- bank\bank0.s --------------------------------

d004 : 6900             [ 2] 	adc #0
d006 : 8533             [ 3] 	sta tmp_alo+1
d008 : e8               [ 2] 	inx
d009 : e008             [ 2] 	cpx #8
d00b : d0b1             [ 4] 	bne gr_hchar_copyline
d00d : 60               [ 6] 	rts							; Done after 8 lines
                             
                             ;****************************************
                             ;* gr_point_setup
                             ;* Calculate information about a pixel location
                             ;* Input : X,Y = coord
                             ;* Output : None
                             ;* Regs affected :
                             ;* tmp_alo,hi contains the row base address
                             ;* tmp_blo contains the mask index
                             ;* tmp_bhi contains the column offset in to row
                             ;* Y is same as tmp_bhi
                             ;* X is same as tmp_blo
                             ;****************************************
d00e :                       gr_point_setup
                             	; Get row address
d00e : b9009c           [ 4] 	lda hires_row_low,y
d011 : 8532             [ 3] 	sta tmp_alo
d013 : b9c89c           [ 4] 	lda hires_row_hi,y
d016 : 8533             [ 3] 	sta tmp_ahi
                             	; Get the pixel mask
d018 : bd809e           [ 4] 	lda hires_mask,x
d01b : 8534             [ 3] 	sta tmp_blo
                             	; Get the column offset to Y
d01d : bc909d           [ 4] 	ldy hires_col,x
d020 : 60               [ 6] 	rts
                             
d021 :                       gr_set_hires_cur
d021 : 8622             [ 3] 	stx gr_scrngeom+gr_hires_x
d023 : 8423             [ 3] 	sty gr_scrngeom+gr_hires_y
d025 : 60               [ 6] 	rts
                             
                             ;* Get pixel value at X,Y in to A
d026 :                       gr_pixel
d026 : 200ed0           [ 6] 	jsr gr_point_setup				; Set up mask and addresse
d029 : b132             [ 5] 	lda (tmp_alo),y					; Get screen byte
d02b : 2534             [ 3] 	and tmp_blo						; Check if pixel coincides with
d02d : 60               [ 6] 	rts
                             
                             ;* Plot a point based on X,Y coordinates
d02e :                       gr_point
d02e : e0f0             [ 2] 	cpx #240						; Check bounds
d030 : b028             [ 3] 	bcs gr_point_done
d032 : c0c8             [ 2] 	cpy #200
d034 : b024             [ 3] 	bcs gr_point_done
                             
                             	;** FOR SPEED COPYING THE POINT SETUP ROUTINE
                             	; Get row address
d036 : b9009c           [ 4] 	lda hires_row_low,y
d039 : 8532             [ 3] 	sta tmp_alo
d03b : b9c89c           [ 4] 	lda hires_row_hi,y
d03e : 8533             [ 3] 	sta tmp_ahi
                             	; Get the pixel mask
d040 : bd809e           [ 4] 	lda hires_mask,x
d043 : 8534             [ 3] 	sta tmp_blo
                             	; Get the column offset to Y
d045 : bc909d           [ 4] 	ldy hires_col,x
AS65 Assembler for R6502 [1.42].                                     Page  110
-------------------------------- bank\bank0.s --------------------------------

                             
                             ;	jsr gr_point_setup				; Set up mask and address
                             ;* Plot a point based on tmp_alo base, Y offset a
d048 : b132             [ 5] 	lda (tmp_alo),y					; Get screen byte
d04a : a620             [ 3] 	ldx gr_scrngeom+gr_pixmode		; Look at the mode
d04c : e002             [ 2] 	cpx #2							; If eor mode then go and write
d04e : f006             [ 3] 	beq gr_point_eor
d050 : 0534             [ 3] 	ora tmp_blo						; Or with MASK
d052 : e000             [ 2] 	cpx #0							; But if not then eor
d054 : d002             [ 3] 	bne gr_point_write
d056 :                       gr_point_eor
d056 : 4534             [ 3] 	eor tmp_blo						; EOR with MASK
d058 :                       gr_point_write
d058 : 9132             [ 5] 	sta (tmp_alo),y
d05a :                       gr_point_done
d05a : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* gr_circle
                             ;* Draw a circle centre x0,y0, radius r
                             ;* Input :	num_a   = x0
                             ;*			num_a+1 = y0
                             ;*			num_a+2 = r
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
d05b :                       gr_circle
                             ; Local definitions of temp space to make
                             ; the rest of the code easier to read
003d =                       grc_x0 	= (num_a)
003e =                       grc_y0 	= (num_a+1)
003f =                       grc_r 	= (num_a+2)
0040 =                       grc_x 	= (num_a+3)
0042 =                       grc_y	= (num_b+1)
0043 =                       grc_d	= (num_b+2)
                             
                             	;x = radius
d05b : a53f             [ 3] 	lda grc_r
d05d : 8540             [ 3] 	sta grc_x
                             	;decision = 1 - x
d05f : a900             [ 2] 	lda #0
                             	;y = 0
d061 : 8542             [ 3] 	sta grc_y
d063 : 18               [ 2] 	clc			; A=0 so CLC subtracts 1 :-)
d064 : e540             [ 3] 	sbc grc_x
d066 : 8543             [ 3] 	sta grc_d
d068 :                       gr_circle_plot
                             	;while(x >= y)
d068 : a540             [ 3] 	lda grc_x
d06a : c542             [ 3] 	cmp grc_y
d06c : 902a             [ 3] 	bcc gr_circle_done
                             	;plot 8 points on current x,y
d06e : 2099d0           [ 6] 	jsr gr_circle_points
                             	;y++
d071 : e642             [ 5] 	inc grc_y
                             	;if d<=0
d073 : a543             [ 3] 	lda grc_d
d075 : f014             [ 3] 	beq gr_circle_d_lte0
d077 : 3012             [ 3] 	bmi gr_circle_d_lte0
                             	;else
                             	;x--
AS65 Assembler for R6502 [1.42].                                     Page  111
-------------------------------- bank\bank0.s --------------------------------

d079 : c640             [ 5] 	dec grc_x
                             	;decision += 2 * (y - x) + 1
d07b : a542             [ 3] 	lda grc_y
d07d : 38               [ 2] 	sec
d07e : e540             [ 3] 	sbc grc_x
d080 : 0a               [ 2] 	asl a
d081 : 18               [ 2] 	clc
d082 : 6901             [ 2] 	adc #1
d084 : 6543             [ 3] 	adc grc_d
d086 : 8543             [ 3] 	sta grc_d
d088 : 4c68d0           [ 3] 	jmp gr_circle_plot
d08b :                       gr_circle_d_lte0
                             	;decision += 2 * y + 1
d08b : a542             [ 3] 	lda grc_y
d08d : 0a               [ 2] 	asl a
d08e : 18               [ 2] 	clc
d08f : 6901             [ 2] 	adc #1
d091 : 6543             [ 3] 	adc grc_d
d093 : 8543             [ 3] 	sta grc_d
d095 : 4c68d0           [ 3] 	jmp gr_circle_plot
d098 :                       gr_circle_done
d098 : 60               [ 6] 	rts
d099 :                       gr_circle_points
                             ; Local names of temp storage
                             ; to make code easier to read
                             	;DrawPixel( x + x0,  yh + y0);
d099 : a540             [ 3] 	lda grc_x
d09b : 18               [ 2] 	clc
d09c : 653d             [ 3] 	adc grc_x0
d09e : aa               [ 2] 	tax
d09f : a542             [ 3] 	lda grc_y
d0a1 : 18               [ 2] 	clc
d0a2 : 653e             [ 3] 	adc grc_y0
d0a4 : a8               [ 2] 	tay
d0a5 : 202ed0           [ 6] 	jsr gr_point
                             	;DrawPixel( y + x0,  xh + y0);
d0a8 : a542             [ 3] 	lda grc_y
d0aa : 18               [ 2] 	clc
d0ab : 653d             [ 3] 	adc grc_x0
d0ad : aa               [ 2] 	tax
d0ae : a540             [ 3] 	lda grc_x
d0b0 : 18               [ 2] 	clc
d0b1 : 653e             [ 3] 	adc grc_y0
d0b3 : a8               [ 2] 	tay
d0b4 : 202ed0           [ 6] 	jsr gr_point
                             	;DrawPixel(-x + x0,  yh + y0);
d0b7 : a53d             [ 3] 	lda grc_x0
d0b9 : 38               [ 2] 	sec
d0ba : e540             [ 3] 	sbc grc_x
d0bc : aa               [ 2] 	tax
d0bd : a542             [ 3] 	lda grc_y
d0bf : 18               [ 2] 	clc
d0c0 : 653e             [ 3] 	adc grc_y0
d0c2 : a8               [ 2] 	tay
d0c3 : 202ed0           [ 6] 	jsr gr_point
                             	;DrawPixel(-y + x0,  xh + y0);
d0c6 : a53d             [ 3] 	lda grc_x0
d0c8 : 38               [ 2] 	sec
d0c9 : e542             [ 3] 	sbc grc_y
d0cb : aa               [ 2] 	tax
d0cc : a540             [ 3] 	lda grc_x
d0ce : 18               [ 2] 	clc
AS65 Assembler for R6502 [1.42].                                     Page  112
-------------------------------- bank\bank0.s --------------------------------

d0cf : 653e             [ 3] 	adc grc_y0
d0d1 : a8               [ 2] 	tay
d0d2 : 202ed0           [ 6] 	jsr gr_point
                             	;DrawPixel(-x + x0, -yh + y0);
d0d5 : a53d             [ 3] 	lda grc_x0
d0d7 : 38               [ 2] 	sec
d0d8 : e540             [ 3] 	sbc grc_x
d0da : aa               [ 2] 	tax
d0db : a53e             [ 3] 	lda grc_y0
d0dd : 38               [ 2] 	sec
d0de : e542             [ 3] 	sbc grc_y
d0e0 : a8               [ 2] 	tay
d0e1 : 202ed0           [ 6] 	jsr gr_point
                             	;DrawPixel(-y + x0, -xh + y0);
d0e4 : a53d             [ 3] 	lda grc_x0
d0e6 : 38               [ 2] 	sec
d0e7 : e542             [ 3] 	sbc grc_y
d0e9 : aa               [ 2] 	tax
d0ea : a53e             [ 3] 	lda grc_y0
d0ec : 38               [ 2] 	sec
d0ed : e540             [ 3] 	sbc grc_x
d0ef : a8               [ 2] 	tay
d0f0 : 202ed0           [ 6] 	jsr gr_point
                             	;DrawPixel( x + x0, -yh + y0);
d0f3 : a540             [ 3] 	lda grc_x
d0f5 : 18               [ 2] 	clc
d0f6 : 653d             [ 3] 	adc grc_x0
d0f8 : aa               [ 2] 	tax
d0f9 : a53e             [ 3] 	lda grc_y0
d0fb : 38               [ 2] 	sec
d0fc : e542             [ 3] 	sbc grc_y
d0fe : a8               [ 2] 	tay
d0ff : 202ed0           [ 6] 	jsr gr_point
                             	;DrawPixel( y + x0, -xh + y0);
d102 : a542             [ 3] 	lda grc_y
d104 : 18               [ 2] 	clc
d105 : 653d             [ 3] 	adc grc_x0
d107 : aa               [ 2] 	tax
d108 : a53e             [ 3] 	lda grc_y0
d10a : 38               [ 2] 	sec
d10b : e540             [ 3] 	sbc grc_x
d10d : a8               [ 2] 	tay
d10e : 4c2ed0           [ 3] 	jmp gr_point
                             
                             
                             
                             ;****************************************
                             ;* gr_line
                             ;* Draw a line from x0,y0 -> x1,y1
                             ;* Input :	num_a   = x0
                             ;*			num_a+1 = y0
                             ;*			num_a+2 = x1
                             ;*			num_a+3 = y1
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
d111 :                       gr_line
                             
                             ; Local definitions of temp space to make
                             ; the rest of the code easier to read
003d =                       grl_x0 	= (num_a)
003e =                       grl_y0 	= (num_a+1)
AS65 Assembler for R6502 [1.42].                                     Page  113
-------------------------------- bank\bank0.s --------------------------------

003f =                       grl_x1 	= (num_a+2)
0040 =                       grl_y1 	= (num_a+3)
0041 =                       grl_dx	= (ztmp_24+4)
0042 =                       grl_dy	= (ztmp_24+5)
0043 =                       grl_xyyx= (ztmp_24+6)
0044 =                       grl_2dx	= (ztmp_24+7)			; Word
0046 =                       grl_2dy	= (ztmp_24+9)			; Word
0048 =                       grl_2dxy= (ztmp_24+11)			; Word
004a =                       grl_sinx= (ztmp_24+13)
004b =                       grl_p	= (ztmp_24+14)			; Word
004d =                       grl_siny= (ztmp_24+16)
                             
                             	; Start from hires cursor position
                             	; New cursor pos = end of line pos
d111 : a522             [ 3] 	lda gr_scrngeom+gr_hires_x
d113 : 853d             [ 3] 	sta grl_x0
d115 : a523             [ 3] 	lda gr_scrngeom+gr_hires_y
d117 : 853e             [ 3] 	sta grl_y0
d119 : a63f             [ 3] 	ldx grl_x1
d11b : a440             [ 3] 	ldy grl_y1
d11d : 2021d0           [ 6] 	jsr gr_set_hires_cur
                             	
d120 : a900             [ 2] 	lda #0
d122 : 8543             [ 3] 	sta grl_xyyx				; Assume normal xy axis
                             
                             	; check if abs(dy)>abs(dx) if so need to swap xy
                             	; num_b = abs(x), num_b+1 = abs(dy)
d124 : 38               [ 2] 	sec
d125 : a53f             [ 3] 	lda grl_x1
d127 : e53d             [ 3] 	sbc grl_x0
d129 : b004             [ 3] 	bcs gr_line_skip_dx_neg
d12b : 49ff             [ 2] 	eor #0xff
d12d : 6901             [ 2] 	adc #1
d12f :                       gr_line_skip_dx_neg
d12f : 8541             [ 3] 	sta grl_dx
d131 : 38               [ 2] 	sec
d132 : a540             [ 3] 	lda grl_y1
d134 : e53e             [ 3] 	sbc grl_y0
d136 : b004             [ 3] 	bcs gr_line_skip_dy_neg
d138 : 49ff             [ 2] 	eor #0xff
d13a : 6901             [ 2] 	adc #1
d13c :                       gr_line_skip_dy_neg
d13c : 8542             [ 3] 	sta grl_dy
d13e : c541             [ 3] 	cmp grl_dx
d140 : 901a             [ 3] 	bcc gr_line_skip_xy_swap
                             	; swap xy axes and also dx and dy
d142 : a53d             [ 3] 	lda grl_x0					; swap x0 and y0
d144 : a63e             [ 3] 	ldx grl_y0
d146 : 853e             [ 3] 	sta grl_y0
d148 : 863d             [ 3] 	stx grl_x0
d14a : a53f             [ 3] 	lda grl_x1					; swap x1 and y1
d14c : a640             [ 3] 	ldx grl_y1
d14e : 8540             [ 3] 	sta grl_y1
d150 : 863f             [ 3] 	stx grl_x1
d152 : a541             [ 3] 	lda grl_dx					; swap dy and dx
d154 : a642             [ 3] 	ldx grl_dy
d156 : 8542             [ 3] 	sta grl_dy
d158 : 8641             [ 3] 	stx grl_dx
d15a : e643             [ 5] 	inc grl_xyyx				; set flag to Not Z to know abou
                             
d15c :                       gr_line_skip_xy_swap
                             	; assume going from left to right and top to bot
AS65 Assembler for R6502 [1.42].                                     Page  114
-------------------------------- bank\bank0.s --------------------------------

d15c : a901             [ 2] 	lda #1
d15e : a0ff             [ 2] 	ldy #255					; -1
d160 : 854a             [ 3] 	sta grl_sinx
d162 : 854d             [ 3] 	sta grl_siny
                             
                             	; check going right to left
d164 : a53d             [ 3] 	lda grl_x0
d166 : c53f             [ 3] 	cmp grl_x1
d168 : 9002             [ 3] 	bcc gr_line_skip_left
d16a : 844a             [ 3] 	sty grl_sinx				; make -1
d16c :                       gr_line_skip_left
                             	; check going bottom to top
d16c : a53e             [ 3] 	lda grl_y0
d16e : c540             [ 3] 	cmp grl_y1
d170 : 9002             [ 3] 	bcc gr_line_skip_y_up
d172 : 844d             [ 3] 	sty grl_siny				; make -1
                             
d174 :                       gr_line_skip_y_up
d174 : a541             [ 3] 	lda grl_dx
d176 : 0a               [ 2] 	asl a
d177 : 8544             [ 3] 	sta grl_2dx					; 2*dx (word)
d179 : a900             [ 2] 	lda #0
d17b : 8545             [ 3] 	sta grl_2dx+1
d17d : 2645             [ 5] 	rol grl_2dx+1
                             
d17f : a542             [ 3] 	lda grl_dy
d181 : 0a               [ 2] 	asl a
d182 : 8546             [ 3] 	sta grl_2dy					; 2*dy (word)
d184 : a900             [ 2] 	lda #0
d186 : 8547             [ 3] 	sta grl_2dy+1
d188 : 2647             [ 5] 	rol grl_2dy+1
                             
                             ;    p=2*dy-dx;					; p (word)
d18a : 38               [ 2] 	sec
d18b : a546             [ 3] 	lda grl_2dy
d18d : e541             [ 3] 	sbc grl_dx
d18f : 854b             [ 3] 	sta grl_p
d191 : a547             [ 3] 	lda grl_2dy+1
d193 : e900             [ 2] 	sbc #0
d195 : 854c             [ 3] 	sta grl_p+1
                             
                             ;   2*(dy-dx)					; num_tmp+2 = 2*(dy-dx)
d197 : 38               [ 2] 	sec
d198 : a546             [ 3] 	lda grl_2dy
d19a : e544             [ 3] 	sbc grl_2dx
d19c : 8548             [ 3] 	sta grl_2dxy
d19e : a547             [ 3] 	lda grl_2dy+1
d1a0 : e545             [ 3] 	sbc grl_2dx+1
d1a2 : 8549             [ 3] 	sta grl_2dxy+1
                             
d1a4 :                       gr_line_pixel
d1a4 : a63d             [ 3] 	ldx grl_x0
d1a6 : a43e             [ 3] 	ldy grl_y0
d1a8 : a543             [ 3] 	lda grl_xyyx				; Swapped?
d1aa : f004             [ 3] 	beq gr_line_yx_skip
d1ac : a63e             [ 3] 	ldx grl_y0
d1ae : a43d             [ 3] 	ldy grl_x0
d1b0 :                       gr_line_yx_skip
d1b0 : 202ed0           [ 6] 	jsr gr_point				; Plot point x,y
                             
d1b3 : a53d             [ 3] 	lda grl_x0					; Check if done
d1b5 : c53f             [ 3] 	cmp grl_x1
AS65 Assembler for R6502 [1.42].                                     Page  115
-------------------------------- bank\bank0.s --------------------------------

d1b7 : f032             [ 3] 	beq gr_line_done
                             
                             	; Increment x always
d1b9 : 18               [ 2] 	clc
d1ba : a53d             [ 3] 	lda grl_x0
d1bc : 654a             [ 3] 	adc grl_sinx
d1be : 853d             [ 3] 	sta grl_x0
                             
                             	; check sign of p
d1c0 : a54c             [ 3] 	lda grl_p+1
d1c2 : 3017             [ 3] 	bmi gr_line_neg_p
                             
                             	; if p >=0
                             
                             	; y=y+increment
d1c4 : 18               [ 2] 	clc
d1c5 : a53e             [ 3] 	lda grl_y0
d1c7 : 654d             [ 3] 	adc grl_siny
d1c9 : 853e             [ 3] 	sta grl_y0
                             
                             	; p=p+2*dy-2*dx
                             	_addZPWord grl_p,grl_2dxy
                             
d1d8 : 4ca4d1           [ 3] 	jmp gr_line_pixel
                             
d1db :                       gr_line_neg_p
                             	; if p < 0
                             	; p=p+2*dy
                             	_addZPWord grl_p,grl_2dy
                             
                             
d1e8 : 4ca4d1           [ 3] 	jmp gr_line_pixel
d1eb :                       gr_line_done
d1eb : 60               [ 6] 	rts
                             
                             
                             ; Line drawing pseudo code
                             ;    while(x<x1)
                             ;    {
                             ;        putpixel(x,y);
                             ;        if(p>=0)
                             ;        {
                             ;            y=y+1;
                             ;            p=p+2*dy-2*dx;
                             ;        }
                             ;        else
                             ;        {
                             ;            p=p+2*dy;
                             ;        }
                             ;        x=x+1;
                             ;    }
                             
                             
                             ;* These tables are to speed up calculating the
                             ;* offset for plot commands
d1ec :                       gr_offset_40lo
d1ec : 00285078a0            	db lo(000*40), lo(001*40), lo(002*40), lo(003*40
d1f1 : c8f0184068            	db lo(005*40), lo(006*40), lo(007*40), lo(008*40
d1f6 : 90b8e00830            	db lo(010*40), lo(011*40), lo(012*40), lo(013*40
d1fb : 5880a8d0f8            	db lo(015*40), lo(016*40), lo(017*40), lo(018*40
d200 : 20487098c0            	db lo(020*40), lo(021*40), lo(022*40), lo(023*40
d205 : e81038                	db lo(025*40), lo(026*40), lo(027*40)
AS65 Assembler for R6502 [1.42].                                     Page  116
-------------------------------- bank\bank0.s --------------------------------

d208 :                       gr_offset_40hi
d208 : 0000000000            	db hi(000*40), hi(001*40), hi(002*40), hi(003*40
d20d : 0000010101            	db hi(005*40), hi(006*40), hi(007*40), hi(008*40
d212 : 0101010202            	db hi(010*40), hi(011*40), hi(012*40), hi(013*40
d217 : 0202020202            	db hi(015*40), hi(016*40), hi(017*40), hi(018*40
d21c : 0303030303            	db hi(020*40), hi(021*40), hi(022*40), hi(023*40
d221 : 030404                	db hi(025*40), hi(026*40), hi(027*40)
                             
                             
                             ;* Character based sprites for text mode only
d224 :                       mod_sz_sprite_s
                             ;* Initialisation
d224 :                       gr_spr_init
d224 : a21f             [ 2] 	ldx #31							; Start at last sprite
d226 :                       gr_spr_init_loop
d226 : a9ff             [ 2] 	lda #-1							; Put -1 in the x coords
d228 : 9d00b4           [ 5] 	sta spr_curX,x
d22b : 9d20b4           [ 5] 	sta spr_newX,x
d22e : ca               [ 2] 	dex								; Next sprite
d22f : 10f5             [ 3] 	bpl gr_spr_init_loop			; Until all 32 sprites in
d231 : 60               [ 6] 	rts
                             
                             
                             ;* Erase all active sprites
d232 :                       gr_spr_erase
                             	; First restore background from sprites
                             	; that are active and new pos is different from 
d232 : a21f             [ 2] 	ldx #31							; Start at last sprite
d234 :                       gr_spr_erase_loop
d234 : bd00b4           [ 4] 	lda spr_curX,x					; Is sprite active?
d237 : 3008             [ 3] 	bmi gr_spr_erase_next
d239 : 8532             [ 3] 	sta tmp_alo						; x pos saved for later
d23b :                       gr_spr_erase_do
d23b : bda0b4           [ 4] 	lda spr_bgnd,x					; Get the background
d23e : 208cd2           [ 6] 	jsr gr_spr_put					; And restore it
d241 :                       gr_spr_erase_next
d241 : ca               [ 2] 	dex
d242 : 10f0             [ 3] 	bpl gr_spr_erase_loop
d244 : 60               [ 6] 	rts
                             
                             ;* Get ready for new position
d245 :                       gr_spr_new
d245 : a21f             [ 2] 	ldx #31							; Start at last sprite
d247 :                       gr_spr_new_loop
d247 : bd20b4           [ 4] 	lda spr_newX,x					; Is the new position active?
d24a : 3029             [ 3] 	bmi gr_spr_new_next
d24c : 8532             [ 3] 	sta tmp_alo						; x pos saved for later
d24e :                       gr_spr_new_pos
d24e : bd60b4           [ 4] 	lda spr_newY,x					; Get new Y
d251 : 9d40b4           [ 5] 	sta spr_curY,x					; Update new->cur Y
                             	; Calculate screen address
                             	; save as part of sprite data and in zp area
d254 : a8               [ 2] 	tay
d255 : 18               [ 2] 	clc
d256 : b9ecd1           [ 4] 	lda gr_offset_40lo,y
d259 : 6980             [ 2] 	adc #lo(TEXTSCRN)
d25b : 8527             [ 3] 	sta gr_scrngeom+gr_geom_tmp
d25d : 9dc0b4           [ 5] 	sta spr_baseadrl,x
d260 : b908d2           [ 4] 	lda gr_offset_40hi,y
d263 : 69bb             [ 2] 	adc #hi(TEXTSCRN)
d265 : 8528             [ 3] 	sta gr_scrngeom+gr_geom_tmp+1
d267 : 9de0b4           [ 5] 	sta spr_baseadrh,x
AS65 Assembler for R6502 [1.42].                                     Page  117
-------------------------------- bank\bank0.s --------------------------------

d26a : a432             [ 3] 	ldy tmp_alo						; Get x pos back in to Y reg
d26c : 98               [ 2] 	tya
d26d : 9d00b4           [ 5] 	sta spr_curX,x					; Update new->cur X
d270 : b127             [ 5] 	lda (gr_scrngeom+gr_geom_tmp),y	; Get background
d272 : 9da0b4           [ 5] 	sta spr_bgnd,x					; And save this
d275 :                       gr_spr_new_next
d275 : ca               [ 2] 	dex
d276 : 10cf             [ 3] 	bpl gr_spr_new_loop
d278 : 60               [ 6] 	rts
                             
                             
                             ; Draw all active sprites
                             ; Active sprites are always drawn - 0 = lowest pr
d279 :                       gr_spr_draw
d279 : a21f             [ 2] 	ldx #31							; Start at last sprite
d27b :                       gr_spr_draw_loop
d27b : bd20b4           [ 4] 	lda spr_newX,x					; Is sprite active?
d27e : 8532             [ 3] 	sta tmp_alo
d280 : 3006             [ 3] 	bmi gr_spr_draw_next
d282 : bd80b4           [ 4] 	lda spr_chr,x					; Get the sprite char
d285 : 208cd2           [ 6] 	jsr gr_spr_put
d288 :                       gr_spr_draw_next
d288 : ca               [ 2] 	dex
d289 : 10f0             [ 3] 	bpl gr_spr_draw_loop
d28b : 60               [ 6] 	rts
                             
                             
                             ;* Common routine to put A to screen address
                             ;* Used for erase and draw of sprites
d28c :                       gr_spr_put
d28c : 48               [ 3] 	pha
d28d : bdc0b4           [ 4] 	lda spr_baseadrl,x		; Get the screen pointer
d290 : 8527             [ 3] 	sta gr_scrngeom+gr_geom_tmp
d292 : bde0b4           [ 4] 	lda spr_baseadrh,x
d295 : 8528             [ 3] 	sta gr_scrngeom+gr_geom_tmp+1
d297 : a432             [ 3] 	ldy tmp_alo						; Y reg is in tmp_alo
d299 : 68               [ 4] 	pla								; Get back the char to
d29a : 9127             [ 5] 	sta (gr_scrngeom+gr_geom_tmp),y	; put on to scre
d29c : 60               [ 6] 	rts
                             
                             
                             ;* Update spr A with char X
d29d :                       gr_spr_char
d29d : a8               [ 2] 	tay
d29e : 8a               [ 2] 	txa
d29f : 9980b4           [ 5] 	sta spr_chr,y
d2a2 : 60               [ 6] 	rts
                             
                             ;* Locate what is at the location of sprite A, re
                             ;* C=1 if sprite it not active
d2a3 :                       gr_spr_hit
d2a3 : aa               [ 2] 	tax
d2a4 : bd00b4           [ 4] 	lda spr_curX,x
d2a7 : c980             [ 2] 	cmp #0x80						; If A>=0x80 then C=1
d2a9 : bda0b4           [ 4] 	lda spr_bgnd,x
d2ac : 60               [ 6] 	rts
                             
                             ;* Update spr A with coords X,Y
d2ad :                       gr_spr_pos
d2ad : 8432             [ 3] 	sty tmp_alo
d2af : a8               [ 2] 	tay
d2b0 : 8a               [ 2] 	txa								; X coord still in X reg
AS65 Assembler for R6502 [1.42].                                     Page  118
-------------------------------- bank\bank0.s --------------------------------

d2b1 : 9920b4           [ 5] 	sta spr_newX,y
d2b4 : a532             [ 3] 	lda tmp_alo						; Y coord from temp
d2b6 : 9960b4           [ 5] 	sta spr_newY,y
d2b9 : 60               [ 6] 	rts
                             
                             ;* Update all sprite positions from df_tmpptra, d
d2ba :                       gr_spr_multi_pos
d2ba : a03e             [ 2] 	ldy #62
d2bc : a21f             [ 2] 	ldx #31
d2be :                       gr_spr_multi_loop
d2be : b1a1             [ 5] 	lda (df_tmpptra),y
d2c0 : 9d20b4           [ 5] 	sta spr_newX,x
d2c3 : b1a3             [ 5] 	lda (df_tmpptrb),y
d2c5 : 9d60b4           [ 5] 	sta spr_newY,x
d2c8 : 88               [ 2] 	dey
d2c9 : 88               [ 2] 	dey
d2ca : ca               [ 2] 	dex
d2cb : 10f1             [ 3] 	bpl gr_spr_multi_loop
d2cd : 60               [ 6] 	rts
                             
d2ce :                       mod_sz_sprite_e
d2ce :                       mod_sz_graph_e
                             
                             ; Old version of point calculator - in case I nee
                             ;	; Calculate destination address
                             ;	lda #0
                             ;	sta tmp_ahi
                             ;
                             ;	tya				; Row number in A
                             ;	; Multiply 8
                             ;	asl a
                             ;	rol tmp_ahi
                             ;	asl a
                             ;	rol tmp_ahi
                             ;	asl a
                             ;	rol tmp_ahi
                             ;	sta tmp_alo
                             ;
                             ;	; Multiply 32
                             ;	; Use partial result from m8
                             ;	lda tmp_ahi
                             ;	sta tmp_bhi
                             ;	lda tmp_alo
                             ;	; Just two more rotates to get m32
                             ;	asl a
                             ;	rol tmp_bhi
                             ;	asl a
                             ;	rol tmp_bhi
                             ;	sta tmp_blo
                             ;	; Add m8 and m32 for m40
                             ;	clc
                             ;	lda tmp_alo
                             ;	adc tmp_blo
                             ;	sta tmp_alo
                             ;	lda tmp_ahi
                             ;	adc tmp_bhi
                             ;	; Add high byte of screen address
                             ;	adc gr_scrngeom+vdp_scrn+1
                             ;	sta tmp_ahi
                             ;	; Dest offset in tmp_alo
                             ;
                             ;	; pixel x coord in to A
AS65 Assembler for R6502 [1.42].                                     Page  119
-------------------------------- bank\bank0.s --------------------------------

                             ;	; We dvide by 48 doing trial subtracts
                             ;	; This leaves Y with a number 0..5
                             ;	; And A has the remainder 0..47
                             ;	; Use these to look up byte column and mask
                             ;	; We don't do more than 5 trial subtracts
                             ;	; plus the table size is much smaller
                             ;	; Comprimise of space vs speed
                             ;	txa
                             ;	ldy #0				; Start at segment 0
                             ;	sec
                             ;gr_point_d48
                             ;	sbc #48
                             ;	iny
                             ;	bcs gr_point_d48				; Keep going until underflo
                             ;
                             ;	dey								; Adjust segment count
                             ;	adc #48							; Get remainder in A
                             ;	tax								; Put remainder in to X (0..47)
                             ;	lda gr_col_seg,y				; Get the start column of s
                             ;	clc
                             ;	adc gr_col_offset,x				; Add segment offset usi
                             ;	tay								; We have the byte column in Y
                             ;	sty tmp_bhi						; Save in tmp, also still in Y
                             ;	stx tmp_blo						; Save remainder 0..47
                             ;	rts
                             
                             ;gr_point_mask
                             ;	db 0x20,0x10,0x08,0x04,0x02,0x01
                             ;	db 0x20,0x10,0x08,0x04,0x02,0x01
                             ;	db 0x20,0x10,0x08,0x04,0x02,0x01
                             ;	db 0x20,0x10,0x08,0x04,0x02,0x01
                             ;	db 0x20,0x10,0x08,0x04,0x02,0x01
                             ;	db 0x20,0x10,0x08,0x04,0x02,0x01
                             ;	db 0x20,0x10,0x08,0x04,0x02,0x01
                             ;	db 0x20,0x10,0x08,0x04,0x02,0x01
                             ;gr_col_offset
                             ;	db 0,0,0,0,0,0
                             ;	db 1,1,1,1,1,1
                             ;	db 2,2,2,2,2,2
                             ;	db 3,3,3,3,3,3
                             ;	db 4,4,4,4,4,4
                             ;	db 5,5,5,5,5,5
                             ;	db 6,6,6,6,6,6
                             ;	db 7,7,7,7,7,7
                             ;gr_col_seg
                             ;	db 0,8,16,24,32
                             
                             	include "monitor/cmd.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  CMD.S
                             ;*	A really simple monitor that needs to be impro
                             ;*	optimised.  Only has these commands;
                             ;*		dxxxx			Dump memory location xxxx
                             ;*						Press enter for more else stop
                             ;*		sxxxx [yy]		Set memory location xxxx with hex
AS65 Assembler for R6502 [1.42].                                     Page  120
-------------------------------- bank\bank0.s --------------------------------

                             ;*						bytes, respond with next location
                             ;*		q				Quit
                             ;*	Now you see why this needs optimising!
                             ;*
                             ;************************************************
                             
0094 =                       cmd_lo					= df_currdat
0095 =                       cmd_hi					= (df_currdat+1)
                             
                             	; ROM code
                             	code  
                             
d2ce :                       _mod_sz_cmd_s
                             
d2ce :                       command_line
                             
d2ce :                       cmd_ready
                             	_println_low msg_ready
                             
                             
d2d5 : 38               [ 2] 	sec							; Set carry flag = echo characters
d2d6 : 2060c4           [ 6] 	jsr io_read_line			; Get a command line
d2d9 : a000             [ 2] 	ldy #0
d2db : b139             [ 5] 	lda (buf_lo),y
d2dd : c971             [ 2] 	cmp #'q'
d2df : d001             [ 3] 	bne cmd_check_cmd
d2e1 : 60               [ 6] 	rts
d2e2 :                       cmd_check_cmd
d2e2 : 20f4d2           [ 6] 	jsr cmd_parse				; Find command and execute
d2e5 : b003             [ 3] 	bcs cmd_error				; Carry set = error condition
d2e7 : 4cced2           [ 3] 	jmp cmd_ready
                             
d2ea :                       cmd_error
                             	_println_low msg_errmsg
                             
d2f1 : 4cced2           [ 3] 	jmp cmd_ready
                             
                             
                             ;****************************************
                             ;* cmd_parse
                             ;* Parse the command line in the io buffer
                             ;* Regs affected : 
                             ;****************************************
d2f4 :                       cmd_parse
d2f4 : c8               [ 2] 	iny						; Ready for next char
                             	
d2f5 :                       cmd_check_d
d2f5 : c964             [ 2] 	cmp #'d'				; Check for d
d2f7 : d003             [ 3] 	bne cmd_check_s
d2f9 : 4c2fd3           [ 3] 	jmp cmd_dumpmem
d2fc :                       cmd_check_s
d2fc : c973             [ 2] 	cmp #'s'				; Check for s
d2fe : d0ea             [ 3] 	bne cmd_error
d300 : 4c09d3           [ 3] 	jmp cmd_setmem
                             
d303 :                       cmd_not_found
d303 : a901             [ 2] 	lda #CMD_ERR_NOTFOUND
d305 : 855d             [ 3] 	sta errno
d307 : 38               [ 2] 	sec
d308 : 60               [ 6] 	rts
                             	
                             ;****************************************
AS65 Assembler for R6502 [1.42].                                     Page  121
-------------------------------- bank\bank0.s --------------------------------

                             ;* cmd_setmem
                             ;* Set the memory at address AAAA to byte string
                             ;* Input : buflo, bufhi
                             ;* Output : y = start of first parm byte
                             ;*          x = index to routine pointer
                             ;* Regs affected : A
                             ;****************************************
d309 :                       cmd_setmem
d309 : 20c6d3           [ 6] 	jsr cmd_parse_word
d30c : b01f             [ 3] 	bcs cmd_setmem_err
d30e :                       cmd_setmem_byte
d30e : 20aad3           [ 6] 	jsr cmd_parse_byte
d311 : b01a             [ 3] 	bcs cmd_setmem_err
d313 : 20a1d3           [ 6] 	jsr cmd_poke				; Poke A in to cmd_lo, hi
d316 : 2091d3           [ 6] 	jsr cmd_incmem
d319 : 20d8d3           [ 6] 	jsr cmd_parse_next_parm		; Try and find another 
d31c : 90f0             [ 3] 	bcc cmd_setmem_byte			; Process if found, else f
d31e : a595             [ 3] 	lda cmd_hi
d320 : 2074c1           [ 6] 	jsr utilPrintA
d323 : a594             [ 3] 	lda cmd_lo
d325 : 2074c1           [ 6] 	jsr utilPrintA
d328 : 206cc1           [ 6] 	jsr utilPrintCRLF
d32b : 18               [ 2] 	clc
d32c : 60               [ 6] 	rts
d32d :                       cmd_setmem_err
d32d : 38               [ 2] 	sec
d32e : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* cmd_dumpmem
                             ;* Dump memory at address AAAA
                             ;* Input : buflo, bufhi
                             ;* Output : y = start of first parm byte
                             ;* Regs affected : A
                             ;****************************************
d32f :                       cmd_dumpmem
d32f : 20c6d3           [ 6] 	jsr cmd_parse_word			; Get address to dump
d332 : 9001             [ 3] 	bcc cmd_dumpmem_block
d334 : 60               [ 6] 	rts							; C is set
d335 :                       cmd_dumpmem_block
d335 : a595             [ 3] 	lda cmd_hi					; Show the address
d337 : 2074c1           [ 6] 	jsr utilPrintA
d33a : a594             [ 3] 	lda cmd_lo
d33c : 2074c1           [ 6] 	jsr utilPrintA
d33f : a920             [ 2] 	lda #' '
d341 : 204bc4           [ 6] 	jsr io_put_ch
                             	
d344 : a008             [ 2] 	ldy #8						; 8 Bytes per line
d346 :                       cmd_dumpmem_byte
d346 : 2098d3           [ 6] 	jsr cmd_peek
d349 : 2074c1           [ 6] 	jsr utilPrintA
d34c : 2064c1           [ 6] 	jsr utilPrintSPC
d34f : 2091d3           [ 6] 	jsr cmd_incmem
d352 : 88               [ 2] 	dey
d353 : d0f1             [ 3] 	bne cmd_dumpmem_byte
d355 :                       cmd_dumpmemASCII
d355 : 38               [ 2] 	sec							; Move pointer back to start
d356 : a594             [ 3] 	lda cmd_lo
d358 : e908             [ 2] 	sbc #8
d35a : 8594             [ 3] 	sta cmd_lo
d35c : a595             [ 3] 	lda cmd_hi
AS65 Assembler for R6502 [1.42].                                     Page  122
-------------------------------- bank\bank0.s --------------------------------

d35e : e900             [ 2] 	sbc #0
d360 : 8595             [ 3] 	sta cmd_hi
                             	
d362 : 2064c1           [ 6] 	jsr utilPrintSPC
d365 : a008             [ 2] 	ldy #8						; 8 Bytes per line
d367 :                       cmd_dumpmem_ascii
d367 : a22e             [ 2] 	ldx #'.'					; Non-printable char
d369 : 2098d3           [ 6] 	jsr cmd_peek
d36c : c920             [ 2] 	cmp #' '					; <32 is unprintable
d36e : b001             [ 3] 	bcs cmd_dump_skip_ctrl
d370 : 8a               [ 2] 	txa							; Replace with dot
d371 :                       cmd_dump_skip_ctrl
d371 : c97f             [ 2] 	cmp #UTF_DEL				; >= DEL is unprintable
d373 : 9001             [ 3] 	bcc cmd_dump_skip_del
d375 : 8a               [ 2] 	txa							; Replace with dot
d376 :                       cmd_dump_skip_del	
d376 : 204bc4           [ 6] 	jsr io_put_ch
d379 : 2091d3           [ 6] 	jsr cmd_incmem
d37c : 88               [ 2] 	dey		
d37d : d0e8             [ 3] 	bne cmd_dumpmem_ascii		; Show 8 bytes
d37f : 38               [ 2] 	sec
d380 : 2048c4           [ 6] 	jsr io_get_ch				; Wait for key press
d383 : c90d             [ 2] 	cmp #UTF_CR		
d385 : d003             [ 3] 	bne cmd_dumpmemFin			; Any key but enter finishe
                             ;	jsr io_put_ch				; Do new line
d387 : 4c35d3           [ 3] 	jmp cmd_dumpmem_block
d38a :                       cmd_dumpmemFin
d38a : a90d             [ 2] 	lda #UTF_CR
d38c : 204bc4           [ 6] 	jsr io_put_ch
d38f : 18               [ 2] 	clc
d390 : 60               [ 6] 	rts
                             	
                             	
                             ;****************************************
                             ;* cmd_incmem
                             ;* Increment pointer
                             ;* Input : cmd_lo, cmd_hi
                             ;* Output : cmd_lo, cmd_hi
                             ;* Regs affected : 
                             ;****************************************
d391 :                       cmd_incmem
                             	_incZPWord cmd_lo
                             
d397 : 60               [ 6] 	rts
                             	
                             ;****************************************
                             ;* cmd_peek
                             ;* Read byte
                             ;* Input : cmd_lo, cmd_hi
                             ;* Output : A
                             ;* Regs affected : 
                             ;****************************************
d398 :                       cmd_peek
d398 : 8638             [ 3] 	stx tmp_d
d39a : a200             [ 2] 	ldx #0
d39c : a194             [ 6] 	lda (cmd_lo,x)
d39e : a638             [ 3] 	ldx tmp_d
d3a0 : 60               [ 6] 	rts
                             	
                             ;****************************************
                             ;* cmd_poke
                             ;* Read byte
AS65 Assembler for R6502 [1.42].                                     Page  123
-------------------------------- bank\bank0.s --------------------------------

                             ;* Input : cmd_lo, cmd_hi, A
                             ;* Output : A
                             ;* Regs affected : 
                             ;****************************************
d3a1 :                       cmd_poke
d3a1 : 8638             [ 3] 	stx tmp_d
d3a3 : a200             [ 2] 	ldx #0
d3a5 : 8194             [ 6] 	sta (cmd_lo,x)
d3a7 : a638             [ 3] 	ldx tmp_d
d3a9 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* cmd_parse_byte
                             ;* Find 2 char hex byte
                             ;* Input : buflo, bufhi, y offset
                             ;* Output : y = char after hex byte, A = value
                             ;* Regs affected : A,Y
                             ;****************************************
d3aa :                       cmd_parse_byte
d3aa : 20d8d3           [ 6] 	jsr cmd_parse_next_parm	; Find the next paramete
d3ad : b015             [ 3] 	bcs cmd_parse_byte_err
d3af : b139             [ 5] 	lda (buf_lo),y			; Get hi nibble of high byte
d3b1 : f011             [ 3] 	beq cmd_parse_byte_err	; If no char then error w
d3b3 : 48               [ 3] 	pha						; Save on stack
d3b4 : c8               [ 2] 	iny
d3b5 : b139             [ 5] 	lda (buf_lo),y			; Get lo nibble of high byte
d3b7 : f00a             [ 3] 	beq cmd_parse_byte_errp	; If no char then error 
d3b9 : aa               [ 2] 	tax						; Lo nibble goes to X
d3ba : 68               [ 4] 	pla						; Restore hi nibble
d3bb : 20a6c1           [ 6] 	jsr str_x_to_a			; Convert from hex to A
d3be : b004             [ 3] 	bcs cmd_parse_byte_err	; If error then stop
d3c0 : c8               [ 2] 	iny						; Point to next char
d3c1 : 18               [ 2] 	clc
d3c2 : 60               [ 6] 	rts						; A contains the byte
d3c3 :                       cmd_parse_byte_errp
d3c3 : 68               [ 4] 	pla
d3c4 :                       cmd_parse_byte_err
d3c4 : aa               [ 2] 	tax
d3c5 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* cmd_parse_word
                             ;* Find 4 char hex word
                             ;* Input : buflo, bufhi, y offset
                             ;* Output : y = char after hex byte, A = hi, X = 
                             ;* Regs affected : A,X,Y
                             ;****************************************
d3c6 :                       cmd_parse_word
d3c6 : 20aad3           [ 6] 	jsr cmd_parse_byte			; Get hi byte of word
d3c9 : b00b             [ 3] 	bcs cmd_word_err
d3cb : 8595             [ 3] 	sta cmd_hi					; Save hi byte of word
d3cd : 20aad3           [ 6] 	jsr cmd_parse_byte			; Get lo byte of word
d3d0 : b004             [ 3] 	bcs cmd_word_err
d3d2 : 8594             [ 3] 	sta cmd_lo
d3d4 : 18               [ 2] 	clc
d3d5 : 60               [ 6] 	rts
d3d6 :                       cmd_word_err
d3d6 : 38               [ 2] 	sec
d3d7 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* cmd_parse_next_parm
AS65 Assembler for R6502 [1.42].                                     Page  124
-------------------------------- bank\bank0.s --------------------------------

                             ;* Find next non-white space
                             ;* Input : buflo, bufhi, y offset
                             ;* Output : y = start of first parm byte
                             ;* Regs affected : A
                             ;****************************************
d3d8 :                       cmd_parse_next_parm
d3d8 : 88               [ 2] 	dey
d3d9 :                       cmd_find_parm
d3d9 : c8               [ 2] 	iny
d3da : b139             [ 5] 	lda (buf_lo),y
d3dc : c900             [ 2] 	cmp #0
d3de : f005             [ 3] 	beq cmd_next_parm_err	; If z then no parms, fin 
d3e0 : c920             [ 2] 	cmp #' '				; Ignore space
d3e2 : f0f5             [ 3] 	beq cmd_find_parm
d3e4 : 18               [ 2] 	clc						; else ok, C is cleared
d3e5 :                       cmd_next_parm_err
d3e5 : 60               [ 6] 	rts
                             
                             	
d3e6 : 3e00                  msg_ready				db ">\x0"
d3e8 : 3f0d00                msg_errmsg				db "?\xd\x0"
d3eb :                       _mod_sz_cmd_e
                             
                             	include "sound/sound.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  SOUND.S
                             ;*  Sound driver module - routines to access the 
                             ;*  This sound chip was found in a number of popu
                             ;*  in the early to mid 80s, including my first c
                             ;*  the Oric-1, as well as the MSX range.
                             ;*
                             ;************************************************
                             
                             
                             	; ROM code
                             	code
                             
d3eb :                       mod_sz_sound_s
                             
                             
                             ;****************************************
                             ;* snd_get_note
                             ;* Get a note from the music scale table
                             ;* Input : Octave in X, note in Y
                             ;* Output : A,X = Value hi,lo
                             ;* Regs affected : X
                             ;****************************************
d3eb :                       snd_get_note
d3eb : 98               [ 2] 	tya
d3ec : 0a               [ 2] 	asl a
d3ed : a8               [ 2] 	tay
                             	; Get note for octave 0
d3ee : b91ed4           [ 4] 	lda snd_music_tab,y
d3f1 : 8532             [ 3] 	sta tmp_alo
d3f3 : b91fd4           [ 4] 	lda snd_music_tab+1,y
AS65 Assembler for R6502 [1.42].                                     Page  125
-------------------------------- bank\bank0.s --------------------------------

                             	
d3f6 :                       snd_get_note_oct
d3f6 : ca               [ 2] 	dex
d3f7 : 3006             [ 3] 	bmi snd_note_done
                             	; Divide freq by 2 each octave
d3f9 : 4a               [ 2] 	lsr a
d3fa : 6632             [ 5] 	ror tmp_alo
d3fc : 4cf6d3           [ 3] 	jmp snd_get_note_oct
d3ff :                       snd_note_done
d3ff : a632             [ 3] 	ldx tmp_alo
d401 : 60               [ 6] 	rts
                             
                             	
                             ;****************************************
                             ;* init_snd
                             ;* Initialise sound - after cia 1 has been initia
                             ;* Input : None
                             ;* Output : None
                             ;* Regs affected : All
                             ;****************************************
d402 :                       init_snd
d402 : a20f             [ 2] 	ldx #15
d404 :                       init_snd_regs
d404 : bd0ed4           [ 4] 	lda snd_init_tab,x
d407 : 2000c0           [ 6] 	jsr snd_set				; Set X to A
d40a : ca               [ 2] 	dex
d40b : 10f7             [ 3] 	bpl init_snd_regs		; 16 regs
                             	
d40d : 60               [ 6] 	rts						; return from sub
                             
                             	; Register array initialisation values
                             	; Assuming 1.34Mhz input clock
d40e :                       snd_init_tab
d40e : 40                    	db 0x40				; R0 = Channel A Tone Low
d40f : 00                    	db 0x00				; R1 = Channel A Tone High
d410 : 00                    	db 0x00				; R2 = Channel B Tone Low
d411 : 01                    	db 0x01				; R3 = Channel B Tone High
d412 : 00                    	db 0x00				; R4 = Channel C Tone Low
d413 : 02                    	db 0x02				; R5 = Channel C Tone High
d414 : 00                    	db 0x00				; R6 = Noise period
d415 : 7e                    	db 0b01111110		; R7 = Control : IOB input, IOA o
d416 : 1f                    	db 0x1f				; R8 = Channel A Vol
d417 : 1f                    	db 0x1f				; R9 = Channel B Vol
d418 : 1f                    	db 0x1f				; R10 = Channel C Vol
d419 : 00                    	db 0x00				; R11 = Envelope Period Low
d41a : 03                    	db 0x03				; R12 = Envelope Period High
d41b : 00                    	db 0b00000000		; R13 = Envelope Shape : 0000
d41c : ff                    	db 0xff				; R14 = IO Port A - KB lines disabled
d41d : 00                    	db 0x00				; R15 = IO Port B ; Initialise to 0 (
                             
d41e :                       snd_music_tab
d41e : 7707                  	dw 1911				; C		0
d420 : 0c07                  	dw 1804				; C#	1
d422 : a706                  	dw 1703				; D		2
d424 : 4706                  	dw 1607				; D#	3
d426 : ed05                  	dw 1517				; E		4
d428 : 9805                  	dw 1432				; F		5
d42a : 4705                  	dw 1351				; F#	6
d42c : fc04                  	dw 1276				; G		7
d42e : b404                  	dw 1204				; G#	8
d430 : 7004                  	dw 1136				; A		9
d432 : 3104                  	dw 1073				; A#	10
AS65 Assembler for R6502 [1.42].                                     Page  126
-------------------------------- bank\bank0.s --------------------------------

d434 : f403                  	dw 1012				; B		11
                             
d436 :                       mod_sz_sound_e
                             
d436 :                       mod_sz_bios_e
d436 :                       mod_sz_language_s
                             	include "utils/intmath.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  INTMATH.S
                             ;*  Core module for integer maths supported by df
                             ;*  Now supports signed integers in 2s complement
                             ;*  Uses the intmath registers: num_a, num_b, num
                             ;*  Most inputs are through num_a and num_b, with
                             ;*  num_a
                             ;*  Operations: add, sub, swap, 8 bit mult, mult,
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code
                             
                             ;****************************************
                             ;* Add : A + B result in A
                             ;****************************************
d436 :                       int_add
d436 : 18               [ 2] 	clc
d437 : a53d             [ 3] 	lda num_a
d439 : 6541             [ 3] 	adc num_b
d43b : 853d             [ 3] 	sta num_a
d43d : a53e             [ 3] 	lda num_a+1
d43f : 6542             [ 3] 	adc num_b+1
d441 : 853e             [ 3] 	sta num_a+1
d443 : 60               [ 6] 	rts
                             	
                             ;****************************************
                             ;* Sub : A - B result in A
                             ;****************************************
d444 :                       int_sub
d444 : 38               [ 2] 	sec
d445 : a53d             [ 3] 	lda num_a
d447 : e541             [ 3] 	sbc num_b
d449 : 853d             [ 3] 	sta num_a
d44b : a53e             [ 3] 	lda num_a+1
d44d : 6542             [ 3] 	adc num_b+1
d44f : 853e             [ 3] 	sta num_a+1
d451 : 60               [ 6] 	rts
                             	
                             ;****************************************
                             ;* Swp : A <-> B 
                             ;****************************************
d452 :                       int_swp
d452 : a53d             [ 3] 	lda num_a
d454 : a641             [ 3] 	ldx num_b
d456 : 8541             [ 3] 	sta num_b
d458 : 863d             [ 3] 	stx num_a
AS65 Assembler for R6502 [1.42].                                     Page  127
-------------------------------- bank\bank0.s --------------------------------

d45a : a53e             [ 3] 	lda num_a+1
d45c : a642             [ 3] 	ldx num_b+1
d45e : 8542             [ 3] 	sta num_b+1
d460 : 863e             [ 3] 	stx num_a+1
d462 : 60               [ 6] 	rts
                             	
                             ;****************************************
                             ;* Mult : A * B result in A
                             ;* B assumed to be an 8 bit quantity 
                             ;****************************************
d463 :                       int_fast_mult
                             	_cpyZPWord num_a,num_tmp
                             
d46b : a900             [ 2] 	lda #0
d46d : 853d             [ 3] 	sta num_a
d46f : 853e             [ 3] 	sta num_a+1
d471 : a008             [ 2] 	ldy #8
d473 :                       int_fast_mult_cycle
d473 : 4641             [ 5] 	lsr num_b
d475 : 900d             [ 3] 	bcc int_fast_mult_next
d477 : 18               [ 2] 	clc
d478 : a53d             [ 3] 	lda num_a
d47a : 6549             [ 3] 	adc num_tmp
d47c : 853d             [ 3] 	sta num_a
d47e : a53e             [ 3] 	lda num_a+1
d480 : 654a             [ 3] 	adc num_tmp+1
d482 : 853e             [ 3] 	sta num_a+1
d484 :                       int_fast_mult_next
d484 : 0649             [ 5] 	asl num_tmp
d486 : 264a             [ 5] 	rol num_tmp+1
d488 : 88               [ 2] 	dey
d489 : d0e8             [ 3] 	bne int_fast_mult_cycle
d48b : 60               [ 6] 	rts
                             	
                             ;****************************************
                             ;* Mult : A * B result in A
                             ;****************************************
d48c :                       int_mult
                             	_cpyZPWord num_a,num_tmp
                             
d494 : a900             [ 2] 	lda #0
d496 : 853d             [ 3] 	sta num_a
d498 : 853e             [ 3] 	sta num_a+1
d49a : a010             [ 2] 	ldy #16
d49c :                       int_mult_cycle
d49c : 4642             [ 5] 	lsr num_b+1
d49e : 6641             [ 5] 	ror num_b
d4a0 : 900d             [ 3] 	bcc int_mult_next
d4a2 : 18               [ 2] 	clc
d4a3 : a53d             [ 3] 	lda num_a
d4a5 : 6549             [ 3] 	adc num_tmp
d4a7 : 853d             [ 3] 	sta num_a
d4a9 : a53e             [ 3] 	lda num_a+1
d4ab : 654a             [ 3] 	adc num_tmp+1
d4ad : 853e             [ 3] 	sta num_a+1
d4af :                       int_mult_next
d4af : 0649             [ 5] 	asl num_tmp
d4b1 : 264a             [ 5] 	rol num_tmp+1
d4b3 : 88               [ 2] 	dey
d4b4 : d0e6             [ 3] 	bne int_mult_cycle
d4b6 : 60               [ 6] 	rts
                             
AS65 Assembler for R6502 [1.42].                                     Page  128
-------------------------------- bank\bank0.s --------------------------------

                             ;****************************************
                             ;* Div : A / B result in A, remainder X
                             ;****************************************
d4b7 :                       int_div
                             	; adjust signs
d4b7 : a900             [ 2] 	lda #0
d4b9 : 8549             [ 3] 	sta num_tmp				; Assume all +ve
d4bb : a53e             [ 3] 	lda num_a+1				; Check A hi
d4bd : 100f             [ 3] 	bpl int_div_skip_negA
d4bf : e649             [ 5] 	inc num_tmp				; Record sign flip
d4c1 : 38               [ 2] 	sec						; 2's complement A
d4c2 : a900             [ 2] 	lda #0					; by 0-A
d4c4 : e53d             [ 3] 	sbc num_a				; A is now +ve
d4c6 : 853d             [ 3] 	sta num_a
d4c8 : a900             [ 2] 	lda #0
d4ca : e53e             [ 3] 	sbc num_a+1
d4cc : 853e             [ 3] 	sta num_a+1	
d4ce :                       int_div_skip_negA
d4ce : a542             [ 3] 	lda num_b+1				; Check B hi
d4d0 : 100f             [ 3] 	bpl int_div_skip_negB
d4d2 : e649             [ 5] 	inc num_tmp				; Record sign flip
d4d4 : 38               [ 2] 	sec						; 2's complement B
d4d5 : a900             [ 2] 	lda #0					; by 0-B
d4d7 : e541             [ 3] 	sbc num_b				; B is now +ve
d4d9 : 8541             [ 3] 	sta num_b
d4db : a900             [ 2] 	lda #0
d4dd : e542             [ 3] 	sbc num_b+1
d4df : 8542             [ 3] 	sta num_b+1
d4e1 :                       int_div_skip_negB			; num_tmp bit 0=1 for result 
                             	; x is the remainder
d4e1 : a900             [ 2] 	lda #0
d4e3 : 8545             [ 3] 	sta num_x
d4e5 : 8546             [ 3] 	sta num_x+1
                             	; 16 bit division
d4e7 : a010             [ 2] 	ldy #16
d4e9 :                       int_div_cycle
                             	; shift a left 1 bit
d4e9 : 063d             [ 5] 	asl num_a
d4eb : 263e             [ 5] 	rol num_a+1
                             	; shift in to remainder
d4ed : 2645             [ 5] 	rol num_x
d4ef : 2646             [ 5] 	rol num_x+1
                             	; try and subtract b from remainder
d4f1 : 38               [ 2] 	sec
d4f2 : a545             [ 3] 	lda num_x
d4f4 : e541             [ 3] 	sbc num_b
d4f6 : aa               [ 2] 	tax
d4f7 : a546             [ 3] 	lda num_x+1
d4f9 : e542             [ 3] 	sbc num_b+1
d4fb : 9006             [ 4] 	bcc int_div_skip
                             	; so b did fit in to remainder, save it
d4fd : 8645             [ 3] 	stx num_x
d4ff : 8546             [ 3] 	sta num_x+1
d501 : e63d             [ 5] 	inc num_a
d503 :                       int_div_skip
                             	; carry on for 16 bits
d503 : 88               [ 2] 	dey
d504 : d0e3             [ 4] 	bne int_div_cycle
                             	; result in a, remainder in x
                             	; check num_tmp bit 0
d506 : a549             [ 3] 	lda num_tmp
d508 : 2901             [ 2] 	and #1
AS65 Assembler for R6502 [1.42].                                     Page  129
-------------------------------- bank\bank0.s --------------------------------

d50a : f00d             [ 3] 	beq int_div_noflip
d50c : 38               [ 2] 	sec						; 2's complement A
d50d : a900             [ 2] 	lda #0					; by 0-A
d50f : e53d             [ 3] 	sbc num_a				; A is now +ve
d511 : 853d             [ 3] 	sta num_a
d513 : a900             [ 2] 	lda #0
d515 : e53e             [ 3] 	sbc num_a+1
d517 : 853e             [ 3] 	sta num_a+1	
d519 :                       int_div_noflip
d519 : 60               [ 6] 	rts
                             	
                             
                             	include "dflat/dflat.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  DFLAT.S
                             ;*  This is the main controller code file for dfl
                             ;*  This file includes all the required dflat sou
                             ;*  needed:
                             ;*  - error.s is the error handling module
                             ;*  - var.s is the variable handling module
                             ;*  - tokenise.s is the tokenisation module
                             ;*  - progedit.s is the program editing module
                             ;*  - runtime.s is the runtime module
                             ;*  - stack.s is the stack handling module
                             ;*  The above modules include further source file
                             ;*  needed.
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code
                             
d51a :                       mod_sz_dflat_s
                             
                             ;	include "dflat/error.s"  ** included in the mai
                             	include "dflat/var.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  VAR.S
                             ;*  This module handles all the variable manageme
                             ;*  When a new variable is detected during tokeni
                             ;*  is added to the variable tables.  Any subsequ
                             ;*  that variable is tokenised as an index in to 
                             ;*  table.  There are two variable tables:
                             ;*  Variable name table (VNT) keeps track of vari
                             ;*  Variable value table (VVT) maintains variable
                             ;*  including type, dimension (if array) and of c
                             ;*  actual values.  For an array, the value is a 
                             ;*  memory grabbed using the 'malloc' function (s
AS65 Assembler for R6502 [1.42].                                     Page  130
-------------------------------- bank\bank0.s --------------------------------

                             ;*  This approach to variable managemet is direct
                             ;*  Atari 8 bit.  The disadvantage is that during
                             ;*  session you may end up having a much larger v
                             ;*  table than you need.  Why?  Well because say 
                             ;*  %a as a new variable, but then later change i
                             ;*  In this case %a remains in the variable table
                             ;*  only ever adds to the table!  However it is e
                             ;*  solved - when you save and then reload from n
                             ;*  program, the variable table is built up as th
                             ;*  is loaded.
                             ;*  The VNT grows DOWN from the top of free memor
                             ;*  the VVT growing UP from just below the VNT.
                             ;*	This means that the VVT for a variable will al
                             ;*	found in a fixed place in the VVT table and me
                             ;*	For the VNT (names) it grows from vvstart at l
                             ;*
                             ;************************************************
                             
                             
                             	; ROM code
                             	code  
                             
d51a :                       mod_sz_var_s
                             
                             
                             ;****************************************
                             ;* Find a variable
                             ;* CC if found, A has index
                             ;****************************************
d51a :                       df_var_find
                             	; start at the beginning of the vnt table
                             	; vars are stored in reverse order
                             	_cpyZPWord df_vntstrt,df_tmpptrb
                             
                             	; start at end of VVT
                             	_cpyZPWord df_vvtend,df_tmpptra
                             
d52a :                       df_var_match_vnt
                             	; If reached top of VVT then not found
d52a : a5a1             [ 3] 	lda df_tmpptra
d52c : c56d             [ 3] 	cmp df_vvtstrt
d52e : d006             [ 3] 	bne df_var_match_vnt_do
d530 : a5a2             [ 3] 	lda df_tmpptra+1
d532 : c56e             [ 3] 	cmp df_vvtstrt+1
d534 : f04c             [ 3] 	beq df_var_find_no_vnt
d536 :                       df_var_match_vnt_do
                             	; match each char in buffer with vnt
d536 : a47c             [ 3] 	ldy df_linoff
d538 : a200             [ 2] 	ldx #0
d53a :                       df_var_match_vnt_sym
d53a : b90004           [ 4] 	lda df_linbuff,y
d53d : c1a3             [ 6] 	cmp (df_tmpptrb,x)
d53f : d01f             [ 3] 	bne df_var_vnt_sym_nomatch
                             	; if single char match then increment
                             	; source and search
d541 : c8               [ 2] 	iny
                             	_incZPWord df_tmpptrb
                             
                             	; if more chars in vnt entry then continue
d548 : a1a3             [ 6] 	lda (df_tmpptrb,x)
d54a : d0ee             [ 3] 	bne df_var_match_vnt_sym
                             	; if no more chars in vnt entry but
AS65 Assembler for R6502 [1.42].                                     Page  131
-------------------------------- bank\bank0.s --------------------------------

                             	; but chars in buffer then try next vnt
d54c : b90004           [ 4] 	lda df_linbuff,y
                             	; check for valid alpha-numeric
d54f : 2021d7           [ 6] 	jsr df_tk_isalphanum
d552 : 9002             [ 3] 	bcc df_var_check_type
                             	; if there is a valid alpha-num then no match
d554 : b00a             [ 3] 	bcs df_var_vnt_sym_nomatch
d556 :                       df_var_check_type
                             	; if not alpha-num then check for type
                             	; string or int postfix didn't match with VNT
d556 : c925             [ 2] 	cmp #'%'
d558 : f006             [ 3] 	beq df_var_vnt_sym_nomatch
d55a : c924             [ 2] 	cmp #'$'
d55c : f002             [ 3] 	beq df_var_vnt_sym_nomatch
                             	; ok, all good got a match
d55e : d028             [ 3] 	bne df_var_find_true
d560 :                       df_var_vnt_sym_nomatch
                             	; find the zero terminator
d560 : a1a3             [ 6] 	lda (df_tmpptrb,x)
d562 : f009             [ 3] 	beq	df_var_vnt_entry_end
                             	_incZPWord df_tmpptrb
                             
d56a : 4c60d5           [ 3] 	jmp df_var_vnt_sym_nomatch
d56d :                       df_var_vnt_entry_end
                             	; skip over zero terminator
                             	_incZPWord df_tmpptrb
                             
                             	; update vvt address pointer
d573 : 18               [ 2] 	clc
d574 : a5a1             [ 3] 	lda df_tmpptra
d576 : 6908             [ 2] 	adc #8
d578 : 85a1             [ 3] 	sta df_tmpptra
d57a : a5a2             [ 3] 	lda df_tmpptra+1
d57c : 6900             [ 2] 	adc #0
d57e : 85a2             [ 3] 	sta df_tmpptra+1
d580 : d0a8             [ 3] 	bne df_var_match_vnt		; Always - high byte is no
                             
                             	; if at end of vnt then no matches found
d582 :                       df_var_find_no_vnt
d582 : a900             [ 2] 	lda #0
d584 : a200             [ 2] 	ldx #0
d586 : 38               [ 2] 	sec
d587 : 60               [ 6] 	rts
                             
d588 :                       df_var_find_true
                             	; Get slot address into x,a
d588 : a6a1             [ 3] 	ldx df_tmpptra
d58a : a5a2             [ 3] 	lda df_tmpptra+1
                             	
                             	; Consume characters found in source
d58c : 847c             [ 3] 	sty df_linoff
d58e : 18               [ 2] 	clc
d58f : 60               [ 6] 	rts
                             
                             	
                             ;****************************************
                             ;* Insert a variable name in to vnt
                             ;* X = number of bytes to make room
                             ;* Space allocated is;
                             ;*	8 bytes for the new VVT entry
                             ;*  X bytes for the new VNT entry
                             ;* df_vntstrt is new var name entry
AS65 Assembler for R6502 [1.42].                                     Page  132
-------------------------------- bank\bank0.s --------------------------------

                             ;* df_vvtend is new vvt entry
                             ;****************************************
d590 :                       df_var_insert_space
                             	; *** REMEMBER TO DO A SPACE CHECK EVENTUALLY! *
                             
                             	; adjust down the VNT start by VVT size (for ext
                             	; put it in tmpptrb
d590 : 38               [ 2] 	sec
d591 : a569             [ 3] 	lda df_vntstrt
d593 : e908             [ 2] 	sbc #DFVVT_SZ
d595 : 8569             [ 3] 	sta df_vntstrt
d597 : a56a             [ 3] 	lda df_vntstrt+1
d599 : e900             [ 2] 	sbc #0
d59b : 856a             [ 3] 	sta df_vntstrt+1
                             	
                             	; adjust VNT end by VVT size (for extra VVT entr
                             	; and put it in tmpptrc
d59d : 38               [ 2] 	sec
d59e : a56b             [ 3] 	lda df_vntend
d5a0 : e908             [ 2] 	sbc #DFVVT_SZ
d5a2 : 856b             [ 3] 	sta df_vntend
d5a4 : a56c             [ 3] 	lda df_vntend+1
d5a6 : e900             [ 2] 	sbc #0
d5a8 : 856c             [ 3] 	sta df_vntend+1
                             
                             	; Set copy point to new start of VNT
                             	_cpyZPWord df_vntstrt,df_tmpptra
                             
                             
                             	; Now move all bytes from old VNT (higher up) to
d5b2 : 18               [ 2] 	clc
d5b3 :                       df_var_move_byte
                             	; When pointer = vntend then done
d5b3 : a5a1             [ 3] 	lda df_tmpptra
d5b5 : c56b             [ 3] 	cmp df_vntend
d5b7 : d006             [ 3] 	bne df_var_move_byte_do
d5b9 : a5a2             [ 3] 	lda df_tmpptra+1
d5bb : c56c             [ 3] 	cmp df_vntend+1
d5bd : f011             [ 3] 	beq df_var_move_byte_fin
d5bf :                       df_var_move_byte_do
                             	; First the source byte VVT size higher in memor
d5bf : a008             [ 2] 	ldy #DFVVT_SZ
d5c1 : b1a1             [ 5] 	lda (df_tmpptra),y
                             	; And copy to new position lower in memory
d5c3 : a000             [ 2] 	ldy #0
d5c5 : 91a1             [ 5] 	sta (df_tmpptra),y
                             	; Increment memor pointer
                             	_incZPWord df_tmpptra
                             
d5cd : 4cb3d5           [ 3] 	jmp df_var_move_byte		; Always as C is not touch
d5d0 :                       df_var_move_byte_fin
                             	
                             	; Now subtract X bytes from VNT start to accommo
d5d0 : 8638             [ 3] 	stx tmp_d
d5d2 : 38               [ 2] 	sec
d5d3 : a569             [ 3] 	lda df_vntstrt
d5d5 : e538             [ 3] 	sbc tmp_d
d5d7 : 8569             [ 3] 	sta df_vntstrt
d5d9 : a56a             [ 3] 	lda df_vntstrt+1
d5db : e900             [ 2] 	sbc #0
d5dd : 856a             [ 3] 	sta df_vntstrt+1
                             
AS65 Assembler for R6502 [1.42].                                     Page  133
-------------------------------- bank\bank0.s --------------------------------

                             	; VVT end is the same as VNT end
                             	_cpyZPWord df_vntend,df_vvtend
                             
                             
                             	; Copy done increment variable count
d5e7 : e671             [ 5] 	inc df_varcnt
d5e9 : 18               [ 2] 	clc
d5ea : 60               [ 6] 	rts
                             	
                             	
                             ;****************************************
                             ;* Analyse variable name
                             ;* Return type in A
                             ;* NOT C = It is a variable
                             ;* C = It is not a variable
                             ;* X = Length including pre-fixes
                             ;* Y = Offset to next char after var name
                             ;****************************************
d5eb :                       df_var_analyse
                             	; Default type is INT
d5eb : a901             [ 2] 	lda #DFVVT_INT
d5ed : 85a1             [ 3] 	sta df_tmpptra
                             	
                             	; start at the current buffer position
d5ef : a47c             [ 3] 	ldy df_linoff
                             	
                             	; check for PROC prefix
d5f1 : b90004           [ 4] 	lda df_linbuff,y
d5f4 : c95f             [ 2] 	cmp #'_'
                             	; if it is not proc then get the name
d5f6 : d005             [ 3] 	bne df_var_not_proc
                             	; else set type to PROC
d5f8 : a940             [ 2] 	lda #DFVVT_PROC
d5fa : 85a1             [ 3] 	sta df_tmpptra
                             	; skip over prefix
d5fc : c8               [ 2] 	iny
d5fd :                       df_var_not_proc
                             	; found the actual number of alpha nums
d5fd : a2ff             [ 2] 	ldx #0xff
                             	; go back on pos on index as loop always does in
d5ff : 88               [ 2] 	dey
d600 :                       df_var_type_countlen
                             	; count alpha nums
d600 : c8               [ 2] 	iny
d601 : e8               [ 2] 	inx
d602 : b90004           [ 4] 	lda df_linbuff,y
                             	; first char has to be alpha, rest can be alpha-
d605 : e000             [ 2] 	cpx #0
d607 : d007             [ 3] 	bne df_var_type_countlen_alphanum
d609 : 2014d7           [ 6] 	jsr df_tk_isalpha
d60c : b0f2             [ 3] 	bcs df_var_type_countlen
d60e : 9005             [ 3] 	bcc df_var_type_countlen_done
d610 :                       df_var_type_countlen_alphanum
d610 : 2021d7           [ 6] 	jsr df_tk_isalphanum
d613 : b0eb             [ 3] 	bcs df_var_type_countlen
d615 :                       df_var_type_countlen_done
d615 : e000             [ 2] 	cpx #0
d617 : d00a             [ 3] 	bne df_var_analyse_chk_post
                             	; if zero alphanums error but not fatal
d619 :                       df_var_analyse_err
                             	; If already prefix of PROC then fatal error
d619 : a5a1             [ 3] 	lda df_tmpptra
AS65 Assembler for R6502 [1.42].                                     Page  134
-------------------------------- bank\bank0.s --------------------------------

d61b : c940             [ 2] 	cmp #DFVVT_PROC
d61d : f002             [ 3] 	beq df_var_analyse_fatal_err
d61f : 38               [ 2] 	sec
d620 : 60               [ 6] 	rts
d621 :                       df_var_analyse_fatal_err
                             	SWBRK DFERR_SYNTAX
                             
d623 :                       df_var_analyse_chk_post
                             	; first see if the char is % or $
                             	; but cannot already have PROC prefix
d623 : c925             [ 2] 	cmp #'%'
d625 : d00d             [ 3] 	bne df_var_analyse_chk_dollar
d627 : a6a1             [ 3] 	ldx df_tmpptra
d629 : e040             [ 2] 	cpx #DFVVT_PROC
d62b : f0f4             [ 3] 	beq df_var_analyse_fatal_err
                             	; Set to INT type although it is the default alr
d62d : a901             [ 2] 	lda #DFVVT_INT
d62f : 85a1             [ 3] 	sta df_tmpptra
                             	; advance the buffer index
d631 : c8               [ 2] 	iny
d632 : d00f             [ 3] 	bne df_var_analyse_chk_arry
d634 :                       df_var_analyse_chk_dollar
                             	; now see if the char is $
                             	; but cannot already have PROC prefix
d634 : c924             [ 2] 	cmp #'$'
d636 : d00b             [ 3] 	bne df_var_analyse_chk_arry
d638 : a6a1             [ 3] 	ldx df_tmpptra
d63a : e040             [ 2] 	cpx #DFVVT_PROC
d63c : f0e3             [ 3] 	beq df_var_analyse_fatal_err
                             	; Set to STRING type
d63e : a904             [ 2] 	lda #DFVVT_STR
d640 : 85a1             [ 3] 	sta df_tmpptra
                             	; advance the buffer index
d642 : c8               [ 2] 	iny
d643 :                       df_var_analyse_chk_arry
                             	; Check for array type vs PROC
d643 : b90004           [ 4] 	lda df_linbuff,y
d646 : c95b             [ 2] 	cmp #'['
d648 : d00a             [ 3] 	bne df_var_not_arry
                             	; array and proc type not compatible
d64a : a5a1             [ 3] 	lda df_tmpptra
d64c : c940             [ 2] 	cmp #DFVVT_PROC
d64e : f0d1             [ 3] 	beq df_var_analyse_fatal_err
d650 : 0980             [ 2] 	ora #DFVVT_ARRY
d652 : 85a1             [ 3] 	sta df_tmpptra
d654 :                       df_var_not_arry
                             	; Ok got everything
                             	; calculate length from y
                             	; y is next char after var name
d654 : 98               [ 2] 	tya
d655 : 38               [ 2] 	sec
d656 : e57c             [ 3] 	sbc df_linoff			; where we started
                             	; put len in X
d658 : aa               [ 2] 	tax
                             	; put type in A
d659 : a5a1             [ 3] 	lda df_tmpptra
d65b : 18               [ 2] 	clc
d65c : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Find or create a variable
                             ;* If found then type needs to match mask
AS65 Assembler for R6502 [1.42].                                     Page  135
-------------------------------- bank\bank0.s --------------------------------

                             ;* Not a fatal error because could be part
                             ;* of a trial of different parsing options
                             ;****************************************
d65d :                       df_var_findcreate
                             	; save mask
d65d : 48               [ 3] 	pha
d65e : 201ad5           [ 6] 	jsr df_var_find
d661 : b013             [ 3] 	bcs df_var_findcreate_create
                             	; restore mask to check for 0 then push
d663 : 68               [ 4] 	pla
d664 : 48               [ 3] 	pha
                             	; don't check mask if zero
d665 : f008             [ 3] 	beq df_var_findcreate_found
                             	; restore mask
d667 : 68               [ 4] 	pla
d668 : a000             [ 2] 	ldy #DFVVT_TYPE
d66a : 31a1             [ 5] 	and (df_tmpptra),y
                             	; but if mask is non zero then this must be non 
d66c : f019             [ 3] 	beq df_var_findcreate_err
d66e : 48               [ 3] 	pha		; Dummy push to match the pla
d66f :                       df_var_findcreate_found
                             	; discard mask
d66f : 68               [ 4] 	pla	
                             	; put slot address in x,a
d670 : a6a1             [ 3] 	ldx df_tmpptra
d672 : a5a2             [ 3] 	lda df_tmpptra+1
d674 : 18               [ 2] 	clc
d675 : 60               [ 6] 	rts
                             	
                             	;* If no existing variable found, add one to VNT
d676 :                       df_var_findcreate_create
                             	; find type (A) and length (X)
d676 : 20ebd5           [ 6] 	jsr df_var_analyse
                             	; keep A temporarily
d679 : 85a1             [ 3] 	sta df_tmpptra
                             	; if not a variable then return with C=1
d67b : b009             [ 3] 	bcs df_var_findcreate_errp
                             	; check if mask needs to be applied
d67d : 68               [ 4] 	pla
d67e : f009             [ 3] 	beq df_var_analyse_ok
                             	; else mask and check
d680 : 25a1             [ 3] 	and df_tmpptra
                             	; mask match is ok
d682 : d005             [ 3] 	bne df_var_analyse_ok
                             	; else return not found
d684 : f001             [ 3] 	beq df_var_findcreate_err
d686 :                       df_var_findcreate_errp
d686 : 68               [ 4] 	pla
d687 :                       df_var_findcreate_err
d687 : 38               [ 2] 	sec
d688 : 60               [ 6] 	rts
                             
d689 :                       df_var_analyse_ok
                             	; extra space for zero terminator
d689 : e8               [ 2] 	inx
                             	; save data in reverse order to when needed
                             	; by the initialise section x,a (var name sz, ty
                             	; insert space of X bytes
d68a : a5a1             [ 3] 	lda df_tmpptra
d68c : 48               [ 3] 	pha
d68d : 8a               [ 2] 	txa
d68e : 48               [ 3] 	pha
AS65 Assembler for R6502 [1.42].                                     Page  136
-------------------------------- bank\bank0.s --------------------------------

                             	
d68f : 2090d5           [ 6] 	jsr df_var_insert_space
d692 : 9002             [ 3] 	bcc df_var_initialise_var
                             	; error inserting space
                             	SWBRK DFERR_OK
                             
                             	
d696 :                       df_var_initialise_var
d696 : 68               [ 4] 	pla
d697 : 85a5             [ 3] 	sta df_tmpptrc				; var name size + 1
                             
d699 : 68               [ 4] 	pla							; type
d69a : a000             [ 2] 	ldy #DFVVT_TYPE
d69c : 916f             [ 5] 	sta (df_vvtend),y			; put type in vvt slot
d69e : a900             [ 2] 	lda #0						; zero the rest
d6a0 : a007             [ 2] 	ldy #7
d6a2 :                       df_var_zero_vnt
d6a2 : 916f             [ 5] 	sta (df_vvtend),y
d6a4 : 88               [ 2] 	dey
d6a5 : d0fb             [ 3] 	bne df_var_zero_vnt
                             
d6a7 : c6a5             [ 5] 	dec df_tmpptrc				; 1 less to copy variable name
                             
d6a9 : a67c             [ 3] 	ldx df_linoff				; Start at var name beginning
d6ab : a000             [ 2] 	ldy #0
                             	; copy variable name to vnt slot
d6ad :                       df_var_findcreate_copy
d6ad : bd0004           [ 4] 	lda df_linbuff,x
d6b0 : 9169             [ 5] 	sta (df_vntstrt),y
d6b2 : e8               [ 2] 	inx
d6b3 : c8               [ 2] 	iny
d6b4 : c6a5             [ 5] 	dec df_tmpptrc
d6b6 : d0f5             [ 3] 	bne df_var_findcreate_copy
                             	; put in zero terminator
d6b8 : a900             [ 2] 	lda #0
d6ba : 9169             [ 5] 	sta (df_vntstrt),y
                             
                             	; Put X in to Y
d6bc : 8a               [ 2] 	txa
d6bd : a8               [ 2] 	tay
                             
                             	; Return address of slot in X,A
d6be : a66f             [ 3] 	ldx df_vvtend
d6c0 : a570             [ 3] 	lda df_vvtend+1
                             	
d6c2 : 847c             [ 3] 	sty df_linoff				; Y is the main index used
                             
d6c4 : 18               [ 2] 	clc
d6c5 : 60               [ 6] 	rts
                             	
d6c6 :                       mod_sz_var_e
                             
                             	include "dflat/tokenise.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  TOKENISE.S
AS65 Assembler for R6502 [1.42].                                     Page  137
-------------------------------- bank\bank0.s --------------------------------

                             ;*  Controlling module for tokenisation.  Basical
                             ;*  module is given a raw input buffer, which it 
                             ;*  attempt to tokenise fully.  Any syntax errors
                             ;*  thrown at the first point of detection.  If a
                             ;*  well, the parsed input will be in a tokenised
                             ;*  which can be executed in immediate mode or sa
                             ;*  line number order to memory.
                             ;*  dflat syntax is very simple - every statement
                             ;*  with a keyword.  The only exception is assign
                             ;*  procedure invocation - but even these scenari
                             ;*  tokenised so during runtime we just execute t
                             ;*  The raw buffer is consumed one byte at a time
                             ;*  tokenised buffer is written one byte at a tim
                             ;*  syntax means there is no need to undo reads o
                             ;*  or tokenised buffer.  The only refinement is 
                             ;*  allowed to peek a character in the raw buffer
                             ;*  consuming it.
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code
                             
d6c6 :                       mod_sz_tokenise_s
                             
                             
                             ;****************************************
                             ;* df_tk_peek_buf
                             ;* Return next char in A but no change to pointer
                             ;****************************************
d6c6 :                       df_tk_peek_buf
d6c6 : a47c             [ 3] 	ldy df_linoff
d6c8 : b90004           [ 4] 	lda df_linbuff,y
d6cb : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* df_tk_get_buf
                             ;* Return next char in A and inc pointer
                             ;* Don't advance if null char found and Z=1
                             ;****************************************
d6cc :                       df_tk_get_buf
d6cc : a47c             [ 3] 	ldy df_linoff
d6ce : b90004           [ 4] 	lda df_linbuff,y
d6d1 : f003             [ 3] 	beq df_tk_get_buf_null
d6d3 : c8               [ 2] 	iny
d6d4 : 847c             [ 3] 	sty df_linoff
d6d6 :                       df_tk_get_buf_null
d6d6 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* df_tk_put_tok
                             ;* Put A in token buffer and inc pointer
                             ;* C=Clear on exit
                             ;****************************************
d6d7 :                       df_tk_put_tok
d6d7 : a47d             [ 3] 	ldy df_tokoff
d6d9 : 998004           [ 5] 	sta df_tokbuff,y
d6dc : c8               [ 2] 	iny
d6dd : 3004             [ 3] 	bmi df_tk_put_overflow
d6df : 847d             [ 3] 	sty df_tokoff
d6e1 : 18               [ 2] 	clc
d6e2 : 60               [ 6] 	rts
AS65 Assembler for R6502 [1.42].                                     Page  138
-------------------------------- bank\bank0.s --------------------------------

d6e3 :                       df_tk_put_overflow
d6e3 : a958             [ 2] 	lda #'X'
d6e5 : 8d80bb           [ 4] 	sta 48000
                             	SWBRK DFERR_STRLONG
                             
                             
                             ;****************************************
                             ;* df_tk_isdigit
                             ;* Check char in A for number 0-9
                             ;* Return: CC = False, CS = True
                             ;****************************************
d6ea :                       df_tk_isdigit
d6ea : c93a             [ 2] 	cmp #'9'+1
d6ec : b005             [ 3] 	bcs df_tk_isdigit_false
d6ee : c930             [ 2] 	cmp #'0'
d6f0 : 9001             [ 3] 	bcc df_tk_isdigit_false
d6f2 : 60               [ 6] 	rts						; C must be 1
d6f3 :                       df_tk_isdigit_false
d6f3 : 18               [ 2] 	clc
d6f4 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* df_tk_isbin
                             ;* Check char in A for binary digit
                             ;* Return: CC = False, CS = True
                             ;****************************************
d6f5 :                       df_tk_isbin
d6f5 : c930             [ 2] 	cmp #'0'
d6f7 : f005             [ 3] 	beq df_tk_isbin_true	; C=1
d6f9 : c931             [ 2] 	cmp #'1'
d6fb : f001             [ 3] 	beq df_tk_isbin_true	; C=1
d6fd : 18               [ 2] 	clc
d6fe :                       df_tk_isbin_true
d6fe : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* df_tk_ishex
                             ;* Check char in A for number 0-9, A-F, a-f
                             ;* Return: CC = False, CS = True
                             ;****************************************
d6ff :                       df_tk_ishex
d6ff : 48               [ 3] 	pha
d700 : 20ead6           [ 6] 	jsr df_tk_isdigit
d703 : b00a             [ 3] 	bcs df_tk_ishex_truep
d705 : 0920             [ 2] 	ora #0x20
d707 : c967             [ 2] 	cmp #'f'+1
d709 : b006             [ 3] 	bcs df_tk_ishex_false
d70b : c961             [ 2] 	cmp #'a'
d70d : 9002             [ 3] 	bcc df_tk_ishex_false
                             	; C must be 1 here
d70f :                       df_tk_ishex_truep
d70f : 68               [ 4] 	pla
d710 : 60               [ 6] 	rts
d711 :                       df_tk_ishex_false
d711 :                       df_tk_isalpha_false
d711 : 18               [ 2] 	clc
d712 : 68               [ 4] 	pla
d713 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* df_tk_isalpha
                             ;* Check next char in A alpha a-z, A-Z
AS65 Assembler for R6502 [1.42].                                     Page  139
-------------------------------- bank\bank0.s --------------------------------

                             ;* Return: CC = False, CS = True
                             ;****************************************
d714 :                       df_tk_isalpha
d714 : 48               [ 3] 	pha
d715 : 0920             [ 2] 	ora #0x20					; Convert to lower case for checki
d717 : c97b             [ 2] 	cmp #'z'+1
d719 : b0f6             [ 3] 	bcs df_tk_isalpha_false
d71b : c961             [ 2] 	cmp #'a'
d71d : 90f2             [ 3] 	bcc df_tk_isalpha_false
                             	; C must be 1 here
d71f : 68               [ 4] 	pla
d720 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* df_tk_isalphanum
                             ;* Check next char A for a-z,A-Z,0-9
                             ;* Return: CC = False, CS = True
                             ;****************************************
d721 :                       df_tk_isalphanum
d721 : 2014d7           [ 6] 	jsr df_tk_isalpha
d724 : 90c4             [ 4] 	bcc df_tk_isdigit
d726 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* df_tk_isproc
                             ;* Check next char A for _
                             ;* Return: CC = False, CS = True
                             ;****************************************
d727 :                       df_tk_isproc
d727 : c95f             [ 2] 	cmp #'_'
d729 : f001             [ 3] 	beq df_tk_isproc_true	; C=1
d72b : 18               [ 2] 	clc
d72c :                       df_tk_isproc_true
d72c : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* df_tk_skip_ws
                             ;* Skip ws in linbuff
                             ;* Return: linoff updated to next non-ws, A = cha
                             ;****************************************
d72d :                       df_tk_skip_ws
d72d :                       df_tk_ws_loop1
d72d : 20c6d6           [ 6] 	jsr df_tk_peek_buf
d730 : 204ad7           [ 6] 	jsr df_tk_isws
d733 : 9007             [ 3] 	bcc df_tk_ws_done
d735 : e67c             [ 5] 	inc df_linoff
d737 : 20d7d6           [ 6] 	jsr df_tk_put_tok
d73a : 90f1             [ 3] 	bcc df_tk_ws_loop1		; Always as put_tok clears C
d73c :                       df_tk_ws_done
d73c : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* df_tk_skip_ws
                             ;* Skip ws in linbuff
                             ;* Return: linoff updated to next non-ws, A = cha
                             ;****************************************
d73d :                       df_tk_strip_ws
d73d :                       df_tk_sws_loop1
d73d : 20c6d6           [ 6] 	jsr df_tk_peek_buf
d740 : 204ad7           [ 6] 	jsr df_tk_isws
d743 : 90f7             [ 3] 	bcc df_tk_ws_done
d745 : e67c             [ 5] 	inc df_linoff
AS65 Assembler for R6502 [1.42].                                     Page  140
-------------------------------- bank\bank0.s --------------------------------

d747 : 90f4             [ 3] 	bcc df_tk_sws_loop1		; Always as C is not touche
d749 :                       df_tk_sws_done
d749 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* df_tk_isws
                             ;* Check char is ws (only space is counted)
                             ;* Return: CC = False, CS = True
                             ;****************************************
d74a :                       df_tk_isws
d74a : c920             [ 2] 	cmp #' '
d74c : d001             [ 3] 	bne df_tk_isws_false
                             	; C must be 1 here
d74e : 60               [ 6] 	rts
d74f :                       df_tk_isws_false
d74f :                       df_tk_expectok
d74f : 18               [ 2] 	clc
d750 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Find a character expected ignoring ws
                             ;* Input A = expected char
                             ;* CC = found, CS = Error
                             ;****************************************
d751 :                       df_tk_expect
d751 : 48               [ 3] 	pha
                             	; skip ws
d752 : 202dd7           [ 6] 	jsr df_tk_skip_ws
                             	; peek the buffer
d755 : 68               [ 4] 	pla
d756 : a47c             [ 3] 	ldy df_linoff
d758 : d90004           [ 4] 	cmp df_linbuff,y
                             	; if expected char then ok
d75b : f0f2             [ 3] 	beq df_tk_expectok
                             	; else error
d75d :                       df_tk_num_err
d75d :                       df_tk_char_err
d75d : 38               [ 2] 	sec
d75e : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Find a character expected ignoring ws
                             ;* Input A = expected char
                             ;* Tokenises the character as well
                             ;* CC = found, CS = Error
                             ;****************************************
d75f :                       df_tk_expect_tok
d75f : 2051d7           [ 6] 	jsr df_tk_expect
d762 : b006             [ 3] 	bcs df_tk_expecttokret
d764 : 20ccd6           [ 6] 	jsr df_tk_get_buf
d767 : 4cd7d6           [ 3] 	jmp df_tk_put_tok
d76a :                       df_tk_expecttokret
d76a : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Find a character expected ignoring ws
                             ;* Input A = expected char
                             ;* Tokenises the character as well
                             ;* FATAL IF NOT FOUND
                             ;****************************************
d76b :                       df_tk_expect_tok_err
d76b : 205fd7           [ 6] 	jsr df_tk_expect_tok
AS65 Assembler for R6502 [1.42].                                     Page  141
-------------------------------- bank\bank0.s --------------------------------

d76e : b001             [ 3] 	bcs df_tk_expect_tok_fatal
                             	; C must be 0 here
d770 : 60               [ 6] 	rts
d771 :                       df_tk_expect_tok_fatal
                             	SWBRK DFERR_SYNTAX
                             
                             
                             ;****************************************
                             ;* Tokenise a constant number
                             ;****************************************
d773 :                       df_tk_num
                             	; X,A = address, linbuff must be on page boundar
d773 : 18               [ 2] 	clc
d774 : a900             [ 2] 	lda #lo(df_linbuff)
d776 : 657c             [ 3] 	adc df_linoff
d778 : aa               [ 2] 	tax
d779 : a904             [ 2] 	lda #hi(df_linbuff)
d77b : 6900             [ 2] 	adc #0
d77d : a000             [ 2] 	ldy #0				; any numeric format
d77f : 20d4c1           [ 6] 	jsr con_n_to_a
d782 : b0d9             [ 3] 	bcs df_tk_num_err
                             	; A = format
                             	; X = how many digits processed
                             	; Jump over that many chars
d784 : a8               [ 2] 	tay
d785 : 18               [ 2] 	clc
d786 : 8a               [ 2] 	txa
d787 : 657c             [ 3] 	adc df_linoff
d789 : 857c             [ 3] 	sta df_linoff
                             	; Now tokenise an integer
d78b : 98               [ 2] 	tya
d78c : c901             [ 2] 	cmp #NUM_DEC
d78e : d004             [ 3] 	bne df_tk_num_hexbin
d790 : a909             [ 2] 	lda #DFTK_INTDEC	; decimal always an int
d792 : d014             [ 3] 	bne df_tk_num_put
d794 :                       df_tk_num_hexbin
d794 : 18               [ 2] 	clc
d795 : 6904             [ 2] 	adc #4				; Default to BYT
d797 : c907             [ 2] 	cmp #NUM_BIN+4
d799 : f009             [ 3] 	beq df_tk_num_bin
d79b : e004             [ 2] 	cpx #4				; 4 chars processed = byte
d79d : f009             [ 3] 	beq df_tk_num_put
d79f :                       df_tk_num_makeint
d79f : 18               [ 2] 	clc
d7a0 : 6904             [ 2] 	adc #4				; now make INT
d7a2 : d004             [ 3] 	bne df_tk_num_put
d7a4 :                       df_tk_num_bin
d7a4 : e00a             [ 2] 	cpx #0x0a			; 10 chars processed = byte
d7a6 : d0f7             [ 3] 	bne df_tk_num_makeint
d7a8 :                       df_tk_num_put
d7a8 : 20d7d6           [ 6] 	jsr df_tk_put_tok
d7ab : a53d             [ 3] 	lda num_a
d7ad : 20d7d6           [ 6] 	jsr df_tk_put_tok
d7b0 : a53e             [ 3] 	lda num_a+1
d7b2 : 4cd7d6           [ 3] 	jmp df_tk_put_tok
                             
                             ;****************************************
                             ;* Tokenise a constant char
                             ;****************************************
d7b5 :                       df_tk_char
                             	; skip the first quote
d7b5 : 20ccd6           [ 6] 	jsr df_tk_get_buf
AS65 Assembler for R6502 [1.42].                                     Page  142
-------------------------------- bank\bank0.s --------------------------------

                             	; put in the token
d7b8 : a900             [ 2] 	lda #DFTK_CHR
d7ba : 20d7d6           [ 6] 	jsr df_tk_put_tok
                             	; get the char value and save
d7bd : 20ccd6           [ 6] 	jsr df_tk_get_buf
d7c0 : 20d7d6           [ 6] 	jsr df_tk_put_tok
                             	; always put two bytes in, even for a BYTE type
d7c3 : a900             [ 2] 	lda #0
d7c5 : 20d7d6           [ 6] 	jsr df_tk_put_tok
                             	; next byte must be single quote
d7c8 : 20ccd6           [ 6] 	jsr df_tk_get_buf
d7cb : c927             [ 2] 	cmp #0x27
d7cd : d08e             [ 3] 	bne df_tk_char_err
d7cf : 18               [ 2] 	clc
d7d0 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Tokenise a constant string
                             ;****************************************
d7d1 :                       df_tk_str
                             	; skip the first quote
d7d1 : 20ccd6           [ 6] 	jsr df_tk_get_buf
                             	; put in the token
d7d4 : a910             [ 2] 	lda #DFTK_STRLIT
d7d6 : 20d7d6           [ 6] 	jsr df_tk_put_tok
d7d9 :                       df_tk_str_ch
                             	; copy string chars in to token buffer
                             	; until another quote or end of line
d7d9 : 20ccd6           [ 6] 	jsr df_tk_get_buf
d7dc : c900             [ 2] 	cmp #0
d7de : f011             [ 3] 	beq df_tk_str_err
d7e0 : c922             [ 2] 	cmp #0x22
d7e2 : f006             [ 3] 	beq df_tk_str_don
d7e4 : 20d7d6           [ 6] 	jsr df_tk_put_tok
d7e7 : 4cd9d7           [ 3] 	jmp df_tk_str_ch
d7ea :                       df_tk_str_don
                             	; zero terminated strings
d7ea : a900             [ 2] 	lda #0
d7ec : 4cd7d6           [ 3] 	jmp df_tk_put_tok
d7ef :                       df_tk_var_noarry
d7ef : 18               [ 2] 	clc
d7f0 : 60               [ 6] 	rts
d7f1 :                       df_tk_str_err
                             	SWBRK DFERR_SYNTAX
                             
                             
                             ;****************************************
                             ;* Tokenise a constant (num, string, char)
                             ;****************************************
d7f3 :                       df_tk_const
d7f3 : 202dd7           [ 6] 	jsr df_tk_skip_ws
                             	; Check what constant it is
d7f6 : 20c6d6           [ 6] 	jsr df_tk_peek_buf
                             	; Minus symbol could be start of a number
d7f9 : c92d             [ 2] 	cmp #'-'
d7fb : f005             [ 4] 	beq df_tk_const_try_num
d7fd : 20ead6           [ 6] 	jsr df_tk_isdigit
d800 : 9003             [ 3] 	bcc df_tk_const_try_str
d802 :                       df_tk_const_try_num
d802 : 4c73d7           [ 3] 	jmp df_tk_num
d805 :                       df_tk_const_try_str
                             	; check for double quote
AS65 Assembler for R6502 [1.42].                                     Page  143
-------------------------------- bank\bank0.s --------------------------------

d805 : c922             [ 2] 	cmp #0x22
d807 : d003             [ 3] 	bne df_tk_const_try_char
d809 : 4cd1d7           [ 3] 	jmp df_tk_str
d80c :                       df_tk_const_try_char
                             	; check for single apostrophe
d80c : c927             [ 2] 	cmp #0x27
d80e : d003             [ 3] 	bne df_tk_const_err
d810 : 4cb5d7           [ 3] 	jmp df_tk_char
d813 :                       df_tk_const_err
                             	SWBRK DFERR_SYNTAX
                             
                             
                             ;****************************************
                             ;* Tokenise a variable - A = mask
                             ;* Return : A = variable index
                             ;****************************************
d815 :                       df_tk_var
                             	; Find or create variable, address in X,A
d815 : 205dd6           [ 6] 	jsr df_var_findcreate
d818 : 9001             [ 3] 	bcc df_tk_var_cont
d81a : 60               [ 6] 	rts
d81b :                       df_tk_var_cont
                             	; Save X,A for later
d81b : 48               [ 3] 	pha
d81c : 8a               [ 2] 	txa
d81d : 48               [ 3] 	pha
                             	; Put VAR escape in token buffer
d81e : a911             [ 2] 	lda #DFTK_VAR
d820 : 20d7d6           [ 6] 	jsr df_tk_put_tok
                             	; Get variable address and put in token buffer
d823 : 68               [ 4] 	pla
d824 : 20d7d6           [ 6] 	jsr df_tk_put_tok
d827 : 68               [ 4] 	pla
d828 : 20d7d6           [ 6] 	jsr df_tk_put_tok
                             	; count of any array indices
d82b :                       df_tk_var_ck
                             	; check if array procesing needed
d82b : a95b             [ 2] 	lda #'['
d82d : 205fd7           [ 6] 	jsr df_tk_expect_tok
d830 : b0bd             [ 4] 	bcs df_tk_var_noarry
                             	; process numeric expression in bracket
d832 : 4cd1d8           [ 3] 	jmp df_tk_narry
                             
                             ;****************************************
                             ;* Tokenise a parameter in proc definition
                             ;* Return : A = variable index
                             ;****************************************
d835 :                       df_tk_parm
                             	; if preceeding with non-local qualifier DFTK_VA
d835 : 20c6d6           [ 6] 	jsr df_tk_peek_buf
d838 : c926             [ 2] 	cmp #DFTK_VARPARM
d83a : d006             [ 3] 	bne df_tk_parm_skip_var
                             	; get the qualifier and put in token buffer
d83c : 20ccd6           [ 6] 	jsr df_tk_get_buf
d83f : 20d7d6           [ 6] 	jsr df_tk_put_tok
d842 :                       df_tk_parm_skip_var
                             	; don't have a certain type of var
d842 : a900             [ 2] 	lda #0
d844 : 4c15d8           [ 3] 	jmp df_tk_var
                             
                             
                             ;****************************************
AS65 Assembler for R6502 [1.42].                                     Page  144
-------------------------------- bank\bank0.s --------------------------------

                             ;* Tokenise a variable to localise
                             ;* Return : A,X = variable index
                             ;****************************************
d847 :                       df_tk_localvar
                             	; Find or create variable, index in A
d847 : 205dd6           [ 6] 	jsr df_var_findcreate
d84a : 9001             [ 3] 	bcc df_tk_localvar_cont
d84c : 60               [ 6] 	rts
d84d :                       df_tk_localvar_cont
                             	; Save variable address for later
d84d : 48               [ 3] 	pha
d84e : 8a               [ 2] 	txa
d84f : 48               [ 3] 	pha
                             	; Put VAR escape in token buffer
d850 : a911             [ 2] 	lda #DFTK_VAR
d852 : 20d7d6           [ 6] 	jsr df_tk_put_tok
                             	; Get variable index and put in token buffer
d855 : 68               [ 4] 	pla
d856 : 20d7d6           [ 6] 	jsr df_tk_put_tok
d859 : 68               [ 4] 	pla
d85a : 4cd7d6           [ 3] 	jmp df_tk_put_tok
                             
                             ;****************************************
                             ;* Tokenise call or def of proc
                             ;* Mode : A = 0 means def, else call
                             ;****************************************
d85d :                       df_tk_proc
d85d : 858b             [ 3] 	sta df_procmode
d85f : 202dd7           [ 6] 	jsr df_tk_skip_ws
                             	; Find or create proc, index in A
d862 : a940             [ 2] 	lda #DFVVT_PROC
d864 : 205dd6           [ 6] 	jsr df_var_findcreate
d867 : b066             [ 3] 	bcs df_tk_proc_err
                             
                             	; Save variable address for later
d869 : 868e             [ 3] 	stx df_procptr
d86b : 858f             [ 3] 	sta df_procptr+1
                             
                             	; Put PROC escape in token buffer
d86d : a912             [ 2] 	lda #DFTK_PROC
d86f : 20d7d6           [ 6] 	jsr df_tk_put_tok
                             	; Get variable address and put in token buffer
d872 : a58e             [ 3] 	lda df_procptr
d874 : 20d7d6           [ 6] 	jsr df_tk_put_tok
d877 : a58f             [ 3] 	lda df_procptr+1
d879 : 20d7d6           [ 6] 	jsr df_tk_put_tok
                             
                             	; initially assume no args
d87c : a900             [ 2] 	lda #0
d87e : 858c             [ 3] 	sta df_procargs
                             
                             	; Must have an open bracket
d880 : a928             [ 2] 	lda #'('
d882 : 206bd7           [ 6] 	jsr df_tk_expect_tok_err
                             	; if immediately followed by close bracket then 
d885 : 20c6d6           [ 6] 	jsr df_tk_peek_buf
d888 : c929             [ 2] 	cmp #')'
d88a : f030             [ 3] 	beq df_tk_proc_noparm
                             	; else tokenise parm variables
d88c :                       df_tk_proc_parms
d88c : 202dd7           [ 6] 	jsr df_tk_skip_ws
                             	; call appropriate routine for mode
AS65 Assembler for R6502 [1.42].                                     Page  145
-------------------------------- bank\bank0.s --------------------------------

d88f : a58b             [ 3] 	lda df_procmode
d891 : d006             [ 3] 	bne df_tk_proc_call
                             	; tokenise parameter variable in def mode
d893 : 2035d8           [ 6] 	jsr df_tk_parm
d896 : 4ca2d8           [ 3] 	jmp df_tk_proc_skip_call
d899 :                       df_tk_proc_call
                             	; tokenise expression in call mode
                             	;**CHECK**
d899 : a58c             [ 3] 	lda df_procargs	; procargs could be impacted ins
d89b : 48               [ 3] 	pha
d89c : 2051d9           [ 6] 	jsr df_tk_expression
d89f : 68               [ 4] 	pla
d8a0 : 858c             [ 3] 	sta df_procargs
d8a2 :                       df_tk_proc_skip_call
d8a2 : b02a             [ 3] 	bcs df_tk_proc_errp
                             	; increment number of args
d8a4 : e68c             [ 5] 	inc df_procargs
                             	; what is next non ws char
d8a6 : 202dd7           [ 6] 	jsr df_tk_skip_ws
d8a9 : c92c             [ 2] 	cmp #','
d8ab : f006             [ 3] 	beq df_tk_proc_comma
d8ad : c929             [ 2] 	cmp #')'
d8af : d01d             [ 3] 	bne df_tk_proc_errp
d8b1 : f009             [ 3] 	beq df_tk_proc_noparm
                             	; comma found, more parms to process
d8b3 :                       df_tk_proc_comma
d8b3 : 20ccd6           [ 6] 	jsr df_tk_get_buf
d8b6 : 20d7d6           [ 6] 	jsr df_tk_put_tok
d8b9 : 4c8cd8           [ 3] 	jmp df_tk_proc_parms
d8bc :                       df_tk_proc_noparm
                             	; consume the close bracket
d8bc : 20ccd6           [ 6] 	jsr df_tk_get_buf
d8bf : 20d7d6           [ 6] 	jsr df_tk_put_tok
                             
                             	; update arg count if def mode
d8c2 : a68b             [ 3] 	ldx df_procmode
d8c4 : d006             [ 3] 	bne df_tk_proc_skip_args
                             	; use address of proc
                             	; put arg count in dim2
d8c6 : a004             [ 2] 	ldy #DFVVT_DIM2
d8c8 : a58c             [ 3] 	lda df_procargs
d8ca : 918e             [ 5] 	sta (df_procptr),y
d8cc :                       df_tk_proc_skip_args
d8cc : 18               [ 2] 	clc
d8cd : 60               [ 6] 	rts
d8ce :                       df_tk_proc_errp
d8ce : 68               [ 4] 	pla
d8cf :                       df_tk_proc_err
                             	SWBRK DFERR_SYNTAX
                             
                             
                             ;****************************************
                             ;* Parse array index
                             ;****************************************
d8d1 :                       df_tk_narry
                             	; if array open bracket encountered
                             	; then tokenise a numeric expression
d8d1 : 2051d9           [ 6] 	jsr df_tk_expression
                             	; If a comma is next, then another expression
d8d4 : a92c             [ 2] 	lda #','
d8d6 : 205fd7           [ 6] 	jsr df_tk_expect_tok
d8d9 : b003             [ 3] 	bcs df_tk_narry_end
AS65 Assembler for R6502 [1.42].                                     Page  146
-------------------------------- bank\bank0.s --------------------------------

d8db : 2051d9           [ 6] 	jsr df_tk_expression
d8de :                       df_tk_narry_end
                             	; after the second dimension, must be close sq b
d8de : a95d             [ 2] 	lda #']'
d8e0 : 4c6bd7           [ 3] 	jmp df_tk_expect_tok_err
                             
                             ;****************************************
                             ;* Parse bracket
                             ;****************************************
d8e3 :                       df_tk_nbrkt
                             	; if  open bracket encountered
                             	; then tokenise a numeric expression
d8e3 : 2051d9           [ 6] 	jsr df_tk_expression
d8e6 : a929             [ 2] 	lda #')'
d8e8 : 4c6bd7           [ 3] 	jmp df_tk_expect_tok_err
                             
                             ;****************************************
                             ;* Parse call to numeric proc
                             ;****************************************
d8eb :                       df_tk_nterm_proc
                             	; call mode
d8eb : a901             [ 2] 	lda #1
d8ed : 4c5dd8           [ 3] 	jmp df_tk_proc
                             
                             ;****************************************
                             ;* Parse numeric term
                             ;****************************************
d8f0 :                       df_tk_nterm
                             	; skip any ws first, copying in to tokbuff
                             	; A containts the non-ws char
d8f0 : 202dd7           [ 6] 	jsr df_tk_skip_ws
d8f3 : c900             [ 2] 	cmp #0
d8f5 : f004             [ 3] 	beq df_tk_nterm_done
d8f7 : c93a             [ 2] 	cmp #':'
d8f9 : d002             [ 3] 	bne df_tk_nterm_cont
d8fb :                       df_tk_nterm_done
d8fb :                       df_tk_nop_false
d8fb : 38               [ 2] 	sec
d8fc : 60               [ 6] 	rts
d8fd :                       df_tk_nterm_cont
                             	; if open bracket then process it
d8fd : c928             [ 2] 	cmp #'('
d8ff : d009             [ 4] 	bne df_tk_nterm_tryfn
                             	; get the bracket and put in token buffer
d901 : 20ccd6           [ 6] 	jsr df_tk_get_buf
d904 : 20d7d6           [ 6] 	jsr df_tk_put_tok
                             	; go process the open bracket
d907 : 4ce3d8           [ 3] 	jmp df_tk_nbrkt
d90a :                       df_tk_nterm_tryfn
d90a : 48               [ 3] 	pha
                             	; try decoding a built-in function
d90b : a902             [ 2] 	lda #DFTK_FN
d90d : 202eda           [ 6] 	jsr df_tk_matchtok
d910 : b00e             [ 3] 	bcs df_tk_nterm_try_proc
                             	; pull old A in to Y but don't use
d912 : 68               [ 4] 	pla
d913 : a8               [ 2] 	tay
                             	; restore A and put the token with MSB set
d914 : 8a               [ 2] 	txa
d915 : 0980             [ 2] 	ora #0x80
d917 : 20d7d6           [ 6] 	jsr df_tk_put_tok
d91a : 2000da           [ 6] 	jsr df_tk_exec_parser
AS65 Assembler for R6502 [1.42].                                     Page  147
-------------------------------- bank\bank0.s --------------------------------

d91d : b01b             [ 3] 	bcs df_tk_nterm_err
d91f : 60               [ 6] 	rts
d920 :                       df_tk_nterm_try_proc
d920 : 68               [ 4] 	pla
                             	; if it's not a func then try proc
d921 : 2027d7           [ 6] 	jsr df_tk_isproc
d924 : 9006             [ 3] 	bcc df_tk_nterm_try_var
d926 : 20ebd8           [ 6] 	jsr df_tk_nterm_proc
d929 : b00f             [ 3] 	bcs df_tk_nterm_err
d92b : 60               [ 6] 	rts
d92c :                       df_tk_nterm_try_var
                             	; Non-zero mask means var must be this type
d92c : a900             [ 2] 	lda #0
d92e : 2015d8           [ 6] 	jsr df_tk_var
d931 : b001             [ 3] 	bcs df_tk_nterm_try_const
d933 : 60               [ 6] 	rts
d934 :                       df_tk_nterm_try_const
                             	; Try decoding a constant
d934 : 20f3d7           [ 6] 	jsr df_tk_const
d937 : b001             [ 3] 	bcs df_tk_nterm_err
d939 : 60               [ 6] 	rts
d93a :                       df_tk_nterm_err
                             	SWBRK DFERR_SYNTAX
                             
                             
                             ;****************************************
                             ;* Parse numeric operator
                             ;****************************************
d93c :                       df_tk_nop
d93c : 202dd7           [ 6] 	jsr df_tk_skip_ws
d93f : c900             [ 2] 	cmp #0
d941 : f0b8             [ 4] 	beq df_tk_nop_false
                             	; must be an operator token for numeric
d943 : a90c             [ 2] 	lda #DFTK_OP | DFTK_STROP
d945 : 202eda           [ 6] 	jsr df_tk_matchtok
d948 : b0b1             [ 4] 	bcs df_tk_nop_false
                             	; got a token
d94a : 0980             [ 2] 	ora #DFTK_TOKEN
d94c : 20d7d6           [ 6] 	jsr df_tk_put_tok
d94f : 18               [ 2] 	clc
d950 : 60               [ 6] 	rts
                             
                             	
                             ;****************************************
                             ;* Parse numeric expression
                             ;****************************************
d951 :                       df_tk_expression
                             	; Tokenise a numeric term
d951 : 20f0d8           [ 6] 	jsr df_tk_nterm
d954 : b006             [ 3] 	bcs df_tk_expre_err
                             	; Try and tokenise a numeric operator
d956 : 203cd9           [ 6] 	jsr df_tk_nop
                             	; If an operator was tokenised
                             	; then loop back for another term
d959 : 90f6             [ 3] 	bcc df_tk_expression
                             	; If no operator was found then
                             	; expression is done
d95b :                       df_tk_not_eos
d95b : 18               [ 2] 	clc
d95c :                       df_tk_expre_err
d95c : 60               [ 6] 	rts
                             
AS65 Assembler for R6502 [1.42].                                     Page  148
-------------------------------- bank\bank0.s --------------------------------

                             ;****************************************
                             ;* Find expected token and parse expression
                             ;****************************************
d95d :                       df_tk_tok_expression
d95d : 206bd7           [ 6] 	jsr df_tk_expect_tok_err
d960 : 4c51d9           [ 3] 	jmp df_tk_expression
                             
                             
                             ;****************************************
                             ;* Check end of statement
                             ;****************************************
d963 :                       df_tk_isEOS
d963 : a93a             [ 2] 	lda #':'
d965 : 205fd7           [ 6] 	jsr df_tk_expect_tok
d968 : b0f1             [ 3] 	bcs df_tk_not_eos
                             	; this is the position of the next statement
d96a : a57d             [ 3] 	lda df_tokoff
                             	; put it in the last statement offset slot
d96c : a47f             [ 3] 	ldy df_nxtstidx
d96e : 998004           [ 5] 	sta df_tokbuff,y
d971 : 38               [ 2] 	sec
d972 : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* Parse user defined proc
                             ;****************************************
d973 :                       df_tk_parse_user_proc
                             	; put proc token in as a call
d973 : a981             [ 2] 	lda #0x81
d975 : 20d7d6           [ 6] 	jsr df_tk_put_tok
d978 : a901             [ 2] 	lda #1
d97a : 4c5dd8           [ 3] 	jmp df_tk_proc
                             
                             
                             ;****************************************
                             ;* Parse a command
                             ;* Do not fatal error if this fails
                             ;****************************************
d97d :                       df_tk_parse_command
                             	; only looking for keywords
d97d : a901             [ 2] 	lda #DFTK_KW
d97f : 202eda           [ 6] 	jsr df_tk_matchtok
                             	; if didn't find regular keywords then try non f
d982 : b010             [ 3] 	bcs df_tk_parse_command_err
                             	; if match then store token in the line buffer
                             	; Set MSB
d984 : 0980             [ 2] 	ora #0x80
d986 : 20d7d6           [ 6] 	jsr df_tk_put_tok
                             	; call the parser to do tokenise based on the st
d989 : a583             [ 3] 	lda df_symoff
d98b : 2000da           [ 6] 	jsr df_tk_exec_parser
d98e : b004             [ 3] 	bcs df_tk_parse_command_err
                             	; [1] ignore white space but keep it
d990 : 202dd7           [ 6] 	jsr df_tk_skip_ws
                             	; No error in parsing this command
d993 :                       df_tk_parse_command_done
d993 : 18               [ 2] 	clc
d994 :                       df_tk_parse_command_err
d994 : 60               [ 6] 	rts
                             
                             
AS65 Assembler for R6502 [1.42].                                     Page  149
-------------------------------- bank\bank0.s --------------------------------

                             ;****************************************
                             ;* lexer
                             ;****************************************
d995 :                       df_lexer_line
d995 : a900             [ 2] 	lda #0
                             	; start at the beginning of the line buffer
d997 : 857c             [ 3] 	sta df_linoff
                             	; start at the beginning of the tokenised buffer
d999 : 857d             [ 3] 	sta df_tokoff
                             	; set current line to the token buffer
d99b : a980             [ 2] 	lda #lo(df_tokbuff)
d99d : 8586             [ 3] 	sta df_currlin
d99f : a904             [ 2] 	lda #hi(df_tokbuff)
d9a1 : 8587             [ 3] 	sta df_currlin+1
                             	; Set the line length to 0
d9a3 : a900             [ 2] 	lda #0
d9a5 : 20d7d6           [ 6] 	jsr df_tk_put_tok
                             
                             	; any leading white space, ignore and discard
d9a8 : 203dd7           [ 6] 	jsr df_tk_strip_ws
                             
                             	; if peek next character is a number then assume
                             	; else assume a statement
d9ab : 20ead6           [ 6] 	jsr df_tk_isdigit
d9ae : 9006             [ 3] 	bcc df_lexer_skip_lnum
                             	; if line number then capture the line number an
d9b0 : 200fda           [ 6] 	jsr df_tk_linenum
d9b3 : 4cbed9           [ 3] 	jmp df_tk_body
d9b6 :                       df_lexer_skip_lnum
                             	; if no line number then zero out the line numbe
                             	; line zero will indicate an immediate mode comm
d9b6 : a900             [ 2] 	lda #0
d9b8 : 20d7d6           [ 6] 	jsr df_tk_put_tok				; Line num low byte
d9bb : 20d7d6           [ 6] 	jsr df_tk_put_tok				; Line num high byte
d9be :                       df_tk_body
                             	; Offset for next statement
d9be : a57d             [ 3] 	lda df_tokoff
d9c0 : 857f             [ 3] 	sta df_nxtstidx
d9c2 : a900             [ 2] 	lda #0
d9c4 : 20d7d6           [ 6] 	jsr df_tk_put_tok				; Offset to next statement
                             	; [1] capture white space from line buffer in to
d9c7 : 202dd7           [ 6] 	jsr df_tk_skip_ws
                             	; If next non ws is zero then this is an empty l
                             	; so return with length zero but line number fil
                             	; token buffer
d9ca : c900             [ 2] 	cmp #0
d9cc : f02e             [ 3] 	beq df_tk_line_empty
                             	; if next char is _ then parse a user defined pr
d9ce : 2027d7           [ 6] 	jsr df_tk_isproc
d9d1 : 9006             [ 3] 	bcc df_tk_try_command
d9d3 : 2073d9           [ 6] 	jsr df_tk_parse_user_proc
d9d6 : 4ce5d9           [ 3] 	jmp df_tk_done
d9d9 :                       df_tk_try_command
                             	; try  a keyword
d9d9 : 207dd9           [ 6] 	jsr df_tk_parse_command
d9dc : b002             [ 3] 	bcs	df_tk_try_assign
d9de : 9005             [ 3] 	bcc df_tk_done
d9e0 :                       df_tk_try_assign
                             	; nothing but to try an assignment operation
d9e0 : 2075dd           [ 6] 	jsr df_tk_assign
d9e3 : b019             [ 3] 	bcs	df_tk_parseerror
d9e5 :                       df_tk_done
AS65 Assembler for R6502 [1.42].                                     Page  150
-------------------------------- bank\bank0.s --------------------------------

                             	; put statement index stuff here in case of mult
                             	; check for : and if present tokenise plus updat
                             	; then go back to try and process another statem
d9e5 : 2063d9           [ 6] 	jsr df_tk_isEOS
d9e8 : b0d4             [ 3] 	bcs df_tk_body
                             	; if not at end of line, then must be error
d9ea : 20c6d6           [ 6] 	jsr df_tk_peek_buf
d9ed : c900             [ 2] 	cmp #0
d9ef : d00d             [ 3] 	bne df_tk_parseerror
                             	; Get line length length
d9f1 : a47d             [ 3] 	ldy df_tokoff
                             	; ensure there is always a zero after the last t
d9f3 : a900             [ 2] 	lda #0
d9f5 : 998004           [ 5] 	sta df_tokbuff,y
                             	; save the line length
d9f8 : 98               [ 2] 	tya
d9f9 : 8d8004           [ 4] 	sta df_tokbuff
d9fc :                       df_tk_line_empty
d9fc : 18               [ 2] 	clc
d9fd : 60               [ 6] 	rts
d9fe :                       df_tk_parseerror
                             	SWBRK DFERR_SYNTAX
                             
                             
                             ;****************************************
                             ;* df_tk_parsestatement
                             ;* Execute parse routine for this statement
                             ;* Input: df_tokoff is the token found
                             ;* Return: CC = Parsed ok, CS = Error
                             ;****************************************
da00 :                       df_tk_exec_parser
da00 : 0a               [ 2] 	asl a
da01 : aa               [ 2] 	tax
da02 : bd41dc           [ 4] 	lda df_tk_tokenjmp,x
da05 : 85a1             [ 3] 	sta df_tmpptra
da07 : bd42dc           [ 4] 	lda df_tk_tokenjmp+1,x
da0a : 85a2             [ 3] 	sta df_tmpptra+1
da0c : 6ca100           [ 6] 	jmp (df_tmpptra)
                             
                             
                             ;****************************************
                             ;* df_tk_linenum
                             ;* Tokenise line number
                             ;****************************************
da0f :                       df_tk_linenum
                             	; Convert line number to 16 bit number
                             	; Save the line number
                             	; Increment the buffer pointer
da0f : 18               [ 2] 	clc
da10 : a900             [ 2] 	lda #lo(df_linbuff)
da12 : 657c             [ 3] 	adc df_linoff
da14 : aa               [ 2] 	tax
da15 : a904             [ 2] 	lda #hi(df_linbuff)
da17 : 6900             [ 2] 	adc #0
da19 : a001             [ 2] 	ldy #1			; Decimal format only
da1b : 20d4c1           [ 6] 	jsr con_n_to_a
da1e : 18               [ 2] 	clc
da1f : 8a               [ 2] 	txa
da20 : 657c             [ 3] 	adc df_linoff
da22 : 857c             [ 3] 	sta df_linoff
                             	; Now save line number
da24 : a53d             [ 3] 	lda num_a
AS65 Assembler for R6502 [1.42].                                     Page  151
-------------------------------- bank\bank0.s --------------------------------

da26 : 20d7d6           [ 6] 	jsr df_tk_put_tok
da29 : a53e             [ 3] 	lda num_a+1
da2b : 4cd7d6           [ 3] 	jmp df_tk_put_tok
                             
                             ;****************************************
                             ;* df_tk_matchtok
                             ;* Try and find a token match against the table d
                             ;* Input:
                             ;*			Current df_linbuff and df_linoff
                             ;* Return: 	CC = No Error, CS = Error
                             ;*			df_linoff points to next char if CC else unc
                             ;*			df_symoff is the symbol table index
                             ;****************************************
da2e :                       df_tk_matchtok
                             	; save the mask to check types against
da2e : 48               [ 3] 	pha
                             	; Start at token symbols beginning
da2f : a9b0             [ 2] 	lda #lo(df_tokensyms)
da31 : 8581             [ 3] 	sta df_symtab
da33 : a9da             [ 2] 	lda #hi(df_tokensyms)
da35 : 8582             [ 3] 	sta df_symtab+1
da37 : a900             [ 2] 	lda #0
da39 : 8583             [ 3] 	sta df_symoff
da3b :                       df_tk_checknexttok
                             	; check this token type first
da3b : 68               [ 4] 	pla
da3c : 48               [ 3] 	pha
da3d : a683             [ 3] 	ldx df_symoff
da3f : 3d03dd           [ 4] 	and df_tk_tokentype,x
da42 : f032             [ 3] 	beq df_tk_symnomatch
                             	; Special check for operator token
                             	; because of order of precedence fudge
                             	; ******FIX THIS ONE DAY!!!!!!******
                             	; if parm and token type = DFTK_OP then ok
                             	; if parm and token type <> DFTK_OP then not ok
da44 : bd03dd           [ 4] 	lda df_tk_tokentype,x
da47 : 2908             [ 2] 	and #DFTK_OP
da49 : f009             [ 3] 	beq df_tk_matchtok_skip_op
da4b : 68               [ 4] 	pla
da4c : 48               [ 3] 	pha
da4d : 2908             [ 2] 	and #DFTK_OP
da4f : 3d03dd           [ 4] 	and df_tk_tokentype,x
da52 : f022             [ 3] 	beq df_tk_symnomatch
da54 :                       df_tk_matchtok_skip_op
                             	; From the line buffer current pointer
                             	; Check for a token match
da54 : a47c             [ 3] 	ldy df_linoff
da56 : a200             [ 2] 	ldx #0
da58 :                       df_tk_checktokch
                             	; Get symtable char
                             	; and mask off MSB
da58 : a181             [ 6] 	lda (df_symtab,x)
                             	; Save the value and mask off MSB
da5a : 48               [ 3] 	pha
da5b : 297f             [ 2] 	and #0x7f
                             	; Compare with current line buffer char
da5d : d90004           [ 4] 	cmp df_linbuff,y
                             	; If chars not match then this symbol fails
da60 : d013             [ 3] 	bne df_tk_symnomatchp
                             	; If match and symbol has MSB then
                             	; all of the symbol matched
da62 : 68               [ 4] 	pla
AS65 Assembler for R6502 [1.42].                                     Page  152
-------------------------------- bank\bank0.s --------------------------------

da63 : 3033             [ 3] 	bmi df_tk_symfound
                             	; else more chars to match
                             	; so increment line buffer pointers
                             	_incZPWord df_symtab
                             
da6b : c8               [ 2] 	iny
                             	; If buffer is '.' then let this be a match
da6c : b90004           [ 4] 	lda df_linbuff,y
da6f : c92e             [ 2] 	cmp #'.'
da71 : f025             [ 3] 	beq df_tk_symfound
da73 : d0e3             [ 3] 	bne df_tk_checktokch	; branch always
da75 :                       df_tk_symnomatchp
da75 : 68               [ 4] 	pla
da76 :                       df_tk_symnomatch
                             	; Increment symbol counter to next symbol
da76 : e683             [ 5] 	inc df_symoff
da78 :                       df_tk_symnextentry
da78 : a200             [ 2] 	ldx #0
da7a : a181             [ 6] 	lda (df_symtab,x)
                             	; End of symbol is MSB
da7c : 3009             [ 3] 	bmi  df_tk_foundsymend
                             	_incZPWord df_symtab
                             
da84 : 4c78da           [ 3] 	jmp df_tk_symnextentry
da87 :                       df_tk_foundsymend
                             	; Increment char to point to new symbol
                             	; for matching with line buffer
                             	_incZPWord df_symtab
                             
                             	; If next char is not zero then
                             	; try and match with line buffer
da8d : a181             [ 6] 	lda (df_symtab,x)
da8f : d0aa             [ 3] 	bne df_tk_checknexttok
                             	; else symbol table exhausted
                             	; so no match found
                             	; pop mask off stack
da91 : 68               [ 4] 	pla
                             	; Zero symbol counter
da92 : a900             [ 2] 	lda #0
da94 : 8583             [ 3] 	sta df_symoff
                             	; Set C to indicate error (no match)
da96 : 38               [ 2] 	sec
da97 : 60               [ 6] 	rts
da98 :                       df_tk_symfound
                             	; Full match with keyword in symtable but
                             	; if matching with something that ended in alpha
                             	; then check the next buffer char is not alphanu
                             	; as this could be part of a variable name
                             	; Point to next buffer char in any case
da98 : c8               [ 2] 	iny
                             	; First mask off MSB
da99 : 297f             [ 2] 	and #0x7f
                             	; Then check if alpha
da9b : 2014d7           [ 6] 	jsr df_tk_isalpha
                             	; if not alpha then we're definitely done
da9e : 9008             [ 3] 	bcc df_tk_symfound_final
                             	; else check buffer
daa0 : b90004           [ 4] 	lda df_linbuff,y
                             	; if it is an alphanum then
daa3 : 2021d7           [ 6] 	jsr df_tk_isalphanum
                             	; do not count as a match
daa6 : b0ce             [ 3] 	bcs df_tk_symnomatch
AS65 Assembler for R6502 [1.42].                                     Page  153
-------------------------------- bank\bank0.s --------------------------------

daa8 :                       df_tk_symfound_final
                             	; pop mask off stack
daa8 : 68               [ 4] 	pla
                             	; Save line buffer pointer (points to next char)
                             	; Clear C to indicate success (match)
daa9 : 847c             [ 3] 	sty df_linoff
daab : a583             [ 3] 	lda df_symoff
daad : aa               [ 2] 	tax
daae : 18               [ 2] 	clc
daaf : 60               [ 6] 	rts
                             
                             	include "dflat/tksymtab.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  TKSYMTAB.S
                             ;*  Runtime token jump table.
                             ;*  dflat uses four key tables to tokenise and ru
                             ;*  - df_tokensyms    - table of token symbols
                             ;*  - df_tk_tokentype - table of token types
                             ;*  - df_tk_tokenjmp  - table of tokenising routi
                             ;*  - df_rt_tokenjmp  - table of runtime routines
                             ;*  The key is the token symbols.  When a line is
                             ;*  in to the raw (untokenised) buffer, df_tokens
                             ;*  used to identify tokens.  The position of the
                             ;*  token is used to then look up type and jump v
                             ;*  in the other tables.
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code  
                             
                             ; Statement Token table
                             ; keywords
dab0 :                       df_tokensyms
dab0 : 80                    	db	0x80						; Implicit numeric assign
dab1 : 80                    	db	0x80						; Implicit call procedure
dab2 : bb                    	db	";"+0x80					; Comment
dab3 : 7072696e746cee        	db	"printl",'n'+0x80			; println exprlist
daba : 7072696e7461f4        	db	"printa",'t'+0x80			; printat x,y,exprlist
dac1 : 7072696ef4            	db	"prin",'t'+0x80				; print exprlist
dac6 : 6465e6                	db	"de",'f'+0x80				; def_subname
dac9 : 656e646465e6          	db	"endde",'f'+0x80			; enddef
dacf : 7265747572ee          	db	"retur",'n'+0x80			; return
dad5 : 61626f72f4            	db	"abor",'t'+0x80				; abort
dada : 6c6f6361ec            	db	"loca",'l'+0x80				; local varlist
dadf : 6469ed                	db	"di",'m'+0x80				; dim varlist
dae2 : 7265706561f4          	db	"repea",'t'+0x80			; repeat
dae8 : 756e7469ec            	db	"unti", 'l'+0x80			; until condition
daed : 666ff2                	db	"fo",'r'+0x80				; for var=start,end,incremen
daf0 : 6e6578f4              	db	"nex",'t'+0x80				; next
daf4 : 7768696ce5            	db	"whil",'e'+0x80				; while condition
daf9 : 77656ee4              	db	"wen",'d'+0x80				; wend
dafd : 69e6                  	db	"i",'f'+0x80				; if condition
daff : 656c73e5              	db	"els",'e'+0x80				; else
db03 : 656e6469e6            	db	"endi",'f'+0x80				; endif
AS65 Assembler for R6502 [1.42].                                     Page  154
-------------------------------- bank\bank0.s --------------------------------

db08 : 656c69e6              	db	"eli",'f'+0x80				; elif condition
db0c : 646174e1              	db	"dat",'a'+0x80				; data
db10 : ae                    	db	'.'+0x80					; assembler command
db11 : 7275ee                	db	"ru",'n'+0x80				; run
db14 : 6c6973f4              	db	"lis",'t'+0x80				; list _proc-|*|line,line
db18 : 696e7075f4            	db	"inpu",'t'+0x80				; input var
db1d : 746578f4              	db	"tex",'t'+0x80				; text
db21 : 706c6ff4              	db	"plo",'t'+0x80				; plot x,y,char|string
db25 : 637572736ff2          	db	"curso",'r'+0x80			; cursor n
db2b : 636cf3                	db	"cl",'s'+0x80				; cls
db2e : 706f6be5              	db	"pok",'e'+0x80				; poke a,v
db32 : 646f6be5              	db	"dok",'e'+0x80				; doke a,v
db36 : 736f756ee4            	db	"soun",'d'+0x80				; sound
db3b : 6d757369e3            	db	"musi",'c'+0x80				; music
db40 : 706c61f9              	db	"pla",'y'+0x80				; play
db44 : 736176e5              	db	"sav",'e'+0x80				; save "fname"
db48 : 6c6f61e4              	db	"loa",'d'+0x80				; load "fname"
db4c : 726561e4              	db	"rea",'d'+0x80				; read
db50 : 6e65f7                	db	"ne",'w'+0x80				; new
db53 : 72656e75ed            	db	"renu",'m'+0x80				; renum start,offset,incre
db58 : 776169f4              	db	"wai",'t'+0x80				; wait delay
db5c : 72657365f4            	db	"rese",'t'+0x80				; reset var
db61 : 68697265f3            	db	"hire",'s'+0x80				; hires col
db66 : 706f696ef4            	db	"poin",'t'+0x80				; point x,y
db6b : 6c696ee5              	db	"lin",'e'+0x80				; line x0,y0,x1,y1
db6f : 6c696e6574ef          	db	"linet",'o'+0x80			; lineto x1,y1
db75 : 7069786d6f64e5        	db	"pixmod",'e'+0x80			; pixmode n
db7c : 696eeb                	db	"in",'k'+0x80				; ink n
db7f : 70617065f2            	db	"pape",'r'+0x80				; paper n
db84 : 636972636ce5          	db	"circl",'e'+0x80			; circle x,y,r
db8a : 68696d65ed            	db	"hime",'m'+0x80				; himem addr
db8f : 6d6f6e69746ff2        	db	"monito",'r'+0x80			; monitor
db96 : 737072636861f2        	db	"sprcha",'r'+0x80			; sprchar sp,ch
db9d : 737072706ff3          	db	"sprpo",'s'+0x80			; sprpos sp,x,y
dba3 : 7370727570e4          	db	"sprup",'d'+0x80			; sprupd
dba9 : 737072696e69f4        	db	"sprini",'t'+0x80			; sprinit
dbb0 : 7370726d756c74e9      	db	"sprmult",'i'+0x80			; sprmulti x[],y[]
dbb8 : 62736176e5            	db	"bsav",'e'+0x80				; bsave addr,len,"fname"
dbbd : 626c6f61e4            	db	"bloa",'d'+0x80				; bload addr,"fname"
dbc2 : 74736176e5            	db	"tsav",'e'+0x80				; tsave "fname"
dbc7 : 746c6f61e4            	db	"tloa",'d'+0x80				; tload "fname"
                             ; Functions
dbcc : 7065656ba8            	db	"peek",'('+0x80				; peek(x)
dbd1 : 6465656ba8            	db	"deek",'('+0x80				; peek(x)
dbd6 : 737469636ba8          	db	"stick",'('+0x80			; stick(x)
dbdc : 676574a8              	db	"get",'('+0x80				; get(x)
dbe0 : 636872a8              	db	"chr",'('+0x80				; chr(x)
dbe4 : 6c656674a8            	db	"left",'('+0x80				; left(x$,y)
dbe9 : 7269676874a8          	db	"right",'('+0x80			; right(x$,y)
dbef : 6d6964a8              	db	"mid",'('+0x80				; mid(x$,y)
dbf3 : 6c656ea8              	db	"len",'('+0x80				; len(x$)
dbf7 : 6d656da8              	db	"mem",'('+0x80				; mem(x)
dbfb : 7363726ea8            	db	"scrn",'('+0x80				; scrn(x,y)
dc00 : 726e64a8              	db	"rnd",'('+0x80				; rnd(x)
dc04 : 656c6170736564a8      	db	"elapsed",'('+0x80			; elapsed(var)
dc0c : 63616c6ca8            	db	"call",'('+0x80				; call(addr,A,X,Y)
dc11 : 686578a8              	db	"hex",'('+0x80				; hex(x)
dc15 : 617363a8              	db	"asc",'('+0x80				; asc(x$)
dc19 : 76616ca8              	db	"val",'('+0x80				; val(x$)
dc1d : 706978656ca8          	db	"pixel",'('+0x80			; pixel(x,y)
dc23 : 737072686974a8        	db	"sprhit",'('+0x80			; sprhit(sp)
                             ; Numeric operators, in priority
AS65 Assembler for R6502 [1.42].                                     Page  155
-------------------------------- bank\bank0.s --------------------------------

dc2a : aa                    	db	'*'+0x80					; Multiply
dc2b : af                    	db 	'/'+0x80					; Divide
dc2c : dc                    	db 	'\\'+0x80					; Modulus
dc2d : 3cbc                  	db	'<','<'+0x80				; Shift left
dc2f : 3ebe                  	db	'>','>'+0x80				; Shift right
dc31 : ab                    	db 	'+'+0x80					; Add
dc32 : ad                    	db	'-'+0x80					; Subtract
                             ; Bool and conditional operators, in priority
dc33 : a6                    	db '&'+0x80						; AND
dc34 : fc                    	db '|'+0x80						; OR
dc35 : de                    	db '^'+0x80						; EOR
dc36 : 3cbd                  	db "<",'='+0x80					; Less than or equal
dc38 : 3ebd                  	db ">",'='+0x80					; Greater than or equal
dc3a : 3cbe                  	db "<",'>'+0x80					; Not equal
dc3c : bc                    	db '<'+0x80						; Less than
dc3d : be                    	db '>'+0x80						; Greater than
dc3e : 3dbd                  	db "=",'='+0x80					; Equality (always last)
                             
dc40 : 00                    	db  0
                             
                             
                             	
                             	
                             	include "dflat/tkjmptab.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  TKJUMPTAB.S
                             ;*  Runtime token jump table.
                             ;*  dflat uses four key tables to tokenise and ru
                             ;*  - df_tokensyms    - table of token symbols
                             ;*  - df_tk_tokentype - table of token types
                             ;*  - df_tk_tokenjmp  - table of tokenising routi
                             ;*  - df_rt_tokenjmp  - table of runtime routines
                             ;*  The key is the token symbols.  When a line is
                             ;*  in to the raw (untokenised) buffer, df_tokens
                             ;*  used to identify tokens.  The position of the
                             ;*  token is used to then look up type and jump v
                             ;*  in the other tables.
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code  
                             
                             ; Tokeniser jump table
                             ; In token order of df_tokensyms
dc41 :                       df_tk_tokenjmp
dc41 : 75dd                  	dw	df_tk_assign
dc43 : 25de                  	dw	df_tk_callproc
dc45 : 7edd                  	dw	df_tk_comment
dc47 : c6dd                  	dw	df_tk_println
dc49 : c0dd                  	dw	df_tk_printat
dc4b : c6dd                  	dw	df_tk_print
dc4d : 06de                  	dw	df_tk_def
dc4f : 62de                  	dw	df_tk_enddef
dc51 : 64de                  	dw	df_tk_return
AS65 Assembler for R6502 [1.42].                                     Page  156
-------------------------------- bank\bank0.s --------------------------------

dc53 : 62de                  	dw	df_tk_abort
dc55 : f5dd                  	dw	df_tk_local
dc57 : e4dd                  	dw	df_tk_dim
dc59 : 62de                  	dw	df_tk_repeat
dc5b : 68de                  	dw	df_tk_until
dc5d : 0cde                  	dw	df_tk_for
dc5f : 62de                  	dw	df_tk_next
dc61 : 68de                  	dw	df_tk_while
dc63 : 62de                  	dw	df_tk_wend
dc65 : 68de                  	dw	df_tk_if
dc67 : 62de                  	dw	df_tk_else
dc69 : 62de                  	dw	df_tk_endif
dc6b : 68de                  	dw	df_tk_elseif
dc6d : cddd                  	dw	df_tk_data
dc6f : 75f9                  	dw	df_tk_asm_parse_command
dc71 : 62de                  	dw	df_tk_run
dc73 : afdd                  	dw	df_tk_list
dc75 : dbdd                  	dw	df_tk_input
dc77 : 62de                  	dw	df_tk_text
dc79 : 78de                  	dw	df_tk_plot
dc7b : 68de                  	dw	df_tk_cursor
dc7d : 62de                  	dw	df_tk_cls
dc7f : 6ede                  	dw	df_tk_poke
dc81 : 6ede                  	dw	df_tk_doke
dc83 : 78de                  	dw	df_tk_sound
dc85 : 81de                  	dw	df_tk_music
dc87 : 81de                  	dw	df_tk_play
dc89 : 68de                  	dw	df_tk_save
dc8b : 68de                  	dw	df_tk_load
dc8d : e4dd                  	dw	df_tk_read
dc8f : 62de                  	dw	df_tk_new
dc91 : 78de                  	dw	df_tk_renum
dc93 : 68de                  	dw	df_tk_wait
dc95 : 27de                  	dw	df_tk_reset
dc97 : 62de                  	dw	df_tk_hires
dc99 : 6ede                  	dw	df_tk_point
dc9b : 81de                  	dw	df_tk_line
dc9d : 6ede                  	dw	df_tk_lineto
dc9f : 68de                  	dw	df_tk_pixmode
dca1 : 68de                  	dw	df_tk_ink
dca3 : 68de                  	dw	df_tk_paper
dca5 : 78de                  	dw	df_tk_circle
dca7 : 68de                  	dw	df_tk_himem
dca9 : 62de                  	dw	df_tk_monitor
dcab : 6ede                  	dw	df_tk_sprchar
dcad : 78de                  	dw	df_tk_sprpos
dcaf : 62de                  	dw	df_tk_sprupd
dcb1 : 62de                  	dw	df_tk_sprinit
dcb3 : 6ede                  	dw	df_tk_sprmulti
dcb5 : 78de                  	dw	df_tk_bsave
dcb7 : 6ede                  	dw	df_tk_bload
dcb9 : 68de                  	dw	df_tk_tsave
dcbb : 68de                  	dw	df_tk_tload
                             	
dcbd : 32de                  	dw	df_tk_peek
dcbf : 32de                  	dw	df_tk_deek
dcc1 : 37de                  	dw	df_tk_stick
dcc3 : 32de                  	dw	df_tk_get
dcc5 : 32de                  	dw	df_tk_chr
dcc7 : 48de                  	dw	df_tk_left
dcc9 : 48de                  	dw	df_tk_right
dccb : 4ede                  	dw	df_tk_mid
AS65 Assembler for R6502 [1.42].                                     Page  157
-------------------------------- bank\bank0.s --------------------------------

dccd : 32de                  	dw	df_tk_len
dccf : 32de                  	dw	df_tk_mem
dcd1 : 48de                  	dw	df_tk_scrn
dcd3 : 32de                  	dw	df_tk_rnd
dcd5 : 3dde                  	dw	df_tk_elapsed
dcd7 : 54de                  	dw	df_tk_call
dcd9 : 32de                  	dw	df_tk_hex
dcdb : 32de                  	dw	df_tk_asc
dcdd : 32de                  	dw	df_tk_val
dcdf : 48de                  	dw	df_tk_pixel
dce1 : 32de                  	dw	df_tk_sprhit
                             	
dce3 : 62de                  	dw	df_tk_mult
dce5 : 62de                  	dw	df_tk_div
dce7 : 62de                  	dw	df_tk_mod
dce9 : 62de                  	dw	df_tk_asl
dceb : 62de                  	dw	df_tk_lsr
dced : 62de                  	dw	df_tk_add
dcef : 62de                  	dw	df_tk_sub
                             	
dcf1 : 62de                  	dw	df_tk_and
dcf3 : 62de                  	dw	df_tk_or
dcf5 : 62de                  	dw	df_tk_eor
dcf7 : 62de                  	dw	df_tk_lte
dcf9 : 62de                  	dw	df_tk_gte
dcfb : 62de                  	dw	df_tk_ne
dcfd : 62de                  	dw	df_tk_lt
dcff : 62de                  	dw	df_tk_gt
dd01 : 62de                  	dw	df_tk_eq
                             
                             
                             	
                             	
                             	
                             	
                             	
                             	include "dflat/tktyptab.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  RTJUMPTAB.S
                             ;*  Runtime token jump table.
                             ;*  dflat uses four key tables to tokenise and ru
                             ;*  - df_tokensyms    - table of token symbols
                             ;*  - df_tk_tokentype - table of token types
                             ;*  - df_tk_tokenjmp  - table of tokenising routi
                             ;*  - df_rt_tokenjmp  - table of runtime routines
                             ;*  The key is the token symbols.  When a line is
                             ;*  in to the raw (untokenised) buffer, df_tokens
                             ;*  used to identify tokens.  The position of the
                             ;*  token is used to then look up type and jump v
                             ;*  in the other tables.
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code  
AS65 Assembler for R6502 [1.42].                                     Page  158
-------------------------------- bank\bank0.s --------------------------------

                             
                             ; Tokeniser type table (is it a keyword, function
                             ; In token order of df_tokensyms
dd03 :                       df_tk_tokentype
dd03 : 01                    	db	DFTK_KW
dd04 : 01                    	db	DFTK_KW
dd05 : 01                    	db	DFTK_KW
dd06 : 01                    	db	DFTK_KW
dd07 : 01                    	db	DFTK_KW
dd08 : 01                    	db	DFTK_KW
dd09 : 01                    	db	DFTK_KW
dd0a : 01                    	db	DFTK_KW
dd0b : 01                    	db	DFTK_KW
dd0c : 01                    	db	DFTK_KW
dd0d : 01                    	db	DFTK_KW
dd0e : 01                    	db	DFTK_KW
dd0f : 01                    	db	DFTK_KW
dd10 : 01                    	db	DFTK_KW
dd11 : 01                    	db	DFTK_KW
dd12 : 01                    	db	DFTK_KW
dd13 : 01                    	db	DFTK_KW
dd14 : 01                    	db	DFTK_KW
dd15 : 01                    	db	DFTK_KW
dd16 : 01                    	db	DFTK_KW
dd17 : 01                    	db	DFTK_KW
dd18 : 01                    	db	DFTK_KW
dd19 : 01                    	db	DFTK_KW
dd1a : 01                    	db	DFTK_KW
dd1b : 01                    	db	DFTK_KW
dd1c : 01                    	db	DFTK_KW
dd1d : 01                    	db	DFTK_KW
dd1e : 01                    	db	DFTK_KW
dd1f : 01                    	db	DFTK_KW
dd20 : 01                    	db	DFTK_KW
dd21 : 01                    	db	DFTK_KW
dd22 : 01                    	db	DFTK_KW
dd23 : 01                    	db	DFTK_KW
dd24 : 01                    	db	DFTK_KW
dd25 : 01                    	db	DFTK_KW
dd26 : 01                    	db	DFTK_KW
dd27 : 01                    	db	DFTK_KW
dd28 : 01                    	db	DFTK_KW
dd29 : 01                    	db	DFTK_KW
dd2a : 01                    	db	DFTK_KW
dd2b : 01                    	db	DFTK_KW
dd2c : 01                    	db	DFTK_KW
dd2d : 01                    	db	DFTK_KW
dd2e : 01                    	db	DFTK_KW
dd2f : 01                    	db	DFTK_KW
dd30 : 01                    	db	DFTK_KW
dd31 : 01                    	db	DFTK_KW
dd32 : 01                    	db	DFTK_KW
dd33 : 01                    	db	DFTK_KW
dd34 : 01                    	db	DFTK_KW
dd35 : 01                    	db	DFTK_KW
dd36 : 01                    	db	DFTK_KW
dd37 : 01                    	db	DFTK_KW
dd38 : 01                    	db	DFTK_KW
dd39 : 01                    	db	DFTK_KW
dd3a : 01                    	db	DFTK_KW
dd3b : 01                    	db	DFTK_KW
dd3c : 01                    	db	DFTK_KW
AS65 Assembler for R6502 [1.42].                                     Page  159
-------------------------------- bank\bank0.s --------------------------------

dd3d : 01                    	db	DFTK_KW
dd3e : 01                    	db	DFTK_KW
dd3f : 01                    	db	DFTK_KW
dd40 : 01                    	db	DFTK_KW
                             
dd41 : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
dd42 : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
dd43 : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
dd44 : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
dd45 : 42                    	db 	DFTK_FN | DFTK_STR
dd46 : 42                    	db 	DFTK_FN | DFTK_STR
dd47 : 42                    	db 	DFTK_FN | DFTK_STR
dd48 : 42                    	db 	DFTK_FN | DFTK_STR
dd49 : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
dd4a : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
dd4b : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
dd4c : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
dd4d : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
dd4e : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
dd4f : 42                    	db 	DFTK_FN | DFTK_STR
dd50 : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
dd51 : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
dd52 : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
dd53 : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
                             	;* Operators add the order of precedence (0=high
dd54 : 38                    	db 	DFTK_OP | DFTK_INT | DFTK_BYT + 0
dd55 : 38                    	db 	DFTK_OP | DFTK_INT | DFTK_BYT + 0
dd56 : 38                    	db 	DFTK_OP | DFTK_INT | DFTK_BYT + 0
dd57 : 39                    	db 	DFTK_OP | DFTK_INT | DFTK_BYT + 1
dd58 : 39                    	db 	DFTK_OP | DFTK_INT | DFTK_BYT + 1
dd59 : 3e                    	db 	DFTK_OP | DFTK_STROP | DFTK_INT | DFTK_BYT +
dd5a : 3a                    	db 	DFTK_OP | DFTK_INT | DFTK_BYT + 2
                             
dd5b : 3d                    	db 	DFTK_OP | DFTK_INT | DFTK_BYT + 5
dd5c : 3d                    	db 	DFTK_OP | DFTK_INT | DFTK_BYT + 5
dd5d : 3d                    	db 	DFTK_OP | DFTK_INT | DFTK_BYT + 5
dd5e : 3c                    	db 	DFTK_OP | DFTK_INT | DFTK_BYT + 4
dd5f : 3c                    	db 	DFTK_OP | DFTK_INT | DFTK_BYT + 4
dd60 : 3c                    	db 	DFTK_OP | DFTK_INT | DFTK_BYT + 4
dd61 : 3c                    	db 	DFTK_OP | DFTK_INT | DFTK_BYT + 4
dd62 : 3c                    	db 	DFTK_OP | DFTK_INT | DFTK_BYT + 4
dd63 : 3f                    	db 	DFTK_OP | DFTK_INT | DFTK_BYT + 7
                             
                             
                             	
                             	
                             	
                             	
                             
                             	include "dflat/toksubs.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  TOKSUBS.S
                             ;*  Module that implements the tokenisation of ke
                             ;*  When a line is being parsed, the index of the
                             ;*  found in the symbol table is used to call a r
AS65 Assembler for R6502 [1.42].                                     Page  160
-------------------------------- bank\bank0.s --------------------------------

                             ;*  here.  The job of a routine here is then to f
                             ;*  parse the raw input e.g. a command that takes
                             ;*  parameters, need to do what it needs to ident
                             ;*  Despite the number of keywords in dflat, this
                             ;*  anywhere near the size of rtsubs.s (the runti
                             ;*  equivalent of this) because there is so much 
                             ;*  synactically.
                             ;*  The tokenised output is put in to its own buf
                             ;*  if the whole input was tokenised successfully
                             ;*  dflat will either try and execute (if in imme
                             ;*  mode), or save it to program memory in line n
                             ;*  order.
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code  
                             
dd64 :                       mod_sz_toksubs_s
                             
                             ;****************************************
                             ;* Parse assignment preamble
                             ;****************************************
dd64 :                       df_tk_preassign
                             	; Put assignment token
                             	; assume its a numeric int for now
dd64 : a980             [ 2] 	lda #0x80
dd66 : 20d7d6           [ 6] 	jsr df_tk_put_tok
                             	
                             	; first find or create a variable
dd69 : a900             [ 2] 	lda #0	
dd6b : 2015d8           [ 6] 	jsr df_tk_var
                             	; next char should be '='
dd6e : a93d             [ 2] 	lda #'='
dd70 : 4c6bd7           [ 3] 	jmp df_tk_expect_tok_err
                             
dd73 :                       df_tk_error
                             	SWBRK DFERR_SYNTAX
                             
                             
                             ;****************************************
                             ;* Parse numeric assignment
                             ;****************************************
dd75 :                       df_tk_assign
dd75 : 2064dd           [ 6] 	jsr df_tk_preassign
                             	; tokenise an expression (int or byte)
dd78 : 2051d9           [ 6] 	jsr df_tk_expression
dd7b : b0f6             [ 3] 	bcs df_tk_error
dd7d : 60               [ 6] 	rts
                             
                             
dd7e :                       df_tk_comment
                             	; copy all subsequent chars to token
dd7e : 20ccd6           [ 6] 	jsr df_tk_get_buf
dd81 : f006             [ 3] 	beq df_tk_comment_done
dd83 : 20d7d6           [ 6] 	jsr df_tk_put_tok
dd86 : 4c7edd           [ 3] 	jmp df_tk_comment
dd89 :                       df_tk_comment_done
dd89 : 18               [ 2] 	clc
dd8a : 60               [ 6] 	rts
                             
                             ; Utility to get procedure name with _
AS65 Assembler for R6502 [1.42].                                     Page  161
-------------------------------- bank\bank0.s --------------------------------

dd8b :                       df_tk_listp_procname
                             	; try and find the first proc
dd8b : a95f             [ 2] 	lda #'_'
dd8d : 205fd7           [ 6] 	jsr df_tk_expect_tok
dd90 : b01b             [ 3] 	bcs df_tk_listp_procname_err
                             	; now get first alpha then all alphanum
dd92 : 20c6d6           [ 6] 	jsr df_tk_peek_buf
dd95 : 2014d7           [ 6] 	jsr df_tk_isalpha
dd98 : 9013             [ 3] 	bcc df_tk_listp_procname_err
dd9a :                       df_tk_listp_procname_ch
dd9a : 20c6d6           [ 6] 	jsr df_tk_peek_buf
dd9d : 2021d7           [ 6] 	jsr df_tk_isalphanum
dda0 : 9009             [ 3] 	bcc df_tk_listp_procname_ok
dda2 : 20ccd6           [ 6] 	jsr df_tk_get_buf
dda5 : 20d7d6           [ 6] 	jsr df_tk_put_tok
dda8 : 4c9add           [ 3] 	jmp df_tk_listp_procname_ch
ddab :                       df_tk_listp_procname_ok
ddab : 18               [ 2] 	clc
ddac : 60               [ 6] 	rts
ddad :                       df_tk_listp_procname_err
ddad : 38               [ 2] 	sec
ddae : 60               [ 6] 	rts
                             
                             ; list		: list whole program
                             ; list n	: list line n to end
                             ; list *	: list all procedures
                             ; list _proc: list _proc lines
ddaf :                       df_tk_list
ddaf : 208bdd           [ 6] 	jsr df_tk_listp_procname
ddb2 : 900a             [ 3] 	bcc df_tk_list_done
                             	; if not found try '*' or normal list
ddb4 :                       df_tk_list_procs
                             	; first try for list symbol
ddb4 : a92a             [ 2] 	lda #'*'
ddb6 : 205fd7           [ 6] 	jsr df_tk_expect_tok
ddb9 : 9003             [ 3] 	bcc df_tk_list_done
                             	; else normal line number or nothing
ddbb :                       df_tk_list_line
                             	; tokenise an expression
ddbb : 2051d9           [ 6] 	jsr df_tk_expression
ddbe :                       df_tk_list_done
ddbe : 18               [ 2] 	clc
ddbf : 60               [ 6] 	rts
                             
                             ; printat,print,println can have 0,1 or many expr
ddc0 :                       df_tk_printat
                             	; Must get 2 parms for x,y
ddc0 : 206ede           [ 6] 	jsr df_tk_2parms
                             	; try getting more parms
ddc3 : 4cd2dd           [ 3] 	jmp df_tk_expr_more
ddc6 :                       df_tk_println
ddc6 :                       df_tk_print
                             	; tokenise an expression ok if null
ddc6 : 2051d9           [ 6] 	jsr df_tk_expression
ddc9 : 9007             [ 3] 	bcc df_tk_expr_more
ddcb :                       df_tk_print_done
ddcb :                       df_tk_data_done
ddcb : 18               [ 2] 	clc
ddcc : 60               [ 6] 	rts
                             
                             ; these must have 1 or more expressions
ddcd :                       df_tk_data
AS65 Assembler for R6502 [1.42].                                     Page  162
-------------------------------- bank\bank0.s --------------------------------

ddcd :                       df_tk_asm_db
ddcd :                       df_tk_asm_dw
ddcd :                       df_tk_next_expr
                             	; tokenise an expression
ddcd : 2051d9           [ 6] 	jsr df_tk_expression
ddd0 : b05e             [ 4] 	bcs df_tk_error2
                             ; this loop keeps processing comma seprated exore
ddd2 :                       df_tk_expr_more
                             	; is there more to come?
ddd2 : a92c             [ 2] 	lda #','
ddd4 : 205fd7           [ 6] 	jsr df_tk_expect_tok
ddd7 : b0f2             [ 3] 	bcs df_tk_data_done
ddd9 : 90f2             [ 3] 	bcc df_tk_next_expr
                             
dddb :                       df_tk_input
dddb : 202dd7           [ 6] 	jsr df_tk_skip_ws
                             	; tokenise a variable
ddde : a900             [ 2] 	lda #0
dde0 : 2015d8           [ 6] 	jsr df_tk_var
                             	; either cc or cs depending on error condition
dde3 : 60               [ 6] 	rts
                             	
dde4 :                       df_tk_read
dde4 :                       df_tk_dim
dde4 : 202dd7           [ 6] 	jsr df_tk_skip_ws
                             	; tokenise a variable
dde7 : a900             [ 2] 	lda #0
dde9 : 2015d8           [ 6] 	jsr df_tk_var
                             	; if not at the end then keep going
ddec : a92c             [ 2] 	lda #','
ddee : 205fd7           [ 6] 	jsr df_tk_expect_tok
ddf1 : 90f1             [ 3] 	bcc df_tk_dim
ddf3 : 18               [ 2] 	clc
ddf4 : 60               [ 6] 	rts
                             
ddf5 :                       df_tk_local
ddf5 : 202dd7           [ 6] 	jsr df_tk_skip_ws
                             	; tokenise a variable
ddf8 : a900             [ 2] 	lda #0
ddfa : 2047d8           [ 6] 	jsr df_tk_localvar
                             	; if not at the end then keep going
ddfd : a92c             [ 2] 	lda #','
ddff : 205fd7           [ 6] 	jsr df_tk_expect_tok
de02 : 90f1             [ 4] 	bcc df_tk_local
de04 : 18               [ 2] 	clc
de05 : 60               [ 6] 	rts
                             
                             ; A = 0 : Def
                             ; A = 1 : Call
de06 :                       df_tk_def
de06 : a900             [ 2] 	lda #0
de08 : 205dd8           [ 6] 	jsr df_tk_proc
de0b : 60               [ 6] 	rts
                             
                             
                             ; syntax : for a=1,10,1
de0c :                       df_tk_for
de0c : 202dd7           [ 6] 	jsr df_tk_skip_ws
                             
                             	; tokenise the for variable
de0f : a901             [ 2] 	lda #DFVVT_INT
de11 : 2015d8           [ 6] 	jsr df_tk_var
AS65 Assembler for R6502 [1.42].                                     Page  163
-------------------------------- bank\bank0.s --------------------------------

                             
                             	; always expect '='
                             	; then starting value
de14 : a93d             [ 2] 	lda #'='
de16 : 205dd9           [ 6] 	jsr df_tk_tok_expression
                             	
                             	; always expect ',' separator
                             	; then ending value
de19 : a92c             [ 2] 	lda #','
de1b : 205dd9           [ 6] 	jsr df_tk_tok_expression
                             
                             	; always expect ',' separator
                             	; then step value
de1e : a92c             [ 2] 	lda #','
de20 : 205dd9           [ 6] 	jsr df_tk_tok_expression
                             
de23 :                       df_tk_for_done
de23 : 18               [ 2] 	clc
de24 : 60               [ 6] 	rts
                             	
                             ; call to proc should not occur by itself
de25 :                       df_tk_callproc
de25 : 38               [ 2] 	sec
de26 : 60               [ 6] 	rts
                             
                             ; timer reset expects an int variable only
de27 :                       df_tk_reset
de27 : 202dd7           [ 6] 	jsr df_tk_skip_ws
                             
                             	; tokenise a variable
de2a : a901             [ 2] 	lda #DFVVT_INT
de2c : 2015d8           [ 6] 	jsr df_tk_var
de2f : 60               [ 6] 	rts
                             
de30 :                       df_tk_error2
                             	SWBRK DFERR_SYNTAX
                             
                             
                             ; These functions expect 1 parmeter
de32 :                       df_tk_len
de32 :                       df_tk_chr
de32 :                       df_tk_get
de32 :                       df_tk_deek
de32 :                       df_tk_vpeek
de32 :                       df_tk_peek
de32 :                       df_tk_mem
de32 :                       df_tk_rnd
de32 :                       df_tk_hex
de32 :                       df_tk_asc
de32 :                       df_tk_val
de32 :                       df_tk_sprhit
de32 : 2051d9           [ 6] 	jsr df_tk_expression
de35 : b0f9             [ 3] 	bcs df_tk_error2
de37 :                       df_tk_closebrkt
de37 :                       df_tk_stick				; This function needs no parms
de37 : a929             [ 2] 	lda #')'
de39 : 206bd7           [ 6] 	jsr df_tk_expect_tok_err
de3c : 60               [ 6] 	rts
                             
                             ; This function expects a variable only
de3d :                       df_tk_elapsed
de3d : 202dd7           [ 6] 	jsr df_tk_skip_ws
AS65 Assembler for R6502 [1.42].                                     Page  164
-------------------------------- bank\bank0.s --------------------------------

                             
                             	; tokenise a variable
de40 : a901             [ 2] 	lda #DFVVT_INT
de42 : 2015d8           [ 6] 	jsr df_tk_var
                             	; must have close braket
de45 : 4c37de           [ 3] 	jmp df_tk_closebrkt
                             
                             ; These functions expect 2 parameters
de48 :                       df_tk_left
de48 :                       df_tk_right
de48 :                       df_tk_scrn
de48 :                       df_tk_pixel
de48 : 206ede           [ 6] 	jsr df_tk_2parms
de4b : 4c37de           [ 3] 	jmp df_tk_closebrkt
                             
                             ; These functions expect 3 parameters
de4e :                       df_tk_mid
de4e : 2078de           [ 6] 	jsr df_tk_3parms
de51 : 4c37de           [ 3] 	jmp df_tk_closebrkt
                             
                             ; These functions expect 4 parameters
de54 :                       df_tk_call
de54 : 206ede           [ 6] 	jsr df_tk_2parms
de57 : a92c             [ 2] 	lda #','
de59 : 206bd7           [ 6] 	jsr df_tk_expect_tok_err
de5c : 206ede           [ 6] 	jsr df_tk_2parms
de5f : 4c37de           [ 3] 	jmp df_tk_closebrkt
                             
                             ;all these commands require no parameters
de62 :                       df_tk_else
de62 :                       df_tk_endif
de62 :                       df_tk_enddef
de62 :                       df_tk_abort
de62 :                       df_tk_repeat
de62 :                       df_tk_next
de62 :                       df_tk_wend
de62 :                       df_tk_run
de62 :                       df_tk_dir
de62 :                       df_tk_cls
de62 :                       df_tk_new
de62 :                       df_tk_mult
de62 :                       df_tk_div
de62 :                       df_tk_mod
de62 :                       df_tk_asl
de62 :                       df_tk_lsr
de62 :                       df_tk_add
de62 :                       df_tk_sub
de62 :                       df_tk_and
de62 :                       df_tk_or
de62 :                       df_tk_eor
de62 :                       df_tk_lte
de62 :                       df_tk_lt
de62 :                       df_tk_gte
de62 :                       df_tk_gt
de62 :                       df_tk_ne
de62 :                       df_tk_eq
de62 :                       df_tk_monitor
de62 :                       df_tk_sprupd
de62 :                       df_tk_sprinit
de62 :                       df_tk_text
de62 :                       df_tk_hires
de62 : 18               [ 2] 	clc
AS65 Assembler for R6502 [1.42].                                     Page  165
-------------------------------- bank\bank0.s --------------------------------

de63 : 60               [ 6] 	rts
                             
                             ; 0 or 1 parameter special!
de64 :                       df_tk_return
de64 : 2051d9           [ 6] 	jsr df_tk_expression
de67 : 60               [ 6] 	rts
                             
                             
                             ; These commands expect 1 parameter	
de68 :                       df_tk_while
de68 :                       df_tk_until
de68 :                       df_tk_if
de68 :                       df_tk_elseif
de68 :                       df_tk_wait
de68 :                       df_tk_cursor
de68 :                       df_tk_del
de68 :                       df_tk_chdir
de68 :                       df_tk_load
de68 :                       df_tk_save
de68 :                       df_tk_tload
de68 :                       df_tk_tsave
de68 :                       df_tk_pixmode
de68 :                       df_tk_ink
de68 :                       df_tk_paper
de68 :                       df_tk_himem
                             
de68 :                       df_tk_asm_org
de68 :                       df_tk_asm_opt
de68 :                       df_tk_asm_ds
                             
                             	; first parm
de68 : 2051d9           [ 6] 	jsr df_tk_expression
de6b : b0c3             [ 3] 	bcs df_tk_error2
de6d : 60               [ 6] 	rts
                             
                             ; These commands expect 2 numeric parameters
de6e :                       df_tk_poke
de6e :                       df_tk_doke
de6e :                       df_tk_point
de6e :                       df_tk_sprchar
de6e :                       df_tk_sprmulti
de6e :                       df_tk_bload
de6e :                       df_tk_lineto
de6e :                       df_tk_2parms
                             	; first parm
de6e : 2051d9           [ 6] 	jsr df_tk_expression
de71 : b0bd             [ 3] 	bcs df_tk_error2
                             	; tokenise second parm
de73 : a92c             [ 2] 	lda #','
de75 : 4c5dd9           [ 3] 	jmp df_tk_tok_expression
                             
                             ; these commands expect 3 numeric parameters
de78 :                       df_tk_hchar
de78 :                       df_tk_plot
de78 :                       df_tk_circle
de78 :                       df_tk_sound
de78 :                       df_tk_colour
de78 :                       df_tk_spritepos
de78 :                       df_tk_renum
de78 :                       df_tk_sprpos
de78 :                       df_tk_bsave
de78 :                       df_tk_3parms
AS65 Assembler for R6502 [1.42].                                     Page  166
-------------------------------- bank\bank0.s --------------------------------

de78 : 206ede           [ 6] 	jsr df_tk_2parms
                             	; tokenise third parm
de7b : a92c             [ 2] 	lda #','
de7d : 205dd9           [ 6] 	jsr df_tk_tok_expression
de80 : 60               [ 6] 	rts
                             
                             ; these commands expect 4 numeric parameters
de81 :                       df_tk_play
de81 :                       df_tk_music
de81 :                       df_tk_line
de81 :                       df_tk_4parms
de81 : 206ede           [ 6] 	jsr df_tk_2parms
de84 : a92c             [ 2] 	lda #','
de86 : 206bd7           [ 6] 	jsr df_tk_expect_tok_err
de89 : 206ede           [ 6] 	jsr df_tk_2parms
de8c : 60               [ 6] 	rts
                             
de8d :                       mod_sz_toksubs_e
                             
                             
de8d :                       mod_sz_tokenise_e
                             
                             
                             
                             	include "dflat/progedit.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  PROGEDIT.S
                             ;*  dflat module to enable editing of a dflat pro
                             ;*  dflat bascially starts here - waiting for use
                             ;*  when a line is entered, if it is not preceede
                             ;*  line number it is tokenised and attempted to 
                             ;*  immediatly.  If it is preceeded by a line num
                             ;*  number is used to save the tokenised line in 
                             ;*  position in memory.
                             ;*  So this is just like a good old editing sessi
                             ;*  nearly any common flavour of 80s basic. Howev
                             ;*  tokenises everything except whitespace and st
                             ;*  constants - even when saving.  Unlike my trus
                             ;*  where I could type in any garbage and it woul
                             ;*  saved with the line number, dflat needs to be
                             ;*  tokenise the line.  So it's actually a bit mo
                             ;*  Atari 8 bit BASIC.
                             ;*
                             ;************************************************
                             
de8d :                       mod_sz_progedit_s
                             
                             ;****************************************
                             ;* df_pg_find_line
                             ;* Find a line number in X(L), A(H)
                             ;* Return X(L), A(H) of line, Y = Length
                             ;* C=1 Exact match not found, C=0 Exact Found
                             ;* If not exact match then next highest line addr
                             ;* Will be in X and A
                             ;****************************************
AS65 Assembler for R6502 [1.42].                                     Page  167
-------------------------------- bank\bank0.s --------------------------------

de8d :                       df_pg_find_line
de8d : 863d             [ 3] 	stx num_a
de8f : 853e             [ 3] 	sta num_a+1
de91 : a565             [ 3] 	lda df_prgstrt
de93 : 8549             [ 3] 	sta num_tmp
de95 : a566             [ 3] 	lda df_prgstrt+1
de97 : 854a             [ 3] 	sta num_tmp+1
de99 :                       df_pg_check_next_line
de99 : a549             [ 3] 	lda num_tmp
de9b : c567             [ 3] 	cmp df_prgend
de9d : d011             [ 3] 	bne df_pg_check_line
de9f : a54a             [ 3] 	lda num_tmp+1
dea1 : c568             [ 3] 	cmp df_prgend+1
dea3 : d00b             [ 3] 	bne df_pg_check_line
dea5 :                       df_pr_line_gt_target	
                             	; End of program or line > target
                             	; Load Y with the length
dea5 : a200             [ 2] 	ldx #0
dea7 : a149             [ 6] 	lda (num_tmp,x)
dea9 : a8               [ 2] 	tay
deaa : a649             [ 3] 	ldx num_tmp
deac : a54a             [ 3] 	lda num_tmp+1
deae : 38               [ 2] 	sec
deaf : 60               [ 6] 	rts
deb0 :                       df_pg_check_line
deb0 : a001             [ 2] 	ldy #DFTK_LINNUM
deb2 : a53d             [ 3] 	lda num_a
deb4 : d149             [ 5] 	cmp (num_tmp),y
deb6 : d012             [ 3] 	bne df_pr_line_nomatch
deb8 : c8               [ 2] 	iny
deb9 : a53e             [ 3] 	lda num_a+1
debb : d149             [ 5] 	cmp (num_tmp),y
debd : d00b             [ 3] 	bne df_pr_line_nomatch
                             	; Got an exact match
debf : a200             [ 2] 	ldx #0
dec1 : a149             [ 6] 	lda (num_tmp,x)
dec3 : a8               [ 2] 	tay
dec4 : a649             [ 3] 	ldx num_tmp
dec6 : a54a             [ 3] 	lda num_tmp+1
dec8 : 18               [ 2] 	clc
dec9 : 60               [ 6] 	rts
deca :                       df_pr_line_nomatch
                             	; Check if this line > target
deca : 38               [ 2] 	sec
decb : a001             [ 2] 	ldy #DFTK_LINNUM
decd : a53d             [ 3] 	lda num_a
decf : f149             [ 5] 	sbc (num_tmp),y
ded1 : c8               [ 2] 	iny
ded2 : a53e             [ 3] 	lda num_a+1
ded4 : f149             [ 5] 	sbc (num_tmp),y
ded6 : 90cd             [ 3] 	bcc df_pr_line_gt_target
ded8 :                       df_pr_line_next
                             	; Else we go to next line
ded8 : a200             [ 2] 	ldx #0
deda : 18               [ 2] 	clc
dedb : a549             [ 3] 	lda num_tmp
dedd : 6149             [ 6] 	adc (num_tmp,x)
dedf : 8549             [ 3] 	sta num_tmp
dee1 : a54a             [ 3] 	lda num_tmp+1
dee3 : 6900             [ 2] 	adc #0
dee5 : 854a             [ 3] 	sta num_tmp+1
dee7 : 4c99de           [ 3] 	jmp df_pg_check_next_line
AS65 Assembler for R6502 [1.42].                                     Page  168
-------------------------------- bank\bank0.s --------------------------------

                             	
                             ;****************************************
                             ;* df_pg_insert_block
                             ;* Insert a block at adr (X, A) of size Y
                             ;* df_prgend updated
                             ;* C=1 Error, C=0 Ok
                             ;****************************************
deea :                       df_pg_insert_block
                             	; Inserting requires a block copy from
                             	; end of program space to the insert address
                             	
                             	; Save address as this is the lowest address
deea : 863d             [ 3] 	stx num_a
deec : 853e             [ 3] 	sta num_a+1
                             	; End of program space is the first byte to move
deee : a567             [ 3] 	lda df_prgend
def0 : 8545             [ 3] 	sta num_x
def2 : a568             [ 3] 	lda df_prgend+1
def4 : 8546             [ 3] 	sta num_x+1	
def6 :                       df_pg_insert_byte
                             	; Move a byte from the current top
def6 : a200             [ 2] 	ldx #0
def8 : a145             [ 6] 	lda (num_x,x)
                             	; To the new top (+Y)
defa : 9145             [ 5] 	sta (num_x),y
                             	; Compare current address with lowest
defc : a545             [ 3] 	lda num_x
defe : c53d             [ 3] 	cmp num_a
df00 : d014             [ 3] 	bne df_pg_insert_next_byte
df02 : a546             [ 3] 	lda num_x+1
df04 : c53e             [ 3] 	cmp num_a+1
df06 : d00e             [ 3] 	bne df_pg_insert_next_byte
                             	; Finished, update program end pointer
df08 : 18               [ 2] 	clc
df09 : 98               [ 2] 	tya
df0a : 6567             [ 3] 	adc df_prgend
df0c : 8567             [ 3] 	sta df_prgend
df0e : a568             [ 3] 	lda df_prgend+1
df10 : 6900             [ 2] 	adc #0
df12 : 8568             [ 3] 	sta df_prgend+1
df14 : 18               [ 2] 	clc
df15 : 60               [ 6] 	rts
df16 :                       df_pg_insert_next_byte
                             	; Decrement current address
df16 : 38               [ 2] 	sec
df17 : a545             [ 3] 	lda num_x
df19 : e901             [ 2] 	sbc #1
df1b : 8545             [ 3] 	sta num_x
df1d : a546             [ 3] 	lda num_x+1
df1f : e900             [ 2] 	sbc #0
df21 : 8546             [ 3] 	sta num_x+1
df23 : 4cf6de           [ 3] 	jmp df_pg_insert_byte
                             
                             ;****************************************
                             ;* df_pg_delete_block
                             ;* Delete a block at adr (X, A) of size Y
                             ;* df_prgend updated
                             ;* C=1 Error, C=0 Ok
                             ;****************************************
df26 :                       df_pg_delete_block
                             	; Deleting requires a block copy from
                             	; deletion address to end of program
AS65 Assembler for R6502 [1.42].                                     Page  169
-------------------------------- bank\bank0.s --------------------------------

                             	
                             	; Save address as this is the start address
df26 : 863d             [ 3] 	stx num_a
df28 : 853e             [ 3] 	sta num_a+1
df2a :                       df_pg_delete_byte
                             	; Move a byte from current+Y
df2a : b13d             [ 5] 	lda (num_a),y
                             	; Down to current
df2c : a200             [ 2] 	ldx #0
df2e : 813d             [ 6] 	sta (num_a,x)
                             	; Compare current address with lowest
df30 : a53d             [ 3] 	lda num_a
df32 : c567             [ 3] 	cmp df_prgend
df34 : d017             [ 3] 	bne df_pg_delete_next_byte
df36 : a53e             [ 3] 	lda num_a+1
df38 : c568             [ 3] 	cmp df_prgend+1
df3a : d011             [ 3] 	bne df_pg_delete_next_byte
                             	; Finished, update program end pointer
df3c : 843d             [ 3] 	sty num_a
df3e : 38               [ 2] 	sec
df3f : a567             [ 3] 	lda df_prgend
df41 : e53d             [ 3] 	sbc num_a
df43 : 8567             [ 3] 	sta df_prgend
df45 : a568             [ 3] 	lda df_prgend+1
df47 : e900             [ 2] 	sbc #0
df49 : 8568             [ 3] 	sta df_prgend+1
df4b : 18               [ 2] 	clc
df4c : 60               [ 6] 	rts
df4d :                       df_pg_delete_next_byte
                             	; Decrement current address
df4d : 18               [ 2] 	clc
df4e : a53d             [ 3] 	lda num_a
df50 : 6901             [ 2] 	adc #1
df52 : 853d             [ 3] 	sta num_a
df54 : a53e             [ 3] 	lda num_a+1
df56 : 6900             [ 2] 	adc #0
df58 : 853e             [ 3] 	sta num_a+1
df5a : 4c2adf           [ 3] 	jmp df_pg_delete_byte
                             
                             
                             ;****************************************
                             ;* Get a line of input
                             ;* Input: C=1 for echo, 0 for no echo
                             ;* Output: C=0 means linbuff is valid
                             ;****************************************
df5d :                       df_pg_inputline
                             	; C is set on input for echo or not
                             	; Read a line of input
df5d : 2060c4           [ 6] 	jsr io_read_line
                             	
                             	; If nothing entered then sec
df60 : c000             [ 2] 	cpy #0
df62 : d002             [ 3] 	bne df_pg_inputline_ok
df64 : 38               [ 2] 	sec
df65 : 60               [ 6] 	rts
df66 :                       df_pg_inputline_ok
                             	; Copy input bytes to line buffer
                             	; for lexical analysis
df66 :                       df_pg_copyinputtolinbuff
df66 : b139             [ 5] 	lda (buf_lo),y
df68 : 990004           [ 5] 	sta df_linbuff,y
df6b : 88               [ 2] 	dey
AS65 Assembler for R6502 [1.42].                                     Page  170
-------------------------------- bank\bank0.s --------------------------------

df6c : 10f8             [ 3] 	bpl df_pg_copyinputtolinbuff
df6e : 18               [ 2] 	clc
df6f : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* df_pg_dflat
                             ;* Start a dflat editing session
                             ;****************************************
df70 :                       df_pg_dflat
                             	; stack pointer
df70 : ba               [ 2] 	tsx
df71 : 865f             [ 3] 	stx df_sp
                             	; error handler address
df73 : a983             [ 2] 	lda #lo(df_trap_error)
df75 : 8560             [ 3] 	sta df_pc
df77 : a9f8             [ 2] 	lda #hi(df_trap_error)
df79 : 8561             [ 3] 	sta df_pc+1
                             	
                             	; make sure normal I/O is resumed
                             	;jsr io_init_default
df7b :                       df_pg_prompt
df7b : a214             [ 2] 	ldx #lo(df_pg_prompt_msg)
df7d : a9e0             [ 2] 	lda #hi(df_pg_prompt_msg)
df7f : 2099c4           [ 6] 	jsr io_print_line
df82 : a900             [ 2] 	lda #0
df84 : 855e             [ 3] 	sta df_immed
df86 :                       df_pg_getcommand
                             	; current line is the token buffer when editing
df86 : a980             [ 2] 	lda #lo(df_tokbuff)
df88 : 8586             [ 3] 	sta df_currlin
df8a : a904             [ 2] 	lda #hi(df_tokbuff)
df8c : 8587             [ 3] 	sta df_currlin+1
df8e : 38               [ 2] 	sec
df8f : 205ddf           [ 6] 	jsr df_pg_inputline
df92 : b01b             [ 3] 	bcs df_pg_done
df94 : 20b1df           [ 6] 	jsr df_pg_tokenise
df97 : a55e             [ 3] 	lda df_immed
df99 : f0eb             [ 3] 	beq df_pg_getcommand
                             	; clear variables ready to run the statement
df9b : 201be0           [ 6] 	jsr df_initrun
                             	; run from tokbuff
df9e : a280             [ 2] 	ldx #lo(df_tokbuff)
dfa0 : a904             [ 2] 	lda #hi(df_tokbuff)
                             	; always skip length and line number
dfa2 : a003             [ 2] 	ldy #3
dfa4 : 8488             [ 3] 	sty df_exeoff
                             	; init currlin
dfa6 : 200ae4           [ 6] 	jsr df_rt_init_stat_ptr
                             	; start execution
dfa9 : 201fe4           [ 6] 	jsr df_rt_exec_stat
                             	; Go and get another line of input
dfac : 4c7bdf           [ 3] 	jmp df_pg_prompt
                             	; if blank line then return to cmd
dfaf :                       df_pg_done
dfaf : 18               [ 2] 	clc
dfb0 : 60               [ 6] 	rts
                             
                             	; tokenise the line
dfb1 :                       df_pg_tokenise
dfb1 : a900             [ 2] 	lda #0
dfb3 : 855d             [ 3] 	sta errno
AS65 Assembler for R6502 [1.42].                                     Page  171
-------------------------------- bank\bank0.s --------------------------------

dfb5 : 2095d9           [ 6] 	jsr df_lexer_line
                             	; check if line number == 0
dfb8 : ad8104           [ 4] 	lda df_tokbuff+DFTK_LINNUM
dfbb : d00f             [ 3] 	bne df_pg_line_number
dfbd : ad8204           [ 4] 	lda df_tokbuff+DFTK_LINNUM+1
dfc0 : d00a             [ 3] 	bne df_pg_line_number
                             	; check if line empty
dfc2 : ad8004           [ 4] 	lda df_tokbuff
dfc5 : f004             [ 3] 	beq df_pg_nothing
                             	
                             	; line number == 0 so in immediate mode from tok
                             	; don't zero out the line length as some routine
                             	; run the line in immediate mode
dfc7 : a901             [ 2] 	lda #1
dfc9 : 855e             [ 3] 	sta df_immed
dfcb :                       df_pg_nothing
dfcb : 60               [ 6] 	rts
                             
                             	; put the numbered line in to the right bit of m
dfcc :                       df_pg_line_number
                             	; Check if this line exists
dfcc : ad8104           [ 4] 	lda df_tokbuff+DFTK_LINNUM
dfcf : aa               [ 2] 	tax
dfd0 : ad8204           [ 4] 	lda df_tokbuff+DFTK_LINNUM+1
dfd3 : 208dde           [ 6] 	jsr df_pg_find_line
                             	; Save line address for later X then A
dfd6 : 8538             [ 3] 	sta tmp_d
dfd8 : 8a               [ 2] 	txa
dfd9 : 48               [ 3] 	pha
dfda : a538             [ 3] 	lda tmp_d
dfdc : 48               [ 3] 	pha
                             	; If line exists then it needs deleting
dfdd : b003             [ 3] 	bcs df_pg_skip_del_line
                             
                             	; delete line from program
dfdf : 2026df           [ 6] 	jsr df_pg_delete_block
dfe2 :                       df_pg_skip_del_line
                             	; If line length is zero
                             	; then nothing else to do (i.e. line was deleted
dfe2 : ad8004           [ 4] 	lda df_tokbuff+DFTK_LINLEN
                             	; save the tokenised line length
dfe5 : 48               [ 3] 	pha
dfe6 : d004             [ 3] 	bne df_pg_insertline
                             	; Length was zero, so get temp stuff off stack
dfe8 : 68               [ 4] 	pla
dfe9 : 68               [ 4] 	pla
dfea : 68               [ 4] 	pla
dfeb : 60               [ 6] 	rts
                             
                             	; insert a program line unless it is immediate
dfec :                       df_pg_insertline
                             	; Restore previously saved length
dfec : 68               [ 4] 	pla
dfed : a8               [ 2] 	tay
                             	; Restore previously saved address to reinsert t
dfee : 68               [ 4] 	pla
dfef : 8538             [ 3] 	sta tmp_d
dff1 : 68               [ 4] 	pla
dff2 : aa               [ 2] 	tax
dff3 : a538             [ 3] 	lda tmp_d
                             	; And save it all back to stack again A,X,Y
                             	_pushAXY
AS65 Assembler for R6502 [1.42].                                     Page  172
-------------------------------- bank\bank0.s --------------------------------

                             
                             	; We now have insert address and length
dffe : 20eade           [ 6] 	jsr df_pg_insert_block
                             	; Restore length and sub 1 to get index in to th
e001 : 68               [ 4] 	pla
e002 : a8               [ 2] 	tay
e003 : 88               [ 2] 	dey
                             	; Restore address to a pointer, X is pulled firs
e004 : 68               [ 4] 	pla
e005 : aa               [ 2] 	tax
e006 : 863d             [ 3] 	stx num_a
e008 : 68               [ 4] 	pla
e009 : 853e             [ 3] 	sta num_a+1
                             	; num_a is destination, tokbuff is source, Y is 
e00b :                       df_pg_insertlinbyte
e00b : b98004           [ 4] 	lda df_tokbuff,y
e00e : 913d             [ 5] 	sta (num_a),y
e010 : 88               [ 2] 	dey
e011 : 10f8             [ 3] 	bpl df_pg_insertlinbyte
e013 : 60               [ 6] 	rts
                             	
e014 :                       df_pg_prompt_msg
e014 : 52656164790d00        	db "Ready",UTF_CR,0
                             
e01b :                       mod_sz_progedit_e
                             
                             	include "dflat/runtime.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  RUNTIME.S
                             ;*  This module is the runtime coordinator.  When
                             ;*  wants to run a program, execution of statemen
                             ;*  required procedure starts and proceeds from t
                             ;*  according to normal program flow.
                             ;*  This module also contains critical routines f
                             ;*  evaluation of expressions (numeric and string
                             ;*  Whilst the code to implement a specific comma
                             ;*  rtsubs.s, this is the key module that control
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code
                             
e01b :                       mod_sz_runtime_s
                             
                             ;****************************************
                             ;* df_initrun
                             ;* Initialise program space for runtime
                             ;****************************************
e01b :                       df_initrun
                             	; Set the key mask to check every 128 instructio
e01b : a980             [ 2] 	lda #0x80
e01d : 855c             [ 3] 	sta df_checkmsk
                             
                             	; String and array heap initialisation
AS65 Assembler for R6502 [1.42].                                     Page  173
-------------------------------- bank\bank0.s --------------------------------

                             	; Grows up from end of prog space PLUS 1
                             	; Initially empty (dim will allocate)
                             	_cpyZPWord df_prgend,df_starstrt
                             
                             	_incZPWord df_starstrt
                             
                             	_cpyZPWord df_starstrt,df_starend
                             
                             
e035 : a2ff             [ 2] 	ldx #0xff
                             	; Reset runtime stack (grows down)
e037 : 8676             [ 3] 	stx df_rtstop
                             	; make X=0
e039 : e8               [ 2] 	inx
                             	; Reset parameter stack (grows up)
e03a : 8677             [ 3] 	stx df_parmtop
                             	; Reset data pointer high byte
e03c : 8695             [ 3] 	stx df_currdat+1
                             	; if nest counter zeroed
e03e : 8693             [ 3] 	stx df_ifnest
                             
                             	; clear proc addresses
e040 : 2044e0           [ 6] 	jsr df_rt_init_vvt
                             
                             ;	clc
e043 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Initialise vvt
                             ;****************************************
e044 :                       df_rt_init_vvt
                             	; starting at beginning of vvt
                             	_cpyZPWord df_vvtend,df_tmpptra
                             
e04c : a200             [ 2] 	ldx #0
e04e :                       df_rt_init_vvt_slot
e04e : a5a1             [ 3] 	lda df_tmpptra
e050 : c56d             [ 3] 	cmp df_vvtstrt
e052 : d006             [ 3] 	bne df_rt_init_vvt_slot_undim
e054 : a5a2             [ 3] 	lda df_tmpptra+1
e056 : c56e             [ 3] 	cmp df_vvtstrt+1
e058 : f02d             [ 3] 	beq df_rt_init_done
e05a :                       df_rt_init_vvt_slot_undim
                             	; Only zero out proc and array pointers
                             	; Scalar variables are not initialised
e05a : a000             [ 2] 	ldy #0
e05c : b1a1             [ 5] 	lda (df_tmpptra),y
e05e : 29c0             [ 2] 	and #DFVVT_PROC|DFVVT_ARRY
e060 : f016             [ 3] 	beq df_rt_init_vvt_skip
                             	; skip over the first byte which is variable typ
e062 : c8               [ 2] 	iny
                             	; zero out first 3 bytes for proc and arrays
e063 : a900             [ 2] 	lda #0
e065 : 91a1             [ 5] 	sta (df_tmpptra),y
e067 : c8               [ 2] 	iny
e068 : 91a1             [ 5] 	sta (df_tmpptra),y
e06a : c8               [ 2] 	iny
e06b : 91a1             [ 5] 	sta (df_tmpptra),y
e06d : c8               [ 2] 	iny
                             	; before doing dim2 check if proc
                             	; as we don't want to erase the parm count
e06e : a1a1             [ 6] 	lda (df_tmpptra,x)
AS65 Assembler for R6502 [1.42].                                     Page  174
-------------------------------- bank\bank0.s --------------------------------

e070 : 2940             [ 2] 	and #DFVVT_PROC
e072 : d004             [ 3] 	bne df_rt_init_vvt_skip
                             	; if not proc then zero dim2
e074 : a900             [ 2] 	lda #0
e076 : 91a1             [ 5] 	sta (df_tmpptra),y
e078 :                       df_rt_init_vvt_skip
                             	; increment pointer to next slot
                             	_adcZPWord df_tmpptra,8
                             
e085 : 90c7             [ 3] 	bcc df_rt_init_vvt_slot 	; Always branches
e087 :                       df_rt_init_done
e087 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Evaluate a numeric expression
                             ;* pop  X,A result from operator stack
                             ;****************************************
e088 :                       df_rt_getnval
                             	; evaluate the expression
e088 : 208ee0           [ 6] 	jsr df_rt_neval
                             	; get X,A off operator stack
e08b : 4c66f7           [ 3] 	jmp df_ost_popInt
                             
                             
                             ;****************************************
                             ;* Evaluate a numeric expression
                             ;* Push result to operator stack
                             ;****************************************
e08e :                       df_rt_neval
                             	; push terminator on cpu stack
                             	; so we know where we are
e08e : a900             [ 2] 	lda #0
e090 : 48               [ 3] 	pha
                             
                             	; find escape token or keyword token
                             	; if escape token push on to operand stack
                             	; if keyword token push on to operator stack
e091 :                       df_rt_neval_optk
e091 : a488             [ 3] 	ldy df_exeoff
                             	; check end of line
                             
e093 : c47e             [ 3] 	cpy df_eolidx
e095 : f03c             [ 3] 	beq df_rt_neval_process
e097 : c47f             [ 3] 	cpy df_nxtstidx
e099 : f038             [ 3] 	beq df_rt_neval_process
e09b : b186             [ 5] 	lda (df_currlin),y
e09d : 3022             [ 3] 	bmi df_rt_neval_tk
e09f : c920             [ 2] 	cmp #DFTK_ESCVAL
e0a1 : 9018             [ 3] 	bcc df_rt_neval_esc
                             	; check for evaluation terminators
                             	; specifically ',' and ']'
e0a3 : c92c             [ 2] 	cmp #','
e0a5 : f02c             [ 3] 	beq df_rt_neval_process
e0a7 : c95d             [ 2] 	cmp #']'
e0a9 : f028             [ 3] 	beq df_rt_neval_process
                             	; check for brackets
                             	; if close bracket then process
e0ab : c929             [ 2] 	cmp #')'
e0ad : f024             [ 3] 	beq df_rt_neval_process
                             	; if bracket then evaluate expression recursivel
e0af : c928             [ 2] 	cmp #'('
e0b1 : d02f             [ 3] 	bne df_rt_neval_nextbyte
AS65 Assembler for R6502 [1.42].                                     Page  175
-------------------------------- bank\bank0.s --------------------------------

                             	; move past open bracket
e0b3 : e688             [ 5] 	inc df_exeoff
                             	; call evaluation function recursively
e0b5 : 208ee0           [ 6] 	jsr df_rt_neval
e0b8 : 4ce2e0           [ 3] 	jmp df_rt_neval_nextbyte
e0bb :                       df_rt_neval_esc
e0bb : 2013e1           [ 6] 	jsr df_rt_eval_esc
e0be : 4ce2e0           [ 3] 	jmp df_rt_neval_nextbyte
                             	; if a token then push on operator stack
e0c1 :                       df_rt_neval_tk
e0c1 : 297f             [ 2] 	and #0x7f
                             	; check if op (look up type using X as index)
                             	; X contains the current operator index
                             
e0c3 : aa               [ 2] 	tax
e0c4 : bd03dd           [ 4] 	lda df_tk_tokentype,x
                             	; A contains token type
e0c7 : 48               [ 3] 	pha
e0c8 : 2908             [ 2] 	and #DFTK_OP
e0ca : d01a             [ 3] 	bne df_rt_neval_tk_opp
                             	; check if fn
e0cc : 68               [ 4] 	pla
e0cd : 2902             [ 2] 	and #DFTK_FN
e0cf : d00c             [ 3] 	bne df_rt_neval_tk_fn
                             
                             	; If got here then something wrong
                             	SWBRK DFERR_OK
                             
                             
e0d3 :                       df_rt_neval_process
                             	; pop operator off stack and execute
                             	; keep popping until reached the terminator
e0d3 : 68               [ 4] 	pla
e0d4 : f006             [ 3] 	beq df_rt_neval_done
                             	; run the token code
e0d6 : 2093e4           [ 6] 	jsr df_rt_run_token
                             	; top two bytes on ost stack is the result
e0d9 : 4cd3e0           [ 3] 	jmp df_rt_neval_process
e0dc :                       df_rt_neval_done
e0dc : 60               [ 6] 	rts
                             
e0dd :                       df_rt_neval_tk_fn
e0dd : 18               [ 2] 	clc
e0de : 8a               [ 2] 	txa
                             	; run a fn token - returns a value on stack
e0df : 2093e4           [ 6] 	jsr df_rt_run_token
                             	; move to next byte
e0e2 :                       df_rt_neval_nextbyte
e0e2 : e688             [ 5] 	inc df_exeoff
e0e4 : d0ab             [ 3] 	bne df_rt_neval_optk		; ALWAYS as exeoff != 0
                             
e0e6 :                       df_rt_neval_tk_opp
e0e6 : 68               [ 4] 	pla				; Get A off stack which is the type
e0e7 :                       df_rt_neval_tk_op
                             	; X=Op, A=Type
                             	; if this op < current top of op stack
                             	; then do the op as it is higher priority so sho
                             	; not be pushed
                             	; what is top of the op stack?
                             	; save current op token value
                             	; C=0 means process the op now, else don't
                             	; save current operator index
AS65 Assembler for R6502 [1.42].                                     Page  176
-------------------------------- bank\bank0.s --------------------------------

e0e7 : 86a1             [ 3] 	stx df_tmpptra				; Index in to token table not 
                             	; mask off to keep priority
e0e9 : 2907             [ 2] 	and #DFTK_OPMSK
e0eb : 85a3             [ 3] 	sta df_tmpptrb
                             	; peek top of op stack - pull and push X
e0ed : 68               [ 4] 	pla
e0ee : 48               [ 3] 	pha
e0ef : aa               [ 2] 	tax
                             	; if 0 then nothing so push op
e0f0 : f01c             [ 4] 	beq df_rt_neval_pushOp
                             	; use it to index in to type table
e0f2 : bd03dd           [ 4] 	lda df_tk_tokentype,x
                             	; mask off to keep priority
e0f5 : 2907             [ 2] 	and #DFTK_OPMSK
                             	; compare with the saved token type which includ
e0f7 : c5a3             [ 3] 	cmp df_tmpptrb
                             	; if top of stack >= current then C=1
                             	; else C=0
                             	; what is the state of C?
                             	; if 1 then just pushOp
e0f9 : f002             [ 3] 	beq df_rt_neval_donow
e0fb : b011             [ 4] 	bcs df_rt_neval_pushOp
e0fd :                       df_rt_neval_donow
                             	; was C=0 so process now before pushing the new 
                             	; get operator off cpu stack
e0fd : 68               [ 4] 	pla
e0fe : a8               [ 2] 	tay		; Save whilst need to push other things
                             	; save the current op on cpu stack
e0ff : a5a1             [ 3] 	lda df_tmpptra
e101 : 48               [ 3] 	pha
e102 : aa               [ 2] 	tax		; X = current op
e103 : 98               [ 2] 	tya		; Get A back from Y (new op)
                             	; now run the token in A that came off the stack
e104 : 2093e4           [ 6] 	jsr df_rt_run_token
                             	; get current op off cpu stack in to X
e107 : 68               [ 4] 	pla
e108 : aa               [ 2] 	tax
                             	; get the token type in to A
e109 : bd03dd           [ 4] 	lda df_tk_tokentype,x
                             	; now go back around again to check whether to p
e10c : d0d9             [ 4] 	bne df_rt_neval_tk_op		; ALWAYS as type never ze
e10e :                       df_rt_neval_pushOp
                             	; push the operator
e10e : a5a1             [ 3] 	lda df_tmpptra
e110 : 48               [ 3] 	pha
e111 : d0cf             [ 4] 	bne df_rt_neval_nextbyte	; ALWAYS as token index
                             
                             
                             
                             
                             ; jump to escape evaluation routine
e113 :                       df_rt_eval_esc
e113 : 0a               [ 2] 	asl a
e114 : aa               [ 2] 	tax
e115 : bd22e1           [ 4] 	lda df_rt_eval_esc_tab,x
e118 : 85a1             [ 3] 	sta df_tmpptra
e11a : bd23e1           [ 4] 	lda df_rt_eval_esc_tab+1,x
e11d : 85a2             [ 3] 	sta df_tmpptra+1
e11f : 6ca100           [ 6] 	jmp (df_tmpptra)
                             
e122 :                       df_rt_eval_esc_tab
e122 : e4e1                  	dw df_rt_eval_chr
AS65 Assembler for R6502 [1.42].                                     Page  177
-------------------------------- bank\bank0.s --------------------------------

e124 : f0e1                  	dw df_rt_eval_reserved
e126 : f0e1                  	dw df_rt_eval_reserved
e128 : f0e1                  	dw df_rt_eval_reserved
e12a : f0e1                  	dw df_rt_eval_reserved
e12c : f0e1                  	dw df_rt_eval_reserved	; no such thing as bytdec
e12e : e4e1                  	dw df_rt_eval_bythex
e130 : e4e1                  	dw df_rt_eval_bytbin
e132 : f0e1                  	dw df_rt_eval_reserved
e134 : e4e1                  	dw df_rt_eval_intdec
e136 : e4e1                  	dw df_rt_eval_inthex
e138 : e4e1                  	dw df_rt_eval_intbin
e13a : f0e1                  	dw df_rt_eval_reserved
e13c : f0e1                  	dw df_rt_eval_reserved
e13e : f0e1                  	dw df_rt_eval_reserved
e140 : f0e1                  	dw df_rt_eval_reserved
e142 : f2e1                  	dw df_rt_eval_strlit
e144 : 3be2                  	dw df_rt_eval_var
e146 : 39e3                  	dw df_rt_eval_proc
                             
                             
                             ;****************************************
                             ;* Evaluate a string expression
                             ;* X, A = Destination is string accumulator
                             ;****************************************
e148 :                       df_rt_seval
e148 : a67a             [ 3] 	ldx df_sevalptr
e14a : a57b             [ 3] 	lda df_sevalptr+1
                             ;****************************************
                             ;* Evaluate a string expression
                             ;* X, A = Destination buffer / space
                             ;****************************************
e14c :                       df_rt_sval
                             	; keep X,A on the stack - will be modified
e14c : 8538             [ 3] 	sta tmp_d
e14e : 48               [ 3] 	pha
e14f : 8a               [ 2] 	txa
e150 : 48               [ 3] 	pha
e151 : a538             [ 3] 	lda tmp_d
                             	; push original destination
e153 : 203df7           [ 6] 	jsr df_ost_pushStr
                             	; Push the destination to the 6502 stack
                             	; hi byte first then lo
                             	; push string idx so we know our starting positi
                             	; in the string buffer
                             	; this limits all evaluations to 255 bytes
                             ;	lda df_stridx
                             ;	jsr df_st_pushOp
                             
                             	; find escape token or keyword token
                             	; if escape token push on to operand stack
                             	; if keyword operator token push on to operator 
                             	; if keyword function token run it
                             
e156 :                       df_rt_seval_optk
e156 : a488             [ 3] 	ldy df_exeoff
                             	; check end of line
e158 : c47e             [ 3] 	cpy df_eolidx
e15a : f06b             [ 3] 	beq df_rt_seval_done
e15c : c47f             [ 3] 	cpy df_nxtstidx
e15e : f067             [ 3] 	beq df_rt_seval_done
                             
e160 : b186             [ 5] 	lda (df_currlin),y
AS65 Assembler for R6502 [1.42].                                     Page  178
-------------------------------- bank\bank0.s --------------------------------

e162 : 301c             [ 3] 	bmi df_rt_seval_tk
                             
e164 : c920             [ 2] 	cmp #DFTK_ESCVAL
e166 : 900a             [ 3] 	bcc df_rt_seval_esc
                             	; check for evaluation terminators
                             	; specifically ',' and ')'
e168 : c92c             [ 2] 	cmp #','
e16a : f05b             [ 3] 	beq df_rt_seval_done
e16c : c929             [ 2] 	cmp #')'
e16e : f057             [ 3] 	beq df_rt_seval_done
e170 : d048             [ 3] 	bne df_rt_seval_nextbyte
e172 :                       df_rt_seval_esc
                             	; the only escape char is STRLIT, VAR or PROC
e172 : c910             [ 2] 	cmp #DFTK_STRLIT
e174 : f049             [ 3] 	beq	df_rt_seval_esc_strlit
e176 : c911             [ 2] 	cmp #DFTK_VAR
e178 : f026             [ 3] 	beq	df_rt_seval_esc_var
e17a : c912             [ 2] 	cmp #DFTK_PROC
e17c : f047             [ 3] 	beq	df_rt_seval_esc_proc
                             
                             	; error if got here
                             	SWBRK DFERR_SYNTAX
                             
                             
                             	; if a token then push on operator stack
e180 :                       df_rt_seval_tk
e180 : 8488             [ 3] 	sty df_exeoff
e182 : 297f             [ 2] 	and #0x7f
                             	; check if op
e184 : aa               [ 2] 	tax
e185 : bd03dd           [ 4] 	lda df_tk_tokentype,x
e188 : 2904             [ 2] 	and #DFTK_STROP
e18a : d009             [ 3] 	bne df_rt_seval_tk_op
                             	; check if fn
e18c : bd03dd           [ 4] 	lda df_tk_tokentype,x
e18f : 2902             [ 2] 	and #DFTK_FN
e191 : d006             [ 3] 	bne df_rt_seval_tk_fn
                             
                             	; token type mismatch if got here
                             	SWBRK DFERR_TYPEMISM
                             
                             
e195 :                       df_rt_seval_tk_op
                             	; the only op is $+
                             	; so just ignore!
e195 : 8a               [ 2] 	txa
e196 : 4cbae1           [ 3] 	jmp df_rt_seval_nextbyte
                             
e199 :                       df_rt_seval_tk_fn
e199 : 8a               [ 2] 	txa
e19a : 2093e4           [ 6] 	jsr df_rt_run_token
e19d : 4ca4e1           [ 3] 	jmp df_rt_seval_copy
                             
e1a0 :                       df_rt_seval_esc_var
                             	; go process the variable as a normal RVAL
e1a0 : 18               [ 2] 	clc
e1a1 : 203be2           [ 6] 	jsr df_rt_eval_var
                             	; copy source off rt stack to destination
e1a4 :                       df_rt_seval_copy
                             	; pull destination pointer
e1a4 : 68               [ 4] 	pla
e1a5 : 85a1             [ 3] 	sta df_tmpptra
AS65 Assembler for R6502 [1.42].                                     Page  179
-------------------------------- bank\bank0.s --------------------------------

e1a7 : 68               [ 4] 	pla
e1a8 : 85a2             [ 3] 	sta df_tmpptra+1
                             	; pop source string pointer off stack
e1aa : 206af7           [ 6] 	jsr df_ost_popStr
e1ad : 86a3             [ 3] 	stx df_tmpptrb
e1af : 85a4             [ 3] 	sta df_tmpptrb+1
                             	; go and copy the string
e1b1 : 20cbe1           [ 6] 	jsr df_rt_copyStr
                             	; now save the destination
e1b4 : a5a2             [ 3] 	lda df_tmpptra+1
e1b6 : 48               [ 3] 	pha
e1b7 : a5a1             [ 3] 	lda df_tmpptra
e1b9 : 48               [ 3] 	pha
                             
                             ;	jmp df_rt_seval_nextbyte
e1ba :                       df_rt_seval_nextbyte
e1ba : e688             [ 5] 	inc df_exeoff
e1bc : 4c56e1           [ 3] 	jmp df_rt_seval_optk
                             
e1bf :                       df_rt_seval_esc_strlit
                             	; evaluate string literal
e1bf : 20f2e1           [ 6] 	jsr df_rt_eval_strlit
e1c2 : 4ca4e1           [ 3] 	jmp df_rt_seval_copy
                             
e1c5 :                       df_rt_seval_esc_proc
                             	; not yet suported *******
                             	SWBRK DFERR_OK
                             
                             
                             	; keep going until non-ws char found or end of l
e1c7 :                       df_rt_seval_done
                             	;
e1c7 : 68               [ 4] 	pla
e1c8 : 68               [ 4] 	pla
                             
e1c9 : 18               [ 2] 	clc
e1ca : 60               [ 6] 	rts
                             
                             
                             ; Copy string from ptrb to ptra
e1cb :                       df_rt_copyStr
e1cb : a000             [ 2] 	ldy #0
e1cd :                       df_rt_copyStr_ch
e1cd : b1a3             [ 5] 	lda (df_tmpptrb),y
e1cf : 91a1             [ 5] 	sta (df_tmpptra),y
e1d1 : f003             [ 3] 	beq df_rt_copyStr_done
e1d3 : c8               [ 2] 	iny
e1d4 : d0f7             [ 3] 	bne df_rt_copyStr_ch	; Always relying in Y never
e1d6 :                       df_rt_copyStr_done
e1d6 : 98               [ 2] 	tya
e1d7 : 18               [ 2] 	clc
e1d8 : 65a1             [ 3] 	adc df_tmpptra
e1da : 85a1             [ 3] 	sta df_tmpptra
e1dc : a5a2             [ 3] 	lda df_tmpptra+1
e1de : 6900             [ 2] 	adc #0
e1e0 : 85a2             [ 3] 	sta df_tmpptra+1
e1e2 : 18               [ 2] 	clc
e1e3 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Evaluate and push numeric value
                             ;****************************************
AS65 Assembler for R6502 [1.42].                                     Page  180
-------------------------------- bank\bank0.s --------------------------------

e1e4 :                       df_rt_eval_intdec
e1e4 :                       df_rt_eval_bytdec
e1e4 :                       df_rt_eval_inthex
e1e4 :                       df_rt_eval_bythex
e1e4 :                       df_rt_eval_intbin
e1e4 :                       df_rt_eval_bytbin
e1e4 :                       df_rt_eval_chr
                             	; numeric constant
e1e4 : c8               [ 2] 	iny
e1e5 : b186             [ 5] 	lda (df_currlin),y
e1e7 : aa               [ 2] 	tax
e1e8 : c8               [ 2] 	iny
e1e9 : b186             [ 5] 	lda (df_currlin),y
                             	; save offset before calling any routine
e1eb : 8488             [ 3] 	sty df_exeoff
                             	; push number on to stack
e1ed : 4c32f7           [ 3] 	jmp df_ost_pushInt
                             
e1f0 :                       df_rt_eval_reserved
                             	; should not get here
                             	SWBRK DFERR_OK
                             
                             
                             ;****************************************
                             ;* Evaluate and push string constant
                             ;****************************************
e1f2 :                       df_rt_eval_strlit
e1f2 : 8488             [ 3] 	sty df_exeoff
                             	; calculate the effective address
                             	; y + currlin
e1f4 : 98               [ 2] 	tya
                             	; set carry to add one extra
e1f5 : 38               [ 2] 	sec
e1f6 : 6586             [ 3] 	adc df_currlin
e1f8 : 85a1             [ 3] 	sta df_tmpptra
e1fa : aa               [ 2] 	tax
e1fb : a587             [ 3] 	lda df_currlin+1
e1fd : 6900             [ 2] 	adc #0
e1ff : 85a2             [ 3] 	sta df_tmpptra+1
                             
                             	; push string on to stack
e201 : 203df7           [ 6] 	jsr df_ost_pushStr
                             	; now proceed until end of string found
e204 : a488             [ 3] 	ldy df_exeoff
e206 :                       df_rt_eval_strlit_ch
e206 : b186             [ 5] 	lda (df_currlin),y
e208 : f003             [ 3] 	beq df_rt_eval_strlit_done
e20a : c8               [ 2] 	iny
e20b : d0f9             [ 3] 	bne df_rt_eval_strlit_ch
e20d :                       df_rt_eval_strlit_done	; Always relying on Y neve
e20d : 8488             [ 3] 	sty df_exeoff
e20f : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Return array parameter
                             ;* A has parm
                             ;****************************************
e210 :                       df_rt_arry_parm
                             	; move past open bracket or comma
e210 : e688             [ 5] 	inc df_exeoff
                             	; evaluate expression inside bracket
e212 : 2088e0           [ 6] 	jsr df_rt_getnval
AS65 Assembler for R6502 [1.42].                                     Page  181
-------------------------------- bank\bank0.s --------------------------------

e215 : 8a               [ 2] 	txa
                             ;	clc
e216 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Return double array parameter
                             ;* X = dim1, Y = dim2
                             ;****************************************
e217 :                       df_rt_arry_parm2
                             	; go get array parm 1
e217 : 2010e2           [ 6] 	jsr df_rt_arry_parm
e21a : 48               [ 3] 	pha
e21b : a200             [ 2] 	ldx #0
e21d : a488             [ 3] 	ldy df_exeoff
e21f :                       df_rt_arry_parm2_term
e21f : b186             [ 5] 	lda (df_currlin),y
e221 : c95d             [ 2] 	cmp #']'
e223 : f011             [ 3] 	beq df_rt_arry_parm2_skiparry2
e225 : c92c             [ 2] 	cmp #','
e227 : f006             [ 3] 	beq df_rt_arry_parm2_arry2
e229 : 8488             [ 3] 	sty df_exeoff
e22b : c8               [ 2] 	iny
e22c : 4c1fe2           [ 3] 	jmp df_rt_arry_parm2_term
e22f :                       df_rt_arry_parm2_arry2
                             	; get second dimension and put in Y
e22f : 2010e2           [ 6] 	jsr df_rt_arry_parm
e232 : a8               [ 2] 	tay
e233 : 68               [ 4] 	pla
e234 : aa               [ 2] 	tax
                             ;	clc
e235 : 60               [ 6] 	rts
e236 :                       df_rt_arry_parm2_skiparry2
e236 : a000             [ 2] 	ldy #0
e238 : 68               [ 4] 	pla
e239 : aa               [ 2] 	tax
                             ;	clc
e23a : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* Evaluate and push variable
                             ;* The actual value is pushed if numeric
                             ;* The pointer is pushed if string
                             ;* Carry Set = LVAR else normal RVAR
                             ;* LVAR : Y = line index, A=vvt type, tmpptra = v
                             ;****************************************
e23b :                       df_rt_eval_var
                             	; save carry bit
e23b : 08               [ 3] 	php
                             	; if lvar mode then already passed escape token
e23c : b010             [ 3] 	bcs df_rt_eval_lvskip
                             	; move past var escape token
e23e : c8               [ 2] 	iny
                             	; get var vvt address
e23f : b186             [ 5] 	lda (df_currlin),y
e241 : 85a1             [ 3] 	sta df_tmpptra
e243 : c8               [ 2] 	iny
e244 : 8488             [ 3] 	sty df_exeoff
e246 : b186             [ 5] 	lda (df_currlin),y
e248 : 85a2             [ 3] 	sta df_tmpptra+1
                             	; push vvt type first as this is the last thing 
e24a : a200             [ 2] 	ldx #0
AS65 Assembler for R6502 [1.42].                                     Page  182
-------------------------------- bank\bank0.s --------------------------------

e24c : a1a1             [ 6] 	lda (df_tmpptra,x)
e24e :                       df_rt_eval_lvskip
e24e : 48               [ 3] 	pha
                             	; Test A
e24f : aa               [ 2] 	tax
                             	; simple variable
e250 : 1012             [ 3] 	bpl df_rt_eval_var_notarry
                             	; even if an array if no dimensions then return 
                             	; if at end of statement or line then simple cop
e252 : c47e             [ 3] 	cpy df_eolidx
e254 : f02b             [ 3] 	beq df_rt_eval_var_simple
e256 : c47f             [ 3] 	cpy df_nxtstidx
e258 : f027             [ 3] 	beq df_rt_eval_var_simple
                             	; if next ch is not [ then simple copy
e25a : c8               [ 2] 	iny
e25b : b186             [ 5] 	lda (df_currlin),y
e25d : 88               [ 2] 	dey
e25e : c95b             [ 2] 	cmp #'['
e260 : d01f             [ 3] 	bne df_rt_eval_var_simple
                             	; go do array handling
e262 : f02b             [ 3] 	beq df_rt_eval_var_do_arry
e264 :                       df_rt_eval_var_notarry
                             	; pull the type, not needed here
e264 : 68               [ 4] 	pla
                             	; pull C and check if lvar wanted rather than rv
e265 : 28               [ 4] 	plp
e266 : b00c             [ 3] 	bcs df_rt_eval_lvar
                             	; just push the vvt lo,hi value
e268 : a001             [ 2] 	ldy #DFVVT_LO
e26a : b1a1             [ 5] 	lda (df_tmpptra),y
e26c : aa               [ 2] 	tax
e26d : a002             [ 2] 	ldy #DFVVT_HI
e26f : b1a1             [ 5] 	lda (df_tmpptra),y
                             
e271 : 4c32f7           [ 3] 	jmp df_ost_pushInt
                             
e274 :                       df_rt_eval_lvar
                             	; it's not an array, push the address of DFVVT_L
                             	; add DFVVT_LO offset to slot address in X,A
e274 : 18               [ 2] 	clc
e275 : a901             [ 2] 	lda #DFVVT_LO
e277 : 65a1             [ 3] 	adc df_tmpptra
e279 : aa               [ 2] 	tax
e27a : a5a2             [ 3] 	lda df_tmpptra+1
e27c : 6900             [ 2] 	adc #0
                             
                             	; push pointer to lo,hi
e27e : 4c41f7           [ 3] 	jmp df_ost_pushPtr
                             
e281 :                       df_rt_eval_var_simple
                             	; clean up stack
e281 : 68               [ 4] 	pla
e282 : 68               [ 4] 	pla
                             	; simply get lo,hi and push ptr on stack
e283 : a001             [ 2] 	ldy #DFVVT_LO
e285 : b1a1             [ 5] 	lda (df_tmpptra),y
e287 : aa               [ 2] 	tax
e288 : a002             [ 2] 	ldy #DFVVT_HI
e28a : b1a1             [ 5] 	lda (df_tmpptra),y
e28c : 4c41f7           [ 3] 	jmp df_ost_pushPtr
                             
e28f :                       df_rt_eval_var_do_arry
AS65 Assembler for R6502 [1.42].                                     Page  183
-------------------------------- bank\bank0.s --------------------------------

                             	; move past var index
e28f : e688             [ 5] 	inc df_exeoff
                             	; zero out x,y as they have dimension info
e291 : a200             [ 2] 	ldx #0
e293 : a000             [ 2] 	ldy #0
                             
                             	; ** Array handling routine **
                             	; A on stack = type
                             	; save vvt address
e295 : a5a2             [ 3] 	lda df_tmpptra+1
e297 : 48               [ 3] 	pha
e298 : a5a1             [ 3] 	lda df_tmpptra
e29a : 48               [ 3] 	pha
                             
                             	; get array parms in X,Y
e29b : 2017e2           [ 6] 	jsr df_rt_arry_parm2
                             	; restore vvt address
e29e : 68               [ 4] 	pla
e29f : 85a1             [ 3] 	sta df_tmpptra
e2a1 : 68               [ 4] 	pla
e2a2 : 85a2             [ 3] 	sta df_tmpptra+1
                             	; save dimension indices for later
                             	; save x last as needed first
                             	; A ok to trample
e2a4 : 98               [ 2] 	tya
e2a5 : 48               [ 3] 	pha
e2a6 : 8a               [ 2] 	txa
e2a7 : 48               [ 3] 	pha
                             	; if y is zero then need to decide some stuff
e2a8 : c000             [ 2] 	cpy #0
e2aa : d012             [ 3] 	bne df_rt_eval_var_dim2adj
                             	; if dim2 > 0 then swap x,y
e2ac : a004             [ 2] 	ldy #DFVVT_DIM2
e2ae : b1a1             [ 5] 	lda (df_tmpptra),y
e2b0 : a000             [ 2] 	ldy #0
e2b2 : c900             [ 2] 	cmp #0
e2b4 : f008             [ 3] 	beq df_rt_eval_var_dim2adj
                             	; pop from stack in swapped order
e2b6 : 68               [ 4] 	pla
e2b7 : a8               [ 2] 	tay
e2b8 : 68               [ 4] 	pla
e2b9 : aa               [ 2] 	tax
                             	; save back on stack, A ok to trample
e2ba : 98               [ 2] 	tya
e2bb : 48               [ 3] 	pha
e2bc : 8a               [ 2] 	txa
e2bd : 48               [ 3] 	pha
                             
e2be :                       df_rt_eval_var_dim2adj
                             	; don't let y=0
e2be : c000             [ 2] 	cpy #0
e2c0 : d001             [ 3] 	bne df_rt_eval_var_dim2adjy
e2c2 : c8               [ 2] 	iny
e2c3 :                       df_rt_eval_var_dim2adjy
                             	; don't let x=0
e2c3 : e000             [ 2] 	cpx #0
e2c5 : d001             [ 3] 	bne df_rt_eval_var_dim2adjx
e2c7 : e8               [ 2] 	inx
e2c8 :                       df_rt_eval_var_dim2adjx
                             	;calculate offset
                             	;(y-1)*dim1 + (x-1)
e2c8 : ca               [ 2] 	dex
AS65 Assembler for R6502 [1.42].                                     Page  184
-------------------------------- bank\bank0.s --------------------------------

e2c9 : 88               [ 2] 	dey
                             	; (y-1)
e2ca : 843d             [ 3] 	sty num_a
e2cc : a900             [ 2] 	lda #0
e2ce : 853e             [ 3] 	sta num_a+1
                             	; if y is 0 then no need to multiply
e2d0 : c000             [ 2] 	cpy #0
e2d2 : f00d             [ 3] 	beq df_rt_eval_var_nomult
                             	; (dim1)
e2d4 : a003             [ 2] 	ldy #DFVVT_DIM1
e2d6 : a900             [ 2] 	lda #0
e2d8 : 8542             [ 3] 	sta num_b+1
e2da : b1a1             [ 5] 	lda (df_tmpptra),y
e2dc : 8541             [ 3] 	sta num_b
                             	; (y-1)*dim1 num_a has result
e2de : 2063d4           [ 6] 	jsr int_fast_mult
e2e1 :                       df_rt_eval_var_nomult
                             	; move x to a
e2e1 : 8a               [ 2] 	txa
                             	; add x to num_a
e2e2 : 18               [ 2] 	clc
e2e3 : 653d             [ 3] 	adc num_a
e2e5 : 853d             [ 3] 	sta num_a
e2e7 : a53e             [ 3] 	lda num_a+1
e2e9 : 6900             [ 2] 	adc #0
e2eb : 853e             [ 3] 	sta num_a+1
                             	; now have element offset in num_a
                             	; dimensions in x and y
e2ed : 68               [ 4] 	pla
e2ee : aa               [ 2] 	tax
e2ef : 68               [ 4] 	pla
e2f0 : a8               [ 2] 	tay
                             	; get type of variable originally found
e2f1 : 68               [ 4] 	pla
e2f2 : 48               [ 3] 	pha
e2f3 : 2901             [ 2] 	and #DFVVT_INT
e2f5 : f004             [ 3] 	beq df_rt_eval_var_push
                             	; if it is int then multiply offset by 2
e2f7 : 063d             [ 5] 	asl num_a
e2f9 : 263e             [ 5] 	rol num_a+1
e2fb :                       df_rt_eval_var_push
                             	; add pointer in lo,hi to num_a
e2fb : 18               [ 2] 	clc
e2fc : a001             [ 2] 	ldy #DFVVT_LO
e2fe : b1a1             [ 5] 	lda (df_tmpptra),y
e300 : 653d             [ 3] 	adc num_a
e302 : 853d             [ 3] 	sta num_a
e304 : a002             [ 2] 	ldy #DFVVT_HI
e306 : b1a1             [ 5] 	lda (df_tmpptra),y
e308 : d002             [ 3] 	bne df_rt_array_exists
                             	; if vvt address hi is zero then array not dimen
                             	SWBRK DFERR_DIM
                             
e30c :                       df_rt_array_exists
e30c : 653e             [ 3] 	adc num_a+1
e30e : 853e             [ 3] 	sta num_a+1
                             	; get the type
e310 : 68               [ 4] 	pla
                             	; if not int or byte then push string
e311 : 2903             [ 2] 	and #DFVVT_INT|DFVVT_BYT
e313 : f01c             [ 3] 	beq df_rt_eval_var_str
                             	; get LVAR preference
AS65 Assembler for R6502 [1.42].                                     Page  185
-------------------------------- bank\bank0.s --------------------------------

e315 : 28               [ 4] 	plp
e316 : b01a             [ 3] 	bcs df_rt_eval_ptr
                             	; need to load lo and hi for int
                             	; but only lo for byt
e318 : 2901             [ 2] 	and #DFVVT_INT
e31a : f00b             [ 3] 	beq df_rt_eval_byt
                             	; push the contents pointed to by num_a
e31c : a000             [ 2] 	ldy #0
e31e : b13d             [ 5] 	lda (num_a),y
e320 : aa               [ 2] 	tax
e321 : c8               [ 2] 	iny
e322 : b13d             [ 5] 	lda (num_a),y
e324 : 4c32f7           [ 3] 	jmp df_ost_pushInt
e327 :                       df_rt_eval_byt
e327 : a000             [ 2] 	ldy #0
e329 : b13d             [ 5] 	lda (num_a),y
e32b : aa               [ 2] 	tax
e32c : a900             [ 2] 	lda #0
e32e : 4c32f7           [ 3] 	jmp df_ost_pushInt
e331 :                       df_rt_eval_var_str
e331 : 28               [ 4] 	plp
e332 :                       df_rt_eval_ptr
                             ;	clc
                             	; put num_a not contents
e332 : a63d             [ 3] 	ldx num_a
e334 : a53e             [ 3] 	lda num_a+1
e336 : 4c41f7           [ 3] 	jmp df_ost_pushPtr
                             
e339 :                       df_rt_eval_proc
e339 : a577             [ 3] 	lda df_parmtop				; Save current position of par
e33b : 48               [ 3] 	pha
e33c : 207df5           [ 6] 	jsr df_rt_proc				; Go and call the user functio
e33f : 68               [ 4] 	pla							; Get back the original parameter stac
e340 : c577             [ 3] 	cmp df_parmtop				; if it is the same, then no r
e342 : f002             [ 3] 	beq df_rt_eval_proc_err
e344 : 18               [ 2] 	clc
e345 : 60               [ 6] 	rts
e346 :                       df_rt_eval_proc_err
                             	; if no return value then report an errror
                             	SWBRK DFERR_RETURN
                             
                             
                             
                             
                             ;****************************************
                             ;* get two ints off the runtime stack
                             ;* first parm in ptrb, second in ptra
                             ;****************************************
e348 :                       df_rt_get2Ints
                             	; the first int popped is actually the second pa
e348 : 2066f7           [ 6] 	jsr df_ost_popInt
e34b : 86a3             [ 3] 	stx df_tmpptrb
e34d : 85a4             [ 3] 	sta df_tmpptrb+1
                             
e34f : 2066f7           [ 6] 	jsr df_ost_popInt
e352 : 86a1             [ 3] 	stx df_tmpptra
e354 : 85a2             [ 3] 	sta df_tmpptra+1
e356 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* get two strings off the runtime stack
                             ;* first parm in ptrb, second in ptra
AS65 Assembler for R6502 [1.42].                                     Page  186
-------------------------------- bank\bank0.s --------------------------------

                             ;****************************************
e357 :                       df_rt_get2Strs
                             	; the first int popped is actually the second pa
e357 : 206af7           [ 6] 	jsr df_ost_popStr
e35a : 86a3             [ 3] 	stx df_tmpptrb
e35c : 85a4             [ 3] 	sta df_tmpptrb+1
                             
e35e : 206af7           [ 6] 	jsr df_ost_popStr
e361 : 86a1             [ 3] 	stx df_tmpptra
e363 : 85a2             [ 3] 	sta df_tmpptra+1
e365 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ; common code for 2 ints runtime parsing
                             ;****************************************
e366 :                       df_rt_parm_2ints
                             	; evaluate 1st parm
e366 : 208ee0           [ 6] 	jsr df_rt_neval
                             	; jump over comma
e369 : e688             [ 5] 	inc df_exeoff
                             	; evaluate the 2nd parm
e36b : 208ee0           [ 6] 	jsr df_rt_neval
                             
                             	; pop 2nd parm
e36e : 2066f7           [ 6] 	jsr df_ost_popInt
e371 : 86a3             [ 3] 	stx df_tmpptrb
e373 : 85a4             [ 3] 	sta df_tmpptrb+1
                             	; pop 1st parm
e375 : 2066f7           [ 6] 	jsr df_ost_popInt
e378 : 86a1             [ 3] 	stx df_tmpptra
e37a : 85a2             [ 3] 	sta df_tmpptra+1
e37c : 60               [ 6] 	rts
                             
                             ;****************************************
                             ; common code for 3 ints runtime parsing
                             ;****************************************
e37d :                       df_rt_parm_3ints
                             	; evaluate 1st parm
e37d : 208ee0           [ 6] 	jsr df_rt_neval
e380 : e688             [ 5] 	inc df_exeoff
                             	; evaluate the 2nd parm
e382 : 208ee0           [ 6] 	jsr df_rt_neval
e385 : e688             [ 5] 	inc df_exeoff
                             	; evaluate the 3rd parm
e387 : 208ee0           [ 6] 	jsr df_rt_neval
                             
                             	; pop 3rd parm
e38a : 2066f7           [ 6] 	jsr df_ost_popInt
e38d : 86a5             [ 3] 	stx df_tmpptrc
e38f : 85a6             [ 3] 	sta df_tmpptrc+1
                             	; pop 2nd parm
e391 : 2066f7           [ 6] 	jsr df_ost_popInt
e394 : 86a3             [ 3] 	stx df_tmpptrb
e396 : 85a4             [ 3] 	sta df_tmpptrb+1
                             	; pop 1st parm
e398 : 2066f7           [ 6] 	jsr df_ost_popInt
e39b : 86a1             [ 3] 	stx df_tmpptra
e39d : 85a2             [ 3] 	sta df_tmpptra+1
e39f : 60               [ 6] 	rts
                             
                             ;****************************************
                             ; common code for 4 ints runtime parsing
AS65 Assembler for R6502 [1.42].                                     Page  187
-------------------------------- bank\bank0.s --------------------------------

                             ;****************************************
e3a0 :                       df_rt_parm_4ints
                             	; evaluate 1st parm
e3a0 : 208ee0           [ 6] 	jsr df_rt_neval
e3a3 : e688             [ 5] 	inc df_exeoff
                             	; evaluate the 2nd parm
e3a5 : 208ee0           [ 6] 	jsr df_rt_neval
e3a8 : e688             [ 5] 	inc df_exeoff
                             	; evaluate the 3rd parm
e3aa : 208ee0           [ 6] 	jsr df_rt_neval
e3ad : e688             [ 5] 	inc df_exeoff
                             	; evaluate the 4th parm
e3af : 208ee0           [ 6] 	jsr df_rt_neval
                             
                             	; pop 4th parm
e3b2 : 2066f7           [ 6] 	jsr df_ost_popInt
e3b5 : 86a7             [ 3] 	stx df_tmpptrd
e3b7 : 85a8             [ 3] 	sta df_tmpptrd+1
                             	; pop 3rd parm
e3b9 : 2066f7           [ 6] 	jsr df_ost_popInt
e3bc : 86a5             [ 3] 	stx df_tmpptrc
e3be : 85a6             [ 3] 	sta df_tmpptrc+1
                             	; pop 2nd parm
e3c0 : 2066f7           [ 6] 	jsr df_ost_popInt
e3c3 : 86a3             [ 3] 	stx df_tmpptrb
e3c5 : 85a4             [ 3] 	sta df_tmpptrb+1
                             	; pop 1st parm
e3c7 : 2066f7           [ 6] 	jsr df_ost_popInt
e3ca : 86a1             [ 3] 	stx df_tmpptra
e3cc : 85a2             [ 3] 	sta df_tmpptra+1
e3ce : 60               [ 6] 	rts
                             
                             ;****************************************
                             ; common code for 5 ints runtime parsing
                             ;****************************************
e3cf :                       df_rt_parm_5ints
                             	; evaluate 1st parm
e3cf : 208ee0           [ 6] 	jsr df_rt_neval
e3d2 : e688             [ 5] 	inc df_exeoff
                             	; evaluate the 2nd parm
e3d4 : 208ee0           [ 6] 	jsr df_rt_neval
e3d7 : e688             [ 5] 	inc df_exeoff
                             	; evaluate the 3rd parm
e3d9 : 208ee0           [ 6] 	jsr df_rt_neval
e3dc : e688             [ 5] 	inc df_exeoff
                             	; evaluate the 4th parm
e3de : 208ee0           [ 6] 	jsr df_rt_neval
e3e1 : e688             [ 5] 	inc df_exeoff
                             	; evaluate the 5th parm
e3e3 : 208ee0           [ 6] 	jsr df_rt_neval
                             
                             	; pop 5th parm
e3e6 : 2066f7           [ 6] 	jsr df_ost_popInt
e3e9 : 86a9             [ 3] 	stx df_tmpptre
e3eb : 85aa             [ 3] 	sta df_tmpptre+1
                             	; pop 4th parm
e3ed : 2066f7           [ 6] 	jsr df_ost_popInt
e3f0 : 86a7             [ 3] 	stx df_tmpptrd
e3f2 : 85a8             [ 3] 	sta df_tmpptrd+1
                             	; pop 3rd parm
e3f4 : 2066f7           [ 6] 	jsr df_ost_popInt
e3f7 : 86a5             [ 3] 	stx df_tmpptrc
AS65 Assembler for R6502 [1.42].                                     Page  188
-------------------------------- bank\bank0.s --------------------------------

e3f9 : 85a6             [ 3] 	sta df_tmpptrc+1
                             	; pop 2nd parm
e3fb : 2066f7           [ 6] 	jsr df_ost_popInt
e3fe : 86a3             [ 3] 	stx df_tmpptrb
e400 : 85a4             [ 3] 	sta df_tmpptrb+1
                             	; pop 1st parm
e402 : 2066f7           [ 6] 	jsr df_ost_popInt
e405 : 86a1             [ 3] 	stx df_tmpptra
e407 : 85a2             [ 3] 	sta df_tmpptra+1
                             
e409 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* initialise statement to be executed
                             ;* X,A = line pointer, Y=statement offset
                             ;****************************************
e40a :                       df_rt_init_stat_ptr
                             	; save current line
e40a : 8686             [ 3] 	stx df_currlin
e40c : 8587             [ 3] 	sta df_currlin+1
e40e : 8480             [ 3] 	sty df_curstidx
e410 : 8488             [ 3] 	sty df_exeoff
e412 : a000             [ 2] 	ldy #0
e414 : b186             [ 5] 	lda (df_currlin),y
e416 : 857e             [ 3] 	sta df_eolidx
e418 : a480             [ 3] 	ldy df_curstidx
e41a : b186             [ 5] 	lda (df_currlin),y
e41c : 857f             [ 3] 	sta df_nxtstidx
e41e : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Execute from a statement pointed to
                             ;* by currlin and exeoff
                             ;****************************************
e41f :                       df_rt_exec_stat
e41f : a686             [ 3] 	ldx df_currlin
e421 : a587             [ 3] 	lda df_currlin+1
e423 : a488             [ 3] 	ldy df_exeoff
e425 :                       df_rt_exec_init_ptr
e425 : 200ae4           [ 6] 	jsr df_rt_init_stat_ptr
                             	; assume normal flow of control if next line hi 
                             	; this means no line can execute below page 1, n
e428 : a900             [ 2] 	lda #0
e42a : 858a             [ 3] 	sta df_nextlin+1
                             
                             	; find first token in statement
e42c :                       df_rt_exec_find_tok
e42c : c8               [ 2] 	iny
e42d : b186             [ 5] 	lda (df_currlin),y
e42f : 10fb             [ 3] 	bpl df_rt_exec_find_tok
e431 :                       df_rt_exec_found_tok
                             	; skip past token to next byte in readiness
e431 : c8               [ 2] 	iny
e432 : 8488             [ 3] 	sty df_exeoff
                             	; save the token
e434 : 48               [ 3] 	pha
                             	; Run that statement
e435 : 2093e4           [ 6] 	jsr df_rt_run_token
                             	; what token was run, if it was enddef or return
e438 : 68               [ 4] 	pla
e439 : c987             [ 2] 	cmp #DFRT_ENDDEF
e43b : f045             [ 3] 	beq df_rt_exec_end
AS65 Assembler for R6502 [1.42].                                     Page  189
-------------------------------- bank\bank0.s --------------------------------

e43d : c988             [ 2] 	cmp #DFRT_RETURN
e43f : f041             [ 3] 	beq df_rt_exec_end
                             
                             	; check for break, asynch get
e441 : e65b             [ 5] 	inc df_checkkey					; Don't check every time els
e443 : a55b             [ 3] 	lda df_checkkey					; Check the mask (normally 0
e445 : 255c             [ 3] 	and df_checkmsk
e447 : f012             [ 3] 	beq df_rt_exec_no_key
e449 : a900             [ 2] 	lda #0
e44b : 855b             [ 3] 	sta df_checkkey
e44d : 18               [ 2] 	clc
e44e : 2048c4           [ 6] 	jsr io_get_ch
e451 : b008             [ 3] 	bcs df_rt_exec_no_key
e453 : c903             [ 2] 	cmp #UTF_ETX					; CTRL-C?
e455 : f02d             [ 3] 	beq df_rt_exec_ctrl_c
e457 : c91a             [ 2] 	cmp #UTF_BRK					; CTRK-Z?
e459 : f02d             [ 3] 	beq df_rt_exec_ctrl_z
e45b :                       df_rt_exec_no_key
                             	; check if normal flow of control
e45b : a58a             [ 3] 	lda df_nextlin+1
e45d : d02b             [ 3] 	bne df_rt_exec_jump
                             	; try and execute another statement
e45f : a47f             [ 3] 	ldy df_nxtstidx
e461 : 8488             [ 3] 	sty df_exeoff
e463 : d0ba             [ 3] 	bne df_rt_exec_stat
                             
                             	; reached end of line, move to next
e465 : a200             [ 2] 	ldx #0
e467 : 18               [ 2] 	clc
e468 : a186             [ 6] 	lda (df_currlin,x)
e46a : 6586             [ 3] 	adc df_currlin
e46c : 8586             [ 3] 	sta df_currlin
e46e : a587             [ 3] 	lda df_currlin+1
e470 : 6900             [ 2] 	adc #0
e472 : 8587             [ 3] 	sta df_currlin+1
                             
                             	; start from first statement in new line
e474 : a003             [ 2] 	ldy #3
e476 : 8488             [ 3] 	sty df_exeoff
                             
                             	; check if this line has any content (length >0)
e478 : a186             [ 6] 	lda (df_currlin,x)
e47a : 857e             [ 3] 	sta df_eolidx
                             	; no more lines (len = 0), program done
e47c : d0a1             [ 3] 	bne df_rt_exec_stat
                             	; else done
                             	; normally wouldn't get here except immediate mo
                             	; if line number <> 0 then error
e47e : a55e             [ 3] 	lda df_immed
e480 : f004             [ 3] 	beq df_rt_unexpected_end
e482 :                       df_rt_exec_end
e482 : 18               [ 2] 	clc
e483 : 60               [ 6] 	rts
e484 :                       df_rt_exec_ctrl_c
                             	SWBRK DFERR_BREAK
                             
e486 :                       df_rt_unexpected_end
                             	SWBRK DFERR_IMMEDIATE
                             
e488 :                       df_rt_exec_ctrl_z
                             	; Force a break with zero error number
                             	; this will drop in to the monitor
AS65 Assembler for R6502 [1.42].                                     Page  190
-------------------------------- bank\bank0.s --------------------------------

e488 : 0000                  	db 0,0
                             
                             	; if hi byte of nextline is not zero then
                             	; current line = next line
e48a :                       df_rt_exec_jump
                             	; initialise statement pointer from nextlin,toks
e48a : a689             [ 3] 	ldx df_nextlin
e48c : a58a             [ 3] 	lda df_nextlin+1
e48e : a47f             [ 3] 	ldy df_nxtstidx
e490 : 4c25e4           [ 3] 	jmp df_rt_exec_init_ptr
                             
                             
                             ;****************************************
                             ;* Run statement in A
                             ;****************************************
e493 :                       df_rt_run_token
                             	; mask off MSB
                             ;	and #0x7f
                             	; multiply by 2
e493 : 0a               [ 2] 	asl a
e494 : aa               [ 2] 	tax
e495 : bd80e5           [ 4] 	lda df_rt_tokenjmp,x
e498 : 85a1             [ 3] 	sta df_tmpptra
e49a : bd81e5           [ 4] 	lda df_rt_tokenjmp+1,x
e49d : 85a2             [ 3] 	sta df_tmpptra+1
                             	; execution code finishes with rts
e49f : 6ca100           [ 6] 	jmp (df_tmpptra)
                             
                             
                             ;****************************************
                             ;* X,A : Line Address, Y = Index
                             ;* C=0 Found next statement
                             ;* C=1 No statement found
                             ;****************************************
e4a2 :                       df_rt_nextstat
                             	; save pointer
e4a2 : 8690             [ 3] 	stx df_lineptr
e4a4 : 8591             [ 3] 	sta df_lineptr+1
                             	; if end of program then err
e4a6 : a200             [ 2] 	ldx #0
e4a8 : a190             [ 6] 	lda (df_lineptr,x)
e4aa : f01c             [ 3] 	beq df_rt_nextstat_err
                             	; if next statement idx 0
e4ac : b190             [ 5] 	lda (df_lineptr),y
                             	; then go to next line
e4ae : f007             [ 3] 	beq df_rt_nextstat_ln
                             	; else make this Y
e4b0 : a8               [ 2] 	tay
                             	; X = line low
e4b1 : a690             [ 3] 	ldx df_lineptr
                             	; A = line high
e4b3 : a591             [ 3] 	lda df_lineptr+1
e4b5 : 18               [ 2] 	clc
e4b6 : 60               [ 6] 	rts
e4b7 :                       df_rt_nextstat_ln
                             	; for next line, add line length to ptr
e4b7 : 18               [ 2] 	clc
e4b8 : a190             [ 6] 	lda (df_lineptr,x)
e4ba : 6590             [ 3] 	adc df_lineptr
e4bc : 8590             [ 3] 	sta df_lineptr
e4be : a591             [ 3] 	lda df_lineptr+1
e4c0 : 6900             [ 2] 	adc #0
AS65 Assembler for R6502 [1.42].                                     Page  191
-------------------------------- bank\bank0.s --------------------------------

e4c2 : 8591             [ 3] 	sta df_lineptr+1
                             	; if end of program set C
e4c4 : a190             [ 6] 	lda (df_lineptr,x)
e4c6 : d004             [ 3] 	bne df_rt_nextstat_dn
e4c8 :                       df_rt_nextstat_err
e4c8 : a000             [ 2] 	ldy #0
e4ca : 38               [ 2] 	sec
e4cb : 60               [ 6] 	rts
e4cc :                       df_rt_nextstat_dn
e4cc : a690             [ 3] 	ldx df_lineptr
e4ce : a591             [ 3] 	lda df_lineptr+1
                             	; always skip line number and length for start o
e4d0 : a003             [ 2] 	ldy #3
e4d2 : 18               [ 2] 	clc
e4d3 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Push current line and statement to runtime sta
                             ;****************************************
e4d4 :                       df_rt_push_stat
e4d4 : a580             [ 3] 	lda df_curstidx
e4d6 : 20e8f6           [ 6] 	jsr df_rst_pushByte
e4d9 : a587             [ 3] 	lda df_currlin+1
e4db : a686             [ 3] 	ldx df_currlin
e4dd : 4c00f7           [ 3] 	jmp df_rst_pushWord
                             ;	clc
                             ;	rts
                             
                             ;****************************************
                             ;* Pop line and statement from runtime stack
                             ;* And transfer control to next statement
                             ;****************************************
e4e0 :                       df_rt_pop_stat
e4e0 : 200ef7           [ 6] 	jsr df_rst_popWord
e4e3 : 8689             [ 3] 	stx	df_nextlin
e4e5 : 858a             [ 3] 	sta df_nextlin+1
e4e7 : 20f1f6           [ 6] 	jsr df_rst_popByte
e4ea : a8               [ 2] 	tay
e4eb : a689             [ 3] 	ldx df_nextlin
e4ed : a58a             [ 3] 	lda df_nextlin+1
e4ef : 20a2e4           [ 6] 	jsr df_rt_nextstat
e4f2 : 8689             [ 3] 	stx df_nextlin
e4f4 : 858a             [ 3] 	sta df_nextlin+1
e4f6 : 847f             [ 3] 	sty df_nxtstidx
                             ;	clc
e4f8 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Find proc definition in procptr
                             ;* Only call if proc not found before
                             ;****************************************
e4f9 :                       df_rt_findproc
                             	; start at program beginning
                             	_cpyZPWord df_prgstrt,df_lineptr
                             
e501 : a003             [ 2] 	ldy #3
e503 : 8492             [ 3] 	sty df_lineidx
e505 : a200             [ 2] 	ldx #0
e507 : a190             [ 6] 	lda (df_lineptr,x)
e509 : f034             [ 3] 	beq df_rt_findproc_err
e50b :                       df_rt_findproc_cmd
e50b : c8               [ 2] 	iny
AS65 Assembler for R6502 [1.42].                                     Page  192
-------------------------------- bank\bank0.s --------------------------------

e50c : b190             [ 5] 	lda (df_lineptr),y
e50e : 10fb             [ 3] 	bpl df_rt_findproc_cmd
e510 : c986             [ 2] 	cmp #DFRT_DEF
e512 : d017             [ 3] 	bne df_rt_findproc_nextstat
                             	; skip def token
e514 : c8               [ 2] 	iny
                             	; skip proc escape token
e515 : c8               [ 2] 	iny
                             	; now check the proc address against procptr
e516 : b190             [ 5] 	lda (df_lineptr),y
e518 : c58e             [ 3] 	cmp df_procptr
e51a : d00f             [ 3] 	bne df_rt_findproc_nextstat
e51c : c8               [ 2] 	iny
e51d : b190             [ 5] 	lda (df_lineptr),y
e51f : c58f             [ 3] 	cmp df_procptr+1
e521 : d008             [ 3] 	bne df_rt_findproc_nextstat
                             
                             	; found it, return AXY with line details
e523 : a690             [ 3] 	ldx df_lineptr
e525 : a591             [ 3] 	lda df_lineptr+1
e527 : a492             [ 3] 	ldy df_lineidx
e529 : 18               [ 2] 	clc
e52a : 60               [ 6] 	rts
e52b :                       df_rt_findproc_nextstat
                             	; restore AXY line details and find next stateme
e52b : a690             [ 3] 	ldx df_lineptr
e52d : a591             [ 3] 	lda df_lineptr+1
e52f : a492             [ 3] 	ldy df_lineidx
e531 : 20a2e4           [ 6] 	jsr df_rt_nextstat
e534 : b009             [ 3] 	bcs df_rt_findproc_err
e536 : 8690             [ 3] 	stx df_lineptr
e538 : 8591             [ 3] 	sta df_lineptr+1
e53a : 8492             [ 3] 	sty df_lineidx
e53c : 4c0be5           [ 3] 	jmp df_rt_findproc_cmd
                             	; error
e53f :                       df_rt_findproc_err
                             	SWBRK DFERR_NOPROC
                             
                             
                             ;****************************************
                             ;* Find an escape value
                             ;* Does not check for end of line or statement
                             ;****************************************
e541 :                       df_rt_findescval
e541 : a488             [ 3] 	ldy df_exeoff
e543 : 88               [ 2] 	dey
e544 :                       df_rt_findescval_loop
e544 : c8               [ 2] 	iny
e545 : b186             [ 5] 	lda (df_currlin),y
e547 : c920             [ 2] 	cmp #DFTK_ESCVAL
e549 : b0f9             [ 3] 	bcs df_rt_findescval_loop
e54b : 8488             [ 3] 	sty df_exeoff
e54d : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Skip white space
                             ;* Does not check for end of line or statement
                             ;* A contains non-ws char, df_exeoff updated
                             ;****************************************
e54e :                       df_rt_skip_ws
e54e : a488             [ 3] 	ldy df_exeoff
e550 : 88               [ 2] 	dey
AS65 Assembler for R6502 [1.42].                                     Page  193
-------------------------------- bank\bank0.s --------------------------------

e551 :                       df_rt_skip_ws_loop
e551 : c8               [ 2] 	iny
e552 : b186             [ 5] 	lda (df_currlin),y
e554 : c920             [ 2] 	cmp #' '
e556 : f0f9             [ 3] 	beq df_rt_skip_ws_loop
e558 : 8488             [ 3] 	sty df_exeoff
e55a : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Get an lvar
                             ;* Assumes next token will be escape DFTK_VAR
                             ;* tmpptra contains vvt slot address
                             ;* X,A is the lvar pointer
                             ;****************************************
e55b :                       df_rt_getlvar
e55b : 2041e5           [ 6] 	jsr df_rt_findescval
                             	; move past the escape value
e55e : c8               [ 2] 	iny
                             
                             	; get variable address
e55f : b186             [ 5] 	lda (df_currlin),y
e561 : 85a1             [ 3] 	sta df_tmpptra
e563 : c8               [ 2] 	iny
e564 : b186             [ 5] 	lda (df_currlin),y
e566 : 85a2             [ 3] 	sta df_tmpptra+1
                             
e568 : 8488             [ 3] 	sty df_exeoff
                             	; get the type
e56a : a000             [ 2] 	ldy #0
e56c : b1a1             [ 5] 	lda (df_tmpptra),y
                             	; set carry flag to return pointer (lvar)
e56e : 38               [ 2] 	sec
e56f : a488             [ 3] 	ldy df_exeoff
e571 : 203be2           [ 6] 	jsr df_rt_eval_var
e574 : 4c6ef7           [ 3] 	jmp df_ost_popPtr
                             ;	rts
                             
                             ;****************************************
                             ;* Pop stat from rt stack and continue
                             ;* Y MUST BE ON THE CPU STACK AS IT GETS PLYed HE
                             ;****************************************
e577 :                       df_rt_pop_stat_go
e577 : 20e0e4           [ 6] 	jsr df_rt_pop_stat
                             	; restore stack pointer so we don't lose this en
e57a : 68               [ 4] 	pla
e57b : a8               [ 2] 	tay
e57c : 8476             [ 3] 	sty df_rtstop
e57e : 18               [ 2] 	clc
e57f : 60               [ 6] 	rts
                             
                             	include "dflat/rtjmptab.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  RTJUMPTAB.S
                             ;*  Runtime token jump table.
                             ;*  dflat uses four key tables to tokenise and ru
AS65 Assembler for R6502 [1.42].                                     Page  194
-------------------------------- bank\bank0.s --------------------------------

                             ;*  - df_tokensyms    - table of token symbols
                             ;*  - df_tk_tokentype - table of token types
                             ;*  - df_tk_tokenjmp  - table of tokenising routi
                             ;*  - df_rt_tokenjmp  - table of runtime token an
                             ;*  The key is the token symbols.  When a line is
                             ;*  in to the raw (untokenised) buffer, df_tokens
                             ;*  used to identify tokens.  The position of the
                             ;*  token is used to then look up type and jump v
                             ;*  in the other tables.
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code  
                             
                             ; Tokeniser jump table
                             ; In token order of df_tokensyms
e580 :                       df_rt_tokenjmp
e580 : 88ed                  	dw	df_rt_assign
e582 : 7df5                  	dw	df_rt_proc
e584 : 99ed                  	dw	df_rt_comment
e586 : 40ed                  	dw	df_rt_println
e588 : f9ec                  	dw	df_rt_printat
e58a : 03ed                  	dw	df_rt_print
e58c : 1ff6                  	dw	df_rt_def			; 0x86
e58e : a1f6                  	dw	df_rt_enddef		; 0x87
e590 : a6f6                  	dw	df_rt_return		; 0x88
e592 : 3df5                  	dw	df_rt_abort			; 0x89
e594 : 47eb                  	dw	df_rt_local
e596 : 77eb                  	dw	df_rt_dim
e598 : 0bea                  	dw	df_rt_repeat		; 0x8c
e59a : 13ea                  	dw	df_rt_until
e59c : 6ee9                  	dw	df_rt_for			; 0x8e
e59e : ace9                  	dw	df_rt_next			; 0x8f
e5a0 : 45e8                  	dw	df_rt_while			; 0x90
e5a2 : a8e8                  	dw	df_rt_wend			; 0x81
e5a4 : 2be9                  	dw	df_rt_if			; 0x92
e5a6 : 19e9                  	dw	df_rt_else			; 0x93
e5a8 : 14e9                  	dw	df_rt_endif			; 0x94
e5aa : 19e9                  	dw	df_rt_elseif		; 0x95
e5ac : 99ed                  	dw	df_rt_data			; 0x96
e5ae : 68fa                  	dw	df_rt_asm_assemble	; 0x97 df_rt_asm_assemble
e5b0 : 9aed                  	dw	df_rt_run
e5b2 : 9aee                  	dw	df_rt_list
e5b4 : 0beb                  	dw	df_rt_input
e5b6 : 89ec                  	dw	df_rt_text
e5b8 : 03ec                  	dw	df_rt_plot
e5ba : 77ec                  	dw	df_rt_cursor
e5bc : 00ec                  	dw	df_rt_cls
e5be : 0ef1                  	dw	df_rt_poke
e5c0 : fff0                  	dw	df_rt_doke
e5c2 : 41f1                  	dw	df_rt_sound
e5c4 : 54f1                  	dw	df_rt_music
e5c6 : 69f1                  	dw	df_rt_play
e5c8 : 61f2                  	dw	df_rt_save
e5ca : b3f2                  	dw	df_rt_load
e5cc : efea                  	dw	df_rt_read
e5ce : 42e8                  	dw	df_rt_new
e5d0 : afed                  	dw	df_rt_renum
e5d2 : e0ec                  	dw	df_rt_wait
e5d4 : 19f3                  	dw	df_rt_reset
e5d6 : 8cec                  	dw	df_rt_hires
AS65 Assembler for R6502 [1.42].                                     Page  195
-------------------------------- bank\bank0.s --------------------------------

e5d8 : a5ec                  	dw	df_rt_point
e5da : cfec                  	dw	df_rt_line
e5dc : c1ec                  	dw	df_rt_lineto
e5de : 8fec                  	dw	df_rt_pixmode
e5e0 : 95ec                  	dw	df_rt_ink
e5e2 : 9bec                  	dw	df_rt_paper
e5e4 : afec                  	dw	df_rt_circle
e5e6 : 7dec                  	dw	df_rt_himem
e5e8 : 3fe8                  	dw	df_rt_monitor
e5ea : 3ff5                  	dw	df_rt_sprchar
e5ec : 49f5                  	dw	df_rt_sprpos
e5ee : 55f5                  	dw	df_rt_sprupd
e5f0 : 5ef5                  	dw	df_rt_sprinit
e5f2 : 61f5                  	dw	df_rt_sprmulti
e5f4 : 40f2                  	dw	df_rt_bsave
e5f6 : 0df2                  	dw	df_rt_bload
e5f8 : b9f1                  	dw	df_rt_tsave
e5fa : d3f1                  	dw	df_rt_tload
                             
e5fc : 31f3                  	dw	df_rt_peek
e5fe : 2ef3                  	dw	df_rt_deek
e600 : c0f3                  	dw	df_rt_stick
e602 : c8f3                  	dw	df_rt_get
e604 : 6bf4                  	dw	df_rt_chr
e606 : b4f4                  	dw	df_rt_left
e608 : c7f4                  	dw	df_rt_right
e60a : e4f4                  	dw	df_rt_mid
e60c : 04f5                  	dw	df_rt_len
e60e : 70f3                  	dw	df_rt_mem
e610 : def3                  	dw	df_rt_scrn
e612 : 4cf3                  	dw	df_rt_rnd
e614 : fcf3                  	dw	df_rt_elapsed
e616 : 17f4                  	dw	df_rt_call
e618 : 81f4                  	dw	df_rt_hex
e61a : 12f5                  	dw	df_rt_asc
e61c : 25f5                  	dw	df_rt_val
e61e : edf3                  	dw	df_rt_pixel
e620 : 67f5                  	dw	df_rt_sprhit
                             	
e622 : 95e6                  	dw	df_rt_mult
e624 : b6e6                  	dw	df_rt_div
e626 : d7e6                  	dw	df_rt_mod
e628 : f8e6                  	dw	df_rt_asl
e62a : 0be7                  	dw	df_rt_lsr
e62c : 6fe6                  	dw	df_rt_add
e62e : 82e6                  	dw	df_rt_sub
                             	
e630 : 1ee7                  	dw	df_rt_and
e632 : 2de7                  	dw	df_rt_or
e634 : 3ce7                  	dw	df_rt_eor
e636 : d5e7                  	dw	df_rt_comlte
e638 : dee7                  	dw	df_rt_comgte
e63a : e7e7                  	dw	df_rt_comne
e63c : bae7                  	dw	df_rt_comlt
e63e : c3e7                  	dw	df_rt_comgt
e640 : cce7                  	dw	df_rt_comeq
                             
                             
                             ; escape sequence handlers
                             ; to do the reverse of tokenising during the list
                             ; command which is also used to save to disk.
e642 :                       df_rt_escjmp
AS65 Assembler for R6502 [1.42].                                     Page  196
-------------------------------- bank\bank0.s --------------------------------

e642 : 6fef                  	dw df_rt_lst_chr
e644 : 6eef                  	dw df_rt_lst_reserved
e646 : 6eef                  	dw df_rt_lst_reserved
e648 : 6eef                  	dw df_rt_lst_reserved
e64a : 6eef                  	dw df_rt_lst_reserved	
e64c : 6eef                  	dw df_rt_lst_reserved	; no such thing as bytdec
e64e : 8cef                  	dw df_rt_lst_bythex
e650 : b1ef                  	dw df_rt_lst_bytbin
e652 : 6eef                  	dw df_rt_lst_reserved	
e654 : ddef                  	dw df_rt_lst_intdec
e656 : 9fef                  	dw df_rt_lst_inthex
e658 : baef                  	dw df_rt_lst_intbin
e65a : 6eef                  	dw df_rt_lst_reserved
e65c : 6eef                  	dw df_rt_lst_reserved
e65e : 6eef                  	dw df_rt_lst_reserved
e660 : 6eef                  	dw df_rt_lst_reserved	
e662 : 3cf0                  	dw df_rt_lst_strlit
e664 : e8ef                  	dw df_rt_lst_var
e666 : e8ef                  	dw df_rt_lst_proc
                             
                             	include "dflat/rtsubs.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  RTSUBS.S
                             ;*  Module that implements the runtime execution 
                             ;*  keywords and functions.
                             ;*  So this is where most of the action is for ru
                             ;*  a line is being executed, the dflat runtime c
                             ;*  jumps through the runtime table to routines h
                             ;*  Every dflat statement begins with a token (ig
                             ;*  whitespace), even the implicit assignment and
                             ;*  invocation.
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code
                             
e668 :                       mod_sz_rtsubs_s
                             
                             	include "dflat/numop.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  NUMOP.S
                             ;*	Dflat number AND string operators.
                             ;*  Uses the operator stack to get parameters, le
                             ;*  result on the operator stack.
                             ;*
                             ;************************************************
                             
AS65 Assembler for R6502 [1.42].                                     Page  197
-------------------------------- bank\bank0.s --------------------------------

                             	; ROM code
                             	code  
                             
                             ; common pushint code
e668 :                       df_rt_putintres
e668 : a6a1             [ 3] 	ldx df_tmpptra
e66a : a5a2             [ 3] 	lda df_tmpptra+1
e66c : 4c32f7           [ 3] 	jmp df_ost_pushInt
                             
                             ; add two numbers
e66f :                       df_rt_add
e66f : 2048e3           [ 6] 	jsr df_rt_get2Ints
                             	_addZPWord df_tmpptra,df_tmpptrb
                             
e67f : 4c68e6           [ 3] 	jmp df_rt_putintres
                             	
                             ; subtract
e682 :                       df_rt_sub
e682 : 2048e3           [ 6] 	jsr df_rt_get2Ints
                             	_subZPWord df_tmpptra,df_tmpptrb
                             
e692 : 4c68e6           [ 3] 	jmp df_rt_putintres
                             
                             ; multiply
e695 :                       df_rt_mult
e695 : 2048e3           [ 6] 	jsr df_rt_get2Ints
                             	_cpyZPWord df_tmpptra,num_a
                             
                             	_cpyZPWord df_tmpptrb,num_b
                             
e6a8 : 208cd4           [ 6] 	jsr int_mult
                             	_cpyZPWord num_a,df_tmpptra
                             
e6b3 : 4c68e6           [ 3] 	jmp df_rt_putintres
                             
                             ; divide
e6b6 :                       df_rt_div
e6b6 : 2048e3           [ 6] 	jsr df_rt_get2Ints
                             	_cpyZPWord df_tmpptra,num_a
                             
                             	_cpyZPWord df_tmpptrb,num_b
                             
e6c9 : 20b7d4           [ 6] 	jsr int_div
                             	_cpyZPWord num_a,df_tmpptra
                             
e6d4 : 4c68e6           [ 3] 	jmp df_rt_putintres
                             
                             ; mod
e6d7 :                       df_rt_mod
e6d7 : 2048e3           [ 6] 	jsr df_rt_get2Ints
                             	_cpyZPWord df_tmpptra,num_a
                             
                             	_cpyZPWord df_tmpptrb,num_b
                             
e6ea : 20b7d4           [ 6] 	jsr int_div
                             	_cpyZPWord num_x,df_tmpptra
                             
e6f5 : 4c68e6           [ 3] 	jmp df_rt_putintres
                             
                             ; shift left
e6f8 :                       df_rt_asl
e6f8 : 2048e3           [ 6] 	jsr df_rt_get2Ints
AS65 Assembler for R6502 [1.42].                                     Page  198
-------------------------------- bank\bank0.s --------------------------------

                             	; use low byte only for # of shifts
e6fb : a6a3             [ 3] 	ldx df_tmpptrb
e6fd : e8               [ 2] 	inx
e6fe :                       df_rt_aslbit
e6fe : ca               [ 2] 	dex
e6ff : f007             [ 4] 	beq df_rt_asldone
e701 : 06a1             [ 5] 	asl df_tmpptra
e703 : 26a2             [ 5] 	rol df_tmpptra+1
e705 : 4cfee6           [ 3] 	jmp df_rt_aslbit
e708 :                       df_rt_asldone
e708 : 4c68e6           [ 3] 	jmp df_rt_putintres
                             
                             ; shift right
e70b :                       df_rt_lsr
e70b : 2048e3           [ 6] 	jsr df_rt_get2Ints
                             	; use low byte only for # of shifts
e70e : a6a3             [ 3] 	ldx df_tmpptrb
e710 : e8               [ 2] 	inx
e711 :                       df_rt_lsrbit
e711 : ca               [ 2] 	dex
e712 : f007             [ 3] 	beq df_rt_lsrdone
e714 : 46a2             [ 5] 	lsr df_tmpptra+1
e716 : 66a1             [ 5] 	ror df_tmpptra
e718 : 4c11e7           [ 3] 	jmp df_rt_lsrbit
e71b :                       df_rt_lsrdone
e71b : 4c68e6           [ 3] 	jmp df_rt_putintres
                             
                             ; logical and
e71e :                       df_rt_and
e71e : 2048e3           [ 6] 	jsr df_rt_get2Ints
e721 : a5a1             [ 3] 	lda df_tmpptra
e723 : 25a3             [ 3] 	and df_tmpptrb
e725 : aa               [ 2] 	tax
e726 : a5a2             [ 3] 	lda df_tmpptra+1
e728 : 25a4             [ 3] 	and df_tmpptrb+1
e72a : 4c32f7           [ 3] 	jmp df_ost_pushInt
                             	
                             ; logical or
e72d :                       df_rt_or
e72d : 2048e3           [ 6] 	jsr df_rt_get2Ints
e730 : a5a1             [ 3] 	lda df_tmpptra
e732 : 05a3             [ 3] 	ora df_tmpptrb
e734 : aa               [ 2] 	tax
e735 : a5a2             [ 3] 	lda df_tmpptra+1
e737 : 05a4             [ 3] 	ora df_tmpptrb+1
e739 : 4c32f7           [ 3] 	jmp df_ost_pushInt
                             
                             ; logical eor
e73c :                       df_rt_eor
e73c : 2048e3           [ 6] 	jsr df_rt_get2Ints
e73f : a5a1             [ 3] 	lda df_tmpptra
e741 : 45a3             [ 3] 	eor df_tmpptrb
e743 : aa               [ 2] 	tax
e744 : a5a2             [ 3] 	lda df_tmpptra+1
e746 : 45a4             [ 3] 	eor df_tmpptrb+1
e748 : 4c32f7           [ 3] 	jmp df_ost_pushInt
                             
                             ; a==b common function
e74b :                       df_rt_aequb
e74b : a5a1             [ 3] 	lda df_tmpptra
e74d : c5a3             [ 3] 	cmp df_tmpptrb
e74f : d004             [ 3] 	bne df_rt_aequbFin
AS65 Assembler for R6502 [1.42].                                     Page  199
-------------------------------- bank\bank0.s --------------------------------

e751 : a5a2             [ 3] 	lda df_tmpptra+1
e753 : c5a4             [ 3] 	cmp df_tmpptrb+1
e755 :                       df_rt_aequbFin
e755 : 60               [ 6] 	rts
                             
                             ; a-b common function
e756 :                       df_rt_asubb
e756 : 38               [ 2] 	sec
e757 : a5a1             [ 3] 	lda df_tmpptra
e759 : e5a3             [ 3] 	sbc df_tmpptrb
e75b : a5a2             [ 3] 	lda df_tmpptra+1
e75d : e5a4             [ 3] 	sbc df_tmpptrb+1
e75f : 5002             [ 3] 	bvc df_rt_asubbFin
e761 : 4980             [ 2] 	eor #0x80
e763 :                       df_rt_asubbFin
e763 : 60               [ 6] 	rts
                             
                             ; b-a common function
e764 :                       df_rt_bsuba
e764 : 38               [ 2] 	sec
e765 : a5a3             [ 3] 	lda df_tmpptrb
e767 : e5a1             [ 3] 	sbc df_tmpptra
e769 : a5a4             [ 3] 	lda df_tmpptrb+1
e76b : e5a2             [ 3] 	sbc df_tmpptra+1
e76d : 5002             [ 3] 	bvc df_rt_bsubaFin
e76f : 4980             [ 2] 	eor #0x80
e771 :                       df_rt_bsubaFin
e771 : 60               [ 6] 	rts
                             
                             ; common routine push true
e772 :                       df_rt_true
e772 : a2ff             [ 2] 	ldx #0xff
e774 : 8a               [ 2] 	txa
e775 : 4c32f7           [ 3] 	jmp df_ost_pushInt
                             
                             ; common routine push false
e778 :                       df_rt_false
e778 : a200             [ 2] 	ldx #0x00
e77a : 8a               [ 2] 	txa
e77b : 4c32f7           [ 3] 	jmp df_ost_pushInt
                             
                             ; a < b == (a-b) < 0
e77e :                       df_rt_lt
e77e : 2048e3           [ 6] 	jsr df_rt_get2Ints
e781 : 2056e7           [ 6] 	jsr df_rt_asubb
e784 : 30ec             [ 3] 	bmi df_rt_true
e786 : 10f0             [ 3] 	bpl df_rt_false
                             
                             ; a <=b == !(b-a > 0)
e788 :                       df_rt_lte
e788 : 2048e3           [ 6] 	jsr df_rt_get2Ints
e78b :                       df_rt_lte_calc
e78b : 2064e7           [ 6] 	jsr df_rt_bsuba
e78e : 30e8             [ 3] 	bmi df_rt_false
e790 : 10e0             [ 3] 	bpl df_rt_true
                             
                             ; a > b == (b-a) < 0
e792 :                       df_rt_gt
e792 : 2048e3           [ 6] 	jsr df_rt_get2Ints
e795 : 2064e7           [ 6] 	jsr df_rt_bsuba
e798 : 30d8             [ 3] 	bmi df_rt_true
e79a : 10dc             [ 3] 	bpl df_rt_false
AS65 Assembler for R6502 [1.42].                                     Page  200
-------------------------------- bank\bank0.s --------------------------------

                             
                             ; a >= b == (a-b >=0)
e79c :                       df_rt_gte
e79c : 2048e3           [ 6] 	jsr df_rt_get2Ints
e79f :                       df_rt_gte_calc
e79f : 2056e7           [ 6] 	jsr df_rt_asubb
e7a2 : 10ce             [ 3] 	bpl df_rt_true
e7a4 : 30d2             [ 3] 	bmi df_rt_false
                             
                             ; a == b
e7a6 :                       df_rt_eq
e7a6 : 2048e3           [ 6] 	jsr df_rt_get2Ints
e7a9 : 204be7           [ 6] 	jsr df_rt_aequb
e7ac : d0ca             [ 3] 	bne df_rt_false
e7ae : f0c2             [ 3] 	beq df_rt_true
                             
                             ; a <> b
e7b0 :                       df_rt_ne
e7b0 : 2048e3           [ 6] 	jsr df_rt_get2Ints
e7b3 : 204be7           [ 6] 	jsr df_rt_aequb
e7b6 : f0c0             [ 3] 	beq df_rt_false
e7b8 : d0b8             [ 3] 	bne df_rt_true
                             
                             ; Common usage of boolean operators for num and s
                             
e7ba :                       df_rt_comlt
                             	; First find the data type on the stack
e7ba : 2060f7           [ 6] 	jsr df_ost_peekType
e7bd : 2980             [ 2] 	and #DFST_STR
e7bf : d04a             [ 4] 	bne df_rt_slt
                             	; If not string then assume number
e7c1 : f0bb             [ 3] 	beq df_rt_lt
                             
e7c3 :                       df_rt_comgt
                             	; First find the data type on the stack
e7c3 : 2060f7           [ 6] 	jsr df_ost_peekType
e7c6 : 2980             [ 2] 	and #DFST_STR
e7c8 : d048             [ 4] 	bne df_rt_sgt
                             	; If not string then assume number
e7ca : f0c6             [ 3] 	beq df_rt_gt
                             
e7cc :                       df_rt_comeq
                             	; First find the data type on the stack
e7cc : 2060f7           [ 6] 	jsr df_ost_peekType
e7cf : 2980             [ 2] 	and #DFST_STR
e7d1 : d048             [ 4] 	bne df_rt_seq
                             	; If not string then assume number
e7d3 : f0d1             [ 3] 	beq df_rt_eq
                             
e7d5 :                       df_rt_comlte
                             	; First find the data type on the stack
e7d5 : 2060f7           [ 6] 	jsr df_ost_peekType
e7d8 : 2980             [ 2] 	and #DFST_STR
e7da : d014             [ 3] 	bne df_rt_slte
                             	; If not string then assume number
e7dc : f0aa             [ 3] 	beq df_rt_lte
                             	
e7de :                       df_rt_comgte
                             	; First find the data type on the stack
e7de : 2060f7           [ 6] 	jsr df_ost_peekType
e7e1 : 2980             [ 2] 	and #DFST_STR
e7e3 : d018             [ 3] 	bne df_rt_sgte
AS65 Assembler for R6502 [1.42].                                     Page  201
-------------------------------- bank\bank0.s --------------------------------

                             	; If not string then assume number
e7e5 : f0b5             [ 3] 	beq df_rt_gte
                             
e7e7 :                       df_rt_comne
                             	; First find the data type on the stack
e7e7 : 2060f7           [ 6] 	jsr df_ost_peekType
e7ea : 2980             [ 2] 	and #DFST_STR
e7ec : d016             [ 4] 	bne df_rt_sne
                             	; If not string then assume number
e7ee : f0c0             [ 3] 	beq df_rt_ne
                             
                             
                             ;********** STRING OPS **********
                             
                             ; string less than or equal
e7f0 :                       df_rt_slte
e7f0 : 2022e8           [ 6] 	jsr df_rt_str_comp
e7f3 : 3005             [ 3] 	bmi df_rt_str_comp_true
e7f5 : f003             [ 3] 	beq df_rt_str_comp_true
e7f7 :                       df_rt_str_comp_false
e7f7 : 4c78e7           [ 3] 	jmp df_rt_false
e7fa :                       df_rt_str_comp_true
e7fa : 4c72e7           [ 3] 	jmp df_rt_true	
                             
                             ; string greater then or equal	
e7fd :                       df_rt_sgte
e7fd : 2022e8           [ 6] 	jsr df_rt_str_comp
e800 : 10f8             [ 4] 	bpl df_rt_str_comp_true
e802 : 30f3             [ 4] 	bmi df_rt_str_comp_false
                             
                             ; string not equal
e804 :                       df_rt_sne
e804 : 2022e8           [ 6] 	jsr df_rt_str_comp
e807 : d0f1             [ 4] 	bne df_rt_str_comp_true
e809 : f0ec             [ 4] 	beq df_rt_str_comp_false
                             
                             ; string less than
e80b :                       df_rt_slt
e80b : 2022e8           [ 6] 	jsr df_rt_str_comp
e80e : 30ea             [ 4] 	bmi df_rt_str_comp_true
e810 : 10e5             [ 4] 	bpl df_rt_str_comp_false
                             
                             ; string greater than
e812 :                       df_rt_sgt
e812 : 2022e8           [ 6] 	jsr df_rt_str_comp
e815 : 30e0             [ 4] 	bmi df_rt_str_comp_false
e817 : f0de             [ 4] 	beq df_rt_str_comp_false
e819 : d0df             [ 4] 	bne df_rt_str_comp_true
                             
                             ; string equal
e81b :                       df_rt_seq
e81b : 2022e8           [ 6] 	jsr df_rt_str_comp
e81e : f0da             [ 4] 	beq df_rt_str_comp_true
e820 : d0d5             [ 4] 	bne df_rt_str_comp_false
                             
                             ; common string comparator
                             ; N=1 means <
                             ; Z=0 means >
                             ; Z=1 means ==
e822 :                       df_rt_str_comp
e822 : 2057e3           [ 6] 	jsr df_rt_get2Strs
e825 : a000             [ 2] 	ldy #0
AS65 Assembler for R6502 [1.42].                                     Page  202
-------------------------------- bank\bank0.s --------------------------------

e827 :                       df_rt_str_comp_byte
e827 : b1a1             [ 5] 	lda (df_tmpptra),y
e829 : aa               [ 2] 	tax							; Save op1 char in X
e82a : d1a3             [ 5] 	cmp (df_tmpptrb),y
                             	; if c=0 then <
e82c : 9008             [ 3] 	bcc df_rt_str_comp_lt
                             	; if c=1 and nz then >
e82e : d009             [ 3] 	bne df_rt_str_comp_gt
                             	; if here then both strings still the same
e830 : 8a               [ 2] 	txa							; What was op1 char
                             	; if char is zero then end
e831 : f009             [ 3] 	beq df_rt_str_comp_eq
                             	; else do next char
e833 : c8               [ 2] 	iny
e834 : d0f1             [ 3] 	bne df_rt_str_comp_byte ; Always - relying on Y 
e836 :                       df_rt_str_comp_lt
e836 : a9ff             [ 2] 	lda #0xff
e838 : 60               [ 6] 	rts
e839 :                       df_rt_str_comp_gt
e839 : a901             [ 2] 	lda #0x01
e83b : 60               [ 6] 	rts
e83c :                       df_rt_str_comp_eq
e83c : a900             [ 2] 	lda #0x00
e83e : 60               [ 6] 	rts
                             
                             
                             
                             
e83f :                       df_rt_monitor
e83f : 4cced2           [ 3] 	jmp command_line
                             
e842 :                       df_rt_new
e842 : 4c98f7           [ 3] 	jmp df_clear
                             
e845 :                       df_rt_while
                             	; push statement address
e845 : 20d4e4           [ 6] 	jsr df_rt_push_stat
                             	; DFRT_WHILE token
e848 : a990             [ 2] 	lda #DFRT_WHILE
e84a : 20e8f6           [ 6] 	jsr df_rst_pushByte
                             
                             	; get value in A,X
e84d : 2088e0           [ 6] 	jsr df_rt_getnval
                             
                             	; if value<>0 then continue
e850 : e000             [ 2] 	cpx #0
e852 : f001             [ 3] 	beq df_rt_while_done
e854 : 60               [ 6] 	rts
e855 :                       df_rt_while_done
                             	; pop while data off stack as not needed
e855 : 200ef7           [ 6] 	jsr df_rst_popWord
e858 : 200ef7           [ 6] 	jsr df_rst_popWord
                             	; while evaluated false so find wend
                             	; but check for any nested while/wends
                             	; nest = 1 to start
e85b : a593             [ 3] 	lda df_ifnest
e85d : 48               [ 3] 	pha
e85e : a901             [ 2] 	lda #1
e860 : 8593             [ 3] 	sta df_ifnest
                             	; find the matching else/elseif/endif
                             	; start from current statement
                             	_cpyZPWord df_currlin,df_nextlin
AS65 Assembler for R6502 [1.42].                                     Page  203
-------------------------------- bank\bank0.s --------------------------------

                             
e86a :                       df_rt_findwend
e86a : a689             [ 3] 	ldx df_nextlin
e86c : a58a             [ 3] 	lda df_nextlin+1
e86e : a480             [ 3] 	ldy df_curstidx
e870 : 20a2e4           [ 6] 	jsr df_rt_nextstat
                             	; got to end of program, then a problem
e873 : b031             [ 3] 	bcs df_rt_wend_end
e875 : 8689             [ 3] 	stx df_nextlin
e877 : 858a             [ 3] 	sta df_nextlin+1
e879 : 8480             [ 3] 	sty df_curstidx
                             	; find the command token
e87b :                       df_rt_while_cmd
e87b : c8               [ 2] 	iny
e87c : b189             [ 5] 	lda (df_nextlin),y
e87e : 10fb             [ 3] 	bpl df_rt_while_cmd
                             	; check for wend
e880 : c991             [ 2] 	cmp #DFRT_WEND
e882 : d019             [ 3] 	bne df_rt_check_while
                             	; decrement nest
e884 : c693             [ 5] 	dec df_ifnest
                             	; if not zero then go find more commands
e886 : d0e2             [ 3] 	bne df_rt_findwend
                             	; else found it, restore if nest
                             	; and skip the wend statement
e888 : 68               [ 4] 	pla
e889 : 8593             [ 3] 	sta df_ifnest
e88b : a689             [ 3] 	ldx df_nextlin
e88d : a58a             [ 3] 	lda df_nextlin+1
e88f : a480             [ 3] 	ldy df_curstidx
e891 : 20a2e4           [ 6] 	jsr df_rt_nextstat
                             	; got to end of program, then a problem
e894 : b010             [ 3] 	bcs df_rt_wend_end
                             	; need to update nxtstidx to transfer control
e896 : 8689             [ 3] 	stx df_nextlin
e898 : 858a             [ 3] 	sta df_nextlin+1
e89a : 847f             [ 3] 	sty df_nxtstidx
e89c : 60               [ 6] 	rts
e89d :                       df_rt_check_while
                             	; check for while
e89d : c990             [ 2] 	cmp #DFRT_WHILE
e89f : d0c9             [ 3] 	bne df_rt_findwend
                             	; if while found then increment nest
e8a1 : e693             [ 5] 	inc df_ifnest
e8a3 : 4c6ae8           [ 3] 	jmp df_rt_findwend
e8a6 :                       df_rt_wend_end
                             	SWBRK DFERR_IMMEDIATE
                             
                             
e8a8 :                       df_rt_wend
e8a8 : 20f1f6           [ 6] 	jsr df_rst_popByte
e8ab : c990             [ 2] 	cmp #DFRT_WHILE
e8ad : d00d             [ 3] 	bne df_rt_wend_err
                             	; pop the stat and continue
e8af : 200ef7           [ 6] 	jsr df_rst_popWord
e8b2 : 8689             [ 3] 	stx	df_nextlin
e8b4 : 858a             [ 3] 	sta df_nextlin+1
e8b6 : 20f1f6           [ 6] 	jsr df_rst_popByte
e8b9 : 857f             [ 3] 	sta df_nxtstidx
e8bb : 60               [ 6] 	rts
e8bc :                       df_rt_wend_err
                             	SWBRK DFERR_WEND
AS65 Assembler for R6502 [1.42].                                     Page  204
-------------------------------- bank\bank0.s --------------------------------

                             
                             
                             ;move to next statement during if/else matching
                             ;end of program is an error
e8be :                       df_rt_if_stat
e8be : a689             [ 3] 	ldx df_nextlin
e8c0 : a58a             [ 3] 	lda df_nextlin+1
e8c2 : a480             [ 3] 	ldy df_curstidx
e8c4 : 20a2e4           [ 6] 	jsr df_rt_nextstat
                             	; got to end of program, then a problem
e8c7 : b009             [ 3] 	bcs df_rt_if_stat_err
e8c9 : 8689             [ 3] 	stx df_nextlin
e8cb : 858a             [ 3] 	sta df_nextlin+1
e8cd : 8480             [ 3] 	sty df_curstidx
e8cf : 847f             [ 3] 	sty df_nxtstidx
e8d1 : 60               [ 6] 	rts
                             ; program ended with no match
e8d2 :                       df_rt_if_stat_err
                             	SWBRK DFERR_UNCLOSEDIF
                             
                             
                             ; find matching else/elseif/endif
                             ; C = 0 match else/elseif/endif
                             ; C = 1 match endif only
                             ; endif is always matched
                             ; ** MAKE SURE NEXTLIN IS POPULATED! **
e8d4 :                       df_rt_if_match
                             	; save the current if nest level
e8d4 : a593             [ 3] 	lda df_ifnest
e8d6 : 48               [ 3] 	pha
                             	; local if nest level is zero to start with
e8d7 : a900             [ 2] 	lda #0
e8d9 : 8593             [ 3] 	sta df_ifnest
                             	; save match pref
e8db : 08               [ 3] 	php
                             	; find the matching else/elseif/endif
                             	; start from df_nextlin, df_curstidx
e8dc :                       df_rt_findelseendif
e8dc : 20bee8           [ 6] 	jsr df_rt_if_stat
                             	; find command
e8df :                       df_rt_ifcmd
e8df : c8               [ 2] 	iny
e8e0 : b189             [ 5] 	lda (df_nextlin),y
e8e2 : 10fb             [ 3] 	bpl df_rt_ifcmd
                             	; check for endif
e8e4 : c994             [ 2] 	cmp #DFRT_ENDIF
e8e6 : f015             [ 3] 	beq df_rt_ifelse
                             
e8e8 : 28               [ 4] 	plp
e8e9 : 08               [ 3] 	php
                             
e8ea : b008             [ 3] 	bcs df_rt_ifskipelseif
e8ec : c993             [ 2] 	cmp #DFRT_ELSE
e8ee : f00d             [ 3] 	beq df_rt_ifelse
e8f0 : c995             [ 2] 	cmp #DFRT_ELSEIF
e8f2 : f009             [ 3] 	beq df_rt_ifelse
e8f4 :                       df_rt_ifskipelseif
                             	; another if token found - increment lcoal if ne
e8f4 : c992             [ 2] 	cmp #DFRT_IF
e8f6 : d002             [ 3] 	bne df_rt_skipnestif
e8f8 : e693             [ 5] 	inc df_ifnest
e8fa :                       df_rt_skipnestif
AS65 Assembler for R6502 [1.42].                                     Page  205
-------------------------------- bank\bank0.s --------------------------------

                             	; no tokens of interest found, so next statement
e8fa : 4cdce8           [ 3] 	jmp df_rt_findelseendif
                             
                             	; found else/elseif/endif
                             	; but check if this is nested
e8fd :                       df_rt_ifelse
                             	; nest counter zero then found matching else/els
e8fd : a693             [ 3] 	ldx df_ifnest
e8ff : f009             [ 4] 	beq df_rt_if_found
                             	; endif token found so decrement local nest
e901 : c994             [ 2] 	cmp #DFRT_ENDIF
e903 : d002             [ 3] 	bne df_rt_skipnestendif
e905 : c693             [ 5] 	dec df_ifnest
e907 :                       df_rt_skipnestendif
                             	; continue to search for else/endif
e907 : 4cdce8           [ 3] 	jmp df_rt_findelseendif
                             	; ok got a match
e90a :                       df_rt_if_found
                             	; remove pref
e90a : 28               [ 4] 	plp
                             	; restore global if nest
e90b : 8538             [ 3] 	sta tmp_d			; Using as a temp place!
e90d : 68               [ 4] 	pla					; Get nest from stack
e90e : aa               [ 2] 	tax					; And put in X
e90f : a538             [ 3] 	lda tmp_d			; Get a back from temp!
e911 : 8693             [ 3] 	stx df_ifnest		; Now restore the nest counter
                             
                             	;A contains the token found, Y is index in to df
                             ;	clc
e913 : 60               [ 6] 	rts
                             
e914 :                       df_rt_endif
                             	; decrement if next level
e914 : c693             [ 5] 	dec df_ifnest
e916 : 3011             [ 3] 	bmi df_rt_noif_err
e918 :                       df_rt_if_done
e918 : 60               [ 6] 	rts
                             
                             	; else and ifelse encountered in a normal sequen
                             	; only happens when the clause has been executed
                             	; so we only now need to find the endif
e919 :                       df_rt_elseif
e919 :                       df_rt_else
                             	; not in if mode then error
e919 : a593             [ 3] 	lda df_ifnest
e91b : f00c             [ 3] 	beq df_rt_noif_err
                             	; find endif only
                             	; starting from current line and curstidx
                             	_cpyZPWord df_currlin,df_nextlin
                             
e925 : 38               [ 2] 	sec
e926 : 4cd4e8           [ 3] 	jmp df_rt_if_match
                             
                             ; endif/else/elseif encountered outside of an if
e929 :                       df_rt_noif_err
                             	SWBRK DFERR_NOIF
                             
                             
                             	; when if is encountered, the job of this routin
                             	; to determine which clause to execute, then tra
                             	; program control to that point.  in normal prog
                             	; sequence else/elseif statements will signify t
AS65 Assembler for R6502 [1.42].                                     Page  206
-------------------------------- bank\bank0.s --------------------------------

                             	; of an if construct.
e92b :                       df_rt_if
                             	; increment global if nest counter
e92b : e693             [ 5] 	inc df_ifnest
e92d :                       df_rt_ifeval
                             	; get value
e92d : 2088e0           [ 6] 	jsr df_rt_getnval
                             	; if value<>0 if is successful then continue nor
e930 : c900             [ 2] 	cmp #0
e932 : d0e4             [ 3] 	bne df_rt_if_done
e934 : e000             [ 2] 	cpx #0
e936 : d0e0             [ 3] 	bne df_rt_if_done
                             	; got here then if clause evaluated to false
                             	; match with else/elseif/endif
                             	; df_nextlin is used to find the clause to execu
                             	_cpyZPWord df_currlin,df_nextlin
                             
e940 : 18               [ 2] 	clc
e941 : 20d4e8           [ 6] 	jsr df_rt_if_match
                             	; A contains the token found, Y is index of this
                             
e944 : c993             [ 2] 	cmp #DFRT_ELSE
                             	; else: df_nextlin and df_nxtstidx points to the
e946 : f023             [ 3] 	beq df_rt_do_else
                             
e948 : c994             [ 2] 	cmp #DFRT_ENDIF
                             	; else: df_nextlin and df_nxtstidx points to the
e94a : f0cc             [ 3] 	beq df_rt_if_done
                             
                             	; elif detected - increment past the token and e
                             	; make this the current line and token index
                             	_cpyZPWord df_nextlin,df_currlin
                             
                             	; move past the token and save position
e954 : c8               [ 2] 	iny
e955 : 98               [ 2] 	tya
e956 : 48               [ 3] 	pha
                             	; initialise statement pointer
e957 : a480             [ 3] 	ldy df_curstidx
e959 : a686             [ 3] 	ldx df_currlin
e95b : a587             [ 3] 	lda df_currlin+1
e95d : 200ae4           [ 6] 	jsr df_rt_init_stat_ptr
                             	; restore Y (one byte past the token) and save i
e960 : 68               [ 4] 	pla
e961 : a8               [ 2] 	tay
e962 : 8488             [ 3] 	sty df_exeoff
                             	; don't force a jump as we've initalised all var
e964 : a900             [ 2] 	lda #0
e966 : 858a             [ 3] 	sta df_nextlin+1
                             	; now everyting is set up to evaluate the elif c
e968 : 4c2de9           [ 3] 	jmp df_rt_ifeval
                             
e96b :                       df_rt_do_else
                             	; we need to point to the next statement not thi
e96b : 4cbee8           [ 3] 	jmp df_rt_if_stat
                             
e96e :                       df_rt_for
                             	; push statement address to rt stack
e96e : 20d4e4           [ 6] 	jsr df_rt_push_stat
                             	; get lvar
e971 : 205be5           [ 6] 	jsr df_rt_getlvar
                             	; Save lvar pointer, A is fine to trample
AS65 Assembler for R6502 [1.42].                                     Page  207
-------------------------------- bank\bank0.s --------------------------------

e974 : 48               [ 3] 	pha
e975 : 8a               [ 2] 	txa
e976 : 48               [ 3] 	pha
                             
                             	; find starting value
                             	; evaluate the starting value
                             	; can't use df_rt_getnval as need to use A,X fir
e977 : e688             [ 5] 	inc df_exeoff
e979 : 208ee0           [ 6] 	jsr df_rt_neval
                             	; get ready to update the counter using pointer
e97c : 68               [ 4] 	pla
e97d : aa               [ 2] 	tax
e97e : 86a1             [ 3] 	stx df_tmpptra
e980 : 68               [ 4] 	pla
e981 : 85a2             [ 3] 	sta df_tmpptra+1
                             	; But remember lvar pointer for later A is ok to
e983 : 48               [ 3] 	pha
e984 : 8a               [ 2] 	txa
e985 : 48               [ 3] 	pha
                             
                             	; get the starting value from op stack
e986 : 2066f7           [ 6] 	jsr df_ost_popInt
                             	; save it to counter slot
e989 : a001             [ 2] 	ldy #1
e98b : 91a1             [ 5] 	sta (df_tmpptra),y
e98d : 8a               [ 2] 	txa
e98e : 88               [ 2] 	dey
e98f : 91a1             [ 5] 	sta (df_tmpptra),y
                             
                             	; find end value
                             	; evaluate the end value
e991 : e688             [ 5] 	inc df_exeoff
e993 : 2088e0           [ 6] 	jsr df_rt_getnval
                             	; and put on rt stack
e996 : 2000f7           [ 6] 	jsr df_rst_pushWord
                             
                             	; find step value
                             	; evaluate the end value
e999 : e688             [ 5] 	inc df_exeoff
e99b : 2088e0           [ 6] 	jsr df_rt_getnval
                             	; and push on rt stack
e99e : 2000f7           [ 6] 	jsr df_rst_pushWord
                             	; save the counter lvar pointer
e9a1 : 68               [ 4] 	pla
e9a2 : aa               [ 2] 	tax
e9a3 : 68               [ 4] 	pla
e9a4 : 2000f7           [ 6] 	jsr df_rst_pushWord
                             	; all done - counter set to start
                             	; stack contains counter slot, step val, end val
                             	; now push for token
e9a7 : a98e             [ 2] 	lda #DFRT_FOR
e9a9 : 4ce8f6           [ 3] 	jmp df_rst_pushByte
                             
e9ac :                       df_rt_next
                             	; remember stack position
e9ac : a476             [ 3] 	ldy df_rtstop
e9ae : 98               [ 2] 	tya
e9af : 48               [ 3] 	pha
e9b0 : 20f1f6           [ 6] 	jsr df_rst_popByte
e9b3 : c98e             [ 2] 	cmp #DFRT_FOR
e9b5 : d052             [ 4] 	bne df_rt_next_err
                             	; get the slot address
AS65 Assembler for R6502 [1.42].                                     Page  208
-------------------------------- bank\bank0.s --------------------------------

e9b7 : 200ef7           [ 6] 	jsr df_rst_popWord
                             	; save address to ptrd, contents to ptra
e9ba : 86a7             [ 3] 	stx df_tmpptrd
e9bc : 85a8             [ 3] 	sta df_tmpptrd+1
e9be : a000             [ 2] 	ldy #0
e9c0 : b1a7             [ 5] 	lda (df_tmpptrd),y
e9c2 : 85a1             [ 3] 	sta df_tmpptra
e9c4 : c8               [ 2] 	iny
e9c5 : b1a7             [ 5] 	lda (df_tmpptrd),y
e9c7 : 85a2             [ 3] 	sta df_tmpptra+1
                             
                             	; get step value, save in ptrb
e9c9 : 200ef7           [ 6] 	jsr df_rst_popWord
e9cc : 86a3             [ 3] 	stx df_tmpptrb
e9ce : 85a4             [ 3] 	sta df_tmpptrb+1
e9d0 : 48               [ 3] 	pha					; Push A to check for -ve step
                             
                             	; add step to counter and save back to counter
                             	_addZPWord df_tmpptra,df_tmpptrb
                             
e9de : a5a1             [ 3] 	lda df_tmpptra
e9e0 : a000             [ 2] 	ldy #0
e9e2 : 91a7             [ 5] 	sta (df_tmpptrd),y
e9e4 : a5a2             [ 3] 	lda df_tmpptra+1
e9e6 : c8               [ 2] 	iny
e9e7 : 91a7             [ 5] 	sta (df_tmpptrd),y
                             
                             	; get end value, save in ptrb
e9e9 : 200ef7           [ 6] 	jsr df_rst_popWord
e9ec : 86a3             [ 3] 	stx df_tmpptrb
e9ee : 85a4             [ 3] 	sta df_tmpptrb+1
e9f0 : 68               [ 4] 	pla					; check if if +ve or -ve step
e9f1 : 1006             [ 3] 	bpl df_rt_check_pos
                             	; call gte operation but no need to get ints
                             	; as already in ptra and ptrb
e9f3 : 209fe7           [ 6] 	jsr df_rt_gte_calc
e9f6 : 4cfce9           [ 3] 	jmp df_rt_next_check
e9f9 :                       df_rt_check_pos
                             	; call lte operation but no need to get ints
                             	; as already in ptra and ptrb
e9f9 : 208be7           [ 6] 	jsr df_rt_lte_calc
e9fc :                       df_rt_next_check
                             	; check if true or false
e9fc : 2066f7           [ 6] 	jsr df_ost_popInt
e9ff : e000             [ 2] 	cpx #0
                             	; if false then next is done
ea01 : f003             [ 3] 	beq df_next_done
                             	; else we continue
ea03 : 4c77e5           [ 3] 	jmp df_rt_pop_stat_go
                             	; if done, then continue with next statement
ea06 :                       df_next_done
ea06 : 4c28ea           [ 3] 	jmp df_rt_untilnext_done
                             
ea09 :                       df_rt_next_err
                             	SWBRK DFERR_NEXTFOR
                             
                             
                             
ea0b :                       df_rt_repeat
                             	; push statement address
ea0b : 20d4e4           [ 6] 	jsr df_rt_push_stat
                             	; DFRT_REPEAT token
AS65 Assembler for R6502 [1.42].                                     Page  209
-------------------------------- bank\bank0.s --------------------------------

ea0e : a98c             [ 2] 	lda #DFRT_REPEAT
ea10 : 4ce8f6           [ 3] 	jmp df_rst_pushByte
                             
ea13 :                       df_rt_until
                             	; remember stack position
ea13 : a476             [ 3] 	ldy df_rtstop
ea15 : 98               [ 2] 	tya
ea16 : 48               [ 3] 	pha
ea17 : 20f1f6           [ 6] 	jsr df_rst_popByte
ea1a : c98c             [ 2] 	cmp #DFRT_REPEAT
ea1c : d012             [ 3] 	bne df_rt_until_err
                             	; evaluate expression in to A,X
ea1e : 2088e0           [ 6] 	jsr df_rt_getnval
                             	; if value<>0 then continue
ea21 : e000             [ 2] 	cpx #0
ea23 : d003             [ 3] 	bne df_rt_untilnext_done
                             
                             	; pop the stat and continue
ea25 : 4c77e5           [ 3] 	jmp df_rt_pop_stat_go
                             
ea28 :                       df_rt_untilnext_done
ea28 : 68               [ 4] 	pla
ea29 : a8               [ 2] 	tay
                             	; pop 2 items off stack (line address, index)
                             	; and continue
ea2a : 200ef7           [ 6] 	jsr df_rst_popWord
ea2d : 4cf1f6           [ 3] 	jmp df_rst_popByte
                             
ea30 :                       df_rt_until_err
                             	SWBRK DFERR_UNTIL
                             
                             
ea32 :                       df_rt_sadd
ea32 : 60               [ 6] 	rts
                             
ea33 :                       df_rt_print_num
ea33 : 2066f7           [ 6] 	jsr df_ost_popInt
ea36 : 18               [ 2] 	clc
ea37 : 4cf4c3           [ 3] 	jmp print_a_to_d
                             
ea3a :                       df_rt_print_str
ea3a : 206af7           [ 6] 	jsr df_ost_popStr
ea3d : 86a1             [ 3] 	stx df_tmpptra
ea3f : 85a2             [ 3] 	sta df_tmpptra+1
ea41 : a000             [ 2] 	ldy #0
ea43 :                       df_rt_print_str_ch
ea43 : b1a1             [ 5] 	lda (df_tmpptra),y
ea45 : f006             [ 3] 	beq df_rt_print_str_done
ea47 : 204bc4           [ 6] 	jsr io_put_ch
ea4a : c8               [ 2] 	iny
ea4b : d0f6             [ 3] 	bne df_rt_print_str_ch		; Rely on y not wrapping
ea4d :                       df_rt_print_str_done
ea4d : 60               [ 6] 	rts
                             
                             ; * Find the position of the next data item to re
ea4e :                       df_rt_nextdatum
ea4e : a200             [ 2] 	ldx #0
                             	; load data line offset
ea50 : a496             [ 3] 	ldy df_datoff
                             	; if data pointer unitialised (because high byte
ea52 : a595             [ 3] 	lda df_currdat+1
ea54 : d030             [ 3] 	bne df_rt_skipinitdataptr
AS65 Assembler for R6502 [1.42].                                     Page  210
-------------------------------- bank\bank0.s --------------------------------

                             	; then start at program beginning
                             	_cpyZPWord df_prgstrt,df_currdat
                             
ea5e :                       df_rt_datlinstart
                             	; if end of program then error
ea5e : a194             [ 6] 	lda (df_currdat,x)
ea60 : f034             [ 3] 	beq df_rt_datumerr
                             	; index in to first line byte
ea62 : a003             [ 2] 	ldy #3
ea64 : 8496             [ 3] 	sty df_datoff
                             	; find first 'data' statement
ea66 :                       df_rt_datastatement
ea66 : c8               [ 2] 	iny
ea67 : 98               [ 2] 	tya
                             	; end of line reached?
ea68 : c194             [ 6] 	cmp (df_currdat,x)
                             	; if not find data token
ea6a : d010             [ 3] 	bne df_rt_getdatatk
ea6c :                       df_rt_datnextlin
                             	; if so then go to next line
ea6c : 18               [ 2] 	clc
ea6d : a594             [ 3] 	lda df_currdat
ea6f : 6194             [ 6] 	adc (df_currdat,x)
ea71 : 8594             [ 3] 	sta df_currdat
ea73 : a595             [ 3] 	lda df_currdat+1
ea75 : 6900             [ 2] 	adc #0
ea77 : 8595             [ 3] 	sta df_currdat+1
ea79 : 4c5eea           [ 3] 	jmp df_rt_datlinstart
ea7c :                       df_rt_getdatatk
ea7c : b194             [ 5] 	lda (df_currdat),y
ea7e : 10e6             [ 3] 	bpl df_rt_datastatement
                             	; found data statement?
ea80 : c996             [ 2] 	cmp #DFRT_DATA
                             	; if not then go to next line
ea82 : d0e8             [ 3] 	bne df_rt_datnextlin
ea84 : 8496             [ 3] 	sty df_datoff
ea86 :                       df_rt_skipinitdataptr
ea86 : 98               [ 2] 	tya
                             	; end of line reached?
ea87 : c194             [ 6] 	cmp (df_currdat,x)
                             	; if so go to next line
ea89 : f0e1             [ 3] 	beq df_rt_datnextlin
                             	; else see if escape value
ea8b : b194             [ 5] 	lda (df_currdat),y
ea8d : c920             [ 2] 	cmp #DFTK_ESCVAL
ea8f : c8               [ 2] 	iny
ea90 : b0f4             [ 3] 	bcs df_rt_skipinitdataptr
                             	; ok found an escape value
                             	; save position and return
ea92 : 88               [ 2] 	dey
ea93 : 8496             [ 3] 	sty df_datoff
ea95 : 60               [ 6] 	rts
ea96 :                       df_rt_datumerr
                             	SWBRK DFERR_NODATA
                             
                             
                             ; read a datum
ea98 :                       df_rt_readdatum
                             	; update data pointer to next data item
ea98 : 204eea           [ 6] 	jsr df_rt_nextdatum
                             
                             	; now get lvar X,A from current statement
AS65 Assembler for R6502 [1.42].                                     Page  211
-------------------------------- bank\bank0.s --------------------------------

ea9b : 205be5           [ 6] 	jsr df_rt_getlvar
                             	; save lvar in tmpb, vvt ptr in tmpa
ea9e : 86a3             [ 3] 	stx df_tmpptrb
eaa0 : 85a4             [ 3] 	sta df_tmpptrb+1
                             
                             	; first save save current prgoram line and offse
eaa2 : a586             [ 3] 	lda df_currlin
eaa4 : 48               [ 3] 	pha
eaa5 : a587             [ 3] 	lda df_currlin+1
eaa7 : 48               [ 3] 	pha
eaa8 : a588             [ 3] 	lda df_exeoff
eaaa : 48               [ 3] 	pha
eaab : a57e             [ 3] 	lda df_eolidx
eaad : 48               [ 3] 	pha
eaae : a57f             [ 3] 	lda df_nxtstidx
eab0 : 48               [ 3] 	pha
eab1 : a580             [ 3] 	lda df_curstidx
eab3 : 48               [ 3] 	pha
                             
                             	; use data pointer as current position for evalu
                             	_cpyZPWord df_currdat,df_currlin
                             
eabc : a596             [ 3] 	lda df_datoff
eabe : 8588             [ 3] 	sta df_exeoff
eac0 : a200             [ 2] 	ldx #0
eac2 : a194             [ 6] 	lda (df_currdat,x)
eac4 : 857e             [ 3] 	sta df_eolidx
eac6 : a900             [ 2] 	lda #0
eac8 : 857f             [ 3] 	sta df_nxtstidx
eaca : a903             [ 2] 	lda #3
eacc : 8580             [ 3] 	sta df_curstidx
                             
                             	; get type from vvt ptr in tmpa
eace : a1a1             [ 6] 	lda (df_tmpptra,x)
ead0 : a8               [ 2] 	tay
                             	; get lvar point from tmpb
ead1 : a6a3             [ 3] 	ldx df_tmpptrb
ead3 : a5a4             [ 3] 	lda df_tmpptrb+1
                             
                             	; X,A and Y set up, now evaluate and perform ass
ead5 : 208bed           [ 6] 	jsr df_rt_doassign
                             
                             	; update data offset as data has been consumed
ead8 : a588             [ 3] 	lda df_exeoff
eada : 8596             [ 3] 	sta df_datoff
                             	; restore line settings
eadc : 68               [ 4] 	pla
eadd : 8580             [ 3] 	sta df_curstidx
eadf : 68               [ 4] 	pla
eae0 : 857f             [ 3] 	sta df_nxtstidx
eae2 : 68               [ 4] 	pla
eae3 : 857e             [ 3] 	sta df_eolidx
eae5 : 68               [ 4] 	pla
eae6 : 8588             [ 3] 	sta df_exeoff
eae8 : 68               [ 4] 	pla
eae9 : 8587             [ 3] 	sta df_currlin+1
eaeb : 68               [ 4] 	pla
eaec : 8586             [ 3] 	sta df_currlin
eaee : 60               [ 6] 	rts
                             
                             
eaef :                       df_rt_read
AS65 Assembler for R6502 [1.42].                                     Page  212
-------------------------------- bank\bank0.s --------------------------------

                             	; find variable to read in to from current posit
eaef : a488             [ 3] 	ldy df_exeoff
eaf1 :                       df_rt_read_find_var
eaf1 : c8               [ 2] 	iny
                             	; if end of line or statement then done
eaf2 : c47e             [ 3] 	cpy df_eolidx
eaf4 : f012             [ 4] 	beq df_rt_read_done
eaf6 : c47f             [ 3] 	cpy df_nxtstidx
eaf8 : f00e             [ 4] 	beq df_rt_read_done
                             	; if not found escape then next byte
eafa : b186             [ 5] 	lda (df_currlin),y
eafc : c920             [ 2] 	cmp #DFTK_ESCVAL
eafe : b0f1             [ 3] 	bcs df_rt_read_find_var
                             	; ok found escape, save position
eb00 : 8488             [ 3] 	sty df_exeoff
                             	; go and read in the value
eb02 : 2098ea           [ 6] 	jsr df_rt_readdatum
                             	; try find another variable
eb05 : 4cefea           [ 3] 	jmp df_rt_read
                             
eb08 :                       df_rt_read_done
                             	; save position
eb08 : 8488             [ 3] 	sty df_exeoff
eb0a : 60               [ 6] 	rts
                             
eb0b :                       df_rt_input
                             	; df_tmpptra has the vvt address, X,A is the lva
eb0b : 205be5           [ 6] 	jsr df_rt_getlvar
                             	; Save lvar pointer
eb0e : 86a3             [ 3] 	stx df_tmpptrb
eb10 : 85a4             [ 3] 	sta df_tmpptrb+1
                             	; go read a line of input
                             	; buf_lo ptr has the input, Y is size
eb12 : 38               [ 2] 	sec
eb13 : 2060c4           [ 6] 	jsr io_read_line
                             	; check the type
eb16 : a200             [ 2] 	ldx #0
eb18 : a1a1             [ 6] 	lda (df_tmpptra,x)
eb1a : 2904             [ 2] 	and #DFVVT_STR
eb1c : d008             [ 3] 	bne df_rt_input_str
eb1e : a1a1             [ 6] 	lda (df_tmpptra,x)
eb20 : 2903             [ 2] 	and #DFVVT_INT|DFVVT_BYT
eb22 : d00a             [ 3] 	bne df_rt_input_num
                             	; if not int or byte then error
eb24 : f01f             [ 3] 	beq df_rt_input_err
eb26 :                       df_rt_input_str
eb26 : b139             [ 5] 	lda (buf_lo),y
eb28 : 91a3             [ 5] 	sta (df_tmpptrb),y
eb2a : 88               [ 2] 	dey
eb2b : 10f9             [ 3] 	bpl df_rt_input_str
eb2d : 60               [ 6] 	rts
                             
eb2e :                       df_rt_input_num
                             	; X,A = address, linbuff must be on page boundar
eb2e : a53a             [ 3] 	lda buf_lo+1
eb30 : a639             [ 3] 	ldx buf_lo
eb32 : a000             [ 2] 	ldy #0				; any numeric format
eb34 : 20d4c1           [ 6] 	jsr con_n_to_a
eb37 : b00c             [ 3] 	bcs df_rt_input_err
eb39 : a000             [ 2] 	ldy #0
eb3b : a53d             [ 3] 	lda num_a
eb3d : 91a3             [ 5] 	sta (df_tmpptrb),y
AS65 Assembler for R6502 [1.42].                                     Page  213
-------------------------------- bank\bank0.s --------------------------------

eb3f : c8               [ 2] 	iny
eb40 : a53e             [ 3] 	lda num_a+1
eb42 : 91a3             [ 5] 	sta (df_tmpptrb),y
eb44 : 60               [ 6] 	rts
eb45 :                       df_rt_input_err
                             	SWBRK DFERR_TYPEMISM
                             
                             
eb47 :                       df_rt_local
                             	; get current local count off rt stack
eb47 : 20f1f6           [ 6] 	jsr df_rst_popByte
                             	; save on pc stack for incrmenting
eb4a : 48               [ 3] 	pha
eb4b : a488             [ 3] 	ldy df_exeoff
eb4d : 88               [ 2] 	dey
eb4e :                       df_rt_local_findesc
eb4e : c8               [ 2] 	iny
                             	; check end of line
eb4f : c47e             [ 3] 	cpy df_eolidx
eb51 : f020             [ 3] 	beq df_rt_local_done
eb53 : c47f             [ 3] 	cpy df_nxtstidx
eb55 : f01c             [ 3] 	beq df_rt_local_done
                             	; find a var
eb57 : b186             [ 5] 	lda (df_currlin),y
eb59 : c911             [ 2] 	cmp #DFTK_VAR
eb5b : d0f1             [ 3] 	bne df_rt_local_findesc
                             	; jump over escape value
eb5d : c8               [ 2] 	iny
                             	; get var slot in A,X
eb5e : b186             [ 5] 	lda (df_currlin),y
eb60 : aa               [ 2] 	tax
eb61 : c8               [ 2] 	iny
eb62 : b186             [ 5] 	lda (df_currlin),y
eb64 : 8488             [ 3] 	sty df_exeoff
                             	; localise this variable
eb66 : 20d4f6           [ 6] 	jsr df_rt_proc_local
                             	; increment local counter
eb69 : 68               [ 4] 	pla
eb6a : 18               [ 2] 	clc
eb6b : 6901             [ 2] 	adc #1
eb6d : 48               [ 3] 	pha
eb6e : a488             [ 3] 	ldy df_exeoff
eb70 : 4c4eeb           [ 3] 	jmp df_rt_local_findesc
eb73 :                       df_rt_local_done
                             	; get the local counter
                             	; put on to rt stack
eb73 : 68               [ 4] 	pla
eb74 : 4ce8f6           [ 3] 	jmp df_rst_pushByte
                             
                             
eb77 :                       df_rt_dim
eb77 : a488             [ 3] 	ldy df_exeoff
eb79 : 88               [ 2] 	dey
eb7a :                       df_rt_dim_findesc
                             	; check end of line
eb7a : c8               [ 2] 	iny
eb7b : c47e             [ 3] 	cpy df_eolidx
eb7d : f07e             [ 3] 	beq df_rt_dim_done
eb7f : c47f             [ 3] 	cpy df_nxtstidx
eb81 : f07a             [ 3] 	beq df_rt_dim_done
                             	; find a var
eb83 : b186             [ 5] 	lda (df_currlin),y
AS65 Assembler for R6502 [1.42].                                     Page  214
-------------------------------- bank\bank0.s --------------------------------

eb85 : c911             [ 2] 	cmp #DFTK_VAR
eb87 : d0f1             [ 3] 	bne df_rt_dim_findesc
                             	; jump over escape value
eb89 : c8               [ 2] 	iny
                             	; get var address
eb8a : b186             [ 5] 	lda (df_currlin),y
eb8c : 85a1             [ 3] 	sta df_tmpptra
eb8e : c8               [ 2] 	iny
eb8f : b186             [ 5] 	lda (df_currlin),y
eb91 : 85a2             [ 3] 	sta df_tmpptra+1
                             	; move to open bracket
eb93 : c8               [ 2] 	iny
eb94 : 8488             [ 3] 	sty df_exeoff
                             	; check if already dim'd
eb96 : a003             [ 2] 	ldy #DFVVT_DIM1
eb98 : b1a1             [ 5] 	lda (df_tmpptra),y
eb9a : d062             [ 3] 	bne df_rt_dim_err
                             	; Save slot address found earlier
eb9c : a5a1             [ 3] 	lda df_tmpptra
eb9e : 48               [ 3] 	pha
eb9f : a5a2             [ 3] 	lda df_tmpptra+1
eba1 : 48               [ 3] 	pha
eba2 : 2017e2           [ 6] 	jsr df_rt_arry_parm2
                             	; Restore slot address
eba5 : 68               [ 4] 	pla
eba6 : 85a2             [ 3] 	sta df_tmpptra+1
eba8 : 68               [ 4] 	pla
eba9 : 85a1             [ 3] 	sta df_tmpptra
                             ;	bcs df_rt_dim_err
                             	; save x,y to dim1,2
ebab : 98               [ 2] 	tya
ebac : 48               [ 3] 	pha
ebad : 8a               [ 2] 	txa
ebae : 48               [ 3] 	pha
ebaf : a003             [ 2] 	ldy #DFVVT_DIM1
ebb1 : 68               [ 4] 	pla
ebb2 : 91a1             [ 5] 	sta (df_tmpptra),y
ebb4 : c8               [ 2] 	iny
ebb5 : 68               [ 4] 	pla
ebb6 : 91a1             [ 5] 	sta (df_tmpptra),y
ebb8 :                       df_rt_dim_alloc
                             	; ok we have up to 2 dimensions
                             	; mult dim 1 and 2 if dim 2 <> 0
ebb8 : a003             [ 2] 	ldy #DFVVT_DIM1
ebba : b1a1             [ 5] 	lda (df_tmpptra),y
ebbc : 853d             [ 3] 	sta num_a
ebbe : a900             [ 2] 	lda #0
ebc0 : 853e             [ 3] 	sta num_a+1
ebc2 : c8               [ 2] 	iny
ebc3 : b1a1             [ 5] 	lda (df_tmpptra),y
ebc5 : d002             [ 3] 	bne df_rt_dim2_nz
ebc7 : a901             [ 2] 	lda #1
ebc9 :                       df_rt_dim2_nz
ebc9 : 8541             [ 3] 	sta num_b
ebcb : a900             [ 2] 	lda #0
ebcd : 8542             [ 3] 	sta num_b+1
ebcf : 2063d4           [ 6] 	jsr int_fast_mult
                             	; check the type if int then mult2
ebd2 : a200             [ 2] 	ldx #0
ebd4 : a1a1             [ 6] 	lda (df_tmpptra,x)
ebd6 : 2901             [ 2] 	and #DFVVT_INT
ebd8 : f004             [ 3] 	beq df_rt_dim2_mul2
AS65 Assembler for R6502 [1.42].                                     Page  215
-------------------------------- bank\bank0.s --------------------------------

ebda : 063d             [ 5] 	asl num_a
ebdc : 263e             [ 5] 	rol num_a+1
ebde :                       df_rt_dim2_mul2
                             	; finally, we have a size of array
ebde : a63d             [ 3] 	ldx num_a
ebe0 : a53e             [ 3] 	lda num_a+1
                             
                             	; get a block of that size from heap
ebe2 : 2072f7           [ 6] 	jsr df_st_malloc
                             	; save pointer to block in var
ebe5 : a002             [ 2] 	ldy #DFVVT_HI
ebe7 : 91a1             [ 5] 	sta (df_tmpptra),y
ebe9 : 8a               [ 2] 	txa
ebea : 88               [ 2] 	dey
ebeb : 91a1             [ 5] 	sta (df_tmpptra),y
                             	; finally, update the type to indicate array
ebed : a200             [ 2] 	ldx #0
ebef : a1a1             [ 6] 	lda (df_tmpptra,x)
ebf1 : 0980             [ 2] 	ora #DFVVT_ARRY
ebf3 : 81a1             [ 6] 	sta (df_tmpptra,x)
                             	; don't increment byte again - go check for more
ebf5 : 4c77eb           [ 3] 	jmp df_rt_dim
ebf8 :                       df_rt_dim_next_byte
ebf8 : e688             [ 5] 	inc df_exeoff
ebfa : 4c77eb           [ 3] 	jmp df_rt_dim
ebfd :                       df_rt_dim_done
ebfd : 60               [ 6] 	rts
ebfe :                       df_rt_dim_err
                             	SWBRK DFERR_DIM
                             
                             
                             
ec00 :                       df_rt_cls
ec00 : 4c69cd           [ 3] 	jmp gr_cls
                             
                             
ec03 :                       df_rt_plot
                             	; evaluate the expression
ec03 : 2088e0           [ 6] 	jsr df_rt_getnval
                             	; save lo byte
ec06 : 8a               [ 2] 	txa
ec07 : 48               [ 3] 	pha
                             	; jump over comma
ec08 : e688             [ 5] 	inc df_exeoff
                             	; evaluate the expression
ec0a : 2088e0           [ 6] 	jsr df_rt_getnval
                             	; save lo byte
ec0d : 8a               [ 2] 	txa
ec0e : 48               [ 3] 	pha
                             	; jump over comma
ec0f : e688             [ 5] 	inc df_exeoff
                             	; evaluate the expression
ec11 : 208ee0           [ 6] 	jsr df_rt_neval
                             	; check the type on the stack
ec14 : 2060f7           [ 6] 	jsr df_ost_peekType
                             	; if >=0x80 then a pointer / string
ec17 : c980             [ 2] 	cmp #0x80
ec19 : b01b             [ 3] 	bcs df_rt_plotstr
                             	; else it is int
ec1b : 2066f7           [ 6] 	jsr df_ost_popInt
                             	; save  low byte of pop result in a temp
ec1e : 86a1             [ 3] 	stx df_tmpptra
AS65 Assembler for R6502 [1.42].                                     Page  216
-------------------------------- bank\bank0.s --------------------------------

ec20 : a511             [ 3] 	lda gr_scrngeom+gr_mode			; Check screen mode
ec22 : d009             [ 3] 	bne df_rt_plot_h_int
                             	; get X and Y coord in that order
                             	; but Y coord goes in X register!!!
ec24 : 68               [ 4] 	pla
ec25 : aa               [ 2] 	tax
ec26 : 68               [ 4] 	pla
ec27 : a8               [ 2] 	tay
ec28 : a5a1             [ 3] 	lda df_tmpptra	; Get pop result in to A
ec2a : 4cbfcd           [ 3] 	jmp gr_plot
ec2d :                       df_rt_plot_h_int
ec2d : 68               [ 4] 	pla
ec2e : a8               [ 2] 	tay
ec2f : 68               [ 4] 	pla
ec30 : aa               [ 2] 	tax
ec31 : a5a1             [ 3] 	lda df_tmpptra	; Get pop result in to A
ec33 : 4c68cf           [ 3] 	jmp gr_hchar
                             
                             
ec36 :                       df_rt_plotstr
                             	; pop string pointer
ec36 : 206ef7           [ 6] 	jsr df_ost_popPtr
                             	; save pointer to tmpa
ec39 : 86a1             [ 3] 	stx df_tmpptra
ec3b : 85a2             [ 3] 	sta df_tmpptra+1
                             	; get y and x in that order
                             	; but X register is Y coord!!
ec3d : 68               [ 4] 	pla
ec3e : 85a5             [ 3] 	sta df_tmpptrc			; Y coord in C
ec40 : 68               [ 4] 	pla
ec41 : 85a3             [ 3] 	sta df_tmpptrb			; X coord in B
                             	; set cursror position
ec43 : a000             [ 2] 	ldy #0
ec45 : 84a9             [ 3] 	sty df_tmpptre
ec47 :                       df_rt_plotstrch
ec47 : a4a9             [ 3] 	ldy df_tmpptre
ec49 : b1a1             [ 5] 	lda (df_tmpptra),y
ec4b : 85a7             [ 3] 	sta df_tmpptrd			; char in D
ec4d : c900             [ 2] 	cmp #0
ec4f : f025             [ 3] 	beq df_rt_plotstrdone
ec51 : e6a9             [ 5] 	inc df_tmpptre
ec53 : a511             [ 3] 	lda gr_scrngeom+gr_mode; Check screen mode
ec55 : d00d             [ 3] 	bne df_rt_plot_h_str
ec57 : a5a7             [ 3] 	lda df_tmpptrd			; Get char to plot
ec59 : a6a5             [ 3] 	ldx df_tmpptrc			; Get Y coord
ec5b : a4a3             [ 3] 	ldy df_tmpptrb			; Get X coord
ec5d : 20bfcd           [ 6] 	jsr gr_plot
ec60 : e6a3             [ 5] 	inc df_tmpptrb			; Increment X coord
ec62 : d0e3             [ 3] 	bne df_rt_plotstrch		; Always - assume x is neve
ec64 :                       df_rt_plot_h_str
ec64 : a5a7             [ 3] 	lda df_tmpptrd			; Get char to plot
ec66 : a6a3             [ 3] 	ldx df_tmpptrb			; Get X coord
ec68 : a4a5             [ 3] 	ldy df_tmpptrc			; Get Y coord
ec6a : 2068cf           [ 6] 	jsr gr_hchar
ec6d : 18               [ 2] 	clc
ec6e : a5a3             [ 3] 	lda df_tmpptrb
ec70 : 6521             [ 3] 	adc gr_scrngeom+gr_pitch
ec72 : 85a3             [ 3] 	sta df_tmpptrb
ec74 : d0d1             [ 3] 	bne df_rt_plotstrch		; Always - assume adding pi
ec76 :                       df_rt_plotstrdone
ec76 : 60               [ 6] 	rts
                             
AS65 Assembler for R6502 [1.42].                                     Page  217
-------------------------------- bank\bank0.s --------------------------------

ec77 :                       df_rt_cursor
                             	; evaluate the expression
ec77 : 2088e0           [ 6] 	jsr df_rt_getnval
                             	; write low byte of vdp_curoff
                             	; by writing a zero then cursor on else not
ec7a : 860d             [ 3] 	stx vdp_curoff
ec7c : 60               [ 6] 	rts
                             
ec7d :                       df_rt_himem
                             	; evaluate the expression
ec7d : 2088e0           [ 6] 	jsr df_rt_getnval
                             	; write X,A to df_memtop
ec80 : 8e1106           [ 4] 	stx df_memtop
ec83 : 8d1206           [ 4] 	sta df_memtop+1
                             	; now clear everything down
ec86 : 4c98f7           [ 3] 	jmp df_clear
                             
ec89 :                       df_rt_text
ec89 : 4cd1cc           [ 3] 	jmp gr_init_screen_txt
                             
ec8c :                       df_rt_hires
ec8c : 4ceacc           [ 3] 	jmp gr_init_hires
                             
ec8f :                       df_rt_pixmode
                             	; evaluate the expression X = mode
ec8f : 2088e0           [ 6] 	jsr df_rt_getnval
ec92 : 8620             [ 3] 	stx gr_scrngeom+gr_pixmode
ec94 : 60               [ 6] 	rts
                             
ec95 :                       df_rt_ink
                             	; evaluate the expression X = col
ec95 : 2088e0           [ 6] 	jsr df_rt_getnval
ec98 : 8624             [ 3] 	stx gr_scrngeom+gr_ink
ec9a : 60               [ 6] 	rts
                             
ec9b :                       df_rt_paper
                             	; evaluate the expression X = col
ec9b : 2088e0           [ 6] 	jsr df_rt_getnval
                             	; Add 16 to get paper colour
ec9e : 8a               [ 2] 	txa
ec9f : 18               [ 2] 	clc
eca0 : 6910             [ 2] 	adc #16
eca2 : 8525             [ 3] 	sta gr_scrngeom+gr_paper
eca4 : 60               [ 6] 	rts
                             
eca5 :                       df_rt_point
eca5 : 2066e3           [ 6] 	jsr df_rt_parm_2ints
eca8 : a6a1             [ 3] 	ldx df_tmpptra
ecaa : a4a3             [ 3] 	ldy df_tmpptrb
ecac : 4c2ed0           [ 3] 	jmp gr_point
                             
ecaf :                       df_rt_circle
ecaf : 207de3           [ 6] 	jsr df_rt_parm_3ints
ecb2 : a5a1             [ 3] 	lda df_tmpptra				; load x0
ecb4 : 853d             [ 3] 	sta num_a
ecb6 : a5a3             [ 3] 	lda	df_tmpptrb				; load y0
ecb8 : 853e             [ 3] 	sta num_a+1
ecba : a5a5             [ 3] 	lda df_tmpptrc				; load r
ecbc : 853f             [ 3] 	sta num_a+2
ecbe : 4c5bd0           [ 3] 	jmp gr_circle
                             
ecc1 :                       df_rt_lineto
AS65 Assembler for R6502 [1.42].                                     Page  218
-------------------------------- bank\bank0.s --------------------------------

ecc1 : 2066e3           [ 6] 	jsr df_rt_parm_2ints
ecc4 : a6a1             [ 3] 	ldx df_tmpptra				; load x1
ecc6 : a4a3             [ 3] 	ldy df_tmpptrb				; load y1
ecc8 :                       df_rt_doline
ecc8 : 863f             [ 3] 	stx num_a+2
ecca : 8440             [ 3] 	sty num_a+3
eccc : 4c11d1           [ 3] 	jmp gr_line
eccf :                       df_rt_line
eccf : 20a0e3           [ 6] 	jsr df_rt_parm_4ints
ecd2 : a6a1             [ 3] 	ldx df_tmpptra				; load x0
ecd4 : a4a3             [ 3] 	ldy	df_tmpptrb				; load y0
ecd6 : 2021d0           [ 6] 	jsr gr_set_hires_cur		; Start from x,y
ecd9 : a6a5             [ 3] 	ldx df_tmpptrc				; load x1
ecdb : a4a7             [ 3] 	ldy df_tmpptrd				; load y1
ecdd : 4cc8ec           [ 3] 	jmp df_rt_doline
                             
ece0 :                       df_rt_wait
                             	; evaluate the expression
ece0 : 2088e0           [ 6] 	jsr df_rt_getnval
                             	; put high byte in to Y (X,Y)=16 bits
ece3 : a8               [ 2] 	tay
ece4 :                       df_rt_wait_counter
                             	; get vdp low byte timer val in A
ece4 : a508             [ 3] 	lda vdp_cnt
ece6 :                       df_rt_wait_tick
                             	; check if a tick has occurred (i.e. val <> A)
ece6 : c508             [ 3] 	cmp vdp_cnt
ece8 : f0fc             [ 3] 	beq df_rt_wait_tick
                             	; countdown tick
ecea : ca               [ 2] 	dex
eceb : e0ff             [ 2] 	cpx #0xff
eced : d001             [ 3] 	bne df_rt_wait_skiphi
ecef : 88               [ 2] 	dey
ecf0 :                       df_rt_wait_skiphi
ecf0 : e000             [ 2] 	cpx #0
ecf2 : d0f0             [ 3] 	bne df_rt_wait_counter
ecf4 : c000             [ 2] 	cpy #0
ecf6 : d0ec             [ 3] 	bne df_rt_wait_counter
ecf8 : 60               [ 6] 	rts
                             
ecf9 :                       df_rt_printat
                             	; Get x,y
ecf9 : 2066e3           [ 6] 	jsr df_rt_parm_2ints
ecfc : a6a1             [ 3] 	ldx df_tmpptra
ecfe : a4a3             [ 3] 	ldy df_tmpptrb
                             	; Set the cursror here
ed00 : 20d8cd           [ 6] 	jsr gr_set_cur
                             	; and continue to normal print command
ed03 :                       df_rt_print
ed03 : a488             [ 3] 	ldy df_exeoff
ed05 : 88               [ 2] 	dey
ed06 :                       df_rt_print_ws
ed06 : c8               [ 2] 	iny
                             
                             	; evaluate an expression
ed07 : c47e             [ 3] 	cpy df_eolidx
ed09 : f032             [ 3] 	beq df_rt_print_done
ed0b : c47f             [ 3] 	cpy df_nxtstidx
ed0d : f02e             [ 3] 	beq df_rt_print_done
ed0f : b186             [ 5] 	lda (df_currlin),y
ed11 : c93a             [ 2] 	cmp #':'
ed13 : f028             [ 3] 	beq df_rt_print_done
AS65 Assembler for R6502 [1.42].                                     Page  219
-------------------------------- bank\bank0.s --------------------------------

ed15 : c920             [ 2] 	cmp #' '
ed17 : f0ed             [ 3] 	beq df_rt_print_ws
ed19 : c92c             [ 2] 	cmp #','
ed1b : f0e9             [ 3] 	beq df_rt_print_ws
                             	; save index
ed1d : 8488             [ 3] 	sty df_exeoff
                             
                             	; if starts with string literal then process sev
ed1f : c910             [ 2] 	cmp #DFTK_STRLIT
ed21 : f014             [ 3] 	beq df_rt_print_string
                             	; else evaluate a numeric
ed23 : 208ee0           [ 6] 	jsr df_rt_neval
                             	; check what is on the argument stack
ed26 : 2060f7           [ 6] 	jsr df_ost_peekType
ed29 : 3006             [ 3] 	bmi df_rt_print_gotstr
ed2b : 2033ea           [ 6] 	jsr df_rt_print_num
ed2e : 4c03ed           [ 3] 	jmp df_rt_print
ed31 :                       df_rt_print_gotstr
ed31 : 203aea           [ 6] 	jsr df_rt_print_str
ed34 : 4c03ed           [ 3] 	jmp df_rt_print
ed37 :                       df_rt_print_string
ed37 : 2048e1           [ 6] 	jsr df_rt_seval
ed3a : 4c31ed           [ 3] 	jmp df_rt_print_gotstr
ed3d :                       df_rt_print_done
ed3d : 8488             [ 3] 	sty df_exeoff
ed3f : 60               [ 6] 	rts
                             
ed40 :                       df_rt_println
ed40 : 2003ed           [ 6] 	jsr df_rt_print
ed43 : a90d             [ 2] 	lda #UTF_CR
ed45 : 4c4bc4           [ 3] 	jmp io_put_ch
                             
                             
                             ; assign to a number variable
                             ; X,A must have lvar
ed48 :                       df_rt_nassign
                             	; push var address, A ok to trample
ed48 : 48               [ 3] 	pha
ed49 : 8a               [ 2] 	txa
ed4a : 48               [ 3] 	pha
                             
                             	; now go evaluate expression in to A,X
ed4b : 2088e0           [ 6] 	jsr df_rt_getnval
                             	; restore variable address to write to to df_tmp
                             	; but don't lose current A
ed4e : a8               [ 2] 	tay					; Save A in Y
ed4f : 68               [ 4] 	pla
ed50 : 85a1             [ 3] 	sta df_tmpptra
ed52 : 68               [ 4] 	pla
ed53 : 85a2             [ 3] 	sta df_tmpptra+1
ed55 : 98               [ 2] 	tya					; Get A back from Y
                             
                             	; save X,A int in contents section
ed56 : a001             [ 2] 	ldy #1
ed58 : 91a1             [ 5] 	sta (df_tmpptra),y
ed5a : 8a               [ 2] 	txa
ed5b : 88               [ 2] 	dey
ed5c : 91a1             [ 5] 	sta (df_tmpptra),y
                             
ed5e : 60               [ 6] 	rts
                             
                             ; assign to a string variable
AS65 Assembler for R6502 [1.42].                                     Page  220
-------------------------------- bank\bank0.s --------------------------------

                             ; X,A must have lvar
ed5f :                       df_rt_sassign
                             	; now go evaluate expression
                             	; with the destination being already in X,A
ed5f : 204ce1           [ 6] 	jsr df_rt_sval
                             
                             	; get string pointer from top of runtime stack
ed62 : 4c6af7           [ 3] 	jmp df_ost_popStr
                             
                             
                             ; generate lvar from a var token ready for assign
ed65 :                       df_rt_generate_lvar
                             	; move past escape val
ed65 : a488             [ 3] 	ldy df_exeoff
ed67 : c8               [ 2] 	iny
                             	; pointing to variable index
ed68 : b186             [ 5] 	lda (df_currlin),y
ed6a : 85a1             [ 3] 	sta df_tmpptra
ed6c : c8               [ 2] 	iny
ed6d : b186             [ 5] 	lda (df_currlin),y
ed6f : 8488             [ 3] 	sty df_exeoff
ed71 : 85a2             [ 3] 	sta df_tmpptra+1
                             
                             	; get the type and save
ed73 : a200             [ 2] 	ldx #0
ed75 : a1a1             [ 6] 	lda (df_tmpptra,x)
ed77 : 48               [ 3] 	pha
                             
                             	; set carry flag to return pointer (lvar)
ed78 : 38               [ 2] 	sec
ed79 : 203be2           [ 6] 	jsr df_rt_eval_var
ed7c : 206ef7           [ 6] 	jsr df_ost_popPtr
                             
                             	; pull the type previously saved into Y
ed7f : 8538             [ 3] 	sta tmp_d		; Save A
ed81 : 68               [ 4] 	pla
ed82 : a8               [ 2] 	tay
ed83 : a538             [ 3] 	lda tmp_d
                             	; move past the lvar variable index
ed85 : e688             [ 5] 	inc df_exeoff
ed87 : 60               [ 6] 	rts
                             
                             ; general assignment execution
                             ; generate lvar first
ed88 :                       df_rt_assign
ed88 : 2065ed           [ 6] 	jsr df_rt_generate_lvar
                             ; X,A,Y contain lvar pointer and type
ed8b :                       df_rt_doassign
                             	; save A and put type Y in to A to check for str
ed8b : 48               [ 3] 	pha
ed8c : 98               [ 2] 	tya
ed8d : 2904             [ 2] 	and #DFVVT_STR
                             	; if a string then string expression
ed8f : d004             [ 3] 	bne df_rt_assign_str
                             	;  jump to numeric expression evaluator
                             	; remember to restore A
ed91 : 68               [ 4] 	pla
ed92 : 4c48ed           [ 3] 	jmp df_rt_nassign
ed95 :                       df_rt_assign_str
                             	; else jump to string expression evaluator
                             	; remember to restore A
ed95 : 68               [ 4] 	pla
AS65 Assembler for R6502 [1.42].                                     Page  221
-------------------------------- bank\bank0.s --------------------------------

ed96 : 4c5fed           [ 3] 	jmp df_rt_sassign
                             
                             ; comment or data token is ignored by runtime
ed99 :                       df_rt_comment
ed99 :                       df_rt_data
ed99 : 60               [ 6] 	rts
                             
                             
                             ; run token - future expansion
ed9a :                       df_rt_run
ed9a : 60               [ 6] 	rts
                             
                             ; end of line / statement indicator
                             ; CS = End, CC = not end
ed9b :                       df_rt_eos
ed9b : a488             [ 3] 	ldy df_exeoff
ed9d : c47e             [ 3] 	cpy df_eolidx
ed9f : f00c             [ 3] 	beq df_rt_eos_true
eda1 : b186             [ 5] 	lda (df_currlin),y
eda3 : c93a             [ 2] 	cmp #':'
eda5 : f006             [ 3] 	beq df_rt_eos_true
eda7 : c47f             [ 3] 	cpy df_nxtstidx
eda9 : f002             [ 3] 	beq df_rt_eos_true
edab : 18               [ 2] 	clc
edac : 60               [ 6] 	rts
edad :                       df_rt_eos_true
edad : 38               [ 2] 	sec
edae : 60               [ 6] 	rts
                             
                             ; renum startLine,newStart,increment
                             ; renumbers from the first matching line to end o
edaf :                       df_rt_renum
edaf : e688             [ 5] 	inc df_exeoff
edb1 : 207de3           [ 6] 	jsr df_rt_parm_3ints
                             	; starting line number
edb4 : a6a1             [ 3] 	ldx df_tmpptra
edb6 : a5a2             [ 3] 	lda df_tmpptra+1
edb8 : 208dde           [ 6] 	jsr df_pg_find_line
edbb : 9002             [ 3] 	bcc df_rt_renum_ok
                             	SWBRK DFERR_NOLINE
                             
edbf :                       df_rt_renum_ok
                             	; save starting position pointer in ptrd
edbf : 86a7             [ 3] 	stx df_tmpptrd
edc1 : 85a8             [ 3] 	sta df_tmpptrd+1
edc3 :                       df_rt_renum_do
                             	; if not end of program
edc3 : a000             [ 2] 	ldy #0
edc5 : b1a7             [ 5] 	lda (df_tmpptrd),y
                             	; then renumber this line
edc7 : d001             [ 3] 	bne df_rt_renum_update
                             	; else done
edc9 : 60               [ 6] 	rts
edca :                       df_rt_renum_update
                             	; so set this line number to new line number
edca : a001             [ 2] 	ldy #DFTK_LINNUM
edcc : a5a3             [ 3] 	lda df_tmpptrb
edce : 91a7             [ 5] 	sta (df_tmpptrd),y
edd0 : c8               [ 2] 	iny
edd1 : a5a4             [ 3] 	lda df_tmpptrb+1
edd3 : 91a7             [ 5] 	sta (df_tmpptrd),y
                             	; add increment to new line
AS65 Assembler for R6502 [1.42].                                     Page  222
-------------------------------- bank\bank0.s --------------------------------

                             	_addZPWord df_tmpptrb,df_tmpptrc
                             
ede2 :                       df_rt_renum_next
                             	; point ptrd to the next line
ede2 : 18               [ 2] 	clc
ede3 : a5a7             [ 3] 	lda df_tmpptrd
ede5 : a200             [ 2] 	ldx #0
ede7 : 61a7             [ 6] 	adc (df_tmpptrd,x)
ede9 : 85a7             [ 3] 	sta df_tmpptrd
edeb : a5a8             [ 3] 	lda df_tmpptrd+1
eded : 6900             [ 2] 	adc #0
edef : 85a8             [ 3] 	sta df_tmpptrd+1
edf1 : 4cc3ed           [ 3] 	jmp df_rt_renum_do
                             
                             
                             ; * List all procs in VNT
edf4 :                       df_rt_listprocnames
                             	; start at the beginning of the vnt table
                             	_cpyZPWord df_vntstrt,df_tmpptra
                             
                             	; start at varcnt
edfc : a571             [ 3] 	lda df_varcnt
edfe : 85a3             [ 3] 	sta df_tmpptrb
ee00 :                       df_rt_listcheckvnt
                             	; If reached 0 then not found
ee00 : a5a3             [ 3] 	lda df_tmpptrb
ee02 : f03d             [ 3] 	beq df_rt_listpn_done
ee04 : a000             [ 2] 	ldy #0
ee06 : b1a1             [ 5] 	lda (df_tmpptra),y
ee08 : c95f             [ 2] 	cmp #'_'
ee0a : d01c             [ 3] 	bne df_rt_listnextvnt
ee0c :                       df_rt_listprocch
ee0c : b1a1             [ 5] 	lda (df_tmpptra),y
ee0e : 204bc4           [ 6] 	jsr io_put_ch
ee11 : c900             [ 2] 	cmp #0
ee13 : f003             [ 3] 	beq df_rt_listproccr
ee15 : c8               [ 2] 	iny
ee16 : d0f4             [ 3] 	bne df_rt_listprocch		; Always
ee18 :                       df_rt_listproccr
ee18 : a90d             [ 2] 	lda #UTF_CR
ee1a : 204bc4           [ 6] 	jsr io_put_ch
ee1d : 18               [ 2] 	clc
ee1e :                       df_rt_listprocpause
ee1e : 2048c4           [ 6] 	jsr io_get_ch
ee21 : c920             [ 2] 	cmp #' '
ee23 : d003             [ 3] 	bne df_rt_listnextvnt
ee25 :                       df_rt_listwait
ee25 : 38               [ 2] 	sec
ee26 : b0f6             [ 3] 	bcs df_rt_listprocpause
ee28 :                       df_rt_listnextvnt
ee28 : b1a1             [ 5] 	lda (df_tmpptra),y
ee2a : f003             [ 3] 	beq df_rt_listgotnext
ee2c : c8               [ 2] 	iny
ee2d : d0f9             [ 3] 	bne df_rt_listnextvnt		; Always
ee2f :                       df_rt_listgotnext
                             	; dec vnt #
ee2f : c6a3             [ 5] 	dec df_tmpptrb
                             	; skip past zero terminator
ee31 : c8               [ 2] 	iny
                             	; add this to vnt pointer
ee32 : 18               [ 2] 	clc
ee33 : 98               [ 2] 	tya
AS65 Assembler for R6502 [1.42].                                     Page  223
-------------------------------- bank\bank0.s --------------------------------

ee34 : 65a1             [ 3] 	adc df_tmpptra
ee36 : 85a1             [ 3] 	sta df_tmpptra
ee38 : a5a2             [ 3] 	lda df_tmpptra+1
ee3a : 6900             [ 2] 	adc #0
ee3c : 85a2             [ 3] 	sta df_tmpptra+1
ee3e : 4c00ee           [ 3] 	jmp df_rt_listcheckvnt
ee41 :                       df_rt_listpn_done
ee41 : 60               [ 6] 	rts
                             
ee42 :                       df_rt_listproc
                             	; A already contains '_'
ee42 : 8d0004           [ 4] 	sta df_linbuff
ee45 : a200             [ 2] 	ldx #0
ee47 : a488             [ 3] 	ldy df_exeoff
ee49 :                       df_rt_listp_copy
ee49 : c8               [ 2] 	iny
ee4a : e8               [ 2] 	inx
ee4b : b186             [ 5] 	lda (df_currlin),y
ee4d : 9d0004           [ 5] 	sta df_linbuff,x
ee50 : 2021d7           [ 6] 	jsr df_tk_isalphanum
ee53 : b0f4             [ 3] 	bcs df_rt_listp_copy
                             	; zero the line index
ee55 : a200             [ 2] 	ldx #0
ee57 : 867c             [ 3] 	stx df_linoff
                             	; save runtime pos
ee59 : 8488             [ 3] 	sty df_exeoff
                             	; Now try and find in VNT
ee5b : 201ad5           [ 6] 	jsr df_var_find
ee5e : b038             [ 3] 	bcs df_rt_listp_notfound
                             	; Ok we have got a match in X,A find the proc
ee60 : 868e             [ 3] 	stx df_procptr
ee62 : 858f             [ 3] 	sta df_procptr+1
ee64 : 20f9e4           [ 6] 	jsr df_rt_findproc
                             	; Save the line pointer
ee67 : 86a1             [ 3] 	stx df_tmpptra
ee69 : 85a2             [ 3] 	sta df_tmpptra+1
                             	; save statement index in to line
ee6b : 8492             [ 3] 	sty df_lineidx
                             ;	; Check if '-' option used
                             ;	ldy df_exeoff
                             ;	lda (df_currlin),y
                             ;	cmp #'-'
                             ;	; if so, list to end of program
                             ;	beq df_rt_listprgend
                             	; Now try and find the end of this procedure
                             	; enddef or another def
                             	; A,X=Line ptr, Y=line idx
                             ;	ldx df_tmpptra
                             ;	lda df_tmpptra+1
                             ;	ldy df_lineidx
ee6d :                       df_rt_listp_findend
                             	; Go to next stat
ee6d : 20a2e4           [ 6] 	jsr df_rt_nextstat
ee70 : b057             [ 3] 	bcs df_rt_listprgend
                             	; save y (a,x in lineptr), A is ok to trample
ee72 : 98               [ 2] 	tya
ee73 : 48               [ 3] 	pha
                             	; find the command
ee74 :                       df_rt_listp_findcmd
ee74 : c8               [ 2] 	iny
ee75 : b190             [ 5] 	lda (df_lineptr),y
ee77 : 10fb             [ 3] 	bpl df_rt_listp_findcmd
AS65 Assembler for R6502 [1.42].                                     Page  224
-------------------------------- bank\bank0.s --------------------------------

                             	; restore y to stat beginning
ee79 : 8538             [ 3] 	sta tmp_d
ee7b : 68               [ 4] 	pla
ee7c : a8               [ 2] 	tay
ee7d : a538             [ 3] 	lda tmp_d
                             	; check A - looking for enddef or def
ee7f : c987             [ 2] 	cmp #DFRT_ENDDEF
ee81 : f00b             [ 3] 	beq df_rt_listp_done
ee83 : c986             [ 2] 	cmp #DFRT_DEF
ee85 : f007             [ 3] 	beq df_rt_listp_done
                             	; if neither then next stat from current
ee87 : a690             [ 3] 	ldx df_lineptr
ee89 : a591             [ 3] 	lda df_lineptr+1
ee8b : 4c6dee           [ 3] 	jmp df_rt_listp_findend
ee8e :                       df_rt_listp_done
                             	; Push end line on to stack
ee8e : a591             [ 3] 	lda df_lineptr+1
ee90 : 48               [ 3] 	pha
ee91 : 8a               [ 2] 	txa
ee92 : 48               [ 3] 	pha
ee93 : a591             [ 3] 	lda df_lineptr+1
ee95 : 4ccfee           [ 3] 	jmp df_rt_list_line
ee98 :                       df_rt_listp_notfound
                             	; Fatal error if proc not found
                             	SWBRK DFERR_NOPROC
                             
                             
                             ; list token
ee9a :                       df_rt_list
ee9a : a900             [ 2] 	lda #0
ee9c : 85a9             [ 3] 	sta df_tmpptre		; Zero means in normal list mode
                             	; find non-ws
ee9e : 204ee5           [ 6] 	jsr df_rt_skip_ws
                             	; if end of statement then no line specifiers
eea1 : 209bed           [ 6] 	jsr df_rt_eos
                             	; so list whole program
eea4 : b01b             [ 3] 	bcs df_rt_listprg
                             
                             	;if '_' then use procnames
eea6 : c95f             [ 2] 	cmp #'_'
eea8 : d003             [ 3] 	bne df_rt_list_all
eeaa : 4c42ee           [ 3] 	jmp df_rt_listproc
eead :                       df_rt_list_all
                             	;if '*' then display all procnames
eead : c92a             [ 2] 	cmp #'*'
eeaf : d003             [ 3] 	bne df_rt_list_linno
eeb1 : 4cf4ed           [ 3] 	jmp df_rt_listprocnames
eeb4 :                       df_rt_list_linno
                             	; else get 1st parameter
eeb4 : 2088e0           [ 6] 	jsr df_rt_getnval
                             	; find the starting line number in X,A
eeb7 : 208dde           [ 6] 	jsr df_pg_find_line
                             	; save start in ptra
eeba : 86a1             [ 3] 	stx df_tmpptra
eebc : 85a2             [ 3] 	sta df_tmpptra+1
eebe : 4cc9ee           [ 3] 	jmp df_rt_listprgend
                             	; NO ability to choose and ending line number!
                             
                             ; Common listing routine used by LIST and SAVE
                             ; tmpe = 0 means in LIST mode else SAVE mode
                             ; can stop the listing in LIST mode with CTRL-C
eec1 :                       df_rt_listprg
AS65 Assembler for R6502 [1.42].                                     Page  225
-------------------------------- bank\bank0.s --------------------------------

                             	; program start and end as for pointer value
                             	_cpyZPWord df_prgstrt, df_tmpptra
                             
eec9 :                       df_rt_listprgend
eec9 : a568             [ 3] 	lda df_prgend+1
eecb : 48               [ 3] 	pha
eecc : a567             [ 3] 	lda df_prgend
eece : 48               [ 3] 	pha
eecf :                       df_rt_list_line
                             	; if line length = 0 then end of program
eecf : a000             [ 2] 	ldy #0
eed1 : b1a1             [ 5] 	lda (df_tmpptra),y
eed3 : f03a             [ 4] 	beq df_rt_list_line_fin
                             	; if in list mode and CTRL-C then also stop
eed5 : a5a9             [ 3] 	lda df_tmpptre
eed7 : d010             [ 3] 	bne df_rt_list_line_cont
                             	; check for break, asynch get
eed9 : 18               [ 2] 	clc
eeda :                       df_rt_list_synckey
eeda : a5a9             [ 3] 	lda df_tmpptre					; Ignore keys on save mode
eedc : d00b             [ 3] 	bne df_rt_list_line_cont
eede :                       df_rt_list_pause
eede : 2048c4           [ 6] 	jsr io_get_ch
eee1 : c920             [ 2] 	cmp #' '						; Space = PAUSE
eee3 : f0f9             [ 3] 	beq df_rt_list_pause			; C=1 for synchronouse ke
eee5 : c903             [ 2] 	cmp #UTF_ETX					; CTRL-C?
eee7 : f026             [ 4] 	beq df_rt_list_line_fin
eee9 :                       df_rt_list_line_cont
eee9 : a000             [ 2] 	ldy #0
eeeb : 8488             [ 3] 	sty df_exeoff
eeed : 2012ef           [ 6] 	jsr df_rt_list_all_line
eef0 :                       df_rt_list_next_line
                             	; new line
eef0 : 206cc1           [ 6] 	jsr utilPrintCRLF
                             	; increment pointer to next line
eef3 : 18               [ 2] 	clc
eef4 : a5a1             [ 3] 	lda df_tmpptra
eef6 : a000             [ 2] 	ldy #0
eef8 : 71a1             [ 5] 	adc (df_tmpptra),y
eefa : 85a1             [ 3] 	sta df_tmpptra
eefc : a5a2             [ 3] 	lda df_tmpptra+1
eefe : 6900             [ 2] 	adc #0
ef00 : 85a2             [ 3] 	sta df_tmpptra+1
                             	; if pointer > end then listing is done
ef02 : 38               [ 2] 	sec
ef03 : 68               [ 4] 	pla
ef04 : aa               [ 2] 	tax
ef05 : e5a1             [ 3] 	sbc df_tmpptra
ef07 : 68               [ 4] 	pla
ef08 : 48               [ 3] 	pha
ef09 : e5a2             [ 3] 	sbc df_tmpptra+1
ef0b : 8a               [ 2] 	txa
ef0c : 48               [ 3] 	pha
ef0d : b0c0             [ 4] 	bcs df_rt_list_line
ef0f :                       df_rt_list_line_fin
                             	; if got here then reached tmpb
ef0f : 68               [ 4] 	pla
ef10 : 68               [ 4] 	pla
ef11 :                       df_rt_list_line_only_fin
ef11 : 60               [ 6] 	rts
                             
                             ;Using df_tmpptra as line pointer
AS65 Assembler for R6502 [1.42].                                     Page  226
-------------------------------- bank\bank0.s --------------------------------

                             ;Print decode an entire line
ef12 :                       df_rt_list_all_line				; Start here to include nu
ef12 : 2056f0           [ 6] 	jsr df_rt_list_linnum
ef15 :                       df_rt_list_line_only			; Start here for just the 
ef15 : a003             [ 2] 	ldy #3
ef17 : b1a1             [ 5] 	lda (df_tmpptra),y
ef19 : 857f             [ 3] 	sta df_nxtstidx
ef1b : c8               [ 2] 	iny
ef1c : 8488             [ 3] 	sty df_exeoff
ef1e :                       df_rt_list_decode
ef1e : a488             [ 3] 	ldy df_exeoff
ef20 : b1a1             [ 5] 	lda (df_tmpptra),y
ef22 : 3010             [ 3] 	bmi df_rt_list_token
ef24 : c920             [ 2] 	cmp #DFTK_ESCVAL
ef26 : 9006             [ 3] 	bcc df_rt_list_escval
                             	; normal char just print it
ef28 : 204bc4           [ 6] 	jsr io_put_ch
ef2b : 4c37ef           [ 3] 	jmp df_rt_list_nexttok
ef2e :                       df_rt_list_escval
                             	; A and Y need to be valid on entry
ef2e : 2050ef           [ 6] 	jsr df_rt_list_decode_esc
ef31 : 4c37ef           [ 3] 	jmp df_rt_list_nexttok
ef34 :                       df_rt_list_token
ef34 : 2063f0           [ 6] 	jsr df_rt_list_decode_token
ef37 :                       df_rt_list_nexttok
                             	; advance the line offset
ef37 : e688             [ 5] 	inc df_exeoff
ef39 : a588             [ 3] 	lda df_exeoff
                             	; check if at end of line
ef3b : a200             [ 2] 	ldx #0
ef3d : c1a1             [ 6] 	cmp (df_tmpptra,x)
ef3f : f0d0             [ 3] 	beq df_rt_list_line_only_fin
                             	; check if at end of statement
ef41 : c57f             [ 3] 	cmp df_nxtstidx
ef43 : d0d9             [ 3] 	bne df_rt_list_decode
ef45 : a8               [ 2] 	tay
                             	; save the next statement offset
ef46 : b1a1             [ 5] 	lda (df_tmpptra),y
ef48 : 857f             [ 3] 	sta df_nxtstidx
ef4a : c8               [ 2] 	iny
ef4b : 8488             [ 3] 	sty df_exeoff
ef4d : 4c1eef           [ 3] 	jmp df_rt_list_decode
                             
                             
                             ; decode escape sequences
                             ; Input: A contains the esc val and Y is char lin
ef50 :                       df_rt_list_decode_esc
                             	; jump over esc byte
ef50 : c8               [ 2] 	iny
ef51 : 8488             [ 3] 	sty df_exeoff
ef53 : 48               [ 3] 	pha
                             	; get the next two bytes in case needed
ef54 : b1a1             [ 5] 	lda (df_tmpptra),y
ef56 : 85a3             [ 3] 	sta df_tmpptrb
ef58 : c8               [ 2] 	iny
ef59 : b1a1             [ 5] 	lda (df_tmpptra),y
ef5b : 85a4             [ 3] 	sta df_tmpptrb+1
ef5d : 88               [ 2] 	dey				; Y is on byte after esc byte
ef5e : 68               [ 4] 	pla
                             	; x2 to get jmp offset
ef5f : 0a               [ 2] 	asl a
ef60 : aa               [ 2] 	tax
AS65 Assembler for R6502 [1.42].                                     Page  227
-------------------------------- bank\bank0.s --------------------------------

ef61 : bd42e6           [ 4] 	lda df_rt_escjmp,x
ef64 : 85a5             [ 3] 	sta df_tmpptrc
ef66 : bd43e6           [ 4] 	lda df_rt_escjmp+1,x
ef69 : 85a6             [ 3] 	sta df_tmpptrc+1
                             	; now jump to decoder
ef6b : 6ca500           [ 6] 	jmp (df_tmpptrc)
                             
                             ; reserved
ef6e :                       df_rt_lst_reserved
ef6e : 60               [ 6] 	rts
                             
                             ; decode a byte char
ef6f :                       df_rt_lst_chr
ef6f : a927             [ 2] 	lda #0x27			; Single quote
ef71 : 204bc4           [ 6] 	jsr io_put_ch
ef74 : a5a3             [ 3] 	lda df_tmpptrb
ef76 : 204bc4           [ 6] 	jsr io_put_ch
ef79 : a927             [ 2] 	lda #0x27			; Single quote
ef7b : 204bc4           [ 6] 	jsr io_put_ch
ef7e : c8               [ 2] 	iny
ef7f : 8488             [ 3] 	sty df_exeoff
ef81 : 60               [ 6] 	rts
                             
                             ; Output 0x for hex chars
ef82 :                       df_rt_lst_hex_pre
ef82 : a930             [ 2] 	lda #'0'
ef84 : 204bc4           [ 6] 	jsr io_put_ch
ef87 : a978             [ 2] 	lda #'x'
ef89 : 4c4bc4           [ 3] 	jmp io_put_ch
                             
                             
                             ; Decode a byte hex
ef8c :                       df_rt_lst_bythex
ef8c : 2082ef           [ 6] 	jsr df_rt_lst_hex_pre
ef8f :                       df_rt_lst_lo_hex
ef8f : a5a3             [ 3] 	lda df_tmpptrb
ef91 : 2089c1           [ 6] 	jsr str_a_to_x
ef94 : 204bc4           [ 6] 	jsr io_put_ch
ef97 : 8a               [ 2] 	txa
ef98 : 204bc4           [ 6] 	jsr io_put_ch
ef9b : c8               [ 2] 	iny
ef9c : 8488             [ 3] 	sty df_exeoff
ef9e : 60               [ 6] 	rts
                             
                             ; Decode an int hex
ef9f :                       df_rt_lst_inthex
ef9f : 2082ef           [ 6] 	jsr df_rt_lst_hex_pre
efa2 : a5a4             [ 3] 	lda df_tmpptrb+1
efa4 : 2089c1           [ 6] 	jsr str_a_to_x
efa7 : 204bc4           [ 6] 	jsr io_put_ch
efaa : 8a               [ 2] 	txa
efab : 204bc4           [ 6] 	jsr io_put_ch
efae : 4c8fef           [ 3] 	jmp df_rt_lst_lo_hex
                             
                             ; Decode a byte binary
efb1 :                       df_rt_lst_bytbin
efb1 : a208             [ 2] 	ldx #8
efb3 : a5a3             [ 3] 	lda df_tmpptrb
efb5 : 85a4             [ 3] 	sta df_tmpptrb+1
efb7 : 4cbfef           [ 3] 	jmp df_rt_lst_bin
                             
                             ; Decode a int binary
AS65 Assembler for R6502 [1.42].                                     Page  228
-------------------------------- bank\bank0.s --------------------------------

efba :                       df_rt_lst_intbin
efba : a210             [ 2] 	ldx #16
efbc : c8               [ 2] 	iny
efbd : 8488             [ 3] 	sty df_exeoff
                             
                             ; Main 01 decoding of binary
efbf :                       df_rt_lst_bin
efbf : a930             [ 2] 	lda #'0'
efc1 : 204bc4           [ 6] 	jsr io_put_ch
efc4 : a962             [ 2] 	lda #'b'
efc6 : 204bc4           [ 6] 	jsr io_put_ch
efc9 :                       df_rt_lst_bit
efc9 : a930             [ 2] 	lda #'0'
efcb : 06a3             [ 5] 	asl df_tmpptrb
efcd : 26a4             [ 5] 	rol df_tmpptrb+1
efcf : 9002             [ 3] 	bcc df_rt_lst_bit_skip0
efd1 : a931             [ 2] 	lda #'1'
efd3 :                       df_rt_lst_bit_skip0
efd3 : 204bc4           [ 6] 	jsr io_put_ch
efd6 : ca               [ 2] 	dex
efd7 : d0f0             [ 3] 	bne df_rt_lst_bit
efd9 : c8               [ 2] 	iny
efda : 8488             [ 3] 	sty df_exeoff
efdc : 60               [ 6] 	rts
                             
                             ; Decode a decimal integer
efdd :                       df_rt_lst_intdec
efdd : a6a3             [ 3] 	ldx df_tmpptrb
efdf : a5a4             [ 3] 	lda df_tmpptrb+1
efe1 : c8               [ 2] 	iny
efe2 : 8488             [ 3] 	sty df_exeoff
efe4 : 18               [ 2] 	clc
efe5 : 4cf4c3           [ 3] 	jmp print_a_to_d
                             
                             
                             ; decode a variable or procedure
                             ; Slot address to decode in ptrb
efe8 :                       df_rt_lst_var
efe8 :                       df_rt_lst_proc
                             	; jump over the address bytes
efe8 : c8               [ 2] 	iny
efe9 : 8488             [ 3] 	sty df_exeoff
                             
                             	; ptrc starts at VNT start
                             	_cpyZPWord df_vntstrt,df_tmpptrc
                             
                             
                             	; ptrd starts at end of VVT
                             	_cpyZPWord df_vvtend,df_tmpptrd
                             
effb : a000             [ 2] 	ldy #0
effd :                       df_rt_list_findvvt
                             	; Check have we reached target addr in vvt?
effd : a5a7             [ 3] 	lda df_tmpptrd
efff : c5a3             [ 3] 	cmp df_tmpptrb
f001 : d006             [ 3] 	bne df_rt_list_vvtend
f003 : a5a8             [ 3] 	lda df_tmpptrd+1
f005 : c5a4             [ 3] 	cmp df_tmpptrb+1
f007 : f023             [ 3] 	beq df_rt_list_gotvvt
f009 :                       df_rt_list_vvtend
f009 : b1a5             [ 5] 	lda (df_tmpptrc),y
f00b : f009             [ 3] 	beq df_rt_list_gotvvtend
AS65 Assembler for R6502 [1.42].                                     Page  229
-------------------------------- bank\bank0.s --------------------------------

                             	_incZPWord df_tmpptrc
                             
f013 : 4c09f0           [ 3] 	jmp df_rt_list_vvtend
f016 :                       df_rt_list_gotvvtend
                             	_incZPWord df_tmpptrc
                             
                             	; move target slot address towards top of mem
f01c : 18               [ 2] 	clc
f01d : a5a7             [ 3] 	lda df_tmpptrd
f01f : 6908             [ 2] 	adc #DFVVT_SZ
f021 : 85a7             [ 3] 	sta df_tmpptrd
f023 : a5a8             [ 3] 	lda df_tmpptrd+1
f025 : 6900             [ 2] 	adc #0
f027 : 85a8             [ 3] 	sta df_tmpptrd+1
                             	; go back and check again
f029 : 4cfdef           [ 3] 	jmp df_rt_list_findvvt
f02c :                       df_rt_list_gotvvt
f02c : b1a5             [ 5] 	lda (df_tmpptrc),y
f02e : f025             [ 3] 	beq df_rt_list_donvvt
f030 : 204bc4           [ 6] 	jsr io_put_ch
                             	_incZPWord df_tmpptrc
                             
f039 : 4c2cf0           [ 3] 	jmp df_rt_list_gotvvt
                             
f03c :                       df_rt_lst_strlit
f03c : a922             [ 2] 	lda #0x22
f03e : 204bc4           [ 6] 	jsr io_put_ch
f041 : a488             [ 3] 	ldy df_exeoff
f043 :                       df_rt_lst_strlitch
f043 : b1a1             [ 5] 	lda (df_tmpptra),y
f045 : f007             [ 3] 	beq df_rt_lst_strlitdon
f047 : 204bc4           [ 6] 	jsr io_put_ch
f04a : c8               [ 2] 	iny
f04b : 4c43f0           [ 3] 	jmp df_rt_lst_strlitch
f04e :                       df_rt_lst_strlitdon
f04e : a922             [ 2] 	lda #0x22
f050 : 204bc4           [ 6] 	jsr io_put_ch
f053 : 8488             [ 3] 	sty df_exeoff
f055 :                       df_rt_list_donvvt
f055 : 60               [ 6] 	rts
                             
f056 :                       df_rt_list_linnum
f056 : a001             [ 2] 	ldy #1
f058 : b1a1             [ 5] 	lda (df_tmpptra),y
f05a : aa               [ 2] 	tax
f05b : a002             [ 2] 	ldy #2
f05d : b1a1             [ 5] 	lda (df_tmpptra),y
f05f : 18               [ 2] 	clc
f060 : 4cf4c3           [ 3] 	jmp print_a_to_d
                             
                             ; decode a token value with MSB set
f063 :                       df_rt_list_decode_token
                             	; if not assembler then normal listing
f063 : c997             [ 2] 	cmp #DFRT_ASM
f065 : d003             [ 3] 	bne df_rt_list_decode_token_normal
f067 : 4ca2f0           [ 3] 	jmp df_rt_asm_decode_token
f06a :                       df_rt_list_decode_token_normal
f06a : 297f             [ 2] 	and #0x7f
                             	; token 0 and 1 don't get decoded they are impli
f06c : c902             [ 2] 	cmp #2
f06e : b001             [ 3] 	bcs df_rt_list_do_decode_tkn
f070 : 60               [ 6] 	rts
AS65 Assembler for R6502 [1.42].                                     Page  230
-------------------------------- bank\bank0.s --------------------------------

f071 :                       df_rt_list_do_decode_tkn
f071 : aa               [ 2] 	tax
f072 : a9b0             [ 2] 	lda #lo(df_tokensyms)
f074 : 85a3             [ 3] 	sta df_tmpptrb
f076 : a9da             [ 2] 	lda #hi(df_tokensyms)
f078 : 85a4             [ 3] 	sta df_tmpptrb+1
f07a :                       df_rt_list_find_sym
f07a : e000             [ 2] 	cpx #0
f07c : f012             [ 3] 	beq df_rt_list_got_sym
f07e : a000             [ 2] 	ldy #0
f080 :                       df_rt_list_next_ch
f080 : b1a3             [ 5] 	lda (df_tmpptrb),y
f082 : 48               [ 3] 	pha
                             	_incZPWord df_tmpptrb
                             
f089 : 68               [ 4] 	pla
f08a : 10f4             [ 3] 	bpl df_rt_list_next_ch
f08c :                       df_rt_list_got_last_sym
                             	; ok got to the last ch
                             	; advance to next sym
f08c : ca               [ 2] 	dex
f08d : 4c7af0           [ 3] 	jmp df_rt_list_find_sym
f090 :                       df_rt_list_got_sym
f090 : a1a3             [ 6] 	lda (df_tmpptrb,x)		; Relies on X=0 from branch
f092 : 08               [ 3] 	php
f093 : 297f             [ 2] 	and #0x7f
f095 : 204bc4           [ 6] 	jsr io_put_ch
                             	_incZPWord df_tmpptrb
                             
f09e : 28               [ 4] 	plp
f09f : 10ef             [ 3] 	bpl df_rt_list_got_sym
f0a1 : 60               [ 6] 	rts
                             
                             ;** Decode assembler token in A **
f0a2 :                       df_rt_asm_decode_token
f0a2 : a92e             [ 2] 	lda #'.'			;Always put out the . symbol
f0a4 : 204bc4           [ 6] 	jsr io_put_ch
f0a7 : a488             [ 3] 	ldy df_exeoff		;Print out any whitespace
f0a9 :                       df_rt_asm_decode_token_ws
f0a9 : c8               [ 2] 	iny					;Point to char after the asm token
f0aa : 8488             [ 3] 	sty df_exeoff
f0ac : b1a1             [ 5] 	lda (df_tmpptra),y	;What is the char?
f0ae : 204ad7           [ 6] 	jsr df_tk_isws		;If not then found the keyword
f0b1 : 9006             [ 3] 	bcc df_rt_asm_decode_token_found
f0b3 : 204bc4           [ 6] 	jsr io_put_ch		;Print the space
f0b6 : 4ca9f0           [ 3] 	jmp df_rt_asm_decode_token_ws
f0b9 :                       df_rt_asm_decode_token_found
f0b9 : c911             [ 2] 	cmp #DFTK_VAR		; If is a label variable?
f0bb : d003             [ 3] 	bne df_rt_asm_decode_token_keyword
                             	; if so then process as normal escape handling
f0bd : 4c50ef           [ 3] 	jmp df_rt_list_decode_esc
f0c0 :                       df_rt_asm_decode_token_keyword
f0c0 : 297f             [ 2] 	and #0x7f			; Mask off MSB
f0c2 : aa               [ 2] 	tax					;Put it in to X as the counter
                             	; Point to asm symbol table
f0c3 : a9a5             [ 2] 	lda #lo(df_asm_tokensyms)
f0c5 : 85a3             [ 3] 	sta df_tmpptrb
f0c7 : a9fd             [ 2] 	lda #hi(df_asm_tokensyms)
f0c9 : 85a4             [ 3] 	sta df_tmpptrb+1
f0cb :                       df_rt_list_find_asm_sym
f0cb : e000             [ 2] 	cpx #0
f0cd : f01d             [ 3] 	beq df_rt_list_got_asm_sym
AS65 Assembler for R6502 [1.42].                                     Page  231
-------------------------------- bank\bank0.s --------------------------------

f0cf : a000             [ 2] 	ldy #0
f0d1 :                       df_rt_list_next_asm_ch
                             	_incZPWord df_tmpptrb
                             
f0d7 : b1a3             [ 5] 	lda (df_tmpptrb),y
f0d9 : c920             [ 2] 	cmp #' '			; Skip all chars >=' '
f0db : b0f4             [ 3] 	bcs df_rt_list_next_asm_ch
f0dd : 38               [ 2] 	sec					; Skip offset and mode bytes
f0de : 65a3             [ 3] 	adc df_tmpptrb
f0e0 : 85a3             [ 3] 	sta df_tmpptrb
f0e2 : a5a4             [ 3] 	lda df_tmpptrb+1
f0e4 : 6900             [ 2] 	adc #0
f0e6 : 85a4             [ 3] 	sta df_tmpptrb+1
f0e8 : ca               [ 2] 	dex					; One less symbol to skip over
f0e9 : 4ccbf0           [ 3] 	jmp df_rt_list_find_asm_sym
f0ec :                       df_rt_list_got_asm_sym
f0ec : a1a3             [ 6] 	lda (df_tmpptrb,x)	; Relies on X=0 from branch
f0ee : c920             [ 2] 	cmp #' '
f0f0 : 900c             [ 3] 	bcc df_rt_asm_decode_token_done
f0f2 : 204bc4           [ 6] 	jsr io_put_ch
                             	_incZPWord df_tmpptrb
                             
f0fb : 4cecf0           [ 3] 	jmp df_rt_list_got_asm_sym
f0fe :                       df_rt_asm_decode_token_done
f0fe : 60               [ 6] 	rts
                             
                             
f0ff :                       df_rt_doke
f0ff : 2066e3           [ 6] 	jsr df_rt_parm_2ints
f102 : a5a3             [ 3] 	lda df_tmpptrb
f104 : a000             [ 2] 	ldy #0
f106 : 91a1             [ 5] 	sta (df_tmpptra),y
                             	; get high byte to doke
f108 : a5a4             [ 3] 	lda df_tmpptrb+1
f10a : c8               [ 2] 	iny
                             	; poke hi byte
f10b : 91a1             [ 5] 	sta (df_tmpptra),y
f10d : 60               [ 6] 	rts
                             
f10e :                       df_rt_poke
f10e : 2066e3           [ 6] 	jsr df_rt_parm_2ints
f111 : a5a3             [ 3] 	lda df_tmpptrb
f113 : a000             [ 2] 	ldy #0
f115 : 91a1             [ 5] 	sta (df_tmpptra),y
f117 : 60               [ 6] 	rts
                             
f118 :                       df_rt_snd_common
                             	; 3 inputs
                             	; tmpa = channel (1,2,3), tmpb = period, tmpc = 
f118 : a5a1             [ 3] 	lda df_tmpptra
                             	; tone channel addressing is 0 to 2
f11a : 38               [ 2] 	sec
f11b : e901             [ 2] 	sbc #1
f11d : 2903             [ 2] 	and #3
                             	; ok doing a tone channel, get reg index for per
f11f : 0a               [ 2] 	asl a
f120 : aa               [ 2] 	tax
                             	; get low byte of period
f121 : a5a3             [ 3] 	lda df_tmpptrb
f123 : 2000c0           [ 6] 	jsr snd_set
                             	; increment reg number to high byte
f126 : e8               [ 2] 	inx
AS65 Assembler for R6502 [1.42].                                     Page  232
-------------------------------- bank\bank0.s --------------------------------

                             	; get high byte of period
f127 : a5a4             [ 3] 	lda df_tmpptrb+1
f129 : 290f             [ 2] 	and #0x0f
                             	; set period
f12b : 2000c0           [ 6] 	jsr snd_set
                             	; get volume register index (8 = channel 1)
f12e : 18               [ 2] 	clc
f12f : a5a1             [ 3] 	lda df_tmpptra
f131 : 2903             [ 2] 	and #3
f133 : 6907             [ 2] 	adc #7
f135 : aa               [ 2] 	tax
                             	; get volume
f136 : a5a5             [ 3] 	lda df_tmpptrc
f138 : 290f             [ 2] 	and #0x0f
f13a : d002             [ 3] 	bne df_rt_sound_env_skip
                             	; envelope mode
f13c : 0910             [ 2] 	ora #0x10
f13e :                       df_rt_sound_env_skip
f13e : 4c00c0           [ 3] 	jmp snd_set
                             
                             ; sound chan,period,volume
f141 :                       df_rt_sound
f141 : 207de3           [ 6] 	jsr df_rt_parm_3ints
f144 :                       df_rt_dosound
                             	; check which channel (0 = noise)
f144 : a5a1             [ 3] 	lda df_tmpptra
f146 : f003             [ 3] 	beq df_rt_sound_noise
f148 : 4c18f1           [ 3] 	jmp df_rt_snd_common
f14b :                       df_rt_sound_noise
                             	; ok update the noise channel, volume is irrelev
f14b : a206             [ 2] 	ldx #6
f14d : a5a3             [ 3] 	lda df_tmpptrb
f14f : 291f             [ 2] 	and #0x1f
f151 : 4c00c0           [ 3] 	jmp snd_set
                             
                             ; music chan,octave,note,volume
f154 :                       df_rt_music
f154 : 20a0e3           [ 6] 	jsr df_rt_parm_4ints
                             	; parm 2 = octave, need to x 12word = 24
                             	; get period A,X (hi/lo)
                             	; pass in octave # in X and note # in Y
f157 : a6a3             [ 3] 	ldx df_tmpptrb
f159 : a4a5             [ 3] 	ldy df_tmpptrc
f15b : 20ebd3           [ 6] 	jsr snd_get_note
                             	; store note period in b
f15e : 86a3             [ 3] 	stx df_tmpptrb
f160 : 85a4             [ 3] 	sta df_tmpptrb+1
                             	; put vol in tmpc
f162 : a5a7             [ 3] 	lda df_tmpptrd
f164 : 85a5             [ 3] 	sta df_tmpptrc
                             	; tmpa,b,c contain chan,per,vol
f166 : 4c44f1           [ 3] 	jmp df_rt_dosound
                             
                             
                             ; play tonemask,noisemask,envelope,period
f169 :                       df_rt_play
f169 : 20a0e3           [ 6] 	jsr df_rt_parm_4ints
                             	; parm 1 = tone enable
f16c : a5a1             [ 3] 	lda df_tmpptra
f16e : 2907             [ 2] 	and #7
f170 : 85a1             [ 3] 	sta df_tmpptra
                             	; parm 2 = noise enable
AS65 Assembler for R6502 [1.42].                                     Page  233
-------------------------------- bank\bank0.s --------------------------------

f172 : a5a3             [ 3] 	lda df_tmpptrb
f174 : 2907             [ 2] 	and #7
f176 : 0a               [ 2] 	asl a
f177 : 0a               [ 2] 	asl a
f178 : 0a               [ 2] 	asl a
f179 : 05a1             [ 3] 	ora df_tmpptra
                             	; we now have bits set for channels to enable
                             	; but need to invert for the 8910
                             	; top 2 bits are 0 and 1 as these are port b (in
f17b : 497f             [ 2] 	eor #0x7f
                             	; reg 7 is control register
f17d : a207             [ 2] 	ldx #7
f17f : 2000c0           [ 6] 	jsr snd_set
                             	; parm 3 = envelope mode
f182 : a5a5             [ 3] 	lda df_tmpptrc
f184 : 290f             [ 2] 	and #0xf
                             	; 13 is envelope shape register
f186 : a20d             [ 2] 	ldx #13
f188 : 2000c0           [ 6] 	jsr snd_set
                             	; parm 4 = envelope period
                             	; 11 is envelope period register
f18b : a20b             [ 2] 	ldx #11
                             	; get low
f18d : a5a7             [ 3] 	lda df_tmpptrd
f18f : 2000c0           [ 6] 	jsr snd_set
                             	; get high
f192 : e8               [ 2] 	inx
f193 : a5a8             [ 3] 	lda df_tmpptrd+1
f195 : 4c00c0           [ 3] 	jmp snd_set
                             
                             ;* common filename procesing routine
                             ;*
f198 :                       df_rt_init_filename
                             	; evaluate string
f198 : 208ee0           [ 6] 	jsr df_rt_neval
f19b : 206af7           [ 6] 	jsr df_ost_popStr
                             
                             	; save string address
f19e : 86a5             [ 3] 	stx df_tmpptrc
f1a0 : 85a6             [ 3] 	sta df_tmpptrc+1
                             
                             	; copy string to fhandle
f1a2 : a000             [ 2] 	ldy #0
f1a4 :                       df_rt_copy_fn
f1a4 : b1a5             [ 5] 	lda (df_tmpptrc),y
f1a6 :                       df_rt_fname_case
f1a6 : 990004           [ 5] 	sta df_linbuff,y				; Put filename in line buffe
f1a9 : c8               [ 2] 	iny
f1aa : c900             [ 2] 	cmp #0
f1ac : d0f6             [ 3] 	bne df_rt_copy_fn
f1ae : 60               [ 6] 	rts
                             
                             ;* common file parsing routine
f1af :                       df_rt_parse_file
                             	; now process filename
f1af : 2098f1           [ 6] 	jsr df_rt_init_filename
f1b2 : a900             [ 2] 	lda #0						; Initialise tape system
f1b4 : 4c22c4           [ 3] 	jmp io_active_device
f1b7 :                       df_rt_file_errc
                             	SWBRK DFERR_FNAME
                             
                             
AS65 Assembler for R6502 [1.42].                                     Page  234
-------------------------------- bank\bank0.s --------------------------------

                             ; save "file" as text
f1b9 :                       df_rt_tsave
f1b9 : 20aff1           [ 6] 	jsr df_rt_parse_file
f1bc : 2051c4           [ 6] 	jsr io_open_write
f1bf : b0f6             [ 3] 	bcs df_rt_file_errc
                             	; ok now have redirected output to device
                             	; go and list the program in save mode
f1c1 : a901             [ 2] 	lda #1
f1c3 : 85a9             [ 3] 	sta df_tmpptre
f1c5 : 20c1ee           [ 6] 	jsr df_rt_listprg
                             	; final CR to end the save
f1c8 : a90d             [ 2] 	lda #UTF_CR
f1ca : 204bc4           [ 6] 	jsr io_put_ch
f1cd :                       df_rt_file_cleanup
                             	; close the file
f1cd : 2054c4           [ 6] 	jsr io_close
                             	; restore to default device io
f1d0 : 4c1fc4           [ 3] 	jmp io_set_default
                             
                             
                             ; load "file" from text
f1d3 :                       df_rt_tload
f1d3 : 20aff1           [ 6] 	jsr df_rt_parse_file
f1d6 : 204ec4           [ 6] 	jsr io_open_read
f1d9 : b0dc             [ 3] 	bcs df_rt_file_errc
                             	; no echo - very important
                             	; else might try and write to a device
                             	; only open for reading (i.e. SD CARD)
f1db :                       df_rt_loadline
f1db : 18               [ 2] 	clc					; NO ECHO!
f1dc : 205ddf           [ 6] 	jsr df_pg_inputline
                             	; if C clear then tokenise line
f1df : 9014             [ 3] 	bcc df_rt_ldtokenise
                             	; else done
                             	; clear dflat runtime else will try to execute
                             	; the last tokenised line!
f1e1 : a900             [ 2] 	lda #0
f1e3 : 8d8004           [ 4] 	sta df_tokbuff			; Offset to next line
f1e6 : 8d8104           [ 4] 	sta df_tokbuff+1		; Clear line low
f1e9 : 8d8204           [ 4] 	sta df_tokbuff+2		; Clear line high
f1ec : 857f             [ 3] 	sta df_nxtstidx			; Clear next statement
f1ee : a901             [ 2] 	lda #1					; Set immediate mode
f1f0 : 855e             [ 3] 	sta df_immed
f1f2 : 4ccdf1           [ 3] 	jmp df_rt_file_cleanup	; Ok now can close and do
f1f5 :                       df_rt_ldtokenise
f1f5 : 20b1df           [ 6] 	jsr df_pg_tokenise		; Tokenise loaded string
f1f8 : 4cdbf1           [ 3] 	jmp df_rt_loadline		; Continue with next until b
                             
                             
                             ; Utility to open in binary mode save
f1fb :                       df_rt_openforbinsave
f1fb : 20aff1           [ 6] 	jsr df_rt_parse_file
f1fe : 205dc4           [ 6] 	jsr io_open_ext2		; Ext2 is binary file save
f201 : b0b4             [ 4] 	bcs df_rt_file_errc
f203 : 60               [ 6] 	rts
                             
                             ; Utility to open in binary mode load
f204 :                       df_rt_openforbinload
                             	; Get filename and open file for binary read
f204 : 20aff1           [ 6] 	jsr df_rt_parse_file
f207 : 205ac4           [ 6] 	jsr io_open_ext1		; Ext1 is binary file read
f20a : b0ab             [ 4] 	bcs df_rt_file_errc
AS65 Assembler for R6502 [1.42].                                     Page  235
-------------------------------- bank\bank0.s --------------------------------

f20c : 60               [ 6] 	rts
                             
                             ; bload addr,"file"
f20d :                       df_rt_bload
                             	; Get address but keep on stack
f20d : e688             [ 5] 	inc df_exeoff
f20f : 208ee0           [ 6] 	jsr df_rt_neval
                             
                             	; Get filename and open file for binary read
f212 : e688             [ 5] 	inc df_exeoff
f214 : 2004f2           [ 6] 	jsr df_rt_openforbinload
                             
                             	; Get address from stack in to ptra
f217 : 2066f7           [ 6] 	jsr df_ost_popInt
f21a : 86a1             [ 3] 	stx df_tmpptra
f21c : 85a2             [ 3] 	sta df_tmpptra+1
                             
                             	; Get file address to X,Y
f21e : 2048c4           [ 6] 	jsr io_get_ch
f221 : aa               [ 2] 	tax
f222 : 2048c4           [ 6] 	jsr io_get_ch
f225 : a8               [ 2] 	tay
                             
                             	; Check if user address is zero
f226 : a5a1             [ 3] 	lda df_tmpptra
f228 : 05a2             [ 3] 	ora df_tmpptra+1
f22a : d004             [ 3] 	bne df_rt_bload_addr
                             	; If it is zero then use address from file
f22c : 86a1             [ 3] 	stx df_tmpptra
f22e : 84a2             [ 3] 	sty df_tmpptra+1
f230 :                       df_rt_bload_addr
                             	; Get file length
f230 : 2048c4           [ 6] 	jsr io_get_ch
f233 : 85a3             [ 3] 	sta df_tmpptrb
f235 : 2048c4           [ 6] 	jsr io_get_ch
f238 : 85a4             [ 3] 	sta df_tmpptrb+1
                             
                             	; Go and load the bytes
f23a : 20dcf2           [ 6] 	jsr df_rt_loadbin
                             	; Close the file
f23d : 4ccdf1           [ 3] 	jmp df_rt_file_cleanup
                             
                             ; Save a binary file
                             ; addr,length,fname
f240 :                       df_rt_bsave
                             	; Get source address and length but leave on sta
                             	; evaluate 1st parm
f240 : 208ee0           [ 6] 	jsr df_rt_neval
                             	; jump over comma
f243 : e688             [ 5] 	inc df_exeoff
                             	; evaluate the 2nd parm
f245 : 208ee0           [ 6] 	jsr df_rt_neval
                             
                             	; Process file and open for binary save
f248 : e688             [ 5] 	inc df_exeoff
f24a : 20fbf1           [ 6] 	jsr df_rt_openforbinsave
                             
                             	; Get length in to ptrb
f24d : 2066f7           [ 6] 	jsr df_ost_popInt
f250 : 86a3             [ 3] 	stx df_tmpptrb
f252 : 85a4             [ 3] 	sta df_tmpptrb+1
                             
AS65 Assembler for R6502 [1.42].                                     Page  236
-------------------------------- bank\bank0.s --------------------------------

                             	; Get address in to ptra
f254 : 2066f7           [ 6] 	jsr df_ost_popInt
f257 : 86a1             [ 3] 	stx df_tmpptra
f259 : 85a2             [ 3] 	sta df_tmpptra+1
                             
                             	; now save bytes
f25b : 20eef2           [ 6] 	jsr df_rt_savebin
                             	; Close the file
f25e : 4ccdf1           [ 3] 	jmp df_rt_file_cleanup
                             
                             
                             ; save dflat tokenised program as binary
f261 :                       df_rt_save
                             	; Process file and open for binary save
f261 : 20fbf1           [ 6] 	jsr df_rt_openforbinsave
                             
                             	; first save zero page stuff
                             	; ok this saves a bit more than needed
                             	; but it's no biggie and doesn't
                             	; clobber temp space
f264 : a95b             [ 2] 	lda #lo(dflat_zp_save_s)
f266 : 85a1             [ 3] 	sta df_tmpptra
f268 : a900             [ 2] 	lda #hi(dflat_zp_save_s)
f26a : 85a2             [ 3] 	sta df_tmpptra+1
                             	; save length
f26c : 38               [ 2] 	sec
f26d : a9a1             [ 2] 	lda #lo(dflat_zp_save_e)
f26f : e95b             [ 2] 	sbc #lo(dflat_zp_save_s)
f271 : 85a3             [ 3] 	sta df_tmpptrb
f273 : a900             [ 2] 	lda #hi(dflat_zp_save_e)
f275 : e900             [ 2] 	sbc #hi(dflat_zp_save_s)
f277 : 85a4             [ 3] 	sta df_tmpptrb+1
                             	; now save bytes
f279 : 20eef2           [ 6] 	jsr df_rt_savebin
                             
                             	; now save the dflat program
f27c : a565             [ 3] 	lda df_prgstrt
f27e : 85a1             [ 3] 	sta df_tmpptra
f280 : a566             [ 3] 	lda df_prgstrt+1
f282 : 85a2             [ 3] 	sta df_tmpptra+1
                             	; save length
f284 : 38               [ 2] 	sec
f285 : a567             [ 3] 	lda df_prgend
f287 : e565             [ 3] 	sbc df_prgstrt
f289 : 85a3             [ 3] 	sta df_tmpptrb
f28b : a568             [ 3] 	lda df_prgend+1
f28d : e566             [ 3] 	sbc df_prgstrt+1
f28f : 85a4             [ 3] 	sta df_tmpptrb+1
                             	; now save bytes
f291 : 20eef2           [ 6] 	jsr df_rt_savebin
                             
                             	; now save the variables VVT and VNT
f294 : a569             [ 3] 	lda df_vntstrt
f296 : 85a1             [ 3] 	sta df_tmpptra
f298 : a56a             [ 3] 	lda df_vntstrt+1
f29a : 85a2             [ 3] 	sta df_tmpptra+1
                             	; save length
f29c : 38               [ 2] 	sec
f29d : a56d             [ 3] 	lda df_vvtstrt
f29f : e569             [ 3] 	sbc df_vntstrt
f2a1 : 85a3             [ 3] 	sta df_tmpptrb
f2a3 : a56e             [ 3] 	lda df_vvtstrt+1
AS65 Assembler for R6502 [1.42].                                     Page  237
-------------------------------- bank\bank0.s --------------------------------

f2a5 : e56a             [ 3] 	sbc df_vntstrt+1
f2a7 : 85a4             [ 3] 	sta df_tmpptrb+1
                             	; now save bytes
f2a9 : 20eef2           [ 6] 	jsr df_rt_savebin
                             
                             	; close the file
f2ac : 2054c4           [ 6] 	jsr io_close
f2af : 18               [ 2] 	clc
                             	; Close the file
f2b0 : 4ccdf1           [ 3] 	jmp df_rt_file_cleanup
                             
                             
                             ; load dflat tokenised program as binary
f2b3 :                       df_rt_load
f2b3 : 2004f2           [ 6] 	jsr df_rt_openforbinload
                             
                             	; Get zero page header
f2b6 : 20cff2           [ 6] 	jsr df_rt_getbin_parms
                             	; and get bytes
f2b9 : 20dcf2           [ 6] 	jsr df_rt_loadbin
                             
                             	; Get program header
f2bc : 20cff2           [ 6] 	jsr df_rt_getbin_parms
                             	; and get bytes
f2bf : 20dcf2           [ 6] 	jsr df_rt_loadbin
                             
                             	; Get variables header
f2c2 : 20cff2           [ 6] 	jsr df_rt_getbin_parms
                             	; and get bytes
f2c5 : 20dcf2           [ 6] 	jsr df_rt_loadbin
                             
                             	; close the file
f2c8 : 2054c4           [ 6] 	jsr io_close
f2cb : 18               [ 2] 	clc
                             	; Close the file
f2cc : 4ccdf1           [ 3] 	jmp df_rt_file_cleanup
                             
                             
                             ; Utility to get 4 parms from binary header
f2cf :                       df_rt_getbin_parms
f2cf : a200             [ 2] 	ldx #0
f2d1 :                       df_rt_getbin_parms_loop
f2d1 : 2048c4           [ 6] 	jsr io_get_ch
f2d4 : 95a1             [ 4] 	sta df_tmpptra,x
f2d6 : e8               [ 2] 	inx
f2d7 : e004             [ 2] 	cpx #4
f2d9 : d0f6             [ 3] 	bne df_rt_getbin_parms_loop
f2db : 60               [ 6] 	rts
                             
                             ; Utility to load a bin file in address ptra
                             ; Length in ptr b
f2dc :                       df_rt_loadbin
                             	; Now load all bytes
f2dc : a000             [ 2] 	ldy #0
f2de :                       df_rt_loadbin_byte
                             	; Get a byte from tape
f2de : 2048c4           [ 6] 	jsr io_get_ch
                             	; Save it to destination
f2e1 : 91a1             [ 5] 	sta (df_tmpptra),y
                             	; Increment destination
f2e3 : c8               [ 2] 	iny
f2e4 : d002             [ 3] 	bne df_rt_loadbin_inc
AS65 Assembler for R6502 [1.42].                                     Page  238
-------------------------------- bank\bank0.s --------------------------------

f2e6 : e6a2             [ 5] 	inc df_tmpptra+1
f2e8 :                       df_rt_loadbin_inc
                             	; Decrement length remaining
f2e8 : 200cf3           [ 6] 	jsr df_rt_dec_binlen
                             	; Not done, do another byte
f2eb : d0f1             [ 3] 	bne df_rt_loadbin_byte
                             	; Yes the close the file
f2ed : 60               [ 6] 	rts
                             
                             ; Utility to save a bin file from address ptra
                             ; Length in ptr b
f2ee :                       df_rt_savebin
                             	; Save dest and length to tape
f2ee : a200             [ 2] 	ldx #0
f2f0 :                       df_rt_bsave_parms
f2f0 : b5a1             [ 4] 	lda df_tmpptra,x
f2f2 : 204bc4           [ 6] 	jsr io_put_ch
f2f5 : e8               [ 2] 	inx
f2f6 : e004             [ 2] 	cpx #4
f2f8 : d0f6             [ 3] 	bne df_rt_bsave_parms
                             
                             	; Now save all bytes
f2fa : a000             [ 2] 	ldy #0
f2fc :                       df_rt_savebin_byte
                             	; Get byte from memory
f2fc : b1a1             [ 5] 	lda (df_tmpptra),y
                             	; Put byte to tape
f2fe : 204bc4           [ 6] 	jsr io_put_ch
                             	; Increment destination
f301 : c8               [ 2] 	iny
f302 : d002             [ 3] 	bne df_rt_savebin_inc
f304 : e6a2             [ 5] 	inc df_tmpptra+1
f306 :                       df_rt_savebin_inc
                             	; Decrement length remaining
f306 : 200cf3           [ 6] 	jsr df_rt_dec_binlen
                             	; Not done, do another byte
f309 : d0f1             [ 4] 	bne df_rt_savebin_byte
f30b : 60               [ 6] 	rts
                             
                             ; Decrement length in ptrb
f30c :                       df_rt_dec_binlen
                             	; Decrement length remaining
f30c : a5a3             [ 3] 	lda df_tmpptrb
f30e : d002             [ 3] 	bne df_rt_binlen_skip
f310 : c6a4             [ 5] 	dec df_tmpptrb+1
f312 :                       df_rt_binlen_skip
f312 : c6a3             [ 5] 	dec df_tmpptrb
                             	; Reached zero?
f314 : a5a3             [ 3] 	lda df_tmpptrb
f316 : 05a4             [ 3] 	ora df_tmpptrb+1
f318 : 60               [ 6] 	rts
                             
                             
                             ; reset var
f319 :                       df_rt_reset
                             	; now get lvar X,A from current statement
f319 : 205be5           [ 6] 	jsr df_rt_getlvar
                             	; save lvar in tmpb, vvt ptr in tmpa
f31c : 86a3             [ 3] 	stx df_tmpptrb
f31e : 85a4             [ 3] 	sta df_tmpptrb+1
                             	; load the vdp count as the reset value of timer
                             	; turn off interrupts while reading vdp lo,hi
AS65 Assembler for R6502 [1.42].                                     Page  239
-------------------------------- bank\bank0.s --------------------------------

f320 : a000             [ 2] 	ldy #0	; This is in readiness to read high byte 
                             	; clear interrupts to access 3 byte vdp counter 
f322 : 78               [ 2] 	sei
f323 : a508             [ 3] 	lda vdp_cnt
f325 : 91a3             [ 5] 	sta (df_tmpptrb),y
f327 : a509             [ 3] 	lda vdp_cnt+1
f329 : c8               [ 2] 	iny
f32a : 91a3             [ 5] 	sta (df_tmpptrb),y
                             	; restore interrupts asap
f32c : 58               [ 2] 	cli
f32d : 60               [ 6] 	rts
                             
                             ;***** FUNCTIONS *****
                             
f32e :                       df_rt_deek
f32e : 38               [ 2] 	sec
f32f : b001             [ 3] 	bcs df_rt_readbyte
f331 :                       df_rt_peek
f331 : 18               [ 2] 	clc
f332 :                       df_rt_readbyte
f332 : 08               [ 3] 	php
f333 : e688             [ 5] 	inc df_exeoff
f335 : 2088e0           [ 6] 	jsr df_rt_getnval
f338 : 86a1             [ 3] 	stx df_tmpptra
f33a : 85a2             [ 3] 	sta df_tmpptra+1
f33c : a000             [ 2] 	ldy #0
f33e : b1a1             [ 5] 	lda (df_tmpptra),y
f340 : aa               [ 2] 	tax
f341 : a900             [ 2] 	lda #0
f343 : 28               [ 4] 	plp
f344 : 9003             [ 3] 	bcc df_rt_readbyte_skip
f346 : c8               [ 2] 	iny
f347 : b1a1             [ 5] 	lda (df_tmpptra),y
f349 :                       df_rt_readbyte_skip
f349 : 4c32f7           [ 3] 	jmp df_ost_pushInt
                             
                             ; Random number generator
                             ; rnd(0) = get next number
                             ; rnd(>0) = set seed
f34c :                       df_rt_rnd
f34c : e688             [ 5] 	inc df_exeoff
f34e : 2088e0           [ 6] 	jsr df_rt_getnval
                             	; if input is 0 then generate next random number
f351 : e000             [ 2] 	cpx #0
f353 : d014             [ 3] 	bne df_rt_rnd_set
f355 : c900             [ 2] 	cmp #0
f357 : d010             [ 3] 	bne df_rt_rnd_set
                             	; generate next number
f359 : a598             [ 3] 	lda df_rnd+1
f35b : 4a               [ 2] 	lsr a
f35c : 2697             [ 5] 	rol df_rnd
f35e : 9002             [ 3] 	bcc df_rt_rnd_noeor
f360 : 49b4             [ 2] 	eor #0xb4
f362 :                       df_rt_rnd_noeor
f362 : 8598             [ 3] 	sta df_rnd+1
f364 : 4597             [ 3] 	eor df_rnd
f366 : 4c36f7           [ 3] 	jmp df_ost_pushIntA
                             	; else set the seed to that number and done
f369 :                       df_rt_rnd_set
f369 : 8697             [ 3] 	stx df_rnd
f36b : 8598             [ 3] 	sta df_rnd+1
f36d : 4c32f7           [ 3] 	jmp df_ost_pushInt
AS65 Assembler for R6502 [1.42].                                     Page  240
-------------------------------- bank\bank0.s --------------------------------

                             
                             
                             ;* Return memory footprint as follows:
                             ;* 0	Return free memory (start of vvt - end of he
                             ;* 1	Return program size (end of prg - start of p
                             ;* 2	Return size of vars (end of vnt - start of v
f370 :                       df_rt_mem
f370 : e688             [ 5] 	inc df_exeoff
f372 : 2088e0           [ 6] 	jsr df_rt_getnval
                             	; only low byte is used
f375 : e001             [ 2] 	cpx #1
f377 : f017             [ 3] 	beq df_rt_mem_prg
f379 : e002             [ 2] 	cpx #2
f37b : f026             [ 3] 	beq df_rt_mem_var
                             	; default is free memory
f37d :                       df_rt_mem_free
                             	_cpyZPWord df_vvtstrt,df_tmpptra
                             
                             	_cpyZPWord df_starend,df_tmpptrb
                             
f38d : 4cb3f3           [ 3] 	jmp df_rt_mem_calc
f390 :                       df_rt_mem_prg
                             	_cpyZPWord df_prgend,df_tmpptra
                             
                             	_cpyZPWord df_prgstrt,df_tmpptrb
                             
f3a0 : 4cb3f3           [ 3] 	jmp df_rt_mem_calc
f3a3 :                       df_rt_mem_var
                             	_cpyZPWord df_vvtstrt,df_tmpptra
                             
                             	_cpyZPWord df_vntstrt,df_tmpptrb
                             
f3b3 :                       df_rt_mem_calc
                             	; tmpa-tmpb result in X,A
f3b3 : 38               [ 2] 	sec
f3b4 : a5a1             [ 3] 	lda df_tmpptra
f3b6 : e5a3             [ 3] 	sbc df_tmpptrb
f3b8 : aa               [ 2] 	tax
f3b9 : a5a2             [ 3] 	lda df_tmpptra+1
f3bb : e5a4             [ 3] 	sbc df_tmpptrb+1
f3bd : 4c32f7           [ 3] 	jmp df_ost_pushInt
                             
                             ;* a=stick()
                             ;* returns bit condition of joystick positions
                             ;* no actual joystick support so this is
                             ;* Check for fire | down | up | right | left
                             ;*        bit  4     3      2     1       0
f3c0 :                       df_rt_stick
f3c0 : e688             [ 5] 	inc df_exeoff
f3c2 : 2071c7           [ 6] 	jsr kb_stick				; Get pos in to A
f3c5 : 4c36f7           [ 3] 	jmp df_ost_pushIntA
                             
                             ; k=get(sync) sync>=1 means sync
f3c8 :                       df_rt_get
f3c8 : e688             [ 5] 	inc df_exeoff
f3ca : 2088e0           [ 6] 	jsr df_rt_getnval
                             	; only low byte is used, check for sync or async
                             	; c=0 if x<1 else x>=1 makes c=1
f3cd : e001             [ 2] 	cpx #1
f3cf :                       df_rt_get_sync
f3cf : 08               [ 3] 	php
f3d0 : 2048c4           [ 6] 	jsr io_get_ch				; Return in A, C=0 is good
AS65 Assembler for R6502 [1.42].                                     Page  241
-------------------------------- bank\bank0.s --------------------------------

f3d3 : 9005             [ 3] 	bcc df_rt_get_pushp			; Push A (and do plp)
f3d5 : 28               [ 4] 	plp
f3d6 : b0f7             [ 3] 	bcs df_rt_get_sync			; If sync then check again
f3d8 : 9001             [ 3] 	bcc df_rt_get_push			; Else push zero (no plp)
f3da :                       df_rt_get_pushp
f3da : 28               [ 4] 	plp
f3db :                       df_rt_get_push
f3db : 4c36f7           [ 3] 	jmp df_ost_pushIntA
                             
                             ; s = scrn(x,y)
f3de :                       df_rt_scrn
f3de : e688             [ 5] 	inc df_exeoff
f3e0 : 2066e3           [ 6] 	jsr df_rt_parm_2ints
f3e3 : a4a1             [ 3] 	ldy df_tmpptra			; Y is the x coord!
f3e5 : a6a3             [ 3] 	ldx df_tmpptrb			; X is the y coord!
f3e7 : 20d2cd           [ 6] 	jsr gr_get
f3ea : 4c36f7           [ 3] 	jmp df_ost_pushIntA
                             
                             ; p = pixel(x,y)
f3ed :                       df_rt_pixel
f3ed : e688             [ 5] 	inc df_exeoff
f3ef : 2066e3           [ 6] 	jsr df_rt_parm_2ints
f3f2 : a6a1             [ 3] 	ldx df_tmpptra
f3f4 : a4a3             [ 3] 	ldy df_tmpptrb
f3f6 : 2026d0           [ 6] 	jsr gr_pixel
f3f9 : 4c36f7           [ 3] 	jmp df_ost_pushIntA
                             
                             
                             ; %e=elapsed(%var)
f3fc :                       df_rt_elapsed
                             	; now get lvar X,A from current statement
f3fc : 205be5           [ 6] 	jsr df_rt_getlvar
f3ff : e688             [ 5] 	inc df_exeoff
                             	; save lvar in tmpb, vvt ptr in tmpa
f401 : 86a3             [ 3] 	stx df_tmpptrb
f403 : 85a4             [ 3] 	sta df_tmpptrb+1
                             	; subtract vdp counter from value
                             	; turn off interrupts while reading vdp lo,hi
f405 : a000             [ 2] 	ldy #0	; This is in readiness to read high byte 
f407 : 38               [ 2] 	sec
                             	; disable interrupts to access vdp counter
f408 : 78               [ 2] 	sei
f409 : a508             [ 3] 	lda vdp_cnt
f40b : f1a3             [ 5] 	sbc (df_tmpptrb),y
f40d : aa               [ 2] 	tax
f40e : a509             [ 3] 	lda vdp_cnt+1
                             	; restore interrupts asap
f410 : 58               [ 2] 	cli
f411 : c8               [ 2] 	iny
f412 : f1a3             [ 5] 	sbc (df_tmpptrb),y
f414 : 4c32f7           [ 3] 	jmp df_ost_pushInt
                             
f417 :                       df_rt_call
f417 : e688             [ 5] 	inc df_exeoff
f419 : 20a0e3           [ 6] 	jsr df_rt_parm_4ints
f41c : a5a3             [ 3] 	lda df_tmpptrb				; load A
f41e : a6a5             [ 3] 	ldx	df_tmpptrc				; load X
f420 : a4a7             [ 3] 	ldy df_tmpptrd				; load Y
f422 : 2028f4           [ 6] 	jsr df_rt_calljsr
f425 : 4c32f7           [ 3] 	jmp df_ost_pushInt			; A,X pair is return value
f428 :                       df_rt_calljsr
f428 : 6ca100           [ 6] 	jmp (df_tmpptra)			; tmpptra is address, return 
AS65 Assembler for R6502 [1.42].                                     Page  242
-------------------------------- bank\bank0.s --------------------------------

                             
                             ; string length calculator
                             ; X,A = source
                             ; A = length not including zero
f42b :                       df_rt_strlen_common
f42b : 86a1             [ 3] 	stx df_tmpptra
f42d : 85a2             [ 3] 	sta df_tmpptra+1
f42f : a0ff             [ 2] 	ldy #0xff
f431 :                       df_rt_strlen_count
f431 : c8               [ 2] 	iny
f432 : b1a1             [ 5] 	lda (df_tmpptra),y
f434 : d0fb             [ 3] 	bne df_rt_strlen_count
f436 : 98               [ 2] 	tya
f437 : 60               [ 6] 	rts
                             
                             
                             ; common routine to extract a string
                             ; tmpa = source string
                             ; tmpb = dest string
                             ; tmpc = start pos
                             ; tmpd = endpos
f438 :                       df_rt_str_extract
                             	; source string
f438 : 206af7           [ 6] 	jsr df_ost_popStr
f43b : 86a1             [ 3] 	stx df_tmpptra
f43d : 85a2             [ 3] 	sta df_tmpptra+1
                             	; destination is string accumulator
f43f : a57a             [ 3] 	lda df_sevalptr
f441 : 85a3             [ 3] 	sta df_tmpptrb
f443 : a57b             [ 3] 	lda df_sevalptr+1
f445 : 85a4             [ 3] 	sta df_tmpptrb+1
                             	; start pos
f447 : a4a5             [ 3] 	ldy df_tmpptrc
f449 : a200             [ 2] 	ldx #0
f44b :                       df_rt_str_cpy_ch
f44b : c4a7             [ 3] 	cpy df_tmpptrd
f44d : f011             [ 3] 	beq df_str_src_end
f44f : b1a1             [ 5] 	lda (df_tmpptra),y
f451 : f00d             [ 3] 	beq df_str_src_end
f453 : 81a3             [ 6] 	sta (df_tmpptrb,x)
                             	_incZPWord df_tmpptrb
                             
f45b : c8               [ 2] 	iny
f45c : d0ed             [ 3] 	bne df_rt_str_cpy_ch
                             	SWBRK DFERR_STRLONG
                             
f460 :                       df_str_src_end
f460 : a900             [ 2] 	lda #0
f462 : 81a3             [ 6] 	sta (df_tmpptrb,x)
f464 : a67a             [ 3] 	ldx df_sevalptr
f466 : a57b             [ 3] 	lda df_sevalptr+1
f468 : 4c3df7           [ 3] 	jmp df_ost_pushStr
                             
                             ; $c = chr(x)
f46b :                       df_rt_chr
f46b : e688             [ 5] 	inc df_exeoff
                             	; get char in X
f46d : 2088e0           [ 6] 	jsr df_rt_getnval
f470 : a000             [ 2] 	ldy #0
                             	; transfer lo byte to A
f472 : 8a               [ 2] 	txa
f473 : 917a             [ 5] 	sta (df_sevalptr),y
AS65 Assembler for R6502 [1.42].                                     Page  243
-------------------------------- bank\bank0.s --------------------------------

f475 : c8               [ 2] 	iny
                             	; zero terminator
f476 : a900             [ 2] 	lda #0
f478 : 917a             [ 5] 	sta (df_sevalptr),y
                             	; point to seval scratch area
f47a : a67a             [ 3] 	ldx df_sevalptr
f47c : a57b             [ 3] 	lda df_sevalptr+1
f47e : 4c3df7           [ 3] 	jmp df_ost_pushStr
                             
                             ; $c = hex(x)
f481 :                       df_rt_hex
f481 : e688             [ 5] 	inc df_exeoff
                             	; create hex digits
f483 : 2088e0           [ 6] 	jsr df_rt_getnval
f486 : 85a1             [ 3] 	sta df_tmpptra	; Save the high byte
f488 : 8a               [ 2] 	txa				; Convert low byte first
f489 : 2089c1           [ 6] 	jsr str_a_to_x	; Hex digits in A,X
f48c : 85a3             [ 3] 	sta df_tmpptrb
f48e : 8a               [ 2] 	txa				; Push low digit of low byte from X
f48f : 48               [ 3] 	pha
f490 : a5a3             [ 3] 	lda df_tmpptrb	; Get A back from temp
f492 : 48               [ 3] 	pha				; Push high digit of low byte
f493 : a5a1             [ 3] 	lda df_tmpptra	; Get the high byte
f495 : 2089c1           [ 6] 	jsr str_a_to_x	; Hex digits in A,X
                             	; create string
f498 : a000             [ 2] 	ldy #0			; Index in to string temp area
                             	; hi/hi
f49a : 917a             [ 5] 	sta (df_sevalptr),y
f49c : c8               [ 2] 	iny
                             	; hi/lo
f49d : 8a               [ 2] 	txa
f49e : 917a             [ 5] 	sta (df_sevalptr),y
f4a0 : c8               [ 2] 	iny
                             	; lo/hi
f4a1 : 68               [ 4] 	pla
f4a2 : 917a             [ 5] 	sta (df_sevalptr),y
f4a4 : c8               [ 2] 	iny
                             	; lo/lo
f4a5 : 68               [ 4] 	pla
f4a6 : 917a             [ 5] 	sta (df_sevalptr),y
f4a8 : c8               [ 2] 	iny
                             	; zero terminator
f4a9 : a900             [ 2] 	lda #0
f4ab : 917a             [ 5] 	sta (df_sevalptr),y
                             	; point to seval scratch area
f4ad : a67a             [ 3] 	ldx df_sevalptr
f4af : a57b             [ 3] 	lda df_sevalptr+1
f4b1 : 4c3df7           [ 3] 	jmp df_ost_pushStr
                             
                             ; $l = left($s, x)
f4b4 :                       df_rt_left
f4b4 : e688             [ 5] 	inc df_exeoff
                             
                             	; first get the string to act on
                             	; point to string accumulator
f4b6 : 2048e1           [ 6] 	jsr df_rt_seval
                             	; now get the num of chars
f4b9 : e688             [ 5] 	inc df_exeoff
f4bb : 2088e0           [ 6] 	jsr df_rt_getnval
                             	; number of chars to extract
f4be : 86a7             [ 3] 	stx df_tmpptrd
                             	; start position
AS65 Assembler for R6502 [1.42].                                     Page  244
-------------------------------- bank\bank0.s --------------------------------

f4c0 : a000             [ 2] 	ldy #0
f4c2 : 84a5             [ 3] 	sty df_tmpptrc
f4c4 : 4c38f4           [ 3] 	jmp df_rt_str_extract
                             
                             ; $r = right($s, x)
f4c7 :                       df_rt_right
f4c7 : e688             [ 5] 	inc df_exeoff
                             	; first get the string to act on
                             	; point to string accumulator
f4c9 : 2048e1           [ 6] 	jsr df_rt_seval
                             	; now get the num of chars from the right
f4cc : e688             [ 5] 	inc df_exeoff
f4ce : 2088e0           [ 6] 	jsr df_rt_getnval
                             	; number of chars to extract from the right
f4d1 : 86a5             [ 3] 	stx df_tmpptrc
                             	; end pos = len
f4d3 : a67a             [ 3] 	ldx df_sevalptr
f4d5 : a57b             [ 3] 	lda df_sevalptr+1
f4d7 : 202bf4           [ 6] 	jsr df_rt_strlen_common
f4da : 85a7             [ 3] 	sta df_tmpptrd
                             	; subtract num chars to extract to get start pos
f4dc : 38               [ 2] 	sec
f4dd : e5a5             [ 3] 	sbc df_tmpptrc
f4df : 85a5             [ 3] 	sta df_tmpptrc
f4e1 : 4c38f4           [ 3] 	jmp df_rt_str_extract
                             
                             ; $m = mid($s, x, y)
f4e4 :                       df_rt_mid
f4e4 : e688             [ 5] 	inc df_exeoff
                             	; first get the string to act on
                             	; point to string accumulator
f4e6 : 2048e1           [ 6] 	jsr df_rt_seval
                             	; now get start of string segment
f4e9 : e688             [ 5] 	inc df_exeoff
f4eb : 208ee0           [ 6] 	jsr df_rt_neval
                             	; number of chars to extract
f4ee : e688             [ 5] 	inc df_exeoff
f4f0 : 2088e0           [ 6] 	jsr df_rt_getnval
f4f3 : 86a7             [ 3] 	stx df_tmpptrd
                             	; start position
f4f5 : 2066f7           [ 6] 	jsr df_ost_popInt
f4f8 : ca               [ 2] 	dex					; zero offset rather than 1
f4f9 : 86a5             [ 3] 	stx df_tmpptrc
                             	; update end pos by adding start pos
f4fb : 8a               [ 2] 	txa
f4fc : 18               [ 2] 	clc
f4fd : 65a7             [ 3] 	adc df_tmpptrd
f4ff : 85a7             [ 3] 	sta df_tmpptrd
f501 : 4c38f4           [ 3] 	jmp df_rt_str_extract
                             
                             ; %l = len($s)
f504 :                       df_rt_len
f504 : e688             [ 5] 	inc df_exeoff
                             	; evaluate the string in the string accumulator
f506 : 2048e1           [ 6] 	jsr df_rt_seval
f509 : 206af7           [ 6] 	jsr df_ost_popStr
                             	; now calculate the length of this string
f50c : 202bf4           [ 6] 	jsr df_rt_strlen_common
f50f : 4c36f7           [ 3] 	jmp df_ost_pushIntA
                             
                             ; %l = asc($s)
f512 :                       df_rt_asc
AS65 Assembler for R6502 [1.42].                                     Page  245
-------------------------------- bank\bank0.s --------------------------------

f512 : e688             [ 5] 	inc df_exeoff
                             	; Evaluate string in the string accumulator
f514 : 2048e1           [ 6] 	jsr df_rt_seval
f517 : 206af7           [ 6] 	jsr df_ost_popStr
                             	; Store point in ZP
f51a : 86a1             [ 3] 	stx df_tmpptra
f51c : 85a2             [ 3] 	sta df_tmpptra+1
                             	; Find the character at beginning
f51e : a200             [ 2] 	ldx #0
f520 : a1a1             [ 6] 	lda (df_tmpptra,x)
f522 : 4c36f7           [ 3] 	jmp df_ost_pushIntA
                             
                             ; %l = val($s)
f525 :                       df_rt_val
f525 : e688             [ 5] 	inc df_exeoff
                             	; evaluate the string
f527 : 2048e1           [ 6] 	jsr df_rt_seval
f52a : 206af7           [ 6] 	jsr df_ost_popStr
f52d : a000             [ 2] 	ldy #0				; any numeric format
f52f : 20d4c1           [ 6] 	jsr con_n_to_a		; result in num_a
f532 : b007             [ 3] 	bcs df_rt_val_err
f534 : a63d             [ 3] 	ldx num_a
f536 : a53e             [ 3] 	lda num_a+1
                             	; Save as an int
f538 : 4c32f7           [ 3] 	jmp df_ost_pushInt
f53b :                       df_rt_val_err
                             	SWBRK DFERR_TYPEMISM
                             
                             
                             ; stop execution
f53d :                       df_rt_abort
                             	SWBRK DFERR_ABORT
                             
                             
f53f :                       df_rt_sprchar
f53f : 2066e3           [ 6] 	jsr df_rt_parm_2ints
f542 : a5a1             [ 3] 	lda df_tmpptra
f544 : a6a3             [ 3] 	ldx df_tmpptrb
f546 : 4c9dd2           [ 3] 	jmp gr_spr_char
                             
f549 :                       df_rt_sprpos
f549 : 207de3           [ 6] 	jsr df_rt_parm_3ints
f54c : a5a1             [ 3] 	lda df_tmpptra
f54e : a6a3             [ 3] 	ldx df_tmpptrb
f550 : a4a5             [ 3] 	ldy df_tmpptrc
f552 : 4cadd2           [ 3] 	jmp gr_spr_pos
                             
f555 :                       df_rt_sprupd
f555 : 2032d2           [ 6] 	jsr gr_spr_erase
f558 : 2045d2           [ 6] 	jsr gr_spr_new
f55b : 4c79d2           [ 3] 	jmp gr_spr_draw
                             
f55e :                       df_rt_sprinit
f55e : 4c24d2           [ 3] 	jmp gr_spr_init
                             
f561 :                       df_rt_sprmulti
f561 : 2066e3           [ 6] 	jsr df_rt_parm_2ints
f564 : 4cbad2           [ 3] 	jmp gr_spr_multi_pos
                             
f567 :                       df_rt_sprhit
f567 : e688             [ 5] 	inc df_exeoff
f569 : 2088e0           [ 6] 	jsr df_rt_getnval
AS65 Assembler for R6502 [1.42].                                     Page  246
-------------------------------- bank\bank0.s --------------------------------

f56c : 8a               [ 2] 	txa
f56d : 20a3d2           [ 6] 	jsr gr_spr_hit
f570 : b003             [ 3] 	bcs df_rt_sprhit_inactive
                             	; Active sprite hit = background
f572 : 4c36f7           [ 3] 	jmp df_ost_pushIntA
f575 :                       df_rt_sprhit_inactive
                             	; Inactive sprite hit = -1
f575 : a2ff             [ 2] 	ldx #0xff
f577 : 8a               [ 2] 	txa
f578 : 4c32f7           [ 3] 	jmp df_ost_pushInt
                             
                             
f57b :                       mod_sz_rtsubs_e
                             
                             
                             	include "dflat/proc.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  PROC.S
                             ;*  dflat module to handle procedures:
                             ;*  - executing a procedure
                             ;*  - find a proc, pass local and non-local param
                             ;*  - return from a proc, unload locals
                             ;*  - save the definition of a proc in the VNT an
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code  
                             
f57b :                       mod_sz_proc_s
                             
f57b :                       df_rt_proc_parmerr
                             	SWBRK DFERR_PROCPARM
                             
                             
                             ; call procedure
f57d :                       df_rt_proc
                             	; move past escape token
f57d : a488             [ 3] 	ldy df_exeoff
f57f : c8               [ 2] 	iny
                             	; Get VVT address X,A and procptr
f580 : b186             [ 5] 	lda (df_currlin),y
f582 : aa               [ 2] 	tax
f583 : c8               [ 2] 	iny
f584 : b186             [ 5] 	lda (df_currlin),y
f586 : c8               [ 2] 	iny
f587 : 8488             [ 3] 	sty df_exeoff
f589 : 868e             [ 3] 	stx df_procptr
f58b : 858f             [ 3] 	sta df_procptr+1
                             	
                             	; is index 0 (held in dim1)
                             	; then need to find the procedure
f58d : a003             [ 2] 	ldy #DFVVT_DIM1
f58f : b18e             [ 5] 	lda (df_procptr),y
f591 : d014             [ 3] 	bne df_rt_proc_addr
AS65 Assembler for R6502 [1.42].                                     Page  247
-------------------------------- bank\bank0.s --------------------------------

                             	; find proc
f593 : 20f9e4           [ 6] 	jsr df_rt_findproc
                             	; save y (line index)
f596 : 8438             [ 3] 	sty tmp_d
                             	; now go and update the proc vvt address
f598 : a002             [ 2] 	ldy #DFVVT_HI
f59a : 918e             [ 5] 	sta (df_procptr),y
f59c : a001             [ 2] 	ldy #DFVVT_LO
f59e : 8a               [ 2] 	txa
f59f : 918e             [ 5] 	sta (df_procptr),y
f5a1 : a003             [ 2] 	ldy #DFVVT_DIM1
                             	; get back line index in to A
f5a3 : a538             [ 3] 	lda tmp_d
f5a5 : 918e             [ 5] 	sta (df_procptr),y
f5a7 :                       df_rt_proc_addr
                             	; move past first open bracket
f5a7 : e688             [ 5] 	inc df_exeoff
                             	
                             	; get parm count
f5a9 : a004             [ 2] 	ldy #DFVVT_DIM2
f5ab : b18e             [ 5] 	lda (df_procptr),y	
f5ad : f018             [ 3] 	beq df_rt_proc_parm_none
                             	; push the right number of parms on
f5af : 48               [ 3] 	pha
                             
f5b0 : c688             [ 5] 	dec df_exeoff		; Pre-adjust
f5b2 :                       df_rt_proc_push_parm
                             	; move past comma or opening bracket
f5b2 : e688             [ 5] 	inc df_exeoff
                             	; if at end then error!
f5b4 : a488             [ 3] 	ldy df_exeoff
f5b6 : b186             [ 5] 	lda (df_currlin),y
f5b8 : c929             [ 2] 	cmp #')'
f5ba : f0bf             [ 3] 	beq df_rt_proc_parmerr
                             	; else try and evaluate
f5bc : 208ee0           [ 6] 	jsr df_rt_neval
                             	; get parm count off stack
f5bf : 68               [ 4] 	pla
                             	; decrement
f5c0 : 38               [ 2] 	sec
f5c1 : e901             [ 2] 	sbc #1
                             	; and put back on stack
f5c3 : 48               [ 3] 	pha
                             	; go back and do all required parms
f5c4 : d0ec             [ 3] 	bne df_rt_proc_push_parm
                             	; remove parm counter from stack
f5c6 :                       df_rt_proc_parm_done
f5c6 : 68               [ 4] 	pla
f5c7 :                       df_rt_proc_parm_none
                             	; should be at close bracket
f5c7 : a488             [ 3] 	ldy df_exeoff
f5c9 : b186             [ 5] 	lda (df_currlin),y
f5cb : c929             [ 2] 	cmp #')'
f5cd : d0ac             [ 3] 	bne df_rt_proc_parmerr
                             	; should be no more parms
                             	; ok, finally we have all parms on rt stack
                             	; now execute the procedure
                             	; get back the proc address
f5cf : a68e             [ 3] 	ldx df_procptr
f5d1 : a58f             [ 3] 	lda df_procptr+1
f5d3 : d000             [ 3] 	bne df_rt_exec_proc		; ALWAYS as procptr+1 !=0
                             	
AS65 Assembler for R6502 [1.42].                                     Page  248
-------------------------------- bank\bank0.s --------------------------------

                             ; executing a procedure in VVT slot A,X
f5d5 :                       df_rt_exec_proc
                             	; save slot address
f5d5 : 86a1             [ 3] 	stx df_tmpptra
f5d7 : 85a2             [ 3] 	sta df_tmpptra+1
                             	
                             	; need to save all important vars
f5d9 : a586             [ 3] 	lda df_currlin
f5db : 48               [ 3] 	pha
f5dc : a587             [ 3] 	lda df_currlin+1
f5de : 48               [ 3] 	pha
f5df : a588             [ 3] 	lda df_exeoff
f5e1 : 48               [ 3] 	pha
f5e2 : a57f             [ 3] 	lda df_nxtstidx
f5e4 : 48               [ 3] 	pha
f5e5 : a580             [ 3] 	lda df_curstidx
f5e7 : 48               [ 3] 	pha
f5e8 : a57e             [ 3] 	lda df_eolidx
f5ea : 48               [ 3] 	pha
f5eb : a593             [ 3] 	lda df_ifnest
f5ed : 48               [ 3] 	pha
                             
                             	; now initialise the data
f5ee : a001             [ 2] 	ldy #DFVVT_LO
f5f0 : b1a1             [ 5] 	lda (df_tmpptra),y
f5f2 : 8586             [ 3] 	sta df_currlin
f5f4 : c8               [ 2] 	iny
f5f5 : b1a1             [ 5] 	lda (df_tmpptra),y
f5f7 : 8587             [ 3] 	sta df_currlin+1
f5f9 : c8               [ 2] 	iny
f5fa : b1a1             [ 5] 	lda (df_tmpptra),y
f5fc : 8588             [ 3] 	sta df_exeoff
f5fe : 8580             [ 3] 	sta df_curstidx
f600 : a000             [ 2] 	ldy #0
f602 : b186             [ 5] 	lda (df_currlin),y
f604 : 857f             [ 3] 	sta df_nxtstidx
                             	; now execute statements
f606 : 201fe4           [ 6] 	jsr df_rt_exec_stat
                             ;	bcs df_rt_exec_proc_err
                             	; now restore the position
f609 : 68               [ 4] 	pla
f60a : 8593             [ 3] 	sta df_ifnest
f60c : 68               [ 4] 	pla
f60d : 857e             [ 3] 	sta df_eolidx
f60f : 68               [ 4] 	pla
f610 : 8580             [ 3] 	sta df_curstidx
f612 : 68               [ 4] 	pla
f613 : 857f             [ 3] 	sta df_nxtstidx
f615 : 68               [ 4] 	pla
f616 : 8588             [ 3] 	sta df_exeoff
f618 : 68               [ 4] 	pla
f619 : 8587             [ 3] 	sta df_currlin+1
f61b : 68               [ 4] 	pla
f61c : 8586             [ 3] 	sta df_currlin
                             	; should be all restored, so return
f61e : 60               [ 6] 	rts
                             
                             
f61f :                       df_rt_def
                             	; line offset pointing at DFTK_PROC
                             	; skip over PROC address and open bracket
f61f : e688             [ 5] 	inc df_exeoff
AS65 Assembler for R6502 [1.42].                                     Page  249
-------------------------------- bank\bank0.s --------------------------------

f621 : e688             [ 5] 	inc df_exeoff
f623 : e688             [ 5] 	inc df_exeoff
                             	; parms on stack in reverse order to parm list
                             	; so get each parm and type and save to scratch
f625 : a201             [ 2] 	ldx #1									; index in to scratch
f627 : 868c             [ 3] 	stx df_procargs							; Proc args is the #args-1
f629 : a488             [ 3] 	ldy df_exeoff
f62b :                       df_rt_def_find_var
f62b : c8               [ 2] 	iny
f62c : b186             [ 5] 	lda (df_currlin),y
                             	; check if end of parm list
f62e : c929             [ 2] 	cmp #')'
f630 : f023             [ 3] 	beq df_rt_def_parm_done
                             	; else check if found a variable escape token (<
f632 : c911             [ 2] 	cmp #DFTK_VAR
f634 : f009             [ 3] 	beq df_rt_def_got_var
                             	; else check if non-local specifier
f636 : c926             [ 2] 	cmp #DFTK_VARPARM						; This is a regular ASCII
f638 : f002             [ 3] 	beq df_rt_def_got_varparm
f63a : d0ef             [ 3] 	bne df_rt_def_find_var
f63c :                       df_rt_def_got_varparm
                             	; set high bit
f63c : 0980             [ 2] 	ora #0x80
                             	; advance over non-local specifier
f63e : c8               [ 2] 	iny
f63f :                       df_rt_def_got_var
f63f : 4980             [ 2] 	eor #0x80			; If was set by '&' qualifier then w
f641 : 9d1306           [ 5] 	sta scratch,x		; Save parm type (by value or ref
                             	; get address and save in scratch
f644 : c8               [ 2] 	iny
f645 : b186             [ 5] 	lda (df_currlin),y
f647 : 9d3306           [ 5] 	sta scratch+32,x	; Hope 32 params is enough! :-)
f64a : c8               [ 2] 	iny
f64b : b186             [ 5] 	lda (df_currlin),y
f64d : 9d5306           [ 5] 	sta scratch+64,x
f650 : e8               [ 2] 	inx
f651 : e68c             [ 5] 	inc df_procargs
f653 : d0d6             [ 3] 	bne df_rt_def_find_var  ; always - relies not ze
f655 :                       df_rt_def_parm_done
                             	; save index that we got to
f655 : 8488             [ 3] 	sty df_exeoff
                             	; save def param list position in temp
f657 : 868b             [ 3] 	stx df_procmode
                             	; all var indices on the operator stack
                             	; now load up variables with parameters
                             	; initially assume no locals
f659 : a900             [ 2] 	lda #0
f65b : 858d             [ 3] 	sta df_procloc
f65d :                       df_rt_def_load_var
f65d : c68c             [ 5] 	dec df_procargs
f65f : f039             [ 3] 	beq df_rt_def_load_var_done
                             	; get var address
f661 : a68b             [ 3] 	ldx df_procmode
f663 : ca               [ 2] 	dex
f664 : bd3306           [ 4] 	lda scratch+32,x
f667 : 85a1             [ 3] 	sta df_tmpptra
f669 : bd5306           [ 4] 	lda scratch+64,x
f66c : 85a2             [ 3] 	sta df_tmpptra+1
f66e : 868b             [ 3] 	stx df_procmode
                             	
f670 : bd1306           [ 4] 	lda scratch,x
                             	; if MSB is clear then this is not a local varia
AS65 Assembler for R6502 [1.42].                                     Page  250
-------------------------------- bank\bank0.s --------------------------------

                             	; so just go an initialise with stacking
f673 : 1009             [ 3] 	bpl df_rt_def_initialise_parm
                             	; else call the local handling code to 
                             	; push the var address on to the runtime stack
f675 : a6a1             [ 3] 	ldx df_tmpptra
f677 : a5a2             [ 3] 	lda df_tmpptra+1
f679 : 20d4f6           [ 6] 	jsr df_rt_proc_local
                             	; increment number of locals
f67c : e68d             [ 5] 	inc df_procloc
f67e :                       df_rt_def_initialise_parm
                             	; load type
f67e : a000             [ 2] 	ldy #DFVVT_TYPE
f680 : b1a1             [ 5] 	lda (df_tmpptra),y
                             	; if array or string type then pop pointer from 
f682 : 2984             [ 2] 	and #DFVVT_STR|DFVVT_ARRY
f684 : f006             [ 3] 	beq df_rt_def_load_var_int
f686 : 206ef7           [ 6] 	jsr df_ost_popPtr
f689 : 4c8ff6           [ 3] 	jmp df_rt_def_load_var_int_skip
f68c :                       df_rt_def_load_var_int
                             	; must be int pop it from operator stack
f68c : 2066f7           [ 6] 	jsr df_ost_popInt
f68f :                       df_rt_def_load_var_int_skip
                             	; update the variable
f68f : a002             [ 2] 	ldy #DFVVT_HI
f691 : 91a1             [ 5] 	sta (df_tmpptra),y
f693 : 88               [ 2] 	dey
f694 : 8a               [ 2] 	txa
f695 : 91a1             [ 5] 	sta (df_tmpptra),y
                             	
f697 : 4c5df6           [ 3] 	jmp df_rt_def_load_var
f69a :                       df_rt_def_load_var_done
                             	; save the number of local parameters found so t
                             	; be unloaded when the proc ends
f69a : a58d             [ 3] 	lda df_procloc
f69c : 20e8f6           [ 6] 	jsr df_rst_pushByte
                             	; continue with next statement
f69f : 18               [ 2] 	clc
f6a0 : 60               [ 6] 	rts
                             
                             	
                             ; end def for a proc
f6a1 :                       df_rt_enddef
                             	; unload any locals
f6a1 : 20adf6           [ 6] 	jsr df_rt_proc_unlocal
                             	; nothing to do - main loop will terminate
f6a4 : 18               [ 2] 	clc
f6a5 : 60               [ 6] 	rts
                             	
                             ; return a value
f6a6 :                       df_rt_return
                             	; evaluate the return and put on the parameter s
f6a6 : 208ee0           [ 6] 	jsr df_rt_neval
                             	; process this like an end of procedure
f6a9 : 20a1f6           [ 6] 	jsr df_rt_enddef
f6ac : 60               [ 6] 	rts
                             	
                             	
                             ; unload any local variables from runtime stack
f6ad :                       df_rt_proc_unlocal
f6ad : 20f1f6           [ 6] 	jsr df_rst_popByte
f6b0 : aa               [ 2] 	tax
f6b1 : f020             [ 3] 	beq df_rt_proc_unload_done
AS65 Assembler for R6502 [1.42].                                     Page  251
-------------------------------- bank\bank0.s --------------------------------

f6b3 :                       df_rt_proc_unloadvar
f6b3 : 8a               [ 2] 	txa
f6b4 : 48               [ 3] 	pha
                             	; var value is popped first then index
                             	; get a word and put in tmpb
f6b5 : 200ef7           [ 6] 	jsr df_rst_popWord
f6b8 : 86a3             [ 3] 	stx df_tmpptrb
f6ba : 85a4             [ 3] 	sta df_tmpptrb+1
                             	; get the var address
f6bc : 200ef7           [ 6] 	jsr df_rst_popWord
f6bf : 86a1             [ 3] 	stx df_tmpptra
f6c1 : 85a2             [ 3] 	sta df_tmpptra+1
                             	; store lo byte first
f6c3 : a001             [ 2] 	ldy #DFVVT_LO
f6c5 : a5a3             [ 3] 	lda df_tmpptrb
f6c7 : 91a1             [ 5] 	sta (df_tmpptra),y
                             	; then hi
f6c9 : c8               [ 2] 	iny
f6ca : a5a4             [ 3] 	lda df_tmpptrb+1
f6cc : 91a1             [ 5] 	sta (df_tmpptra),y
                             	; restore counter
f6ce : 68               [ 4] 	pla
f6cf : aa               [ 2] 	tax
f6d0 : ca               [ 2] 	dex
f6d1 : d0e0             [ 3] 	bne df_rt_proc_unloadvar
f6d3 :                       df_rt_proc_unload_done
f6d3 : 60               [ 6] 	rts
                             	
                             ; push a local variable to the runtime stack
                             ; X,A = var slot
f6d4 :                       df_rt_proc_local
                             	; save address
f6d4 : 86a1             [ 3] 	stx df_tmpptra
f6d6 : 85a2             [ 3] 	sta df_tmpptra+1
                             	; push var slot on rt stack
f6d8 : 2000f7           [ 6] 	jsr df_rst_pushWord
f6db :                       df_rt_proc_local_load	
                             	; load x,a with var value lo,hi
f6db : a001             [ 2] 	ldy #DFVVT_LO
f6dd : b1a1             [ 5] 	lda (df_tmpptra),y
f6df : aa               [ 2] 	tax
f6e0 : c8               [ 2] 	iny
f6e1 : b1a1             [ 5] 	lda (df_tmpptra),y
                             	; push word on to rt stack
f6e3 : 2000f7           [ 6] 	jsr df_rst_pushWord
f6e6 : 18               [ 2] 	clc
f6e7 : 60               [ 6] 	rts
                             		
f6e8 :                       mod_sz_proc_e
                             
                             
f6e8 :                       mod_sz_runtime_e
                             
                             
                             
                             	include "dflat/stack.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
AS65 Assembler for R6502 [1.42].                                     Page  252
-------------------------------- bank\bank0.s --------------------------------

                             ;*  credit of original my authorship please!
                             ;*
                             ;*  STACK.S
                             ;*  This module implements the dflat software sta
                             ;*  needs a few stacks:
                             ;*  - 6502 stack for expression parsing and reent
                             ;*  - dflat runtime stack for things like for/nex
                             ;*  - dflat parameter stack for passing parameter
                             ;*  The two software stacks are implemented in th
                             ;*  with the runtime stack growing up from 0 and 
                             ;*  operator stack growing down from 255.  Hopefu
                             ;*  don't meet as there are no checks for this at
                             ;*  purely because I want speed over friendliness
                             ;*  I may come to regret this.
                             ;*  I have also added the only runtime memory all
                             ;*  needed by dflat here.  Humourously I have cal
                             ;*  which is taken from the C language, but it on
                             ;*  grab some memory after the of dflat program c
                             ;*  arrays - which of course cannot have storage 
                             ;*  tokenisation time (e.g. because I dimension a
                             ;*  a size from a variable).
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code  
                             
                             
                             ;****************************************
                             ;* Push a byte on to runtime stack
                             ;* A = byte
                             ;****************************************
f6e8 :                       df_rst_pushByte
f6e8 : a476             [ 3] 	ldy df_rtstop
f6ea : 990005           [ 5] 	sta df_rtstck,y
f6ed : 88               [ 2] 	dey
f6ee : 8476             [ 3] 	sty df_rtstop
f6f0 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Pop a byte off runtime stack
                             ;* A = byte
                             ;****************************************
f6f1 :                       df_rst_popByte
f6f1 : a476             [ 3] 	ldy df_rtstop
f6f3 : c8               [ 2] 	iny
f6f4 : b90005           [ 4] 	lda df_rtstck,y
f6f7 : 8476             [ 3] 	sty df_rtstop
f6f9 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Peek a byte off runtime stack
                             ;* A = byte
                             ;****************************************
f6fa :                       df_rst_peekByte
f6fa : a476             [ 3] 	ldy df_rtstop
                             	; Look at what is below top of stack
                             	; below means the next address up as
                             	; this stack grows downwards like 6502
f6fc : b90105           [ 4] 	lda df_rtstck+1,y
f6ff : 60               [ 6] 	rts
                             	
AS65 Assembler for R6502 [1.42].                                     Page  253
-------------------------------- bank\bank0.s --------------------------------

                             ;****************************************
                             ;* Push a word on to runtime stack
                             ;* X,A = word lo,hi
                             ;****************************************
f700 :                       df_rst_pushWord
f700 : a476             [ 3] 	ldy df_rtstop
f702 : 990005           [ 5] 	sta df_rtstck,y
f705 : 88               [ 2] 	dey
f706 : 8a               [ 2] 	txa
f707 : 990005           [ 5] 	sta df_rtstck,y
f70a : 88               [ 2] 	dey
f70b : 8476             [ 3] 	sty df_rtstop
f70d : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Pop a word off runtime stack
                             ;* X,A = word lo,hi
                             ;****************************************
f70e :                       df_rst_popWord
f70e : a476             [ 3] 	ldy df_rtstop
f710 : c8               [ 2] 	iny
f711 : b90005           [ 4] 	lda df_rtstck,y
f714 : aa               [ 2] 	tax
f715 : c8               [ 2] 	iny
f716 : b90005           [ 4] 	lda df_rtstck,y
f719 : 8476             [ 3] 	sty df_rtstop
f71b : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Push a parameter on to parm stack
                             ;* X,A - int
                             ;* Y - type
                             ;****************************************
f71c :                       df_ost_pushParmX
f71c : 8438             [ 3] 	sty tmp_d		; Save Type
f71e : a477             [ 3] 	ldy df_parmtop	; Get stack index
                             	; push high byte first (A)
f720 : 990005           [ 5] 	sta df_rtstck,y
f723 : c8               [ 2] 	iny
                             	; push low byte next (X)
f724 : 8a               [ 2] 	txa
f725 : 990005           [ 5] 	sta df_rtstck,y
f728 : c8               [ 2] 	iny
f729 : a538             [ 3] 	lda tmp_d		; get Type
f72b : 990005           [ 5] 	sta df_rtstck,y
f72e : c8               [ 2] 	iny
                             	; save new top of stack
f72f : 8477             [ 3] 	sty df_parmtop
f731 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Push an int on to parm stack
                             ;* X,A - int
                             ;****************************************
f732 :                       df_ost_pushInt
f732 : a001             [ 2] 	ldy #DFST_INT
f734 : d0e6             [ 3] 	bne df_ost_pushParmX		; ALWAYS!
                             
                             ;****************************************
                             ;* Push A on to parm stack
                             ;* X,A - int
                             ;****************************************
AS65 Assembler for R6502 [1.42].                                     Page  254
-------------------------------- bank\bank0.s --------------------------------

f736 :                       df_ost_pushIntA
f736 : a001             [ 2] 	ldy #DFST_INT
f738 : aa               [ 2] 	tax
f739 : a900             [ 2] 	lda #0
f73b : f0df             [ 3] 	beq df_ost_pushParmX		; ALWAYS!
                             
                             ;****************************************
                             ;* Push a string pointer on to parm stack
                             ;* X,A - int
                             ;****************************************
f73d :                       df_ost_pushStr
f73d : a080             [ 2] 	ldy #DFST_STR
f73f : d0db             [ 3] 	bne df_ost_pushParmX		; ALWAYS!
                             
                             ;****************************************
                             ;* Push a general pointer on to parm stack
                             ;* X,A - int
                             ;****************************************
f741 :                       df_ost_pushPtr
f741 : a0ff             [ 2] 	ldy #0xff
f743 : d0d7             [ 3] 	bne df_ost_pushParmX		; ALWAYS!
                             	
                             ;****************************************
                             ;* Pop parameter from the stack
                             ;* X,A - int
                             ;* Y - type expected
                             ;****************************************
f745 :                       df_ost_popParmX
f745 : 8438             [ 3] 	sty tmp_d
f747 : a477             [ 3] 	ldy df_parmtop
                             	; pull type first
f749 : a538             [ 3] 	lda tmp_d
f74b : 88               [ 2] 	dey
f74c : 390005           [ 4] 	and df_rtstck,y
f74f : f00d             [ 3] 	beq df_st_typemismatcherr
                             	; pull low byte first
f751 : 88               [ 2] 	dey
f752 : b90005           [ 4] 	lda df_rtstck,y
f755 : aa               [ 2] 	tax
                             	; pull high byte next
f756 : 88               [ 2] 	dey
f757 : b90005           [ 4] 	lda df_rtstck,y
                             	; save new top of stack
f75a : 8477             [ 3] 	sty df_parmtop
f75c : 18               [ 2] 	clc
f75d : 60               [ 6] 	rts
f75e :                       df_st_typemismatcherr
                             	SWBRK DFERR_TYPEMISM
                             
                             
                             ;****************************************
                             ;* Return type on top of stack
                             ;* Y - type
                             ;****************************************
f760 :                       df_ost_peekType
f760 : a477             [ 3] 	ldy df_parmtop
f762 : b9ff04           [ 4] 	lda df_rtstck-1,y
                             ;	tay NO LONGER NEEDED - EVERYWHERE USES A
f765 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Pop an int off parm stack
AS65 Assembler for R6502 [1.42].                                     Page  255
-------------------------------- bank\bank0.s --------------------------------

                             ;* X,A - int
                             ;****************************************
f766 :                       df_ost_popInt
f766 : a001             [ 2] 	ldy #DFST_INT
f768 : d0db             [ 3] 	bne df_ost_popParmX			; ALWAYS!
                             
                             ;****************************************
                             ;* Pop a string pointer off parm stack
                             ;* X,A - int
                             ;****************************************
f76a :                       df_ost_popStr
f76a : a080             [ 2] 	ldy #DFST_STR
f76c : d0d7             [ 3] 	bne df_ost_popParmX			; ALWAYS!
                             	
                             ;****************************************
                             ;* Pop a general pointer off parm stack
                             ;* X,A - int
                             ;****************************************
f76e :                       df_ost_popPtr
f76e : a0ff             [ 2] 	ldy #0xff
f770 : d0d3             [ 3] 	bne df_ost_popParmX			; ALWAYS!
                             	
                             	
                             ;****************************************
                             ;* Allocate space on the heap
                             ;* X, A = Number of bytes to allocate
                             ;* X, A return address of allocated space
                             ;****************************************
f772 :                       df_st_malloc
                             	; save A in Y
f772 : a8               [ 2] 	tay
                             	; save old starend
f773 : a575             [ 3] 	lda df_starend+1
f775 : 48               [ 3] 	pha
f776 : a574             [ 3] 	lda df_starend
f778 : 48               [ 3] 	pha
                             	; restore A from Y
f779 : 98               [ 2] 	tya
                             	; add X,A to starend
f77a : 48               [ 3] 	pha
f77b : 8a               [ 2] 	txa
f77c : 18               [ 2] 	clc
f77d : 6574             [ 3] 	adc df_starend
f77f : 8574             [ 3] 	sta df_starend
f781 : 68               [ 4] 	pla
f782 : 6575             [ 3] 	adc df_starend+1
f784 : 8575             [ 3] 	sta df_starend+1
                             	; return old starend as start of space
f786 : 68               [ 4] 	pla
f787 : aa               [ 2] 	tax
f788 : 68               [ 4] 	pla
f789 : 60               [ 6] 	rts
                             	
                             
                             ;****************************************
                             ;* df_init
                             ;* Initialise dflat language settings
                             ;****************************************
f78a :                       df_init
                             	; Initialise top of memory to default
                             	; This can be overridden by himem command
f78a : a900             [ 2] 	lda #lo(DF_MEMTOP)
AS65 Assembler for R6502 [1.42].                                     Page  256
-------------------------------- bank\bank0.s --------------------------------

f78c : 8d1106           [ 4] 	sta df_memtop
f78f : a998             [ 2] 	lda #hi(DF_MEMTOP)
f791 : 8d1206           [ 4] 	sta df_memtop+1
                             
                             	; Init program space
f794 : 2098f7           [ 6] 	jsr df_clear
                             
                             	; Initialise assembler
                             ;	jsr asm_init
                             
f797 : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* df_clear
                             ;* Initialise program space
                             ;****************************************
f798 :                       df_clear
                             	; Start of program space
f798 : a913             [ 2] 	lda #lo(DF_PROGSTART)
f79a : 8565             [ 3] 	sta df_prgstrt
f79c : 8567             [ 3] 	sta df_prgend
f79e : a907             [ 2] 	lda #hi(DF_PROGSTART)
f7a0 : 8566             [ 3] 	sta df_prgstrt+1
f7a2 : 8568             [ 3] 	sta df_prgend+1
                             	; Terminal value in prog space
f7a4 : a900             [ 2] 	lda #0
f7a6 : a000             [ 2] 	ldy #0
f7a8 : 9165             [ 5] 	sta (df_prgstrt),y
                             	; No variables - zero the count
f7aa : 8571             [ 3] 	sta df_varcnt
                             
                             	; Variable value table
                             	; Grows down from mem top
f7ac : ad1106           [ 4] 	lda df_memtop
f7af : 856d             [ 3] 	sta df_vvtstrt
f7b1 : 856f             [ 3] 	sta df_vvtend
f7b3 : ad1206           [ 4] 	lda df_memtop+1
f7b6 : 856e             [ 3] 	sta df_vvtstrt+1
f7b8 : 8570             [ 3] 	sta df_vvtend+1
                             
                             	; Variable name table
                             	; Grows down from mem top
f7ba : a56d             [ 3] 	lda df_vvtstrt
f7bc : 8569             [ 3] 	sta df_vntstrt
f7be : 856b             [ 3] 	sta df_vntend
f7c0 : a56e             [ 3] 	lda df_vvtstrt+1
f7c2 : 856a             [ 3] 	sta df_vntstrt+1
f7c4 : 856c             [ 3] 	sta df_vntend+1
                             
                             	; String accumulator
f7c6 : a900             [ 2] 	lda #lo(df_raw)
f7c8 : 857a             [ 3] 	sta df_sevalptr
f7ca : a904             [ 2] 	lda #hi(df_raw)
f7cc : 857b             [ 3] 	sta df_sevalptr+1
                             
f7ce : 60               [ 6] 	rts
                             
f7cf :                       mod_sz_dflat_e
                             
                             	include "dflat/error.s"
                             ;************************************************
AS65 Assembler for R6502 [1.42].                                     Page  257
-------------------------------- bank\bank0.s --------------------------------

                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  ERROR.S
                             ;*  Error handling module.
                             ;*  Whan an error is thrown using BRK, this modul
                             ;*  displaying the error plus any associated line
                             ;*  if it was running a program.  It then resets 
                             ;*  settings and takes the system back to program
                             ;*  mode.  The message uses the general IO handle
                             ;*  output must be set to the right place else fo
                             ;*	the error message will be written to tape!
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code
                             	include "dflat/error.i"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  ERROR.I
                             ;*  Error definitions file.
                             ;*  The macro to throw an error is elswhere, but 
                             ;*  It issues a 6502 BRK commmand with the next b
                             ;*  the error code.  The BRK handler then picks u
                             ;*  code and shows the appropriate message plus a
                             ;*  number if a program was running.
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code  
                             
                             ; Error message numbers
0000 =                       DFERR_OK		=	0
0001 =                       DFERR_SYNTAX	=	1
0002 =                       DFERR_TYPEMISM	=	2
0003 =                       DFERR_DIM		=	3
0004 =                       DFERR_UNTIL		=	4
0005 =                       DFERR_NOPROC	=	5
0006 =                       DFERR_PROCPARM	=	6
0007 =                       DFERR_IMMEDIATE	=	7
0008 =                       DFERR_UNCLOSEDIF=	8
0009 =                       DFERR_NOIF		=	9
000a =                       DFERR_NEXTFOR	=	10
000b =                       DFERR_FNAME		=	11
000c =                       DFERR_STRLONG	=	12
000d =                       DFERR_BREAK		=	13
000e =                       DFERR_NODATA	=	14
000f =                       DFERR_WEND		=	15
0010 =                       DFERR_NOLINE	=	16
0011 =                       DFERR_RETURN	=	17
AS65 Assembler for R6502 [1.42].                                     Page  258
-------------------------------- bank\bank0.s --------------------------------

0012 =                       DFERR_ABORT		=	18
0013 =                       DFERR_QUANTITY	=	19
0014 =                       DFERR_NOORG		=	20
                             
                             
                             
                             
                             
                             ; Error message table, each msg null terminated
f7cf :                       df_tk_errortab
f7cf : 4f6b00                	db	"Ok", 0
f7d2 : 53796e74617800        	db	"Syntax", 0
f7d9 : 5479706500            	db	"Type", 0
f7de : 52652d64696d00        	db	"Re-dim", 0
f7e5 : 4e6f2072657065..      	db	"No repeat", 0
f7ef : 4e6f206465666e00      	db	"No defn", 0
f7f7 : 5061726d00            	db	"Parm", 0
f7fc : 456e64656400          	db	"Ended", 0
f802 : 4e6f20656e6469..      	db	"No endif", 0
f80b : 4e6f20696600          	db	"No if", 0
f811 : 4e6f20666f7200        	db	"No for", 0
f818 : 4e6f7420666f75..      	db	"Not found", 0
f822 : 546f6f206c6f6e..      	db	"Too long", 0
f82b : 427265616b00          	db	"Break", 0
f831 : 4e6f206461746100      	db	"No data", 0
f839 : 4e6f207768696c..      	db	"No while", 0
f842 : 4e6f206c696e6500      	db	"No line", 0
f84a : 4e6f2072657475..      	db	"No return ", 0
f855 : 41626f7274656400      	db	"Aborted", 0
f85d : 426f756e647300        	db	"Bounds", 0
f864 : 4e6f206f726700        	db	"No org", 0
f86b : 00                    	db	0
                             
f86c :                       df_tk_error_inline
f86c : 20696e206c696e..      	db	" in line ", 0
f876 :                       df_tk_error_atpos
f876 : 20706f732000          	db	" pos ", 0
f87c :                       df_tk_error_error
f87c : 206572726f7200        	db	" error", 0
                             
                             ;****************************************
                             ;* df_trap_error
                             ;* Show an error message
                             ;* errno is error number
                             ;* currlin = Line number
                             ;* exeoff = offset
                             ;* at the end jump to program editor
                             ;****************************************
f883 :                       df_trap_error
                             	; reset SP
f883 : a65f             [ 3] 	ldx df_sp
f885 : 9a               [ 2] 	txs
                             	; set IO back to normal
f886 : 201ec5           [ 6] 	jsr init_via0
f889 : 201fc4           [ 6] 	jsr io_set_default
f88c : 58               [ 2] 	cli
                             
f88d : a9cf             [ 2] 	lda #lo(df_tk_errortab)
f88f : 85a1             [ 3] 	sta df_tmpptra
f891 : a9f7             [ 2] 	lda #hi(df_tk_errortab)
f893 : 85a2             [ 3] 	sta df_tmpptra+1
f895 : a65d             [ 3] 	ldx errno				; 0 or >=128 goes to monitor
AS65 Assembler for R6502 [1.42].                                     Page  259
-------------------------------- bank\bank0.s --------------------------------

f897 : f004             [ 3] 	beq df_trap_go_monitor
f899 : 3002             [ 3] 	bmi df_trap_go_monitor
f89b : 1003             [ 3] 	bpl df_trap_normal
f89d :                       df_trap_go_monitor
f89d : 4c21f9           [ 3] 	jmp df_trap_monitor
f8a0 :                       df_trap_normal
f8a0 : a000             [ 2] 	ldy #0
f8a2 :                       df_show_err_find
f8a2 : e000             [ 2] 	cpx #0
f8a4 : f018             [ 3] 	beq df_show_err_found
                             	; If on a zero, then error table exhausted
                             	; so drop in to the monitor
f8a6 : b1a1             [ 5] 	lda (df_tmpptra),y
f8a8 : f077             [ 4] 	beq df_trap_monitor
f8aa :                       df_show_err_skip
                             	_incZPWord df_tmpptra
                             
f8b0 : b1a1             [ 5] 	lda (df_tmpptra),y
f8b2 : d0f6             [ 3] 	bne df_show_err_skip
                             	_incZPWord df_tmpptra
                             
f8ba : ca               [ 2] 	dex
f8bb : 4ca2f8           [ 3] 	jmp df_show_err_find
f8be :                       df_show_err_found
f8be : a6a1             [ 3] 	ldx df_tmpptra
f8c0 : a5a2             [ 3] 	lda df_tmpptra+1
f8c2 : 2099c4           [ 6] 	jsr io_print_line
f8c5 : a27c             [ 2] 	ldx #lo(df_tk_error_error)
f8c7 : a9f8             [ 2] 	lda #hi(df_tk_error_error)
f8c9 : 2099c4           [ 6] 	jsr io_print_line
                             	; if line number <> 0 then print it
f8cc : a001             [ 2] 	ldy #DFTK_LINNUM
f8ce : b186             [ 5] 	lda (df_currlin),y
f8d0 : aa               [ 2] 	tax
f8d1 : c8               [ 2] 	iny
f8d2 : b186             [ 5] 	lda (df_currlin),y
f8d4 : c900             [ 2] 	cmp #0x00
f8d6 : d006             [ 3] 	bne df_show_err_linnum
f8d8 : e000             [ 2] 	cpx #0x00
f8da : d002             [ 3] 	bne df_show_err_linnum
f8dc : f019             [ 3] 	beq df_show_err_fin
f8de :                       df_show_err_linnum
                             	_println df_tk_error_inline
                             
f8f3 : 18               [ 2] 	clc
f8f4 : 20f4c3           [ 6] 	jsr print_a_to_d
f8f7 :                       df_show_err_fin
f8f7 : a488             [ 3] 	ldy df_exeoff
f8f9 : f01d             [ 4] 	beq df_show_err_done
                             	_println df_tk_error_atpos
                             
f910 : 98               [ 2] 	tya
f911 : aa               [ 2] 	tax
f912 : a900             [ 2] 	lda #0
f914 : 18               [ 2] 	clc
f915 : 20f4c3           [ 6] 	jsr print_a_to_d
f918 :                       df_show_err_done
f918 : a90d             [ 2] 	lda #UTF_CR
f91a : 204bc4           [ 6] 	jsr io_put_ch
f91d : 18               [ 2] 	clc
                             	; back to editor
f91e : 4c70df           [ 3] 	jmp df_pg_dflat
AS65 Assembler for R6502 [1.42].                                     Page  260
-------------------------------- bank\bank0.s --------------------------------

                             
                             
                             ; For unknown errors, jump to monitor
f921 :                       df_trap_monitor
                             	; Print PC
                             	_println_low df_msg_pc
                             
f928 : a563             [ 3] 	lda df_brkpc+1
f92a : 2074c1           [ 6] 	jsr utilPrintA
f92d : a562             [ 3] 	lda df_brkpc
f92f : 2074c1           [ 6] 	jsr utilPrintA
f932 : 2064c1           [ 6] 	jsr utilPrintSPC
                             
                             	; Print A
                             	_println_low df_msg_acc
                             
f93c : a53d             [ 3] 	lda num_a
f93e : 2074c1           [ 6] 	jsr utilPrintA
f941 : 2064c1           [ 6] 	jsr utilPrintSPC
                             
                             	; Print X
                             	_println_low df_msg_xreg
                             
f94b : a53e             [ 3] 	lda num_a+1
f94d : 2074c1           [ 6] 	jsr utilPrintA
f950 : 2064c1           [ 6] 	jsr utilPrintSPC
                             
                             	; Print Y
                             	_println_low df_msg_yreg
                             
f95a : a53f             [ 3] 	lda num_a+2
f95c : 2074c1           [ 6] 	jsr utilPrintA
f95f : 206cc1           [ 6] 	jsr utilPrintCRLF
                             
f962 : 203fe8           [ 6] 	jsr df_rt_monitor
                             	; back to editor
f965 : 4c70df           [ 3] 	jmp df_pg_dflat
                             
f968 :                       df_msg_pc
f968 : 50433a00              	db "PC:\x0"
f96c :                       df_msg_acc
f96c : 413a00                	db "A:\x0"
f96f :                       df_msg_xreg
f96f : 583a00                	db "X:\x0"
f972 :                       df_msg_yreg
f972 : 593a00                	db "Y:\x0"
                             
                             	include	"dflat/asm.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  ASM.S
                             ;*  This is the main controller code file for the
                             ;*  This file includes all the required source fi
                             ;*	in addition to dflat.s
                             ;*
                             ;************************************************
AS65 Assembler for R6502 [1.42].                                     Page  261
-------------------------------- bank\bank0.s --------------------------------

                             
                             	; ROM code
                             	code
                             
f975 :                       mod_sz_asm_s
                             
                             	;	dflat.s is already included, so just the addit
                             	include "dflat/asm.i"
                             ;* Addressing modes - 15 in total, 16 with direct
                             ;*  0   Nothing
                             ;*	1 	Absolute			XXX <word>
                             ;*	2 	Absolute,X			XXX <word>,x
                             ;*	3 	Absolute,Y			XXX <word>,y
                             ;*	4	Zeropage			XXX	<byte>
                             ;*	5	Zeropage,X			XXX	<byte>,x
                             ;*	6	Zeropage,Y			XXX	<byte>,y
                             ;*	7	Indirect			XXX	(<byte>)
                             ;*	8	Indirect,X			XXX	(<byte>,x)
                             ;*	9	Indirect,Y			XXX	(<byte>),y
                             ;*	A	Absolute indirect	XXX	(<word>)
                             ;*	B	Absolute indirect,x	XXX	(<word>,x)
                             ;*	C	Immediate			XXX #<byte>
                             ;*	D	Accumulator			XXX (same as implied)
                             ;*	E	Implied				XXX
                             ;*	F	Relative			XXX	<byte>
                             ;*	10	Assembler directive	XXX .......
                             
0000 =                       AM_NONE		= 0
0001 =                       AM_ABS	 	= 1
0002 =                       AM_ABSX		= 2
0003 =                       AM_ABSY		= 3
0004 =                       AM_ZP		= 4
0005 =                       AM_ZPX		= 5
0006 =                       AM_ZPY		= 6
0007 =                       AM_ZPIND	= 7
0008 =                       AM_ZPINDX	= 8
0009 =                       AM_ZPINDY	= 9
000a =                       AM_ABSIND	= 10
000b =                       AM_ABSINDX	= 11
000c =                       AM_IMM		= 12
000d =                       AM_ACC		= 13
000d =                       AM_IMP		= AM_ACC
000f =                       AM_REL		= 15
0010 =                       AM_DIR		= 16
                             
                             
                             
                             	include "dflat/tkasm.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  ASM.S
                             ;*	Module that implements tokenisation of the ass
                             ;* 	The assembler is an extension to dflat, almos
                             ;*	almost a language within a language, as it has
                             ;*	own symbol tables to allow adding new keywords
                             ;*	running out of space in the main symtol table 
AS65 Assembler for R6502 [1.42].                                     Page  262
-------------------------------- bank\bank0.s --------------------------------

                             ;*	for normal 6502 asembler syntax which is at od
                             ;*	regular dflat.
                             ;*	Hence, this module has to do its own additiona
                             ;*	to tokenise the assembly.
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code  
                             
f975 :                       mod_sz_tkasm_s
                             
                             	; if didn't find regular keywords then try assen
f975 :                       df_tk_asm_parse_command
                             	; skip the white space after the dot
f975 : 202dd7           [ 6] 	jsr df_tk_skip_ws
                             	; find the assembler symbol
f978 : 20a3f9           [ 6] 	jsr df_tk_asm_matchtok
                             	; if not found then must be a label assignment
f97b : b021             [ 3] 	bcs df_tk_asm_parse_command_symbol
                             	; Get the assembler symbol and put the token
f97d : a583             [ 3] 	lda df_symoff
                             	; Set the MSB
f97f : 0980             [ 2] 	ora #0x80
f981 : 20d7d6           [ 6] 	jsr df_tk_put_tok
                             	; check the first addressing mode code
                             	; remember to jump over the offset byte
f984 : a001             [ 2] 	ldy #1
f986 : b181             [ 5] 	lda (df_symtab),y
                             	; Directive?
f988 : c910             [ 2] 	cmp #AM_DIR
f98a : d00c             [ 3] 	bne df_tk_asm_mnemonic
                             	; if directive then process it
f98c : a583             [ 3] 	lda df_symoff
f98e : 20faf9           [ 6] 	jsr df_tk_asm_exec_parser
f991 : b004             [ 3] 	bcs df_tk_asm_parse_command_err
                             	; [1] ignore white space but keep it
f993 : 202dd7           [ 6] 	jsr df_tk_skip_ws
                             	; No error in parsing this command
f996 : 18               [ 2] 	clc
f997 :                       df_tk_asm_parse_command_err
f997 : 60               [ 6] 	rts
f998 :                       df_tk_asm_mnemonic
                             	; for all nmemonics, work out the addressing mod
f998 : 2009fa           [ 6] 	jsr df_tk_asm_addr_mode
f99b : b0fa             [ 3] 	bcs df_tk_asm_parse_command_err
f99d : 60               [ 6] 	rts
f99e :                       df_tk_asm_parse_command_symbol
                             	; No mask
f99e : a900             [ 2] 	lda #0
f9a0 : 4c15d8           [ 3] 	jmp df_tk_var
                             
                             
                             ;****************************************
                             ;* df_tk_asm_matchtok
                             ;* Try and find a token match against the table d
                             ;* Input:
                             ;*			Current df_linbuff and df_linoff
                             ;* Return: 	CC = No Error, CS = Error
                             ;*			df_linoff points to next char if CC else unc
                             ;****************************************
f9a3 :                       df_tk_asm_matchtok
AS65 Assembler for R6502 [1.42].                                     Page  263
-------------------------------- bank\bank0.s --------------------------------

                             	; Start at token symbols beginning
f9a3 : a9a5             [ 2] 	lda #lo(df_asm_tokensyms)
f9a5 : 8581             [ 3] 	sta df_symtab
f9a7 : a9fd             [ 2] 	lda #hi(df_asm_tokensyms)
f9a9 : 8582             [ 3] 	sta df_symtab+1
f9ab : a900             [ 2] 	lda #0
f9ad : 8583             [ 3] 	sta df_symoff
f9af : a200             [ 2] 	ldx #0
f9b1 :                       df_tk_asm_checknexttok
                             	; From the line buffer current pointer
                             	; Check for a token match
f9b1 : a47c             [ 3] 	ldy df_linoff
f9b3 :                       df_tk_asm_checktokch
                             	; Get symtable char
f9b3 : a181             [ 6] 	lda (df_symtab,x)
                             	; if less than ascii ' ' then reached end of
                             	; this symbol and everything matched so found!
f9b5 : c920             [ 2] 	cmp #' '
f9b7 : 9033             [ 3] 	bcc df_tk_asm_symfound
                             	; Else compare with current line buffer char
f9b9 : d90004           [ 4] 	cmp df_linbuff,y
                             	; If chars not match then this symbol fails
f9bc : d00a             [ 3] 	bne df_tk_asm_symnomatch
                             	; else more chars to match
                             	; so increment line buffer pointers
                             	_incZPWord df_symtab
                             
f9c4 : c8               [ 2] 	iny
f9c5 : 4cb3f9           [ 3] 	jmp df_tk_asm_checktokch
f9c8 :                       df_tk_asm_symnomatch
                             	; Increment symbol counter to next symbol
f9c8 : e683             [ 5] 	inc df_symoff
f9ca :                       df_tk_asm_symnextentry
f9ca : a181             [ 6] 	lda (df_symtab,x)
                             	; End of symbol is < ' '
f9cc : c920             [ 2] 	cmp #' '
f9ce : 9009             [ 3] 	bcc  df_tk_asm_foundsymend
                             	_incZPWord df_symtab
                             
f9d6 : 4ccaf9           [ 3] 	jmp df_tk_asm_symnextentry
f9d9 :                       df_tk_asm_foundsymend
                             	; Now at the offset to jump over addressing
                             	; mode and opcode values. Add offset to ptr
                             	; remember than C is clear and A has offset
                             	; set C so always jump over the offset
f9d9 : 38               [ 2] 	sec
f9da : 6581             [ 3] 	adc df_symtab
f9dc : 8581             [ 3] 	sta df_symtab
f9de : a582             [ 3] 	lda df_symtab+1
f9e0 : 6900             [ 2] 	adc #0
f9e2 : 8582             [ 3] 	sta df_symtab+1
                             	; If next char is not zero then
                             	; try and match with line buffer
f9e4 : a181             [ 6] 	lda (df_symtab,x)
f9e6 : d0c9             [ 3] 	bne df_tk_asm_checknexttok
                             	; else symbol table exhausted
                             	; so no match found
                             	; Zero symbol counter
f9e8 : 8583             [ 3] 	sta df_symoff		; Relies on A=0
                             	; Set C to indicate error (no match)
f9ea : 38               [ 2] 	sec
f9eb : 60               [ 6] 	rts
AS65 Assembler for R6502 [1.42].                                     Page  264
-------------------------------- bank\bank0.s --------------------------------

f9ec :                       df_tk_asm_symfound
                             	; Full match with keyword in symtable but
                             	; check the next buffer char is not alphanum
                             	; as this could be part of a symbol
                             	; Point to next buffer char in any case
                             	; y already points to char after keyword
f9ec : b90004           [ 4] 	lda df_linbuff,y
                             	; if it is an alphanum then
f9ef : 2021d7           [ 6] 	jsr df_tk_isalphanum
                             	; do not count as a match
f9f2 : b0d4             [ 3] 	bcs df_tk_asm_symnomatch
                             	; Save line buffer pointer (points to next char)
                             	; Clear C to indicate success (match)
f9f4 : 847c             [ 3] 	sty df_linoff
f9f6 : a583             [ 3] 	lda df_symoff
                             	; df_symtab points to the offset
f9f8 :                       df_tk_asm_addr_mode_ok
f9f8 : 18               [ 2] 	clc
f9f9 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* df_tk_asm_exec_parser
                             ;* Execute parse routine for this statement
                             ;* Input: a is the token found
                             ;* Return: CC = Parsed ok, CS = Error
                             ;****************************************
f9fa :                       df_tk_asm_exec_parser
f9fa : 0a               [ 2] 	asl a
f9fb : aa               [ 2] 	tax
f9fc : bdd1ff           [ 4] 	lda df_tk_asm_tokenjmp,x
f9ff : 85a1             [ 3] 	sta df_tmpptra
fa01 : bdd2ff           [ 4] 	lda df_tk_asm_tokenjmp+1,x
fa04 : 85a2             [ 3] 	sta df_tmpptra+1
fa06 : 6ca100           [ 6] 	jmp (df_tmpptra)
                             
                             
                             ;****************************************
                             ;* df_tk_asm_addr_mode
                             ;* Tokenise the addressing mode
                             ;* Input: a is the token found
                             ;* Return: CC = Parsed ok, CS = Error
                             ;****************************************
fa09 :                       df_tk_asm_addr_mode
fa09 : 202dd7           [ 6] 	jsr df_tk_skip_ws		;Skip whitespace
fa0c : c900             [ 2] 	cmp #0					;End of line?
fa0e : f0e8             [ 4] 	beq df_tk_asm_addr_mode_ok
fa10 : c93a             [ 2] 	cmp #':'				;End of statement?
fa12 : f0e4             [ 4] 	beq df_tk_asm_addr_mode_ok
fa14 : a923             [ 2] 	lda #'#'				; Check for immediate
fa16 : 205fd7           [ 6] 	jsr df_tk_expect_tok
fa19 : b003             [ 3] 	bcs df_tk_asm_addr_mode_1
fa1b : 4c3efa           [ 3] 	jmp df_tk_imm		; Process immediate
fa1e :                       df_tk_asm_addr_mode_1
fa1e : a928             [ 2] 	lda #'('				; One of indirect modes?
fa20 : 205fd7           [ 6] 	jsr df_tk_expect_tok
fa23 : b003             [ 3] 	bcs df_tk_asm_addr_mode_2
fa25 : 4c41fa           [ 3] 	jmp df_tk_indirect
fa28 :                       df_tk_asm_addr_mode_2
                             	; here just a regular address
                             	; Just one expression expected
fa28 : 2051d9           [ 6] 	jsr df_tk_expression
                             	; Is there a comma after the expression
AS65 Assembler for R6502 [1.42].                                     Page  265
-------------------------------- bank\bank0.s --------------------------------

fa2b : a92c             [ 2] 	lda #','
fa2d : 205fd7           [ 6] 	jsr df_tk_expect_tok
fa30 : b0c6             [ 4] 	bcs df_tk_asm_addr_mode_ok
                             	; must be x or y
fa32 : a978             [ 2] 	lda #'x'
fa34 : 205fd7           [ 6] 	jsr df_tk_expect_tok
fa37 : 90bf             [ 4] 	bcc df_tk_asm_addr_mode_ok
                             	; got to here, must be y
fa39 : a979             [ 2] 	lda #'y'
fa3b : 4c6bd7           [ 3] 	jmp df_tk_expect_tok_err
                             	
                             	
                             ;* Tokenise immediate addressing mode	
fa3e :                       df_tk_imm
                             	; Just one expression expected
fa3e : 4c51d9           [ 3] 	jmp df_tk_expression
                             	
                             ;* Tokenise indirect
fa41 :                       df_tk_indirect
                             	; Just one expression expected
fa41 : 2051d9           [ 6] 	jsr df_tk_expression
                             	; Is there a comma after the expression
fa44 : a92c             [ 2] 	lda #','
fa46 : 205fd7           [ 6] 	jsr df_tk_expect_tok
                             	; if not then might be indirect Y
fa49 : b00a             [ 3] 	bcs df_tk_indirect_y
                             	; Else must have be indirect "x)"
fa4b : a978             [ 2] 	lda #'x'
fa4d : 206bd7           [ 6] 	jsr df_tk_expect_tok_err
fa50 : a929             [ 2] 	lda #')'
fa52 : 4c6bd7           [ 3] 	jmp df_tk_expect_tok_err
                             	
fa55 :                       df_tk_indirect_y
                             	; Definitely has a close bracket
fa55 : a929             [ 2] 	lda #')'
fa57 : 206bd7           [ 6] 	jsr df_tk_expect_tok_err
                             	; Is there a comma after the expression
fa5a : a92c             [ 2] 	lda #','
fa5c : 205fd7           [ 6] 	jsr df_tk_expect_tok
fa5f : b005             [ 3] 	bcs df_tk_indirect_done
                             	; if comma then must be indirect y
fa61 : a979             [ 2] 	lda #'y'
fa63 : 4c6bd7           [ 3] 	jmp df_tk_expect_tok_err
                             
fa66 :                       df_tk_indirect_done
fa66 : 18               [ 2] 	clc
fa67 : 60               [ 6] 	rts
                             	
                             
                             	
                             
                             
                             ;************************************************
                             ;*           TOKENISATION SUBROUTINES
                             ;************************************************
                             
                             
                             ;* HANDLE DIRECTIVES
                             
                             ;* All tokenisation is part of regular toksub rou
                             
                             
AS65 Assembler for R6502 [1.42].                                     Page  266
-------------------------------- bank\bank0.s --------------------------------

                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
fa68 :                       mod_sz_tkasm_e
                             
                             
                             	include "dflat/rtasm.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  RTASM.S
                             ;*  Module that implements the runtime execution 
                             ;*  assembler.
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code  
                             
fa68 :                       mod_sz_rtasm_s
                             
fa68 :                       df_rt_asm_assemble
                             	; check if >=0x80 (directive or mnemonic)
fa68 : a488             [ 3] 	ldy df_exeoff
fa6a : b186             [ 5] 	lda (df_currlin),y
fa6c : c980             [ 2] 	cmp #0x80
fa6e : 9009             [ 3] 	bcc df_rt_asm_do_label
fa70 : 207dfa           [ 6] 	jsr df_rt_asm_command
fa73 : 2083fc           [ 6] 	jsr df_rt_asm_printCR
fa76 : 4c7cfa           [ 3] 	jmp df_rt_asm_assemble_done
fa79 :                       df_rt_asm_do_label
fa79 : 20a1fa           [ 6] 	jsr df_rt_asm_label
fa7c :                       df_rt_asm_assemble_done
                             	; any clean up here
AS65 Assembler for R6502 [1.42].                                     Page  267
-------------------------------- bank\bank0.s --------------------------------

fa7c : 60               [ 6] 	rts
                             
                             ; Jump to mnemonic or 
                             ; directive with index in A ignoring MSB
fa7d :                       df_rt_asm_command
fa7d : 297f             [ 2] 	and #0x7f
fa7f : 48               [ 3] 	pha
fa80 : aa               [ 2] 	tax
                             	; Point to Xth symtable entry of addr modes and 
fa81 : 2053fd           [ 6] 	jsr df_rt_asm_skip_to_sym
                             
                             	; Get first addressing mode (ignoring offset byt
fa84 : a001             [ 2] 	ldy #1
fa86 : b181             [ 5] 	lda (df_symtab),y
                             	; is it a directive?
fa88 : c910             [ 2] 	cmp #AM_DIR
                             	; if directive
fa8a : f003             [ 3] 	beq df_rt_asm_dir
                             	; Else must be a normal mnemonic
fa8c : 4c6dfb           [ 3] 	jmp df_rt_asm_mnem
                             
                             ; Jump to the appropriate directive
fa8f :                       df_rt_asm_dir
                             	; Get the index and *2
                             	; to get jump vector
fa8f : 68               [ 4] 	pla
fa90 : 0a               [ 2] 	asl a
fa91 : aa               [ 2] 	tax
                             	; jump over directive code
fa92 : e688             [ 5] 	inc df_exeoff
                             	; jump to directive handler
fa94 : bddbff           [ 4] 	lda df_rt_asm_tokenjmp,x
fa97 : 85a1             [ 3] 	sta df_tmpptra
fa99 : bddcff           [ 4] 	lda df_rt_asm_tokenjmp+1,x
fa9c : 85a2             [ 3] 	sta df_tmpptra+1
fa9e : 6ca100           [ 6] 	jmp (df_tmpptra)
                             
                             ; Process label
                             ; Set the label to the PC
faa1 :                       df_rt_asm_label
                             	; Get the address of the variable in A,X
faa1 : 2065ed           [ 6] 	jsr df_rt_generate_lvar
faa4 : 869e             [ 3] 	stx df_asmoprnd
faa6 : 859f             [ 3] 	sta df_asmoprnd+1
                             	; Assign to value of PC
faa8 : a000             [ 2] 	ldy #0
faaa : a599             [ 3] 	lda df_asmpc
faac : 919e             [ 5] 	sta (df_asmoprnd),y
faae : a59a             [ 3] 	lda df_asmpc+1
fab0 : c8               [ 2] 	iny
fab1 : 919e             [ 5] 	sta (df_asmoprnd),y
fab3 : 60               [ 6] 	rts	
                             
                             ;* Set the code origin
fab4 :                       df_rt_asm_org
                             	; Get the address from expression
fab4 : 2030fd           [ 6] 	jsr df_rt_asm_get_operand
                             	; Put this in to PC
fab7 : a59e             [ 3] 	lda df_asmoprnd
fab9 : 8599             [ 3] 	sta df_asmpc
fabb : a59f             [ 3] 	lda df_asmoprnd+1
fabd : 859a             [ 3] 	sta df_asmpc+1
AS65 Assembler for R6502 [1.42].                                     Page  268
-------------------------------- bank\bank0.s --------------------------------

fabf : a903             [ 2] 	lda #3
fac1 : 85a0             [ 3] 	sta df_asmlen
fac3 : 2041fc           [ 6] 	jsr df_rt_asm_printPC
fac6 : 60               [ 6] 	rts
                             
                             ; Set the assembly option
                             ; Bit 0 set = Print code to console
                             ; But 1 set = Write code to memory
                             ; Be sure to run 2 non-write passes
                             ; before a write pass
                             ; First pass may result in ZP used a lot
                             ; Second pass resolves forward refs to ABS
                             ; Final write pass then stores the code
fac7 :                       df_rt_asm_opt
                             	; Get the value from expression
fac7 : 2030fd           [ 6] 	jsr df_rt_asm_get_operand
                             	; Put this in to OPT
faca : a59e             [ 3] 	lda df_asmoprnd
facc : 859b             [ 3] 	sta df_asmopt
face : 60               [ 6] 	rts
                             
                             ; dw and db handled here
                             ; keep going through comma separated
                             ; list and write bytes or words
                             ; string expansion also handled
facf :                       df_rt_asm_db
facf : a902             [ 2] 	lda #2
fad1 : 85a0             [ 3] 	sta df_asmlen
fad3 : d004             [ 3] 	bne df_rt_asm_db_start	; Relies on A<>0
fad5 :                       df_rt_asm_dw
fad5 : a903             [ 2] 	lda #3
fad7 : 85a0             [ 3] 	sta df_asmlen
fad9 :                       df_rt_asm_db_start
fad9 : 2041fc           [ 6] 	jsr df_rt_asm_printPC
fadc : 205efc           [ 6] 	jsr df_rt_asm_printSPC
fadf :                       df_rt_asm_data
fadf : 208ee0           [ 6] 	jsr df_rt_neval		; Evaluate expression
fae2 : 2060f7           [ 6] 	jsr df_ost_peekType	; What is the type
fae5 : c980             [ 2] 	cmp #0x80			; If string
fae7 : b00d             [ 3] 	bcs df_rt_asm_string
fae9 : 2066f7           [ 6] 	jsr df_ost_popInt	; else get number in A,X
faec : 869e             [ 3] 	stx df_asmoprnd		; store low value
faee : 859f             [ 3] 	sta df_asmoprnd+1	; store high value
faf0 : 201efb           [ 6] 	jsr df_rt_asm_data_write
faf3 : 4c13fb           [ 3] 	jmp df_rt_asm_data_next
faf6 :                       df_rt_asm_string
faf6 : 206ef7           [ 6] 	jsr df_ost_popPtr	; pop string pointer
faf9 : 86a1             [ 3] 	stx df_tmpptra		; save pointer to tmpa
fafb : 85a2             [ 3] 	sta df_tmpptra+1
fafd :                       df_rt_asm_string_ch
fafd : a000             [ 2] 	ldy #0
faff : b1a1             [ 5] 	lda (df_tmpptra),y	; Get string char, 0=done
fb01 : f010             [ 3] 	beq df_rt_asm_data_next
fb03 : 859e             [ 3] 	sta df_asmoprnd		; Save as operand
fb05 : 869f             [ 3] 	stx df_asmoprnd+1	; High is always zero
fb07 : 201efb           [ 6] 	jsr df_rt_asm_data_write
                             	_incZPWord df_tmpptra
                             
fb10 : 4cfdfa           [ 3] 	jmp df_rt_asm_string_ch
fb13 :                       df_rt_asm_data_next
fb13 : 209bed           [ 6] 	jsr df_rt_eos		; End?
fb16 : b005             [ 3] 	bcs df_rt_asm_data_done
AS65 Assembler for R6502 [1.42].                                     Page  269
-------------------------------- bank\bank0.s --------------------------------

fb18 : e688             [ 5] 	inc df_exeoff		; Jump over ','
fb1a : 4cdffa           [ 3] 	jmp df_rt_asm_data
fb1d :                       df_rt_asm_data_done
fb1d : 60               [ 6] 	rts	
                             
                             ; Write one db or dw value
                             ; Check for value too big for db
                             ; Advance PC by df_asmlen
fb1e :                       df_rt_asm_data_write
fb1e : 2068fc           [ 6] 	jsr df_rt_asm_printOPR
fb21 :                       df_rt_asm_data_write_skip1
fb21 : a902             [ 2] 	lda #2
fb23 : 259b             [ 3] 	and df_asmopt
fb25 : f015             [ 3] 	beq df_rt_asm_data_write_skip2
fb27 : a59e             [ 3] 	lda df_asmoprnd
fb29 : a000             [ 2] 	ldy #0
fb2b : 9199             [ 5] 	sta (df_asmpc),y
fb2d : c8               [ 2] 	iny
fb2e : a902             [ 2] 	lda #2
fb30 : c5a0             [ 3] 	cmp df_asmlen
fb32 : f004             [ 3] 	beq df_rt_asm_data_write_hi
fb34 : a59f             [ 3] 	lda df_asmoprnd+1
fb36 : d015             [ 3] 	bne df_rt_asm_data_write_err
fb38 :                       df_rt_asm_data_write_hi
fb38 : a59f             [ 3] 	lda df_asmoprnd+1
fb3a : 9199             [ 5] 	sta (df_asmpc),y
fb3c :                       df_rt_asm_data_write_skip2
fb3c : a5a0             [ 3] 	lda df_asmlen
fb3e : 38               [ 2] 	sec					; Add 1 less!
fb3f : e901             [ 2] 	sbc #1
fb41 : 18               [ 2] 	clc
fb42 : 6599             [ 3] 	adc df_asmpc
fb44 : 8599             [ 3] 	sta df_asmpc
fb46 : a59a             [ 3] 	lda df_asmpc+1
fb48 : 6900             [ 2] 	adc #0
fb4a : 859a             [ 3] 	sta df_asmpc+1
fb4c : 60               [ 6] 	rts
fb4d :                       df_rt_asm_data_write_err	
                             	SWBRK DFERR_QUANTITY
                             
                             	
                             	
fb4f :                       df_rt_asm_ds
fb4f : 2041fc           [ 6] 	jsr df_rt_asm_printPC
fb52 : 205efc           [ 6] 	jsr df_rt_asm_printSPC
                             	; Get the address from expression
fb55 : 2030fd           [ 6] 	jsr df_rt_asm_get_operand
                             	; ADD this in to PC
fb58 : 18               [ 2] 	clc
fb59 : a59e             [ 3] 	lda df_asmoprnd
fb5b : 6599             [ 3] 	adc df_asmpc
fb5d : 8599             [ 3] 	sta df_asmpc
fb5f : a59f             [ 3] 	lda df_asmoprnd+1
fb61 : 659a             [ 3] 	adc df_asmpc+1
fb63 : 859a             [ 3] 	sta df_asmpc+1
                             	; len=1 for printing
fb65 : a903             [ 2] 	lda #3
fb67 : 85a0             [ 3] 	sta df_asmlen
fb69 : 2068fc           [ 6] 	jsr df_rt_asm_printOPR
fb6c : 60               [ 6] 	rts
                             
                             
AS65 Assembler for R6502 [1.42].                                     Page  270
-------------------------------- bank\bank0.s --------------------------------

                             ; Process a normal assembler mnemonic
fb6d :                       df_rt_asm_mnem
fb6d : 68               [ 4] 	pla				; Throw away previous temp variable
                             	; jump over mnemonic code
fb6e : e688             [ 5] 	inc df_exeoff
                             	; work out the addressing mode and get operand
fb70 : 20b3fc           [ 6] 	jsr df_rt_asm_addrmode
                             
fb73 :                       df_rt_asm_mnem_try
fb73 : a59c             [ 3] 	lda df_asmadmd					; With the addressing mode
fb75 : 203bfd           [ 6] 	jsr df_rt_asm_find_addr_mode	; Find it for this 
fb78 : c900             [ 2] 	cmp #AM_NONE					; Exists?
fb7a : d014             [ 3] 	bne	df_rt_asm_mnem_chk			; If does then check it
fb7c :                       df_rt_asm_check_alt
fb7c : a69c             [ 3] 	ldx df_asmadmd					; Use ad mode as an index
fb7e : bd94fd           [ 4] 	lda df_asm_altaddrmode,x		; Else get alternate
fb81 : c900             [ 2] 	cmp #AM_NONE					; Is there an alternate?
fb83 : f02e             [ 3] 	beq df_rt_asm_mnem_err			; If no then error
fb85 : 203bfd           [ 6] 	jsr df_rt_asm_find_addr_mode	; Check does mode e
fb88 : c900             [ 2] 	cmp #AM_NONE					; this instruction
fb8a : f027             [ 3] 	beq df_rt_asm_mnem_err			; if no then error
fb8c : c59c             [ 3] 	cmp df_asmadmd					; Same as the original?
fb8e : f00e             [ 3] 	beq df_rt_asm_mnem_done			; if so then done
fb90 :                       df_rt_asm_mnem_chk
fb90 : 859c             [ 3] 	sta df_asmadmd					; This is the final mode
fb92 : aa               [ 2] 	tax								; Get the length
fb93 : bd83fd           [ 4] 	lda df_asm_length,x
fb96 : a69f             [ 3] 	ldx df_asmoprnd+1				; Is operand hi non-zero?
fb98 : f004             [ 3] 	beq df_rt_asm_mnem_done			; If zero then done
fb9a : c903             [ 2] 	cmp #3							; Else must be len 3?
fb9c : d0de             [ 3] 	bne df_rt_asm_check_alt			; Try an alternate
fb9e :                       df_rt_asm_mnem_done
fb9e : a69c             [ 3] 	ldx df_asmadmd					; Get the final mode index
fba0 : bd83fd           [ 4] 	lda df_asm_length,x				; Get the length
fba3 : 85a0             [ 3] 	sta df_asmlen
fba5 : a59c             [ 3] 	lda df_asmadmd					; Get the final mode
fba7 : 203bfd           [ 6] 	jsr df_rt_asm_find_addr_mode	; Get the Y index o
                             	; Ok now get the opcode
fbaa : c8               [ 2] 	iny
fbab : b181             [ 5] 	lda (df_symtab),y
fbad : 859d             [ 3] 	sta df_asmopcde
                             	; Now have all information to assemble
fbaf : 20b5fb           [ 6] 	jsr df_rt_asm_encode
                             	
fbb2 : 60               [ 6] 	rts
fbb3 :                       df_rt_asm_mnem_err
                             	SWBRK DFERR_SYNTAX
                             
                             	
                             ; Take assembler data and encode it
                             ; depending on the current option
                             ; Option 0 = No write
                             ; Option 1 = No write, Print
                             ; Option 2 = Write
                             ; Option 3 = Write, Print
fbb5 :                       df_rt_asm_encode
                             	; If relative then need to calculate offset
fbb5 : a59c             [ 3] 	lda df_asmadmd
fbb7 : c90f             [ 2] 	cmp #AM_REL
fbb9 : d036             [ 3] 	bne df_rt_asm_encode_skiprel
                             	; If high byte is 0 then do nothing
fbbb : a59f             [ 3] 	lda df_asmoprnd+1
AS65 Assembler for R6502 [1.42].                                     Page  271
-------------------------------- bank\bank0.s --------------------------------

fbbd : f032             [ 3] 	beq df_rt_asm_encode_skiprel
                             	; else calculate distance from PC
                             	; first take 2 off operand
fbbf : 38               [ 2] 	sec
fbc0 : a59e             [ 3] 	lda df_asmoprnd
fbc2 : e902             [ 2] 	sbc #2
fbc4 : 859e             [ 3] 	sta df_asmoprnd
fbc6 : a59f             [ 3] 	lda df_asmoprnd+1
fbc8 : e900             [ 2] 	sbc #0
fbca : 859f             [ 3] 	sta df_asmoprnd+1
                             	; now calculate current operand-PC
fbcc : 38               [ 2] 	sec
fbcd : a59e             [ 3] 	lda df_asmoprnd
fbcf : e599             [ 3] 	sbc df_asmpc
fbd1 : 859e             [ 3] 	sta df_asmoprnd
fbd3 : a59f             [ 3] 	lda df_asmoprnd+1
fbd5 : e59a             [ 3] 	sbc df_asmpc+1
                             	; put 0 in high operand storage
                             	; but A contains result of subtraction
                             	; so check that for out of range
fbd7 : a000             [ 2] 	ldy #0
fbd9 : 849f             [ 3] 	sty df_asmoprnd+1
                             	; detect too far; high byte is either 0 or 255
                             	; else it's an error
fbdb : c900             [ 2] 	cmp #0
fbdd : f00a             [ 3] 	beq df_rt_asm_encode_relpos
fbdf : c9ff             [ 2] 	cmp #0xff
fbe1 : d00a             [ 3] 	bne df_rt_asm_encode_relfar
                             	; if high is ff then low must be same -ve
fbe3 : a59e             [ 3] 	lda df_asmoprnd
fbe5 : 300a             [ 3] 	bmi df_rt_asm_encode_skiprel
                             	; else error
fbe7 : 1004             [ 3] 	bpl df_rt_asm_encode_relfar
fbe9 :                       df_rt_asm_encode_relpos
                             	; if high is 00 then low must be same +ve
fbe9 : a59e             [ 3] 	lda df_asmoprnd
fbeb : 1004             [ 3] 	bpl df_rt_asm_encode_skiprel
                             	; else error
fbed :                       df_rt_asm_encode_relfar
                             	; set to non-zero value
fbed : a9ff             [ 2] 	lda #0xff
fbef : 859f             [ 3] 	sta df_asmoprnd+1
fbf1 :                       df_rt_asm_encode_skiprel
                             	; Only write the code if bit 1=1
fbf1 : a902             [ 2] 	lda #0x02
fbf3 : 259b             [ 3] 	and df_asmopt
fbf5 : f028             [ 4] 	beq df_rt_asm_encode_print
fbf7 : a000             [ 2] 	ldy #0
fbf9 : a59d             [ 3] 	lda df_asmopcde
fbfb : 9199             [ 5] 	sta (df_asmpc),y
fbfd : a5a0             [ 3] 	lda df_asmlen
fbff : c901             [ 2] 	cmp #1						; No operand
fc01 : f01c             [ 3] 	beq df_rt_asm_encode_print
fc03 : c903             [ 2] 	cmp #3						; Word operand
fc05 : f00e             [ 3] 	beq df_rt_asm_encode_writeword
                             	; byte operand, high byte must be zero
fc07 : a59f             [ 3] 	lda df_asmoprnd+1
fc09 : f002             [ 3] 	beq df_rt_asm_encode_writebyte
                             	SWBRK DFERR_QUANTITY
                             
fc0d :                       df_rt_asm_encode_writebyte
fc0d : c8               [ 2] 	iny 
AS65 Assembler for R6502 [1.42].                                     Page  272
-------------------------------- bank\bank0.s --------------------------------

fc0e : a59e             [ 3] 	lda df_asmoprnd
fc10 : 9199             [ 5] 	sta (df_asmpc),y
fc12 : 4c1ffc           [ 3] 	jmp df_rt_asm_encode_print
fc15 :                       df_rt_asm_encode_writeword
fc15 : c8               [ 2] 	iny 
fc16 : a59e             [ 3] 	lda df_asmoprnd
fc18 : 9199             [ 5] 	sta (df_asmpc),y
fc1a : c8               [ 2] 	iny 
fc1b : a59f             [ 3] 	lda df_asmoprnd+1
fc1d : 9199             [ 5] 	sta (df_asmpc),y	
fc1f :                       df_rt_asm_encode_print
fc1f : 2031fc           [ 6] 	jsr df_rt_asm_print_mmen
                             	; advance pc
fc22 : 18               [ 2] 	clc
fc23 : a599             [ 3] 	lda df_asmpc
fc25 : 65a0             [ 3] 	adc df_asmlen
fc27 : 8599             [ 3] 	sta df_asmpc
fc29 : a59a             [ 3] 	lda df_asmpc+1
fc2b : 6900             [ 2] 	adc #0
fc2d : 859a             [ 3] 	sta df_asmpc+1
fc2f : 18               [ 2] 	clc
fc30 : 60               [ 6] 	rts
                             
                             
                             ; Print the full 1,2,3 byte instruction
                             ; depends on df_asmopt
fc31 :                       df_rt_asm_print_mmen
fc31 : 2041fc           [ 6] 	jsr df_rt_asm_printPC
fc34 : 205efc           [ 6] 	jsr df_rt_asm_printSPC
fc37 : 2052fc           [ 6] 	jsr df_rt_asm_printOPC
fc3a : 205efc           [ 6] 	jsr df_rt_asm_printSPC
fc3d : 2068fc           [ 6] 	jsr df_rt_asm_printOPR
fc40 :                       df_rt_asm_print_rts			; Hopefull subs can get her
fc40 : 60               [ 6] 	rts
                             
fc41 :                       df_rt_asm_printPC
                             	; Check the option bit 0 (Print)
fc41 : a901             [ 2] 	lda #0x01
fc43 : 259b             [ 3] 	and df_asmopt
fc45 : f0f9             [ 3] 	beq df_rt_asm_print_rts
                             	; Print current PC
fc47 : a59a             [ 3] 	lda df_asmpc+1
fc49 : 2074c1           [ 6] 	jsr utilPrintA
fc4c : a599             [ 3] 	lda df_asmpc
fc4e : 2074c1           [ 6] 	jsr utilPrintA
fc51 : 60               [ 6] 	rts
                             
fc52 :                       df_rt_asm_printOPC
                             	; Check the option bit 0 (Print)
fc52 : a901             [ 2] 	lda #0x01
fc54 : 259b             [ 3] 	and df_asmopt
fc56 : f0e8             [ 3] 	beq df_rt_asm_print_rts
fc58 : a59d             [ 3] 	lda df_asmopcde
fc5a : 2074c1           [ 6] 	jsr utilPrintA
fc5d : 60               [ 6] 	rts
                             
fc5e :                       df_rt_asm_printSPC
                             	; Check the option bit 0 (Print)
fc5e : a901             [ 2] 	lda #0x01
fc60 : 259b             [ 3] 	and df_asmopt
fc62 : f0dc             [ 3] 	beq df_rt_asm_print_rts
fc64 : 2064c1           [ 6] 	jsr utilPrintSPC
AS65 Assembler for R6502 [1.42].                                     Page  273
-------------------------------- bank\bank0.s --------------------------------

fc67 : 60               [ 6] 	rts
                             	
                             	
fc68 :                       df_rt_asm_printOPR
                             	; Check the option bit 0 (Print)
fc68 : a901             [ 2] 	lda #0x01
fc6a : 259b             [ 3] 	and df_asmopt
fc6c : f0d2             [ 3] 	beq df_rt_asm_print_rts	
fc6e : a5a0             [ 3] 	lda df_asmlen				; check how may operand bytes
fc70 : c901             [ 2] 	cmp #1						; if only opcode, done
fc72 : f0cc             [ 3] 	beq df_rt_asm_print_rts	
fc74 : c902             [ 2] 	cmp #2
fc76 : f005             [ 3] 	beq df_rt_asm_printOPR_1	; if only 2 do low byte
fc78 : a59f             [ 3] 	lda df_asmoprnd+1
fc7a : 2074c1           [ 6] 	jsr utilPrintA
fc7d :                       df_rt_asm_printOPR_1
fc7d : a59e             [ 3] 	lda df_asmoprnd
fc7f : 2074c1           [ 6] 	jsr utilPrintA
fc82 : 60               [ 6] 	rts
                             
fc83 :                       df_rt_asm_printCR
                             	; Check the option bit 0 (Print)
fc83 : a901             [ 2] 	lda #0x01
fc85 : 259b             [ 3] 	and df_asmopt
fc87 : f0b7             [ 3] 	beq df_rt_asm_print_rts
fc89 : 206cc1           [ 6] 	jsr utilPrintCRLF
fc8c : 60               [ 6] 	rts
                             
fc8d :                       df_rt_asm_printCH
fc8d : 8538             [ 3] 	sta tmp_d
                             	; Check the option bit 0 (Print)
fc8f : a901             [ 2] 	lda #0x01
fc91 : 259b             [ 3] 	and df_asmopt
fc93 : f0ab             [ 3] 	beq df_rt_asm_print_rts
fc95 : a538             [ 3] 	lda tmp_d
fc97 : 4c4bc4           [ 3] 	jmp io_put_ch
fc9a : 60               [ 6] 	rts
                             
                             ; Print an entire line, but save df_exeoff
fc9b :                       df_rt_asm_printline
                             	; Check the option bit 0 (Print)
fc9b : a901             [ 2] 	lda #0x01
fc9d : 259b             [ 3] 	and df_asmopt
fc9f : f09f             [ 3] 	beq df_rt_asm_print_rts
fca1 : a588             [ 3] 	lda df_exeoff
fca3 : 48               [ 3] 	pha
                             	; use df_tmpptra
                             	_cpyZPWord df_currlin, df_tmpptra
                             
fcac : 2015ef           [ 6] 	jsr df_rt_list_line_only
fcaf : 68               [ 4] 	pla
fcb0 : 8588             [ 3] 	sta df_exeoff
fcb2 : 60               [ 6] 	rts
                             
                             
                             ; Calculate the addressing mode
                             ; Populate the operand as needed
                             ; A and df_asmadmd contain Addressing Mode
fcb3 :                       df_rt_asm_addrmode	
                             	; Store nothing in address mode
fcb3 : a900             [ 2] 	lda #AM_NONE
fcb5 : 859c             [ 3] 	sta df_asmadmd
AS65 Assembler for R6502 [1.42].                                     Page  274
-------------------------------- bank\bank0.s --------------------------------

                             	; zero out the operand
fcb7 : a900             [ 2] 	lda #0
fcb9 : 859e             [ 3] 	sta df_asmoprnd
fcbb : 859f             [ 3] 	sta df_asmoprnd+1
                             	; jump over whitespace
fcbd : 204ee5           [ 6] 	jsr df_rt_skip_ws
fcc0 : 209bed           [ 6] 	jsr df_rt_eos			; End of statement?
fcc3 : b00a             [ 3] 	bcs df_rt_asm_AM_IMP
                             	; Check what it is
fcc5 : c923             [ 2] 	cmp #'#'				; Immediate?
fcc7 : f034             [ 3] 	beq df_rt_asm_AM_IMM
fcc9 : c928             [ 2] 	cmp #'('				; Indirect something?
fccb : f03a             [ 4] 	beq df_rt_asm_AM_INDIRECT
                             	; Must be ABS,ZP or REL
fccd : d005             [ 3] 	bne df_rt_asm_ABSREL
                             ; Process IMP/ACC
fccf :                       df_rt_asm_AM_IMP
fccf : a90d             [ 2] 	lda #AM_IMP
fcd1 : 859c             [ 3] 	sta df_asmadmd
fcd3 : 60               [ 6] 	rts
                             ; Process ABS or REL
fcd4 :                       df_rt_asm_ABSREL	
                             	; Evaluate operand
fcd4 : 2030fd           [ 6] 	jsr df_rt_asm_get_operand
fcd7 : 209bed           [ 6] 	jsr df_rt_eos			; End of statement?
fcda : b00f             [ 3] 	bcs df_rt_asm_AM_ABS
fcdc : c8               [ 2] 	iny						; Jump over ","
fcdd : b186             [ 5] 	lda (df_currlin),y		; Load X or Y
fcdf : c8               [ 2] 	iny						; Jump over index reg
fce0 : 8588             [ 3] 	sta df_exeoff			; Save exe offset
fce2 : c978             [ 2] 	cmp #'x'				; Indirect X?
fce4 : f012             [ 3] 	beq df_rt_asm_AM_ABSX
                             ; Process ABSY
fce6 :                       df_rt_asm_AM_ABSY
fce6 : a906             [ 2] 	lda #AM_ZPY				; Go for smallest modes
fce8 : 859c             [ 3] 	sta df_asmadmd
fcea : 60               [ 6] 	rts
                             ; Process what looks like pure ABS, could be REL
fceb :                       df_rt_asm_AM_ABS
fceb : a001             [ 2] 	ldy #1					; Check first addressing mode
fced : b181             [ 5] 	lda (df_symtab),y
fcef : c90f             [ 2] 	cmp #AM_REL
fcf1 : f002             [ 3] 	beq df_rt_asm_AM_REL
fcf3 : a904             [ 2] 	lda #AM_ZP				; Go for smallest modes
fcf5 :                       df_rt_asm_AM_REL
fcf5 : 859c             [ 3] 	sta df_asmadmd
fcf7 : 60               [ 6] 	rts
                             ; Process ABSX
fcf8 :                       df_rt_asm_AM_ABSX
fcf8 : a905             [ 2] 	lda #AM_ZPX				; Go for smallest modes
fcfa : 859c             [ 3] 	sta df_asmadmd
fcfc : 60               [ 6] 	rts
                             ; Process Immediate
fcfd :                       df_rt_asm_AM_IMM
                             	; skip over #
fcfd : e688             [ 5] 	inc df_exeoff
                             	; Get operand
fcff : 2030fd           [ 6] 	jsr df_rt_asm_get_operand
                             	; Mark as immediate
fd02 : a90c             [ 2] 	lda #AM_IMM
fd04 : 859c             [ 3] 	sta df_asmadmd
fd06 : 60               [ 6] 	rts
AS65 Assembler for R6502 [1.42].                                     Page  275
-------------------------------- bank\bank0.s --------------------------------

                             ; Process indirect
fd07 :                       df_rt_asm_AM_INDIRECT
                             	; skip over (
fd07 : e688             [ 5] 	inc df_exeoff
                             	; Calculate the operand
fd09 : 2030fd           [ 6] 	jsr df_rt_asm_get_operand
                             	; what is next char?
fd0c : a488             [ 3] 	ldy df_exeoff
fd0e : b186             [ 5] 	lda (df_currlin),y
fd10 : c929             [ 2] 	cmp #')'			; Could be IND or INDY
fd12 : f009             [ 3] 	beq df_rt_asm_AM_ZPINDORY
                             	; else must be INDX
                             	; skip 'x)'
fd14 : c8               [ 2] 	iny
fd15 : c8               [ 2] 	iny
fd16 : 8488             [ 3] 	sty df_exeoff
fd18 : a908             [ 2] 	lda #AM_ZPINDX
fd1a : 859c             [ 3] 	sta df_asmadmd
fd1c : 60               [ 6] 	rts
                             ; Pure indirect mode found
fd1d :                       df_rt_asm_AM_ZPINDORY
fd1d : a907             [ 2] 	lda #AM_ZPIND			; Assume ZPIND
fd1f : c8               [ 2] 	iny
fd20 : 8488             [ 3] 	sty df_exeoff
                             	; if at end of line/statement then pure indirect
fd22 : 209bed           [ 6] 	jsr df_rt_eos			; End of statement?
fd25 : b006             [ 3] 	bcs df_rt_asm_AM_ZPIND
                             	; else must be INDY
fd27 : a909             [ 2] 	lda #AM_ZPINDY
                             	; skip ',Y'
fd29 : c8               [ 2] 	iny
fd2a : c8               [ 2] 	iny
fd2b : 8488             [ 3] 	sty df_exeoff
fd2d :                       df_rt_asm_AM_ZPIND
fd2d : 859c             [ 3] 	sta df_asmadmd
fd2f : 60               [ 6] 	rts
                             
                             ; Get and save the operand
                             ; df_asmoprnd contains the result
fd30 :                       df_rt_asm_get_operand
                             	; evaluate
fd30 : 208ee0           [ 6] 	jsr df_rt_neval
                             	; Get the parameter from stack
fd33 : 2066f7           [ 6] 	jsr df_ost_popInt
                             	; put in the operand
fd36 : 869e             [ 3] 	stx df_asmoprnd
fd38 : 859f             [ 3] 	sta df_asmoprnd+1
fd3a : 60               [ 6] 	rts
                             	
                             ; From current symtab entry, find addressing
                             ; mode in A.  AM_NONE=Not found, Y=index
fd3b :                       df_rt_asm_find_addr_mode
                             	; save A in tmp
fd3b : 8538             [ 3] 	sta tmp_d
                             	; Start first entry (1) - 2 = 0xff
fd3d : a0ff             [ 2] 	ldy #0xff
fd3f : a200             [ 2] 	ldx #0
fd41 :                       df_rt_asm_find_addr_mode_loop
                             	; next entry
fd41 : c8               [ 2] 	iny
fd42 : c8               [ 2] 	iny
                             	; if current index > num entries then error
AS65 Assembler for R6502 [1.42].                                     Page  276
-------------------------------- bank\bank0.s --------------------------------

fd43 : 98               [ 2] 	tya
fd44 : 38               [ 2] 	sec
fd45 : e181             [ 6] 	sbc (df_symtab,x)
fd47 : b007             [ 3] 	bcs df_rt_asm_find_addr_mode_err
                             	; is symtab addressing mode what we want?
fd49 : b181             [ 5] 	lda (df_symtab),y
fd4b : c538             [ 3] 	cmp tmp_d
fd4d : d0f2             [ 3] 	bne df_rt_asm_find_addr_mode_loop
                             	; done A=mode, y=index in to df_symtab
fd4f : 60               [ 6] 	rts
fd50 :                       df_rt_asm_find_addr_mode_err
fd50 : a900             [ 2] 	lda #AM_NONE
fd52 : 60               [ 6] 	rts
                             
                             
                             ; Skip X amount of symbols in table
                             ; A contains how many addr mode and op code bytes
                             ; df_symtab points to offset byte
fd53 :                       df_rt_asm_skip_to_sym
fd53 : e8               [ 2] 	inx				; so done when X=0
                             	; Start at token symbols beginning
fd54 : a9a5             [ 2] 	lda #lo(df_asm_tokensyms)
fd56 : 8581             [ 3] 	sta df_symtab
fd58 : a9fd             [ 2] 	lda #hi(df_asm_tokensyms)
fd5a : 8582             [ 3] 	sta df_symtab+1
fd5c : a900             [ 2] 	lda #0
fd5e : 8583             [ 3] 	sta df_symoff
fd60 : a000             [ 2] 	ldy #0
fd62 :                       df_rt_asm_skip_to_sym_next
                             	; Get symtable char
fd62 : b181             [ 5] 	lda (df_symtab),y
                             	; if < ' ' then jumped over symbol chars
fd64 : c920             [ 2] 	cmp #' '
fd66 : 9009             [ 3] 	bcc df_rt_asm_skip_to_sym_end
                             	;else next smy tab char
                             	_incZPWord df_symtab
                             
fd6e : 4c62fd           [ 3] 	jmp df_rt_asm_skip_to_sym_next
                             	; Found end of symbol
fd71 :                       df_rt_asm_skip_to_sym_end
                             	;if done then return
fd71 : ca               [ 2] 	dex
fd72 : f00e             [ 3] 	beq df_rt_asm_skip_to_sym_done
                             	;jump over addr and op code by A bytes
fd74 : 38               [ 2] 	sec
fd75 : 6581             [ 3] 	adc df_symtab
fd77 : 8581             [ 3] 	sta df_symtab
fd79 : a582             [ 3] 	lda df_symtab+1
fd7b : 6900             [ 2] 	adc #0
fd7d : 8582             [ 3] 	sta df_symtab+1
fd7f : 4c62fd           [ 3] 	jmp df_rt_asm_skip_to_sym_next
                             	
fd82 :                       df_rt_asm_skip_to_sym_done
fd82 : 60               [ 6] 	rts
                             
fd83 :                       mod_sz_rtasm_e
                             
                             
                             	include "dflat/asmsymtab.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
AS65 Assembler for R6502 [1.42].                                     Page  277
-------------------------------- bank\bank0.s --------------------------------

                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  ASMSYMTAB.S
                             ;*	Mainly this contains the symbol table for asse
                             ;*	mnemonics but also meta data like what address
                             ;*	and the length of opcodes.
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code  
                             
                             	;* Length of each addressing mode
                             	;* ORDER significant!
fd83 :                       df_asm_length
fd83 : 00030303020202..      	db	0,3,3,3,2,2,2,2,2,2,3,3,2,1,1,2,0
                             
                             	; Always try for lowest addressing mode, but
                             	; this table maps to alternative
fd94 :                       df_asm_altaddrmode
fd94 : 00                    	db AM_NONE		;AM_NONE	= 0
fd95 : 00                    	db AM_NONE		;AM_ABS	 	= 1
fd96 : 00                    	db AM_NONE		;AM_ABSX	= 2
fd97 : 00                    	db AM_NONE		;AM_ABSY	= 3
fd98 : 01                    	db AM_ABS		;AM_ZP		= 4
fd99 : 02                    	db AM_ABSX		;AM_ZPX		= 5
fd9a : 03                    	db AM_ABSY		;AM_ZPY		= 6
fd9b : 0a                    	db AM_ABSIND	;AM_ZPIND	= 7
fd9c : 0b                    	db AM_ABSINDX	;AM_ZPINDX	= 8
fd9d : 09                    	db AM_ZPINDY	;AM_ZPINDY	= 9
fd9e : 00                    	db AM_NONE		;AM_ABSIND	= 10
fd9f : 00                    	db AM_NONE		;AM_ABSINDX	= 11
fda0 : 00                    	db AM_NONE		;AM_IMM		= 12
fda1 : 00                    	db AM_NONE		;AM_ACC		= 13
fda2 : 00                    	db AM_NONE		;AM_IMP		= AM_ACC
fda3 : 0f                    	db AM_REL		;AM_REL		= 15
fda4 : 00                    	db AM_NONE		;AM_DIR		= 16
                             
                             
                             	;*	Mnemonic/	How many addressing modes /
                             	;* 	Mode		Opcode for mode
fda5 :                       df_asm_tokensyms
                             	;* Start with directives
fda5 : 6f726702              	db	"org",		1*2
fda9 : 1000                  	db	AM_DIR,		0x00
fdab : 6f707402              	db	"opt",		1*2
fdaf : 1000                  	db	AM_DIR,		0x00
fdb1 : 646202                	db	"db",		1*2
fdb4 : 1000                  	db	AM_DIR,		0x00
fdb6 : 647702                	db	"dw",		1*2
fdb9 : 1000                  	db	AM_DIR,		0x00
fdbb : 647302                	db	"ds",		1*2
fdbe : 1000                  	db	AM_DIR,		0x00	
                             
fdc0 : 61646310              	db	"adc",		8*2
fdc4 : 0c69                  	db	AM_IMM,		0x69
fdc6 : 0465                  	db	AM_ZP,		0x65
fdc8 : 0575                  	db	AM_ZPX,		0x75
fdca : 016d                  	db	AM_ABS,		0x6d
AS65 Assembler for R6502 [1.42].                                     Page  278
-------------------------------- bank\bank0.s --------------------------------

fdcc : 027d                  	db	AM_ABSX,	0x7d
fdce : 0379                  	db	AM_ABSY,	0x79
fdd0 : 0861                  	db	AM_ZPINDX,	0x61
fdd2 : 0971                  	db	AM_ZPINDY,	0x71
                             	
fdd4 : 616e6410              	db	"and",		8*2
fdd8 : 0c29                  	db	AM_IMM,		0x29
fdda : 0425                  	db	AM_ZP,		0x25
fddc : 0535                  	db	AM_ZPX,		0x35
fdde : 012d                  	db	AM_ABS,		0x2d
fde0 : 023d                  	db	AM_ABSX,	0x3d
fde2 : 0339                  	db	AM_ABSY,	0x39
fde4 : 0821                  	db	AM_ZPINDX,	0x21
fde6 : 0931                  	db	AM_ZPINDY,	0x31
                             
fde8 : 636d7010              	db	"cmp",		8*2
fdec : 0cc9                  	db	AM_IMM,		0xc9
fdee : 04c5                  	db	AM_ZP,		0xc5
fdf0 : 05d5                  	db	AM_ZPX,		0xd5
fdf2 : 01cd                  	db	AM_ABS,		0xcd
fdf4 : 02dd                  	db	AM_ABSX,	0xdd
fdf6 : 03d9                  	db	AM_ABSY,	0xd9
fdf8 : 08c1                  	db	AM_ZPINDX,	0xc1
fdfa : 09d1                  	db	AM_ZPINDY,	0xd1
                             
fdfc : 656f7210              	db	"eor",		8*2
fe00 : 0c49                  	db	AM_IMM,		0x49
fe02 : 0445                  	db	AM_ZP,		0x45
fe04 : 0555                  	db	AM_ZPX,		0x55
fe06 : 014d                  	db	AM_ABS,		0x4d
fe08 : 025d                  	db	AM_ABSX,	0x5d
fe0a : 0359                  	db	AM_ABSY,	0x59
fe0c : 0841                  	db	AM_ZPINDX,	0x41
fe0e : 0951                  	db	AM_ZPINDY,	0x51
                             
fe10 : 6c646110              	db	"lda",		8*2
fe14 : 0ca9                  	db	AM_IMM,		0xa9
fe16 : 04a5                  	db	AM_ZP,		0xa5
fe18 : 05b5                  	db	AM_ZPX,		0xb5
fe1a : 01ad                  	db	AM_ABS,		0xad
fe1c : 02bd                  	db	AM_ABSX,	0xbd
fe1e : 03b9                  	db	AM_ABSY,	0xb9
fe20 : 08a1                  	db	AM_ZPINDX,	0xa1
fe22 : 09b1                  	db	AM_ZPINDY,	0xb1
                             
fe24 : 6f726110              	db	"ora",		8*2
fe28 : 0c09                  	db	AM_IMM,		0x09
fe2a : 0405                  	db	AM_ZP,		0x05
fe2c : 0515                  	db	AM_ZPX,		0x15
fe2e : 010d                  	db	AM_ABS,		0x0d
fe30 : 021d                  	db	AM_ABSX,	0x1d
fe32 : 0319                  	db	AM_ABSY,	0x19
fe34 : 0801                  	db	AM_ZPINDX,	0x01
fe36 : 0911                  	db	AM_ZPINDY,	0x11
                             
fe38 : 73626310              	db	"sbc",		8*2
fe3c : 0ce9                  	db	AM_IMM,		0xe9
fe3e : 04e5                  	db	AM_ZP,		0xe5
fe40 : 05f5                  	db	AM_ZPX,		0xf5
fe42 : 01ed                  	db	AM_ABS,		0xed
fe44 : 02fd                  	db	AM_ABSX,	0xfd
fe46 : 03f9                  	db	AM_ABSY,	0xf9
AS65 Assembler for R6502 [1.42].                                     Page  279
-------------------------------- bank\bank0.s --------------------------------

fe48 : 08e1                  	db	AM_ZPINDX,	0xe1
fe4a : 09f1                  	db	AM_ZPINDY,	0xf1
                             
fe4c : 73746110              	db	"sta",		8*2
fe50 : 0485                  	db	AM_ZP,		0x85
fe52 : 0585                  	db	AM_ZPX,		0x85
fe54 : 018d                  	db	AM_ABS,		0x8d
fe56 : 029d                  	db	AM_ABSX,	0x9d
fe58 : 0399                  	db	AM_ABSY,	0x99
fe5a : 0881                  	db	AM_ZPINDX,	0x81
fe5c : 0991                  	db	AM_ZPINDY,	0x91
fe5e : 0792                  	db	AM_ZPIND,	0x92
                             
fe60 : 61736c0a              	db	"asl",		5*2
fe64 : 0d0a                  	db	AM_IMP,		0x0a
fe66 : 0406                  	db	AM_ZP,		0x06
fe68 : 0516                  	db	AM_ZPX,		0x16
fe6a : 010e                  	db	AM_ABS,		0x0e
fe6c : 021e                  	db	AM_ABSX,	0x1e
fe6e : 64656308              	db	"dec",		4*2
fe72 : 04c6                  	db	AM_ZP,		0xc6
fe74 : 05d6                  	db	AM_ZPX,		0xd6
fe76 : 01ce                  	db	AM_ABS,		0xce
fe78 : 02de                  	db	AM_ABSX,	0xde
fe7a : 696e6308              	db	"inc",		4*2
fe7e : 04e6                  	db	AM_ZP,		0xe6
fe80 : 05f6                  	db	AM_ZPX,		0xf6
fe82 : 01ee                  	db	AM_ABS,		0xee
fe84 : 02fe                  	db	AM_ABSX,	0xfe
fe86 : 6c73720a              	db	"lsr",		5*2
fe8a : 0d4a                  	db	AM_IMP,		0x4a
fe8c : 0446                  	db	AM_ZP,		0x46
fe8e : 0556                  	db	AM_ZPX,		0x56
fe90 : 014e                  	db	AM_ABS,		0x4e
fe92 : 025e                  	db	AM_ABSX,	0x5e
fe94 : 726f6c0a              	db	"rol",		5*2
fe98 : 0d2a                  	db	AM_IMP,		0x2a
fe9a : 0426                  	db	AM_ZP,		0x26
fe9c : 0536                  	db	AM_ZPX,		0x36
fe9e : 012e                  	db	AM_ABS,		0x2e
fea0 : 023e                  	db	AM_ABSX,	0x3e
fea2 : 726f720a              	db	"ror",		5*2
fea6 : 0d6a                  	db	AM_IMP,		0x6a
fea8 : 0466                  	db	AM_ZP,		0x66
feaa : 0576                  	db	AM_ZPX,		0x76
feac : 016e                  	db	AM_ABS,		0x6e
feae : 027e                  	db	AM_ABSX,	0x7e
                             
feb0 : 62697404              	db	"bit",		2*2
feb4 : 0424                  	db	AM_ZP,		0x24
feb6 : 012c                  	db	AM_ABS,		0x2c
                             	
feb8 : 62726b02              	db	"brk",		1*2
febc : 0d00                  	db	AM_IMP,		0x00
                             	
febe : 636c6302              	db	"clc",		1*2
fec2 : 0d18                  	db	AM_IMP,		0x18
fec4 : 636c6402              	db	"cld",		1*2
fec8 : 0dd8                  	db	AM_IMP,		0xd8
feca : 636c6902              	db	"cli",		1*2
fece : 0d58                  	db	AM_IMP,		0x58
fed0 : 636c7602              	db	"clv",		1*2
AS65 Assembler for R6502 [1.42].                                     Page  280
-------------------------------- bank\bank0.s --------------------------------

fed4 : 0db8                  	db	AM_IMP,		0xb8
fed6 : 73656302              	db	"sec",		1*2
feda : 0d38                  	db	AM_IMP,		0x38
fedc : 73656402              	db	"sed",		1*2
fee0 : 0df8                  	db	AM_IMP,		0xf8
fee2 : 73656902              	db	"sei",		1*2
fee6 : 0d78                  	db	AM_IMP,		0x78
                             	
fee8 : 63707806              	db	"cpx",		3*2
feec : 0ce0                  	db	AM_IMM,		0xe0
feee : 04e4                  	db	AM_ZP,		0xe4
fef0 : 01ec                  	db	AM_ABS,		0xec
fef2 : 63707906              	db	"cpy",		3*2
fef6 : 0cc0                  	db	AM_IMM,		0xc0
fef8 : 04c4                  	db	AM_ZP,		0xc4
fefa : 01cc                  	db	AM_ABS,		0xcc
fefc : 64657802              	db	"dex",		1*2
ff00 : 0dca                  	db	AM_IMP,		0xca
ff02 : 64657902              	db	"dey",		1*2
ff06 : 0d88                  	db	AM_IMP,		0x88
ff08 : 696e7802              	db	"inx",		1*2
ff0c : 0de8                  	db	AM_IMP,		0xe8
ff0e : 696e7902              	db	"iny",		1*2
ff12 : 0dc8                  	db	AM_IMP,		0xc8
ff14 : 6c64780a              	db	"ldx",		5*2
ff18 : 0ca2                  	db	AM_IMM,		0xa2
ff1a : 04a6                  	db	AM_ZP,		0xa6
ff1c : 06b6                  	db	AM_ZPY,		0xb6
ff1e : 01ae                  	db	AM_ABS,		0xae
ff20 : 03be                  	db	AM_ABSY,	0xbe
ff22 : 6c64790a              	db	"ldy",		5*2
ff26 : 0ca0                  	db	AM_IMM,		0xa0
ff28 : 04a4                  	db	AM_ZP,		0xa4
ff2a : 05b4                  	db	AM_ZPX,		0xb4
ff2c : 01ac                  	db	AM_ABS,		0xac
ff2e : 02bc                  	db	AM_ABSX,	0xbc
ff30 : 73747806              	db	"stx",		3*2
ff34 : 0486                  	db	AM_ZP,		0x86
ff36 : 0696                  	db	AM_ZPY,		0x96
ff38 : 018e                  	db	AM_ABS,		0x8e
ff3a : 73747906              	db	"sty",		3*2
ff3e : 0484                  	db	AM_ZP,		0x84
ff40 : 0594                  	db	AM_ZPX,		0x94
ff42 : 018c                  	db	AM_ABS,		0x8c
                             
ff44 : 62636302              	db	"bcc",		1*2
ff48 : 0f90                  	db	AM_REL,		0x90
ff4a : 62637302              	db	"bcs",		1*2
ff4e : 0fb0                  	db	AM_REL,		0xb0
ff50 : 62657102              	db	"beq",		1*2
ff54 : 0ff0                  	db	AM_REL,		0xf0
ff56 : 626d6902              	db	"bmi",		1*2
ff5a : 0f30                  	db	AM_REL,		0x30
ff5c : 626e6502              	db	"bne",		1*2
ff60 : 0fd0                  	db	AM_REL,		0xd0
ff62 : 62706c02              	db	"bpl",		1*2
ff66 : 0f10                  	db	AM_REL,		0x10
ff68 : 62766302              	db	"bvc",		1*2
ff6c : 0f50                  	db	AM_REL,		0x50
ff6e : 62767302              	db	"bvs",		1*2
ff72 : 0f70                  	db	AM_REL,		0x70
ff74 : 6a6d7004              	db	"jmp",		2*2
AS65 Assembler for R6502 [1.42].                                     Page  281
-------------------------------- bank\bank0.s --------------------------------

ff78 : 014c                  	db	AM_ABS,		0x4c
ff7a : 0a6c                  	db	AM_ABSIND,	0x6c
ff7c : 6a737202              	db	"jsr",		1*2
ff80 : 0120                  	db	AM_ABS,		0x20
                             	
ff82 : 6e6f7002              	db	"nop",		1*2
ff86 : 0dea                  	db	AM_IMP,		0xea
ff88 : 70686102              	db	"pha",		1*2
ff8c : 0d48                  	db	AM_IMP,		0x48
ff8e : 70687002              	db	"php",		1*2
ff92 : 0d08                  	db	AM_IMP,		0x08
ff94 : 706c6102              	db	"pla",		1*2
ff98 : 0d68                  	db	AM_IMP,		0x68
ff9a : 706c7002              	db	"plp",		1*2
ff9e : 0d28                  	db	AM_IMP,		0x28
ffa0 : 72746902              	db	"rti",		1*2
ffa4 : 0d40                  	db	AM_IMP,		0x40
ffa6 : 72747302              	db	"rts",		1*2
ffaa : 0d60                  	db	AM_IMP,		0x60
ffac : 74617802              	db	"tax",		1*2
ffb0 : 0daa                  	db	AM_IMP,		0xaa
ffb2 : 74617902              	db	"tay",		1*2
ffb6 : 0da8                  	db	AM_IMP,		0xa8
ffb8 : 74737802              	db	"tsx",		1*2
ffbc : 0dba                  	db	AM_IMP,		0xba
ffbe : 74786102              	db	"txa",		1*2
ffc2 : 0d8a                  	db	AM_IMP,		0x8a
ffc4 : 74787302              	db	"txs",		1*2
ffc8 : 0d9a                  	db	AM_IMP,		0x9a
ffca : 74796102              	db	"tya",		1*2
ffce : 0d98                  	db	AM_IMP,		0x98	
                             	
                             	;* Terminates with a zero
ffd0 : 00                    	db	0
                             
                             	include	"dflat/asmjmptab.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  ASMJUMPTAB.S
                             ;*  Runtime token jump table for assembler.
                             ;*  dflat uses four key tables to tokenise and ru
                             ;*  - df_tokensyms    - table of token symbols
                             ;*  - df_tk_tokentype - table of token types
                             ;*  - df_tk_tokenjmp  - table of tokenising routi
                             ;*  - df_rt_tokenjmp  - table of runtime routines
                             ;*  The key is the token symbols.  When a line is
                             ;*  in to the raw (untokenised) buffer, df_tokens
                             ;*  used to identify tokens.  The position of the
                             ;*  token is used to then look up type and jump v
                             ;*  in the other tables.
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code  
                             
AS65 Assembler for R6502 [1.42].                                     Page  282
-------------------------------- bank\bank0.s --------------------------------

                             ; Tokeniser jump table
                             ; Only directives needed as all opcodes are handl
                             ; through a single routine
ffd1 :                       df_tk_asm_tokenjmp
ffd1 : 68de                  	dw	df_tk_asm_org
ffd3 : 68de                  	dw	df_tk_asm_opt
ffd5 : cddd                  	dw	df_tk_asm_db
ffd7 : cddd                  	dw	df_tk_asm_dw
ffd9 : 68de                  	dw	df_tk_asm_ds
                             
ffdb :                       df_rt_asm_tokenjmp
ffdb : b4fa                  	dw	df_rt_asm_org
ffdd : c7fa                  	dw	df_rt_asm_opt
ffdf : cffa                  	dw	df_rt_asm_db
ffe1 : d5fa                  	dw	df_rt_asm_dw
ffe3 : 4ffb                  	dw	df_rt_asm_ds
                             
                             
                             ;****************************************
                             ;* as_init
                             ;* Initialise assembler settings
                             ;****************************************
ffe5 :                       asm_init
                             	; Zero the PC
ffe5 : a900             [ 2] 	lda #0
ffe7 : 8599             [ 3] 	sta df_asmpc
ffe9 : 859a             [ 3] 	sta df_asmpc+1
                             	; Zero the option
ffeb : 859b             [ 3] 	sta df_asmopt
ffed : 60               [ 6] 	rts
                             
ffee :                       mod_sz_asm_e
                             
ffee :                       mod_sz_language_e
                             	; End of Code
ffee :                       _code_end
                             
No errors in pass 2.
Wrote binary from address $c000 through $ffff.
Total size 16384 bytes.
