AS65 Assembler for R6502 [1.42].                                     Page    1
---------------------------------- bank0.s -----------------------------------

-------------------------------- Symbol Table --------------------------------

              Symbol   Value        Decimal

                 ACR : $000b             11   *
              AM_ABS : $0001              1   *
           AM_ABSIND : $000a             10   *
          AM_ABSINDX : $000b             11   *
             AM_ABSX : $0002              2   *
             AM_ABSY : $0003              3   *
              AM_ACC : $000d             13   *
              AM_DIR : $0010             16   *
              AM_IMM : $000c             12   *
              AM_IMP : $000d             13   *
             AM_NONE : $0000              0   *
              AM_REL : $000f             15   *
               AM_ZP : $0004              4   *
            AM_ZPIND : $0007              7   *
           AM_ZPINDX : $0008              8   *
           AM_ZPINDY : $0009              9   *
              AM_ZPX : $0005              5   *
              AM_ZPY : $0006              6   *
            asm_init : $ffe7          65511
               BANK0 : $0001              1
             bcd_str : $c3a3          50083
          bcd_to_str : $c396          50070
      bin_to_bcd_bit : $c378          50040
              buf_ef : $003c             60
              buf_hi : $003a             58
              buf_lo : $0039             57
              buf_sz : $003b             59
     CMD_ERR_NOERROR : $0000              0   *
    CMD_ERR_NOTFOUND : $0001              1   *
        CMD_ERR_PARM : $0002              2   *
         CMD_ERR_VAL : $0003              3   *
           CRSR_DOWN : $000a             10   *
           CRSR_LEFT : $0008              8   *
          CRSR_RIGHT : $0009              9   *
             CRSR_UP : $000b             11   *
           CTRL_CAPS : $0014             20   *
        call_irq_brk : $c0da          49370
     call_irq_master : $c0d7          49367
   call_irq_usercia0 : $c0dd          49373
       cmd_check_cmd : $d2e4          53988
         cmd_check_d : $d2f7          54007
         cmd_check_s : $d2fe          54014
         cmd_dumpmem : $d331          54065
    cmd_dumpmemASCII : $d357          54103
      cmd_dumpmemFin : $d38c          54156
   cmd_dumpmem_ascii : $d369          54121
   cmd_dumpmem_block : $d337          54071
    cmd_dumpmem_byte : $d348          54088
  cmd_dump_skip_ctrl : $d373          54131
   cmd_dump_skip_del : $d378          54136
           cmd_error : $d2ec          53996
       cmd_find_parm : $d3db          54235
              cmd_hi : $0095            149   *
          cmd_incmem : $d393          54163
              cmd_lo : $0094            148   *
   cmd_next_parm_err : $d3e7          54247
       cmd_not_found : $d305          54021
           cmd_parse : $d2f6          54006
AS65 Assembler for R6502 [1.42].                                     Page    2
---------------------------------- bank0.s -----------------------------------

      cmd_parse_byte : $d3ac          54188
  cmd_parse_byte_err : $d3c6          54214
 cmd_parse_byte_errp : $d3c5          54213
 cmd_parse_next_parm : $d3da          54234
      cmd_parse_word : $d3c8          54216
            cmd_peek : $d39a          54170
            cmd_poke : $d3a3          54179
           cmd_ready : $d2d0          53968
          cmd_setmem : $d30b          54027
     cmd_setmem_byte : $d310          54032
      cmd_setmem_err : $d32f          54063
        cmd_word_err : $d3d8          54232
        command_line : $d2d0          53968
       con_bin_digit : $c254          49748
        con_bin_done : $c26a          49770
         con_bin_err : $c274          49780
         con_bin_jmp : $c1f1          49649
        con_bin_to_a : $c24c          49740
    con_bin_to_a_int : $c250          49744
         con_dec_jmp : $c1e5          49637
        con_dec_to_a : $c276          49782
    con_dec_to_a_int : $c27a          49786
       con_hex_digit : $c215          49685
        con_hex_done : $c242          49730
         con_hex_err : $c240          49728
         con_hex_jmp : $c1eb          49643
  con_hex_skip_x_f_1 : $c222          49698
        con_hex_to_a : $c20d          49677
    con_hex_to_a_int : $c211          49681
           con_n_err : $c1f4          49652
       con_n_not_dec : $c1e8          49640
       con_n_not_hex : $c1ee          49646
          con_n_to_a : $c1d4          49620
   con_n_to_a_detect : $c1f6          49654
                DDRA : $0003              3   *
                DDRB : $0002              2   *
         DFERR_ABORT : $0012             18   *
         DFERR_BREAK : $000d             13   *
           DFERR_DIM : $0003              3   *
         DFERR_FNAME : $000b             11   *
     DFERR_IMMEDIATE : $0007              7   *
       DFERR_NEXTFOR : $000a             10   *
        DFERR_NODATA : $000e             14   *
          DFERR_NOIF : $0009              9   *
        DFERR_NOLINE : $0010             16   *
         DFERR_NOORG : $0014             20   *
        DFERR_NOPROC : $0005              5   *
            DFERR_OK : $0000              0   *
      DFERR_PROCPARM : $0006              6   *
      DFERR_QUANTITY : $0013             19   *
        DFERR_RETURN : $0011             17   *
       DFERR_STRLONG : $000c             12   *
        DFERR_SYNTAX : $0001              1   *
      DFERR_TYPEMISM : $0002              2   *
    DFERR_UNCLOSEDIF : $0008              8   *
         DFERR_UNTIL : $0004              4   *
          DFERR_WEND : $000f             15   *
          DFRT_ABORT : $0089            137   *
            DFRT_ASM : $0097            151   *
           DFRT_DATA : $0096            150   *
            DFRT_DEF : $0086            134   *
           DFRT_ELSE : $0093            147   *
AS65 Assembler for R6502 [1.42].                                     Page    3
---------------------------------- bank0.s -----------------------------------

         DFRT_ELSEIF : $0095            149   *
         DFRT_ENDDEF : $0087            135   *
          DFRT_ENDIF : $0094            148   *
            DFRT_FOR : $008e            142   *
             DFRT_IF : $0092            146   *
           DFRT_NEXT : $008f            143   *
         DFRT_REPEAT : $008c            140   *
         DFRT_RETURN : $0088            136   *
           DFRT_WEND : $0091            145   *
          DFRT_WHILE : $0090            144   *
            DFST_INT : $0001              1   *
            DFST_STR : $0080            128   *
            DFTK_BYT : $0020             32   *
         DFTK_BYTBIN : $0007              7   *
         DFTK_BYTDEC : $0005              5   *
         DFTK_BYTHEX : $0006              6   *
            DFTK_CHR : $0000              0   *
            DFTK_EOL : $0000              0   *
         DFTK_ESCVAL : $0020             32   *
            DFTK_FLT : $0080            128   *
             DFTK_FN : $0002              2   *
            DFTK_INT : $0010             16   *
         DFTK_INTBIN : $000b             11   *
         DFTK_INTDEC : $0009              9   *
         DFTK_INTHEX : $000a             10   *
             DFTK_KW : $0001              1   *
         DFTK_LINLEN : $0000              0   *
         DFTK_LINNUM : $0001              1   *
             DFTK_OP : $0008              8   *
          DFTK_OPMSK : $0007              7   *
           DFTK_PROC : $0012             18   *
          DFTK_RESVC : $000c             12   *
          DFTK_RESVD : $000d             13   *
          DFTK_RESVE : $000e             14   *
          DFTK_RESVF : $000f             15   *
          DFTK_RESV1 : $0001              1   *
          DFTK_RESV2 : $0002              2   *
          DFTK_RESV3 : $0003              3   *
          DFTK_RESV4 : $0004              4   *
          DFTK_RESV8 : $0008              8   *
          DFTK_RTMSK : $00f8            248   *
          DFTK_STEND : $001f             31   *
            DFTK_STR : $0040             64   *
         DFTK_STRLIT : $0010             16   *
          DFTK_STROP : $0004              4   *
          DFTK_TOKEN : $0080            128   *
            DFTK_VAR : $0011             17   *
        DFTK_VARPARM : $0026             38   *
          DFVVT_ARRY : $0080            128   *
           DFVVT_BYT : $0002              2   *
          DFVVT_DIM1 : $0003              3   *
          DFVVT_DIM2 : $0004              4   *
           DFVVT_FLT : $0008              8   *
            DFVVT_HI : $0002              2   *
           DFVVT_INT : $0001              1   *
            DFVVT_LO : $0001              1   *
          DFVVT_PROC : $0040             64   *
           DFVVT_STR : $0004              4   *
            DFVVT_SZ : $0008              8   *
          DFVVT_TYPE : $0000              0   *
           DF_MEMTOP : $9800          38912   *
        DF_PROGSTART : $0713           1811   *
AS65 Assembler for R6502 [1.42].                                     Page    4
---------------------------------- bank0.s -----------------------------------

          dflat_zp_e : $00ab            171
          dflat_zp_s : $005b             91
     dflat_zp_save_e : $00a1            161
     dflat_zp_save_s : $005b             91
          df_asmadmd : $009c            156
           df_asmlen : $00a0            160
         df_asmopcde : $009d            157
         df_asmoprnd : $009e            158
           df_asmopt : $009b            155
            df_asmpc : $0099            153
  df_asm_altaddrmode : $fd96          64918
       df_asm_length : $fd85          64901
    df_asm_tokensyms : $fda7          64935
            df_brkpc : $0062             98
           df_brkval : $0064            100
         df_checkkey : $005b             91
         df_checkmsk : $005c             92
            df_clear : $f79a          63386
          df_currdat : $0094            148
          df_currlin : $0086            134
         df_curstidx : $0080            128
           df_datoff : $0096            150
           df_eolidx : $007e            126
           df_exeoff : $0088            136
           df_ifnest : $0093            147
            df_immed : $005e             94
             df_init : $f78c          63372
          df_initrun : $e01d          57373
       df_lexer_line : $d997          55703
  df_lexer_skip_lnum : $d9b8          55736
          df_linbuff : $0400           1024
          df_lineidx : $0092            146
          df_lineptr : $0090            144
           df_linoff : $007c            124
           df_memtop : $0611           1553
          df_msg_acc : $f96e          63854
           df_msg_pc : $f96a          63850
         df_msg_xreg : $f971          63857
         df_msg_yreg : $f974          63860
          df_nextlin : $0089            137
        df_next_done : $ea08          59912
         df_nxtstidx : $007f            127
     df_ost_peekType : $f762          63330
       df_ost_popInt : $f768          63336
     df_ost_popParmX : $f747          63303
       df_ost_popPtr : $f770          63344
       df_ost_popStr : $f76c          63340
      df_ost_pushInt : $f734          63284
     df_ost_pushIntA : $f738          63288
    df_ost_pushParmX : $f71e          63262
      df_ost_pushPtr : $f743          63299
      df_ost_pushStr : $f73f          63295
          df_parmtop : $0077            119
               df_pc : $0060             96
    df_pg_check_line : $deb2          57010
df_pg_check_next_line : $de9b          56987
df_pg_copyinputtolinbuff : $df68          57192
  df_pg_delete_block : $df28          57128
   df_pg_delete_byte : $df2c          57132
df_pg_delete_next_byte : $df4f          57167
         df_pg_dflat : $df72          57202
          df_pg_done : $dfb1          57265
AS65 Assembler for R6502 [1.42].                                     Page    5
---------------------------------- bank0.s -----------------------------------

     df_pg_find_line : $de8f          56975
    df_pg_getcommand : $df88          57224
     df_pg_inputline : $df5f          57183
  df_pg_inputline_ok : $df68          57192
 df_pg_insertlinbyte : $e00d          57357
    df_pg_insertline : $dfee          57326
  df_pg_insert_block : $deec          57068
   df_pg_insert_byte : $def8          57080
df_pg_insert_next_byte : $df18          57112
   df_pg_line_number : $dfce          57294
       df_pg_nothing : $dfcd          57293
        df_pg_prompt : $df7d          57213
    df_pg_prompt_msg : $e016          57366
 df_pg_skip_del_line : $dfe4          57316
      df_pg_tokenise : $dfb3          57267
           df_prgend : $0067            103
          df_prgstrt : $0065            101
         df_procargs : $008c            140
          df_procloc : $008d            141
         df_procmode : $008b            139
          df_procptr : $008e            142
df_pr_line_gt_target : $dea7          56999
     df_pr_line_next : $deda          57050
  df_pr_line_nomatch : $decc          57036
              df_raw : $0400           1024
              df_rnd : $0097            151
     df_rst_peekByte : $f6fc          63228
      df_rst_popByte : $f6f3          63219
      df_rst_popWord : $f710          63248
     df_rst_pushByte : $f6ea          63210
     df_rst_pushWord : $f702          63234
          df_rtspace : $0500           1280
           df_rtstck : $0500           1280
           df_rtstop : $0076            118
         df_rt_abort : $f53f          62783
           df_rt_add : $e671          58993
         df_rt_aequb : $e74d          59213
      df_rt_aequbFin : $e757          59223
           df_rt_and : $e720          59168
  df_rt_array_exists : $e30e          58126
     df_rt_arry_parm : $e212          57874
    df_rt_arry_parm2 : $e219          57881
df_rt_arry_parm2_arry2 : $e231          57905
df_rt_arry_parm2_skiparry2 : $e238          57912
df_rt_arry_parm2_term : $e221          57889
           df_rt_asc : $f514          62740
           df_rt_asl : $e6fa          59130
        df_rt_aslbit : $e700          59136
       df_rt_asldone : $e70a          59146
    df_rt_asm_ABSREL : $fcd6          64726
    df_rt_asm_AM_ABS : $fced          64749
   df_rt_asm_AM_ABSX : $fcfa          64762
   df_rt_asm_AM_ABSY : $fce8          64744
    df_rt_asm_AM_IMM : $fcff          64767
    df_rt_asm_AM_IMP : $fcd1          64721
df_rt_asm_AM_INDIRECT : $fd09          64777
    df_rt_asm_AM_REL : $fcf7          64759
  df_rt_asm_AM_ZPIND : $fd2f          64815
df_rt_asm_AM_ZPINDORY : $fd1f          64799
  df_rt_asm_addrmode : $fcb5          64693
  df_rt_asm_assemble : $fa6a          64106
df_rt_asm_assemble_done : $fa7e          64126
AS65 Assembler for R6502 [1.42].                                     Page    6
---------------------------------- bank0.s -----------------------------------

 df_rt_asm_check_alt : $fb7e          64382
   df_rt_asm_command : $fa7f          64127
      df_rt_asm_data : $fae1          64225
 df_rt_asm_data_done : $fb1f          64287
 df_rt_asm_data_next : $fb15          64277
df_rt_asm_data_write : $fb20          64288
df_rt_asm_data_write_err : $fb4f          64335
df_rt_asm_data_write_hi : $fb3a          64314
df_rt_asm_data_write_skip1 : $fb23          64291
df_rt_asm_data_write_skip2 : $fb3e          64318
        df_rt_asm_db : $fad1          64209
  df_rt_asm_db_start : $fadb          64219
df_rt_asm_decode_token : $f0a4          61604
df_rt_asm_decode_token_done : $f100          61696
df_rt_asm_decode_token_found : $f0bb          61627
df_rt_asm_decode_token_keyword : $f0c2          61634
df_rt_asm_decode_token_ws : $f0ab          61611
       df_rt_asm_dir : $fa91          64145
  df_rt_asm_do_label : $fa7b          64123
        df_rt_asm_ds : $fb51          64337
        df_rt_asm_dw : $fad7          64215
    df_rt_asm_encode : $fbb7          64439
df_rt_asm_encode_print : $fc21          64545
df_rt_asm_encode_relfar : $fbef          64495
df_rt_asm_encode_relpos : $fbeb          64491
df_rt_asm_encode_skiprel : $fbf3          64499
df_rt_asm_encode_writebyte : $fc0f          64527
df_rt_asm_encode_writeword : $fc17          64535
df_rt_asm_find_addr_mode : $fd3d          64829
df_rt_asm_find_addr_mode_err : $fd52          64850
df_rt_asm_find_addr_mode_loop : $fd43          64835
df_rt_asm_get_operand : $fd32          64818
     df_rt_asm_label : $faa3          64163
      df_rt_asm_mnem : $fb6f          64367
  df_rt_asm_mnem_chk : $fb92          64402
 df_rt_asm_mnem_done : $fba0          64416
  df_rt_asm_mnem_err : $fbb5          64437
  df_rt_asm_mnem_try : $fb75          64373
       df_rt_asm_opt : $fac9          64201
       df_rt_asm_org : $fab6          64182
   df_rt_asm_printCH : $fc8f          64655
   df_rt_asm_printCR : $fc85          64645
 df_rt_asm_printline : $fc9d          64669
  df_rt_asm_printOPC : $fc54          64596
  df_rt_asm_printOPR : $fc6a          64618
df_rt_asm_printOPR_1 : $fc7f          64639
   df_rt_asm_printPC : $fc43          64579
  df_rt_asm_printSPC : $fc60          64608
df_rt_asm_print_mmen : $fc33          64563
 df_rt_asm_print_rts : $fc42          64578
df_rt_asm_skip_to_sym : $fd55          64853
df_rt_asm_skip_to_sym_done : $fd84          64900
df_rt_asm_skip_to_sym_end : $fd73          64883
df_rt_asm_skip_to_sym_next : $fd64          64868
    df_rt_asm_string : $faf8          64248
 df_rt_asm_string_ch : $faff          64255
  df_rt_asm_tokenjmp : $ffdd          65501
        df_rt_assign : $ed8a          60810
    df_rt_assign_str : $ed97          60823
         df_rt_asubb : $e758          59224
      df_rt_asubbFin : $e765          59237
   df_rt_binlen_skip : $f314          62228
AS65 Assembler for R6502 [1.42].                                     Page    7
---------------------------------- bank0.s -----------------------------------

         df_rt_bload : $f20f          61967
    df_rt_bload_addr : $f232          62002
         df_rt_bsave : $f242          62018
   df_rt_bsave_parms : $f2f2          62194
         df_rt_bsuba : $e766          59238
      df_rt_bsubaFin : $e773          59251
          df_rt_call : $f419          62489
       df_rt_calljsr : $f42a          62506
     df_rt_check_pos : $e9fb          59899
   df_rt_check_while : $e89f          59551
           df_rt_chr : $f46d          62573
        df_rt_circle : $ecb1          60593
           df_rt_cls : $ec02          60418
         df_rt_comeq : $e7ce          59342
         df_rt_comgt : $e7c5          59333
        df_rt_comgte : $e7e0          59360
         df_rt_comlt : $e7bc          59324
        df_rt_comlte : $e7d7          59351
       df_rt_comment : $ed9b          60827
         df_rt_comne : $e7e9          59369
       df_rt_copyStr : $e1cd          57805
    df_rt_copyStr_ch : $e1cf          57807
  df_rt_copyStr_done : $e1d8          57816
       df_rt_copy_fn : $f1a6          61862
        df_rt_cursor : $ec79          60537
          df_rt_data : $ed9b          60827
 df_rt_datastatement : $ea68          60008
   df_rt_datlinstart : $ea60          60000
    df_rt_datnextlin : $ea6e          60014
      df_rt_datumerr : $ea98          60056
    df_rt_dec_binlen : $f30e          62222
          df_rt_deek : $f330          62256
           df_rt_def : $f621          63009
  df_rt_def_find_var : $f62d          63021
   df_rt_def_got_var : $f641          63041
df_rt_def_got_varparm : $f63e          63038
df_rt_def_initialise_parm : $f680          63104
  df_rt_def_load_var : $f65f          63071
df_rt_def_load_var_done : $f69c          63132
df_rt_def_load_var_int : $f68e          63118
df_rt_def_load_var_int_skip : $f691          63121
 df_rt_def_parm_done : $f657          63063
           df_rt_dim : $eb79          60281
     df_rt_dim2_mul2 : $ebe0          60384
       df_rt_dim2_nz : $ebcb          60363
     df_rt_dim_alloc : $ebba          60346
      df_rt_dim_done : $ebff          60415
       df_rt_dim_err : $ec00          60416
   df_rt_dim_findesc : $eb7c          60284
 df_rt_dim_next_byte : $ebfa          60410
           df_rt_div : $e6b8          59064
      df_rt_doassign : $ed8d          60813
          df_rt_doke : $f101          61697
        df_rt_doline : $ecca          60618
       df_rt_dosound : $f146          61766
       df_rt_do_else : $e96d          59757
       df_rt_elapsed : $f3fe          62462
          df_rt_else : $e91b          59675
        df_rt_elseif : $e91b          59675
        df_rt_enddef : $f6a3          63139
         df_rt_endif : $e916          59670
           df_rt_eor : $e73e          59198
AS65 Assembler for R6502 [1.42].                                     Page    8
---------------------------------- bank0.s -----------------------------------

           df_rt_eos : $ed9d          60829
      df_rt_eos_true : $edaf          60847
            df_rt_eq : $e7a8          59304
        df_rt_escjmp : $e644          58948
      df_rt_eval_byt : $e329          58153
   df_rt_eval_bytbin : $e1e6          57830
   df_rt_eval_bytdec : $e1e6          57830
   df_rt_eval_bythex : $e1e6          57830
      df_rt_eval_chr : $e1e6          57830
      df_rt_eval_esc : $e115          57621
  df_rt_eval_esc_tab : $e124          57636
   df_rt_eval_intbin : $e1e6          57830
   df_rt_eval_intdec : $e1e6          57830
   df_rt_eval_inthex : $e1e6          57830
     df_rt_eval_lvar : $e276          57974
   df_rt_eval_lvskip : $e250          57936
     df_rt_eval_proc : $e33b          58171
 df_rt_eval_proc_err : $e348          58184
      df_rt_eval_ptr : $e334          58164
 df_rt_eval_reserved : $e1f2          57842
   df_rt_eval_strlit : $e1f4          57844
df_rt_eval_strlit_ch : $e208          57864
df_rt_eval_strlit_done : $e20f          57871
      df_rt_eval_var : $e23d          57917
df_rt_eval_var_dim2adj : $e2c0          58048
df_rt_eval_var_dim2adjx : $e2ca          58058
df_rt_eval_var_dim2adjy : $e2c5          58053
df_rt_eval_var_do_arry : $e291          58001
df_rt_eval_var_nomult : $e2e3          58083
df_rt_eval_var_notarry : $e266          57958
 df_rt_eval_var_push : $e2fd          58109
df_rt_eval_var_simple : $e283          57987
  df_rt_eval_var_str : $e333          58163
   df_rt_exec_ctrl_c : $e486          58502
   df_rt_exec_ctrl_z : $e48a          58506
      df_rt_exec_end : $e484          58500
 df_rt_exec_find_tok : $e42e          58414
df_rt_exec_found_tok : $e433          58419
 df_rt_exec_init_ptr : $e427          58407
     df_rt_exec_jump : $e48c          58508
   df_rt_exec_no_key : $e45d          58461
     df_rt_exec_proc : $f5d7          62935
     df_rt_exec_stat : $e421          58401
         df_rt_false : $e77a          59258
  df_rt_file_cleanup : $f1cf          61903
     df_rt_file_errc : $f1b9          61881
 df_rt_findelseendif : $e8de          59614
    df_rt_findescval : $e543          58691
df_rt_findescval_loop : $e546          58694
      df_rt_findproc : $e4fb          58619
  df_rt_findproc_cmd : $e50d          58637
  df_rt_findproc_err : $e541          58689
df_rt_findproc_nextstat : $e52d          58669
      df_rt_findwend : $e86c          59500
    df_rt_fname_case : $f1a8          61864
           df_rt_for : $e970          59760
 df_rt_generate_lvar : $ed67          60775
           df_rt_get : $f3ca          62410
  df_rt_getbin_parms : $f2d1          62161
df_rt_getbin_parms_loop : $f2d3          62163
     df_rt_getdatatk : $ea7e          60030
       df_rt_getlvar : $e55d          58717
AS65 Assembler for R6502 [1.42].                                     Page    9
---------------------------------- bank0.s -----------------------------------

       df_rt_getnval : $e08a          57482
      df_rt_get2Ints : $e34a          58186
      df_rt_get2Strs : $e359          58201
      df_rt_get_push : $f3dd          62429
     df_rt_get_pushp : $f3dc          62428
      df_rt_get_sync : $f3d1          62417
            df_rt_gt : $e794          59284
           df_rt_gte : $e79e          59294
      df_rt_gte_calc : $e7a1          59297
           df_rt_hex : $f483          62595
         df_rt_himem : $ec7f          60543
         df_rt_hires : $ec8e          60558
            df_rt_if : $e92d          59693
         df_rt_ifcmd : $e8e1          59617
        df_rt_ifelse : $e8ff          59647
        df_rt_ifeval : $e92f          59695
  df_rt_ifskipelseif : $e8f6          59638
       df_rt_if_done : $e91a          59674
      df_rt_if_found : $e90c          59660
      df_rt_if_match : $e8d6          59606
       df_rt_if_stat : $e8c0          59584
   df_rt_if_stat_err : $e8d4          59604
     df_rt_init_done : $e089          57481
 df_rt_init_filename : $f19a          61850
 df_rt_init_stat_ptr : $e40c          58380
      df_rt_init_vvt : $e046          57414
 df_rt_init_vvt_skip : $e07a          57466
 df_rt_init_vvt_slot : $e050          57424
df_rt_init_vvt_slot_undim : $e05c          57436
           df_rt_ink : $ec97          60567
         df_rt_input : $eb0d          60173
     df_rt_input_err : $eb47          60231
     df_rt_input_num : $eb30          60208
     df_rt_input_str : $eb28          60200
    df_rt_ldtokenise : $f1f7          61943
          df_rt_left : $f4b6          62646
           df_rt_len : $f506          62726
          df_rt_line : $ecd1          60625
        df_rt_lineto : $ecc3          60611
          df_rt_list : $ee9c          61084
  df_rt_listcheckvnt : $ee02          60930
   df_rt_listgotnext : $ee31          60977
   df_rt_listnextvnt : $ee2a          60970
   df_rt_listpn_done : $ee43          60995
       df_rt_listprg : $eec3          61123
    df_rt_listprgend : $eecb          61131
      df_rt_listproc : $ee44          60996
    df_rt_listprocch : $ee0e          60942
    df_rt_listproccr : $ee1a          60954
 df_rt_listprocnames : $edf6          60918
 df_rt_listprocpause : $ee20          60960
    df_rt_listp_copy : $ee4b          61003
    df_rt_listp_done : $ee90          61072
 df_rt_listp_findcmd : $ee76          61046
 df_rt_listp_findend : $ee6f          61039
df_rt_listp_notfound : $ee9a          61082
      df_rt_listwait : $ee27          60967
      df_rt_list_all : $eeaf          61103
 df_rt_list_all_line : $ef14          61204
   df_rt_list_decode : $ef20          61216
df_rt_list_decode_esc : $ef52          61266
df_rt_list_decode_token : $f065          61541
AS65 Assembler for R6502 [1.42].                                     Page   10
---------------------------------- bank0.s -----------------------------------

df_rt_list_decode_token_normal : $f06c          61548
   df_rt_list_donvvt : $f057          61527
df_rt_list_do_decode_tkn : $f073          61555
   df_rt_list_escval : $ef30          61232
  df_rt_list_findvvt : $efff          61439
df_rt_list_find_asm_sym : $f0cd          61645
 df_rt_list_find_sym : $f07c          61564
   df_rt_list_gotvvt : $f02e          61486
df_rt_list_gotvvtend : $f018          61464
df_rt_list_got_asm_sym : $f0ee          61678
df_rt_list_got_last_sym : $f08e          61582
  df_rt_list_got_sym : $f092          61586
     df_rt_list_line : $eed1          61137
df_rt_list_line_cont : $eeeb          61163
 df_rt_list_line_fin : $ef11          61201
df_rt_list_line_only : $ef17          61207
df_rt_list_line_only_fin : $ef13          61203
    df_rt_list_linno : $eeb6          61110
   df_rt_list_linnum : $f058          61528
  df_rt_list_nexttok : $ef39          61241
df_rt_list_next_asm_ch : $f0d3          61651
  df_rt_list_next_ch : $f082          61570
df_rt_list_next_line : $eef2          61170
    df_rt_list_pause : $eee0          61152
  df_rt_list_synckey : $eedc          61148
    df_rt_list_token : $ef36          61238
   df_rt_list_vvtend : $f00b          61451
          df_rt_load : $f2b5          62133
       df_rt_loadbin : $f2de          62174
  df_rt_loadbin_byte : $f2e0          62176
   df_rt_loadbin_inc : $f2ea          62186
      df_rt_loadline : $f1dd          61917
         df_rt_local : $eb49          60233
    df_rt_local_done : $eb75          60277
 df_rt_local_findesc : $eb50          60240
           df_rt_lsr : $e70d          59149
        df_rt_lsrbit : $e713          59155
       df_rt_lsrdone : $e71d          59165
       df_rt_lst_bin : $efc1          61377
       df_rt_lst_bit : $efcb          61387
 df_rt_lst_bit_skip0 : $efd5          61397
    df_rt_lst_bytbin : $efb3          61363
    df_rt_lst_bythex : $ef8e          61326
       df_rt_lst_chr : $ef71          61297
   df_rt_lst_hex_pre : $ef84          61316
    df_rt_lst_intbin : $efbc          61372
    df_rt_lst_intdec : $efdf          61407
    df_rt_lst_inthex : $efa1          61345
    df_rt_lst_lo_hex : $ef91          61329
      df_rt_lst_proc : $efea          61418
  df_rt_lst_reserved : $ef70          61296
    df_rt_lst_strlit : $f03e          61502
  df_rt_lst_strlitch : $f045          61509
 df_rt_lst_strlitdon : $f050          61520
       df_rt_lst_var : $efea          61418
            df_rt_lt : $e780          59264
           df_rt_lte : $e78a          59274
      df_rt_lte_calc : $e78d          59277
           df_rt_mem : $f372          62322
      df_rt_mem_calc : $f3b5          62389
      df_rt_mem_free : $f37f          62335
       df_rt_mem_prg : $f392          62354
AS65 Assembler for R6502 [1.42].                                     Page   11
---------------------------------- bank0.s -----------------------------------

       df_rt_mem_var : $f3a5          62373
           df_rt_mid : $f4e6          62694
           df_rt_mod : $e6d9          59097
       df_rt_monitor : $e841          59457
          df_rt_mult : $e697          59031
         df_rt_music : $f156          61782
       df_rt_nassign : $ed4a          60746
            df_rt_ne : $e7b2          59314
         df_rt_neval : $e090          57488
    df_rt_neval_done : $e0de          57566
   df_rt_neval_donow : $e0ff          57599
     df_rt_neval_esc : $e0bd          57533
df_rt_neval_nextbyte : $e0e4          57572
    df_rt_neval_optk : $e093          57491
 df_rt_neval_process : $e0d5          57557
  df_rt_neval_pushOp : $e110          57616
      df_rt_neval_tk : $e0c3          57539
   df_rt_neval_tk_fn : $e0df          57567
   df_rt_neval_tk_op : $e0e9          57577
  df_rt_neval_tk_opp : $e0e8          57576
           df_rt_new : $e844          59460
          df_rt_next : $e9ae          59822
     df_rt_nextdatum : $ea50          59984
      df_rt_nextstat : $e4a4          58532
   df_rt_nextstat_dn : $e4ce          58574
  df_rt_nextstat_err : $e4ca          58570
   df_rt_nextstat_ln : $e4b9          58553
    df_rt_next_check : $e9fe          59902
      df_rt_next_err : $ea0b          59915
      df_rt_noif_err : $e92b          59691
df_rt_openforbinload : $f206          61958
df_rt_openforbinsave : $f1fd          61949
            df_rt_or : $e72f          59183
         df_rt_paper : $ec9d          60573
    df_rt_parm_2ints : $e368          58216
    df_rt_parm_3ints : $e37f          58239
    df_rt_parm_4ints : $e3a2          58274
    df_rt_parm_5ints : $e3d1          58321
    df_rt_parse_file : $f1b1          61873
          df_rt_peek : $f333          62259
         df_rt_pixel : $f3ef          62447
       df_rt_pixmode : $ec91          60561
          df_rt_play : $f16b          61803
          df_rt_plot : $ec05          60421
       df_rt_plotstr : $ec38          60472
     df_rt_plotstrch : $ec49          60489
   df_rt_plotstrdone : $ec78          60536
    df_rt_plot_h_int : $ec2f          60463
    df_rt_plot_h_str : $ec66          60518
         df_rt_point : $eca7          60583
          df_rt_poke : $f110          61712
      df_rt_pop_stat : $e4e2          58594
   df_rt_pop_stat_go : $e579          58745
         df_rt_print : $ed05          60677
       df_rt_printat : $ecfb          60667
       df_rt_println : $ed42          60738
    df_rt_print_done : $ed3f          60735
  df_rt_print_gotstr : $ed33          60723
     df_rt_print_num : $ea35          59957
     df_rt_print_str : $ea3c          59964
  df_rt_print_string : $ed39          60729
  df_rt_print_str_ch : $ea45          59973
AS65 Assembler for R6502 [1.42].                                     Page   12
---------------------------------- bank0.s -----------------------------------

df_rt_print_str_done : $ea4f          59983
      df_rt_print_ws : $ed08          60680
          df_rt_proc : $f57f          62847
     df_rt_proc_addr : $f5a9          62889
    df_rt_proc_local : $f6d6          63190
df_rt_proc_local_load : $f6dd          63197
  df_rt_proc_parmerr : $f57d          62845
df_rt_proc_parm_done : $f5c8          62920
df_rt_proc_parm_none : $f5c9          62921
df_rt_proc_push_parm : $f5b4          62900
df_rt_proc_unloadvar : $f6b5          63157
df_rt_proc_unload_done : $f6d5          63189
  df_rt_proc_unlocal : $f6af          63151
     df_rt_push_stat : $e4d6          58582
     df_rt_putintres : $e66a          58986
          df_rt_read : $eaf1          60145
      df_rt_readbyte : $f334          62260
 df_rt_readbyte_skip : $f34b          62283
     df_rt_readdatum : $ea9a          60058
     df_rt_read_done : $eb0a          60170
 df_rt_read_find_var : $eaf3          60147
         df_rt_renum : $edb1          60849
      df_rt_renum_do : $edc5          60869
    df_rt_renum_next : $ede4          60900
      df_rt_renum_ok : $edc1          60865
  df_rt_renum_update : $edcc          60876
        df_rt_repeat : $ea0d          59917
         df_rt_reset : $f31b          62235
        df_rt_return : $f6a8          63144
         df_rt_right : $f4c9          62665
           df_rt_rnd : $f34e          62286
     df_rt_rnd_noeor : $f364          62308
       df_rt_rnd_set : $f36b          62315
           df_rt_run : $ed9c          60828
     df_rt_run_token : $e495          58517
          df_rt_sadd : $ea34          59956
       df_rt_sassign : $ed61          60769
          df_rt_save : $f263          62051
       df_rt_savebin : $f2f0          62192
  df_rt_savebin_byte : $f2fe          62206
   df_rt_savebin_inc : $f308          62216
          df_rt_scrn : $f3e0          62432
           df_rt_seq : $e81d          59421
         df_rt_seval : $e14a          57674
    df_rt_seval_copy : $e1a6          57766
    df_rt_seval_done : $e1c9          57801
     df_rt_seval_esc : $e174          57716
df_rt_seval_esc_proc : $e1c7          57799
df_rt_seval_esc_strlit : $e1c1          57793
 df_rt_seval_esc_var : $e1a2          57762
df_rt_seval_nextbyte : $e1bc          57788
    df_rt_seval_optk : $e158          57688
      df_rt_seval_tk : $e182          57730
   df_rt_seval_tk_fn : $e19b          57755
   df_rt_seval_tk_op : $e197          57751
           df_rt_sgt : $e814          59412
          df_rt_sgte : $e7ff          59391
df_rt_skipinitdataptr : $ea88          60040
 df_rt_skipnestendif : $e909          59657
    df_rt_skipnestif : $e8fc          59644
       df_rt_skip_ws : $e550          58704
  df_rt_skip_ws_loop : $e553          58707
AS65 Assembler for R6502 [1.42].                                     Page   13
---------------------------------- bank0.s -----------------------------------

           df_rt_slt : $e80d          59405
          df_rt_slte : $e7f2          59378
    df_rt_snd_common : $f11a          61722
           df_rt_sne : $e806          59398
         df_rt_sound : $f143          61763
df_rt_sound_env_skip : $f140          61760
   df_rt_sound_noise : $f14d          61773
       df_rt_sprchar : $f541          62785
        df_rt_sprhit : $f569          62825
df_rt_sprhit_inactive : $f577          62839
       df_rt_sprinit : $f560          62816
      df_rt_sprmulti : $f563          62819
        df_rt_sprpos : $f54b          62795
        df_rt_sprupd : $f557          62807
         df_rt_stick : $f3c2          62402
 df_rt_strlen_common : $f42d          62509
  df_rt_strlen_count : $f433          62515
      df_rt_str_comp : $e824          59428
 df_rt_str_comp_byte : $e829          59433
   df_rt_str_comp_eq : $e83e          59454
df_rt_str_comp_false : $e7f9          59385
   df_rt_str_comp_gt : $e83b          59451
   df_rt_str_comp_lt : $e838          59448
 df_rt_str_comp_true : $e7fc          59388
    df_rt_str_cpy_ch : $f44d          62541
   df_rt_str_extract : $f43a          62522
           df_rt_sub : $e684          59012
          df_rt_sval : $e14e          57678
          df_rt_text : $ec8b          60555
         df_rt_tload : $f1d5          61909
      df_rt_tokenjmp : $e582          58754
          df_rt_true : $e774          59252
         df_rt_tsave : $f1bb          61883
df_rt_unexpected_end : $e488          58504
         df_rt_until : $ea15          59925
df_rt_untilnext_done : $ea2a          59946
     df_rt_until_err : $ea32          59954
           df_rt_val : $f527          62759
       df_rt_val_err : $f53d          62781
          df_rt_wait : $ece2          60642
  df_rt_wait_counter : $ece6          60646
   df_rt_wait_skiphi : $ecf2          60658
     df_rt_wait_tick : $ece8          60648
          df_rt_wend : $e8aa          59562
      df_rt_wend_end : $e8a8          59560
      df_rt_wend_err : $e8be          59582
         df_rt_while : $e847          59463
     df_rt_while_cmd : $e87d          59517
    df_rt_while_done : $e857          59479
         df_sevalptr : $007a            122
    df_show_err_done : $f91a          63770
     df_show_err_fin : $f8f9          63737
    df_show_err_find : $f8a4          63652
   df_show_err_found : $f8c0          63680
  df_show_err_linnum : $f8e0          63712
    df_show_err_skip : $f8ac          63660
               df_sp : $005f             95
          df_starend : $0074            116
         df_starstrt : $0072            114
          df_strbuff : $0078            120
           df_stridx : $0079            121
      df_str_src_end : $f462          62562
AS65 Assembler for R6502 [1.42].                                     Page   14
---------------------------------- bank0.s -----------------------------------

        df_st_malloc : $f774          63348
df_st_typemismatcherr : $f760          63328
           df_symini : $0084            132
           df_symoff : $0083            131
           df_symtab : $0081            129
         df_tk_abort : $de64          56932
           df_tk_add : $de64          56932
           df_tk_and : $de64          56932
           df_tk_asc : $de34          56884
           df_tk_asl : $de64          56932
 df_tk_asm_addr_mode : $fa0b          64011
df_tk_asm_addr_mode_ok : $f9fa          63994
df_tk_asm_addr_mode_1 : $fa20          64032
df_tk_asm_addr_mode_2 : $fa2a          64042
df_tk_asm_checknexttok : $f9b3          63923
df_tk_asm_checktokch : $f9b5          63925
        df_tk_asm_db : $ddcf          56783
        df_tk_asm_ds : $de6a          56938
        df_tk_asm_dw : $ddcf          56783
df_tk_asm_exec_parser : $f9fc          63996
df_tk_asm_foundsymend : $f9db          63963
  df_tk_asm_matchtok : $f9a5          63909
  df_tk_asm_mnemonic : $f99a          63898
       df_tk_asm_opt : $de6a          56938
       df_tk_asm_org : $de6a          56938
df_tk_asm_parse_command : $f977          63863
df_tk_asm_parse_command_err : $f999          63897
df_tk_asm_parse_command_symbol : $f9a0          63904
  df_tk_asm_symfound : $f9ee          63982
df_tk_asm_symnextentry : $f9cc          63948
df_tk_asm_symnomatch : $f9ca          63946
  df_tk_asm_tokenjmp : $ffd3          65491
        df_tk_assign : $dd77          56695
         df_tk_bload : $de70          56944
          df_tk_body : $d9c0          55744
         df_tk_bsave : $de7a          56954
          df_tk_call : $de56          56918
      df_tk_callproc : $de27          56871
          df_tk_char : $d7b7          55223
      df_tk_char_err : $d75f          55135
         df_tk_chdir : $de6a          56938
  df_tk_checknexttok : $da3d          55869
    df_tk_checktokch : $da5a          55898
           df_tk_chr : $de34          56884
        df_tk_circle : $de7a          56954
     df_tk_closebrkt : $de39          56889
           df_tk_cls : $de64          56932
        df_tk_colour : $de7a          56954
       df_tk_comment : $dd80          56704
  df_tk_comment_done : $dd8b          56715
         df_tk_const : $d7f5          55285
     df_tk_const_err : $d815          55317
df_tk_const_try_char : $d80e          55310
 df_tk_const_try_num : $d804          55300
 df_tk_const_try_str : $d807          55303
        df_tk_cursor : $de6a          56938
          df_tk_data : $ddcf          56783
     df_tk_data_done : $ddcd          56781
          df_tk_deek : $de34          56884
           df_tk_def : $de08          56840
           df_tk_del : $de6a          56938
           df_tk_dim : $dde6          56806
AS65 Assembler for R6502 [1.42].                                     Page   15
---------------------------------- bank0.s -----------------------------------

           df_tk_dir : $de64          56932
           df_tk_div : $de64          56932
          df_tk_doke : $de70          56944
          df_tk_done : $d9e7          55783
       df_tk_elapsed : $de3f          56895
          df_tk_else : $de64          56932
        df_tk_elseif : $de6a          56938
        df_tk_enddef : $de64          56932
         df_tk_endif : $de64          56932
           df_tk_eor : $de64          56932
            df_tk_eq : $de64          56932
         df_tk_error : $dd75          56693
      df_tk_errortab : $f7d1          63441
        df_tk_error2 : $de32          56882
   df_tk_error_atpos : $f878          63608
   df_tk_error_error : $f87e          63614
  df_tk_error_inline : $f86e          63598
   df_tk_exec_parser : $da02          55810
        df_tk_expect : $d753          55123
      df_tk_expectok : $d751          55121
  df_tk_expecttokret : $d76c          55148
    df_tk_expect_tok : $d761          55137
df_tk_expect_tok_err : $d76d          55149
df_tk_expect_tok_fatal : $d773          55155
    df_tk_expression : $d953          55635
     df_tk_expre_err : $d95e          55646
     df_tk_expr_more : $ddd4          56788
           df_tk_for : $de0e          56846
      df_tk_for_done : $de25          56869
   df_tk_foundsymend : $da89          55945
           df_tk_get : $de34          56884
       df_tk_get_buf : $d6ce          54990
  df_tk_get_buf_null : $d6d8          55000
            df_tk_gt : $de64          56932
           df_tk_gte : $de64          56932
         df_tk_hchar : $de7a          56954
           df_tk_hex : $de34          56884
         df_tk_himem : $de6a          56938
         df_tk_hires : $de64          56932
            df_tk_if : $de6a          56938
           df_tk_imm : $fa40          64064
      df_tk_indirect : $fa43          64067
 df_tk_indirect_done : $fa68          64104
    df_tk_indirect_y : $fa57          64087
           df_tk_ink : $de6a          56938
         df_tk_input : $dddd          56797
       df_tk_isalpha : $d716          55062
    df_tk_isalphanum : $d723          55075
 df_tk_isalpha_false : $d713          55059
         df_tk_isbin : $d6f7          55031
    df_tk_isbin_true : $d700          55040
       df_tk_isdigit : $d6ec          55020
 df_tk_isdigit_false : $d6f5          55029
         df_tk_isEOS : $d965          55653
         df_tk_ishex : $d701          55041
   df_tk_ishex_false : $d713          55059
   df_tk_ishex_truep : $d711          55057
        df_tk_isproc : $d729          55081
   df_tk_isproc_true : $d72e          55086
          df_tk_isws : $d74c          55116
    df_tk_isws_false : $d751          55121
          df_tk_left : $de4a          56906
AS65 Assembler for R6502 [1.42].                                     Page   16
---------------------------------- bank0.s -----------------------------------

           df_tk_len : $de34          56884
          df_tk_line : $de83          56963
       df_tk_linenum : $da11          55825
        df_tk_lineto : $de70          56944
    df_tk_line_empty : $d9fe          55806
          df_tk_list : $ddb1          56753
df_tk_listp_procname : $dd8d          56717
df_tk_listp_procname_ch : $dd9c          56732
df_tk_listp_procname_err : $ddaf          56751
df_tk_listp_procname_ok : $ddad          56749
     df_tk_list_done : $ddc0          56768
     df_tk_list_line : $ddbd          56765
    df_tk_list_procs : $ddb6          56758
          df_tk_load : $de6a          56938
         df_tk_local : $ddf7          56823
      df_tk_localvar : $d849          55369
 df_tk_localvar_cont : $d84f          55375
           df_tk_lsr : $de64          56932
            df_tk_lt : $de64          56932
           df_tk_lte : $de64          56932
      df_tk_matchtok : $da30          55856
df_tk_matchtok_skip_op : $da56          55894
           df_tk_mem : $de34          56884
           df_tk_mid : $de50          56912
           df_tk_mod : $de64          56932
       df_tk_monitor : $de64          56932
          df_tk_mult : $de64          56932
         df_tk_music : $de83          56963
         df_tk_narry : $d8d3          55507
     df_tk_narry_end : $d8e0          55520
         df_tk_nbrkt : $d8e5          55525
            df_tk_ne : $de64          56932
           df_tk_new : $de64          56932
          df_tk_next : $de64          56932
     df_tk_next_expr : $ddcf          56783
           df_tk_nop : $d93e          55614
     df_tk_nop_false : $d8fd          55549
       df_tk_not_eos : $d95d          55645
         df_tk_nterm : $d8f2          55538
    df_tk_nterm_cont : $d8ff          55551
    df_tk_nterm_done : $d8fd          55549
     df_tk_nterm_err : $d93c          55612
    df_tk_nterm_proc : $d8ed          55533
   df_tk_nterm_tryfn : $d90c          55564
df_tk_nterm_try_const : $d936          55606
df_tk_nterm_try_proc : $d922          55586
 df_tk_nterm_try_var : $d92e          55598
           df_tk_num : $d775          55157
       df_tk_num_bin : $d7a6          55206
       df_tk_num_err : $d75f          55135
    df_tk_num_hexbin : $d796          55190
   df_tk_num_makeint : $d7a1          55201
       df_tk_num_put : $d7aa          55210
            df_tk_or : $de64          56932
         df_tk_paper : $de6a          56938
          df_tk_parm : $d837          55351
 df_tk_parm_skip_var : $d844          55364
    df_tk_parseerror : $da00          55808
 df_tk_parse_command : $d97f          55679
df_tk_parse_command_done : $d995          55701
df_tk_parse_command_err : $d996          55702
df_tk_parse_user_proc : $d975          55669
AS65 Assembler for R6502 [1.42].                                     Page   17
---------------------------------- bank0.s -----------------------------------

          df_tk_peek : $de34          56884
      df_tk_peek_buf : $d6c8          54984
         df_tk_pixel : $de4a          56906
       df_tk_pixmode : $de6a          56938
          df_tk_play : $de83          56963
          df_tk_plot : $de7a          56954
         df_tk_point : $de70          56944
          df_tk_poke : $de70          56944
     df_tk_preassign : $dd66          56678
         df_tk_print : $ddc8          56776
       df_tk_printat : $ddc2          56770
       df_tk_println : $ddc8          56776
    df_tk_print_done : $ddcd          56781
          df_tk_proc : $d85f          55391
     df_tk_proc_call : $d89b          55451
    df_tk_proc_comma : $d8b5          55477
      df_tk_proc_err : $d8d1          55505
     df_tk_proc_errp : $d8d0          55504
   df_tk_proc_noparm : $d8be          55486
    df_tk_proc_parms : $d88e          55438
df_tk_proc_skip_args : $d8ce          55502
df_tk_proc_skip_call : $d8a4          55460
  df_tk_put_overflow : $d6e5          55013
       df_tk_put_tok : $d6d9          55001
          df_tk_read : $dde6          56806
         df_tk_renum : $de7a          56954
        df_tk_repeat : $de64          56932
         df_tk_reset : $de29          56873
        df_tk_return : $de66          56934
         df_tk_right : $de4a          56906
           df_tk_rnd : $de34          56884
           df_tk_run : $de64          56932
          df_tk_save : $de6a          56938
          df_tk_scrn : $de4a          56906
       df_tk_skip_ws : $d72f          55087
         df_tk_sound : $de7a          56954
       df_tk_sprchar : $de70          56944
        df_tk_sprhit : $de34          56884
       df_tk_sprinit : $de64          56932
     df_tk_spritepos : $de7a          56954
      df_tk_sprmulti : $de70          56944
        df_tk_sprpos : $de7a          56954
        df_tk_sprupd : $de64          56932
         df_tk_stick : $de39          56889
           df_tk_str : $d7d3          55251
      df_tk_strip_ws : $d73f          55103
        df_tk_str_ch : $d7db          55259
       df_tk_str_don : $d7ec          55276
       df_tk_str_err : $d7f3          55283
           df_tk_sub : $de64          56932
      df_tk_sws_done : $d74b          55115
     df_tk_sws_loop1 : $d73f          55103
      df_tk_symfound : $da9a          55962
df_tk_symfound_final : $daaa          55978
  df_tk_symnextentry : $da7a          55930
    df_tk_symnomatch : $da78          55928
   df_tk_symnomatchp : $da77          55927
          df_tk_text : $de64          56932
         df_tk_tload : $de6a          56938
      df_tk_tokenjmp : $dc43          56387
     df_tk_tokentype : $dd05          56581
df_tk_tok_expression : $d95f          55647
AS65 Assembler for R6502 [1.42].                                     Page   18
---------------------------------- bank0.s -----------------------------------

    df_tk_try_assign : $d9e2          55778
   df_tk_try_command : $d9db          55771
         df_tk_tsave : $de6a          56938
         df_tk_until : $de6a          56938
           df_tk_val : $de34          56884
           df_tk_var : $d817          55319
        df_tk_var_ck : $d82d          55341
      df_tk_var_cont : $d81d          55325
    df_tk_var_noarry : $d7f1          55281
         df_tk_vpeek : $de34          56884
          df_tk_wait : $de6a          56938
          df_tk_wend : $de64          56932
         df_tk_while : $de6a          56938
       df_tk_ws_done : $d73e          55102
      df_tk_ws_loop1 : $d72f          55087
        df_tk_2parms : $de70          56944
        df_tk_3parms : $de7a          56954
        df_tk_4parms : $de83          56963
          df_tmpptra : $00a1            161
          df_tmpptrb : $00a3            163
          df_tmpptrc : $00a5            165
          df_tmpptrd : $00a7            167
          df_tmpptre : $00a9            169
              df_tok : $0480           1152
          df_tokbuff : $0480           1152
        df_tokensyms : $dab2          55986
           df_tokoff : $007d            125
       df_trap_error : $f885          63621
  df_trap_go_monitor : $f89f          63647
     df_trap_monitor : $f923          63779
      df_trap_normal : $f8a2          63650
           df_varcnt : $0071            113
      df_var_analyse : $d5ed          54765
df_var_analyse_chk_arry : $d645          54853
df_var_analyse_chk_dollar : $d636          54838
df_var_analyse_chk_post : $d625          54821
  df_var_analyse_err : $d61b          54811
df_var_analyse_fatal_err : $d623          54819
   df_var_analyse_ok : $d68b          54923
   df_var_check_type : $d558          54616
         df_var_find : $d51c          54556
   df_var_findcreate : $d65f          54879
df_var_findcreate_copy : $d6af          54959
df_var_findcreate_create : $d678          54904
df_var_findcreate_err : $d689          54921
df_var_findcreate_errp : $d688          54920
df_var_findcreate_found : $d671          54897
  df_var_find_no_vnt : $d584          54660
    df_var_find_true : $d58a          54666
df_var_initialise_var : $d698          54936
 df_var_insert_space : $d592          54674
    df_var_match_vnt : $d52c          54572
 df_var_match_vnt_do : $d538          54584
df_var_match_vnt_sym : $d53c          54588
    df_var_move_byte : $d5b5          54709
 df_var_move_byte_do : $d5c1          54721
df_var_move_byte_fin : $d5d2          54738
     df_var_not_arry : $d656          54870
     df_var_not_proc : $d5ff          54783
df_var_type_countlen : $d602          54786
df_var_type_countlen_alphanum : $d612          54802
df_var_type_countlen_done : $d617          54807
AS65 Assembler for R6502 [1.42].                                     Page   19
---------------------------------- bank0.s -----------------------------------

df_var_vnt_entry_end : $d56f          54639
df_var_vnt_sym_nomatch : $d562          54626
     df_var_zero_vnt : $d6a4          54948
           df_vntend : $006b            107
          df_vntstrt : $0069            105
           df_vvtend : $006f            111
          df_vvtstrt : $006d            109
               errno : $005d             93
 fd_cload_getname_pc : $c585          50565
 fd_csave_getname_pc : $c5da          50650
     fd_getname_addr : $0400           1024
               grc_d : $0043             67   *
               grc_r : $003f             63   *
               grc_x : $0040             64   *
              grc_x0 : $003d             61   *
               grc_y : $0042             66   *
              grc_y0 : $003e             62   *
              grl_dx : $0041             65   *
              grl_dy : $0042             66   *
               grl_p : $004b             75   *
            grl_sinx : $004a             74   *
            grl_siny : $004d             77   *
            grl_xyyx : $0043             67   *
              grl_x0 : $003d             61   *
              grl_x1 : $003f             63   *
              grl_y0 : $003e             62   *
              grl_y1 : $0040             64   *
             grl_2dx : $0044             68   *
            grl_2dxy : $0048             72   *
             grl_2dy : $0046             70   *
             gr_char : $0003              3
  gr_check_font_copy : $cc6d          52333
gr_check_font_copy_done : $cc84          52356
           gr_circle : $d05d          53341
      gr_circle_done : $d09a          53402
    gr_circle_d_lte0 : $d08d          53389
      gr_circle_plot : $d06a          53354
    gr_circle_points : $d09b          53403
              gr_cls : $cd6b          52587
          gr_cls_col : $cd8b          52619
          gr_cls_row : $cd77          52599
    gr_cls_skip_marg : $cd87          52615
        gr_copy_byte : $cc44          52292
         gr_copy_mem : $cc3a          52282
         gr_cur_down : $ceb6          52918
         gr_cur_left : $ce98          52888
          gr_cur_ptr : $000d             13
        gr_cur_right : $ce86          52870
  gr_cur_skip_at_bot : $cec2          52930
 gr_cur_skip_at_left : $cea7          52903
   gr_cur_skip_at_tl : $ceab          52907
           gr_cur_up : $ceac          52908
            gr_cur_x : $000b             11
            gr_cur_y : $000c             12
              gr_del : $cec3          52931
         gr_geom_tmp : $0016             22
              gr_get : $cdd4          52692
       gr_getXY_base : $cdb1          52657
          gr_get_key : $cecb          52939
        gr_get_key_2 : $cecf          52943
            gr_hchar : $cf6a          53098
   gr_hchar_copyline : $cfc0          53184
AS65 Assembler for R6502 [1.42].                                     Page   20
---------------------------------- bank0.s -----------------------------------

gr_hchar_copyline_nx : $cffd          53245
 gr_hchar_copyline_0 : $cfe8          53224
 gr_hchar_copyline_2 : $cfd8          53208
    gr_hchar_getfont : $cf9b          53147
       gr_hchar_mask : $cf93          53139
    gr_hchar_rot1bit : $cfa5          53157
gr_hchar_rot1bit_bcc : $cfb0          53168
 gr_hchar_rot1bit_nx : $cfb5          53173
          gr_hires_x : $0011             17
          gr_hires_y : $0012             18
         gr_hi_start : $0001              1
             gr_init : $cc54          52308
        gr_init_font : $cc24          52260
        gr_init_geom : $cc85          52357
   gr_init_geom_done : $cc84          52356
       gr_init_hires : $ccec          52460
gr_init_hires_tables : $cd25          52517
  gr_init_screen_txt : $ccd3          52435
     gr_init_tab_col : $cd53          52563
gr_init_tab_col_skip : $cd65          52581
     gr_init_tab_row : $cd2f          52527
              gr_ink : $0013             19
    gr_key_check_key : $cedb          52955
      gr_key_got_key : $cef2          52978
       gr_key_no_key : $cefd          52989
    gr_key_skip_copy : $cee3          52963
      gr_key_tidy_up : $cef4          52980
             gr_line : $d113          53523
        gr_line_done : $d1ed          53741
       gr_line_neg_p : $d1dd          53725
       gr_line_pixel : $d1a6          53670
 gr_line_skip_dx_neg : $d131          53553
 gr_line_skip_dy_neg : $d13e          53566
   gr_line_skip_left : $d16e          53614
gr_line_skip_xy_swap : $d15e          53598
   gr_line_skip_y_up : $d176          53622
     gr_line_yx_skip : $d1b2          53682
           gr_margin : $0015             21
             gr_mode : $0000              0
           gr_new_ln : $ce6e          52846
       gr_nl_skip_nl : $ce83          52867
       gr_no_special : $cf12          53010
      gr_offset_40hi : $d20a          53770
      gr_offset_40lo : $d1ee          53742
            gr_paper : $0014             20
            gr_pitch : $0010             16
            gr_pixel : $d028          53288
          gr_pixmode : $000f             15
             gr_plot : $cdc1          52673
            gr_point : $d030          53296
       gr_point_done : $d05c          53340
        gr_point_eor : $d058          53336
      gr_point_setup : $d010          53264
      gr_point_write : $d05a          53338
        gr_printable : $cf36          53046
        gr_print_msg : $cf55          53077
   gr_print_msg_done : $cf65          53093
   gr_print_msg_loop : $cf5b          53083
  gr_process_special : $cf1b          53019
              gr_put : $cdc9          52681
         gr_put_byte : $cf01          52993
     gr_put_byte_low : $cf13          53011
AS65 Assembler for R6502 [1.42].                                     Page   21
---------------------------------- bank0.s -----------------------------------

           gr_screen : $0018             24
         gr_scrngeom : $0011             17
    gr_scrngeom_base : $cc94          52372
   gr_scrngeom_hires : $ccb4          52404
    gr_scrngeom_text : $cca1          52385
      gr_scroll_char : $ce2c          52780
    gr_scroll_cpy_ln : $ce29          52777
  gr_scroll_erase_ln : $ce64          52836
      gr_scroll_marg : $ce60          52832
   gr_scroll_routine : $ce77          52855
        gr_scroll_up : $ce0d          52749
          gr_set_cur : $cdda          52698
     gr_set_cur_init : $cddb          52699
     gr_set_cur_skip : $cded          52717
    gr_set_hires_cur : $d023          53283
       gr_special_ch : $cf3c          53052
    gr_special_fn_hi : $cf4d          53069
    gr_special_fn_lo : $cf45          53061
     gr_special_loop : $cf1f          53023
         gr_spr_char : $d29f          53919
         gr_spr_draw : $d27b          53883
    gr_spr_draw_loop : $d27d          53885
    gr_spr_draw_next : $d28a          53898
        gr_spr_erase : $d234          53812
     gr_spr_erase_do : $d23d          53821
   gr_spr_erase_loop : $d236          53814
   gr_spr_erase_next : $d243          53827
          gr_spr_hit : $d2a5          53925
         gr_spr_init : $d226          53798
    gr_spr_init_loop : $d228          53800
   gr_spr_multi_loop : $d2c0          53952
    gr_spr_multi_pos : $d2bc          53948
          gr_spr_new : $d247          53831
     gr_spr_new_loop : $d249          53833
     gr_spr_new_next : $d277          53879
      gr_spr_new_pos : $d250          53840
          gr_spr_pos : $d2af          53935
          gr_spr_put : $d28e          53902
           gr_text_h : $000a             10
        gr_text_size : $0007              7
       gr_text_start : $0005              5
           gr_text_w : $0009              9
              HICHAR : $9800          38912   *
              HISCRN : $a000          40960   *
              HITEXT : $bf68          49000   *
          hex_to_bcd : $c358          50008
 hex_to_bcd_skip_neg : $c36b          50027
           hires_col : $9d90          40336   *
          hires_mask : $9e80          40576   *
        hires_row_hi : $9cc8          40136   *
       hires_row_low : $9c00          39936   *
                 IER : $000e             14   *
                 IFR : $000d             13   *
             IFR_CA1 : $0002              2   *
             IFR_CA2 : $0001              1   *
             IFR_CB1 : $0010             16   *
                IO_0 : $0300            768   *
       inc_kb_timers : $c157          49495
            infinity : $c060          49248
                init : $c4d0          50384
            init_irq : $c0be          49342
       init_keyboard : $c760          51040
AS65 Assembler for R6502 [1.42].                                     Page   22
---------------------------------- bank0.s -----------------------------------

            init_ram : $c4fc          50428
       init_ram_fill : $c508          50440
       init_ram_skip : $c50c          50444
          init_ram_1 : $c504          50436
            init_snd : $d404          54276
       init_snd_regs : $d406          54278
       init_tape_tab : $c548          50504
           init_via0 : $c51e          50462
      init_via0_done : $c530          50480
      init_via0_loop : $c520          50464
       init_via0_tab : $c531          50481
      init_via0_tape : $c51a          50458
              init_2 : $c4d5          50389
             int_add : $d438          54328
             int_div : $d4b9          54457
       int_div_cycle : $d4eb          54507
      int_div_noflip : $d51b          54555
        int_div_skip : $d505          54533
   int_div_skip_negA : $d4d0          54480
   int_div_skip_negB : $d4e3          54499
       int_fast_mult : $d465          54373
 int_fast_mult_cycle : $d475          54389
  int_fast_mult_next : $d486          54406
            int_mult : $d48e          54414
      int_mult_cycle : $d49e          54430
       int_mult_next : $d4b1          54449
             int_sub : $d446          54342
             int_swp : $d454          54356
         int_vdp_fin : $c14c          49484
     int_vdp_handler : $c131          49457
    io_active_device : $c422          50210
          io_address : $0300            768
            io_block : $0601           1537
           io_buf_sz : $c4ae          50350
            io_close : $c454          50260
          io_close_f : $0008              8
        io_copy_data : $c42f          50223
          io_default : $0600           1536
           io_delete : $c457          50263
            io_del_f : $000a             10
          io_devices : $c4b0          50352
          io_device0 : $c4b0          50352
          io_device1 : $c4c0          50368
          io_do_echo : $c477          50295
             io_ext1 : $000c             12
             io_ext2 : $000e             14
         io_get_byte : $0000              0
           io_get_ch : $c448          50248
    io_get_line_byte : $c464          50276
    io_get_line_done : $c491          50321
             io_init : $c417          50199
          io_null_op : $c4ac          50348
        io_open_ext1 : $c45a          50266
        io_open_ext2 : $c45d          50269
           io_open_r : $0004              4
        io_open_read : $c44e          50254
           io_open_w : $0006              6
       io_open_write : $c451          50257
       io_print_done : $c4aa          50346
       io_print_line : $c499          50329
  io_print_line_byte : $c4a0          50336
         io_put_byte : $0002              2
AS65 Assembler for R6502 [1.42].                                     Page   23
---------------------------------- bank0.s -----------------------------------

           io_put_ch : $c44b          50251
        io_read_line : $c460          50272
      io_set_default : $c41f          50207
        io_skip_echo : $c47a          50298
     io_skip_special : $c485          50309
           io_struct : $0010             16
                 irq : $c0e2          49378
             irq_brk : $c104          49412
             irq_fin : $c0fe          49406
           KB_CAPSLK : $0001              1   *
         KB_DEBOUNCE : $0002              2   *
          KB_REP_DEL : $0014             20   *
          KB_REP_TIM : $0003              3   *
            KB_SENSE : $0008              8   *
          kb_any_key : $c792          51090
     kb_any_key_none : $c7aa          51114
  kb_any_key_pressed : $c7ac          51116
      kb_any_key_row : $c79b          51099
              kb_brk : $c877          51319
 kb_check_matrix_col : $c7b7          51127
 kb_check_matrix_row : $c7c1          51137
      kb_check_skip4 : $c7d7          51159
             kb_code : $002b             43
         kb_col_mask : $c917          51479
              kb_deb : $002d             45
          kb_deb_tim : $002e             46
        kb_do_repeat : $c867          51303
          kb_get_key : $c879          51321
          kb_get_try : $c87d          51325
         kb_hw_delay : $c7c6          51142
        kb_in_repeat : $c873          51315
             kb_last : $002a             42
      kb_process_new : $c80e          51214
              kb_raw : $0029             41
         kb_rdel_tim : $0031             49
         kb_read_got : $c7ac          51116
     kb_read_noshift : $c837          51255
     kb_read_nothing : $c7e2          51170
         kb_read_raw : $c7ae          51118
   kb_read_raw_force : $c7b3          51123
     kb_read_raw_got : $c7e6          51174
              kb_rep : $002f             47
          kb_rep_tim : $0030             48
      kb_scan_decode : $c804          51204
     kb_scan_got_key : $c88e          51342
         kb_scan_key : $c7f3          51187
        kb_scan_wait : $c802          51202
        kb_skip_ctrl : $c851          51281
             kb_stat : $002c             44
            kb_stick : $c771          51057
       kb_stick_mask : $c91f          51487
        kb_stick_pos : $c77d          51069
       kb_store_last : $c86f          51311
      kb_table_shift : $c8d7          51415
        kb_table_std : $c897          51351
         kernel_init : $c4de          50398
         kernel_test : $c4e7          50407
                main : $c04b          49227
           mem_start : $0713           1811
        mod_sz_asm_e : $fff0          65520
        mod_sz_asm_s : $f977          63863
       mod_sz_bios_e : $d438          54328
AS65 Assembler for R6502 [1.42].                                     Page   24
---------------------------------- bank0.s -----------------------------------

       mod_sz_bios_s : $c000          49152
        mod_sz_cia_e : $c557          50519
        mod_sz_cia_s : $c51a          50458
      mod_sz_dflat_e : $f7d1          63441
      mod_sz_dflat_s : $d51c          54556
      mod_sz_graph_e : $d2d0          53968
      mod_sz_graph_s : $c924          51492
         mod_sz_io_e : $c4d0          50384
         mod_sz_io_s : $c417          50199
     mod_sz_kernel_e : $c51a          50458
     mod_sz_kernel_s : $c000          49152
   mod_sz_language_e : $fff0          65520
   mod_sz_language_s : $d438          54328
       mod_sz_proc_e : $f6ea          63210
       mod_sz_proc_s : $f57d          62845
   mod_sz_progedit_e : $e01d          57373
   mod_sz_progedit_s : $de8f          56975
      mod_sz_rtasm_e : $fd85          64901
      mod_sz_rtasm_s : $fa6a          64106
     mod_sz_rtsubs_e : $f57d          62845
     mod_sz_rtsubs_s : $e66a          58986
    mod_sz_runtime_e : $f6ea          63210
    mod_sz_runtime_s : $e01d          57373
      mod_sz_sound_e : $d438          54328
      mod_sz_sound_s : $d3ed          54253
     mod_sz_sprite_e : $d2d0          53968
     mod_sz_sprite_s : $d226          53798
      mod_sz_tkasm_e : $fa6a          64106
      mod_sz_tkasm_s : $f977          63863
   mod_sz_tokenise_e : $de8f          56975
   mod_sz_tokenise_s : $d6c8          54984
    mod_sz_toksubs_e : $de8f          56975
    mod_sz_toksubs_s : $dd66          56678
        mod_sz_var_e : $d6c8          54984
        mod_sz_var_s : $d51c          54556
          msg_errmsg : $d3ea          54250
     msg_hello_world : $c066          49254
           msg_ready : $d3e8          54248
             NUM_ANY : $0000              0   *
             NUM_BIN : $0003              3   *
             NUM_DEC : $0001              1   *
             NUM_HEX : $0002              2   *
                 nmi : $c519          50457
        null_handler : $c0e1          49377
            null_irq : $c0e0          49376
               num_a : $003d             61
               num_b : $0041             65
             num_buf : $004d             77
             num_tmp : $0049             73
               num_x : $0045             69
             out_bcd : $c3c5          50117
       out_bcd_digit : $c3cd          50125
         out_bcd_fin : $c3ee          50158
        out_bcd_next : $c3df          50143
       out_bcd_print : $c3db          50139
                 PCR : $000c             12   *
                 PRA : $0001              1   *
                PRAH : $000f             15   *
                 PRB : $0000              0   *
        print_a_to_d : $c3f4          50164
print_a_to_d_skip_neg : $c40d          50189
           SND_ADBUS : $030f            783   *
AS65 Assembler for R6502 [1.42].                                     Page   25
---------------------------------- bank0.s -----------------------------------

        SND_DESELECT : $00dd            221   *
            SND_MODE : $030c            780   *
       SND_REG_CHAPH : $0001              1   *
       SND_REG_CHAPL : $0000              0   *
      SND_REG_CHAVOL : $0008              8   *
       SND_REG_CHBPH : $0003              3   *
       SND_REG_CHBPL : $0002              2   *
      SND_REG_CHBVOL : $000a             10   *
       SND_REG_CHCPH : $0005              5   *
       SND_REG_CHCPL : $0004              4   *
        SND_REG_CHNP : $0006              6   *
         SND_REG_CTL : $0007              7   *
      SND_REG_ENVCYC : $000d             13   *
       SND_REG_ENVPH : $000c             12   *
       SND_REG_ENVPL : $000b             11   *
         SND_REG_IOA : $000e             14   *
         SND_REG_IOB : $000f             15   *
         SND_SELREAD : $00df            223   *
      SND_SELSETADDR : $00ff            255   *
        SND_SELWRITE : $00fd            253   *
                  SR : $000a             10   *
               SWBRK : <macro>
             scratch : $0613           1555
          skip_a_f_1 : $c195          49557
          skip_a_f_2 : $c1a4          49572
         skip_kb_deb : $c15d          49501
         skip_kb_rep : $c163          49507
          skip_x_f_1 : $c1b1          49585
          skip_x_f_2 : $c1c6          49606
             snd_get : $c024          49188
        snd_get_note : $d3ed          54253
    snd_get_note_oct : $d3f8          54264
        snd_init_tab : $d410          54288
       snd_music_tab : $d420          54304
       snd_note_done : $d401          54273
             snd_set : $c000          49152
        spr_baseadrh : $b4e0          46304   *
        spr_baseadrl : $b4c0          46272   *
            spr_bgnd : $b4a0          46240   *
             spr_chr : $b480          46208   *
            spr_curX : $b400          46080   *
            spr_curY : $b440          46144   *
            spr_newX : $b420          46112   *
            spr_newY : $b460          46176   *
          str_a_to_x : $c189          49545
   str_d_digits_done : $c2c8          49864
         str_d_error : $c274          49780
      str_d_find_end : $c283          49795
     str_d_found_end : $c290          49808
        str_d_powers : $c2e5          49893
 str_d_process_digit : $c29e          49822
      str_d_skip_neg : $c2df          49887
          str_x_to_a : $c1a6          49574
      str_x_to_a_err : $c1d2          49618
     str_x_to_a_errl : $c1d1          49617
           TAPE_RATE : $00d0            208   *
            TEXTCHAR : $b400          46080   *
            TEXTSCRN : $bb80          48000   *
         TIMER1_RATE : $4e20          20000   *
                T1CH : $0005              5   *
                T1CL : $0004              4   *
                T1LH : $0007              7   *
AS65 Assembler for R6502 [1.42].                                     Page   26
---------------------------------- bank0.s -----------------------------------

                T1LL : $0006              6   *
                T2CH : $0009              9   *
                T2CL : $0008              8   *
             tmp_ahi : $0033             51
             tmp_alo : $0032             50
           tmp_bank1 : $0000              0
           tmp_bank2 : $0001              1
             tmp_bhi : $0035             53
             tmp_blo : $0034             52
             tmp_chi : $0037             55
             tmp_clo : $0036             54
               tmp_d : $0038             56
            tp_back4 : $c568          50536
            tp_block : $0055             85
        tp_block_gap : $c692          50834
      tp_block_gap_1 : $c696          50838
              tp_buf : $0200            512
            tp_close : $c5b8          50616
   tp_close_no_flush : $c5c1          50625
            tp_delay : $0059             89
             tp_flag : $0058             88
        tp_get_block : $c712          50962
  tp_get_block_bytes : $c723          50979
         tp_get_byte : $c6f5          50933
     tp_get_byte_buf : $c702          50946
        tp_get_fname : $c59e          50590
  tp_get_fname_start : $c58f          50575
       tp_get_header : $c598          50584
              tp_idx : $0057             87
             tp_init : $c56d          50541
         tp_io_error : $c75e          51038
       tp_open_bread : $c585          50565
      tp_open_bwrite : $c5d0          50640
      tp_open_common : $c575          50549
         tp_open_msg : $c557          50519
        tp_open_read : $c585          50565
       tp_open_write : $c5d6          50646
 tp_open_write_start : $c5da          50650
      tp_print_block : $c672          50802
        tp_put_block : $c64e          50766
  tp_put_block_bytes : $c664          50788
         tp_put_byte : $c61c          50716
    tp_put_byte_done : $c63f          50751
        tp_put_delay : $c646          50758
         tp_read_bit : $c745          51013
     tp_read_bit_cb1 : $c749          51017
        tp_read_byte : $c731          50993
   tp_read_byte_bits : $c73d          51005
     tp_read_byte_st : $c731          50993
         tp_save_msg : $c560          50528
        tp_write_bit : $c6c0          50880
   tp_write_bit_chk1 : $c6d1          50897
   tp_write_bit_chk2 : $c6e9          50921
     tp_write_bit_t1 : $c6e0          50912
       tp_write_byte : $c69d          50845
   tp_write_byte_bit : $c6a9          50857
tp_write_byte_nodelay : $c6be          50878
      tp_write_fname : $c60e          50702
     tp_write_header : $c605          50693
     tt_csave_end_pc : $c5ce          50638
   tt_getsync_end_pc : $c5b7          50615
  tt_getsync_loop_pc : $c749          51017
AS65 Assembler for R6502 [1.42].                                     Page   27
---------------------------------- bank0.s -----------------------------------

       tt_getsync_pc : $c5b7          50615
   tt_putbyte_end_pc : $c6bf          50879
       tt_putbyte_pc : $c69d          50845
  tt_readbyte_end_pc : $c744          51012
      tt_readbyte_pc : $c731          50993
tt_writeleader_end_pc : $c5f6          50678
   tt_writeleader_pc : $c5f6          50678
     twos_complement : $c349          49993
twos_complement_skip_X : $c357          50007
             UTF_ACK : $0001              1   *
             UTF_BEL : $0007              7   *
             UTF_BRK : $001a             26   *
              UTF_CR : $000d             13   *
             UTF_DEL : $007f            127   *
             UTF_ETX : $0003              3   *
              UTF_FF : $000c             12   *
         UTF_SPECIAL : $0020             32   *
       update_timers : $c14d          49485
          utilPrintA : $c174          49524
       utilPrintCRLF : $c16c          49516
        utilPrintSPC : $c164          49508
           VDP_FLASH : $0010             16   *
           vdp_blank : $0010             16
             vdp_cnt : $0008              8
          vdp_cnt_hi : $0009              9
         vdp_cnt_hi2 : $000a             10
          vdp_curcnt : $000c             12
          vdp_curoff : $000d             13
         vdp_curstat : $000e             14
          vdp_curtim : $000b             11
          vdp_curval : $000f             15
  vdp_fill_vram_loop : $cd0d          52493
 vdp_fill_vram_noinc : $cd15          52501
            vdp_font : $c924          51492
          vdp_font_a : $ca2c          51756
             vec_brk : $0004              4
             vec_irq : $0002              2
        vec_usercia0 : $0006              6
             zp_tmp1 : $00ab            171
             zp_tmp2 : $00ac            172
             zp_tmp3 : $00ad            173
             zp_tmp4 : $00ae            174
             ztmp_24 : $003d             61
          _adcZPWord : <macro>
          _addZPWord : <macro>
           _code_end : $fff0          65520
         _code_start : $c000          49152
          _cpu_stack : $0100            256
          _cpyZPWord : <macro>
              _debug : <macro>
          _decZPWord : <macro>
      _end_zero_page : $00af            175
          _incZPWord : <macro>
       _mod_sz_cmd_e : $d3ed          54253
       _mod_sz_cmd_s : $d2d0          53968
       _PushFalseJmp : <macro>
        _PushTrueJmp : <macro>
             _printA : <macro>
             _printC : <macro>
            _printCA : <macro>
          _printCRLF : <macro>
            _println : <macro>
AS65 Assembler for R6502 [1.42].                                     Page   28
---------------------------------- bank0.s -----------------------------------

        _println_low : <macro>
          _printmsgA : <macro>
            _pullAXY : <macro>
            _pushAXY : <macro>
            _sendcmd : <macro>
          _subZPWord : <macro>
            __6502__ : $0001              1

1657 labels used

15553 lines read, no errors in pass 1.
AS65 Assembler for R6502 [1.42].                                     Page   29
---------------------------------- bank0.s -----------------------------------

c000 =                       	org 0xc000
c000 :                       mod_sz_bios_s
                             	include "kernel/kernel.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  KERNEL.S
                             ;*	Lol, I thought this would become more sophisti
                             ;*	hence the name 'kernel'. But no, it just initi
                             ;*	memory, VIA, sound and screen, before passing 
                             ;*	to main.
                             ;*	References to banks etc. are from ported code 
                             ;*	did do more stuff, namely helping with ROM ban
                             ;*
                             ;************************************************
                             
                             ;* Include all definition and code files in the r
                             	include "inc/includes.i"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  INCLUDES.S
                             ;*  Main include file for key definitions and mac
                             ;*  Many of the settings here are exremely machin
                             ;*  Defines : IO block addresses, VIA port usage,
                             ;*  settings, useful macros, sound chip registers
                             ;*  and ACIA registers.
                             ;*	Of course the Oric doesn't have a VDP or an AC
                             ;*	so this file could be optimised.
                             ;*
                             ;************************************************
                             
                             ;* The IO block is at 0x04000 and decodes up to
                             ;* eight IO addresses, at 0x0080 intervals
                             ;* All eight are not used at the present time:
                             ;* - 0 : VIA 1 (Keyboard)
                             ;* - 1 : VIA 2 (Sound and SD card interface)
                             ;* - 2 : VDP (Video)
                             ;* - 3 : ACIA (Serial)
0300 =                       IO_0		= 0x0300
                             
0010 =                       VDP_FLASH	= 16				;* 32/50 second flash
                             
4e20 =                       TIMER1_RATE	= 1000000 / 50		;* 50 times per secon
00d0 =                       TAPE_RATE	= 0xd0				;* Assumed required FM freque
                             
                             ;* Standard definitions of 6522 registers
                             ;* As found in the datasheets
0000 =                       PRB			= 0x00
0001 =                       PRA			= 0x01
0002 =                       DDRB		= 0x02
0003 =                       DDRA		= 0x03
AS65 Assembler for R6502 [1.42].                                     Page   30
---------------------------------- bank0.s -----------------------------------

0004 =                       T1CL		= 0x04
0005 =                       T1CH		= 0x05
0006 =                       T1LL		= 0x06
0007 =                       T1LH		= 0x07
0008 =                       T2CL		= 0x08
0009 =                       T2CH		= 0x09
000a =                       SR			= 0x0a
000b =                       ACR			= 0x0b
000c =                       PCR			= 0x0c
000d =                       IFR			= 0x0d
000e =                       IER			= 0x0e
000f =                       PRAH		= 0x0f
                             
0001 =                       IFR_CA2		= 0x01
0002 =                       IFR_CA1		= 0x02
0010 =                       IFR_CB1		= 0x10
                             
                             ;* AY-3-8910 definitions
                             ;* The sound chip is accessed through VIA 2
030f =                       SND_ADBUS	= IO_0+PRAH
030c =                       SND_MODE	= IO_0+PCR
                             
                             ; Values for the PCR register - always enable CB1
00df =                       SND_SELREAD			= 0b11011111
00fd =                       SND_SELWRITE		= 0b11111101
00ff =                       SND_SELSETADDR		= 0b11111111
00dd =                       SND_DESELECT		= 0b11011101
                             
0000 =                       SND_REG_CHAPL	= 0x00
0001 =                       SND_REG_CHAPH	= 0x01
0002 =                       SND_REG_CHBPL	= 0x02
0003 =                       SND_REG_CHBPH	= 0x03
0004 =                       SND_REG_CHCPL	= 0x04
0005 =                       SND_REG_CHCPH	= 0x05
0006 =                       SND_REG_CHNP	= 0x06
0007 =                       SND_REG_CTL		= 0x07
0008 =                       SND_REG_CHAVOL	= 0x08
0009 =                       SND_REG_CHBVOL	= 0x09
000a =                       SND_REG_CHBVOL	= 0x0a
000b =                       SND_REG_ENVPL	= 0x0b
000c =                       SND_REG_ENVPH	= 0x0c
000d =                       SND_REG_ENVCYC	= 0x0d
                             
000e =                       SND_REG_IOA	= 0x0e
000f =                       SND_REG_IOB	= 0x0f
                             
                             
                             ;* Port B
0008 =                       KB_SENSE	= 0x08			; Input - Bit 3 port A
0001 =                       KB_CAPSLK	= 0x01			; Id of Caps Lock - maps to Le
                             
0003 =                       KB_REP_TIM	= 3 			; Number of VB periods for the 
0014 =                       KB_REP_DEL	= 20			; Number of VB periods before r
0002 =                       KB_DEBOUNCE	= 2				; Number of VB periods before 
                             
0003 =                       UTF_ETX		= 0x03			; Break character
0007 =                       UTF_BEL		= 0x07
0008 =                       CRSR_LEFT	= 0x08
0009 =                       CRSR_RIGHT	= 0x09
000a =                       CRSR_DOWN	= 0x0a
000b =                       CRSR_UP		= 0x0b
0014 =                       CTRL_CAPS	= 0x14			; CTRL-T to toggle caps
AS65 Assembler for R6502 [1.42].                                     Page   31
---------------------------------- bank0.s -----------------------------------

0001 =                       UTF_ACK		= 0x01			; Used for the CTRL-A copy in t
000c =                       UTF_FF		= 0x0c
000d =                       UTF_CR		= 0x0d
001a =                       UTF_BRK		= 0x1a			; Debug - drop in to monitor
007f =                       UTF_DEL		= 0x7f
0020 =                       UTF_SPECIAL = 0x20
                             
0000 =                       CMD_ERR_NOERROR			= 0x00
0001 =                       CMD_ERR_NOTFOUND		= 0x01
0002 =                       CMD_ERR_PARM			= 0x02
0003 =                       CMD_ERR_VAL				= 0x03
                             
                             ;* Number formats for conversion routines
0000 =                       NUM_ANY		= 0x00
0001 =                       NUM_DEC		= 0x01
0002 =                       NUM_HEX		= 0x02
0003 =                       NUM_BIN		= 0x03
                             
                             	
                             
                             ;* USEFUL MACROS HERE
                             
                             ;* Software break to throw errors
                             ;* use like this : SWBRK XX
                             ;* Where XX is the error code
                             SWBRK macro sig
                             	brk
                             	db sig
                             	endm
                             
                             _pushAXY macro
                             	pha
                             	sta tmp_d
                             	txa
                             	pha
                             	tya
                             	pha
                             	lda tmp_d
                             	endm
                             
                             _pullAXY macro
                             	pla
                             	tay
                             	pla
                             	tax
                             	pla
                             	endm
                             
                             _println macro msg
                             	_pushAXY
                             	ldx #lo(msg)
                             	lda #hi(msg)
                             	jsr io_print_line
                             	_pullAXY
                             	endm
                             
                             _println_low macro msg
                             	ldx #lo(msg)
                             	lda #hi(msg)
                             	jsr io_print_line
                             	endm
                             
AS65 Assembler for R6502 [1.42].                                     Page   32
---------------------------------- bank0.s -----------------------------------

                             _printmsgA macro msg
                             	_pushAXY
                             	ldx #lo(msg)
                             	lda #hi(msg)
                             	jsr io_print_line
                             	pla
                             	pha
                             	jsr str_a_to_x
                             	jsr _put_byte
                             	txa
                             	jsr _put_byte
                             	lda #UTF_CR
                             	jsr _put_byte
                             	_pullAXY
                             	endm
                             
                             _printA macro
                             	_pushAXY
                             	jsr str_a_to_x
                             	jsr io_put_ch
                             	txa
                             	jsr io_put_ch
                             	_pullAXY
                             	endm
                             
                             _printCRLF macro
                             	pha
                             	lda #UTF_CR
                             	jsr _put_byte
                             	pla
                             	endm
                             
                             _printC macro ch
                             	pha
                             	lda #ch
                             	jsr io_put_ch
                             	pla
                             	endm
                             
                             _printCA macro
                             	pha
                             	jsr _put_byte
                             	pla
                             	endm
                             
                             _sendcmd macro cmd
                             	_pushAXY
                             	ldx #lo(cmd)
                             	lda #hi(cmd)
                             	jsr sd_sendcmd
                             	_pullAXY
                             	endm
                             
                             _incZPWord macro wordp
                             	inc wordp
                             	db	0xd0, 0x02
                             	inc wordp+1
                             	endm
                             
                             _decZPWord macro wordp
                             	pha
                             	sec
AS65 Assembler for R6502 [1.42].                                     Page   33
---------------------------------- bank0.s -----------------------------------

                             	lda wordp
                             	sbc #1
                             	sta wordp
                             	lda wordp+1
                             	sbc #0
                             	sta wordp+1
                             	pla
                             	endm
                             
                             _cpyZPWord macro worda,wordb
                             	lda worda
                             	sta wordb
                             	lda worda+1
                             	sta wordb+1
                             	endm
                             	
                             _addZPWord macro worda, wordb
                             	clc
                             	lda worda
                             	adc wordb
                             	sta worda
                             	lda worda+1
                             	adc wordb+1
                             	sta worda+1
                             	endm
                             
                             _subZPWord macro worda, wordb
                             	sec
                             	lda worda
                             	sbc wordb
                             	sta worda
                             	lda worda+1
                             	sbc wordb+1
                             	sta worda+1
                             	endm
                             	
                             _adcZPWord macro worda,const
                             	clc
                             	lda worda
                             	adc #const
                             	sta worda
                             	lda worda+1
                             	adc #0
                             	sta worda+1
                             	endm
                             	
                             _debug macro ch
                             	pha
                             	lda #ch
                             	sta 48000
                             	pla
                             	endm
                             	
                             
                             
                             	include "inc/graph.i"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
AS65 Assembler for R6502 [1.42].                                     Page   34
---------------------------------- bank0.s -----------------------------------

                             ;*  credit of original my authorship please!
                             ;*
                             ;*  GRAPH.I
                             ;*  This is the definition file for graphics, spe
                             ;*  The graphics screen handling module.  It is j
                             ;*  structure definition - but this structure is 
                             ;*  record the important attributes of a text scr
                             ;*	This was needed in the previous code due to 32
                             ;*	byte width screens, but Oric only  has 40, so 
                             ;*	could be optimised a little.
                             ;*
                             ;************************************************
                             
                             ; Important screen addresses for the Oric ULA
bb80 =                       TEXTSCRN	=	0xbb80
b400 =                       TEXTCHAR	=	0xb400
a000 =                       HISCRN		=	0xa000
9800 =                       HICHAR		=	0x9800
bf68 =                       HITEXT		=	0xbf68
                             
0000 =                       	struct gr_screen
0000 =                       	db gr_mode					; Text or Hires mode
0001 =                       	dw gr_hi_start				; Address fo hires screen
0003 =                       	dw gr_char					; Start address of charset
0005 =                       	dw gr_text_start			; Start of text memory
0007 =                       	dw gr_text_size				; Number of bytes screen occu
0009 =                       	db gr_text_w				; Number of columns
000a =                       	db gr_text_h				; Number of rows
000b =                       	db gr_cur_x					; Current X position of cursor
000c =                       	db gr_cur_y					; Current Y position of cursor
000d =                       	dw gr_cur_ptr				; VDP address of cursor
000f =                       	db gr_pixmode				; Pixel plot mode (0=Erase, 1=P
0010 =                       	db gr_pitch					; Pixel pitch for char plotting
0011 =                       	db gr_hires_x				; X pos of hires cursor
0012 =                       	db gr_hires_y				; Y pos of hires cursor
0013 =                       	db gr_ink					; Ink colour
0014 =                       	db gr_paper					; Paper colour
0015 =                       	db gr_margin				; Left margin
0016 =                       	dw gr_geom_tmp				; One word of temp storage for
                             	end struct
                             	
                             ; Sprite data stored in free 256 in font space
b400 =                       spr_curX	= TEXTCHAR			; Sprite current X pos
b420 =                       spr_newX	= TEXTCHAR+32		; Sprite new X pos
b440 =                       spr_curY	= TEXTCHAR+64		; Sprite current Y pos
b460 =                       spr_newY	= TEXTCHAR+96		; Sprite new Y pos
b480 =                       spr_chr		= TEXTCHAR+128		; Sprite character
b4a0 =                       spr_bgnd	= TEXTCHAR+160		; Background character u
b4c0 =                       spr_baseadrl= TEXTCHAR+192		; Y low address of sp
b4e0 =                       spr_baseadrh= TEXTCHAR+224		; Y high address of s
                             
                             ; Tables stored in alternate character set area
                             ; only used for high-resolution screen handling
9c00 =                       hires_row_low	=	HICHAR+0x400		; Low byte of row p
9cc8 =                       hires_row_hi	=	hires_row_low+200	; High byte of r
9d90 =                       hires_col		=	hires_row_hi+200	; Pixel to byte col
9e80 =                       hires_mask		=	hires_col+240		; Pixel column to pi
                             
                             
                             	include "io/io.i"
                             ;************************************************
                             ;*
AS65 Assembler for R6502 [1.42].                                     Page   35
---------------------------------- bank0.s -----------------------------------

                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  IO.I
                             ;*  Definitions file for the IO module.  The key 
                             ;*  used by the IO system is defined here.
                             ;*	Some over-engineering here for future possibil
                             ;*
                             ;************************************************
                             
                             ;* General IO structure allows the system to swap
                             ;* different IO devices by using indirect calls t
                             ;* the appropriate routines.
0000 =                       	struct io_struct
0000 =                       	ds	io_get_byte,	2			;* Address of get byte
0002 =                       	ds	io_put_byte,	2			;* Address of put byte
0004 =                       	ds	io_open_r,		2			;* Address of open file for r
0006 =                       	ds	io_open_w,		2			;* Address of open file for w
0008 =                       	ds	io_close_f,		2			;* Address of close file
000a =                       	ds	io_del_f,		2			;* Address of delete file
000c =                       	ds	io_ext1,		2			;* Address of extended function
000e =                       	ds	io_ext2,		2			;* Address of extended function
                             	end struct
                             	include "dflat/dflat.i"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  DFLAT.I
                             ;*  This is the main definitions file for dflat. 
                             ;*  definitions are in here to access the data st
                             ;*  used by dflat.
                             ;*
                             ;************************************************
                             
                             ;* Start dflat program memory
0713 =                       DF_PROGSTART=	mem_start
                             ;* This is the top of usable dflat memory plus 1
9800 =                       DF_MEMTOP	=	0x9800
                             
                             ;* Offset in to tokenised line of length and line
0000 =                       DFTK_LINLEN	=	0x00
0001 =                       DFTK_LINNUM	=	0x01
                             
                             ;* Flags for token, escape value for data types a
0080 =                       DFTK_TOKEN	=	0x80
0020 =                       DFTK_ESCVAL	=	0x20
0000 =                       DFTK_EOL	=	0x00
                             
                             ;* Numeric constants are encoded based on size an
                             ;* user representation.
                             ;* For example the decimal value 16 will be encod
                             ;* DFTK_INTDEC followed by the bytes 0 and 16 to 
                             ;* The same value in binary will be encoded as DF
                             ;* followed by the same 0 and 16 bytes.  This is 
AS65 Assembler for R6502 [1.42].                                     Page   36
---------------------------------- bank0.s -----------------------------------

                             ;* tokenised value to be displayed in original re
                             ;* So in the two examples, they will be shown as 
                             ;* '0x0010' respectively.
0000 =                       DFTK_CHR	=	0x00
0001 =                       DFTK_RESV1	=	0x01
0002 =                       DFTK_RESV2	=	0x02
0003 =                       DFTK_RESV3	=	0x03
0004 =                       DFTK_RESV4	=	0x04
0005 =                       DFTK_BYTDEC	=	0x05
0006 =                       DFTK_BYTHEX = 	0x06
0007 =                       DFTK_BYTBIN =	0x07
0008 =                       DFTK_RESV8	=	0x08
0009 =                       DFTK_INTDEC	=	0x09
000a =                       DFTK_INTHEX =	0x0a
000b =                       DFTK_INTBIN	=	0x0b
000c =                       DFTK_RESVC	=	0x0c
000d =                       DFTK_RESVD	=	0x0d
000e =                       DFTK_RESVE	=	0x0e
000f =                       DFTK_RESVF	=	0x0f
                             
                             ;* String constant, variable and procedure tokens
0010 =                       DFTK_STRLIT	=	0x10
0011 =                       DFTK_VAR	=	0x11
0012 =                       DFTK_PROC	=	0x12
001f =                       DFTK_STEND	=	0x1f
                             
                             ;* Qualifier for non-local parameters passed to a
0026 =                       DFTK_VARPARM=	'&'
                             
                             ;* Variable Value Table (VVT) definitions
                             ;* The VVT records the values of variables define
                             ;* the Variable Name Table (VNT).  When a variabl
                             ;* used, it is added to the VNT, and the position
                             ;* VNT is used as an index in to the VVT.
                             ;* Every VVT entry is 8 bytes - so the VNT index 
                             ;* shifted left 3 bits to get the VVT offset.
                             ;* The VNT grows from top of memory down, the VVT
                             ;* grows from start of VNT down.
                             
                             ;* Index in to each entry of the VVT
0000 =                       DFVVT_TYPE	=	0x00
0001 =                       DFVVT_LO	=	0x01
0002 =                       DFVVT_HI	=	0x02
0003 =                       DFVVT_DIM1	=	0x03
0004 =                       DFVVT_DIM2	=	0x04
0008 =                       DFVVT_SZ	=	0x08	;VVT is aligned to 8 byte blocks
                             
                             ;* The meaning of the DFVVT_TYPE entry
0001 =                       DFVVT_INT	=	0x01
0002 =                       DFVVT_BYT	=	0x02
0004 =                       DFVVT_STR	=	0x04
0008 =                       DFVVT_FLT	=	0x08
0040 =                       DFVVT_PROC	=	0x40
0080 =                       DFVVT_ARRY	=	0x80
                             
                             ;* Flags indicating the meaning of a token
                             ;* A token has the top bit set (0x80), then the
                             ;* remaining bits indicate what it represents.
0001 =                       DFTK_KW		=	0x01
0002 =                       DFTK_FN		=	0x02
0004 =                       DFTK_STROP	=	0x04
0008 =                       DFTK_OP		=	0x08
AS65 Assembler for R6502 [1.42].                                     Page   37
---------------------------------- bank0.s -----------------------------------

0010 =                       DFTK_INT	=	0x10
0020 =                       DFTK_BYT	=	0x20
0040 =                       DFTK_STR	=	0x40
0080 =                       DFTK_FLT	=	0x80
0007 =                       DFTK_OPMSK	=	0x07
00f8 =                       DFTK_RTMSK	= 	0xf8
                             
                             ;* Defines what type of value is on the parameter
                             ;* All numerics are stored as INT, all STR
                             ;* are pointers to the actual string, thus
                             ;* all entries in the parmeter stack are 3 bytes
0001 =                       DFST_INT	=	0x01
0080 =                       DFST_STR	=	0x80
                             
                             ;* Token values of specific commands, used during
                             ;* command processing.
                             ;* ANY CHANGE TO THE ORDER OF KEYWORDS NEEDS TO R
0086 =                       DFRT_DEF	=	0x86
0087 =                       DFRT_ENDDEF	=	0x87
0088 =                       DFRT_RETURN	=	0x88
0089 =                       DFRT_ABORT	=	0x89
008c =                       DFRT_REPEAT	=	0x8c
008e =                       DFRT_FOR	=	0x8e
008f =                       DFRT_NEXT	=	0x8f
0090 =                       DFRT_WHILE	=	0x90
0091 =                       DFRT_WEND	=	0x91
0092 =                       DFRT_IF		=	0x92
0093 =                       DFRT_ELSE	=	0x93
0094 =                       DFRT_ENDIF	=	0x94
0095 =                       DFRT_ELSEIF	=	0x95
0096 =                       DFRT_DATA	=	0x96
0097 =                       DFRT_ASM	=	0x97
                             
                             _PushTrueJmp macro
                             	ldx #0xff
                             	txa
                             	jmp df_st_pushInt
                             	endm
                             
                             _PushFalseJmp macro
                             	ldx #0x00
                             	txa
                             	jmp df_st_pushInt
                             	endm
                             
                             	include "kernel/zeropage.i"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  ZEROPAGE.I
                             ;*  This module name is misleading it is not only
                             ;*  allocations, but also page 2, 3, 4, 5, 6, 7 a
                             ;*  memstart is a handy label that indicates the 
                             ;*  location that we can store dflat programs fro
                             ;*  Zero page is a valuable asset as the 6502 can
                             ;*  this page one cycle quicker than the rest of 
                             ;*  and infact some addressing modes can only use
AS65 Assembler for R6502 [1.42].                                     Page   38
---------------------------------- bank0.s -----------------------------------

                             ;*  Due to the value of zero page, a lot of syste
                             ;*  dflat variables are put here.  But we don't h
                             ;*  luxury for single use variables - so you will
                             ;*  see a lot of temporary sounding names which a
                             ;*  have multiple uses across the code base.
                             ;*
                             ;************************************************
                             
                             	; Zero page declarations
                             	bss
0000 =                       	org 0x0000
                             
0000 =                       tmp_bank1	ds	1		; Temp storage ONLY FOR USE BY BA
0001 =                       tmp_bank2	ds	1		; Temp storage ONLY FOR USE BY BA
                             
                             ; Interrupt routine addresses
0002 =                       vec_irq		 ds	2		; Master IRQ handler
0004 =                       vec_brk		 ds	2		; Master BRK handler
0006 =                       vec_usercia0 ds	2		; Where to jump for CIA0 inter
                             
                             ; VDP parameters
0008 =                       vdp_cnt		ds	1		; VDP interrupt counter
0009 =                       vdp_cnt_hi 	ds	1		; VDP counter high
000a =                       vdp_cnt_hi2	ds	1		; VDP counter high 2
000b =                       vdp_curtim	ds	1		; Cursor blink speed
000c =                       vdp_curcnt	ds	1		; Cursor blink countdown
000d =                       vdp_curoff	ds	1		; Cursor off (0 = On)
000e =                       vdp_curstat	ds	1		; Cursor status
000f =                       vdp_curval	ds	1		; Cursor value on screen
0010 =                       vdp_blank	ds	1		; Screen blank value normally 32
                             
                             ; Screen geometry
0011 =                       gr_scrngeom	ds	gr_screen
                             
                             ;Keyboard parameters
0029 =                       kb_raw  	ds	1		; Raw keyboard code
002a =                       kb_last		ds	1		; Code of last key
002b =                       kb_code 	ds	1		; Converted keyboard code
002c =                       kb_stat		ds	1		; Keyboard status for caps and shi
002d =                       kb_deb		ds	1		; Debounce timer
002e =                       kb_deb_tim  ds	1		; Default debounce delay
002f =                       kb_rep		ds	1		; Keyboard repeat speed timer
0030 =                       kb_rep_tim 	ds	1		; Default repeat speed
0031 =                       kb_rdel_tim	ds	1		; Default repeat delay (until s
                             
0032 =                       tmp_alo 	ds	1		; VDP addresses lo
0033 =                       tmp_ahi 	ds	1		; VDP addresses hi
0034 =                       tmp_blo 	ds	1		; Temp address lo
0035 =                       tmp_bhi		ds	1		; Temp address hi
0036 =                       tmp_clo		ds	1		; Temp address lo
0037 =                       tmp_chi		ds	1		; Temp address hi
0038 =                       tmp_d		ds	1		; Temp storage d
                             
                             ; Raw input/output parameters
0039 =                       buf_lo		ds	1		; Line buffer address low
003a =                       buf_hi		ds	1		; Line buffer address high
003b =                       buf_sz		ds	1		; Buffer size
003c =                       buf_ef		ds	1		; End file / line marker
                             
                             
                             ; ** Integer function storage **
003d =                       ztmp_24					; Start of 24 byte scratch area (all 
AS65 Assembler for R6502 [1.42].                                     Page   39
---------------------------------- bank0.s -----------------------------------

003d =                       num_a		ds	4		; 4 byte primary accumulator
0041 =                       num_b		ds	4		; 4 byte secondary accumulator
0045 =                       num_x		ds	4		; 4 byte x register
0049 =                       num_tmp		ds	4		; 4 byte temp space
004d =                       num_buf		ds	8		; 8 byte string buffer
                             
                             ; ** Tape function storage **
0055 =                       tp_block	ds	2		; Block number (int)
0057 =                       tp_idx		ds	1		; Current buffer index
0058 =                       tp_flag		ds	1		; zero = closed, 1=read, 2=write
0059 =                       tp_delay	ds	2		; Interblock delay
                             
                             ;
                             ; **** INTERPRETER ZERO PAGE ****
                             ;
005b =                       dflat_zp_s
005b =                       dflat_zp_save_s			; ZP save dflat from here
005b =                       df_checkkey	ds	1		; Key check interval counter
005c =                       df_checkmsk	ds	1		; Mask for check key
005d =                       errno		ds	1		; General error condition status
005e =                       df_immed	ds	1		; Immediate mode (0 = not immediat
005f =                       df_sp		ds	1		; Stack pointer after error to resto
0060 =                       df_pc		ds	2		; PC after error to return to
0062 =                       df_brkpc	ds	2		; PC pushed on the stack for BRK
0064 =                       df_brkval	ds	1		; Byte after BRK instruction
0065 =                       df_prgstrt	ds	2		; Start of program code
0067 =                       df_prgend	ds	2		; End of program code
0069 =                       df_vntstrt	ds	2		; Variable name table start
006b =                       df_vntend	ds	2		; Variable name table end
006d =                       df_vvtstrt	ds	2		; Variable value table start
006f =                       df_vvtend	ds	2		; Variable value table end
0071 =                       df_varcnt	ds	1		; Variable counter
0072 =                       df_starstrt	ds	2		; String and array table start
0074 =                       df_starend	ds	2		; String and array table end
0076 =                       df_rtstop	ds	1		; Runtime stack pointer
0077 =                       df_parmtop	ds	1		; Top of parameter stack (grows 
0078 =                       df_strbuff	ds	1		; String expression buffer
0079 =                       df_stridx	ds	1		; Top of string buffer (grows dow
007a =                       df_sevalptr	ds	2		; Pointer to next free char in 
                             
007c =                       df_linoff	ds	1		; Offset in to line buffer
007d =                       df_tokoff	ds	1		; Offset in to tokenised buffer
007e =                       df_eolidx	ds	1		; End of line index (i.e length)
007f =                       df_nxtstidx	ds	1		; Offset to the next statement 
0080 =                       df_curstidx	ds	1		; Offset to the start of curren
0081 =                       df_symtab	ds	2		; Pointer to next free symtab ent
0083 =                       df_symoff	ds	1		; Offset in to token table
0084 =                       df_symini	ds	2		; Start of symtab
0086 =                       df_currlin	ds	2		; Execution current line pointer
0088 =                       df_exeoff	ds	1		; Execution line buffer offset
0089 =                       df_nextlin	ds	2		; Next line to execute
008b =                       df_procmode	ds	1		; Only used during tokenisation
008c =                       df_procargs	ds	1		; Only used during tokenisation
008d =                       df_procloc	ds	1		; Counts the number of local par
008e =                       df_procptr	ds	2		; Pointer to proc vvt slot
0090 =                       df_lineptr	ds	2		; Pointer to line during searche
0092 =                       df_lineidx	ds	1		; Pointer to line index during s
0093 =                       df_ifnest	ds	1		; Global nested if counter
0094 =                       df_currdat	ds	2		; Data current line pointer
0096 =                       df_datoff	ds	1		; Data line buffer offset
0097 =                       df_rnd		ds	2		; Random number seed
                             
AS65 Assembler for R6502 [1.42].                                     Page   40
---------------------------------- bank0.s -----------------------------------

0099 =                       df_asmpc	ds	2		; Assembler program counter
009b =                       df_asmopt	ds	1		; Assembler current option
009c =                       df_asmadmd	ds	1		; Addressing mode
009d =                       df_asmopcde	ds	1		; Current opcode
009e =                       df_asmoprnd	ds	2		; Current operand
00a0 =                       df_asmlen	ds	1		; Instruction length
                             
00a1 =                       dflat_zp_save_e			; Save up to this place
                             
                             ; Temp space for dflat
00a1 =                       df_tmpptra	ds	2		; Temp pointer a
00a3 =                       df_tmpptrb	ds	2		; Temp pointer b
00a5 =                       df_tmpptrc	ds	2		; Temp pointer c
00a7 =                       df_tmpptrd	ds	2		; Temp pointer d
00a9 =                       df_tmpptre	ds	2		; Temp pointer e
                             
00ab =                       dflat_zp_e
                             
00ab =                       zp_tmp1		ds	1		; General zero page temporary
00ac =                       zp_tmp2		ds	1		; General zero page temporary
00ad =                       zp_tmp3		ds	1		; General zero page temporary
00ae =                       zp_tmp4		ds	1		; General zero page temporary
                             
                             ;***** END OF ZERO PAGE *****
00af =                       _end_zero_page
                             
                             ;***** Page 1 is CPU stack ****
0100 =                       	org 0x0100
0100 =                       _cpu_stack
0100 =                       			ds	256		; All of page 1
                             
                             ;***** Page 2 is tape buffer *****
0200 =                       	org 0x0200
0200 =                       tp_buf		ds	256		; Serial input / output line buff
                             
                             ;***** 3 is IO *****
0300 =                       	org 0x0300			; IO mapped to Page 3 on Oric
0300 =                       io_address	ds	256
                             
0400 =                       	org 0x0400			; Page 4 = dflat space
0400 =                       fd_getname_addr			; ** FOR ORICUTRON EMULATOR **
0400 =                       df_linbuff
0400 =                       df_raw		ds	128		; untokenised input line
0480 =                       df_tokbuff
0480 =                       df_tok		ds 	128		; tokenised output line
                             
0500 =                       	org 0x0500			; Page 5 = fixed space for interpre
0500 =                       df_rtstck				; operator stack grow up, runtime gr
0500 =                       df_rtspace	ds	256
                             
                             
                             ;***** NON-ZERO PAGE VARIABLES *****
                             
                             ; Acticve IO device settings
0600 =                       io_default	ds	1		; The default device number
0601 =                       io_block	ds	io_struct
                             
                             
                             ; Dflat top of memory+1 - initialised at boot tim
0611 =                       df_memtop	ds	2
                             
                             ; Scratch area e.g. string and numeric expression
AS65 Assembler for R6502 [1.42].                                     Page   41
---------------------------------- bank0.s -----------------------------------

0613 =                       scratch		ds	256
                             
                             ;***** THIS IS THE START OF FREE SPACE for DFLAT 
0713 =                       mem_start
                             
                             
                             	include "dflat/dflat.i"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  DFLAT.I
                             ;*  This is the main definitions file for dflat. 
                             ;*  definitions are in here to access the data st
                             ;*  used by dflat.
                             ;*
                             ;************************************************
                             
                             ;* Start dflat program memory
0713 =                       DF_PROGSTART=	mem_start
                             ;* This is the top of usable dflat memory plus 1
9800 =                       DF_MEMTOP	=	0x9800
                             
                             ;* Offset in to tokenised line of length and line
0000 =                       DFTK_LINLEN	=	0x00
0001 =                       DFTK_LINNUM	=	0x01
                             
                             ;* Flags for token, escape value for data types a
0080 =                       DFTK_TOKEN	=	0x80
0020 =                       DFTK_ESCVAL	=	0x20
0000 =                       DFTK_EOL	=	0x00
                             
                             ;* Numeric constants are encoded based on size an
                             ;* user representation.
                             ;* For example the decimal value 16 will be encod
                             ;* DFTK_INTDEC followed by the bytes 0 and 16 to 
                             ;* The same value in binary will be encoded as DF
                             ;* followed by the same 0 and 16 bytes.  This is 
                             ;* tokenised value to be displayed in original re
                             ;* So in the two examples, they will be shown as 
                             ;* '0x0010' respectively.
0000 =                       DFTK_CHR	=	0x00
0001 =                       DFTK_RESV1	=	0x01
0002 =                       DFTK_RESV2	=	0x02
0003 =                       DFTK_RESV3	=	0x03
0004 =                       DFTK_RESV4	=	0x04
0005 =                       DFTK_BYTDEC	=	0x05
0006 =                       DFTK_BYTHEX = 	0x06
0007 =                       DFTK_BYTBIN =	0x07
0008 =                       DFTK_RESV8	=	0x08
0009 =                       DFTK_INTDEC	=	0x09
000a =                       DFTK_INTHEX =	0x0a
000b =                       DFTK_INTBIN	=	0x0b
000c =                       DFTK_RESVC	=	0x0c
000d =                       DFTK_RESVD	=	0x0d
000e =                       DFTK_RESVE	=	0x0e
000f =                       DFTK_RESVF	=	0x0f
                             
AS65 Assembler for R6502 [1.42].                                     Page   42
---------------------------------- bank0.s -----------------------------------

                             ;* String constant, variable and procedure tokens
0010 =                       DFTK_STRLIT	=	0x10
0011 =                       DFTK_VAR	=	0x11
0012 =                       DFTK_PROC	=	0x12
001f =                       DFTK_STEND	=	0x1f
                             
                             ;* Qualifier for non-local parameters passed to a
0026 =                       DFTK_VARPARM=	'&'
                             
                             ;* Variable Value Table (VVT) definitions
                             ;* The VVT records the values of variables define
                             ;* the Variable Name Table (VNT).  When a variabl
                             ;* used, it is added to the VNT, and the position
                             ;* VNT is used as an index in to the VVT.
                             ;* Every VVT entry is 8 bytes - so the VNT index 
                             ;* shifted left 3 bits to get the VVT offset.
                             ;* The VNT grows from top of memory down, the VVT
                             ;* grows from start of VNT down.
                             
                             ;* Index in to each entry of the VVT
0000 =                       DFVVT_TYPE	=	0x00
0001 =                       DFVVT_LO	=	0x01
0002 =                       DFVVT_HI	=	0x02
0003 =                       DFVVT_DIM1	=	0x03
0004 =                       DFVVT_DIM2	=	0x04
0008 =                       DFVVT_SZ	=	0x08	;VVT is aligned to 8 byte blocks
                             
                             ;* The meaning of the DFVVT_TYPE entry
0001 =                       DFVVT_INT	=	0x01
0002 =                       DFVVT_BYT	=	0x02
0004 =                       DFVVT_STR	=	0x04
0008 =                       DFVVT_FLT	=	0x08
0040 =                       DFVVT_PROC	=	0x40
0080 =                       DFVVT_ARRY	=	0x80
                             
                             ;* Flags indicating the meaning of a token
                             ;* A token has the top bit set (0x80), then the
                             ;* remaining bits indicate what it represents.
0001 =                       DFTK_KW		=	0x01
0002 =                       DFTK_FN		=	0x02
0004 =                       DFTK_STROP	=	0x04
0008 =                       DFTK_OP		=	0x08
0010 =                       DFTK_INT	=	0x10
0020 =                       DFTK_BYT	=	0x20
0040 =                       DFTK_STR	=	0x40
0080 =                       DFTK_FLT	=	0x80
0007 =                       DFTK_OPMSK	=	0x07
00f8 =                       DFTK_RTMSK	= 	0xf8
                             
                             ;* Defines what type of value is on the parameter
                             ;* All numerics are stored as INT, all STR
                             ;* are pointers to the actual string, thus
                             ;* all entries in the parmeter stack are 3 bytes
0001 =                       DFST_INT	=	0x01
0080 =                       DFST_STR	=	0x80
                             
                             ;* Token values of specific commands, used during
                             ;* command processing.
                             ;* ANY CHANGE TO THE ORDER OF KEYWORDS NEEDS TO R
0086 =                       DFRT_DEF	=	0x86
0087 =                       DFRT_ENDDEF	=	0x87
0088 =                       DFRT_RETURN	=	0x88
AS65 Assembler for R6502 [1.42].                                     Page   43
---------------------------------- bank0.s -----------------------------------

0089 =                       DFRT_ABORT	=	0x89
008c =                       DFRT_REPEAT	=	0x8c
008e =                       DFRT_FOR	=	0x8e
008f =                       DFRT_NEXT	=	0x8f
0090 =                       DFRT_WHILE	=	0x90
0091 =                       DFRT_WEND	=	0x91
0092 =                       DFRT_IF		=	0x92
0093 =                       DFRT_ELSE	=	0x93
0094 =                       DFRT_ENDIF	=	0x94
0095 =                       DFRT_ELSEIF	=	0x95
0096 =                       DFRT_DATA	=	0x96
0097 =                       DFRT_ASM	=	0x97
                             
                             _PushTrueJmp macro
                             	ldx #0xff
                             	txa
                             	jmp df_st_pushInt
                             	endm
                             
                             _PushFalseJmp macro
                             	ldx #0x00
                             	txa
                             	jmp df_st_pushInt
                             	endm
                             
                             	include "dflat/error.i"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  ERROR.I
                             ;*  Error definitions file.
                             ;*  The macro to throw an error is elswhere, but 
                             ;*  It issues a 6502 BRK commmand with the next b
                             ;*  the error code.  The BRK handler then picks u
                             ;*  code and shows the appropriate message plus a
                             ;*  number if a program was running.
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code  
                             
                             ; Error message numbers
0000 =                       DFERR_OK		=	0
0001 =                       DFERR_SYNTAX	=	1
0002 =                       DFERR_TYPEMISM	=	2
0003 =                       DFERR_DIM		=	3
0004 =                       DFERR_UNTIL		=	4
0005 =                       DFERR_NOPROC	=	5
0006 =                       DFERR_PROCPARM	=	6
0007 =                       DFERR_IMMEDIATE	=	7
0008 =                       DFERR_UNCLOSEDIF=	8
0009 =                       DFERR_NOIF		=	9
000a =                       DFERR_NEXTFOR	=	10
000b =                       DFERR_FNAME		=	11
000c =                       DFERR_STRLONG	=	12
000d =                       DFERR_BREAK		=	13
AS65 Assembler for R6502 [1.42].                                     Page   44
---------------------------------- bank0.s -----------------------------------

000e =                       DFERR_NODATA	=	14
000f =                       DFERR_WEND		=	15
0010 =                       DFERR_NOLINE	=	16
0011 =                       DFERR_RETURN	=	17
0012 =                       DFERR_ABORT		=	18
0013 =                       DFERR_QUANTITY	=	19
0014 =                       DFERR_NOORG		=	20
                             
                             
                             
                             
                             
                             ;****************************************
                             ;*	Set 6502 default vectors	*
                             ;****************************************
                             	data				; Set vectors
fffa =                       	org 0xfffa			; Vectors are at these addresses
fffa : 19c5                  	fcw nmi				; 0xfffa : NMI Vector
fffc : d0c4                  	fcw init			; 0xfffc : Reset Vector
fffe : d7c0                  	fcw call_irq_master	; 0xfffe : IRQ Vector
                             
                             	; ROM code
                             	code				;
c000 =                       	org 0xc000			; Start of ROM
                             
c000 :                       _code_start
                             	; Restore current bank always at address c001
c000 :                       mod_sz_kernel_s
                             
                             ;* Include all core code in the right order
                             	include "kernel/snd-low.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  SND-LOW.S
                             ;*	Routines to access the AY-3-8912, which is don
                             ;*	lines of the VIA - CB2 and CA2 for chip select
                             ;*	Port A for data interface. This makes accessin
                             ;*	8912 a bit slow..
                             ;*
                             ;* 	CB2		CA2		Function		CB2=BDIR, CA2=BC1
                             ;*	0		0		Not selected
                             ;*	0		1		Read register in to Port A
                             ;*	1		0		Write register from Port A
                             ;*	1		1		Select register # from Port A
                             ;************************************************
                             
                             ;****************************************
                             ;* snd_set
                             ;* Set AY register X to value A
                             ;* Input : X = Reg no, A = Value
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
c000 :                       snd_set
c000 : 48               [ 3] 	pha
                             
AS65 Assembler for R6502 [1.42].                                     Page   45
---------------------------------- bank0.s -----------------------------------

c001 : a9ff             [ 2] 	lda #0xff				; Set Port A to output
c003 : 8d0303           [ 4] 	sta IO_0+DDRA
                             
c006 : 8e0f03           [ 4] 	stx SND_ADBUS			; Put reg # on Port A (sound bus
                             
c009 : a9ff             [ 2] 	lda #SND_SELSETADDR		; Get ready to select the r
c00b : 8d0c03           [ 4] 	sta SND_MODE			; Latch the reg # on Port A
                             
c00e : a9dd             [ 2] 	lda #SND_DESELECT		; Deselect AY
c010 : 8d0c03           [ 4] 	sta SND_MODE
                             
c013 : 68               [ 4] 	pla						; Get value
c014 : 48               [ 3] 	pha						; but don't lose it
c015 : 8d0f03           [ 4] 	sta SND_ADBUS			; Put reg value on Port A (sound
c018 : a9fd             [ 2] 	lda #SND_SELWRITE		; Select mode for writing dat
c01a : 8d0c03           [ 4] 	sta SND_MODE			; Latch reg value on Port A
                             	
c01d : a9dd             [ 2] 	lda #SND_DESELECT		; Deselect AY
c01f : 8d0c03           [ 4] 	sta SND_MODE
                             
c022 : 68               [ 4] 	pla
                             	
c023 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* snd_get
                             ;* Get AY register X value
                             ;* Input : X = Reg no
                             ;* Output : A = Value
                             ;* Regs affected : None
                             ;****************************************
c024 :                       snd_get
                             
c024 : a9ff             [ 2] 	lda #0xff				; Set Port A to output
c026 : 8d0303           [ 4] 	sta IO_0+DDRA
                             
c029 : 8e0f03           [ 4] 	stx SND_ADBUS			; Put X on the sound bus (X = re
                             
c02c : a9ff             [ 2] 	lda #SND_SELSETADDR		; Get ready to select the r
c02e : 8d0c03           [ 4] 	sta SND_MODE			; Latch the reg # on Port A
                             
c031 : a9dd             [ 2] 	lda #SND_DESELECT		; Deselect AY
c033 : 8d0c03           [ 4] 	sta SND_MODE
                             
c036 : a900             [ 2] 	lda #0x00				; Set Port A to input
c038 : 8d0303           [ 4] 	sta IO_0+DDRA
                             
c03b : a9df             [ 2] 	lda #SND_SELREAD		; Select mode for reading data
c03d : 8d0c03           [ 4] 	sta SND_MODE			; Set read mode on AY
                             
c040 : ad0f03           [ 4] 	lda SND_ADBUS			; Get value in to Y from Port A
c043 : 48               [ 3] 	pha						; Save it to stack
                             	
c044 : a9dd             [ 2] 	lda #SND_DESELECT		; Deselect AY
c046 : 8d0c03           [ 4] 	sta SND_MODE
                             
c049 : 68               [ 4] 	pla						; Get the value off stack
                             	
c04a : 60               [ 6] 	rts
                             
                             
                             	include "kernel/main.s"
AS65 Assembler for R6502 [1.42].                                     Page   46
---------------------------------- bank0.s -----------------------------------

                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  MAIN.S
                             ;*  This is where the main user program is execut
                             ;*  the 'kernel' once the system is initialised a
                             ;*  Today, main does very little - first shows th
                             ;*  boot up message, and then passes control to d
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code
                             
c04b :                       main
                             	_println msg_hello_world
                             
                             
                             
c060 :                       infinity
c060 : 2072df           [ 6] 	jsr df_pg_dflat
c063 : 4c60c0           [ 3] 	jmp infinity
                             
c066 :                       msg_hello_world
                             	;* build.s is generate by the assemble.bat file
                             	;* all it does is echo an assembler line to
                             	;* including the build date in the message.
                             	include "kernel/build.s"
c066 : 4f726963206466..       db "Oric dflat custom ROM\r" 
c07c : 42792040363530..       db "By @6502Nerd (Dolo Miah)\r" 
c095 : 4275696c64203a..       db "Build : 0.12 [BETA]\r" 
c0a9 : 436f7079726967..       db "Copyright (c) 2021\r\r",0 
                             
                             
                             	include "kernel/irq.s"
                             	
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  IRQ.S
                             ;*	This is the IRQ handler
                             ;*	There is only one regular interrupt source whi
                             ;*	T1 timeout on a 50Hz cycle, whose main job is 
                             ;*	flash the cursor and decrement some timers.
                             ;*	But there are handlers for BRK, user and VIA s
                             ;*	By default the user and VIA do nothing, but ca
                             ;*	redirected to user routines.
                             ;*
                             ;************************************************
                             
                             ;* Obviously this can only be done with
                             ;* interrupts disabled!
AS65 Assembler for R6502 [1.42].                                     Page   47
---------------------------------- bank0.s -----------------------------------

c0be :                       init_irq
                             	; Core IRQ handler
c0be : a9e2             [ 2] 	lda #lo(irq)
c0c0 : 8502             [ 3] 	sta vec_irq
c0c2 : a9c0             [ 2] 	lda #hi(irq)
c0c4 : 8503             [ 3] 	sta vec_irq+1
                             	
                             	; Core BRK handler
c0c6 : a904             [ 2] 	lda #lo(irq_brk)
c0c8 : 8504             [ 3] 	sta vec_brk
c0ca : a9c1             [ 2] 	lda #hi(irq_brk)
c0cc : 8505             [ 3] 	sta vec_brk+1
                             
                             	; User handlers VIA0 interrupts
c0ce : a9e1             [ 2] 	lda #lo(null_handler)
c0d0 : 8506             [ 3] 	sta vec_usercia0
c0d2 : a9c0             [ 2] 	lda #hi(null_handler)
c0d4 : 8507             [ 3] 	sta vec_usercia0+1
                             
c0d6 : 60               [ 6] 	rts
                             
                             
                             ;* Calls the master IRQ handler - from the ROM
c0d7 :                       call_irq_master
c0d7 : 6c0200           [ 6] 	jmp (vec_irq)
                             	
                             ;* Calls the BRK handler
c0da :                       call_irq_brk
c0da : 6c0400           [ 6] 	jmp (vec_brk)
                             
                             ;* Call the user CIA0 handler
c0dd :                       call_irq_usercia0
c0dd : 6c0600           [ 6] 	jmp (vec_usercia0)
                             
                             ;* null interrupt
c0e0 :                       null_irq
c0e0 : 40               [ 6] 	rti
                             
                             ;* null handler
c0e1 :                       null_handler
c0e1 : 60               [ 6] 	rts
                             	
                             
                             ;* Master IRQ handler
c0e2 :                       irq
                             	; Don't use _pushAXY as it uses a temp location!
c0e2 : 48               [ 3] 	pha
c0e3 : 8a               [ 2] 	txa
c0e4 : 48               [ 3] 	pha
c0e5 : 98               [ 2] 	tya
c0e6 : 48               [ 3] 	pha
                             
c0e7 : d8               [ 2] 	cld						; Just in case!
c0e8 : 18               [ 2] 	clc						; Standard behaviour
                             
                             	; Check if IRQ or BRK
                             	; load P from stack in to A
c0e9 : ba               [ 2] 	tsx
c0ea : bd0401           [ 4] 	lda 0x104,x
                             	; BRK bit set?
c0ed : 2910             [ 2] 	and #0x10
c0ef : d0e9             [ 3] 	bne call_irq_brk
AS65 Assembler for R6502 [1.42].                                     Page   48
---------------------------------- bank0.s -----------------------------------

                             	
                             	;* Primary interrupt is timer 1
c0f1 : ad0d03           [ 4] 	lda IO_0 + IFR
c0f4 : 2940             [ 2] 	and #0x40				; Bit 6 = Timer 1 interrupt
c0f6 : f006             [ 3] 	beq irq_fin				; If nothing then end
                             
                             	; Service the timer 1 interrupt
c0f8 : 8d0d03           [ 4] 	sta IO_0 + IFR			; Clear the interrupt
c0fb : 2031c1           [ 6] 	jsr int_vdp_handler
                             
c0fe :                       irq_fin
                             	_pullAXY
                             
c103 : 40               [ 6] 	rti
                             	
                             ;* Handle BRK
c104 :                       irq_brk
                             	; Handle BRK
                             	; Get PCL,H minus 2 gives the BRK instruction ad
c104 : 38               [ 2] 	sec
c105 : bd0501           [ 4] 	lda 0x0105,x
c108 : e902             [ 2] 	sbc #2
c10a : 8562             [ 3] 	sta df_brkpc
c10c : bd0601           [ 4] 	lda 0x0106,x
c10f : e900             [ 2] 	sbc #0
c111 : 8563             [ 3] 	sta df_brkpc+1
                             	; Get the byte pointed to by old PC
                             	; which is 1 on from the BRK
c113 : a001             [ 2] 	ldy #1
c115 : b162             [ 5] 	lda (df_brkpc),y
c117 : 8564             [ 3] 	sta df_brkval
c119 : 855d             [ 3] 	sta errno
                             	; now update the return address
c11b : a560             [ 3] 	lda df_pc
c11d : 9d0501           [ 5] 	sta 0x105,x
c120 : a561             [ 3] 	lda df_pc+1
c122 : 9d0601           [ 5] 	sta 0x106,x
                             	
                             	_pullAXY
                             
                             	; Save the registers in temp area
c12a : 853d             [ 3] 	sta num_a
c12c : 863e             [ 3] 	stx num_a+1
c12e : 843f             [ 3] 	sty num_a+2
                             	; when RTI occurs:
                             	;  will return to error handler
                             	;  df_brkval will contain signature
c130 : 40               [ 6] 	rti
                             	
                             	
                             ;****************************************
                             ;* int_vdp_handler
                             ;* VDP interrupt handler
                             ;****************************************
c131 :                       int_vdp_handler
c131 : 204dc1           [ 6] 	jsr update_timers	; If it is then update system 
c134 : a50d             [ 3] 	lda vdp_curoff		; Is cursor enabled?
c136 : d014             [ 3] 	bne int_vdp_fin		; Skip if disabled
                             
c138 : c60c             [ 5] 	dec vdp_curcnt		; Decrement countdown
c13a : d010             [ 3] 	bne int_vdp_fin		; If not expired, do nothing
c13c : a50b             [ 3] 	lda vdp_curtim		; Reset cursor countdown
AS65 Assembler for R6502 [1.42].                                     Page   49
---------------------------------- bank0.s -----------------------------------

c13e : 850c             [ 3] 	sta vdp_curcnt
c140 : a50e             [ 3] 	lda vdp_curstat		; Get the flash status
c142 : 4980             [ 2] 	eor #0x80			; Invert top bit
c144 : 850e             [ 3] 	sta vdp_curstat
c146 : 450f             [ 3] 	eor vdp_curval		; EOR with whats under cursor
                             	; Use cursor address, write to screen
                             	; ptr is base, offset with X coord in Y register
c148 : a41c             [ 3] 	ldy gr_scrngeom+gr_cur_x
c14a : 911e             [ 5] 	sta (gr_scrngeom+gr_cur_ptr),y
                             
c14c :                       int_vdp_fin	
c14c : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* update_timers
                             ;* Update 24 bit timer and debounce counters
                             ;****************************************
c14d :                       update_timers
c14d : e608             [ 5] 	inc vdp_cnt
c14f : d006             [ 3] 	bne inc_kb_timers
c151 : e609             [ 5] 	inc vdp_cnt_hi
c153 : d002             [ 3] 	bne inc_kb_timers
c155 : e60a             [ 5] 	inc vdp_cnt_hi2
c157 :                       inc_kb_timers
c157 : a62d             [ 3] 	ldx kb_deb			; Is debounce 0?
c159 : f002             [ 3] 	beq skip_kb_deb
c15b : c62d             [ 5] 	dec kb_deb
c15d :                       skip_kb_deb
c15d : a62f             [ 3] 	ldx kb_rep			; Is repeat timer 0?
c15f : f002             [ 3] 	beq skip_kb_rep
c161 : c62f             [ 5] 	dec kb_rep
c163 :                       skip_kb_rep
c163 : 60               [ 6] 	rts
                             	
                             
                             	include "utils/utils.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  UTILS.S
                             ;*  This module implements various utility functi
                             ;*  converting from ASCII to binary form for numb
                             ;*  vice-versa to allow humans to actually be abl
                             ;*  and read numbers in their prefered form!
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code
                             
c164 :                       utilPrintSPC
c164 : 48               [ 3] 	pha
c165 : a920             [ 2] 	lda #' '
c167 : 204bc4           [ 6] 	jsr io_put_ch
c16a : 68               [ 4] 	pla
c16b : 60               [ 6] 	rts
AS65 Assembler for R6502 [1.42].                                     Page   50
---------------------------------- bank0.s -----------------------------------

                             
c16c :                       utilPrintCRLF
c16c : 48               [ 3] 	pha
c16d : a90d             [ 2] 	lda #UTF_CR
c16f : 204bc4           [ 6] 	jsr io_put_ch
c172 : 68               [ 4] 	pla
c173 : 60               [ 6] 	rts
                             
c174 :                       utilPrintA
c174 : 8538             [ 3] 	sta tmp_d
c176 : 48               [ 3] 	pha
c177 : 8a               [ 2] 	txa
c178 : 48               [ 3] 	pha
c179 : a538             [ 3] 	lda tmp_d
c17b : 2089c1           [ 6] 	jsr str_a_to_x
c17e : 204bc4           [ 6] 	jsr io_put_ch
c181 : 8a               [ 2] 	txa
c182 : 204bc4           [ 6] 	jsr io_put_ch
c185 : 68               [ 4] 	pla
c186 : aa               [ 2] 	tax
c187 : 68               [ 4] 	pla
c188 : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* str_a_to_x
                             ;* Convert accumulator to hex string
                             ;* Input : A = Byte to convert
                             ;* Output : A = High Char, X = Low Char
                             ;* Regs affected : P
                             ;****************************************
c189 :                       str_a_to_x
c189 : 48               [ 3] 	pha					; Save the byte using later on
c18a : 290f             [ 2] 	and #0x0f			; Mask low nibble
c18c : 18               [ 2] 	clc
c18d : 6930             [ 2] 	adc #'0'			; Convert to UTF
c18f : c93a             [ 2] 	cmp #('9'+1)		; If A greater than '9' then
c191 : 9002             [ 3] 	bcc skip_a_f_1		; skip a-f adjustment
c193 : 6926             [ 2] 	adc #0x26			; Add 27 (6+C) to get in to A-F rang
c195 :                       skip_a_f_1
c195 : aa               [ 2] 	tax					; Low char is in X
c196 : 68               [ 4] 	pla					; Get byte back
c197 : 4a               [ 2] 	lsr a				; Make high nibble low
c198 : 4a               [ 2] 	lsr a
c199 : 4a               [ 2] 	lsr a
c19a : 4a               [ 2] 	lsr a
c19b : 18               [ 2] 	clc
c19c : 6930             [ 2] 	adc #'0'			; Convert to UTF
c19e : c93a             [ 2] 	cmp #('9'+1)		; If A greater than '9' then
c1a0 : 9002             [ 3] 	bcc skip_a_f_2		; skip a-f adjustment
c1a2 : 6926             [ 2] 	adc #0x26			; Add 27 (6+C) to get in to A-F rang
c1a4 :                       skip_a_f_2
                             
c1a4 : 18               [ 2] 	clc					; No error
c1a5 : 60               [ 6] 	rts					; A high nibble
                             
                             ;****************************************
                             ;* str_x_to_a
                             ;* Convert hex string to accumulator
                             ;* Input : A = High Char, X = Low Char
                             ;* Output : A = Value
                             ;* Regs affected : P
AS65 Assembler for R6502 [1.42].                                     Page   51
---------------------------------- bank0.s -----------------------------------

                             ;****************************************
c1a6 :                       str_x_to_a
c1a6 : 0920             [ 2] 	ora #0x20			; Make alpha in to lower case
c1a8 : 38               [ 2] 	sec					; Process high char in A
c1a9 : e930             [ 2] 	sbc #'0'			; Convert to hex nibble
c1ab : c90a             [ 2] 	cmp #10				; If A < 10 then
c1ad : 9002             [ 3] 	bcc skip_x_f_1		; skip a-f adjustment
c1af : e927             [ 2] 	sbc #0x27			; Sub 7 to get in to A-F range
c1b1 :                       skip_x_f_1
c1b1 : c910             [ 2] 	cmp #0x10			; Nibble should be <= 0x0f
c1b3 : b01d             [ 3] 	bcs	str_x_to_a_err	; Error if not
                             
c1b5 : 0a               [ 2] 	asl a				; This is the high nibble
c1b6 : 0a               [ 2] 	asl a
c1b7 : 0a               [ 2] 	asl a
c1b8 : 0a               [ 2] 	asl a
c1b9 : 48               [ 3] 	pha					; Save the high nibble
c1ba : 8a               [ 2] 	txa					; Now process the low char in X
c1bb : 0920             [ 2] 	ora #0x20			; Make alpha in to lower case
c1bd : 38               [ 2] 	sec
c1be : e930             [ 2] 	sbc #'0'			; Convert to hex nibble
c1c0 : c90a             [ 2] 	cmp #10				; If A < 10 then
c1c2 : 9002             [ 3] 	bcc skip_x_f_2		; skip a-f adjustment
c1c4 : e927             [ 2] 	sbc #0x27			; Sub 7 to get in to A-F range
c1c6 :                       skip_x_f_2
c1c6 : c910             [ 2] 	cmp #0x10			; Nibble should be <= 0x0f
c1c8 : b007             [ 3] 	bcs	str_x_to_a_errl	; Error if not
                             
c1ca : 853d             [ 3] 	sta num_a			; Store low nibble in temp
c1cc : 68               [ 4] 	pla					; Get high nibble
c1cd : 053d             [ 3] 	ora num_a			; OR with low nibble
                             
c1cf : 18               [ 2] 	clc					; No error
c1d0 : 60               [ 6] 	rts					; A contains value
                             
c1d1 :                       str_x_to_a_errl
c1d1 : 68               [ 4] 	pla
c1d2 :                       str_x_to_a_err
                             	SWBRK CMD_ERR_VAL
                             
                             
                             ;****************************************
                             ;* con_n_to_a
                             ;* Convert numeric string to accumulator (unsigne
                             ;* Input : Pointer to string (X=L, A=H), Y = Sour
                             ;* Output : num_a, num_a+1 contains word, X=numbe
                             ;* A = Source type detected
                             ;* Regs affected : CS = Error
                             ;****************************************
c1d4 :                       con_n_to_a
c1d4 : 8649             [ 3] 	stx num_tmp
c1d6 : 854a             [ 3] 	sta num_tmp+1
c1d8 : a900             [ 2] 	lda #0
c1da : 853d             [ 3] 	sta num_a
c1dc : 853e             [ 3] 	sta num_a+1
c1de : c000             [ 2] 	cpy #NUM_ANY
c1e0 : f014             [ 3] 	beq con_n_to_a_detect
c1e2 : 88               [ 2] 	dey
c1e3 : d003             [ 3] 	bne con_n_not_dec
c1e5 :                       con_dec_jmp
c1e5 : 4c7ac2           [ 3] 	jmp con_dec_to_a_int
c1e8 :                       con_n_not_dec
AS65 Assembler for R6502 [1.42].                                     Page   52
---------------------------------- bank0.s -----------------------------------

c1e8 : 88               [ 2] 	dey
c1e9 : d003             [ 3] 	bne con_n_not_hex
c1eb :                       con_hex_jmp
c1eb : 4c11c2           [ 3] 	jmp con_hex_to_a_int
c1ee :                       con_n_not_hex
c1ee : 88               [ 2] 	dey
c1ef : d003             [ 3] 	bne con_n_err
c1f1 :                       con_bin_jmp
c1f1 : 4c50c2           [ 3] 	jmp con_bin_to_a_int
c1f4 :                       con_n_err
c1f4 : 38               [ 2] 	sec
c1f5 : 60               [ 6] 	rts
c1f6 :                       con_n_to_a_detect		; Y is zero on entry
c1f6 : b149             [ 5] 	lda (num_tmp),y
c1f8 : c930             [ 2] 	cmp #'0'
c1fa : d0e9             [ 3] 	bne con_dec_jmp
c1fc : a001             [ 2] 	ldy #1
c1fe : b149             [ 5] 	lda (num_tmp),y
c200 : 0920             [ 2] 	ora #0x20
c202 : c978             [ 2] 	cmp #'x'
c204 : f0e5             [ 4] 	beq con_hex_jmp
c206 : c962             [ 2] 	cmp #'b'
c208 : f0e7             [ 4] 	beq con_bin_jmp
c20a : 4ce5c1           [ 3] 	jmp con_dec_jmp
                             
                             ;****************************************
                             ;* con_hex_to_a
                             ;* Convert hex string to accumulator (unsigned)
                             ;* Input : Pointer to string (X=L, A=H)
                             ;* Output : num_a, num_a+1 contains word, X=numbe
                             ;* Regs affected : CS = Error
                             ;****************************************
c20d :                       con_hex_to_a
c20d : 8649             [ 3] 	stx num_tmp
c20f : 854a             [ 3] 	sta num_tmp+1
c211 :                       con_hex_to_a_int
c211 : a205             [ 2] 	ldx #5			; > 4 digits will cause error
c213 : a002             [ 2] 	ldy #2			; start at first digit
c215 :                       con_hex_digit
c215 : b149             [ 5] 	lda (num_tmp),y
c217 : 0920             [ 2] 	ora #0x20					; Make alpha in to lower case
c219 : 38               [ 2] 	sec							; Process high char in A
c21a : e930             [ 2] 	sbc #'0'					; Convert to hex nibble
c21c : c90a             [ 2] 	cmp #10						; If A < 10 then
c21e : 9002             [ 3] 	bcc con_hex_skip_x_f_1		; skip a-f adjustment
c220 : e927             [ 2] 	sbc #0x27					; Sub 7 to get in to A-F range
c222 :                       con_hex_skip_x_f_1
c222 : c910             [ 2] 	cmp #0x10					; Nibble should be <= 0x0f
c224 : b01c             [ 3] 	bcs	con_hex_done			; Potentially done if not
c226 : 48               [ 3] 	pha
c227 : a53d             [ 3] 	lda num_a
                             	; make room for lo nibble
c229 : 0a               [ 2] 	asl a
c22a : 263e             [ 5] 	rol num_a+1
c22c : 0a               [ 2] 	asl a
c22d : 263e             [ 5] 	rol num_a+1
c22f : 0a               [ 2] 	asl a
c230 : 263e             [ 5] 	rol num_a+1
c232 : 0a               [ 2] 	asl a
c233 : 263e             [ 5] 	rol num_a+1
c235 : 853d             [ 3] 	sta num_a
                             	; save in low nibble
AS65 Assembler for R6502 [1.42].                                     Page   53
---------------------------------- bank0.s -----------------------------------

c237 : 68               [ 4] 	pla
c238 : 053d             [ 3] 	ora num_a
c23a : 853d             [ 3] 	sta num_a
c23c : c8               [ 2] 	iny
c23d : ca               [ 2] 	dex
c23e : d0d5             [ 3] 	bne con_hex_digit
                             	; if got to a 5th digit then error
c240 :                       con_hex_err
c240 : 38               [ 2] 	sec
c241 : 60               [ 6] 	rts
                             	; found a non-hex digit
c242 :                       con_hex_done
                             	; if no digits processed then error
c242 : c002             [ 2] 	cpy #2
c244 : f0fa             [ 3] 	beq con_hex_err
                             	; move y to x for digits processed
c246 : 98               [ 2] 	tya
c247 : aa               [ 2] 	tax
c248 : a902             [ 2] 	lda #NUM_HEX
c24a : 18               [ 2] 	clc
c24b : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* con_bin_to_a
                             ;* Convert bin string to accumulator (unsigned)
                             ;* Input : Pointer to string (X=L, A=H)
                             ;* Output : num_a, num_a+1 contains word, X=numbe
                             ;* Regs affected : CS = Error
                             ;****************************************
c24c :                       con_bin_to_a
c24c : 8649             [ 3] 	stx num_tmp
c24e : 854a             [ 3] 	sta num_tmp+1
c250 :                       con_bin_to_a_int
c250 : a002             [ 2] 	ldy #2
c252 : a211             [ 2] 	ldx #17						; Max 16 binary digits allowed
c254 :                       con_bin_digit
c254 : b149             [ 5] 	lda (num_tmp),y
c256 : c930             [ 2] 	cmp #'0'
c258 : 9010             [ 3] 	bcc con_bin_done
c25a : c932             [ 2] 	cmp #'1'+1
c25c : b00c             [ 3] 	bcs con_bin_done
                             	; sets C if '1' else resets C
c25e : 69cf             [ 2] 	adc #0xff-'0'
                             	; shift in digit
c260 : 263d             [ 5] 	rol num_a
c262 : 263e             [ 5] 	rol num_a+1
c264 : c8               [ 2] 	iny
c265 : ca               [ 2] 	dex
c266 : d0ec             [ 3] 	bne con_bin_digit
                             	; on the 17th digit is too much, error
c268 : f00a             [ 3] 	beq con_bin_err
c26a :                       con_bin_done
                             	; didn't process any digit = error
c26a : c002             [ 2] 	cpy #2
c26c : f006             [ 3] 	beq con_bin_err
                             	; put digits processed in to X
c26e : 98               [ 2] 	tya
c26f : aa               [ 2] 	tax
c270 : a903             [ 2] 	lda #NUM_BIN
c272 : 18               [ 2] 	clc
c273 : 60               [ 6] 	rts
c274 :                       con_bin_err
AS65 Assembler for R6502 [1.42].                                     Page   54
---------------------------------- bank0.s -----------------------------------

c274 :                       str_d_error
c274 : 38               [ 2] 	sec
c275 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* con_d_to_a
                             ;* Convert decimal string to accumulator (SIGNED)
                             ;* Input : Pointer to string (X=L, A=H)
                             ;* Output : num_a, num_a+1 contains word, X=numbe
                             ;* Regs affected : CS = Error
                             ;****************************************
c276 :                       con_dec_to_a
c276 : 8649             [ 3] 	stx num_tmp
c278 : 854a             [ 3] 	sta num_tmp+1
c27a :                       con_dec_to_a_int
c27a : a000             [ 2] 	ldy #0
                             	; Detect if leading minus sign
c27c : b149             [ 5] 	lda (num_tmp),y
c27e : c92d             [ 2] 	cmp #'-'
c280 : d001             [ 3] 	bne str_d_find_end
                             	; skip over minus if found
c282 : c8               [ 2] 	iny
c283 :                       str_d_find_end
c283 : b149             [ 5] 	lda (num_tmp),y
c285 : c930             [ 2] 	cmp #'0'
c287 : 9007             [ 3] 	bcc str_d_found_end
c289 : c93a             [ 2] 	cmp #'9'+1
c28b : b003             [ 3] 	bcs str_d_found_end
c28d : c8               [ 2] 	iny
c28e : d0f3             [ 3] 	bne str_d_find_end	; Possble wraparound but shou
c290 :                       str_d_found_end
c290 : c007             [ 2] 	cpy #7				; Biggest int is 6 chars
c292 : b0e0             [ 3] 	bcs str_d_error		; e.g. -32767
c294 : 844c             [ 3] 	sty num_tmp+3
c296 : a900             [ 2] 	lda #0
c298 : 854b             [ 3] 	sta num_tmp+2
c29a : 853d             [ 3] 	sta num_a
c29c : 853e             [ 3] 	sta num_a+1
c29e :                       str_d_process_digit
c29e : 88               [ 2] 	dey
c29f : 3027             [ 3] 	bmi str_d_digits_done
                             
c2a1 : b149             [ 5] 	lda (num_tmp),y
                             
c2a3 : c92d             [ 2] 	cmp #'-'			; Got to minus sign?
c2a5 : f021             [ 3] 	beq str_d_digits_done ; also done
                             
c2a7 : 38               [ 2] 	sec
c2a8 : e930             [ 2] 	sbc #'0'
                             	; Convert digit to number
                             	; and then offset in to
                             	; look up table of powers
c2aa : 18               [ 2] 	clc
c2ab : 0a               [ 2] 	asl a
c2ac : 654b             [ 3] 	adc num_tmp+2
                             	; X contains index to powers
c2ae : aa               [ 2] 	tax
c2af : a53d             [ 3] 	lda num_a
c2b1 : 7de5c2           [ 4] 	adc str_d_powers,x
c2b4 : 853d             [ 3] 	sta num_a
c2b6 : a53e             [ 3] 	lda num_a+1
c2b8 : 7de6c2           [ 4] 	adc str_d_powers+1,x
AS65 Assembler for R6502 [1.42].                                     Page   55
---------------------------------- bank0.s -----------------------------------

c2bb : 853e             [ 3] 	sta num_a+1
c2bd : b0b5             [ 3] 	bcs str_d_error
                             	; Move to next power of 10 index
c2bf : a54b             [ 3] 	lda num_tmp+2
c2c1 : 6914             [ 2] 	adc #20
c2c3 : 854b             [ 3] 	sta num_tmp+2
c2c5 : 4c9ec2           [ 3] 	jmp str_d_process_digit
c2c8 :                       str_d_digits_done
                             	; check if minus
c2c8 : b149             [ 5] 	lda (num_tmp),y
c2ca : c92d             [ 2] 	cmp #'-'
c2cc : d011             [ 3] 	bne str_d_skip_neg
c2ce : a64c             [ 3] 	ldx num_tmp+3		; Must have >= 2 chars
c2d0 : e002             [ 2] 	cpx #2				; else it's an error
c2d2 : 90a0             [ 3] 	bcc str_d_error
c2d4 : a63d             [ 3] 	ldx num_a
c2d6 : a53e             [ 3] 	lda num_a+1
c2d8 : 2049c3           [ 6] 	jsr twos_complement
c2db : 863d             [ 3] 	stx num_a
c2dd : 853e             [ 3] 	sta num_a+1
c2df :                       str_d_skip_neg
c2df : a64c             [ 3] 	ldx num_tmp+3
c2e1 : a901             [ 2] 	lda #NUM_DEC
c2e3 : 18               [ 2] 	clc
c2e4 : 60               [ 6] 	rts
                             
c2e5 :                       str_d_powers
c2e5 : 00000100020003..      	dw	0, 1, 2, 3, 4, 5, 6, 7, 8, 9
c2f9 : 00000a0014001e..      	dw	0, 10, 20, 30, 40, 50, 60, 70, 80, 90
c30d : 00006400c8002c..      	dw	0, 100, 200, 300, 400, 500, 600, 700, 800, 90
c321 : 0000e803d007b8..      	dw	0, 1000, 2000, 3000, 4000, 5000, 6000, 7000, 
c335 : 00001027204e30..      	dw	0, 10000, 20000, 30000, 40000, 50000, 60000, 
                             	
                             
                             ;****************************************
                             ;* twos_complement
                             ;* Twos complement of X,A (X=low)
                             ;* Input : X = Low byte, A = High Byte to convert
                             ;* Output : X,A in 2's complement
                             ;* Regs affected : P
                             ;****************************************
c349 :                       twos_complement
c349 : 49ff             [ 2] 	eor #0xff
c34b : 48               [ 3] 	pha
c34c : 8a               [ 2] 	txa
c34d : 49ff             [ 2] 	eor #0xff
c34f : aa               [ 2] 	tax
c350 : 68               [ 4] 	pla
c351 : e8               [ 2] 	inx
c352 : d003             [ 3] 	bne twos_complement_skip_X
c354 : 38               [ 2] 	sec			; Add 1 to A
c355 : 6900             [ 2] 	adc #0
c357 :                       twos_complement_skip_X
c357 : 60               [ 6] 	rts
                             	
                             
                             ;****************************************
                             ;* hex_to_bcd
                             ;* Convert accumulator,X to BCD
                             ;* Input : X = Low byte, A = High Byte to convert
                             ;* Output : 3 bytes of num_a is updated
                             ;* Regs affected : P
AS65 Assembler for R6502 [1.42].                                     Page   56
---------------------------------- bank0.s -----------------------------------

                             ;****************************************
c358 :                       hex_to_bcd
c358 : 08               [ 3] 	php
c359 : 48               [ 3] 	pha
c35a : 8538             [ 3] 	sta tmp_d
c35c : 8a               [ 2] 	txa
c35d : 48               [ 3] 	pha
c35e : a538             [ 3] 	lda tmp_d
                             
c360 : 8649             [ 3] 	stx num_tmp
c362 : 854a             [ 3] 	sta num_tmp+1
c364 : c980             [ 2] 	cmp #0x80			; Negative?
c366 : 9003             [ 3] 	bcc hex_to_bcd_skip_neg
c368 : 2049c3           [ 6] 	jsr twos_complement
c36b :                       hex_to_bcd_skip_neg
c36b : a200             [ 2] 	ldx #0
c36d : 863d             [ 3] 	stx num_a
c36f : 863e             [ 3] 	stx num_a+1
c371 : 863f             [ 3] 	stx num_a+2
c373 : 8640             [ 3] 	stx num_a+3
c375 : a210             [ 2] 	ldx #16
c377 : f8               [ 2] 	sed
c378 :                       bin_to_bcd_bit
c378 : 0649             [ 5] 	asl num_tmp
c37a : 264a             [ 5] 	rol num_tmp+1
c37c : a53d             [ 3] 	lda num_a
c37e : 653d             [ 3] 	adc num_a
c380 : 853d             [ 3] 	sta num_a
c382 : a53e             [ 3] 	lda num_a+1
c384 : 653e             [ 3] 	adc num_a+1
c386 : 853e             [ 3] 	sta num_a+1
c388 : a53f             [ 3] 	lda num_a+2
c38a : 653f             [ 3] 	adc num_a+2
c38c : 853f             [ 3] 	sta num_a+2
c38e : ca               [ 2] 	dex
c38f : d0e7             [ 3] 	bne bin_to_bcd_bit
                             	
c391 : 68               [ 4] 	pla
c392 : aa               [ 2] 	tax
c393 : 68               [ 4] 	pla
c394 : 28               [ 4] 	plp
c395 : 60               [ 6] 	rts
                             	
                             ;****************************************
                             ;* bcd_to_str
                             ;* Convert num_buf to chars
                             ;* Input : num_a in BCD format
                             ;* Output : num_buf in ASCII 6 digits
                             ;* Output is big endian, input is not
                             ;* Regs affected : P
                             ;****************************************
c396 :                       bcd_to_str
                             	_pushAXY
                             
                             
c39f : a205             [ 2] 	ldx #5						; Index in to string
c3a1 : a000             [ 2] 	ldy #0						; Current BCD digit
c3a3 :                       bcd_str
c3a3 : b93d00           [ 4] 	lda num_a,y
                             	; Convert 1s digit of byte
c3a6 : 48               [ 3] 	pha
c3a7 : 290f             [ 2] 	and #0xf
AS65 Assembler for R6502 [1.42].                                     Page   57
---------------------------------- bank0.s -----------------------------------

c3a9 : 18               [ 2] 	clc
c3aa : 6930             [ 2] 	adc #0x30
c3ac : 954d             [ 4] 	sta num_buf,x
                             	; Convert 10s digit of byte
c3ae : 68               [ 4] 	pla
c3af : 4a               [ 2] 	lsr a
c3b0 : 4a               [ 2] 	lsr a
c3b1 : 4a               [ 2] 	lsr a
c3b2 : 4a               [ 2] 	lsr a
c3b3 : 18               [ 2] 	clc
c3b4 : 6930             [ 2] 	adc #0x30					; Convert to ASCII
c3b6 : 954c             [ 4] 	sta num_buf-1,x
c3b8 : ca               [ 2] 	dex
c3b9 : ca               [ 2] 	dex
c3ba : c8               [ 2] 	iny
c3bb : c003             [ 2] 	cpy #3						; 3 BCD digits max
c3bd : d0e4             [ 3] 	bne bcd_str
                             
                             	_pullAXY
                             
c3c4 : 60               [ 6] 	rts
                             	
                             ;****************************************
                             ;* out_bcd
                             ;* Output a bcd string in num_buf
                             ;* Input : num_buf has the ASCII
                             ;* Input : C=1 print leading zeros else not
                             ;* Output : num_buf in ASCII 6 digits
                             ;* Output is big endian, input is not, Y=digits p
                             ;* Regs affected : P
                             ;****************************************
c3c5 :                       out_bcd
c3c5 : 48               [ 3] 	pha
c3c6 : 8a               [ 2] 	txa
c3c7 : 48               [ 3] 	pha
c3c8 : 08               [ 3] 	php
c3c9 : a000             [ 2] 	ldy #0						; How many digits printed
c3cb : a200             [ 2] 	ldx #0						; Index in to string
c3cd :                       out_bcd_digit
c3cd : b54d             [ 4] 	lda num_buf,x
c3cf : c000             [ 2] 	cpy #0						; If not in leading zero mode
c3d1 : d008             [ 3] 	bne out_bcd_print			; No then go print
                             
c3d3 : c930             [ 2] 	cmp #'0'					; else check if zero
c3d5 : d004             [ 3] 	bne out_bcd_print			; No then go print
                             
c3d7 : 28               [ 4] 	plp
c3d8 : 08               [ 3] 	php
c3d9 : 9004             [ 3] 	bcc out_bcd_next			; If C=0 go to next digit, el
c3db :                       out_bcd_print
c3db : c8               [ 2] 	iny
c3dc : 204bc4           [ 6] 	jsr io_put_ch
c3df :                       out_bcd_next
c3df : e8               [ 2] 	inx
c3e0 : e006             [ 2] 	cpx #6
c3e2 : d0e9             [ 3] 	bne out_bcd_digit
c3e4 : c000             [ 2] 	cpy #0						; If nothing printed
c3e6 : d006             [ 3] 	bne out_bcd_fin
c3e8 : a930             [ 2] 	lda #'0'					; Need to put out 1 zero
c3ea : 204bc4           [ 6] 	jsr io_put_ch
c3ed : c8               [ 2] 	iny
c3ee :                       out_bcd_fin
AS65 Assembler for R6502 [1.42].                                     Page   58
---------------------------------- bank0.s -----------------------------------

c3ee : 28               [ 4] 	plp
c3ef : 68               [ 4] 	pla
c3f0 : aa               [ 2] 	tax
c3f1 : 68               [ 4] 	pla
c3f2 : 18               [ 2] 	clc
c3f3 : 60               [ 6] 	rts
                             	
                             	
                             ;****************************************
                             ;* print_a_to_d
                             ;* Convert X,A to decimal string
                             ;* Input : X,A = number Low,High
                             ;* Input : C=1 print leading zeros else not
                             ;* Output : num_buf in ASCII max 6 digits
                             ;*          Y=digits printed including sign
                             ;* Output is big endian, input is not
                             ;* Regs affected : P
                             ;****************************************
c3f4 :                       print_a_to_d
c3f4 : 08               [ 3] 	php
c3f5 : c980             [ 2] 	cmp #0x80					; Check if sign bit is set
c3f7 : 9014             [ 4] 	bcc print_a_to_d_skip_neg	; Skip if not (postive
c3f9 : 2049c3           [ 6] 	jsr twos_complement			; Flip from 2s complement
c3fc : 2058c3           [ 6] 	jsr hex_to_bcd				; Convert to BCD
c3ff : 2096c3           [ 6] 	jsr bcd_to_str				; Convert BCD to string
c402 : a92d             [ 2] 	lda #'-'
c404 : 204bc4           [ 6] 	jsr io_put_ch
c407 : 28               [ 4] 	plp							; Leading zeros preference
c408 : 20c5c3           [ 6] 	jsr out_bcd
c40b : c8               [ 2] 	iny							; Account for sign
c40c : 60               [ 6] 	rts
c40d :                       print_a_to_d_skip_neg
c40d : 2058c3           [ 6] 	jsr hex_to_bcd				; Convert to BCD
c410 : 2096c3           [ 6] 	jsr bcd_to_str				; Convert BCD to string
c413 : 28               [ 4] 	plp							; Leading zeros preference
c414 : 4cc5c3           [ 3] 	jmp out_bcd					; Print +ve string
                             	
                             	include "io/io.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  IO.S
                             ;*  General IO module.  Allows different IO devic
                             ;*  utilised transparently by the rest of the cod
                             ;*  Other code should use "io_" commands so that 
                             ;*  do not need to know what specific device is p
                             ;*  input and output capabilities.
                             ;*	On startup, the kernel defaults to keyboard an
                             ;*  examines the BBC DIP switch to decide whether
                             ;*	but when saving and loading points to tape rou
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code
                             
c417 :                       mod_sz_io_s
AS65 Assembler for R6502 [1.42].                                     Page   59
---------------------------------- bank0.s -----------------------------------

                             
                             ;****************************************
                             ;* io_init
                             ;* Initialise the default device and make active
                             ;* No keys pressed = serial (default)
                             ;* F0 pressed = KB/VDP
                             ;* F1 pressed = Serial
                             ;* Keyboard and screen or serial port
                             ;* Output : None
                             ;* Regs affected : P, A
                             ;****************************************
c417 :                       io_init
c417 : a901             [ 2] 	lda #1				; Default = KB/VDP
c419 : 8d0006           [ 4] 	sta io_default
c41c : 4c22c4           [ 3] 	jmp io_active_device; Activate the device
                             
                             
                             ;****************************************
                             ;* io_set_default, io_active_device
                             ;* Activate device based on default or A
                             ;* Input : A = Device number
                             ;* Output : None
                             ;* Regs affected : P, A
                             ;****************************************
c41f :                       io_set_default			; Entry point for default
c41f : ad0006           [ 4] 	lda io_default
c422 :                       io_active_device		; Entry point for A set
c422 : aa               [ 2] 	tax					; X=buf size index
c423 : 0a               [ 2] 	asl	a				; x16 the Block number
c424 : 0a               [ 2] 	asl a
c425 : 0a               [ 2] 	asl a
c426 : 0a               [ 2] 	asl a
c427 : a8               [ 2] 	tay					; Y=index in to device table
c428 : bdaec4           [ 4] 	lda io_buf_sz,x
c42b : 853b             [ 3] 	sta buf_sz
c42d : a200             [ 2] 	ldx #0
                             	; Copy device settings to io block
c42f :                       io_copy_data
c42f : b9b0c4           [ 4] 	lda io_devices,y
c432 : 9d0106           [ 5] 	sta io_block,x
c435 : c8               [ 2] 	iny
c436 : e8               [ 2] 	inx
c437 : e010             [ 2] 	cpx #16
c439 : d0f4             [ 3] 	bne io_copy_data
                             	
c43b : a913             [ 2] 	lda #lo(scratch)	; Initialise IO buffer and size
c43d : 8539             [ 3] 	sta buf_lo
c43f : a906             [ 2] 	lda #hi(scratch)
c441 : 853a             [ 3] 	sta buf_hi
c443 : a90d             [ 2] 	lda #UTF_CR			; Line terminator is CR
c445 : 853c             [ 3] 	sta buf_ef
c447 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* io_get_ch
                             ;* Get a char (wait forever or just check)
                             ;* Input : C = 1 for synchronous, 0 for async
                             ;* Output : A = Byte code, C = 0 means A is inval
                             ;* Regs affected : P, A
                             ;****************************************
c448 :                       io_get_ch
c448 : 6c0106           [ 6] 	jmp (io_block+io_get_byte)
AS65 Assembler for R6502 [1.42].                                     Page   60
---------------------------------- bank0.s -----------------------------------

                             	
                             
                             ;****************************************
                             ;* io_put_ch
                             ;* Put a char
                             ;* Input : A = char
                             ;* Regs affected : P, A
                             ;****************************************
c44b :                       io_put_ch
c44b : 6c0306           [ 6] 	jmp (io_block+io_put_byte)
                             	
                             ;****************************************
                             ;* io_open_read
                             ;* Open for reading
                             ;* Input : X,A = pointer to filename (zero termin
                             ;* Output : C=0 success
                             ;* Regs affected : All
                             ;****************************************
c44e :                       io_open_read
c44e : 6c0506           [ 6] 	jmp (io_block+io_open_r)
                             	
                             ;****************************************
                             ;* io_open_write
                             ;* Open for reading
                             ;* Input : X,A = pointer to filename (zero termin
                             ;* Output : C=0 success
                             ;* Regs affected : All
                             ;****************************************
c451 :                       io_open_write
c451 : 6c0706           [ 6] 	jmp (io_block+io_open_w)
                             
                             ;****************************************
                             ;* io_close
                             ;* Close a file
                             ;* Input : 
                             ;* Output : C=0 success
                             ;* Regs affected : All
                             ;****************************************
c454 :                       io_close
c454 : 6c0906           [ 6] 	jmp (io_block+io_close_f)
                             	
                             ;****************************************
                             ;* io_delete
                             ;* Delete a file
                             ;* Input : 
                             ;* Output : C=0 success
                             ;* Regs affected : All
                             ;****************************************
c457 :                       io_delete
c457 : 6c0b06           [ 6] 	jmp (io_block+io_del_f)
                             
                             ;****************************************
                             ;* io_open_ext1
                             ;* Extended function 1
                             ;* Input : 
                             ;* Output : C=0 success
                             ;* Regs affected : All
                             ;****************************************
c45a :                       io_open_ext1
c45a : 6c0d06           [ 6] 	jmp (io_block+io_ext1)
                             	
                             ;****************************************
AS65 Assembler for R6502 [1.42].                                     Page   61
---------------------------------- bank0.s -----------------------------------

                             ;* io_open_ext2
                             ;* Extended function 2
                             ;* Input : 
                             ;* Output : C=0 success
                             ;* Regs affected : All
                             ;****************************************
c45d :                       io_open_ext2
c45d : 6c0f06           [ 6] 	jmp (io_block+io_ext2)
                             	
                             ;****************************************
                             ;* io_read_line
                             ;* Read a line, terminated by terminating char or
                             ;* Input : buf_(lo/hi/sz/ef) : Address, Max size,
                             ;* Output : Y = Line length C = Buffer limit reac
                             ;* Regs affected : None
                             ;****************************************
c460 :                       io_read_line
c460 : 48               [ 3] 	pha
                             
c461 : 08               [ 3] 	php					; Save echo state
                             	
c462 : a000             [ 2] 	ldy #0x00			; Starting at first byte
c464 :                       io_get_line_byte
c464 : 38               [ 2] 	sec					; Getting bytes synchronously
c465 : 2048c4           [ 6] 	jsr io_get_ch		; Get a byte
c468 : b027             [ 3] 	bcs io_get_line_done; Got nothing then finish
c46a : 28               [ 4] 	plp					; Get echo state
c46b : 08               [ 3] 	php					; Instantly save it back
c46c : 900c             [ 3] 	bcc io_skip_echo	; Carry not set = don't echo
c46e : c97f             [ 2] 	cmp #UTF_DEL		; Delete?
c470 : d005             [ 3] 	bne io_do_echo
c472 : c000             [ 2] 	cpy #0				; Already at beginning?
c474 : f004             [ 3] 	beq io_skip_echo	; Don't echo delete
c476 : 88               [ 2] 	dey					; Else decrement length
c477 :                       io_do_echo
c477 : 204bc4           [ 6] 	jsr io_put_ch		; Echo it
c47a :                       io_skip_echo
c47a : c920             [ 2] 	cmp #UTF_SPECIAL	; Special character?
c47c : 9007             [ 3] 	bcc io_skip_special	; Skip if so (don't add to b
c47e : c97f             [ 2] 	cmp #UTF_DEL		; Don't proces DEL either
c480 : f003             [ 3] 	beq io_skip_special
c482 : 9139             [ 5] 	sta (buf_lo),y		; Save it
c484 : c8               [ 2] 	iny					; Increase length
c485 :                       io_skip_special
c485 : c53c             [ 3] 	cmp buf_ef			; Is it the terminating char?
c487 : f008             [ 3] 	beq io_get_line_done	; If yes then done
c489 : c43b             [ 3] 	cpy buf_sz			; Reached the buffer max size?
c48b : d0d7             [ 3] 	bne io_get_line_byte	; No, get another byte
c48d : 28               [ 4] 	plp					; Remember to pull echo state off stack
c48e : 38               [ 2] 	sec					; Yes, set carry flag
c48f : 68               [ 4] 	pla
c490 : 60               [ 6] 	rts					; And done
c491 :                       io_get_line_done
c491 : a900             [ 2] 	lda #0
c493 : 9139             [ 5] 	sta (buf_lo),y		; Terminate with 0
c495 : 28               [ 4] 	plp					; Remember to pull echo state off stack
c496 : 18               [ 2] 	clc					; Clear carry flag
c497 : 68               [ 4] 	pla
c498 : 60               [ 6] 	rts					; Fin
                             
                             ;****************************************
                             ;* io_print_line
AS65 Assembler for R6502 [1.42].                                     Page   62
---------------------------------- bank0.s -----------------------------------

                             ;* Print a line (when data is not already in seri
                             ;* Input : X = Address Lo, A = Address Hi
                             ;* Output : Y=number chars output
                             ;* Regs affected : All
                             ;****************************************
c499 :                       io_print_line
c499 : 48               [ 3] 	pha
                             
c49a : 8636             [ 3] 	stx tmp_clo					; Store the string pointer
c49c : 8537             [ 3] 	sta tmp_chi					; lo and hi
c49e : a000             [ 2] 	ldy #0						; Start at the beginning!
c4a0 :                       io_print_line_byte
c4a0 : b136             [ 5] 	lda (tmp_clo),y				; Copy byte to
c4a2 : f006             [ 3] 	beq io_print_done			; If zero then done - print
c4a4 : 204bc4           [ 6] 	jsr io_put_ch				; Transmit
c4a7 : c8               [ 2] 	iny
c4a8 : d0f6             [ 3] 	bne io_print_line_byte		; Carry on until zero fo
c4aa :                       io_print_done
c4aa : 68               [ 4] 	pla
c4ab : 60               [ 6] 	rts
                             
                             
                             ;*** Null operation just clc and return ***
c4ac :                       io_null_op
c4ac : 18               [ 2] 	clc
c4ad : 60               [ 6] 	rts
                             	
                             ;* IO buffer sizes
c4ae :                       io_buf_sz
c4ae : ff                    	db 255					; Device 0 = Tape
c4af : 7f                    	db 127					; Device 1 = keyboard/screen
                             
                             ;* IO devices defined here
c4b0 :                       io_devices
                             ;* Device zero is the tape system
                             ;* only offers get and put
                             ;* This is a block based device
c4b0 :                       io_device0					; Tape device, input = Tape, outpu
c4b0 : f5c6                  	dw	tp_get_byte			; io_get_ch
c4b2 : 1cc6                  	dw	tp_put_byte			; io_put_ch
c4b4 : 85c5                  	dw	tp_open_read		; io_open_r
c4b6 : d6c5                  	dw	tp_open_write		; io_open_w
c4b8 : b8c5                  	dw	tp_close			; io_close_f
c4ba : acc4                  	dw	io_null_op			; io_del_f
c4bc : 85c5                  	dw	tp_open_bread		; io_ext1 - open for binary re
c4be : d0c5                  	dw	tp_open_bwrite		; io_ext2 - open for binary w
                             ;* Device one is keyboard / screen
                             ;* only offers get and put
                             ;* This is a char based device
c4c0 :                       io_device1					; Default device, input = screen e
c4c0 : cbce                  	dw	gr_get_key			; io_get_ch
c4c2 : 01cf                  	dw	gr_put_byte			; io_put_ch
c4c4 : acc4                  	dw	io_null_op			; io_open_r
c4c6 : acc4                  	dw	io_null_op			; io_open_w
c4c8 : acc4                  	dw	io_null_op			; io_close_f
c4ca : acc4                  	dw	io_null_op			; io_del_f
c4cc : acc4                  	dw	io_null_op			; io_ext1
c4ce : acc4                  	dw	io_null_op			; io_ext2
                             ;* Serial device using printer port ACK (input) a
                             ;* This is a char based device
                             ;io_device2					; Serial device, input = Ser, out
                             ;	dw	ser_get_byte		; io_get_ch
AS65 Assembler for R6502 [1.42].                                     Page   63
---------------------------------- bank0.s -----------------------------------

                             ;	dw	ser_put_byte		; io_put_ch
                             ;	dw	ser_open			; io_open_r
                             ;	dw	ser_open			; io_open_w
                             ;	dw	ser_close			; io_close_f
                             ;	dw	io_null_op			; io_del_f
                             ;	dw	io_null_op			; io_ext1
                             ;	dw	io_null_op			; io_ext2
                             
c4d0 :                       mod_sz_io_e
                             
                             
                             
                             ;* Reset vector points here - 6502 starts here
c4d0 :                       init
                             ;	jmp init_test
                             	; First clear ram
c4d0 : 78               [ 2] 	sei					; Need this for MOS 6502
c4d1 : d8               [ 2] 	cld					; Need this for MOS 6502
c4d2 : 4cfcc4           [ 3] 	jmp init_ram		; jmp not jsr to ram initialiser
c4d5 :                       init_2					; init_ram will jump back to here
c4d5 : a2ff             [ 2] 	ldx #0xff			; Initialise stack pointer
c4d7 : 9a               [ 2] 	txs
                             
c4d8 : 20dec4           [ 6] 	jsr kernel_init
                             
c4db : 4c4bc0           [ 3] 	jmp main
                             
c4de :                       kernel_init
c4de : 20bec0           [ 6] 	jsr init_irq		; Initialise IRQ handling
                             
c4e1 : 201ec5           [ 6] 	jsr init_via0		; initialise cia 0 - tape inactiv
c4e4 : 206dc5           [ 6] 	jsr tp_init			; Initialise tape handling
                             
c4e7 :                       kernel_test
c4e7 : 2004d4           [ 6] 	jsr init_snd		; initialise the sound chip
                             
c4ea : 2054cc           [ 6] 	jsr gr_init			; Initialise graphics, default is 
                             
c4ed : 2060c7           [ 6] 	jsr init_keyboard	; initialise keyboard timer se
c4f0 : 2017c4           [ 6] 	jsr io_init			; Set default input/output device
                             
c4f3 : a900             [ 2] 	lda #0
c4f5 : 8508             [ 3] 	sta vdp_cnt
                             
c4f7 : 208cf7           [ 6] 	jsr df_init			; Initialise interpreter
                             
c4fa : 58               [ 2] 	cli					; irq interrupts enable
                             
c4fb : 60               [ 6] 	rts
                             
                             
                             ;* Initialises RAM, skipping page 3 which is for 
                             ;* Zeroes all addressable RAM in the default bank
c4fc :                       init_ram
c4fc : a002             [ 2] 	ldy #0x02			; But Y initially at 2 to not overwr
c4fe : a200             [ 2] 	ldx #0x00			; Page counter starts at zero
c500 : 8600             [ 3] 	stx 0x00			; Start at page 0
c502 : 8601             [ 3] 	stx 0x01
c504 :                       init_ram_1
c504 : e003             [ 2] 	cpx	#3				; Ignore page 3 (IO page)
c506 : f004             [ 3] 	beq init_ram_skip
c508 :                       init_ram_fill
AS65 Assembler for R6502 [1.42].                                     Page   64
---------------------------------- bank0.s -----------------------------------

c508 : a900             [ 2] 	lda #0				; Normal RAM filled with zero
c50a : 9100             [ 5] 	sta (0x00),y		; Write byte to RAM (zero or copy 
c50c :                       init_ram_skip
c50c : c8               [ 2] 	iny
c50d : d0f5             [ 3] 	bne init_ram_1		; Do a whole page
c50f : e601             [ 5] 	inc 0x01			; Increase page pointer
c511 : e8               [ 2] 	inx					; Reduce page count
c512 : e0c0             [ 2] 	cpx #0xc0			; Do all pages until page until we g
c514 : d0ee             [ 3] 	bne init_ram_1
                             
c516 : 4cd5c4           [ 3] 	jmp init_2			; Carry on initialisation
                             
                             ; 6502 Non-maskable interrupt come here
c519 :                       nmi
c519 : 40               [ 6] 	rti
                             
c51a :                       mod_sz_kernel_e
                             
                             
                             
                             ; Bank specific code goes here
                             	include "cia/cia.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  CIA.S
                             ;*  Code to initialise and utilise the 6522, whic
                             ;*	for various functions on the Oric including;
                             ;*		Port A:
                             ;*			[7..0] 	Printer data bits
                             ;*			[7..0] 	Interface to AY-3-8912
                             ;*		Port B:
                             ;*			[2..0] 	Keyboard matrix row selector
                             ;*			[7]	   	Tape output
                             ;*			[6]    	Tape player motor signal
                             ;*			[4]		Printer strobe
                             ;*		CA1:		Printer ACK
                             ;*		CB1: 		Tape input
                             ;*		CA2,CB2: 	Selecting the AY-3-8912
                             ;*
                             ;*  This file is called cia.s because code was or
                             ;*  for a MOS 6526 from a CMB64, but didn't get a
                             ;*	renaming this file ;-)
                             ;*
                             ;************************************************
                             
                             
                             	; ROM code
                             	code
                             
c51a :                       mod_sz_cia_s
                             	
                             
                             ;****************************************
                             ;* init_via0
                             ;* Initialise cia 0
                             ;* Input : None
AS65 Assembler for R6502 [1.42].                                     Page   65
---------------------------------- bank0.s -----------------------------------

                             ;* Output : None
                             ;* Regs affected : A
                             ;****************************************
                             ;init_via0_ser					; initialisation bytes for ser
                             ;	ldy #init_ser_tab-init_via0_tab
                             ;	bne init_via0_loop			; always branch
c51a :                       init_via0_tape					; initialisation bytes for tap
c51a : a017             [ 2] 	ldy #init_tape_tab-init_via0_tab
c51c : d002             [ 3] 	bne init_via0_loop			; always branch
c51e :                       init_via0
c51e : a000             [ 2] 	ldy #0						; Standard initialisation of VIA
c520 :                       init_via0_loop
c520 : b931c5           [ 4] 	lda init_via0_tab,y
c523 : 300b             [ 3] 	bmi init_via0_done
c525 : aa               [ 2] 	tax
c526 : c8               [ 2] 	iny
c527 : b931c5           [ 4] 	lda init_via0_tab,y
c52a : 9d0003           [ 5] 	sta IO_0,x
c52d : c8               [ 2] 	iny
c52e : d0f0             [ 3] 	bne init_via0_loop
                             	
c530 :                       init_via0_done	
c530 : 60               [ 6] 	rts							; return from sub
                             	
c531 :                       init_via0_tab
c531 : 0e7f                  	db IER, 	0x7f
c533 : 03ff                  	db DDRA,	0xff
c535 : 02f7                  	db DDRB,	0xf7			; Tape motor + KB select
c537 : 00b7                  	db PRB,		0xb7			; Port B default = cassette moto
c539 : 0cdd                  	db PCR,		0xdd			; Ensure AY is not selected (CB1
c53b : 0420                  	db T1CL,	lo(TIMER1_RATE)	; 50Hz
c53d : 0620                  	db T1LL,	lo(TIMER1_RATE)	; 50Hz
c53f : 054e                  	db T1CH,	hi(TIMER1_RATE)	; 50Hz
c541 : 074e                  	db T1LH,	hi(TIMER1_RATE)	; 50Hz
c543 : 0b40                  	db ACR,		0x40			; Timer 1 continuous
c545 : 0ec0                  	db IER,		0xc0			; Timer 1 interrupt enabled
c547 : ff                    	db -1
c548 :                       init_tape_tab
c548 : 0e7f                  	db IER,		0x7f			; Disable all interrupts
c54a : 08f4                  	db T2CL,	0xf4			; Timer 2 used for measuring CB1
c54c : 0c10                  	db PCR,		0x10			; Interrupt on CB1 positive edge
                             ;	db DDRB,	0xff			; Set port B output
c54e : 0bc0                  	db ACR,		0xc0			; T1 continuous and toggle PB7
c550 : 04a0                  	db T1CL,	lo(TAPE_RATE*2)	; Tape rate /2 = 0
c552 : 0501                  	db T1CH,	hi(TAPE_RATE*2)	; Tape rate /2 = 0
c554 : 0040                  	db PRB,		0x40			; Tape motor ON
c556 : ff                    	db -1
                             ;init_ser_tab
                             ;	db IER,		0x7f			; Disable all interrupts
                             ;	db T2CL,	0xf4			; Timer 2 used for measuring bi
                             ;	db PCR,		0xdd			; Ensure AY is not selected (CB
                             ;	db DDRB,	0xff			; Set port B output
                             ;	db -1
                             	
c557 :                       mod_sz_cia_e
                             
                             	include "tape/tape.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
AS65 Assembler for R6502 [1.42].                                     Page   66
---------------------------------- bank0.s -----------------------------------

                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  TAPE.S
                             ;*	These routines allow for tape input/output
                             ;*	The tape format is not compatible with a regul
                             ;*	but is a block format as follows;
                             ;*	Some zero bits (64) start a block.
                             ;*	Then two bytes of data representing the block 
                             ;*	Then 256 bytes of block data.
                             ;*	Each byte above consists of two '1' start bits
                             ;*	one '0' stop bit.
                             ;*	After each block, 1 second of 4800Hz (seen as 
                             ;*	is transmitted to allow the CPU to deal with t
                             ;*	when subsequently loading.
                             ;*	A bit is 4800Hz half cycle then 4800Hz half cy
                             ;*	'1' or 2400Hz half cycle for a '0', except for
                             ;*	block which is one second of 2400Hz.
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code
                             
c557 :                       tp_open_msg
c557 : 4c6f6164696e67..      	db	"Loading:",0
c560 :                       tp_save_msg
c560 : 536176696e673a00      	db	"Saving:",0
c568 :                       tp_back4
c568 : 0808080800            	db	8,8,8,8,0
                             	
                             ;* tp_init
                             ;* Basic initialisation for tape handling
c56d :                       tp_init
c56d : a900             [ 2] 	lda #0
c56f : 8558             [ 3] 	sta tp_flag
c571 : 8557             [ 3] 	sta tp_idx
c573 : 18               [ 2] 	clc
c574 : 60               [ 6] 	rts
                             
                             ;* Common function to open tape
c575 :                       tp_open_common				; Used by open write too
c575 : 78               [ 2] 	sei						; Interrupts disabled from here..
c576 : 201ac5           [ 6] 	jsr init_via0_tape		; Get ready to output (tape 
                             
                             
c579 : a200             [ 2] 	ldx #0
c57b : 8657             [ 3] 	stx tp_idx				; Initialise block
c57d : 8655             [ 3] 	stx tp_block
c57f : 8656             [ 3] 	stx tp_block+1
c581 : e8               [ 2] 	inx
c582 : 8658             [ 3] 	stx tp_flag				; assume 1 = Read mode
c584 : 60               [ 6] 	rts
                             
                             ;* tp_open_read
                             ;* Open tape settings
                             
c585 :                       fd_cload_getname_pc			; ** FOR ORICUTRON EMULATOR
                             
c585 :                       tp_open_bread
c585 :                       tp_open_read
c585 : a057             [ 2] 	ldy #lo(tp_open_msg)
AS65 Assembler for R6502 [1.42].                                     Page   67
---------------------------------- bank0.s -----------------------------------

c587 : a9c5             [ 2] 	lda #hi(tp_open_msg)
c589 : 2055cf           [ 6] 	jsr gr_print_msg
                             	
c58c : 2075c5           [ 6] 	jsr tp_open_common
                             
c58f :                       tp_get_fname_start
c58f : 2031c7           [ 6] 	jsr tp_read_byte
c592 : c924             [ 2] 	cmp #'$'				; Find the $ symbol
c594 : d0f9             [ 3] 	bne tp_get_fname_start
                             	
c596 : a209             [ 2] 	ldx #9					; 9 byte header - skip
c598 :                       tp_get_header
c598 : 2031c7           [ 6] 	jsr tp_read_byte
c59b : ca               [ 2] 	dex
c59c : d0fa             [ 3] 	bne tp_get_header
                             	
                             	; X= zero here, now get null terminated filename
c59e :                       tp_get_fname
c59e : 2031c7           [ 6] 	jsr tp_read_byte
c5a1 : 9d0004           [ 5] 	sta df_linbuff,x
c5a4 : e8               [ 2] 	inx
c5a5 : c900             [ 2] 	cmp #0
c5a7 : d0f5             [ 3] 	bne tp_get_fname
                             
c5a9 : a000             [ 2] 	ldy #lo(df_linbuff)
c5ab : a904             [ 2] 	lda #hi(df_linbuff)
c5ad : 2055cf           [ 6] 	jsr gr_print_msg
c5b0 : a920             [ 2] 	lda #' '
c5b2 : 2001cf           [ 6] 	jsr gr_put_byte
                             
c5b5 : 18               [ 2] 	clc
c5b6 : 60               [ 6] 	rts
                             
c5b7 :                       tt_getsync_pc				; ** FOR ORICUTRON EMULATOR **
c5b7 :                       tt_getsync_end_pc			; ** FOR ORICUTRON EMULATOR *
                             
c5b7 : ea               [ 2] 	nop
                             	
                             
                             ;* tp_close
                             ;* Close tape settings
c5b8 :                       tp_close
c5b8 : a558             [ 3] 	lda tp_flag
c5ba : c902             [ 2] 	cmp #2					; Write mode?
c5bc : d003             [ 3] 	bne tp_close_no_flush	; If not no need to flush
c5be : 204ec6           [ 6] 	jsr tp_put_block		; Flush the current block
c5c1 :                       tp_close_no_flush
c5c1 : a90d             [ 2] 	lda #0x0d				; Line feed
c5c3 : 2001cf           [ 6] 	jsr gr_put_byte
                             	
c5c6 : 201ec5           [ 6] 	jsr init_via0			; Back to normal
c5c9 : 58               [ 2] 	cli
c5ca : a900             [ 2] 	lda #0					; Zero tape flag
c5cc : 8558             [ 3] 	sta tp_flag
                             
c5ce :                       tt_csave_end_pc				; ** FOR ORICUTRON EMULATOR **
                             
c5ce : 18               [ 2] 	clc
c5cf : 60               [ 6] 	rts
                             
                             ;* tp_open_write
                             ;* Open tape settings
AS65 Assembler for R6502 [1.42].                                     Page   68
---------------------------------- bank0.s -----------------------------------

c5d0 :                       tp_open_bwrite
c5d0 : a001             [ 2] 	ldy #hi(0x101)
c5d2 : a201             [ 2] 	ldx #lo(0x101)
c5d4 : d004             [ 3] 	bne tp_open_write_start
c5d6 :                       tp_open_write
c5d6 : a018             [ 2] 	ldy #hi(6000+0x101)
c5d8 : a271             [ 2] 	ldx #lo(6000+0x101)
                             
c5da :                       fd_csave_getname_pc			; ** FOR ORICUTRON EMULATOR
                             
c5da :                       tp_open_write_start
c5da : 845a             [ 3] 	sty tp_delay+1
c5dc : 8659             [ 3] 	stx tp_delay
c5de : a060             [ 2] 	ldy #lo(tp_save_msg)
c5e0 : a9c5             [ 2] 	lda #hi(tp_save_msg)
c5e2 : 2055cf           [ 6] 	jsr gr_print_msg
c5e5 : a000             [ 2] 	ldy #lo(df_linbuff)
c5e7 : a904             [ 2] 	lda #hi(df_linbuff)
c5e9 : 2055cf           [ 6] 	jsr gr_print_msg
c5ec : a920             [ 2] 	lda #' '
c5ee : 2001cf           [ 6] 	jsr gr_put_byte
                             	
c5f1 : 2075c5           [ 6] 	jsr tp_open_common		; Same as reading but
c5f4 : e658             [ 5] 	inc tp_flag				; Make flag = 2 for write mode
                             
c5f6 :                       tt_writeleader_pc			; ** FOR ORICUTRON EMULATOR *
c5f6 :                       tt_writeleader_end_pc		; ** FOR ORICUTRON EMULATO
c5f6 : a280             [ 2] 	ldx #128				; 128 low bits
c5f8 : 2046c6           [ 6] 	jsr tp_put_delay
                             
c5fb : a924             [ 2] 	lda #'$'				; Start of header symbol
c5fd : 38               [ 2] 	sec
c5fe : 209dc6           [ 6] 	jsr tp_write_byte
                             	
c601 : a209             [ 2] 	ldx #9					; Header, for future expansion
c603 : a9ff             [ 2] 	lda #0xff
c605 :                       tp_write_header	
c605 : 38               [ 2] 	sec
c606 : 209dc6           [ 6] 	jsr tp_write_byte
c609 : ca               [ 2] 	dex
c60a : d0f9             [ 3] 	bne tp_write_header
                             	
c60c : a200             [ 2] 	ldx #0
c60e :                       tp_write_fname
c60e : bd0004           [ 4] 	lda df_linbuff,x		; Put the filename
c611 : 38               [ 2] 	sec
c612 : 209dc6           [ 6] 	jsr tp_write_byte
c615 : e8               [ 2] 	inx
c616 : c900             [ 2] 	cmp #0
c618 : d0f4             [ 3] 	bne tp_write_fname
                             	
c61a : 18               [ 2] 	clc
c61b : 60               [ 6] 	rts
                             
                             
                             ;* tp_put_byte
                             ;* Put to byte to tape - if got a block then save
                             
c61c :                       tp_put_byte
c61c : 48               [ 3] 	pha
c61d : 8538             [ 3] 	sta tmp_d
c61f : 8a               [ 2] 	txa
AS65 Assembler for R6502 [1.42].                                     Page   69
---------------------------------- bank0.s -----------------------------------

c620 : 48               [ 3] 	pha
c621 : 98               [ 2] 	tya
c622 : 48               [ 3] 	pha
c623 : a538             [ 3] 	lda tmp_d
                             	
c625 : a457             [ 3] 	ldy tp_idx				; Save byte to buffer
c627 : 990002           [ 5] 	sta tp_buf,y
c62a : c8               [ 2] 	iny
c62b : 8457             [ 3] 	sty tp_idx
c62d : d010             [ 3] 	bne tp_put_byte_done
c62f : 204ec6           [ 6] 	jsr tp_put_block		; Flush block to tape
c632 : 18               [ 2] 	clc						; Increment block #
c633 : a555             [ 3] 	lda tp_block
c635 : 6901             [ 2] 	adc #1
c637 : 8555             [ 3] 	sta tp_block
c639 : a556             [ 3] 	lda tp_block+1
c63b : 6900             [ 2] 	adc #0
c63d : 8556             [ 3] 	sta tp_block+1
c63f :                       tp_put_byte_done
c63f : 68               [ 4] 	pla
c640 : a8               [ 2] 	tay
c641 : 68               [ 4] 	pla
c642 : aa               [ 2] 	tax
c643 : 68               [ 4] 	pla
c644 : 18               [ 2] 	clc
c645 : 60               [ 6] 	rts
                             
                             ; tp_put_delay
                             ;* X = number of zero bits to insert
c646 :                       tp_put_delay
c646 : 18               [ 2] 	clc
c647 : 20c0c6           [ 6] 	jsr tp_write_bit
c64a : ca               [ 2] 	dex
c64b : d0f9             [ 3] 	bne tp_put_delay
c64d : 60               [ 6] 	rts
                             
                             ;* tp_put_block
                             ;* flush a block to tape
c64e :                       tp_put_block
c64e : 2072c6           [ 6] 	jsr tp_print_block
                             		
c651 : a280             [ 2] 	ldx #128				; 128 low bits
c653 : 2046c6           [ 6] 	jsr tp_put_delay
                             
c656 : a555             [ 3] 	lda tp_block			; Save block number low then high
c658 : 18               [ 2] 	clc
c659 : 209dc6           [ 6] 	jsr tp_write_byte
c65c : a556             [ 3] 	lda tp_block+1
c65e : 38               [ 2] 	sec
c65f : 209dc6           [ 6] 	jsr tp_write_byte
                             
c662 : a200             [ 2] 	ldx #0
c664 :                       tp_put_block_bytes
c664 : bd0002           [ 4] 	lda tp_buf,x			; Then write out all bytes in blo
c667 : 18               [ 2] 	clc
c668 : 209dc6           [ 6] 	jsr tp_write_byte
c66b : e8               [ 2] 	inx
c66c : d0f6             [ 3] 	bne tp_put_block_bytes	; Always 256 bytes
                             	
c66e : 2092c6           [ 6] 	jsr tp_block_gap		; Wait a while, still outputti
                             
c671 : 60               [ 6] 	rts
AS65 Assembler for R6502 [1.42].                                     Page   70
---------------------------------- bank0.s -----------------------------------

                             
                             ; tp_print_block
c672 :                       tp_print_block
c672 : a556             [ 3] 	lda tp_block+1			; Print block number hi byte
c674 : 2089c1           [ 6] 	jsr str_a_to_x
c677 : 2001cf           [ 6] 	jsr gr_put_byte
c67a : 8a               [ 2] 	txa
c67b : 2001cf           [ 6] 	jsr gr_put_byte
c67e : a555             [ 3] 	lda tp_block			; Print block number lo byte
c680 : 2089c1           [ 6] 	jsr str_a_to_x
c683 : 2001cf           [ 6] 	jsr gr_put_byte
c686 : 8a               [ 2] 	txa
c687 : 2001cf           [ 6] 	jsr gr_put_byte
c68a : a9c5             [ 2] 	lda #hi(tp_back4)		; Go back 4 characters to pri
c68c : a068             [ 2] 	ldy #lo(tp_back4)
c68e : 2055cf           [ 6] 	jsr gr_print_msg
c691 : 60               [ 6] 	rts
                             
                             ; tp_block_gap
                             ; Send 2400 bits of zero ~ 1.5 seconds
                             ; add 0x101 due to how counters decrement
                             ; For binary mode it is just 1 bit gap
c692 :                       tp_block_gap
c692 : a45a             [ 3] 	ldy tp_delay+1
c694 : a659             [ 3] 	ldx tp_delay
c696 :                       tp_block_gap_1
c696 : 2046c6           [ 6] 	jsr tp_put_delay
c699 : 88               [ 2] 	dey
c69a : d0fa             [ 3] 	bne tp_block_gap_1
c69c : 60               [ 6] 	rts	
                             
                             ;* tp_write_byte
                             ;* Write a byte to tape which looks like this
                             ;* 11xxxxxxxx0
c69d :                       tt_putbyte_pc				; ** FOR ORICUTRON EMULATOR **
c69d :                       tp_write_byte
c69d : 48               [ 3] 	pha
c69e : 08               [ 3] 	php
c69f : 38               [ 2] 	sec					; 1 for start bit
c6a0 : 20c0c6           [ 6] 	jsr tp_write_bit
c6a3 : 38               [ 2] 	sec					; 1 for start bit
c6a4 : 20c0c6           [ 6] 	jsr tp_write_bit
c6a7 : a008             [ 2] 	ldy #8				; 8 bits of data
c6a9 :                       tp_write_byte_bit
c6a9 : 6a               [ 2] 	ror a
c6aa : 20c0c6           [ 6] 	jsr tp_write_bit
c6ad : 88               [ 2] 	dey
c6ae : d0f9             [ 3] 	bne tp_write_byte_bit
c6b0 : 18               [ 2] 	clc					; 0 for stop bit
c6b1 : 20c0c6           [ 6] 	jsr tp_write_bit
c6b4 : 28               [ 4] 	plp
c6b5 : 9007             [ 3] 	bcc tp_write_byte_nodelay
c6b7 : 8a               [ 2] 	txa
c6b8 : a220             [ 2] 	ldx #32					; Delays needed
c6ba : 2046c6           [ 6] 	jsr tp_put_delay
c6bd : aa               [ 2] 	tax
c6be :                       tp_write_byte_nodelay
c6be : 68               [ 4] 	pla
c6bf :                       tt_putbyte_end_pc			; ** FOR ORICUTRON EMULATOR *
c6bf : 60               [ 6] 	rts
                             	
                             
AS65 Assembler for R6502 [1.42].                                     Page   71
---------------------------------- bank0.s -----------------------------------

                             ;* tp_write_bit
                             ;* Write a bit in C to tape which looks like this
                             ;* Half cycle of 4800Hz, then
                             ;*		half cycle of 4800Hz for a 1
                             ;*		half cycle of 2400Hz for a 0
c6c0 :                       tp_write_bit
c6c0 : 48               [ 3] 	pha
c6c1 : 8a               [ 2] 	txa
c6c2 : 48               [ 3] 	pha
c6c3 : 08               [ 3] 	php						; Save the bit to be stored
                             
c6c4 : a9d0             [ 2] 	lda #TAPE_RATE			; Half cycle first of 4800Hz
c6c6 : a200             [ 2] 	ldx #0
c6c8 : 8d0603           [ 4] 	sta IO_0+T1LL
c6cb : 8e0703           [ 4] 	stx IO_0+T1LH			; This starts the timer
c6ce : ad0403           [ 4] 	lda IO_0+T1CL			; Clear any interrupt flag
c6d1 :                       tp_write_bit_chk1
c6d1 : 2c0d03           [ 4] 	bit IO_0+IFR			; Check IRF for bit 6
c6d4 : 50fb             [ 3] 	bvc tp_write_bit_chk1	; V=0? Keep checking
c6d6 : ad0403           [ 4] 	lda IO_0+T1CL			; Clear interrupt flag
                             	
c6d9 : 28               [ 4] 	plp						; Get the bit to be stored
c6da : a9d0             [ 2] 	lda #TAPE_RATE			; Assume putting out a 1 in 2nd
c6dc : b002             [ 3] 	bcs tp_write_bit_t1		; A zero is half the rate (
c6de : 0a               [ 2] 	asl	a					; TAPE_RATE * 2 need to inc X
c6df : e8               [ 2] 	inx
c6e0 :                       tp_write_bit_t1
c6e0 : 8d0603           [ 4] 	sta IO_0+T1LL
c6e3 : 8e0703           [ 4] 	stx IO_0+T1LH			; This starts the timer
c6e6 : ad0403           [ 4] 	lda IO_0+T1CL			; Clear any interrupt flag
c6e9 :                       tp_write_bit_chk2
c6e9 : 2c0d03           [ 4] 	bit IO_0+IFR			; Check IRF for bit 6
c6ec : 50fb             [ 3] 	bvc tp_write_bit_chk2	; V=0? Keep checking
c6ee : ad0403           [ 4] 	lda IO_0+T1CL			; Clear interrupt flag
c6f1 : 68               [ 4] 	pla
c6f2 : aa               [ 2] 	tax
c6f3 : 68               [ 4] 	pla
c6f4 : 60               [ 6] 	rts
                             
                             
                             
                             ;* tp_get_byte
                             ;* Get a byte from buffer - load blocks as needed
c6f5 :                       tp_get_byte
c6f5 : 8a               [ 2] 	txa
c6f6 : 48               [ 3] 	pha
c6f7 : 98               [ 2] 	tya
c6f8 : 48               [ 3] 	pha
                             	
c6f9 : a457             [ 3] 	ldy tp_idx				; Index in to buffer
c6fb : d005             [ 4] 	bne tp_get_byte_buf		; No need to load from tape
c6fd : 2012c7           [ 6] 	jsr tp_get_block		; Else load a block from tape
c700 : a000             [ 2] 	ldy #0					; 0 index is now valid
c702 :                       tp_get_byte_buf
c702 : b90002           [ 4] 	lda tp_buf,y			; Get from memory buffer
c705 : c8               [ 2] 	iny
c706 : 8457             [ 3] 	sty tp_idx				; Never zero on leaving
c708 : 8538             [ 3] 	sta tmp_d
c70a : 68               [ 4] 	pla
c70b : a8               [ 2] 	tay
c70c : 68               [ 4] 	pla
c70d : aa               [ 2] 	tax
AS65 Assembler for R6502 [1.42].                                     Page   72
---------------------------------- bank0.s -----------------------------------

c70e : a538             [ 3] 	lda tmp_d
c710 : 18               [ 2] 	clc
c711 : 60               [ 6] 	rts						; Except when buffer done
                             
                             ;* tp_get_block
                             ;* Load a block in to memory
c712 :                       tp_get_block
                             
c712 : 2031c7           [ 6] 	jsr tp_read_byte		; Get block number
c715 : 8555             [ 3] 	sta tp_block
c717 : 2031c7           [ 6] 	jsr tp_read_byte
c71a : 8556             [ 3] 	sta tp_block+1
                             	
c71c : 2072c6           [ 6] 	jsr tp_print_block
                             	
c71f : a000             [ 2] 	ldy #0
c721 : 8457             [ 3] 	sty tp_idx
c723 :                       tp_get_block_bytes
c723 : 2031c7           [ 6] 	jsr tp_read_byte		; Fill buffer
c726 : a457             [ 3] 	ldy tp_idx
c728 : 990002           [ 5] 	sta tp_buf,y
c72b : c8               [ 2] 	iny
c72c : 8457             [ 3] 	sty tp_idx
c72e : d0f3             [ 3] 	bne tp_get_block_bytes	; Always 256 bytes
                             
c730 : 60               [ 6] 	rts
                             	
                             
                             ;* tp_read_byte
                             ;* Read a byte from tape, always expects one '1' 
c731 :                       tt_readbyte_pc				; ** FOR ORICUTRON EMULATOR **
c731 :                       tp_read_byte
c731 :                       tp_read_byte_st
c731 : 2045c7           [ 6] 	jsr tp_read_bit			; Expecting a 1
c734 : 90fb             [ 3] 	bcc tp_read_byte_st
c736 : 2045c7           [ 6] 	jsr tp_read_bit			; Should be another 1
c739 : 90f6             [ 3] 	bcc tp_read_byte_st
                             	; Ok got 2 start
                             	
c73b : a008             [ 2] 	ldy #8				; Get 8 bits
c73d :                       tp_read_byte_bits
c73d : 2045c7           [ 6] 	jsr tp_read_bit
c740 : 6a               [ 2] 	ror a
c741 : 88               [ 2] 	dey
c742 : d0f9             [ 3] 	bne tp_read_byte_bits
                             	; Byte is in A, stop bit is not waited for..
c744 :                       tt_readbyte_end_pc			; ** FOR ORICUTRON EMULATOR 
c744 : 60               [ 6] 	rts
                             
                             ;* tp_read_bit
                             ;* Get a CB1 transition and measure the time
                             ;* The measurement indicates a 1 or 0 received
c745 :                       tp_read_bit
c745 : 48               [ 3] 	pha
c746 : ad0003           [ 4] 	lda IO_0+PRB			; Clear CB1 interrupt flag by rea
c749 :                       tp_read_bit_cb1
c749 :                       tt_getsync_loop_pc			; ** FOR ORICUTRON EMULATOR 
c749 : ad0d03           [ 4] 	lda IO_0+IFR
c74c : 2910             [ 2] 	and #IFR_CB1
c74e : f0f9             [ 3] 	beq tp_read_bit_cb1		; Keep checking until CB1 a
                             
c750 : ad0903           [ 4] 	lda IO_0+T2CH			; Get the high byte of T2 counte
AS65 Assembler for R6502 [1.42].                                     Page   73
---------------------------------- bank0.s -----------------------------------

c753 : 48               [ 3] 	pha
c754 : a9ff             [ 2] 	lda #0xff				; Reset T2 counter high byte
c756 : 8d0903           [ 4] 	sta IO_0+T2CH			; Reset high byte of T2 counter
c759 : 68               [ 4] 	pla						; What was previous counter?
                             ;	beq tp_io_error			; If down to zero, then some 
c75a : c9fe             [ 2] 	cmp #0xfe				; C=1 if T2 >= 0xfe else C=0
c75c : 68               [ 4] 	pla
c75d : 60               [ 6] 	rts						; Carry contains the bit received
c75e :                       tp_io_error
                             	SWBRK DFERR_BREAK		; DEFINE A NEW ERROR!
                             
                             
                             
                             
                             	include "keyboard/keyboard.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  KEYBOARD.S
                             ;*	Keyboard driver code. It is very slow to scan 
                             ;*	routines here do a basic scan for any key befo
                             ;*	the specific key. Still, it has a noticeable i
                             ;*	CPU especially in dflat which checks the key a
                             ;*	keyword is executed.
                             ;*	Rather than working off interrupts these routi
                             ;*	need to be called as needed. The T1 interrupt 
                             ;*	track of keyboard timers for repeat delay and 
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code
                             
                             ;****************************************
                             ;* init_keyboard
                             ;* Initialise the keyboard settings
                             ;****************************************
c760 :                       init_keyboard
c760 : a914             [ 2] 	lda #KB_REP_DEL
c762 : 8531             [ 3] 	sta kb_rdel_tim
c764 : a903             [ 2] 	lda #KB_REP_TIM
c766 : 8530             [ 3] 	sta kb_rep_tim
c768 : a902             [ 2] 	lda #KB_DEBOUNCE
c76a : 852e             [ 3] 	sta kb_deb_tim
c76c : a900             [ 2] 	lda #0
c76e : 852c             [ 3] 	sta kb_stat
                             
c770 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* kb_stick
                             ;* Check for fire | down | up | right | left
                             ;*        bit  4     3      2     1       0
                             ;* Returns bit mask of keys pressed
                             ;****************************************
c771 :                       kb_stick
c771 : a900             [ 2] 	lda #0					; Result will be in A
AS65 Assembler for R6502 [1.42].                                     Page   74
---------------------------------- bank0.s -----------------------------------

c773 : 48               [ 3] 	pha	
                             	; Select Row 4 only, all keys on this row
c774 : a904             [ 2] 	lda #4
c776 : 8d0003           [ 4] 	sta IO_0+PRB
c779 : a004             [ 2] 	ldy #4
c77b : a20e             [ 2] 	ldx #SND_REG_IOA		; AY Port A for columns
c77d :                       kb_stick_pos
c77d : b91fc9           [ 4] 	lda kb_stick_mask,y		; Get the column mask
c780 : 2000c0           [ 6] 	jsr snd_set				; Activate column
c783 : ad0003           [ 4] 	lda IO_0+PRB			; Read Port B
c786 : 2908             [ 2] 	and #KB_SENSE			; Something pressed?
c788 : c908             [ 2] 	cmp #KB_SENSE			; C=1 if set else 0
c78a : 68               [ 4] 	pla
c78b : 2a               [ 2] 	rol a					; Get C in to A
c78c : 48               [ 3] 	pha
c78d : 88               [ 2] 	dey
c78e : 10ed             [ 3] 	bpl kb_stick_pos		; Do all 5 positions
c790 : 68               [ 4] 	pla						; Result in A
c791 : 60               [ 6] 	rts
                             
                             	
                             ;****************************************
                             ;* kb_any_key
                             ;* Quick check for any key except shifts & ctrl
                             ;* Carry = 1 means key pressed
                             ;****************************************
c792 :                       kb_any_key
                             	; Select all columns except 4
c792 : a910             [ 2] 	lda #0b00010000			; Deselect only col 4
c794 : a20e             [ 2] 	ldx #SND_REG_IOA		; On AY port A
c796 : 2000c0           [ 6] 	jsr snd_set
                             
c799 : a007             [ 2] 	ldy #7					; Start from row 7
c79b :                       kb_any_key_row
c79b : 8c0003           [ 4] 	sty IO_0+PRB			; Select row on port B
c79e : ea               [ 2] 	nop
c79f : ea               [ 2] 	nop
                             	
c7a0 : ad0003           [ 4] 	lda IO_0+PRB			; Read Port B
c7a3 : 2908             [ 2] 	and #KB_SENSE			; Something pressed?
c7a5 : d005             [ 3] 	bne kb_any_key_pressed
c7a7 : 88               [ 2] 	dey						; If not then next row
c7a8 : 10f1             [ 3] 	bpl kb_any_key_row		; Until all rows done
c7aa :                       kb_any_key_none
c7aa : 18               [ 2] 	clc						; C=0 means not pressed
c7ab : 60               [ 6] 	rts
c7ac :                       kb_any_key_pressed
c7ac :                       kb_read_got
c7ac : 38               [ 2] 	sec						; C=1 means pressed
c7ad : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* kb_read_raw
                             ;* Read keyboard
                             ;* Y = Keyboard code
                             ;* Carry = 1 means key found, 0 = no keys found
                             ;****************************************
c7ae :                       kb_read_raw
c7ae : 2092c7           [ 6] 	jsr kb_any_key			; Quick check is anything down?
c7b1 : 902f             [ 3] 	bcc kb_read_nothing		; Don't bother if not
c7b3 :                       kb_read_raw_force
c7b3 : a200             [ 2] 	ldx #0					; Start at column 0	
AS65 Assembler for R6502 [1.42].                                     Page   75
---------------------------------- bank0.s -----------------------------------

c7b5 : 86ab             [ 3] 	stx zp_tmp1
c7b7 :                       kb_check_matrix_col
                             	; else set the col in the AY port A
c7b7 : bd17c9           [ 4] 	lda kb_col_mask,x
c7ba : a20e             [ 2] 	ldx #SND_REG_IOA		; Select Port A of AY
c7bc : 2000c0           [ 6] 	jsr snd_set				; Set Port A to column mask
c7bf : a000             [ 2] 	ldy #0
c7c1 :                       kb_check_matrix_row
c7c1 : 8c0003           [ 4] 	sty IO_0+PRB			; Select row from Y
                             	
c7c4 : a202             [ 2] 	ldx #2
c7c6 :                       kb_hw_delay
c7c6 : ca               [ 2] 	dex
c7c7 : d0fd             [ 3] 	bne kb_hw_delay
                             
c7c9 : ad0003           [ 4] 	lda IO_0+PRB			; Read Port B
c7cc : 2908             [ 2] 	and #KB_SENSE			; Bit 3 is the sense
c7ce : d016             [ 3] 	bne kb_read_raw_got
                             	; No key for this row/col, next
c7d0 : c8               [ 2] 	iny
c7d1 : c008             [ 2] 	cpy #8					; Done 8 rows?
c7d3 : d0ec             [ 3] 	bne kb_check_matrix_row
                             	; ok check next row
c7d5 : a6ab             [ 3] 	ldx zp_tmp1
c7d7 :                       kb_check_skip4
c7d7 : e8               [ 2] 	inx
c7d8 : e004             [ 2] 	cpx #4					; Skip 4?
c7da : f0fb             [ 3] 	beq kb_check_skip4
c7dc : 86ab             [ 3] 	stx zp_tmp1
c7de : e008             [ 2] 	cpx #8					; Done 8 cols?
c7e0 : d0d5             [ 3] 	bne kb_check_matrix_col
                             	; No key was sensed
c7e2 :                       kb_read_nothing
c7e2 : a000             [ 2] 	ldy #0					; Raw key codes
c7e4 : 18               [ 2] 	clc						; No key sensed flag
c7e5 : 60               [ 6] 	rts
c7e6 :                       kb_read_raw_got
                             	;Y=row, zp_temp1=col
c7e6 : a5ab             [ 3] 	lda zp_tmp1				; Get the column num
c7e8 : 0a               [ 2] 	asl a					; Shift in to bits 5,4,3
c7e9 : 0a               [ 2] 	asl a
c7ea : 0a               [ 2] 	asl a
c7eb : 85ab             [ 3] 	sta zp_tmp1
c7ed : 98               [ 2] 	tya						; Now or with row number
c7ee : 05ab             [ 3] 	ora zp_tmp1
c7f0 : a8               [ 2] 	tay						; Put in to Y
c7f1 : 38               [ 2] 	sec
c7f2 : 60               [ 6] 	rts
                             	
                             ;****************************************
                             ;* kb_scan_key
                             ;* Scans for a key, returns zero for no key found
                             ;* Processes caps and shift lock but these don't 
                             ;* A = Key code
                             ;****************************************
c7f3 :                       kb_scan_key
c7f3 : 20aec7           [ 6] 	jsr kb_read_raw			; Check if a key is sensed
c7f6 : b00c             [ 4] 	bcs kb_scan_decode		; go ahead and decode
                             	; If pressed nothing then reset timers
c7f8 : a9ff             [ 2] 	lda #255
c7fa : 8529             [ 3] 	sta kb_raw				; Reset raw key settings
c7fc : 852a             [ 3] 	sta kb_last				; And last key
AS65 Assembler for R6502 [1.42].                                     Page   76
---------------------------------- bank0.s -----------------------------------

c7fe : a531             [ 3] 	lda kb_rdel_tim			; Reset repeat timer to initia
c800 : 852f             [ 3] 	sta kb_rep
c802 :                       kb_scan_wait
c802 : 38               [ 2] 	sec						; Code not valid
c803 : 60               [ 6] 	rts						; And done (A=0)	
c804 :                       kb_scan_decode
                             	; If got here then raw key is good
c804 : a52a             [ 3] 	lda kb_last				; Preload A with last decoded key
c806 : c429             [ 3] 	cpy kb_raw				; Same as last raw key?
c808 : 8429             [ 3] 	sty kb_raw				; Already save new raw key
c80a : d002             [ 3] 	bne kb_process_new		; If is new raw key, look at
c80c : f059             [ 3] 	beq kb_do_repeat		; Else go handle repeating wit
c80e :                       kb_process_new
c80e : a531             [ 3] 	lda kb_rdel_tim			; Reset repeat timer to initia
c810 : 852f             [ 3] 	sta kb_rep
                             	; Now to get a proper key code translated from r
                             	; Check for shift and ctrl (not debounced!)
c812 : a9ef             [ 2] 	lda #0b11101111			; Select column 4
c814 : a20e             [ 2] 	ldx #SND_REG_IOA		; On AY port A
c816 : 2000c0           [ 6] 	jsr snd_set
                             
                             	; check shifted keys
c819 : a204             [ 2] 	ldx #4					; Row 4 (left shift)
c81b : 8e0003           [ 4] 	stx IO_0+PRB			; Select row on port B
c81e : ea               [ 2] 	nop
c81f : ea               [ 2] 	nop
                             
c820 : ad0003           [ 4] 	lda IO_0+PRB			; Read Port B
                             
c823 : a207             [ 2] 	ldx #7					; Row 7 (right shift)
c825 : 8e0003           [ 4] 	stx IO_0+PRB			; Select row on port B
c828 : ea               [ 2] 	nop
c829 : ea               [ 2] 	nop
                             
c82a : 0d0003           [ 4] 	ora IO_0+PRB			; Combine Port B
c82d : be97c8           [ 4] 	ldx kb_table_std,y		; Pre-load standard key code
c830 : 2908             [ 2] 	and #KB_SENSE			; Bit 3 is the sense
c832 : f003             [ 3] 	beq kb_read_noshift		; Skip over if no shift
c834 : bed7c8           [ 4] 	ldx kb_table_shift,y	; Load up standard key code
c837 :                       kb_read_noshift
c837 : 862b             [ 3] 	stx kb_code				; Save the mapped keycode
                             	; check ctrl key
c839 : a202             [ 2] 	ldx #2					; Row 2 (ctrl key)
c83b : 8e0003           [ 4] 	stx IO_0+PRB			; Select row on port B
c83e : ea               [ 2] 	nop
c83f : ea               [ 2] 	nop
                             
c840 : ad0003           [ 4] 	lda IO_0+PRB			; Read Port B
c843 : 2908             [ 2] 	and #KB_SENSE
c845 : f00a             [ 3] 	beq kb_skip_ctrl
c847 : a52b             [ 3] 	lda kb_code
c849 : 291f             [ 2] 	and #0x1f				; Ctrl will result in codes 0 to 31
c84b : 852b             [ 3] 	sta kb_code				; Override the keycode
c84d : f028             [ 3] 	beq kb_brk
c84f : 101e             [ 3] 	bpl	kb_store_last		; Check repeat (bpl is always
c851 :                       kb_skip_ctrl
c851 : a52c             [ 3] 	lda kb_stat				; Check caps lock
c853 : 2901             [ 2] 	and #KB_CAPSLK
c855 : f018             [ 3] 	beq kb_store_last
c857 : a52b             [ 3] 	lda kb_code
c859 : c961             [ 2] 	cmp #'a'				; If < 'a' then skip
c85b : 9012             [ 3] 	bcc kb_store_last
AS65 Assembler for R6502 [1.42].                                     Page   77
---------------------------------- bank0.s -----------------------------------

c85d : c97b             [ 2] 	cmp #'z'+1				; If > 'z' then skip
c85f : b00e             [ 3] 	bcs kb_store_last
c861 : a52b             [ 3] 	lda kb_code				; Get the actual code	
c863 : 4920             [ 2] 	eor #0x20				; Switch off bit 0x20
c865 : d008             [ 3] 	bne kb_store_last
c867 :                       kb_do_repeat
c867 : a62f             [ 3] 	ldx kb_rep				; Has repeat expired?
c869 : d008             [ 3] 	bne	kb_in_repeat		; If not then still in repeat
c86b : a630             [ 3] 	ldx kb_rep_tim			; Set repeat speed
c86d : 862f             [ 3] 	stx kb_rep
c86f :                       kb_store_last
c86f : 852a             [ 3] 	sta kb_last				; Make last code same as this
c871 : 18               [ 2] 	clc						; Code valid
c872 : 60               [ 6] 	rts	
c873 :                       kb_in_repeat
c873 : a900             [ 2] 	lda #0					; Don't emit a keycode
c875 : 38               [ 2] 	sec
c876 : 60               [ 6] 	rts
c877 :                       kb_brk
                             	SWBRK DFERR_OK
                             
                             
                             ;****************************************
                             ;* kb_get_key
                             ;* Waits for a key press, C=1 synchronous
                             ;* A = Key code, C=1 means valid
                             ;****************************************
c879 :                       kb_get_key
c879 : 8a               [ 2] 	txa
c87a : 48               [ 3] 	pha
c87b : 98               [ 2] 	tya
c87c : 48               [ 3] 	pha
                             
c87d :                       kb_get_try	
c87d : 08               [ 3] 	php
c87e : 20f3c7           [ 6] 	jsr kb_scan_key
c881 : 900b             [ 3] 	bcc kb_scan_got_key
c883 : 28               [ 4] 	plp						; No key, so check C
c884 : b0f7             [ 3] 	bcs kb_get_try			; Keep looking if C
c886 : 38               [ 2] 	sec						; Indicate key not valid
                             	
c887 : 68               [ 4] 	pla
c888 : a8               [ 2] 	tay
c889 : 68               [ 4] 	pla
c88a : aa               [ 2] 	tax
c88b : a900             [ 2] 	lda #0
                             	
c88d : 60               [ 6] 	rts
c88e :                       kb_scan_got_key
c88e : 28               [ 4] 	plp						; Pull stack
c88f : 18               [ 2] 	clc						; Indicate key valid
                             
c890 : 68               [ 4] 	pla
c891 : a8               [ 2] 	tay
c892 : 68               [ 4] 	pla
c893 : aa               [ 2] 	tax
                             	
c894 : a52b             [ 3] 	lda kb_code
                             	
c896 : 60               [ 6] 	rts
                             	
                             ;****************************************
AS65 Assembler for R6502 [1.42].                                     Page   78
---------------------------------- bank0.s -----------------------------------

                             ;* kb_table_std (no shift)
                             ;* Each line is one column
                             ;****************************************
c897 :                       kb_table_std
c897 : 376a6d6b20757938      	db '7' ,'j' ,'m' ,'k' ,' ' ,'u' ,'y' ,'8'
c89f : 6e7436392c69686c      	db 'n' ,'t' ,'6' ,'9' ,',' ,'i' ,'h' ,'l'
c8a7 : 3572623b2e6f6730      	db '5' ,'r' ,'b' ,';' ,'.' ,'o' ,'g' ,'0'
c8af : 7666342d0b70652f      	db 'v' ,'f' ,'4' ,'-' ,0x0b,'p' ,'e' ,'/'
c8b7 : 0000000000000000      	db 0,0,0,0,0,0,0,0 ; Column 4 is shift and ctrl 
c8bf : 311b7a00087f610d      	db '1' ,0x1b,'z' ,0   ,0x08,0x7f,'a' ,0x0d
c8c7 : 7871325c0a5d7300      	db 'x' ,'q' ,'2' ,0x5c,0x0a,']' ,'s' ,0
c8cf : 33646327095b773d      	db '3' ,'d' ,'c' ,0x27,0x09,'[' ,'w' ,'='
                             
                             ;* kb_table_shift (with shift)
c8d7 :                       kb_table_shift
c8d7 : 264a4d4b2055592a      	db '&' ,'J' ,'M' ,'K' ,' ' ,'U' ,'Y' ,'*'
c8df : 4e545e283c49484c      	db 'N' ,'T' ,'^' ,'(' ,'<' ,'I' ,'H' ,'L'
c8e7 : 2552423a3e4f4729      	db '%' ,'R' ,'B' ,':' ,'>' ,'O' ,'G' ,')'
c8ef : 5646245f0b50453f      	db 'V' ,'F' ,'$' ,'_' ,0x0b,'P' ,'E' ,'?'
c8f7 : 0000000000000000      	db 0,0,0,0,0,0,0,0 ; Column 4 is shift and ctrl 
c8ff : 211b5a00087f410d      	db '!' ,0x1b,'Z' ,0   ,0x08,0x7f,'A' ,0x0d
c907 : 5851407c0a7d5300      	db 'X' ,'Q' ,'@' ,'|' ,0x0a,'}' ,'S' ,0
c90f : 23444322097b572b      	db '#' ,'D' ,'C' ,0x22,0x09,'{' ,'W' ,'+'
                             
c917 :                       kb_col_mask
c917 : fe                    	db 0b11111110
c918 : fd                    	db 0b11111101
c919 : fb                    	db 0b11111011
c91a : f7                    	db 0b11110111
c91b : ef                    	db 0b11101111
c91c : df                    	db 0b11011111
c91d : bf                    	db 0b10111111
c91e : 7f                    	db 0b01111111
                             
c91f :                       kb_stick_mask
c91f : df                    	db 0b11011111		; Left 	= Bit 0
c920 : 7f                    	db 0b01111111		; Right = Bit 1
c921 : f7                    	db 0b11110111		; Up	= Bit 2
c922 : bf                    	db 0b10111111		; Down	= Bit 3
c923 : fe                    	db 0b11111110		; Space	= Bit 4
                             
                             	include "vdp/graph.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  GRAPH.S
                             ;*  This is the graphics module, to handle text a
                             ;*  graphics.
                             ;*  For text modes, this module keeps track of wh
                             ;*  next put a character, and also takes care of 
                             ;*  to the next line as well as scrolling the con
                             ;*  when the cursor has reached the bottom right.
                             ;*  module also enables text input which is echoe
                             ;*  screen, to allow interactive input and editin
                             ;*
                             ;************************************************
                             
AS65 Assembler for R6502 [1.42].                                     Page   79
---------------------------------- bank0.s -----------------------------------

                             	; ROM code
                             	code
                             
c924 :                       mod_sz_graph_s
                             
                             
                             	include "vdp/font.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  FONT.S
                             ;*  This is the font definition, used to initiali
                             ;*  character set.  This is the standard Oric-1 f
                             ;*	Still called vdp as this code was ported from 
                             ;*	machine using the TMS9918a.
                             ;*
                             ;************************************************
                             
c924 :                       vdp_font
                             ; char 32
c924 : 00                    	db %00000000
c925 : 00                    	db %00000000
c926 : 00                    	db %00000000
c927 : 00                    	db %00000000
c928 : 00                    	db %00000000
c929 : 00                    	db %00000000
c92a : 00                    	db %00000000
c92b : 00                    	db %00000000
                             ; char 33
c92c : 08                    	db %00001000
c92d : 08                    	db %00001000
c92e : 08                    	db %00001000
c92f : 08                    	db %00001000
c930 : 08                    	db %00001000
c931 : 00                    	db %00000000
c932 : 08                    	db %00001000
c933 : 00                    	db %00000000
                             ; char 34
c934 : 14                    	db %00010100
c935 : 14                    	db %00010100
c936 : 14                    	db %00010100
c937 : 00                    	db %00000000
c938 : 00                    	db %00000000
c939 : 00                    	db %00000000
c93a : 00                    	db %00000000
c93b : 00                    	db %00000000
                             ; char 35
c93c : 14                    	db %00010100
c93d : 14                    	db %00010100
c93e : 3e                    	db %00111110
c93f : 14                    	db %00010100
c940 : 3e                    	db %00111110
c941 : 14                    	db %00010100
c942 : 14                    	db %00010100
c943 : 00                    	db %00000000
                             ; char 36
c944 : 08                    	db %00001000
AS65 Assembler for R6502 [1.42].                                     Page   80
---------------------------------- bank0.s -----------------------------------

c945 : 1e                    	db %00011110
c946 : 28                    	db %00101000
c947 : 1c                    	db %00011100
c948 : 0a                    	db %00001010
c949 : 3c                    	db %00111100
c94a : 08                    	db %00001000
c94b : 00                    	db %00000000
                             ; char 37
c94c : 30                    	db %00110000
c94d : 32                    	db %00110010
c94e : 04                    	db %00000100
c94f : 08                    	db %00001000
c950 : 10                    	db %00010000
c951 : 26                    	db %00100110
c952 : 06                    	db %00000110
c953 : 00                    	db %00000000
                             ; char 38
c954 : 10                    	db %00010000
c955 : 28                    	db %00101000
c956 : 28                    	db %00101000
c957 : 10                    	db %00010000
c958 : 2a                    	db %00101010
c959 : 24                    	db %00100100
c95a : 1a                    	db %00011010
c95b : 00                    	db %00000000
                             ; char 39
c95c : 08                    	db %00001000
c95d : 08                    	db %00001000
c95e : 08                    	db %00001000
c95f : 00                    	db %00000000
c960 : 00                    	db %00000000
c961 : 00                    	db %00000000
c962 : 00                    	db %00000000
c963 : 00                    	db %00000000
                             ; char 40
c964 : 08                    	db %00001000
c965 : 10                    	db %00010000
c966 : 20                    	db %00100000
c967 : 20                    	db %00100000
c968 : 20                    	db %00100000
c969 : 10                    	db %00010000
c96a : 08                    	db %00001000
c96b : 00                    	db %00000000
                             ; char 41
c96c : 08                    	db %00001000
c96d : 04                    	db %00000100
c96e : 02                    	db %00000010
c96f : 02                    	db %00000010
c970 : 02                    	db %00000010
c971 : 04                    	db %00000100
c972 : 08                    	db %00001000
c973 : 00                    	db %00000000
                             ; char 42
c974 : 08                    	db %00001000
c975 : 2a                    	db %00101010
c976 : 1c                    	db %00011100
c977 : 08                    	db %00001000
c978 : 1c                    	db %00011100
c979 : 2a                    	db %00101010
c97a : 08                    	db %00001000
c97b : 00                    	db %00000000
                             ; char 43
AS65 Assembler for R6502 [1.42].                                     Page   81
---------------------------------- bank0.s -----------------------------------

c97c : 00                    	db %00000000
c97d : 08                    	db %00001000
c97e : 08                    	db %00001000
c97f : 3e                    	db %00111110
c980 : 08                    	db %00001000
c981 : 08                    	db %00001000
c982 : 00                    	db %00000000
c983 : 00                    	db %00000000
                             ; char 44
c984 : 00                    	db %00000000
c985 : 00                    	db %00000000
c986 : 00                    	db %00000000
c987 : 00                    	db %00000000
c988 : 00                    	db %00000000
c989 : 08                    	db %00001000
c98a : 08                    	db %00001000
c98b : 10                    	db %00010000
                             ; char 45
c98c : 00                    	db %00000000
c98d : 00                    	db %00000000
c98e : 00                    	db %00000000
c98f : 3e                    	db %00111110
c990 : 00                    	db %00000000
c991 : 00                    	db %00000000
c992 : 00                    	db %00000000
c993 : 00                    	db %00000000
                             ; char 46
c994 : 00                    	db %00000000
c995 : 00                    	db %00000000
c996 : 00                    	db %00000000
c997 : 00                    	db %00000000
c998 : 00                    	db %00000000
c999 : 04                    	db %00000100
c99a : 00                    	db %00000000
c99b : 00                    	db %00000000
                             ; char 47
c99c : 00                    	db %00000000
c99d : 02                    	db %00000010
c99e : 04                    	db %00000100
c99f : 08                    	db %00001000
c9a0 : 10                    	db %00010000
c9a1 : 20                    	db %00100000
c9a2 : 00                    	db %00000000
c9a3 : 00                    	db %00000000
                             ; char 48
c9a4 : 1c                    	db %00011100
c9a5 : 22                    	db %00100010
c9a6 : 26                    	db %00100110
c9a7 : 2a                    	db %00101010
c9a8 : 32                    	db %00110010
c9a9 : 22                    	db %00100010
c9aa : 1c                    	db %00011100
c9ab : 00                    	db %00000000
                             ; char 49
c9ac : 08                    	db %00001000
c9ad : 18                    	db %00011000
c9ae : 08                    	db %00001000
c9af : 08                    	db %00001000
c9b0 : 08                    	db %00001000
c9b1 : 08                    	db %00001000
c9b2 : 1c                    	db %00011100
c9b3 : 00                    	db %00000000
AS65 Assembler for R6502 [1.42].                                     Page   82
---------------------------------- bank0.s -----------------------------------

                             ; char 50
c9b4 : 1c                    	db %00011100
c9b5 : 22                    	db %00100010
c9b6 : 02                    	db %00000010
c9b7 : 04                    	db %00000100
c9b8 : 08                    	db %00001000
c9b9 : 10                    	db %00010000
c9ba : 3e                    	db %00111110
c9bb : 00                    	db %00000000
                             ; char 51
c9bc : 3e                    	db %00111110
c9bd : 02                    	db %00000010
c9be : 04                    	db %00000100
c9bf : 0c                    	db %00001100
c9c0 : 02                    	db %00000010
c9c1 : 22                    	db %00100010
c9c2 : 1c                    	db %00011100
c9c3 : 00                    	db %00000000
                             ; char 52
c9c4 : 04                    	db %00000100
c9c5 : 0c                    	db %00001100
c9c6 : 14                    	db %00010100
c9c7 : 24                    	db %00100100
c9c8 : 3e                    	db %00111110
c9c9 : 04                    	db %00000100
c9ca : 04                    	db %00000100
c9cb : 00                    	db %00000000
                             ; char 53
c9cc : 3e                    	db %00111110
c9cd : 20                    	db %00100000
c9ce : 3c                    	db %00111100
c9cf : 02                    	db %00000010
c9d0 : 02                    	db %00000010
c9d1 : 22                    	db %00100010
c9d2 : 1c                    	db %00011100
c9d3 : 00                    	db %00000000
                             ; char 54
c9d4 : 0c                    	db %00001100
c9d5 : 10                    	db %00010000
c9d6 : 20                    	db %00100000
c9d7 : 3c                    	db %00111100
c9d8 : 22                    	db %00100010
c9d9 : 22                    	db %00100010
c9da : 1c                    	db %00011100
c9db : 00                    	db %00000000
                             ; char 55
c9dc : 3e                    	db %00111110
c9dd : 02                    	db %00000010
c9de : 04                    	db %00000100
c9df : 08                    	db %00001000
c9e0 : 10                    	db %00010000
c9e1 : 10                    	db %00010000
c9e2 : 10                    	db %00010000
c9e3 : 00                    	db %00000000
                             ; char 56
c9e4 : 1c                    	db %00011100
c9e5 : 22                    	db %00100010
c9e6 : 22                    	db %00100010
c9e7 : 1c                    	db %00011100
c9e8 : 22                    	db %00100010
c9e9 : 22                    	db %00100010
c9ea : 1c                    	db %00011100
AS65 Assembler for R6502 [1.42].                                     Page   83
---------------------------------- bank0.s -----------------------------------

c9eb : 00                    	db %00000000
                             ; char 57
c9ec : 1c                    	db %00011100
c9ed : 22                    	db %00100010
c9ee : 22                    	db %00100010
c9ef : 1e                    	db %00011110
c9f0 : 02                    	db %00000010
c9f1 : 04                    	db %00000100
c9f2 : 18                    	db %00011000
c9f3 : 00                    	db %00000000
                             ; char 58
c9f4 : 00                    	db %00000000
c9f5 : 00                    	db %00000000
c9f6 : 08                    	db %00001000
c9f7 : 00                    	db %00000000
c9f8 : 00                    	db %00000000
c9f9 : 08                    	db %00001000
c9fa : 00                    	db %00000000
c9fb : 00                    	db %00000000
                             ; char 59
c9fc : 00                    	db %00000000
c9fd : 00                    	db %00000000
c9fe : 08                    	db %00001000
c9ff : 00                    	db %00000000
ca00 : 00                    	db %00000000
ca01 : 08                    	db %00001000
ca02 : 08                    	db %00001000
ca03 : 10                    	db %00010000
                             ; char 60
ca04 : 04                    	db %00000100
ca05 : 08                    	db %00001000
ca06 : 10                    	db %00010000
ca07 : 20                    	db %00100000
ca08 : 10                    	db %00010000
ca09 : 08                    	db %00001000
ca0a : 04                    	db %00000100
ca0b : 00                    	db %00000000
                             ; char 61
ca0c : 00                    	db %00000000
ca0d : 00                    	db %00000000
ca0e : 3e                    	db %00111110
ca0f : 00                    	db %00000000
ca10 : 3e                    	db %00111110
ca11 : 00                    	db %00000000
ca12 : 00                    	db %00000000
ca13 : 00                    	db %00000000
                             ; char 62
ca14 : 10                    	db %00010000
ca15 : 08                    	db %00001000
ca16 : 04                    	db %00000100
ca17 : 02                    	db %00000010
ca18 : 04                    	db %00000100
ca19 : 08                    	db %00001000
ca1a : 10                    	db %00010000
ca1b : 00                    	db %00000000
                             ; char 63
ca1c : 1c                    	db %00011100
ca1d : 22                    	db %00100010
ca1e : 04                    	db %00000100
ca1f : 08                    	db %00001000
ca20 : 08                    	db %00001000
ca21 : 00                    	db %00000000
AS65 Assembler for R6502 [1.42].                                     Page   84
---------------------------------- bank0.s -----------------------------------

ca22 : 08                    	db %00001000
ca23 : 00                    	db %00000000
                             ; char 64
ca24 : 1c                    	db %00011100
ca25 : 22                    	db %00100010
ca26 : 2a                    	db %00101010
ca27 : 2e                    	db %00101110
ca28 : 2c                    	db %00101100
ca29 : 20                    	db %00100000
ca2a : 1e                    	db %00011110
ca2b : 00                    	db %00000000
ca2c :                       vdp_font_a
                             ; char 60
ca2c : 08                    	db %00001000
ca2d : 14                    	db %00010100
ca2e : 22                    	db %00100010
ca2f : 22                    	db %00100010
ca30 : 3e                    	db %00111110
ca31 : 22                    	db %00100010
ca32 : 22                    	db %00100010
ca33 : 00                    	db %00000000
                             ; char 60
ca34 : 3c                    	db %00111100
ca35 : 22                    	db %00100010
ca36 : 22                    	db %00100010
ca37 : 3c                    	db %00111100
ca38 : 22                    	db %00100010
ca39 : 22                    	db %00100010
ca3a : 3c                    	db %00111100
ca3b : 00                    	db %00000000
                             ; char 60
ca3c : 1c                    	db %00011100
ca3d : 22                    	db %00100010
ca3e : 20                    	db %00100000
ca3f : 20                    	db %00100000
ca40 : 20                    	db %00100000
ca41 : 22                    	db %00100010
ca42 : 1c                    	db %00011100
ca43 : 00                    	db %00000000
                             ; char 68
ca44 : 3c                    	db %00111100
ca45 : 22                    	db %00100010
ca46 : 22                    	db %00100010
ca47 : 22                    	db %00100010
ca48 : 22                    	db %00100010
ca49 : 22                    	db %00100010
ca4a : 3c                    	db %00111100
ca4b : 00                    	db %00000000
                             ; char 69
ca4c : 3e                    	db %00111110
ca4d : 20                    	db %00100000
ca4e : 20                    	db %00100000
ca4f : 3c                    	db %00111100
ca50 : 20                    	db %00100000
ca51 : 20                    	db %00100000
ca52 : 3e                    	db %00111110
ca53 : 00                    	db %00000000
                             ; char 70
ca54 : 3e                    	db %00111110
ca55 : 20                    	db %00100000
ca56 : 20                    	db %00100000
ca57 : 3c                    	db %00111100
AS65 Assembler for R6502 [1.42].                                     Page   85
---------------------------------- bank0.s -----------------------------------

ca58 : 20                    	db %00100000
ca59 : 20                    	db %00100000
ca5a : 20                    	db %00100000
ca5b : 00                    	db %00000000
                             ; char 71
ca5c : 1e                    	db %00011110
ca5d : 20                    	db %00100000
ca5e : 20                    	db %00100000
ca5f : 20                    	db %00100000
ca60 : 26                    	db %00100110
ca61 : 22                    	db %00100010
ca62 : 1e                    	db %00011110
ca63 : 00                    	db %00000000
                             ; char 72
ca64 : 22                    	db %00100010
ca65 : 22                    	db %00100010
ca66 : 22                    	db %00100010
ca67 : 3e                    	db %00111110
ca68 : 22                    	db %00100010
ca69 : 22                    	db %00100010
ca6a : 22                    	db %00100010
ca6b : 00                    	db %00000000
                             ; char 73
ca6c : 1c                    	db %00011100
ca6d : 08                    	db %00001000
ca6e : 08                    	db %00001000
ca6f : 08                    	db %00001000
ca70 : 08                    	db %00001000
ca71 : 08                    	db %00001000
ca72 : 1c                    	db %00011100
ca73 : 00                    	db %00000000
                             ; char 74
ca74 : 02                    	db %00000010
ca75 : 02                    	db %00000010
ca76 : 02                    	db %00000010
ca77 : 02                    	db %00000010
ca78 : 02                    	db %00000010
ca79 : 22                    	db %00100010
ca7a : 1c                    	db %00011100
ca7b : 00                    	db %00000000
                             ; char 75
ca7c : 22                    	db %00100010
ca7d : 24                    	db %00100100
ca7e : 28                    	db %00101000
ca7f : 30                    	db %00110000
ca80 : 28                    	db %00101000
ca81 : 24                    	db %00100100
ca82 : 22                    	db %00100010
ca83 : 00                    	db %00000000
                             ; char 76
ca84 : 20                    	db %00100000
ca85 : 20                    	db %00100000
ca86 : 20                    	db %00100000
ca87 : 20                    	db %00100000
ca88 : 20                    	db %00100000
ca89 : 20                    	db %00100000
ca8a : 3e                    	db %00111110
ca8b : 00                    	db %00000000
                             ; char 77
ca8c : 22                    	db %00100010
ca8d : 36                    	db %00110110
ca8e : 2a                    	db %00101010
AS65 Assembler for R6502 [1.42].                                     Page   86
---------------------------------- bank0.s -----------------------------------

ca8f : 2a                    	db %00101010
ca90 : 22                    	db %00100010
ca91 : 22                    	db %00100010
ca92 : 22                    	db %00100010
ca93 : 00                    	db %00000000
                             ; char 78
ca94 : 22                    	db %00100010
ca95 : 22                    	db %00100010
ca96 : 32                    	db %00110010
ca97 : 2a                    	db %00101010
ca98 : 26                    	db %00100110
ca99 : 22                    	db %00100010
ca9a : 22                    	db %00100010
ca9b : 00                    	db %00000000
                             ; char 79
ca9c : 1c                    	db %00011100
ca9d : 22                    	db %00100010
ca9e : 22                    	db %00100010
ca9f : 22                    	db %00100010
caa0 : 22                    	db %00100010
caa1 : 22                    	db %00100010
caa2 : 1c                    	db %00011100
caa3 : 00                    	db %00000000
                             ; char 80
caa4 : 3c                    	db %00111100
caa5 : 22                    	db %00100010
caa6 : 22                    	db %00100010
caa7 : 3c                    	db %00111100
caa8 : 20                    	db %00100000
caa9 : 20                    	db %00100000
caaa : 20                    	db %00100000
caab : 00                    	db %00000000
                             ; char 81
caac : 1c                    	db %00011100
caad : 22                    	db %00100010
caae : 22                    	db %00100010
caaf : 22                    	db %00100010
cab0 : 2a                    	db %00101010
cab1 : 24                    	db %00100100
cab2 : 1a                    	db %00011010
cab3 : 00                    	db %00000000
                             ; char 82
cab4 : 3c                    	db %00111100
cab5 : 22                    	db %00100010
cab6 : 22                    	db %00100010
cab7 : 3c                    	db %00111100
cab8 : 28                    	db %00101000
cab9 : 24                    	db %00100100
caba : 22                    	db %00100010
cabb : 00                    	db %00000000
                             ; char 83
cabc : 1c                    	db %00011100
cabd : 22                    	db %00100010
cabe : 20                    	db %00100000
cabf : 1c                    	db %00011100
cac0 : 02                    	db %00000010
cac1 : 22                    	db %00100010
cac2 : 1c                    	db %00011100
cac3 : 00                    	db %00000000
                             ; char 84
cac4 : 3e                    	db %00111110
cac5 : 08                    	db %00001000
AS65 Assembler for R6502 [1.42].                                     Page   87
---------------------------------- bank0.s -----------------------------------

cac6 : 08                    	db %00001000
cac7 : 08                    	db %00001000
cac8 : 08                    	db %00001000
cac9 : 08                    	db %00001000
caca : 08                    	db %00001000
cacb : 00                    	db %00000000
                             ; char 85
cacc : 22                    	db %00100010
cacd : 22                    	db %00100010
cace : 22                    	db %00100010
cacf : 22                    	db %00100010
cad0 : 22                    	db %00100010
cad1 : 22                    	db %00100010
cad2 : 1c                    	db %00011100
cad3 : 00                    	db %00000000
                             ; char 86
cad4 : 22                    	db %00100010
cad5 : 22                    	db %00100010
cad6 : 22                    	db %00100010
cad7 : 22                    	db %00100010
cad8 : 22                    	db %00100010
cad9 : 14                    	db %00010100
cada : 08                    	db %00001000
cadb : 00                    	db %00000000
                             ; char 87
cadc : 22                    	db %00100010
cadd : 22                    	db %00100010
cade : 22                    	db %00100010
cadf : 2a                    	db %00101010
cae0 : 2a                    	db %00101010
cae1 : 36                    	db %00110110
cae2 : 22                    	db %00100010
cae3 : 00                    	db %00000000
                             ; char 88
cae4 : 22                    	db %00100010
cae5 : 22                    	db %00100010
cae6 : 14                    	db %00010100
cae7 : 08                    	db %00001000
cae8 : 14                    	db %00010100
cae9 : 22                    	db %00100010
caea : 22                    	db %00100010
caeb : 00                    	db %00000000
                             ; char 89
caec : 22                    	db %00100010
caed : 22                    	db %00100010
caee : 14                    	db %00010100
caef : 08                    	db %00001000
caf0 : 08                    	db %00001000
caf1 : 08                    	db %00001000
caf2 : 08                    	db %00001000
caf3 : 00                    	db %00000000
                             ; char 90
caf4 : 3e                    	db %00111110
caf5 : 02                    	db %00000010
caf6 : 04                    	db %00000100
caf7 : 08                    	db %00001000
caf8 : 10                    	db %00010000
caf9 : 20                    	db %00100000
cafa : 3e                    	db %00111110
cafb : 00                    	db %00000000
                             ; char 91
cafc : 1e                    	db %00011110
AS65 Assembler for R6502 [1.42].                                     Page   88
---------------------------------- bank0.s -----------------------------------

cafd : 10                    	db %00010000
cafe : 10                    	db %00010000
caff : 10                    	db %00010000
cb00 : 10                    	db %00010000
cb01 : 10                    	db %00010000
cb02 : 1e                    	db %00011110
cb03 : 00                    	db %00000000
                             ; char 92
cb04 : 00                    	db %00000000
cb05 : 20                    	db %00100000
cb06 : 10                    	db %00010000
cb07 : 08                    	db %00001000
cb08 : 04                    	db %00000100
cb09 : 02                    	db %00000010
cb0a : 00                    	db %00000000
cb0b : 00                    	db %00000000
                             ; char 93
cb0c : 3c                    	db %00111100
cb0d : 04                    	db %00000100
cb0e : 04                    	db %00000100
cb0f : 04                    	db %00000100
cb10 : 04                    	db %00000100
cb11 : 04                    	db %00000100
cb12 : 3c                    	db %00111100
cb13 : 00                    	db %00000000
                             ; char 94
cb14 : 08                    	db %00001000
cb15 : 14                    	db %00010100
cb16 : 2a                    	db %00101010
cb17 : 08                    	db %00001000
cb18 : 08                    	db %00001000
cb19 : 08                    	db %00001000
cb1a : 08                    	db %00001000
cb1b : 00                    	db %00000000
                             ; char 95
cb1c : 00                    	db %00000000
cb1d : 00                    	db %00000000
cb1e : 00                    	db %00000000
cb1f : 00                    	db %00000000
cb20 : 00                    	db %00000000
cb21 : 00                    	db %00000000
cb22 : 3e                    	db %00111110
cb23 : 00                    	db %00000000
                             ; char 96
cb24 : 0e                    	db %00001110
cb25 : 10                    	db %00010000
cb26 : 10                    	db %00010000
cb27 : 10                    	db %00010000
cb28 : 3c                    	db %00111100
cb29 : 10                    	db %00010000
cb2a : 3e                    	db %00111110
cb2b : 00                    	db %00000000
                             ; char 97
cb2c : 00                    	db %00000000
cb2d : 00                    	db %00000000
cb2e : 1c                    	db %00011100
cb2f : 02                    	db %00000010
cb30 : 1e                    	db %00011110
cb31 : 22                    	db %00100010
cb32 : 1e                    	db %00011110
cb33 : 00                    	db %00000000
                             ; char 98
AS65 Assembler for R6502 [1.42].                                     Page   89
---------------------------------- bank0.s -----------------------------------

cb34 : 20                    	db %00100000
cb35 : 20                    	db %00100000
cb36 : 3c                    	db %00111100
cb37 : 22                    	db %00100010
cb38 : 22                    	db %00100010
cb39 : 22                    	db %00100010
cb3a : 3c                    	db %00111100
cb3b : 00                    	db %00000000
                             ; char 99
cb3c : 00                    	db %00000000
cb3d : 00                    	db %00000000
cb3e : 1e                    	db %00011110
cb3f : 20                    	db %00100000
cb40 : 20                    	db %00100000
cb41 : 20                    	db %00100000
cb42 : 1e                    	db %00011110
cb43 : 00                    	db %00000000
                             ; char 100
cb44 : 02                    	db %00000010
cb45 : 02                    	db %00000010
cb46 : 1e                    	db %00011110
cb47 : 22                    	db %00100010
cb48 : 22                    	db %00100010
cb49 : 22                    	db %00100010
cb4a : 1e                    	db %00011110
cb4b : 00                    	db %00000000
                             ; char 101
cb4c : 00                    	db %00000000
cb4d : 00                    	db %00000000
cb4e : 1c                    	db %00011100
cb4f : 22                    	db %00100010
cb50 : 3e                    	db %00111110
cb51 : 20                    	db %00100000
cb52 : 1e                    	db %00011110
cb53 : 00                    	db %00000000
                             ; char 102
cb54 : 0c                    	db %00001100
cb55 : 12                    	db %00010010
cb56 : 10                    	db %00010000
cb57 : 3c                    	db %00111100
cb58 : 10                    	db %00010000
cb59 : 10                    	db %00010000
cb5a : 10                    	db %00010000
cb5b : 00                    	db %00000000
                             ; char 103
cb5c : 00                    	db %00000000
cb5d : 00                    	db %00000000
cb5e : 1c                    	db %00011100
cb5f : 22                    	db %00100010
cb60 : 22                    	db %00100010
cb61 : 1e                    	db %00011110
cb62 : 02                    	db %00000010
cb63 : 1c                    	db %00011100
                             ; char 104
cb64 : 20                    	db %00100000
cb65 : 20                    	db %00100000
cb66 : 3c                    	db %00111100
cb67 : 22                    	db %00100010
cb68 : 22                    	db %00100010
cb69 : 22                    	db %00100010
cb6a : 22                    	db %00100010
cb6b : 00                    	db %00000000
AS65 Assembler for R6502 [1.42].                                     Page   90
---------------------------------- bank0.s -----------------------------------

                             ; char 105
cb6c : 08                    	db %00001000
cb6d : 00                    	db %00000000
cb6e : 18                    	db %00011000
cb6f : 08                    	db %00001000
cb70 : 08                    	db %00001000
cb71 : 08                    	db %00001000
cb72 : 1c                    	db %00011100
cb73 : 00                    	db %00000000
                             ; char 106
cb74 : 04                    	db %00000100
cb75 : 00                    	db %00000000
cb76 : 0c                    	db %00001100
cb77 : 04                    	db %00000100
cb78 : 04                    	db %00000100
cb79 : 04                    	db %00000100
cb7a : 24                    	db %00100100
cb7b : 18                    	db %00011000
                             ; char 107
cb7c : 20                    	db %00100000
cb7d : 20                    	db %00100000
cb7e : 22                    	db %00100010
cb7f : 24                    	db %00100100
cb80 : 38                    	db %00111000
cb81 : 24                    	db %00100100
cb82 : 22                    	db %00100010
cb83 : 00                    	db %00000000
                             ; char 108
cb84 : 18                    	db %00011000
cb85 : 08                    	db %00001000
cb86 : 08                    	db %00001000
cb87 : 08                    	db %00001000
cb88 : 08                    	db %00001000
cb89 : 08                    	db %00001000
cb8a : 1c                    	db %00011100
cb8b : 00                    	db %00000000
                             ; char 109
cb8c : 00                    	db %00000000
cb8d : 00                    	db %00000000
cb8e : 36                    	db %00110110
cb8f : 2a                    	db %00101010
cb90 : 2a                    	db %00101010
cb91 : 2a                    	db %00101010
cb92 : 22                    	db %00100010
cb93 : 00                    	db %00000000
                             ; char 110
cb94 : 00                    	db %00000000
cb95 : 00                    	db %00000000
cb96 : 3c                    	db %00111100
cb97 : 22                    	db %00100010
cb98 : 22                    	db %00100010
cb99 : 22                    	db %00100010
cb9a : 22                    	db %00100010
cb9b : 00                    	db %00000000
                             ; char 111
cb9c : 00                    	db %00000000
cb9d : 00                    	db %00000000
cb9e : 1c                    	db %00011100
cb9f : 22                    	db %00100010
cba0 : 22                    	db %00100010
cba1 : 22                    	db %00100010
cba2 : 1c                    	db %00011100
AS65 Assembler for R6502 [1.42].                                     Page   91
---------------------------------- bank0.s -----------------------------------

cba3 : 00                    	db %00000000
                             ; char 112
cba4 : 00                    	db %00000000
cba5 : 00                    	db %00000000
cba6 : 3c                    	db %00111100
cba7 : 22                    	db %00100010
cba8 : 22                    	db %00100010
cba9 : 3c                    	db %00111100
cbaa : 20                    	db %00100000
cbab : 20                    	db %00100000
                             ; char 113
cbac : 00                    	db %00000000
cbad : 00                    	db %00000000
cbae : 1e                    	db %00011110
cbaf : 22                    	db %00100010
cbb0 : 22                    	db %00100010
cbb1 : 1e                    	db %00011110
cbb2 : 02                    	db %00000010
cbb3 : 02                    	db %00000010
                             ; char 114
cbb4 : 00                    	db %00000000
cbb5 : 00                    	db %00000000
cbb6 : 2e                    	db %00101110
cbb7 : 30                    	db %00110000
cbb8 : 20                    	db %00100000
cbb9 : 20                    	db %00100000
cbba : 20                    	db %00100000
cbbb : 00                    	db %00000000
                             ; char 115
cbbc : 00                    	db %00000000
cbbd : 00                    	db %00000000
cbbe : 1e                    	db %00011110
cbbf : 20                    	db %00100000
cbc0 : 1c                    	db %00011100
cbc1 : 02                    	db %00000010
cbc2 : 3c                    	db %00111100
cbc3 : 00                    	db %00000000
                             ; char 116
cbc4 : 10                    	db %00010000
cbc5 : 10                    	db %00010000
cbc6 : 3c                    	db %00111100
cbc7 : 10                    	db %00010000
cbc8 : 10                    	db %00010000
cbc9 : 12                    	db %00010010
cbca : 0c                    	db %00001100
cbcb : 00                    	db %00000000
                             ; char 117
cbcc : 00                    	db %00000000
cbcd : 00                    	db %00000000
cbce : 22                    	db %00100010
cbcf : 22                    	db %00100010
cbd0 : 22                    	db %00100010
cbd1 : 26                    	db %00100110
cbd2 : 1a                    	db %00011010
cbd3 : 00                    	db %00000000
                             ; char 118
cbd4 : 00                    	db %00000000
cbd5 : 00                    	db %00000000
cbd6 : 22                    	db %00100010
cbd7 : 22                    	db %00100010
cbd8 : 22                    	db %00100010
cbd9 : 14                    	db %00010100
AS65 Assembler for R6502 [1.42].                                     Page   92
---------------------------------- bank0.s -----------------------------------

cbda : 08                    	db %00001000
cbdb : 00                    	db %00000000
                             ; char 119
cbdc : 00                    	db %00000000
cbdd : 00                    	db %00000000
cbde : 22                    	db %00100010
cbdf : 22                    	db %00100010
cbe0 : 2a                    	db %00101010
cbe1 : 2a                    	db %00101010
cbe2 : 36                    	db %00110110
cbe3 : 00                    	db %00000000
                             ; char 120
cbe4 : 00                    	db %00000000
cbe5 : 00                    	db %00000000
cbe6 : 22                    	db %00100010
cbe7 : 14                    	db %00010100
cbe8 : 08                    	db %00001000
cbe9 : 14                    	db %00010100
cbea : 22                    	db %00100010
cbeb : 00                    	db %00000000
                             ; char 121
cbec : 00                    	db %00000000
cbed : 00                    	db %00000000
cbee : 22                    	db %00100010
cbef : 22                    	db %00100010
cbf0 : 22                    	db %00100010
cbf1 : 1e                    	db %00011110
cbf2 : 02                    	db %00000010
cbf3 : 1c                    	db %00011100
                             ; char 122
cbf4 : 00                    	db %00000000
cbf5 : 00                    	db %00000000
cbf6 : 3e                    	db %00111110
cbf7 : 04                    	db %00000100
cbf8 : 08                    	db %00001000
cbf9 : 10                    	db %00010000
cbfa : 3e                    	db %00111110
cbfb : 00                    	db %00000000
                             ; char 123
cbfc : 0e                    	db %00001110
cbfd : 18                    	db %00011000
cbfe : 18                    	db %00011000
cbff : 30                    	db %00110000
cc00 : 18                    	db %00011000
cc01 : 18                    	db %00011000
cc02 : 0e                    	db %00001110
cc03 : 00                    	db %00000000
                             ; char 124
cc04 : 08                    	db %00001000
cc05 : 08                    	db %00001000
cc06 : 08                    	db %00001000
cc07 : 08                    	db %00001000
cc08 : 08                    	db %00001000
cc09 : 08                    	db %00001000
cc0a : 08                    	db %00001000
cc0b : 08                    	db %00001000
                             ; char 125
cc0c : 38                    	db %00111000
cc0d : 0c                    	db %00001100
cc0e : 0c                    	db %00001100
cc0f : 06                    	db %00000110
cc10 : 0c                    	db %00001100
AS65 Assembler for R6502 [1.42].                                     Page   93
---------------------------------- bank0.s -----------------------------------

cc11 : 0c                    	db %00001100
cc12 : 38                    	db %00111000
cc13 : 00                    	db %00000000
                             ; char 126
cc14 : 00                    	db %00000000
cc15 : 00                    	db %00000000
cc16 : 10                    	db %00010000
cc17 : 2a                    	db %00101010
cc18 : 04                    	db %00000100
cc19 : 00                    	db %00000000
cc1a : 00                    	db %00000000
cc1b : 00                    	db %00000000
                             ; char 127
cc1c : 3e                    	db %00111110
cc1d : 3e                    	db %00111110
cc1e : 3e                    	db %00111110
cc1f : 3e                    	db %00111110
cc20 : 3e                    	db %00111110
cc21 : 3e                    	db %00111110
cc22 : 3e                    	db %00111110
cc23 : 00                    	db %00000000
                             	
                             	
                             
                             ;****************************************
                             ;* vdp_init_font
                             ;* Initialise fonts from ROM
                             ;* Input : None
                             ;* Output : None
                             ;* Regs affected : All
                             ;****************************************
cc24 :                       gr_init_font
                             	; Get char base from vdp structure
cc24 : a614             [ 3] 	ldx gr_scrngeom+gr_char
cc26 : 8634             [ 3] 	stx tmp_blo
cc28 : a615             [ 3] 	ldx gr_scrngeom+gr_char+1
cc2a : e8               [ 2] 	inx						; ASCII patterns start 1 page later
cc2b : 8635             [ 3] 	stx tmp_bhi
                             
cc2d : a924             [ 2] 	lda #lo(vdp_font)		; Low byte of fonts source
cc2f : 8536             [ 3] 	sta tmp_clo
cc31 : a9c9             [ 2] 	lda #hi(vdp_font)		; High byte of fonts source
cc33 : 8537             [ 3] 	sta tmp_chi
cc35 : a203             [ 2] 	ldx #3					; Copy 3 pages
cc37 : 4c3acc           [ 3] 	jmp gr_copy_mem
                             
                             
                             ;****************************************
                             ;* vdp_copy_mem
                             ;* Copy memory pages at a time
                             ;* Input :	clo/hi	=	source
                             ;*			blo/hi	=	dest
                             ;*			X		=	pages to copy
                             ;* Output : None
                             ;* Regs affected : All
                             ;****************************************
cc3a :                       gr_copy_mem
cc3a : a000             [ 2] 	ldy #0					; byte within page
cc3c : a536             [ 3] 	lda tmp_clo				; Low byte of source
cc3e : 8532             [ 3] 	sta tmp_alo
cc40 : a537             [ 3] 	lda tmp_chi				; High byte of source
cc42 : 8533             [ 3] 	sta tmp_ahi
AS65 Assembler for R6502 [1.42].                                     Page   94
---------------------------------- bank0.s -----------------------------------

cc44 :                       gr_copy_byte
cc44 : 98               [ 2] 	tya
cc45 : b132             [ 5] 	lda (tmp_alo),y			; Get byte from font table
cc47 : 9134             [ 5] 	sta (tmp_blo),y			; Put it to the memory
cc49 : c8               [ 2] 	iny
cc4a : d0f8             [ 3] 	bne gr_copy_byte		; keep going for 1 page
cc4c : e633             [ 5] 	inc tmp_ahi				; only need to increment high byt
cc4e : e635             [ 5] 	inc tmp_bhi				; source and destination ptr
cc50 : ca               [ 2] 	dex						; page counter
cc51 : d0f1             [ 3] 	bne gr_copy_byte		; keep going for X pages
cc53 : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* gr_init
                             ;* First initialisation of screen
                             ;****************************************
cc54 :                       gr_init
cc54 : a210             [ 2] 	ldx #VDP_FLASH			; Default cursor flash rate
cc56 : 860b             [ 3] 	stx vdp_curtim
cc58 : 860c             [ 3] 	stx vdp_curcnt
cc5a : a200             [ 2] 	ldx #0
cc5c : 860e             [ 3] 	stx vdp_curstat
                             
                             	; Hard reset initial geom values (X=0)
cc5e : 2085cc           [ 6] 	jsr gr_init_geom
                             
                             	; Copy font from ROM to char base
cc61 : 2024cc           [ 6] 	jsr gr_init_font
                             
                             	; Go in to hires mode to generate tables
cc64 : 20eccc           [ 6] 	jsr gr_init_hires
cc67 : 2025cd           [ 6] 	jsr gr_init_hires_tables
                             
                             	; But start in text mode
cc6a : 4cd3cc           [ 3] 	jmp gr_init_screen_txt
                             
                             
                             ;****************************************
                             ;* gr_check_font_copy
                             ;* check font needs to be copied from
                             ;* current location to another
                             ;* A=high byte of page aligned font addr
                             ;* that the font needs to be at
                             ;****************************************
cc6d :                       gr_check_font_copy
                             	; Compare with current high byte
cc6d : c515             [ 3] 	cmp gr_scrngeom+gr_char+1
cc6f : f013             [ 3] 	beq gr_check_font_copy_done
                             	; save A as high byte of destination
cc71 : 8535             [ 3] 	sta tmp_blo+1
                             	; destination low is 0
cc73 : a900             [ 2] 	lda #0
cc75 : 8534             [ 3] 	sta tmp_blo
                             
                             	; Get source from current vdp structure
cc77 : a515             [ 3] 	lda gr_scrngeom+gr_char+1
cc79 : 8537             [ 3] 	sta tmp_clo+1
cc7b : a514             [ 3] 	lda gr_scrngeom+gr_char
cc7d : 8536             [ 3] 	sta tmp_clo
                             
                             	; Copy all 8 pages of font (std + alt) data
AS65 Assembler for R6502 [1.42].                                     Page   95
---------------------------------- bank0.s -----------------------------------

cc7f : a208             [ 2] 	ldx #8
cc81 : 203acc           [ 6] 	jsr gr_copy_mem
cc84 :                       gr_check_font_copy_done
cc84 :                       gr_init_geom_done
cc84 : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* gr_init_geom
                             ;* initialise geometry entries from X
                             ;* position from base until -1
                             ;****************************************
cc85 :                       gr_init_geom
                             	; Which geom entry to init = Y
cc85 : bc94cc           [ 4] 	ldy gr_scrngeom_base,x
cc88 : 30fa             [ 3] 	bmi gr_init_geom_done		; Just somewhere with an 
                             	; skip to data and put in A
cc8a : e8               [ 2] 	inx
cc8b : bd94cc           [ 4] 	lda gr_scrngeom_base,x
                             	; save it in Y
cc8e : 991100           [ 5] 	sta gr_scrngeom,y
                             	; next entry
cc91 : e8               [ 2] 	inx
cc92 : d0f1             [ 3] 	bne gr_init_geom	; Always
                             	; Hope we don't get here - will crash!
                             
                             ; Geometry initialisation tables
cc94 :                       gr_scrngeom_base
cc94 : 0000                  	db gr_mode, 0
cc96 : 0300                  	db gr_char,   lo(TEXTCHAR)
cc98 : 04b4                  	db gr_char+1, hi(TEXTCHAR)
cc9a : 1300                  	db gr_ink, 0
cc9c : 1416                  	db gr_paper, 16+6
cc9e : 1502                  	db gr_margin, 2
cca0 : ff                    	db -1
                             ;* Geometry for text/lores
cca1 :                       gr_scrngeom_text
cca1 : 0000                  	db gr_mode, 0
                             
cca3 : 0300                  	db gr_char,   lo(TEXTCHAR)
cca5 : 04b4                  	db gr_char+1, hi(TEXTCHAR)
                             
cca7 : 0580                  	db gr_text_start,   lo(TEXTSCRN)
cca9 : 06bb                  	db gr_text_start+1, hi(TEXTSCRN)
                             
ccab : 0760                  	db gr_text_size,   lo(40*28)
ccad : 0804                  	db gr_text_size+1, hi(40*28)
                             
ccaf : 0928                  	db gr_text_w, 40
ccb1 : 0a1c                  	db gr_text_h, 28
ccb3 : ff                    	db -1
                             ;* Geometry for hires
ccb4 :                       gr_scrngeom_hires
ccb4 : 0001                  	db gr_mode, 1
                             
ccb6 : 0100                  	db gr_hi_start,   lo(HISCRN)
ccb8 : 02a0                  	db gr_hi_start+1, hi(HISCRN)
ccba : 0300                  	db gr_char,   lo(HICHAR)
ccbc : 0498                  	db gr_char+1, hi(HICHAR)
                             
ccbe : 0568                  	db gr_text_start,   lo(HITEXT)
ccc0 : 06bf                  	db gr_text_start+1, hi(HITEXT)
AS65 Assembler for R6502 [1.42].                                     Page   96
---------------------------------- bank0.s -----------------------------------

                             
ccc2 : 0778                  	db gr_text_size,   lo(40*3)
ccc4 : 0800                  	db gr_text_size+1, hi(40*3)
                             
ccc6 : 1100                  	db gr_hires_x, 0
ccc8 : 1200                  	db gr_hires_y, 0
                             
                             	; Only need to initialise text height, width is 
ccca : 0928                  	db gr_text_w, 40
cccc : 0a03                  	db gr_text_h, 3
                             
ccce : 0f01                  	db gr_pixmode, 1
ccd0 : 1006                  	db gr_pitch, 6
ccd2 : ff                    	db -1
                             
                             
                             
                             ;****************************************
                             ;* gr_init_screen_txt
                             ;* initialise the screen in text mode
                             ;****************************************
ccd3 :                       gr_init_screen_txt
ccd3 : e60d             [ 5] 	inc vdp_curoff
                             
                             	; Check if font copy needed to 0xb400
ccd5 : a9b4             [ 2] 	lda #hi(TEXTCHAR)
ccd7 : 206dcc           [ 6] 	jsr gr_check_font_copy
                             
                             	; Initialise geom for text
ccda : a20d             [ 2] 	ldx #gr_scrngeom_text-gr_scrngeom_base
ccdc : 2085cc           [ 6] 	jsr gr_init_geom
                             
ccdf : 2026d2           [ 6] 	jsr gr_spr_init					; SW Sprites are reset
                             
cce2 : a920             [ 2] 	lda #' '						; Blank is SPACE
cce4 : 8510             [ 3] 	sta vdp_blank
cce6 : 206bcd           [ 6] 	jsr gr_cls
                             
cce9 : c60d             [ 5] 	dec vdp_curoff
                             
cceb : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* gr_init_hires
                             ;* Input : X = Colour table fill value
                             ;* initialise the screen in hires mode
                             ;****************************************
ccec :                       gr_init_hires
ccec : e60d             [ 5] 	inc vdp_curoff
                             	; Check if font copy needed to 0x9800
ccee : a998             [ 2] 	lda #hi(HICHAR)
ccf0 : 206dcc           [ 6] 	jsr gr_check_font_copy
                             
                             	; Initialise geom for hires
ccf3 : a220             [ 2] 	ldx #gr_scrngeom_hires-gr_scrngeom_base
ccf5 : 2085cc           [ 6] 	jsr gr_init_geom
                             
ccf8 : a920             [ 2] 	lda #' '						; Blank is SPACE
ccfa : 8510             [ 3] 	sta vdp_blank
ccfc : 206bcd           [ 6] 	jsr gr_cls
                             
                             	; Zero out hires area 0xa000 for 8000 (0x1f40) b
AS65 Assembler for R6502 [1.42].                                     Page   97
---------------------------------- bank0.s -----------------------------------

ccff : a900             [ 2] 	lda #lo(HISCRN)
cd01 : 8532             [ 3] 	sta tmp_alo
cd03 : a9a0             [ 2] 	lda #hi(HISCRN)
cd05 : 8533             [ 3] 	sta tmp_ahi
cd07 : a940             [ 2] 	lda #0x40						; Set bit 6
cd09 : a000             [ 2] 	ldy #0
cd0b : a200             [ 2] 	ldx #0
cd0d :                       vdp_fill_vram_loop
cd0d : 9132             [ 5] 	sta (tmp_alo),y
cd0f : c8               [ 2] 	iny
cd10 : d003             [ 3] 	bne vdp_fill_vram_noinc
cd12 : e633             [ 5] 	inc tmp_ahi
cd14 : e8               [ 2] 	inx
cd15 :                       vdp_fill_vram_noinc
cd15 : e01f             [ 2] 	cpx #hi(0x1f40)			; Reached page count?
cd17 : d0f4             [ 3] 	bne vdp_fill_vram_loop
cd19 : c040             [ 2] 	cpy #lo(0x1f40)			; Reached byte in page?
cd1b : d0f0             [ 3] 	bne vdp_fill_vram_loop
                             
                             	; Set hires attribute in the magic location
cd1d : a91e             [ 2] 	lda #30			; Hires attribute
cd1f : 8ddfbf           [ 4] 	sta 0xbfdf		; Last pos of screen memory
                             
cd22 : c60d             [ 5] 	dec vdp_curoff
cd24 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* gr_init_hires_tables
                             ;* Generate the hires tables
                             ;* Do this whilst in hires mode
                             ;****************************************
cd25 :                       gr_init_hires_tables
                             	; Initialise address pointer to start of high re
cd25 : a900             [ 2] 	lda #lo(HISCRN)
cd27 : 8532             [ 3] 	sta tmp_alo
cd29 : a9a0             [ 2] 	lda #hi(HISCRN)
cd2b : 8533             [ 3] 	sta tmp_ahi
                             	; Starting from row zero, do 200 rows
cd2d : a000             [ 2] 	ldy #0
cd2f :                       gr_init_tab_row
                             	; Save low and high bytes of screen address in t
cd2f : a532             [ 3] 	lda tmp_alo
cd31 : 99009c           [ 5] 	sta hires_row_low,y
cd34 : a533             [ 3] 	lda tmp_ahi
cd36 : 99c89c           [ 5] 	sta hires_row_hi,y
                             	; add 40 ready for next row
cd39 : 18               [ 2] 	clc
cd3a : a532             [ 3] 	lda tmp_alo
cd3c : 6928             [ 2] 	adc #40
cd3e : 8532             [ 3] 	sta tmp_alo
cd40 : a533             [ 3] 	lda tmp_ahi
cd42 : 6900             [ 2] 	adc #0
cd44 : 8533             [ 3] 	sta tmp_ahi
                             	; Max 200 rows
cd46 : c8               [ 2] 	iny
cd47 : c0c8             [ 2] 	cpy #200
cd49 : d0e4             [ 3] 	bne gr_init_tab_row
                             	; From column 0, do 240 columns
                             	; Mask starts at 0x20, when shifts to 0 then
                             	; the column increments
cd4b : a920             [ 2] 	lda #0x20
cd4d : 8534             [ 3] 	sta tmp_blo			; Pixel mask
AS65 Assembler for R6502 [1.42].                                     Page   98
---------------------------------- bank0.s -----------------------------------

cd4f : a200             [ 2] 	ldx #0				; Pixel column
cd51 : a000             [ 2] 	ldy #0				; Byte column
cd53 :                       gr_init_tab_col
                             	; Save current mask and column
cd53 : a534             [ 3] 	lda tmp_blo
cd55 : 9d809e           [ 5] 	sta hires_mask,x
cd58 : 98               [ 2] 	tya
cd59 : 9d909d           [ 5] 	sta hires_col,x
                             	; shift mask, if zero then increment col and res
cd5c : 4634             [ 5] 	lsr tmp_blo
cd5e : d005             [ 3] 	bne gr_init_tab_col_skip
cd60 : a920             [ 2] 	lda #0x20
cd62 : 8534             [ 3] 	sta tmp_blo
cd64 : c8               [ 2] 	iny
cd65 :                       gr_init_tab_col_skip
cd65 : e8               [ 2] 	inx
cd66 : e0f0             [ 2] 	cpx #240
cd68 : d0e9             [ 3] 	bne gr_init_tab_col
cd6a : 60               [ 6] 	rts
                             
                             
                             
                             ;****************************************
                             ;* gr_cls
                             ;* Clear the text screen
                             ;****************************************
cd6b :                       gr_cls
cd6b : e60d             [ 5] 	inc vdp_curoff
                             	; Set screen address for text mode
cd6d : a516             [ 3] 	lda gr_scrngeom+gr_text_start
cd6f : 8527             [ 3] 	sta gr_scrngeom+gr_geom_tmp
cd71 : a517             [ 3] 	lda gr_scrngeom+gr_text_start+1
cd73 : 8528             [ 3] 	sta gr_scrngeom+gr_geom_tmp+1
                             
cd75 : a61b             [ 3] 	ldx gr_scrngeom+gr_text_h		; Count of rows to cl
                             
                             	; X and Y count bytes to fill
cd77 :                       gr_cls_row
cd77 : a000             [ 2] 	ldy #0							; Count of columns
cd79 : a526             [ 3] 	lda gr_scrngeom+gr_margin		; Is there a margin?
cd7b : f00a             [ 3] 	beq gr_cls_skip_marg
cd7d : a525             [ 3] 	lda gr_scrngeom+gr_paper		; Set Paper
cd7f : 9127             [ 5] 	sta (gr_scrngeom+gr_geom_tmp),y
cd81 : c8               [ 2] 	iny
cd82 : a524             [ 3] 	lda gr_scrngeom+gr_ink			; Set Ink
cd84 : 9127             [ 5] 	sta (gr_scrngeom+gr_geom_tmp),y
cd86 : c8               [ 2] 	iny
cd87 :                       gr_cls_skip_marg
cd87 : a510             [ 3] 	lda vdp_blank
cd89 : 850f             [ 3] 	sta vdp_curval					; Under cursor is also blank
cd8b :                       gr_cls_col
cd8b : 9127             [ 5] 	sta (gr_scrngeom+gr_geom_tmp),y
cd8d : c8               [ 2] 	iny
cd8e : c41a             [ 3] 	cpy gr_scrngeom+gr_text_w		; Done all columns?
cd90 : d0f9             [ 3] 	bne gr_cls_col
                             	; Update pointer
cd92 : 18               [ 2] 	clc
cd93 : a527             [ 3] 	lda gr_scrngeom+gr_geom_tmp
cd95 : 651a             [ 3] 	adc gr_scrngeom+gr_text_w
cd97 : 8527             [ 3] 	sta gr_scrngeom+gr_geom_tmp
cd99 : a528             [ 3] 	lda gr_scrngeom+gr_geom_tmp+1
cd9b : 6900             [ 2] 	adc #0
AS65 Assembler for R6502 [1.42].                                     Page   99
---------------------------------- bank0.s -----------------------------------

cd9d : 8528             [ 3] 	sta gr_scrngeom+gr_geom_tmp+1
cd9f : ca               [ 2] 	dex								; 1 row done
cda0 : d0d5             [ 3] 	bne gr_cls_row					; Done all rows?
                             
                             	; set cursror position to top left
cda2 : a510             [ 3] 	lda vdp_blank
cda4 : 850f             [ 3] 	sta vdp_curval
cda6 : a626             [ 3] 	ldx gr_scrngeom+gr_margin
cda8 : a000             [ 2] 	ldy #0
cdaa : 38               [ 2] 	sec								; Init mode
cdab : 20dbcd           [ 6] 	jsr gr_set_cur_init
                             
cdae : c60d             [ 5] 	dec vdp_curoff
                             
cdb0 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* gr_getXY_base
                             ;* Get base screen address using Y coord only
                             ;* Input : X = y coord
                             ;* Output :	gr_geom_tmp updated with base
                             ;* Regs affected : A
                             ;****************************************
cdb1 :                       gr_getXY_base
                             	; Find y offset using **X register**
cdb1 : 18               [ 2] 	clc
cdb2 : bdeed1           [ 4] 	lda gr_offset_40lo,x
cdb5 : 6516             [ 3] 	adc gr_scrngeom+gr_text_start
cdb7 : 8527             [ 3] 	sta gr_scrngeom+gr_geom_tmp
cdb9 : bd0ad2           [ 4] 	lda gr_offset_40hi,x
cdbc : 6517             [ 3] 	adc gr_scrngeom+gr_text_start+1
cdbe : 8528             [ 3] 	sta gr_scrngeom+gr_geom_tmp+1
                             
                             	; A = high byte of base address
cdc0 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* gr_plot
                             ;* Write a byte in the screen pos
                             ;* Input :	Y,X = coord, A = Byte to put
                             ;*			X = Y COORDINATE
                             ;*			Y = X COORDINATE!!
                             ;* Output : None
                             ;* Regs affected : All
                             ;****************************************
cdc1 :                       gr_plot
cdc1 : 48               [ 3] 	pha					; Save byte to put
cdc2 : 20b1cd           [ 6] 	jsr gr_getXY_base	; base addre
cdc5 : 68               [ 4] 	pla					; Get byte to put
cdc6 : 9127             [ 5] 	sta (gr_scrngeom+gr_geom_tmp),y
cdc8 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* gr_put
                             ;* Write a byte in the current cursor position
                             ;* Input : A = Byte to put
                             ;* Output : None
                             ;* Regs affected : All
                             ;****************************************
cdc9 :                       gr_put
cdc9 : e60d             [ 5] 	inc vdp_curoff		; Disable cusror
cdcb : 850f             [ 3] 	sta vdp_curval		; Update cursor value
AS65 Assembler for R6502 [1.42].                                     Page  100
---------------------------------- bank0.s -----------------------------------

                             	; Base address plus X offset
cdcd : a41c             [ 3] 	ldy gr_scrngeom+gr_cur_x
cdcf : 911e             [ 5] 	sta (gr_scrngeom+gr_cur_ptr),y
cdd1 : c60d             [ 5] 	dec vdp_curoff		; Allow cursor flashing
cdd3 : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* gr_get
                             ;* Get the byte in the screen pos
                             ;* Input : Y,X = coord (**Y = X coordinate!!)
                             ;* Output : X,Y = address, A = peeked byte
                             ;* Regs affected : All
                             ;****************************************
cdd4 :                       gr_get
cdd4 : 20b1cd           [ 6] 	jsr gr_getXY_base	; Base address
cdd7 : b127             [ 5] 	lda (gr_scrngeom+gr_geom_tmp),y
cdd9 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* gr_set_cur
                             ;* Set the cursor position
                             ;* Input : X, Y = position
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
cdda :                       gr_set_cur
cdda : 18               [ 2] 	clc
cddb :                       gr_set_cur_init
cddb : e60d             [ 5] 	inc vdp_curoff				; Disable cursor
                             
cddd : b00e             [ 3] 	bcs gr_set_cur_skip			; Skip restore if C=1
cddf : 8632             [ 3] 	stx tmp_alo
cde1 : 8433             [ 3] 	sty tmp_ahi
                             	; First restore what is under the cursor
                             	; in case cursor is ON
cde3 : 8427             [ 3] 	sty gr_scrngeom+gr_geom_tmp
cde5 : a50f             [ 3] 	lda vdp_curval
cde7 : a41c             [ 3] 	ldy gr_scrngeom+gr_cur_x
cde9 : 911e             [ 5] 	sta (gr_scrngeom+gr_cur_ptr),y
cdeb : a427             [ 3] 	ldy gr_scrngeom+gr_geom_tmp
cded :                       gr_set_cur_skip
                             	; Save new cursor position
cded : 861c             [ 3] 	stx gr_scrngeom+gr_cur_x
cdef : 841d             [ 3] 	sty gr_scrngeom+gr_cur_y
                             
                             	; Now calculate the new cursor vram address
cdf1 : a61d             [ 3] 	ldx gr_scrngeom+gr_cur_y
cdf3 : 20b1cd           [ 6] 	jsr gr_getXY_base
                             	; Update pointer in tmp, A already has high byte
cdf6 : 851f             [ 3] 	sta gr_scrngeom+gr_cur_ptr+1
cdf8 : a527             [ 3] 	lda gr_scrngeom+gr_geom_tmp
cdfa : 851e             [ 3] 	sta gr_scrngeom+gr_cur_ptr
                             	; Read screen at this position, offset with X co
cdfc : a41c             [ 3] 	ldy gr_scrngeom+gr_cur_x
cdfe : b11e             [ 5] 	lda (gr_scrngeom+gr_cur_ptr),y
ce00 : 850f             [ 3] 	sta vdp_curval
                             	; Reset cursor so it's visible
ce02 : a900             [ 2] 	lda #0
ce04 : 850e             [ 3] 	sta vdp_curstat
ce06 : a901             [ 2] 	lda #1
ce08 : 850c             [ 3] 	sta vdp_curcnt
AS65 Assembler for R6502 [1.42].                                     Page  101
---------------------------------- bank0.s -----------------------------------

                             
ce0a : c60d             [ 5] 	dec vdp_curoff
                             
ce0c : 60               [ 6] 	rts
                             
                             
                             
                             ;****************************************
                             ;* gr_scroll_up
                             ;* Scroll screen one line up
                             ;****************************************
ce0d :                       gr_scroll_up
ce0d : e60d             [ 5] 	inc vdp_curoff
                             
                             	; Set source in a and dest in b
                             	; b is first line, source is second
ce0f : 18               [ 2] 	clc
ce10 : a516             [ 3] 	lda gr_scrngeom+gr_text_start
ce12 : 8534             [ 3] 	sta tmp_blo
ce14 : 651a             [ 3] 	adc gr_scrngeom+gr_text_w
ce16 : 8532             [ 3] 	sta tmp_alo
ce18 : a517             [ 3] 	lda gr_scrngeom+gr_text_start+1
ce1a : 8535             [ 3] 	sta tmp_bhi
ce1c : 6900             [ 2] 	adc #0
ce1e : 8533             [ 3] 	sta tmp_ahi
                             
                             	; Restore what was underneath cursor
ce20 : a50f             [ 3] 	lda vdp_curval
ce22 : a41c             [ 3] 	ldy gr_scrngeom+gr_cur_x
ce24 : 911e             [ 5] 	sta (gr_scrngeom+gr_cur_ptr),y
                             
                             	; x = lines to scroll (1 less than screen height
ce26 : a61b             [ 3] 	ldx gr_scrngeom+gr_text_h
ce28 : ca               [ 2] 	dex
                             
ce29 :                       gr_scroll_cpy_ln
                             	; Start from right hand edge (easier)
ce29 : a41a             [ 3] 	ldy gr_scrngeom+gr_text_w
ce2b : 88               [ 2] 	dey
ce2c :                       gr_scroll_char
                             	; get char from source and copy to dest
ce2c : b132             [ 5] 	lda (tmp_alo),y
ce2e : 9134             [ 5] 	sta (tmp_blo),y
ce30 : 88               [ 2] 	dey
ce31 : 10f9             [ 3] 	bpl gr_scroll_char
                             
                             	; Update source address
ce33 : 18               [ 2] 	clc
ce34 : a532             [ 3] 	lda tmp_alo
ce36 : 651a             [ 3] 	adc gr_scrngeom+gr_text_w
ce38 : 8532             [ 3] 	sta tmp_alo
ce3a : a533             [ 3] 	lda tmp_ahi
ce3c : 6900             [ 2] 	adc #0
ce3e : 8533             [ 3] 	sta tmp_ahi
                             	; Update destination address
ce40 : 18               [ 2] 	clc
ce41 : a534             [ 3] 	lda tmp_blo
ce43 : 651a             [ 3] 	adc gr_scrngeom+gr_text_w
ce45 : 8534             [ 3] 	sta tmp_blo
ce47 : a535             [ 3] 	lda tmp_bhi
ce49 : 6900             [ 2] 	adc #0
ce4b : 8535             [ 3] 	sta tmp_bhi
AS65 Assembler for R6502 [1.42].                                     Page  102
---------------------------------- bank0.s -----------------------------------

                             
                             	; One line complete
ce4d : ca               [ 2] 	dex
ce4e : d0d9             [ 3] 	bne gr_scroll_cpy_ln
                             
                             	; Source is pointing at last line
                             	; Last line needs filling
ce50 : a000             [ 2] 	ldy #0							; Start from left
ce52 : a526             [ 3] 	lda gr_scrngeom+gr_margin		; Margin?
ce54 : f00a             [ 3] 	beq gr_scroll_marg				; Skip if not
ce56 : a525             [ 3] 	lda gr_scrngeom+gr_paper		; Set Paper
ce58 : 9127             [ 5] 	sta (gr_scrngeom+gr_geom_tmp),y
ce5a : c8               [ 2] 	iny
ce5b : a524             [ 3] 	lda gr_scrngeom+gr_ink			; Set Ink
ce5d : 9127             [ 5] 	sta (gr_scrngeom+gr_geom_tmp),y
ce5f : c8               [ 2] 	iny
ce60 :                       gr_scroll_marg
                             	; Needs to be filled with blank
ce60 : a510             [ 3] 	lda vdp_blank
ce62 : 850f             [ 3] 	sta vdp_curval			; Also this is the cursor value
ce64 :                       gr_scroll_erase_ln
ce64 : 9134             [ 5] 	sta (tmp_blo),y
ce66 : c8               [ 2] 	iny
ce67 : c41a             [ 3] 	cpy gr_scrngeom+gr_text_w
ce69 : d0f9             [ 3] 	bne gr_scroll_erase_ln
                             
ce6b : c60d             [ 5] 	dec vdp_curoff
                             
ce6d : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* gr_new_ln
                             ;* Carry out a new line
                             ;* Input : None
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
ce6e :                       gr_new_ln
                             	; X pos is zero, Y needs to increment
ce6e : a626             [ 3] 	ldx gr_scrngeom+gr_margin
ce70 : a41d             [ 3] 	ldy gr_scrngeom+gr_cur_y
ce72 : c8               [ 2] 	iny
ce73 : c41b             [ 3] 	cpy gr_scrngeom+gr_text_h
ce75 : d00c             [ 3] 	bne gr_nl_skip_nl
                             	; If got here then screen needs to scroll
                             	; Common routine also used by cursor right
ce77 :                       gr_scroll_routine
ce77 : 88               [ 2] 	dey
ce78 : 8a               [ 2] 	txa
ce79 : 48               [ 3] 	pha
ce7a : 98               [ 2] 	tya
ce7b : 48               [ 3] 	pha
ce7c : 200dce           [ 6] 	jsr gr_scroll_up
ce7f : 68               [ 4] 	pla
ce80 : a8               [ 2] 	tay
ce81 : 68               [ 4] 	pla
ce82 : aa               [ 2] 	tax
ce83 :                       gr_nl_skip_nl
ce83 : 4cdacd           [ 3] 	jmp gr_set_cur
                             
                             
                             ;****************************************
AS65 Assembler for R6502 [1.42].                                     Page  103
---------------------------------- bank0.s -----------------------------------

                             ;* gr_cur_right
                             ;* Advance cursor position
                             ;* Input : None
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
ce86 :                       gr_cur_right
                             	; Load cursor x,y position
ce86 : a61c             [ 3] 	ldx gr_scrngeom+gr_cur_x
ce88 : a41d             [ 3] 	ldy gr_scrngeom+gr_cur_y
                             
                             	; Move cursor right
ce8a : e8               [ 2] 	inx
                             	; Check if reached past edge of line
ce8b : e41a             [ 3] 	cpx gr_scrngeom+gr_text_w
ce8d : d0f4             [ 3] 	bne gr_nl_skip_nl
                             	; If got here then wrap to next line
ce8f : a626             [ 3] 	ldx gr_scrngeom+gr_margin
ce91 : c8               [ 2] 	iny
ce92 : c41b             [ 3] 	cpy gr_scrngeom+gr_text_h
ce94 : f0e1             [ 3] 	beq gr_scroll_routine		; Common scroll routine
ce96 : d0eb             [ 3] 	bne gr_nl_skip_nl			; Common set cursor
                             
                             ;****************************************
                             ;* gr_cur_left
                             ;* Advance cursor left
                             ;* Input : None
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
ce98 :                       gr_cur_left
                             	; Load cursor x,y position, load X last to check
ce98 : a41d             [ 3] 	ldy gr_scrngeom+gr_cur_y
ce9a : a61c             [ 3] 	ldx gr_scrngeom+gr_cur_x
                             
                             	; Decrement screen pointer
                             	; Move cursor left
ce9c : e426             [ 3] 	cpx gr_scrngeom+gr_margin	; Already at left marg
ce9e : d007             [ 3] 	bne gr_cur_skip_at_left		; No, then just go left
cea0 : c000             [ 2] 	cpy #0						; Else check if can wrap up
cea2 : f007             [ 3] 	beq gr_cur_skip_at_tl
cea4 : 88               [ 2] 	dey
cea5 : a61a             [ 3] 	ldx gr_scrngeom+gr_text_w
cea7 :                       gr_cur_skip_at_left
cea7 : ca               [ 2] 	dex
cea8 : 4cdacd           [ 3] 	jmp gr_set_cur
                             
ceab :                       gr_cur_skip_at_tl
ceab : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* gr_cur_up
                             ;* Advance cursor up
                             ;* Input : None
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
ceac :                       gr_cur_up
                             	; Load cursor x,y position, load Y last to check
ceac : a61c             [ 3] 	ldx gr_scrngeom+gr_cur_x
ceae : a41d             [ 3] 	ldy gr_scrngeom+gr_cur_y
                             	; if y==0 then don't do anything
AS65 Assembler for R6502 [1.42].                                     Page  104
---------------------------------- bank0.s -----------------------------------

ceb0 : f0f9             [ 3] 	beq gr_cur_skip_at_tl	; Just somewhere with an r
ceb2 : 88               [ 2] 	dey
ceb3 : 4cdacd           [ 3] 	jmp gr_set_cur
                             
                             ;****************************************
                             ;* gr_cur_down
                             ;* Advance cursor down
                             ;* Input : None
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
ceb6 :                       gr_cur_down
                             	; Load cursor x,y position
ceb6 : a61c             [ 3] 	ldx gr_scrngeom+gr_cur_x
ceb8 : a41d             [ 3] 	ldy gr_scrngeom+gr_cur_y
ceba : c8               [ 2] 	iny
                             	; If already at  bottom then don't do anything
cebb : c41b             [ 3] 	cpy gr_scrngeom+gr_text_h
cebd : f0ec             [ 3] 	beq gr_cur_skip_at_tl				; Just somewhere with a
cebf : 20dacd           [ 6] 	jsr gr_set_cur
                             
cec2 :                       gr_cur_skip_at_bot
cec2 : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* gr_del
                             ;* Action del
                             ;* Input : None
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
cec3 :                       gr_del
cec3 : 2098ce           [ 6] 	jsr gr_cur_left
cec6 : a920             [ 2] 	lda #' '							; Put a space
cec8 : 4cc9cd           [ 3] 	jmp gr_put
                             
                             ;****************************************
                             ;* gr_get_key
                             ;* Waits for a key press, C=1 synchronous
                             ;* A = Key code, C=0 means valid code
                             ;****************************************
cecb :                       gr_get_key
                             	; save X,Y but A is ok to trample
cecb : 8a               [ 2] 	txa
cecc : 48               [ 3] 	pha
cecd : 98               [ 2] 	tya
cece : 48               [ 3] 	pha
cecf :                       gr_get_key_2
cecf : 08               [ 3] 	php
ced0 : 2079c8           [ 6] 	jsr kb_get_key
ced3 : 9006             [ 3] 	bcc gr_key_check_key
ced5 : 28               [ 4] 	plp									; Get async pref
ced6 : b0f7             [ 3] 	bcs	gr_get_key_2					; Keep checking if sync
ced8 : 38               [ 2] 	sec
ced9 : b019             [ 3] 	bcs gr_key_tidy_up					; Finish if not
cedb :                       gr_key_check_key						; Check the key pressed
cedb : c901             [ 2] 	cmp #UTF_ACK						; Copy key pressed?
cedd : d004             [ 3] 	bne gr_key_skip_copy
cedf : a50f             [ 3] 	lda vdp_curval						; If yes the get char under 
cee1 : b00f             [ 3] 	bcs gr_key_got_key					; Always branches (n=1, c
cee3 :                       gr_key_skip_copy
AS65 Assembler for R6502 [1.42].                                     Page  105
---------------------------------- bank0.s -----------------------------------

cee3 : c914             [ 2] 	cmp #CTRL_CAPS
cee5 : d00b             [ 3] 	bne gr_key_got_key
cee7 : a52c             [ 3] 	lda kb_stat							; Toggle caps bit
cee9 : 4901             [ 2] 	eor #KB_CAPSLK
ceeb : 852c             [ 3] 	sta kb_stat
ceed : 28               [ 4] 	plp									; Get back synchronous pref
ceee : b0df             [ 3] 	bcs gr_get_key_2					; And check again for sync
cef0 : 900b             [ 3] 	bcc gr_key_no_key					; Else no key
cef2 :                       gr_key_got_key
cef2 : 28               [ 4] 	plp
cef3 : 18               [ 2] 	clc									; Ensure C=0 for valid key
cef4 :                       gr_key_tidy_up
                             	; restore X,Y but don't lose A
cef4 : 8538             [ 3] 	sta tmp_d
cef6 : 68               [ 4] 	pla
cef7 : a8               [ 2] 	tay
cef8 : 68               [ 4] 	pla
cef9 : aa               [ 2] 	tax
cefa : a538             [ 3] 	lda tmp_d
cefc : 60               [ 6] 	rts
cefd :                       gr_key_no_key
cefd : 28               [ 4] 	plp
cefe : 38               [ 2] 	sec									; Ensure C=1 for invalid key
ceff : b0f3             [ 3] 	bcs gr_key_tidy_up					; Always branches
                             
                             ;****************************************
                             ;* gr_put_byte
                             ;* Put a byte out
                             ;* Input : A = Byte to put
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
cf01 :                       gr_put_byte
                             	_pushAXY
                             
cf0a : 2013cf           [ 6] 	jsr gr_put_byte_low
                             	_pullAXY
                             
cf12 :                       gr_no_special
cf12 : 60               [ 6] 	rts
                             
cf13 :                       gr_put_byte_low
cf13 : c97f             [ 2] 	cmp #UTF_DEL			; Del key
cf15 : f004             [ 3] 	beq gr_process_special
cf17 : c920             [ 2] 	cmp #32					; Special char?
cf19 : b01b             [ 3] 	bcs gr_printable		; >=32 == carry clear
cf1b :                       gr_process_special
                             	; Else find special behaviour to do
cf1b : a2ff             [ 2] 	ldx #-1
cf1d : 8532             [ 3] 	sta tmp_alo
cf1f :                       gr_special_loop
cf1f : e8               [ 2] 	inx
cf20 : bd3ccf           [ 4] 	lda gr_special_ch,x
cf23 : f0ed             [ 3] 	beq gr_no_special		; Somewhere with an rts!
cf25 : c532             [ 3] 	cmp tmp_alo
cf27 : d0f6             [ 3] 	bne gr_special_loop
cf29 : bd45cf           [ 4] 	lda gr_special_fn_lo,x
cf2c : 8532             [ 3] 	sta tmp_alo
cf2e : bd4dcf           [ 4] 	lda gr_special_fn_hi,x
cf31 : 8533             [ 3] 	sta tmp_ahi
cf33 : 6c3200           [ 6] 	jmp (tmp_alo)
                             
AS65 Assembler for R6502 [1.42].                                     Page  106
---------------------------------- bank0.s -----------------------------------

                             	;	Normal caracter processing here.
cf36 :                       gr_printable
                             	; Place in current position and move right
cf36 : 20c9cd           [ 6] 	jsr gr_put
cf39 : 4c86ce           [ 3] 	jmp gr_cur_right
                             
cf3c :                       gr_special_ch
cf3c : 0d                    	db UTF_CR
cf3d : 7f                    	db UTF_DEL
cf3e : 08                    	db CRSR_LEFT
cf3f : 09                    	db CRSR_RIGHT
cf40 : 0b                    	db CRSR_UP
cf41 : 0a                    	db CRSR_DOWN
cf42 : 0c                    	db UTF_FF
cf43 : 07                    	db UTF_BEL
cf44 : 00                    	db 0
                             
cf45 :                       gr_special_fn_lo
cf45 : 6e                    	db lo(gr_new_ln)
cf46 : c3                    	db lo(gr_del)
cf47 : 98                    	db lo(gr_cur_left)
cf48 : 86                    	db lo(gr_cur_right)
cf49 : ac                    	db lo(gr_cur_up)
cf4a : b6                    	db lo(gr_cur_down)
cf4b : 6b                    	db lo(gr_cls)
cf4c : 04                    	db lo(init_snd)
                             
cf4d :                       gr_special_fn_hi
cf4d : ce                    	db hi(gr_new_ln)
cf4e : ce                    	db hi(gr_del)
cf4f : ce                    	db hi(gr_cur_left)
cf50 : ce                    	db hi(gr_cur_right)
cf51 : ce                    	db hi(gr_cur_up)
cf52 : ce                    	db hi(gr_cur_down)
cf53 : cd                    	db hi(gr_cls)
cf54 : d4                    	db hi(init_snd)
                             
                             ; Special command to print to the screen
                             ; Y,A=Message, zero terminated
cf55 :                       gr_print_msg
cf55 : 8449             [ 3] 	sty num_tmp
cf57 : 854a             [ 3] 	sta num_tmp+1
cf59 : a000             [ 2] 	ldy #0
cf5b :                       gr_print_msg_loop
cf5b : b149             [ 5] 	lda (num_tmp),y
cf5d : f006             [ 3] 	beq gr_print_msg_done
cf5f : 2001cf           [ 6] 	jsr gr_put_byte
cf62 : c8               [ 2] 	iny
cf63 : d0f6             [ 3] 	bne gr_print_msg_loop
cf65 :                       gr_print_msg_done
cf65 : a54a             [ 3] 	lda num_tmp+1
cf67 : a449             [ 3] 	ldy num_tmp
cf69 : 60               [ 6] 	rts
                             
                             ;******* HIRES STUFF *****
                             
                             ;****************************************
                             ;* gr_fill
                             ;* Fill bytes X,Y coordinates with char code A
                             ;* Input : X,Y = coord, A = Char code
                             ;* Output : None
                             ;* Regs affected : None
AS65 Assembler for R6502 [1.42].                                     Page  107
---------------------------------- bank0.s -----------------------------------

                             ;****************************************
                             
                             ;****************************************
                             ;* gr_hchar
                             ;* Plot character to hires X,Y coordinates with c
                             ;* Input : X,Y = coord, A = Char code
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
cf6a :                       gr_hchar
                             	; Multiply char code by 8
                             	; and add to char font base
                             	; tmp_clo contains base address
cf6a : 0a               [ 2] 	asl a
cf6b : 2637             [ 5] 	rol tmp_chi
cf6d : 0a               [ 2] 	asl a
cf6e : 2637             [ 5] 	rol tmp_chi
cf70 : 0a               [ 2] 	asl a
cf71 : 2637             [ 5] 	rol tmp_chi
cf73 : 18               [ 2] 	clc
cf74 : 6514             [ 3] 	adc gr_scrngeom+gr_char
cf76 : 8536             [ 3] 	sta tmp_clo
cf78 : a537             [ 3] 	lda tmp_chi
cf7a : 2907             [ 2] 	and #7
cf7c : 6515             [ 3] 	adc gr_scrngeom+gr_char+1
cf7e : 8537             [ 3] 	sta tmp_chi
                             
                             	; Set up destination position
cf80 : 2010d0           [ 6] 	jsr gr_point_setup
                             	; tmp_alo contains address including column offs
cf83 : 18               [ 2] 	clc
cf84 : 98               [ 2] 	tya
cf85 : 6532             [ 3] 	adc tmp_alo
cf87 : 8532             [ 3] 	sta tmp_alo
cf89 : a533             [ 3] 	lda tmp_ahi
cf8b : 6900             [ 2] 	adc #0
cf8d : 8533             [ 3] 	sta tmp_ahi
                             
cf8f : a534             [ 3] 	lda tmp_blo					; Get the mask
cf91 : a207             [ 2] 	ldx #7
cf93 :                       gr_hchar_mask					; Calculate how many shifts to 
cf93 : ca               [ 2] 	dex
cf94 : 4a               [ 2] 	lsr a
cf95 : d0fc             [ 3] 	bne gr_hchar_mask
cf97 : 8634             [ 3] 	stx tmp_blo					; number between 1 and 6 : shift
                             
                             	; copy font bytes and shift the required number 
                             	; go from bottom to top as data gets stored on t
cf99 : a007             [ 2] 	ldy #7
cf9b :                       gr_hchar_getfont
cf9b : b136             [ 5] 	lda (tmp_clo),y
cf9d : 853d             [ 3] 	sta ztmp_24
cf9f : a900             [ 2] 	lda #0
cfa1 : 853e             [ 3] 	sta ztmp_24+1
                             
                             	; shift right number of times
cfa3 : a634             [ 3] 	ldx tmp_blo
cfa5 :                       gr_hchar_rot1bit
cfa5 : ca               [ 2] 	dex
cfa6 : f00d             [ 3] 	beq gr_hchar_rot1bit_nx
cfa8 : 463d             [ 5] 	lsr ztmp_24					; Rotate left hand side
cfaa : a53e             [ 3] 	lda ztmp_24+1				; Rotate right hand side
AS65 Assembler for R6502 [1.42].                                     Page  108
---------------------------------- bank0.s -----------------------------------

cfac : 9002             [ 3] 	bcc gr_hchar_rot1bit_bcc
cfae : 0940             [ 2] 	ora #0x40					; account for 6 bits per byte
cfb0 :                       gr_hchar_rot1bit_bcc
cfb0 : 4a               [ 2] 	lsr a
cfb1 : 853e             [ 3] 	sta ztmp_24+1
cfb3 : 10f0             [ 3] 	bpl gr_hchar_rot1bit		; Always as lsr sets N=0
cfb5 :                       gr_hchar_rot1bit_nx
cfb5 : a53e             [ 3] 	lda ztmp_24+1				; Get RHS
cfb7 : 48               [ 3] 	pha							; Push RHS on to stack
cfb8 : a53d             [ 3] 	lda ztmp_24					; Get LHS
cfba : 48               [ 3] 	pha							; Push that too - LH gets pulled first
cfbb : 88               [ 2] 	dey							; Bottom to to lines
cfbc : 10dd             [ 3] 	bpl gr_hchar_getfont
                             
                             	; Now copy shift source to destination, accounti
cfbe : a200             [ 2] 	ldx #0
cfc0 :                       gr_hchar_copyline
cfc0 : a420             [ 3] 	ldy gr_scrngeom+gr_pixmode	; Mode determines how
cfc2 : f024             [ 3] 	beq gr_hchar_copyline_0
cfc4 : c002             [ 2] 	cpy #2
cfc6 : f010             [ 3] 	beq gr_hchar_copyline_2
                             
                             	; Mode = 1 : OR
cfc8 : a000             [ 2] 	ldy #0						; Get lh side source
cfca : 68               [ 4] 	pla
cfcb : 1132             [ 5] 	ora (tmp_alo),y
cfcd : 9132             [ 5] 	sta (tmp_alo),y
cfcf : c8               [ 2] 	iny							; Get rh side source
cfd0 : 68               [ 4] 	pla
cfd1 : 1132             [ 5] 	ora (tmp_alo),y
cfd3 : 9132             [ 5] 	sta (tmp_alo),y
cfd5 : 4cfdcf           [ 3] 	jmp gr_hchar_copyline_nx
cfd8 :                       gr_hchar_copyline_2
                             	; Mode = 2 : EOR
cfd8 : a000             [ 2] 	ldy #0						; Get lh side source
cfda : 68               [ 4] 	pla
cfdb : 5132             [ 5] 	eor (tmp_alo),y
cfdd : 9132             [ 5] 	sta (tmp_alo),y
cfdf : c8               [ 2] 	iny							; Get rh side source
cfe0 : 68               [ 4] 	pla
cfe1 : 5132             [ 5] 	eor (tmp_alo),y
cfe3 : 9132             [ 5] 	sta (tmp_alo),y
cfe5 : 4cfdcf           [ 3] 	jmp gr_hchar_copyline_nx
cfe8 :                       gr_hchar_copyline_0
                             	; Mode = 0 : erase
cfe8 : a000             [ 2] 	ldy #0						; Get lh side source
cfea : 68               [ 4] 	pla
cfeb : 853d             [ 3] 	sta ztmp_24
cfed : 1132             [ 5] 	ora (tmp_alo),y
cfef : 453d             [ 3] 	eor ztmp_24
cff1 : 9132             [ 5] 	sta (tmp_alo),y
cff3 : c8               [ 2] 	iny							; Get rh side source
cff4 : 68               [ 4] 	pla
cff5 : 853d             [ 3] 	sta ztmp_24
cff7 : 1132             [ 5] 	ora (tmp_alo),y
cff9 : 453d             [ 3] 	eor ztmp_24
cffb : 9132             [ 5] 	sta (tmp_alo),y
cffd :                       gr_hchar_copyline_nx
cffd : 18               [ 2] 	clc							; Next address
cffe : a532             [ 3] 	lda tmp_alo
d000 : 6928             [ 2] 	adc #40
d002 : 8532             [ 3] 	sta tmp_alo
AS65 Assembler for R6502 [1.42].                                     Page  109
---------------------------------- bank0.s -----------------------------------

d004 : a533             [ 3] 	lda tmp_alo+1
d006 : 6900             [ 2] 	adc #0
d008 : 8533             [ 3] 	sta tmp_alo+1
d00a : e8               [ 2] 	inx
d00b : e008             [ 2] 	cpx #8
d00d : d0b1             [ 4] 	bne gr_hchar_copyline
d00f : 60               [ 6] 	rts							; Done after 8 lines
                             
                             ;****************************************
                             ;* gr_point_setup
                             ;* Calculate information about a pixel location
                             ;* Input : X,Y = coord
                             ;* Output : None
                             ;* Regs affected :
                             ;* tmp_alo,hi contains the row base address
                             ;* tmp_blo contains the mask index
                             ;* tmp_bhi contains the column offset in to row
                             ;* Y is same as tmp_bhi
                             ;* X is same as tmp_blo
                             ;****************************************
d010 :                       gr_point_setup
                             	; Get row address
d010 : b9009c           [ 4] 	lda hires_row_low,y
d013 : 8532             [ 3] 	sta tmp_alo
d015 : b9c89c           [ 4] 	lda hires_row_hi,y
d018 : 8533             [ 3] 	sta tmp_ahi
                             	; Get the pixel mask
d01a : bd809e           [ 4] 	lda hires_mask,x
d01d : 8534             [ 3] 	sta tmp_blo
                             	; Get the column offset to Y
d01f : bc909d           [ 4] 	ldy hires_col,x
d022 : 60               [ 6] 	rts
                             
d023 :                       gr_set_hires_cur
d023 : 8622             [ 3] 	stx gr_scrngeom+gr_hires_x
d025 : 8423             [ 3] 	sty gr_scrngeom+gr_hires_y
d027 : 60               [ 6] 	rts
                             
                             ;* Get pixel value at X,Y in to A
d028 :                       gr_pixel
d028 : 2010d0           [ 6] 	jsr gr_point_setup				; Set up mask and addresse
d02b : b132             [ 5] 	lda (tmp_alo),y					; Get screen byte
d02d : 2534             [ 3] 	and tmp_blo						; Check if pixel coincides with
d02f : 60               [ 6] 	rts
                             
                             ;* Plot a point based on X,Y coordinates
d030 :                       gr_point
d030 : e0f0             [ 2] 	cpx #240						; Check bounds
d032 : b028             [ 3] 	bcs gr_point_done
d034 : c0c8             [ 2] 	cpy #200
d036 : b024             [ 3] 	bcs gr_point_done
                             
                             	;** FOR SPEED COPYING THE POINT SETUP ROUTINE
                             	; Get row address
d038 : b9009c           [ 4] 	lda hires_row_low,y
d03b : 8532             [ 3] 	sta tmp_alo
d03d : b9c89c           [ 4] 	lda hires_row_hi,y
d040 : 8533             [ 3] 	sta tmp_ahi
                             	; Get the pixel mask
d042 : bd809e           [ 4] 	lda hires_mask,x
d045 : 8534             [ 3] 	sta tmp_blo
                             	; Get the column offset to Y
AS65 Assembler for R6502 [1.42].                                     Page  110
---------------------------------- bank0.s -----------------------------------

d047 : bc909d           [ 4] 	ldy hires_col,x
                             
                             ;	jsr gr_point_setup				; Set up mask and address
                             ;* Plot a point based on tmp_alo base, Y offset a
d04a : b132             [ 5] 	lda (tmp_alo),y					; Get screen byte
d04c : a620             [ 3] 	ldx gr_scrngeom+gr_pixmode		; Look at the mode
d04e : e002             [ 2] 	cpx #2							; If eor mode then go and write
d050 : f006             [ 3] 	beq gr_point_eor
d052 : 0534             [ 3] 	ora tmp_blo						; Or with MASK
d054 : e000             [ 2] 	cpx #0							; But if not then eor
d056 : d002             [ 3] 	bne gr_point_write
d058 :                       gr_point_eor
d058 : 4534             [ 3] 	eor tmp_blo						; EOR with MASK
d05a :                       gr_point_write
d05a : 9132             [ 5] 	sta (tmp_alo),y
d05c :                       gr_point_done
d05c : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* gr_circle
                             ;* Draw a circle centre x0,y0, radius r
                             ;* Input :	num_a   = x0
                             ;*			num_a+1 = y0
                             ;*			num_a+2 = r
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
d05d :                       gr_circle
                             ; Local definitions of temp space to make
                             ; the rest of the code easier to read
003d =                       grc_x0 	= (num_a)
003e =                       grc_y0 	= (num_a+1)
003f =                       grc_r 	= (num_a+2)
0040 =                       grc_x 	= (num_a+3)
0042 =                       grc_y	= (num_b+1)
0043 =                       grc_d	= (num_b+2)
                             
                             	;x = radius
d05d : a53f             [ 3] 	lda grc_r
d05f : 8540             [ 3] 	sta grc_x
                             	;decision = 1 - x
d061 : a900             [ 2] 	lda #0
                             	;y = 0
d063 : 8542             [ 3] 	sta grc_y
d065 : 18               [ 2] 	clc			; A=0 so CLC subtracts 1 :-)
d066 : e540             [ 3] 	sbc grc_x
d068 : 8543             [ 3] 	sta grc_d
d06a :                       gr_circle_plot
                             	;while(x >= y)
d06a : a540             [ 3] 	lda grc_x
d06c : c542             [ 3] 	cmp grc_y
d06e : 902a             [ 3] 	bcc gr_circle_done
                             	;plot 8 points on current x,y
d070 : 209bd0           [ 6] 	jsr gr_circle_points
                             	;y++
d073 : e642             [ 5] 	inc grc_y
                             	;if d<=0
d075 : a543             [ 3] 	lda grc_d
d077 : f014             [ 3] 	beq gr_circle_d_lte0
d079 : 3012             [ 3] 	bmi gr_circle_d_lte0
                             	;else
AS65 Assembler for R6502 [1.42].                                     Page  111
---------------------------------- bank0.s -----------------------------------

                             	;x--
d07b : c640             [ 5] 	dec grc_x
                             	;decision += 2 * (y - x) + 1
d07d : a542             [ 3] 	lda grc_y
d07f : 38               [ 2] 	sec
d080 : e540             [ 3] 	sbc grc_x
d082 : 0a               [ 2] 	asl a
d083 : 18               [ 2] 	clc
d084 : 6901             [ 2] 	adc #1
d086 : 6543             [ 3] 	adc grc_d
d088 : 8543             [ 3] 	sta grc_d
d08a : 4c6ad0           [ 3] 	jmp gr_circle_plot
d08d :                       gr_circle_d_lte0
                             	;decision += 2 * y + 1
d08d : a542             [ 3] 	lda grc_y
d08f : 0a               [ 2] 	asl a
d090 : 18               [ 2] 	clc
d091 : 6901             [ 2] 	adc #1
d093 : 6543             [ 3] 	adc grc_d
d095 : 8543             [ 3] 	sta grc_d
d097 : 4c6ad0           [ 3] 	jmp gr_circle_plot
d09a :                       gr_circle_done
d09a : 60               [ 6] 	rts
d09b :                       gr_circle_points
                             ; Local names of temp storage
                             ; to make code easier to read
                             	;DrawPixel( x + x0,  yh + y0);
d09b : a540             [ 3] 	lda grc_x
d09d : 18               [ 2] 	clc
d09e : 653d             [ 3] 	adc grc_x0
d0a0 : aa               [ 2] 	tax
d0a1 : a542             [ 3] 	lda grc_y
d0a3 : 18               [ 2] 	clc
d0a4 : 653e             [ 3] 	adc grc_y0
d0a6 : a8               [ 2] 	tay
d0a7 : 2030d0           [ 6] 	jsr gr_point
                             	;DrawPixel( y + x0,  xh + y0);
d0aa : a542             [ 3] 	lda grc_y
d0ac : 18               [ 2] 	clc
d0ad : 653d             [ 3] 	adc grc_x0
d0af : aa               [ 2] 	tax
d0b0 : a540             [ 3] 	lda grc_x
d0b2 : 18               [ 2] 	clc
d0b3 : 653e             [ 3] 	adc grc_y0
d0b5 : a8               [ 2] 	tay
d0b6 : 2030d0           [ 6] 	jsr gr_point
                             	;DrawPixel(-x + x0,  yh + y0);
d0b9 : a53d             [ 3] 	lda grc_x0
d0bb : 38               [ 2] 	sec
d0bc : e540             [ 3] 	sbc grc_x
d0be : aa               [ 2] 	tax
d0bf : a542             [ 3] 	lda grc_y
d0c1 : 18               [ 2] 	clc
d0c2 : 653e             [ 3] 	adc grc_y0
d0c4 : a8               [ 2] 	tay
d0c5 : 2030d0           [ 6] 	jsr gr_point
                             	;DrawPixel(-y + x0,  xh + y0);
d0c8 : a53d             [ 3] 	lda grc_x0
d0ca : 38               [ 2] 	sec
d0cb : e542             [ 3] 	sbc grc_y
d0cd : aa               [ 2] 	tax
d0ce : a540             [ 3] 	lda grc_x
AS65 Assembler for R6502 [1.42].                                     Page  112
---------------------------------- bank0.s -----------------------------------

d0d0 : 18               [ 2] 	clc
d0d1 : 653e             [ 3] 	adc grc_y0
d0d3 : a8               [ 2] 	tay
d0d4 : 2030d0           [ 6] 	jsr gr_point
                             	;DrawPixel(-x + x0, -yh + y0);
d0d7 : a53d             [ 3] 	lda grc_x0
d0d9 : 38               [ 2] 	sec
d0da : e540             [ 3] 	sbc grc_x
d0dc : aa               [ 2] 	tax
d0dd : a53e             [ 3] 	lda grc_y0
d0df : 38               [ 2] 	sec
d0e0 : e542             [ 3] 	sbc grc_y
d0e2 : a8               [ 2] 	tay
d0e3 : 2030d0           [ 6] 	jsr gr_point
                             	;DrawPixel(-y + x0, -xh + y0);
d0e6 : a53d             [ 3] 	lda grc_x0
d0e8 : 38               [ 2] 	sec
d0e9 : e542             [ 3] 	sbc grc_y
d0eb : aa               [ 2] 	tax
d0ec : a53e             [ 3] 	lda grc_y0
d0ee : 38               [ 2] 	sec
d0ef : e540             [ 3] 	sbc grc_x
d0f1 : a8               [ 2] 	tay
d0f2 : 2030d0           [ 6] 	jsr gr_point
                             	;DrawPixel( x + x0, -yh + y0);
d0f5 : a540             [ 3] 	lda grc_x
d0f7 : 18               [ 2] 	clc
d0f8 : 653d             [ 3] 	adc grc_x0
d0fa : aa               [ 2] 	tax
d0fb : a53e             [ 3] 	lda grc_y0
d0fd : 38               [ 2] 	sec
d0fe : e542             [ 3] 	sbc grc_y
d100 : a8               [ 2] 	tay
d101 : 2030d0           [ 6] 	jsr gr_point
                             	;DrawPixel( y + x0, -xh + y0);
d104 : a542             [ 3] 	lda grc_y
d106 : 18               [ 2] 	clc
d107 : 653d             [ 3] 	adc grc_x0
d109 : aa               [ 2] 	tax
d10a : a53e             [ 3] 	lda grc_y0
d10c : 38               [ 2] 	sec
d10d : e540             [ 3] 	sbc grc_x
d10f : a8               [ 2] 	tay
d110 : 4c30d0           [ 3] 	jmp gr_point
                             
                             
                             
                             ;****************************************
                             ;* gr_line
                             ;* Draw a line from x0,y0 -> x1,y1
                             ;* Input :	num_a   = x0
                             ;*			num_a+1 = y0
                             ;*			num_a+2 = x1
                             ;*			num_a+3 = y1
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
d113 :                       gr_line
                             
                             ; Local definitions of temp space to make
                             ; the rest of the code easier to read
003d =                       grl_x0 	= (num_a)
AS65 Assembler for R6502 [1.42].                                     Page  113
---------------------------------- bank0.s -----------------------------------

003e =                       grl_y0 	= (num_a+1)
003f =                       grl_x1 	= (num_a+2)
0040 =                       grl_y1 	= (num_a+3)
0041 =                       grl_dx	= (ztmp_24+4)
0042 =                       grl_dy	= (ztmp_24+5)
0043 =                       grl_xyyx= (ztmp_24+6)
0044 =                       grl_2dx	= (ztmp_24+7)			; Word
0046 =                       grl_2dy	= (ztmp_24+9)			; Word
0048 =                       grl_2dxy= (ztmp_24+11)			; Word
004a =                       grl_sinx= (ztmp_24+13)
004b =                       grl_p	= (ztmp_24+14)			; Word
004d =                       grl_siny= (ztmp_24+16)
                             
                             	; Start from hires cursor position
                             	; New cursor pos = end of line pos
d113 : a522             [ 3] 	lda gr_scrngeom+gr_hires_x
d115 : 853d             [ 3] 	sta grl_x0
d117 : a523             [ 3] 	lda gr_scrngeom+gr_hires_y
d119 : 853e             [ 3] 	sta grl_y0
d11b : a63f             [ 3] 	ldx grl_x1
d11d : a440             [ 3] 	ldy grl_y1
d11f : 2023d0           [ 6] 	jsr gr_set_hires_cur
                             
d122 : a900             [ 2] 	lda #0
d124 : 8543             [ 3] 	sta grl_xyyx				; Assume normal xy axis
                             
                             	; check if abs(dy)>abs(dx) if so need to swap xy
                             	; num_b = abs(x), num_b+1 = abs(dy)
d126 : 38               [ 2] 	sec
d127 : a53f             [ 3] 	lda grl_x1
d129 : e53d             [ 3] 	sbc grl_x0
d12b : b004             [ 3] 	bcs gr_line_skip_dx_neg
d12d : 49ff             [ 2] 	eor #0xff
d12f : 6901             [ 2] 	adc #1
d131 :                       gr_line_skip_dx_neg
d131 : 8541             [ 3] 	sta grl_dx
d133 : 38               [ 2] 	sec
d134 : a540             [ 3] 	lda grl_y1
d136 : e53e             [ 3] 	sbc grl_y0
d138 : b004             [ 3] 	bcs gr_line_skip_dy_neg
d13a : 49ff             [ 2] 	eor #0xff
d13c : 6901             [ 2] 	adc #1
d13e :                       gr_line_skip_dy_neg
d13e : 8542             [ 3] 	sta grl_dy
d140 : c541             [ 3] 	cmp grl_dx
d142 : 901a             [ 3] 	bcc gr_line_skip_xy_swap
                             	; swap xy axes and also dx and dy
d144 : a53d             [ 3] 	lda grl_x0					; swap x0 and y0
d146 : a63e             [ 3] 	ldx grl_y0
d148 : 853e             [ 3] 	sta grl_y0
d14a : 863d             [ 3] 	stx grl_x0
d14c : a53f             [ 3] 	lda grl_x1					; swap x1 and y1
d14e : a640             [ 3] 	ldx grl_y1
d150 : 8540             [ 3] 	sta grl_y1
d152 : 863f             [ 3] 	stx grl_x1
d154 : a541             [ 3] 	lda grl_dx					; swap dy and dx
d156 : a642             [ 3] 	ldx grl_dy
d158 : 8542             [ 3] 	sta grl_dy
d15a : 8641             [ 3] 	stx grl_dx
d15c : e643             [ 5] 	inc grl_xyyx				; set flag to Not Z to know abou
                             
d15e :                       gr_line_skip_xy_swap
AS65 Assembler for R6502 [1.42].                                     Page  114
---------------------------------- bank0.s -----------------------------------

                             	; assume going from left to right and top to bot
d15e : a901             [ 2] 	lda #1
d160 : a0ff             [ 2] 	ldy #255					; -1
d162 : 854a             [ 3] 	sta grl_sinx
d164 : 854d             [ 3] 	sta grl_siny
                             
                             	; check going right to left
d166 : a53d             [ 3] 	lda grl_x0
d168 : c53f             [ 3] 	cmp grl_x1
d16a : 9002             [ 3] 	bcc gr_line_skip_left
d16c : 844a             [ 3] 	sty grl_sinx				; make -1
d16e :                       gr_line_skip_left
                             	; check going bottom to top
d16e : a53e             [ 3] 	lda grl_y0
d170 : c540             [ 3] 	cmp grl_y1
d172 : 9002             [ 3] 	bcc gr_line_skip_y_up
d174 : 844d             [ 3] 	sty grl_siny				; make -1
                             
d176 :                       gr_line_skip_y_up
d176 : a541             [ 3] 	lda grl_dx
d178 : 0a               [ 2] 	asl a
d179 : 8544             [ 3] 	sta grl_2dx					; 2*dx (word)
d17b : a900             [ 2] 	lda #0
d17d : 8545             [ 3] 	sta grl_2dx+1
d17f : 2645             [ 5] 	rol grl_2dx+1
                             
d181 : a542             [ 3] 	lda grl_dy
d183 : 0a               [ 2] 	asl a
d184 : 8546             [ 3] 	sta grl_2dy					; 2*dy (word)
d186 : a900             [ 2] 	lda #0
d188 : 8547             [ 3] 	sta grl_2dy+1
d18a : 2647             [ 5] 	rol grl_2dy+1
                             
                             ;    p=2*dy-dx;					; p (word)
d18c : 38               [ 2] 	sec
d18d : a546             [ 3] 	lda grl_2dy
d18f : e541             [ 3] 	sbc grl_dx
d191 : 854b             [ 3] 	sta grl_p
d193 : a547             [ 3] 	lda grl_2dy+1
d195 : e900             [ 2] 	sbc #0
d197 : 854c             [ 3] 	sta grl_p+1
                             
                             ;   2*(dy-dx)					; num_tmp+2 = 2*(dy-dx)
d199 : 38               [ 2] 	sec
d19a : a546             [ 3] 	lda grl_2dy
d19c : e544             [ 3] 	sbc grl_2dx
d19e : 8548             [ 3] 	sta grl_2dxy
d1a0 : a547             [ 3] 	lda grl_2dy+1
d1a2 : e545             [ 3] 	sbc grl_2dx+1
d1a4 : 8549             [ 3] 	sta grl_2dxy+1
                             
d1a6 :                       gr_line_pixel
d1a6 : a63d             [ 3] 	ldx grl_x0
d1a8 : a43e             [ 3] 	ldy grl_y0
d1aa : a543             [ 3] 	lda grl_xyyx				; Swapped?
d1ac : f004             [ 3] 	beq gr_line_yx_skip
d1ae : a63e             [ 3] 	ldx grl_y0
d1b0 : a43d             [ 3] 	ldy grl_x0
d1b2 :                       gr_line_yx_skip
d1b2 : 2030d0           [ 6] 	jsr gr_point				; Plot point x,y
                             
d1b5 : a53d             [ 3] 	lda grl_x0					; Check if done
AS65 Assembler for R6502 [1.42].                                     Page  115
---------------------------------- bank0.s -----------------------------------

d1b7 : c53f             [ 3] 	cmp grl_x1
d1b9 : f032             [ 3] 	beq gr_line_done
                             
                             	; Increment x always
d1bb : 18               [ 2] 	clc
d1bc : a53d             [ 3] 	lda grl_x0
d1be : 654a             [ 3] 	adc grl_sinx
d1c0 : 853d             [ 3] 	sta grl_x0
                             
                             	; check sign of p
d1c2 : a54c             [ 3] 	lda grl_p+1
d1c4 : 3017             [ 3] 	bmi gr_line_neg_p
                             
                             	; if p >=0
                             
                             	; y=y+increment
d1c6 : 18               [ 2] 	clc
d1c7 : a53e             [ 3] 	lda grl_y0
d1c9 : 654d             [ 3] 	adc grl_siny
d1cb : 853e             [ 3] 	sta grl_y0
                             
                             	; p=p+2*dy-2*dx
                             	_addZPWord grl_p,grl_2dxy
                             
d1da : 4ca6d1           [ 3] 	jmp gr_line_pixel
                             
d1dd :                       gr_line_neg_p
                             	; if p < 0
                             	; p=p+2*dy
                             	_addZPWord grl_p,grl_2dy
                             
                             
d1ea : 4ca6d1           [ 3] 	jmp gr_line_pixel
d1ed :                       gr_line_done
d1ed : 60               [ 6] 	rts
                             
                             
                             ; Line drawing pseudo code
                             ;    while(x<x1)
                             ;    {
                             ;        putpixel(x,y);
                             ;        if(p>=0)
                             ;        {
                             ;            y=y+1;
                             ;            p=p+2*dy-2*dx;
                             ;        }
                             ;        else
                             ;        {
                             ;            p=p+2*dy;
                             ;        }
                             ;        x=x+1;
                             ;    }
                             
                             
                             ;* These tables are to speed up calculating the
                             ;* offset for plot commands
d1ee :                       gr_offset_40lo
d1ee : 00285078a0            	db lo(000*40), lo(001*40), lo(002*40), lo(003*40
d1f3 : c8f0184068            	db lo(005*40), lo(006*40), lo(007*40), lo(008*40
d1f8 : 90b8e00830            	db lo(010*40), lo(011*40), lo(012*40), lo(013*40
d1fd : 5880a8d0f8            	db lo(015*40), lo(016*40), lo(017*40), lo(018*40
d202 : 20487098c0            	db lo(020*40), lo(021*40), lo(022*40), lo(023*40
AS65 Assembler for R6502 [1.42].                                     Page  116
---------------------------------- bank0.s -----------------------------------

d207 : e81038                	db lo(025*40), lo(026*40), lo(027*40)
d20a :                       gr_offset_40hi
d20a : 0000000000            	db hi(000*40), hi(001*40), hi(002*40), hi(003*40
d20f : 0000010101            	db hi(005*40), hi(006*40), hi(007*40), hi(008*40
d214 : 0101010202            	db hi(010*40), hi(011*40), hi(012*40), hi(013*40
d219 : 0202020202            	db hi(015*40), hi(016*40), hi(017*40), hi(018*40
d21e : 0303030303            	db hi(020*40), hi(021*40), hi(022*40), hi(023*40
d223 : 030404                	db hi(025*40), hi(026*40), hi(027*40)
                             
                             
                             ;* Character based sprites for text mode only
d226 :                       mod_sz_sprite_s
                             ;* Initialisation
d226 :                       gr_spr_init
d226 : a21f             [ 2] 	ldx #31							; Start at last sprite
d228 :                       gr_spr_init_loop
d228 : a9ff             [ 2] 	lda #-1							; Put -1 in the x coords
d22a : 9d00b4           [ 5] 	sta spr_curX,x
d22d : 9d20b4           [ 5] 	sta spr_newX,x
d230 : ca               [ 2] 	dex								; Next sprite
d231 : 10f5             [ 3] 	bpl gr_spr_init_loop			; Until all 32 sprites in
d233 : 60               [ 6] 	rts
                             
                             
                             ;* Erase all active sprites
d234 :                       gr_spr_erase
                             	; First restore background from sprites
                             	; that are active and new pos is different from 
d234 : a21f             [ 2] 	ldx #31							; Start at last sprite
d236 :                       gr_spr_erase_loop
d236 : bd00b4           [ 4] 	lda spr_curX,x					; Is sprite active?
d239 : 3008             [ 3] 	bmi gr_spr_erase_next
d23b : 8532             [ 3] 	sta tmp_alo						; x pos saved for later
d23d :                       gr_spr_erase_do
d23d : bda0b4           [ 4] 	lda spr_bgnd,x					; Get the background
d240 : 208ed2           [ 6] 	jsr gr_spr_put					; And restore it
d243 :                       gr_spr_erase_next
d243 : ca               [ 2] 	dex
d244 : 10f0             [ 3] 	bpl gr_spr_erase_loop
d246 : 60               [ 6] 	rts
                             
                             ;* Get ready for new position
d247 :                       gr_spr_new
d247 : a21f             [ 2] 	ldx #31							; Start at last sprite
d249 :                       gr_spr_new_loop
d249 : bd20b4           [ 4] 	lda spr_newX,x					; Is the new position active?
d24c : 3029             [ 3] 	bmi gr_spr_new_next
d24e : 8532             [ 3] 	sta tmp_alo						; x pos saved for later
d250 :                       gr_spr_new_pos
d250 : bd60b4           [ 4] 	lda spr_newY,x					; Get new Y
d253 : 9d40b4           [ 5] 	sta spr_curY,x					; Update new->cur Y
                             	; Calculate screen address
                             	; save as part of sprite data and in zp area
d256 : a8               [ 2] 	tay
d257 : 18               [ 2] 	clc
d258 : b9eed1           [ 4] 	lda gr_offset_40lo,y
d25b : 6980             [ 2] 	adc #lo(TEXTSCRN)
d25d : 8527             [ 3] 	sta gr_scrngeom+gr_geom_tmp
d25f : 9dc0b4           [ 5] 	sta spr_baseadrl,x
d262 : b90ad2           [ 4] 	lda gr_offset_40hi,y
d265 : 69bb             [ 2] 	adc #hi(TEXTSCRN)
d267 : 8528             [ 3] 	sta gr_scrngeom+gr_geom_tmp+1
AS65 Assembler for R6502 [1.42].                                     Page  117
---------------------------------- bank0.s -----------------------------------

d269 : 9de0b4           [ 5] 	sta spr_baseadrh,x
d26c : a432             [ 3] 	ldy tmp_alo						; Get x pos back in to Y reg
d26e : 98               [ 2] 	tya
d26f : 9d00b4           [ 5] 	sta spr_curX,x					; Update new->cur X
d272 : b127             [ 5] 	lda (gr_scrngeom+gr_geom_tmp),y	; Get background
d274 : 9da0b4           [ 5] 	sta spr_bgnd,x					; And save this
d277 :                       gr_spr_new_next
d277 : ca               [ 2] 	dex
d278 : 10cf             [ 3] 	bpl gr_spr_new_loop
d27a : 60               [ 6] 	rts
                             
                             
                             ; Draw all active sprites
                             ; Active sprites are always drawn - 0 = lowest pr
d27b :                       gr_spr_draw
d27b : a21f             [ 2] 	ldx #31							; Start at last sprite
d27d :                       gr_spr_draw_loop
d27d : bd20b4           [ 4] 	lda spr_newX,x					; Is sprite active?
d280 : 8532             [ 3] 	sta tmp_alo
d282 : 3006             [ 3] 	bmi gr_spr_draw_next
d284 : bd80b4           [ 4] 	lda spr_chr,x					; Get the sprite char
d287 : 208ed2           [ 6] 	jsr gr_spr_put
d28a :                       gr_spr_draw_next
d28a : ca               [ 2] 	dex
d28b : 10f0             [ 3] 	bpl gr_spr_draw_loop
d28d : 60               [ 6] 	rts
                             
                             
                             ;* Common routine to put A to screen address
                             ;* Used for erase and draw of sprites
d28e :                       gr_spr_put
d28e : 48               [ 3] 	pha
d28f : bdc0b4           [ 4] 	lda spr_baseadrl,x		; Get the screen pointer
d292 : 8527             [ 3] 	sta gr_scrngeom+gr_geom_tmp
d294 : bde0b4           [ 4] 	lda spr_baseadrh,x
d297 : 8528             [ 3] 	sta gr_scrngeom+gr_geom_tmp+1
d299 : a432             [ 3] 	ldy tmp_alo						; Y reg is in tmp_alo
d29b : 68               [ 4] 	pla								; Get back the char to
d29c : 9127             [ 5] 	sta (gr_scrngeom+gr_geom_tmp),y	; put on to scre
d29e : 60               [ 6] 	rts
                             
                             
                             ;* Update spr A with char X
d29f :                       gr_spr_char
d29f : a8               [ 2] 	tay
d2a0 : 8a               [ 2] 	txa
d2a1 : 9980b4           [ 5] 	sta spr_chr,y
d2a4 : 60               [ 6] 	rts
                             
                             ;* Locate what is at the location of sprite A, re
                             ;* C=1 if sprite it not active
d2a5 :                       gr_spr_hit
d2a5 : aa               [ 2] 	tax
d2a6 : bd00b4           [ 4] 	lda spr_curX,x
d2a9 : c980             [ 2] 	cmp #0x80						; If A>=0x80 then C=1
d2ab : bda0b4           [ 4] 	lda spr_bgnd,x
d2ae : 60               [ 6] 	rts
                             
                             ;* Update spr A with coords X,Y
d2af :                       gr_spr_pos
d2af : 8432             [ 3] 	sty tmp_alo
d2b1 : a8               [ 2] 	tay
AS65 Assembler for R6502 [1.42].                                     Page  118
---------------------------------- bank0.s -----------------------------------

d2b2 : 8a               [ 2] 	txa								; X coord still in X reg
d2b3 : 9920b4           [ 5] 	sta spr_newX,y
d2b6 : a532             [ 3] 	lda tmp_alo						; Y coord from temp
d2b8 : 9960b4           [ 5] 	sta spr_newY,y
d2bb : 60               [ 6] 	rts
                             
                             ;* Update all sprite positions from df_tmpptra, d
d2bc :                       gr_spr_multi_pos
d2bc : a03e             [ 2] 	ldy #62
d2be : a21f             [ 2] 	ldx #31
d2c0 :                       gr_spr_multi_loop
d2c0 : b1a1             [ 5] 	lda (df_tmpptra),y
d2c2 : 9d20b4           [ 5] 	sta spr_newX,x
d2c5 : b1a3             [ 5] 	lda (df_tmpptrb),y
d2c7 : 9d60b4           [ 5] 	sta spr_newY,x
d2ca : 88               [ 2] 	dey
d2cb : 88               [ 2] 	dey
d2cc : ca               [ 2] 	dex
d2cd : 10f1             [ 3] 	bpl gr_spr_multi_loop
d2cf : 60               [ 6] 	rts
                             
d2d0 :                       mod_sz_sprite_e
d2d0 :                       mod_sz_graph_e
                             
                             ; Old version of point calculator - in case I nee
                             ;	; Calculate destination address
                             ;	lda #0
                             ;	sta tmp_ahi
                             ;
                             ;	tya				; Row number in A
                             ;	; Multiply 8
                             ;	asl a
                             ;	rol tmp_ahi
                             ;	asl a
                             ;	rol tmp_ahi
                             ;	asl a
                             ;	rol tmp_ahi
                             ;	sta tmp_alo
                             ;
                             ;	; Multiply 32
                             ;	; Use partial result from m8
                             ;	lda tmp_ahi
                             ;	sta tmp_bhi
                             ;	lda tmp_alo
                             ;	; Just two more rotates to get m32
                             ;	asl a
                             ;	rol tmp_bhi
                             ;	asl a
                             ;	rol tmp_bhi
                             ;	sta tmp_blo
                             ;	; Add m8 and m32 for m40
                             ;	clc
                             ;	lda tmp_alo
                             ;	adc tmp_blo
                             ;	sta tmp_alo
                             ;	lda tmp_ahi
                             ;	adc tmp_bhi
                             ;	; Add high byte of screen address
                             ;	adc gr_scrngeom+vdp_scrn+1
                             ;	sta tmp_ahi
                             ;	; Dest offset in tmp_alo
                             ;
AS65 Assembler for R6502 [1.42].                                     Page  119
---------------------------------- bank0.s -----------------------------------

                             ;	; pixel x coord in to A
                             ;	; We dvide by 48 doing trial subtracts
                             ;	; This leaves Y with a number 0..5
                             ;	; And A has the remainder 0..47
                             ;	; Use these to look up byte column and mask
                             ;	; We don't do more than 5 trial subtracts
                             ;	; plus the table size is much smaller
                             ;	; Comprimise of space vs speed
                             ;	txa
                             ;	ldy #0				; Start at segment 0
                             ;	sec
                             ;gr_point_d48
                             ;	sbc #48
                             ;	iny
                             ;	bcs gr_point_d48				; Keep going until underflo
                             ;
                             ;	dey								; Adjust segment count
                             ;	adc #48							; Get remainder in A
                             ;	tax								; Put remainder in to X (0..47)
                             ;	lda gr_col_seg,y				; Get the start column of s
                             ;	clc
                             ;	adc gr_col_offset,x				; Add segment offset usi
                             ;	tay								; We have the byte column in Y
                             ;	sty tmp_bhi						; Save in tmp, also still in Y
                             ;	stx tmp_blo						; Save remainder 0..47
                             ;	rts
                             
                             ;gr_point_mask
                             ;	db 0x20,0x10,0x08,0x04,0x02,0x01
                             ;	db 0x20,0x10,0x08,0x04,0x02,0x01
                             ;	db 0x20,0x10,0x08,0x04,0x02,0x01
                             ;	db 0x20,0x10,0x08,0x04,0x02,0x01
                             ;	db 0x20,0x10,0x08,0x04,0x02,0x01
                             ;	db 0x20,0x10,0x08,0x04,0x02,0x01
                             ;	db 0x20,0x10,0x08,0x04,0x02,0x01
                             ;	db 0x20,0x10,0x08,0x04,0x02,0x01
                             ;gr_col_offset
                             ;	db 0,0,0,0,0,0
                             ;	db 1,1,1,1,1,1
                             ;	db 2,2,2,2,2,2
                             ;	db 3,3,3,3,3,3
                             ;	db 4,4,4,4,4,4
                             ;	db 5,5,5,5,5,5
                             ;	db 6,6,6,6,6,6
                             ;	db 7,7,7,7,7,7
                             ;gr_col_seg
                             ;	db 0,8,16,24,32
                             
                             	include "monitor/cmd.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  CMD.S
                             ;*	A really simple monitor that needs to be impro
                             ;*	optimised.  Only has these commands;
                             ;*		dxxxx			Dump memory location xxxx
                             ;*						Press enter for more else stop
AS65 Assembler for R6502 [1.42].                                     Page  120
---------------------------------- bank0.s -----------------------------------

                             ;*		sxxxx [yy]		Set memory location xxxx with hex
                             ;*						bytes, respond with next location
                             ;*		q				Quit
                             ;*	Now you see why this needs optimising!
                             ;*
                             ;************************************************
                             
0094 =                       cmd_lo					= df_currdat
0095 =                       cmd_hi					= (df_currdat+1)
                             
                             	; ROM code
                             	code  
                             
d2d0 :                       _mod_sz_cmd_s
                             
d2d0 :                       command_line
                             
d2d0 :                       cmd_ready
                             	_println_low msg_ready
                             
                             
d2d7 : 38               [ 2] 	sec							; Set carry flag = echo characters
d2d8 : 2060c4           [ 6] 	jsr io_read_line			; Get a command line
d2db : a000             [ 2] 	ldy #0
d2dd : b139             [ 5] 	lda (buf_lo),y
d2df : c971             [ 2] 	cmp #'q'
d2e1 : d001             [ 3] 	bne cmd_check_cmd
d2e3 : 60               [ 6] 	rts
d2e4 :                       cmd_check_cmd
d2e4 : 20f6d2           [ 6] 	jsr cmd_parse				; Find command and execute
d2e7 : b003             [ 3] 	bcs cmd_error				; Carry set = error condition
d2e9 : 4cd0d2           [ 3] 	jmp cmd_ready
                             
d2ec :                       cmd_error
                             	_println_low msg_errmsg
                             
d2f3 : 4cd0d2           [ 3] 	jmp cmd_ready
                             
                             
                             ;****************************************
                             ;* cmd_parse
                             ;* Parse the command line in the io buffer
                             ;* Regs affected : 
                             ;****************************************
d2f6 :                       cmd_parse
d2f6 : c8               [ 2] 	iny						; Ready for next char
                             	
d2f7 :                       cmd_check_d
d2f7 : c964             [ 2] 	cmp #'d'				; Check for d
d2f9 : d003             [ 3] 	bne cmd_check_s
d2fb : 4c31d3           [ 3] 	jmp cmd_dumpmem
d2fe :                       cmd_check_s
d2fe : c973             [ 2] 	cmp #'s'				; Check for s
d300 : d0ea             [ 4] 	bne cmd_error
d302 : 4c0bd3           [ 3] 	jmp cmd_setmem
                             
d305 :                       cmd_not_found
d305 : a901             [ 2] 	lda #CMD_ERR_NOTFOUND
d307 : 855d             [ 3] 	sta errno
d309 : 38               [ 2] 	sec
d30a : 60               [ 6] 	rts
                             	
AS65 Assembler for R6502 [1.42].                                     Page  121
---------------------------------- bank0.s -----------------------------------

                             ;****************************************
                             ;* cmd_setmem
                             ;* Set the memory at address AAAA to byte string
                             ;* Input : buflo, bufhi
                             ;* Output : y = start of first parm byte
                             ;*          x = index to routine pointer
                             ;* Regs affected : A
                             ;****************************************
d30b :                       cmd_setmem
d30b : 20c8d3           [ 6] 	jsr cmd_parse_word
d30e : b01f             [ 3] 	bcs cmd_setmem_err
d310 :                       cmd_setmem_byte
d310 : 20acd3           [ 6] 	jsr cmd_parse_byte
d313 : b01a             [ 3] 	bcs cmd_setmem_err
d315 : 20a3d3           [ 6] 	jsr cmd_poke				; Poke A in to cmd_lo, hi
d318 : 2093d3           [ 6] 	jsr cmd_incmem
d31b : 20dad3           [ 6] 	jsr cmd_parse_next_parm		; Try and find another 
d31e : 90f0             [ 3] 	bcc cmd_setmem_byte			; Process if found, else f
d320 : a595             [ 3] 	lda cmd_hi
d322 : 2074c1           [ 6] 	jsr utilPrintA
d325 : a594             [ 3] 	lda cmd_lo
d327 : 2074c1           [ 6] 	jsr utilPrintA
d32a : 206cc1           [ 6] 	jsr utilPrintCRLF
d32d : 18               [ 2] 	clc
d32e : 60               [ 6] 	rts
d32f :                       cmd_setmem_err
d32f : 38               [ 2] 	sec
d330 : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* cmd_dumpmem
                             ;* Dump memory at address AAAA
                             ;* Input : buflo, bufhi
                             ;* Output : y = start of first parm byte
                             ;* Regs affected : A
                             ;****************************************
d331 :                       cmd_dumpmem
d331 : 20c8d3           [ 6] 	jsr cmd_parse_word			; Get address to dump
d334 : 9001             [ 3] 	bcc cmd_dumpmem_block
d336 : 60               [ 6] 	rts							; C is set
d337 :                       cmd_dumpmem_block
d337 : a595             [ 3] 	lda cmd_hi					; Show the address
d339 : 2074c1           [ 6] 	jsr utilPrintA
d33c : a594             [ 3] 	lda cmd_lo
d33e : 2074c1           [ 6] 	jsr utilPrintA
d341 : a920             [ 2] 	lda #' '
d343 : 204bc4           [ 6] 	jsr io_put_ch
                             	
d346 : a008             [ 2] 	ldy #8						; 8 Bytes per line
d348 :                       cmd_dumpmem_byte
d348 : 209ad3           [ 6] 	jsr cmd_peek
d34b : 2074c1           [ 6] 	jsr utilPrintA
d34e : 2064c1           [ 6] 	jsr utilPrintSPC
d351 : 2093d3           [ 6] 	jsr cmd_incmem
d354 : 88               [ 2] 	dey
d355 : d0f1             [ 3] 	bne cmd_dumpmem_byte
d357 :                       cmd_dumpmemASCII
d357 : 38               [ 2] 	sec							; Move pointer back to start
d358 : a594             [ 3] 	lda cmd_lo
d35a : e908             [ 2] 	sbc #8
d35c : 8594             [ 3] 	sta cmd_lo
AS65 Assembler for R6502 [1.42].                                     Page  122
---------------------------------- bank0.s -----------------------------------

d35e : a595             [ 3] 	lda cmd_hi
d360 : e900             [ 2] 	sbc #0
d362 : 8595             [ 3] 	sta cmd_hi
                             	
d364 : 2064c1           [ 6] 	jsr utilPrintSPC
d367 : a008             [ 2] 	ldy #8						; 8 Bytes per line
d369 :                       cmd_dumpmem_ascii
d369 : a22e             [ 2] 	ldx #'.'					; Non-printable char
d36b : 209ad3           [ 6] 	jsr cmd_peek
d36e : c920             [ 2] 	cmp #' '					; <32 is unprintable
d370 : b001             [ 3] 	bcs cmd_dump_skip_ctrl
d372 : 8a               [ 2] 	txa							; Replace with dot
d373 :                       cmd_dump_skip_ctrl
d373 : c97f             [ 2] 	cmp #UTF_DEL				; >= DEL is unprintable
d375 : 9001             [ 3] 	bcc cmd_dump_skip_del
d377 : 8a               [ 2] 	txa							; Replace with dot
d378 :                       cmd_dump_skip_del	
d378 : 204bc4           [ 6] 	jsr io_put_ch
d37b : 2093d3           [ 6] 	jsr cmd_incmem
d37e : 88               [ 2] 	dey		
d37f : d0e8             [ 3] 	bne cmd_dumpmem_ascii		; Show 8 bytes
d381 : 38               [ 2] 	sec
d382 : 2048c4           [ 6] 	jsr io_get_ch				; Wait for key press
d385 : c90d             [ 2] 	cmp #UTF_CR		
d387 : d003             [ 3] 	bne cmd_dumpmemFin			; Any key but enter finishe
                             ;	jsr io_put_ch				; Do new line
d389 : 4c37d3           [ 3] 	jmp cmd_dumpmem_block
d38c :                       cmd_dumpmemFin
d38c : a90d             [ 2] 	lda #UTF_CR
d38e : 204bc4           [ 6] 	jsr io_put_ch
d391 : 18               [ 2] 	clc
d392 : 60               [ 6] 	rts
                             	
                             	
                             ;****************************************
                             ;* cmd_incmem
                             ;* Increment pointer
                             ;* Input : cmd_lo, cmd_hi
                             ;* Output : cmd_lo, cmd_hi
                             ;* Regs affected : 
                             ;****************************************
d393 :                       cmd_incmem
                             	_incZPWord cmd_lo
                             
d399 : 60               [ 6] 	rts
                             	
                             ;****************************************
                             ;* cmd_peek
                             ;* Read byte
                             ;* Input : cmd_lo, cmd_hi
                             ;* Output : A
                             ;* Regs affected : 
                             ;****************************************
d39a :                       cmd_peek
d39a : 8638             [ 3] 	stx tmp_d
d39c : a200             [ 2] 	ldx #0
d39e : a194             [ 6] 	lda (cmd_lo,x)
d3a0 : a638             [ 3] 	ldx tmp_d
d3a2 : 60               [ 6] 	rts
                             	
                             ;****************************************
                             ;* cmd_poke
AS65 Assembler for R6502 [1.42].                                     Page  123
---------------------------------- bank0.s -----------------------------------

                             ;* Read byte
                             ;* Input : cmd_lo, cmd_hi, A
                             ;* Output : A
                             ;* Regs affected : 
                             ;****************************************
d3a3 :                       cmd_poke
d3a3 : 8638             [ 3] 	stx tmp_d
d3a5 : a200             [ 2] 	ldx #0
d3a7 : 8194             [ 6] 	sta (cmd_lo,x)
d3a9 : a638             [ 3] 	ldx tmp_d
d3ab : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* cmd_parse_byte
                             ;* Find 2 char hex byte
                             ;* Input : buflo, bufhi, y offset
                             ;* Output : y = char after hex byte, A = value
                             ;* Regs affected : A,Y
                             ;****************************************
d3ac :                       cmd_parse_byte
d3ac : 20dad3           [ 6] 	jsr cmd_parse_next_parm	; Find the next paramete
d3af : b015             [ 3] 	bcs cmd_parse_byte_err
d3b1 : b139             [ 5] 	lda (buf_lo),y			; Get hi nibble of high byte
d3b3 : f011             [ 3] 	beq cmd_parse_byte_err	; If no char then error w
d3b5 : 48               [ 3] 	pha						; Save on stack
d3b6 : c8               [ 2] 	iny
d3b7 : b139             [ 5] 	lda (buf_lo),y			; Get lo nibble of high byte
d3b9 : f00a             [ 3] 	beq cmd_parse_byte_errp	; If no char then error 
d3bb : aa               [ 2] 	tax						; Lo nibble goes to X
d3bc : 68               [ 4] 	pla						; Restore hi nibble
d3bd : 20a6c1           [ 6] 	jsr str_x_to_a			; Convert from hex to A
d3c0 : b004             [ 3] 	bcs cmd_parse_byte_err	; If error then stop
d3c2 : c8               [ 2] 	iny						; Point to next char
d3c3 : 18               [ 2] 	clc
d3c4 : 60               [ 6] 	rts						; A contains the byte
d3c5 :                       cmd_parse_byte_errp
d3c5 : 68               [ 4] 	pla
d3c6 :                       cmd_parse_byte_err
d3c6 : aa               [ 2] 	tax
d3c7 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* cmd_parse_word
                             ;* Find 4 char hex word
                             ;* Input : buflo, bufhi, y offset
                             ;* Output : y = char after hex byte, A = hi, X = 
                             ;* Regs affected : A,X,Y
                             ;****************************************
d3c8 :                       cmd_parse_word
d3c8 : 20acd3           [ 6] 	jsr cmd_parse_byte			; Get hi byte of word
d3cb : b00b             [ 3] 	bcs cmd_word_err
d3cd : 8595             [ 3] 	sta cmd_hi					; Save hi byte of word
d3cf : 20acd3           [ 6] 	jsr cmd_parse_byte			; Get lo byte of word
d3d2 : b004             [ 3] 	bcs cmd_word_err
d3d4 : 8594             [ 3] 	sta cmd_lo
d3d6 : 18               [ 2] 	clc
d3d7 : 60               [ 6] 	rts
d3d8 :                       cmd_word_err
d3d8 : 38               [ 2] 	sec
d3d9 : 60               [ 6] 	rts
                             
                             ;****************************************
AS65 Assembler for R6502 [1.42].                                     Page  124
---------------------------------- bank0.s -----------------------------------

                             ;* cmd_parse_next_parm
                             ;* Find next non-white space
                             ;* Input : buflo, bufhi, y offset
                             ;* Output : y = start of first parm byte
                             ;* Regs affected : A
                             ;****************************************
d3da :                       cmd_parse_next_parm
d3da : 88               [ 2] 	dey
d3db :                       cmd_find_parm
d3db : c8               [ 2] 	iny
d3dc : b139             [ 5] 	lda (buf_lo),y
d3de : c900             [ 2] 	cmp #0
d3e0 : f005             [ 3] 	beq cmd_next_parm_err	; If z then no parms, fin 
d3e2 : c920             [ 2] 	cmp #' '				; Ignore space
d3e4 : f0f5             [ 3] 	beq cmd_find_parm
d3e6 : 18               [ 2] 	clc						; else ok, C is cleared
d3e7 :                       cmd_next_parm_err
d3e7 : 60               [ 6] 	rts
                             
                             	
d3e8 : 3e00                  msg_ready				db ">\x0"
d3ea : 3f0d00                msg_errmsg				db "?\xd\x0"
d3ed :                       _mod_sz_cmd_e
                             
                             	include "sound/sound.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  SOUND.S
                             ;*  Sound driver module - routines to access the 
                             ;*  This sound chip was found in a number of popu
                             ;*  in the early to mid 80s, including my first c
                             ;*  the Oric-1, as well as the MSX range.
                             ;*
                             ;************************************************
                             
                             
                             	; ROM code
                             	code
                             
d3ed :                       mod_sz_sound_s
                             
                             
                             ;****************************************
                             ;* snd_get_note
                             ;* Get a note from the music scale table
                             ;* Input : Octave in X, note in Y
                             ;* Output : A,X = Value hi,lo
                             ;* Regs affected : X
                             ;****************************************
d3ed :                       snd_get_note
d3ed : 98               [ 2] 	tya
d3ee : 0a               [ 2] 	asl a
d3ef : a8               [ 2] 	tay
                             	; Get note for octave 0
d3f0 : b920d4           [ 4] 	lda snd_music_tab,y
d3f3 : 8532             [ 3] 	sta tmp_alo
AS65 Assembler for R6502 [1.42].                                     Page  125
---------------------------------- bank0.s -----------------------------------

d3f5 : b921d4           [ 4] 	lda snd_music_tab+1,y
                             	
d3f8 :                       snd_get_note_oct
d3f8 : ca               [ 2] 	dex
d3f9 : 3006             [ 4] 	bmi snd_note_done
                             	; Divide freq by 2 each octave
d3fb : 4a               [ 2] 	lsr a
d3fc : 6632             [ 5] 	ror tmp_alo
d3fe : 4cf8d3           [ 3] 	jmp snd_get_note_oct
d401 :                       snd_note_done
d401 : a632             [ 3] 	ldx tmp_alo
d403 : 60               [ 6] 	rts
                             
                             	
                             ;****************************************
                             ;* init_snd
                             ;* Initialise sound - after cia 1 has been initia
                             ;* Input : None
                             ;* Output : None
                             ;* Regs affected : All
                             ;****************************************
d404 :                       init_snd
d404 : a20f             [ 2] 	ldx #15
d406 :                       init_snd_regs
d406 : bd10d4           [ 4] 	lda snd_init_tab,x
d409 : 2000c0           [ 6] 	jsr snd_set				; Set X to A
d40c : ca               [ 2] 	dex
d40d : 10f7             [ 3] 	bpl init_snd_regs		; 16 regs
                             	
d40f : 60               [ 6] 	rts						; return from sub
                             
                             	; Register array initialisation values
                             	; Assuming 1.34Mhz input clock
d410 :                       snd_init_tab
d410 : 40                    	db 0x40				; R0 = Channel A Tone Low
d411 : 00                    	db 0x00				; R1 = Channel A Tone High
d412 : 00                    	db 0x00				; R2 = Channel B Tone Low
d413 : 01                    	db 0x01				; R3 = Channel B Tone High
d414 : 00                    	db 0x00				; R4 = Channel C Tone Low
d415 : 02                    	db 0x02				; R5 = Channel C Tone High
d416 : 00                    	db 0x00				; R6 = Noise period
d417 : 7e                    	db 0b01111110		; R7 = Control : IOB input, IOA o
d418 : 1f                    	db 0x1f				; R8 = Channel A Vol
d419 : 1f                    	db 0x1f				; R9 = Channel B Vol
d41a : 1f                    	db 0x1f				; R10 = Channel C Vol
d41b : 00                    	db 0x00				; R11 = Envelope Period Low
d41c : 03                    	db 0x03				; R12 = Envelope Period High
d41d : 00                    	db 0b00000000		; R13 = Envelope Shape : 0000
d41e : ff                    	db 0xff				; R14 = IO Port A - KB lines disabled
d41f : 00                    	db 0x00				; R15 = IO Port B ; Initialise to 0 (
                             
d420 :                       snd_music_tab
d420 : 7707                  	dw 1911				; C		0
d422 : 0c07                  	dw 1804				; C#	1
d424 : a706                  	dw 1703				; D		2
d426 : 4706                  	dw 1607				; D#	3
d428 : ed05                  	dw 1517				; E		4
d42a : 9805                  	dw 1432				; F		5
d42c : 4705                  	dw 1351				; F#	6
d42e : fc04                  	dw 1276				; G		7
d430 : b404                  	dw 1204				; G#	8
d432 : 7004                  	dw 1136				; A		9
AS65 Assembler for R6502 [1.42].                                     Page  126
---------------------------------- bank0.s -----------------------------------

d434 : 3104                  	dw 1073				; A#	10
d436 : f403                  	dw 1012				; B		11
                             
d438 :                       mod_sz_sound_e
                             
d438 :                       mod_sz_bios_e
d438 :                       mod_sz_language_s
                             	include "utils/intmath.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  INTMATH.S
                             ;*  Core module for integer maths supported by df
                             ;*  Now supports signed integers in 2s complement
                             ;*  Uses the intmath registers: num_a, num_b, num
                             ;*  Most inputs are through num_a and num_b, with
                             ;*  num_a
                             ;*  Operations: add, sub, swap, 8 bit mult, mult,
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code
                             
                             ;****************************************
                             ;* Add : A + B result in A
                             ;****************************************
d438 :                       int_add
d438 : 18               [ 2] 	clc
d439 : a53d             [ 3] 	lda num_a
d43b : 6541             [ 3] 	adc num_b
d43d : 853d             [ 3] 	sta num_a
d43f : a53e             [ 3] 	lda num_a+1
d441 : 6542             [ 3] 	adc num_b+1
d443 : 853e             [ 3] 	sta num_a+1
d445 : 60               [ 6] 	rts
                             	
                             ;****************************************
                             ;* Sub : A - B result in A
                             ;****************************************
d446 :                       int_sub
d446 : 38               [ 2] 	sec
d447 : a53d             [ 3] 	lda num_a
d449 : e541             [ 3] 	sbc num_b
d44b : 853d             [ 3] 	sta num_a
d44d : a53e             [ 3] 	lda num_a+1
d44f : 6542             [ 3] 	adc num_b+1
d451 : 853e             [ 3] 	sta num_a+1
d453 : 60               [ 6] 	rts
                             	
                             ;****************************************
                             ;* Swp : A <-> B 
                             ;****************************************
d454 :                       int_swp
d454 : a53d             [ 3] 	lda num_a
d456 : a641             [ 3] 	ldx num_b
d458 : 8541             [ 3] 	sta num_b
AS65 Assembler for R6502 [1.42].                                     Page  127
---------------------------------- bank0.s -----------------------------------

d45a : 863d             [ 3] 	stx num_a
d45c : a53e             [ 3] 	lda num_a+1
d45e : a642             [ 3] 	ldx num_b+1
d460 : 8542             [ 3] 	sta num_b+1
d462 : 863e             [ 3] 	stx num_a+1
d464 : 60               [ 6] 	rts
                             	
                             ;****************************************
                             ;* Mult : A * B result in A
                             ;* B assumed to be an 8 bit quantity 
                             ;****************************************
d465 :                       int_fast_mult
                             	_cpyZPWord num_a,num_tmp
                             
d46d : a900             [ 2] 	lda #0
d46f : 853d             [ 3] 	sta num_a
d471 : 853e             [ 3] 	sta num_a+1
d473 : a008             [ 2] 	ldy #8
d475 :                       int_fast_mult_cycle
d475 : 4641             [ 5] 	lsr num_b
d477 : 900d             [ 3] 	bcc int_fast_mult_next
d479 : 18               [ 2] 	clc
d47a : a53d             [ 3] 	lda num_a
d47c : 6549             [ 3] 	adc num_tmp
d47e : 853d             [ 3] 	sta num_a
d480 : a53e             [ 3] 	lda num_a+1
d482 : 654a             [ 3] 	adc num_tmp+1
d484 : 853e             [ 3] 	sta num_a+1
d486 :                       int_fast_mult_next
d486 : 0649             [ 5] 	asl num_tmp
d488 : 264a             [ 5] 	rol num_tmp+1
d48a : 88               [ 2] 	dey
d48b : d0e8             [ 3] 	bne int_fast_mult_cycle
d48d : 60               [ 6] 	rts
                             	
                             ;****************************************
                             ;* Mult : A * B result in A
                             ;****************************************
d48e :                       int_mult
                             	_cpyZPWord num_a,num_tmp
                             
d496 : a900             [ 2] 	lda #0
d498 : 853d             [ 3] 	sta num_a
d49a : 853e             [ 3] 	sta num_a+1
d49c : a010             [ 2] 	ldy #16
d49e :                       int_mult_cycle
d49e : 4642             [ 5] 	lsr num_b+1
d4a0 : 6641             [ 5] 	ror num_b
d4a2 : 900d             [ 3] 	bcc int_mult_next
d4a4 : 18               [ 2] 	clc
d4a5 : a53d             [ 3] 	lda num_a
d4a7 : 6549             [ 3] 	adc num_tmp
d4a9 : 853d             [ 3] 	sta num_a
d4ab : a53e             [ 3] 	lda num_a+1
d4ad : 654a             [ 3] 	adc num_tmp+1
d4af : 853e             [ 3] 	sta num_a+1
d4b1 :                       int_mult_next
d4b1 : 0649             [ 5] 	asl num_tmp
d4b3 : 264a             [ 5] 	rol num_tmp+1
d4b5 : 88               [ 2] 	dey
d4b6 : d0e6             [ 3] 	bne int_mult_cycle
d4b8 : 60               [ 6] 	rts
AS65 Assembler for R6502 [1.42].                                     Page  128
---------------------------------- bank0.s -----------------------------------

                             
                             ;****************************************
                             ;* Div : A / B result in A, remainder X
                             ;****************************************
d4b9 :                       int_div
                             	; adjust signs
d4b9 : a900             [ 2] 	lda #0
d4bb : 8549             [ 3] 	sta num_tmp				; Assume all +ve
d4bd : a53e             [ 3] 	lda num_a+1				; Check A hi
d4bf : 100f             [ 3] 	bpl int_div_skip_negA
d4c1 : e649             [ 5] 	inc num_tmp				; Record sign flip
d4c3 : 38               [ 2] 	sec						; 2's complement A
d4c4 : a900             [ 2] 	lda #0					; by 0-A
d4c6 : e53d             [ 3] 	sbc num_a				; A is now +ve
d4c8 : 853d             [ 3] 	sta num_a
d4ca : a900             [ 2] 	lda #0
d4cc : e53e             [ 3] 	sbc num_a+1
d4ce : 853e             [ 3] 	sta num_a+1	
d4d0 :                       int_div_skip_negA
d4d0 : a542             [ 3] 	lda num_b+1				; Check B hi
d4d2 : 100f             [ 3] 	bpl int_div_skip_negB
d4d4 : e649             [ 5] 	inc num_tmp				; Record sign flip
d4d6 : 38               [ 2] 	sec						; 2's complement B
d4d7 : a900             [ 2] 	lda #0					; by 0-B
d4d9 : e541             [ 3] 	sbc num_b				; B is now +ve
d4db : 8541             [ 3] 	sta num_b
d4dd : a900             [ 2] 	lda #0
d4df : e542             [ 3] 	sbc num_b+1
d4e1 : 8542             [ 3] 	sta num_b+1
d4e3 :                       int_div_skip_negB			; num_tmp bit 0=1 for result 
                             	; x is the remainder
d4e3 : a900             [ 2] 	lda #0
d4e5 : 8545             [ 3] 	sta num_x
d4e7 : 8546             [ 3] 	sta num_x+1
                             	; 16 bit division
d4e9 : a010             [ 2] 	ldy #16
d4eb :                       int_div_cycle
                             	; shift a left 1 bit
d4eb : 063d             [ 5] 	asl num_a
d4ed : 263e             [ 5] 	rol num_a+1
                             	; shift in to remainder
d4ef : 2645             [ 5] 	rol num_x
d4f1 : 2646             [ 5] 	rol num_x+1
                             	; try and subtract b from remainder
d4f3 : 38               [ 2] 	sec
d4f4 : a545             [ 3] 	lda num_x
d4f6 : e541             [ 3] 	sbc num_b
d4f8 : aa               [ 2] 	tax
d4f9 : a546             [ 3] 	lda num_x+1
d4fb : e542             [ 3] 	sbc num_b+1
d4fd : 9006             [ 4] 	bcc int_div_skip
                             	; so b did fit in to remainder, save it
d4ff : 8645             [ 3] 	stx num_x
d501 : 8546             [ 3] 	sta num_x+1
d503 : e63d             [ 5] 	inc num_a
d505 :                       int_div_skip
                             	; carry on for 16 bits
d505 : 88               [ 2] 	dey
d506 : d0e3             [ 4] 	bne int_div_cycle
                             	; result in a, remainder in x
                             	; check num_tmp bit 0
d508 : a549             [ 3] 	lda num_tmp
AS65 Assembler for R6502 [1.42].                                     Page  129
---------------------------------- bank0.s -----------------------------------

d50a : 2901             [ 2] 	and #1
d50c : f00d             [ 3] 	beq int_div_noflip
d50e : 38               [ 2] 	sec						; 2's complement A
d50f : a900             [ 2] 	lda #0					; by 0-A
d511 : e53d             [ 3] 	sbc num_a				; A is now +ve
d513 : 853d             [ 3] 	sta num_a
d515 : a900             [ 2] 	lda #0
d517 : e53e             [ 3] 	sbc num_a+1
d519 : 853e             [ 3] 	sta num_a+1	
d51b :                       int_div_noflip
d51b : 60               [ 6] 	rts
                             	
                             
                             	include "dflat/dflat.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  DFLAT.S
                             ;*  This is the main controller code file for dfl
                             ;*  This file includes all the required dflat sou
                             ;*  needed:
                             ;*  - error.s is the error handling module
                             ;*  - var.s is the variable handling module
                             ;*  - tokenise.s is the tokenisation module
                             ;*  - progedit.s is the program editing module
                             ;*  - runtime.s is the runtime module
                             ;*  - stack.s is the stack handling module
                             ;*  The above modules include further source file
                             ;*  needed.
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code
                             
d51c :                       mod_sz_dflat_s
                             
                             ;	include "dflat/error.s"  ** included in the mai
                             	include "dflat/var.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  VAR.S
                             ;*  This module handles all the variable manageme
                             ;*  When a new variable is detected during tokeni
                             ;*  is added to the variable tables.  Any subsequ
                             ;*  that variable is tokenised as an index in to 
                             ;*  table.  There are two variable tables:
                             ;*  Variable name table (VNT) keeps track of vari
                             ;*  Variable value table (VVT) maintains variable
                             ;*  including type, dimension (if array) and of c
                             ;*  actual values.  For an array, the value is a 
AS65 Assembler for R6502 [1.42].                                     Page  130
---------------------------------- bank0.s -----------------------------------

                             ;*  memory grabbed using the 'malloc' function (s
                             ;*  This approach to variable managemet is direct
                             ;*  Atari 8 bit.  The disadvantage is that during
                             ;*  session you may end up having a much larger v
                             ;*  table than you need.  Why?  Well because say 
                             ;*  %a as a new variable, but then later change i
                             ;*  In this case %a remains in the variable table
                             ;*  only ever adds to the table!  However it is e
                             ;*  solved - when you save and then reload from n
                             ;*  program, the variable table is built up as th
                             ;*  is loaded.
                             ;*  The VNT grows DOWN from the top of free memor
                             ;*  the VVT growing UP from just below the VNT.
                             ;*	This means that the VVT for a variable will al
                             ;*	found in a fixed place in the VVT table and me
                             ;*	For the VNT (names) it grows from vvstart at l
                             ;*
                             ;************************************************
                             
                             
                             	; ROM code
                             	code  
                             
d51c :                       mod_sz_var_s
                             
                             
                             ;****************************************
                             ;* Find a variable
                             ;* CC if found, A has index
                             ;****************************************
d51c :                       df_var_find
                             	; start at the beginning of the vnt table
                             	; vars are stored in reverse order
                             	_cpyZPWord df_vntstrt,df_tmpptrb
                             
                             	; start at end of VVT
                             	_cpyZPWord df_vvtend,df_tmpptra
                             
d52c :                       df_var_match_vnt
                             	; If reached top of VVT then not found
d52c : a5a1             [ 3] 	lda df_tmpptra
d52e : c56d             [ 3] 	cmp df_vvtstrt
d530 : d006             [ 3] 	bne df_var_match_vnt_do
d532 : a5a2             [ 3] 	lda df_tmpptra+1
d534 : c56e             [ 3] 	cmp df_vvtstrt+1
d536 : f04c             [ 3] 	beq df_var_find_no_vnt
d538 :                       df_var_match_vnt_do
                             	; match each char in buffer with vnt
d538 : a47c             [ 3] 	ldy df_linoff
d53a : a200             [ 2] 	ldx #0
d53c :                       df_var_match_vnt_sym
d53c : b90004           [ 4] 	lda df_linbuff,y
d53f : c1a3             [ 6] 	cmp (df_tmpptrb,x)
d541 : d01f             [ 3] 	bne df_var_vnt_sym_nomatch
                             	; if single char match then increment
                             	; source and search
d543 : c8               [ 2] 	iny
                             	_incZPWord df_tmpptrb
                             
                             	; if more chars in vnt entry then continue
d54a : a1a3             [ 6] 	lda (df_tmpptrb,x)
d54c : d0ee             [ 3] 	bne df_var_match_vnt_sym
AS65 Assembler for R6502 [1.42].                                     Page  131
---------------------------------- bank0.s -----------------------------------

                             	; if no more chars in vnt entry but
                             	; but chars in buffer then try next vnt
d54e : b90004           [ 4] 	lda df_linbuff,y
                             	; check for valid alpha-numeric
d551 : 2023d7           [ 6] 	jsr df_tk_isalphanum
d554 : 9002             [ 3] 	bcc df_var_check_type
                             	; if there is a valid alpha-num then no match
d556 : b00a             [ 3] 	bcs df_var_vnt_sym_nomatch
d558 :                       df_var_check_type
                             	; if not alpha-num then check for type
                             	; string or int postfix didn't match with VNT
d558 : c925             [ 2] 	cmp #'%'
d55a : f006             [ 3] 	beq df_var_vnt_sym_nomatch
d55c : c924             [ 2] 	cmp #'$'
d55e : f002             [ 3] 	beq df_var_vnt_sym_nomatch
                             	; ok, all good got a match
d560 : d028             [ 3] 	bne df_var_find_true
d562 :                       df_var_vnt_sym_nomatch
                             	; find the zero terminator
d562 : a1a3             [ 6] 	lda (df_tmpptrb,x)
d564 : f009             [ 3] 	beq	df_var_vnt_entry_end
                             	_incZPWord df_tmpptrb
                             
d56c : 4c62d5           [ 3] 	jmp df_var_vnt_sym_nomatch
d56f :                       df_var_vnt_entry_end
                             	; skip over zero terminator
                             	_incZPWord df_tmpptrb
                             
                             	; update vvt address pointer
d575 : 18               [ 2] 	clc
d576 : a5a1             [ 3] 	lda df_tmpptra
d578 : 6908             [ 2] 	adc #8
d57a : 85a1             [ 3] 	sta df_tmpptra
d57c : a5a2             [ 3] 	lda df_tmpptra+1
d57e : 6900             [ 2] 	adc #0
d580 : 85a2             [ 3] 	sta df_tmpptra+1
d582 : d0a8             [ 3] 	bne df_var_match_vnt		; Always - high byte is no
                             
                             	; if at end of vnt then no matches found
d584 :                       df_var_find_no_vnt
d584 : a900             [ 2] 	lda #0
d586 : a200             [ 2] 	ldx #0
d588 : 38               [ 2] 	sec
d589 : 60               [ 6] 	rts
                             
d58a :                       df_var_find_true
                             	; Get slot address into x,a
d58a : a6a1             [ 3] 	ldx df_tmpptra
d58c : a5a2             [ 3] 	lda df_tmpptra+1
                             	
                             	; Consume characters found in source
d58e : 847c             [ 3] 	sty df_linoff
d590 : 18               [ 2] 	clc
d591 : 60               [ 6] 	rts
                             
                             	
                             ;****************************************
                             ;* Insert a variable name in to vnt
                             ;* X = number of bytes to make room
                             ;* Space allocated is;
                             ;*	8 bytes for the new VVT entry
                             ;*  X bytes for the new VNT entry
AS65 Assembler for R6502 [1.42].                                     Page  132
---------------------------------- bank0.s -----------------------------------

                             ;* df_vntstrt is new var name entry
                             ;* df_vvtend is new vvt entry
                             ;****************************************
d592 :                       df_var_insert_space
                             	; *** REMEMBER TO DO A SPACE CHECK EVENTUALLY! *
                             
                             	; adjust down the VNT start by VVT size (for ext
                             	; put it in tmpptrb
d592 : 38               [ 2] 	sec
d593 : a569             [ 3] 	lda df_vntstrt
d595 : e908             [ 2] 	sbc #DFVVT_SZ
d597 : 8569             [ 3] 	sta df_vntstrt
d599 : a56a             [ 3] 	lda df_vntstrt+1
d59b : e900             [ 2] 	sbc #0
d59d : 856a             [ 3] 	sta df_vntstrt+1
                             	
                             	; adjust VNT end by VVT size (for extra VVT entr
                             	; and put it in tmpptrc
d59f : 38               [ 2] 	sec
d5a0 : a56b             [ 3] 	lda df_vntend
d5a2 : e908             [ 2] 	sbc #DFVVT_SZ
d5a4 : 856b             [ 3] 	sta df_vntend
d5a6 : a56c             [ 3] 	lda df_vntend+1
d5a8 : e900             [ 2] 	sbc #0
d5aa : 856c             [ 3] 	sta df_vntend+1
                             
                             	; Set copy point to new start of VNT
                             	_cpyZPWord df_vntstrt,df_tmpptra
                             
                             
                             	; Now move all bytes from old VNT (higher up) to
d5b4 : 18               [ 2] 	clc
d5b5 :                       df_var_move_byte
                             	; When pointer = vntend then done
d5b5 : a5a1             [ 3] 	lda df_tmpptra
d5b7 : c56b             [ 3] 	cmp df_vntend
d5b9 : d006             [ 3] 	bne df_var_move_byte_do
d5bb : a5a2             [ 3] 	lda df_tmpptra+1
d5bd : c56c             [ 3] 	cmp df_vntend+1
d5bf : f011             [ 3] 	beq df_var_move_byte_fin
d5c1 :                       df_var_move_byte_do
                             	; First the source byte VVT size higher in memor
d5c1 : a008             [ 2] 	ldy #DFVVT_SZ
d5c3 : b1a1             [ 5] 	lda (df_tmpptra),y
                             	; And copy to new position lower in memory
d5c5 : a000             [ 2] 	ldy #0
d5c7 : 91a1             [ 5] 	sta (df_tmpptra),y
                             	; Increment memor pointer
                             	_incZPWord df_tmpptra
                             
d5cf : 4cb5d5           [ 3] 	jmp df_var_move_byte		; Always as C is not touch
d5d2 :                       df_var_move_byte_fin
                             	
                             	; Now subtract X bytes from VNT start to accommo
d5d2 : 8638             [ 3] 	stx tmp_d
d5d4 : 38               [ 2] 	sec
d5d5 : a569             [ 3] 	lda df_vntstrt
d5d7 : e538             [ 3] 	sbc tmp_d
d5d9 : 8569             [ 3] 	sta df_vntstrt
d5db : a56a             [ 3] 	lda df_vntstrt+1
d5dd : e900             [ 2] 	sbc #0
d5df : 856a             [ 3] 	sta df_vntstrt+1
AS65 Assembler for R6502 [1.42].                                     Page  133
---------------------------------- bank0.s -----------------------------------

                             
                             	; VVT end is the same as VNT end
                             	_cpyZPWord df_vntend,df_vvtend
                             
                             
                             	; Copy done increment variable count
d5e9 : e671             [ 5] 	inc df_varcnt
d5eb : 18               [ 2] 	clc
d5ec : 60               [ 6] 	rts
                             	
                             	
                             ;****************************************
                             ;* Analyse variable name
                             ;* Return type in A
                             ;* NOT C = It is a variable
                             ;* C = It is not a variable
                             ;* X = Length including pre-fixes
                             ;* Y = Offset to next char after var name
                             ;****************************************
d5ed :                       df_var_analyse
                             	; Default type is INT
d5ed : a901             [ 2] 	lda #DFVVT_INT
d5ef : 85a1             [ 3] 	sta df_tmpptra
                             	
                             	; start at the current buffer position
d5f1 : a47c             [ 3] 	ldy df_linoff
                             	
                             	; check for PROC prefix
d5f3 : b90004           [ 4] 	lda df_linbuff,y
d5f6 : c95f             [ 2] 	cmp #'_'
                             	; if it is not proc then get the name
d5f8 : d005             [ 3] 	bne df_var_not_proc
                             	; else set type to PROC
d5fa : a940             [ 2] 	lda #DFVVT_PROC
d5fc : 85a1             [ 3] 	sta df_tmpptra
                             	; skip over prefix
d5fe : c8               [ 2] 	iny
d5ff :                       df_var_not_proc
                             	; found the actual number of alpha nums
d5ff : a2ff             [ 2] 	ldx #0xff
                             	; go back on pos on index as loop always does in
d601 : 88               [ 2] 	dey
d602 :                       df_var_type_countlen
                             	; count alpha nums
d602 : c8               [ 2] 	iny
d603 : e8               [ 2] 	inx
d604 : b90004           [ 4] 	lda df_linbuff,y
                             	; first char has to be alpha, rest can be alpha-
d607 : e000             [ 2] 	cpx #0
d609 : d007             [ 3] 	bne df_var_type_countlen_alphanum
d60b : 2016d7           [ 6] 	jsr df_tk_isalpha
d60e : b0f2             [ 3] 	bcs df_var_type_countlen
d610 : 9005             [ 3] 	bcc df_var_type_countlen_done
d612 :                       df_var_type_countlen_alphanum
d612 : 2023d7           [ 6] 	jsr df_tk_isalphanum
d615 : b0eb             [ 3] 	bcs df_var_type_countlen
d617 :                       df_var_type_countlen_done
d617 : e000             [ 2] 	cpx #0
d619 : d00a             [ 3] 	bne df_var_analyse_chk_post
                             	; if zero alphanums error but not fatal
d61b :                       df_var_analyse_err
                             	; If already prefix of PROC then fatal error
AS65 Assembler for R6502 [1.42].                                     Page  134
---------------------------------- bank0.s -----------------------------------

d61b : a5a1             [ 3] 	lda df_tmpptra
d61d : c940             [ 2] 	cmp #DFVVT_PROC
d61f : f002             [ 3] 	beq df_var_analyse_fatal_err
d621 : 38               [ 2] 	sec
d622 : 60               [ 6] 	rts
d623 :                       df_var_analyse_fatal_err
                             	SWBRK DFERR_SYNTAX
                             
d625 :                       df_var_analyse_chk_post
                             	; first see if the char is % or $
                             	; but cannot already have PROC prefix
d625 : c925             [ 2] 	cmp #'%'
d627 : d00d             [ 3] 	bne df_var_analyse_chk_dollar
d629 : a6a1             [ 3] 	ldx df_tmpptra
d62b : e040             [ 2] 	cpx #DFVVT_PROC
d62d : f0f4             [ 3] 	beq df_var_analyse_fatal_err
                             	; Set to INT type although it is the default alr
d62f : a901             [ 2] 	lda #DFVVT_INT
d631 : 85a1             [ 3] 	sta df_tmpptra
                             	; advance the buffer index
d633 : c8               [ 2] 	iny
d634 : d00f             [ 3] 	bne df_var_analyse_chk_arry
d636 :                       df_var_analyse_chk_dollar
                             	; now see if the char is $
                             	; but cannot already have PROC prefix
d636 : c924             [ 2] 	cmp #'$'
d638 : d00b             [ 3] 	bne df_var_analyse_chk_arry
d63a : a6a1             [ 3] 	ldx df_tmpptra
d63c : e040             [ 2] 	cpx #DFVVT_PROC
d63e : f0e3             [ 3] 	beq df_var_analyse_fatal_err
                             	; Set to STRING type
d640 : a904             [ 2] 	lda #DFVVT_STR
d642 : 85a1             [ 3] 	sta df_tmpptra
                             	; advance the buffer index
d644 : c8               [ 2] 	iny
d645 :                       df_var_analyse_chk_arry
                             	; Check for array type vs PROC
d645 : b90004           [ 4] 	lda df_linbuff,y
d648 : c95b             [ 2] 	cmp #'['
d64a : d00a             [ 3] 	bne df_var_not_arry
                             	; array and proc type not compatible
d64c : a5a1             [ 3] 	lda df_tmpptra
d64e : c940             [ 2] 	cmp #DFVVT_PROC
d650 : f0d1             [ 3] 	beq df_var_analyse_fatal_err
d652 : 0980             [ 2] 	ora #DFVVT_ARRY
d654 : 85a1             [ 3] 	sta df_tmpptra
d656 :                       df_var_not_arry
                             	; Ok got everything
                             	; calculate length from y
                             	; y is next char after var name
d656 : 98               [ 2] 	tya
d657 : 38               [ 2] 	sec
d658 : e57c             [ 3] 	sbc df_linoff			; where we started
                             	; put len in X
d65a : aa               [ 2] 	tax
                             	; put type in A
d65b : a5a1             [ 3] 	lda df_tmpptra
d65d : 18               [ 2] 	clc
d65e : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Find or create a variable
AS65 Assembler for R6502 [1.42].                                     Page  135
---------------------------------- bank0.s -----------------------------------

                             ;* If found then type needs to match mask
                             ;* Not a fatal error because could be part
                             ;* of a trial of different parsing options
                             ;****************************************
d65f :                       df_var_findcreate
                             	; save mask
d65f : 48               [ 3] 	pha
d660 : 201cd5           [ 6] 	jsr df_var_find
d663 : b013             [ 3] 	bcs df_var_findcreate_create
                             	; restore mask to check for 0 then push
d665 : 68               [ 4] 	pla
d666 : 48               [ 3] 	pha
                             	; don't check mask if zero
d667 : f008             [ 3] 	beq df_var_findcreate_found
                             	; restore mask
d669 : 68               [ 4] 	pla
d66a : a000             [ 2] 	ldy #DFVVT_TYPE
d66c : 31a1             [ 5] 	and (df_tmpptra),y
                             	; but if mask is non zero then this must be non 
d66e : f019             [ 3] 	beq df_var_findcreate_err
d670 : 48               [ 3] 	pha		; Dummy push to match the pla
d671 :                       df_var_findcreate_found
                             	; discard mask
d671 : 68               [ 4] 	pla	
                             	; put slot address in x,a
d672 : a6a1             [ 3] 	ldx df_tmpptra
d674 : a5a2             [ 3] 	lda df_tmpptra+1
d676 : 18               [ 2] 	clc
d677 : 60               [ 6] 	rts
                             	
                             	;* If no existing variable found, add one to VNT
d678 :                       df_var_findcreate_create
                             	; find type (A) and length (X)
d678 : 20edd5           [ 6] 	jsr df_var_analyse
                             	; keep A temporarily
d67b : 85a1             [ 3] 	sta df_tmpptra
                             	; if not a variable then return with C=1
d67d : b009             [ 3] 	bcs df_var_findcreate_errp
                             	; check if mask needs to be applied
d67f : 68               [ 4] 	pla
d680 : f009             [ 3] 	beq df_var_analyse_ok
                             	; else mask and check
d682 : 25a1             [ 3] 	and df_tmpptra
                             	; mask match is ok
d684 : d005             [ 3] 	bne df_var_analyse_ok
                             	; else return not found
d686 : f001             [ 3] 	beq df_var_findcreate_err
d688 :                       df_var_findcreate_errp
d688 : 68               [ 4] 	pla
d689 :                       df_var_findcreate_err
d689 : 38               [ 2] 	sec
d68a : 60               [ 6] 	rts
                             
d68b :                       df_var_analyse_ok
                             	; extra space for zero terminator
d68b : e8               [ 2] 	inx
                             	; save data in reverse order to when needed
                             	; by the initialise section x,a (var name sz, ty
                             	; insert space of X bytes
d68c : a5a1             [ 3] 	lda df_tmpptra
d68e : 48               [ 3] 	pha
d68f : 8a               [ 2] 	txa
AS65 Assembler for R6502 [1.42].                                     Page  136
---------------------------------- bank0.s -----------------------------------

d690 : 48               [ 3] 	pha
                             	
d691 : 2092d5           [ 6] 	jsr df_var_insert_space
d694 : 9002             [ 3] 	bcc df_var_initialise_var
                             	; error inserting space
                             	SWBRK DFERR_OK
                             
                             	
d698 :                       df_var_initialise_var
d698 : 68               [ 4] 	pla
d699 : 85a5             [ 3] 	sta df_tmpptrc				; var name size + 1
                             
d69b : 68               [ 4] 	pla							; type
d69c : a000             [ 2] 	ldy #DFVVT_TYPE
d69e : 916f             [ 5] 	sta (df_vvtend),y			; put type in vvt slot
d6a0 : a900             [ 2] 	lda #0						; zero the rest
d6a2 : a007             [ 2] 	ldy #7
d6a4 :                       df_var_zero_vnt
d6a4 : 916f             [ 5] 	sta (df_vvtend),y
d6a6 : 88               [ 2] 	dey
d6a7 : d0fb             [ 3] 	bne df_var_zero_vnt
                             
d6a9 : c6a5             [ 5] 	dec df_tmpptrc				; 1 less to copy variable name
                             
d6ab : a67c             [ 3] 	ldx df_linoff				; Start at var name beginning
d6ad : a000             [ 2] 	ldy #0
                             	; copy variable name to vnt slot
d6af :                       df_var_findcreate_copy
d6af : bd0004           [ 4] 	lda df_linbuff,x
d6b2 : 9169             [ 5] 	sta (df_vntstrt),y
d6b4 : e8               [ 2] 	inx
d6b5 : c8               [ 2] 	iny
d6b6 : c6a5             [ 5] 	dec df_tmpptrc
d6b8 : d0f5             [ 3] 	bne df_var_findcreate_copy
                             	; put in zero terminator
d6ba : a900             [ 2] 	lda #0
d6bc : 9169             [ 5] 	sta (df_vntstrt),y
                             
                             	; Put X in to Y
d6be : 8a               [ 2] 	txa
d6bf : a8               [ 2] 	tay
                             
                             	; Return address of slot in X,A
d6c0 : a66f             [ 3] 	ldx df_vvtend
d6c2 : a570             [ 3] 	lda df_vvtend+1
                             	
d6c4 : 847c             [ 3] 	sty df_linoff				; Y is the main index used
                             
d6c6 : 18               [ 2] 	clc
d6c7 : 60               [ 6] 	rts
                             	
d6c8 :                       mod_sz_var_e
                             
                             	include "dflat/tokenise.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
AS65 Assembler for R6502 [1.42].                                     Page  137
---------------------------------- bank0.s -----------------------------------

                             ;*  TOKENISE.S
                             ;*  Controlling module for tokenisation.  Basical
                             ;*  module is given a raw input buffer, which it 
                             ;*  attempt to tokenise fully.  Any syntax errors
                             ;*  thrown at the first point of detection.  If a
                             ;*  well, the parsed input will be in a tokenised
                             ;*  which can be executed in immediate mode or sa
                             ;*  line number order to memory.
                             ;*  dflat syntax is very simple - every statement
                             ;*  with a keyword.  The only exception is assign
                             ;*  procedure invocation - but even these scenari
                             ;*  tokenised so during runtime we just execute t
                             ;*  The raw buffer is consumed one byte at a time
                             ;*  tokenised buffer is written one byte at a tim
                             ;*  syntax means there is no need to undo reads o
                             ;*  or tokenised buffer.  The only refinement is 
                             ;*  allowed to peek a character in the raw buffer
                             ;*  consuming it.
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code
                             
d6c8 :                       mod_sz_tokenise_s
                             
                             
                             ;****************************************
                             ;* df_tk_peek_buf
                             ;* Return next char in A but no change to pointer
                             ;****************************************
d6c8 :                       df_tk_peek_buf
d6c8 : a47c             [ 3] 	ldy df_linoff
d6ca : b90004           [ 4] 	lda df_linbuff,y
d6cd : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* df_tk_get_buf
                             ;* Return next char in A and inc pointer
                             ;* Don't advance if null char found and Z=1
                             ;****************************************
d6ce :                       df_tk_get_buf
d6ce : a47c             [ 3] 	ldy df_linoff
d6d0 : b90004           [ 4] 	lda df_linbuff,y
d6d3 : f003             [ 3] 	beq df_tk_get_buf_null
d6d5 : c8               [ 2] 	iny
d6d6 : 847c             [ 3] 	sty df_linoff
d6d8 :                       df_tk_get_buf_null
d6d8 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* df_tk_put_tok
                             ;* Put A in token buffer and inc pointer
                             ;* C=Clear on exit
                             ;****************************************
d6d9 :                       df_tk_put_tok
d6d9 : a47d             [ 3] 	ldy df_tokoff
d6db : 998004           [ 5] 	sta df_tokbuff,y
d6de : c8               [ 2] 	iny
d6df : 3004             [ 3] 	bmi df_tk_put_overflow
d6e1 : 847d             [ 3] 	sty df_tokoff
d6e3 : 18               [ 2] 	clc
AS65 Assembler for R6502 [1.42].                                     Page  138
---------------------------------- bank0.s -----------------------------------

d6e4 : 60               [ 6] 	rts
d6e5 :                       df_tk_put_overflow
d6e5 : a958             [ 2] 	lda #'X'
d6e7 : 8d80bb           [ 4] 	sta 48000
                             	SWBRK DFERR_STRLONG
                             
                             
                             ;****************************************
                             ;* df_tk_isdigit
                             ;* Check char in A for number 0-9
                             ;* Return: CC = False, CS = True
                             ;****************************************
d6ec :                       df_tk_isdigit
d6ec : c93a             [ 2] 	cmp #'9'+1
d6ee : b005             [ 3] 	bcs df_tk_isdigit_false
d6f0 : c930             [ 2] 	cmp #'0'
d6f2 : 9001             [ 3] 	bcc df_tk_isdigit_false
d6f4 : 60               [ 6] 	rts						; C must be 1
d6f5 :                       df_tk_isdigit_false
d6f5 : 18               [ 2] 	clc
d6f6 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* df_tk_isbin
                             ;* Check char in A for binary digit
                             ;* Return: CC = False, CS = True
                             ;****************************************
d6f7 :                       df_tk_isbin
d6f7 : c930             [ 2] 	cmp #'0'
d6f9 : f005             [ 4] 	beq df_tk_isbin_true	; C=1
d6fb : c931             [ 2] 	cmp #'1'
d6fd : f001             [ 4] 	beq df_tk_isbin_true	; C=1
d6ff : 18               [ 2] 	clc
d700 :                       df_tk_isbin_true
d700 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* df_tk_ishex
                             ;* Check char in A for number 0-9, A-F, a-f
                             ;* Return: CC = False, CS = True
                             ;****************************************
d701 :                       df_tk_ishex
d701 : 48               [ 3] 	pha
d702 : 20ecd6           [ 6] 	jsr df_tk_isdigit
d705 : b00a             [ 3] 	bcs df_tk_ishex_truep
d707 : 0920             [ 2] 	ora #0x20
d709 : c967             [ 2] 	cmp #'f'+1
d70b : b006             [ 3] 	bcs df_tk_ishex_false
d70d : c961             [ 2] 	cmp #'a'
d70f : 9002             [ 3] 	bcc df_tk_ishex_false
                             	; C must be 1 here
d711 :                       df_tk_ishex_truep
d711 : 68               [ 4] 	pla
d712 : 60               [ 6] 	rts
d713 :                       df_tk_ishex_false
d713 :                       df_tk_isalpha_false
d713 : 18               [ 2] 	clc
d714 : 68               [ 4] 	pla
d715 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* df_tk_isalpha
AS65 Assembler for R6502 [1.42].                                     Page  139
---------------------------------- bank0.s -----------------------------------

                             ;* Check next char in A alpha a-z, A-Z
                             ;* Return: CC = False, CS = True
                             ;****************************************
d716 :                       df_tk_isalpha
d716 : 48               [ 3] 	pha
d717 : 0920             [ 2] 	ora #0x20					; Convert to lower case for checki
d719 : c97b             [ 2] 	cmp #'z'+1
d71b : b0f6             [ 3] 	bcs df_tk_isalpha_false
d71d : c961             [ 2] 	cmp #'a'
d71f : 90f2             [ 3] 	bcc df_tk_isalpha_false
                             	; C must be 1 here
d721 : 68               [ 4] 	pla
d722 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* df_tk_isalphanum
                             ;* Check next char A for a-z,A-Z,0-9
                             ;* Return: CC = False, CS = True
                             ;****************************************
d723 :                       df_tk_isalphanum
d723 : 2016d7           [ 6] 	jsr df_tk_isalpha
d726 : 90c4             [ 4] 	bcc df_tk_isdigit
d728 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* df_tk_isproc
                             ;* Check next char A for _
                             ;* Return: CC = False, CS = True
                             ;****************************************
d729 :                       df_tk_isproc
d729 : c95f             [ 2] 	cmp #'_'
d72b : f001             [ 3] 	beq df_tk_isproc_true	; C=1
d72d : 18               [ 2] 	clc
d72e :                       df_tk_isproc_true
d72e : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* df_tk_skip_ws
                             ;* Skip ws in linbuff
                             ;* Return: linoff updated to next non-ws, A = cha
                             ;****************************************
d72f :                       df_tk_skip_ws
d72f :                       df_tk_ws_loop1
d72f : 20c8d6           [ 6] 	jsr df_tk_peek_buf
d732 : 204cd7           [ 6] 	jsr df_tk_isws
d735 : 9007             [ 3] 	bcc df_tk_ws_done
d737 : e67c             [ 5] 	inc df_linoff
d739 : 20d9d6           [ 6] 	jsr df_tk_put_tok
d73c : 90f1             [ 3] 	bcc df_tk_ws_loop1		; Always as put_tok clears C
d73e :                       df_tk_ws_done
d73e : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* df_tk_skip_ws
                             ;* Skip ws in linbuff
                             ;* Return: linoff updated to next non-ws, A = cha
                             ;****************************************
d73f :                       df_tk_strip_ws
d73f :                       df_tk_sws_loop1
d73f : 20c8d6           [ 6] 	jsr df_tk_peek_buf
d742 : 204cd7           [ 6] 	jsr df_tk_isws
d745 : 90f7             [ 3] 	bcc df_tk_ws_done
AS65 Assembler for R6502 [1.42].                                     Page  140
---------------------------------- bank0.s -----------------------------------

d747 : e67c             [ 5] 	inc df_linoff
d749 : 90f4             [ 3] 	bcc df_tk_sws_loop1		; Always as C is not touche
d74b :                       df_tk_sws_done
d74b : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* df_tk_isws
                             ;* Check char is ws (only space is counted)
                             ;* Return: CC = False, CS = True
                             ;****************************************
d74c :                       df_tk_isws
d74c : c920             [ 2] 	cmp #' '
d74e : d001             [ 3] 	bne df_tk_isws_false
                             	; C must be 1 here
d750 : 60               [ 6] 	rts
d751 :                       df_tk_isws_false
d751 :                       df_tk_expectok
d751 : 18               [ 2] 	clc
d752 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Find a character expected ignoring ws
                             ;* Input A = expected char
                             ;* CC = found, CS = Error
                             ;****************************************
d753 :                       df_tk_expect
d753 : 48               [ 3] 	pha
                             	; skip ws
d754 : 202fd7           [ 6] 	jsr df_tk_skip_ws
                             	; peek the buffer
d757 : 68               [ 4] 	pla
d758 : a47c             [ 3] 	ldy df_linoff
d75a : d90004           [ 4] 	cmp df_linbuff,y
                             	; if expected char then ok
d75d : f0f2             [ 3] 	beq df_tk_expectok
                             	; else error
d75f :                       df_tk_num_err
d75f :                       df_tk_char_err
d75f : 38               [ 2] 	sec
d760 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Find a character expected ignoring ws
                             ;* Input A = expected char
                             ;* Tokenises the character as well
                             ;* CC = found, CS = Error
                             ;****************************************
d761 :                       df_tk_expect_tok
d761 : 2053d7           [ 6] 	jsr df_tk_expect
d764 : b006             [ 3] 	bcs df_tk_expecttokret
d766 : 20ced6           [ 6] 	jsr df_tk_get_buf
d769 : 4cd9d6           [ 3] 	jmp df_tk_put_tok
d76c :                       df_tk_expecttokret
d76c : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Find a character expected ignoring ws
                             ;* Input A = expected char
                             ;* Tokenises the character as well
                             ;* FATAL IF NOT FOUND
                             ;****************************************
d76d :                       df_tk_expect_tok_err
AS65 Assembler for R6502 [1.42].                                     Page  141
---------------------------------- bank0.s -----------------------------------

d76d : 2061d7           [ 6] 	jsr df_tk_expect_tok
d770 : b001             [ 3] 	bcs df_tk_expect_tok_fatal
                             	; C must be 0 here
d772 : 60               [ 6] 	rts
d773 :                       df_tk_expect_tok_fatal
                             	SWBRK DFERR_SYNTAX
                             
                             
                             ;****************************************
                             ;* Tokenise a constant number
                             ;****************************************
d775 :                       df_tk_num
                             	; X,A = address, linbuff must be on page boundar
d775 : 18               [ 2] 	clc
d776 : a900             [ 2] 	lda #lo(df_linbuff)
d778 : 657c             [ 3] 	adc df_linoff
d77a : aa               [ 2] 	tax
d77b : a904             [ 2] 	lda #hi(df_linbuff)
d77d : 6900             [ 2] 	adc #0
d77f : a000             [ 2] 	ldy #0				; any numeric format
d781 : 20d4c1           [ 6] 	jsr con_n_to_a
d784 : b0d9             [ 3] 	bcs df_tk_num_err
                             	; A = format
                             	; X = how many digits processed
                             	; Jump over that many chars
d786 : a8               [ 2] 	tay
d787 : 18               [ 2] 	clc
d788 : 8a               [ 2] 	txa
d789 : 657c             [ 3] 	adc df_linoff
d78b : 857c             [ 3] 	sta df_linoff
                             	; Now tokenise an integer
d78d : 98               [ 2] 	tya
d78e : c901             [ 2] 	cmp #NUM_DEC
d790 : d004             [ 3] 	bne df_tk_num_hexbin
d792 : a909             [ 2] 	lda #DFTK_INTDEC	; decimal always an int
d794 : d014             [ 3] 	bne df_tk_num_put
d796 :                       df_tk_num_hexbin
d796 : 18               [ 2] 	clc
d797 : 6904             [ 2] 	adc #4				; Default to BYT
d799 : c907             [ 2] 	cmp #NUM_BIN+4
d79b : f009             [ 3] 	beq df_tk_num_bin
d79d : e004             [ 2] 	cpx #4				; 4 chars processed = byte
d79f : f009             [ 3] 	beq df_tk_num_put
d7a1 :                       df_tk_num_makeint
d7a1 : 18               [ 2] 	clc
d7a2 : 6904             [ 2] 	adc #4				; now make INT
d7a4 : d004             [ 3] 	bne df_tk_num_put
d7a6 :                       df_tk_num_bin
d7a6 : e00a             [ 2] 	cpx #0x0a			; 10 chars processed = byte
d7a8 : d0f7             [ 3] 	bne df_tk_num_makeint
d7aa :                       df_tk_num_put
d7aa : 20d9d6           [ 6] 	jsr df_tk_put_tok
d7ad : a53d             [ 3] 	lda num_a
d7af : 20d9d6           [ 6] 	jsr df_tk_put_tok
d7b2 : a53e             [ 3] 	lda num_a+1
d7b4 : 4cd9d6           [ 3] 	jmp df_tk_put_tok
                             
                             ;****************************************
                             ;* Tokenise a constant char
                             ;****************************************
d7b7 :                       df_tk_char
                             	; skip the first quote
AS65 Assembler for R6502 [1.42].                                     Page  142
---------------------------------- bank0.s -----------------------------------

d7b7 : 20ced6           [ 6] 	jsr df_tk_get_buf
                             	; put in the token
d7ba : a900             [ 2] 	lda #DFTK_CHR
d7bc : 20d9d6           [ 6] 	jsr df_tk_put_tok
                             	; get the char value and save
d7bf : 20ced6           [ 6] 	jsr df_tk_get_buf
d7c2 : 20d9d6           [ 6] 	jsr df_tk_put_tok
                             	; always put two bytes in, even for a BYTE type
d7c5 : a900             [ 2] 	lda #0
d7c7 : 20d9d6           [ 6] 	jsr df_tk_put_tok
                             	; next byte must be single quote
d7ca : 20ced6           [ 6] 	jsr df_tk_get_buf
d7cd : c927             [ 2] 	cmp #0x27
d7cf : d08e             [ 3] 	bne df_tk_char_err
d7d1 : 18               [ 2] 	clc
d7d2 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Tokenise a constant string
                             ;****************************************
d7d3 :                       df_tk_str
                             	; skip the first quote
d7d3 : 20ced6           [ 6] 	jsr df_tk_get_buf
                             	; put in the token
d7d6 : a910             [ 2] 	lda #DFTK_STRLIT
d7d8 : 20d9d6           [ 6] 	jsr df_tk_put_tok
d7db :                       df_tk_str_ch
                             	; copy string chars in to token buffer
                             	; until another quote or end of line
d7db : 20ced6           [ 6] 	jsr df_tk_get_buf
d7de : c900             [ 2] 	cmp #0
d7e0 : f011             [ 3] 	beq df_tk_str_err
d7e2 : c922             [ 2] 	cmp #0x22
d7e4 : f006             [ 3] 	beq df_tk_str_don
d7e6 : 20d9d6           [ 6] 	jsr df_tk_put_tok
d7e9 : 4cdbd7           [ 3] 	jmp df_tk_str_ch
d7ec :                       df_tk_str_don
                             	; zero terminated strings
d7ec : a900             [ 2] 	lda #0
d7ee : 4cd9d6           [ 3] 	jmp df_tk_put_tok
d7f1 :                       df_tk_var_noarry
d7f1 : 18               [ 2] 	clc
d7f2 : 60               [ 6] 	rts
d7f3 :                       df_tk_str_err
                             	SWBRK DFERR_SYNTAX
                             
                             
                             ;****************************************
                             ;* Tokenise a constant (num, string, char)
                             ;****************************************
d7f5 :                       df_tk_const
d7f5 : 202fd7           [ 6] 	jsr df_tk_skip_ws
                             	; Check what constant it is
d7f8 : 20c8d6           [ 6] 	jsr df_tk_peek_buf
                             	; Minus symbol could be start of a number
d7fb : c92d             [ 2] 	cmp #'-'
d7fd : f005             [ 4] 	beq df_tk_const_try_num
d7ff : 20ecd6           [ 6] 	jsr df_tk_isdigit
d802 : 9003             [ 3] 	bcc df_tk_const_try_str
d804 :                       df_tk_const_try_num
d804 : 4c75d7           [ 3] 	jmp df_tk_num
d807 :                       df_tk_const_try_str
AS65 Assembler for R6502 [1.42].                                     Page  143
---------------------------------- bank0.s -----------------------------------

                             	; check for double quote
d807 : c922             [ 2] 	cmp #0x22
d809 : d003             [ 3] 	bne df_tk_const_try_char
d80b : 4cd3d7           [ 3] 	jmp df_tk_str
d80e :                       df_tk_const_try_char
                             	; check for single apostrophe
d80e : c927             [ 2] 	cmp #0x27
d810 : d003             [ 3] 	bne df_tk_const_err
d812 : 4cb7d7           [ 3] 	jmp df_tk_char
d815 :                       df_tk_const_err
                             	SWBRK DFERR_SYNTAX
                             
                             
                             ;****************************************
                             ;* Tokenise a variable - A = mask
                             ;* Return : A = variable index
                             ;****************************************
d817 :                       df_tk_var
                             	; Find or create variable, address in X,A
d817 : 205fd6           [ 6] 	jsr df_var_findcreate
d81a : 9001             [ 3] 	bcc df_tk_var_cont
d81c : 60               [ 6] 	rts
d81d :                       df_tk_var_cont
                             	; Save X,A for later
d81d : 48               [ 3] 	pha
d81e : 8a               [ 2] 	txa
d81f : 48               [ 3] 	pha
                             	; Put VAR escape in token buffer
d820 : a911             [ 2] 	lda #DFTK_VAR
d822 : 20d9d6           [ 6] 	jsr df_tk_put_tok
                             	; Get variable address and put in token buffer
d825 : 68               [ 4] 	pla
d826 : 20d9d6           [ 6] 	jsr df_tk_put_tok
d829 : 68               [ 4] 	pla
d82a : 20d9d6           [ 6] 	jsr df_tk_put_tok
                             	; count of any array indices
d82d :                       df_tk_var_ck
                             	; check if array procesing needed
d82d : a95b             [ 2] 	lda #'['
d82f : 2061d7           [ 6] 	jsr df_tk_expect_tok
d832 : b0bd             [ 4] 	bcs df_tk_var_noarry
                             	; process numeric expression in bracket
d834 : 4cd3d8           [ 3] 	jmp df_tk_narry
                             
                             ;****************************************
                             ;* Tokenise a parameter in proc definition
                             ;* Return : A = variable index
                             ;****************************************
d837 :                       df_tk_parm
                             	; if preceeding with non-local qualifier DFTK_VA
d837 : 20c8d6           [ 6] 	jsr df_tk_peek_buf
d83a : c926             [ 2] 	cmp #DFTK_VARPARM
d83c : d006             [ 3] 	bne df_tk_parm_skip_var
                             	; get the qualifier and put in token buffer
d83e : 20ced6           [ 6] 	jsr df_tk_get_buf
d841 : 20d9d6           [ 6] 	jsr df_tk_put_tok
d844 :                       df_tk_parm_skip_var
                             	; don't have a certain type of var
d844 : a900             [ 2] 	lda #0
d846 : 4c17d8           [ 3] 	jmp df_tk_var
                             
                             
AS65 Assembler for R6502 [1.42].                                     Page  144
---------------------------------- bank0.s -----------------------------------

                             ;****************************************
                             ;* Tokenise a variable to localise
                             ;* Return : A,X = variable index
                             ;****************************************
d849 :                       df_tk_localvar
                             	; Find or create variable, index in A
d849 : 205fd6           [ 6] 	jsr df_var_findcreate
d84c : 9001             [ 3] 	bcc df_tk_localvar_cont
d84e : 60               [ 6] 	rts
d84f :                       df_tk_localvar_cont
                             	; Save variable address for later
d84f : 48               [ 3] 	pha
d850 : 8a               [ 2] 	txa
d851 : 48               [ 3] 	pha
                             	; Put VAR escape in token buffer
d852 : a911             [ 2] 	lda #DFTK_VAR
d854 : 20d9d6           [ 6] 	jsr df_tk_put_tok
                             	; Get variable index and put in token buffer
d857 : 68               [ 4] 	pla
d858 : 20d9d6           [ 6] 	jsr df_tk_put_tok
d85b : 68               [ 4] 	pla
d85c : 4cd9d6           [ 3] 	jmp df_tk_put_tok
                             
                             ;****************************************
                             ;* Tokenise call or def of proc
                             ;* Mode : A = 0 means def, else call
                             ;****************************************
d85f :                       df_tk_proc
d85f : 858b             [ 3] 	sta df_procmode
d861 : 202fd7           [ 6] 	jsr df_tk_skip_ws
                             	; Find or create proc, index in A
d864 : a940             [ 2] 	lda #DFVVT_PROC
d866 : 205fd6           [ 6] 	jsr df_var_findcreate
d869 : b066             [ 3] 	bcs df_tk_proc_err
                             
                             	; Save variable address for later
d86b : 868e             [ 3] 	stx df_procptr
d86d : 858f             [ 3] 	sta df_procptr+1
                             
                             	; Put PROC escape in token buffer
d86f : a912             [ 2] 	lda #DFTK_PROC
d871 : 20d9d6           [ 6] 	jsr df_tk_put_tok
                             	; Get variable address and put in token buffer
d874 : a58e             [ 3] 	lda df_procptr
d876 : 20d9d6           [ 6] 	jsr df_tk_put_tok
d879 : a58f             [ 3] 	lda df_procptr+1
d87b : 20d9d6           [ 6] 	jsr df_tk_put_tok
                             
                             	; initially assume no args
d87e : a900             [ 2] 	lda #0
d880 : 858c             [ 3] 	sta df_procargs
                             
                             	; Must have an open bracket
d882 : a928             [ 2] 	lda #'('
d884 : 206dd7           [ 6] 	jsr df_tk_expect_tok_err
                             	; if immediately followed by close bracket then 
d887 : 20c8d6           [ 6] 	jsr df_tk_peek_buf
d88a : c929             [ 2] 	cmp #')'
d88c : f030             [ 3] 	beq df_tk_proc_noparm
                             	; else tokenise parm variables
d88e :                       df_tk_proc_parms
d88e : 202fd7           [ 6] 	jsr df_tk_skip_ws
AS65 Assembler for R6502 [1.42].                                     Page  145
---------------------------------- bank0.s -----------------------------------

                             	; call appropriate routine for mode
d891 : a58b             [ 3] 	lda df_procmode
d893 : d006             [ 3] 	bne df_tk_proc_call
                             	; tokenise parameter variable in def mode
d895 : 2037d8           [ 6] 	jsr df_tk_parm
d898 : 4ca4d8           [ 3] 	jmp df_tk_proc_skip_call
d89b :                       df_tk_proc_call
                             	; tokenise expression in call mode
                             	;**CHECK**
d89b : a58c             [ 3] 	lda df_procargs	; procargs could be impacted ins
d89d : 48               [ 3] 	pha
d89e : 2053d9           [ 6] 	jsr df_tk_expression
d8a1 : 68               [ 4] 	pla
d8a2 : 858c             [ 3] 	sta df_procargs
d8a4 :                       df_tk_proc_skip_call
d8a4 : b02a             [ 3] 	bcs df_tk_proc_errp
                             	; increment number of args
d8a6 : e68c             [ 5] 	inc df_procargs
                             	; what is next non ws char
d8a8 : 202fd7           [ 6] 	jsr df_tk_skip_ws
d8ab : c92c             [ 2] 	cmp #','
d8ad : f006             [ 3] 	beq df_tk_proc_comma
d8af : c929             [ 2] 	cmp #')'
d8b1 : d01d             [ 3] 	bne df_tk_proc_errp
d8b3 : f009             [ 3] 	beq df_tk_proc_noparm
                             	; comma found, more parms to process
d8b5 :                       df_tk_proc_comma
d8b5 : 20ced6           [ 6] 	jsr df_tk_get_buf
d8b8 : 20d9d6           [ 6] 	jsr df_tk_put_tok
d8bb : 4c8ed8           [ 3] 	jmp df_tk_proc_parms
d8be :                       df_tk_proc_noparm
                             	; consume the close bracket
d8be : 20ced6           [ 6] 	jsr df_tk_get_buf
d8c1 : 20d9d6           [ 6] 	jsr df_tk_put_tok
                             
                             	; update arg count if def mode
d8c4 : a68b             [ 3] 	ldx df_procmode
d8c6 : d006             [ 3] 	bne df_tk_proc_skip_args
                             	; use address of proc
                             	; put arg count in dim2
d8c8 : a004             [ 2] 	ldy #DFVVT_DIM2
d8ca : a58c             [ 3] 	lda df_procargs
d8cc : 918e             [ 5] 	sta (df_procptr),y
d8ce :                       df_tk_proc_skip_args
d8ce : 18               [ 2] 	clc
d8cf : 60               [ 6] 	rts
d8d0 :                       df_tk_proc_errp
d8d0 : 68               [ 4] 	pla
d8d1 :                       df_tk_proc_err
                             	SWBRK DFERR_SYNTAX
                             
                             
                             ;****************************************
                             ;* Parse array index
                             ;****************************************
d8d3 :                       df_tk_narry
                             	; if array open bracket encountered
                             	; then tokenise a numeric expression
d8d3 : 2053d9           [ 6] 	jsr df_tk_expression
                             	; If a comma is next, then another expression
d8d6 : a92c             [ 2] 	lda #','
d8d8 : 2061d7           [ 6] 	jsr df_tk_expect_tok
AS65 Assembler for R6502 [1.42].                                     Page  146
---------------------------------- bank0.s -----------------------------------

d8db : b003             [ 3] 	bcs df_tk_narry_end
d8dd : 2053d9           [ 6] 	jsr df_tk_expression
d8e0 :                       df_tk_narry_end
                             	; after the second dimension, must be close sq b
d8e0 : a95d             [ 2] 	lda #']'
d8e2 : 4c6dd7           [ 3] 	jmp df_tk_expect_tok_err
                             
                             ;****************************************
                             ;* Parse bracket
                             ;****************************************
d8e5 :                       df_tk_nbrkt
                             	; if  open bracket encountered
                             	; then tokenise a numeric expression
d8e5 : 2053d9           [ 6] 	jsr df_tk_expression
d8e8 : a929             [ 2] 	lda #')'
d8ea : 4c6dd7           [ 3] 	jmp df_tk_expect_tok_err
                             
                             ;****************************************
                             ;* Parse call to numeric proc
                             ;****************************************
d8ed :                       df_tk_nterm_proc
                             	; call mode
d8ed : a901             [ 2] 	lda #1
d8ef : 4c5fd8           [ 3] 	jmp df_tk_proc
                             
                             ;****************************************
                             ;* Parse numeric term
                             ;****************************************
d8f2 :                       df_tk_nterm
                             	; skip any ws first, copying in to tokbuff
                             	; A containts the non-ws char
d8f2 : 202fd7           [ 6] 	jsr df_tk_skip_ws
d8f5 : c900             [ 2] 	cmp #0
d8f7 : f004             [ 3] 	beq df_tk_nterm_done
d8f9 : c93a             [ 2] 	cmp #':'
d8fb : d002             [ 3] 	bne df_tk_nterm_cont
d8fd :                       df_tk_nterm_done
d8fd :                       df_tk_nop_false
d8fd : 38               [ 2] 	sec
d8fe : 60               [ 6] 	rts
d8ff :                       df_tk_nterm_cont
                             	; if open bracket then process it
d8ff : c928             [ 2] 	cmp #'('
d901 : d009             [ 3] 	bne df_tk_nterm_tryfn
                             	; get the bracket and put in token buffer
d903 : 20ced6           [ 6] 	jsr df_tk_get_buf
d906 : 20d9d6           [ 6] 	jsr df_tk_put_tok
                             	; go process the open bracket
d909 : 4ce5d8           [ 3] 	jmp df_tk_nbrkt
d90c :                       df_tk_nterm_tryfn
d90c : 48               [ 3] 	pha
                             	; try decoding a built-in function
d90d : a902             [ 2] 	lda #DFTK_FN
d90f : 2030da           [ 6] 	jsr df_tk_matchtok
d912 : b00e             [ 3] 	bcs df_tk_nterm_try_proc
                             	; pull old A in to Y but don't use
d914 : 68               [ 4] 	pla
d915 : a8               [ 2] 	tay
                             	; restore A and put the token with MSB set
d916 : 8a               [ 2] 	txa
d917 : 0980             [ 2] 	ora #0x80
d919 : 20d9d6           [ 6] 	jsr df_tk_put_tok
AS65 Assembler for R6502 [1.42].                                     Page  147
---------------------------------- bank0.s -----------------------------------

d91c : 2002da           [ 6] 	jsr df_tk_exec_parser
d91f : b01b             [ 3] 	bcs df_tk_nterm_err
d921 : 60               [ 6] 	rts
d922 :                       df_tk_nterm_try_proc
d922 : 68               [ 4] 	pla
                             	; if it's not a func then try proc
d923 : 2029d7           [ 6] 	jsr df_tk_isproc
d926 : 9006             [ 3] 	bcc df_tk_nterm_try_var
d928 : 20edd8           [ 6] 	jsr df_tk_nterm_proc
d92b : b00f             [ 3] 	bcs df_tk_nterm_err
d92d : 60               [ 6] 	rts
d92e :                       df_tk_nterm_try_var
                             	; Non-zero mask means var must be this type
d92e : a900             [ 2] 	lda #0
d930 : 2017d8           [ 6] 	jsr df_tk_var
d933 : b001             [ 3] 	bcs df_tk_nterm_try_const
d935 : 60               [ 6] 	rts
d936 :                       df_tk_nterm_try_const
                             	; Try decoding a constant
d936 : 20f5d7           [ 6] 	jsr df_tk_const
d939 : b001             [ 3] 	bcs df_tk_nterm_err
d93b : 60               [ 6] 	rts
d93c :                       df_tk_nterm_err
                             	SWBRK DFERR_SYNTAX
                             
                             
                             ;****************************************
                             ;* Parse numeric operator
                             ;****************************************
d93e :                       df_tk_nop
d93e : 202fd7           [ 6] 	jsr df_tk_skip_ws
d941 : c900             [ 2] 	cmp #0
d943 : f0b8             [ 4] 	beq df_tk_nop_false
                             	; must be an operator token for numeric
d945 : a90c             [ 2] 	lda #DFTK_OP | DFTK_STROP
d947 : 2030da           [ 6] 	jsr df_tk_matchtok
d94a : b0b1             [ 4] 	bcs df_tk_nop_false
                             	; got a token
d94c : 0980             [ 2] 	ora #DFTK_TOKEN
d94e : 20d9d6           [ 6] 	jsr df_tk_put_tok
d951 : 18               [ 2] 	clc
d952 : 60               [ 6] 	rts
                             
                             	
                             ;****************************************
                             ;* Parse numeric expression
                             ;****************************************
d953 :                       df_tk_expression
                             	; Tokenise a numeric term
d953 : 20f2d8           [ 6] 	jsr df_tk_nterm
d956 : b006             [ 3] 	bcs df_tk_expre_err
                             	; Try and tokenise a numeric operator
d958 : 203ed9           [ 6] 	jsr df_tk_nop
                             	; If an operator was tokenised
                             	; then loop back for another term
d95b : 90f6             [ 3] 	bcc df_tk_expression
                             	; If no operator was found then
                             	; expression is done
d95d :                       df_tk_not_eos
d95d : 18               [ 2] 	clc
d95e :                       df_tk_expre_err
d95e : 60               [ 6] 	rts
AS65 Assembler for R6502 [1.42].                                     Page  148
---------------------------------- bank0.s -----------------------------------

                             
                             ;****************************************
                             ;* Find expected token and parse expression
                             ;****************************************
d95f :                       df_tk_tok_expression
d95f : 206dd7           [ 6] 	jsr df_tk_expect_tok_err
d962 : 4c53d9           [ 3] 	jmp df_tk_expression
                             
                             
                             ;****************************************
                             ;* Check end of statement
                             ;****************************************
d965 :                       df_tk_isEOS
d965 : a93a             [ 2] 	lda #':'
d967 : 2061d7           [ 6] 	jsr df_tk_expect_tok
d96a : b0f1             [ 3] 	bcs df_tk_not_eos
                             	; this is the position of the next statement
d96c : a57d             [ 3] 	lda df_tokoff
                             	; put it in the last statement offset slot
d96e : a47f             [ 3] 	ldy df_nxtstidx
d970 : 998004           [ 5] 	sta df_tokbuff,y
d973 : 38               [ 2] 	sec
d974 : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* Parse user defined proc
                             ;****************************************
d975 :                       df_tk_parse_user_proc
                             	; put proc token in as a call
d975 : a981             [ 2] 	lda #0x81
d977 : 20d9d6           [ 6] 	jsr df_tk_put_tok
d97a : a901             [ 2] 	lda #1
d97c : 4c5fd8           [ 3] 	jmp df_tk_proc
                             
                             
                             ;****************************************
                             ;* Parse a command
                             ;* Do not fatal error if this fails
                             ;****************************************
d97f :                       df_tk_parse_command
                             	; only looking for keywords
d97f : a901             [ 2] 	lda #DFTK_KW
d981 : 2030da           [ 6] 	jsr df_tk_matchtok
                             	; if didn't find regular keywords then try non f
d984 : b010             [ 3] 	bcs df_tk_parse_command_err
                             	; if match then store token in the line buffer
                             	; Set MSB
d986 : 0980             [ 2] 	ora #0x80
d988 : 20d9d6           [ 6] 	jsr df_tk_put_tok
                             	; call the parser to do tokenise based on the st
d98b : a583             [ 3] 	lda df_symoff
d98d : 2002da           [ 6] 	jsr df_tk_exec_parser
d990 : b004             [ 3] 	bcs df_tk_parse_command_err
                             	; [1] ignore white space but keep it
d992 : 202fd7           [ 6] 	jsr df_tk_skip_ws
                             	; No error in parsing this command
d995 :                       df_tk_parse_command_done
d995 : 18               [ 2] 	clc
d996 :                       df_tk_parse_command_err
d996 : 60               [ 6] 	rts
                             
AS65 Assembler for R6502 [1.42].                                     Page  149
---------------------------------- bank0.s -----------------------------------

                             
                             ;****************************************
                             ;* lexer
                             ;****************************************
d997 :                       df_lexer_line
d997 : a900             [ 2] 	lda #0
                             	; start at the beginning of the line buffer
d999 : 857c             [ 3] 	sta df_linoff
                             	; start at the beginning of the tokenised buffer
d99b : 857d             [ 3] 	sta df_tokoff
                             	; set current line to the token buffer
d99d : a980             [ 2] 	lda #lo(df_tokbuff)
d99f : 8586             [ 3] 	sta df_currlin
d9a1 : a904             [ 2] 	lda #hi(df_tokbuff)
d9a3 : 8587             [ 3] 	sta df_currlin+1
                             	; Set the line length to 0
d9a5 : a900             [ 2] 	lda #0
d9a7 : 20d9d6           [ 6] 	jsr df_tk_put_tok
                             
                             	; any leading white space, ignore and discard
d9aa : 203fd7           [ 6] 	jsr df_tk_strip_ws
                             
                             	; if peek next character is a number then assume
                             	; else assume a statement
d9ad : 20ecd6           [ 6] 	jsr df_tk_isdigit
d9b0 : 9006             [ 3] 	bcc df_lexer_skip_lnum
                             	; if line number then capture the line number an
d9b2 : 2011da           [ 6] 	jsr df_tk_linenum
d9b5 : 4cc0d9           [ 3] 	jmp df_tk_body
d9b8 :                       df_lexer_skip_lnum
                             	; if no line number then zero out the line numbe
                             	; line zero will indicate an immediate mode comm
d9b8 : a900             [ 2] 	lda #0
d9ba : 20d9d6           [ 6] 	jsr df_tk_put_tok				; Line num low byte
d9bd : 20d9d6           [ 6] 	jsr df_tk_put_tok				; Line num high byte
d9c0 :                       df_tk_body
                             	; Offset for next statement
d9c0 : a57d             [ 3] 	lda df_tokoff
d9c2 : 857f             [ 3] 	sta df_nxtstidx
d9c4 : a900             [ 2] 	lda #0
d9c6 : 20d9d6           [ 6] 	jsr df_tk_put_tok				; Offset to next statement
                             	; [1] capture white space from line buffer in to
d9c9 : 202fd7           [ 6] 	jsr df_tk_skip_ws
                             	; If next non ws is zero then this is an empty l
                             	; so return with length zero but line number fil
                             	; token buffer
d9cc : c900             [ 2] 	cmp #0
d9ce : f02e             [ 3] 	beq df_tk_line_empty
                             	; if next char is _ then parse a user defined pr
d9d0 : 2029d7           [ 6] 	jsr df_tk_isproc
d9d3 : 9006             [ 3] 	bcc df_tk_try_command
d9d5 : 2075d9           [ 6] 	jsr df_tk_parse_user_proc
d9d8 : 4ce7d9           [ 3] 	jmp df_tk_done
d9db :                       df_tk_try_command
                             	; try  a keyword
d9db : 207fd9           [ 6] 	jsr df_tk_parse_command
d9de : b002             [ 3] 	bcs	df_tk_try_assign
d9e0 : 9005             [ 3] 	bcc df_tk_done
d9e2 :                       df_tk_try_assign
                             	; nothing but to try an assignment operation
d9e2 : 2077dd           [ 6] 	jsr df_tk_assign
d9e5 : b019             [ 4] 	bcs	df_tk_parseerror
AS65 Assembler for R6502 [1.42].                                     Page  150
---------------------------------- bank0.s -----------------------------------

d9e7 :                       df_tk_done
                             	; put statement index stuff here in case of mult
                             	; check for : and if present tokenise plus updat
                             	; then go back to try and process another statem
d9e7 : 2065d9           [ 6] 	jsr df_tk_isEOS
d9ea : b0d4             [ 3] 	bcs df_tk_body
                             	; if not at end of line, then must be error
d9ec : 20c8d6           [ 6] 	jsr df_tk_peek_buf
d9ef : c900             [ 2] 	cmp #0
d9f1 : d00d             [ 4] 	bne df_tk_parseerror
                             	; Get line length length
d9f3 : a47d             [ 3] 	ldy df_tokoff
                             	; ensure there is always a zero after the last t
d9f5 : a900             [ 2] 	lda #0
d9f7 : 998004           [ 5] 	sta df_tokbuff,y
                             	; save the line length
d9fa : 98               [ 2] 	tya
d9fb : 8d8004           [ 4] 	sta df_tokbuff
d9fe :                       df_tk_line_empty
d9fe : 18               [ 2] 	clc
d9ff : 60               [ 6] 	rts
da00 :                       df_tk_parseerror
                             	SWBRK DFERR_SYNTAX
                             
                             
                             ;****************************************
                             ;* df_tk_parsestatement
                             ;* Execute parse routine for this statement
                             ;* Input: df_tokoff is the token found
                             ;* Return: CC = Parsed ok, CS = Error
                             ;****************************************
da02 :                       df_tk_exec_parser
da02 : 0a               [ 2] 	asl a
da03 : aa               [ 2] 	tax
da04 : bd43dc           [ 4] 	lda df_tk_tokenjmp,x
da07 : 85a1             [ 3] 	sta df_tmpptra
da09 : bd44dc           [ 4] 	lda df_tk_tokenjmp+1,x
da0c : 85a2             [ 3] 	sta df_tmpptra+1
da0e : 6ca100           [ 6] 	jmp (df_tmpptra)
                             
                             
                             ;****************************************
                             ;* df_tk_linenum
                             ;* Tokenise line number
                             ;****************************************
da11 :                       df_tk_linenum
                             	; Convert line number to 16 bit number
                             	; Save the line number
                             	; Increment the buffer pointer
da11 : 18               [ 2] 	clc
da12 : a900             [ 2] 	lda #lo(df_linbuff)
da14 : 657c             [ 3] 	adc df_linoff
da16 : aa               [ 2] 	tax
da17 : a904             [ 2] 	lda #hi(df_linbuff)
da19 : 6900             [ 2] 	adc #0
da1b : a001             [ 2] 	ldy #1			; Decimal format only
da1d : 20d4c1           [ 6] 	jsr con_n_to_a
da20 : 18               [ 2] 	clc
da21 : 8a               [ 2] 	txa
da22 : 657c             [ 3] 	adc df_linoff
da24 : 857c             [ 3] 	sta df_linoff
                             	; Now save line number
AS65 Assembler for R6502 [1.42].                                     Page  151
---------------------------------- bank0.s -----------------------------------

da26 : a53d             [ 3] 	lda num_a
da28 : 20d9d6           [ 6] 	jsr df_tk_put_tok
da2b : a53e             [ 3] 	lda num_a+1
da2d : 4cd9d6           [ 3] 	jmp df_tk_put_tok
                             
                             ;****************************************
                             ;* df_tk_matchtok
                             ;* Try and find a token match against the table d
                             ;* Input:
                             ;*			Current df_linbuff and df_linoff
                             ;* Return: 	CC = No Error, CS = Error
                             ;*			df_linoff points to next char if CC else unc
                             ;*			df_symoff is the symbol table index
                             ;****************************************
da30 :                       df_tk_matchtok
                             	; save the mask to check types against
da30 : 48               [ 3] 	pha
                             	; Start at token symbols beginning
da31 : a9b2             [ 2] 	lda #lo(df_tokensyms)
da33 : 8581             [ 3] 	sta df_symtab
da35 : a9da             [ 2] 	lda #hi(df_tokensyms)
da37 : 8582             [ 3] 	sta df_symtab+1
da39 : a900             [ 2] 	lda #0
da3b : 8583             [ 3] 	sta df_symoff
da3d :                       df_tk_checknexttok
                             	; check this token type first
da3d : 68               [ 4] 	pla
da3e : 48               [ 3] 	pha
da3f : a683             [ 3] 	ldx df_symoff
da41 : 3d05dd           [ 4] 	and df_tk_tokentype,x
da44 : f032             [ 3] 	beq df_tk_symnomatch
                             	; Special check for operator token
                             	; because of order of precedence fudge
                             	; ******FIX THIS ONE DAY!!!!!!******
                             	; if parm and token type = DFTK_OP then ok
                             	; if parm and token type <> DFTK_OP then not ok
da46 : bd05dd           [ 4] 	lda df_tk_tokentype,x
da49 : 2908             [ 2] 	and #DFTK_OP
da4b : f009             [ 3] 	beq df_tk_matchtok_skip_op
da4d : 68               [ 4] 	pla
da4e : 48               [ 3] 	pha
da4f : 2908             [ 2] 	and #DFTK_OP
da51 : 3d05dd           [ 4] 	and df_tk_tokentype,x
da54 : f022             [ 3] 	beq df_tk_symnomatch
da56 :                       df_tk_matchtok_skip_op
                             	; From the line buffer current pointer
                             	; Check for a token match
da56 : a47c             [ 3] 	ldy df_linoff
da58 : a200             [ 2] 	ldx #0
da5a :                       df_tk_checktokch
                             	; Get symtable char
                             	; and mask off MSB
da5a : a181             [ 6] 	lda (df_symtab,x)
                             	; Save the value and mask off MSB
da5c : 48               [ 3] 	pha
da5d : 297f             [ 2] 	and #0x7f
                             	; Compare with current line buffer char
da5f : d90004           [ 4] 	cmp df_linbuff,y
                             	; If chars not match then this symbol fails
da62 : d013             [ 3] 	bne df_tk_symnomatchp
                             	; If match and symbol has MSB then
                             	; all of the symbol matched
AS65 Assembler for R6502 [1.42].                                     Page  152
---------------------------------- bank0.s -----------------------------------

da64 : 68               [ 4] 	pla
da65 : 3033             [ 3] 	bmi df_tk_symfound
                             	; else more chars to match
                             	; so increment line buffer pointers
                             	_incZPWord df_symtab
                             
da6d : c8               [ 2] 	iny
                             	; If buffer is '.' then let this be a match
da6e : b90004           [ 4] 	lda df_linbuff,y
da71 : c92e             [ 2] 	cmp #'.'
da73 : f025             [ 3] 	beq df_tk_symfound
da75 : d0e3             [ 3] 	bne df_tk_checktokch	; branch always
da77 :                       df_tk_symnomatchp
da77 : 68               [ 4] 	pla
da78 :                       df_tk_symnomatch
                             	; Increment symbol counter to next symbol
da78 : e683             [ 5] 	inc df_symoff
da7a :                       df_tk_symnextentry
da7a : a200             [ 2] 	ldx #0
da7c : a181             [ 6] 	lda (df_symtab,x)
                             	; End of symbol is MSB
da7e : 3009             [ 3] 	bmi  df_tk_foundsymend
                             	_incZPWord df_symtab
                             
da86 : 4c7ada           [ 3] 	jmp df_tk_symnextentry
da89 :                       df_tk_foundsymend
                             	; Increment char to point to new symbol
                             	; for matching with line buffer
                             	_incZPWord df_symtab
                             
                             	; If next char is not zero then
                             	; try and match with line buffer
da8f : a181             [ 6] 	lda (df_symtab,x)
da91 : d0aa             [ 3] 	bne df_tk_checknexttok
                             	; else symbol table exhausted
                             	; so no match found
                             	; pop mask off stack
da93 : 68               [ 4] 	pla
                             	; Zero symbol counter
da94 : a900             [ 2] 	lda #0
da96 : 8583             [ 3] 	sta df_symoff
                             	; Set C to indicate error (no match)
da98 : 38               [ 2] 	sec
da99 : 60               [ 6] 	rts
da9a :                       df_tk_symfound
                             	; Full match with keyword in symtable but
                             	; if matching with something that ended in alpha
                             	; then check the next buffer char is not alphanu
                             	; as this could be part of a variable name
                             	; Point to next buffer char in any case
da9a : c8               [ 2] 	iny
                             	; First mask off MSB
da9b : 297f             [ 2] 	and #0x7f
                             	; Then check if alpha
da9d : 2016d7           [ 6] 	jsr df_tk_isalpha
                             	; if not alpha then we're definitely done
daa0 : 9008             [ 3] 	bcc df_tk_symfound_final
                             	; else check buffer
daa2 : b90004           [ 4] 	lda df_linbuff,y
                             	; if it is an alphanum then
daa5 : 2023d7           [ 6] 	jsr df_tk_isalphanum
                             	; do not count as a match
AS65 Assembler for R6502 [1.42].                                     Page  153
---------------------------------- bank0.s -----------------------------------

daa8 : b0ce             [ 3] 	bcs df_tk_symnomatch
daaa :                       df_tk_symfound_final
                             	; pop mask off stack
daaa : 68               [ 4] 	pla
                             	; Save line buffer pointer (points to next char)
                             	; Clear C to indicate success (match)
daab : 847c             [ 3] 	sty df_linoff
daad : a583             [ 3] 	lda df_symoff
daaf : aa               [ 2] 	tax
dab0 : 18               [ 2] 	clc
dab1 : 60               [ 6] 	rts
                             
                             	include "dflat/tksymtab.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  TKSYMTAB.S
                             ;*  Runtime token jump table.
                             ;*  dflat uses four key tables to tokenise and ru
                             ;*  - df_tokensyms    - table of token symbols
                             ;*  - df_tk_tokentype - table of token types
                             ;*  - df_tk_tokenjmp  - table of tokenising routi
                             ;*  - df_rt_tokenjmp  - table of runtime routines
                             ;*  The key is the token symbols.  When a line is
                             ;*  in to the raw (untokenised) buffer, df_tokens
                             ;*  used to identify tokens.  The position of the
                             ;*  token is used to then look up type and jump v
                             ;*  in the other tables.
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code  
                             
                             ; Statement Token table
                             ; keywords
dab2 :                       df_tokensyms
dab2 : 80                    	db	0x80						; Implicit numeric assign
dab3 : 80                    	db	0x80						; Implicit call procedure
dab4 : bb                    	db	";"+0x80					; Comment
dab5 : 7072696e746cee        	db	"printl",'n'+0x80			; println exprlist
dabc : 7072696e7461f4        	db	"printa",'t'+0x80			; printat x,y,exprlist
dac3 : 7072696ef4            	db	"prin",'t'+0x80				; print exprlist
dac8 : 6465e6                	db	"de",'f'+0x80				; def_subname
dacb : 656e646465e6          	db	"endde",'f'+0x80			; enddef
dad1 : 7265747572ee          	db	"retur",'n'+0x80			; return
dad7 : 61626f72f4            	db	"abor",'t'+0x80				; abort
dadc : 6c6f6361ec            	db	"loca",'l'+0x80				; local varlist
dae1 : 6469ed                	db	"di",'m'+0x80				; dim varlist
dae4 : 7265706561f4          	db	"repea",'t'+0x80			; repeat
daea : 756e7469ec            	db	"unti", 'l'+0x80			; until condition
daef : 666ff2                	db	"fo",'r'+0x80				; for var=start,end,incremen
daf2 : 6e6578f4              	db	"nex",'t'+0x80				; next
daf6 : 7768696ce5            	db	"whil",'e'+0x80				; while condition
dafb : 77656ee4              	db	"wen",'d'+0x80				; wend
daff : 69e6                  	db	"i",'f'+0x80				; if condition
db01 : 656c73e5              	db	"els",'e'+0x80				; else
AS65 Assembler for R6502 [1.42].                                     Page  154
---------------------------------- bank0.s -----------------------------------

db05 : 656e6469e6            	db	"endi",'f'+0x80				; endif
db0a : 656c69e6              	db	"eli",'f'+0x80				; elif condition
db0e : 646174e1              	db	"dat",'a'+0x80				; data
db12 : ae                    	db	'.'+0x80					; assembler command
db13 : 7275ee                	db	"ru",'n'+0x80				; run
db16 : 6c6973f4              	db	"lis",'t'+0x80				; list _proc-|*|line,line
db1a : 696e7075f4            	db	"inpu",'t'+0x80				; input var
db1f : 746578f4              	db	"tex",'t'+0x80				; text
db23 : 706c6ff4              	db	"plo",'t'+0x80				; plot x,y,char|string
db27 : 637572736ff2          	db	"curso",'r'+0x80			; cursor n
db2d : 636cf3                	db	"cl",'s'+0x80				; cls
db30 : 706f6be5              	db	"pok",'e'+0x80				; poke a,v
db34 : 646f6be5              	db	"dok",'e'+0x80				; doke a,v
db38 : 736f756ee4            	db	"soun",'d'+0x80				; sound
db3d : 6d757369e3            	db	"musi",'c'+0x80				; music
db42 : 706c61f9              	db	"pla",'y'+0x80				; play
db46 : 736176e5              	db	"sav",'e'+0x80				; save "fname"
db4a : 6c6f61e4              	db	"loa",'d'+0x80				; load "fname"
db4e : 726561e4              	db	"rea",'d'+0x80				; read
db52 : 6e65f7                	db	"ne",'w'+0x80				; new
db55 : 72656e75ed            	db	"renu",'m'+0x80				; renum start,offset,incre
db5a : 776169f4              	db	"wai",'t'+0x80				; wait delay
db5e : 72657365f4            	db	"rese",'t'+0x80				; reset var
db63 : 68697265f3            	db	"hire",'s'+0x80				; hires col
db68 : 706f696ef4            	db	"poin",'t'+0x80				; point x,y
db6d : 6c696ee5              	db	"lin",'e'+0x80				; line x0,y0,x1,y1
db71 : 6c696e6574ef          	db	"linet",'o'+0x80			; lineto x1,y1
db77 : 7069786d6f64e5        	db	"pixmod",'e'+0x80			; pixmode n
db7e : 696eeb                	db	"in",'k'+0x80				; ink n
db81 : 70617065f2            	db	"pape",'r'+0x80				; paper n
db86 : 636972636ce5          	db	"circl",'e'+0x80			; circle x,y,r
db8c : 68696d65ed            	db	"hime",'m'+0x80				; himem addr
db91 : 6d6f6e69746ff2        	db	"monito",'r'+0x80			; monitor
db98 : 737072636861f2        	db	"sprcha",'r'+0x80			; sprchar sp,ch
db9f : 737072706ff3          	db	"sprpo",'s'+0x80			; sprpos sp,x,y
dba5 : 7370727570e4          	db	"sprup",'d'+0x80			; sprupd
dbab : 737072696e69f4        	db	"sprini",'t'+0x80			; sprinit
dbb2 : 7370726d756c74e9      	db	"sprmult",'i'+0x80			; sprmulti x[],y[]
dbba : 62736176e5            	db	"bsav",'e'+0x80				; bsave addr,len,"fname"
dbbf : 626c6f61e4            	db	"bloa",'d'+0x80				; bload addr,"fname"
dbc4 : 74736176e5            	db	"tsav",'e'+0x80				; tsave "fname"
dbc9 : 746c6f61e4            	db	"tloa",'d'+0x80				; tload "fname"
                             ; Functions
dbce : 7065656ba8            	db	"peek",'('+0x80				; peek(x)
dbd3 : 6465656ba8            	db	"deek",'('+0x80				; peek(x)
dbd8 : 737469636ba8          	db	"stick",'('+0x80			; stick(x)
dbde : 676574a8              	db	"get",'('+0x80				; get(x)
dbe2 : 636872a8              	db	"chr",'('+0x80				; chr(x)
dbe6 : 6c656674a8            	db	"left",'('+0x80				; left(x$,y)
dbeb : 7269676874a8          	db	"right",'('+0x80			; right(x$,y)
dbf1 : 6d6964a8              	db	"mid",'('+0x80				; mid(x$,y)
dbf5 : 6c656ea8              	db	"len",'('+0x80				; len(x$)
dbf9 : 6d656da8              	db	"mem",'('+0x80				; mem(x)
dbfd : 7363726ea8            	db	"scrn",'('+0x80				; scrn(x,y)
dc02 : 726e64a8              	db	"rnd",'('+0x80				; rnd(x)
dc06 : 656c6170736564a8      	db	"elapsed",'('+0x80			; elapsed(var)
dc0e : 63616c6ca8            	db	"call",'('+0x80				; call(addr,A,X,Y)
dc13 : 686578a8              	db	"hex",'('+0x80				; hex(x)
dc17 : 617363a8              	db	"asc",'('+0x80				; asc(x$)
dc1b : 76616ca8              	db	"val",'('+0x80				; val(x$)
dc1f : 706978656ca8          	db	"pixel",'('+0x80			; pixel(x,y)
dc25 : 737072686974a8        	db	"sprhit",'('+0x80			; sprhit(sp)
AS65 Assembler for R6502 [1.42].                                     Page  155
---------------------------------- bank0.s -----------------------------------

                             ; Numeric operators, in priority
dc2c : aa                    	db	'*'+0x80					; Multiply
dc2d : af                    	db 	'/'+0x80					; Divide
dc2e : dc                    	db 	'\\'+0x80					; Modulus
dc2f : 3cbc                  	db	'<','<'+0x80				; Shift left
dc31 : 3ebe                  	db	'>','>'+0x80				; Shift right
dc33 : ab                    	db 	'+'+0x80					; Add
dc34 : ad                    	db	'-'+0x80					; Subtract
                             ; Bool and conditional operators, in priority
dc35 : a6                    	db '&'+0x80						; AND
dc36 : fc                    	db '|'+0x80						; OR
dc37 : de                    	db '^'+0x80						; EOR
dc38 : 3cbd                  	db "<",'='+0x80					; Less than or equal
dc3a : 3ebd                  	db ">",'='+0x80					; Greater than or equal
dc3c : 3cbe                  	db "<",'>'+0x80					; Not equal
dc3e : bc                    	db '<'+0x80						; Less than
dc3f : be                    	db '>'+0x80						; Greater than
dc40 : 3dbd                  	db "=",'='+0x80					; Equality (always last)
                             
dc42 : 00                    	db  0
                             
                             
                             	
                             	
                             	include "dflat/tkjmptab.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  TKJUMPTAB.S
                             ;*  Runtime token jump table.
                             ;*  dflat uses four key tables to tokenise and ru
                             ;*  - df_tokensyms    - table of token symbols
                             ;*  - df_tk_tokentype - table of token types
                             ;*  - df_tk_tokenjmp  - table of tokenising routi
                             ;*  - df_rt_tokenjmp  - table of runtime routines
                             ;*  The key is the token symbols.  When a line is
                             ;*  in to the raw (untokenised) buffer, df_tokens
                             ;*  used to identify tokens.  The position of the
                             ;*  token is used to then look up type and jump v
                             ;*  in the other tables.
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code  
                             
                             ; Tokeniser jump table
                             ; In token order of df_tokensyms
dc43 :                       df_tk_tokenjmp
dc43 : 77dd                  	dw	df_tk_assign
dc45 : 27de                  	dw	df_tk_callproc
dc47 : 80dd                  	dw	df_tk_comment
dc49 : c8dd                  	dw	df_tk_println
dc4b : c2dd                  	dw	df_tk_printat
dc4d : c8dd                  	dw	df_tk_print
dc4f : 08de                  	dw	df_tk_def
dc51 : 64de                  	dw	df_tk_enddef
AS65 Assembler for R6502 [1.42].                                     Page  156
---------------------------------- bank0.s -----------------------------------

dc53 : 66de                  	dw	df_tk_return
dc55 : 64de                  	dw	df_tk_abort
dc57 : f7dd                  	dw	df_tk_local
dc59 : e6dd                  	dw	df_tk_dim
dc5b : 64de                  	dw	df_tk_repeat
dc5d : 6ade                  	dw	df_tk_until
dc5f : 0ede                  	dw	df_tk_for
dc61 : 64de                  	dw	df_tk_next
dc63 : 6ade                  	dw	df_tk_while
dc65 : 64de                  	dw	df_tk_wend
dc67 : 6ade                  	dw	df_tk_if
dc69 : 64de                  	dw	df_tk_else
dc6b : 64de                  	dw	df_tk_endif
dc6d : 6ade                  	dw	df_tk_elseif
dc6f : cfdd                  	dw	df_tk_data
dc71 : 77f9                  	dw	df_tk_asm_parse_command
dc73 : 64de                  	dw	df_tk_run
dc75 : b1dd                  	dw	df_tk_list
dc77 : dddd                  	dw	df_tk_input
dc79 : 64de                  	dw	df_tk_text
dc7b : 7ade                  	dw	df_tk_plot
dc7d : 6ade                  	dw	df_tk_cursor
dc7f : 64de                  	dw	df_tk_cls
dc81 : 70de                  	dw	df_tk_poke
dc83 : 70de                  	dw	df_tk_doke
dc85 : 7ade                  	dw	df_tk_sound
dc87 : 83de                  	dw	df_tk_music
dc89 : 83de                  	dw	df_tk_play
dc8b : 6ade                  	dw	df_tk_save
dc8d : 6ade                  	dw	df_tk_load
dc8f : e6dd                  	dw	df_tk_read
dc91 : 64de                  	dw	df_tk_new
dc93 : 7ade                  	dw	df_tk_renum
dc95 : 6ade                  	dw	df_tk_wait
dc97 : 29de                  	dw	df_tk_reset
dc99 : 64de                  	dw	df_tk_hires
dc9b : 70de                  	dw	df_tk_point
dc9d : 83de                  	dw	df_tk_line
dc9f : 70de                  	dw	df_tk_lineto
dca1 : 6ade                  	dw	df_tk_pixmode
dca3 : 6ade                  	dw	df_tk_ink
dca5 : 6ade                  	dw	df_tk_paper
dca7 : 7ade                  	dw	df_tk_circle
dca9 : 6ade                  	dw	df_tk_himem
dcab : 64de                  	dw	df_tk_monitor
dcad : 70de                  	dw	df_tk_sprchar
dcaf : 7ade                  	dw	df_tk_sprpos
dcb1 : 64de                  	dw	df_tk_sprupd
dcb3 : 64de                  	dw	df_tk_sprinit
dcb5 : 70de                  	dw	df_tk_sprmulti
dcb7 : 7ade                  	dw	df_tk_bsave
dcb9 : 70de                  	dw	df_tk_bload
dcbb : 6ade                  	dw	df_tk_tsave
dcbd : 6ade                  	dw	df_tk_tload
                             	
dcbf : 34de                  	dw	df_tk_peek
dcc1 : 34de                  	dw	df_tk_deek
dcc3 : 39de                  	dw	df_tk_stick
dcc5 : 34de                  	dw	df_tk_get
dcc7 : 34de                  	dw	df_tk_chr
dcc9 : 4ade                  	dw	df_tk_left
dccb : 4ade                  	dw	df_tk_right
AS65 Assembler for R6502 [1.42].                                     Page  157
---------------------------------- bank0.s -----------------------------------

dccd : 50de                  	dw	df_tk_mid
dccf : 34de                  	dw	df_tk_len
dcd1 : 34de                  	dw	df_tk_mem
dcd3 : 4ade                  	dw	df_tk_scrn
dcd5 : 34de                  	dw	df_tk_rnd
dcd7 : 3fde                  	dw	df_tk_elapsed
dcd9 : 56de                  	dw	df_tk_call
dcdb : 34de                  	dw	df_tk_hex
dcdd : 34de                  	dw	df_tk_asc
dcdf : 34de                  	dw	df_tk_val
dce1 : 4ade                  	dw	df_tk_pixel
dce3 : 34de                  	dw	df_tk_sprhit
                             	
dce5 : 64de                  	dw	df_tk_mult
dce7 : 64de                  	dw	df_tk_div
dce9 : 64de                  	dw	df_tk_mod
dceb : 64de                  	dw	df_tk_asl
dced : 64de                  	dw	df_tk_lsr
dcef : 64de                  	dw	df_tk_add
dcf1 : 64de                  	dw	df_tk_sub
                             	
dcf3 : 64de                  	dw	df_tk_and
dcf5 : 64de                  	dw	df_tk_or
dcf7 : 64de                  	dw	df_tk_eor
dcf9 : 64de                  	dw	df_tk_lte
dcfb : 64de                  	dw	df_tk_gte
dcfd : 64de                  	dw	df_tk_ne
dcff : 64de                  	dw	df_tk_lt
dd01 : 64de                  	dw	df_tk_gt
dd03 : 64de                  	dw	df_tk_eq
                             
                             
                             	
                             	
                             	
                             	
                             	
                             	include "dflat/tktyptab.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  RTJUMPTAB.S
                             ;*  Runtime token jump table.
                             ;*  dflat uses four key tables to tokenise and ru
                             ;*  - df_tokensyms    - table of token symbols
                             ;*  - df_tk_tokentype - table of token types
                             ;*  - df_tk_tokenjmp  - table of tokenising routi
                             ;*  - df_rt_tokenjmp  - table of runtime routines
                             ;*  The key is the token symbols.  When a line is
                             ;*  in to the raw (untokenised) buffer, df_tokens
                             ;*  used to identify tokens.  The position of the
                             ;*  token is used to then look up type and jump v
                             ;*  in the other tables.
                             ;*
                             ;************************************************
                             
                             	; ROM code
AS65 Assembler for R6502 [1.42].                                     Page  158
---------------------------------- bank0.s -----------------------------------

                             	code  
                             
                             ; Tokeniser type table (is it a keyword, function
                             ; In token order of df_tokensyms
dd05 :                       df_tk_tokentype
dd05 : 01                    	db	DFTK_KW
dd06 : 01                    	db	DFTK_KW
dd07 : 01                    	db	DFTK_KW
dd08 : 01                    	db	DFTK_KW
dd09 : 01                    	db	DFTK_KW
dd0a : 01                    	db	DFTK_KW
dd0b : 01                    	db	DFTK_KW
dd0c : 01                    	db	DFTK_KW
dd0d : 01                    	db	DFTK_KW
dd0e : 01                    	db	DFTK_KW
dd0f : 01                    	db	DFTK_KW
dd10 : 01                    	db	DFTK_KW
dd11 : 01                    	db	DFTK_KW
dd12 : 01                    	db	DFTK_KW
dd13 : 01                    	db	DFTK_KW
dd14 : 01                    	db	DFTK_KW
dd15 : 01                    	db	DFTK_KW
dd16 : 01                    	db	DFTK_KW
dd17 : 01                    	db	DFTK_KW
dd18 : 01                    	db	DFTK_KW
dd19 : 01                    	db	DFTK_KW
dd1a : 01                    	db	DFTK_KW
dd1b : 01                    	db	DFTK_KW
dd1c : 01                    	db	DFTK_KW
dd1d : 01                    	db	DFTK_KW
dd1e : 01                    	db	DFTK_KW
dd1f : 01                    	db	DFTK_KW
dd20 : 01                    	db	DFTK_KW
dd21 : 01                    	db	DFTK_KW
dd22 : 01                    	db	DFTK_KW
dd23 : 01                    	db	DFTK_KW
dd24 : 01                    	db	DFTK_KW
dd25 : 01                    	db	DFTK_KW
dd26 : 01                    	db	DFTK_KW
dd27 : 01                    	db	DFTK_KW
dd28 : 01                    	db	DFTK_KW
dd29 : 01                    	db	DFTK_KW
dd2a : 01                    	db	DFTK_KW
dd2b : 01                    	db	DFTK_KW
dd2c : 01                    	db	DFTK_KW
dd2d : 01                    	db	DFTK_KW
dd2e : 01                    	db	DFTK_KW
dd2f : 01                    	db	DFTK_KW
dd30 : 01                    	db	DFTK_KW
dd31 : 01                    	db	DFTK_KW
dd32 : 01                    	db	DFTK_KW
dd33 : 01                    	db	DFTK_KW
dd34 : 01                    	db	DFTK_KW
dd35 : 01                    	db	DFTK_KW
dd36 : 01                    	db	DFTK_KW
dd37 : 01                    	db	DFTK_KW
dd38 : 01                    	db	DFTK_KW
dd39 : 01                    	db	DFTK_KW
dd3a : 01                    	db	DFTK_KW
dd3b : 01                    	db	DFTK_KW
dd3c : 01                    	db	DFTK_KW
dd3d : 01                    	db	DFTK_KW
AS65 Assembler for R6502 [1.42].                                     Page  159
---------------------------------- bank0.s -----------------------------------

dd3e : 01                    	db	DFTK_KW
dd3f : 01                    	db	DFTK_KW
dd40 : 01                    	db	DFTK_KW
dd41 : 01                    	db	DFTK_KW
dd42 : 01                    	db	DFTK_KW
                             
dd43 : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
dd44 : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
dd45 : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
dd46 : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
dd47 : 42                    	db 	DFTK_FN | DFTK_STR
dd48 : 42                    	db 	DFTK_FN | DFTK_STR
dd49 : 42                    	db 	DFTK_FN | DFTK_STR
dd4a : 42                    	db 	DFTK_FN | DFTK_STR
dd4b : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
dd4c : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
dd4d : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
dd4e : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
dd4f : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
dd50 : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
dd51 : 42                    	db 	DFTK_FN | DFTK_STR
dd52 : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
dd53 : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
dd54 : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
dd55 : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
                             	;* Operators add the order of precedence (0=high
dd56 : 38                    	db 	DFTK_OP | DFTK_INT | DFTK_BYT + 0
dd57 : 38                    	db 	DFTK_OP | DFTK_INT | DFTK_BYT + 0
dd58 : 38                    	db 	DFTK_OP | DFTK_INT | DFTK_BYT + 0
dd59 : 39                    	db 	DFTK_OP | DFTK_INT | DFTK_BYT + 1
dd5a : 39                    	db 	DFTK_OP | DFTK_INT | DFTK_BYT + 1
dd5b : 3e                    	db 	DFTK_OP | DFTK_STROP | DFTK_INT | DFTK_BYT +
dd5c : 3a                    	db 	DFTK_OP | DFTK_INT | DFTK_BYT + 2
                             
dd5d : 3d                    	db 	DFTK_OP | DFTK_INT | DFTK_BYT + 5
dd5e : 3d                    	db 	DFTK_OP | DFTK_INT | DFTK_BYT + 5
dd5f : 3d                    	db 	DFTK_OP | DFTK_INT | DFTK_BYT + 5
dd60 : 3c                    	db 	DFTK_OP | DFTK_INT | DFTK_BYT + 4
dd61 : 3c                    	db 	DFTK_OP | DFTK_INT | DFTK_BYT + 4
dd62 : 3c                    	db 	DFTK_OP | DFTK_INT | DFTK_BYT + 4
dd63 : 3c                    	db 	DFTK_OP | DFTK_INT | DFTK_BYT + 4
dd64 : 3c                    	db 	DFTK_OP | DFTK_INT | DFTK_BYT + 4
dd65 : 3f                    	db 	DFTK_OP | DFTK_INT | DFTK_BYT + 7
                             
                             
                             	
                             	
                             	
                             	
                             
                             	include "dflat/toksubs.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  TOKSUBS.S
                             ;*  Module that implements the tokenisation of ke
                             ;*  When a line is being parsed, the index of the
AS65 Assembler for R6502 [1.42].                                     Page  160
---------------------------------- bank0.s -----------------------------------

                             ;*  found in the symbol table is used to call a r
                             ;*  here.  The job of a routine here is then to f
                             ;*  parse the raw input e.g. a command that takes
                             ;*  parameters, need to do what it needs to ident
                             ;*  Despite the number of keywords in dflat, this
                             ;*  anywhere near the size of rtsubs.s (the runti
                             ;*  equivalent of this) because there is so much 
                             ;*  synactically.
                             ;*  The tokenised output is put in to its own buf
                             ;*  if the whole input was tokenised successfully
                             ;*  dflat will either try and execute (if in imme
                             ;*  mode), or save it to program memory in line n
                             ;*  order.
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code  
                             
dd66 :                       mod_sz_toksubs_s
                             
                             ;****************************************
                             ;* Parse assignment preamble
                             ;****************************************
dd66 :                       df_tk_preassign
                             	; Put assignment token
                             	; assume its a numeric int for now
dd66 : a980             [ 2] 	lda #0x80
dd68 : 20d9d6           [ 6] 	jsr df_tk_put_tok
                             	
                             	; first find or create a variable
dd6b : a900             [ 2] 	lda #0	
dd6d : 2017d8           [ 6] 	jsr df_tk_var
                             	; next char should be '='
dd70 : a93d             [ 2] 	lda #'='
dd72 : 4c6dd7           [ 3] 	jmp df_tk_expect_tok_err
                             
dd75 :                       df_tk_error
                             	SWBRK DFERR_SYNTAX
                             
                             
                             ;****************************************
                             ;* Parse numeric assignment
                             ;****************************************
dd77 :                       df_tk_assign
dd77 : 2066dd           [ 6] 	jsr df_tk_preassign
                             	; tokenise an expression (int or byte)
dd7a : 2053d9           [ 6] 	jsr df_tk_expression
dd7d : b0f6             [ 3] 	bcs df_tk_error
dd7f : 60               [ 6] 	rts
                             
                             
dd80 :                       df_tk_comment
                             	; copy all subsequent chars to token
dd80 : 20ced6           [ 6] 	jsr df_tk_get_buf
dd83 : f006             [ 3] 	beq df_tk_comment_done
dd85 : 20d9d6           [ 6] 	jsr df_tk_put_tok
dd88 : 4c80dd           [ 3] 	jmp df_tk_comment
dd8b :                       df_tk_comment_done
dd8b : 18               [ 2] 	clc
dd8c : 60               [ 6] 	rts
                             
AS65 Assembler for R6502 [1.42].                                     Page  161
---------------------------------- bank0.s -----------------------------------

                             ; Utility to get procedure name with _
dd8d :                       df_tk_listp_procname
                             	; try and find the first proc
dd8d : a95f             [ 2] 	lda #'_'
dd8f : 2061d7           [ 6] 	jsr df_tk_expect_tok
dd92 : b01b             [ 3] 	bcs df_tk_listp_procname_err
                             	; now get first alpha then all alphanum
dd94 : 20c8d6           [ 6] 	jsr df_tk_peek_buf
dd97 : 2016d7           [ 6] 	jsr df_tk_isalpha
dd9a : 9013             [ 3] 	bcc df_tk_listp_procname_err
dd9c :                       df_tk_listp_procname_ch
dd9c : 20c8d6           [ 6] 	jsr df_tk_peek_buf
dd9f : 2023d7           [ 6] 	jsr df_tk_isalphanum
dda2 : 9009             [ 3] 	bcc df_tk_listp_procname_ok
dda4 : 20ced6           [ 6] 	jsr df_tk_get_buf
dda7 : 20d9d6           [ 6] 	jsr df_tk_put_tok
ddaa : 4c9cdd           [ 3] 	jmp df_tk_listp_procname_ch
ddad :                       df_tk_listp_procname_ok
ddad : 18               [ 2] 	clc
ddae : 60               [ 6] 	rts
ddaf :                       df_tk_listp_procname_err
ddaf : 38               [ 2] 	sec
ddb0 : 60               [ 6] 	rts
                             
                             ; list		: list whole program
                             ; list n	: list line n to end
                             ; list *	: list all procedures
                             ; list _proc: list _proc lines
ddb1 :                       df_tk_list
ddb1 : 208ddd           [ 6] 	jsr df_tk_listp_procname
ddb4 : 900a             [ 3] 	bcc df_tk_list_done
                             	; if not found try '*' or normal list
ddb6 :                       df_tk_list_procs
                             	; first try for list symbol
ddb6 : a92a             [ 2] 	lda #'*'
ddb8 : 2061d7           [ 6] 	jsr df_tk_expect_tok
ddbb : 9003             [ 3] 	bcc df_tk_list_done
                             	; else normal line number or nothing
ddbd :                       df_tk_list_line
                             	; tokenise an expression
ddbd : 2053d9           [ 6] 	jsr df_tk_expression
ddc0 :                       df_tk_list_done
ddc0 : 18               [ 2] 	clc
ddc1 : 60               [ 6] 	rts
                             
                             ; printat,print,println can have 0,1 or many expr
ddc2 :                       df_tk_printat
                             	; Must get 2 parms for x,y
ddc2 : 2070de           [ 6] 	jsr df_tk_2parms
                             	; try getting more parms
ddc5 : 4cd4dd           [ 3] 	jmp df_tk_expr_more
ddc8 :                       df_tk_println
ddc8 :                       df_tk_print
                             	; tokenise an expression ok if null
ddc8 : 2053d9           [ 6] 	jsr df_tk_expression
ddcb : 9007             [ 3] 	bcc df_tk_expr_more
ddcd :                       df_tk_print_done
ddcd :                       df_tk_data_done
ddcd : 18               [ 2] 	clc
ddce : 60               [ 6] 	rts
                             
                             ; these must have 1 or more expressions
AS65 Assembler for R6502 [1.42].                                     Page  162
---------------------------------- bank0.s -----------------------------------

ddcf :                       df_tk_data
ddcf :                       df_tk_asm_db
ddcf :                       df_tk_asm_dw
ddcf :                       df_tk_next_expr
                             	; tokenise an expression
ddcf : 2053d9           [ 6] 	jsr df_tk_expression
ddd2 : b05e             [ 4] 	bcs df_tk_error2
                             ; this loop keeps processing comma seprated exore
ddd4 :                       df_tk_expr_more
                             	; is there more to come?
ddd4 : a92c             [ 2] 	lda #','
ddd6 : 2061d7           [ 6] 	jsr df_tk_expect_tok
ddd9 : b0f2             [ 3] 	bcs df_tk_data_done
dddb : 90f2             [ 3] 	bcc df_tk_next_expr
                             
dddd :                       df_tk_input
dddd : 202fd7           [ 6] 	jsr df_tk_skip_ws
                             	; tokenise a variable
dde0 : a900             [ 2] 	lda #0
dde2 : 2017d8           [ 6] 	jsr df_tk_var
                             	; either cc or cs depending on error condition
dde5 : 60               [ 6] 	rts
                             	
dde6 :                       df_tk_read
dde6 :                       df_tk_dim
dde6 : 202fd7           [ 6] 	jsr df_tk_skip_ws
                             	; tokenise a variable
dde9 : a900             [ 2] 	lda #0
ddeb : 2017d8           [ 6] 	jsr df_tk_var
                             	; if not at the end then keep going
ddee : a92c             [ 2] 	lda #','
ddf0 : 2061d7           [ 6] 	jsr df_tk_expect_tok
ddf3 : 90f1             [ 3] 	bcc df_tk_dim
ddf5 : 18               [ 2] 	clc
ddf6 : 60               [ 6] 	rts
                             
ddf7 :                       df_tk_local
ddf7 : 202fd7           [ 6] 	jsr df_tk_skip_ws
                             	; tokenise a variable
ddfa : a900             [ 2] 	lda #0
ddfc : 2049d8           [ 6] 	jsr df_tk_localvar
                             	; if not at the end then keep going
ddff : a92c             [ 2] 	lda #','
de01 : 2061d7           [ 6] 	jsr df_tk_expect_tok
de04 : 90f1             [ 4] 	bcc df_tk_local
de06 : 18               [ 2] 	clc
de07 : 60               [ 6] 	rts
                             
                             ; A = 0 : Def
                             ; A = 1 : Call
de08 :                       df_tk_def
de08 : a900             [ 2] 	lda #0
de0a : 205fd8           [ 6] 	jsr df_tk_proc
de0d : 60               [ 6] 	rts
                             
                             
                             ; syntax : for a=1,10,1
de0e :                       df_tk_for
de0e : 202fd7           [ 6] 	jsr df_tk_skip_ws
                             
                             	; tokenise the for variable
de11 : a901             [ 2] 	lda #DFVVT_INT
AS65 Assembler for R6502 [1.42].                                     Page  163
---------------------------------- bank0.s -----------------------------------

de13 : 2017d8           [ 6] 	jsr df_tk_var
                             
                             	; always expect '='
                             	; then starting value
de16 : a93d             [ 2] 	lda #'='
de18 : 205fd9           [ 6] 	jsr df_tk_tok_expression
                             	
                             	; always expect ',' separator
                             	; then ending value
de1b : a92c             [ 2] 	lda #','
de1d : 205fd9           [ 6] 	jsr df_tk_tok_expression
                             
                             	; always expect ',' separator
                             	; then step value
de20 : a92c             [ 2] 	lda #','
de22 : 205fd9           [ 6] 	jsr df_tk_tok_expression
                             
de25 :                       df_tk_for_done
de25 : 18               [ 2] 	clc
de26 : 60               [ 6] 	rts
                             	
                             ; call to proc should not occur by itself
de27 :                       df_tk_callproc
de27 : 38               [ 2] 	sec
de28 : 60               [ 6] 	rts
                             
                             ; timer reset expects an int variable only
de29 :                       df_tk_reset
de29 : 202fd7           [ 6] 	jsr df_tk_skip_ws
                             
                             	; tokenise a variable
de2c : a901             [ 2] 	lda #DFVVT_INT
de2e : 2017d8           [ 6] 	jsr df_tk_var
de31 : 60               [ 6] 	rts
                             
de32 :                       df_tk_error2
                             	SWBRK DFERR_SYNTAX
                             
                             
                             ; These functions expect 1 parmeter
de34 :                       df_tk_len
de34 :                       df_tk_chr
de34 :                       df_tk_get
de34 :                       df_tk_deek
de34 :                       df_tk_vpeek
de34 :                       df_tk_peek
de34 :                       df_tk_mem
de34 :                       df_tk_rnd
de34 :                       df_tk_hex
de34 :                       df_tk_asc
de34 :                       df_tk_val
de34 :                       df_tk_sprhit
de34 : 2053d9           [ 6] 	jsr df_tk_expression
de37 : b0f9             [ 3] 	bcs df_tk_error2
de39 :                       df_tk_closebrkt
de39 :                       df_tk_stick				; This function needs no parms
de39 : a929             [ 2] 	lda #')'
de3b : 206dd7           [ 6] 	jsr df_tk_expect_tok_err
de3e : 60               [ 6] 	rts
                             
                             ; This function expects a variable only
de3f :                       df_tk_elapsed
AS65 Assembler for R6502 [1.42].                                     Page  164
---------------------------------- bank0.s -----------------------------------

de3f : 202fd7           [ 6] 	jsr df_tk_skip_ws
                             
                             	; tokenise a variable
de42 : a901             [ 2] 	lda #DFVVT_INT
de44 : 2017d8           [ 6] 	jsr df_tk_var
                             	; must have close braket
de47 : 4c39de           [ 3] 	jmp df_tk_closebrkt
                             
                             ; These functions expect 2 parameters
de4a :                       df_tk_left
de4a :                       df_tk_right
de4a :                       df_tk_scrn
de4a :                       df_tk_pixel
de4a : 2070de           [ 6] 	jsr df_tk_2parms
de4d : 4c39de           [ 3] 	jmp df_tk_closebrkt
                             
                             ; These functions expect 3 parameters
de50 :                       df_tk_mid
de50 : 207ade           [ 6] 	jsr df_tk_3parms
de53 : 4c39de           [ 3] 	jmp df_tk_closebrkt
                             
                             ; These functions expect 4 parameters
de56 :                       df_tk_call
de56 : 2070de           [ 6] 	jsr df_tk_2parms
de59 : a92c             [ 2] 	lda #','
de5b : 206dd7           [ 6] 	jsr df_tk_expect_tok_err
de5e : 2070de           [ 6] 	jsr df_tk_2parms
de61 : 4c39de           [ 3] 	jmp df_tk_closebrkt
                             
                             ;all these commands require no parameters
de64 :                       df_tk_else
de64 :                       df_tk_endif
de64 :                       df_tk_enddef
de64 :                       df_tk_abort
de64 :                       df_tk_repeat
de64 :                       df_tk_next
de64 :                       df_tk_wend
de64 :                       df_tk_run
de64 :                       df_tk_dir
de64 :                       df_tk_cls
de64 :                       df_tk_new
de64 :                       df_tk_mult
de64 :                       df_tk_div
de64 :                       df_tk_mod
de64 :                       df_tk_asl
de64 :                       df_tk_lsr
de64 :                       df_tk_add
de64 :                       df_tk_sub
de64 :                       df_tk_and
de64 :                       df_tk_or
de64 :                       df_tk_eor
de64 :                       df_tk_lte
de64 :                       df_tk_lt
de64 :                       df_tk_gte
de64 :                       df_tk_gt
de64 :                       df_tk_ne
de64 :                       df_tk_eq
de64 :                       df_tk_monitor
de64 :                       df_tk_sprupd
de64 :                       df_tk_sprinit
de64 :                       df_tk_text
de64 :                       df_tk_hires
AS65 Assembler for R6502 [1.42].                                     Page  165
---------------------------------- bank0.s -----------------------------------

de64 : 18               [ 2] 	clc
de65 : 60               [ 6] 	rts
                             
                             ; 0 or 1 parameter special!
de66 :                       df_tk_return
de66 : 2053d9           [ 6] 	jsr df_tk_expression
de69 : 60               [ 6] 	rts
                             
                             
                             ; These commands expect 1 parameter	
de6a :                       df_tk_while
de6a :                       df_tk_until
de6a :                       df_tk_if
de6a :                       df_tk_elseif
de6a :                       df_tk_wait
de6a :                       df_tk_cursor
de6a :                       df_tk_del
de6a :                       df_tk_chdir
de6a :                       df_tk_load
de6a :                       df_tk_save
de6a :                       df_tk_tload
de6a :                       df_tk_tsave
de6a :                       df_tk_pixmode
de6a :                       df_tk_ink
de6a :                       df_tk_paper
de6a :                       df_tk_himem
                             
de6a :                       df_tk_asm_org
de6a :                       df_tk_asm_opt
de6a :                       df_tk_asm_ds
                             
                             	; first parm
de6a : 2053d9           [ 6] 	jsr df_tk_expression
de6d : b0c3             [ 3] 	bcs df_tk_error2
de6f : 60               [ 6] 	rts
                             
                             ; These commands expect 2 numeric parameters
de70 :                       df_tk_poke
de70 :                       df_tk_doke
de70 :                       df_tk_point
de70 :                       df_tk_sprchar
de70 :                       df_tk_sprmulti
de70 :                       df_tk_bload
de70 :                       df_tk_lineto
de70 :                       df_tk_2parms
                             	; first parm
de70 : 2053d9           [ 6] 	jsr df_tk_expression
de73 : b0bd             [ 3] 	bcs df_tk_error2
                             	; tokenise second parm
de75 : a92c             [ 2] 	lda #','
de77 : 4c5fd9           [ 3] 	jmp df_tk_tok_expression
                             
                             ; these commands expect 3 numeric parameters
de7a :                       df_tk_hchar
de7a :                       df_tk_plot
de7a :                       df_tk_circle
de7a :                       df_tk_sound
de7a :                       df_tk_colour
de7a :                       df_tk_spritepos
de7a :                       df_tk_renum
de7a :                       df_tk_sprpos
de7a :                       df_tk_bsave
AS65 Assembler for R6502 [1.42].                                     Page  166
---------------------------------- bank0.s -----------------------------------

de7a :                       df_tk_3parms
de7a : 2070de           [ 6] 	jsr df_tk_2parms
                             	; tokenise third parm
de7d : a92c             [ 2] 	lda #','
de7f : 205fd9           [ 6] 	jsr df_tk_tok_expression
de82 : 60               [ 6] 	rts
                             
                             ; these commands expect 4 numeric parameters
de83 :                       df_tk_play
de83 :                       df_tk_music
de83 :                       df_tk_line
de83 :                       df_tk_4parms
de83 : 2070de           [ 6] 	jsr df_tk_2parms
de86 : a92c             [ 2] 	lda #','
de88 : 206dd7           [ 6] 	jsr df_tk_expect_tok_err
de8b : 2070de           [ 6] 	jsr df_tk_2parms
de8e : 60               [ 6] 	rts
                             
de8f :                       mod_sz_toksubs_e
                             
                             
de8f :                       mod_sz_tokenise_e
                             
                             
                             
                             	include "dflat/progedit.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  PROGEDIT.S
                             ;*  dflat module to enable editing of a dflat pro
                             ;*  dflat bascially starts here - waiting for use
                             ;*  when a line is entered, if it is not preceede
                             ;*  line number it is tokenised and attempted to 
                             ;*  immediatly.  If it is preceeded by a line num
                             ;*  number is used to save the tokenised line in 
                             ;*  position in memory.
                             ;*  So this is just like a good old editing sessi
                             ;*  nearly any common flavour of 80s basic. Howev
                             ;*  tokenises everything except whitespace and st
                             ;*  constants - even when saving.  Unlike my trus
                             ;*  where I could type in any garbage and it woul
                             ;*  saved with the line number, dflat needs to be
                             ;*  tokenise the line.  So it's actually a bit mo
                             ;*  Atari 8 bit BASIC.
                             ;*
                             ;************************************************
                             
de8f :                       mod_sz_progedit_s
                             
                             ;****************************************
                             ;* df_pg_find_line
                             ;* Find a line number in X(L), A(H)
                             ;* Return X(L), A(H) of line, Y = Length
                             ;* C=1 Exact match not found, C=0 Exact Found
                             ;* If not exact match then next highest line addr
                             ;* Will be in X and A
AS65 Assembler for R6502 [1.42].                                     Page  167
---------------------------------- bank0.s -----------------------------------

                             ;****************************************
de8f :                       df_pg_find_line
de8f : 863d             [ 3] 	stx num_a
de91 : 853e             [ 3] 	sta num_a+1
de93 : a565             [ 3] 	lda df_prgstrt
de95 : 8549             [ 3] 	sta num_tmp
de97 : a566             [ 3] 	lda df_prgstrt+1
de99 : 854a             [ 3] 	sta num_tmp+1
de9b :                       df_pg_check_next_line
de9b : a549             [ 3] 	lda num_tmp
de9d : c567             [ 3] 	cmp df_prgend
de9f : d011             [ 3] 	bne df_pg_check_line
dea1 : a54a             [ 3] 	lda num_tmp+1
dea3 : c568             [ 3] 	cmp df_prgend+1
dea5 : d00b             [ 3] 	bne df_pg_check_line
dea7 :                       df_pr_line_gt_target	
                             	; End of program or line > target
                             	; Load Y with the length
dea7 : a200             [ 2] 	ldx #0
dea9 : a149             [ 6] 	lda (num_tmp,x)
deab : a8               [ 2] 	tay
deac : a649             [ 3] 	ldx num_tmp
deae : a54a             [ 3] 	lda num_tmp+1
deb0 : 38               [ 2] 	sec
deb1 : 60               [ 6] 	rts
deb2 :                       df_pg_check_line
deb2 : a001             [ 2] 	ldy #DFTK_LINNUM
deb4 : a53d             [ 3] 	lda num_a
deb6 : d149             [ 5] 	cmp (num_tmp),y
deb8 : d012             [ 3] 	bne df_pr_line_nomatch
deba : c8               [ 2] 	iny
debb : a53e             [ 3] 	lda num_a+1
debd : d149             [ 5] 	cmp (num_tmp),y
debf : d00b             [ 3] 	bne df_pr_line_nomatch
                             	; Got an exact match
dec1 : a200             [ 2] 	ldx #0
dec3 : a149             [ 6] 	lda (num_tmp,x)
dec5 : a8               [ 2] 	tay
dec6 : a649             [ 3] 	ldx num_tmp
dec8 : a54a             [ 3] 	lda num_tmp+1
deca : 18               [ 2] 	clc
decb : 60               [ 6] 	rts
decc :                       df_pr_line_nomatch
                             	; Check if this line > target
decc : 38               [ 2] 	sec
decd : a001             [ 2] 	ldy #DFTK_LINNUM
decf : a53d             [ 3] 	lda num_a
ded1 : f149             [ 5] 	sbc (num_tmp),y
ded3 : c8               [ 2] 	iny
ded4 : a53e             [ 3] 	lda num_a+1
ded6 : f149             [ 5] 	sbc (num_tmp),y
ded8 : 90cd             [ 3] 	bcc df_pr_line_gt_target
deda :                       df_pr_line_next
                             	; Else we go to next line
deda : a200             [ 2] 	ldx #0
dedc : 18               [ 2] 	clc
dedd : a549             [ 3] 	lda num_tmp
dedf : 6149             [ 6] 	adc (num_tmp,x)
dee1 : 8549             [ 3] 	sta num_tmp
dee3 : a54a             [ 3] 	lda num_tmp+1
dee5 : 6900             [ 2] 	adc #0
dee7 : 854a             [ 3] 	sta num_tmp+1
AS65 Assembler for R6502 [1.42].                                     Page  168
---------------------------------- bank0.s -----------------------------------

dee9 : 4c9bde           [ 3] 	jmp df_pg_check_next_line
                             	
                             ;****************************************
                             ;* df_pg_insert_block
                             ;* Insert a block at adr (X, A) of size Y
                             ;* df_prgend updated
                             ;* C=1 Error, C=0 Ok
                             ;****************************************
deec :                       df_pg_insert_block
                             	; Inserting requires a block copy from
                             	; end of program space to the insert address
                             	
                             	; Save address as this is the lowest address
deec : 863d             [ 3] 	stx num_a
deee : 853e             [ 3] 	sta num_a+1
                             	; End of program space is the first byte to move
def0 : a567             [ 3] 	lda df_prgend
def2 : 8545             [ 3] 	sta num_x
def4 : a568             [ 3] 	lda df_prgend+1
def6 : 8546             [ 3] 	sta num_x+1	
def8 :                       df_pg_insert_byte
                             	; Move a byte from the current top
def8 : a200             [ 2] 	ldx #0
defa : a145             [ 6] 	lda (num_x,x)
                             	; To the new top (+Y)
defc : 9145             [ 5] 	sta (num_x),y
                             	; Compare current address with lowest
defe : a545             [ 3] 	lda num_x
df00 : c53d             [ 3] 	cmp num_a
df02 : d014             [ 3] 	bne df_pg_insert_next_byte
df04 : a546             [ 3] 	lda num_x+1
df06 : c53e             [ 3] 	cmp num_a+1
df08 : d00e             [ 3] 	bne df_pg_insert_next_byte
                             	; Finished, update program end pointer
df0a : 18               [ 2] 	clc
df0b : 98               [ 2] 	tya
df0c : 6567             [ 3] 	adc df_prgend
df0e : 8567             [ 3] 	sta df_prgend
df10 : a568             [ 3] 	lda df_prgend+1
df12 : 6900             [ 2] 	adc #0
df14 : 8568             [ 3] 	sta df_prgend+1
df16 : 18               [ 2] 	clc
df17 : 60               [ 6] 	rts
df18 :                       df_pg_insert_next_byte
                             	; Decrement current address
df18 : 38               [ 2] 	sec
df19 : a545             [ 3] 	lda num_x
df1b : e901             [ 2] 	sbc #1
df1d : 8545             [ 3] 	sta num_x
df1f : a546             [ 3] 	lda num_x+1
df21 : e900             [ 2] 	sbc #0
df23 : 8546             [ 3] 	sta num_x+1
df25 : 4cf8de           [ 3] 	jmp df_pg_insert_byte
                             
                             ;****************************************
                             ;* df_pg_delete_block
                             ;* Delete a block at adr (X, A) of size Y
                             ;* df_prgend updated
                             ;* C=1 Error, C=0 Ok
                             ;****************************************
df28 :                       df_pg_delete_block
                             	; Deleting requires a block copy from
AS65 Assembler for R6502 [1.42].                                     Page  169
---------------------------------- bank0.s -----------------------------------

                             	; deletion address to end of program
                             	
                             	; Save address as this is the start address
df28 : 863d             [ 3] 	stx num_a
df2a : 853e             [ 3] 	sta num_a+1
df2c :                       df_pg_delete_byte
                             	; Move a byte from current+Y
df2c : b13d             [ 5] 	lda (num_a),y
                             	; Down to current
df2e : a200             [ 2] 	ldx #0
df30 : 813d             [ 6] 	sta (num_a,x)
                             	; Compare current address with lowest
df32 : a53d             [ 3] 	lda num_a
df34 : c567             [ 3] 	cmp df_prgend
df36 : d017             [ 3] 	bne df_pg_delete_next_byte
df38 : a53e             [ 3] 	lda num_a+1
df3a : c568             [ 3] 	cmp df_prgend+1
df3c : d011             [ 3] 	bne df_pg_delete_next_byte
                             	; Finished, update program end pointer
df3e : 843d             [ 3] 	sty num_a
df40 : 38               [ 2] 	sec
df41 : a567             [ 3] 	lda df_prgend
df43 : e53d             [ 3] 	sbc num_a
df45 : 8567             [ 3] 	sta df_prgend
df47 : a568             [ 3] 	lda df_prgend+1
df49 : e900             [ 2] 	sbc #0
df4b : 8568             [ 3] 	sta df_prgend+1
df4d : 18               [ 2] 	clc
df4e : 60               [ 6] 	rts
df4f :                       df_pg_delete_next_byte
                             	; Decrement current address
df4f : 18               [ 2] 	clc
df50 : a53d             [ 3] 	lda num_a
df52 : 6901             [ 2] 	adc #1
df54 : 853d             [ 3] 	sta num_a
df56 : a53e             [ 3] 	lda num_a+1
df58 : 6900             [ 2] 	adc #0
df5a : 853e             [ 3] 	sta num_a+1
df5c : 4c2cdf           [ 3] 	jmp df_pg_delete_byte
                             
                             
                             ;****************************************
                             ;* Get a line of input
                             ;* Input: C=1 for echo, 0 for no echo
                             ;* Output: C=0 means linbuff is valid
                             ;****************************************
df5f :                       df_pg_inputline
                             	; C is set on input for echo or not
                             	; Read a line of input
df5f : 2060c4           [ 6] 	jsr io_read_line
                             	
                             	; If nothing entered then sec
df62 : c000             [ 2] 	cpy #0
df64 : d002             [ 3] 	bne df_pg_inputline_ok
df66 : 38               [ 2] 	sec
df67 : 60               [ 6] 	rts
df68 :                       df_pg_inputline_ok
                             	; Copy input bytes to line buffer
                             	; for lexical analysis
df68 :                       df_pg_copyinputtolinbuff
df68 : b139             [ 5] 	lda (buf_lo),y
df6a : 990004           [ 5] 	sta df_linbuff,y
AS65 Assembler for R6502 [1.42].                                     Page  170
---------------------------------- bank0.s -----------------------------------

df6d : 88               [ 2] 	dey
df6e : 10f8             [ 3] 	bpl df_pg_copyinputtolinbuff
df70 : 18               [ 2] 	clc
df71 : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* df_pg_dflat
                             ;* Start a dflat editing session
                             ;****************************************
df72 :                       df_pg_dflat
                             	; stack pointer
df72 : ba               [ 2] 	tsx
df73 : 865f             [ 3] 	stx df_sp
                             	; error handler address
df75 : a985             [ 2] 	lda #lo(df_trap_error)
df77 : 8560             [ 3] 	sta df_pc
df79 : a9f8             [ 2] 	lda #hi(df_trap_error)
df7b : 8561             [ 3] 	sta df_pc+1
                             	
                             	; make sure normal I/O is resumed
                             	;jsr io_init_default
df7d :                       df_pg_prompt
df7d : a216             [ 2] 	ldx #lo(df_pg_prompt_msg)
df7f : a9e0             [ 2] 	lda #hi(df_pg_prompt_msg)
df81 : 2099c4           [ 6] 	jsr io_print_line
df84 : a900             [ 2] 	lda #0
df86 : 855e             [ 3] 	sta df_immed
df88 :                       df_pg_getcommand
                             	; current line is the token buffer when editing
df88 : a980             [ 2] 	lda #lo(df_tokbuff)
df8a : 8586             [ 3] 	sta df_currlin
df8c : a904             [ 2] 	lda #hi(df_tokbuff)
df8e : 8587             [ 3] 	sta df_currlin+1
df90 : 38               [ 2] 	sec
df91 : 205fdf           [ 6] 	jsr df_pg_inputline
df94 : b01b             [ 3] 	bcs df_pg_done
df96 : 20b3df           [ 6] 	jsr df_pg_tokenise
df99 : a55e             [ 3] 	lda df_immed
df9b : f0eb             [ 3] 	beq df_pg_getcommand
                             	; clear variables ready to run the statement
df9d : 201de0           [ 6] 	jsr df_initrun
                             	; run from tokbuff
dfa0 : a280             [ 2] 	ldx #lo(df_tokbuff)
dfa2 : a904             [ 2] 	lda #hi(df_tokbuff)
                             	; always skip length and line number
dfa4 : a003             [ 2] 	ldy #3
dfa6 : 8488             [ 3] 	sty df_exeoff
                             	; init currlin
dfa8 : 200ce4           [ 6] 	jsr df_rt_init_stat_ptr
                             	; start execution
dfab : 2021e4           [ 6] 	jsr df_rt_exec_stat
                             	; Go and get another line of input
dfae : 4c7ddf           [ 3] 	jmp df_pg_prompt
                             	; if blank line then return to cmd
dfb1 :                       df_pg_done
dfb1 : 18               [ 2] 	clc
dfb2 : 60               [ 6] 	rts
                             
                             	; tokenise the line
dfb3 :                       df_pg_tokenise
dfb3 : a900             [ 2] 	lda #0
AS65 Assembler for R6502 [1.42].                                     Page  171
---------------------------------- bank0.s -----------------------------------

dfb5 : 855d             [ 3] 	sta errno
dfb7 : 2097d9           [ 6] 	jsr df_lexer_line
                             	; check if line number == 0
dfba : ad8104           [ 4] 	lda df_tokbuff+DFTK_LINNUM
dfbd : d00f             [ 3] 	bne df_pg_line_number
dfbf : ad8204           [ 4] 	lda df_tokbuff+DFTK_LINNUM+1
dfc2 : d00a             [ 3] 	bne df_pg_line_number
                             	; check if line empty
dfc4 : ad8004           [ 4] 	lda df_tokbuff
dfc7 : f004             [ 3] 	beq df_pg_nothing
                             	
                             	; line number == 0 so in immediate mode from tok
                             	; don't zero out the line length as some routine
                             	; run the line in immediate mode
dfc9 : a901             [ 2] 	lda #1
dfcb : 855e             [ 3] 	sta df_immed
dfcd :                       df_pg_nothing
dfcd : 60               [ 6] 	rts
                             
                             	; put the numbered line in to the right bit of m
dfce :                       df_pg_line_number
                             	; Check if this line exists
dfce : ad8104           [ 4] 	lda df_tokbuff+DFTK_LINNUM
dfd1 : aa               [ 2] 	tax
dfd2 : ad8204           [ 4] 	lda df_tokbuff+DFTK_LINNUM+1
dfd5 : 208fde           [ 6] 	jsr df_pg_find_line
                             	; Save line address for later X then A
dfd8 : 8538             [ 3] 	sta tmp_d
dfda : 8a               [ 2] 	txa
dfdb : 48               [ 3] 	pha
dfdc : a538             [ 3] 	lda tmp_d
dfde : 48               [ 3] 	pha
                             	; If line exists then it needs deleting
dfdf : b003             [ 3] 	bcs df_pg_skip_del_line
                             
                             	; delete line from program
dfe1 : 2028df           [ 6] 	jsr df_pg_delete_block
dfe4 :                       df_pg_skip_del_line
                             	; If line length is zero
                             	; then nothing else to do (i.e. line was deleted
dfe4 : ad8004           [ 4] 	lda df_tokbuff+DFTK_LINLEN
                             	; save the tokenised line length
dfe7 : 48               [ 3] 	pha
dfe8 : d004             [ 3] 	bne df_pg_insertline
                             	; Length was zero, so get temp stuff off stack
dfea : 68               [ 4] 	pla
dfeb : 68               [ 4] 	pla
dfec : 68               [ 4] 	pla
dfed : 60               [ 6] 	rts
                             
                             	; insert a program line unless it is immediate
dfee :                       df_pg_insertline
                             	; Restore previously saved length
dfee : 68               [ 4] 	pla
dfef : a8               [ 2] 	tay
                             	; Restore previously saved address to reinsert t
dff0 : 68               [ 4] 	pla
dff1 : 8538             [ 3] 	sta tmp_d
dff3 : 68               [ 4] 	pla
dff4 : aa               [ 2] 	tax
dff5 : a538             [ 3] 	lda tmp_d
                             	; And save it all back to stack again A,X,Y
AS65 Assembler for R6502 [1.42].                                     Page  172
---------------------------------- bank0.s -----------------------------------

                             	_pushAXY
                             
                             	; We now have insert address and length
e000 : 20ecde           [ 6] 	jsr df_pg_insert_block
                             	; Restore length and sub 1 to get index in to th
e003 : 68               [ 4] 	pla
e004 : a8               [ 2] 	tay
e005 : 88               [ 2] 	dey
                             	; Restore address to a pointer, X is pulled firs
e006 : 68               [ 4] 	pla
e007 : aa               [ 2] 	tax
e008 : 863d             [ 3] 	stx num_a
e00a : 68               [ 4] 	pla
e00b : 853e             [ 3] 	sta num_a+1
                             	; num_a is destination, tokbuff is source, Y is 
e00d :                       df_pg_insertlinbyte
e00d : b98004           [ 4] 	lda df_tokbuff,y
e010 : 913d             [ 5] 	sta (num_a),y
e012 : 88               [ 2] 	dey
e013 : 10f8             [ 3] 	bpl df_pg_insertlinbyte
e015 : 60               [ 6] 	rts
                             	
e016 :                       df_pg_prompt_msg
e016 : 52656164790d00        	db "Ready",UTF_CR,0
                             
e01d :                       mod_sz_progedit_e
                             
                             	include "dflat/runtime.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  RUNTIME.S
                             ;*  This module is the runtime coordinator.  When
                             ;*  wants to run a program, execution of statemen
                             ;*  required procedure starts and proceeds from t
                             ;*  according to normal program flow.
                             ;*  This module also contains critical routines f
                             ;*  evaluation of expressions (numeric and string
                             ;*  Whilst the code to implement a specific comma
                             ;*  rtsubs.s, this is the key module that control
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code
                             
e01d :                       mod_sz_runtime_s
                             
                             ;****************************************
                             ;* df_initrun
                             ;* Initialise program space for runtime
                             ;****************************************
e01d :                       df_initrun
                             	; Set the key mask to check every 128 instructio
e01d : a980             [ 2] 	lda #0x80
e01f : 855c             [ 3] 	sta df_checkmsk
                             
AS65 Assembler for R6502 [1.42].                                     Page  173
---------------------------------- bank0.s -----------------------------------

                             	; String and array heap initialisation
                             	; Grows up from end of prog space PLUS 1
                             	; Initially empty (dim will allocate)
                             	_cpyZPWord df_prgend,df_starstrt
                             
                             	_incZPWord df_starstrt
                             
                             	_cpyZPWord df_starstrt,df_starend
                             
                             
e037 : a2ff             [ 2] 	ldx #0xff
                             	; Reset runtime stack (grows down)
e039 : 8676             [ 3] 	stx df_rtstop
                             	; make X=0
e03b : e8               [ 2] 	inx
                             	; Reset parameter stack (grows up)
e03c : 8677             [ 3] 	stx df_parmtop
                             	; Reset data pointer high byte
e03e : 8695             [ 3] 	stx df_currdat+1
                             	; if nest counter zeroed
e040 : 8693             [ 3] 	stx df_ifnest
                             
                             	; clear proc addresses
e042 : 2046e0           [ 6] 	jsr df_rt_init_vvt
                             
                             ;	clc
e045 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Initialise vvt
                             ;****************************************
e046 :                       df_rt_init_vvt
                             	; starting at beginning of vvt
                             	_cpyZPWord df_vvtend,df_tmpptra
                             
e04e : a200             [ 2] 	ldx #0
e050 :                       df_rt_init_vvt_slot
e050 : a5a1             [ 3] 	lda df_tmpptra
e052 : c56d             [ 3] 	cmp df_vvtstrt
e054 : d006             [ 3] 	bne df_rt_init_vvt_slot_undim
e056 : a5a2             [ 3] 	lda df_tmpptra+1
e058 : c56e             [ 3] 	cmp df_vvtstrt+1
e05a : f02d             [ 3] 	beq df_rt_init_done
e05c :                       df_rt_init_vvt_slot_undim
                             	; Only zero out proc and array pointers
                             	; Scalar variables are not initialised
e05c : a000             [ 2] 	ldy #0
e05e : b1a1             [ 5] 	lda (df_tmpptra),y
e060 : 29c0             [ 2] 	and #DFVVT_PROC|DFVVT_ARRY
e062 : f016             [ 3] 	beq df_rt_init_vvt_skip
                             	; skip over the first byte which is variable typ
e064 : c8               [ 2] 	iny
                             	; zero out first 3 bytes for proc and arrays
e065 : a900             [ 2] 	lda #0
e067 : 91a1             [ 5] 	sta (df_tmpptra),y
e069 : c8               [ 2] 	iny
e06a : 91a1             [ 5] 	sta (df_tmpptra),y
e06c : c8               [ 2] 	iny
e06d : 91a1             [ 5] 	sta (df_tmpptra),y
e06f : c8               [ 2] 	iny
                             	; before doing dim2 check if proc
                             	; as we don't want to erase the parm count
AS65 Assembler for R6502 [1.42].                                     Page  174
---------------------------------- bank0.s -----------------------------------

e070 : a1a1             [ 6] 	lda (df_tmpptra,x)
e072 : 2940             [ 2] 	and #DFVVT_PROC
e074 : d004             [ 3] 	bne df_rt_init_vvt_skip
                             	; if not proc then zero dim2
e076 : a900             [ 2] 	lda #0
e078 : 91a1             [ 5] 	sta (df_tmpptra),y
e07a :                       df_rt_init_vvt_skip
                             	; increment pointer to next slot
                             	_adcZPWord df_tmpptra,8
                             
e087 : 90c7             [ 3] 	bcc df_rt_init_vvt_slot 	; Always branches
e089 :                       df_rt_init_done
e089 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Evaluate a numeric expression
                             ;* pop  X,A result from operator stack
                             ;****************************************
e08a :                       df_rt_getnval
                             	; evaluate the expression
e08a : 2090e0           [ 6] 	jsr df_rt_neval
                             	; get X,A off operator stack
e08d : 4c68f7           [ 3] 	jmp df_ost_popInt
                             
                             
                             ;****************************************
                             ;* Evaluate a numeric expression
                             ;* Push result to operator stack
                             ;****************************************
e090 :                       df_rt_neval
                             	; push terminator on cpu stack
                             	; so we know where we are
e090 : a900             [ 2] 	lda #0
e092 : 48               [ 3] 	pha
                             
                             	; find escape token or keyword token
                             	; if escape token push on to operand stack
                             	; if keyword token push on to operator stack
e093 :                       df_rt_neval_optk
e093 : a488             [ 3] 	ldy df_exeoff
                             	; check end of line
                             
e095 : c47e             [ 3] 	cpy df_eolidx
e097 : f03c             [ 3] 	beq df_rt_neval_process
e099 : c47f             [ 3] 	cpy df_nxtstidx
e09b : f038             [ 3] 	beq df_rt_neval_process
e09d : b186             [ 5] 	lda (df_currlin),y
e09f : 3022             [ 3] 	bmi df_rt_neval_tk
e0a1 : c920             [ 2] 	cmp #DFTK_ESCVAL
e0a3 : 9018             [ 3] 	bcc df_rt_neval_esc
                             	; check for evaluation terminators
                             	; specifically ',' and ']'
e0a5 : c92c             [ 2] 	cmp #','
e0a7 : f02c             [ 3] 	beq df_rt_neval_process
e0a9 : c95d             [ 2] 	cmp #']'
e0ab : f028             [ 3] 	beq df_rt_neval_process
                             	; check for brackets
                             	; if close bracket then process
e0ad : c929             [ 2] 	cmp #')'
e0af : f024             [ 3] 	beq df_rt_neval_process
                             	; if bracket then evaluate expression recursivel
e0b1 : c928             [ 2] 	cmp #'('
AS65 Assembler for R6502 [1.42].                                     Page  175
---------------------------------- bank0.s -----------------------------------

e0b3 : d02f             [ 3] 	bne df_rt_neval_nextbyte
                             	; move past open bracket
e0b5 : e688             [ 5] 	inc df_exeoff
                             	; call evaluation function recursively
e0b7 : 2090e0           [ 6] 	jsr df_rt_neval
e0ba : 4ce4e0           [ 3] 	jmp df_rt_neval_nextbyte
e0bd :                       df_rt_neval_esc
e0bd : 2015e1           [ 6] 	jsr df_rt_eval_esc
e0c0 : 4ce4e0           [ 3] 	jmp df_rt_neval_nextbyte
                             	; if a token then push on operator stack
e0c3 :                       df_rt_neval_tk
e0c3 : 297f             [ 2] 	and #0x7f
                             	; check if op (look up type using X as index)
                             	; X contains the current operator index
                             
e0c5 : aa               [ 2] 	tax
e0c6 : bd05dd           [ 4] 	lda df_tk_tokentype,x
                             	; A contains token type
e0c9 : 48               [ 3] 	pha
e0ca : 2908             [ 2] 	and #DFTK_OP
e0cc : d01a             [ 3] 	bne df_rt_neval_tk_opp
                             	; check if fn
e0ce : 68               [ 4] 	pla
e0cf : 2902             [ 2] 	and #DFTK_FN
e0d1 : d00c             [ 3] 	bne df_rt_neval_tk_fn
                             
                             	; If got here then something wrong
                             	SWBRK DFERR_OK
                             
                             
e0d5 :                       df_rt_neval_process
                             	; pop operator off stack and execute
                             	; keep popping until reached the terminator
e0d5 : 68               [ 4] 	pla
e0d6 : f006             [ 3] 	beq df_rt_neval_done
                             	; run the token code
e0d8 : 2095e4           [ 6] 	jsr df_rt_run_token
                             	; top two bytes on ost stack is the result
e0db : 4cd5e0           [ 3] 	jmp df_rt_neval_process
e0de :                       df_rt_neval_done
e0de : 60               [ 6] 	rts
                             
e0df :                       df_rt_neval_tk_fn
e0df : 18               [ 2] 	clc
e0e0 : 8a               [ 2] 	txa
                             	; run a fn token - returns a value on stack
e0e1 : 2095e4           [ 6] 	jsr df_rt_run_token
                             	; move to next byte
e0e4 :                       df_rt_neval_nextbyte
e0e4 : e688             [ 5] 	inc df_exeoff
e0e6 : d0ab             [ 3] 	bne df_rt_neval_optk		; ALWAYS as exeoff != 0
                             
e0e8 :                       df_rt_neval_tk_opp
e0e8 : 68               [ 4] 	pla				; Get A off stack which is the type
e0e9 :                       df_rt_neval_tk_op
                             	; X=Op, A=Type
                             	; if this op < current top of op stack
                             	; then do the op as it is higher priority so sho
                             	; not be pushed
                             	; what is top of the op stack?
                             	; save current op token value
                             	; C=0 means process the op now, else don't
AS65 Assembler for R6502 [1.42].                                     Page  176
---------------------------------- bank0.s -----------------------------------

                             	; save current operator index
e0e9 : 86a1             [ 3] 	stx df_tmpptra				; Index in to token table not 
                             	; mask off to keep priority
e0eb : 2907             [ 2] 	and #DFTK_OPMSK
e0ed : 85a3             [ 3] 	sta df_tmpptrb
                             	; peek top of op stack - pull and push X
e0ef : 68               [ 4] 	pla
e0f0 : 48               [ 3] 	pha
e0f1 : aa               [ 2] 	tax
                             	; if 0 then nothing so push op
e0f2 : f01c             [ 4] 	beq df_rt_neval_pushOp
                             	; use it to index in to type table
e0f4 : bd05dd           [ 4] 	lda df_tk_tokentype,x
                             	; mask off to keep priority
e0f7 : 2907             [ 2] 	and #DFTK_OPMSK
                             	; compare with the saved token type which includ
e0f9 : c5a3             [ 3] 	cmp df_tmpptrb
                             	; if top of stack >= current then C=1
                             	; else C=0
                             	; what is the state of C?
                             	; if 1 then just pushOp
e0fb : f002             [ 3] 	beq df_rt_neval_donow
e0fd : b011             [ 4] 	bcs df_rt_neval_pushOp
e0ff :                       df_rt_neval_donow
                             	; was C=0 so process now before pushing the new 
                             	; get operator off cpu stack
e0ff : 68               [ 4] 	pla
e100 : a8               [ 2] 	tay		; Save whilst need to push other things
                             	; save the current op on cpu stack
e101 : a5a1             [ 3] 	lda df_tmpptra
e103 : 48               [ 3] 	pha
e104 : aa               [ 2] 	tax		; X = current op
e105 : 98               [ 2] 	tya		; Get A back from Y (new op)
                             	; now run the token in A that came off the stack
e106 : 2095e4           [ 6] 	jsr df_rt_run_token
                             	; get current op off cpu stack in to X
e109 : 68               [ 4] 	pla
e10a : aa               [ 2] 	tax
                             	; get the token type in to A
e10b : bd05dd           [ 4] 	lda df_tk_tokentype,x
                             	; now go back around again to check whether to p
e10e : d0d9             [ 4] 	bne df_rt_neval_tk_op		; ALWAYS as type never ze
e110 :                       df_rt_neval_pushOp
                             	; push the operator
e110 : a5a1             [ 3] 	lda df_tmpptra
e112 : 48               [ 3] 	pha
e113 : d0cf             [ 4] 	bne df_rt_neval_nextbyte	; ALWAYS as token index
                             
                             
                             
                             
                             ; jump to escape evaluation routine
e115 :                       df_rt_eval_esc
e115 : 0a               [ 2] 	asl a
e116 : aa               [ 2] 	tax
e117 : bd24e1           [ 4] 	lda df_rt_eval_esc_tab,x
e11a : 85a1             [ 3] 	sta df_tmpptra
e11c : bd25e1           [ 4] 	lda df_rt_eval_esc_tab+1,x
e11f : 85a2             [ 3] 	sta df_tmpptra+1
e121 : 6ca100           [ 6] 	jmp (df_tmpptra)
                             
e124 :                       df_rt_eval_esc_tab
AS65 Assembler for R6502 [1.42].                                     Page  177
---------------------------------- bank0.s -----------------------------------

e124 : e6e1                  	dw df_rt_eval_chr
e126 : f2e1                  	dw df_rt_eval_reserved
e128 : f2e1                  	dw df_rt_eval_reserved
e12a : f2e1                  	dw df_rt_eval_reserved
e12c : f2e1                  	dw df_rt_eval_reserved
e12e : f2e1                  	dw df_rt_eval_reserved	; no such thing as bytdec
e130 : e6e1                  	dw df_rt_eval_bythex
e132 : e6e1                  	dw df_rt_eval_bytbin
e134 : f2e1                  	dw df_rt_eval_reserved
e136 : e6e1                  	dw df_rt_eval_intdec
e138 : e6e1                  	dw df_rt_eval_inthex
e13a : e6e1                  	dw df_rt_eval_intbin
e13c : f2e1                  	dw df_rt_eval_reserved
e13e : f2e1                  	dw df_rt_eval_reserved
e140 : f2e1                  	dw df_rt_eval_reserved
e142 : f2e1                  	dw df_rt_eval_reserved
e144 : f4e1                  	dw df_rt_eval_strlit
e146 : 3de2                  	dw df_rt_eval_var
e148 : 3be3                  	dw df_rt_eval_proc
                             
                             
                             ;****************************************
                             ;* Evaluate a string expression
                             ;* X, A = Destination is string accumulator
                             ;****************************************
e14a :                       df_rt_seval
e14a : a67a             [ 3] 	ldx df_sevalptr
e14c : a57b             [ 3] 	lda df_sevalptr+1
                             ;****************************************
                             ;* Evaluate a string expression
                             ;* X, A = Destination buffer / space
                             ;****************************************
e14e :                       df_rt_sval
                             	; keep X,A on the stack - will be modified
e14e : 8538             [ 3] 	sta tmp_d
e150 : 48               [ 3] 	pha
e151 : 8a               [ 2] 	txa
e152 : 48               [ 3] 	pha
e153 : a538             [ 3] 	lda tmp_d
                             	; push original destination
e155 : 203ff7           [ 6] 	jsr df_ost_pushStr
                             	; Push the destination to the 6502 stack
                             	; hi byte first then lo
                             	; push string idx so we know our starting positi
                             	; in the string buffer
                             	; this limits all evaluations to 255 bytes
                             ;	lda df_stridx
                             ;	jsr df_st_pushOp
                             
                             	; find escape token or keyword token
                             	; if escape token push on to operand stack
                             	; if keyword operator token push on to operator 
                             	; if keyword function token run it
                             
e158 :                       df_rt_seval_optk
e158 : a488             [ 3] 	ldy df_exeoff
                             	; check end of line
e15a : c47e             [ 3] 	cpy df_eolidx
e15c : f06b             [ 3] 	beq df_rt_seval_done
e15e : c47f             [ 3] 	cpy df_nxtstidx
e160 : f067             [ 3] 	beq df_rt_seval_done
                             
AS65 Assembler for R6502 [1.42].                                     Page  178
---------------------------------- bank0.s -----------------------------------

e162 : b186             [ 5] 	lda (df_currlin),y
e164 : 301c             [ 3] 	bmi df_rt_seval_tk
                             
e166 : c920             [ 2] 	cmp #DFTK_ESCVAL
e168 : 900a             [ 3] 	bcc df_rt_seval_esc
                             	; check for evaluation terminators
                             	; specifically ',' and ')'
e16a : c92c             [ 2] 	cmp #','
e16c : f05b             [ 3] 	beq df_rt_seval_done
e16e : c929             [ 2] 	cmp #')'
e170 : f057             [ 3] 	beq df_rt_seval_done
e172 : d048             [ 3] 	bne df_rt_seval_nextbyte
e174 :                       df_rt_seval_esc
                             	; the only escape char is STRLIT, VAR or PROC
e174 : c910             [ 2] 	cmp #DFTK_STRLIT
e176 : f049             [ 3] 	beq	df_rt_seval_esc_strlit
e178 : c911             [ 2] 	cmp #DFTK_VAR
e17a : f026             [ 3] 	beq	df_rt_seval_esc_var
e17c : c912             [ 2] 	cmp #DFTK_PROC
e17e : f047             [ 3] 	beq	df_rt_seval_esc_proc
                             
                             	; error if got here
                             	SWBRK DFERR_SYNTAX
                             
                             
                             	; if a token then push on operator stack
e182 :                       df_rt_seval_tk
e182 : 8488             [ 3] 	sty df_exeoff
e184 : 297f             [ 2] 	and #0x7f
                             	; check if op
e186 : aa               [ 2] 	tax
e187 : bd05dd           [ 4] 	lda df_tk_tokentype,x
e18a : 2904             [ 2] 	and #DFTK_STROP
e18c : d009             [ 3] 	bne df_rt_seval_tk_op
                             	; check if fn
e18e : bd05dd           [ 4] 	lda df_tk_tokentype,x
e191 : 2902             [ 2] 	and #DFTK_FN
e193 : d006             [ 3] 	bne df_rt_seval_tk_fn
                             
                             	; token type mismatch if got here
                             	SWBRK DFERR_TYPEMISM
                             
                             
e197 :                       df_rt_seval_tk_op
                             	; the only op is $+
                             	; so just ignore!
e197 : 8a               [ 2] 	txa
e198 : 4cbce1           [ 3] 	jmp df_rt_seval_nextbyte
                             
e19b :                       df_rt_seval_tk_fn
e19b : 8a               [ 2] 	txa
e19c : 2095e4           [ 6] 	jsr df_rt_run_token
e19f : 4ca6e1           [ 3] 	jmp df_rt_seval_copy
                             
e1a2 :                       df_rt_seval_esc_var
                             	; go process the variable as a normal RVAL
e1a2 : 18               [ 2] 	clc
e1a3 : 203de2           [ 6] 	jsr df_rt_eval_var
                             	; copy source off rt stack to destination
e1a6 :                       df_rt_seval_copy
                             	; pull destination pointer
e1a6 : 68               [ 4] 	pla
AS65 Assembler for R6502 [1.42].                                     Page  179
---------------------------------- bank0.s -----------------------------------

e1a7 : 85a1             [ 3] 	sta df_tmpptra
e1a9 : 68               [ 4] 	pla
e1aa : 85a2             [ 3] 	sta df_tmpptra+1
                             	; pop source string pointer off stack
e1ac : 206cf7           [ 6] 	jsr df_ost_popStr
e1af : 86a3             [ 3] 	stx df_tmpptrb
e1b1 : 85a4             [ 3] 	sta df_tmpptrb+1
                             	; go and copy the string
e1b3 : 20cde1           [ 6] 	jsr df_rt_copyStr
                             	; now save the destination
e1b6 : a5a2             [ 3] 	lda df_tmpptra+1
e1b8 : 48               [ 3] 	pha
e1b9 : a5a1             [ 3] 	lda df_tmpptra
e1bb : 48               [ 3] 	pha
                             
                             ;	jmp df_rt_seval_nextbyte
e1bc :                       df_rt_seval_nextbyte
e1bc : e688             [ 5] 	inc df_exeoff
e1be : 4c58e1           [ 3] 	jmp df_rt_seval_optk
                             
e1c1 :                       df_rt_seval_esc_strlit
                             	; evaluate string literal
e1c1 : 20f4e1           [ 6] 	jsr df_rt_eval_strlit
e1c4 : 4ca6e1           [ 3] 	jmp df_rt_seval_copy
                             
e1c7 :                       df_rt_seval_esc_proc
                             	; not yet suported *******
                             	SWBRK DFERR_OK
                             
                             
                             	; keep going until non-ws char found or end of l
e1c9 :                       df_rt_seval_done
                             	;
e1c9 : 68               [ 4] 	pla
e1ca : 68               [ 4] 	pla
                             
e1cb : 18               [ 2] 	clc
e1cc : 60               [ 6] 	rts
                             
                             
                             ; Copy string from ptrb to ptra
e1cd :                       df_rt_copyStr
e1cd : a000             [ 2] 	ldy #0
e1cf :                       df_rt_copyStr_ch
e1cf : b1a3             [ 5] 	lda (df_tmpptrb),y
e1d1 : 91a1             [ 5] 	sta (df_tmpptra),y
e1d3 : f003             [ 3] 	beq df_rt_copyStr_done
e1d5 : c8               [ 2] 	iny
e1d6 : d0f7             [ 3] 	bne df_rt_copyStr_ch	; Always relying in Y never
e1d8 :                       df_rt_copyStr_done
e1d8 : 98               [ 2] 	tya
e1d9 : 18               [ 2] 	clc
e1da : 65a1             [ 3] 	adc df_tmpptra
e1dc : 85a1             [ 3] 	sta df_tmpptra
e1de : a5a2             [ 3] 	lda df_tmpptra+1
e1e0 : 6900             [ 2] 	adc #0
e1e2 : 85a2             [ 3] 	sta df_tmpptra+1
e1e4 : 18               [ 2] 	clc
e1e5 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Evaluate and push numeric value
AS65 Assembler for R6502 [1.42].                                     Page  180
---------------------------------- bank0.s -----------------------------------

                             ;****************************************
e1e6 :                       df_rt_eval_intdec
e1e6 :                       df_rt_eval_bytdec
e1e6 :                       df_rt_eval_inthex
e1e6 :                       df_rt_eval_bythex
e1e6 :                       df_rt_eval_intbin
e1e6 :                       df_rt_eval_bytbin
e1e6 :                       df_rt_eval_chr
                             	; numeric constant
e1e6 : c8               [ 2] 	iny
e1e7 : b186             [ 5] 	lda (df_currlin),y
e1e9 : aa               [ 2] 	tax
e1ea : c8               [ 2] 	iny
e1eb : b186             [ 5] 	lda (df_currlin),y
                             	; save offset before calling any routine
e1ed : 8488             [ 3] 	sty df_exeoff
                             	; push number on to stack
e1ef : 4c34f7           [ 3] 	jmp df_ost_pushInt
                             
e1f2 :                       df_rt_eval_reserved
                             	; should not get here
                             	SWBRK DFERR_OK
                             
                             
                             ;****************************************
                             ;* Evaluate and push string constant
                             ;****************************************
e1f4 :                       df_rt_eval_strlit
e1f4 : 8488             [ 3] 	sty df_exeoff
                             	; calculate the effective address
                             	; y + currlin
e1f6 : 98               [ 2] 	tya
                             	; set carry to add one extra
e1f7 : 38               [ 2] 	sec
e1f8 : 6586             [ 3] 	adc df_currlin
e1fa : 85a1             [ 3] 	sta df_tmpptra
e1fc : aa               [ 2] 	tax
e1fd : a587             [ 3] 	lda df_currlin+1
e1ff : 6900             [ 2] 	adc #0
e201 : 85a2             [ 3] 	sta df_tmpptra+1
                             
                             	; push string on to stack
e203 : 203ff7           [ 6] 	jsr df_ost_pushStr
                             	; now proceed until end of string found
e206 : a488             [ 3] 	ldy df_exeoff
e208 :                       df_rt_eval_strlit_ch
e208 : b186             [ 5] 	lda (df_currlin),y
e20a : f003             [ 3] 	beq df_rt_eval_strlit_done
e20c : c8               [ 2] 	iny
e20d : d0f9             [ 3] 	bne df_rt_eval_strlit_ch
e20f :                       df_rt_eval_strlit_done	; Always relying on Y neve
e20f : 8488             [ 3] 	sty df_exeoff
e211 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Return array parameter
                             ;* A has parm
                             ;****************************************
e212 :                       df_rt_arry_parm
                             	; move past open bracket or comma
e212 : e688             [ 5] 	inc df_exeoff
                             	; evaluate expression inside bracket
AS65 Assembler for R6502 [1.42].                                     Page  181
---------------------------------- bank0.s -----------------------------------

e214 : 208ae0           [ 6] 	jsr df_rt_getnval
e217 : 8a               [ 2] 	txa
                             ;	clc
e218 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Return double array parameter
                             ;* X = dim1, Y = dim2
                             ;****************************************
e219 :                       df_rt_arry_parm2
                             	; go get array parm 1
e219 : 2012e2           [ 6] 	jsr df_rt_arry_parm
e21c : 48               [ 3] 	pha
e21d : a200             [ 2] 	ldx #0
e21f : a488             [ 3] 	ldy df_exeoff
e221 :                       df_rt_arry_parm2_term
e221 : b186             [ 5] 	lda (df_currlin),y
e223 : c95d             [ 2] 	cmp #']'
e225 : f011             [ 3] 	beq df_rt_arry_parm2_skiparry2
e227 : c92c             [ 2] 	cmp #','
e229 : f006             [ 3] 	beq df_rt_arry_parm2_arry2
e22b : 8488             [ 3] 	sty df_exeoff
e22d : c8               [ 2] 	iny
e22e : 4c21e2           [ 3] 	jmp df_rt_arry_parm2_term
e231 :                       df_rt_arry_parm2_arry2
                             	; get second dimension and put in Y
e231 : 2012e2           [ 6] 	jsr df_rt_arry_parm
e234 : a8               [ 2] 	tay
e235 : 68               [ 4] 	pla
e236 : aa               [ 2] 	tax
                             ;	clc
e237 : 60               [ 6] 	rts
e238 :                       df_rt_arry_parm2_skiparry2
e238 : a000             [ 2] 	ldy #0
e23a : 68               [ 4] 	pla
e23b : aa               [ 2] 	tax
                             ;	clc
e23c : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* Evaluate and push variable
                             ;* The actual value is pushed if numeric
                             ;* The pointer is pushed if string
                             ;* Carry Set = LVAR else normal RVAR
                             ;* LVAR : Y = line index, A=vvt type, tmpptra = v
                             ;****************************************
e23d :                       df_rt_eval_var
                             	; save carry bit
e23d : 08               [ 3] 	php
                             	; if lvar mode then already passed escape token
e23e : b010             [ 3] 	bcs df_rt_eval_lvskip
                             	; move past var escape token
e240 : c8               [ 2] 	iny
                             	; get var vvt address
e241 : b186             [ 5] 	lda (df_currlin),y
e243 : 85a1             [ 3] 	sta df_tmpptra
e245 : c8               [ 2] 	iny
e246 : 8488             [ 3] 	sty df_exeoff
e248 : b186             [ 5] 	lda (df_currlin),y
e24a : 85a2             [ 3] 	sta df_tmpptra+1
                             	; push vvt type first as this is the last thing 
AS65 Assembler for R6502 [1.42].                                     Page  182
---------------------------------- bank0.s -----------------------------------

e24c : a200             [ 2] 	ldx #0
e24e : a1a1             [ 6] 	lda (df_tmpptra,x)
e250 :                       df_rt_eval_lvskip
e250 : 48               [ 3] 	pha
                             	; Test A
e251 : aa               [ 2] 	tax
                             	; simple variable
e252 : 1012             [ 3] 	bpl df_rt_eval_var_notarry
                             	; even if an array if no dimensions then return 
                             	; if at end of statement or line then simple cop
e254 : c47e             [ 3] 	cpy df_eolidx
e256 : f02b             [ 3] 	beq df_rt_eval_var_simple
e258 : c47f             [ 3] 	cpy df_nxtstidx
e25a : f027             [ 3] 	beq df_rt_eval_var_simple
                             	; if next ch is not [ then simple copy
e25c : c8               [ 2] 	iny
e25d : b186             [ 5] 	lda (df_currlin),y
e25f : 88               [ 2] 	dey
e260 : c95b             [ 2] 	cmp #'['
e262 : d01f             [ 3] 	bne df_rt_eval_var_simple
                             	; go do array handling
e264 : f02b             [ 3] 	beq df_rt_eval_var_do_arry
e266 :                       df_rt_eval_var_notarry
                             	; pull the type, not needed here
e266 : 68               [ 4] 	pla
                             	; pull C and check if lvar wanted rather than rv
e267 : 28               [ 4] 	plp
e268 : b00c             [ 3] 	bcs df_rt_eval_lvar
                             	; just push the vvt lo,hi value
e26a : a001             [ 2] 	ldy #DFVVT_LO
e26c : b1a1             [ 5] 	lda (df_tmpptra),y
e26e : aa               [ 2] 	tax
e26f : a002             [ 2] 	ldy #DFVVT_HI
e271 : b1a1             [ 5] 	lda (df_tmpptra),y
                             
e273 : 4c34f7           [ 3] 	jmp df_ost_pushInt
                             
e276 :                       df_rt_eval_lvar
                             	; it's not an array, push the address of DFVVT_L
                             	; add DFVVT_LO offset to slot address in X,A
e276 : 18               [ 2] 	clc
e277 : a901             [ 2] 	lda #DFVVT_LO
e279 : 65a1             [ 3] 	adc df_tmpptra
e27b : aa               [ 2] 	tax
e27c : a5a2             [ 3] 	lda df_tmpptra+1
e27e : 6900             [ 2] 	adc #0
                             
                             	; push pointer to lo,hi
e280 : 4c43f7           [ 3] 	jmp df_ost_pushPtr
                             
e283 :                       df_rt_eval_var_simple
                             	; clean up stack
e283 : 68               [ 4] 	pla
e284 : 68               [ 4] 	pla
                             	; simply get lo,hi and push ptr on stack
e285 : a001             [ 2] 	ldy #DFVVT_LO
e287 : b1a1             [ 5] 	lda (df_tmpptra),y
e289 : aa               [ 2] 	tax
e28a : a002             [ 2] 	ldy #DFVVT_HI
e28c : b1a1             [ 5] 	lda (df_tmpptra),y
e28e : 4c43f7           [ 3] 	jmp df_ost_pushPtr
                             
AS65 Assembler for R6502 [1.42].                                     Page  183
---------------------------------- bank0.s -----------------------------------

e291 :                       df_rt_eval_var_do_arry
                             	; move past var index
e291 : e688             [ 5] 	inc df_exeoff
                             	; zero out x,y as they have dimension info
e293 : a200             [ 2] 	ldx #0
e295 : a000             [ 2] 	ldy #0
                             
                             	; ** Array handling routine **
                             	; A on stack = type
                             	; save vvt address
e297 : a5a2             [ 3] 	lda df_tmpptra+1
e299 : 48               [ 3] 	pha
e29a : a5a1             [ 3] 	lda df_tmpptra
e29c : 48               [ 3] 	pha
                             
                             	; get array parms in X,Y
e29d : 2019e2           [ 6] 	jsr df_rt_arry_parm2
                             	; restore vvt address
e2a0 : 68               [ 4] 	pla
e2a1 : 85a1             [ 3] 	sta df_tmpptra
e2a3 : 68               [ 4] 	pla
e2a4 : 85a2             [ 3] 	sta df_tmpptra+1
                             	; save dimension indices for later
                             	; save x last as needed first
                             	; A ok to trample
e2a6 : 98               [ 2] 	tya
e2a7 : 48               [ 3] 	pha
e2a8 : 8a               [ 2] 	txa
e2a9 : 48               [ 3] 	pha
                             	; if y is zero then need to decide some stuff
e2aa : c000             [ 2] 	cpy #0
e2ac : d012             [ 3] 	bne df_rt_eval_var_dim2adj
                             	; if dim2 > 0 then swap x,y
e2ae : a004             [ 2] 	ldy #DFVVT_DIM2
e2b0 : b1a1             [ 5] 	lda (df_tmpptra),y
e2b2 : a000             [ 2] 	ldy #0
e2b4 : c900             [ 2] 	cmp #0
e2b6 : f008             [ 3] 	beq df_rt_eval_var_dim2adj
                             	; pop from stack in swapped order
e2b8 : 68               [ 4] 	pla
e2b9 : a8               [ 2] 	tay
e2ba : 68               [ 4] 	pla
e2bb : aa               [ 2] 	tax
                             	; save back on stack, A ok to trample
e2bc : 98               [ 2] 	tya
e2bd : 48               [ 3] 	pha
e2be : 8a               [ 2] 	txa
e2bf : 48               [ 3] 	pha
                             
e2c0 :                       df_rt_eval_var_dim2adj
                             	; don't let y=0
e2c0 : c000             [ 2] 	cpy #0
e2c2 : d001             [ 3] 	bne df_rt_eval_var_dim2adjy
e2c4 : c8               [ 2] 	iny
e2c5 :                       df_rt_eval_var_dim2adjy
                             	; don't let x=0
e2c5 : e000             [ 2] 	cpx #0
e2c7 : d001             [ 3] 	bne df_rt_eval_var_dim2adjx
e2c9 : e8               [ 2] 	inx
e2ca :                       df_rt_eval_var_dim2adjx
                             	;calculate offset
                             	;(y-1)*dim1 + (x-1)
AS65 Assembler for R6502 [1.42].                                     Page  184
---------------------------------- bank0.s -----------------------------------

e2ca : ca               [ 2] 	dex
e2cb : 88               [ 2] 	dey
                             	; (y-1)
e2cc : 843d             [ 3] 	sty num_a
e2ce : a900             [ 2] 	lda #0
e2d0 : 853e             [ 3] 	sta num_a+1
                             	; if y is 0 then no need to multiply
e2d2 : c000             [ 2] 	cpy #0
e2d4 : f00d             [ 3] 	beq df_rt_eval_var_nomult
                             	; (dim1)
e2d6 : a003             [ 2] 	ldy #DFVVT_DIM1
e2d8 : a900             [ 2] 	lda #0
e2da : 8542             [ 3] 	sta num_b+1
e2dc : b1a1             [ 5] 	lda (df_tmpptra),y
e2de : 8541             [ 3] 	sta num_b
                             	; (y-1)*dim1 num_a has result
e2e0 : 2065d4           [ 6] 	jsr int_fast_mult
e2e3 :                       df_rt_eval_var_nomult
                             	; move x to a
e2e3 : 8a               [ 2] 	txa
                             	; add x to num_a
e2e4 : 18               [ 2] 	clc
e2e5 : 653d             [ 3] 	adc num_a
e2e7 : 853d             [ 3] 	sta num_a
e2e9 : a53e             [ 3] 	lda num_a+1
e2eb : 6900             [ 2] 	adc #0
e2ed : 853e             [ 3] 	sta num_a+1
                             	; now have element offset in num_a
                             	; dimensions in x and y
e2ef : 68               [ 4] 	pla
e2f0 : aa               [ 2] 	tax
e2f1 : 68               [ 4] 	pla
e2f2 : a8               [ 2] 	tay
                             	; get type of variable originally found
e2f3 : 68               [ 4] 	pla
e2f4 : 48               [ 3] 	pha
e2f5 : 2901             [ 2] 	and #DFVVT_INT
e2f7 : f004             [ 3] 	beq df_rt_eval_var_push
                             	; if it is int then multiply offset by 2
e2f9 : 063d             [ 5] 	asl num_a
e2fb : 263e             [ 5] 	rol num_a+1
e2fd :                       df_rt_eval_var_push
                             	; add pointer in lo,hi to num_a
e2fd : 18               [ 2] 	clc
e2fe : a001             [ 2] 	ldy #DFVVT_LO
e300 : b1a1             [ 5] 	lda (df_tmpptra),y
e302 : 653d             [ 3] 	adc num_a
e304 : 853d             [ 3] 	sta num_a
e306 : a002             [ 2] 	ldy #DFVVT_HI
e308 : b1a1             [ 5] 	lda (df_tmpptra),y
e30a : d002             [ 3] 	bne df_rt_array_exists
                             	; if vvt address hi is zero then array not dimen
                             	SWBRK DFERR_DIM
                             
e30e :                       df_rt_array_exists
e30e : 653e             [ 3] 	adc num_a+1
e310 : 853e             [ 3] 	sta num_a+1
                             	; get the type
e312 : 68               [ 4] 	pla
                             	; if not int or byte then push string
e313 : 2903             [ 2] 	and #DFVVT_INT|DFVVT_BYT
e315 : f01c             [ 3] 	beq df_rt_eval_var_str
AS65 Assembler for R6502 [1.42].                                     Page  185
---------------------------------- bank0.s -----------------------------------

                             	; get LVAR preference
e317 : 28               [ 4] 	plp
e318 : b01a             [ 3] 	bcs df_rt_eval_ptr
                             	; need to load lo and hi for int
                             	; but only lo for byt
e31a : 2901             [ 2] 	and #DFVVT_INT
e31c : f00b             [ 3] 	beq df_rt_eval_byt
                             	; push the contents pointed to by num_a
e31e : a000             [ 2] 	ldy #0
e320 : b13d             [ 5] 	lda (num_a),y
e322 : aa               [ 2] 	tax
e323 : c8               [ 2] 	iny
e324 : b13d             [ 5] 	lda (num_a),y
e326 : 4c34f7           [ 3] 	jmp df_ost_pushInt
e329 :                       df_rt_eval_byt
e329 : a000             [ 2] 	ldy #0
e32b : b13d             [ 5] 	lda (num_a),y
e32d : aa               [ 2] 	tax
e32e : a900             [ 2] 	lda #0
e330 : 4c34f7           [ 3] 	jmp df_ost_pushInt
e333 :                       df_rt_eval_var_str
e333 : 28               [ 4] 	plp
e334 :                       df_rt_eval_ptr
                             ;	clc
                             	; put num_a not contents
e334 : a63d             [ 3] 	ldx num_a
e336 : a53e             [ 3] 	lda num_a+1
e338 : 4c43f7           [ 3] 	jmp df_ost_pushPtr
                             
e33b :                       df_rt_eval_proc
e33b : a577             [ 3] 	lda df_parmtop				; Save current position of par
e33d : 48               [ 3] 	pha
e33e : 207ff5           [ 6] 	jsr df_rt_proc				; Go and call the user functio
e341 : 68               [ 4] 	pla							; Get back the original parameter stac
e342 : c577             [ 3] 	cmp df_parmtop				; if it is the same, then no r
e344 : f002             [ 3] 	beq df_rt_eval_proc_err
e346 : 18               [ 2] 	clc
e347 : 60               [ 6] 	rts
e348 :                       df_rt_eval_proc_err
                             	; if no return value then report an errror
                             	SWBRK DFERR_RETURN
                             
                             
                             
                             
                             ;****************************************
                             ;* get two ints off the runtime stack
                             ;* first parm in ptrb, second in ptra
                             ;****************************************
e34a :                       df_rt_get2Ints
                             	; the first int popped is actually the second pa
e34a : 2068f7           [ 6] 	jsr df_ost_popInt
e34d : 86a3             [ 3] 	stx df_tmpptrb
e34f : 85a4             [ 3] 	sta df_tmpptrb+1
                             
e351 : 2068f7           [ 6] 	jsr df_ost_popInt
e354 : 86a1             [ 3] 	stx df_tmpptra
e356 : 85a2             [ 3] 	sta df_tmpptra+1
e358 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* get two strings off the runtime stack
AS65 Assembler for R6502 [1.42].                                     Page  186
---------------------------------- bank0.s -----------------------------------

                             ;* first parm in ptrb, second in ptra
                             ;****************************************
e359 :                       df_rt_get2Strs
                             	; the first int popped is actually the second pa
e359 : 206cf7           [ 6] 	jsr df_ost_popStr
e35c : 86a3             [ 3] 	stx df_tmpptrb
e35e : 85a4             [ 3] 	sta df_tmpptrb+1
                             
e360 : 206cf7           [ 6] 	jsr df_ost_popStr
e363 : 86a1             [ 3] 	stx df_tmpptra
e365 : 85a2             [ 3] 	sta df_tmpptra+1
e367 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ; common code for 2 ints runtime parsing
                             ;****************************************
e368 :                       df_rt_parm_2ints
                             	; evaluate 1st parm
e368 : 2090e0           [ 6] 	jsr df_rt_neval
                             	; jump over comma
e36b : e688             [ 5] 	inc df_exeoff
                             	; evaluate the 2nd parm
e36d : 2090e0           [ 6] 	jsr df_rt_neval
                             
                             	; pop 2nd parm
e370 : 2068f7           [ 6] 	jsr df_ost_popInt
e373 : 86a3             [ 3] 	stx df_tmpptrb
e375 : 85a4             [ 3] 	sta df_tmpptrb+1
                             	; pop 1st parm
e377 : 2068f7           [ 6] 	jsr df_ost_popInt
e37a : 86a1             [ 3] 	stx df_tmpptra
e37c : 85a2             [ 3] 	sta df_tmpptra+1
e37e : 60               [ 6] 	rts
                             
                             ;****************************************
                             ; common code for 3 ints runtime parsing
                             ;****************************************
e37f :                       df_rt_parm_3ints
                             	; evaluate 1st parm
e37f : 2090e0           [ 6] 	jsr df_rt_neval
e382 : e688             [ 5] 	inc df_exeoff
                             	; evaluate the 2nd parm
e384 : 2090e0           [ 6] 	jsr df_rt_neval
e387 : e688             [ 5] 	inc df_exeoff
                             	; evaluate the 3rd parm
e389 : 2090e0           [ 6] 	jsr df_rt_neval
                             
                             	; pop 3rd parm
e38c : 2068f7           [ 6] 	jsr df_ost_popInt
e38f : 86a5             [ 3] 	stx df_tmpptrc
e391 : 85a6             [ 3] 	sta df_tmpptrc+1
                             	; pop 2nd parm
e393 : 2068f7           [ 6] 	jsr df_ost_popInt
e396 : 86a3             [ 3] 	stx df_tmpptrb
e398 : 85a4             [ 3] 	sta df_tmpptrb+1
                             	; pop 1st parm
e39a : 2068f7           [ 6] 	jsr df_ost_popInt
e39d : 86a1             [ 3] 	stx df_tmpptra
e39f : 85a2             [ 3] 	sta df_tmpptra+1
e3a1 : 60               [ 6] 	rts
                             
                             ;****************************************
AS65 Assembler for R6502 [1.42].                                     Page  187
---------------------------------- bank0.s -----------------------------------

                             ; common code for 4 ints runtime parsing
                             ;****************************************
e3a2 :                       df_rt_parm_4ints
                             	; evaluate 1st parm
e3a2 : 2090e0           [ 6] 	jsr df_rt_neval
e3a5 : e688             [ 5] 	inc df_exeoff
                             	; evaluate the 2nd parm
e3a7 : 2090e0           [ 6] 	jsr df_rt_neval
e3aa : e688             [ 5] 	inc df_exeoff
                             	; evaluate the 3rd parm
e3ac : 2090e0           [ 6] 	jsr df_rt_neval
e3af : e688             [ 5] 	inc df_exeoff
                             	; evaluate the 4th parm
e3b1 : 2090e0           [ 6] 	jsr df_rt_neval
                             
                             	; pop 4th parm
e3b4 : 2068f7           [ 6] 	jsr df_ost_popInt
e3b7 : 86a7             [ 3] 	stx df_tmpptrd
e3b9 : 85a8             [ 3] 	sta df_tmpptrd+1
                             	; pop 3rd parm
e3bb : 2068f7           [ 6] 	jsr df_ost_popInt
e3be : 86a5             [ 3] 	stx df_tmpptrc
e3c0 : 85a6             [ 3] 	sta df_tmpptrc+1
                             	; pop 2nd parm
e3c2 : 2068f7           [ 6] 	jsr df_ost_popInt
e3c5 : 86a3             [ 3] 	stx df_tmpptrb
e3c7 : 85a4             [ 3] 	sta df_tmpptrb+1
                             	; pop 1st parm
e3c9 : 2068f7           [ 6] 	jsr df_ost_popInt
e3cc : 86a1             [ 3] 	stx df_tmpptra
e3ce : 85a2             [ 3] 	sta df_tmpptra+1
e3d0 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ; common code for 5 ints runtime parsing
                             ;****************************************
e3d1 :                       df_rt_parm_5ints
                             	; evaluate 1st parm
e3d1 : 2090e0           [ 6] 	jsr df_rt_neval
e3d4 : e688             [ 5] 	inc df_exeoff
                             	; evaluate the 2nd parm
e3d6 : 2090e0           [ 6] 	jsr df_rt_neval
e3d9 : e688             [ 5] 	inc df_exeoff
                             	; evaluate the 3rd parm
e3db : 2090e0           [ 6] 	jsr df_rt_neval
e3de : e688             [ 5] 	inc df_exeoff
                             	; evaluate the 4th parm
e3e0 : 2090e0           [ 6] 	jsr df_rt_neval
e3e3 : e688             [ 5] 	inc df_exeoff
                             	; evaluate the 5th parm
e3e5 : 2090e0           [ 6] 	jsr df_rt_neval
                             
                             	; pop 5th parm
e3e8 : 2068f7           [ 6] 	jsr df_ost_popInt
e3eb : 86a9             [ 3] 	stx df_tmpptre
e3ed : 85aa             [ 3] 	sta df_tmpptre+1
                             	; pop 4th parm
e3ef : 2068f7           [ 6] 	jsr df_ost_popInt
e3f2 : 86a7             [ 3] 	stx df_tmpptrd
e3f4 : 85a8             [ 3] 	sta df_tmpptrd+1
                             	; pop 3rd parm
e3f6 : 2068f7           [ 6] 	jsr df_ost_popInt
AS65 Assembler for R6502 [1.42].                                     Page  188
---------------------------------- bank0.s -----------------------------------

e3f9 : 86a5             [ 3] 	stx df_tmpptrc
e3fb : 85a6             [ 3] 	sta df_tmpptrc+1
                             	; pop 2nd parm
e3fd : 2068f7           [ 6] 	jsr df_ost_popInt
e400 : 86a3             [ 3] 	stx df_tmpptrb
e402 : 85a4             [ 3] 	sta df_tmpptrb+1
                             	; pop 1st parm
e404 : 2068f7           [ 6] 	jsr df_ost_popInt
e407 : 86a1             [ 3] 	stx df_tmpptra
e409 : 85a2             [ 3] 	sta df_tmpptra+1
                             
e40b : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* initialise statement to be executed
                             ;* X,A = line pointer, Y=statement offset
                             ;****************************************
e40c :                       df_rt_init_stat_ptr
                             	; save current line
e40c : 8686             [ 3] 	stx df_currlin
e40e : 8587             [ 3] 	sta df_currlin+1
e410 : 8480             [ 3] 	sty df_curstidx
e412 : 8488             [ 3] 	sty df_exeoff
e414 : a000             [ 2] 	ldy #0
e416 : b186             [ 5] 	lda (df_currlin),y
e418 : 857e             [ 3] 	sta df_eolidx
e41a : a480             [ 3] 	ldy df_curstidx
e41c : b186             [ 5] 	lda (df_currlin),y
e41e : 857f             [ 3] 	sta df_nxtstidx
e420 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Execute from a statement pointed to
                             ;* by currlin and exeoff
                             ;****************************************
e421 :                       df_rt_exec_stat
e421 : a686             [ 3] 	ldx df_currlin
e423 : a587             [ 3] 	lda df_currlin+1
e425 : a488             [ 3] 	ldy df_exeoff
e427 :                       df_rt_exec_init_ptr
e427 : 200ce4           [ 6] 	jsr df_rt_init_stat_ptr
                             	; assume normal flow of control if next line hi 
                             	; this means no line can execute below page 1, n
e42a : a900             [ 2] 	lda #0
e42c : 858a             [ 3] 	sta df_nextlin+1
                             
                             	; find first token in statement
e42e :                       df_rt_exec_find_tok
e42e : c8               [ 2] 	iny
e42f : b186             [ 5] 	lda (df_currlin),y
e431 : 10fb             [ 3] 	bpl df_rt_exec_find_tok
e433 :                       df_rt_exec_found_tok
                             	; skip past token to next byte in readiness
e433 : c8               [ 2] 	iny
e434 : 8488             [ 3] 	sty df_exeoff
                             	; save the token
e436 : 48               [ 3] 	pha
                             	; Run that statement
e437 : 2095e4           [ 6] 	jsr df_rt_run_token
                             	; what token was run, if it was enddef or return
e43a : 68               [ 4] 	pla
e43b : c987             [ 2] 	cmp #DFRT_ENDDEF
AS65 Assembler for R6502 [1.42].                                     Page  189
---------------------------------- bank0.s -----------------------------------

e43d : f045             [ 3] 	beq df_rt_exec_end
e43f : c988             [ 2] 	cmp #DFRT_RETURN
e441 : f041             [ 3] 	beq df_rt_exec_end
                             
                             	; check for break, asynch get
e443 : e65b             [ 5] 	inc df_checkkey					; Don't check every time els
e445 : a55b             [ 3] 	lda df_checkkey					; Check the mask (normally 0
e447 : 255c             [ 3] 	and df_checkmsk
e449 : f012             [ 3] 	beq df_rt_exec_no_key
e44b : a900             [ 2] 	lda #0
e44d : 855b             [ 3] 	sta df_checkkey
e44f : 18               [ 2] 	clc
e450 : 2048c4           [ 6] 	jsr io_get_ch
e453 : b008             [ 3] 	bcs df_rt_exec_no_key
e455 : c903             [ 2] 	cmp #UTF_ETX					; CTRL-C?
e457 : f02d             [ 3] 	beq df_rt_exec_ctrl_c
e459 : c91a             [ 2] 	cmp #UTF_BRK					; CTRK-Z?
e45b : f02d             [ 3] 	beq df_rt_exec_ctrl_z
e45d :                       df_rt_exec_no_key
                             	; check if normal flow of control
e45d : a58a             [ 3] 	lda df_nextlin+1
e45f : d02b             [ 3] 	bne df_rt_exec_jump
                             	; try and execute another statement
e461 : a47f             [ 3] 	ldy df_nxtstidx
e463 : 8488             [ 3] 	sty df_exeoff
e465 : d0ba             [ 3] 	bne df_rt_exec_stat
                             
                             	; reached end of line, move to next
e467 : a200             [ 2] 	ldx #0
e469 : 18               [ 2] 	clc
e46a : a186             [ 6] 	lda (df_currlin,x)
e46c : 6586             [ 3] 	adc df_currlin
e46e : 8586             [ 3] 	sta df_currlin
e470 : a587             [ 3] 	lda df_currlin+1
e472 : 6900             [ 2] 	adc #0
e474 : 8587             [ 3] 	sta df_currlin+1
                             
                             	; start from first statement in new line
e476 : a003             [ 2] 	ldy #3
e478 : 8488             [ 3] 	sty df_exeoff
                             
                             	; check if this line has any content (length >0)
e47a : a186             [ 6] 	lda (df_currlin,x)
e47c : 857e             [ 3] 	sta df_eolidx
                             	; no more lines (len = 0), program done
e47e : d0a1             [ 3] 	bne df_rt_exec_stat
                             	; else done
                             	; normally wouldn't get here except immediate mo
                             	; if line number <> 0 then error
e480 : a55e             [ 3] 	lda df_immed
e482 : f004             [ 3] 	beq df_rt_unexpected_end
e484 :                       df_rt_exec_end
e484 : 18               [ 2] 	clc
e485 : 60               [ 6] 	rts
e486 :                       df_rt_exec_ctrl_c
                             	SWBRK DFERR_BREAK
                             
e488 :                       df_rt_unexpected_end
                             	SWBRK DFERR_IMMEDIATE
                             
e48a :                       df_rt_exec_ctrl_z
                             	; Force a break with zero error number
AS65 Assembler for R6502 [1.42].                                     Page  190
---------------------------------- bank0.s -----------------------------------

                             	; this will drop in to the monitor
e48a : 0000                  	db 0,0
                             
                             	; if hi byte of nextline is not zero then
                             	; current line = next line
e48c :                       df_rt_exec_jump
                             	; initialise statement pointer from nextlin,toks
e48c : a689             [ 3] 	ldx df_nextlin
e48e : a58a             [ 3] 	lda df_nextlin+1
e490 : a47f             [ 3] 	ldy df_nxtstidx
e492 : 4c27e4           [ 3] 	jmp df_rt_exec_init_ptr
                             
                             
                             ;****************************************
                             ;* Run statement in A
                             ;****************************************
e495 :                       df_rt_run_token
                             	; mask off MSB
                             ;	and #0x7f
                             	; multiply by 2
e495 : 0a               [ 2] 	asl a
e496 : aa               [ 2] 	tax
e497 : bd82e5           [ 4] 	lda df_rt_tokenjmp,x
e49a : 85a1             [ 3] 	sta df_tmpptra
e49c : bd83e5           [ 4] 	lda df_rt_tokenjmp+1,x
e49f : 85a2             [ 3] 	sta df_tmpptra+1
                             	; execution code finishes with rts
e4a1 : 6ca100           [ 6] 	jmp (df_tmpptra)
                             
                             
                             ;****************************************
                             ;* X,A : Line Address, Y = Index
                             ;* C=0 Found next statement
                             ;* C=1 No statement found
                             ;****************************************
e4a4 :                       df_rt_nextstat
                             	; save pointer
e4a4 : 8690             [ 3] 	stx df_lineptr
e4a6 : 8591             [ 3] 	sta df_lineptr+1
                             	; if end of program then err
e4a8 : a200             [ 2] 	ldx #0
e4aa : a190             [ 6] 	lda (df_lineptr,x)
e4ac : f01c             [ 3] 	beq df_rt_nextstat_err
                             	; if next statement idx 0
e4ae : b190             [ 5] 	lda (df_lineptr),y
                             	; then go to next line
e4b0 : f007             [ 3] 	beq df_rt_nextstat_ln
                             	; else make this Y
e4b2 : a8               [ 2] 	tay
                             	; X = line low
e4b3 : a690             [ 3] 	ldx df_lineptr
                             	; A = line high
e4b5 : a591             [ 3] 	lda df_lineptr+1
e4b7 : 18               [ 2] 	clc
e4b8 : 60               [ 6] 	rts
e4b9 :                       df_rt_nextstat_ln
                             	; for next line, add line length to ptr
e4b9 : 18               [ 2] 	clc
e4ba : a190             [ 6] 	lda (df_lineptr,x)
e4bc : 6590             [ 3] 	adc df_lineptr
e4be : 8590             [ 3] 	sta df_lineptr
e4c0 : a591             [ 3] 	lda df_lineptr+1
AS65 Assembler for R6502 [1.42].                                     Page  191
---------------------------------- bank0.s -----------------------------------

e4c2 : 6900             [ 2] 	adc #0
e4c4 : 8591             [ 3] 	sta df_lineptr+1
                             	; if end of program set C
e4c6 : a190             [ 6] 	lda (df_lineptr,x)
e4c8 : d004             [ 3] 	bne df_rt_nextstat_dn
e4ca :                       df_rt_nextstat_err
e4ca : a000             [ 2] 	ldy #0
e4cc : 38               [ 2] 	sec
e4cd : 60               [ 6] 	rts
e4ce :                       df_rt_nextstat_dn
e4ce : a690             [ 3] 	ldx df_lineptr
e4d0 : a591             [ 3] 	lda df_lineptr+1
                             	; always skip line number and length for start o
e4d2 : a003             [ 2] 	ldy #3
e4d4 : 18               [ 2] 	clc
e4d5 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Push current line and statement to runtime sta
                             ;****************************************
e4d6 :                       df_rt_push_stat
e4d6 : a580             [ 3] 	lda df_curstidx
e4d8 : 20eaf6           [ 6] 	jsr df_rst_pushByte
e4db : a587             [ 3] 	lda df_currlin+1
e4dd : a686             [ 3] 	ldx df_currlin
e4df : 4c02f7           [ 3] 	jmp df_rst_pushWord
                             ;	clc
                             ;	rts
                             
                             ;****************************************
                             ;* Pop line and statement from runtime stack
                             ;* And transfer control to next statement
                             ;****************************************
e4e2 :                       df_rt_pop_stat
e4e2 : 2010f7           [ 6] 	jsr df_rst_popWord
e4e5 : 8689             [ 3] 	stx	df_nextlin
e4e7 : 858a             [ 3] 	sta df_nextlin+1
e4e9 : 20f3f6           [ 6] 	jsr df_rst_popByte
e4ec : a8               [ 2] 	tay
e4ed : a689             [ 3] 	ldx df_nextlin
e4ef : a58a             [ 3] 	lda df_nextlin+1
e4f1 : 20a4e4           [ 6] 	jsr df_rt_nextstat
e4f4 : 8689             [ 3] 	stx df_nextlin
e4f6 : 858a             [ 3] 	sta df_nextlin+1
e4f8 : 847f             [ 3] 	sty df_nxtstidx
                             ;	clc
e4fa : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Find proc definition in procptr
                             ;* Only call if proc not found before
                             ;****************************************
e4fb :                       df_rt_findproc
                             	; start at program beginning
                             	_cpyZPWord df_prgstrt,df_lineptr
                             
e503 : a003             [ 2] 	ldy #3
e505 : 8492             [ 3] 	sty df_lineidx
e507 : a200             [ 2] 	ldx #0
e509 : a190             [ 6] 	lda (df_lineptr,x)
e50b : f034             [ 3] 	beq df_rt_findproc_err
e50d :                       df_rt_findproc_cmd
AS65 Assembler for R6502 [1.42].                                     Page  192
---------------------------------- bank0.s -----------------------------------

e50d : c8               [ 2] 	iny
e50e : b190             [ 5] 	lda (df_lineptr),y
e510 : 10fb             [ 3] 	bpl df_rt_findproc_cmd
e512 : c986             [ 2] 	cmp #DFRT_DEF
e514 : d017             [ 3] 	bne df_rt_findproc_nextstat
                             	; skip def token
e516 : c8               [ 2] 	iny
                             	; skip proc escape token
e517 : c8               [ 2] 	iny
                             	; now check the proc address against procptr
e518 : b190             [ 5] 	lda (df_lineptr),y
e51a : c58e             [ 3] 	cmp df_procptr
e51c : d00f             [ 3] 	bne df_rt_findproc_nextstat
e51e : c8               [ 2] 	iny
e51f : b190             [ 5] 	lda (df_lineptr),y
e521 : c58f             [ 3] 	cmp df_procptr+1
e523 : d008             [ 3] 	bne df_rt_findproc_nextstat
                             
                             	; found it, return AXY with line details
e525 : a690             [ 3] 	ldx df_lineptr
e527 : a591             [ 3] 	lda df_lineptr+1
e529 : a492             [ 3] 	ldy df_lineidx
e52b : 18               [ 2] 	clc
e52c : 60               [ 6] 	rts
e52d :                       df_rt_findproc_nextstat
                             	; restore AXY line details and find next stateme
e52d : a690             [ 3] 	ldx df_lineptr
e52f : a591             [ 3] 	lda df_lineptr+1
e531 : a492             [ 3] 	ldy df_lineidx
e533 : 20a4e4           [ 6] 	jsr df_rt_nextstat
e536 : b009             [ 3] 	bcs df_rt_findproc_err
e538 : 8690             [ 3] 	stx df_lineptr
e53a : 8591             [ 3] 	sta df_lineptr+1
e53c : 8492             [ 3] 	sty df_lineidx
e53e : 4c0de5           [ 3] 	jmp df_rt_findproc_cmd
                             	; error
e541 :                       df_rt_findproc_err
                             	SWBRK DFERR_NOPROC
                             
                             
                             ;****************************************
                             ;* Find an escape value
                             ;* Does not check for end of line or statement
                             ;****************************************
e543 :                       df_rt_findescval
e543 : a488             [ 3] 	ldy df_exeoff
e545 : 88               [ 2] 	dey
e546 :                       df_rt_findescval_loop
e546 : c8               [ 2] 	iny
e547 : b186             [ 5] 	lda (df_currlin),y
e549 : c920             [ 2] 	cmp #DFTK_ESCVAL
e54b : b0f9             [ 3] 	bcs df_rt_findescval_loop
e54d : 8488             [ 3] 	sty df_exeoff
e54f : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Skip white space
                             ;* Does not check for end of line or statement
                             ;* A contains non-ws char, df_exeoff updated
                             ;****************************************
e550 :                       df_rt_skip_ws
e550 : a488             [ 3] 	ldy df_exeoff
AS65 Assembler for R6502 [1.42].                                     Page  193
---------------------------------- bank0.s -----------------------------------

e552 : 88               [ 2] 	dey
e553 :                       df_rt_skip_ws_loop
e553 : c8               [ 2] 	iny
e554 : b186             [ 5] 	lda (df_currlin),y
e556 : c920             [ 2] 	cmp #' '
e558 : f0f9             [ 3] 	beq df_rt_skip_ws_loop
e55a : 8488             [ 3] 	sty df_exeoff
e55c : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Get an lvar
                             ;* Assumes next token will be escape DFTK_VAR
                             ;* tmpptra contains vvt slot address
                             ;* X,A is the lvar pointer
                             ;****************************************
e55d :                       df_rt_getlvar
e55d : 2043e5           [ 6] 	jsr df_rt_findescval
                             	; move past the escape value
e560 : c8               [ 2] 	iny
                             
                             	; get variable address
e561 : b186             [ 5] 	lda (df_currlin),y
e563 : 85a1             [ 3] 	sta df_tmpptra
e565 : c8               [ 2] 	iny
e566 : b186             [ 5] 	lda (df_currlin),y
e568 : 85a2             [ 3] 	sta df_tmpptra+1
                             
e56a : 8488             [ 3] 	sty df_exeoff
                             	; get the type
e56c : a000             [ 2] 	ldy #0
e56e : b1a1             [ 5] 	lda (df_tmpptra),y
                             	; set carry flag to return pointer (lvar)
e570 : 38               [ 2] 	sec
e571 : a488             [ 3] 	ldy df_exeoff
e573 : 203de2           [ 6] 	jsr df_rt_eval_var
e576 : 4c70f7           [ 3] 	jmp df_ost_popPtr
                             ;	rts
                             
                             ;****************************************
                             ;* Pop stat from rt stack and continue
                             ;* Y MUST BE ON THE CPU STACK AS IT GETS PLYed HE
                             ;****************************************
e579 :                       df_rt_pop_stat_go
e579 : 20e2e4           [ 6] 	jsr df_rt_pop_stat
                             	; restore stack pointer so we don't lose this en
e57c : 68               [ 4] 	pla
e57d : a8               [ 2] 	tay
e57e : 8476             [ 3] 	sty df_rtstop
e580 : 18               [ 2] 	clc
e581 : 60               [ 6] 	rts
                             
                             	include "dflat/rtjmptab.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  RTJUMPTAB.S
                             ;*  Runtime token jump table.
AS65 Assembler for R6502 [1.42].                                     Page  194
---------------------------------- bank0.s -----------------------------------

                             ;*  dflat uses four key tables to tokenise and ru
                             ;*  - df_tokensyms    - table of token symbols
                             ;*  - df_tk_tokentype - table of token types
                             ;*  - df_tk_tokenjmp  - table of tokenising routi
                             ;*  - df_rt_tokenjmp  - table of runtime token an
                             ;*  The key is the token symbols.  When a line is
                             ;*  in to the raw (untokenised) buffer, df_tokens
                             ;*  used to identify tokens.  The position of the
                             ;*  token is used to then look up type and jump v
                             ;*  in the other tables.
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code  
                             
                             ; Tokeniser jump table
                             ; In token order of df_tokensyms
e582 :                       df_rt_tokenjmp
e582 : 8aed                  	dw	df_rt_assign
e584 : 7ff5                  	dw	df_rt_proc
e586 : 9bed                  	dw	df_rt_comment
e588 : 42ed                  	dw	df_rt_println
e58a : fbec                  	dw	df_rt_printat
e58c : 05ed                  	dw	df_rt_print
e58e : 21f6                  	dw	df_rt_def			; 0x86
e590 : a3f6                  	dw	df_rt_enddef		; 0x87
e592 : a8f6                  	dw	df_rt_return		; 0x88
e594 : 3ff5                  	dw	df_rt_abort			; 0x89
e596 : 49eb                  	dw	df_rt_local
e598 : 79eb                  	dw	df_rt_dim
e59a : 0dea                  	dw	df_rt_repeat		; 0x8c
e59c : 15ea                  	dw	df_rt_until
e59e : 70e9                  	dw	df_rt_for			; 0x8e
e5a0 : aee9                  	dw	df_rt_next			; 0x8f
e5a2 : 47e8                  	dw	df_rt_while			; 0x90
e5a4 : aae8                  	dw	df_rt_wend			; 0x81
e5a6 : 2de9                  	dw	df_rt_if			; 0x92
e5a8 : 1be9                  	dw	df_rt_else			; 0x93
e5aa : 16e9                  	dw	df_rt_endif			; 0x94
e5ac : 1be9                  	dw	df_rt_elseif		; 0x95
e5ae : 9bed                  	dw	df_rt_data			; 0x96
e5b0 : 6afa                  	dw	df_rt_asm_assemble	; 0x97 df_rt_asm_assemble
e5b2 : 9ced                  	dw	df_rt_run
e5b4 : 9cee                  	dw	df_rt_list
e5b6 : 0deb                  	dw	df_rt_input
e5b8 : 8bec                  	dw	df_rt_text
e5ba : 05ec                  	dw	df_rt_plot
e5bc : 79ec                  	dw	df_rt_cursor
e5be : 02ec                  	dw	df_rt_cls
e5c0 : 10f1                  	dw	df_rt_poke
e5c2 : 01f1                  	dw	df_rt_doke
e5c4 : 43f1                  	dw	df_rt_sound
e5c6 : 56f1                  	dw	df_rt_music
e5c8 : 6bf1                  	dw	df_rt_play
e5ca : 63f2                  	dw	df_rt_save
e5cc : b5f2                  	dw	df_rt_load
e5ce : f1ea                  	dw	df_rt_read
e5d0 : 44e8                  	dw	df_rt_new
e5d2 : b1ed                  	dw	df_rt_renum
e5d4 : e2ec                  	dw	df_rt_wait
e5d6 : 1bf3                  	dw	df_rt_reset
AS65 Assembler for R6502 [1.42].                                     Page  195
---------------------------------- bank0.s -----------------------------------

e5d8 : 8eec                  	dw	df_rt_hires
e5da : a7ec                  	dw	df_rt_point
e5dc : d1ec                  	dw	df_rt_line
e5de : c3ec                  	dw	df_rt_lineto
e5e0 : 91ec                  	dw	df_rt_pixmode
e5e2 : 97ec                  	dw	df_rt_ink
e5e4 : 9dec                  	dw	df_rt_paper
e5e6 : b1ec                  	dw	df_rt_circle
e5e8 : 7fec                  	dw	df_rt_himem
e5ea : 41e8                  	dw	df_rt_monitor
e5ec : 41f5                  	dw	df_rt_sprchar
e5ee : 4bf5                  	dw	df_rt_sprpos
e5f0 : 57f5                  	dw	df_rt_sprupd
e5f2 : 60f5                  	dw	df_rt_sprinit
e5f4 : 63f5                  	dw	df_rt_sprmulti
e5f6 : 42f2                  	dw	df_rt_bsave
e5f8 : 0ff2                  	dw	df_rt_bload
e5fa : bbf1                  	dw	df_rt_tsave
e5fc : d5f1                  	dw	df_rt_tload
                             
e5fe : 33f3                  	dw	df_rt_peek
e600 : 30f3                  	dw	df_rt_deek
e602 : c2f3                  	dw	df_rt_stick
e604 : caf3                  	dw	df_rt_get
e606 : 6df4                  	dw	df_rt_chr
e608 : b6f4                  	dw	df_rt_left
e60a : c9f4                  	dw	df_rt_right
e60c : e6f4                  	dw	df_rt_mid
e60e : 06f5                  	dw	df_rt_len
e610 : 72f3                  	dw	df_rt_mem
e612 : e0f3                  	dw	df_rt_scrn
e614 : 4ef3                  	dw	df_rt_rnd
e616 : fef3                  	dw	df_rt_elapsed
e618 : 19f4                  	dw	df_rt_call
e61a : 83f4                  	dw	df_rt_hex
e61c : 14f5                  	dw	df_rt_asc
e61e : 27f5                  	dw	df_rt_val
e620 : eff3                  	dw	df_rt_pixel
e622 : 69f5                  	dw	df_rt_sprhit
                             	
e624 : 97e6                  	dw	df_rt_mult
e626 : b8e6                  	dw	df_rt_div
e628 : d9e6                  	dw	df_rt_mod
e62a : fae6                  	dw	df_rt_asl
e62c : 0de7                  	dw	df_rt_lsr
e62e : 71e6                  	dw	df_rt_add
e630 : 84e6                  	dw	df_rt_sub
                             	
e632 : 20e7                  	dw	df_rt_and
e634 : 2fe7                  	dw	df_rt_or
e636 : 3ee7                  	dw	df_rt_eor
e638 : d7e7                  	dw	df_rt_comlte
e63a : e0e7                  	dw	df_rt_comgte
e63c : e9e7                  	dw	df_rt_comne
e63e : bce7                  	dw	df_rt_comlt
e640 : c5e7                  	dw	df_rt_comgt
e642 : cee7                  	dw	df_rt_comeq
                             
                             
                             ; escape sequence handlers
                             ; to do the reverse of tokenising during the list
                             ; command which is also used to save to disk.
AS65 Assembler for R6502 [1.42].                                     Page  196
---------------------------------- bank0.s -----------------------------------

e644 :                       df_rt_escjmp
e644 : 71ef                  	dw df_rt_lst_chr
e646 : 70ef                  	dw df_rt_lst_reserved
e648 : 70ef                  	dw df_rt_lst_reserved
e64a : 70ef                  	dw df_rt_lst_reserved
e64c : 70ef                  	dw df_rt_lst_reserved	
e64e : 70ef                  	dw df_rt_lst_reserved	; no such thing as bytdec
e650 : 8eef                  	dw df_rt_lst_bythex
e652 : b3ef                  	dw df_rt_lst_bytbin
e654 : 70ef                  	dw df_rt_lst_reserved	
e656 : dfef                  	dw df_rt_lst_intdec
e658 : a1ef                  	dw df_rt_lst_inthex
e65a : bcef                  	dw df_rt_lst_intbin
e65c : 70ef                  	dw df_rt_lst_reserved
e65e : 70ef                  	dw df_rt_lst_reserved
e660 : 70ef                  	dw df_rt_lst_reserved
e662 : 70ef                  	dw df_rt_lst_reserved	
e664 : 3ef0                  	dw df_rt_lst_strlit
e666 : eaef                  	dw df_rt_lst_var
e668 : eaef                  	dw df_rt_lst_proc
                             
                             	include "dflat/rtsubs.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  RTSUBS.S
                             ;*  Module that implements the runtime execution 
                             ;*  keywords and functions.
                             ;*  So this is where most of the action is for ru
                             ;*  a line is being executed, the dflat runtime c
                             ;*  jumps through the runtime table to routines h
                             ;*  Every dflat statement begins with a token (ig
                             ;*  whitespace), even the implicit assignment and
                             ;*  invocation.
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code
                             
e66a :                       mod_sz_rtsubs_s
                             
                             	include "dflat/numop.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  NUMOP.S
                             ;*	Dflat number AND string operators.
                             ;*  Uses the operator stack to get parameters, le
                             ;*  result on the operator stack.
                             ;*
                             ;************************************************
AS65 Assembler for R6502 [1.42].                                     Page  197
---------------------------------- bank0.s -----------------------------------

                             
                             	; ROM code
                             	code  
                             
                             ; common pushint code
e66a :                       df_rt_putintres
e66a : a6a1             [ 3] 	ldx df_tmpptra
e66c : a5a2             [ 3] 	lda df_tmpptra+1
e66e : 4c34f7           [ 3] 	jmp df_ost_pushInt
                             
                             ; add two numbers
e671 :                       df_rt_add
e671 : 204ae3           [ 6] 	jsr df_rt_get2Ints
                             	_addZPWord df_tmpptra,df_tmpptrb
                             
e681 : 4c6ae6           [ 3] 	jmp df_rt_putintres
                             	
                             ; subtract
e684 :                       df_rt_sub
e684 : 204ae3           [ 6] 	jsr df_rt_get2Ints
                             	_subZPWord df_tmpptra,df_tmpptrb
                             
e694 : 4c6ae6           [ 3] 	jmp df_rt_putintres
                             
                             ; multiply
e697 :                       df_rt_mult
e697 : 204ae3           [ 6] 	jsr df_rt_get2Ints
                             	_cpyZPWord df_tmpptra,num_a
                             
                             	_cpyZPWord df_tmpptrb,num_b
                             
e6aa : 208ed4           [ 6] 	jsr int_mult
                             	_cpyZPWord num_a,df_tmpptra
                             
e6b5 : 4c6ae6           [ 3] 	jmp df_rt_putintres
                             
                             ; divide
e6b8 :                       df_rt_div
e6b8 : 204ae3           [ 6] 	jsr df_rt_get2Ints
                             	_cpyZPWord df_tmpptra,num_a
                             
                             	_cpyZPWord df_tmpptrb,num_b
                             
e6cb : 20b9d4           [ 6] 	jsr int_div
                             	_cpyZPWord num_a,df_tmpptra
                             
e6d6 : 4c6ae6           [ 3] 	jmp df_rt_putintres
                             
                             ; mod
e6d9 :                       df_rt_mod
e6d9 : 204ae3           [ 6] 	jsr df_rt_get2Ints
                             	_cpyZPWord df_tmpptra,num_a
                             
                             	_cpyZPWord df_tmpptrb,num_b
                             
e6ec : 20b9d4           [ 6] 	jsr int_div
                             	_cpyZPWord num_x,df_tmpptra
                             
e6f7 : 4c6ae6           [ 3] 	jmp df_rt_putintres
                             
                             ; shift left
e6fa :                       df_rt_asl
AS65 Assembler for R6502 [1.42].                                     Page  198
---------------------------------- bank0.s -----------------------------------

e6fa : 204ae3           [ 6] 	jsr df_rt_get2Ints
                             	; use low byte only for # of shifts
e6fd : a6a3             [ 3] 	ldx df_tmpptrb
e6ff : e8               [ 2] 	inx
e700 :                       df_rt_aslbit
e700 : ca               [ 2] 	dex
e701 : f007             [ 3] 	beq df_rt_asldone
e703 : 06a1             [ 5] 	asl df_tmpptra
e705 : 26a2             [ 5] 	rol df_tmpptra+1
e707 : 4c00e7           [ 3] 	jmp df_rt_aslbit
e70a :                       df_rt_asldone
e70a : 4c6ae6           [ 3] 	jmp df_rt_putintres
                             
                             ; shift right
e70d :                       df_rt_lsr
e70d : 204ae3           [ 6] 	jsr df_rt_get2Ints
                             	; use low byte only for # of shifts
e710 : a6a3             [ 3] 	ldx df_tmpptrb
e712 : e8               [ 2] 	inx
e713 :                       df_rt_lsrbit
e713 : ca               [ 2] 	dex
e714 : f007             [ 3] 	beq df_rt_lsrdone
e716 : 46a2             [ 5] 	lsr df_tmpptra+1
e718 : 66a1             [ 5] 	ror df_tmpptra
e71a : 4c13e7           [ 3] 	jmp df_rt_lsrbit
e71d :                       df_rt_lsrdone
e71d : 4c6ae6           [ 3] 	jmp df_rt_putintres
                             
                             ; logical and
e720 :                       df_rt_and
e720 : 204ae3           [ 6] 	jsr df_rt_get2Ints
e723 : a5a1             [ 3] 	lda df_tmpptra
e725 : 25a3             [ 3] 	and df_tmpptrb
e727 : aa               [ 2] 	tax
e728 : a5a2             [ 3] 	lda df_tmpptra+1
e72a : 25a4             [ 3] 	and df_tmpptrb+1
e72c : 4c34f7           [ 3] 	jmp df_ost_pushInt
                             	
                             ; logical or
e72f :                       df_rt_or
e72f : 204ae3           [ 6] 	jsr df_rt_get2Ints
e732 : a5a1             [ 3] 	lda df_tmpptra
e734 : 05a3             [ 3] 	ora df_tmpptrb
e736 : aa               [ 2] 	tax
e737 : a5a2             [ 3] 	lda df_tmpptra+1
e739 : 05a4             [ 3] 	ora df_tmpptrb+1
e73b : 4c34f7           [ 3] 	jmp df_ost_pushInt
                             
                             ; logical eor
e73e :                       df_rt_eor
e73e : 204ae3           [ 6] 	jsr df_rt_get2Ints
e741 : a5a1             [ 3] 	lda df_tmpptra
e743 : 45a3             [ 3] 	eor df_tmpptrb
e745 : aa               [ 2] 	tax
e746 : a5a2             [ 3] 	lda df_tmpptra+1
e748 : 45a4             [ 3] 	eor df_tmpptrb+1
e74a : 4c34f7           [ 3] 	jmp df_ost_pushInt
                             
                             ; a==b common function
e74d :                       df_rt_aequb
e74d : a5a1             [ 3] 	lda df_tmpptra
e74f : c5a3             [ 3] 	cmp df_tmpptrb
AS65 Assembler for R6502 [1.42].                                     Page  199
---------------------------------- bank0.s -----------------------------------

e751 : d004             [ 3] 	bne df_rt_aequbFin
e753 : a5a2             [ 3] 	lda df_tmpptra+1
e755 : c5a4             [ 3] 	cmp df_tmpptrb+1
e757 :                       df_rt_aequbFin
e757 : 60               [ 6] 	rts
                             
                             ; a-b common function
e758 :                       df_rt_asubb
e758 : 38               [ 2] 	sec
e759 : a5a1             [ 3] 	lda df_tmpptra
e75b : e5a3             [ 3] 	sbc df_tmpptrb
e75d : a5a2             [ 3] 	lda df_tmpptra+1
e75f : e5a4             [ 3] 	sbc df_tmpptrb+1
e761 : 5002             [ 3] 	bvc df_rt_asubbFin
e763 : 4980             [ 2] 	eor #0x80
e765 :                       df_rt_asubbFin
e765 : 60               [ 6] 	rts
                             
                             ; b-a common function
e766 :                       df_rt_bsuba
e766 : 38               [ 2] 	sec
e767 : a5a3             [ 3] 	lda df_tmpptrb
e769 : e5a1             [ 3] 	sbc df_tmpptra
e76b : a5a4             [ 3] 	lda df_tmpptrb+1
e76d : e5a2             [ 3] 	sbc df_tmpptra+1
e76f : 5002             [ 3] 	bvc df_rt_bsubaFin
e771 : 4980             [ 2] 	eor #0x80
e773 :                       df_rt_bsubaFin
e773 : 60               [ 6] 	rts
                             
                             ; common routine push true
e774 :                       df_rt_true
e774 : a2ff             [ 2] 	ldx #0xff
e776 : 8a               [ 2] 	txa
e777 : 4c34f7           [ 3] 	jmp df_ost_pushInt
                             
                             ; common routine push false
e77a :                       df_rt_false
e77a : a200             [ 2] 	ldx #0x00
e77c : 8a               [ 2] 	txa
e77d : 4c34f7           [ 3] 	jmp df_ost_pushInt
                             
                             ; a < b == (a-b) < 0
e780 :                       df_rt_lt
e780 : 204ae3           [ 6] 	jsr df_rt_get2Ints
e783 : 2058e7           [ 6] 	jsr df_rt_asubb
e786 : 30ec             [ 3] 	bmi df_rt_true
e788 : 10f0             [ 3] 	bpl df_rt_false
                             
                             ; a <=b == !(b-a > 0)
e78a :                       df_rt_lte
e78a : 204ae3           [ 6] 	jsr df_rt_get2Ints
e78d :                       df_rt_lte_calc
e78d : 2066e7           [ 6] 	jsr df_rt_bsuba
e790 : 30e8             [ 3] 	bmi df_rt_false
e792 : 10e0             [ 3] 	bpl df_rt_true
                             
                             ; a > b == (b-a) < 0
e794 :                       df_rt_gt
e794 : 204ae3           [ 6] 	jsr df_rt_get2Ints
e797 : 2066e7           [ 6] 	jsr df_rt_bsuba
e79a : 30d8             [ 3] 	bmi df_rt_true
AS65 Assembler for R6502 [1.42].                                     Page  200
---------------------------------- bank0.s -----------------------------------

e79c : 10dc             [ 3] 	bpl df_rt_false
                             
                             ; a >= b == (a-b >=0)
e79e :                       df_rt_gte
e79e : 204ae3           [ 6] 	jsr df_rt_get2Ints
e7a1 :                       df_rt_gte_calc
e7a1 : 2058e7           [ 6] 	jsr df_rt_asubb
e7a4 : 10ce             [ 3] 	bpl df_rt_true
e7a6 : 30d2             [ 3] 	bmi df_rt_false
                             
                             ; a == b
e7a8 :                       df_rt_eq
e7a8 : 204ae3           [ 6] 	jsr df_rt_get2Ints
e7ab : 204de7           [ 6] 	jsr df_rt_aequb
e7ae : d0ca             [ 3] 	bne df_rt_false
e7b0 : f0c2             [ 3] 	beq df_rt_true
                             
                             ; a <> b
e7b2 :                       df_rt_ne
e7b2 : 204ae3           [ 6] 	jsr df_rt_get2Ints
e7b5 : 204de7           [ 6] 	jsr df_rt_aequb
e7b8 : f0c0             [ 3] 	beq df_rt_false
e7ba : d0b8             [ 3] 	bne df_rt_true
                             
                             ; Common usage of boolean operators for num and s
                             
e7bc :                       df_rt_comlt
                             	; First find the data type on the stack
e7bc : 2062f7           [ 6] 	jsr df_ost_peekType
e7bf : 2980             [ 2] 	and #DFST_STR
e7c1 : d04a             [ 4] 	bne df_rt_slt
                             	; If not string then assume number
e7c3 : f0bb             [ 3] 	beq df_rt_lt
                             
e7c5 :                       df_rt_comgt
                             	; First find the data type on the stack
e7c5 : 2062f7           [ 6] 	jsr df_ost_peekType
e7c8 : 2980             [ 2] 	and #DFST_STR
e7ca : d048             [ 4] 	bne df_rt_sgt
                             	; If not string then assume number
e7cc : f0c6             [ 3] 	beq df_rt_gt
                             
e7ce :                       df_rt_comeq
                             	; First find the data type on the stack
e7ce : 2062f7           [ 6] 	jsr df_ost_peekType
e7d1 : 2980             [ 2] 	and #DFST_STR
e7d3 : d048             [ 4] 	bne df_rt_seq
                             	; If not string then assume number
e7d5 : f0d1             [ 3] 	beq df_rt_eq
                             
e7d7 :                       df_rt_comlte
                             	; First find the data type on the stack
e7d7 : 2062f7           [ 6] 	jsr df_ost_peekType
e7da : 2980             [ 2] 	and #DFST_STR
e7dc : d014             [ 3] 	bne df_rt_slte
                             	; If not string then assume number
e7de : f0aa             [ 3] 	beq df_rt_lte
                             	
e7e0 :                       df_rt_comgte
                             	; First find the data type on the stack
e7e0 : 2062f7           [ 6] 	jsr df_ost_peekType
e7e3 : 2980             [ 2] 	and #DFST_STR
AS65 Assembler for R6502 [1.42].                                     Page  201
---------------------------------- bank0.s -----------------------------------

e7e5 : d018             [ 3] 	bne df_rt_sgte
                             	; If not string then assume number
e7e7 : f0b5             [ 3] 	beq df_rt_gte
                             
e7e9 :                       df_rt_comne
                             	; First find the data type on the stack
e7e9 : 2062f7           [ 6] 	jsr df_ost_peekType
e7ec : 2980             [ 2] 	and #DFST_STR
e7ee : d016             [ 4] 	bne df_rt_sne
                             	; If not string then assume number
e7f0 : f0c0             [ 3] 	beq df_rt_ne
                             
                             
                             ;********** STRING OPS **********
                             
                             ; string less than or equal
e7f2 :                       df_rt_slte
e7f2 : 2024e8           [ 6] 	jsr df_rt_str_comp
e7f5 : 3005             [ 3] 	bmi df_rt_str_comp_true
e7f7 : f003             [ 3] 	beq df_rt_str_comp_true
e7f9 :                       df_rt_str_comp_false
e7f9 : 4c7ae7           [ 3] 	jmp df_rt_false
e7fc :                       df_rt_str_comp_true
e7fc : 4c74e7           [ 3] 	jmp df_rt_true	
                             
                             ; string greater then or equal	
e7ff :                       df_rt_sgte
e7ff : 2024e8           [ 6] 	jsr df_rt_str_comp
e802 : 10f8             [ 4] 	bpl df_rt_str_comp_true
e804 : 30f3             [ 4] 	bmi df_rt_str_comp_false
                             
                             ; string not equal
e806 :                       df_rt_sne
e806 : 2024e8           [ 6] 	jsr df_rt_str_comp
e809 : d0f1             [ 4] 	bne df_rt_str_comp_true
e80b : f0ec             [ 4] 	beq df_rt_str_comp_false
                             
                             ; string less than
e80d :                       df_rt_slt
e80d : 2024e8           [ 6] 	jsr df_rt_str_comp
e810 : 30ea             [ 4] 	bmi df_rt_str_comp_true
e812 : 10e5             [ 4] 	bpl df_rt_str_comp_false
                             
                             ; string greater than
e814 :                       df_rt_sgt
e814 : 2024e8           [ 6] 	jsr df_rt_str_comp
e817 : 30e0             [ 4] 	bmi df_rt_str_comp_false
e819 : f0de             [ 4] 	beq df_rt_str_comp_false
e81b : d0df             [ 4] 	bne df_rt_str_comp_true
                             
                             ; string equal
e81d :                       df_rt_seq
e81d : 2024e8           [ 6] 	jsr df_rt_str_comp
e820 : f0da             [ 4] 	beq df_rt_str_comp_true
e822 : d0d5             [ 4] 	bne df_rt_str_comp_false
                             
                             ; common string comparator
                             ; N=1 means <
                             ; Z=0 means >
                             ; Z=1 means ==
e824 :                       df_rt_str_comp
e824 : 2059e3           [ 6] 	jsr df_rt_get2Strs
AS65 Assembler for R6502 [1.42].                                     Page  202
---------------------------------- bank0.s -----------------------------------

e827 : a000             [ 2] 	ldy #0
e829 :                       df_rt_str_comp_byte
e829 : b1a1             [ 5] 	lda (df_tmpptra),y
e82b : aa               [ 2] 	tax							; Save op1 char in X
e82c : d1a3             [ 5] 	cmp (df_tmpptrb),y
                             	; if c=0 then <
e82e : 9008             [ 3] 	bcc df_rt_str_comp_lt
                             	; if c=1 and nz then >
e830 : d009             [ 3] 	bne df_rt_str_comp_gt
                             	; if here then both strings still the same
e832 : 8a               [ 2] 	txa							; What was op1 char
                             	; if char is zero then end
e833 : f009             [ 3] 	beq df_rt_str_comp_eq
                             	; else do next char
e835 : c8               [ 2] 	iny
e836 : d0f1             [ 3] 	bne df_rt_str_comp_byte ; Always - relying on Y 
e838 :                       df_rt_str_comp_lt
e838 : a9ff             [ 2] 	lda #0xff
e83a : 60               [ 6] 	rts
e83b :                       df_rt_str_comp_gt
e83b : a901             [ 2] 	lda #0x01
e83d : 60               [ 6] 	rts
e83e :                       df_rt_str_comp_eq
e83e : a900             [ 2] 	lda #0x00
e840 : 60               [ 6] 	rts
                             
                             
                             
                             
e841 :                       df_rt_monitor
e841 : 4cd0d2           [ 3] 	jmp command_line
                             
e844 :                       df_rt_new
e844 : 4c9af7           [ 3] 	jmp df_clear
                             
e847 :                       df_rt_while
                             	; push statement address
e847 : 20d6e4           [ 6] 	jsr df_rt_push_stat
                             	; DFRT_WHILE token
e84a : a990             [ 2] 	lda #DFRT_WHILE
e84c : 20eaf6           [ 6] 	jsr df_rst_pushByte
                             
                             	; get value in A,X
e84f : 208ae0           [ 6] 	jsr df_rt_getnval
                             
                             	; if value<>0 then continue
e852 : e000             [ 2] 	cpx #0
e854 : f001             [ 3] 	beq df_rt_while_done
e856 : 60               [ 6] 	rts
e857 :                       df_rt_while_done
                             	; pop while data off stack as not needed
e857 : 2010f7           [ 6] 	jsr df_rst_popWord
e85a : 2010f7           [ 6] 	jsr df_rst_popWord
                             	; while evaluated false so find wend
                             	; but check for any nested while/wends
                             	; nest = 1 to start
e85d : a593             [ 3] 	lda df_ifnest
e85f : 48               [ 3] 	pha
e860 : a901             [ 2] 	lda #1
e862 : 8593             [ 3] 	sta df_ifnest
                             	; find the matching else/elseif/endif
                             	; start from current statement
AS65 Assembler for R6502 [1.42].                                     Page  203
---------------------------------- bank0.s -----------------------------------

                             	_cpyZPWord df_currlin,df_nextlin
                             
e86c :                       df_rt_findwend
e86c : a689             [ 3] 	ldx df_nextlin
e86e : a58a             [ 3] 	lda df_nextlin+1
e870 : a480             [ 3] 	ldy df_curstidx
e872 : 20a4e4           [ 6] 	jsr df_rt_nextstat
                             	; got to end of program, then a problem
e875 : b031             [ 3] 	bcs df_rt_wend_end
e877 : 8689             [ 3] 	stx df_nextlin
e879 : 858a             [ 3] 	sta df_nextlin+1
e87b : 8480             [ 3] 	sty df_curstidx
                             	; find the command token
e87d :                       df_rt_while_cmd
e87d : c8               [ 2] 	iny
e87e : b189             [ 5] 	lda (df_nextlin),y
e880 : 10fb             [ 3] 	bpl df_rt_while_cmd
                             	; check for wend
e882 : c991             [ 2] 	cmp #DFRT_WEND
e884 : d019             [ 3] 	bne df_rt_check_while
                             	; decrement nest
e886 : c693             [ 5] 	dec df_ifnest
                             	; if not zero then go find more commands
e888 : d0e2             [ 3] 	bne df_rt_findwend
                             	; else found it, restore if nest
                             	; and skip the wend statement
e88a : 68               [ 4] 	pla
e88b : 8593             [ 3] 	sta df_ifnest
e88d : a689             [ 3] 	ldx df_nextlin
e88f : a58a             [ 3] 	lda df_nextlin+1
e891 : a480             [ 3] 	ldy df_curstidx
e893 : 20a4e4           [ 6] 	jsr df_rt_nextstat
                             	; got to end of program, then a problem
e896 : b010             [ 3] 	bcs df_rt_wend_end
                             	; need to update nxtstidx to transfer control
e898 : 8689             [ 3] 	stx df_nextlin
e89a : 858a             [ 3] 	sta df_nextlin+1
e89c : 847f             [ 3] 	sty df_nxtstidx
e89e : 60               [ 6] 	rts
e89f :                       df_rt_check_while
                             	; check for while
e89f : c990             [ 2] 	cmp #DFRT_WHILE
e8a1 : d0c9             [ 3] 	bne df_rt_findwend
                             	; if while found then increment nest
e8a3 : e693             [ 5] 	inc df_ifnest
e8a5 : 4c6ce8           [ 3] 	jmp df_rt_findwend
e8a8 :                       df_rt_wend_end
                             	SWBRK DFERR_IMMEDIATE
                             
                             
e8aa :                       df_rt_wend
e8aa : 20f3f6           [ 6] 	jsr df_rst_popByte
e8ad : c990             [ 2] 	cmp #DFRT_WHILE
e8af : d00d             [ 3] 	bne df_rt_wend_err
                             	; pop the stat and continue
e8b1 : 2010f7           [ 6] 	jsr df_rst_popWord
e8b4 : 8689             [ 3] 	stx	df_nextlin
e8b6 : 858a             [ 3] 	sta df_nextlin+1
e8b8 : 20f3f6           [ 6] 	jsr df_rst_popByte
e8bb : 857f             [ 3] 	sta df_nxtstidx
e8bd : 60               [ 6] 	rts
e8be :                       df_rt_wend_err
AS65 Assembler for R6502 [1.42].                                     Page  204
---------------------------------- bank0.s -----------------------------------

                             	SWBRK DFERR_WEND
                             
                             
                             ;move to next statement during if/else matching
                             ;end of program is an error
e8c0 :                       df_rt_if_stat
e8c0 : a689             [ 3] 	ldx df_nextlin
e8c2 : a58a             [ 3] 	lda df_nextlin+1
e8c4 : a480             [ 3] 	ldy df_curstidx
e8c6 : 20a4e4           [ 6] 	jsr df_rt_nextstat
                             	; got to end of program, then a problem
e8c9 : b009             [ 3] 	bcs df_rt_if_stat_err
e8cb : 8689             [ 3] 	stx df_nextlin
e8cd : 858a             [ 3] 	sta df_nextlin+1
e8cf : 8480             [ 3] 	sty df_curstidx
e8d1 : 847f             [ 3] 	sty df_nxtstidx
e8d3 : 60               [ 6] 	rts
                             ; program ended with no match
e8d4 :                       df_rt_if_stat_err
                             	SWBRK DFERR_UNCLOSEDIF
                             
                             
                             ; find matching else/elseif/endif
                             ; C = 0 match else/elseif/endif
                             ; C = 1 match endif only
                             ; endif is always matched
                             ; ** MAKE SURE NEXTLIN IS POPULATED! **
e8d6 :                       df_rt_if_match
                             	; save the current if nest level
e8d6 : a593             [ 3] 	lda df_ifnest
e8d8 : 48               [ 3] 	pha
                             	; local if nest level is zero to start with
e8d9 : a900             [ 2] 	lda #0
e8db : 8593             [ 3] 	sta df_ifnest
                             	; save match pref
e8dd : 08               [ 3] 	php
                             	; find the matching else/elseif/endif
                             	; start from df_nextlin, df_curstidx
e8de :                       df_rt_findelseendif
e8de : 20c0e8           [ 6] 	jsr df_rt_if_stat
                             	; find command
e8e1 :                       df_rt_ifcmd
e8e1 : c8               [ 2] 	iny
e8e2 : b189             [ 5] 	lda (df_nextlin),y
e8e4 : 10fb             [ 3] 	bpl df_rt_ifcmd
                             	; check for endif
e8e6 : c994             [ 2] 	cmp #DFRT_ENDIF
e8e8 : f015             [ 3] 	beq df_rt_ifelse
                             
e8ea : 28               [ 4] 	plp
e8eb : 08               [ 3] 	php
                             
e8ec : b008             [ 3] 	bcs df_rt_ifskipelseif
e8ee : c993             [ 2] 	cmp #DFRT_ELSE
e8f0 : f00d             [ 3] 	beq df_rt_ifelse
e8f2 : c995             [ 2] 	cmp #DFRT_ELSEIF
e8f4 : f009             [ 3] 	beq df_rt_ifelse
e8f6 :                       df_rt_ifskipelseif
                             	; another if token found - increment lcoal if ne
e8f6 : c992             [ 2] 	cmp #DFRT_IF
e8f8 : d002             [ 3] 	bne df_rt_skipnestif
e8fa : e693             [ 5] 	inc df_ifnest
AS65 Assembler for R6502 [1.42].                                     Page  205
---------------------------------- bank0.s -----------------------------------

e8fc :                       df_rt_skipnestif
                             	; no tokens of interest found, so next statement
e8fc : 4cdee8           [ 3] 	jmp df_rt_findelseendif
                             
                             	; found else/elseif/endif
                             	; but check if this is nested
e8ff :                       df_rt_ifelse
                             	; nest counter zero then found matching else/els
e8ff : a693             [ 3] 	ldx df_ifnest
e901 : f009             [ 3] 	beq df_rt_if_found
                             	; endif token found so decrement local nest
e903 : c994             [ 2] 	cmp #DFRT_ENDIF
e905 : d002             [ 3] 	bne df_rt_skipnestendif
e907 : c693             [ 5] 	dec df_ifnest
e909 :                       df_rt_skipnestendif
                             	; continue to search for else/endif
e909 : 4cdee8           [ 3] 	jmp df_rt_findelseendif
                             	; ok got a match
e90c :                       df_rt_if_found
                             	; remove pref
e90c : 28               [ 4] 	plp
                             	; restore global if nest
e90d : 8538             [ 3] 	sta tmp_d			; Using as a temp place!
e90f : 68               [ 4] 	pla					; Get nest from stack
e910 : aa               [ 2] 	tax					; And put in X
e911 : a538             [ 3] 	lda tmp_d			; Get a back from temp!
e913 : 8693             [ 3] 	stx df_ifnest		; Now restore the nest counter
                             
                             	;A contains the token found, Y is index in to df
                             ;	clc
e915 : 60               [ 6] 	rts
                             
e916 :                       df_rt_endif
                             	; decrement if next level
e916 : c693             [ 5] 	dec df_ifnest
e918 : 3011             [ 3] 	bmi df_rt_noif_err
e91a :                       df_rt_if_done
e91a : 60               [ 6] 	rts
                             
                             	; else and ifelse encountered in a normal sequen
                             	; only happens when the clause has been executed
                             	; so we only now need to find the endif
e91b :                       df_rt_elseif
e91b :                       df_rt_else
                             	; not in if mode then error
e91b : a593             [ 3] 	lda df_ifnest
e91d : f00c             [ 3] 	beq df_rt_noif_err
                             	; find endif only
                             	; starting from current line and curstidx
                             	_cpyZPWord df_currlin,df_nextlin
                             
e927 : 38               [ 2] 	sec
e928 : 4cd6e8           [ 3] 	jmp df_rt_if_match
                             
                             ; endif/else/elseif encountered outside of an if
e92b :                       df_rt_noif_err
                             	SWBRK DFERR_NOIF
                             
                             
                             	; when if is encountered, the job of this routin
                             	; to determine which clause to execute, then tra
                             	; program control to that point.  in normal prog
AS65 Assembler for R6502 [1.42].                                     Page  206
---------------------------------- bank0.s -----------------------------------

                             	; sequence else/elseif statements will signify t
                             	; of an if construct.
e92d :                       df_rt_if
                             	; increment global if nest counter
e92d : e693             [ 5] 	inc df_ifnest
e92f :                       df_rt_ifeval
                             	; get value
e92f : 208ae0           [ 6] 	jsr df_rt_getnval
                             	; if value<>0 if is successful then continue nor
e932 : c900             [ 2] 	cmp #0
e934 : d0e4             [ 3] 	bne df_rt_if_done
e936 : e000             [ 2] 	cpx #0
e938 : d0e0             [ 3] 	bne df_rt_if_done
                             	; got here then if clause evaluated to false
                             	; match with else/elseif/endif
                             	; df_nextlin is used to find the clause to execu
                             	_cpyZPWord df_currlin,df_nextlin
                             
e942 : 18               [ 2] 	clc
e943 : 20d6e8           [ 6] 	jsr df_rt_if_match
                             	; A contains the token found, Y is index of this
                             
e946 : c993             [ 2] 	cmp #DFRT_ELSE
                             	; else: df_nextlin and df_nxtstidx points to the
e948 : f023             [ 3] 	beq df_rt_do_else
                             
e94a : c994             [ 2] 	cmp #DFRT_ENDIF
                             	; else: df_nextlin and df_nxtstidx points to the
e94c : f0cc             [ 3] 	beq df_rt_if_done
                             
                             	; elif detected - increment past the token and e
                             	; make this the current line and token index
                             	_cpyZPWord df_nextlin,df_currlin
                             
                             	; move past the token and save position
e956 : c8               [ 2] 	iny
e957 : 98               [ 2] 	tya
e958 : 48               [ 3] 	pha
                             	; initialise statement pointer
e959 : a480             [ 3] 	ldy df_curstidx
e95b : a686             [ 3] 	ldx df_currlin
e95d : a587             [ 3] 	lda df_currlin+1
e95f : 200ce4           [ 6] 	jsr df_rt_init_stat_ptr
                             	; restore Y (one byte past the token) and save i
e962 : 68               [ 4] 	pla
e963 : a8               [ 2] 	tay
e964 : 8488             [ 3] 	sty df_exeoff
                             	; don't force a jump as we've initalised all var
e966 : a900             [ 2] 	lda #0
e968 : 858a             [ 3] 	sta df_nextlin+1
                             	; now everyting is set up to evaluate the elif c
e96a : 4c2fe9           [ 3] 	jmp df_rt_ifeval
                             
e96d :                       df_rt_do_else
                             	; we need to point to the next statement not thi
e96d : 4cc0e8           [ 3] 	jmp df_rt_if_stat
                             
e970 :                       df_rt_for
                             	; push statement address to rt stack
e970 : 20d6e4           [ 6] 	jsr df_rt_push_stat
                             	; get lvar
e973 : 205de5           [ 6] 	jsr df_rt_getlvar
AS65 Assembler for R6502 [1.42].                                     Page  207
---------------------------------- bank0.s -----------------------------------

                             	; Save lvar pointer, A is fine to trample
e976 : 48               [ 3] 	pha
e977 : 8a               [ 2] 	txa
e978 : 48               [ 3] 	pha
                             
                             	; find starting value
                             	; evaluate the starting value
                             	; can't use df_rt_getnval as need to use A,X fir
e979 : e688             [ 5] 	inc df_exeoff
e97b : 2090e0           [ 6] 	jsr df_rt_neval
                             	; get ready to update the counter using pointer
e97e : 68               [ 4] 	pla
e97f : aa               [ 2] 	tax
e980 : 86a1             [ 3] 	stx df_tmpptra
e982 : 68               [ 4] 	pla
e983 : 85a2             [ 3] 	sta df_tmpptra+1
                             	; But remember lvar pointer for later A is ok to
e985 : 48               [ 3] 	pha
e986 : 8a               [ 2] 	txa
e987 : 48               [ 3] 	pha
                             
                             	; get the starting value from op stack
e988 : 2068f7           [ 6] 	jsr df_ost_popInt
                             	; save it to counter slot
e98b : a001             [ 2] 	ldy #1
e98d : 91a1             [ 5] 	sta (df_tmpptra),y
e98f : 8a               [ 2] 	txa
e990 : 88               [ 2] 	dey
e991 : 91a1             [ 5] 	sta (df_tmpptra),y
                             
                             	; find end value
                             	; evaluate the end value
e993 : e688             [ 5] 	inc df_exeoff
e995 : 208ae0           [ 6] 	jsr df_rt_getnval
                             	; and put on rt stack
e998 : 2002f7           [ 6] 	jsr df_rst_pushWord
                             
                             	; find step value
                             	; evaluate the end value
e99b : e688             [ 5] 	inc df_exeoff
e99d : 208ae0           [ 6] 	jsr df_rt_getnval
                             	; and push on rt stack
e9a0 : 2002f7           [ 6] 	jsr df_rst_pushWord
                             	; save the counter lvar pointer
e9a3 : 68               [ 4] 	pla
e9a4 : aa               [ 2] 	tax
e9a5 : 68               [ 4] 	pla
e9a6 : 2002f7           [ 6] 	jsr df_rst_pushWord
                             	; all done - counter set to start
                             	; stack contains counter slot, step val, end val
                             	; now push for token
e9a9 : a98e             [ 2] 	lda #DFRT_FOR
e9ab : 4ceaf6           [ 3] 	jmp df_rst_pushByte
                             
e9ae :                       df_rt_next
                             	; remember stack position
e9ae : a476             [ 3] 	ldy df_rtstop
e9b0 : 98               [ 2] 	tya
e9b1 : 48               [ 3] 	pha
e9b2 : 20f3f6           [ 6] 	jsr df_rst_popByte
e9b5 : c98e             [ 2] 	cmp #DFRT_FOR
e9b7 : d052             [ 4] 	bne df_rt_next_err
AS65 Assembler for R6502 [1.42].                                     Page  208
---------------------------------- bank0.s -----------------------------------

                             	; get the slot address
e9b9 : 2010f7           [ 6] 	jsr df_rst_popWord
                             	; save address to ptrd, contents to ptra
e9bc : 86a7             [ 3] 	stx df_tmpptrd
e9be : 85a8             [ 3] 	sta df_tmpptrd+1
e9c0 : a000             [ 2] 	ldy #0
e9c2 : b1a7             [ 5] 	lda (df_tmpptrd),y
e9c4 : 85a1             [ 3] 	sta df_tmpptra
e9c6 : c8               [ 2] 	iny
e9c7 : b1a7             [ 5] 	lda (df_tmpptrd),y
e9c9 : 85a2             [ 3] 	sta df_tmpptra+1
                             
                             	; get step value, save in ptrb
e9cb : 2010f7           [ 6] 	jsr df_rst_popWord
e9ce : 86a3             [ 3] 	stx df_tmpptrb
e9d0 : 85a4             [ 3] 	sta df_tmpptrb+1
e9d2 : 48               [ 3] 	pha					; Push A to check for -ve step
                             
                             	; add step to counter and save back to counter
                             	_addZPWord df_tmpptra,df_tmpptrb
                             
e9e0 : a5a1             [ 3] 	lda df_tmpptra
e9e2 : a000             [ 2] 	ldy #0
e9e4 : 91a7             [ 5] 	sta (df_tmpptrd),y
e9e6 : a5a2             [ 3] 	lda df_tmpptra+1
e9e8 : c8               [ 2] 	iny
e9e9 : 91a7             [ 5] 	sta (df_tmpptrd),y
                             
                             	; get end value, save in ptrb
e9eb : 2010f7           [ 6] 	jsr df_rst_popWord
e9ee : 86a3             [ 3] 	stx df_tmpptrb
e9f0 : 85a4             [ 3] 	sta df_tmpptrb+1
e9f2 : 68               [ 4] 	pla					; check if if +ve or -ve step
e9f3 : 1006             [ 3] 	bpl df_rt_check_pos
                             	; call gte operation but no need to get ints
                             	; as already in ptra and ptrb
e9f5 : 20a1e7           [ 6] 	jsr df_rt_gte_calc
e9f8 : 4cfee9           [ 3] 	jmp df_rt_next_check
e9fb :                       df_rt_check_pos
                             	; call lte operation but no need to get ints
                             	; as already in ptra and ptrb
e9fb : 208de7           [ 6] 	jsr df_rt_lte_calc
e9fe :                       df_rt_next_check
                             	; check if true or false
e9fe : 2068f7           [ 6] 	jsr df_ost_popInt
ea01 : e000             [ 2] 	cpx #0
                             	; if false then next is done
ea03 : f003             [ 3] 	beq df_next_done
                             	; else we continue
ea05 : 4c79e5           [ 3] 	jmp df_rt_pop_stat_go
                             	; if done, then continue with next statement
ea08 :                       df_next_done
ea08 : 4c2aea           [ 3] 	jmp df_rt_untilnext_done
                             
ea0b :                       df_rt_next_err
                             	SWBRK DFERR_NEXTFOR
                             
                             
                             
ea0d :                       df_rt_repeat
                             	; push statement address
ea0d : 20d6e4           [ 6] 	jsr df_rt_push_stat
AS65 Assembler for R6502 [1.42].                                     Page  209
---------------------------------- bank0.s -----------------------------------

                             	; DFRT_REPEAT token
ea10 : a98c             [ 2] 	lda #DFRT_REPEAT
ea12 : 4ceaf6           [ 3] 	jmp df_rst_pushByte
                             
ea15 :                       df_rt_until
                             	; remember stack position
ea15 : a476             [ 3] 	ldy df_rtstop
ea17 : 98               [ 2] 	tya
ea18 : 48               [ 3] 	pha
ea19 : 20f3f6           [ 6] 	jsr df_rst_popByte
ea1c : c98c             [ 2] 	cmp #DFRT_REPEAT
ea1e : d012             [ 3] 	bne df_rt_until_err
                             	; evaluate expression in to A,X
ea20 : 208ae0           [ 6] 	jsr df_rt_getnval
                             	; if value<>0 then continue
ea23 : e000             [ 2] 	cpx #0
ea25 : d003             [ 3] 	bne df_rt_untilnext_done
                             
                             	; pop the stat and continue
ea27 : 4c79e5           [ 3] 	jmp df_rt_pop_stat_go
                             
ea2a :                       df_rt_untilnext_done
ea2a : 68               [ 4] 	pla
ea2b : a8               [ 2] 	tay
                             	; pop 2 items off stack (line address, index)
                             	; and continue
ea2c : 2010f7           [ 6] 	jsr df_rst_popWord
ea2f : 4cf3f6           [ 3] 	jmp df_rst_popByte
                             
ea32 :                       df_rt_until_err
                             	SWBRK DFERR_UNTIL
                             
                             
ea34 :                       df_rt_sadd
ea34 : 60               [ 6] 	rts
                             
ea35 :                       df_rt_print_num
ea35 : 2068f7           [ 6] 	jsr df_ost_popInt
ea38 : 18               [ 2] 	clc
ea39 : 4cf4c3           [ 3] 	jmp print_a_to_d
                             
ea3c :                       df_rt_print_str
ea3c : 206cf7           [ 6] 	jsr df_ost_popStr
ea3f : 86a1             [ 3] 	stx df_tmpptra
ea41 : 85a2             [ 3] 	sta df_tmpptra+1
ea43 : a000             [ 2] 	ldy #0
ea45 :                       df_rt_print_str_ch
ea45 : b1a1             [ 5] 	lda (df_tmpptra),y
ea47 : f006             [ 3] 	beq df_rt_print_str_done
ea49 : 204bc4           [ 6] 	jsr io_put_ch
ea4c : c8               [ 2] 	iny
ea4d : d0f6             [ 3] 	bne df_rt_print_str_ch		; Rely on y not wrapping
ea4f :                       df_rt_print_str_done
ea4f : 60               [ 6] 	rts
                             
                             ; * Find the position of the next data item to re
ea50 :                       df_rt_nextdatum
ea50 : a200             [ 2] 	ldx #0
                             	; load data line offset
ea52 : a496             [ 3] 	ldy df_datoff
                             	; if data pointer unitialised (because high byte
ea54 : a595             [ 3] 	lda df_currdat+1
AS65 Assembler for R6502 [1.42].                                     Page  210
---------------------------------- bank0.s -----------------------------------

ea56 : d030             [ 3] 	bne df_rt_skipinitdataptr
                             	; then start at program beginning
                             	_cpyZPWord df_prgstrt,df_currdat
                             
ea60 :                       df_rt_datlinstart
                             	; if end of program then error
ea60 : a194             [ 6] 	lda (df_currdat,x)
ea62 : f034             [ 3] 	beq df_rt_datumerr
                             	; index in to first line byte
ea64 : a003             [ 2] 	ldy #3
ea66 : 8496             [ 3] 	sty df_datoff
                             	; find first 'data' statement
ea68 :                       df_rt_datastatement
ea68 : c8               [ 2] 	iny
ea69 : 98               [ 2] 	tya
                             	; end of line reached?
ea6a : c194             [ 6] 	cmp (df_currdat,x)
                             	; if not find data token
ea6c : d010             [ 3] 	bne df_rt_getdatatk
ea6e :                       df_rt_datnextlin
                             	; if so then go to next line
ea6e : 18               [ 2] 	clc
ea6f : a594             [ 3] 	lda df_currdat
ea71 : 6194             [ 6] 	adc (df_currdat,x)
ea73 : 8594             [ 3] 	sta df_currdat
ea75 : a595             [ 3] 	lda df_currdat+1
ea77 : 6900             [ 2] 	adc #0
ea79 : 8595             [ 3] 	sta df_currdat+1
ea7b : 4c60ea           [ 3] 	jmp df_rt_datlinstart
ea7e :                       df_rt_getdatatk
ea7e : b194             [ 5] 	lda (df_currdat),y
ea80 : 10e6             [ 3] 	bpl df_rt_datastatement
                             	; found data statement?
ea82 : c996             [ 2] 	cmp #DFRT_DATA
                             	; if not then go to next line
ea84 : d0e8             [ 3] 	bne df_rt_datnextlin
ea86 : 8496             [ 3] 	sty df_datoff
ea88 :                       df_rt_skipinitdataptr
ea88 : 98               [ 2] 	tya
                             	; end of line reached?
ea89 : c194             [ 6] 	cmp (df_currdat,x)
                             	; if so go to next line
ea8b : f0e1             [ 3] 	beq df_rt_datnextlin
                             	; else see if escape value
ea8d : b194             [ 5] 	lda (df_currdat),y
ea8f : c920             [ 2] 	cmp #DFTK_ESCVAL
ea91 : c8               [ 2] 	iny
ea92 : b0f4             [ 3] 	bcs df_rt_skipinitdataptr
                             	; ok found an escape value
                             	; save position and return
ea94 : 88               [ 2] 	dey
ea95 : 8496             [ 3] 	sty df_datoff
ea97 : 60               [ 6] 	rts
ea98 :                       df_rt_datumerr
                             	SWBRK DFERR_NODATA
                             
                             
                             ; read a datum
ea9a :                       df_rt_readdatum
                             	; update data pointer to next data item
ea9a : 2050ea           [ 6] 	jsr df_rt_nextdatum
                             
AS65 Assembler for R6502 [1.42].                                     Page  211
---------------------------------- bank0.s -----------------------------------

                             	; now get lvar X,A from current statement
ea9d : 205de5           [ 6] 	jsr df_rt_getlvar
                             	; save lvar in tmpb, vvt ptr in tmpa
eaa0 : 86a3             [ 3] 	stx df_tmpptrb
eaa2 : 85a4             [ 3] 	sta df_tmpptrb+1
                             
                             	; first save save current prgoram line and offse
eaa4 : a586             [ 3] 	lda df_currlin
eaa6 : 48               [ 3] 	pha
eaa7 : a587             [ 3] 	lda df_currlin+1
eaa9 : 48               [ 3] 	pha
eaaa : a588             [ 3] 	lda df_exeoff
eaac : 48               [ 3] 	pha
eaad : a57e             [ 3] 	lda df_eolidx
eaaf : 48               [ 3] 	pha
eab0 : a57f             [ 3] 	lda df_nxtstidx
eab2 : 48               [ 3] 	pha
eab3 : a580             [ 3] 	lda df_curstidx
eab5 : 48               [ 3] 	pha
                             
                             	; use data pointer as current position for evalu
                             	_cpyZPWord df_currdat,df_currlin
                             
eabe : a596             [ 3] 	lda df_datoff
eac0 : 8588             [ 3] 	sta df_exeoff
eac2 : a200             [ 2] 	ldx #0
eac4 : a194             [ 6] 	lda (df_currdat,x)
eac6 : 857e             [ 3] 	sta df_eolidx
eac8 : a900             [ 2] 	lda #0
eaca : 857f             [ 3] 	sta df_nxtstidx
eacc : a903             [ 2] 	lda #3
eace : 8580             [ 3] 	sta df_curstidx
                             
                             	; get type from vvt ptr in tmpa
ead0 : a1a1             [ 6] 	lda (df_tmpptra,x)
ead2 : a8               [ 2] 	tay
                             	; get lvar point from tmpb
ead3 : a6a3             [ 3] 	ldx df_tmpptrb
ead5 : a5a4             [ 3] 	lda df_tmpptrb+1
                             
                             	; X,A and Y set up, now evaluate and perform ass
ead7 : 208ded           [ 6] 	jsr df_rt_doassign
                             
                             	; update data offset as data has been consumed
eada : a588             [ 3] 	lda df_exeoff
eadc : 8596             [ 3] 	sta df_datoff
                             	; restore line settings
eade : 68               [ 4] 	pla
eadf : 8580             [ 3] 	sta df_curstidx
eae1 : 68               [ 4] 	pla
eae2 : 857f             [ 3] 	sta df_nxtstidx
eae4 : 68               [ 4] 	pla
eae5 : 857e             [ 3] 	sta df_eolidx
eae7 : 68               [ 4] 	pla
eae8 : 8588             [ 3] 	sta df_exeoff
eaea : 68               [ 4] 	pla
eaeb : 8587             [ 3] 	sta df_currlin+1
eaed : 68               [ 4] 	pla
eaee : 8586             [ 3] 	sta df_currlin
eaf0 : 60               [ 6] 	rts
                             
                             
AS65 Assembler for R6502 [1.42].                                     Page  212
---------------------------------- bank0.s -----------------------------------

eaf1 :                       df_rt_read
                             	; find variable to read in to from current posit
eaf1 : a488             [ 3] 	ldy df_exeoff
eaf3 :                       df_rt_read_find_var
eaf3 : c8               [ 2] 	iny
                             	; if end of line or statement then done
eaf4 : c47e             [ 3] 	cpy df_eolidx
eaf6 : f012             [ 4] 	beq df_rt_read_done
eaf8 : c47f             [ 3] 	cpy df_nxtstidx
eafa : f00e             [ 4] 	beq df_rt_read_done
                             	; if not found escape then next byte
eafc : b186             [ 5] 	lda (df_currlin),y
eafe : c920             [ 2] 	cmp #DFTK_ESCVAL
eb00 : b0f1             [ 4] 	bcs df_rt_read_find_var
                             	; ok found escape, save position
eb02 : 8488             [ 3] 	sty df_exeoff
                             	; go and read in the value
eb04 : 209aea           [ 6] 	jsr df_rt_readdatum
                             	; try find another variable
eb07 : 4cf1ea           [ 3] 	jmp df_rt_read
                             
eb0a :                       df_rt_read_done
                             	; save position
eb0a : 8488             [ 3] 	sty df_exeoff
eb0c : 60               [ 6] 	rts
                             
eb0d :                       df_rt_input
                             	; df_tmpptra has the vvt address, X,A is the lva
eb0d : 205de5           [ 6] 	jsr df_rt_getlvar
                             	; Save lvar pointer
eb10 : 86a3             [ 3] 	stx df_tmpptrb
eb12 : 85a4             [ 3] 	sta df_tmpptrb+1
                             	; go read a line of input
                             	; buf_lo ptr has the input, Y is size
eb14 : 38               [ 2] 	sec
eb15 : 2060c4           [ 6] 	jsr io_read_line
                             	; check the type
eb18 : a200             [ 2] 	ldx #0
eb1a : a1a1             [ 6] 	lda (df_tmpptra,x)
eb1c : 2904             [ 2] 	and #DFVVT_STR
eb1e : d008             [ 3] 	bne df_rt_input_str
eb20 : a1a1             [ 6] 	lda (df_tmpptra,x)
eb22 : 2903             [ 2] 	and #DFVVT_INT|DFVVT_BYT
eb24 : d00a             [ 3] 	bne df_rt_input_num
                             	; if not int or byte then error
eb26 : f01f             [ 3] 	beq df_rt_input_err
eb28 :                       df_rt_input_str
eb28 : b139             [ 5] 	lda (buf_lo),y
eb2a : 91a3             [ 5] 	sta (df_tmpptrb),y
eb2c : 88               [ 2] 	dey
eb2d : 10f9             [ 3] 	bpl df_rt_input_str
eb2f : 60               [ 6] 	rts
                             
eb30 :                       df_rt_input_num
                             	; X,A = address, linbuff must be on page boundar
eb30 : a53a             [ 3] 	lda buf_lo+1
eb32 : a639             [ 3] 	ldx buf_lo
eb34 : a000             [ 2] 	ldy #0				; any numeric format
eb36 : 20d4c1           [ 6] 	jsr con_n_to_a
eb39 : b00c             [ 3] 	bcs df_rt_input_err
eb3b : a000             [ 2] 	ldy #0
eb3d : a53d             [ 3] 	lda num_a
AS65 Assembler for R6502 [1.42].                                     Page  213
---------------------------------- bank0.s -----------------------------------

eb3f : 91a3             [ 5] 	sta (df_tmpptrb),y
eb41 : c8               [ 2] 	iny
eb42 : a53e             [ 3] 	lda num_a+1
eb44 : 91a3             [ 5] 	sta (df_tmpptrb),y
eb46 : 60               [ 6] 	rts
eb47 :                       df_rt_input_err
                             	SWBRK DFERR_TYPEMISM
                             
                             
eb49 :                       df_rt_local
                             	; get current local count off rt stack
eb49 : 20f3f6           [ 6] 	jsr df_rst_popByte
                             	; save on pc stack for incrmenting
eb4c : 48               [ 3] 	pha
eb4d : a488             [ 3] 	ldy df_exeoff
eb4f : 88               [ 2] 	dey
eb50 :                       df_rt_local_findesc
eb50 : c8               [ 2] 	iny
                             	; check end of line
eb51 : c47e             [ 3] 	cpy df_eolidx
eb53 : f020             [ 3] 	beq df_rt_local_done
eb55 : c47f             [ 3] 	cpy df_nxtstidx
eb57 : f01c             [ 3] 	beq df_rt_local_done
                             	; find a var
eb59 : b186             [ 5] 	lda (df_currlin),y
eb5b : c911             [ 2] 	cmp #DFTK_VAR
eb5d : d0f1             [ 3] 	bne df_rt_local_findesc
                             	; jump over escape value
eb5f : c8               [ 2] 	iny
                             	; get var slot in A,X
eb60 : b186             [ 5] 	lda (df_currlin),y
eb62 : aa               [ 2] 	tax
eb63 : c8               [ 2] 	iny
eb64 : b186             [ 5] 	lda (df_currlin),y
eb66 : 8488             [ 3] 	sty df_exeoff
                             	; localise this variable
eb68 : 20d6f6           [ 6] 	jsr df_rt_proc_local
                             	; increment local counter
eb6b : 68               [ 4] 	pla
eb6c : 18               [ 2] 	clc
eb6d : 6901             [ 2] 	adc #1
eb6f : 48               [ 3] 	pha
eb70 : a488             [ 3] 	ldy df_exeoff
eb72 : 4c50eb           [ 3] 	jmp df_rt_local_findesc
eb75 :                       df_rt_local_done
                             	; get the local counter
                             	; put on to rt stack
eb75 : 68               [ 4] 	pla
eb76 : 4ceaf6           [ 3] 	jmp df_rst_pushByte
                             
                             
eb79 :                       df_rt_dim
eb79 : a488             [ 3] 	ldy df_exeoff
eb7b : 88               [ 2] 	dey
eb7c :                       df_rt_dim_findesc
                             	; check end of line
eb7c : c8               [ 2] 	iny
eb7d : c47e             [ 3] 	cpy df_eolidx
eb7f : f07e             [ 3] 	beq df_rt_dim_done
eb81 : c47f             [ 3] 	cpy df_nxtstidx
eb83 : f07a             [ 3] 	beq df_rt_dim_done
                             	; find a var
AS65 Assembler for R6502 [1.42].                                     Page  214
---------------------------------- bank0.s -----------------------------------

eb85 : b186             [ 5] 	lda (df_currlin),y
eb87 : c911             [ 2] 	cmp #DFTK_VAR
eb89 : d0f1             [ 3] 	bne df_rt_dim_findesc
                             	; jump over escape value
eb8b : c8               [ 2] 	iny
                             	; get var address
eb8c : b186             [ 5] 	lda (df_currlin),y
eb8e : 85a1             [ 3] 	sta df_tmpptra
eb90 : c8               [ 2] 	iny
eb91 : b186             [ 5] 	lda (df_currlin),y
eb93 : 85a2             [ 3] 	sta df_tmpptra+1
                             	; move to open bracket
eb95 : c8               [ 2] 	iny
eb96 : 8488             [ 3] 	sty df_exeoff
                             	; check if already dim'd
eb98 : a003             [ 2] 	ldy #DFVVT_DIM1
eb9a : b1a1             [ 5] 	lda (df_tmpptra),y
eb9c : d062             [ 4] 	bne df_rt_dim_err
                             	; Save slot address found earlier
eb9e : a5a1             [ 3] 	lda df_tmpptra
eba0 : 48               [ 3] 	pha
eba1 : a5a2             [ 3] 	lda df_tmpptra+1
eba3 : 48               [ 3] 	pha
eba4 : 2019e2           [ 6] 	jsr df_rt_arry_parm2
                             	; Restore slot address
eba7 : 68               [ 4] 	pla
eba8 : 85a2             [ 3] 	sta df_tmpptra+1
ebaa : 68               [ 4] 	pla
ebab : 85a1             [ 3] 	sta df_tmpptra
                             ;	bcs df_rt_dim_err
                             	; save x,y to dim1,2
ebad : 98               [ 2] 	tya
ebae : 48               [ 3] 	pha
ebaf : 8a               [ 2] 	txa
ebb0 : 48               [ 3] 	pha
ebb1 : a003             [ 2] 	ldy #DFVVT_DIM1
ebb3 : 68               [ 4] 	pla
ebb4 : 91a1             [ 5] 	sta (df_tmpptra),y
ebb6 : c8               [ 2] 	iny
ebb7 : 68               [ 4] 	pla
ebb8 : 91a1             [ 5] 	sta (df_tmpptra),y
ebba :                       df_rt_dim_alloc
                             	; ok we have up to 2 dimensions
                             	; mult dim 1 and 2 if dim 2 <> 0
ebba : a003             [ 2] 	ldy #DFVVT_DIM1
ebbc : b1a1             [ 5] 	lda (df_tmpptra),y
ebbe : 853d             [ 3] 	sta num_a
ebc0 : a900             [ 2] 	lda #0
ebc2 : 853e             [ 3] 	sta num_a+1
ebc4 : c8               [ 2] 	iny
ebc5 : b1a1             [ 5] 	lda (df_tmpptra),y
ebc7 : d002             [ 3] 	bne df_rt_dim2_nz
ebc9 : a901             [ 2] 	lda #1
ebcb :                       df_rt_dim2_nz
ebcb : 8541             [ 3] 	sta num_b
ebcd : a900             [ 2] 	lda #0
ebcf : 8542             [ 3] 	sta num_b+1
ebd1 : 2065d4           [ 6] 	jsr int_fast_mult
                             	; check the type if int then mult2
ebd4 : a200             [ 2] 	ldx #0
ebd6 : a1a1             [ 6] 	lda (df_tmpptra,x)
ebd8 : 2901             [ 2] 	and #DFVVT_INT
AS65 Assembler for R6502 [1.42].                                     Page  215
---------------------------------- bank0.s -----------------------------------

ebda : f004             [ 3] 	beq df_rt_dim2_mul2
ebdc : 063d             [ 5] 	asl num_a
ebde : 263e             [ 5] 	rol num_a+1
ebe0 :                       df_rt_dim2_mul2
                             	; finally, we have a size of array
ebe0 : a63d             [ 3] 	ldx num_a
ebe2 : a53e             [ 3] 	lda num_a+1
                             
                             	; get a block of that size from heap
ebe4 : 2074f7           [ 6] 	jsr df_st_malloc
                             	; save pointer to block in var
ebe7 : a002             [ 2] 	ldy #DFVVT_HI
ebe9 : 91a1             [ 5] 	sta (df_tmpptra),y
ebeb : 8a               [ 2] 	txa
ebec : 88               [ 2] 	dey
ebed : 91a1             [ 5] 	sta (df_tmpptra),y
                             	; finally, update the type to indicate array
ebef : a200             [ 2] 	ldx #0
ebf1 : a1a1             [ 6] 	lda (df_tmpptra,x)
ebf3 : 0980             [ 2] 	ora #DFVVT_ARRY
ebf5 : 81a1             [ 6] 	sta (df_tmpptra,x)
                             	; don't increment byte again - go check for more
ebf7 : 4c79eb           [ 3] 	jmp df_rt_dim
ebfa :                       df_rt_dim_next_byte
ebfa : e688             [ 5] 	inc df_exeoff
ebfc : 4c79eb           [ 3] 	jmp df_rt_dim
ebff :                       df_rt_dim_done
ebff : 60               [ 6] 	rts
ec00 :                       df_rt_dim_err
                             	SWBRK DFERR_DIM
                             
                             
                             
ec02 :                       df_rt_cls
ec02 : 4c6bcd           [ 3] 	jmp gr_cls
                             
                             
ec05 :                       df_rt_plot
                             	; evaluate the expression
ec05 : 208ae0           [ 6] 	jsr df_rt_getnval
                             	; save lo byte
ec08 : 8a               [ 2] 	txa
ec09 : 48               [ 3] 	pha
                             	; jump over comma
ec0a : e688             [ 5] 	inc df_exeoff
                             	; evaluate the expression
ec0c : 208ae0           [ 6] 	jsr df_rt_getnval
                             	; save lo byte
ec0f : 8a               [ 2] 	txa
ec10 : 48               [ 3] 	pha
                             	; jump over comma
ec11 : e688             [ 5] 	inc df_exeoff
                             	; evaluate the expression
ec13 : 2090e0           [ 6] 	jsr df_rt_neval
                             	; check the type on the stack
ec16 : 2062f7           [ 6] 	jsr df_ost_peekType
                             	; if >=0x80 then a pointer / string
ec19 : c980             [ 2] 	cmp #0x80
ec1b : b01b             [ 3] 	bcs df_rt_plotstr
                             	; else it is int
ec1d : 2068f7           [ 6] 	jsr df_ost_popInt
                             	; save  low byte of pop result in a temp
AS65 Assembler for R6502 [1.42].                                     Page  216
---------------------------------- bank0.s -----------------------------------

ec20 : 86a1             [ 3] 	stx df_tmpptra
ec22 : a511             [ 3] 	lda gr_scrngeom+gr_mode			; Check screen mode
ec24 : d009             [ 3] 	bne df_rt_plot_h_int
                             	; get X and Y coord in that order
                             	; but Y coord goes in X register!!!
ec26 : 68               [ 4] 	pla
ec27 : aa               [ 2] 	tax
ec28 : 68               [ 4] 	pla
ec29 : a8               [ 2] 	tay
ec2a : a5a1             [ 3] 	lda df_tmpptra	; Get pop result in to A
ec2c : 4cc1cd           [ 3] 	jmp gr_plot
ec2f :                       df_rt_plot_h_int
ec2f : 68               [ 4] 	pla
ec30 : a8               [ 2] 	tay
ec31 : 68               [ 4] 	pla
ec32 : aa               [ 2] 	tax
ec33 : a5a1             [ 3] 	lda df_tmpptra	; Get pop result in to A
ec35 : 4c6acf           [ 3] 	jmp gr_hchar
                             
                             
ec38 :                       df_rt_plotstr
                             	; pop string pointer
ec38 : 2070f7           [ 6] 	jsr df_ost_popPtr
                             	; save pointer to tmpa
ec3b : 86a1             [ 3] 	stx df_tmpptra
ec3d : 85a2             [ 3] 	sta df_tmpptra+1
                             	; get y and x in that order
                             	; but X register is Y coord!!
ec3f : 68               [ 4] 	pla
ec40 : 85a5             [ 3] 	sta df_tmpptrc			; Y coord in C
ec42 : 68               [ 4] 	pla
ec43 : 85a3             [ 3] 	sta df_tmpptrb			; X coord in B
                             	; set cursror position
ec45 : a000             [ 2] 	ldy #0
ec47 : 84a9             [ 3] 	sty df_tmpptre
ec49 :                       df_rt_plotstrch
ec49 : a4a9             [ 3] 	ldy df_tmpptre
ec4b : b1a1             [ 5] 	lda (df_tmpptra),y
ec4d : 85a7             [ 3] 	sta df_tmpptrd			; char in D
ec4f : c900             [ 2] 	cmp #0
ec51 : f025             [ 3] 	beq df_rt_plotstrdone
ec53 : e6a9             [ 5] 	inc df_tmpptre
ec55 : a511             [ 3] 	lda gr_scrngeom+gr_mode; Check screen mode
ec57 : d00d             [ 3] 	bne df_rt_plot_h_str
ec59 : a5a7             [ 3] 	lda df_tmpptrd			; Get char to plot
ec5b : a6a5             [ 3] 	ldx df_tmpptrc			; Get Y coord
ec5d : a4a3             [ 3] 	ldy df_tmpptrb			; Get X coord
ec5f : 20c1cd           [ 6] 	jsr gr_plot
ec62 : e6a3             [ 5] 	inc df_tmpptrb			; Increment X coord
ec64 : d0e3             [ 3] 	bne df_rt_plotstrch		; Always - assume x is neve
ec66 :                       df_rt_plot_h_str
ec66 : a5a7             [ 3] 	lda df_tmpptrd			; Get char to plot
ec68 : a6a3             [ 3] 	ldx df_tmpptrb			; Get X coord
ec6a : a4a5             [ 3] 	ldy df_tmpptrc			; Get Y coord
ec6c : 206acf           [ 6] 	jsr gr_hchar
ec6f : 18               [ 2] 	clc
ec70 : a5a3             [ 3] 	lda df_tmpptrb
ec72 : 6521             [ 3] 	adc gr_scrngeom+gr_pitch
ec74 : 85a3             [ 3] 	sta df_tmpptrb
ec76 : d0d1             [ 3] 	bne df_rt_plotstrch		; Always - assume adding pi
ec78 :                       df_rt_plotstrdone
ec78 : 60               [ 6] 	rts
AS65 Assembler for R6502 [1.42].                                     Page  217
---------------------------------- bank0.s -----------------------------------

                             
ec79 :                       df_rt_cursor
                             	; evaluate the expression
ec79 : 208ae0           [ 6] 	jsr df_rt_getnval
                             	; write low byte of vdp_curoff
                             	; by writing a zero then cursor on else not
ec7c : 860d             [ 3] 	stx vdp_curoff
ec7e : 60               [ 6] 	rts
                             
ec7f :                       df_rt_himem
                             	; evaluate the expression
ec7f : 208ae0           [ 6] 	jsr df_rt_getnval
                             	; write X,A to df_memtop
ec82 : 8e1106           [ 4] 	stx df_memtop
ec85 : 8d1206           [ 4] 	sta df_memtop+1
                             	; now clear everything down
ec88 : 4c9af7           [ 3] 	jmp df_clear
                             
ec8b :                       df_rt_text
ec8b : 4cd3cc           [ 3] 	jmp gr_init_screen_txt
                             
ec8e :                       df_rt_hires
ec8e : 4ceccc           [ 3] 	jmp gr_init_hires
                             
ec91 :                       df_rt_pixmode
                             	; evaluate the expression X = mode
ec91 : 208ae0           [ 6] 	jsr df_rt_getnval
ec94 : 8620             [ 3] 	stx gr_scrngeom+gr_pixmode
ec96 : 60               [ 6] 	rts
                             
ec97 :                       df_rt_ink
                             	; evaluate the expression X = col
ec97 : 208ae0           [ 6] 	jsr df_rt_getnval
ec9a : 8624             [ 3] 	stx gr_scrngeom+gr_ink
ec9c : 60               [ 6] 	rts
                             
ec9d :                       df_rt_paper
                             	; evaluate the expression X = col
ec9d : 208ae0           [ 6] 	jsr df_rt_getnval
                             	; Add 16 to get paper colour
eca0 : 8a               [ 2] 	txa
eca1 : 18               [ 2] 	clc
eca2 : 6910             [ 2] 	adc #16
eca4 : 8525             [ 3] 	sta gr_scrngeom+gr_paper
eca6 : 60               [ 6] 	rts
                             
eca7 :                       df_rt_point
eca7 : 2068e3           [ 6] 	jsr df_rt_parm_2ints
ecaa : a6a1             [ 3] 	ldx df_tmpptra
ecac : a4a3             [ 3] 	ldy df_tmpptrb
ecae : 4c30d0           [ 3] 	jmp gr_point
                             
ecb1 :                       df_rt_circle
ecb1 : 207fe3           [ 6] 	jsr df_rt_parm_3ints
ecb4 : a5a1             [ 3] 	lda df_tmpptra				; load x0
ecb6 : 853d             [ 3] 	sta num_a
ecb8 : a5a3             [ 3] 	lda	df_tmpptrb				; load y0
ecba : 853e             [ 3] 	sta num_a+1
ecbc : a5a5             [ 3] 	lda df_tmpptrc				; load r
ecbe : 853f             [ 3] 	sta num_a+2
ecc0 : 4c5dd0           [ 3] 	jmp gr_circle
                             
AS65 Assembler for R6502 [1.42].                                     Page  218
---------------------------------- bank0.s -----------------------------------

ecc3 :                       df_rt_lineto
ecc3 : 2068e3           [ 6] 	jsr df_rt_parm_2ints
ecc6 : a6a1             [ 3] 	ldx df_tmpptra				; load x1
ecc8 : a4a3             [ 3] 	ldy df_tmpptrb				; load y1
ecca :                       df_rt_doline
ecca : 863f             [ 3] 	stx num_a+2
eccc : 8440             [ 3] 	sty num_a+3
ecce : 4c13d1           [ 3] 	jmp gr_line
ecd1 :                       df_rt_line
ecd1 : 20a2e3           [ 6] 	jsr df_rt_parm_4ints
ecd4 : a6a1             [ 3] 	ldx df_tmpptra				; load x0
ecd6 : a4a3             [ 3] 	ldy	df_tmpptrb				; load y0
ecd8 : 2023d0           [ 6] 	jsr gr_set_hires_cur		; Start from x,y
ecdb : a6a5             [ 3] 	ldx df_tmpptrc				; load x1
ecdd : a4a7             [ 3] 	ldy df_tmpptrd				; load y1
ecdf : 4ccaec           [ 3] 	jmp df_rt_doline
                             
ece2 :                       df_rt_wait
                             	; evaluate the expression
ece2 : 208ae0           [ 6] 	jsr df_rt_getnval
                             	; put high byte in to Y (X,Y)=16 bits
ece5 : a8               [ 2] 	tay
ece6 :                       df_rt_wait_counter
                             	; get vdp low byte timer val in A
ece6 : a508             [ 3] 	lda vdp_cnt
ece8 :                       df_rt_wait_tick
                             	; check if a tick has occurred (i.e. val <> A)
ece8 : c508             [ 3] 	cmp vdp_cnt
ecea : f0fc             [ 3] 	beq df_rt_wait_tick
                             	; countdown tick
ecec : ca               [ 2] 	dex
eced : e0ff             [ 2] 	cpx #0xff
ecef : d001             [ 3] 	bne df_rt_wait_skiphi
ecf1 : 88               [ 2] 	dey
ecf2 :                       df_rt_wait_skiphi
ecf2 : e000             [ 2] 	cpx #0
ecf4 : d0f0             [ 3] 	bne df_rt_wait_counter
ecf6 : c000             [ 2] 	cpy #0
ecf8 : d0ec             [ 3] 	bne df_rt_wait_counter
ecfa : 60               [ 6] 	rts
                             
ecfb :                       df_rt_printat
                             	; Get x,y
ecfb : 2068e3           [ 6] 	jsr df_rt_parm_2ints
ecfe : a6a1             [ 3] 	ldx df_tmpptra
ed00 : a4a3             [ 3] 	ldy df_tmpptrb
                             	; Set the cursror here
ed02 : 20dacd           [ 6] 	jsr gr_set_cur
                             	; and continue to normal print command
ed05 :                       df_rt_print
ed05 : a488             [ 3] 	ldy df_exeoff
ed07 : 88               [ 2] 	dey
ed08 :                       df_rt_print_ws
ed08 : c8               [ 2] 	iny
                             
                             	; evaluate an expression
ed09 : c47e             [ 3] 	cpy df_eolidx
ed0b : f032             [ 3] 	beq df_rt_print_done
ed0d : c47f             [ 3] 	cpy df_nxtstidx
ed0f : f02e             [ 3] 	beq df_rt_print_done
ed11 : b186             [ 5] 	lda (df_currlin),y
ed13 : c93a             [ 2] 	cmp #':'
AS65 Assembler for R6502 [1.42].                                     Page  219
---------------------------------- bank0.s -----------------------------------

ed15 : f028             [ 3] 	beq df_rt_print_done
ed17 : c920             [ 2] 	cmp #' '
ed19 : f0ed             [ 3] 	beq df_rt_print_ws
ed1b : c92c             [ 2] 	cmp #','
ed1d : f0e9             [ 3] 	beq df_rt_print_ws
                             	; save index
ed1f : 8488             [ 3] 	sty df_exeoff
                             
                             	; if starts with string literal then process sev
ed21 : c910             [ 2] 	cmp #DFTK_STRLIT
ed23 : f014             [ 3] 	beq df_rt_print_string
                             	; else evaluate a numeric
ed25 : 2090e0           [ 6] 	jsr df_rt_neval
                             	; check what is on the argument stack
ed28 : 2062f7           [ 6] 	jsr df_ost_peekType
ed2b : 3006             [ 3] 	bmi df_rt_print_gotstr
ed2d : 2035ea           [ 6] 	jsr df_rt_print_num
ed30 : 4c05ed           [ 3] 	jmp df_rt_print
ed33 :                       df_rt_print_gotstr
ed33 : 203cea           [ 6] 	jsr df_rt_print_str
ed36 : 4c05ed           [ 3] 	jmp df_rt_print
ed39 :                       df_rt_print_string
ed39 : 204ae1           [ 6] 	jsr df_rt_seval
ed3c : 4c33ed           [ 3] 	jmp df_rt_print_gotstr
ed3f :                       df_rt_print_done
ed3f : 8488             [ 3] 	sty df_exeoff
ed41 : 60               [ 6] 	rts
                             
ed42 :                       df_rt_println
ed42 : 2005ed           [ 6] 	jsr df_rt_print
ed45 : a90d             [ 2] 	lda #UTF_CR
ed47 : 4c4bc4           [ 3] 	jmp io_put_ch
                             
                             
                             ; assign to a number variable
                             ; X,A must have lvar
ed4a :                       df_rt_nassign
                             	; push var address, A ok to trample
ed4a : 48               [ 3] 	pha
ed4b : 8a               [ 2] 	txa
ed4c : 48               [ 3] 	pha
                             
                             	; now go evaluate expression in to A,X
ed4d : 208ae0           [ 6] 	jsr df_rt_getnval
                             	; restore variable address to write to to df_tmp
                             	; but don't lose current A
ed50 : a8               [ 2] 	tay					; Save A in Y
ed51 : 68               [ 4] 	pla
ed52 : 85a1             [ 3] 	sta df_tmpptra
ed54 : 68               [ 4] 	pla
ed55 : 85a2             [ 3] 	sta df_tmpptra+1
ed57 : 98               [ 2] 	tya					; Get A back from Y
                             
                             	; save X,A int in contents section
ed58 : a001             [ 2] 	ldy #1
ed5a : 91a1             [ 5] 	sta (df_tmpptra),y
ed5c : 8a               [ 2] 	txa
ed5d : 88               [ 2] 	dey
ed5e : 91a1             [ 5] 	sta (df_tmpptra),y
                             
ed60 : 60               [ 6] 	rts
                             
AS65 Assembler for R6502 [1.42].                                     Page  220
---------------------------------- bank0.s -----------------------------------

                             ; assign to a string variable
                             ; X,A must have lvar
ed61 :                       df_rt_sassign
                             	; now go evaluate expression
                             	; with the destination being already in X,A
ed61 : 204ee1           [ 6] 	jsr df_rt_sval
                             
                             	; get string pointer from top of runtime stack
ed64 : 4c6cf7           [ 3] 	jmp df_ost_popStr
                             
                             
                             ; generate lvar from a var token ready for assign
ed67 :                       df_rt_generate_lvar
                             	; move past escape val
ed67 : a488             [ 3] 	ldy df_exeoff
ed69 : c8               [ 2] 	iny
                             	; pointing to variable index
ed6a : b186             [ 5] 	lda (df_currlin),y
ed6c : 85a1             [ 3] 	sta df_tmpptra
ed6e : c8               [ 2] 	iny
ed6f : b186             [ 5] 	lda (df_currlin),y
ed71 : 8488             [ 3] 	sty df_exeoff
ed73 : 85a2             [ 3] 	sta df_tmpptra+1
                             
                             	; get the type and save
ed75 : a200             [ 2] 	ldx #0
ed77 : a1a1             [ 6] 	lda (df_tmpptra,x)
ed79 : 48               [ 3] 	pha
                             
                             	; set carry flag to return pointer (lvar)
ed7a : 38               [ 2] 	sec
ed7b : 203de2           [ 6] 	jsr df_rt_eval_var
ed7e : 2070f7           [ 6] 	jsr df_ost_popPtr
                             
                             	; pull the type previously saved into Y
ed81 : 8538             [ 3] 	sta tmp_d		; Save A
ed83 : 68               [ 4] 	pla
ed84 : a8               [ 2] 	tay
ed85 : a538             [ 3] 	lda tmp_d
                             	; move past the lvar variable index
ed87 : e688             [ 5] 	inc df_exeoff
ed89 : 60               [ 6] 	rts
                             
                             ; general assignment execution
                             ; generate lvar first
ed8a :                       df_rt_assign
ed8a : 2067ed           [ 6] 	jsr df_rt_generate_lvar
                             ; X,A,Y contain lvar pointer and type
ed8d :                       df_rt_doassign
                             	; save A and put type Y in to A to check for str
ed8d : 48               [ 3] 	pha
ed8e : 98               [ 2] 	tya
ed8f : 2904             [ 2] 	and #DFVVT_STR
                             	; if a string then string expression
ed91 : d004             [ 3] 	bne df_rt_assign_str
                             	;  jump to numeric expression evaluator
                             	; remember to restore A
ed93 : 68               [ 4] 	pla
ed94 : 4c4aed           [ 3] 	jmp df_rt_nassign
ed97 :                       df_rt_assign_str
                             	; else jump to string expression evaluator
                             	; remember to restore A
AS65 Assembler for R6502 [1.42].                                     Page  221
---------------------------------- bank0.s -----------------------------------

ed97 : 68               [ 4] 	pla
ed98 : 4c61ed           [ 3] 	jmp df_rt_sassign
                             
                             ; comment or data token is ignored by runtime
ed9b :                       df_rt_comment
ed9b :                       df_rt_data
ed9b : 60               [ 6] 	rts
                             
                             
                             ; run token - future expansion
ed9c :                       df_rt_run
ed9c : 60               [ 6] 	rts
                             
                             ; end of line / statement indicator
                             ; CS = End, CC = not end
ed9d :                       df_rt_eos
ed9d : a488             [ 3] 	ldy df_exeoff
ed9f : c47e             [ 3] 	cpy df_eolidx
eda1 : f00c             [ 3] 	beq df_rt_eos_true
eda3 : b186             [ 5] 	lda (df_currlin),y
eda5 : c93a             [ 2] 	cmp #':'
eda7 : f006             [ 3] 	beq df_rt_eos_true
eda9 : c47f             [ 3] 	cpy df_nxtstidx
edab : f002             [ 3] 	beq df_rt_eos_true
edad : 18               [ 2] 	clc
edae : 60               [ 6] 	rts
edaf :                       df_rt_eos_true
edaf : 38               [ 2] 	sec
edb0 : 60               [ 6] 	rts
                             
                             ; renum startLine,newStart,increment
                             ; renumbers from the first matching line to end o
edb1 :                       df_rt_renum
edb1 : e688             [ 5] 	inc df_exeoff
edb3 : 207fe3           [ 6] 	jsr df_rt_parm_3ints
                             	; starting line number
edb6 : a6a1             [ 3] 	ldx df_tmpptra
edb8 : a5a2             [ 3] 	lda df_tmpptra+1
edba : 208fde           [ 6] 	jsr df_pg_find_line
edbd : 9002             [ 3] 	bcc df_rt_renum_ok
                             	SWBRK DFERR_NOLINE
                             
edc1 :                       df_rt_renum_ok
                             	; save starting position pointer in ptrd
edc1 : 86a7             [ 3] 	stx df_tmpptrd
edc3 : 85a8             [ 3] 	sta df_tmpptrd+1
edc5 :                       df_rt_renum_do
                             	; if not end of program
edc5 : a000             [ 2] 	ldy #0
edc7 : b1a7             [ 5] 	lda (df_tmpptrd),y
                             	; then renumber this line
edc9 : d001             [ 3] 	bne df_rt_renum_update
                             	; else done
edcb : 60               [ 6] 	rts
edcc :                       df_rt_renum_update
                             	; so set this line number to new line number
edcc : a001             [ 2] 	ldy #DFTK_LINNUM
edce : a5a3             [ 3] 	lda df_tmpptrb
edd0 : 91a7             [ 5] 	sta (df_tmpptrd),y
edd2 : c8               [ 2] 	iny
edd3 : a5a4             [ 3] 	lda df_tmpptrb+1
edd5 : 91a7             [ 5] 	sta (df_tmpptrd),y
AS65 Assembler for R6502 [1.42].                                     Page  222
---------------------------------- bank0.s -----------------------------------

                             	; add increment to new line
                             	_addZPWord df_tmpptrb,df_tmpptrc
                             
ede4 :                       df_rt_renum_next
                             	; point ptrd to the next line
ede4 : 18               [ 2] 	clc
ede5 : a5a7             [ 3] 	lda df_tmpptrd
ede7 : a200             [ 2] 	ldx #0
ede9 : 61a7             [ 6] 	adc (df_tmpptrd,x)
edeb : 85a7             [ 3] 	sta df_tmpptrd
eded : a5a8             [ 3] 	lda df_tmpptrd+1
edef : 6900             [ 2] 	adc #0
edf1 : 85a8             [ 3] 	sta df_tmpptrd+1
edf3 : 4cc5ed           [ 3] 	jmp df_rt_renum_do
                             
                             
                             ; * List all procs in VNT
edf6 :                       df_rt_listprocnames
                             	; start at the beginning of the vnt table
                             	_cpyZPWord df_vntstrt,df_tmpptra
                             
                             	; start at varcnt
edfe : a571             [ 3] 	lda df_varcnt
ee00 : 85a3             [ 3] 	sta df_tmpptrb
ee02 :                       df_rt_listcheckvnt
                             	; If reached 0 then not found
ee02 : a5a3             [ 3] 	lda df_tmpptrb
ee04 : f03d             [ 3] 	beq df_rt_listpn_done
ee06 : a000             [ 2] 	ldy #0
ee08 : b1a1             [ 5] 	lda (df_tmpptra),y
ee0a : c95f             [ 2] 	cmp #'_'
ee0c : d01c             [ 3] 	bne df_rt_listnextvnt
ee0e :                       df_rt_listprocch
ee0e : b1a1             [ 5] 	lda (df_tmpptra),y
ee10 : 204bc4           [ 6] 	jsr io_put_ch
ee13 : c900             [ 2] 	cmp #0
ee15 : f003             [ 3] 	beq df_rt_listproccr
ee17 : c8               [ 2] 	iny
ee18 : d0f4             [ 3] 	bne df_rt_listprocch		; Always
ee1a :                       df_rt_listproccr
ee1a : a90d             [ 2] 	lda #UTF_CR
ee1c : 204bc4           [ 6] 	jsr io_put_ch
ee1f : 18               [ 2] 	clc
ee20 :                       df_rt_listprocpause
ee20 : 2048c4           [ 6] 	jsr io_get_ch
ee23 : c920             [ 2] 	cmp #' '
ee25 : d003             [ 3] 	bne df_rt_listnextvnt
ee27 :                       df_rt_listwait
ee27 : 38               [ 2] 	sec
ee28 : b0f6             [ 3] 	bcs df_rt_listprocpause
ee2a :                       df_rt_listnextvnt
ee2a : b1a1             [ 5] 	lda (df_tmpptra),y
ee2c : f003             [ 3] 	beq df_rt_listgotnext
ee2e : c8               [ 2] 	iny
ee2f : d0f9             [ 3] 	bne df_rt_listnextvnt		; Always
ee31 :                       df_rt_listgotnext
                             	; dec vnt #
ee31 : c6a3             [ 5] 	dec df_tmpptrb
                             	; skip past zero terminator
ee33 : c8               [ 2] 	iny
                             	; add this to vnt pointer
ee34 : 18               [ 2] 	clc
AS65 Assembler for R6502 [1.42].                                     Page  223
---------------------------------- bank0.s -----------------------------------

ee35 : 98               [ 2] 	tya
ee36 : 65a1             [ 3] 	adc df_tmpptra
ee38 : 85a1             [ 3] 	sta df_tmpptra
ee3a : a5a2             [ 3] 	lda df_tmpptra+1
ee3c : 6900             [ 2] 	adc #0
ee3e : 85a2             [ 3] 	sta df_tmpptra+1
ee40 : 4c02ee           [ 3] 	jmp df_rt_listcheckvnt
ee43 :                       df_rt_listpn_done
ee43 : 60               [ 6] 	rts
                             
ee44 :                       df_rt_listproc
                             	; A already contains '_'
ee44 : 8d0004           [ 4] 	sta df_linbuff
ee47 : a200             [ 2] 	ldx #0
ee49 : a488             [ 3] 	ldy df_exeoff
ee4b :                       df_rt_listp_copy
ee4b : c8               [ 2] 	iny
ee4c : e8               [ 2] 	inx
ee4d : b186             [ 5] 	lda (df_currlin),y
ee4f : 9d0004           [ 5] 	sta df_linbuff,x
ee52 : 2023d7           [ 6] 	jsr df_tk_isalphanum
ee55 : b0f4             [ 3] 	bcs df_rt_listp_copy
                             	; zero the line index
ee57 : a200             [ 2] 	ldx #0
ee59 : 867c             [ 3] 	stx df_linoff
                             	; save runtime pos
ee5b : 8488             [ 3] 	sty df_exeoff
                             	; Now try and find in VNT
ee5d : 201cd5           [ 6] 	jsr df_var_find
ee60 : b038             [ 3] 	bcs df_rt_listp_notfound
                             	; Ok we have got a match in X,A find the proc
ee62 : 868e             [ 3] 	stx df_procptr
ee64 : 858f             [ 3] 	sta df_procptr+1
ee66 : 20fbe4           [ 6] 	jsr df_rt_findproc
                             	; Save the line pointer
ee69 : 86a1             [ 3] 	stx df_tmpptra
ee6b : 85a2             [ 3] 	sta df_tmpptra+1
                             	; save statement index in to line
ee6d : 8492             [ 3] 	sty df_lineidx
                             ;	; Check if '-' option used
                             ;	ldy df_exeoff
                             ;	lda (df_currlin),y
                             ;	cmp #'-'
                             ;	; if so, list to end of program
                             ;	beq df_rt_listprgend
                             	; Now try and find the end of this procedure
                             	; enddef or another def
                             	; A,X=Line ptr, Y=line idx
                             ;	ldx df_tmpptra
                             ;	lda df_tmpptra+1
                             ;	ldy df_lineidx
ee6f :                       df_rt_listp_findend
                             	; Go to next stat
ee6f : 20a4e4           [ 6] 	jsr df_rt_nextstat
ee72 : b057             [ 3] 	bcs df_rt_listprgend
                             	; save y (a,x in lineptr), A is ok to trample
ee74 : 98               [ 2] 	tya
ee75 : 48               [ 3] 	pha
                             	; find the command
ee76 :                       df_rt_listp_findcmd
ee76 : c8               [ 2] 	iny
ee77 : b190             [ 5] 	lda (df_lineptr),y
AS65 Assembler for R6502 [1.42].                                     Page  224
---------------------------------- bank0.s -----------------------------------

ee79 : 10fb             [ 3] 	bpl df_rt_listp_findcmd
                             	; restore y to stat beginning
ee7b : 8538             [ 3] 	sta tmp_d
ee7d : 68               [ 4] 	pla
ee7e : a8               [ 2] 	tay
ee7f : a538             [ 3] 	lda tmp_d
                             	; check A - looking for enddef or def
ee81 : c987             [ 2] 	cmp #DFRT_ENDDEF
ee83 : f00b             [ 3] 	beq df_rt_listp_done
ee85 : c986             [ 2] 	cmp #DFRT_DEF
ee87 : f007             [ 3] 	beq df_rt_listp_done
                             	; if neither then next stat from current
ee89 : a690             [ 3] 	ldx df_lineptr
ee8b : a591             [ 3] 	lda df_lineptr+1
ee8d : 4c6fee           [ 3] 	jmp df_rt_listp_findend
ee90 :                       df_rt_listp_done
                             	; Push end line on to stack
ee90 : a591             [ 3] 	lda df_lineptr+1
ee92 : 48               [ 3] 	pha
ee93 : 8a               [ 2] 	txa
ee94 : 48               [ 3] 	pha
ee95 : a591             [ 3] 	lda df_lineptr+1
ee97 : 4cd1ee           [ 3] 	jmp df_rt_list_line
ee9a :                       df_rt_listp_notfound
                             	; Fatal error if proc not found
                             	SWBRK DFERR_NOPROC
                             
                             
                             ; list token
ee9c :                       df_rt_list
ee9c : a900             [ 2] 	lda #0
ee9e : 85a9             [ 3] 	sta df_tmpptre		; Zero means in normal list mode
                             	; find non-ws
eea0 : 2050e5           [ 6] 	jsr df_rt_skip_ws
                             	; if end of statement then no line specifiers
eea3 : 209ded           [ 6] 	jsr df_rt_eos
                             	; so list whole program
eea6 : b01b             [ 3] 	bcs df_rt_listprg
                             
                             	;if '_' then use procnames
eea8 : c95f             [ 2] 	cmp #'_'
eeaa : d003             [ 3] 	bne df_rt_list_all
eeac : 4c44ee           [ 3] 	jmp df_rt_listproc
eeaf :                       df_rt_list_all
                             	;if '*' then display all procnames
eeaf : c92a             [ 2] 	cmp #'*'
eeb1 : d003             [ 3] 	bne df_rt_list_linno
eeb3 : 4cf6ed           [ 3] 	jmp df_rt_listprocnames
eeb6 :                       df_rt_list_linno
                             	; else get 1st parameter
eeb6 : 208ae0           [ 6] 	jsr df_rt_getnval
                             	; find the starting line number in X,A
eeb9 : 208fde           [ 6] 	jsr df_pg_find_line
                             	; save start in ptra
eebc : 86a1             [ 3] 	stx df_tmpptra
eebe : 85a2             [ 3] 	sta df_tmpptra+1
eec0 : 4ccbee           [ 3] 	jmp df_rt_listprgend
                             	; NO ability to choose and ending line number!
                             
                             ; Common listing routine used by LIST and SAVE
                             ; tmpe = 0 means in LIST mode else SAVE mode
                             ; can stop the listing in LIST mode with CTRL-C
AS65 Assembler for R6502 [1.42].                                     Page  225
---------------------------------- bank0.s -----------------------------------

eec3 :                       df_rt_listprg
                             	; program start and end as for pointer value
                             	_cpyZPWord df_prgstrt, df_tmpptra
                             
eecb :                       df_rt_listprgend
eecb : a568             [ 3] 	lda df_prgend+1
eecd : 48               [ 3] 	pha
eece : a567             [ 3] 	lda df_prgend
eed0 : 48               [ 3] 	pha
eed1 :                       df_rt_list_line
                             	; if line length = 0 then end of program
eed1 : a000             [ 2] 	ldy #0
eed3 : b1a1             [ 5] 	lda (df_tmpptra),y
eed5 : f03a             [ 4] 	beq df_rt_list_line_fin
                             	; if in list mode and CTRL-C then also stop
eed7 : a5a9             [ 3] 	lda df_tmpptre
eed9 : d010             [ 3] 	bne df_rt_list_line_cont
                             	; check for break, asynch get
eedb : 18               [ 2] 	clc
eedc :                       df_rt_list_synckey
eedc : a5a9             [ 3] 	lda df_tmpptre					; Ignore keys on save mode
eede : d00b             [ 3] 	bne df_rt_list_line_cont
eee0 :                       df_rt_list_pause
eee0 : 2048c4           [ 6] 	jsr io_get_ch
eee3 : c920             [ 2] 	cmp #' '						; Space = PAUSE
eee5 : f0f9             [ 3] 	beq df_rt_list_pause			; C=1 for synchronouse ke
eee7 : c903             [ 2] 	cmp #UTF_ETX					; CTRL-C?
eee9 : f026             [ 4] 	beq df_rt_list_line_fin
eeeb :                       df_rt_list_line_cont
eeeb : a000             [ 2] 	ldy #0
eeed : 8488             [ 3] 	sty df_exeoff
eeef : 2014ef           [ 6] 	jsr df_rt_list_all_line
eef2 :                       df_rt_list_next_line
                             	; new line
eef2 : 206cc1           [ 6] 	jsr utilPrintCRLF
                             	; increment pointer to next line
eef5 : 18               [ 2] 	clc
eef6 : a5a1             [ 3] 	lda df_tmpptra
eef8 : a000             [ 2] 	ldy #0
eefa : 71a1             [ 5] 	adc (df_tmpptra),y
eefc : 85a1             [ 3] 	sta df_tmpptra
eefe : a5a2             [ 3] 	lda df_tmpptra+1
ef00 : 6900             [ 2] 	adc #0
ef02 : 85a2             [ 3] 	sta df_tmpptra+1
                             	; if pointer > end then listing is done
ef04 : 38               [ 2] 	sec
ef05 : 68               [ 4] 	pla
ef06 : aa               [ 2] 	tax
ef07 : e5a1             [ 3] 	sbc df_tmpptra
ef09 : 68               [ 4] 	pla
ef0a : 48               [ 3] 	pha
ef0b : e5a2             [ 3] 	sbc df_tmpptra+1
ef0d : 8a               [ 2] 	txa
ef0e : 48               [ 3] 	pha
ef0f : b0c0             [ 4] 	bcs df_rt_list_line
ef11 :                       df_rt_list_line_fin
                             	; if got here then reached tmpb
ef11 : 68               [ 4] 	pla
ef12 : 68               [ 4] 	pla
ef13 :                       df_rt_list_line_only_fin
ef13 : 60               [ 6] 	rts
                             
AS65 Assembler for R6502 [1.42].                                     Page  226
---------------------------------- bank0.s -----------------------------------

                             ;Using df_tmpptra as line pointer
                             ;Print decode an entire line
ef14 :                       df_rt_list_all_line				; Start here to include nu
ef14 : 2058f0           [ 6] 	jsr df_rt_list_linnum
ef17 :                       df_rt_list_line_only			; Start here for just the 
ef17 : a003             [ 2] 	ldy #3
ef19 : b1a1             [ 5] 	lda (df_tmpptra),y
ef1b : 857f             [ 3] 	sta df_nxtstidx
ef1d : c8               [ 2] 	iny
ef1e : 8488             [ 3] 	sty df_exeoff
ef20 :                       df_rt_list_decode
ef20 : a488             [ 3] 	ldy df_exeoff
ef22 : b1a1             [ 5] 	lda (df_tmpptra),y
ef24 : 3010             [ 3] 	bmi df_rt_list_token
ef26 : c920             [ 2] 	cmp #DFTK_ESCVAL
ef28 : 9006             [ 3] 	bcc df_rt_list_escval
                             	; normal char just print it
ef2a : 204bc4           [ 6] 	jsr io_put_ch
ef2d : 4c39ef           [ 3] 	jmp df_rt_list_nexttok
ef30 :                       df_rt_list_escval
                             	; A and Y need to be valid on entry
ef30 : 2052ef           [ 6] 	jsr df_rt_list_decode_esc
ef33 : 4c39ef           [ 3] 	jmp df_rt_list_nexttok
ef36 :                       df_rt_list_token
ef36 : 2065f0           [ 6] 	jsr df_rt_list_decode_token
ef39 :                       df_rt_list_nexttok
                             	; advance the line offset
ef39 : e688             [ 5] 	inc df_exeoff
ef3b : a588             [ 3] 	lda df_exeoff
                             	; check if at end of line
ef3d : a200             [ 2] 	ldx #0
ef3f : c1a1             [ 6] 	cmp (df_tmpptra,x)
ef41 : f0d0             [ 3] 	beq df_rt_list_line_only_fin
                             	; check if at end of statement
ef43 : c57f             [ 3] 	cmp df_nxtstidx
ef45 : d0d9             [ 3] 	bne df_rt_list_decode
ef47 : a8               [ 2] 	tay
                             	; save the next statement offset
ef48 : b1a1             [ 5] 	lda (df_tmpptra),y
ef4a : 857f             [ 3] 	sta df_nxtstidx
ef4c : c8               [ 2] 	iny
ef4d : 8488             [ 3] 	sty df_exeoff
ef4f : 4c20ef           [ 3] 	jmp df_rt_list_decode
                             
                             
                             ; decode escape sequences
                             ; Input: A contains the esc val and Y is char lin
ef52 :                       df_rt_list_decode_esc
                             	; jump over esc byte
ef52 : c8               [ 2] 	iny
ef53 : 8488             [ 3] 	sty df_exeoff
ef55 : 48               [ 3] 	pha
                             	; get the next two bytes in case needed
ef56 : b1a1             [ 5] 	lda (df_tmpptra),y
ef58 : 85a3             [ 3] 	sta df_tmpptrb
ef5a : c8               [ 2] 	iny
ef5b : b1a1             [ 5] 	lda (df_tmpptra),y
ef5d : 85a4             [ 3] 	sta df_tmpptrb+1
ef5f : 88               [ 2] 	dey				; Y is on byte after esc byte
ef60 : 68               [ 4] 	pla
                             	; x2 to get jmp offset
ef61 : 0a               [ 2] 	asl a
AS65 Assembler for R6502 [1.42].                                     Page  227
---------------------------------- bank0.s -----------------------------------

ef62 : aa               [ 2] 	tax
ef63 : bd44e6           [ 4] 	lda df_rt_escjmp,x
ef66 : 85a5             [ 3] 	sta df_tmpptrc
ef68 : bd45e6           [ 4] 	lda df_rt_escjmp+1,x
ef6b : 85a6             [ 3] 	sta df_tmpptrc+1
                             	; now jump to decoder
ef6d : 6ca500           [ 6] 	jmp (df_tmpptrc)
                             
                             ; reserved
ef70 :                       df_rt_lst_reserved
ef70 : 60               [ 6] 	rts
                             
                             ; decode a byte char
ef71 :                       df_rt_lst_chr
ef71 : a927             [ 2] 	lda #0x27			; Single quote
ef73 : 204bc4           [ 6] 	jsr io_put_ch
ef76 : a5a3             [ 3] 	lda df_tmpptrb
ef78 : 204bc4           [ 6] 	jsr io_put_ch
ef7b : a927             [ 2] 	lda #0x27			; Single quote
ef7d : 204bc4           [ 6] 	jsr io_put_ch
ef80 : c8               [ 2] 	iny
ef81 : 8488             [ 3] 	sty df_exeoff
ef83 : 60               [ 6] 	rts
                             
                             ; Output 0x for hex chars
ef84 :                       df_rt_lst_hex_pre
ef84 : a930             [ 2] 	lda #'0'
ef86 : 204bc4           [ 6] 	jsr io_put_ch
ef89 : a978             [ 2] 	lda #'x'
ef8b : 4c4bc4           [ 3] 	jmp io_put_ch
                             
                             
                             ; Decode a byte hex
ef8e :                       df_rt_lst_bythex
ef8e : 2084ef           [ 6] 	jsr df_rt_lst_hex_pre
ef91 :                       df_rt_lst_lo_hex
ef91 : a5a3             [ 3] 	lda df_tmpptrb
ef93 : 2089c1           [ 6] 	jsr str_a_to_x
ef96 : 204bc4           [ 6] 	jsr io_put_ch
ef99 : 8a               [ 2] 	txa
ef9a : 204bc4           [ 6] 	jsr io_put_ch
ef9d : c8               [ 2] 	iny
ef9e : 8488             [ 3] 	sty df_exeoff
efa0 : 60               [ 6] 	rts
                             
                             ; Decode an int hex
efa1 :                       df_rt_lst_inthex
efa1 : 2084ef           [ 6] 	jsr df_rt_lst_hex_pre
efa4 : a5a4             [ 3] 	lda df_tmpptrb+1
efa6 : 2089c1           [ 6] 	jsr str_a_to_x
efa9 : 204bc4           [ 6] 	jsr io_put_ch
efac : 8a               [ 2] 	txa
efad : 204bc4           [ 6] 	jsr io_put_ch
efb0 : 4c91ef           [ 3] 	jmp df_rt_lst_lo_hex
                             
                             ; Decode a byte binary
efb3 :                       df_rt_lst_bytbin
efb3 : a208             [ 2] 	ldx #8
efb5 : a5a3             [ 3] 	lda df_tmpptrb
efb7 : 85a4             [ 3] 	sta df_tmpptrb+1
efb9 : 4cc1ef           [ 3] 	jmp df_rt_lst_bin
                             
AS65 Assembler for R6502 [1.42].                                     Page  228
---------------------------------- bank0.s -----------------------------------

                             ; Decode a int binary
efbc :                       df_rt_lst_intbin
efbc : a210             [ 2] 	ldx #16
efbe : c8               [ 2] 	iny
efbf : 8488             [ 3] 	sty df_exeoff
                             
                             ; Main 01 decoding of binary
efc1 :                       df_rt_lst_bin
efc1 : a930             [ 2] 	lda #'0'
efc3 : 204bc4           [ 6] 	jsr io_put_ch
efc6 : a962             [ 2] 	lda #'b'
efc8 : 204bc4           [ 6] 	jsr io_put_ch
efcb :                       df_rt_lst_bit
efcb : a930             [ 2] 	lda #'0'
efcd : 06a3             [ 5] 	asl df_tmpptrb
efcf : 26a4             [ 5] 	rol df_tmpptrb+1
efd1 : 9002             [ 3] 	bcc df_rt_lst_bit_skip0
efd3 : a931             [ 2] 	lda #'1'
efd5 :                       df_rt_lst_bit_skip0
efd5 : 204bc4           [ 6] 	jsr io_put_ch
efd8 : ca               [ 2] 	dex
efd9 : d0f0             [ 3] 	bne df_rt_lst_bit
efdb : c8               [ 2] 	iny
efdc : 8488             [ 3] 	sty df_exeoff
efde : 60               [ 6] 	rts
                             
                             ; Decode a decimal integer
efdf :                       df_rt_lst_intdec
efdf : a6a3             [ 3] 	ldx df_tmpptrb
efe1 : a5a4             [ 3] 	lda df_tmpptrb+1
efe3 : c8               [ 2] 	iny
efe4 : 8488             [ 3] 	sty df_exeoff
efe6 : 18               [ 2] 	clc
efe7 : 4cf4c3           [ 3] 	jmp print_a_to_d
                             
                             
                             ; decode a variable or procedure
                             ; Slot address to decode in ptrb
efea :                       df_rt_lst_var
efea :                       df_rt_lst_proc
                             	; jump over the address bytes
efea : c8               [ 2] 	iny
efeb : 8488             [ 3] 	sty df_exeoff
                             
                             	; ptrc starts at VNT start
                             	_cpyZPWord df_vntstrt,df_tmpptrc
                             
                             
                             	; ptrd starts at end of VVT
                             	_cpyZPWord df_vvtend,df_tmpptrd
                             
effd : a000             [ 2] 	ldy #0
efff :                       df_rt_list_findvvt
                             	; Check have we reached target addr in vvt?
efff : a5a7             [ 3] 	lda df_tmpptrd
f001 : c5a3             [ 3] 	cmp df_tmpptrb
f003 : d006             [ 3] 	bne df_rt_list_vvtend
f005 : a5a8             [ 3] 	lda df_tmpptrd+1
f007 : c5a4             [ 3] 	cmp df_tmpptrb+1
f009 : f023             [ 3] 	beq df_rt_list_gotvvt
f00b :                       df_rt_list_vvtend
f00b : b1a5             [ 5] 	lda (df_tmpptrc),y
AS65 Assembler for R6502 [1.42].                                     Page  229
---------------------------------- bank0.s -----------------------------------

f00d : f009             [ 3] 	beq df_rt_list_gotvvtend
                             	_incZPWord df_tmpptrc
                             
f015 : 4c0bf0           [ 3] 	jmp df_rt_list_vvtend
f018 :                       df_rt_list_gotvvtend
                             	_incZPWord df_tmpptrc
                             
                             	; move target slot address towards top of mem
f01e : 18               [ 2] 	clc
f01f : a5a7             [ 3] 	lda df_tmpptrd
f021 : 6908             [ 2] 	adc #DFVVT_SZ
f023 : 85a7             [ 3] 	sta df_tmpptrd
f025 : a5a8             [ 3] 	lda df_tmpptrd+1
f027 : 6900             [ 2] 	adc #0
f029 : 85a8             [ 3] 	sta df_tmpptrd+1
                             	; go back and check again
f02b : 4cffef           [ 3] 	jmp df_rt_list_findvvt
f02e :                       df_rt_list_gotvvt
f02e : b1a5             [ 5] 	lda (df_tmpptrc),y
f030 : f025             [ 3] 	beq df_rt_list_donvvt
f032 : 204bc4           [ 6] 	jsr io_put_ch
                             	_incZPWord df_tmpptrc
                             
f03b : 4c2ef0           [ 3] 	jmp df_rt_list_gotvvt
                             
f03e :                       df_rt_lst_strlit
f03e : a922             [ 2] 	lda #0x22
f040 : 204bc4           [ 6] 	jsr io_put_ch
f043 : a488             [ 3] 	ldy df_exeoff
f045 :                       df_rt_lst_strlitch
f045 : b1a1             [ 5] 	lda (df_tmpptra),y
f047 : f007             [ 3] 	beq df_rt_lst_strlitdon
f049 : 204bc4           [ 6] 	jsr io_put_ch
f04c : c8               [ 2] 	iny
f04d : 4c45f0           [ 3] 	jmp df_rt_lst_strlitch
f050 :                       df_rt_lst_strlitdon
f050 : a922             [ 2] 	lda #0x22
f052 : 204bc4           [ 6] 	jsr io_put_ch
f055 : 8488             [ 3] 	sty df_exeoff
f057 :                       df_rt_list_donvvt
f057 : 60               [ 6] 	rts
                             
f058 :                       df_rt_list_linnum
f058 : a001             [ 2] 	ldy #1
f05a : b1a1             [ 5] 	lda (df_tmpptra),y
f05c : aa               [ 2] 	tax
f05d : a002             [ 2] 	ldy #2
f05f : b1a1             [ 5] 	lda (df_tmpptra),y
f061 : 18               [ 2] 	clc
f062 : 4cf4c3           [ 3] 	jmp print_a_to_d
                             
                             ; decode a token value with MSB set
f065 :                       df_rt_list_decode_token
                             	; if not assembler then normal listing
f065 : c997             [ 2] 	cmp #DFRT_ASM
f067 : d003             [ 3] 	bne df_rt_list_decode_token_normal
f069 : 4ca4f0           [ 3] 	jmp df_rt_asm_decode_token
f06c :                       df_rt_list_decode_token_normal
f06c : 297f             [ 2] 	and #0x7f
                             	; token 0 and 1 don't get decoded they are impli
f06e : c902             [ 2] 	cmp #2
f070 : b001             [ 3] 	bcs df_rt_list_do_decode_tkn
AS65 Assembler for R6502 [1.42].                                     Page  230
---------------------------------- bank0.s -----------------------------------

f072 : 60               [ 6] 	rts
f073 :                       df_rt_list_do_decode_tkn
f073 : aa               [ 2] 	tax
f074 : a9b2             [ 2] 	lda #lo(df_tokensyms)
f076 : 85a3             [ 3] 	sta df_tmpptrb
f078 : a9da             [ 2] 	lda #hi(df_tokensyms)
f07a : 85a4             [ 3] 	sta df_tmpptrb+1
f07c :                       df_rt_list_find_sym
f07c : e000             [ 2] 	cpx #0
f07e : f012             [ 3] 	beq df_rt_list_got_sym
f080 : a000             [ 2] 	ldy #0
f082 :                       df_rt_list_next_ch
f082 : b1a3             [ 5] 	lda (df_tmpptrb),y
f084 : 48               [ 3] 	pha
                             	_incZPWord df_tmpptrb
                             
f08b : 68               [ 4] 	pla
f08c : 10f4             [ 3] 	bpl df_rt_list_next_ch
f08e :                       df_rt_list_got_last_sym
                             	; ok got to the last ch
                             	; advance to next sym
f08e : ca               [ 2] 	dex
f08f : 4c7cf0           [ 3] 	jmp df_rt_list_find_sym
f092 :                       df_rt_list_got_sym
f092 : a1a3             [ 6] 	lda (df_tmpptrb,x)		; Relies on X=0 from branch
f094 : 08               [ 3] 	php
f095 : 297f             [ 2] 	and #0x7f
f097 : 204bc4           [ 6] 	jsr io_put_ch
                             	_incZPWord df_tmpptrb
                             
f0a0 : 28               [ 4] 	plp
f0a1 : 10ef             [ 3] 	bpl df_rt_list_got_sym
f0a3 : 60               [ 6] 	rts
                             
                             ;** Decode assembler token in A **
f0a4 :                       df_rt_asm_decode_token
f0a4 : a92e             [ 2] 	lda #'.'			;Always put out the . symbol
f0a6 : 204bc4           [ 6] 	jsr io_put_ch
f0a9 : a488             [ 3] 	ldy df_exeoff		;Print out any whitespace
f0ab :                       df_rt_asm_decode_token_ws
f0ab : c8               [ 2] 	iny					;Point to char after the asm token
f0ac : 8488             [ 3] 	sty df_exeoff
f0ae : b1a1             [ 5] 	lda (df_tmpptra),y	;What is the char?
f0b0 : 204cd7           [ 6] 	jsr df_tk_isws		;If not then found the keyword
f0b3 : 9006             [ 3] 	bcc df_rt_asm_decode_token_found
f0b5 : 204bc4           [ 6] 	jsr io_put_ch		;Print the space
f0b8 : 4cabf0           [ 3] 	jmp df_rt_asm_decode_token_ws
f0bb :                       df_rt_asm_decode_token_found
f0bb : c911             [ 2] 	cmp #DFTK_VAR		; If is a label variable?
f0bd : d003             [ 3] 	bne df_rt_asm_decode_token_keyword
                             	; if so then process as normal escape handling
f0bf : 4c52ef           [ 3] 	jmp df_rt_list_decode_esc
f0c2 :                       df_rt_asm_decode_token_keyword
f0c2 : 297f             [ 2] 	and #0x7f			; Mask off MSB
f0c4 : aa               [ 2] 	tax					;Put it in to X as the counter
                             	; Point to asm symbol table
f0c5 : a9a7             [ 2] 	lda #lo(df_asm_tokensyms)
f0c7 : 85a3             [ 3] 	sta df_tmpptrb
f0c9 : a9fd             [ 2] 	lda #hi(df_asm_tokensyms)
f0cb : 85a4             [ 3] 	sta df_tmpptrb+1
f0cd :                       df_rt_list_find_asm_sym
f0cd : e000             [ 2] 	cpx #0
AS65 Assembler for R6502 [1.42].                                     Page  231
---------------------------------- bank0.s -----------------------------------

f0cf : f01d             [ 3] 	beq df_rt_list_got_asm_sym
f0d1 : a000             [ 2] 	ldy #0
f0d3 :                       df_rt_list_next_asm_ch
                             	_incZPWord df_tmpptrb
                             
f0d9 : b1a3             [ 5] 	lda (df_tmpptrb),y
f0db : c920             [ 2] 	cmp #' '			; Skip all chars >=' '
f0dd : b0f4             [ 3] 	bcs df_rt_list_next_asm_ch
f0df : 38               [ 2] 	sec					; Skip offset and mode bytes
f0e0 : 65a3             [ 3] 	adc df_tmpptrb
f0e2 : 85a3             [ 3] 	sta df_tmpptrb
f0e4 : a5a4             [ 3] 	lda df_tmpptrb+1
f0e6 : 6900             [ 2] 	adc #0
f0e8 : 85a4             [ 3] 	sta df_tmpptrb+1
f0ea : ca               [ 2] 	dex					; One less symbol to skip over
f0eb : 4ccdf0           [ 3] 	jmp df_rt_list_find_asm_sym
f0ee :                       df_rt_list_got_asm_sym
f0ee : a1a3             [ 6] 	lda (df_tmpptrb,x)	; Relies on X=0 from branch
f0f0 : c920             [ 2] 	cmp #' '
f0f2 : 900c             [ 4] 	bcc df_rt_asm_decode_token_done
f0f4 : 204bc4           [ 6] 	jsr io_put_ch
                             	_incZPWord df_tmpptrb
                             
f0fd : 4ceef0           [ 3] 	jmp df_rt_list_got_asm_sym
f100 :                       df_rt_asm_decode_token_done
f100 : 60               [ 6] 	rts
                             
                             
f101 :                       df_rt_doke
f101 : 2068e3           [ 6] 	jsr df_rt_parm_2ints
f104 : a5a3             [ 3] 	lda df_tmpptrb
f106 : a000             [ 2] 	ldy #0
f108 : 91a1             [ 5] 	sta (df_tmpptra),y
                             	; get high byte to doke
f10a : a5a4             [ 3] 	lda df_tmpptrb+1
f10c : c8               [ 2] 	iny
                             	; poke hi byte
f10d : 91a1             [ 5] 	sta (df_tmpptra),y
f10f : 60               [ 6] 	rts
                             
f110 :                       df_rt_poke
f110 : 2068e3           [ 6] 	jsr df_rt_parm_2ints
f113 : a5a3             [ 3] 	lda df_tmpptrb
f115 : a000             [ 2] 	ldy #0
f117 : 91a1             [ 5] 	sta (df_tmpptra),y
f119 : 60               [ 6] 	rts
                             
f11a :                       df_rt_snd_common
                             	; 3 inputs
                             	; tmpa = channel (1,2,3), tmpb = period, tmpc = 
f11a : a5a1             [ 3] 	lda df_tmpptra
                             	; tone channel addressing is 0 to 2
f11c : 38               [ 2] 	sec
f11d : e901             [ 2] 	sbc #1
f11f : 2903             [ 2] 	and #3
                             	; ok doing a tone channel, get reg index for per
f121 : 0a               [ 2] 	asl a
f122 : aa               [ 2] 	tax
                             	; get low byte of period
f123 : a5a3             [ 3] 	lda df_tmpptrb
f125 : 2000c0           [ 6] 	jsr snd_set
                             	; increment reg number to high byte
AS65 Assembler for R6502 [1.42].                                     Page  232
---------------------------------- bank0.s -----------------------------------

f128 : e8               [ 2] 	inx
                             	; get high byte of period
f129 : a5a4             [ 3] 	lda df_tmpptrb+1
f12b : 290f             [ 2] 	and #0x0f
                             	; set period
f12d : 2000c0           [ 6] 	jsr snd_set
                             	; get volume register index (8 = channel 1)
f130 : 18               [ 2] 	clc
f131 : a5a1             [ 3] 	lda df_tmpptra
f133 : 2903             [ 2] 	and #3
f135 : 6907             [ 2] 	adc #7
f137 : aa               [ 2] 	tax
                             	; get volume
f138 : a5a5             [ 3] 	lda df_tmpptrc
f13a : 290f             [ 2] 	and #0x0f
f13c : d002             [ 3] 	bne df_rt_sound_env_skip
                             	; envelope mode
f13e : 0910             [ 2] 	ora #0x10
f140 :                       df_rt_sound_env_skip
f140 : 4c00c0           [ 3] 	jmp snd_set
                             
                             ; sound chan,period,volume
f143 :                       df_rt_sound
f143 : 207fe3           [ 6] 	jsr df_rt_parm_3ints
f146 :                       df_rt_dosound
                             	; check which channel (0 = noise)
f146 : a5a1             [ 3] 	lda df_tmpptra
f148 : f003             [ 3] 	beq df_rt_sound_noise
f14a : 4c1af1           [ 3] 	jmp df_rt_snd_common
f14d :                       df_rt_sound_noise
                             	; ok update the noise channel, volume is irrelev
f14d : a206             [ 2] 	ldx #6
f14f : a5a3             [ 3] 	lda df_tmpptrb
f151 : 291f             [ 2] 	and #0x1f
f153 : 4c00c0           [ 3] 	jmp snd_set
                             
                             ; music chan,octave,note,volume
f156 :                       df_rt_music
f156 : 20a2e3           [ 6] 	jsr df_rt_parm_4ints
                             	; parm 2 = octave, need to x 12word = 24
                             	; get period A,X (hi/lo)
                             	; pass in octave # in X and note # in Y
f159 : a6a3             [ 3] 	ldx df_tmpptrb
f15b : a4a5             [ 3] 	ldy df_tmpptrc
f15d : 20edd3           [ 6] 	jsr snd_get_note
                             	; store note period in b
f160 : 86a3             [ 3] 	stx df_tmpptrb
f162 : 85a4             [ 3] 	sta df_tmpptrb+1
                             	; put vol in tmpc
f164 : a5a7             [ 3] 	lda df_tmpptrd
f166 : 85a5             [ 3] 	sta df_tmpptrc
                             	; tmpa,b,c contain chan,per,vol
f168 : 4c46f1           [ 3] 	jmp df_rt_dosound
                             
                             
                             ; play tonemask,noisemask,envelope,period
f16b :                       df_rt_play
f16b : 20a2e3           [ 6] 	jsr df_rt_parm_4ints
                             	; parm 1 = tone enable
f16e : a5a1             [ 3] 	lda df_tmpptra
f170 : 2907             [ 2] 	and #7
f172 : 85a1             [ 3] 	sta df_tmpptra
AS65 Assembler for R6502 [1.42].                                     Page  233
---------------------------------- bank0.s -----------------------------------

                             	; parm 2 = noise enable
f174 : a5a3             [ 3] 	lda df_tmpptrb
f176 : 2907             [ 2] 	and #7
f178 : 0a               [ 2] 	asl a
f179 : 0a               [ 2] 	asl a
f17a : 0a               [ 2] 	asl a
f17b : 05a1             [ 3] 	ora df_tmpptra
                             	; we now have bits set for channels to enable
                             	; but need to invert for the 8910
                             	; top 2 bits are 0 and 1 as these are port b (in
f17d : 497f             [ 2] 	eor #0x7f
                             	; reg 7 is control register
f17f : a207             [ 2] 	ldx #7
f181 : 2000c0           [ 6] 	jsr snd_set
                             	; parm 3 = envelope mode
f184 : a5a5             [ 3] 	lda df_tmpptrc
f186 : 290f             [ 2] 	and #0xf
                             	; 13 is envelope shape register
f188 : a20d             [ 2] 	ldx #13
f18a : 2000c0           [ 6] 	jsr snd_set
                             	; parm 4 = envelope period
                             	; 11 is envelope period register
f18d : a20b             [ 2] 	ldx #11
                             	; get low
f18f : a5a7             [ 3] 	lda df_tmpptrd
f191 : 2000c0           [ 6] 	jsr snd_set
                             	; get high
f194 : e8               [ 2] 	inx
f195 : a5a8             [ 3] 	lda df_tmpptrd+1
f197 : 4c00c0           [ 3] 	jmp snd_set
                             
                             ;* common filename procesing routine
                             ;*
f19a :                       df_rt_init_filename
                             	; evaluate string
f19a : 2090e0           [ 6] 	jsr df_rt_neval
f19d : 206cf7           [ 6] 	jsr df_ost_popStr
                             
                             	; save string address
f1a0 : 86a5             [ 3] 	stx df_tmpptrc
f1a2 : 85a6             [ 3] 	sta df_tmpptrc+1
                             
                             	; copy string to fhandle
f1a4 : a000             [ 2] 	ldy #0
f1a6 :                       df_rt_copy_fn
f1a6 : b1a5             [ 5] 	lda (df_tmpptrc),y
f1a8 :                       df_rt_fname_case
f1a8 : 990004           [ 5] 	sta df_linbuff,y				; Put filename in line buffe
f1ab : c8               [ 2] 	iny
f1ac : c900             [ 2] 	cmp #0
f1ae : d0f6             [ 3] 	bne df_rt_copy_fn
f1b0 : 60               [ 6] 	rts
                             
                             ;* common file parsing routine
f1b1 :                       df_rt_parse_file
                             	; now process filename
f1b1 : 209af1           [ 6] 	jsr df_rt_init_filename
f1b4 : a900             [ 2] 	lda #0						; Initialise tape system
f1b6 : 4c22c4           [ 3] 	jmp io_active_device
f1b9 :                       df_rt_file_errc
                             	SWBRK DFERR_FNAME
                             
AS65 Assembler for R6502 [1.42].                                     Page  234
---------------------------------- bank0.s -----------------------------------

                             
                             ; save "file" as text
f1bb :                       df_rt_tsave
f1bb : 20b1f1           [ 6] 	jsr df_rt_parse_file
f1be : 2051c4           [ 6] 	jsr io_open_write
f1c1 : b0f6             [ 3] 	bcs df_rt_file_errc
                             	; ok now have redirected output to device
                             	; go and list the program in save mode
f1c3 : a901             [ 2] 	lda #1
f1c5 : 85a9             [ 3] 	sta df_tmpptre
f1c7 : 20c3ee           [ 6] 	jsr df_rt_listprg
                             	; final CR to end the save
f1ca : a90d             [ 2] 	lda #UTF_CR
f1cc : 204bc4           [ 6] 	jsr io_put_ch
f1cf :                       df_rt_file_cleanup
                             	; close the file
f1cf : 2054c4           [ 6] 	jsr io_close
                             	; restore to default device io
f1d2 : 4c1fc4           [ 3] 	jmp io_set_default
                             
                             
                             ; load "file" from text
f1d5 :                       df_rt_tload
f1d5 : 20b1f1           [ 6] 	jsr df_rt_parse_file
f1d8 : 204ec4           [ 6] 	jsr io_open_read
f1db : b0dc             [ 3] 	bcs df_rt_file_errc
                             	; no echo - very important
                             	; else might try and write to a device
                             	; only open for reading (i.e. SD CARD)
f1dd :                       df_rt_loadline
f1dd : 18               [ 2] 	clc					; NO ECHO!
f1de : 205fdf           [ 6] 	jsr df_pg_inputline
                             	; if C clear then tokenise line
f1e1 : 9014             [ 3] 	bcc df_rt_ldtokenise
                             	; else done
                             	; clear dflat runtime else will try to execute
                             	; the last tokenised line!
f1e3 : a900             [ 2] 	lda #0
f1e5 : 8d8004           [ 4] 	sta df_tokbuff			; Offset to next line
f1e8 : 8d8104           [ 4] 	sta df_tokbuff+1		; Clear line low
f1eb : 8d8204           [ 4] 	sta df_tokbuff+2		; Clear line high
f1ee : 857f             [ 3] 	sta df_nxtstidx			; Clear next statement
f1f0 : a901             [ 2] 	lda #1					; Set immediate mode
f1f2 : 855e             [ 3] 	sta df_immed
f1f4 : 4ccff1           [ 3] 	jmp df_rt_file_cleanup	; Ok now can close and do
f1f7 :                       df_rt_ldtokenise
f1f7 : 20b3df           [ 6] 	jsr df_pg_tokenise		; Tokenise loaded string
f1fa : 4cddf1           [ 3] 	jmp df_rt_loadline		; Continue with next until b
                             
                             
                             ; Utility to open in binary mode save
f1fd :                       df_rt_openforbinsave
f1fd : 20b1f1           [ 6] 	jsr df_rt_parse_file
f200 : 205dc4           [ 6] 	jsr io_open_ext2		; Ext2 is binary file save
f203 : b0b4             [ 4] 	bcs df_rt_file_errc
f205 : 60               [ 6] 	rts
                             
                             ; Utility to open in binary mode load
f206 :                       df_rt_openforbinload
                             	; Get filename and open file for binary read
f206 : 20b1f1           [ 6] 	jsr df_rt_parse_file
f209 : 205ac4           [ 6] 	jsr io_open_ext1		; Ext1 is binary file read
AS65 Assembler for R6502 [1.42].                                     Page  235
---------------------------------- bank0.s -----------------------------------

f20c : b0ab             [ 4] 	bcs df_rt_file_errc
f20e : 60               [ 6] 	rts
                             
                             ; bload addr,"file"
f20f :                       df_rt_bload
                             	; Get address but keep on stack
f20f : e688             [ 5] 	inc df_exeoff
f211 : 2090e0           [ 6] 	jsr df_rt_neval
                             
                             	; Get filename and open file for binary read
f214 : e688             [ 5] 	inc df_exeoff
f216 : 2006f2           [ 6] 	jsr df_rt_openforbinload
                             
                             	; Get address from stack in to ptra
f219 : 2068f7           [ 6] 	jsr df_ost_popInt
f21c : 86a1             [ 3] 	stx df_tmpptra
f21e : 85a2             [ 3] 	sta df_tmpptra+1
                             
                             	; Get file address to X,Y
f220 : 2048c4           [ 6] 	jsr io_get_ch
f223 : aa               [ 2] 	tax
f224 : 2048c4           [ 6] 	jsr io_get_ch
f227 : a8               [ 2] 	tay
                             
                             	; Check if user address is zero
f228 : a5a1             [ 3] 	lda df_tmpptra
f22a : 05a2             [ 3] 	ora df_tmpptra+1
f22c : d004             [ 3] 	bne df_rt_bload_addr
                             	; If it is zero then use address from file
f22e : 86a1             [ 3] 	stx df_tmpptra
f230 : 84a2             [ 3] 	sty df_tmpptra+1
f232 :                       df_rt_bload_addr
                             	; Get file length
f232 : 2048c4           [ 6] 	jsr io_get_ch
f235 : 85a3             [ 3] 	sta df_tmpptrb
f237 : 2048c4           [ 6] 	jsr io_get_ch
f23a : 85a4             [ 3] 	sta df_tmpptrb+1
                             
                             	; Go and load the bytes
f23c : 20def2           [ 6] 	jsr df_rt_loadbin
                             	; Close the file
f23f : 4ccff1           [ 3] 	jmp df_rt_file_cleanup
                             
                             ; Save a binary file
                             ; addr,length,fname
f242 :                       df_rt_bsave
                             	; Get source address and length but leave on sta
                             	; evaluate 1st parm
f242 : 2090e0           [ 6] 	jsr df_rt_neval
                             	; jump over comma
f245 : e688             [ 5] 	inc df_exeoff
                             	; evaluate the 2nd parm
f247 : 2090e0           [ 6] 	jsr df_rt_neval
                             
                             	; Process file and open for binary save
f24a : e688             [ 5] 	inc df_exeoff
f24c : 20fdf1           [ 6] 	jsr df_rt_openforbinsave
                             
                             	; Get length in to ptrb
f24f : 2068f7           [ 6] 	jsr df_ost_popInt
f252 : 86a3             [ 3] 	stx df_tmpptrb
f254 : 85a4             [ 3] 	sta df_tmpptrb+1
AS65 Assembler for R6502 [1.42].                                     Page  236
---------------------------------- bank0.s -----------------------------------

                             
                             	; Get address in to ptra
f256 : 2068f7           [ 6] 	jsr df_ost_popInt
f259 : 86a1             [ 3] 	stx df_tmpptra
f25b : 85a2             [ 3] 	sta df_tmpptra+1
                             
                             	; now save bytes
f25d : 20f0f2           [ 6] 	jsr df_rt_savebin
                             	; Close the file
f260 : 4ccff1           [ 3] 	jmp df_rt_file_cleanup
                             
                             
                             ; save dflat tokenised program as binary
f263 :                       df_rt_save
                             	; Process file and open for binary save
f263 : 20fdf1           [ 6] 	jsr df_rt_openforbinsave
                             
                             	; first save zero page stuff
                             	; ok this saves a bit more than needed
                             	; but it's no biggie and doesn't
                             	; clobber temp space
f266 : a95b             [ 2] 	lda #lo(dflat_zp_save_s)
f268 : 85a1             [ 3] 	sta df_tmpptra
f26a : a900             [ 2] 	lda #hi(dflat_zp_save_s)
f26c : 85a2             [ 3] 	sta df_tmpptra+1
                             	; save length
f26e : 38               [ 2] 	sec
f26f : a9a1             [ 2] 	lda #lo(dflat_zp_save_e)
f271 : e95b             [ 2] 	sbc #lo(dflat_zp_save_s)
f273 : 85a3             [ 3] 	sta df_tmpptrb
f275 : a900             [ 2] 	lda #hi(dflat_zp_save_e)
f277 : e900             [ 2] 	sbc #hi(dflat_zp_save_s)
f279 : 85a4             [ 3] 	sta df_tmpptrb+1
                             	; now save bytes
f27b : 20f0f2           [ 6] 	jsr df_rt_savebin
                             
                             	; now save the dflat program
f27e : a565             [ 3] 	lda df_prgstrt
f280 : 85a1             [ 3] 	sta df_tmpptra
f282 : a566             [ 3] 	lda df_prgstrt+1
f284 : 85a2             [ 3] 	sta df_tmpptra+1
                             	; save length
f286 : 38               [ 2] 	sec
f287 : a567             [ 3] 	lda df_prgend
f289 : e565             [ 3] 	sbc df_prgstrt
f28b : 85a3             [ 3] 	sta df_tmpptrb
f28d : a568             [ 3] 	lda df_prgend+1
f28f : e566             [ 3] 	sbc df_prgstrt+1
f291 : 85a4             [ 3] 	sta df_tmpptrb+1
                             	; now save bytes
f293 : 20f0f2           [ 6] 	jsr df_rt_savebin
                             
                             	; now save the variables VVT and VNT
f296 : a569             [ 3] 	lda df_vntstrt
f298 : 85a1             [ 3] 	sta df_tmpptra
f29a : a56a             [ 3] 	lda df_vntstrt+1
f29c : 85a2             [ 3] 	sta df_tmpptra+1
                             	; save length
f29e : 38               [ 2] 	sec
f29f : a56d             [ 3] 	lda df_vvtstrt
f2a1 : e569             [ 3] 	sbc df_vntstrt
f2a3 : 85a3             [ 3] 	sta df_tmpptrb
AS65 Assembler for R6502 [1.42].                                     Page  237
---------------------------------- bank0.s -----------------------------------

f2a5 : a56e             [ 3] 	lda df_vvtstrt+1
f2a7 : e56a             [ 3] 	sbc df_vntstrt+1
f2a9 : 85a4             [ 3] 	sta df_tmpptrb+1
                             	; now save bytes
f2ab : 20f0f2           [ 6] 	jsr df_rt_savebin
                             
                             	; close the file
f2ae : 2054c4           [ 6] 	jsr io_close
f2b1 : 18               [ 2] 	clc
                             	; Close the file
f2b2 : 4ccff1           [ 3] 	jmp df_rt_file_cleanup
                             
                             
                             ; load dflat tokenised program as binary
f2b5 :                       df_rt_load
f2b5 : 2006f2           [ 6] 	jsr df_rt_openforbinload
                             
                             	; Get zero page header
f2b8 : 20d1f2           [ 6] 	jsr df_rt_getbin_parms
                             	; and get bytes
f2bb : 20def2           [ 6] 	jsr df_rt_loadbin
                             
                             	; Get program header
f2be : 20d1f2           [ 6] 	jsr df_rt_getbin_parms
                             	; and get bytes
f2c1 : 20def2           [ 6] 	jsr df_rt_loadbin
                             
                             	; Get variables header
f2c4 : 20d1f2           [ 6] 	jsr df_rt_getbin_parms
                             	; and get bytes
f2c7 : 20def2           [ 6] 	jsr df_rt_loadbin
                             
                             	; close the file
f2ca : 2054c4           [ 6] 	jsr io_close
f2cd : 18               [ 2] 	clc
                             	; Close the file
f2ce : 4ccff1           [ 3] 	jmp df_rt_file_cleanup
                             
                             
                             ; Utility to get 4 parms from binary header
f2d1 :                       df_rt_getbin_parms
f2d1 : a200             [ 2] 	ldx #0
f2d3 :                       df_rt_getbin_parms_loop
f2d3 : 2048c4           [ 6] 	jsr io_get_ch
f2d6 : 95a1             [ 4] 	sta df_tmpptra,x
f2d8 : e8               [ 2] 	inx
f2d9 : e004             [ 2] 	cpx #4
f2db : d0f6             [ 3] 	bne df_rt_getbin_parms_loop
f2dd : 60               [ 6] 	rts
                             
                             ; Utility to load a bin file in address ptra
                             ; Length in ptr b
f2de :                       df_rt_loadbin
                             	; Now load all bytes
f2de : a000             [ 2] 	ldy #0
f2e0 :                       df_rt_loadbin_byte
                             	; Get a byte from tape
f2e0 : 2048c4           [ 6] 	jsr io_get_ch
                             	; Save it to destination
f2e3 : 91a1             [ 5] 	sta (df_tmpptra),y
                             	; Increment destination
f2e5 : c8               [ 2] 	iny
AS65 Assembler for R6502 [1.42].                                     Page  238
---------------------------------- bank0.s -----------------------------------

f2e6 : d002             [ 3] 	bne df_rt_loadbin_inc
f2e8 : e6a2             [ 5] 	inc df_tmpptra+1
f2ea :                       df_rt_loadbin_inc
                             	; Decrement length remaining
f2ea : 200ef3           [ 6] 	jsr df_rt_dec_binlen
                             	; Not done, do another byte
f2ed : d0f1             [ 3] 	bne df_rt_loadbin_byte
                             	; Yes the close the file
f2ef : 60               [ 6] 	rts
                             
                             ; Utility to save a bin file from address ptra
                             ; Length in ptr b
f2f0 :                       df_rt_savebin
                             	; Save dest and length to tape
f2f0 : a200             [ 2] 	ldx #0
f2f2 :                       df_rt_bsave_parms
f2f2 : b5a1             [ 4] 	lda df_tmpptra,x
f2f4 : 204bc4           [ 6] 	jsr io_put_ch
f2f7 : e8               [ 2] 	inx
f2f8 : e004             [ 2] 	cpx #4
f2fa : d0f6             [ 3] 	bne df_rt_bsave_parms
                             
                             	; Now save all bytes
f2fc : a000             [ 2] 	ldy #0
f2fe :                       df_rt_savebin_byte
                             	; Get byte from memory
f2fe : b1a1             [ 5] 	lda (df_tmpptra),y
                             	; Put byte to tape
f300 : 204bc4           [ 6] 	jsr io_put_ch
                             	; Increment destination
f303 : c8               [ 2] 	iny
f304 : d002             [ 3] 	bne df_rt_savebin_inc
f306 : e6a2             [ 5] 	inc df_tmpptra+1
f308 :                       df_rt_savebin_inc
                             	; Decrement length remaining
f308 : 200ef3           [ 6] 	jsr df_rt_dec_binlen
                             	; Not done, do another byte
f30b : d0f1             [ 4] 	bne df_rt_savebin_byte
f30d : 60               [ 6] 	rts
                             
                             ; Decrement length in ptrb
f30e :                       df_rt_dec_binlen
                             	; Decrement length remaining
f30e : a5a3             [ 3] 	lda df_tmpptrb
f310 : d002             [ 3] 	bne df_rt_binlen_skip
f312 : c6a4             [ 5] 	dec df_tmpptrb+1
f314 :                       df_rt_binlen_skip
f314 : c6a3             [ 5] 	dec df_tmpptrb
                             	; Reached zero?
f316 : a5a3             [ 3] 	lda df_tmpptrb
f318 : 05a4             [ 3] 	ora df_tmpptrb+1
f31a : 60               [ 6] 	rts
                             
                             
                             ; reset var
f31b :                       df_rt_reset
                             	; now get lvar X,A from current statement
f31b : 205de5           [ 6] 	jsr df_rt_getlvar
                             	; save lvar in tmpb, vvt ptr in tmpa
f31e : 86a3             [ 3] 	stx df_tmpptrb
f320 : 85a4             [ 3] 	sta df_tmpptrb+1
                             	; load the vdp count as the reset value of timer
AS65 Assembler for R6502 [1.42].                                     Page  239
---------------------------------- bank0.s -----------------------------------

                             	; turn off interrupts while reading vdp lo,hi
f322 : a000             [ 2] 	ldy #0	; This is in readiness to read high byte 
                             	; clear interrupts to access 3 byte vdp counter 
f324 : 78               [ 2] 	sei
f325 : a508             [ 3] 	lda vdp_cnt
f327 : 91a3             [ 5] 	sta (df_tmpptrb),y
f329 : a509             [ 3] 	lda vdp_cnt+1
f32b : c8               [ 2] 	iny
f32c : 91a3             [ 5] 	sta (df_tmpptrb),y
                             	; restore interrupts asap
f32e : 58               [ 2] 	cli
f32f : 60               [ 6] 	rts
                             
                             ;***** FUNCTIONS *****
                             
f330 :                       df_rt_deek
f330 : 38               [ 2] 	sec
f331 : b001             [ 3] 	bcs df_rt_readbyte
f333 :                       df_rt_peek
f333 : 18               [ 2] 	clc
f334 :                       df_rt_readbyte
f334 : 08               [ 3] 	php
f335 : e688             [ 5] 	inc df_exeoff
f337 : 208ae0           [ 6] 	jsr df_rt_getnval
f33a : 86a1             [ 3] 	stx df_tmpptra
f33c : 85a2             [ 3] 	sta df_tmpptra+1
f33e : a000             [ 2] 	ldy #0
f340 : b1a1             [ 5] 	lda (df_tmpptra),y
f342 : aa               [ 2] 	tax
f343 : a900             [ 2] 	lda #0
f345 : 28               [ 4] 	plp
f346 : 9003             [ 3] 	bcc df_rt_readbyte_skip
f348 : c8               [ 2] 	iny
f349 : b1a1             [ 5] 	lda (df_tmpptra),y
f34b :                       df_rt_readbyte_skip
f34b : 4c34f7           [ 3] 	jmp df_ost_pushInt
                             
                             ; Random number generator
                             ; rnd(0) = get next number
                             ; rnd(>0) = set seed
f34e :                       df_rt_rnd
f34e : e688             [ 5] 	inc df_exeoff
f350 : 208ae0           [ 6] 	jsr df_rt_getnval
                             	; if input is 0 then generate next random number
f353 : e000             [ 2] 	cpx #0
f355 : d014             [ 3] 	bne df_rt_rnd_set
f357 : c900             [ 2] 	cmp #0
f359 : d010             [ 3] 	bne df_rt_rnd_set
                             	; generate next number
f35b : a598             [ 3] 	lda df_rnd+1
f35d : 4a               [ 2] 	lsr a
f35e : 2697             [ 5] 	rol df_rnd
f360 : 9002             [ 3] 	bcc df_rt_rnd_noeor
f362 : 49b4             [ 2] 	eor #0xb4
f364 :                       df_rt_rnd_noeor
f364 : 8598             [ 3] 	sta df_rnd+1
f366 : 4597             [ 3] 	eor df_rnd
f368 : 4c38f7           [ 3] 	jmp df_ost_pushIntA
                             	; else set the seed to that number and done
f36b :                       df_rt_rnd_set
f36b : 8697             [ 3] 	stx df_rnd
f36d : 8598             [ 3] 	sta df_rnd+1
AS65 Assembler for R6502 [1.42].                                     Page  240
---------------------------------- bank0.s -----------------------------------

f36f : 4c34f7           [ 3] 	jmp df_ost_pushInt
                             
                             
                             ;* Return memory footprint as follows:
                             ;* 0	Return free memory (start of vvt - end of he
                             ;* 1	Return program size (end of prg - start of p
                             ;* 2	Return size of vars (end of vnt - start of v
f372 :                       df_rt_mem
f372 : e688             [ 5] 	inc df_exeoff
f374 : 208ae0           [ 6] 	jsr df_rt_getnval
                             	; only low byte is used
f377 : e001             [ 2] 	cpx #1
f379 : f017             [ 3] 	beq df_rt_mem_prg
f37b : e002             [ 2] 	cpx #2
f37d : f026             [ 3] 	beq df_rt_mem_var
                             	; default is free memory
f37f :                       df_rt_mem_free
                             	_cpyZPWord df_vvtstrt,df_tmpptra
                             
                             	_cpyZPWord df_starend,df_tmpptrb
                             
f38f : 4cb5f3           [ 3] 	jmp df_rt_mem_calc
f392 :                       df_rt_mem_prg
                             	_cpyZPWord df_prgend,df_tmpptra
                             
                             	_cpyZPWord df_prgstrt,df_tmpptrb
                             
f3a2 : 4cb5f3           [ 3] 	jmp df_rt_mem_calc
f3a5 :                       df_rt_mem_var
                             	_cpyZPWord df_vvtstrt,df_tmpptra
                             
                             	_cpyZPWord df_vntstrt,df_tmpptrb
                             
f3b5 :                       df_rt_mem_calc
                             	; tmpa-tmpb result in X,A
f3b5 : 38               [ 2] 	sec
f3b6 : a5a1             [ 3] 	lda df_tmpptra
f3b8 : e5a3             [ 3] 	sbc df_tmpptrb
f3ba : aa               [ 2] 	tax
f3bb : a5a2             [ 3] 	lda df_tmpptra+1
f3bd : e5a4             [ 3] 	sbc df_tmpptrb+1
f3bf : 4c34f7           [ 3] 	jmp df_ost_pushInt
                             
                             ;* a=stick()
                             ;* returns bit condition of joystick positions
                             ;* no actual joystick support so this is
                             ;* Check for fire | down | up | right | left
                             ;*        bit  4     3      2     1       0
f3c2 :                       df_rt_stick
f3c2 : e688             [ 5] 	inc df_exeoff
f3c4 : 2071c7           [ 6] 	jsr kb_stick				; Get pos in to A
f3c7 : 4c38f7           [ 3] 	jmp df_ost_pushIntA
                             
                             ; k=get(sync) sync>=1 means sync
f3ca :                       df_rt_get
f3ca : e688             [ 5] 	inc df_exeoff
f3cc : 208ae0           [ 6] 	jsr df_rt_getnval
                             	; only low byte is used, check for sync or async
                             	; c=0 if x<1 else x>=1 makes c=1
f3cf : e001             [ 2] 	cpx #1
f3d1 :                       df_rt_get_sync
f3d1 : 08               [ 3] 	php
AS65 Assembler for R6502 [1.42].                                     Page  241
---------------------------------- bank0.s -----------------------------------

f3d2 : 2048c4           [ 6] 	jsr io_get_ch				; Return in A, C=0 is good
f3d5 : 9005             [ 3] 	bcc df_rt_get_pushp			; Push A (and do plp)
f3d7 : 28               [ 4] 	plp
f3d8 : b0f7             [ 3] 	bcs df_rt_get_sync			; If sync then check again
f3da : 9001             [ 3] 	bcc df_rt_get_push			; Else push zero (no plp)
f3dc :                       df_rt_get_pushp
f3dc : 28               [ 4] 	plp
f3dd :                       df_rt_get_push
f3dd : 4c38f7           [ 3] 	jmp df_ost_pushIntA
                             
                             ; s = scrn(x,y)
f3e0 :                       df_rt_scrn
f3e0 : e688             [ 5] 	inc df_exeoff
f3e2 : 2068e3           [ 6] 	jsr df_rt_parm_2ints
f3e5 : a4a1             [ 3] 	ldy df_tmpptra			; Y is the x coord!
f3e7 : a6a3             [ 3] 	ldx df_tmpptrb			; X is the y coord!
f3e9 : 20d4cd           [ 6] 	jsr gr_get
f3ec : 4c38f7           [ 3] 	jmp df_ost_pushIntA
                             
                             ; p = pixel(x,y)
f3ef :                       df_rt_pixel
f3ef : e688             [ 5] 	inc df_exeoff
f3f1 : 2068e3           [ 6] 	jsr df_rt_parm_2ints
f3f4 : a6a1             [ 3] 	ldx df_tmpptra
f3f6 : a4a3             [ 3] 	ldy df_tmpptrb
f3f8 : 2028d0           [ 6] 	jsr gr_pixel
f3fb : 4c38f7           [ 3] 	jmp df_ost_pushIntA
                             
                             
                             ; %e=elapsed(%var)
f3fe :                       df_rt_elapsed
                             	; now get lvar X,A from current statement
f3fe : 205de5           [ 6] 	jsr df_rt_getlvar
f401 : e688             [ 5] 	inc df_exeoff
                             	; save lvar in tmpb, vvt ptr in tmpa
f403 : 86a3             [ 3] 	stx df_tmpptrb
f405 : 85a4             [ 3] 	sta df_tmpptrb+1
                             	; subtract vdp counter from value
                             	; turn off interrupts while reading vdp lo,hi
f407 : a000             [ 2] 	ldy #0	; This is in readiness to read high byte 
f409 : 38               [ 2] 	sec
                             	; disable interrupts to access vdp counter
f40a : 78               [ 2] 	sei
f40b : a508             [ 3] 	lda vdp_cnt
f40d : f1a3             [ 5] 	sbc (df_tmpptrb),y
f40f : aa               [ 2] 	tax
f410 : a509             [ 3] 	lda vdp_cnt+1
                             	; restore interrupts asap
f412 : 58               [ 2] 	cli
f413 : c8               [ 2] 	iny
f414 : f1a3             [ 5] 	sbc (df_tmpptrb),y
f416 : 4c34f7           [ 3] 	jmp df_ost_pushInt
                             
f419 :                       df_rt_call
f419 : e688             [ 5] 	inc df_exeoff
f41b : 20a2e3           [ 6] 	jsr df_rt_parm_4ints
f41e : a5a3             [ 3] 	lda df_tmpptrb				; load A
f420 : a6a5             [ 3] 	ldx	df_tmpptrc				; load X
f422 : a4a7             [ 3] 	ldy df_tmpptrd				; load Y
f424 : 202af4           [ 6] 	jsr df_rt_calljsr
f427 : 4c34f7           [ 3] 	jmp df_ost_pushInt			; A,X pair is return value
f42a :                       df_rt_calljsr
AS65 Assembler for R6502 [1.42].                                     Page  242
---------------------------------- bank0.s -----------------------------------

f42a : 6ca100           [ 6] 	jmp (df_tmpptra)			; tmpptra is address, return 
                             
                             ; string length calculator
                             ; X,A = source
                             ; A = length not including zero
f42d :                       df_rt_strlen_common
f42d : 86a1             [ 3] 	stx df_tmpptra
f42f : 85a2             [ 3] 	sta df_tmpptra+1
f431 : a0ff             [ 2] 	ldy #0xff
f433 :                       df_rt_strlen_count
f433 : c8               [ 2] 	iny
f434 : b1a1             [ 5] 	lda (df_tmpptra),y
f436 : d0fb             [ 3] 	bne df_rt_strlen_count
f438 : 98               [ 2] 	tya
f439 : 60               [ 6] 	rts
                             
                             
                             ; common routine to extract a string
                             ; tmpa = source string
                             ; tmpb = dest string
                             ; tmpc = start pos
                             ; tmpd = endpos
f43a :                       df_rt_str_extract
                             	; source string
f43a : 206cf7           [ 6] 	jsr df_ost_popStr
f43d : 86a1             [ 3] 	stx df_tmpptra
f43f : 85a2             [ 3] 	sta df_tmpptra+1
                             	; destination is string accumulator
f441 : a57a             [ 3] 	lda df_sevalptr
f443 : 85a3             [ 3] 	sta df_tmpptrb
f445 : a57b             [ 3] 	lda df_sevalptr+1
f447 : 85a4             [ 3] 	sta df_tmpptrb+1
                             	; start pos
f449 : a4a5             [ 3] 	ldy df_tmpptrc
f44b : a200             [ 2] 	ldx #0
f44d :                       df_rt_str_cpy_ch
f44d : c4a7             [ 3] 	cpy df_tmpptrd
f44f : f011             [ 3] 	beq df_str_src_end
f451 : b1a1             [ 5] 	lda (df_tmpptra),y
f453 : f00d             [ 3] 	beq df_str_src_end
f455 : 81a3             [ 6] 	sta (df_tmpptrb,x)
                             	_incZPWord df_tmpptrb
                             
f45d : c8               [ 2] 	iny
f45e : d0ed             [ 3] 	bne df_rt_str_cpy_ch
                             	SWBRK DFERR_STRLONG
                             
f462 :                       df_str_src_end
f462 : a900             [ 2] 	lda #0
f464 : 81a3             [ 6] 	sta (df_tmpptrb,x)
f466 : a67a             [ 3] 	ldx df_sevalptr
f468 : a57b             [ 3] 	lda df_sevalptr+1
f46a : 4c3ff7           [ 3] 	jmp df_ost_pushStr
                             
                             ; $c = chr(x)
f46d :                       df_rt_chr
f46d : e688             [ 5] 	inc df_exeoff
                             	; get char in X
f46f : 208ae0           [ 6] 	jsr df_rt_getnval
f472 : a000             [ 2] 	ldy #0
                             	; transfer lo byte to A
f474 : 8a               [ 2] 	txa
AS65 Assembler for R6502 [1.42].                                     Page  243
---------------------------------- bank0.s -----------------------------------

f475 : 917a             [ 5] 	sta (df_sevalptr),y
f477 : c8               [ 2] 	iny
                             	; zero terminator
f478 : a900             [ 2] 	lda #0
f47a : 917a             [ 5] 	sta (df_sevalptr),y
                             	; point to seval scratch area
f47c : a67a             [ 3] 	ldx df_sevalptr
f47e : a57b             [ 3] 	lda df_sevalptr+1
f480 : 4c3ff7           [ 3] 	jmp df_ost_pushStr
                             
                             ; $c = hex(x)
f483 :                       df_rt_hex
f483 : e688             [ 5] 	inc df_exeoff
                             	; create hex digits
f485 : 208ae0           [ 6] 	jsr df_rt_getnval
f488 : 85a1             [ 3] 	sta df_tmpptra	; Save the high byte
f48a : 8a               [ 2] 	txa				; Convert low byte first
f48b : 2089c1           [ 6] 	jsr str_a_to_x	; Hex digits in A,X
f48e : 85a3             [ 3] 	sta df_tmpptrb
f490 : 8a               [ 2] 	txa				; Push low digit of low byte from X
f491 : 48               [ 3] 	pha
f492 : a5a3             [ 3] 	lda df_tmpptrb	; Get A back from temp
f494 : 48               [ 3] 	pha				; Push high digit of low byte
f495 : a5a1             [ 3] 	lda df_tmpptra	; Get the high byte
f497 : 2089c1           [ 6] 	jsr str_a_to_x	; Hex digits in A,X
                             	; create string
f49a : a000             [ 2] 	ldy #0			; Index in to string temp area
                             	; hi/hi
f49c : 917a             [ 5] 	sta (df_sevalptr),y
f49e : c8               [ 2] 	iny
                             	; hi/lo
f49f : 8a               [ 2] 	txa
f4a0 : 917a             [ 5] 	sta (df_sevalptr),y
f4a2 : c8               [ 2] 	iny
                             	; lo/hi
f4a3 : 68               [ 4] 	pla
f4a4 : 917a             [ 5] 	sta (df_sevalptr),y
f4a6 : c8               [ 2] 	iny
                             	; lo/lo
f4a7 : 68               [ 4] 	pla
f4a8 : 917a             [ 5] 	sta (df_sevalptr),y
f4aa : c8               [ 2] 	iny
                             	; zero terminator
f4ab : a900             [ 2] 	lda #0
f4ad : 917a             [ 5] 	sta (df_sevalptr),y
                             	; point to seval scratch area
f4af : a67a             [ 3] 	ldx df_sevalptr
f4b1 : a57b             [ 3] 	lda df_sevalptr+1
f4b3 : 4c3ff7           [ 3] 	jmp df_ost_pushStr
                             
                             ; $l = left($s, x)
f4b6 :                       df_rt_left
f4b6 : e688             [ 5] 	inc df_exeoff
                             
                             	; first get the string to act on
                             	; point to string accumulator
f4b8 : 204ae1           [ 6] 	jsr df_rt_seval
                             	; now get the num of chars
f4bb : e688             [ 5] 	inc df_exeoff
f4bd : 208ae0           [ 6] 	jsr df_rt_getnval
                             	; number of chars to extract
f4c0 : 86a7             [ 3] 	stx df_tmpptrd
AS65 Assembler for R6502 [1.42].                                     Page  244
---------------------------------- bank0.s -----------------------------------

                             	; start position
f4c2 : a000             [ 2] 	ldy #0
f4c4 : 84a5             [ 3] 	sty df_tmpptrc
f4c6 : 4c3af4           [ 3] 	jmp df_rt_str_extract
                             
                             ; $r = right($s, x)
f4c9 :                       df_rt_right
f4c9 : e688             [ 5] 	inc df_exeoff
                             	; first get the string to act on
                             	; point to string accumulator
f4cb : 204ae1           [ 6] 	jsr df_rt_seval
                             	; now get the num of chars from the right
f4ce : e688             [ 5] 	inc df_exeoff
f4d0 : 208ae0           [ 6] 	jsr df_rt_getnval
                             	; number of chars to extract from the right
f4d3 : 86a5             [ 3] 	stx df_tmpptrc
                             	; end pos = len
f4d5 : a67a             [ 3] 	ldx df_sevalptr
f4d7 : a57b             [ 3] 	lda df_sevalptr+1
f4d9 : 202df4           [ 6] 	jsr df_rt_strlen_common
f4dc : 85a7             [ 3] 	sta df_tmpptrd
                             	; subtract num chars to extract to get start pos
f4de : 38               [ 2] 	sec
f4df : e5a5             [ 3] 	sbc df_tmpptrc
f4e1 : 85a5             [ 3] 	sta df_tmpptrc
f4e3 : 4c3af4           [ 3] 	jmp df_rt_str_extract
                             
                             ; $m = mid($s, x, y)
f4e6 :                       df_rt_mid
f4e6 : e688             [ 5] 	inc df_exeoff
                             	; first get the string to act on
                             	; point to string accumulator
f4e8 : 204ae1           [ 6] 	jsr df_rt_seval
                             	; now get start of string segment
f4eb : e688             [ 5] 	inc df_exeoff
f4ed : 2090e0           [ 6] 	jsr df_rt_neval
                             	; number of chars to extract
f4f0 : e688             [ 5] 	inc df_exeoff
f4f2 : 208ae0           [ 6] 	jsr df_rt_getnval
f4f5 : 86a7             [ 3] 	stx df_tmpptrd
                             	; start position
f4f7 : 2068f7           [ 6] 	jsr df_ost_popInt
f4fa : ca               [ 2] 	dex					; zero offset rather than 1
f4fb : 86a5             [ 3] 	stx df_tmpptrc
                             	; update end pos by adding start pos
f4fd : 8a               [ 2] 	txa
f4fe : 18               [ 2] 	clc
f4ff : 65a7             [ 3] 	adc df_tmpptrd
f501 : 85a7             [ 3] 	sta df_tmpptrd
f503 : 4c3af4           [ 3] 	jmp df_rt_str_extract
                             
                             ; %l = len($s)
f506 :                       df_rt_len
f506 : e688             [ 5] 	inc df_exeoff
                             	; evaluate the string in the string accumulator
f508 : 204ae1           [ 6] 	jsr df_rt_seval
f50b : 206cf7           [ 6] 	jsr df_ost_popStr
                             	; now calculate the length of this string
f50e : 202df4           [ 6] 	jsr df_rt_strlen_common
f511 : 4c38f7           [ 3] 	jmp df_ost_pushIntA
                             
                             ; %l = asc($s)
AS65 Assembler for R6502 [1.42].                                     Page  245
---------------------------------- bank0.s -----------------------------------

f514 :                       df_rt_asc
f514 : e688             [ 5] 	inc df_exeoff
                             	; Evaluate string in the string accumulator
f516 : 204ae1           [ 6] 	jsr df_rt_seval
f519 : 206cf7           [ 6] 	jsr df_ost_popStr
                             	; Store point in ZP
f51c : 86a1             [ 3] 	stx df_tmpptra
f51e : 85a2             [ 3] 	sta df_tmpptra+1
                             	; Find the character at beginning
f520 : a200             [ 2] 	ldx #0
f522 : a1a1             [ 6] 	lda (df_tmpptra,x)
f524 : 4c38f7           [ 3] 	jmp df_ost_pushIntA
                             
                             ; %l = val($s)
f527 :                       df_rt_val
f527 : e688             [ 5] 	inc df_exeoff
                             	; evaluate the string
f529 : 204ae1           [ 6] 	jsr df_rt_seval
f52c : 206cf7           [ 6] 	jsr df_ost_popStr
f52f : a000             [ 2] 	ldy #0				; any numeric format
f531 : 20d4c1           [ 6] 	jsr con_n_to_a		; result in num_a
f534 : b007             [ 3] 	bcs df_rt_val_err
f536 : a63d             [ 3] 	ldx num_a
f538 : a53e             [ 3] 	lda num_a+1
                             	; Save as an int
f53a : 4c34f7           [ 3] 	jmp df_ost_pushInt
f53d :                       df_rt_val_err
                             	SWBRK DFERR_TYPEMISM
                             
                             
                             ; stop execution
f53f :                       df_rt_abort
                             	SWBRK DFERR_ABORT
                             
                             
f541 :                       df_rt_sprchar
f541 : 2068e3           [ 6] 	jsr df_rt_parm_2ints
f544 : a5a1             [ 3] 	lda df_tmpptra
f546 : a6a3             [ 3] 	ldx df_tmpptrb
f548 : 4c9fd2           [ 3] 	jmp gr_spr_char
                             
f54b :                       df_rt_sprpos
f54b : 207fe3           [ 6] 	jsr df_rt_parm_3ints
f54e : a5a1             [ 3] 	lda df_tmpptra
f550 : a6a3             [ 3] 	ldx df_tmpptrb
f552 : a4a5             [ 3] 	ldy df_tmpptrc
f554 : 4cafd2           [ 3] 	jmp gr_spr_pos
                             
f557 :                       df_rt_sprupd
f557 : 2034d2           [ 6] 	jsr gr_spr_erase
f55a : 2047d2           [ 6] 	jsr gr_spr_new
f55d : 4c7bd2           [ 3] 	jmp gr_spr_draw
                             
f560 :                       df_rt_sprinit
f560 : 4c26d2           [ 3] 	jmp gr_spr_init
                             
f563 :                       df_rt_sprmulti
f563 : 2068e3           [ 6] 	jsr df_rt_parm_2ints
f566 : 4cbcd2           [ 3] 	jmp gr_spr_multi_pos
                             
f569 :                       df_rt_sprhit
f569 : e688             [ 5] 	inc df_exeoff
AS65 Assembler for R6502 [1.42].                                     Page  246
---------------------------------- bank0.s -----------------------------------

f56b : 208ae0           [ 6] 	jsr df_rt_getnval
f56e : 8a               [ 2] 	txa
f56f : 20a5d2           [ 6] 	jsr gr_spr_hit
f572 : b003             [ 3] 	bcs df_rt_sprhit_inactive
                             	; Active sprite hit = background
f574 : 4c38f7           [ 3] 	jmp df_ost_pushIntA
f577 :                       df_rt_sprhit_inactive
                             	; Inactive sprite hit = -1
f577 : a2ff             [ 2] 	ldx #0xff
f579 : 8a               [ 2] 	txa
f57a : 4c34f7           [ 3] 	jmp df_ost_pushInt
                             
                             
f57d :                       mod_sz_rtsubs_e
                             
                             
                             	include "dflat/proc.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  PROC.S
                             ;*  dflat module to handle procedures:
                             ;*  - executing a procedure
                             ;*  - find a proc, pass local and non-local param
                             ;*  - return from a proc, unload locals
                             ;*  - save the definition of a proc in the VNT an
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code  
                             
f57d :                       mod_sz_proc_s
                             
f57d :                       df_rt_proc_parmerr
                             	SWBRK DFERR_PROCPARM
                             
                             
                             ; call procedure
f57f :                       df_rt_proc
                             	; move past escape token
f57f : a488             [ 3] 	ldy df_exeoff
f581 : c8               [ 2] 	iny
                             	; Get VVT address X,A and procptr
f582 : b186             [ 5] 	lda (df_currlin),y
f584 : aa               [ 2] 	tax
f585 : c8               [ 2] 	iny
f586 : b186             [ 5] 	lda (df_currlin),y
f588 : c8               [ 2] 	iny
f589 : 8488             [ 3] 	sty df_exeoff
f58b : 868e             [ 3] 	stx df_procptr
f58d : 858f             [ 3] 	sta df_procptr+1
                             	
                             	; is index 0 (held in dim1)
                             	; then need to find the procedure
f58f : a003             [ 2] 	ldy #DFVVT_DIM1
f591 : b18e             [ 5] 	lda (df_procptr),y
AS65 Assembler for R6502 [1.42].                                     Page  247
---------------------------------- bank0.s -----------------------------------

f593 : d014             [ 3] 	bne df_rt_proc_addr
                             	; find proc
f595 : 20fbe4           [ 6] 	jsr df_rt_findproc
                             	; save y (line index)
f598 : 8438             [ 3] 	sty tmp_d
                             	; now go and update the proc vvt address
f59a : a002             [ 2] 	ldy #DFVVT_HI
f59c : 918e             [ 5] 	sta (df_procptr),y
f59e : a001             [ 2] 	ldy #DFVVT_LO
f5a0 : 8a               [ 2] 	txa
f5a1 : 918e             [ 5] 	sta (df_procptr),y
f5a3 : a003             [ 2] 	ldy #DFVVT_DIM1
                             	; get back line index in to A
f5a5 : a538             [ 3] 	lda tmp_d
f5a7 : 918e             [ 5] 	sta (df_procptr),y
f5a9 :                       df_rt_proc_addr
                             	; move past first open bracket
f5a9 : e688             [ 5] 	inc df_exeoff
                             	
                             	; get parm count
f5ab : a004             [ 2] 	ldy #DFVVT_DIM2
f5ad : b18e             [ 5] 	lda (df_procptr),y	
f5af : f018             [ 3] 	beq df_rt_proc_parm_none
                             	; push the right number of parms on
f5b1 : 48               [ 3] 	pha
                             
f5b2 : c688             [ 5] 	dec df_exeoff		; Pre-adjust
f5b4 :                       df_rt_proc_push_parm
                             	; move past comma or opening bracket
f5b4 : e688             [ 5] 	inc df_exeoff
                             	; if at end then error!
f5b6 : a488             [ 3] 	ldy df_exeoff
f5b8 : b186             [ 5] 	lda (df_currlin),y
f5ba : c929             [ 2] 	cmp #')'
f5bc : f0bf             [ 3] 	beq df_rt_proc_parmerr
                             	; else try and evaluate
f5be : 2090e0           [ 6] 	jsr df_rt_neval
                             	; get parm count off stack
f5c1 : 68               [ 4] 	pla
                             	; decrement
f5c2 : 38               [ 2] 	sec
f5c3 : e901             [ 2] 	sbc #1
                             	; and put back on stack
f5c5 : 48               [ 3] 	pha
                             	; go back and do all required parms
f5c6 : d0ec             [ 3] 	bne df_rt_proc_push_parm
                             	; remove parm counter from stack
f5c8 :                       df_rt_proc_parm_done
f5c8 : 68               [ 4] 	pla
f5c9 :                       df_rt_proc_parm_none
                             	; should be at close bracket
f5c9 : a488             [ 3] 	ldy df_exeoff
f5cb : b186             [ 5] 	lda (df_currlin),y
f5cd : c929             [ 2] 	cmp #')'
f5cf : d0ac             [ 3] 	bne df_rt_proc_parmerr
                             	; should be no more parms
                             	; ok, finally we have all parms on rt stack
                             	; now execute the procedure
                             	; get back the proc address
f5d1 : a68e             [ 3] 	ldx df_procptr
f5d3 : a58f             [ 3] 	lda df_procptr+1
f5d5 : d000             [ 3] 	bne df_rt_exec_proc		; ALWAYS as procptr+1 !=0
AS65 Assembler for R6502 [1.42].                                     Page  248
---------------------------------- bank0.s -----------------------------------

                             	
                             ; executing a procedure in VVT slot A,X
f5d7 :                       df_rt_exec_proc
                             	; save slot address
f5d7 : 86a1             [ 3] 	stx df_tmpptra
f5d9 : 85a2             [ 3] 	sta df_tmpptra+1
                             	
                             	; need to save all important vars
f5db : a586             [ 3] 	lda df_currlin
f5dd : 48               [ 3] 	pha
f5de : a587             [ 3] 	lda df_currlin+1
f5e0 : 48               [ 3] 	pha
f5e1 : a588             [ 3] 	lda df_exeoff
f5e3 : 48               [ 3] 	pha
f5e4 : a57f             [ 3] 	lda df_nxtstidx
f5e6 : 48               [ 3] 	pha
f5e7 : a580             [ 3] 	lda df_curstidx
f5e9 : 48               [ 3] 	pha
f5ea : a57e             [ 3] 	lda df_eolidx
f5ec : 48               [ 3] 	pha
f5ed : a593             [ 3] 	lda df_ifnest
f5ef : 48               [ 3] 	pha
                             
                             	; now initialise the data
f5f0 : a001             [ 2] 	ldy #DFVVT_LO
f5f2 : b1a1             [ 5] 	lda (df_tmpptra),y
f5f4 : 8586             [ 3] 	sta df_currlin
f5f6 : c8               [ 2] 	iny
f5f7 : b1a1             [ 5] 	lda (df_tmpptra),y
f5f9 : 8587             [ 3] 	sta df_currlin+1
f5fb : c8               [ 2] 	iny
f5fc : b1a1             [ 5] 	lda (df_tmpptra),y
f5fe : 8588             [ 3] 	sta df_exeoff
f600 : 8580             [ 3] 	sta df_curstidx
f602 : a000             [ 2] 	ldy #0
f604 : b186             [ 5] 	lda (df_currlin),y
f606 : 857f             [ 3] 	sta df_nxtstidx
                             	; now execute statements
f608 : 2021e4           [ 6] 	jsr df_rt_exec_stat
                             ;	bcs df_rt_exec_proc_err
                             	; now restore the position
f60b : 68               [ 4] 	pla
f60c : 8593             [ 3] 	sta df_ifnest
f60e : 68               [ 4] 	pla
f60f : 857e             [ 3] 	sta df_eolidx
f611 : 68               [ 4] 	pla
f612 : 8580             [ 3] 	sta df_curstidx
f614 : 68               [ 4] 	pla
f615 : 857f             [ 3] 	sta df_nxtstidx
f617 : 68               [ 4] 	pla
f618 : 8588             [ 3] 	sta df_exeoff
f61a : 68               [ 4] 	pla
f61b : 8587             [ 3] 	sta df_currlin+1
f61d : 68               [ 4] 	pla
f61e : 8586             [ 3] 	sta df_currlin
                             	; should be all restored, so return
f620 : 60               [ 6] 	rts
                             
                             
f621 :                       df_rt_def
                             	; line offset pointing at DFTK_PROC
                             	; skip over PROC address and open bracket
AS65 Assembler for R6502 [1.42].                                     Page  249
---------------------------------- bank0.s -----------------------------------

f621 : e688             [ 5] 	inc df_exeoff
f623 : e688             [ 5] 	inc df_exeoff
f625 : e688             [ 5] 	inc df_exeoff
                             	; parms on stack in reverse order to parm list
                             	; so get each parm and type and save to scratch
f627 : a201             [ 2] 	ldx #1									; index in to scratch
f629 : 868c             [ 3] 	stx df_procargs							; Proc args is the #args-1
f62b : a488             [ 3] 	ldy df_exeoff
f62d :                       df_rt_def_find_var
f62d : c8               [ 2] 	iny
f62e : b186             [ 5] 	lda (df_currlin),y
                             	; check if end of parm list
f630 : c929             [ 2] 	cmp #')'
f632 : f023             [ 3] 	beq df_rt_def_parm_done
                             	; else check if found a variable escape token (<
f634 : c911             [ 2] 	cmp #DFTK_VAR
f636 : f009             [ 3] 	beq df_rt_def_got_var
                             	; else check if non-local specifier
f638 : c926             [ 2] 	cmp #DFTK_VARPARM						; This is a regular ASCII
f63a : f002             [ 3] 	beq df_rt_def_got_varparm
f63c : d0ef             [ 3] 	bne df_rt_def_find_var
f63e :                       df_rt_def_got_varparm
                             	; set high bit
f63e : 0980             [ 2] 	ora #0x80
                             	; advance over non-local specifier
f640 : c8               [ 2] 	iny
f641 :                       df_rt_def_got_var
f641 : 4980             [ 2] 	eor #0x80			; If was set by '&' qualifier then w
f643 : 9d1306           [ 5] 	sta scratch,x		; Save parm type (by value or ref
                             	; get address and save in scratch
f646 : c8               [ 2] 	iny
f647 : b186             [ 5] 	lda (df_currlin),y
f649 : 9d3306           [ 5] 	sta scratch+32,x	; Hope 32 params is enough! :-)
f64c : c8               [ 2] 	iny
f64d : b186             [ 5] 	lda (df_currlin),y
f64f : 9d5306           [ 5] 	sta scratch+64,x
f652 : e8               [ 2] 	inx
f653 : e68c             [ 5] 	inc df_procargs
f655 : d0d6             [ 3] 	bne df_rt_def_find_var  ; always - relies not ze
f657 :                       df_rt_def_parm_done
                             	; save index that we got to
f657 : 8488             [ 3] 	sty df_exeoff
                             	; save def param list position in temp
f659 : 868b             [ 3] 	stx df_procmode
                             	; all var indices on the operator stack
                             	; now load up variables with parameters
                             	; initially assume no locals
f65b : a900             [ 2] 	lda #0
f65d : 858d             [ 3] 	sta df_procloc
f65f :                       df_rt_def_load_var
f65f : c68c             [ 5] 	dec df_procargs
f661 : f039             [ 3] 	beq df_rt_def_load_var_done
                             	; get var address
f663 : a68b             [ 3] 	ldx df_procmode
f665 : ca               [ 2] 	dex
f666 : bd3306           [ 4] 	lda scratch+32,x
f669 : 85a1             [ 3] 	sta df_tmpptra
f66b : bd5306           [ 4] 	lda scratch+64,x
f66e : 85a2             [ 3] 	sta df_tmpptra+1
f670 : 868b             [ 3] 	stx df_procmode
                             	
f672 : bd1306           [ 4] 	lda scratch,x
AS65 Assembler for R6502 [1.42].                                     Page  250
---------------------------------- bank0.s -----------------------------------

                             	; if MSB is clear then this is not a local varia
                             	; so just go an initialise with stacking
f675 : 1009             [ 3] 	bpl df_rt_def_initialise_parm
                             	; else call the local handling code to 
                             	; push the var address on to the runtime stack
f677 : a6a1             [ 3] 	ldx df_tmpptra
f679 : a5a2             [ 3] 	lda df_tmpptra+1
f67b : 20d6f6           [ 6] 	jsr df_rt_proc_local
                             	; increment number of locals
f67e : e68d             [ 5] 	inc df_procloc
f680 :                       df_rt_def_initialise_parm
                             	; load type
f680 : a000             [ 2] 	ldy #DFVVT_TYPE
f682 : b1a1             [ 5] 	lda (df_tmpptra),y
                             	; if array or string type then pop pointer from 
f684 : 2984             [ 2] 	and #DFVVT_STR|DFVVT_ARRY
f686 : f006             [ 3] 	beq df_rt_def_load_var_int
f688 : 2070f7           [ 6] 	jsr df_ost_popPtr
f68b : 4c91f6           [ 3] 	jmp df_rt_def_load_var_int_skip
f68e :                       df_rt_def_load_var_int
                             	; must be int pop it from operator stack
f68e : 2068f7           [ 6] 	jsr df_ost_popInt
f691 :                       df_rt_def_load_var_int_skip
                             	; update the variable
f691 : a002             [ 2] 	ldy #DFVVT_HI
f693 : 91a1             [ 5] 	sta (df_tmpptra),y
f695 : 88               [ 2] 	dey
f696 : 8a               [ 2] 	txa
f697 : 91a1             [ 5] 	sta (df_tmpptra),y
                             	
f699 : 4c5ff6           [ 3] 	jmp df_rt_def_load_var
f69c :                       df_rt_def_load_var_done
                             	; save the number of local parameters found so t
                             	; be unloaded when the proc ends
f69c : a58d             [ 3] 	lda df_procloc
f69e : 20eaf6           [ 6] 	jsr df_rst_pushByte
                             	; continue with next statement
f6a1 : 18               [ 2] 	clc
f6a2 : 60               [ 6] 	rts
                             
                             	
                             ; end def for a proc
f6a3 :                       df_rt_enddef
                             	; unload any locals
f6a3 : 20aff6           [ 6] 	jsr df_rt_proc_unlocal
                             	; nothing to do - main loop will terminate
f6a6 : 18               [ 2] 	clc
f6a7 : 60               [ 6] 	rts
                             	
                             ; return a value
f6a8 :                       df_rt_return
                             	; evaluate the return and put on the parameter s
f6a8 : 2090e0           [ 6] 	jsr df_rt_neval
                             	; process this like an end of procedure
f6ab : 20a3f6           [ 6] 	jsr df_rt_enddef
f6ae : 60               [ 6] 	rts
                             	
                             	
                             ; unload any local variables from runtime stack
f6af :                       df_rt_proc_unlocal
f6af : 20f3f6           [ 6] 	jsr df_rst_popByte
f6b2 : aa               [ 2] 	tax
AS65 Assembler for R6502 [1.42].                                     Page  251
---------------------------------- bank0.s -----------------------------------

f6b3 : f020             [ 3] 	beq df_rt_proc_unload_done
f6b5 :                       df_rt_proc_unloadvar
f6b5 : 8a               [ 2] 	txa
f6b6 : 48               [ 3] 	pha
                             	; var value is popped first then index
                             	; get a word and put in tmpb
f6b7 : 2010f7           [ 6] 	jsr df_rst_popWord
f6ba : 86a3             [ 3] 	stx df_tmpptrb
f6bc : 85a4             [ 3] 	sta df_tmpptrb+1
                             	; get the var address
f6be : 2010f7           [ 6] 	jsr df_rst_popWord
f6c1 : 86a1             [ 3] 	stx df_tmpptra
f6c3 : 85a2             [ 3] 	sta df_tmpptra+1
                             	; store lo byte first
f6c5 : a001             [ 2] 	ldy #DFVVT_LO
f6c7 : a5a3             [ 3] 	lda df_tmpptrb
f6c9 : 91a1             [ 5] 	sta (df_tmpptra),y
                             	; then hi
f6cb : c8               [ 2] 	iny
f6cc : a5a4             [ 3] 	lda df_tmpptrb+1
f6ce : 91a1             [ 5] 	sta (df_tmpptra),y
                             	; restore counter
f6d0 : 68               [ 4] 	pla
f6d1 : aa               [ 2] 	tax
f6d2 : ca               [ 2] 	dex
f6d3 : d0e0             [ 3] 	bne df_rt_proc_unloadvar
f6d5 :                       df_rt_proc_unload_done
f6d5 : 60               [ 6] 	rts
                             	
                             ; push a local variable to the runtime stack
                             ; X,A = var slot
f6d6 :                       df_rt_proc_local
                             	; save address
f6d6 : 86a1             [ 3] 	stx df_tmpptra
f6d8 : 85a2             [ 3] 	sta df_tmpptra+1
                             	; push var slot on rt stack
f6da : 2002f7           [ 6] 	jsr df_rst_pushWord
f6dd :                       df_rt_proc_local_load	
                             	; load x,a with var value lo,hi
f6dd : a001             [ 2] 	ldy #DFVVT_LO
f6df : b1a1             [ 5] 	lda (df_tmpptra),y
f6e1 : aa               [ 2] 	tax
f6e2 : c8               [ 2] 	iny
f6e3 : b1a1             [ 5] 	lda (df_tmpptra),y
                             	; push word on to rt stack
f6e5 : 2002f7           [ 6] 	jsr df_rst_pushWord
f6e8 : 18               [ 2] 	clc
f6e9 : 60               [ 6] 	rts
                             		
f6ea :                       mod_sz_proc_e
                             
                             
f6ea :                       mod_sz_runtime_e
                             
                             
                             
                             	include "dflat/stack.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
AS65 Assembler for R6502 [1.42].                                     Page  252
---------------------------------- bank0.s -----------------------------------

                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  STACK.S
                             ;*  This module implements the dflat software sta
                             ;*  needs a few stacks:
                             ;*  - 6502 stack for expression parsing and reent
                             ;*  - dflat runtime stack for things like for/nex
                             ;*  - dflat parameter stack for passing parameter
                             ;*  The two software stacks are implemented in th
                             ;*  with the runtime stack growing up from 0 and 
                             ;*  operator stack growing down from 255.  Hopefu
                             ;*  don't meet as there are no checks for this at
                             ;*  purely because I want speed over friendliness
                             ;*  I may come to regret this.
                             ;*  I have also added the only runtime memory all
                             ;*  needed by dflat here.  Humourously I have cal
                             ;*  which is taken from the C language, but it on
                             ;*  grab some memory after the of dflat program c
                             ;*  arrays - which of course cannot have storage 
                             ;*  tokenisation time (e.g. because I dimension a
                             ;*  a size from a variable).
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code  
                             
                             
                             ;****************************************
                             ;* Push a byte on to runtime stack
                             ;* A = byte
                             ;****************************************
f6ea :                       df_rst_pushByte
f6ea : a476             [ 3] 	ldy df_rtstop
f6ec : 990005           [ 5] 	sta df_rtstck,y
f6ef : 88               [ 2] 	dey
f6f0 : 8476             [ 3] 	sty df_rtstop
f6f2 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Pop a byte off runtime stack
                             ;* A = byte
                             ;****************************************
f6f3 :                       df_rst_popByte
f6f3 : a476             [ 3] 	ldy df_rtstop
f6f5 : c8               [ 2] 	iny
f6f6 : b90005           [ 4] 	lda df_rtstck,y
f6f9 : 8476             [ 3] 	sty df_rtstop
f6fb : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Peek a byte off runtime stack
                             ;* A = byte
                             ;****************************************
f6fc :                       df_rst_peekByte
f6fc : a476             [ 3] 	ldy df_rtstop
                             	; Look at what is below top of stack
                             	; below means the next address up as
                             	; this stack grows downwards like 6502
f6fe : b90105           [ 4] 	lda df_rtstck+1,y
f701 : 60               [ 6] 	rts
AS65 Assembler for R6502 [1.42].                                     Page  253
---------------------------------- bank0.s -----------------------------------

                             	
                             ;****************************************
                             ;* Push a word on to runtime stack
                             ;* X,A = word lo,hi
                             ;****************************************
f702 :                       df_rst_pushWord
f702 : a476             [ 3] 	ldy df_rtstop
f704 : 990005           [ 5] 	sta df_rtstck,y
f707 : 88               [ 2] 	dey
f708 : 8a               [ 2] 	txa
f709 : 990005           [ 5] 	sta df_rtstck,y
f70c : 88               [ 2] 	dey
f70d : 8476             [ 3] 	sty df_rtstop
f70f : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Pop a word off runtime stack
                             ;* X,A = word lo,hi
                             ;****************************************
f710 :                       df_rst_popWord
f710 : a476             [ 3] 	ldy df_rtstop
f712 : c8               [ 2] 	iny
f713 : b90005           [ 4] 	lda df_rtstck,y
f716 : aa               [ 2] 	tax
f717 : c8               [ 2] 	iny
f718 : b90005           [ 4] 	lda df_rtstck,y
f71b : 8476             [ 3] 	sty df_rtstop
f71d : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Push a parameter on to parm stack
                             ;* X,A - int
                             ;* Y - type
                             ;****************************************
f71e :                       df_ost_pushParmX
f71e : 8438             [ 3] 	sty tmp_d		; Save Type
f720 : a477             [ 3] 	ldy df_parmtop	; Get stack index
                             	; push high byte first (A)
f722 : 990005           [ 5] 	sta df_rtstck,y
f725 : c8               [ 2] 	iny
                             	; push low byte next (X)
f726 : 8a               [ 2] 	txa
f727 : 990005           [ 5] 	sta df_rtstck,y
f72a : c8               [ 2] 	iny
f72b : a538             [ 3] 	lda tmp_d		; get Type
f72d : 990005           [ 5] 	sta df_rtstck,y
f730 : c8               [ 2] 	iny
                             	; save new top of stack
f731 : 8477             [ 3] 	sty df_parmtop
f733 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Push an int on to parm stack
                             ;* X,A - int
                             ;****************************************
f734 :                       df_ost_pushInt
f734 : a001             [ 2] 	ldy #DFST_INT
f736 : d0e6             [ 3] 	bne df_ost_pushParmX		; ALWAYS!
                             
                             ;****************************************
                             ;* Push A on to parm stack
                             ;* X,A - int
AS65 Assembler for R6502 [1.42].                                     Page  254
---------------------------------- bank0.s -----------------------------------

                             ;****************************************
f738 :                       df_ost_pushIntA
f738 : a001             [ 2] 	ldy #DFST_INT
f73a : aa               [ 2] 	tax
f73b : a900             [ 2] 	lda #0
f73d : f0df             [ 3] 	beq df_ost_pushParmX		; ALWAYS!
                             
                             ;****************************************
                             ;* Push a string pointer on to parm stack
                             ;* X,A - int
                             ;****************************************
f73f :                       df_ost_pushStr
f73f : a080             [ 2] 	ldy #DFST_STR
f741 : d0db             [ 3] 	bne df_ost_pushParmX		; ALWAYS!
                             
                             ;****************************************
                             ;* Push a general pointer on to parm stack
                             ;* X,A - int
                             ;****************************************
f743 :                       df_ost_pushPtr
f743 : a0ff             [ 2] 	ldy #0xff
f745 : d0d7             [ 3] 	bne df_ost_pushParmX		; ALWAYS!
                             	
                             ;****************************************
                             ;* Pop parameter from the stack
                             ;* X,A - int
                             ;* Y - type expected
                             ;****************************************
f747 :                       df_ost_popParmX
f747 : 8438             [ 3] 	sty tmp_d
f749 : a477             [ 3] 	ldy df_parmtop
                             	; pull type first
f74b : a538             [ 3] 	lda tmp_d
f74d : 88               [ 2] 	dey
f74e : 390005           [ 4] 	and df_rtstck,y
f751 : f00d             [ 3] 	beq df_st_typemismatcherr
                             	; pull low byte first
f753 : 88               [ 2] 	dey
f754 : b90005           [ 4] 	lda df_rtstck,y
f757 : aa               [ 2] 	tax
                             	; pull high byte next
f758 : 88               [ 2] 	dey
f759 : b90005           [ 4] 	lda df_rtstck,y
                             	; save new top of stack
f75c : 8477             [ 3] 	sty df_parmtop
f75e : 18               [ 2] 	clc
f75f : 60               [ 6] 	rts
f760 :                       df_st_typemismatcherr
                             	SWBRK DFERR_TYPEMISM
                             
                             
                             ;****************************************
                             ;* Return type on top of stack
                             ;* Y - type
                             ;****************************************
f762 :                       df_ost_peekType
f762 : a477             [ 3] 	ldy df_parmtop
f764 : b9ff04           [ 4] 	lda df_rtstck-1,y
                             ;	tay NO LONGER NEEDED - EVERYWHERE USES A
f767 : 60               [ 6] 	rts
                             
                             ;****************************************
AS65 Assembler for R6502 [1.42].                                     Page  255
---------------------------------- bank0.s -----------------------------------

                             ;* Pop an int off parm stack
                             ;* X,A - int
                             ;****************************************
f768 :                       df_ost_popInt
f768 : a001             [ 2] 	ldy #DFST_INT
f76a : d0db             [ 3] 	bne df_ost_popParmX			; ALWAYS!
                             
                             ;****************************************
                             ;* Pop a string pointer off parm stack
                             ;* X,A - int
                             ;****************************************
f76c :                       df_ost_popStr
f76c : a080             [ 2] 	ldy #DFST_STR
f76e : d0d7             [ 3] 	bne df_ost_popParmX			; ALWAYS!
                             	
                             ;****************************************
                             ;* Pop a general pointer off parm stack
                             ;* X,A - int
                             ;****************************************
f770 :                       df_ost_popPtr
f770 : a0ff             [ 2] 	ldy #0xff
f772 : d0d3             [ 3] 	bne df_ost_popParmX			; ALWAYS!
                             	
                             	
                             ;****************************************
                             ;* Allocate space on the heap
                             ;* X, A = Number of bytes to allocate
                             ;* X, A return address of allocated space
                             ;****************************************
f774 :                       df_st_malloc
                             	; save A in Y
f774 : a8               [ 2] 	tay
                             	; save old starend
f775 : a575             [ 3] 	lda df_starend+1
f777 : 48               [ 3] 	pha
f778 : a574             [ 3] 	lda df_starend
f77a : 48               [ 3] 	pha
                             	; restore A from Y
f77b : 98               [ 2] 	tya
                             	; add X,A to starend
f77c : 48               [ 3] 	pha
f77d : 8a               [ 2] 	txa
f77e : 18               [ 2] 	clc
f77f : 6574             [ 3] 	adc df_starend
f781 : 8574             [ 3] 	sta df_starend
f783 : 68               [ 4] 	pla
f784 : 6575             [ 3] 	adc df_starend+1
f786 : 8575             [ 3] 	sta df_starend+1
                             	; return old starend as start of space
f788 : 68               [ 4] 	pla
f789 : aa               [ 2] 	tax
f78a : 68               [ 4] 	pla
f78b : 60               [ 6] 	rts
                             	
                             
                             ;****************************************
                             ;* df_init
                             ;* Initialise dflat language settings
                             ;****************************************
f78c :                       df_init
                             	; Initialise top of memory to default
                             	; This can be overridden by himem command
AS65 Assembler for R6502 [1.42].                                     Page  256
---------------------------------- bank0.s -----------------------------------

f78c : a900             [ 2] 	lda #lo(DF_MEMTOP)
f78e : 8d1106           [ 4] 	sta df_memtop
f791 : a998             [ 2] 	lda #hi(DF_MEMTOP)
f793 : 8d1206           [ 4] 	sta df_memtop+1
                             
                             	; Init program space
f796 : 209af7           [ 6] 	jsr df_clear
                             
                             	; Initialise assembler
                             ;	jsr asm_init
                             
f799 : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* df_clear
                             ;* Initialise program space
                             ;****************************************
f79a :                       df_clear
                             	; Start of program space
f79a : a913             [ 2] 	lda #lo(DF_PROGSTART)
f79c : 8565             [ 3] 	sta df_prgstrt
f79e : 8567             [ 3] 	sta df_prgend
f7a0 : a907             [ 2] 	lda #hi(DF_PROGSTART)
f7a2 : 8566             [ 3] 	sta df_prgstrt+1
f7a4 : 8568             [ 3] 	sta df_prgend+1
                             	; Terminal value in prog space
f7a6 : a900             [ 2] 	lda #0
f7a8 : a000             [ 2] 	ldy #0
f7aa : 9165             [ 5] 	sta (df_prgstrt),y
                             	; No variables - zero the count
f7ac : 8571             [ 3] 	sta df_varcnt
                             
                             	; Variable value table
                             	; Grows down from mem top
f7ae : ad1106           [ 4] 	lda df_memtop
f7b1 : 856d             [ 3] 	sta df_vvtstrt
f7b3 : 856f             [ 3] 	sta df_vvtend
f7b5 : ad1206           [ 4] 	lda df_memtop+1
f7b8 : 856e             [ 3] 	sta df_vvtstrt+1
f7ba : 8570             [ 3] 	sta df_vvtend+1
                             
                             	; Variable name table
                             	; Grows down from mem top
f7bc : a56d             [ 3] 	lda df_vvtstrt
f7be : 8569             [ 3] 	sta df_vntstrt
f7c0 : 856b             [ 3] 	sta df_vntend
f7c2 : a56e             [ 3] 	lda df_vvtstrt+1
f7c4 : 856a             [ 3] 	sta df_vntstrt+1
f7c6 : 856c             [ 3] 	sta df_vntend+1
                             
                             	; String accumulator
f7c8 : a900             [ 2] 	lda #lo(df_raw)
f7ca : 857a             [ 3] 	sta df_sevalptr
f7cc : a904             [ 2] 	lda #hi(df_raw)
f7ce : 857b             [ 3] 	sta df_sevalptr+1
                             
f7d0 : 60               [ 6] 	rts
                             
f7d1 :                       mod_sz_dflat_e
                             
                             	include "dflat/error.s"
AS65 Assembler for R6502 [1.42].                                     Page  257
---------------------------------- bank0.s -----------------------------------

                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  ERROR.S
                             ;*  Error handling module.
                             ;*  Whan an error is thrown using BRK, this modul
                             ;*  displaying the error plus any associated line
                             ;*  if it was running a program.  It then resets 
                             ;*  settings and takes the system back to program
                             ;*  mode.  The message uses the general IO handle
                             ;*  output must be set to the right place else fo
                             ;*	the error message will be written to tape!
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code
                             	include "dflat/error.i"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  ERROR.I
                             ;*  Error definitions file.
                             ;*  The macro to throw an error is elswhere, but 
                             ;*  It issues a 6502 BRK commmand with the next b
                             ;*  the error code.  The BRK handler then picks u
                             ;*  code and shows the appropriate message plus a
                             ;*  number if a program was running.
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code  
                             
                             ; Error message numbers
0000 =                       DFERR_OK		=	0
0001 =                       DFERR_SYNTAX	=	1
0002 =                       DFERR_TYPEMISM	=	2
0003 =                       DFERR_DIM		=	3
0004 =                       DFERR_UNTIL		=	4
0005 =                       DFERR_NOPROC	=	5
0006 =                       DFERR_PROCPARM	=	6
0007 =                       DFERR_IMMEDIATE	=	7
0008 =                       DFERR_UNCLOSEDIF=	8
0009 =                       DFERR_NOIF		=	9
000a =                       DFERR_NEXTFOR	=	10
000b =                       DFERR_FNAME		=	11
000c =                       DFERR_STRLONG	=	12
000d =                       DFERR_BREAK		=	13
000e =                       DFERR_NODATA	=	14
000f =                       DFERR_WEND		=	15
0010 =                       DFERR_NOLINE	=	16
AS65 Assembler for R6502 [1.42].                                     Page  258
---------------------------------- bank0.s -----------------------------------

0011 =                       DFERR_RETURN	=	17
0012 =                       DFERR_ABORT		=	18
0013 =                       DFERR_QUANTITY	=	19
0014 =                       DFERR_NOORG		=	20
                             
                             
                             
                             
                             
                             ; Error message table, each msg null terminated
f7d1 :                       df_tk_errortab
f7d1 : 4f6b00                	db	"Ok", 0
f7d4 : 53796e74617800        	db	"Syntax", 0
f7db : 5479706500            	db	"Type", 0
f7e0 : 52652d64696d00        	db	"Re-dim", 0
f7e7 : 4e6f2072657065..      	db	"No repeat", 0
f7f1 : 4e6f206465666e00      	db	"No defn", 0
f7f9 : 5061726d00            	db	"Parm", 0
f7fe : 456e64656400          	db	"Ended", 0
f804 : 4e6f20656e6469..      	db	"No endif", 0
f80d : 4e6f20696600          	db	"No if", 0
f813 : 4e6f20666f7200        	db	"No for", 0
f81a : 4e6f7420666f75..      	db	"Not found", 0
f824 : 546f6f206c6f6e..      	db	"Too long", 0
f82d : 427265616b00          	db	"Break", 0
f833 : 4e6f206461746100      	db	"No data", 0
f83b : 4e6f207768696c..      	db	"No while", 0
f844 : 4e6f206c696e6500      	db	"No line", 0
f84c : 4e6f2072657475..      	db	"No return ", 0
f857 : 41626f7274656400      	db	"Aborted", 0
f85f : 426f756e647300        	db	"Bounds", 0
f866 : 4e6f206f726700        	db	"No org", 0
f86d : 00                    	db	0
                             
f86e :                       df_tk_error_inline
f86e : 20696e206c696e..      	db	" in line ", 0
f878 :                       df_tk_error_atpos
f878 : 20706f732000          	db	" pos ", 0
f87e :                       df_tk_error_error
f87e : 206572726f7200        	db	" error", 0
                             
                             ;****************************************
                             ;* df_trap_error
                             ;* Show an error message
                             ;* errno is error number
                             ;* currlin = Line number
                             ;* exeoff = offset
                             ;* at the end jump to program editor
                             ;****************************************
f885 :                       df_trap_error
                             	; reset SP
f885 : a65f             [ 3] 	ldx df_sp
f887 : 9a               [ 2] 	txs
                             	; set IO back to normal
f888 : 201ec5           [ 6] 	jsr init_via0
f88b : 201fc4           [ 6] 	jsr io_set_default
f88e : 58               [ 2] 	cli
                             
f88f : a9d1             [ 2] 	lda #lo(df_tk_errortab)
f891 : 85a1             [ 3] 	sta df_tmpptra
f893 : a9f7             [ 2] 	lda #hi(df_tk_errortab)
f895 : 85a2             [ 3] 	sta df_tmpptra+1
AS65 Assembler for R6502 [1.42].                                     Page  259
---------------------------------- bank0.s -----------------------------------

f897 : a65d             [ 3] 	ldx errno				; 0 or >=128 goes to monitor
f899 : f004             [ 3] 	beq df_trap_go_monitor
f89b : 3002             [ 3] 	bmi df_trap_go_monitor
f89d : 1003             [ 3] 	bpl df_trap_normal
f89f :                       df_trap_go_monitor
f89f : 4c23f9           [ 3] 	jmp df_trap_monitor
f8a2 :                       df_trap_normal
f8a2 : a000             [ 2] 	ldy #0
f8a4 :                       df_show_err_find
f8a4 : e000             [ 2] 	cpx #0
f8a6 : f018             [ 3] 	beq df_show_err_found
                             	; If on a zero, then error table exhausted
                             	; so drop in to the monitor
f8a8 : b1a1             [ 5] 	lda (df_tmpptra),y
f8aa : f077             [ 4] 	beq df_trap_monitor
f8ac :                       df_show_err_skip
                             	_incZPWord df_tmpptra
                             
f8b2 : b1a1             [ 5] 	lda (df_tmpptra),y
f8b4 : d0f6             [ 3] 	bne df_show_err_skip
                             	_incZPWord df_tmpptra
                             
f8bc : ca               [ 2] 	dex
f8bd : 4ca4f8           [ 3] 	jmp df_show_err_find
f8c0 :                       df_show_err_found
f8c0 : a6a1             [ 3] 	ldx df_tmpptra
f8c2 : a5a2             [ 3] 	lda df_tmpptra+1
f8c4 : 2099c4           [ 6] 	jsr io_print_line
f8c7 : a27e             [ 2] 	ldx #lo(df_tk_error_error)
f8c9 : a9f8             [ 2] 	lda #hi(df_tk_error_error)
f8cb : 2099c4           [ 6] 	jsr io_print_line
                             	; if line number <> 0 then print it
f8ce : a001             [ 2] 	ldy #DFTK_LINNUM
f8d0 : b186             [ 5] 	lda (df_currlin),y
f8d2 : aa               [ 2] 	tax
f8d3 : c8               [ 2] 	iny
f8d4 : b186             [ 5] 	lda (df_currlin),y
f8d6 : c900             [ 2] 	cmp #0x00
f8d8 : d006             [ 3] 	bne df_show_err_linnum
f8da : e000             [ 2] 	cpx #0x00
f8dc : d002             [ 3] 	bne df_show_err_linnum
f8de : f019             [ 3] 	beq df_show_err_fin
f8e0 :                       df_show_err_linnum
                             	_println df_tk_error_inline
                             
f8f5 : 18               [ 2] 	clc
f8f6 : 20f4c3           [ 6] 	jsr print_a_to_d
f8f9 :                       df_show_err_fin
f8f9 : a488             [ 3] 	ldy df_exeoff
f8fb : f01d             [ 4] 	beq df_show_err_done
                             	_println df_tk_error_atpos
                             
f912 : 98               [ 2] 	tya
f913 : aa               [ 2] 	tax
f914 : a900             [ 2] 	lda #0
f916 : 18               [ 2] 	clc
f917 : 20f4c3           [ 6] 	jsr print_a_to_d
f91a :                       df_show_err_done
f91a : a90d             [ 2] 	lda #UTF_CR
f91c : 204bc4           [ 6] 	jsr io_put_ch
f91f : 18               [ 2] 	clc
                             	; back to editor
AS65 Assembler for R6502 [1.42].                                     Page  260
---------------------------------- bank0.s -----------------------------------

f920 : 4c72df           [ 3] 	jmp df_pg_dflat
                             
                             
                             ; For unknown errors, jump to monitor
f923 :                       df_trap_monitor
                             	; Print PC
                             	_println_low df_msg_pc
                             
f92a : a563             [ 3] 	lda df_brkpc+1
f92c : 2074c1           [ 6] 	jsr utilPrintA
f92f : a562             [ 3] 	lda df_brkpc
f931 : 2074c1           [ 6] 	jsr utilPrintA
f934 : 2064c1           [ 6] 	jsr utilPrintSPC
                             
                             	; Print A
                             	_println_low df_msg_acc
                             
f93e : a53d             [ 3] 	lda num_a
f940 : 2074c1           [ 6] 	jsr utilPrintA
f943 : 2064c1           [ 6] 	jsr utilPrintSPC
                             
                             	; Print X
                             	_println_low df_msg_xreg
                             
f94d : a53e             [ 3] 	lda num_a+1
f94f : 2074c1           [ 6] 	jsr utilPrintA
f952 : 2064c1           [ 6] 	jsr utilPrintSPC
                             
                             	; Print Y
                             	_println_low df_msg_yreg
                             
f95c : a53f             [ 3] 	lda num_a+2
f95e : 2074c1           [ 6] 	jsr utilPrintA
f961 : 206cc1           [ 6] 	jsr utilPrintCRLF
                             
f964 : 2041e8           [ 6] 	jsr df_rt_monitor
                             	; back to editor
f967 : 4c72df           [ 3] 	jmp df_pg_dflat
                             
f96a :                       df_msg_pc
f96a : 50433a00              	db "PC:\x0"
f96e :                       df_msg_acc
f96e : 413a00                	db "A:\x0"
f971 :                       df_msg_xreg
f971 : 583a00                	db "X:\x0"
f974 :                       df_msg_yreg
f974 : 593a00                	db "Y:\x0"
                             
                             	include	"dflat/asm.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  ASM.S
                             ;*  This is the main controller code file for the
                             ;*  This file includes all the required source fi
                             ;*	in addition to dflat.s
                             ;*
AS65 Assembler for R6502 [1.42].                                     Page  261
---------------------------------- bank0.s -----------------------------------

                             ;************************************************
                             
                             	; ROM code
                             	code
                             
f977 :                       mod_sz_asm_s
                             
                             	;	dflat.s is already included, so just the addit
                             	include "dflat/asm.i"
                             ;* Addressing modes - 15 in total, 16 with direct
                             ;*  0   Nothing
                             ;*	1 	Absolute			XXX <word>
                             ;*	2 	Absolute,X			XXX <word>,x
                             ;*	3 	Absolute,Y			XXX <word>,y
                             ;*	4	Zeropage			XXX	<byte>
                             ;*	5	Zeropage,X			XXX	<byte>,x
                             ;*	6	Zeropage,Y			XXX	<byte>,y
                             ;*	7	Indirect			XXX	(<byte>)
                             ;*	8	Indirect,X			XXX	(<byte>,x)
                             ;*	9	Indirect,Y			XXX	(<byte>),y
                             ;*	A	Absolute indirect	XXX	(<word>)
                             ;*	B	Absolute indirect,x	XXX	(<word>,x)
                             ;*	C	Immediate			XXX #<byte>
                             ;*	D	Accumulator			XXX (same as implied)
                             ;*	E	Implied				XXX
                             ;*	F	Relative			XXX	<byte>
                             ;*	10	Assembler directive	XXX .......
                             
0000 =                       AM_NONE		= 0
0001 =                       AM_ABS	 	= 1
0002 =                       AM_ABSX		= 2
0003 =                       AM_ABSY		= 3
0004 =                       AM_ZP		= 4
0005 =                       AM_ZPX		= 5
0006 =                       AM_ZPY		= 6
0007 =                       AM_ZPIND	= 7
0008 =                       AM_ZPINDX	= 8
0009 =                       AM_ZPINDY	= 9
000a =                       AM_ABSIND	= 10
000b =                       AM_ABSINDX	= 11
000c =                       AM_IMM		= 12
000d =                       AM_ACC		= 13
000d =                       AM_IMP		= AM_ACC
000f =                       AM_REL		= 15
0010 =                       AM_DIR		= 16
                             
                             
                             
                             	include "dflat/tkasm.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  ASM.S
                             ;*	Module that implements tokenisation of the ass
                             ;* 	The assembler is an extension to dflat, almos
                             ;*	almost a language within a language, as it has
                             ;*	own symbol tables to allow adding new keywords
AS65 Assembler for R6502 [1.42].                                     Page  262
---------------------------------- bank0.s -----------------------------------

                             ;*	running out of space in the main symtol table 
                             ;*	for normal 6502 asembler syntax which is at od
                             ;*	regular dflat.
                             ;*	Hence, this module has to do its own additiona
                             ;*	to tokenise the assembly.
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code  
                             
f977 :                       mod_sz_tkasm_s
                             
                             	; if didn't find regular keywords then try assen
f977 :                       df_tk_asm_parse_command
                             	; skip the white space after the dot
f977 : 202fd7           [ 6] 	jsr df_tk_skip_ws
                             	; find the assembler symbol
f97a : 20a5f9           [ 6] 	jsr df_tk_asm_matchtok
                             	; if not found then must be a label assignment
f97d : b021             [ 3] 	bcs df_tk_asm_parse_command_symbol
                             	; Get the assembler symbol and put the token
f97f : a583             [ 3] 	lda df_symoff
                             	; Set the MSB
f981 : 0980             [ 2] 	ora #0x80
f983 : 20d9d6           [ 6] 	jsr df_tk_put_tok
                             	; check the first addressing mode code
                             	; remember to jump over the offset byte
f986 : a001             [ 2] 	ldy #1
f988 : b181             [ 5] 	lda (df_symtab),y
                             	; Directive?
f98a : c910             [ 2] 	cmp #AM_DIR
f98c : d00c             [ 3] 	bne df_tk_asm_mnemonic
                             	; if directive then process it
f98e : a583             [ 3] 	lda df_symoff
f990 : 20fcf9           [ 6] 	jsr df_tk_asm_exec_parser
f993 : b004             [ 3] 	bcs df_tk_asm_parse_command_err
                             	; [1] ignore white space but keep it
f995 : 202fd7           [ 6] 	jsr df_tk_skip_ws
                             	; No error in parsing this command
f998 : 18               [ 2] 	clc
f999 :                       df_tk_asm_parse_command_err
f999 : 60               [ 6] 	rts
f99a :                       df_tk_asm_mnemonic
                             	; for all nmemonics, work out the addressing mod
f99a : 200bfa           [ 6] 	jsr df_tk_asm_addr_mode
f99d : b0fa             [ 3] 	bcs df_tk_asm_parse_command_err
f99f : 60               [ 6] 	rts
f9a0 :                       df_tk_asm_parse_command_symbol
                             	; No mask
f9a0 : a900             [ 2] 	lda #0
f9a2 : 4c17d8           [ 3] 	jmp df_tk_var
                             
                             
                             ;****************************************
                             ;* df_tk_asm_matchtok
                             ;* Try and find a token match against the table d
                             ;* Input:
                             ;*			Current df_linbuff and df_linoff
                             ;* Return: 	CC = No Error, CS = Error
                             ;*			df_linoff points to next char if CC else unc
                             ;****************************************
AS65 Assembler for R6502 [1.42].                                     Page  263
---------------------------------- bank0.s -----------------------------------

f9a5 :                       df_tk_asm_matchtok
                             	; Start at token symbols beginning
f9a5 : a9a7             [ 2] 	lda #lo(df_asm_tokensyms)
f9a7 : 8581             [ 3] 	sta df_symtab
f9a9 : a9fd             [ 2] 	lda #hi(df_asm_tokensyms)
f9ab : 8582             [ 3] 	sta df_symtab+1
f9ad : a900             [ 2] 	lda #0
f9af : 8583             [ 3] 	sta df_symoff
f9b1 : a200             [ 2] 	ldx #0
f9b3 :                       df_tk_asm_checknexttok
                             	; From the line buffer current pointer
                             	; Check for a token match
f9b3 : a47c             [ 3] 	ldy df_linoff
f9b5 :                       df_tk_asm_checktokch
                             	; Get symtable char
f9b5 : a181             [ 6] 	lda (df_symtab,x)
                             	; if less than ascii ' ' then reached end of
                             	; this symbol and everything matched so found!
f9b7 : c920             [ 2] 	cmp #' '
f9b9 : 9033             [ 3] 	bcc df_tk_asm_symfound
                             	; Else compare with current line buffer char
f9bb : d90004           [ 4] 	cmp df_linbuff,y
                             	; If chars not match then this symbol fails
f9be : d00a             [ 3] 	bne df_tk_asm_symnomatch
                             	; else more chars to match
                             	; so increment line buffer pointers
                             	_incZPWord df_symtab
                             
f9c6 : c8               [ 2] 	iny
f9c7 : 4cb5f9           [ 3] 	jmp df_tk_asm_checktokch
f9ca :                       df_tk_asm_symnomatch
                             	; Increment symbol counter to next symbol
f9ca : e683             [ 5] 	inc df_symoff
f9cc :                       df_tk_asm_symnextentry
f9cc : a181             [ 6] 	lda (df_symtab,x)
                             	; End of symbol is < ' '
f9ce : c920             [ 2] 	cmp #' '
f9d0 : 9009             [ 3] 	bcc  df_tk_asm_foundsymend
                             	_incZPWord df_symtab
                             
f9d8 : 4cccf9           [ 3] 	jmp df_tk_asm_symnextentry
f9db :                       df_tk_asm_foundsymend
                             	; Now at the offset to jump over addressing
                             	; mode and opcode values. Add offset to ptr
                             	; remember than C is clear and A has offset
                             	; set C so always jump over the offset
f9db : 38               [ 2] 	sec
f9dc : 6581             [ 3] 	adc df_symtab
f9de : 8581             [ 3] 	sta df_symtab
f9e0 : a582             [ 3] 	lda df_symtab+1
f9e2 : 6900             [ 2] 	adc #0
f9e4 : 8582             [ 3] 	sta df_symtab+1
                             	; If next char is not zero then
                             	; try and match with line buffer
f9e6 : a181             [ 6] 	lda (df_symtab,x)
f9e8 : d0c9             [ 3] 	bne df_tk_asm_checknexttok
                             	; else symbol table exhausted
                             	; so no match found
                             	; Zero symbol counter
f9ea : 8583             [ 3] 	sta df_symoff		; Relies on A=0
                             	; Set C to indicate error (no match)
f9ec : 38               [ 2] 	sec
AS65 Assembler for R6502 [1.42].                                     Page  264
---------------------------------- bank0.s -----------------------------------

f9ed : 60               [ 6] 	rts
f9ee :                       df_tk_asm_symfound
                             	; Full match with keyword in symtable but
                             	; check the next buffer char is not alphanum
                             	; as this could be part of a symbol
                             	; Point to next buffer char in any case
                             	; y already points to char after keyword
f9ee : b90004           [ 4] 	lda df_linbuff,y
                             	; if it is an alphanum then
f9f1 : 2023d7           [ 6] 	jsr df_tk_isalphanum
                             	; do not count as a match
f9f4 : b0d4             [ 3] 	bcs df_tk_asm_symnomatch
                             	; Save line buffer pointer (points to next char)
                             	; Clear C to indicate success (match)
f9f6 : 847c             [ 3] 	sty df_linoff
f9f8 : a583             [ 3] 	lda df_symoff
                             	; df_symtab points to the offset
f9fa :                       df_tk_asm_addr_mode_ok
f9fa : 18               [ 2] 	clc
f9fb : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* df_tk_asm_exec_parser
                             ;* Execute parse routine for this statement
                             ;* Input: a is the token found
                             ;* Return: CC = Parsed ok, CS = Error
                             ;****************************************
f9fc :                       df_tk_asm_exec_parser
f9fc : 0a               [ 2] 	asl a
f9fd : aa               [ 2] 	tax
f9fe : bdd3ff           [ 4] 	lda df_tk_asm_tokenjmp,x
fa01 : 85a1             [ 3] 	sta df_tmpptra
fa03 : bdd4ff           [ 4] 	lda df_tk_asm_tokenjmp+1,x
fa06 : 85a2             [ 3] 	sta df_tmpptra+1
fa08 : 6ca100           [ 6] 	jmp (df_tmpptra)
                             
                             
                             ;****************************************
                             ;* df_tk_asm_addr_mode
                             ;* Tokenise the addressing mode
                             ;* Input: a is the token found
                             ;* Return: CC = Parsed ok, CS = Error
                             ;****************************************
fa0b :                       df_tk_asm_addr_mode
fa0b : 202fd7           [ 6] 	jsr df_tk_skip_ws		;Skip whitespace
fa0e : c900             [ 2] 	cmp #0					;End of line?
fa10 : f0e8             [ 4] 	beq df_tk_asm_addr_mode_ok
fa12 : c93a             [ 2] 	cmp #':'				;End of statement?
fa14 : f0e4             [ 4] 	beq df_tk_asm_addr_mode_ok
fa16 : a923             [ 2] 	lda #'#'				; Check for immediate
fa18 : 2061d7           [ 6] 	jsr df_tk_expect_tok
fa1b : b003             [ 3] 	bcs df_tk_asm_addr_mode_1
fa1d : 4c40fa           [ 3] 	jmp df_tk_imm		; Process immediate
fa20 :                       df_tk_asm_addr_mode_1
fa20 : a928             [ 2] 	lda #'('				; One of indirect modes?
fa22 : 2061d7           [ 6] 	jsr df_tk_expect_tok
fa25 : b003             [ 3] 	bcs df_tk_asm_addr_mode_2
fa27 : 4c43fa           [ 3] 	jmp df_tk_indirect
fa2a :                       df_tk_asm_addr_mode_2
                             	; here just a regular address
                             	; Just one expression expected
fa2a : 2053d9           [ 6] 	jsr df_tk_expression
AS65 Assembler for R6502 [1.42].                                     Page  265
---------------------------------- bank0.s -----------------------------------

                             	; Is there a comma after the expression
fa2d : a92c             [ 2] 	lda #','
fa2f : 2061d7           [ 6] 	jsr df_tk_expect_tok
fa32 : b0c6             [ 4] 	bcs df_tk_asm_addr_mode_ok
                             	; must be x or y
fa34 : a978             [ 2] 	lda #'x'
fa36 : 2061d7           [ 6] 	jsr df_tk_expect_tok
fa39 : 90bf             [ 4] 	bcc df_tk_asm_addr_mode_ok
                             	; got to here, must be y
fa3b : a979             [ 2] 	lda #'y'
fa3d : 4c6dd7           [ 3] 	jmp df_tk_expect_tok_err
                             	
                             	
                             ;* Tokenise immediate addressing mode	
fa40 :                       df_tk_imm
                             	; Just one expression expected
fa40 : 4c53d9           [ 3] 	jmp df_tk_expression
                             	
                             ;* Tokenise indirect
fa43 :                       df_tk_indirect
                             	; Just one expression expected
fa43 : 2053d9           [ 6] 	jsr df_tk_expression
                             	; Is there a comma after the expression
fa46 : a92c             [ 2] 	lda #','
fa48 : 2061d7           [ 6] 	jsr df_tk_expect_tok
                             	; if not then might be indirect Y
fa4b : b00a             [ 3] 	bcs df_tk_indirect_y
                             	; Else must have be indirect "x)"
fa4d : a978             [ 2] 	lda #'x'
fa4f : 206dd7           [ 6] 	jsr df_tk_expect_tok_err
fa52 : a929             [ 2] 	lda #')'
fa54 : 4c6dd7           [ 3] 	jmp df_tk_expect_tok_err
                             	
fa57 :                       df_tk_indirect_y
                             	; Definitely has a close bracket
fa57 : a929             [ 2] 	lda #')'
fa59 : 206dd7           [ 6] 	jsr df_tk_expect_tok_err
                             	; Is there a comma after the expression
fa5c : a92c             [ 2] 	lda #','
fa5e : 2061d7           [ 6] 	jsr df_tk_expect_tok
fa61 : b005             [ 3] 	bcs df_tk_indirect_done
                             	; if comma then must be indirect y
fa63 : a979             [ 2] 	lda #'y'
fa65 : 4c6dd7           [ 3] 	jmp df_tk_expect_tok_err
                             
fa68 :                       df_tk_indirect_done
fa68 : 18               [ 2] 	clc
fa69 : 60               [ 6] 	rts
                             	
                             
                             	
                             
                             
                             ;************************************************
                             ;*           TOKENISATION SUBROUTINES
                             ;************************************************
                             
                             
                             ;* HANDLE DIRECTIVES
                             
                             ;* All tokenisation is part of regular toksub rou
                             
AS65 Assembler for R6502 [1.42].                                     Page  266
---------------------------------- bank0.s -----------------------------------

                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
fa6a :                       mod_sz_tkasm_e
                             
                             
                             	include "dflat/rtasm.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  RTASM.S
                             ;*  Module that implements the runtime execution 
                             ;*  assembler.
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code  
                             
fa6a :                       mod_sz_rtasm_s
                             
fa6a :                       df_rt_asm_assemble
                             	; check if >=0x80 (directive or mnemonic)
fa6a : a488             [ 3] 	ldy df_exeoff
fa6c : b186             [ 5] 	lda (df_currlin),y
fa6e : c980             [ 2] 	cmp #0x80
fa70 : 9009             [ 3] 	bcc df_rt_asm_do_label
fa72 : 207ffa           [ 6] 	jsr df_rt_asm_command
fa75 : 2085fc           [ 6] 	jsr df_rt_asm_printCR
fa78 : 4c7efa           [ 3] 	jmp df_rt_asm_assemble_done
fa7b :                       df_rt_asm_do_label
fa7b : 20a3fa           [ 6] 	jsr df_rt_asm_label
fa7e :                       df_rt_asm_assemble_done
AS65 Assembler for R6502 [1.42].                                     Page  267
---------------------------------- bank0.s -----------------------------------

                             	; any clean up here
fa7e : 60               [ 6] 	rts
                             
                             ; Jump to mnemonic or 
                             ; directive with index in A ignoring MSB
fa7f :                       df_rt_asm_command
fa7f : 297f             [ 2] 	and #0x7f
fa81 : 48               [ 3] 	pha
fa82 : aa               [ 2] 	tax
                             	; Point to Xth symtable entry of addr modes and 
fa83 : 2055fd           [ 6] 	jsr df_rt_asm_skip_to_sym
                             
                             	; Get first addressing mode (ignoring offset byt
fa86 : a001             [ 2] 	ldy #1
fa88 : b181             [ 5] 	lda (df_symtab),y
                             	; is it a directive?
fa8a : c910             [ 2] 	cmp #AM_DIR
                             	; if directive
fa8c : f003             [ 3] 	beq df_rt_asm_dir
                             	; Else must be a normal mnemonic
fa8e : 4c6ffb           [ 3] 	jmp df_rt_asm_mnem
                             
                             ; Jump to the appropriate directive
fa91 :                       df_rt_asm_dir
                             	; Get the index and *2
                             	; to get jump vector
fa91 : 68               [ 4] 	pla
fa92 : 0a               [ 2] 	asl a
fa93 : aa               [ 2] 	tax
                             	; jump over directive code
fa94 : e688             [ 5] 	inc df_exeoff
                             	; jump to directive handler
fa96 : bdddff           [ 4] 	lda df_rt_asm_tokenjmp,x
fa99 : 85a1             [ 3] 	sta df_tmpptra
fa9b : bddeff           [ 4] 	lda df_rt_asm_tokenjmp+1,x
fa9e : 85a2             [ 3] 	sta df_tmpptra+1
faa0 : 6ca100           [ 6] 	jmp (df_tmpptra)
                             
                             ; Process label
                             ; Set the label to the PC
faa3 :                       df_rt_asm_label
                             	; Get the address of the variable in A,X
faa3 : 2067ed           [ 6] 	jsr df_rt_generate_lvar
faa6 : 869e             [ 3] 	stx df_asmoprnd
faa8 : 859f             [ 3] 	sta df_asmoprnd+1
                             	; Assign to value of PC
faaa : a000             [ 2] 	ldy #0
faac : a599             [ 3] 	lda df_asmpc
faae : 919e             [ 5] 	sta (df_asmoprnd),y
fab0 : a59a             [ 3] 	lda df_asmpc+1
fab2 : c8               [ 2] 	iny
fab3 : 919e             [ 5] 	sta (df_asmoprnd),y
fab5 : 60               [ 6] 	rts	
                             
                             ;* Set the code origin
fab6 :                       df_rt_asm_org
                             	; Get the address from expression
fab6 : 2032fd           [ 6] 	jsr df_rt_asm_get_operand
                             	; Put this in to PC
fab9 : a59e             [ 3] 	lda df_asmoprnd
fabb : 8599             [ 3] 	sta df_asmpc
fabd : a59f             [ 3] 	lda df_asmoprnd+1
AS65 Assembler for R6502 [1.42].                                     Page  268
---------------------------------- bank0.s -----------------------------------

fabf : 859a             [ 3] 	sta df_asmpc+1
fac1 : a903             [ 2] 	lda #3
fac3 : 85a0             [ 3] 	sta df_asmlen
fac5 : 2043fc           [ 6] 	jsr df_rt_asm_printPC
fac8 : 60               [ 6] 	rts
                             
                             ; Set the assembly option
                             ; Bit 0 set = Print code to console
                             ; But 1 set = Write code to memory
                             ; Be sure to run 2 non-write passes
                             ; before a write pass
                             ; First pass may result in ZP used a lot
                             ; Second pass resolves forward refs to ABS
                             ; Final write pass then stores the code
fac9 :                       df_rt_asm_opt
                             	; Get the value from expression
fac9 : 2032fd           [ 6] 	jsr df_rt_asm_get_operand
                             	; Put this in to OPT
facc : a59e             [ 3] 	lda df_asmoprnd
face : 859b             [ 3] 	sta df_asmopt
fad0 : 60               [ 6] 	rts
                             
                             ; dw and db handled here
                             ; keep going through comma separated
                             ; list and write bytes or words
                             ; string expansion also handled
fad1 :                       df_rt_asm_db
fad1 : a902             [ 2] 	lda #2
fad3 : 85a0             [ 3] 	sta df_asmlen
fad5 : d004             [ 3] 	bne df_rt_asm_db_start	; Relies on A<>0
fad7 :                       df_rt_asm_dw
fad7 : a903             [ 2] 	lda #3
fad9 : 85a0             [ 3] 	sta df_asmlen
fadb :                       df_rt_asm_db_start
fadb : 2043fc           [ 6] 	jsr df_rt_asm_printPC
fade : 2060fc           [ 6] 	jsr df_rt_asm_printSPC
fae1 :                       df_rt_asm_data
fae1 : 2090e0           [ 6] 	jsr df_rt_neval		; Evaluate expression
fae4 : 2062f7           [ 6] 	jsr df_ost_peekType	; What is the type
fae7 : c980             [ 2] 	cmp #0x80			; If string
fae9 : b00d             [ 3] 	bcs df_rt_asm_string
faeb : 2068f7           [ 6] 	jsr df_ost_popInt	; else get number in A,X
faee : 869e             [ 3] 	stx df_asmoprnd		; store low value
faf0 : 859f             [ 3] 	sta df_asmoprnd+1	; store high value
faf2 : 2020fb           [ 6] 	jsr df_rt_asm_data_write
faf5 : 4c15fb           [ 3] 	jmp df_rt_asm_data_next
faf8 :                       df_rt_asm_string
faf8 : 2070f7           [ 6] 	jsr df_ost_popPtr	; pop string pointer
fafb : 86a1             [ 3] 	stx df_tmpptra		; save pointer to tmpa
fafd : 85a2             [ 3] 	sta df_tmpptra+1
faff :                       df_rt_asm_string_ch
faff : a000             [ 2] 	ldy #0
fb01 : b1a1             [ 5] 	lda (df_tmpptra),y	; Get string char, 0=done
fb03 : f010             [ 3] 	beq df_rt_asm_data_next
fb05 : 859e             [ 3] 	sta df_asmoprnd		; Save as operand
fb07 : 869f             [ 3] 	stx df_asmoprnd+1	; High is always zero
fb09 : 2020fb           [ 6] 	jsr df_rt_asm_data_write
                             	_incZPWord df_tmpptra
                             
fb12 : 4cfffa           [ 3] 	jmp df_rt_asm_string_ch
fb15 :                       df_rt_asm_data_next
fb15 : 209ded           [ 6] 	jsr df_rt_eos		; End?
AS65 Assembler for R6502 [1.42].                                     Page  269
---------------------------------- bank0.s -----------------------------------

fb18 : b005             [ 3] 	bcs df_rt_asm_data_done
fb1a : e688             [ 5] 	inc df_exeoff		; Jump over ','
fb1c : 4ce1fa           [ 3] 	jmp df_rt_asm_data
fb1f :                       df_rt_asm_data_done
fb1f : 60               [ 6] 	rts	
                             
                             ; Write one db or dw value
                             ; Check for value too big for db
                             ; Advance PC by df_asmlen
fb20 :                       df_rt_asm_data_write
fb20 : 206afc           [ 6] 	jsr df_rt_asm_printOPR
fb23 :                       df_rt_asm_data_write_skip1
fb23 : a902             [ 2] 	lda #2
fb25 : 259b             [ 3] 	and df_asmopt
fb27 : f015             [ 3] 	beq df_rt_asm_data_write_skip2
fb29 : a59e             [ 3] 	lda df_asmoprnd
fb2b : a000             [ 2] 	ldy #0
fb2d : 9199             [ 5] 	sta (df_asmpc),y
fb2f : c8               [ 2] 	iny
fb30 : a902             [ 2] 	lda #2
fb32 : c5a0             [ 3] 	cmp df_asmlen
fb34 : f004             [ 3] 	beq df_rt_asm_data_write_hi
fb36 : a59f             [ 3] 	lda df_asmoprnd+1
fb38 : d015             [ 3] 	bne df_rt_asm_data_write_err
fb3a :                       df_rt_asm_data_write_hi
fb3a : a59f             [ 3] 	lda df_asmoprnd+1
fb3c : 9199             [ 5] 	sta (df_asmpc),y
fb3e :                       df_rt_asm_data_write_skip2
fb3e : a5a0             [ 3] 	lda df_asmlen
fb40 : 38               [ 2] 	sec					; Add 1 less!
fb41 : e901             [ 2] 	sbc #1
fb43 : 18               [ 2] 	clc
fb44 : 6599             [ 3] 	adc df_asmpc
fb46 : 8599             [ 3] 	sta df_asmpc
fb48 : a59a             [ 3] 	lda df_asmpc+1
fb4a : 6900             [ 2] 	adc #0
fb4c : 859a             [ 3] 	sta df_asmpc+1
fb4e : 60               [ 6] 	rts
fb4f :                       df_rt_asm_data_write_err	
                             	SWBRK DFERR_QUANTITY
                             
                             	
                             	
fb51 :                       df_rt_asm_ds
fb51 : 2043fc           [ 6] 	jsr df_rt_asm_printPC
fb54 : 2060fc           [ 6] 	jsr df_rt_asm_printSPC
                             	; Get the address from expression
fb57 : 2032fd           [ 6] 	jsr df_rt_asm_get_operand
                             	; ADD this in to PC
fb5a : 18               [ 2] 	clc
fb5b : a59e             [ 3] 	lda df_asmoprnd
fb5d : 6599             [ 3] 	adc df_asmpc
fb5f : 8599             [ 3] 	sta df_asmpc
fb61 : a59f             [ 3] 	lda df_asmoprnd+1
fb63 : 659a             [ 3] 	adc df_asmpc+1
fb65 : 859a             [ 3] 	sta df_asmpc+1
                             	; len=1 for printing
fb67 : a903             [ 2] 	lda #3
fb69 : 85a0             [ 3] 	sta df_asmlen
fb6b : 206afc           [ 6] 	jsr df_rt_asm_printOPR
fb6e : 60               [ 6] 	rts
                             
AS65 Assembler for R6502 [1.42].                                     Page  270
---------------------------------- bank0.s -----------------------------------

                             
                             ; Process a normal assembler mnemonic
fb6f :                       df_rt_asm_mnem
fb6f : 68               [ 4] 	pla				; Throw away previous temp variable
                             	; jump over mnemonic code
fb70 : e688             [ 5] 	inc df_exeoff
                             	; work out the addressing mode and get operand
fb72 : 20b5fc           [ 6] 	jsr df_rt_asm_addrmode
                             
fb75 :                       df_rt_asm_mnem_try
fb75 : a59c             [ 3] 	lda df_asmadmd					; With the addressing mode
fb77 : 203dfd           [ 6] 	jsr df_rt_asm_find_addr_mode	; Find it for this 
fb7a : c900             [ 2] 	cmp #AM_NONE					; Exists?
fb7c : d014             [ 3] 	bne	df_rt_asm_mnem_chk			; If does then check it
fb7e :                       df_rt_asm_check_alt
fb7e : a69c             [ 3] 	ldx df_asmadmd					; Use ad mode as an index
fb80 : bd96fd           [ 4] 	lda df_asm_altaddrmode,x		; Else get alternate
fb83 : c900             [ 2] 	cmp #AM_NONE					; Is there an alternate?
fb85 : f02e             [ 3] 	beq df_rt_asm_mnem_err			; If no then error
fb87 : 203dfd           [ 6] 	jsr df_rt_asm_find_addr_mode	; Check does mode e
fb8a : c900             [ 2] 	cmp #AM_NONE					; this instruction
fb8c : f027             [ 3] 	beq df_rt_asm_mnem_err			; if no then error
fb8e : c59c             [ 3] 	cmp df_asmadmd					; Same as the original?
fb90 : f00e             [ 3] 	beq df_rt_asm_mnem_done			; if so then done
fb92 :                       df_rt_asm_mnem_chk
fb92 : 859c             [ 3] 	sta df_asmadmd					; This is the final mode
fb94 : aa               [ 2] 	tax								; Get the length
fb95 : bd85fd           [ 4] 	lda df_asm_length,x
fb98 : a69f             [ 3] 	ldx df_asmoprnd+1				; Is operand hi non-zero?
fb9a : f004             [ 3] 	beq df_rt_asm_mnem_done			; If zero then done
fb9c : c903             [ 2] 	cmp #3							; Else must be len 3?
fb9e : d0de             [ 3] 	bne df_rt_asm_check_alt			; Try an alternate
fba0 :                       df_rt_asm_mnem_done
fba0 : a69c             [ 3] 	ldx df_asmadmd					; Get the final mode index
fba2 : bd85fd           [ 4] 	lda df_asm_length,x				; Get the length
fba5 : 85a0             [ 3] 	sta df_asmlen
fba7 : a59c             [ 3] 	lda df_asmadmd					; Get the final mode
fba9 : 203dfd           [ 6] 	jsr df_rt_asm_find_addr_mode	; Get the Y index o
                             	; Ok now get the opcode
fbac : c8               [ 2] 	iny
fbad : b181             [ 5] 	lda (df_symtab),y
fbaf : 859d             [ 3] 	sta df_asmopcde
                             	; Now have all information to assemble
fbb1 : 20b7fb           [ 6] 	jsr df_rt_asm_encode
                             	
fbb4 : 60               [ 6] 	rts
fbb5 :                       df_rt_asm_mnem_err
                             	SWBRK DFERR_SYNTAX
                             
                             	
                             ; Take assembler data and encode it
                             ; depending on the current option
                             ; Option 0 = No write
                             ; Option 1 = No write, Print
                             ; Option 2 = Write
                             ; Option 3 = Write, Print
fbb7 :                       df_rt_asm_encode
                             	; If relative then need to calculate offset
fbb7 : a59c             [ 3] 	lda df_asmadmd
fbb9 : c90f             [ 2] 	cmp #AM_REL
fbbb : d036             [ 3] 	bne df_rt_asm_encode_skiprel
                             	; If high byte is 0 then do nothing
AS65 Assembler for R6502 [1.42].                                     Page  271
---------------------------------- bank0.s -----------------------------------

fbbd : a59f             [ 3] 	lda df_asmoprnd+1
fbbf : f032             [ 3] 	beq df_rt_asm_encode_skiprel
                             	; else calculate distance from PC
                             	; first take 2 off operand
fbc1 : 38               [ 2] 	sec
fbc2 : a59e             [ 3] 	lda df_asmoprnd
fbc4 : e902             [ 2] 	sbc #2
fbc6 : 859e             [ 3] 	sta df_asmoprnd
fbc8 : a59f             [ 3] 	lda df_asmoprnd+1
fbca : e900             [ 2] 	sbc #0
fbcc : 859f             [ 3] 	sta df_asmoprnd+1
                             	; now calculate current operand-PC
fbce : 38               [ 2] 	sec
fbcf : a59e             [ 3] 	lda df_asmoprnd
fbd1 : e599             [ 3] 	sbc df_asmpc
fbd3 : 859e             [ 3] 	sta df_asmoprnd
fbd5 : a59f             [ 3] 	lda df_asmoprnd+1
fbd7 : e59a             [ 3] 	sbc df_asmpc+1
                             	; put 0 in high operand storage
                             	; but A contains result of subtraction
                             	; so check that for out of range
fbd9 : a000             [ 2] 	ldy #0
fbdb : 849f             [ 3] 	sty df_asmoprnd+1
                             	; detect too far; high byte is either 0 or 255
                             	; else it's an error
fbdd : c900             [ 2] 	cmp #0
fbdf : f00a             [ 3] 	beq df_rt_asm_encode_relpos
fbe1 : c9ff             [ 2] 	cmp #0xff
fbe3 : d00a             [ 3] 	bne df_rt_asm_encode_relfar
                             	; if high is ff then low must be same -ve
fbe5 : a59e             [ 3] 	lda df_asmoprnd
fbe7 : 300a             [ 3] 	bmi df_rt_asm_encode_skiprel
                             	; else error
fbe9 : 1004             [ 3] 	bpl df_rt_asm_encode_relfar
fbeb :                       df_rt_asm_encode_relpos
                             	; if high is 00 then low must be same +ve
fbeb : a59e             [ 3] 	lda df_asmoprnd
fbed : 1004             [ 3] 	bpl df_rt_asm_encode_skiprel
                             	; else error
fbef :                       df_rt_asm_encode_relfar
                             	; set to non-zero value
fbef : a9ff             [ 2] 	lda #0xff
fbf1 : 859f             [ 3] 	sta df_asmoprnd+1
fbf3 :                       df_rt_asm_encode_skiprel
                             	; Only write the code if bit 1=1
fbf3 : a902             [ 2] 	lda #0x02
fbf5 : 259b             [ 3] 	and df_asmopt
fbf7 : f028             [ 4] 	beq df_rt_asm_encode_print
fbf9 : a000             [ 2] 	ldy #0
fbfb : a59d             [ 3] 	lda df_asmopcde
fbfd : 9199             [ 5] 	sta (df_asmpc),y
fbff : a5a0             [ 3] 	lda df_asmlen
fc01 : c901             [ 2] 	cmp #1						; No operand
fc03 : f01c             [ 3] 	beq df_rt_asm_encode_print
fc05 : c903             [ 2] 	cmp #3						; Word operand
fc07 : f00e             [ 3] 	beq df_rt_asm_encode_writeword
                             	; byte operand, high byte must be zero
fc09 : a59f             [ 3] 	lda df_asmoprnd+1
fc0b : f002             [ 3] 	beq df_rt_asm_encode_writebyte
                             	SWBRK DFERR_QUANTITY
                             
fc0f :                       df_rt_asm_encode_writebyte
AS65 Assembler for R6502 [1.42].                                     Page  272
---------------------------------- bank0.s -----------------------------------

fc0f : c8               [ 2] 	iny 
fc10 : a59e             [ 3] 	lda df_asmoprnd
fc12 : 9199             [ 5] 	sta (df_asmpc),y
fc14 : 4c21fc           [ 3] 	jmp df_rt_asm_encode_print
fc17 :                       df_rt_asm_encode_writeword
fc17 : c8               [ 2] 	iny 
fc18 : a59e             [ 3] 	lda df_asmoprnd
fc1a : 9199             [ 5] 	sta (df_asmpc),y
fc1c : c8               [ 2] 	iny 
fc1d : a59f             [ 3] 	lda df_asmoprnd+1
fc1f : 9199             [ 5] 	sta (df_asmpc),y	
fc21 :                       df_rt_asm_encode_print
fc21 : 2033fc           [ 6] 	jsr df_rt_asm_print_mmen
                             	; advance pc
fc24 : 18               [ 2] 	clc
fc25 : a599             [ 3] 	lda df_asmpc
fc27 : 65a0             [ 3] 	adc df_asmlen
fc29 : 8599             [ 3] 	sta df_asmpc
fc2b : a59a             [ 3] 	lda df_asmpc+1
fc2d : 6900             [ 2] 	adc #0
fc2f : 859a             [ 3] 	sta df_asmpc+1
fc31 : 18               [ 2] 	clc
fc32 : 60               [ 6] 	rts
                             
                             
                             ; Print the full 1,2,3 byte instruction
                             ; depends on df_asmopt
fc33 :                       df_rt_asm_print_mmen
fc33 : 2043fc           [ 6] 	jsr df_rt_asm_printPC
fc36 : 2060fc           [ 6] 	jsr df_rt_asm_printSPC
fc39 : 2054fc           [ 6] 	jsr df_rt_asm_printOPC
fc3c : 2060fc           [ 6] 	jsr df_rt_asm_printSPC
fc3f : 206afc           [ 6] 	jsr df_rt_asm_printOPR
fc42 :                       df_rt_asm_print_rts			; Hopefull subs can get her
fc42 : 60               [ 6] 	rts
                             
fc43 :                       df_rt_asm_printPC
                             	; Check the option bit 0 (Print)
fc43 : a901             [ 2] 	lda #0x01
fc45 : 259b             [ 3] 	and df_asmopt
fc47 : f0f9             [ 3] 	beq df_rt_asm_print_rts
                             	; Print current PC
fc49 : a59a             [ 3] 	lda df_asmpc+1
fc4b : 2074c1           [ 6] 	jsr utilPrintA
fc4e : a599             [ 3] 	lda df_asmpc
fc50 : 2074c1           [ 6] 	jsr utilPrintA
fc53 : 60               [ 6] 	rts
                             
fc54 :                       df_rt_asm_printOPC
                             	; Check the option bit 0 (Print)
fc54 : a901             [ 2] 	lda #0x01
fc56 : 259b             [ 3] 	and df_asmopt
fc58 : f0e8             [ 3] 	beq df_rt_asm_print_rts
fc5a : a59d             [ 3] 	lda df_asmopcde
fc5c : 2074c1           [ 6] 	jsr utilPrintA
fc5f : 60               [ 6] 	rts
                             
fc60 :                       df_rt_asm_printSPC
                             	; Check the option bit 0 (Print)
fc60 : a901             [ 2] 	lda #0x01
fc62 : 259b             [ 3] 	and df_asmopt
fc64 : f0dc             [ 3] 	beq df_rt_asm_print_rts
AS65 Assembler for R6502 [1.42].                                     Page  273
---------------------------------- bank0.s -----------------------------------

fc66 : 2064c1           [ 6] 	jsr utilPrintSPC
fc69 : 60               [ 6] 	rts
                             	
                             	
fc6a :                       df_rt_asm_printOPR
                             	; Check the option bit 0 (Print)
fc6a : a901             [ 2] 	lda #0x01
fc6c : 259b             [ 3] 	and df_asmopt
fc6e : f0d2             [ 3] 	beq df_rt_asm_print_rts	
fc70 : a5a0             [ 3] 	lda df_asmlen				; check how may operand bytes
fc72 : c901             [ 2] 	cmp #1						; if only opcode, done
fc74 : f0cc             [ 3] 	beq df_rt_asm_print_rts	
fc76 : c902             [ 2] 	cmp #2
fc78 : f005             [ 3] 	beq df_rt_asm_printOPR_1	; if only 2 do low byte
fc7a : a59f             [ 3] 	lda df_asmoprnd+1
fc7c : 2074c1           [ 6] 	jsr utilPrintA
fc7f :                       df_rt_asm_printOPR_1
fc7f : a59e             [ 3] 	lda df_asmoprnd
fc81 : 2074c1           [ 6] 	jsr utilPrintA
fc84 : 60               [ 6] 	rts
                             
fc85 :                       df_rt_asm_printCR
                             	; Check the option bit 0 (Print)
fc85 : a901             [ 2] 	lda #0x01
fc87 : 259b             [ 3] 	and df_asmopt
fc89 : f0b7             [ 3] 	beq df_rt_asm_print_rts
fc8b : 206cc1           [ 6] 	jsr utilPrintCRLF
fc8e : 60               [ 6] 	rts
                             
fc8f :                       df_rt_asm_printCH
fc8f : 8538             [ 3] 	sta tmp_d
                             	; Check the option bit 0 (Print)
fc91 : a901             [ 2] 	lda #0x01
fc93 : 259b             [ 3] 	and df_asmopt
fc95 : f0ab             [ 3] 	beq df_rt_asm_print_rts
fc97 : a538             [ 3] 	lda tmp_d
fc99 : 4c4bc4           [ 3] 	jmp io_put_ch
fc9c : 60               [ 6] 	rts
                             
                             ; Print an entire line, but save df_exeoff
fc9d :                       df_rt_asm_printline
                             	; Check the option bit 0 (Print)
fc9d : a901             [ 2] 	lda #0x01
fc9f : 259b             [ 3] 	and df_asmopt
fca1 : f09f             [ 3] 	beq df_rt_asm_print_rts
fca3 : a588             [ 3] 	lda df_exeoff
fca5 : 48               [ 3] 	pha
                             	; use df_tmpptra
                             	_cpyZPWord df_currlin, df_tmpptra
                             
fcae : 2017ef           [ 6] 	jsr df_rt_list_line_only
fcb1 : 68               [ 4] 	pla
fcb2 : 8588             [ 3] 	sta df_exeoff
fcb4 : 60               [ 6] 	rts
                             
                             
                             ; Calculate the addressing mode
                             ; Populate the operand as needed
                             ; A and df_asmadmd contain Addressing Mode
fcb5 :                       df_rt_asm_addrmode	
                             	; Store nothing in address mode
fcb5 : a900             [ 2] 	lda #AM_NONE
AS65 Assembler for R6502 [1.42].                                     Page  274
---------------------------------- bank0.s -----------------------------------

fcb7 : 859c             [ 3] 	sta df_asmadmd
                             	; zero out the operand
fcb9 : a900             [ 2] 	lda #0
fcbb : 859e             [ 3] 	sta df_asmoprnd
fcbd : 859f             [ 3] 	sta df_asmoprnd+1
                             	; jump over whitespace
fcbf : 2050e5           [ 6] 	jsr df_rt_skip_ws
fcc2 : 209ded           [ 6] 	jsr df_rt_eos			; End of statement?
fcc5 : b00a             [ 3] 	bcs df_rt_asm_AM_IMP
                             	; Check what it is
fcc7 : c923             [ 2] 	cmp #'#'				; Immediate?
fcc9 : f034             [ 3] 	beq df_rt_asm_AM_IMM
fccb : c928             [ 2] 	cmp #'('				; Indirect something?
fccd : f03a             [ 4] 	beq df_rt_asm_AM_INDIRECT
                             	; Must be ABS,ZP or REL
fccf : d005             [ 3] 	bne df_rt_asm_ABSREL
                             ; Process IMP/ACC
fcd1 :                       df_rt_asm_AM_IMP
fcd1 : a90d             [ 2] 	lda #AM_IMP
fcd3 : 859c             [ 3] 	sta df_asmadmd
fcd5 : 60               [ 6] 	rts
                             ; Process ABS or REL
fcd6 :                       df_rt_asm_ABSREL	
                             	; Evaluate operand
fcd6 : 2032fd           [ 6] 	jsr df_rt_asm_get_operand
fcd9 : 209ded           [ 6] 	jsr df_rt_eos			; End of statement?
fcdc : b00f             [ 3] 	bcs df_rt_asm_AM_ABS
fcde : c8               [ 2] 	iny						; Jump over ","
fcdf : b186             [ 5] 	lda (df_currlin),y		; Load X or Y
fce1 : c8               [ 2] 	iny						; Jump over index reg
fce2 : 8588             [ 3] 	sta df_exeoff			; Save exe offset
fce4 : c978             [ 2] 	cmp #'x'				; Indirect X?
fce6 : f012             [ 3] 	beq df_rt_asm_AM_ABSX
                             ; Process ABSY
fce8 :                       df_rt_asm_AM_ABSY
fce8 : a906             [ 2] 	lda #AM_ZPY				; Go for smallest modes
fcea : 859c             [ 3] 	sta df_asmadmd
fcec : 60               [ 6] 	rts
                             ; Process what looks like pure ABS, could be REL
fced :                       df_rt_asm_AM_ABS
fced : a001             [ 2] 	ldy #1					; Check first addressing mode
fcef : b181             [ 5] 	lda (df_symtab),y
fcf1 : c90f             [ 2] 	cmp #AM_REL
fcf3 : f002             [ 3] 	beq df_rt_asm_AM_REL
fcf5 : a904             [ 2] 	lda #AM_ZP				; Go for smallest modes
fcf7 :                       df_rt_asm_AM_REL
fcf7 : 859c             [ 3] 	sta df_asmadmd
fcf9 : 60               [ 6] 	rts
                             ; Process ABSX
fcfa :                       df_rt_asm_AM_ABSX
fcfa : a905             [ 2] 	lda #AM_ZPX				; Go for smallest modes
fcfc : 859c             [ 3] 	sta df_asmadmd
fcfe : 60               [ 6] 	rts
                             ; Process Immediate
fcff :                       df_rt_asm_AM_IMM
                             	; skip over #
fcff : e688             [ 5] 	inc df_exeoff
                             	; Get operand
fd01 : 2032fd           [ 6] 	jsr df_rt_asm_get_operand
                             	; Mark as immediate
fd04 : a90c             [ 2] 	lda #AM_IMM
fd06 : 859c             [ 3] 	sta df_asmadmd
AS65 Assembler for R6502 [1.42].                                     Page  275
---------------------------------- bank0.s -----------------------------------

fd08 : 60               [ 6] 	rts
                             ; Process indirect
fd09 :                       df_rt_asm_AM_INDIRECT
                             	; skip over (
fd09 : e688             [ 5] 	inc df_exeoff
                             	; Calculate the operand
fd0b : 2032fd           [ 6] 	jsr df_rt_asm_get_operand
                             	; what is next char?
fd0e : a488             [ 3] 	ldy df_exeoff
fd10 : b186             [ 5] 	lda (df_currlin),y
fd12 : c929             [ 2] 	cmp #')'			; Could be IND or INDY
fd14 : f009             [ 3] 	beq df_rt_asm_AM_ZPINDORY
                             	; else must be INDX
                             	; skip 'x)'
fd16 : c8               [ 2] 	iny
fd17 : c8               [ 2] 	iny
fd18 : 8488             [ 3] 	sty df_exeoff
fd1a : a908             [ 2] 	lda #AM_ZPINDX
fd1c : 859c             [ 3] 	sta df_asmadmd
fd1e : 60               [ 6] 	rts
                             ; Pure indirect mode found
fd1f :                       df_rt_asm_AM_ZPINDORY
fd1f : a907             [ 2] 	lda #AM_ZPIND			; Assume ZPIND
fd21 : c8               [ 2] 	iny
fd22 : 8488             [ 3] 	sty df_exeoff
                             	; if at end of line/statement then pure indirect
fd24 : 209ded           [ 6] 	jsr df_rt_eos			; End of statement?
fd27 : b006             [ 3] 	bcs df_rt_asm_AM_ZPIND
                             	; else must be INDY
fd29 : a909             [ 2] 	lda #AM_ZPINDY
                             	; skip ',Y'
fd2b : c8               [ 2] 	iny
fd2c : c8               [ 2] 	iny
fd2d : 8488             [ 3] 	sty df_exeoff
fd2f :                       df_rt_asm_AM_ZPIND
fd2f : 859c             [ 3] 	sta df_asmadmd
fd31 : 60               [ 6] 	rts
                             
                             ; Get and save the operand
                             ; df_asmoprnd contains the result
fd32 :                       df_rt_asm_get_operand
                             	; evaluate
fd32 : 2090e0           [ 6] 	jsr df_rt_neval
                             	; Get the parameter from stack
fd35 : 2068f7           [ 6] 	jsr df_ost_popInt
                             	; put in the operand
fd38 : 869e             [ 3] 	stx df_asmoprnd
fd3a : 859f             [ 3] 	sta df_asmoprnd+1
fd3c : 60               [ 6] 	rts
                             	
                             ; From current symtab entry, find addressing
                             ; mode in A.  AM_NONE=Not found, Y=index
fd3d :                       df_rt_asm_find_addr_mode
                             	; save A in tmp
fd3d : 8538             [ 3] 	sta tmp_d
                             	; Start first entry (1) - 2 = 0xff
fd3f : a0ff             [ 2] 	ldy #0xff
fd41 : a200             [ 2] 	ldx #0
fd43 :                       df_rt_asm_find_addr_mode_loop
                             	; next entry
fd43 : c8               [ 2] 	iny
fd44 : c8               [ 2] 	iny
AS65 Assembler for R6502 [1.42].                                     Page  276
---------------------------------- bank0.s -----------------------------------

                             	; if current index > num entries then error
fd45 : 98               [ 2] 	tya
fd46 : 38               [ 2] 	sec
fd47 : e181             [ 6] 	sbc (df_symtab,x)
fd49 : b007             [ 3] 	bcs df_rt_asm_find_addr_mode_err
                             	; is symtab addressing mode what we want?
fd4b : b181             [ 5] 	lda (df_symtab),y
fd4d : c538             [ 3] 	cmp tmp_d
fd4f : d0f2             [ 3] 	bne df_rt_asm_find_addr_mode_loop
                             	; done A=mode, y=index in to df_symtab
fd51 : 60               [ 6] 	rts
fd52 :                       df_rt_asm_find_addr_mode_err
fd52 : a900             [ 2] 	lda #AM_NONE
fd54 : 60               [ 6] 	rts
                             
                             
                             ; Skip X amount of symbols in table
                             ; A contains how many addr mode and op code bytes
                             ; df_symtab points to offset byte
fd55 :                       df_rt_asm_skip_to_sym
fd55 : e8               [ 2] 	inx				; so done when X=0
                             	; Start at token symbols beginning
fd56 : a9a7             [ 2] 	lda #lo(df_asm_tokensyms)
fd58 : 8581             [ 3] 	sta df_symtab
fd5a : a9fd             [ 2] 	lda #hi(df_asm_tokensyms)
fd5c : 8582             [ 3] 	sta df_symtab+1
fd5e : a900             [ 2] 	lda #0
fd60 : 8583             [ 3] 	sta df_symoff
fd62 : a000             [ 2] 	ldy #0
fd64 :                       df_rt_asm_skip_to_sym_next
                             	; Get symtable char
fd64 : b181             [ 5] 	lda (df_symtab),y
                             	; if < ' ' then jumped over symbol chars
fd66 : c920             [ 2] 	cmp #' '
fd68 : 9009             [ 3] 	bcc df_rt_asm_skip_to_sym_end
                             	;else next smy tab char
                             	_incZPWord df_symtab
                             
fd70 : 4c64fd           [ 3] 	jmp df_rt_asm_skip_to_sym_next
                             	; Found end of symbol
fd73 :                       df_rt_asm_skip_to_sym_end
                             	;if done then return
fd73 : ca               [ 2] 	dex
fd74 : f00e             [ 3] 	beq df_rt_asm_skip_to_sym_done
                             	;jump over addr and op code by A bytes
fd76 : 38               [ 2] 	sec
fd77 : 6581             [ 3] 	adc df_symtab
fd79 : 8581             [ 3] 	sta df_symtab
fd7b : a582             [ 3] 	lda df_symtab+1
fd7d : 6900             [ 2] 	adc #0
fd7f : 8582             [ 3] 	sta df_symtab+1
fd81 : 4c64fd           [ 3] 	jmp df_rt_asm_skip_to_sym_next
                             	
fd84 :                       df_rt_asm_skip_to_sym_done
fd84 : 60               [ 6] 	rts
                             
fd85 :                       mod_sz_rtasm_e
                             
                             
                             	include "dflat/asmsymtab.s"
                             ;************************************************
                             ;*
AS65 Assembler for R6502 [1.42].                                     Page  277
---------------------------------- bank0.s -----------------------------------

                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  ASMSYMTAB.S
                             ;*	Mainly this contains the symbol table for asse
                             ;*	mnemonics but also meta data like what address
                             ;*	and the length of opcodes.
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code  
                             
                             	;* Length of each addressing mode
                             	;* ORDER significant!
fd85 :                       df_asm_length
fd85 : 00030303020202..      	db	0,3,3,3,2,2,2,2,2,2,3,3,2,1,1,2,0
                             
                             	; Always try for lowest addressing mode, but
                             	; this table maps to alternative
fd96 :                       df_asm_altaddrmode
fd96 : 00                    	db AM_NONE		;AM_NONE	= 0
fd97 : 00                    	db AM_NONE		;AM_ABS	 	= 1
fd98 : 00                    	db AM_NONE		;AM_ABSX	= 2
fd99 : 00                    	db AM_NONE		;AM_ABSY	= 3
fd9a : 01                    	db AM_ABS		;AM_ZP		= 4
fd9b : 02                    	db AM_ABSX		;AM_ZPX		= 5
fd9c : 03                    	db AM_ABSY		;AM_ZPY		= 6
fd9d : 0a                    	db AM_ABSIND	;AM_ZPIND	= 7
fd9e : 0b                    	db AM_ABSINDX	;AM_ZPINDX	= 8
fd9f : 09                    	db AM_ZPINDY	;AM_ZPINDY	= 9
fda0 : 00                    	db AM_NONE		;AM_ABSIND	= 10
fda1 : 00                    	db AM_NONE		;AM_ABSINDX	= 11
fda2 : 00                    	db AM_NONE		;AM_IMM		= 12
fda3 : 00                    	db AM_NONE		;AM_ACC		= 13
fda4 : 00                    	db AM_NONE		;AM_IMP		= AM_ACC
fda5 : 0f                    	db AM_REL		;AM_REL		= 15
fda6 : 00                    	db AM_NONE		;AM_DIR		= 16
                             
                             
                             	;*	Mnemonic/	How many addressing modes /
                             	;* 	Mode		Opcode for mode
fda7 :                       df_asm_tokensyms
                             	;* Start with directives
fda7 : 6f726702              	db	"org",		1*2
fdab : 1000                  	db	AM_DIR,		0x00
fdad : 6f707402              	db	"opt",		1*2
fdb1 : 1000                  	db	AM_DIR,		0x00
fdb3 : 646202                	db	"db",		1*2
fdb6 : 1000                  	db	AM_DIR,		0x00
fdb8 : 647702                	db	"dw",		1*2
fdbb : 1000                  	db	AM_DIR,		0x00
fdbd : 647302                	db	"ds",		1*2
fdc0 : 1000                  	db	AM_DIR,		0x00	
                             
fdc2 : 61646310              	db	"adc",		8*2
fdc6 : 0c69                  	db	AM_IMM,		0x69
fdc8 : 0465                  	db	AM_ZP,		0x65
fdca : 0575                  	db	AM_ZPX,		0x75
AS65 Assembler for R6502 [1.42].                                     Page  278
---------------------------------- bank0.s -----------------------------------

fdcc : 016d                  	db	AM_ABS,		0x6d
fdce : 027d                  	db	AM_ABSX,	0x7d
fdd0 : 0379                  	db	AM_ABSY,	0x79
fdd2 : 0861                  	db	AM_ZPINDX,	0x61
fdd4 : 0971                  	db	AM_ZPINDY,	0x71
                             	
fdd6 : 616e6410              	db	"and",		8*2
fdda : 0c29                  	db	AM_IMM,		0x29
fddc : 0425                  	db	AM_ZP,		0x25
fdde : 0535                  	db	AM_ZPX,		0x35
fde0 : 012d                  	db	AM_ABS,		0x2d
fde2 : 023d                  	db	AM_ABSX,	0x3d
fde4 : 0339                  	db	AM_ABSY,	0x39
fde6 : 0821                  	db	AM_ZPINDX,	0x21
fde8 : 0931                  	db	AM_ZPINDY,	0x31
                             
fdea : 636d7010              	db	"cmp",		8*2
fdee : 0cc9                  	db	AM_IMM,		0xc9
fdf0 : 04c5                  	db	AM_ZP,		0xc5
fdf2 : 05d5                  	db	AM_ZPX,		0xd5
fdf4 : 01cd                  	db	AM_ABS,		0xcd
fdf6 : 02dd                  	db	AM_ABSX,	0xdd
fdf8 : 03d9                  	db	AM_ABSY,	0xd9
fdfa : 08c1                  	db	AM_ZPINDX,	0xc1
fdfc : 09d1                  	db	AM_ZPINDY,	0xd1
                             
fdfe : 656f7210              	db	"eor",		8*2
fe02 : 0c49                  	db	AM_IMM,		0x49
fe04 : 0445                  	db	AM_ZP,		0x45
fe06 : 0555                  	db	AM_ZPX,		0x55
fe08 : 014d                  	db	AM_ABS,		0x4d
fe0a : 025d                  	db	AM_ABSX,	0x5d
fe0c : 0359                  	db	AM_ABSY,	0x59
fe0e : 0841                  	db	AM_ZPINDX,	0x41
fe10 : 0951                  	db	AM_ZPINDY,	0x51
                             
fe12 : 6c646110              	db	"lda",		8*2
fe16 : 0ca9                  	db	AM_IMM,		0xa9
fe18 : 04a5                  	db	AM_ZP,		0xa5
fe1a : 05b5                  	db	AM_ZPX,		0xb5
fe1c : 01ad                  	db	AM_ABS,		0xad
fe1e : 02bd                  	db	AM_ABSX,	0xbd
fe20 : 03b9                  	db	AM_ABSY,	0xb9
fe22 : 08a1                  	db	AM_ZPINDX,	0xa1
fe24 : 09b1                  	db	AM_ZPINDY,	0xb1
                             
fe26 : 6f726110              	db	"ora",		8*2
fe2a : 0c09                  	db	AM_IMM,		0x09
fe2c : 0405                  	db	AM_ZP,		0x05
fe2e : 0515                  	db	AM_ZPX,		0x15
fe30 : 010d                  	db	AM_ABS,		0x0d
fe32 : 021d                  	db	AM_ABSX,	0x1d
fe34 : 0319                  	db	AM_ABSY,	0x19
fe36 : 0801                  	db	AM_ZPINDX,	0x01
fe38 : 0911                  	db	AM_ZPINDY,	0x11
                             
fe3a : 73626310              	db	"sbc",		8*2
fe3e : 0ce9                  	db	AM_IMM,		0xe9
fe40 : 04e5                  	db	AM_ZP,		0xe5
fe42 : 05f5                  	db	AM_ZPX,		0xf5
fe44 : 01ed                  	db	AM_ABS,		0xed
fe46 : 02fd                  	db	AM_ABSX,	0xfd
AS65 Assembler for R6502 [1.42].                                     Page  279
---------------------------------- bank0.s -----------------------------------

fe48 : 03f9                  	db	AM_ABSY,	0xf9
fe4a : 08e1                  	db	AM_ZPINDX,	0xe1
fe4c : 09f1                  	db	AM_ZPINDY,	0xf1
                             
fe4e : 73746110              	db	"sta",		8*2
fe52 : 0485                  	db	AM_ZP,		0x85
fe54 : 0585                  	db	AM_ZPX,		0x85
fe56 : 018d                  	db	AM_ABS,		0x8d
fe58 : 029d                  	db	AM_ABSX,	0x9d
fe5a : 0399                  	db	AM_ABSY,	0x99
fe5c : 0881                  	db	AM_ZPINDX,	0x81
fe5e : 0991                  	db	AM_ZPINDY,	0x91
fe60 : 0792                  	db	AM_ZPIND,	0x92
                             
fe62 : 61736c0a              	db	"asl",		5*2
fe66 : 0d0a                  	db	AM_IMP,		0x0a
fe68 : 0406                  	db	AM_ZP,		0x06
fe6a : 0516                  	db	AM_ZPX,		0x16
fe6c : 010e                  	db	AM_ABS,		0x0e
fe6e : 021e                  	db	AM_ABSX,	0x1e
fe70 : 64656308              	db	"dec",		4*2
fe74 : 04c6                  	db	AM_ZP,		0xc6
fe76 : 05d6                  	db	AM_ZPX,		0xd6
fe78 : 01ce                  	db	AM_ABS,		0xce
fe7a : 02de                  	db	AM_ABSX,	0xde
fe7c : 696e6308              	db	"inc",		4*2
fe80 : 04e6                  	db	AM_ZP,		0xe6
fe82 : 05f6                  	db	AM_ZPX,		0xf6
fe84 : 01ee                  	db	AM_ABS,		0xee
fe86 : 02fe                  	db	AM_ABSX,	0xfe
fe88 : 6c73720a              	db	"lsr",		5*2
fe8c : 0d4a                  	db	AM_IMP,		0x4a
fe8e : 0446                  	db	AM_ZP,		0x46
fe90 : 0556                  	db	AM_ZPX,		0x56
fe92 : 014e                  	db	AM_ABS,		0x4e
fe94 : 025e                  	db	AM_ABSX,	0x5e
fe96 : 726f6c0a              	db	"rol",		5*2
fe9a : 0d2a                  	db	AM_IMP,		0x2a
fe9c : 0426                  	db	AM_ZP,		0x26
fe9e : 0536                  	db	AM_ZPX,		0x36
fea0 : 012e                  	db	AM_ABS,		0x2e
fea2 : 023e                  	db	AM_ABSX,	0x3e
fea4 : 726f720a              	db	"ror",		5*2
fea8 : 0d6a                  	db	AM_IMP,		0x6a
feaa : 0466                  	db	AM_ZP,		0x66
feac : 0576                  	db	AM_ZPX,		0x76
feae : 016e                  	db	AM_ABS,		0x6e
feb0 : 027e                  	db	AM_ABSX,	0x7e
                             
feb2 : 62697404              	db	"bit",		2*2
feb6 : 0424                  	db	AM_ZP,		0x24
feb8 : 012c                  	db	AM_ABS,		0x2c
                             	
feba : 62726b02              	db	"brk",		1*2
febe : 0d00                  	db	AM_IMP,		0x00
                             	
fec0 : 636c6302              	db	"clc",		1*2
fec4 : 0d18                  	db	AM_IMP,		0x18
fec6 : 636c6402              	db	"cld",		1*2
feca : 0dd8                  	db	AM_IMP,		0xd8
fecc : 636c6902              	db	"cli",		1*2
fed0 : 0d58                  	db	AM_IMP,		0x58
AS65 Assembler for R6502 [1.42].                                     Page  280
---------------------------------- bank0.s -----------------------------------

fed2 : 636c7602              	db	"clv",		1*2
fed6 : 0db8                  	db	AM_IMP,		0xb8
fed8 : 73656302              	db	"sec",		1*2
fedc : 0d38                  	db	AM_IMP,		0x38
fede : 73656402              	db	"sed",		1*2
fee2 : 0df8                  	db	AM_IMP,		0xf8
fee4 : 73656902              	db	"sei",		1*2
fee8 : 0d78                  	db	AM_IMP,		0x78
                             	
feea : 63707806              	db	"cpx",		3*2
feee : 0ce0                  	db	AM_IMM,		0xe0
fef0 : 04e4                  	db	AM_ZP,		0xe4
fef2 : 01ec                  	db	AM_ABS,		0xec
fef4 : 63707906              	db	"cpy",		3*2
fef8 : 0cc0                  	db	AM_IMM,		0xc0
fefa : 04c4                  	db	AM_ZP,		0xc4
fefc : 01cc                  	db	AM_ABS,		0xcc
fefe : 64657802              	db	"dex",		1*2
ff02 : 0dca                  	db	AM_IMP,		0xca
ff04 : 64657902              	db	"dey",		1*2
ff08 : 0d88                  	db	AM_IMP,		0x88
ff0a : 696e7802              	db	"inx",		1*2
ff0e : 0de8                  	db	AM_IMP,		0xe8
ff10 : 696e7902              	db	"iny",		1*2
ff14 : 0dc8                  	db	AM_IMP,		0xc8
ff16 : 6c64780a              	db	"ldx",		5*2
ff1a : 0ca2                  	db	AM_IMM,		0xa2
ff1c : 04a6                  	db	AM_ZP,		0xa6
ff1e : 06b6                  	db	AM_ZPY,		0xb6
ff20 : 01ae                  	db	AM_ABS,		0xae
ff22 : 03be                  	db	AM_ABSY,	0xbe
ff24 : 6c64790a              	db	"ldy",		5*2
ff28 : 0ca0                  	db	AM_IMM,		0xa0
ff2a : 04a4                  	db	AM_ZP,		0xa4
ff2c : 05b4                  	db	AM_ZPX,		0xb4
ff2e : 01ac                  	db	AM_ABS,		0xac
ff30 : 02bc                  	db	AM_ABSX,	0xbc
ff32 : 73747806              	db	"stx",		3*2
ff36 : 0486                  	db	AM_ZP,		0x86
ff38 : 0696                  	db	AM_ZPY,		0x96
ff3a : 018e                  	db	AM_ABS,		0x8e
ff3c : 73747906              	db	"sty",		3*2
ff40 : 0484                  	db	AM_ZP,		0x84
ff42 : 0594                  	db	AM_ZPX,		0x94
ff44 : 018c                  	db	AM_ABS,		0x8c
                             
ff46 : 62636302              	db	"bcc",		1*2
ff4a : 0f90                  	db	AM_REL,		0x90
ff4c : 62637302              	db	"bcs",		1*2
ff50 : 0fb0                  	db	AM_REL,		0xb0
ff52 : 62657102              	db	"beq",		1*2
ff56 : 0ff0                  	db	AM_REL,		0xf0
ff58 : 626d6902              	db	"bmi",		1*2
ff5c : 0f30                  	db	AM_REL,		0x30
ff5e : 626e6502              	db	"bne",		1*2
ff62 : 0fd0                  	db	AM_REL,		0xd0
ff64 : 62706c02              	db	"bpl",		1*2
ff68 : 0f10                  	db	AM_REL,		0x10
ff6a : 62766302              	db	"bvc",		1*2
ff6e : 0f50                  	db	AM_REL,		0x50
ff70 : 62767302              	db	"bvs",		1*2
ff74 : 0f70                  	db	AM_REL,		0x70
AS65 Assembler for R6502 [1.42].                                     Page  281
---------------------------------- bank0.s -----------------------------------

ff76 : 6a6d7004              	db	"jmp",		2*2
ff7a : 014c                  	db	AM_ABS,		0x4c
ff7c : 0a6c                  	db	AM_ABSIND,	0x6c
ff7e : 6a737202              	db	"jsr",		1*2
ff82 : 0120                  	db	AM_ABS,		0x20
                             	
ff84 : 6e6f7002              	db	"nop",		1*2
ff88 : 0dea                  	db	AM_IMP,		0xea
ff8a : 70686102              	db	"pha",		1*2
ff8e : 0d48                  	db	AM_IMP,		0x48
ff90 : 70687002              	db	"php",		1*2
ff94 : 0d08                  	db	AM_IMP,		0x08
ff96 : 706c6102              	db	"pla",		1*2
ff9a : 0d68                  	db	AM_IMP,		0x68
ff9c : 706c7002              	db	"plp",		1*2
ffa0 : 0d28                  	db	AM_IMP,		0x28
ffa2 : 72746902              	db	"rti",		1*2
ffa6 : 0d40                  	db	AM_IMP,		0x40
ffa8 : 72747302              	db	"rts",		1*2
ffac : 0d60                  	db	AM_IMP,		0x60
ffae : 74617802              	db	"tax",		1*2
ffb2 : 0daa                  	db	AM_IMP,		0xaa
ffb4 : 74617902              	db	"tay",		1*2
ffb8 : 0da8                  	db	AM_IMP,		0xa8
ffba : 74737802              	db	"tsx",		1*2
ffbe : 0dba                  	db	AM_IMP,		0xba
ffc0 : 74786102              	db	"txa",		1*2
ffc4 : 0d8a                  	db	AM_IMP,		0x8a
ffc6 : 74787302              	db	"txs",		1*2
ffca : 0d9a                  	db	AM_IMP,		0x9a
ffcc : 74796102              	db	"tya",		1*2
ffd0 : 0d98                  	db	AM_IMP,		0x98	
                             	
                             	;* Terminates with a zero
ffd2 : 00                    	db	0
                             
                             	include	"dflat/asmjmptab.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  ASMJUMPTAB.S
                             ;*  Runtime token jump table for assembler.
                             ;*  dflat uses four key tables to tokenise and ru
                             ;*  - df_tokensyms    - table of token symbols
                             ;*  - df_tk_tokentype - table of token types
                             ;*  - df_tk_tokenjmp  - table of tokenising routi
                             ;*  - df_rt_tokenjmp  - table of runtime routines
                             ;*  The key is the token symbols.  When a line is
                             ;*  in to the raw (untokenised) buffer, df_tokens
                             ;*  used to identify tokens.  The position of the
                             ;*  token is used to then look up type and jump v
                             ;*  in the other tables.
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code  
AS65 Assembler for R6502 [1.42].                                     Page  282
---------------------------------- bank0.s -----------------------------------

                             
                             ; Tokeniser jump table
                             ; Only directives needed as all opcodes are handl
                             ; through a single routine
ffd3 :                       df_tk_asm_tokenjmp
ffd3 : 6ade                  	dw	df_tk_asm_org
ffd5 : 6ade                  	dw	df_tk_asm_opt
ffd7 : cfdd                  	dw	df_tk_asm_db
ffd9 : cfdd                  	dw	df_tk_asm_dw
ffdb : 6ade                  	dw	df_tk_asm_ds
                             
ffdd :                       df_rt_asm_tokenjmp
ffdd : b6fa                  	dw	df_rt_asm_org
ffdf : c9fa                  	dw	df_rt_asm_opt
ffe1 : d1fa                  	dw	df_rt_asm_db
ffe3 : d7fa                  	dw	df_rt_asm_dw
ffe5 : 51fb                  	dw	df_rt_asm_ds
                             
                             
                             ;****************************************
                             ;* as_init
                             ;* Initialise assembler settings
                             ;****************************************
ffe7 :                       asm_init
                             	; Zero the PC
ffe7 : a900             [ 2] 	lda #0
ffe9 : 8599             [ 3] 	sta df_asmpc
ffeb : 859a             [ 3] 	sta df_asmpc+1
                             	; Zero the option
ffed : 859b             [ 3] 	sta df_asmopt
ffef : 60               [ 6] 	rts
                             
fff0 :                       mod_sz_asm_e
                             
fff0 :                       mod_sz_language_e
                             	; End of Code
fff0 :                       _code_end
                             
No errors in pass 2.
Wrote binary from address $c000 through $ffff.
Total size 16384 bytes.
