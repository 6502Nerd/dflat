AS65 Assembler for R6502 [1.42].                                     Page    1
-------------------------------- bank\bank0.s --------------------------------

-------------------------------- Symbol Table --------------------------------

              Symbol   Value        Decimal

                 ACR : $000b             11   *
              AM_ABS : $0001              1   *
           AM_ABSIND : $000a             10   *
          AM_ABSINDX : $000b             11   *
             AM_ABSX : $0002              2   *
             AM_ABSY : $0003              3   *
              AM_ACC : $000d             13   *
              AM_DIR : $0010             16   *
              AM_IMM : $000c             12   *
              AM_IMP : $000d             13   *
             AM_NONE : $0000              0   *
              AM_REL : $000f             15   *
               AM_ZP : $0004              4   *
            AM_ZPIND : $0007              7   *
           AM_ZPINDX : $0008              8   *
           AM_ZPINDY : $0009              9   *
              AM_ZPX : $0005              5   *
              AM_ZPY : $0006              6   *
            asm_init : $ff56          65366
               BANK0 : $0001              1
      bin_to_bcd_bit : $c365          50021
              buf_ef : $003c             60
              buf_hi : $003a             58
              buf_lo : $0039             57
              buf_sz : $003b             59
     CMD_ERR_NOERROR : $0000              0   *
    CMD_ERR_NOTFOUND : $0001              1   *
        CMD_ERR_PARM : $0002              2   *
         CMD_ERR_VAL : $0003              3   *
           CRSR_DOWN : $000a             10   *
           CRSR_LEFT : $0008              8   *
          CRSR_RIGHT : $0009              9   *
             CRSR_UP : $000b             11   *
           CTRL_CAPS : $0014             20   *
        call_irq_brk : $c0d3          49363
     call_irq_master : $c0d0          49360
   call_irq_usercia0 : $c0d6          49366
       cmd_check_cmd : $d387          54151
         cmd_check_d : $d39a          54170
         cmd_check_s : $d39e          54174
         cmd_dumpmem : $d3ce          54222
    cmd_dumpmemASCII : $d3f2          54258
      cmd_dumpmemFin : $d427          54311
   cmd_dumpmem_ascii : $d404          54276
   cmd_dumpmem_block : $d3d4          54228
    cmd_dumpmem_byte : $d3e3          54243
  cmd_dump_skip_ctrl : $d40e          54286
   cmd_dump_skip_del : $d413          54291
           cmd_error : $d38f          54159
       cmd_find_parm : $d472          54386
              cmd_hi : $0095            149   *
          cmd_incmem : $d42e          54318
              cmd_lo : $0094            148   *
   cmd_next_parm_err : $d47c          54396
       cmd_not_found : $d3a2          54178
           cmd_parse : $d399          54169
      cmd_parse_byte : $d443          54339
  cmd_parse_byte_err : $d45d          54365
AS65 Assembler for R6502 [1.42].                                     Page    2
-------------------------------- bank\bank0.s --------------------------------

 cmd_parse_byte_errp : $d45c          54364
 cmd_parse_next_parm : $d471          54385
      cmd_parse_word : $d45f          54367
            cmd_peek : $d435          54325
            cmd_poke : $d43a          54330
           cmd_ready : $d373          54131
          cmd_setmem : $d3a8          54184
     cmd_setmem_byte : $d3ad          54189
      cmd_setmem_err : $d3cc          54220
        cmd_word_err : $d46f          54383
        command_line : $d373          54131
       con_bin_digit : $c24a          49738
        con_bin_done : $c260          49760
         con_bin_err : $c26a          49770
         con_bin_jmp : $c1e8          49640
        con_bin_to_a : $c242          49730
    con_bin_to_a_int : $c246          49734
         con_dec_jmp : $c1dc          49628
        con_dec_to_a : $c26c          49772
    con_dec_to_a_int : $c270          49776
       con_hex_digit : $c20b          49675
        con_hex_done : $c238          49720
         con_hex_err : $c236          49718
         con_hex_jmp : $c1e2          49634
  con_hex_skip_x_f_1 : $c218          49688
        con_hex_to_a : $c203          49667
    con_hex_to_a_int : $c207          49671
           con_n_err : $c1eb          49643
       con_n_not_dec : $c1df          49631
       con_n_not_hex : $c1e5          49637
          con_n_to_a : $c1cb          49611
   con_n_to_a_detect : $c1ed          49645
                DDRA : $0003              3   *
                DDRB : $0002              2   *
         DFERR_ABORT : $0012             18   *
         DFERR_BREAK : $000d             13   *
           DFERR_DIM : $0003              3   *
         DFERR_FNAME : $000b             11   *
     DFERR_IMMEDIATE : $0007              7   *
       DFERR_NEXTFOR : $000a             10   *
        DFERR_NODATA : $000e             14   *
          DFERR_NOIF : $0009              9   *
        DFERR_NOLINE : $0010             16   *
         DFERR_NOORG : $0014             20   *
        DFERR_NOPROC : $0005              5   *
            DFERR_OK : $0000              0   *
      DFERR_PROCPARM : $0006              6   *
      DFERR_QUANTITY : $0013             19   *
        DFERR_RETURN : $0011             17   *
       DFERR_STRLONG : $000c             12   *
        DFERR_SYNTAX : $0001              1   *
      DFERR_TYPEMISM : $0002              2   *
    DFERR_UNCLOSEDIF : $0008              8   *
         DFERR_UNTIL : $0004              4   *
          DFERR_WEND : $000f             15   *
          DFRT_ABORT : $0089            137   *
            DFRT_ASM : $0097            151   *
           DFRT_DATA : $0096            150   *
            DFRT_DEF : $0086            134   *
           DFRT_ELSE : $0093            147   *
         DFRT_ELSEIF : $0095            149   *
         DFRT_ENDDEF : $0087            135   *
AS65 Assembler for R6502 [1.42].                                     Page    3
-------------------------------- bank\bank0.s --------------------------------

          DFRT_ENDIF : $0094            148   *
            DFRT_FOR : $008e            142   *
             DFRT_IF : $0092            146   *
           DFRT_NEXT : $008f            143   *
         DFRT_REPEAT : $008c            140   *
         DFRT_RETURN : $0088            136   *
           DFRT_WEND : $0091            145   *
          DFRT_WHILE : $0090            144   *
            DFST_INT : $0001              1   *
            DFST_STR : $0080            128   *
            DFTK_BYT : $0020             32   *
         DFTK_BYTBIN : $0007              7   *
         DFTK_BYTDEC : $0005              5   *
         DFTK_BYTHEX : $0006              6   *
            DFTK_CHR : $0000              0   *
            DFTK_EOL : $0000              0   *
         DFTK_ESCVAL : $0020             32   *
            DFTK_FLT : $0080            128   *
             DFTK_FN : $0002              2   *
            DFTK_INT : $0010             16   *
         DFTK_INTBIN : $000b             11   *
         DFTK_INTDEC : $0009              9   *
         DFTK_INTHEX : $000a             10   *
             DFTK_KW : $0001              1   *
         DFTK_LINLEN : $0000              0   *
         DFTK_LINNUM : $0001              1   *
             DFTK_OP : $0008              8   *
          DFTK_OPMSK : $0007              7   *
           DFTK_PROC : $0012             18   *
          DFTK_RESVC : $000c             12   *
          DFTK_RESVD : $000d             13   *
          DFTK_RESVE : $000e             14   *
          DFTK_RESVF : $000f             15   *
          DFTK_RESV1 : $0001              1   *
          DFTK_RESV2 : $0002              2   *
          DFTK_RESV3 : $0003              3   *
          DFTK_RESV4 : $0004              4   *
          DFTK_RESV8 : $0008              8   *
          DFTK_RTMSK : $00f8            248   *
          DFTK_STEND : $001f             31   *
            DFTK_STR : $0040             64   *
         DFTK_STRLIT : $0010             16   *
          DFTK_STROP : $0004              4   *
          DFTK_TOKEN : $0080            128   *
            DFTK_VAR : $0011             17   *
        DFTK_VARPARM : $0026             38   *
          DFVVT_ARRY : $0080            128   *
           DFVVT_BYT : $0002              2   *
          DFVVT_DIM1 : $0003              3   *
          DFVVT_DIM2 : $0004              4   *
           DFVVT_FLT : $0008              8   *
            DFVVT_HI : $0002              2   *
           DFVVT_INT : $0001              1   *
            DFVVT_LO : $0001              1   *
          DFVVT_PROC : $0040             64   *
           DFVVT_STR : $0004              4   *
            DFVVT_SZ : $0008              8   *
          DFVVT_TYPE : $0000              0   *
           DF_MEMTOP : $9800          38912   *
        DF_PROGSTART : $0713           1811   *
          dflat_zp_e : $00ab            171
          dflat_zp_s : $005b             91
AS65 Assembler for R6502 [1.42].                                     Page    4
-------------------------------- bank\bank0.s --------------------------------

     dflat_zp_save_e : $00a1            161
     dflat_zp_save_s : $005b             91
          df_asmadmd : $009c            156
           df_asmlen : $00a0            160
         df_asmopcde : $009d            157
         df_asmoprnd : $009e            158
           df_asmopt : $009b            155
            df_asmpc : $0099            153
  df_asm_altaddrmode : $fd05          64773
       df_asm_length : $fcf4          64756
    df_asm_tokensyms : $fd16          64790
            df_brkpc : $0062             98
           df_brkval : $0064            100
         df_checkkey : $005b             91
         df_checkmsk : $005c             92
            df_clear : $f733          63283
          df_currdat : $0094            148
          df_currlin : $0086            134
         df_curstidx : $0080            128
           df_datoff : $0096            150
           df_eolidx : $007e            126
           df_exeoff : $0088            136
           df_ifnest : $0093            147
            df_immed : $005e             94
             df_init : $f726          63270
          df_initrun : $e075          57461
       df_lexer_line : $d9d8          55768
  df_lexer_skip_lnum : $d9f9          55801
          df_linbuff : $0400           1024
          df_lineidx : $0092            146
          df_lineptr : $0090            144
           df_linoff : $007c            124
           df_memtop : $0611           1553
          df_msg_acc : $f8f6          63734
           df_msg_pc : $f8f2          63730
         df_msg_xreg : $f8f9          63737
         df_msg_yreg : $f8fc          63740
          df_nextlin : $0089            137
         df_nxtstidx : $007f            127
     df_ost_peekType : $f6fc          63228
       df_ost_popInt : $f702          63234
     df_ost_popParmX : $f6e5          63205
       df_ost_popPtr : $f70a          63242
       df_ost_popStr : $f706          63238
      df_ost_pushInt : $f6d2          63186
     df_ost_pushIntA : $f6d6          63190
    df_ost_pushParmX : $f6bc          63164
      df_ost_pushPtr : $f6e1          63201
      df_ost_pushStr : $f6dd          63197
          df_parmtop : $0077            119
               df_pc : $0060             96
    df_pg_check_line : $df27          57127
df_pg_check_next_line : $df10          57104
df_pg_copyinputtolinbuff : $dfc2          57282
  df_pg_delete_block : $df8a          57226
   df_pg_delete_byte : $df90          57232
df_pg_delete_next_byte : $dfb1          57265
         df_pg_dflat : $dfcc          57292
     df_pg_find_line : $df04          57092
    df_pg_getcommand : $dfe2          57314
     df_pg_inputline : $dfba          57274
  df_pg_inputline_ok : $dfc2          57282
AS65 Assembler for R6502 [1.42].                                     Page    5
-------------------------------- bank\bank0.s --------------------------------

 df_pg_insertlinbyte : $e065          57445
    df_pg_insertline : $e046          57414
  df_pg_insert_block : $df55          57173
   df_pg_insert_byte : $df61          57185
df_pg_insert_next_byte : $df7f          57215
   df_pg_line_number : $e026          57382
       df_pg_nothing : $e025          57381
        df_pg_prompt : $dfd7          57303
    df_pg_prompt_msg : $e06e          57454
 df_pg_skip_del_line : $e03c          57404
      df_pg_tokenise : $e00b          57355
           df_prgend : $0067            103
          df_prgstrt : $0065            101
         df_procargs : $008c            140
          df_procloc : $008d            141
         df_procmode : $008b            139
          df_procptr : $008e            142
df_pr_line_gt_target : $df1c          57116
    df_pr_line_match : $df4a          57162
              df_raw : $0400           1024
              df_rnd : $0097            151
     df_rst_peekByte : $f69b          63131
      df_rst_popByte : $f692          63122
      df_rst_popWord : $f6af          63151
     df_rst_pushByte : $f689          63113
     df_rst_pushWord : $f6a1          63137
          df_rtspace : $0500           1280
           df_rtstck : $0500           1280
           df_rtstop : $0076            118
         df_rt_abort : $f4ea          62698
           df_rt_add : $e644          58948
          df_rt_addr : $f3d3          62419
         df_rt_aequb : $e720          59168
      df_rt_aequbFin : $e72a          59178
           df_rt_and : $e6f3          59123
  df_rt_array_exists : $e354          58196
     df_rt_arry_parm : $e262          57954
    df_rt_arry_parm2 : $e269          57961
df_rt_arry_parm2_arry2 : $e281          57985
df_rt_arry_parm2_skiparry2 : $e288          57992
df_rt_arry_parm2_term : $e271          57969
           df_rt_asc : $f4c3          62659
           df_rt_asl : $e6cd          59085
        df_rt_aslbit : $e6d3          59091
       df_rt_asldone : $e6dd          59101
    df_rt_asm_ABSREL : $fc49          64585
    df_rt_asm_AM_ABS : $fc60          64608
   df_rt_asm_AM_ABSX : $fc6d          64621
   df_rt_asm_AM_ABSY : $fc5b          64603
    df_rt_asm_AM_IMM : $fc72          64626
    df_rt_asm_AM_IMP : $fc44          64580
df_rt_asm_AM_INDIRECT : $fc7c          64636
    df_rt_asm_AM_REL : $fc6a          64618
  df_rt_asm_AM_ZPIND : $fca2          64674
df_rt_asm_AM_ZPINDORY : $fc92          64658
  df_rt_asm_addrmode : $fc28          64552
  df_rt_asm_assemble : $f9f2          63986
df_rt_asm_assemble_done : $fa04          64004
 df_rt_asm_check_alt : $fafd          64253
   df_rt_asm_command : $fa05          64005
      df_rt_asm_data : $fa63          64099
 df_rt_asm_data_done : $faa0          64160
AS65 Assembler for R6502 [1.42].                                     Page    6
-------------------------------- bank\bank0.s --------------------------------

 df_rt_asm_data_next : $fa96          64150
df_rt_asm_data_write : $faa1          64161
df_rt_asm_data_write_err : $facf          64207
df_rt_asm_data_write_hi : $fabd          64189
df_rt_asm_data_write_skip1 : $faa4          64164
df_rt_asm_data_write_skip2 : $fac1          64193
        df_rt_asm_db : $fa56          64086
  df_rt_asm_db_start : $fa5b          64091
df_rt_asm_decode_token : $f041          61505
df_rt_asm_decode_token_done : $f09a          61594
df_rt_asm_decode_token_found : $f058          61528
df_rt_asm_decode_token_keyword : $f05f          61535
df_rt_asm_decode_token_ws : $f048          61512
       df_rt_asm_dir : $fa17          64023
  df_rt_asm_do_label : $fa01          64001
        df_rt_asm_ds : $fad1          64209
        df_rt_asm_dw : $fa59          64089
    df_rt_asm_encode : $fb35          64309
df_rt_asm_encode_print : $fb9c          64412
df_rt_asm_encode_relfar : $fb6c          64364
df_rt_asm_encode_relpos : $fb68          64360
df_rt_asm_encode_skiprel : $fb6e          64366
df_rt_asm_encode_writebyte : $fb8a          64394
df_rt_asm_encode_writeword : $fb92          64402
df_rt_asm_find_addr_mode : $fcb0          64688
df_rt_asm_find_addr_mode_err : $fcc5          64709
df_rt_asm_find_addr_mode_loop : $fcb6          64694
df_rt_asm_get_operand : $fca5          64677
     df_rt_asm_label : $fa29          64041
      df_rt_asm_mnem : $faee          64238
  df_rt_asm_mnem_chk : $fb11          64273
 df_rt_asm_mnem_done : $fb1f          64287
  df_rt_asm_mnem_err : $fb33          64307
  df_rt_asm_mnem_try : $faf4          64244
       df_rt_asm_opt : $fa4e          64078
       df_rt_asm_org : $fa3c          64060
   df_rt_asm_printCH : $fc03          64515
   df_rt_asm_printCR : $fbfa          64506
 df_rt_asm_printline : $fc10          64528
  df_rt_asm_printOPC : $fbcc          64460
  df_rt_asm_printOPR : $fbe0          64480
df_rt_asm_printOPR_1 : $fbf5          64501
   df_rt_asm_printPC : $fbbc          64444
  df_rt_asm_printSPC : $fbd7          64471
df_rt_asm_print_mmen : $fbac          64428
 df_rt_asm_print_rts : $fbbb          64443
df_rt_asm_skip_to_sym : $fcc8          64712
df_rt_asm_skip_to_sym_done : $fcc7          64711
df_rt_asm_skip_to_sym_end : $fce5          64741
df_rt_asm_skip_to_sym_next : $fcd6          64726
    df_rt_asm_string : $fa79          64121
 df_rt_asm_string_ch : $fa80          64128
  df_rt_asm_tokenjmp : $ff4c          65356
        df_rt_assign : $ed3b          60731
    df_rt_assign_str : $ed48          60744
         df_rt_asubb : $e72b          59179
      df_rt_asubbFin : $e738          59192
   df_rt_binlen_skip : $f2ae          62126
         df_rt_bload : $f1a9          61865
    df_rt_bload_addr : $f1cc          61900
         df_rt_bsave : $f1dc          61916
   df_rt_bsave_parms : $f28c          62092
AS65 Assembler for R6502 [1.42].                                     Page    7
-------------------------------- bank\bank0.s --------------------------------

         df_rt_bsuba : $e739          59193
      df_rt_bsubaFin : $e746          59206
          df_rt_call : $f3a4          62372
       df_rt_calljsr : $f3b3          62387
     df_rt_check_pos : $e9cc          59852
   df_rt_check_while : $e872          59506
           df_rt_chr : $f41b          62491
        df_rt_circle : $ec69          60521
           df_rt_cls : $ebbd          60349
         df_rt_comeq : $e7a1          59297
         df_rt_comgt : $e798          59288
        df_rt_comgte : $e7b3          59315
         df_rt_comlt : $e78f          59279
        df_rt_comlte : $e7aa          59306
       df_rt_comment : $ed4c          60748
         df_rt_comne : $e7bc          59324
       df_rt_copyStr : $e224          57892
    df_rt_copyStr_ch : $e226          57894
  df_rt_copyStr_done : $e22f          57903
       df_rt_copy_fn : $f140          61760
        df_rt_cursor : $ec31          60465
          df_rt_data : $ed4c          60748
 df_rt_datastatement : $ea33          59955
   df_rt_datlinstart : $ea2b          59947
    df_rt_datnextlin : $ea39          59961
      df_rt_datumerr : $ea61          60001
           df_rt_dec : $f460          62560
    df_rt_dec_binlen : $f2a8          62120
          df_rt_deek : $f2ca          62154
           df_rt_def : $f5c8          62920
        df_rt_deferr : $f526          62758
  df_rt_def_find_var : $f5d5          62933
   df_rt_def_got_var : $f5e7          62951
df_rt_def_got_varparm : $f5e4          62948
df_rt_def_initialise_parm : $f625          63013
  df_rt_def_load_var : $f605          62981
df_rt_def_load_var_done : $f641          63041
df_rt_def_load_var_int : $f633          63027
df_rt_def_load_var_int_skip : $f636          63030
 df_rt_def_parm_done : $f5fd          62973
           df_rt_dim : $eb38          60216
     df_rt_dim2_mul2 : $eb9b          60315
       df_rt_dim2_nz : $eb86          60294
     df_rt_dim_alloc : $eb75          60277
      df_rt_dim_done : $ebba          60346
       df_rt_dim_err : $ebbb          60347
   df_rt_dim_findesc : $eb3b          60219
 df_rt_dim_next_byte : $ebb5          60341
           df_rt_div : $e68b          59019
      df_rt_doassign : $ed3e          60734
          df_rt_doke : $f09b          61595
        df_rt_doline : $ec82          60546
       df_rt_dosound : $f0e0          61664
       df_rt_do_else : $e93e          59710
       df_rt_elapsed : $f389          62345
          df_rt_else : $e8ee          59630
        df_rt_elseif : $e8ee          59630
        df_rt_enddef : $f64b          63051
         df_rt_endif : $e8e9          59625
           df_rt_eor : $e711          59153
           df_rt_eos : $ed4e          60750
      df_rt_eos_true : $ed5c          60764
AS65 Assembler for R6502 [1.42].                                     Page    8
-------------------------------- bank\bank0.s --------------------------------

            df_rt_eq : $e77b          59259
        df_rt_escjmp : $e617          58903
      df_rt_eval_byt : $e36f          58223
   df_rt_eval_bytbin : $e23a          57914
   df_rt_eval_bytdec : $e23a          57914
   df_rt_eval_bythex : $e23a          57914
      df_rt_eval_chr : $e23a          57914
      df_rt_eval_esc : $e16e          57710
  df_rt_eval_esc_tab : $e17d          57725
   df_rt_eval_intbin : $e23a          57914
   df_rt_eval_intdec : $e23a          57914
   df_rt_eval_inthex : $e23a          57914
     df_rt_eval_lvar : $e2c2          58050
   df_rt_eval_lvskip : $e2a0          58016
     df_rt_eval_proc : $e380          58240
 df_rt_eval_proc_err : $e38d          58253
      df_rt_eval_ptr : $e379          58233
 df_rt_eval_reserved : $e246          57926
   df_rt_eval_strlit : $e248          57928
df_rt_eval_strlit_ch : $e258          57944
df_rt_eval_strlit_done : $e25f          57951
      df_rt_eval_var : $e28d          57997
df_rt_eval_var_dim2adj : $e308          58120
df_rt_eval_var_dim2adjx : $e314          58132
df_rt_eval_var_dim2adjy : $e30f          58127
df_rt_eval_var_do_arry : $e2dd          58077
df_rt_eval_var_nomult : $e32b          58155
df_rt_eval_var_notarry : $e2b2          58034
 df_rt_eval_var_push : $e343          58179
df_rt_eval_var_simple : $e2cf          58063
  df_rt_eval_var_str : $e378          58232
df_rt_exec_check_key : $e44d          58445
   df_rt_exec_ctrl_c : $e455          58453
   df_rt_exec_ctrl_z : $e457          58455
      df_rt_exec_end : $e44b          58443
 df_rt_exec_find_tok : $e40b          58379
df_rt_exec_found_tok : $e410          58384
 df_rt_exec_init_ptr : $e404          58372
     df_rt_exec_jump : $e45b          58459
   df_rt_exec_no_key : $e424          58404
     df_rt_exec_proc : $f57e          62846
     df_rt_exec_stat : $e3fe          58366
         df_rt_false : $e74d          59213
  df_rt_file_cleanup : $f168          61800
     df_rt_file_errc : $f152          61778
 df_rt_findelseendif : $e8b1          59569
    df_rt_findescval : $e510          58640
df_rt_findescval_loop : $e513          58643
      df_rt_findproc : $e4c8          58568
  df_rt_findproc_cmd : $e4da          58586
  df_rt_findproc_err : $e50e          58638
df_rt_findproc_nextstat : $e4fa          58618
      df_rt_findwend : $e83f          59455
    df_rt_fname_case : $f142          61762
           df_rt_for : $e941          59713
 df_rt_generate_lvar : $ed18          60696
           df_rt_get : $f35b          62299
  df_rt_getbin_parms : $f26b          62059
df_rt_getbin_parms_loop : $f26d          62061
     df_rt_getdatatk : $ea47          59975
       df_rt_getlvar : $e52a          58666
       df_rt_getnval : $e0e3          57571
AS65 Assembler for R6502 [1.42].                                     Page    9
-------------------------------- bank\bank0.s --------------------------------

      df_rt_get2Ints : $e38f          58255
      df_rt_get2Strs : $e39e          58270
      df_rt_get_push : $f36c          62316
     df_rt_get_pushp : $f36b          62315
      df_rt_get_sync : $f360          62304
            df_rt_gt : $e767          59239
           df_rt_gte : $e771          59249
      df_rt_gte_calc : $e774          59252
           df_rt_hex : $f42f          62511
         df_rt_himem : $ec37          60471
         df_rt_hires : $ec46          60486
            df_rt_if : $e900          59648
         df_rt_ifcmd : $e8b4          59572
        df_rt_ifelse : $e8d2          59602
        df_rt_ifeval : $e902          59650
  df_rt_ifskipelseif : $e8c9          59593
       df_rt_if_done : $e8ed          59629
      df_rt_if_found : $e8df          59615
      df_rt_if_match : $e8a9          59561
       df_rt_if_stat : $e893          59539
   df_rt_if_stat_err : $e8a7          59559
     df_rt_init_done : $e0e2          57570
 df_rt_init_filename : $f134          61748
 df_rt_init_stat_ptr : $e3eb          58347
      df_rt_init_vvt : $e0a0          57504
 df_rt_init_vvt_skip : $e0d4          57556
 df_rt_init_vvt_slot : $e0aa          57514
df_rt_init_vvt_slot_undim : $e0b6          57526
           df_rt_ink : $ec4f          60495
         df_rt_input : $ead0          60112
     df_rt_input_err : $eb0a          60170
     df_rt_input_num : $eaf3          60147
     df_rt_input_str : $eaeb          60139
    df_rt_ldtokenise : $f191          61841
          df_rt_left : $f46d          62573
           df_rt_len : $f4b7          62647
          df_rt_line : $ec89          60553
        df_rt_lineto : $ec7b          60539
          df_rt_list : $ee42          60994
  df_rt_listcheckvnt : $edad          60845
   df_rt_listgotnext : $eddb          60891
   df_rt_listnextvnt : $edd4          60884
   df_rt_listpn_done : $edeb          60907
       df_rt_listprg : $ee69          61033
    df_rt_listprgend : $ee71          61041
      df_rt_listproc : $edec          60908
    df_rt_listprocch : $edb9          60857
    df_rt_listproccr : $edc4          60868
 df_rt_listprocnames : $eda1          60833
 df_rt_listprocpause : $edca          60874
    df_rt_listp_copy : $edf3          60915
    df_rt_listp_done : $ee36          60982
 df_rt_listp_findcmd : $ee1c          60956
 df_rt_listp_findend : $ee15          60949
df_rt_listp_notfound : $ee40          60992
      df_rt_listwait : $edd1          60881
      df_rt_list_all : $ee55          61013
 df_rt_list_all_line : $eeb8          61112
   df_rt_list_decode : $eec4          61124
df_rt_list_decode_esc : $eef6          61174
df_rt_list_decode_token : $f003          61443
df_rt_list_decode_token_normal : $f00a          61450
AS65 Assembler for R6502 [1.42].                                     Page   10
-------------------------------- bank\bank0.s --------------------------------

   df_rt_list_donvvt : $eff1          61425
df_rt_list_do_decode_tkn : $f011          61457
   df_rt_list_escval : $eed4          61140
  df_rt_list_findvvt : $ef9b          61339
df_rt_list_find_asm_sym : $f06a          61546
 df_rt_list_find_sym : $f01a          61466
   df_rt_list_gotvvt : $efc8          61384
df_rt_list_gotvvtend : $efb4          61364
df_rt_list_got_asm_sym : $f088          61576
df_rt_list_got_last_sym : $f02b          61483
  df_rt_list_got_sym : $f02f          61487
     df_rt_list_line : $ee77          61047
df_rt_list_line_cont : $ee91          61073
 df_rt_list_line_fin : $eeb5          61109
df_rt_list_line_only : $eebb          61115
df_rt_list_line_only_fin : $eeb7          61111
    df_rt_list_linno : $ee5c          61020
   df_rt_list_linnum : $eff2          61426
  df_rt_list_nexttok : $eedd          61149
df_rt_list_next_asm_ch : $f06f          61551
  df_rt_list_next_ch : $f01f          61471
df_rt_list_next_line : $ee98          61080
    df_rt_list_pause : $ee86          61062
  df_rt_list_synckey : $ee82          61058
    df_rt_list_token : $eeda          61146
   df_rt_list_vvtend : $efa7          61351
          df_rt_load : $f24f          62031
       df_rt_loadbin : $f278          62072
  df_rt_loadbin_byte : $f27a          62074
   df_rt_loadbin_inc : $f284          62084
      df_rt_loadline : $f176          61814
         df_rt_local : $eb0c          60172
    df_rt_local_done : $eb34          60212
 df_rt_local_findesc : $eb13          60179
           df_rt_lsr : $e6e0          59104
        df_rt_lsrbit : $e6e6          59110
       df_rt_lsrdone : $e6f0          59120
       df_rt_lst_bin : $ef61          61281
       df_rt_lst_bit : $ef6b          61291
 df_rt_lst_bit_skip0 : $ef73          61299
    df_rt_lst_bytbin : $ef57          61271
    df_rt_lst_bythex : $ef32          61234
       df_rt_lst_chr : $ef15          61205
df_rt_lst_const_done : $ef41          61249
   df_rt_lst_hex_pre : $ef28          61224
    df_rt_lst_intbin : $ef5f          61279
    df_rt_lst_intdec : $ef7b          61307
    df_rt_lst_inthex : $ef45          61253
    df_rt_lst_lo_hex : $ef35          61237
      df_rt_lst_proc : $ef86          61318
  df_rt_lst_reserved : $ef14          61204
    df_rt_lst_strlit : $efd8          61400
  df_rt_lst_strlitch : $efdf          61407
 df_rt_lst_strlitdon : $efea          61418
       df_rt_lst_var : $ef86          61318
            df_rt_lt : $e753          59219
           df_rt_lte : $e75d          59229
      df_rt_lte_calc : $e760          59232
           df_rt_mem : $f307          62215
      df_rt_mem_calc : $f348          62280
      df_rt_mem_free : $f312          62226
       df_rt_mem_prg : $f325          62245
AS65 Assembler for R6502 [1.42].                                     Page   11
-------------------------------- bank\bank0.s --------------------------------

       df_rt_mem_var : $f338          62264
           df_rt_mid : $f499          62617
           df_rt_mod : $e6ac          59052
       df_rt_monitor : $e814          59412
          df_rt_mult : $e66a          58986
         df_rt_music : $f0f0          61680
       df_rt_nassign : $ecfb          60667
            df_rt_ne : $e785          59269
         df_rt_neval : $e0e9          57577
    df_rt_neval_done : $e135          57653
   df_rt_neval_donow : $e158          57688
     df_rt_neval_esc : $e113          57619
df_rt_neval_nextbyte : $e13d          57661
    df_rt_neval_optk : $e0ec          57580
 df_rt_neval_process : $e12c          57644
  df_rt_neval_pushOp : $e169          57705
      df_rt_neval_tk : $e11a          57626
   df_rt_neval_tk_fn : $e136          57654
   df_rt_neval_tk_op : $e142          57666
  df_rt_neval_tk_opp : $e141          57665
           df_rt_new : $e817          59415
          df_rt_next : $e97f          59775
     df_rt_nextdatum : $ea1b          59931
      df_rt_nextstat : $e473          58483
  df_rt_nextstat_err : $e49f          58527
   df_rt_nextstat_ln : $e48a          58506
    df_rt_next_check : $e9cf          59855
      df_rt_next_err : $e9d8          59864
      df_rt_noif_err : $e8fe          59646
df_rt_openforbinload : $f1a0          61856
df_rt_openforbinsave : $f197          61847
            df_rt_or : $e702          59138
         df_rt_paper : $ec55          60501
     df_rt_parm_pop3 : $e3c5          58309
    df_rt_parm_2ints : $e3ad          58285
    df_rt_parm_3ints : $e3b8          58296
    df_rt_parm_4ints : $e3cf          58319
    df_rt_parse_file : $f14a          61770
          df_rt_peek : $f2cc          62156
         df_rt_pixel : $f37c          62332
       df_rt_pixmode : $ec49          60489
          df_rt_play : $f105          61701
          df_rt_plot : $ebc0          60352
       df_rt_plotstr : $ebf2          60402
     df_rt_plotstrch : $ec03          60419
   df_rt_plotstrdone : $ec30          60464
    df_rt_plot_h_int : $ebe9          60393
    df_rt_plot_h_str : $ec1e          60446
         df_rt_point : $ec5f          60511
          df_rt_poke : $f0aa          61610
      df_rt_pop_stat : $e4af          58543
   df_rt_pop_stat_go : $e546          58694
         df_rt_print : $ecba          60602
       df_rt_printat : $ecb0          60592
       df_rt_println : $ecf3          60659
    df_rt_print_done : $ecf0          60656
  df_rt_print_gotstr : $ece4          60644
     df_rt_print_num : $ea00          59904
     df_rt_print_str : $ea07          59911
  df_rt_print_string : $ecea          60650
  df_rt_print_str_ch : $ea10          59920
df_rt_print_str_done : $ea1a          59930
AS65 Assembler for R6502 [1.42].                                     Page   12
-------------------------------- bank\bank0.s --------------------------------

      df_rt_print_ws : $ecbd          60605
          df_rt_proc : $f528          62760
     df_rt_proc_addr : $f552          62802
    df_rt_proc_local : $f675          63093
df_rt_proc_local_load : $f67c          63100
  df_rt_proc_parmerr : $f526          62758
df_rt_proc_parm_done : $f571          62833
df_rt_proc_parm_none : $f572          62834
df_rt_proc_push_parm : $f55d          62813
df_rt_proc_unloadvar : $f651          63057
df_rt_proc_unload_done : $f671          63089
     df_rt_push_int1 : $f3b0          62384
     df_rt_push_stat : $e4a3          58531
     df_rt_putintres : $e63d          58941
          df_rt_read : $eab8          60088
      df_rt_readbyte : $f2cd          62157
 df_rt_readbyte_skip : $f2e2          62178
     df_rt_readdatum : $ea63          60003
     df_rt_read_done : $eacd          60109
 df_rt_read_find_var : $eaba          60090
         df_rt_renum : $ed5e          60766
      df_rt_renum_do : $ed72          60786
    df_rt_renum_next : $ed91          60817
      df_rt_renum_ok : $ed6e          60782
  df_rt_renum_update : $ed79          60793
        df_rt_repeat : $e9da          59866
         df_rt_reset : $f2b5          62133
        df_rt_return : $f648          63048
         df_rt_right : $f47e          62590
           df_rt_rnd : $f2e5          62181
     df_rt_rnd_noeor : $f2f9          62201
       df_rt_rnd_set : $f300          62208
           df_rt_run : $ed4d          60749
     df_rt_run_token : $e464          58468
          df_rt_sadd : $e9ff          59903
       df_rt_sassign : $ed12          60690
          df_rt_save : $f1fd          61949
       df_rt_savebin : $f28a          62090
  df_rt_savebin_byte : $f298          62104
   df_rt_savebin_inc : $f2a2          62114
          df_rt_scrn : $f36f          62319
           df_rt_seq : $e7f0          59376
         df_rt_seval : $e1a3          57763
    df_rt_seval_copy : $e1fd          57853
    df_rt_seval_done : $e220          57888
     df_rt_seval_esc : $e1c9          57801
df_rt_seval_esc_proc : $e21e          57886
df_rt_seval_esc_strlit : $e218          57880
 df_rt_seval_esc_var : $e1f9          57849
df_rt_seval_nextbyte : $e213          57875
    df_rt_seval_optk : $e1b1          57777
      df_rt_seval_tk : $e1d7          57815
   df_rt_seval_tk_fn : $e1f0          57840
   df_rt_seval_tk_op : $e1ec          57836
           df_rt_sgn : $f3b6          62390
         df_rt_sgn_n : $f3c9          62409
         df_rt_sgn_z : $f3ce          62414
           df_rt_sgt : $e7e7          59367
          df_rt_sgte : $e7d2          59346
df_rt_skipinitdataptr : $ea51          59985
 df_rt_skipnestendif : $e8dc          59612
    df_rt_skipnestif : $e8cf          59599
AS65 Assembler for R6502 [1.42].                                     Page   13
-------------------------------- bank\bank0.s --------------------------------

       df_rt_skip_ws : $e51d          58653
  df_rt_skip_ws_loop : $e520          58656
           df_rt_slt : $e7e0          59360
          df_rt_slte : $e7c5          59333
    df_rt_snd_common : $f0b4          61620
           df_rt_sne : $e7d9          59353
         df_rt_sound : $f0dd          61661
df_rt_sound_env_skip : $f0da          61658
   df_rt_sound_noise : $f0e7          61671
       df_rt_sprchar : $f4ec          62700
        df_rt_sprhit : $f514          62740
df_rt_sprhit_inactive : $f520          62752
       df_rt_sprinit : $f50b          62731
      df_rt_sprmulti : $f50e          62734
        df_rt_sprpos : $f4f6          62710
        df_rt_sprupd : $f502          62722
         df_rt_stick : $f355          62293
 df_rt_strlen_common : $f3db          62427
  df_rt_strlen_count : $f3e1          62433
      df_rt_str_comp : $e7f7          59383
 df_rt_str_comp_byte : $e7fc          59388
   df_rt_str_comp_eq : $e811          59409
df_rt_str_comp_false : $e7cc          59340
   df_rt_str_comp_gt : $e80e          59406
   df_rt_str_comp_lt : $e80b          59403
 df_rt_str_comp_true : $e7cf          59343
    df_rt_str_cpy_ch : $f3fb          62459
   df_rt_str_extract : $f3e8          62440
           df_rt_sub : $e657          58967
          df_rt_sval : $e1a7          57767
          df_rt_text : $ec43          60483
         df_rt_tload : $f16e          61806
      df_rt_tokenjmp : $e54f          58703
          df_rt_true : $e747          59207
         df_rt_tsave : $f154          61780
df_rt_unexpected_end : $e459          58457
         df_rt_until : $e9e2          59874
df_rt_untilnext_done : $e9f5          59893
     df_rt_until_err : $e9fd          59901
           df_rt_val : $f4d4          62676
       df_rt_val_err : $f4e8          62696
          df_rt_wait : $ec9a          60570
  df_rt_wait_counter : $ec9e          60574
     df_rt_wait_done : $ecaf          60591
   df_rt_wait_skiphi : $eca8          60584
     df_rt_wait_tick : $eca0          60576
          df_rt_wend : $e87d          59517
      df_rt_wend_end : $e87b          59515
      df_rt_wend_err : $e891          59537
         df_rt_while : $e81a          59418
     df_rt_while_cmd : $e850          59472
    df_rt_while_done : $e82a          59434
         df_sevalptr : $007a            122
    df_show_err_done : $f8a4          63652
     df_show_err_fin : $f883          63619
    df_show_err_find : $f837          63543
  df_show_err_linnum : $f86a          63594
    df_show_err_skip : $f83b          63547
               df_sp : $005f             95
          df_starend : $0074            116
         df_starstrt : $0072            114
         df_strbuffz : $0078            120
AS65 Assembler for R6502 [1.42].                                     Page   14
-------------------------------- bank\bank0.s --------------------------------

          df_stridxz : $0079            121
      df_str_src_end : $f410          62480
        df_st_malloc : $f70e          63246
df_st_typemismatcherr : $f6fa          63226
          df_syminiz : $0084            132
           df_symoff : $0083            131
           df_symtab : $0081            129
         df_tk_abort : $dedc          57052
           df_tk_add : $dedc          57052
          df_tk_addr : $deb9          57017
           df_tk_and : $dedc          57052
        df_tk_arrvar : $d895          55445
           df_tk_asc : $deaf          57007
           df_tk_asl : $dedc          57052
 df_tk_asm_addr_mode : $f993          63891
df_tk_asm_addr_mode_ok : $f982          63874
df_tk_asm_addr_mode_1 : $f9a8          63912
df_tk_asm_addr_mode_2 : $f9b2          63922
df_tk_asm_checknexttok : $f93b          63803
df_tk_asm_checktokch : $f93d          63805
        df_tk_asm_db : $de43          56899
        df_tk_asm_ds : $dee1          57057
        df_tk_asm_dw : $de43          56899
df_tk_asm_exec_parser : $f984          63876
df_tk_asm_foundsymend : $f963          63843
  df_tk_asm_matchtok : $f92d          63789
  df_tk_asm_mnemonic : $f922          63778
       df_tk_asm_opt : $dee1          57057
       df_tk_asm_org : $dee1          57057
df_tk_asm_parse_command : $f8ff          63743
df_tk_asm_parse_command_err : $f921          63777
df_tk_asm_parse_command_symbol : $f928          63784
  df_tk_asm_symfound : $f976          63862
df_tk_asm_symnextentry : $f954          63828
df_tk_asm_symnomatch : $f952          63826
  df_tk_asm_tokenjmp : $ff42          65346
        df_tk_assign : $ddec          56812
         df_tk_bload : $dee7          57063
          df_tk_body : $da01          55809
         df_tk_bsave : $def1          57073
          df_tk_call : $dece          57038
      df_tk_callproc : $dea3          56995
          df_tk_char : $d7ed          55277
      df_tk_char_err : $d795          55189
         df_tk_chdir : $dee1          57057
  df_tk_checknexttok : $da8d          55949
    df_tk_checktokch : $daaa          55978
           df_tk_chr : $deaf          57007
        df_tk_circle : $def1          57073
     df_tk_closebrkt : $deb4          57012
           df_tk_cls : $dedc          57052
        df_tk_colour : $def1          57073
       df_tk_comment : $ddf5          56821
  df_tk_comment_done : $de00          56832
         df_tk_const : $d82b          55339
     df_tk_const_err : $d84b          55371
df_tk_const_try_char : $d844          55364
 df_tk_const_try_num : $d83a          55354
 df_tk_const_try_str : $d83d          55357
        df_tk_cursor : $dee1          57057
          df_tk_data : $de43          56899
     df_tk_data_done : $de41          56897
AS65 Assembler for R6502 [1.42].                                     Page   15
-------------------------------- bank\bank0.s --------------------------------

           df_tk_dec : $deaf          57007
          df_tk_deek : $deaf          57007
           df_tk_def : $de87          56967
           df_tk_del : $dee1          57057
           df_tk_dim : $de69          56937
           df_tk_dir : $dedc          57052
           df_tk_div : $dedc          57052
          df_tk_doke : $dee7          57063
          df_tk_done : $da30          55856
       df_tk_elapsed : $deb9          57017
          df_tk_else : $dedc          57052
        df_tk_elseif : $dee1          57057
        df_tk_enddef : $dedc          57052
         df_tk_endif : $dedc          57052
           df_tk_eor : $dedc          57052
            df_tk_eq : $dedc          57052
         df_tk_error : $ddea          56810
      df_tk_errortab : $f769          63337
        df_tk_error2 : $dead          57005
   df_tk_error_atpos : $f810          63504
   df_tk_error_error : $f816          63510
  df_tk_error_inline : $f806          63494
   df_tk_exec_parser : $da52          55890
        df_tk_expect : $d789          55177
      df_tk_expectok : $d787          55175
    df_tk_expect_tok : $d797          55191
df_tk_expect_tok_err : $d7a2          55202
df_tk_expect_tok_fatal : $d7a7          55207
    df_tk_expression : $d994          55700
     df_tk_expre_err : $d99f          55711
     df_tk_expr_more : $de48          56904
           df_tk_for : $de8c          56972
   df_tk_foundsymend : $dad9          56025
           df_tk_get : $deaf          57007
       df_tk_get_buf : $d717          55063
  df_tk_get_buf_null : $d721          55073
            df_tk_gt : $dedc          57052
           df_tk_gte : $dedc          57052
         df_tk_hchar : $def1          57073
           df_tk_hex : $deaf          57007
         df_tk_himem : $dee1          57057
         df_tk_hires : $dedc          57052
            df_tk_if : $dee1          57057
           df_tk_imm : $f9c8          63944
      df_tk_indirect : $f9cb          63947
 df_tk_indirect_done : $f9f0          63984
    df_tk_indirect_y : $f9df          63967
           df_tk_ink : $dee1          57057
         df_tk_input : $de51          56913
       df_tk_isalpha : $d75a          55130
    df_tk_isalphanum : $d767          55143
 df_tk_isalpha_false : $d757          55127
         df_tk_isbin : $d73b          55099
    df_tk_isbin_true : $d744          55108
       df_tk_isdigit : $d730          55088
 df_tk_isdigit_false : $d739          55097
         df_tk_isEOS : $d9a6          55718
         df_tk_ishex : $d745          55109
   df_tk_ishex_false : $d757          55127
   df_tk_ishex_truep : $d755          55125
        df_tk_isproc : $d76d          55149
   df_tk_isproc_true : $d772          55154
AS65 Assembler for R6502 [1.42].                                     Page   16
-------------------------------- bank\bank0.s --------------------------------

          df_tk_isws : $d782          55170
    df_tk_isws_false : $d787          55175
          df_tk_left : $dec2          57026
           df_tk_len : $deaf          57007
          df_tk_line : $def9          57081
       df_tk_linenum : $da61          55905
        df_tk_lineto : $dee7          57063
    df_tk_line_empty : $da4e          55886
          df_tk_list : $de25          56869
df_tk_listp_procname : $de02          56834
df_tk_listp_procname_ch : $de11          56849
df_tk_listp_procname_err : $de23          56867
df_tk_listp_procname_ok : $de22          56866
     df_tk_list_done : $de35          56885
     df_tk_list_line : $de31          56881
    df_tk_list_procs : $de2a          56874
          df_tk_load : $dee1          57057
         df_tk_local : $de78          56952
      df_tk_localvar : $d87f          55423
 df_tk_localvar_cont : $d885          55429
           df_tk_lsr : $dedc          57052
            df_tk_lt : $dedc          57052
           df_tk_lte : $dedc          57052
      df_tk_matchtok : $da80          55936
df_tk_matchtok_skip_op : $daa6          55974
           df_tk_mem : $deaf          57007
           df_tk_mid : $dec8          57032
           df_tk_mod : $dedc          57052
       df_tk_monitor : $dedc          57052
          df_tk_mult : $dedc          57052
         df_tk_music : $def9          57081
         df_tk_narry : $d914          55572
     df_tk_narry_end : $d921          55585
         df_tk_nbrkt : $d926          55590
            df_tk_ne : $dedc          57052
           df_tk_new : $dedc          57052
          df_tk_next : $dedc          57052
     df_tk_next_expr : $de43          56899
           df_tk_nop : $d97f          55679
     df_tk_nop_false : $d93e          55614
       df_tk_not_eos : $d99e          55710
         df_tk_nterm : $d933          55603
    df_tk_nterm_cont : $d940          55616
    df_tk_nterm_done : $d93e          55614
     df_tk_nterm_err : $d97d          55677
    df_tk_nterm_proc : $d92e          55598
   df_tk_nterm_tryfn : $d94d          55629
df_tk_nterm_try_const : $d977          55671
df_tk_nterm_try_proc : $d963          55651
 df_tk_nterm_try_var : $d96f          55663
           df_tk_num : $d7a9          55209
       df_tk_num_bin : $d7d8          55256
       df_tk_num_err : $d795          55189
    df_tk_num_hexbin : $d7ca          55242
       df_tk_num_put : $d7e0          55264
            df_tk_or : $dedc          57052
         df_tk_paper : $dee1          57057
          df_tk_parm : $d86d          55405
 df_tk_parm_skip_var : $d87a          55418
    df_tk_parseerror : $da50          55888
 df_tk_parse_command : $d9c0          55744
df_tk_parse_command_done : $d9d6          55766
AS65 Assembler for R6502 [1.42].                                     Page   17
-------------------------------- bank\bank0.s --------------------------------

df_tk_parse_command_err : $d9d7          55767
df_tk_parse_user_proc : $d9b6          55734
          df_tk_peek : $deaf          57007
      df_tk_peek_buf : $d711          55057
         df_tk_pixel : $dec2          57026
       df_tk_pixmode : $dee1          57057
          df_tk_play : $def9          57081
          df_tk_plot : $def1          57073
         df_tk_point : $dee7          57063
          df_tk_poke : $dee7          57063
     df_tk_preassign : $ddda          56794
         df_tk_print : $de3c          56892
       df_tk_printat : $de36          56886
       df_tk_println : $de3c          56892
    df_tk_print_done : $de41          56897
          df_tk_proc : $d8a0          55456
     df_tk_proc_call : $d8dc          55516
    df_tk_proc_comma : $d8f6          55542
      df_tk_proc_err : $d912          55570
     df_tk_proc_errp : $d911          55569
   df_tk_proc_noparm : $d8ff          55551
    df_tk_proc_parms : $d8cf          55503
df_tk_proc_skip_args : $d90f          55567
df_tk_proc_skip_call : $d8e5          55525
  df_tk_put_overflow : $d72e          55086
       df_tk_put_tok : $d722          55074
          df_tk_read : $de5a          56922
         df_tk_renum : $def1          57073
        df_tk_repeat : $dedc          57052
         df_tk_reset : $dea5          56997
        df_tk_return : $dede          57054
         df_tk_right : $dec2          57026
           df_tk_rnd : $deaf          57007
          df_tk_rts1 : $d76c          55148
           df_tk_run : $dedc          57052
          df_tk_save : $dee1          57057
          df_tk_scrn : $dec2          57026
           df_tk_sgn : $deaf          57007
       df_tk_skip_ws : $d773          55155
    df_tk_skip_1_spc : $da14          55828
         df_tk_sound : $def1          57073
       df_tk_sprchar : $dee7          57063
        df_tk_sprhit : $deaf          57007
       df_tk_sprinit : $dedc          57052
     df_tk_spritepos : $def1          57073
      df_tk_sprmulti : $dee7          57063
        df_tk_sprpos : $def1          57073
        df_tk_sprupd : $dedc          57052
         df_tk_stick : $deb4          57012
           df_tk_str : $d809          55305
        df_tk_str_ch : $d811          55313
       df_tk_str_don : $d822          55330
       df_tk_str_err : $d829          55337
           df_tk_sub : $dedc          57052
      df_tk_symfound : $daea          56042
df_tk_symfound_final : $dafa          56058
  df_tk_symnextentry : $daca          56010
    df_tk_symnomatch : $dac8          56008
   df_tk_symnomatchp : $dac7          56007
          df_tk_text : $dedc          57052
         df_tk_tload : $dee1          57057
      df_tk_tokenjmp : $dca0          56480
AS65 Assembler for R6502 [1.42].                                     Page   18
-------------------------------- bank\bank0.s --------------------------------

     df_tk_tokentype : $dd68          56680
df_tk_tok_expression : $d9a0          55712
    df_tk_try_assign : $da2b          55851
   df_tk_try_command : $da26          55846
         df_tk_tsave : $dee1          57057
         df_tk_until : $dee1          57057
           df_tk_val : $deaf          57007
           df_tk_var : $d84d          55373
      df_tk_variable : $ddcc          56780
        df_tk_var_ck : $d863          55395
      df_tk_var_cont : $d853          55379
    df_tk_var_noarry : $d827          55335
         df_tk_vpeek : $deaf          57007
          df_tk_wait : $dee1          57057
          df_tk_wend : $dedc          57052
         df_tk_while : $dee1          57057
      df_tk_ws_loop1 : $d773          55155
        df_tk_2parms : $dee7          57063
        df_tk_3parms : $def1          57073
        df_tk_4parms : $def9          57081
          df_tmpptra : $00a1            161
          df_tmpptrb : $00a3            163
          df_tmpptrc : $00a5            165
          df_tmpptrd : $00a7            167
          df_tmpptre : $00a9            169
              df_tok : $0480           1152
          df_tokbuff : $0480           1152
        df_tokensyms : $db02          56066
           df_tokoff : $007d            125
       df_trap_error : $f81d          63517
  df_trap_go_monitor : $f832          63538
     df_trap_monitor : $f8ab          63659
      df_trap_normal : $f835          63541
           df_varcnt : $0071            113
      df_var_analyse : $d64b          54859
df_var_analyse_chk_arry : $d692          54930
df_var_analyse_chk_dollar : $d683          54915
df_var_analyse_chk_post : $d683          54915
  df_var_analyse_err : $d679          54905
df_var_analyse_fatal_err : $d681          54913
   df_var_analyse_ok : $d6d8          55000
   df_var_check_type : $d5c0          54720
         df_var_find : $d586          54662
   df_var_findcreate : $d6ac          54956
df_var_findcreate_copy : $d6fa          55034
df_var_findcreate_create : $d6c5          54981
df_var_findcreate_err : $d6d6          54998
df_var_findcreate_errp : $d6d5          54997
df_var_findcreate_found : $d6be          54974
  df_var_find_no_vnt : $d5e4          54756
    df_var_find_true : $d5e9          54761
df_var_initialise_var : $d6e5          55013
 df_var_insert_space : $d5f1          54769
    df_var_match_vnt : $d596          54678
 df_var_match_vnt_do : $d5a2          54690
df_var_match_vnt_sym : $d5a6          54694
    df_var_move_byte : $d613          54803
 df_var_move_byte_do : $d61f          54815
df_var_move_byte_fin : $d630          54832
     df_var_not_arry : $d6a3          54947
     df_var_not_proc : $d65d          54877
df_var_type_countlen : $d660          54880
AS65 Assembler for R6502 [1.42].                                     Page   19
-------------------------------- bank\bank0.s --------------------------------

df_var_type_countlen_alphanum : $d670          54896
df_var_type_countlen_done : $d675          54901
df_var_vnt_entry_end : $d5d1          54737
df_var_vnt_sym_nomatch : $d5c4          54724
     df_var_zero_vnt : $d6f1          55025
           df_vntend : $006b            107
          df_vntstrt : $0069            105
           df_vvtend : $006f            111
          df_vvtstrt : $006d            109
               errno : $005d             93
 fd_cload_getname_pc : $c55f          50527
 fd_csave_getname_pc : $c5b4          50612
     fd_getname_addr : $0400           1024
               grc_d : $0043             67   *
               grc_r : $003f             63   *
               grc_x : $0040             64   *
              grc_x0 : $003d             61   *
               grc_y : $0042             66   *
              grc_y0 : $003e             62   *
              grl_dx : $0041             65   *
              grl_dy : $0042             66   *
               grl_p : $004b             75   *
            grl_sinx : $004a             74   *
            grl_siny : $004d             77   *
            grl_xyyx : $0043             67   *
              grl_x0 : $003d             61   *
              grl_x1 : $003f             63   *
              grl_y0 : $003e             62   *
              grl_y1 : $0040             64   *
             grl_2dx : $0044             68   *
            grl_2dxy : $0048             72   *
             grl_2dy : $0046             70   *
             gr_char : $0003              3
  gr_check_font_copy : $cd17          52503
gr_check_font_copy_done : $cd2e          52526
           gr_circle : $d106          53510
      gr_circle_done : $d143          53571
    gr_circle_d_lte0 : $d136          53558
      gr_circle_plot : $d113          53523
    gr_circle_points : $d144          53572
              gr_cls : $ce02          52738
          gr_cls_col : $ce22          52770
          gr_cls_row : $ce0e          52750
    gr_cls_skip_marg : $ce1e          52766
        gr_copy_byte : $ccee          52462
         gr_copy_mem : $cce4          52452
         gr_cur_down : $cf47          53063
         gr_cur_left : $cf29          53033
          gr_cur_ptr : $000c             12
        gr_cur_right : $cf17          53015
  gr_cur_skip_at_bot : $cf53          53075
 gr_cur_skip_at_left : $cf38          53048
   gr_cur_skip_at_tl : $cf3c          53052
           gr_cur_up : $cf3d          53053
            gr_cur_x : $000a             10
            gr_cur_y : $000b             11
              gr_del : $cf54          53076
       gr_geom_fill1 : $0007              7
         gr_geom_tmp : $0015             21
        gr_geom_tmp2 : $0017             23
              gr_get : $ce69          52841
       gr_getXY_base : $ce46          52806
AS65 Assembler for R6502 [1.42].                                     Page   20
-------------------------------- bank\bank0.s --------------------------------

          gr_get_key : $cf5c          53084
        gr_get_key_2 : $cf60          53088
            gr_hchar : $d015          53269
   gr_hchar_copyline : $d06d          53357
gr_hchar_copyline_eor : $d083          53379
gr_hchar_copyline_erase : $d093          53395
gr_hchar_copyline_nx : $d0a8          53416
    gr_hchar_getfont : $d048          53320
       gr_hchar_mask : $d040          53312
    gr_hchar_rot1bit : $d052          53330
gr_hchar_rot1bit_bcc : $d05d          53341
 gr_hchar_rot1bit_nx : $d062          53346
            gr_hcode : $cffb          53243
       gr_hcode_loop : $d001          53249
          gr_hires_x : $0010             16
          gr_hires_y : $0011             17
         gr_hi_start : $0001              1
             gr_init : $ccfe          52478
        gr_init_font : $ccce          52430
        gr_init_geom : $cd2f          52527
   gr_init_geom_done : $cd2e          52526
       gr_init_hires : $cd85          52613
gr_init_hires_tables : $cdbe          52670
  gr_init_screen_txt : $cd6c          52588
     gr_init_tab_col : $cdea          52714
gr_init_tab_col_skip : $cdfc          52732
     gr_init_tab_row : $cdc8          52680
              gr_ink : $0012             18
    gr_key_check_key : $cf6c          53100
      gr_key_got_key : $cf83          53123
       gr_key_no_key : $cf8e          53134
    gr_key_skip_copy : $cf74          53108
      gr_key_tidy_up : $cf85          53125
             gr_line : $d1bc          53692
        gr_line_done : $d296          53910
       gr_line_neg_p : $d286          53894
       gr_line_pixel : $d24f          53839
 gr_line_skip_dx_neg : $d1da          53722
 gr_line_skip_dy_neg : $d1e7          53735
   gr_line_skip_left : $d217          53783
gr_line_skip_xy_swap : $d207          53767
   gr_line_skip_y_up : $d21f          53791
     gr_line_yx_skip : $d25b          53851
           gr_margin : $0014             20
             gr_mode : $0000              0
           gr_new_ln : $ceff          52991
       gr_nl_skip_nl : $cf14          53012
       gr_no_special : $cfa3          53155
      gr_offset_40hi : $d2b3          53939
      gr_offset_40lo : $d297          53911
            gr_paper : $0013             19
            gr_pitch : $000f             15
            gr_pixel : $d0cf          53455
          gr_pixmode : $000e             14
             gr_plot : $ce56          52822
            gr_point : $d0d5          53461
       gr_point_done : $d105          53509
        gr_point_eor : $d101          53505
      gr_point_setup : $d0b7          53431
  gr_point_skip_attr : $d0f7          53495
      gr_point_write : $d103          53507
        gr_printable : $cfc7          53191
AS65 Assembler for R6502 [1.42].                                     Page   21
-------------------------------- bank\bank0.s --------------------------------

        gr_print_msg : $cfe6          53222
   gr_print_msg_done : $cff6          53238
   gr_print_msg_loop : $cfec          53228
  gr_process_special : $cfac          53164
              gr_put : $ce5e          52830
         gr_put_byte : $cf92          53138
     gr_put_byte_low : $cfa4          53156
           gr_screen : $0018             24
         gr_scrngeom : $0011             17
    gr_scrngeom_base : $cd3e          52542
   gr_scrngeom_hires : $cd53          52563
    gr_scrngeom_text : $cd44          52548
      gr_scroll_char : $cec1          52929
    gr_scroll_cpy_ln : $cebe          52926
  gr_scroll_erase_ln : $cef5          52981
      gr_scroll_marg : $cef1          52977
   gr_scroll_routine : $cf08          53000
        gr_scroll_up : $cea2          52898
          gr_set_cur : $ce6f          52847
     gr_set_cur_init : $ce70          52848
     gr_set_cur_skip : $ce82          52866
    gr_set_hires_cur : $d0ca          53450
       gr_special_ch : $cfcd          53197
    gr_special_fn_hi : $cfde          53214
    gr_special_fn_lo : $cfd6          53206
     gr_special_loop : $cfb0          53168
         gr_spr_char : $d342          54082
         gr_spr_draw : $d321          54049
    gr_spr_draw_loop : $d323          54051
    gr_spr_draw_next : $d32f          54063
        gr_spr_erase : $d2dd          53981
     gr_spr_erase_do : $d2e5          53989
   gr_spr_erase_loop : $d2df          53983
   gr_spr_erase_next : $d2eb          53995
          gr_spr_hit : $d348          54088
         gr_spr_init : $d2cf          53967
    gr_spr_init_loop : $d2d1          53969
   gr_spr_multi_loop : $d363          54115
    gr_spr_multi_pos : $d35f          54111
          gr_spr_new : $d2ef          53999
     gr_spr_new_loop : $d2f1          54001
     gr_spr_new_next : $d31d          54045
          gr_spr_pos : $d352          54098
          gr_spr_put : $d333          54067
           gr_text_h : $0009              9
       gr_text_start : $0005              5
           gr_text_w : $0008              8
              HICHAR : $9800          38912   *
              HISCRN : $a000          40960   *
              HITEXT : $bf68          49000   *
          hex_to_bcd : $c34e          49998
           hires_col : $9d90          40336   *
          hires_mask : $9e80          40576   *
        hires_row_hi : $9cc8          40136   *
       hires_row_low : $9c00          39936   *
                 IER : $000e             14   *
                 IFR : $000d             13   *
             IFR_CA1 : $0002              2   *
             IFR_CA2 : $0001              1   *
             IFR_CB1 : $0010             16   *
                IO_0 : $0300            768   *
         ijk_prepare : $c76e          51054
AS65 Assembler for R6502 [1.42].                                     Page   22
-------------------------------- bank\bank0.s --------------------------------

         ijk_release : $c784          51076
       inc_kb_timers : $c150          49488
            infinity : $c07e          49278
                init : $c4ac          50348
            init_irq : $c0b7          49335
       init_keyboard : $c73a          51002
            init_ram : $c4d8          50392
       init_ram_fill : $c4e5          50405
       init_ram_skip : $c4ea          50410
          init_ram_1 : $c4e1          50401
            init_snd : $d499          54425
       init_snd_regs : $d49b          54427
       init_tape_tab : $c522          50466
           init_via0 : $c4f8          50424
      init_via0_done : $c50a          50442
      init_via0_loop : $c4fa          50426
       init_via0_tab : $c50b          50443
      init_via0_tape : $c4f5          50421
              init_2 : $c4b1          50353
             int_div : $d523          54563
       int_div_cycle : $d555          54613
      int_div_noflip : $d585          54661
        int_div_skip : $d56f          54639
   int_div_skip_negA : $d53a          54586
   int_div_skip_negB : $d54d          54605
       int_fast_mult : $d4cf          54479
 int_fast_mult_cycle : $d4df          54495
  int_fast_mult_next : $d4f0          54512
            int_mult : $d4f8          54520
      int_mult_cycle : $d508          54536
       int_mult_next : $d51b          54555
             int_str : $c3b7          50103
          int_to_str : $c398          50072
       int_to_str_ch : $c383          50051
   int_to_str_ch_fin : $c397          50071
      int_to_str_fin : $c3d6          50134
       int_to_str_nz : $c390          50064
 int_to_str_skip_neg : $c3b2          50098
         int_vdp_fin : $c145          49477
     int_vdp_handler : $c12a          49450
    io_active_device : $c3fe          50174
          io_address : $0300            768
            io_block : $0601           1537
           io_buf_sz : $c48a          50314
            io_close : $c430          50224
          io_close_f : $0008              8
        io_copy_data : $c40b          50187
          io_default : $0600           1536
           io_delete : $c433          50227
            io_del_f : $000a             10
          io_devices : $c48c          50316
          io_device0 : $c48c          50316
          io_device1 : $c49c          50332
          io_do_echo : $c453          50259
             io_ext1 : $000c             12
             io_ext2 : $000e             14
         io_get_byte : $0000              0
           io_get_ch : $c424          50212
    io_get_line_byte : $c440          50240
    io_get_line_done : $c46d          50285
             io_init : $c3f3          50163
          io_null_op : $c488          50312
AS65 Assembler for R6502 [1.42].                                     Page   23
-------------------------------- bank\bank0.s --------------------------------

        io_open_ext1 : $c436          50230
        io_open_ext2 : $c439          50233
           io_open_r : $0004              4
        io_open_read : $c42a          50218
           io_open_w : $0006              6
       io_open_write : $c42d          50221
       io_print_done : $c486          50310
       io_print_line : $c475          50293
  io_print_line_byte : $c47c          50300
         io_put_byte : $0002              2
           io_put_ch : $c427          50215
        io_read_line : $c43c          50236
      io_set_default : $c3fb          50171
        io_skip_echo : $c456          50262
     io_skip_special : $c461          50273
           io_struct : $0010             16
                 irq : $c0db          49371
             irq_brk : $c0fd          49405
             irq_fin : $c0f7          49399
           KB_CAPSLK : $0001              1   *
         KB_DEBOUNCE : $0001              1   *
              KB_IJK : $0020             32   *
              KB_PRB : $00b0            176   *
          KB_REP_DEL : $0014             20   *
          KB_REP_TIM : $0003              3   *
            KB_SENSE : $0008              8   *
          kb_any_key : $c7e9          51177
     kb_any_key_none : $c809          51209
  kb_any_key_pressed : $c80b          51211
      kb_any_key_row : $c7f0          51184
              kb_brk : $c901          51457
 kb_check_matrix_col : $c825          51237
 kb_check_matrix_row : $c827          51239
      kb_check_skip4 : $c84d          51277
             kb_code : $002b             43
         kb_col_mask : $c9a1          51617
              kb_deb : $002d             45
          kb_deb_tim : $002e             46
        kb_do_repeat : $c8f1          51441
          kb_get_key : $c903          51459
          kb_get_try : $c907          51463
          kb_ijk_map : $c9ae          51630
        kb_in_repeat : $c8fd          51453
             kb_last : $002a             42
          kb_no_scan : $c882          51330
      kb_process_new : $c890          51344
              kb_raw : $0029             41
         kb_rdel_tim : $0031             49
         kb_read_got : $c80b          51211
     kb_read_noshift : $c8bd          51389
     kb_read_nothing : $c858          51288
         kb_read_raw : $c80d          51213
   kb_read_raw_force : $c812          51218
     kb_read_raw_got : $c85c          51292
              kb_rep : $002f             47
          kb_rep_tim : $0030             48
      kb_scan_decode : $c886          51334
     kb_scan_got_key : $c918          51480
         kb_scan_key : $c86b          51307
        kb_skip_ctrl : $c8d9          51417
             kb_stat : $002c             44
            kb_stick : $c78d          51085
AS65 Assembler for R6502 [1.42].                                     Page   24
-------------------------------- bank\bank0.s --------------------------------

        kb_stick_ijk : $c7bb          51131
       kb_stick_mask : $c9a9          51625
        kb_stick_pos : $c7a2          51106
       kb_store_last : $c8f9          51449
      kb_table_shift : $c961          51553
        kb_table_std : $c921          51489
         kernel_init : $c4ba          50362
         kernel_test : $c4d7          50391
                main : $c077          49271
           mem_start : $0713           1811
        mod_sz_asm_e : $ff5f          65375
        mod_sz_asm_s : $f8ff          63743
       mod_sz_bios_e : $d4cf          54479
       mod_sz_bios_s : $c000          49152
        mod_sz_cia_e : $c531          50481
        mod_sz_cia_s : $c4f5          50421
      mod_sz_dflat_e : $f769          63337
      mod_sz_dflat_s : $d586          54662
      mod_sz_graph_e : $d373          54131
      mod_sz_graph_s : $c9ce          51662
         mod_sz_io_e : $c4ac          50348
         mod_sz_io_s : $c3f3          50163
     mod_sz_kernel_e : $c4f5          50421
     mod_sz_kernel_s : $c000          49152
   mod_sz_language_e : $ff5f          65375
   mod_sz_language_s : $d4cf          54479
       mod_sz_proc_e : $f689          63113
       mod_sz_proc_s : $f526          62758
   mod_sz_progedit_e : $e075          57461
   mod_sz_progedit_s : $df04          57092
      mod_sz_rtasm_e : $fcf4          64756
      mod_sz_rtasm_s : $f9f2          63986
     mod_sz_rtsubs_e : $f526          62758
     mod_sz_rtsubs_s : $e63d          58941
    mod_sz_runtime_e : $f689          63113
    mod_sz_runtime_s : $e075          57461
      mod_sz_sound_e : $d4cf          54479
      mod_sz_sound_s : $d482          54402
     mod_sz_sprite_e : $d373          54131
     mod_sz_sprite_s : $d2cf          53967
      mod_sz_tkasm_e : $f9f2          63986
      mod_sz_tkasm_s : $f8ff          63743
   mod_sz_tokenise_e : $df04          57092
   mod_sz_tokenise_s : $d711          55057
    mod_sz_toksubs_e : $df04          57092
    mod_sz_toksubs_s : $ddcc          56780
        mod_sz_var_e : $d711          55057
        mod_sz_var_s : $d586          54662
          msg_errmsg : $d47f          54399
     msg_hello_world : $c081          49281
           msg_ready : $d47d          54397
             NUM_ANY : $0000              0   *
             NUM_BIN : $0003              3   *
             NUM_DEC : $0001              1   *
             NUM_HEX : $0002              2   *
                 nmi : $c4f4          50420
        null_handler : $c0da          49370
            null_irq : $c0d9          49369
               num_a : $003d             61
               num_b : $0041             65
             num_buf : $004d             77
             num_tmp : $0049             73
AS65 Assembler for R6502 [1.42].                                     Page   25
-------------------------------- bank\bank0.s --------------------------------

               num_x : $0045             69
                 PCR : $000c             12   *
                 PRA : $0001              1   *
                PRAH : $000f             15   *
                 PRB : $0000              0   *
        print_a_to_d : $c3e2          50146
     print_a_to_d_ch : $c3e7          50151
    print_a_to_d_fin : $c3f2          50162
           SND_ADBUS : $030f            783   *
        SND_DESELECT : $00dd            221   *
            SND_MODE : $030c            780   *
       SND_REG_CHAPH : $0001              1   *
       SND_REG_CHAPL : $0000              0   *
      SND_REG_CHAVOL : $0008              8   *
       SND_REG_CHBPH : $0003              3   *
       SND_REG_CHBPL : $0002              2   *
      SND_REG_CHBVOL : $000a             10   *
       SND_REG_CHCPH : $0005              5   *
       SND_REG_CHCPL : $0004              4   *
        SND_REG_CHNP : $0006              6   *
         SND_REG_CTL : $0007              7   *
      SND_REG_ENVCYC : $000d             13   *
       SND_REG_ENVPH : $000c             12   *
       SND_REG_ENVPL : $000b             11   *
         SND_REG_IOA : $000e             14   *
         SND_REG_IOB : $000f             15   *
         SND_SELREAD : $00df            223   *
      SND_SELSETADDR : $00ff            255   *
        SND_SELWRITE : $00fd            253   *
                  SR : $000a             10   *
               SWBRK : <macro>
             scratch : $0613           1555
          skip_a_f_1 : $c18e          49550
          skip_a_f_2 : $c19d          49565
         skip_kb_deb : $c156          49494
         skip_kb_rep : $c15c          49500
          skip_x_f_1 : $c1a9          49577
          skip_x_f_2 : $c1be          49598
        snd_get_note : $d482          54402
    snd_get_note_oct : $d48d          54413
        snd_init_tab : $d4a5          54437
       snd_music_tab : $d4b5          54453
       snd_note_done : $d496          54422
         snd_sel_reg : $c04e          49230
             snd_set : $c06e          49262
         snd_set_reg : $c05e          49246
        spr_baseadrh : $b4e0          46304   *
        spr_baseadrl : $b4c0          46272   *
            spr_bgnd : $b4a0          46240   *
             spr_chr : $b480          46208   *
            spr_curX : $b400          46080   *
            spr_curY : $b440          46144   *
            spr_newX : $b420          46112   *
            spr_newY : $b460          46176   *
          str_a_to_x : $c182          49538
   str_d_digits_done : $c2be          49854
         str_d_error : $c26a          49770
      str_d_find_end : $c279          49785
     str_d_found_end : $c286          49798
        str_d_powers : $c2db          49883
 str_d_process_digit : $c294          49812
      str_d_skip_neg : $c2d5          49877
AS65 Assembler for R6502 [1.42].                                     Page   26
-------------------------------- bank\bank0.s --------------------------------

          str_x_to_a : $c19e          49566
      str_x_to_a_err : $c1c9          49609
     str_x_to_a_errl : $c1c8          49608
           TAPE_RATE : $00d0            208   *
            TEXTCHAR : $b400          46080   *
            TEXTSCRN : $bb80          48000   *
         TIMER1_RATE : $4e20          20000   *
                T1CH : $0005              5   *
                T1CL : $0004              4   *
                T1LH : $0007              7   *
                T1LL : $0006              6   *
                T2CH : $0009              9   *
                T2CL : $0008              8   *
             tmp_ahi : $0033             51
             tmp_alo : $0032             50
           tmp_bank1 : $0000              0
           tmp_bank2 : $0001              1
             tmp_bhi : $0035             53
             tmp_blo : $0034             52
             tmp_chi : $0037             55
             tmp_clo : $0036             54
               tmp_d : $0038             56
            tp_back4 : $c542          50498
            tp_block : $0055             85
        tp_block_gap : $c66c          50796
      tp_block_gap_1 : $c670          50800
              tp_buf : $0200            512
            tp_close : $c592          50578
   tp_close_no_flush : $c59b          50587
            tp_delay : $0059             89
             tp_flag : $0058             88
        tp_get_block : $c6ec          50924
  tp_get_block_bytes : $c6fd          50941
         tp_get_byte : $c6cf          50895
     tp_get_byte_buf : $c6dc          50908
        tp_get_fname : $c578          50552
  tp_get_fname_start : $c569          50537
       tp_get_header : $c572          50546
              tp_idx : $0057             87
             tp_init : $c547          50503
         tp_io_error : $c738          51000
       tp_open_bread : $c55f          50527
      tp_open_bwrite : $c5aa          50602
      tp_open_common : $c54f          50511
         tp_open_msg : $c531          50481
        tp_open_read : $c55f          50527
       tp_open_write : $c5b0          50608
 tp_open_write_start : $c5b4          50612
      tp_print_block : $c64c          50764
        tp_put_block : $c628          50728
  tp_put_block_bytes : $c63e          50750
         tp_put_byte : $c5f6          50678
    tp_put_byte_done : $c619          50713
        tp_put_delay : $c620          50720
         tp_read_bit : $c71f          50975
     tp_read_bit_cb1 : $c723          50979
        tp_read_byte : $c70b          50955
   tp_read_byte_bits : $c717          50967
     tp_read_byte_st : $c70b          50955
         tp_save_msg : $c53a          50490
        tp_write_bit : $c69a          50842
   tp_write_bit_chk1 : $c6ab          50859
AS65 Assembler for R6502 [1.42].                                     Page   27
-------------------------------- bank\bank0.s --------------------------------

   tp_write_bit_chk2 : $c6c3          50883
     tp_write_bit_t1 : $c6ba          50874
       tp_write_byte : $c677          50807
   tp_write_byte_bit : $c683          50819
tp_write_byte_nodelay : $c698          50840
      tp_write_fname : $c5e8          50664
     tp_write_header : $c5df          50655
     tt_csave_end_pc : $c5a8          50600
   tt_getsync_end_pc : $c591          50577
  tt_getsync_loop_pc : $c723          50979
       tt_getsync_pc : $c591          50577
   tt_putbyte_end_pc : $c699          50841
       tt_putbyte_pc : $c677          50807
  tt_readbyte_end_pc : $c71e          50974
      tt_readbyte_pc : $c70b          50955
tt_writeleader_end_pc : $c5d0          50640
   tt_writeleader_pc : $c5d0          50640
     twos_complement : $c33f          49983
twos_complement_skip_X : $c34d          49997
             UTF_ACK : $0001              1   *
             UTF_BEL : $0007              7   *
             UTF_BRK : $001a             26   *
              UTF_CR : $000d             13   *
             UTF_DEL : $007f            127   *
             UTF_ETX : $0003              3   *
              UTF_FF : $000c             12   *
         UTF_SPECIAL : $0020             32   *
       update_timers : $c146          49478
          utilPrintA : $c16d          49517
       utilPrintCRLF : $c165          49509
        utilPrintSPC : $c15d          49501
           VDP_FLASH : $0010             16   *
           vdp_blank : $0010             16
             vdp_cnt : $0008              8
          vdp_cnt_hi : $0009              9
         vdp_cnt_hi2 : $000a             10
          vdp_curcnt : $000c             12
          vdp_curoff : $000d             13
         vdp_curstat : $000e             14
          vdp_curtim : $000b             11
          vdp_curval : $000f             15
  vdp_fill_vram_loop : $cda6          52646
 vdp_fill_vram_noinc : $cdae          52654
            vdp_font : $c9ce          51662
          vdp_font_a : $cad6          51926
             vec_brk : $0004              4
             vec_irq : $0002              2
        vec_usercia0 : $0006              6
             zp_tmp1 : $00ab            171
             zp_tmp2 : $00ac            172
             zp_tmp3 : $00ad            173
             zp_tmp4 : $00ae            174
             ztmp_24 : $003d             61
          _adcZPByte : <macro>
          _addZPWord : <macro>
                _bcc : <macro>
                _bcs : <macro>
           _code_end : $ff5f          65375
         _code_start : $c000          49152
          _cpu_stack : $0100            256
          _cpyZPWord : <macro>
              _debug : <macro>
AS65 Assembler for R6502 [1.42].                                     Page   28
-------------------------------- bank\bank0.s --------------------------------

          _decZPWord : <macro>
         _decZPWordA : <macro>
      _end_zero_page : $00af            175
          _incZPWord : <macro>
       _mod_sz_cmd_e : $d482          54402
       _mod_sz_cmd_s : $d373          54131
       _PushFalseJmp : <macro>
        _PushTrueJmp : <macro>
             _printA : <macro>
             _printC : <macro>
            _printCA : <macro>
          _printCRLF : <macro>
            _println : <macro>
        _println_low : <macro>
          _printmsgA : <macro>
            _pullAXY : <macro>
            _pushAXY : <macro>
         _rom_vec_0a : $c01e          49182
         _rom_vec_0b : $c021          49185
         _rom_vec_0c : $c024          49188
         _rom_vec_0d : $c027          49191
         _rom_vec_0e : $c02a          49194
         _rom_vec_0f : $c02d          49197
         _rom_vec_00 : $c000          49152
         _rom_vec_01 : $c003          49155
         _rom_vec_02 : $c006          49158
         _rom_vec_03 : $c009          49161
         _rom_vec_04 : $c00c          49164
         _rom_vec_05 : $c00f          49167
         _rom_vec_06 : $c012          49170
         _rom_vec_07 : $c015          49173
         _rom_vec_08 : $c018          49176
         _rom_vec_09 : $c01b          49179
         _rom_vec_10 : $c030          49200
         _rom_vec_11 : $c033          49203
         _rom_vec_12 : $c036          49206
         _rom_vec_13 : $c039          49209
         _rom_vec_14 : $c03c          49212
         _rom_vec_15 : $c03f          49215
         _rom_vec_16 : $c042          49218
         _rom_vec_17 : $c045          49221
         _rom_vec_18 : $c048          49224
         _rom_vec_19 : $c04b          49227
          _sbcZPByte : <macro>
            _sendcmd : <macro>
          _subZPWord : <macro>
            __6502__ : $0001              1

1693 labels used

15918 lines read, no errors in pass 1.
AS65 Assembler for R6502 [1.42].                                     Page   29
-------------------------------- bank\bank0.s --------------------------------

c000 =                       	org 0xc000
c000 :                       mod_sz_bios_s
                             	include "kernel/kernel.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  KERNEL.S
                             ;*	Lol, I thought this would become more sophisti
                             ;*	hence the name 'kernel'. But no, it just initi
                             ;*	memory, VIA, sound and screen, before passing 
                             ;*	to main.
                             ;*	References to banks etc. are from ported code 
                             ;*	did do more stuff, namely helping with ROM ban
                             ;*
                             ;************************************************
                             
                             ;* Include all definition and code files in the r
                             	include "inc/includes.i"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  INCLUDES.S
                             ;*  Main include file for key definitions and mac
                             ;*  Many of the settings here are exremely machin
                             ;*  Defines : IO block addresses, VIA port usage,
                             ;*  settings, useful macros, sound chip registers
                             ;*  and ACIA registers.
                             ;*	Of course the Oric doesn't have a VDP or an AC
                             ;*	so this file could be optimised.
                             ;*
                             ;************************************************
                             
                             ;* The IO block is at 0x0300
0300 =                       IO_0		= 0x0300
                             
0010 =                       VDP_FLASH	= 16				;* 32/50 second flash
                             
4e20 =                       TIMER1_RATE	= 1000000 / 50		;* 50 times per secon
00d0 =                       TAPE_RATE	= 0xd0				;* Assumed required FM freque
                             
                             ;* Standard definitions of 6522 registers
                             ;* As found in the datasheets
0000 =                       PRB			= 0x00
0001 =                       PRA			= 0x01
0002 =                       DDRB		= 0x02
0003 =                       DDRA		= 0x03
0004 =                       T1CL		= 0x04
0005 =                       T1CH		= 0x05
0006 =                       T1LL		= 0x06
0007 =                       T1LH		= 0x07
0008 =                       T2CL		= 0x08
0009 =                       T2CH		= 0x09
AS65 Assembler for R6502 [1.42].                                     Page   30
-------------------------------- bank\bank0.s --------------------------------

000a =                       SR			= 0x0a
000b =                       ACR			= 0x0b
000c =                       PCR			= 0x0c
000d =                       IFR			= 0x0d
000e =                       IER			= 0x0e
000f =                       PRAH		= 0x0f
                             
0001 =                       IFR_CA2		= 0x01
0002 =                       IFR_CA1		= 0x02
0010 =                       IFR_CB1		= 0x10
                             
                             ;* AY-3-8912 definitions
                             ;* The sound chip is accessed through VIA Port A
030f =                       SND_ADBUS	= IO_0+PRAH
030c =                       SND_MODE	= IO_0+PCR
                             
                             ; Values for the PCR register - always enable CB1
00df =                       SND_SELREAD			= 0b11011111		; CB2=low, CA2=high
00fd =                       SND_SELWRITE		= 0b11111101		; CB2=high, CA2=low
00ff =                       SND_SELSETADDR		= 0b11111111		; CB2=high, CA2=hig
00dd =                       SND_DESELECT		= 0b11011101		; CB2=low,CA2=low
                             
0000 =                       SND_REG_CHAPL	= 0x00
0001 =                       SND_REG_CHAPH	= 0x01
0002 =                       SND_REG_CHBPL	= 0x02
0003 =                       SND_REG_CHBPH	= 0x03
0004 =                       SND_REG_CHCPL	= 0x04
0005 =                       SND_REG_CHCPH	= 0x05
0006 =                       SND_REG_CHNP	= 0x06
0007 =                       SND_REG_CTL		= 0x07
0008 =                       SND_REG_CHAVOL	= 0x08
0009 =                       SND_REG_CHBVOL	= 0x09
000a =                       SND_REG_CHBVOL	= 0x0a
000b =                       SND_REG_ENVPL	= 0x0b
000c =                       SND_REG_ENVPH	= 0x0c
000d =                       SND_REG_ENVCYC	= 0x0d
                             
000e =                       SND_REG_IOA	= 0x0e
000f =                       SND_REG_IOB	= 0x0f
                             
                             
                             ;* Port B
00b0 =                       KB_PRB		= 0xb0			; Upper nibble of PRB default st
0008 =                       KB_SENSE	= 0x08			; Input - Bit 3 port A
0001 =                       KB_CAPSLK	= 0x01			; Id of Caps Lock
0020 =                       KB_IJK		= 0b00100000	; IJK joystick detect bit
                             
0003 =                       KB_REP_TIM	= 3 			; Number of VB periods for the 
0014 =                       KB_REP_DEL	= 20			; Number of VB periods before r
0001 =                       KB_DEBOUNCE	= 1				; Number of VB periods before 
                             
0003 =                       UTF_ETX		= 0x03			; Break character
0007 =                       UTF_BEL		= 0x07
0008 =                       CRSR_LEFT	= 0x08
0009 =                       CRSR_RIGHT	= 0x09
000a =                       CRSR_DOWN	= 0x0a
000b =                       CRSR_UP		= 0x0b
0014 =                       CTRL_CAPS	= 0x14			; CTRL-T to toggle caps
0001 =                       UTF_ACK		= 0x01			; Used for the CTRL-A copy in t
000c =                       UTF_FF		= 0x0c
000d =                       UTF_CR		= 0x0d
001a =                       UTF_BRK		= 0x1a			; Debug - drop in to monitor
AS65 Assembler for R6502 [1.42].                                     Page   31
-------------------------------- bank\bank0.s --------------------------------

007f =                       UTF_DEL		= 0x7f
0020 =                       UTF_SPECIAL = 0x20
                             
0000 =                       CMD_ERR_NOERROR			= 0x00
0001 =                       CMD_ERR_NOTFOUND		= 0x01
0002 =                       CMD_ERR_PARM			= 0x02
0003 =                       CMD_ERR_VAL				= 0x03
                             
                             ;* Number formats for conversion routines
0000 =                       NUM_ANY		= 0x00
0001 =                       NUM_DEC		= 0x01
0002 =                       NUM_HEX		= 0x02
0003 =                       NUM_BIN		= 0x03
                             
                             	
                             
                             ;* USEFUL MACROS HERE
                             
                             ;* Software break to throw errors
                             ;* use like this : SWBRK XX
                             ;* Where XX is the error code
                             SWBRK macro sig
                             	brk
                             	db sig
                             	endm
                             
                             _pushAXY macro
                             	pha
                             	sta tmp_d
                             	txa
                             	pha
                             	tya
                             	pha
                             	lda tmp_d
                             	endm
                             
                             _pullAXY macro
                             	pla
                             	tay
                             	pla
                             	tax
                             	pla
                             	endm
                             
                             _println macro msg
                             	_pushAXY
                             	ldx #lo(msg)
                             	lda #hi(msg)
                             	jsr io_print_line
                             	_pullAXY
                             	endm
                             
                             _println_low macro msg
                             	ldx #lo(msg)
                             	lda #hi(msg)
                             	jsr io_print_line
                             	endm
                             
                             _printmsgA macro msg
                             	_pushAXY
                             	ldx #lo(msg)
                             	lda #hi(msg)
AS65 Assembler for R6502 [1.42].                                     Page   32
-------------------------------- bank\bank0.s --------------------------------

                             	jsr io_print_line
                             	pla
                             	pha
                             	jsr str_a_to_x
                             	jsr _put_byte
                             	txa
                             	jsr _put_byte
                             	lda #UTF_CR
                             	jsr _put_byte
                             	_pullAXY
                             	endm
                             
                             _printA macro
                             	_pushAXY
                             	jsr str_a_to_x
                             	jsr io_put_ch
                             	txa
                             	jsr io_put_ch
                             	_pullAXY
                             	endm
                             
                             _printCRLF macro
                             	pha
                             	lda #UTF_CR
                             	jsr _put_byte
                             	pla
                             	endm
                             
                             _printC macro ch
                             	pha
                             	lda #ch
                             	jsr io_put_ch
                             	pla
                             	endm
                             
                             _printCA macro
                             	pha
                             	jsr _put_byte
                             	pla
                             	endm
                             
                             _sendcmd macro cmd
                             	_pushAXY
                             	ldx #lo(cmd)
                             	lda #hi(cmd)
                             	jsr sd_sendcmd
                             	_pullAXY
                             	endm
                             
                             _incZPWord macro wordp
                             	inc wordp
                             	db	0xd0, 0x02
                             	inc wordp+1
                             	endm
                             
                             _decZPWordA macro wordp
                             	lda wordp
                             	db	0xd0, 0x02
                             	dec wordp+1
                             	dec wordp
                             	endm
                             	
AS65 Assembler for R6502 [1.42].                                     Page   33
-------------------------------- bank\bank0.s --------------------------------

                             _decZPWord macro wordp
                             	pha
                             	sec
                             	lda wordp
                             	sbc #1
                             	sta wordp
                             	lda wordp+1
                             	sbc #0
                             	sta wordp+1
                             	pla
                             	endm
                             
                             _cpyZPWord macro worda,wordb
                             	lda worda
                             	sta wordb
                             	lda worda+1
                             	sta wordb+1
                             	endm
                             	
                             _addZPWord macro worda, wordb
                             	clc
                             	lda worda
                             	adc wordb
                             	sta worda
                             	lda worda+1
                             	adc wordb+1
                             	sta worda+1
                             	endm
                             
                             _subZPWord macro worda, wordb
                             	sec
                             	lda worda
                             	sbc wordb
                             	sta worda
                             	lda worda+1
                             	sbc wordb+1
                             	sta worda+1
                             	endm
                             	
                             _adcZPByte macro worda, byte
                             	clc
                             	lda worda
                             	adc byte
                             	sta worda
                             	db 0x90, 0x02		; bcc 2
                             	inc worda+1
                             	endm
                             
                             _sbcZPByte macro worda, byte
                             	sec
                             	lda worda
                             	sbc byte
                             	sta worda
                             	db 0xb0, 0x02		; bcs 2
                             	inc worda+1
                             	endm
                             
                             _bcc macro skip
                             	db 0x90, skip
                             	endm
                             
                             _bcs macro skip
AS65 Assembler for R6502 [1.42].                                     Page   34
-------------------------------- bank\bank0.s --------------------------------

                             	db 0xb0, skip
                             	endm
                             
                             _debug macro ch
                             	pha
                             	lda #ch
                             	sta 48000
                             	pla
                             	endm
                             	
                             
                             
                             	include "inc/graph.i"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  GRAPH.I
                             ;*  This is the definition file for graphics, spe
                             ;*  The graphics screen handling module.  It is j
                             ;*  structure definition - but this structure is 
                             ;*  record the important attributes of a text scr
                             ;*	This was needed in the previous code due to 32
                             ;*	byte width screens, but Oric only  has 40, so 
                             ;*	could be optimised a little.
                             ;*
                             ;************************************************
                             
                             ; Important screen addresses for the Oric ULA
bb80 =                       TEXTSCRN	=	0xbb80
b400 =                       TEXTCHAR	=	0xb400
a000 =                       HISCRN		=	0xa000
9800 =                       HICHAR		=	0x9800
bf68 =                       HITEXT		=	0xbf68
                             
0000 =                       	struct gr_screen
0000 =                       	db gr_mode					; Text or Hires mode
0001 =                       	dw gr_hi_start				; Address fo hires screen
0003 =                       	dw gr_char					; Start address of charset
0005 =                       	dw gr_text_start			; Start of text memory
0007 =                       	db gr_geom_fill1			; (Not used, maintained for a
0008 =                       	db gr_text_w				; Number of columns
0009 =                       	db gr_text_h				; Number of rows
000a =                       	db gr_cur_x					; Current X position of cursor
000b =                       	db gr_cur_y					; Current Y position of cursor
000c =                       	dw gr_cur_ptr				; VDP address of cursor
000e =                       	db gr_pixmode				; Pixel plot mode (0=Erase, 1=P
000f =                       	db gr_pitch					; Pixel pitch for char plotting
0010 =                       	db gr_hires_x				; X pos of hires cursor
0011 =                       	db gr_hires_y				; Y pos of hires cursor
0012 =                       	db gr_ink					; Ink colour
0013 =                       	db gr_paper					; Paper colour
0014 =                       	db gr_margin				; Left margin
0015 =                       	dw gr_geom_tmp				; One word of temp storage for
0017 =                       	db gr_geom_tmp2				; One byte of temp storage fo
                             	end struct
                             	
                             ; Sprite data stored in free 256 in font space
AS65 Assembler for R6502 [1.42].                                     Page   35
-------------------------------- bank\bank0.s --------------------------------

b400 =                       spr_curX	= TEXTCHAR			; Sprite current X pos
b420 =                       spr_newX	= TEXTCHAR+32		; Sprite new X pos
b440 =                       spr_curY	= TEXTCHAR+64		; Sprite current Y pos
b460 =                       spr_newY	= TEXTCHAR+96		; Sprite new Y pos
b480 =                       spr_chr		= TEXTCHAR+128		; Sprite character
b4a0 =                       spr_bgnd	= TEXTCHAR+160		; Background character u
b4c0 =                       spr_baseadrl= TEXTCHAR+192		; Y low address of sp
b4e0 =                       spr_baseadrh= TEXTCHAR+224		; Y high address of s
                             
                             ; Tables stored in alternate character set area
                             ; only used for high-resolution screen handling
9c00 =                       hires_row_low	=	HICHAR+0x400		; Low byte of row p
9cc8 =                       hires_row_hi	=	hires_row_low+200	; High byte of r
9d90 =                       hires_col		=	hires_row_hi+200	; Pixel to byte col
9e80 =                       hires_mask		=	hires_col+240		; Pixel column to pi
                             
                             
                             	include "io/io.i"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  IO.I
                             ;*  Definitions file for the IO module.  The key 
                             ;*  used by the IO system is defined here.
                             ;*	Some over-engineering here for future possibil
                             ;*
                             ;************************************************
                             
                             ;* General IO structure allows the system to swap
                             ;* different IO devices by using indirect calls t
                             ;* the appropriate routines.
0000 =                       	struct io_struct
0000 =                       	ds	io_get_byte,	2			;* Address of get byte
0002 =                       	ds	io_put_byte,	2			;* Address of put byte
0004 =                       	ds	io_open_r,		2			;* Address of open file for r
0006 =                       	ds	io_open_w,		2			;* Address of open file for w
0008 =                       	ds	io_close_f,		2			;* Address of close file
000a =                       	ds	io_del_f,		2			;* Address of delete file
000c =                       	ds	io_ext1,		2			;* Address of extended function
000e =                       	ds	io_ext2,		2			;* Address of extended function
                             	end struct
                             	include "dflat/dflat.i"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  DFLAT.I
                             ;*  This is the main definitions file for dflat. 
                             ;*  definitions are in here to access the data st
                             ;*  used by dflat.
                             ;*
                             ;************************************************
                             
AS65 Assembler for R6502 [1.42].                                     Page   36
-------------------------------- bank\bank0.s --------------------------------

                             ;* Start dflat program memory
0713 =                       DF_PROGSTART=	mem_start
                             ;* This is the top of usable dflat memory plus 1
9800 =                       DF_MEMTOP	=	0x9800
                             
                             ;* Offset in to tokenised line of length and line
0000 =                       DFTK_LINLEN	=	0x00
0001 =                       DFTK_LINNUM	=	0x01
                             
                             ;* Flags for token, escape value for data types a
0080 =                       DFTK_TOKEN	=	0x80
0020 =                       DFTK_ESCVAL	=	0x20
0000 =                       DFTK_EOL	=	0x00
                             
                             ;* Numeric constants are encoded based on size an
                             ;* user representation.
                             ;* For example the decimal value 16 will be encod
                             ;* DFTK_INTDEC followed by the bytes 0 and 16 to 
                             ;* The same value in binary will be encoded as DF
                             ;* followed by the same 0 and 16 bytes.  This is 
                             ;* tokenised value to be displayed in original re
                             ;* So in the two examples, they will be shown as 
                             ;* '0x0010' respectively.
0000 =                       DFTK_CHR	=	0x00
0001 =                       DFTK_RESV1	=	0x01
0002 =                       DFTK_RESV2	=	0x02
0003 =                       DFTK_RESV3	=	0x03
0004 =                       DFTK_RESV4	=	0x04
0005 =                       DFTK_BYTDEC	=	0x05
0006 =                       DFTK_BYTHEX = 	0x06
0007 =                       DFTK_BYTBIN =	0x07
0008 =                       DFTK_RESV8	=	0x08
0009 =                       DFTK_INTDEC	=	0x09
000a =                       DFTK_INTHEX =	0x0a
000b =                       DFTK_INTBIN	=	0x0b
000c =                       DFTK_RESVC	=	0x0c
000d =                       DFTK_RESVD	=	0x0d
000e =                       DFTK_RESVE	=	0x0e
000f =                       DFTK_RESVF	=	0x0f
                             
                             ;* String constant, variable and procedure tokens
0010 =                       DFTK_STRLIT	=	0x10
0011 =                       DFTK_VAR	=	0x11
0012 =                       DFTK_PROC	=	0x12
001f =                       DFTK_STEND	=	0x1f
                             
                             ;* Qualifier for non-local parameters passed to a
0026 =                       DFTK_VARPARM=	'&'
                             
                             ;* Variable Value Table (VVT) definitions
                             ;* The VVT records the values of variables define
                             ;* the Variable Name Table (VNT).  When a variabl
                             ;* used, it is added to the VNT, and the position
                             ;* VNT is used as an index in to the VVT.
                             ;* Every VVT entry is 8 bytes - so the VNT index 
                             ;* shifted left 3 bits to get the VVT offset.
                             ;* The VNT grows from top of memory down, the VVT
                             ;* grows from start of VNT down.
                             
                             ;* Index in to each entry of the VVT
0000 =                       DFVVT_TYPE	=	0x00
0001 =                       DFVVT_LO	=	0x01
AS65 Assembler for R6502 [1.42].                                     Page   37
-------------------------------- bank\bank0.s --------------------------------

0002 =                       DFVVT_HI	=	0x02
0003 =                       DFVVT_DIM1	=	0x03
0004 =                       DFVVT_DIM2	=	0x04
0008 =                       DFVVT_SZ	=	0x08	;VVT is aligned to 8 byte blocks
                             
                             ;* The meaning of the DFVVT_TYPE entry
0001 =                       DFVVT_INT	=	0x01
0002 =                       DFVVT_BYT	=	0x02
0004 =                       DFVVT_STR	=	0x04
0008 =                       DFVVT_FLT	=	0x08
0040 =                       DFVVT_PROC	=	0x40
0080 =                       DFVVT_ARRY	=	0x80
                             
                             ;* Flags indicating the meaning of a token
                             ;* A token has the top bit set (0x80), then the
                             ;* remaining bits indicate what it represents.
0001 =                       DFTK_KW		=	0x01
0002 =                       DFTK_FN		=	0x02
0004 =                       DFTK_STROP	=	0x04
0008 =                       DFTK_OP		=	0x08
0010 =                       DFTK_INT	=	0x10
0020 =                       DFTK_BYT	=	0x20
0040 =                       DFTK_STR	=	0x40
0080 =                       DFTK_FLT	=	0x80
0007 =                       DFTK_OPMSK	=	0x07
00f8 =                       DFTK_RTMSK	= 	0xf8
                             
                             ;* Defines what type of value is on the parameter
                             ;* All numerics are stored as INT, all STR
                             ;* are pointers to the actual string, thus
                             ;* all entries in the parmeter stack are 3 bytes
0001 =                       DFST_INT	=	0x01
0080 =                       DFST_STR	=	0x80
                             
                             ;* Token values of specific commands, used during
                             ;* command processing.
                             ;* ANY CHANGE TO THE ORDER OF KEYWORDS NEEDS TO R
0086 =                       DFRT_DEF	=	0x86
0087 =                       DFRT_ENDDEF	=	0x87
0088 =                       DFRT_RETURN	=	0x88
0089 =                       DFRT_ABORT	=	0x89
008c =                       DFRT_REPEAT	=	0x8c
008e =                       DFRT_FOR	=	0x8e
008f =                       DFRT_NEXT	=	0x8f
0090 =                       DFRT_WHILE	=	0x90
0091 =                       DFRT_WEND	=	0x91
0092 =                       DFRT_IF		=	0x92
0093 =                       DFRT_ELSE	=	0x93
0094 =                       DFRT_ENDIF	=	0x94
0095 =                       DFRT_ELSEIF	=	0x95
0096 =                       DFRT_DATA	=	0x96
0097 =                       DFRT_ASM	=	0x97
                             
                             _PushTrueJmp macro
                             	ldx #0xff
                             	txa
                             	jmp df_st_pushInt
                             	endm
                             
                             _PushFalseJmp macro
                             	ldx #0x00
                             	txa
AS65 Assembler for R6502 [1.42].                                     Page   38
-------------------------------- bank\bank0.s --------------------------------

                             	jmp df_st_pushInt
                             	endm
                             
                             	include "kernel/zeropage.i"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  ZEROPAGE.I
                             ;*  This module name is misleading it is not only
                             ;*  allocations, but also page 2, 3, 4, 5, 6, 7 a
                             ;*  memstart is a handy label that indicates the 
                             ;*  location that we can store dflat programs fro
                             ;*  Zero page is a valuable asset as the 6502 can
                             ;*  this page one cycle quicker than the rest of 
                             ;*  and infact some addressing modes can only use
                             ;*  Due to the value of zero page, a lot of syste
                             ;*  dflat variables are put here.  But we don't h
                             ;*  luxury for single use variables - so you will
                             ;*  see a lot of temporary sounding names which a
                             ;*  have multiple uses across the code base.
                             ;*
                             ;************************************************
                             
                             	; Zero page declarations
                             	bss
0000 =                       	org 0x0000
                             
0000 =                       tmp_bank1	ds	1		; Temp storage ONLY FOR USE BY BA
0001 =                       tmp_bank2	ds	1		; Temp storage ONLY FOR USE BY BA
                             
                             ; Interrupt routine addresses
0002 =                       vec_irq		 ds	2		; Master IRQ handler
0004 =                       vec_brk		 ds	2		; Master BRK handler
0006 =                       vec_usercia0 ds	2		; Where to jump for CIA0 inter
                             
                             ; VDP parameters
0008 =                       vdp_cnt		ds	1		; VDP interrupt counter
0009 =                       vdp_cnt_hi 	ds	1		; VDP counter high
000a =                       vdp_cnt_hi2	ds	1		; VDP counter high 2
000b =                       vdp_curtim	ds	1		; Cursor blink speed
000c =                       vdp_curcnt	ds	1		; Cursor blink countdown
000d =                       vdp_curoff	ds	1		; Cursor off (0 = On)
000e =                       vdp_curstat	ds	1		; Cursor status
000f =                       vdp_curval	ds	1		; Cursor value on screen
0010 =                       vdp_blank	ds	1		; Screen blank value normally 32
                             
                             ; Screen geometry
0011 =                       gr_scrngeom	ds	gr_screen
                             
                             ;Keyboard parameters
0029 =                       kb_raw  	ds	1		; Raw keyboard code
002a =                       kb_last		ds	1		; Code of last key
002b =                       kb_code 	ds	1		; Converted keyboard code
002c =                       kb_stat		ds	1		; Keyboard status for caps and shi
002d =                       kb_deb		ds	1		; Debounce timer
002e =                       kb_deb_tim  ds	1		; Default debounce delay
002f =                       kb_rep		ds	1		; Keyboard repeat speed timer
AS65 Assembler for R6502 [1.42].                                     Page   39
-------------------------------- bank\bank0.s --------------------------------

0030 =                       kb_rep_tim 	ds	1		; Default repeat speed
0031 =                       kb_rdel_tim	ds	1		; Default repeat delay (until s
                             
0032 =                       tmp_alo 	ds	1		; VDP addresses lo
0033 =                       tmp_ahi 	ds	1		; VDP addresses hi
0034 =                       tmp_blo 	ds	1		; Temp address lo
0035 =                       tmp_bhi		ds	1		; Temp address hi
0036 =                       tmp_clo		ds	1		; Temp address lo
0037 =                       tmp_chi		ds	1		; Temp address hi
0038 =                       tmp_d		ds	1		; Temp storage d
                             
                             ; Raw input/output parameters
0039 =                       buf_lo		ds	1		; Line buffer address low
003a =                       buf_hi		ds	1		; Line buffer address high
003b =                       buf_sz		ds	1		; Buffer size
003c =                       buf_ef		ds	1		; End file / line marker
                             
                             
                             ; ** Integer function storage **
003d =                       ztmp_24					; Start of 24 byte scratch area (all 
003d =                       num_a		ds	4		; 4 byte primary accumulator
0041 =                       num_b		ds	4		; 4 byte secondary accumulator
0045 =                       num_x		ds	4		; 4 byte x register
0049 =                       num_tmp		ds	4		; 4 byte temp space
004d =                       num_buf		ds	8		; 8 byte string buffer
                             
                             ; ** Tape function storage **
0055 =                       tp_block	ds	2		; Block number (int)
0057 =                       tp_idx		ds	1		; Current buffer index
0058 =                       tp_flag		ds	1		; zero = closed, 1=read, 2=write
0059 =                       tp_delay	ds	2		; Interblock delay
                             
                             ;
                             ; **** INTERPRETER ZERO PAGE ****
                             ;
005b =                       dflat_zp_s
005b =                       dflat_zp_save_s			; ZP save dflat from here
005b =                       df_checkkey	ds	1		; Key check interval counter
005c =                       df_checkmsk	ds	1		; Mask for check key
005d =                       errno		ds	1		; General error condition status
005e =                       df_immed	ds	1		; Immediate mode (0 = not immediat
005f =                       df_sp		ds	1		; Stack pointer after error to resto
0060 =                       df_pc		ds	2		; PC after error to return to
0062 =                       df_brkpc	ds	2		; PC pushed on the stack for BRK
0064 =                       df_brkval	ds	1		; Byte after BRK instruction
0065 =                       df_prgstrt	ds	2		; Start of program code
0067 =                       df_prgend	ds	2		; End of program code
0069 =                       df_vntstrt	ds	2		; Variable name table start
006b =                       df_vntend	ds	2		; Variable name table end
006d =                       df_vvtstrt	ds	2		; Variable value table start
006f =                       df_vvtend	ds	2		; Variable value table end
0071 =                       df_varcnt	ds	1		; Variable counter
0072 =                       df_starstrt	ds	2		; String and array table start
0074 =                       df_starend	ds	2		; String and array table end
0076 =                       df_rtstop	ds	1		; Runtime stack pointer
0077 =                       df_parmtop	ds	1		; Top of parameter stack (grows 
0078 =                       df_strbuffz	ds	1		; String expression buffer (*un
0079 =                       df_stridxz	ds	1		; Top of string buffer (grows do
007a =                       df_sevalptr	ds	2		; Pointer to next free char in 
                             
007c =                       df_linoff	ds	1		; Offset in to line buffer
007d =                       df_tokoff	ds	1		; Offset in to tokenised buffer
AS65 Assembler for R6502 [1.42].                                     Page   40
-------------------------------- bank\bank0.s --------------------------------

007e =                       df_eolidx	ds	1		; End of line index (i.e length)
007f =                       df_nxtstidx	ds	1		; Offset to the next statement 
0080 =                       df_curstidx	ds	1		; Offset to the start of curren
0081 =                       df_symtab	ds	2		; Pointer to next free symtab ent
0083 =                       df_symoff	ds	1		; Offset in to token table
0084 =                       df_syminiz	ds	2		; Start of symtab (*unused*)
0086 =                       df_currlin	ds	2		; Execution current line pointer
0088 =                       df_exeoff	ds	1		; Execution line buffer offset
0089 =                       df_nextlin	ds	2		; Next line to execute
008b =                       df_procmode	ds	1		; Only used during tokenisation
008c =                       df_procargs	ds	1		; Only used during tokenisation
008d =                       df_procloc	ds	1		; Counts the number of local par
008e =                       df_procptr	ds	2		; Pointer to proc vvt slot
0090 =                       df_lineptr	ds	2		; Pointer to line during searche
0092 =                       df_lineidx	ds	1		; Pointer to line index during s
0093 =                       df_ifnest	ds	1		; Global nested if counter
0094 =                       df_currdat	ds	2		; Data current line pointer
0096 =                       df_datoff	ds	1		; Data line buffer offset
0097 =                       df_rnd		ds	2		; Random number seed
                             
0099 =                       df_asmpc	ds	2		; Assembler program counter
009b =                       df_asmopt	ds	1		; Assembler current option
009c =                       df_asmadmd	ds	1		; Addressing mode
009d =                       df_asmopcde	ds	1		; Current opcode
009e =                       df_asmoprnd	ds	2		; Current operand
00a0 =                       df_asmlen	ds	1		; Instruction length
                             
00a1 =                       dflat_zp_save_e			; Save up to this place
                             
                             ; Temp space for dflat
00a1 =                       df_tmpptra	ds	2		; Temp pointer a
00a3 =                       df_tmpptrb	ds	2		; Temp pointer b
00a5 =                       df_tmpptrc	ds	2		; Temp pointer c
00a7 =                       df_tmpptrd	ds	2		; Temp pointer d
00a9 =                       df_tmpptre	ds	2		; Temp pointer e
                             
00ab =                       dflat_zp_e
                             
00ab =                       zp_tmp1		ds	1		; General zero page temporary
00ac =                       zp_tmp2		ds	1		; General zero page temporary
00ad =                       zp_tmp3		ds	1		; General zero page temporary
00ae =                       zp_tmp4		ds	1		; General zero page temporary
                             
                             ;***** END OF ZERO PAGE *****
00af =                       _end_zero_page
                             
                             ;***** Page 1 is CPU stack ****
0100 =                       	org 0x0100
0100 =                       _cpu_stack
0100 =                       			ds	256		; All of page 1
                             
                             ;***** Page 2 is tape buffer *****
0200 =                       	org 0x0200
0200 =                       tp_buf		ds	256		; Serial input / output line buff
                             
                             ;***** 3 is IO *****
0300 =                       	org 0x0300			; IO mapped to Page 3 on Oric
0300 =                       io_address	ds	256
                             
0400 =                       	org 0x0400			; Page 4 = dflat space
0400 =                       fd_getname_addr			; ** FOR ORICUTRON EMULATOR **
0400 =                       df_linbuff
AS65 Assembler for R6502 [1.42].                                     Page   41
-------------------------------- bank\bank0.s --------------------------------

0400 =                       df_raw		ds	128		; untokenised input line
0480 =                       df_tokbuff
0480 =                       df_tok		ds 	128		; tokenised output line
                             
0500 =                       	org 0x0500			; Page 5 = fixed space for interpre
0500 =                       df_rtstck				; operator stack grow up, runtime gr
0500 =                       df_rtspace	ds	256
                             
                             
                             ;***** NON-ZERO PAGE VARIABLES *****
                             
                             ; Acticve IO device settings
0600 =                       io_default	ds	1		; The default device number
0601 =                       io_block	ds	io_struct
                             
                             
                             ; Dflat top of memory+1 - initialised at boot tim
0611 =                       df_memtop	ds	2
                             
                             ; Scratch area e.g. string and numeric expression
0613 =                       scratch		ds	256
                             
                             ;***** THIS IS THE START OF FREE SPACE for DFLAT 
0713 =                       mem_start
                             
                             
                             	include "dflat/dflat.i"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  DFLAT.I
                             ;*  This is the main definitions file for dflat. 
                             ;*  definitions are in here to access the data st
                             ;*  used by dflat.
                             ;*
                             ;************************************************
                             
                             ;* Start dflat program memory
0713 =                       DF_PROGSTART=	mem_start
                             ;* This is the top of usable dflat memory plus 1
9800 =                       DF_MEMTOP	=	0x9800
                             
                             ;* Offset in to tokenised line of length and line
0000 =                       DFTK_LINLEN	=	0x00
0001 =                       DFTK_LINNUM	=	0x01
                             
                             ;* Flags for token, escape value for data types a
0080 =                       DFTK_TOKEN	=	0x80
0020 =                       DFTK_ESCVAL	=	0x20
0000 =                       DFTK_EOL	=	0x00
                             
                             ;* Numeric constants are encoded based on size an
                             ;* user representation.
                             ;* For example the decimal value 16 will be encod
                             ;* DFTK_INTDEC followed by the bytes 0 and 16 to 
                             ;* The same value in binary will be encoded as DF
                             ;* followed by the same 0 and 16 bytes.  This is 
AS65 Assembler for R6502 [1.42].                                     Page   42
-------------------------------- bank\bank0.s --------------------------------

                             ;* tokenised value to be displayed in original re
                             ;* So in the two examples, they will be shown as 
                             ;* '0x0010' respectively.
0000 =                       DFTK_CHR	=	0x00
0001 =                       DFTK_RESV1	=	0x01
0002 =                       DFTK_RESV2	=	0x02
0003 =                       DFTK_RESV3	=	0x03
0004 =                       DFTK_RESV4	=	0x04
0005 =                       DFTK_BYTDEC	=	0x05
0006 =                       DFTK_BYTHEX = 	0x06
0007 =                       DFTK_BYTBIN =	0x07
0008 =                       DFTK_RESV8	=	0x08
0009 =                       DFTK_INTDEC	=	0x09
000a =                       DFTK_INTHEX =	0x0a
000b =                       DFTK_INTBIN	=	0x0b
000c =                       DFTK_RESVC	=	0x0c
000d =                       DFTK_RESVD	=	0x0d
000e =                       DFTK_RESVE	=	0x0e
000f =                       DFTK_RESVF	=	0x0f
                             
                             ;* String constant, variable and procedure tokens
0010 =                       DFTK_STRLIT	=	0x10
0011 =                       DFTK_VAR	=	0x11
0012 =                       DFTK_PROC	=	0x12
001f =                       DFTK_STEND	=	0x1f
                             
                             ;* Qualifier for non-local parameters passed to a
0026 =                       DFTK_VARPARM=	'&'
                             
                             ;* Variable Value Table (VVT) definitions
                             ;* The VVT records the values of variables define
                             ;* the Variable Name Table (VNT).  When a variabl
                             ;* used, it is added to the VNT, and the position
                             ;* VNT is used as an index in to the VVT.
                             ;* Every VVT entry is 8 bytes - so the VNT index 
                             ;* shifted left 3 bits to get the VVT offset.
                             ;* The VNT grows from top of memory down, the VVT
                             ;* grows from start of VNT down.
                             
                             ;* Index in to each entry of the VVT
0000 =                       DFVVT_TYPE	=	0x00
0001 =                       DFVVT_LO	=	0x01
0002 =                       DFVVT_HI	=	0x02
0003 =                       DFVVT_DIM1	=	0x03
0004 =                       DFVVT_DIM2	=	0x04
0008 =                       DFVVT_SZ	=	0x08	;VVT is aligned to 8 byte blocks
                             
                             ;* The meaning of the DFVVT_TYPE entry
0001 =                       DFVVT_INT	=	0x01
0002 =                       DFVVT_BYT	=	0x02
0004 =                       DFVVT_STR	=	0x04
0008 =                       DFVVT_FLT	=	0x08
0040 =                       DFVVT_PROC	=	0x40
0080 =                       DFVVT_ARRY	=	0x80
                             
                             ;* Flags indicating the meaning of a token
                             ;* A token has the top bit set (0x80), then the
                             ;* remaining bits indicate what it represents.
0001 =                       DFTK_KW		=	0x01
0002 =                       DFTK_FN		=	0x02
0004 =                       DFTK_STROP	=	0x04
0008 =                       DFTK_OP		=	0x08
AS65 Assembler for R6502 [1.42].                                     Page   43
-------------------------------- bank\bank0.s --------------------------------

0010 =                       DFTK_INT	=	0x10
0020 =                       DFTK_BYT	=	0x20
0040 =                       DFTK_STR	=	0x40
0080 =                       DFTK_FLT	=	0x80
0007 =                       DFTK_OPMSK	=	0x07
00f8 =                       DFTK_RTMSK	= 	0xf8
                             
                             ;* Defines what type of value is on the parameter
                             ;* All numerics are stored as INT, all STR
                             ;* are pointers to the actual string, thus
                             ;* all entries in the parmeter stack are 3 bytes
0001 =                       DFST_INT	=	0x01
0080 =                       DFST_STR	=	0x80
                             
                             ;* Token values of specific commands, used during
                             ;* command processing.
                             ;* ANY CHANGE TO THE ORDER OF KEYWORDS NEEDS TO R
0086 =                       DFRT_DEF	=	0x86
0087 =                       DFRT_ENDDEF	=	0x87
0088 =                       DFRT_RETURN	=	0x88
0089 =                       DFRT_ABORT	=	0x89
008c =                       DFRT_REPEAT	=	0x8c
008e =                       DFRT_FOR	=	0x8e
008f =                       DFRT_NEXT	=	0x8f
0090 =                       DFRT_WHILE	=	0x90
0091 =                       DFRT_WEND	=	0x91
0092 =                       DFRT_IF		=	0x92
0093 =                       DFRT_ELSE	=	0x93
0094 =                       DFRT_ENDIF	=	0x94
0095 =                       DFRT_ELSEIF	=	0x95
0096 =                       DFRT_DATA	=	0x96
0097 =                       DFRT_ASM	=	0x97
                             
                             _PushTrueJmp macro
                             	ldx #0xff
                             	txa
                             	jmp df_st_pushInt
                             	endm
                             
                             _PushFalseJmp macro
                             	ldx #0x00
                             	txa
                             	jmp df_st_pushInt
                             	endm
                             
                             	include "dflat/error.i"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  ERROR.I
                             ;*  Error definitions file.
                             ;*  The macro to throw an error is elswhere, but 
                             ;*  It issues a 6502 BRK commmand with the next b
                             ;*  the error code.  The BRK handler then picks u
                             ;*  code and shows the appropriate message plus a
                             ;*  number if a program was running.
                             ;*
AS65 Assembler for R6502 [1.42].                                     Page   44
-------------------------------- bank\bank0.s --------------------------------

                             ;************************************************
                             
                             	; ROM code
                             	code  
                             
                             ; Error message numbers
0000 =                       DFERR_OK		=	0
0001 =                       DFERR_SYNTAX	=	1
0002 =                       DFERR_TYPEMISM	=	2
0003 =                       DFERR_DIM		=	3
0004 =                       DFERR_UNTIL		=	4
0005 =                       DFERR_NOPROC	=	5
0006 =                       DFERR_PROCPARM	=	6
0007 =                       DFERR_IMMEDIATE	=	7
0008 =                       DFERR_UNCLOSEDIF=	8
0009 =                       DFERR_NOIF		=	9
000a =                       DFERR_NEXTFOR	=	10
000b =                       DFERR_FNAME		=	11
000c =                       DFERR_STRLONG	=	12
000d =                       DFERR_BREAK		=	13
000e =                       DFERR_NODATA	=	14
000f =                       DFERR_WEND		=	15
0010 =                       DFERR_NOLINE	=	16
0011 =                       DFERR_RETURN	=	17
0012 =                       DFERR_ABORT		=	18
0013 =                       DFERR_QUANTITY	=	19
0014 =                       DFERR_NOORG		=	20
                             
                             
                             
                             
                             
                             ;****************************************
                             ;*	Set 6502 default vectors	*
                             ;****************************************
                             	data				; Set vectors
fffa =                       	org 0xfffa			; Vectors are at these addresses
fffa : f4c4                  	fcw nmi				; 0xfffa : NMI Vector
fffc : acc4                  	fcw init			; 0xfffc : Reset Vector
fffe : d0c0                  	fcw call_irq_master	; 0xfffe : IRQ Vector
                             
                             	; ROM code
                             	code				;
c000 =                       	org 0xc000			; Start of ROM
                             
c000 :                       _code_start
                             	; Restore current bank always at address c001 * 
c000 :                       mod_sz_kernel_s
                             	; include OS ROM calls - must be from 0xc000
                             	include "kernel/osromvec.i"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2021
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  OSROMVEC.I
                             ;*	This include file sets up the OS ROM vectors w
                             ;*	be invoked by user programs to access ROM func
                             ;*	will be maintained across versions of dflat to
AS65 Assembler for R6502 [1.42].                                     Page   45
-------------------------------- bank\bank0.s --------------------------------

                             ;*	backward and forward compatibility.
                             ;*	Make sure these vectors are set up from 0xc000
                             ;*	what user programs will rely on!
                             ;*
                             ;************************************************
                             	
                             	; Common OS ROM calls - user programs should JMP
                             	; through these routines where possible to maint
                             	; compatibility with ROM changes as these calls 
                             	; always be in the same position
c000 : 4c6ccd           [ 3] _rom_vec_00	jmp	gr_init_screen_txt			; Go in to t
c003 : 4c02ce           [ 3] _rom_vec_01	jmp gr_cls						; Clear text screen
c006 : 4c6fce           [ 3] _rom_vec_02	jmp	gr_set_cur					; Set text cursor 
c009 : 4c85cd           [ 3] _rom_vec_03	jmp	gr_init_hires				; Go in to hires
c00c : 6c0106           [ 6] _rom_vec_04	jmp (io_block+io_get_byte)		; Get byt
c00f : 6c0306           [ 6] _rom_vec_05	jmp (io_block+io_put_byte)		; Put byt
c012 : 4c3cc4           [ 3] _rom_vec_06 jmp io_read_line				; Read a line
c015 : 4c75c4           [ 3] _rom_vec_07	jmp io_print_line				; Print a line
c018 : 4c6ec0           [ 3] _rom_vec_08	jmp snd_set						; Set sound register
c01b : 4c8dc7           [ 3] _rom_vec_09	jmp kb_stick					; Get joystick statu
c01e : 4c56ce           [ 3] _rom_vec_0a	jmp gr_plot						; Plot a lores chara
c021 : 4c15d0           [ 3] _rom_vec_0b	jmp	gr_hchar					; Plot a hires chara
c024 : 4cb7d0           [ 3] _rom_vec_0c	jmp gr_point_setup				; Get address, 
c027 : 4cd5d0           [ 3] _rom_vec_0d	jmp gr_point					; Plot a hires pixel
c02a : 4c02f5           [ 3] _rom_vec_0e	jmp df_rt_sprupd				; Refresh sprites
c02d : 4c46ce           [ 3] _rom_vec_0f	jmp	gr_getXY_base				; Get row addres
c030 : 4ccfd0           [ 3] _rom_vec_10	jmp gr_pixel					; Get a pixel value 
c033 : 4c69ce           [ 3] _rom_vec_11 jmp gr_get						; Get screen at coord
c036 : 4cfec3           [ 3] _rom_vec_12 jmp io_active_device			; Set the acti
c039 : 6c0506           [ 6] _rom_vec_13	jmp (io_block+io_open_r)		; Open file
c03c : 6c0706           [ 6] _rom_vec_14	jmp (io_block+io_open_w)		; Open file
c03f : 6c0906           [ 6] _rom_vec_15	jmp (io_block+io_close_f)		; Close fi
c042 : 6c0b06           [ 6] _rom_vec_16	jmp (io_block+io_del_f)			; Delete fi
c045 : 6c0d06           [ 6] _rom_vec_17	jmp (io_block+io_ext1)			; Extended o
c048 : 6c0f06           [ 6] _rom_vec_18	jmp (io_block+io_ext2)			; Extended o
c04b : 4c82d4           [ 3] _rom_vec_19 jmp snd_get_note				; Get for an octa
                             
                             
                             ;* Include all core code in the right order
                             	include "kernel/snd-low.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  SND-LOW.S
                             ;*	Routines to access the AY-3-8912, which is don
                             ;*	lines of the VIA - CB2 and CA2 for chip select
                             ;*	Port A for data interface. This makes accessin
                             ;*	8912 a bit slow..
                             ;*
                             ;* 	CB2		CA2		Function		CB2=BDIR, CA2=BC1
                             ;*	0		0		Not selected
                             ;*	0		1		Read register in to Port A
                             ;*	1		0		Write register from Port A
                             ;*	1		1		Select register # from Port A
                             ;************************************************
                             
                             ;****************************************
AS65 Assembler for R6502 [1.42].                                     Page   46
-------------------------------- bank\bank0.s --------------------------------

                             ;* snd_sel_reg
                             ;* Select AY register from A
                             ;* Input : A = Value
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
c04e :                       snd_sel_reg
c04e : 48               [ 3] 	pha
c04f : 8d0f03           [ 4] 	sta SND_ADBUS			; Put reg # on Port A (sound bus
                             
c052 : a9ff             [ 2] 	lda #SND_SELSETADDR		; Get ready to select the r
c054 : 8d0c03           [ 4] 	sta SND_MODE			; Latch the reg # on Port A
                             
c057 : a9dd             [ 2] 	lda #SND_DESELECT		; Deselect AY
c059 : 8d0c03           [ 4] 	sta SND_MODE
                             
c05c : 68               [ 4] 	pla
c05d : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* snd_set_reg
                             ;* Set previosuly selected AY register
                             ;* Input : A = Value to set
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
c05e :                       snd_set_reg
c05e : 48               [ 3] 	pha
                             
c05f : 8d0f03           [ 4] 	sta SND_ADBUS			; Put reg value on Port A (sound
c062 : a9fd             [ 2] 	lda #SND_SELWRITE		; Select mode for writing dat
c064 : 8d0c03           [ 4] 	sta SND_MODE			; Latch reg value on Port A	
c067 : a9dd             [ 2] 	lda #SND_DESELECT		; Deselect AY
c069 : 8d0c03           [ 4] 	sta SND_MODE
                             
c06c : 68               [ 4] 	pla
c06d : 60               [ 6] 	rts
                             	
                             ;****************************************
                             ;* snd_set
                             ;* Set reg X to value A
                             ;* Input : X=Reg, A = Value to set
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
c06e :                       snd_set
c06e : 48               [ 3] 	pha
c06f : 8a               [ 2] 	txa
c070 : 204ec0           [ 6] 	jsr snd_sel_reg
c073 : 68               [ 4] 	pla
c074 : 4c5ec0           [ 3] 	jmp snd_set_reg
                             
                             
                             ;****************************************
                             ;* snd_get
                             ;* Get AY register X value
                             ;* Input : X = Reg no
                             ;* Output : A = Value
                             ;* Regs affected : None
                             ;****************************************
                             ;snd_get
                             ;
AS65 Assembler for R6502 [1.42].                                     Page   47
-------------------------------- bank\bank0.s --------------------------------

                             ;	lda #0xff				; Set Port A to output
                             ;	sta IO_0+DDRA
                             ;
                             ;	stx SND_ADBUS			; Put X on the sound bus (X = r
                             ;
                             ;	lda #SND_SELSETADDR		; Get ready to select the 
                             ;	sta SND_MODE			; Latch the reg # on Port A
                             ;
                             ;	lda #SND_DESELECT		; Deselect AY
                             ;	sta SND_MODE
                             ;
                             ;	lda #0x00				; Set Port A to input
                             ;	sta IO_0+DDRA
                             ;
                             ;	lda #SND_SELREAD		; Select mode for reading dat
                             ;	sta SND_MODE			; Set read mode on AY
                             ;
                             ;	lda SND_ADBUS			; Get value in to Y from Port A
                             ;	pha						; Save it to stack
                             ;	
                             ;	lda #SND_DESELECT		; Deselect AY
                             ;	sta SND_MODE
                             ;
                             ;	lda #0xff				; Set Port A back to output
                             ;	sta IO_0+DDRA
                             ;
                             ;	pla						; Get the value off stack
                             ;	
                             ;	rts
                             
                             
                             	include "kernel/main.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  MAIN.S
                             ;*  This is where the main user program is execut
                             ;*  the 'kernel' once the system is initialised a
                             ;*  Today, main does very little - first shows th
                             ;*  boot up message, and then passes control to d
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code
                             
c077 :                       main
c077 : a281             [ 2] 	ldx #lo(msg_hello_world)
c079 : a9c0             [ 2] 	lda #hi(msg_hello_world)
c07b : 2075c4           [ 6] 	jsr io_print_line
                             
c07e :                       infinity
c07e : 4cccdf           [ 3] 	jmp df_pg_dflat
                             
c081 :                       msg_hello_world
                             	;* build.s is generate by the assemble.bat file
                             	;* all it does is echo an assembler line to
AS65 Assembler for R6502 [1.42].                                     Page   48
-------------------------------- bank\bank0.s --------------------------------

                             	;* including the build date in the message.
                             	include "kernel/build.s"
c081 : 4f726963206466..       db "Oric dflat\r" 
c08c : 42792040363530..       db "By @6502Nerd\r" 
c099 : 4275696c64203a..       db "Build : 0.18 [IJK]\r" 
c0ac : 28632920323032..       db "(c) 2023\r\r",0 
                             
                             
                             	include "kernel/irq.s"
                             	
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  IRQ.S
                             ;*	This is the IRQ handler
                             ;*	There is only one regular interrupt source whi
                             ;*	T1 timeout on a 50Hz cycle, whose main job is 
                             ;*	flash the cursor and decrement some timers.
                             ;*	But there are handlers for BRK, user and VIA s
                             ;*	By default the user and VIA do nothing, but ca
                             ;*	redirected to user routines.
                             ;*
                             ;************************************************
                             
                             ;* Obviously this can only be done with
                             ;* interrupts disabled!
c0b7 :                       init_irq
                             	; Core IRQ handler
c0b7 : a9db             [ 2] 	lda #lo(irq)
c0b9 : 8502             [ 3] 	sta vec_irq
c0bb : a9c0             [ 2] 	lda #hi(irq)
c0bd : 8503             [ 3] 	sta vec_irq+1
                             	
                             	; Core BRK handler
c0bf : a9fd             [ 2] 	lda #lo(irq_brk)
c0c1 : 8504             [ 3] 	sta vec_brk
c0c3 : a9c0             [ 2] 	lda #hi(irq_brk)
c0c5 : 8505             [ 3] 	sta vec_brk+1
                             
                             	; User handlers VIA0 interrupts
c0c7 : a9da             [ 2] 	lda #lo(null_handler)
c0c9 : 8506             [ 3] 	sta vec_usercia0
c0cb : a9c0             [ 2] 	lda #hi(null_handler)
c0cd : 8507             [ 3] 	sta vec_usercia0+1
                             
c0cf : 60               [ 6] 	rts
                             
                             
                             ;* Calls the master IRQ handler - from the ROM
c0d0 :                       call_irq_master
c0d0 : 6c0200           [ 6] 	jmp (vec_irq)
                             	
                             ;* Calls the BRK handler
c0d3 :                       call_irq_brk
c0d3 : 6c0400           [ 6] 	jmp (vec_brk)
                             
                             ;* Call the user CIA0 handler
AS65 Assembler for R6502 [1.42].                                     Page   49
-------------------------------- bank\bank0.s --------------------------------

c0d6 :                       call_irq_usercia0
c0d6 : 6c0600           [ 6] 	jmp (vec_usercia0)
                             
                             ;* null interrupt
c0d9 :                       null_irq
c0d9 : 40               [ 6] 	rti
                             
                             ;* null handler
c0da :                       null_handler
c0da : 60               [ 6] 	rts
                             	
                             
                             ;* Master IRQ handler
c0db :                       irq
                             	; Don't use _pushAXY as it uses a temp location!
c0db : 48               [ 3] 	pha
c0dc : 8a               [ 2] 	txa
c0dd : 48               [ 3] 	pha
c0de : 98               [ 2] 	tya
c0df : 48               [ 3] 	pha
                             
c0e0 : d8               [ 2] 	cld						; Just in case!
c0e1 : 18               [ 2] 	clc						; Standard behaviour
                             
                             	; Check if IRQ or BRK
                             	; load P from stack in to A
c0e2 : ba               [ 2] 	tsx
c0e3 : bd0401           [ 4] 	lda 0x104,x
                             	; BRK bit set?
c0e6 : 2910             [ 2] 	and #0x10
c0e8 : d0e9             [ 3] 	bne call_irq_brk
                             	
                             	;* Primary interrupt is timer 1
c0ea : ad0d03           [ 4] 	lda IO_0 + IFR
c0ed : 2940             [ 2] 	and #0x40				; Bit 6 = Timer 1 interrupt
c0ef : f006             [ 3] 	beq irq_fin				; If nothing then end
                             
                             	; Service the timer 1 interrupt
c0f1 : 8d0d03           [ 4] 	sta IO_0 + IFR			; Clear the interrupt
c0f4 : 202ac1           [ 6] 	jsr int_vdp_handler
                             
c0f7 :                       irq_fin
                             	_pullAXY
                             
c0fc : 40               [ 6] 	rti
                             	
                             ;* Handle BRK
c0fd :                       irq_brk
                             	; Handle BRK
                             	; Get PCL,H minus 2 gives the BRK instruction ad
c0fd : 38               [ 2] 	sec
c0fe : bd0501           [ 4] 	lda 0x0105,x
c101 : e902             [ 2] 	sbc #2
c103 : 8562             [ 3] 	sta df_brkpc
c105 : bd0601           [ 4] 	lda 0x0106,x
c108 : e900             [ 2] 	sbc #0
c10a : 8563             [ 3] 	sta df_brkpc+1
                             	; Get the byte pointed to by old PC
                             	; which is 1 on from the BRK
c10c : a001             [ 2] 	ldy #1
c10e : b162             [ 5] 	lda (df_brkpc),y
c110 : 8564             [ 3] 	sta df_brkval
AS65 Assembler for R6502 [1.42].                                     Page   50
-------------------------------- bank\bank0.s --------------------------------

c112 : 855d             [ 3] 	sta errno
                             	; now update the return address
c114 : a560             [ 3] 	lda df_pc
c116 : 9d0501           [ 5] 	sta 0x105,x
c119 : a561             [ 3] 	lda df_pc+1
c11b : 9d0601           [ 5] 	sta 0x106,x
                             	
                             	_pullAXY
                             
                             	; Save the registers in temp area
c123 : 853d             [ 3] 	sta num_a
c125 : 863e             [ 3] 	stx num_a+1
c127 : 843f             [ 3] 	sty num_a+2
                             	; when RTI occurs:
                             	;  will return to error handler
                             	;  df_brkval will contain signature
c129 : 40               [ 6] 	rti
                             	
                             	
                             ;****************************************
                             ;* int_vdp_handler
                             ;* VDP interrupt handler
                             ;****************************************
c12a :                       int_vdp_handler
c12a : 2046c1           [ 6] 	jsr update_timers	; If it is then update system 
c12d : a50d             [ 3] 	lda vdp_curoff		; Is cursor enabled?
c12f : d014             [ 3] 	bne int_vdp_fin		; Skip if disabled
                             
c131 : c60c             [ 5] 	dec vdp_curcnt		; Decrement countdown
c133 : d010             [ 3] 	bne int_vdp_fin		; If not expired, do nothing
c135 : a50b             [ 3] 	lda vdp_curtim		; Reset cursor countdown
c137 : 850c             [ 3] 	sta vdp_curcnt
c139 : a50e             [ 3] 	lda vdp_curstat		; Get the flash status
c13b : 4980             [ 2] 	eor #0x80			; Invert top bit
c13d : 850e             [ 3] 	sta vdp_curstat
c13f : 450f             [ 3] 	eor vdp_curval		; EOR with whats under cursor
                             	; Use cursor address, write to screen
                             	; ptr is base, offset with X coord in Y register
c141 : a41b             [ 3] 	ldy gr_scrngeom+gr_cur_x
c143 : 911d             [ 5] 	sta (gr_scrngeom+gr_cur_ptr),y
                             
c145 :                       int_vdp_fin	
c145 : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* update_timers
                             ;* Update 24 bit timer and debounce counters
                             ;****************************************
c146 :                       update_timers
c146 : e608             [ 5] 	inc vdp_cnt
c148 : d006             [ 3] 	bne inc_kb_timers
c14a : e609             [ 5] 	inc vdp_cnt_hi
c14c : d002             [ 3] 	bne inc_kb_timers
c14e : e60a             [ 5] 	inc vdp_cnt_hi2
c150 :                       inc_kb_timers
c150 : a62d             [ 3] 	ldx kb_deb			; Is debounce 0?
c152 : f002             [ 3] 	beq skip_kb_deb
c154 : c62d             [ 5] 	dec kb_deb
c156 :                       skip_kb_deb
c156 : a62f             [ 3] 	ldx kb_rep			; Is repeat timer 0?
c158 : f002             [ 3] 	beq skip_kb_rep
AS65 Assembler for R6502 [1.42].                                     Page   51
-------------------------------- bank\bank0.s --------------------------------

c15a : c62f             [ 5] 	dec kb_rep
c15c :                       skip_kb_rep
c15c : 60               [ 6] 	rts
                             	
                             
                             	include "utils/utils.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  UTILS.S
                             ;*  This module implements various utility functi
                             ;*  converting from ASCII to binary form for numb
                             ;*  vice-versa to allow humans to actually be abl
                             ;*  and read numbers in their prefered form!
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code
                             
c15d :                       utilPrintSPC
c15d : 48               [ 3] 	pha
c15e : a920             [ 2] 	lda #' '
c160 : 2027c4           [ 6] 	jsr io_put_ch
c163 : 68               [ 4] 	pla
c164 : 60               [ 6] 	rts
                             
c165 :                       utilPrintCRLF
c165 : 48               [ 3] 	pha
c166 : a90d             [ 2] 	lda #UTF_CR
c168 : 2027c4           [ 6] 	jsr io_put_ch
c16b : 68               [ 4] 	pla
c16c : 60               [ 6] 	rts
                             
c16d :                       utilPrintA
c16d : 8538             [ 3] 	sta tmp_d
c16f : 48               [ 3] 	pha
c170 : 8a               [ 2] 	txa
c171 : 48               [ 3] 	pha
c172 : a538             [ 3] 	lda tmp_d
c174 : 2082c1           [ 6] 	jsr str_a_to_x
c177 : 2027c4           [ 6] 	jsr io_put_ch
c17a : 8a               [ 2] 	txa
c17b : 2027c4           [ 6] 	jsr io_put_ch
c17e : 68               [ 4] 	pla
c17f : aa               [ 2] 	tax
c180 : 68               [ 4] 	pla
c181 : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* str_a_to_x
                             ;* Convert accumulator to hex string
                             ;* Input : A = Byte to convert
                             ;* Output : A = High Char, X = Low Char
                             ;* Regs affected : P
                             ;****************************************
AS65 Assembler for R6502 [1.42].                                     Page   52
-------------------------------- bank\bank0.s --------------------------------

c182 :                       str_a_to_x
c182 : 48               [ 3] 	pha					; Save the byte using later on
c183 : 290f             [ 2] 	and #0x0f			; Mask low nibble
c185 : 18               [ 2] 	clc
c186 : 6930             [ 2] 	adc #'0'			; Convert to UTF
c188 : c93a             [ 2] 	cmp #('9'+1)		; If A greater than '9' then
c18a : 9002             [ 3] 	bcc skip_a_f_1		; skip a-f adjustment
c18c : 6926             [ 2] 	adc #0x26			; Add 27 (6+C) to get in to A-F rang
c18e :                       skip_a_f_1
c18e : aa               [ 2] 	tax					; Low char is in X
c18f : 68               [ 4] 	pla					; Get byte back
c190 : 4a               [ 2] 	lsr a				; Make high nibble low
c191 : 4a               [ 2] 	lsr a
c192 : 4a               [ 2] 	lsr a
c193 : 4a               [ 2] 	lsr a
c194 : 18               [ 2] 	clc
c195 : 6930             [ 2] 	adc #'0'			; Convert to UTF
c197 : c93a             [ 2] 	cmp #('9'+1)		; If A greater than '9' then
c199 : 9002             [ 3] 	bcc skip_a_f_2		; skip a-f adjustment
c19b : 6926             [ 2] 	adc #0x26			; Add 27 (6+C) to get in to A-F rang
c19d :                       skip_a_f_2
c19d : 60               [ 6] 	rts					; A high nibble, C=0
                             
                             ;****************************************
                             ;* str_x_to_a
                             ;* Convert hex string to accumulator
                             ;* Input : A = High Char, X = Low Char
                             ;* Output : A = Value
                             ;* Regs affected : P
                             ;****************************************
c19e :                       str_x_to_a
c19e : 0920             [ 2] 	ora #0x20			; Make alpha in to lower case
c1a0 : 38               [ 2] 	sec					; Process high char in A
c1a1 : e930             [ 2] 	sbc #'0'			; Convert to hex nibble
c1a3 : c90a             [ 2] 	cmp #10				; If A < 10 then
c1a5 : 9002             [ 3] 	bcc skip_x_f_1		; skip a-f adjustment
c1a7 : e927             [ 2] 	sbc #0x27			; Sub 7 to get in to A-F range
c1a9 :                       skip_x_f_1
c1a9 : c910             [ 2] 	cmp #0x10			; Nibble should be <= 0x0f
c1ab : b01c             [ 3] 	bcs	str_x_to_a_err	; Error if not
                             
c1ad : 0a               [ 2] 	asl a				; This is the high nibble
c1ae : 0a               [ 2] 	asl a
c1af : 0a               [ 2] 	asl a
c1b0 : 0a               [ 2] 	asl a
c1b1 : 48               [ 3] 	pha					; Save the high nibble
c1b2 : 8a               [ 2] 	txa					; Now process the low char in X
c1b3 : 0920             [ 2] 	ora #0x20			; Make alpha in to lower case
c1b5 : 38               [ 2] 	sec
c1b6 : e930             [ 2] 	sbc #'0'			; Convert to hex nibble
c1b8 : c90a             [ 2] 	cmp #10				; If A < 10 then
c1ba : 9002             [ 3] 	bcc skip_x_f_2		; skip a-f adjustment
c1bc : e927             [ 2] 	sbc #0x27			; Sub 7 to get in to A-F range
c1be :                       skip_x_f_2
c1be : c910             [ 2] 	cmp #0x10			; Nibble should be <= 0x0f
c1c0 : b006             [ 3] 	bcs	str_x_to_a_errl	; Error if not
                             
c1c2 : 853d             [ 3] 	sta num_a			; Store low nibble in temp
c1c4 : 68               [ 4] 	pla					; Get high nibble
c1c5 : 053d             [ 3] 	ora num_a			; OR with low nibble
                             
c1c7 : 60               [ 6] 	rts					; A contains value, C=0
AS65 Assembler for R6502 [1.42].                                     Page   53
-------------------------------- bank\bank0.s --------------------------------

                             
c1c8 :                       str_x_to_a_errl
c1c8 : 68               [ 4] 	pla
c1c9 :                       str_x_to_a_err
                             	SWBRK CMD_ERR_VAL
                             
                             
                             ;****************************************
                             ;* con_n_to_a
                             ;* Convert numeric string to accumulator (unsigne
                             ;* Input : Pointer to string (X=L, A=H), Y = Sour
                             ;* Output : num_a, num_a+1 contains word, X=numbe
                             ;* A = Source type detected
                             ;* Regs affected : CS = Error
                             ;****************************************
c1cb :                       con_n_to_a
c1cb : 8649             [ 3] 	stx num_tmp
c1cd : 854a             [ 3] 	sta num_tmp+1
c1cf : a900             [ 2] 	lda #0
c1d1 : 853d             [ 3] 	sta num_a
c1d3 : 853e             [ 3] 	sta num_a+1
c1d5 : c000             [ 2] 	cpy #NUM_ANY
c1d7 : f014             [ 3] 	beq con_n_to_a_detect
c1d9 : 88               [ 2] 	dey
c1da : d003             [ 3] 	bne con_n_not_dec
c1dc :                       con_dec_jmp
c1dc : 4c70c2           [ 3] 	jmp con_dec_to_a_int
c1df :                       con_n_not_dec
c1df : 88               [ 2] 	dey
c1e0 : d003             [ 3] 	bne con_n_not_hex
c1e2 :                       con_hex_jmp
c1e2 : 4c07c2           [ 3] 	jmp con_hex_to_a_int
c1e5 :                       con_n_not_hex
c1e5 : 88               [ 2] 	dey
c1e6 : d003             [ 3] 	bne con_n_err
c1e8 :                       con_bin_jmp
c1e8 : 4c46c2           [ 3] 	jmp con_bin_to_a_int
c1eb :                       con_n_err
c1eb : 38               [ 2] 	sec
c1ec : 60               [ 6] 	rts
c1ed :                       con_n_to_a_detect		; Y is zero on entry
c1ed : b149             [ 5] 	lda (num_tmp),y
c1ef : c930             [ 2] 	cmp #'0'
c1f1 : d0e9             [ 3] 	bne con_dec_jmp
c1f3 : a001             [ 2] 	ldy #1
c1f5 : b149             [ 5] 	lda (num_tmp),y
c1f7 : 0920             [ 2] 	ora #0x20
c1f9 : c978             [ 2] 	cmp #'x'
c1fb : f0e5             [ 3] 	beq con_hex_jmp
c1fd : c962             [ 2] 	cmp #'b'
c1ff : f0e7             [ 3] 	beq con_bin_jmp
c201 : d0d9             [ 4] 	bne con_dec_jmp		; Always branches
                             
                             ;****************************************
                             ;* con_hex_to_a
                             ;* Convert hex string to accumulator (unsigned)
                             ;* Input : Pointer to string (X=L, A=H)
                             ;* Output : num_a, num_a+1 contains word, X=numbe
                             ;* Regs affected : CS = Error
                             ;****************************************
c203 :                       con_hex_to_a
c203 : 8649             [ 3] 	stx num_tmp
AS65 Assembler for R6502 [1.42].                                     Page   54
-------------------------------- bank\bank0.s --------------------------------

c205 : 854a             [ 3] 	sta num_tmp+1
c207 :                       con_hex_to_a_int
c207 : a205             [ 2] 	ldx #5			; > 4 digits will cause error
c209 : a002             [ 2] 	ldy #2			; start at first digit
c20b :                       con_hex_digit
c20b : b149             [ 5] 	lda (num_tmp),y
c20d : 0920             [ 2] 	ora #0x20					; Make alpha in to lower case
c20f : 38               [ 2] 	sec							; Process high char in A
c210 : e930             [ 2] 	sbc #'0'					; Convert to hex nibble
c212 : c90a             [ 2] 	cmp #10						; If A < 10 then
c214 : 9002             [ 3] 	bcc con_hex_skip_x_f_1		; skip a-f adjustment
c216 : e927             [ 2] 	sbc #0x27					; Sub 7 to get in to A-F range
c218 :                       con_hex_skip_x_f_1
c218 : c910             [ 2] 	cmp #0x10					; Nibble should be <= 0x0f
c21a : b01c             [ 3] 	bcs	con_hex_done			; Potentially done if not
c21c : 48               [ 3] 	pha
c21d : a53d             [ 3] 	lda num_a
                             	; make room for lo nibble
c21f : 0a               [ 2] 	asl a
c220 : 263e             [ 5] 	rol num_a+1
c222 : 0a               [ 2] 	asl a
c223 : 263e             [ 5] 	rol num_a+1
c225 : 0a               [ 2] 	asl a
c226 : 263e             [ 5] 	rol num_a+1
c228 : 0a               [ 2] 	asl a
c229 : 263e             [ 5] 	rol num_a+1
c22b : 853d             [ 3] 	sta num_a
                             	; save in low nibble
c22d : 68               [ 4] 	pla
c22e : 053d             [ 3] 	ora num_a
c230 : 853d             [ 3] 	sta num_a
c232 : c8               [ 2] 	iny
c233 : ca               [ 2] 	dex
c234 : d0d5             [ 3] 	bne con_hex_digit
                             	; if got to a 5th digit then error
c236 :                       con_hex_err
c236 : 38               [ 2] 	sec
c237 : 60               [ 6] 	rts
                             	; found a non-hex digit
c238 :                       con_hex_done
                             	; if no digits processed then error
c238 : c002             [ 2] 	cpy #2
c23a : f0fa             [ 3] 	beq con_hex_err
                             	; move y to x for digits processed
c23c : 98               [ 2] 	tya
c23d : aa               [ 2] 	tax
c23e : a902             [ 2] 	lda #NUM_HEX
c240 : 18               [ 2] 	clc
c241 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* con_bin_to_a
                             ;* Convert bin string to accumulator (unsigned)
                             ;* Input : Pointer to string (X=L, A=H)
                             ;* Output : num_a, num_a+1 contains word, X=numbe
                             ;* Regs affected : CS = Error
                             ;****************************************
c242 :                       con_bin_to_a
c242 : 8649             [ 3] 	stx num_tmp
c244 : 854a             [ 3] 	sta num_tmp+1
c246 :                       con_bin_to_a_int
c246 : a002             [ 2] 	ldy #2
AS65 Assembler for R6502 [1.42].                                     Page   55
-------------------------------- bank\bank0.s --------------------------------

c248 : a211             [ 2] 	ldx #17						; Max 16 binary digits allowed
c24a :                       con_bin_digit
c24a : b149             [ 5] 	lda (num_tmp),y
c24c : c930             [ 2] 	cmp #'0'
c24e : 9010             [ 3] 	bcc con_bin_done
c250 : c932             [ 2] 	cmp #'1'+1
c252 : b00c             [ 3] 	bcs con_bin_done
                             	; sets C if '1' else resets C
c254 : 69cf             [ 2] 	adc #0xff-'0'
                             	; shift in digit
c256 : 263d             [ 5] 	rol num_a
c258 : 263e             [ 5] 	rol num_a+1
c25a : c8               [ 2] 	iny
c25b : ca               [ 2] 	dex
c25c : d0ec             [ 3] 	bne con_bin_digit
                             	; on the 17th digit is too much, error
c25e : f00a             [ 3] 	beq con_bin_err
c260 :                       con_bin_done
                             	; didn't process any digit = error
c260 : c002             [ 2] 	cpy #2
c262 : f006             [ 3] 	beq con_bin_err
                             	; put digits processed in to X
c264 : 98               [ 2] 	tya
c265 : aa               [ 2] 	tax
c266 : a903             [ 2] 	lda #NUM_BIN
c268 : 18               [ 2] 	clc
c269 : 60               [ 6] 	rts
c26a :                       con_bin_err
c26a :                       str_d_error
c26a : 38               [ 2] 	sec
c26b : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* con_d_to_a
                             ;* Convert decimal string to accumulator (SIGNED)
                             ;* Input : Pointer to string (X=L, A=H)
                             ;* Output : num_a, num_a+1 contains word, X=numbe
                             ;* Regs affected : CS = Error
                             ;****************************************
c26c :                       con_dec_to_a
c26c : 8649             [ 3] 	stx num_tmp
c26e : 854a             [ 3] 	sta num_tmp+1
c270 :                       con_dec_to_a_int
c270 : a000             [ 2] 	ldy #0
                             	; Detect if leading minus sign
c272 : b149             [ 5] 	lda (num_tmp),y
c274 : c92d             [ 2] 	cmp #'-'
c276 : d001             [ 3] 	bne str_d_find_end
                             	; skip over minus if found
c278 : c8               [ 2] 	iny
c279 :                       str_d_find_end
c279 : b149             [ 5] 	lda (num_tmp),y
c27b : c930             [ 2] 	cmp #'0'
c27d : 9007             [ 3] 	bcc str_d_found_end
c27f : c93a             [ 2] 	cmp #'9'+1
c281 : b003             [ 3] 	bcs str_d_found_end
c283 : c8               [ 2] 	iny
c284 : d0f3             [ 3] 	bne str_d_find_end	; Possble wraparound but shou
c286 :                       str_d_found_end
c286 : c007             [ 2] 	cpy #7				; Biggest int is 6 chars
c288 : b0e0             [ 3] 	bcs str_d_error		; e.g. -32767
c28a : 844c             [ 3] 	sty num_tmp+3
AS65 Assembler for R6502 [1.42].                                     Page   56
-------------------------------- bank\bank0.s --------------------------------

c28c : a900             [ 2] 	lda #0
c28e : 854b             [ 3] 	sta num_tmp+2
c290 : 853d             [ 3] 	sta num_a
c292 : 853e             [ 3] 	sta num_a+1
c294 :                       str_d_process_digit
c294 : 88               [ 2] 	dey
c295 : 3027             [ 3] 	bmi str_d_digits_done
                             
c297 : b149             [ 5] 	lda (num_tmp),y
                             
c299 : c92d             [ 2] 	cmp #'-'			; Got to minus sign?
c29b : f021             [ 3] 	beq str_d_digits_done ; also done
                             
c29d : 38               [ 2] 	sec
c29e : e930             [ 2] 	sbc #'0'
                             	; Convert digit to number
                             	; and then offset in to
                             	; look up table of powers
c2a0 : 18               [ 2] 	clc
c2a1 : 0a               [ 2] 	asl a
c2a2 : 654b             [ 3] 	adc num_tmp+2
                             	; X contains index to powers
c2a4 : aa               [ 2] 	tax
c2a5 : a53d             [ 3] 	lda num_a
c2a7 : 7ddbc2           [ 4] 	adc str_d_powers,x
c2aa : 853d             [ 3] 	sta num_a
c2ac : a53e             [ 3] 	lda num_a+1
c2ae : 7ddcc2           [ 4] 	adc str_d_powers+1,x
c2b1 : 853e             [ 3] 	sta num_a+1
c2b3 : b0b5             [ 3] 	bcs str_d_error
                             	; Move to next power of 10 index
c2b5 : a54b             [ 3] 	lda num_tmp+2
c2b7 : 6914             [ 2] 	adc #20
c2b9 : 854b             [ 3] 	sta num_tmp+2
c2bb : 4c94c2           [ 3] 	jmp str_d_process_digit
c2be :                       str_d_digits_done
                             	; check if minus
c2be : b149             [ 5] 	lda (num_tmp),y
c2c0 : c92d             [ 2] 	cmp #'-'
c2c2 : d011             [ 3] 	bne str_d_skip_neg
c2c4 : a64c             [ 3] 	ldx num_tmp+3		; Must have >= 2 chars
c2c6 : e002             [ 2] 	cpx #2				; else it's an error
c2c8 : 90a0             [ 3] 	bcc str_d_error
c2ca : a63d             [ 3] 	ldx num_a
c2cc : a53e             [ 3] 	lda num_a+1
c2ce : 203fc3           [ 6] 	jsr twos_complement
c2d1 : 863d             [ 3] 	stx num_a
c2d3 : 853e             [ 3] 	sta num_a+1
c2d5 :                       str_d_skip_neg
c2d5 : a64c             [ 3] 	ldx num_tmp+3
c2d7 : a901             [ 2] 	lda #NUM_DEC
c2d9 : 18               [ 2] 	clc
c2da : 60               [ 6] 	rts
                             
c2db :                       str_d_powers
c2db : 00000100020003..      	dw	0, 1, 2, 3, 4, 5, 6, 7, 8, 9
c2ef : 00000a0014001e..      	dw	0, 10, 20, 30, 40, 50, 60, 70, 80, 90
c303 : 00006400c8002c..      	dw	0, 100, 200, 300, 400, 500, 600, 700, 800, 90
c317 : 0000e803d007b8..      	dw	0, 1000, 2000, 3000, 4000, 5000, 6000, 7000, 
c32b : 00001027204e30..      	dw	0, 10000, 20000, 30000, 40000, 50000, 60000, 
                             	
                             
AS65 Assembler for R6502 [1.42].                                     Page   57
-------------------------------- bank\bank0.s --------------------------------

                             ;****************************************
                             ;* twos_complement
                             ;* Twos complement of X,A (X=low)
                             ;* Input : X = Low byte, A = High Byte to convert
                             ;* Output : X,A in 2's complement
                             ;* Regs affected : P
                             ;****************************************
c33f :                       twos_complement
c33f : 49ff             [ 2] 	eor #0xff
c341 : 48               [ 3] 	pha
c342 : 8a               [ 2] 	txa
c343 : 49ff             [ 2] 	eor #0xff
c345 : aa               [ 2] 	tax
c346 : 68               [ 4] 	pla
c347 : e8               [ 2] 	inx
c348 : d003             [ 3] 	bne twos_complement_skip_X
c34a : 38               [ 2] 	sec			; Add 1 to A
c34b : 6900             [ 2] 	adc #0
c34d :                       twos_complement_skip_X
c34d : 60               [ 6] 	rts
                             	
                             
                             ;****************************************
                             ;* hex_to_bcd
                             ;* Convert accumulator,X to BCD
                             ;* Input : X = Low byte, A = High Byte to convert
                             ;* Output : 3 bytes of num_a is updated
                             ;* Regs affected : P
                             ;****************************************
c34e :                       hex_to_bcd
c34e : 08               [ 3] 	php
c34f : 48               [ 3] 	pha
c350 : 8538             [ 3] 	sta tmp_d
c352 : 8a               [ 2] 	txa
c353 : 48               [ 3] 	pha
c354 : a538             [ 3] 	lda tmp_d
                             
c356 : 8649             [ 3] 	stx num_tmp
c358 : 854a             [ 3] 	sta num_tmp+1
                             	
                             ;	bmi hex_to_bcd_skip_neg	; A is negative?
                             ;	jsr twos_complement
                             ;hex_to_bcd_skip_neg
c35a : a200             [ 2] 	ldx #0
c35c : 863d             [ 3] 	stx num_a
c35e : 863e             [ 3] 	stx num_a+1
c360 : 863f             [ 3] 	stx num_a+2
                             ;	stx num_a+3
c362 : a210             [ 2] 	ldx #16
c364 : f8               [ 2] 	sed
c365 :                       bin_to_bcd_bit
c365 : 0649             [ 5] 	asl num_tmp
c367 : 264a             [ 5] 	rol num_tmp+1
c369 : a53d             [ 3] 	lda num_a
c36b : 653d             [ 3] 	adc num_a
c36d : 853d             [ 3] 	sta num_a
c36f : a53e             [ 3] 	lda num_a+1
c371 : 653e             [ 3] 	adc num_a+1
c373 : 853e             [ 3] 	sta num_a+1
c375 : a53f             [ 3] 	lda num_a+2
c377 : 653f             [ 3] 	adc num_a+2
c379 : 853f             [ 3] 	sta num_a+2
AS65 Assembler for R6502 [1.42].                                     Page   58
-------------------------------- bank\bank0.s --------------------------------

c37b : ca               [ 2] 	dex
c37c : d0e7             [ 3] 	bne bin_to_bcd_bit
                             	
c37e : 68               [ 4] 	pla
c37f : aa               [ 2] 	tax
c380 : 68               [ 4] 	pla
c381 : 28               [ 4] 	plp
c382 : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* int_to_str_ch
                             ;* Helper routine to stuff decimal char in to num
                             ;* Input : A=BCD digit, Y=num_buf index, C=insert
                             ;* Output : num_buf in ASCII, A=ASCII digit
                             ;* Regs affected : C cleared if non-zero
                             ;****************************************
c383 :                       int_to_str_ch
c383 : 290f             [ 2] 	and #0xf
c385 : 0930             [ 2] 	ora #0x30					; Convert to ascii
c387 : 4930             [ 2] 	eor #0x30					; Check if zero digit
c389 : d005             [ 3] 	bne int_to_str_nz			; If not zero definitely sto
c38b : b003             [ 3] 	bcs int_to_str_nz			; Also if C=1
c38d : 4930             [ 2] 	eor #0x30					; Restore A
c38f : 60               [ 6] 	rts							; Return without storing anything
c390 :                       int_to_str_nz
c390 : 4930             [ 2] 	eor #0x30					; Restore A
c392 : 994d00           [ 5] 	sta num_buf,y
c395 : c8               [ 2] 	iny
c396 : 38               [ 2] 	sec							; Set C as a non-zero encountered
c397 :                       int_to_str_ch_fin
c397 : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* int_to_str
                             ;* Convert int to string
                             ;* Input : in X,A (low,high), C=leading zeros wan
                             ;* Output : num_buf in ASCII 6 digits + zero term
                             ;* Regs affected : P
                             ;****************************************
c398 :                       int_to_str
                             	_pushAXY
                             
c3a1 : a000             [ 2] 	ldy #0						; first pos of num_buf
c3a3 : 0900             [ 2] 	ora #0						; Test A for sign bit
c3a5 : 08               [ 3] 	php							; Remember C bit of P
c3a6 : 100a             [ 3] 	bpl int_to_str_skip_neg		; Skip if not (postive 
c3a8 : 203fc3           [ 6] 	jsr twos_complement			; Flip X,A from 2s complem
c3ab : 48               [ 3] 	pha							; Remember A
c3ac : a92d             [ 2] 	lda #'-'					; Put in negative sign
c3ae : 854d             [ 3] 	sta num_buf
c3b0 : c8               [ 2] 	iny							; Start at second buffer pos
c3b1 : 68               [ 4] 	pla							; Restore A
c3b2 :                       int_to_str_skip_neg
c3b2 : 204ec3           [ 6]  	jsr hex_to_bcd				; Convert X,A to BCD
c3b5 : a202             [ 2] 	ldx #2						; Start at BCD high byte
c3b7 :                       int_str
c3b7 : 28               [ 4] 	plp							; Get C but immediately
c3b8 : 08               [ 3] 	php							; Save C (due to loop check later)
c3b9 : b53d             [ 4] 	lda num_a,x					; Get BCD digit
c3bb : 8554             [ 3] 	sta num_buf+7				; Save A it for the units later
AS65 Assembler for R6502 [1.42].                                     Page   59
-------------------------------- bank\bank0.s --------------------------------

c3bd : 4a               [ 2] 	lsr a						; Tens - shift to lower nibble
c3be : 4a               [ 2] 	lsr a
c3bf : 4a               [ 2] 	lsr a
c3c0 : 4a               [ 2] 	lsr a
c3c1 : 28               [ 4] 	plp							; Get C
c3c2 : 2083c3           [ 6] 	jsr int_to_str_ch			; Put ASCII code in num_buf
c3c5 : a554             [ 3] 	lda num_buf+7				; Get A for the units
c3c7 : 2083c3           [ 6] 	jsr int_to_str_ch			; Put ASCII code in num_buf
c3ca : 08               [ 3] 	php							; Save C
c3cb : ca               [ 2] 	dex
c3cc : 10e9             [ 3] 	bpl int_str
c3ce : 28               [ 4] 	plp							; Check C
c3cf : b005             [ 3] 	bcs	int_to_str_fin			; If set then something pri
c3d1 : a930             [ 2] 	lda #'0'					; Stuff a zero
c3d3 : 854d             [ 3] 	sta num_buf					; Must be in first position..
c3d5 : c8               [ 2] 	iny
c3d6 :                       int_to_str_fin
c3d6 : a900             [ 2] 	lda #0						; Terminator
c3d8 : 994d00           [ 5] 	sta num_buf,y
c3db : c8               [ 2] 	iny
                             	_pullAXY
                             
c3e1 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* bcd_to_str
                             ;* Convert num_buf to chars
                             ;* Input : num_a in BCD format
                             ;* Output : num_buf in ASCII 6 digits
                             ;* Output is big endian, input is not
                             ;* Regs affected : P
                             ;****************************************
                             ;bcd_to_str
                             ;	_pushAXY
                             ;
                             ;	ldx #5						; Index in to string
                             ;	ldy #0						; Current BCD digit
                             ;bcd_str
                             ;	lda num_a,y
                             ;	; Convert 1s digit of byte
                             ;	pha
                             ;	and #0xf
                             ;	clc
                             ;	adc #0x30
                             ;	sta num_buf,x
                             ;	; Convert 10s digit of byte
                             ;	pla
                             ;	lsr a
                             ;	lsr a
                             ;	lsr a
                             ;	lsr a
                             ;	clc
                             ;	adc #0x30					; Convert to ASCII
                             ;	sta num_buf-1,x
                             ;	dex
                             ;	dex
                             ;	iny
                             ;	cpy #3						; 3 BCD digits max
                             ;	bne bcd_str
                             ;
                             ;	_pullAXY
                             ;	rts
AS65 Assembler for R6502 [1.42].                                     Page   60
-------------------------------- bank\bank0.s --------------------------------

                             	
                             ;****************************************
                             ;* out_bcd
                             ;* Output a bcd string in num_buf
                             ;* Input : num_buf has the ASCII
                             ;* Input : C=1 print leading zeros else not
                             ;* Output : num_buf in ASCII 6 digits
                             ;* Output is big endian, input is not, Y=digits p
                             ;* Regs affected : P
                             ;****************************************
                             ;out_bcd
                             ;	pha
                             ;	txa
                             ;	pha
                             ;	php
                             ;	ldy #0						; How many digits printed
                             ;	ldx #0						; Index in to string
                             ;out_bcd_digit
                             ;	lda num_buf,x
                             ;	cpy #0						; If not in leading zero mode
                             ;	bne out_bcd_print			; No then go print
                             ;
                             ;	cmp #'0'					; else check if zero
                             ;	bne out_bcd_print			; No then go print
                             ;
                             ;	plp
                             ;	php
                             ;	bcc out_bcd_next			; If C=0 go to next digit, e
                             ;out_bcd_print
                             ;	iny
                             ;	jsr io_put_ch
                             ;out_bcd_next
                             ;	inx
                             ;	cpx #6
                             ;	bne out_bcd_digit
                             ;	tya							; If nothing printed
                             ;	bne out_bcd_fin
                             ;	lda #'0'					; Need to put out 1 zero
                             ;	jsr io_put_ch
                             ;	iny
                             ;out_bcd_fin
                             ;	plp
                             ;	pla
                             ;	tax
                             ;	pla
                             ;	clc
                             ;	rts
                             	
                             	
                             ;****************************************
                             ;* print_a_to_d
                             ;* Convert X,A to decimal string
                             ;* Input : X,A = number Low,High
                             ;* Input : C=1 print leading zeros else not
                             ;* Output : num_buf in ASCII max 6 digits
                             ;*          Y=digits printed including sign
                             ;* Output is big endian, input is not
                             ;* Regs affected : P
                             ;****************************************
c3e2 :                       print_a_to_d
c3e2 : 2098c3           [ 6] 	jsr int_to_str
c3e5 : a000             [ 2] 	ldy #0
AS65 Assembler for R6502 [1.42].                                     Page   61
-------------------------------- bank\bank0.s --------------------------------

c3e7 :                       print_a_to_d_ch
c3e7 : b94d00           [ 4] 	lda num_buf,y
c3ea : f006             [ 3] 	beq print_a_to_d_fin
c3ec : 2027c4           [ 6] 	jsr io_put_ch
c3ef : c8               [ 2] 	iny
c3f0 : d0f5             [ 3] 	bne print_a_to_d_ch
c3f2 :                       print_a_to_d_fin
c3f2 : 60               [ 6] 	rts
                             
                             ;	php
                             ;	cmp #0x80					; Check if sign bit is set
                             ;	bcc print_a_to_d_skip_neg	; Skip if not (postiv
                             ;	jsr twos_complement			; Flip from 2s complement
                             ;	jsr hex_to_bcd				; Convert to BCD
                             ;	jsr bcd_to_str				; Convert BCD to string
                             ;	lda #'-'
                             ;	jsr io_put_ch
                             ;	plp							; Leading zeros preference
                             ;	jsr out_bcd
                             ;	iny							; Account for sign
                             ;	rts
                             ;print_a_to_d_skip_neg
                             ;	jsr hex_to_bcd				; Convert to BCD
                             ;	jsr bcd_to_str				; Convert BCD to string
                             ;	plp							; Leading zeros preference
                             ;	jmp out_bcd					; Print +ve string
                             	
                             	include "io/io.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  IO.S
                             ;*  General IO module.  Allows different IO devic
                             ;*  utilised transparently by the rest of the cod
                             ;*  Other code should use "io_" commands so that 
                             ;*  do not need to know what specific device is p
                             ;*  input and output capabilities.
                             ;*	On startup, the kernel defaults to keyboard an
                             ;*  examines the BBC DIP switch to decide whether
                             ;*	but when saving and loading points to tape rou
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code
                             
c3f3 :                       mod_sz_io_s
                             
                             ;****************************************
                             ;* io_init
                             ;* Initialise the default device and make active
                             ;* No keys pressed = serial (default)
                             ;* F0 pressed = KB/VDP
                             ;* F1 pressed = Serial
                             ;* Keyboard and screen or serial port
                             ;* Output : None
                             ;* Regs affected : P, A
AS65 Assembler for R6502 [1.42].                                     Page   62
-------------------------------- bank\bank0.s --------------------------------

                             ;****************************************
c3f3 :                       io_init
c3f3 : a901             [ 2] 	lda #1				; Default = KB/VDP
c3f5 : 8d0006           [ 4] 	sta io_default
c3f8 : 4cfec3           [ 3] 	jmp io_active_device; Activate the device
                             
                             
                             ;****************************************
                             ;* io_set_default, io_active_device
                             ;* Activate device based on default or A
                             ;* Input : A = Device number
                             ;* Output : None
                             ;* Regs affected : P, A
                             ;****************************************
c3fb :                       io_set_default			; Entry point for default
c3fb : ad0006           [ 4] 	lda io_default
c3fe :                       io_active_device		; Entry point for A set
c3fe : aa               [ 2] 	tax					; X=buf size index
c3ff : 0a               [ 2] 	asl	a				; x16 the Block number
c400 : 0a               [ 2] 	asl a
c401 : 0a               [ 2] 	asl a
c402 : 0a               [ 2] 	asl a
c403 : a8               [ 2] 	tay					; Y=index in to device table
c404 : bd8ac4           [ 4] 	lda io_buf_sz,x
c407 : 853b             [ 3] 	sta buf_sz
c409 : a200             [ 2] 	ldx #0
                             	; Copy device settings to io block
c40b :                       io_copy_data
c40b : b98cc4           [ 4] 	lda io_devices,y
c40e : 9d0106           [ 5] 	sta io_block,x
c411 : c8               [ 2] 	iny
c412 : e8               [ 2] 	inx
c413 : e010             [ 2] 	cpx #16
c415 : d0f4             [ 3] 	bne io_copy_data
                             	
c417 : a913             [ 2] 	lda #lo(scratch)	; Initialise IO buffer and size
c419 : 8539             [ 3] 	sta buf_lo
c41b : a906             [ 2] 	lda #hi(scratch)
c41d : 853a             [ 3] 	sta buf_hi
c41f : a90d             [ 2] 	lda #UTF_CR			; Line terminator is CR
c421 : 853c             [ 3] 	sta buf_ef
c423 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* io_get_ch
                             ;* Get a char (wait forever or just check)
                             ;* Input : C = 1 for synchronous, 0 for async
                             ;* Output : A = Byte code, C = 1 means A is inval
                             ;* Regs affected : P, A
                             ;****************************************
c424 :                       io_get_ch
c424 : 6c0106           [ 6] 	jmp (io_block+io_get_byte)
                             	
                             
                             ;****************************************
                             ;* io_put_ch
                             ;* Put a char
                             ;* Input : A = char
                             ;* Regs affected : P, A
                             ;****************************************
c427 :                       io_put_ch
c427 : 6c0306           [ 6] 	jmp (io_block+io_put_byte)
AS65 Assembler for R6502 [1.42].                                     Page   63
-------------------------------- bank\bank0.s --------------------------------

                             	
                             ;****************************************
                             ;* io_open_read
                             ;* Open for reading
                             ;* Input : X,A = pointer to filename (zero termin
                             ;* Output : C=0 success
                             ;* Regs affected : All
                             ;****************************************
c42a :                       io_open_read
c42a : 6c0506           [ 6] 	jmp (io_block+io_open_r)
                             	
                             ;****************************************
                             ;* io_open_write
                             ;* Open for reading
                             ;* Input : X,A = pointer to filename (zero termin
                             ;* Output : C=0 success
                             ;* Regs affected : All
                             ;****************************************
c42d :                       io_open_write
c42d : 6c0706           [ 6] 	jmp (io_block+io_open_w)
                             
                             ;****************************************
                             ;* io_close
                             ;* Close a file
                             ;* Input : 
                             ;* Output : C=0 success
                             ;* Regs affected : All
                             ;****************************************
c430 :                       io_close
c430 : 6c0906           [ 6] 	jmp (io_block+io_close_f)
                             	
                             ;****************************************
                             ;* io_delete
                             ;* Delete a file
                             ;* Input : 
                             ;* Output : C=0 success
                             ;* Regs affected : All
                             ;****************************************
c433 :                       io_delete
c433 : 6c0b06           [ 6] 	jmp (io_block+io_del_f)
                             
                             ;****************************************
                             ;* io_open_ext1
                             ;* Extended function 1
                             ;* Input : 
                             ;* Output : C=0 success
                             ;* Regs affected : All
                             ;****************************************
c436 :                       io_open_ext1
c436 : 6c0d06           [ 6] 	jmp (io_block+io_ext1)
                             	
                             ;****************************************
                             ;* io_open_ext2
                             ;* Extended function 2
                             ;* Input : 
                             ;* Output : C=0 success
                             ;* Regs affected : All
                             ;****************************************
c439 :                       io_open_ext2
c439 : 6c0f06           [ 6] 	jmp (io_block+io_ext2)
                             	
                             ;****************************************
AS65 Assembler for R6502 [1.42].                                     Page   64
-------------------------------- bank\bank0.s --------------------------------

                             ;* io_read_line
                             ;* Read a line, terminated by terminating char or
                             ;* Input : buf_(lo/hi/sz/ef) : Address, Max size,
                             ;* Output : Y = Line length C = Buffer limit reac
                             ;* Regs affected : None
                             ;****************************************
c43c :                       io_read_line
c43c : 48               [ 3] 	pha
                             
c43d : 08               [ 3] 	php					; Save echo state
                             	
c43e : a000             [ 2] 	ldy #0x00			; Starting at first byte
c440 :                       io_get_line_byte
c440 : 38               [ 2] 	sec					; Getting bytes synchronously
c441 : 2024c4           [ 6] 	jsr io_get_ch		; Get a byte
c444 : b027             [ 3] 	bcs io_get_line_done; Got nothing then finish
c446 : 28               [ 4] 	plp					; Get echo state
c447 : 08               [ 3] 	php					; Instantly save it back
c448 : 900c             [ 3] 	bcc io_skip_echo	; Carry not set = don't echo
c44a : c97f             [ 2] 	cmp #UTF_DEL		; Delete?
c44c : d005             [ 3] 	bne io_do_echo
c44e : c000             [ 2] 	cpy #0				; Already at beginning?
c450 : f004             [ 3] 	beq io_skip_echo	; Don't echo delete
c452 : 88               [ 2] 	dey					; Else decrement length
c453 :                       io_do_echo
c453 : 2027c4           [ 6] 	jsr io_put_ch		; Echo it
c456 :                       io_skip_echo
c456 : c920             [ 2] 	cmp #UTF_SPECIAL	; Special character?
c458 : 9007             [ 3] 	bcc io_skip_special	; Skip if so (don't add to b
c45a : c97f             [ 2] 	cmp #UTF_DEL		; Don't proces DEL either
c45c : f003             [ 3] 	beq io_skip_special
c45e : 9139             [ 5] 	sta (buf_lo),y		; Save it
c460 : c8               [ 2] 	iny					; Increase length
c461 :                       io_skip_special
c461 : c53c             [ 3] 	cmp buf_ef			; Is it the terminating char?
c463 : f008             [ 3] 	beq io_get_line_done	; If yes then done
c465 : c43b             [ 3] 	cpy buf_sz			; Reached the buffer max size?
c467 : d0d7             [ 3] 	bne io_get_line_byte	; No, get another byte
c469 : 28               [ 4] 	plp					; Remember to pull echo state off stack
c46a : 38               [ 2] 	sec					; Yes, set carry flag
c46b : 68               [ 4] 	pla
c46c : 60               [ 6] 	rts					; And done
c46d :                       io_get_line_done
c46d : a900             [ 2] 	lda #0
c46f : 9139             [ 5] 	sta (buf_lo),y		; Terminate with 0
c471 : 28               [ 4] 	plp					; Remember to pull echo state off stack
c472 : 18               [ 2] 	clc					; Clear carry flag
c473 : 68               [ 4] 	pla
c474 : 60               [ 6] 	rts					; Fin
                             
                             ;****************************************
                             ;* io_print_line
                             ;* Print a line (when data is not already in seri
                             ;* Input : X = Address Lo, A = Address Hi
                             ;* Output : Y=number chars output
                             ;* Regs affected : All
                             ;****************************************
c475 :                       io_print_line
c475 : 48               [ 3] 	pha
                             
c476 : 8636             [ 3] 	stx tmp_clo					; Store the string pointer
c478 : 8537             [ 3] 	sta tmp_chi					; lo and hi
AS65 Assembler for R6502 [1.42].                                     Page   65
-------------------------------- bank\bank0.s --------------------------------

c47a : a000             [ 2] 	ldy #0						; Start at the beginning!
c47c :                       io_print_line_byte
c47c : b136             [ 5] 	lda (tmp_clo),y				; Copy byte to
c47e : f006             [ 3] 	beq io_print_done			; If zero then done - print
c480 : 2027c4           [ 6] 	jsr io_put_ch				; Transmit
c483 : c8               [ 2] 	iny
c484 : d0f6             [ 3] 	bne io_print_line_byte		; Carry on until zero fo
c486 :                       io_print_done
c486 : 68               [ 4] 	pla
c487 : 60               [ 6] 	rts
                             
                             
                             ;*** Null operation just clc and return ***
c488 :                       io_null_op
c488 : 18               [ 2] 	clc
c489 : 60               [ 6] 	rts
                             	
                             ;* IO buffer sizes
c48a :                       io_buf_sz
c48a : ff                    	db 255					; Device 0 = Tape
c48b : 7f                    	db 127					; Device 1 = keyboard/screen
                             
                             ;* IO devices defined here
c48c :                       io_devices
                             ;* Device zero is the tape system
                             ;* only offers get and put
                             ;* This is a block based device
c48c :                       io_device0					; Tape device, input = Tape, outpu
c48c : cfc6                  	dw	tp_get_byte			; io_get_ch
c48e : f6c5                  	dw	tp_put_byte			; io_put_ch
c490 : 5fc5                  	dw	tp_open_read		; io_open_r
c492 : b0c5                  	dw	tp_open_write		; io_open_w
c494 : 92c5                  	dw	tp_close			; io_close_f
c496 : 88c4                  	dw	io_null_op			; io_del_f
c498 : 5fc5                  	dw	tp_open_bread		; io_ext1 - open for binary re
c49a : aac5                  	dw	tp_open_bwrite		; io_ext2 - open for binary w
                             ;* Device one is keyboard / screen
                             ;* only offers get and put
                             ;* This is a char based device
c49c :                       io_device1					; Default device, input = screen e
c49c : 5ccf                  	dw	gr_get_key			; io_get_ch
c49e : 92cf                  	dw	gr_put_byte			; io_put_ch
c4a0 : 88c4                  	dw	io_null_op			; io_open_r
c4a2 : 88c4                  	dw	io_null_op			; io_open_w
c4a4 : 88c4                  	dw	io_null_op			; io_close_f
c4a6 : 88c4                  	dw	io_null_op			; io_del_f
c4a8 : 88c4                  	dw	io_null_op			; io_ext1
c4aa : 88c4                  	dw	io_null_op			; io_ext2
                             ;* Serial device using printer port ACK (input) a
                             ;* This is a char based device
                             ;io_device2					; Serial device, input = Ser, out
                             ;	dw	ser_get_byte		; io_get_ch
                             ;	dw	ser_put_byte		; io_put_ch
                             ;	dw	ser_open			; io_open_r
                             ;	dw	ser_open			; io_open_w
                             ;	dw	ser_close			; io_close_f
                             ;	dw	io_null_op			; io_del_f
                             ;	dw	io_null_op			; io_ext1
                             ;	dw	io_null_op			; io_ext2
                             
c4ac :                       mod_sz_io_e
                             
AS65 Assembler for R6502 [1.42].                                     Page   66
-------------------------------- bank\bank0.s --------------------------------

                             
                             
                             ;* Reset vector points here - 6502 starts here
c4ac :                       init
                             ;	jmp init_test
                             	; First clear ram
c4ac : 78               [ 2] 	sei					; Need this for MOS 6502
c4ad : d8               [ 2] 	cld					; Need this for MOS 6502
c4ae : 4cd8c4           [ 3] 	jmp init_ram		; jmp not jsr to ram initialiser
c4b1 :                       init_2					; init_ram will jump back to here
c4b1 : a2ff             [ 2] 	ldx #0xff			; Initialise stack pointer
c4b3 : 9a               [ 2] 	txs
                             
c4b4 : 20bac4           [ 6] 	jsr kernel_init
                             
c4b7 : 4c77c0           [ 3] 	jmp main
                             
c4ba :                       kernel_init
c4ba : 20b7c0           [ 6] 	jsr init_irq		; Initialise IRQ handling
                             
c4bd : 20f8c4           [ 6] 	jsr init_via0		; initialise cia 0 - tape inactiv
c4c0 : 2047c5           [ 6] 	jsr tp_init			; Initialise tape handling
                             
c4c3 : 2099d4           [ 6] 	jsr init_snd		; initialise the sound chip
                             
c4c6 : 20fecc           [ 6] 	jsr gr_init			; Initialise graphics, default is 
                             
c4c9 : 203ac7           [ 6] 	jsr init_keyboard	; initialise keyboard timer se
c4cc : 20f3c3           [ 6] 	jsr io_init			; Set default input/output device
                             
c4cf : a900             [ 2] 	lda #0
c4d1 : 8508             [ 3] 	sta vdp_cnt
                             
c4d3 : 2026f7           [ 6] 	jsr df_init			; Initialise interpreter
                             
c4d6 : 58               [ 2] 	cli					; irq interrupts enable
                             
c4d7 :                       kernel_test
                             ;	jsr kb_read_raw
                             ;	jsr utilPrintA
                             ;	jsr utilPrintCRLF
                             ;	jmp kernel_test
                             	
c4d7 : 60               [ 6] 	rts
                             
                             
                             ;* Initialises RAM, skipping page 3 which is for 
                             ;* Zeroes all addressable RAM in the default bank
c4d8 :                       init_ram
c4d8 : a900             [ 2] 	lda #0				; Normal RAM filled with zero
c4da : a002             [ 2] 	ldy #0x02			; But Y initially at 2 to not overwr
c4dc : aa               [ 2] 	tax 				; Page counter starts at zero
c4dd : 8600             [ 3] 	stx 0x00			; Start at page 0
c4df : 8601             [ 3] 	stx 0x01
c4e1 :                       init_ram_1
c4e1 : e003             [ 2] 	cpx	#3				; Ignore page 3 (IO page)
c4e3 : f005             [ 3] 	beq init_ram_skip
c4e5 :                       init_ram_fill
c4e5 : 9100             [ 5] 	sta (0x00),y		; Write byte to RAM (zero or copy 
c4e7 : c8               [ 2] 	iny
c4e8 : d0f7             [ 3] 	bne init_ram_1		; Do a whole page
c4ea :                       init_ram_skip
AS65 Assembler for R6502 [1.42].                                     Page   67
-------------------------------- bank\bank0.s --------------------------------

c4ea : e601             [ 5] 	inc 0x01			; Increase page pointer
c4ec : e8               [ 2] 	inx					; Reduce page count
c4ed : e0c0             [ 2] 	cpx #0xc0			; Do all pages until page until we g
c4ef : d0f0             [ 3] 	bne init_ram_1
                             
c4f1 : 4cb1c4           [ 3] 	jmp init_2			; Carry on initialisation
                             
                             ; 6502 Non-maskable interrupt come here
c4f4 :                       nmi
c4f4 : 40               [ 6] 	rti
                             
c4f5 :                       mod_sz_kernel_e
                             
                             
                             
                             ; Bank specific code goes here
                             	include "cia/cia.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  CIA.S
                             ;*  Code to initialise and utilise the 6522, whic
                             ;*	for various functions on the Oric including;
                             ;*		Port A:
                             ;*			[7..0] 	Printer data bits
                             ;*			[7..0] 	Interface to AY-3-8912
                             ;*		Port B:
                             ;*			[2..0] 	Keyboard matrix row selector
                             ;*			[7]	   	Tape output
                             ;*			[6]    	Tape player motor signal
                             ;*			[4]		Printer strobe
                             ;*		CA1:		Printer ACK
                             ;*		CB1: 		Tape input
                             ;*		CA2,CB2: 	Selecting the AY-3-8912
                             ;*
                             ;*  This file is called cia.s because code was or
                             ;*  for a MOS 6526 from a CMB64, but didn't get a
                             ;*	renaming this file ;-)
                             ;*
                             ;************************************************
                             
                             
                             	; ROM code
                             	code
                             
c4f5 :                       mod_sz_cia_s
                             
                             
                             ;****************************************
                             ;* init_via0
                             ;* Initialise cia 0
                             ;* Input : None
                             ;* Output : None
                             ;* Regs affected : A
                             ;****************************************
c4f5 :                       init_via0_tape					; initialisation bytes for tap
c4f5 : a017             [ 2] 	ldy #init_tape_tab-init_via0_tab
AS65 Assembler for R6502 [1.42].                                     Page   68
-------------------------------- bank\bank0.s --------------------------------

c4f7 : 2c                    	db 0x2c						; Ignore next two bytes
c4f8 :                       init_via0
c4f8 : a000             [ 2] 	ldy #0						; Standard initialisation of VIA
c4fa :                       init_via0_loop
c4fa : b90bc5           [ 4] 	lda init_via0_tab,y
c4fd : 300b             [ 4] 	bmi init_via0_done
c4ff : aa               [ 2] 	tax
c500 : c8               [ 2] 	iny
c501 : b90bc5           [ 4] 	lda init_via0_tab,y
c504 : 9d0003           [ 5] 	sta IO_0,x
c507 : c8               [ 2] 	iny
c508 : d0f0             [ 4] 	bne init_via0_loop
                             
c50a :                       init_via0_done
c50a : 60               [ 6] 	rts							; return from sub
                             
c50b :                       init_via0_tab
c50b : 0e7f                  	db IER, 	0x7f
c50d : 03ff                  	db DDRA,	0xff			; Port A output by default
c50f : 02f7                  	db DDRB,	0xf7			; Tape motor + KB select
c511 : 00b7                  	db PRB,		KB_PRB+7		; Port B default (cassette mo
c513 : 0cdd                  	db PCR,		SND_DESELECT	; Ensure AY is not selecte
c515 : 0420                  	db T1CL,	lo(TIMER1_RATE)	; 50Hz
c517 : 0620                  	db T1LL,	lo(TIMER1_RATE)	; 50Hz
c519 : 054e                  	db T1CH,	hi(TIMER1_RATE)	; 50Hz
c51b : 074e                  	db T1LH,	hi(TIMER1_RATE)	; 50Hz
c51d : 0b40                  	db ACR,		0x40			; Timer 1 continuous
c51f : 0ec0                  	db IER,		0xc0			; Timer 1 interrupt enabled
c521 : ff                    	db -1
c522 :                       init_tape_tab
c522 : 0e7f                  	db IER,		0x7f			; Disable all interrupts
c524 : 08f4                  	db T2CL,	0xf4			; Timer 2 used for measuring CB1
c526 : 0c10                  	db PCR,		0x10			; Interrupt on CB1 positive edge
                             ;	db DDRB,	0xff			; Set port B output
c528 : 0bc0                  	db ACR,		0xc0			; T1 continuous and toggle PB7
c52a : 04a0                  	db T1CL,	lo(TAPE_RATE*2)	; Tape rate /2 = 0
c52c : 0501                  	db T1CH,	hi(TAPE_RATE*2)	; Tape rate /2 = 0
c52e : 00f0                  	db PRB,		KB_PRB+0x40		; Tape motor ON
c530 : ff                    	db -1
                             ;init_ser_tab
                             ;	db IER,		0x7f			; Disable all interrupts
                             ;	db T2CL,	0xf4			; Timer 2 used for measuring bi
                             ;	db PCR,		0xdd			; Ensure AY is not selected (CB
                             ;	db DDRB,	0xff			; Set port B output
                             ;	db -1
                             
c531 :                       mod_sz_cia_e
                             
                             	include "tape/tape.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  TAPE.S
                             ;*	These routines allow for tape input/output
                             ;*	The tape format is not compatible with a regul
                             ;*	but is a block format as follows;
                             ;*	Some zero bits (64) start a block.
AS65 Assembler for R6502 [1.42].                                     Page   69
-------------------------------- bank\bank0.s --------------------------------

                             ;*	Then two bytes of data representing the block 
                             ;*	Then 256 bytes of block data.
                             ;*	Each byte above consists of two '1' start bits
                             ;*	one '0' stop bit.
                             ;*	After each block, 1 second of 4800Hz (seen as 
                             ;*	is transmitted to allow the CPU to deal with t
                             ;*	when subsequently loading.
                             ;*	A bit is 4800Hz half cycle then 4800Hz half cy
                             ;*	'1' or 2400Hz half cycle for a '0', except for
                             ;*	block which is one second of 2400Hz.
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code
                             
c531 :                       tp_open_msg
c531 : 4c6f6164696e67..      	db	"Loading:",0
c53a :                       tp_save_msg
c53a : 536176696e673a00      	db	"Saving:",0
c542 :                       tp_back4
c542 : 0808080800            	db	8,8,8,8,0
                             	
                             ;* tp_init
                             ;* Basic initialisation for tape handling
c547 :                       tp_init
c547 : a900             [ 2] 	lda #0
c549 : 8558             [ 3] 	sta tp_flag
c54b : 8557             [ 3] 	sta tp_idx
c54d : 18               [ 2] 	clc
c54e : 60               [ 6] 	rts
                             
                             ;* Common function to open tape
c54f :                       tp_open_common				; Used by open write too
c54f : 78               [ 2] 	sei						; Interrupts disabled from here..
c550 : 20f5c4           [ 6] 	jsr init_via0_tape		; Get ready to output (tape 
                             
                             
c553 : a200             [ 2] 	ldx #0
c555 : 8657             [ 3] 	stx tp_idx				; Initialise block
c557 : 8655             [ 3] 	stx tp_block
c559 : 8656             [ 3] 	stx tp_block+1
c55b : e8               [ 2] 	inx
c55c : 8658             [ 3] 	stx tp_flag				; assume 1 = Read mode
c55e : 60               [ 6] 	rts
                             
                             ;* tp_open_read
                             ;* Open tape settings
                             
c55f :                       fd_cload_getname_pc			; ** FOR ORICUTRON EMULATOR
                             
c55f :                       tp_open_bread
c55f :                       tp_open_read
c55f : a031             [ 2] 	ldy #lo(tp_open_msg)
c561 : a9c5             [ 2] 	lda #hi(tp_open_msg)
c563 : 20e6cf           [ 6] 	jsr gr_print_msg
                             	
c566 : 204fc5           [ 6] 	jsr tp_open_common
                             
c569 :                       tp_get_fname_start
c569 : 200bc7           [ 6] 	jsr tp_read_byte
c56c : c924             [ 2] 	cmp #'$'				; Find the $ symbol
AS65 Assembler for R6502 [1.42].                                     Page   70
-------------------------------- bank\bank0.s --------------------------------

c56e : d0f9             [ 3] 	bne tp_get_fname_start
                             	
c570 : a209             [ 2] 	ldx #9					; 9 byte header - skip
c572 :                       tp_get_header
c572 : 200bc7           [ 6] 	jsr tp_read_byte
c575 : ca               [ 2] 	dex
c576 : d0fa             [ 3] 	bne tp_get_header
                             	
                             	; X= zero here, now get null terminated filename
c578 :                       tp_get_fname
c578 : 200bc7           [ 6] 	jsr tp_read_byte
c57b : 9d0004           [ 5] 	sta df_linbuff,x
c57e : e8               [ 2] 	inx
c57f : c900             [ 2] 	cmp #0
c581 : d0f5             [ 3] 	bne tp_get_fname
                             
c583 : a000             [ 2] 	ldy #lo(df_linbuff)
c585 : a904             [ 2] 	lda #hi(df_linbuff)
c587 : 20e6cf           [ 6] 	jsr gr_print_msg
c58a : a920             [ 2] 	lda #' '
c58c : 2092cf           [ 6] 	jsr gr_put_byte
                             
c58f : 18               [ 2] 	clc
c590 : 60               [ 6] 	rts
                             
c591 :                       tt_getsync_pc				; ** FOR ORICUTRON EMULATOR **
c591 :                       tt_getsync_end_pc			; ** FOR ORICUTRON EMULATOR *
                             
c591 : ea               [ 2] 	nop
                             	
                             
                             ;* tp_close
                             ;* Close tape settings
c592 :                       tp_close
c592 : a558             [ 3] 	lda tp_flag
c594 : c902             [ 2] 	cmp #2					; Write mode?
c596 : d003             [ 3] 	bne tp_close_no_flush	; If not no need to flush
c598 : 2028c6           [ 6] 	jsr tp_put_block		; Flush the current block
c59b :                       tp_close_no_flush
c59b : a90d             [ 2] 	lda #0x0d				; Line feed
c59d : 2092cf           [ 6] 	jsr gr_put_byte
                             	
c5a0 : 20f8c4           [ 6] 	jsr init_via0			; Back to normal
c5a3 : 58               [ 2] 	cli
c5a4 : a900             [ 2] 	lda #0					; Zero tape flag
c5a6 : 8558             [ 3] 	sta tp_flag
                             
c5a8 :                       tt_csave_end_pc				; ** FOR ORICUTRON EMULATOR **
                             
c5a8 : 18               [ 2] 	clc
c5a9 : 60               [ 6] 	rts
                             
                             ;* tp_open_write
                             ;* Open tape settings
c5aa :                       tp_open_bwrite
c5aa : a001             [ 2] 	ldy #hi(0x101)
c5ac : a201             [ 2] 	ldx #lo(0x101)
c5ae : d004             [ 3] 	bne tp_open_write_start
c5b0 :                       tp_open_write
c5b0 : a018             [ 2] 	ldy #hi(6000+0x101)
c5b2 : a271             [ 2] 	ldx #lo(6000+0x101)
                             
AS65 Assembler for R6502 [1.42].                                     Page   71
-------------------------------- bank\bank0.s --------------------------------

c5b4 :                       fd_csave_getname_pc			; ** FOR ORICUTRON EMULATOR
                             
c5b4 :                       tp_open_write_start
c5b4 : 845a             [ 3] 	sty tp_delay+1
c5b6 : 8659             [ 3] 	stx tp_delay
c5b8 : a03a             [ 2] 	ldy #lo(tp_save_msg)
c5ba : a9c5             [ 2] 	lda #hi(tp_save_msg)
c5bc : 20e6cf           [ 6] 	jsr gr_print_msg
c5bf : a000             [ 2] 	ldy #lo(df_linbuff)
c5c1 : a904             [ 2] 	lda #hi(df_linbuff)
c5c3 : 20e6cf           [ 6] 	jsr gr_print_msg
c5c6 : a920             [ 2] 	lda #' '
c5c8 : 2092cf           [ 6] 	jsr gr_put_byte
                             	
c5cb : 204fc5           [ 6] 	jsr tp_open_common		; Same as reading but
c5ce : e658             [ 5] 	inc tp_flag				; Make flag = 2 for write mode
                             
c5d0 :                       tt_writeleader_pc			; ** FOR ORICUTRON EMULATOR *
c5d0 :                       tt_writeleader_end_pc		; ** FOR ORICUTRON EMULATO
c5d0 : a280             [ 2] 	ldx #128				; 128 low bits
c5d2 : 2020c6           [ 6] 	jsr tp_put_delay
                             
c5d5 : a924             [ 2] 	lda #'$'				; Start of header symbol
c5d7 : 38               [ 2] 	sec
c5d8 : 2077c6           [ 6] 	jsr tp_write_byte
                             	
c5db : a209             [ 2] 	ldx #9					; Header, for future expansion
c5dd : a9ff             [ 2] 	lda #0xff
c5df :                       tp_write_header	
c5df : 38               [ 2] 	sec
c5e0 : 2077c6           [ 6] 	jsr tp_write_byte
c5e3 : ca               [ 2] 	dex
c5e4 : d0f9             [ 3] 	bne tp_write_header
                             	
c5e6 : a200             [ 2] 	ldx #0
c5e8 :                       tp_write_fname
c5e8 : bd0004           [ 4] 	lda df_linbuff,x		; Put the filename
c5eb : 38               [ 2] 	sec
c5ec : 2077c6           [ 6] 	jsr tp_write_byte
c5ef : e8               [ 2] 	inx
c5f0 : c900             [ 2] 	cmp #0
c5f2 : d0f4             [ 3] 	bne tp_write_fname
                             	
c5f4 : 18               [ 2] 	clc
c5f5 : 60               [ 6] 	rts
                             
                             
                             ;* tp_put_byte
                             ;* Put to byte to tape - if got a block then save
                             
c5f6 :                       tp_put_byte
c5f6 : 48               [ 3] 	pha
c5f7 : 8538             [ 3] 	sta tmp_d
c5f9 : 8a               [ 2] 	txa
c5fa : 48               [ 3] 	pha
c5fb : 98               [ 2] 	tya
c5fc : 48               [ 3] 	pha
c5fd : a538             [ 3] 	lda tmp_d
                             	
c5ff : a457             [ 3] 	ldy tp_idx				; Save byte to buffer
c601 : 990002           [ 5] 	sta tp_buf,y
c604 : c8               [ 2] 	iny
AS65 Assembler for R6502 [1.42].                                     Page   72
-------------------------------- bank\bank0.s --------------------------------

c605 : 8457             [ 3] 	sty tp_idx
c607 : d010             [ 3] 	bne tp_put_byte_done
c609 : 2028c6           [ 6] 	jsr tp_put_block		; Flush block to tape
c60c : 18               [ 2] 	clc						; Increment block #
c60d : a555             [ 3] 	lda tp_block
c60f : 6901             [ 2] 	adc #1
c611 : 8555             [ 3] 	sta tp_block
c613 : a556             [ 3] 	lda tp_block+1
c615 : 6900             [ 2] 	adc #0
c617 : 8556             [ 3] 	sta tp_block+1
c619 :                       tp_put_byte_done
c619 : 68               [ 4] 	pla
c61a : a8               [ 2] 	tay
c61b : 68               [ 4] 	pla
c61c : aa               [ 2] 	tax
c61d : 68               [ 4] 	pla
c61e : 18               [ 2] 	clc
c61f : 60               [ 6] 	rts
                             
                             ; tp_put_delay
                             ;* X = number of zero bits to insert
c620 :                       tp_put_delay
c620 : 18               [ 2] 	clc
c621 : 209ac6           [ 6] 	jsr tp_write_bit
c624 : ca               [ 2] 	dex
c625 : d0f9             [ 3] 	bne tp_put_delay
c627 : 60               [ 6] 	rts
                             
                             ;* tp_put_block
                             ;* flush a block to tape
c628 :                       tp_put_block
c628 : 204cc6           [ 6] 	jsr tp_print_block
                             		
c62b : a280             [ 2] 	ldx #128				; 128 low bits
c62d : 2020c6           [ 6] 	jsr tp_put_delay
                             
c630 : a555             [ 3] 	lda tp_block			; Save block number low then high
c632 : 18               [ 2] 	clc
c633 : 2077c6           [ 6] 	jsr tp_write_byte
c636 : a556             [ 3] 	lda tp_block+1
c638 : 38               [ 2] 	sec
c639 : 2077c6           [ 6] 	jsr tp_write_byte
                             
c63c : a200             [ 2] 	ldx #0
c63e :                       tp_put_block_bytes
c63e : bd0002           [ 4] 	lda tp_buf,x			; Then write out all bytes in blo
c641 : 18               [ 2] 	clc
c642 : 2077c6           [ 6] 	jsr tp_write_byte
c645 : e8               [ 2] 	inx
c646 : d0f6             [ 3] 	bne tp_put_block_bytes	; Always 256 bytes
                             	
c648 : 206cc6           [ 6] 	jsr tp_block_gap		; Wait a while, still outputti
                             
c64b : 60               [ 6] 	rts
                             
                             ; tp_print_block
c64c :                       tp_print_block
c64c : a556             [ 3] 	lda tp_block+1			; Print block number hi byte
c64e : 2082c1           [ 6] 	jsr str_a_to_x
c651 : 2092cf           [ 6] 	jsr gr_put_byte
c654 : 8a               [ 2] 	txa
c655 : 2092cf           [ 6] 	jsr gr_put_byte
AS65 Assembler for R6502 [1.42].                                     Page   73
-------------------------------- bank\bank0.s --------------------------------

c658 : a555             [ 3] 	lda tp_block			; Print block number lo byte
c65a : 2082c1           [ 6] 	jsr str_a_to_x
c65d : 2092cf           [ 6] 	jsr gr_put_byte
c660 : 8a               [ 2] 	txa
c661 : 2092cf           [ 6] 	jsr gr_put_byte
c664 : a9c5             [ 2] 	lda #hi(tp_back4)		; Go back 4 characters to pri
c666 : a042             [ 2] 	ldy #lo(tp_back4)
c668 : 20e6cf           [ 6] 	jsr gr_print_msg
c66b : 60               [ 6] 	rts
                             
                             ; tp_block_gap
                             ; Send 2400 bits of zero ~ 1.5 seconds
                             ; add 0x101 due to how counters decrement
                             ; For binary mode it is just 1 bit gap
c66c :                       tp_block_gap
c66c : a45a             [ 3] 	ldy tp_delay+1
c66e : a659             [ 3] 	ldx tp_delay
c670 :                       tp_block_gap_1
c670 : 2020c6           [ 6] 	jsr tp_put_delay
c673 : 88               [ 2] 	dey
c674 : d0fa             [ 3] 	bne tp_block_gap_1
c676 : 60               [ 6] 	rts	
                             
                             ;* tp_write_byte
                             ;* Write a byte to tape which looks like this
                             ;* 11xxxxxxxx0
c677 :                       tt_putbyte_pc				; ** FOR ORICUTRON EMULATOR **
c677 :                       tp_write_byte
c677 : 48               [ 3] 	pha
c678 : 08               [ 3] 	php
c679 : 38               [ 2] 	sec					; 1 for start bit
c67a : 209ac6           [ 6] 	jsr tp_write_bit
c67d : 38               [ 2] 	sec					; 1 for start bit
c67e : 209ac6           [ 6] 	jsr tp_write_bit
c681 : a008             [ 2] 	ldy #8				; 8 bits of data
c683 :                       tp_write_byte_bit
c683 : 6a               [ 2] 	ror a
c684 : 209ac6           [ 6] 	jsr tp_write_bit
c687 : 88               [ 2] 	dey
c688 : d0f9             [ 3] 	bne tp_write_byte_bit
c68a : 18               [ 2] 	clc					; 0 for stop bit
c68b : 209ac6           [ 6] 	jsr tp_write_bit
c68e : 28               [ 4] 	plp
c68f : 9007             [ 3] 	bcc tp_write_byte_nodelay
c691 : 8a               [ 2] 	txa
c692 : a220             [ 2] 	ldx #32					; Delays needed
c694 : 2020c6           [ 6] 	jsr tp_put_delay
c697 : aa               [ 2] 	tax
c698 :                       tp_write_byte_nodelay
c698 : 68               [ 4] 	pla
c699 :                       tt_putbyte_end_pc			; ** FOR ORICUTRON EMULATOR *
c699 : 60               [ 6] 	rts
                             	
                             
                             ;* tp_write_bit
                             ;* Write a bit in C to tape which looks like this
                             ;* Half cycle of 4800Hz, then
                             ;*		half cycle of 4800Hz for a 1
                             ;*		half cycle of 2400Hz for a 0
c69a :                       tp_write_bit
c69a : 48               [ 3] 	pha
c69b : 8a               [ 2] 	txa
AS65 Assembler for R6502 [1.42].                                     Page   74
-------------------------------- bank\bank0.s --------------------------------

c69c : 48               [ 3] 	pha
c69d : 08               [ 3] 	php						; Save the bit to be stored
                             
c69e : a9d0             [ 2] 	lda #TAPE_RATE			; Half cycle first of 4800Hz
c6a0 : a200             [ 2] 	ldx #0
c6a2 : 8d0603           [ 4] 	sta IO_0+T1LL
c6a5 : 8e0703           [ 4] 	stx IO_0+T1LH			; This starts the timer
c6a8 : ad0403           [ 4] 	lda IO_0+T1CL			; Clear any interrupt flag
c6ab :                       tp_write_bit_chk1
c6ab : 2c0d03           [ 4] 	bit IO_0+IFR			; Check IRF for bit 6
c6ae : 50fb             [ 3] 	bvc tp_write_bit_chk1	; V=0? Keep checking
c6b0 : ad0403           [ 4] 	lda IO_0+T1CL			; Clear interrupt flag
                             	
c6b3 : 28               [ 4] 	plp						; Get the bit to be stored
c6b4 : a9d0             [ 2] 	lda #TAPE_RATE			; Assume putting out a 1 in 2nd
c6b6 : b002             [ 3] 	bcs tp_write_bit_t1		; A zero is half the rate (
c6b8 : 0a               [ 2] 	asl	a					; TAPE_RATE * 2 need to inc X
c6b9 : e8               [ 2] 	inx
c6ba :                       tp_write_bit_t1
c6ba : 8d0603           [ 4] 	sta IO_0+T1LL
c6bd : 8e0703           [ 4] 	stx IO_0+T1LH			; This starts the timer
c6c0 : ad0403           [ 4] 	lda IO_0+T1CL			; Clear any interrupt flag
c6c3 :                       tp_write_bit_chk2
c6c3 : 2c0d03           [ 4] 	bit IO_0+IFR			; Check IRF for bit 6
c6c6 : 50fb             [ 3] 	bvc tp_write_bit_chk2	; V=0? Keep checking
c6c8 : ad0403           [ 4] 	lda IO_0+T1CL			; Clear interrupt flag
c6cb : 68               [ 4] 	pla
c6cc : aa               [ 2] 	tax
c6cd : 68               [ 4] 	pla
c6ce : 60               [ 6] 	rts
                             
                             
                             
                             ;* tp_get_byte
                             ;* Get a byte from buffer - load blocks as needed
c6cf :                       tp_get_byte
c6cf : 8a               [ 2] 	txa
c6d0 : 48               [ 3] 	pha
c6d1 : 98               [ 2] 	tya
c6d2 : 48               [ 3] 	pha
                             	
c6d3 : a457             [ 3] 	ldy tp_idx				; Index in to buffer
c6d5 : d005             [ 3] 	bne tp_get_byte_buf		; No need to load from tape
c6d7 : 20ecc6           [ 6] 	jsr tp_get_block		; Else load a block from tape
c6da : a000             [ 2] 	ldy #0					; 0 index is now valid
c6dc :                       tp_get_byte_buf
c6dc : b90002           [ 4] 	lda tp_buf,y			; Get from memory buffer
c6df : c8               [ 2] 	iny
c6e0 : 8457             [ 3] 	sty tp_idx				; Never zero on leaving
c6e2 : 8538             [ 3] 	sta tmp_d
c6e4 : 68               [ 4] 	pla
c6e5 : a8               [ 2] 	tay
c6e6 : 68               [ 4] 	pla
c6e7 : aa               [ 2] 	tax
c6e8 : a538             [ 3] 	lda tmp_d
c6ea : 18               [ 2] 	clc
c6eb : 60               [ 6] 	rts						; Except when buffer done
                             
                             ;* tp_get_block
                             ;* Load a block in to memory
c6ec :                       tp_get_block
                             
AS65 Assembler for R6502 [1.42].                                     Page   75
-------------------------------- bank\bank0.s --------------------------------

c6ec : 200bc7           [ 6] 	jsr tp_read_byte		; Get block number
c6ef : 8555             [ 3] 	sta tp_block
c6f1 : 200bc7           [ 6] 	jsr tp_read_byte
c6f4 : 8556             [ 3] 	sta tp_block+1
                             	
c6f6 : 204cc6           [ 6] 	jsr tp_print_block
                             	
c6f9 : a000             [ 2] 	ldy #0
c6fb : 8457             [ 3] 	sty tp_idx
c6fd :                       tp_get_block_bytes
c6fd : 200bc7           [ 6] 	jsr tp_read_byte		; Fill buffer
c700 : a457             [ 3] 	ldy tp_idx
c702 : 990002           [ 5] 	sta tp_buf,y
c705 : c8               [ 2] 	iny
c706 : 8457             [ 3] 	sty tp_idx
c708 : d0f3             [ 4] 	bne tp_get_block_bytes	; Always 256 bytes
                             
c70a : 60               [ 6] 	rts
                             	
                             
                             ;* tp_read_byte
                             ;* Read a byte from tape, always expects one '1' 
c70b :                       tt_readbyte_pc				; ** FOR ORICUTRON EMULATOR **
c70b :                       tp_read_byte
c70b :                       tp_read_byte_st
c70b : 201fc7           [ 6] 	jsr tp_read_bit			; Expecting a 1
c70e : 90fb             [ 3] 	bcc tp_read_byte_st
c710 : 201fc7           [ 6] 	jsr tp_read_bit			; Should be another 1
c713 : 90f6             [ 3] 	bcc tp_read_byte_st
                             	; Ok got 2 start
                             	
c715 : a008             [ 2] 	ldy #8				; Get 8 bits
c717 :                       tp_read_byte_bits
c717 : 201fc7           [ 6] 	jsr tp_read_bit
c71a : 6a               [ 2] 	ror a
c71b : 88               [ 2] 	dey
c71c : d0f9             [ 3] 	bne tp_read_byte_bits
                             	; Byte is in A, stop bit is not waited for..
c71e :                       tt_readbyte_end_pc			; ** FOR ORICUTRON EMULATOR 
c71e : 60               [ 6] 	rts
                             
                             ;* tp_read_bit
                             ;* Get a CB1 transition and measure the time
                             ;* The measurement indicates a 1 or 0 received
c71f :                       tp_read_bit
c71f : 48               [ 3] 	pha
c720 : ad0003           [ 4] 	lda IO_0+PRB			; Clear CB1 interrupt flag by rea
c723 :                       tp_read_bit_cb1
c723 :                       tt_getsync_loop_pc			; ** FOR ORICUTRON EMULATOR 
c723 : ad0d03           [ 4] 	lda IO_0+IFR
c726 : 2910             [ 2] 	and #IFR_CB1
c728 : f0f9             [ 3] 	beq tp_read_bit_cb1		; Keep checking until CB1 a
                             
c72a : ad0903           [ 4] 	lda IO_0+T2CH			; Get the high byte of T2 counte
c72d : 48               [ 3] 	pha
c72e : a9ff             [ 2] 	lda #0xff				; Reset T2 counter high byte
c730 : 8d0903           [ 4] 	sta IO_0+T2CH			; Reset high byte of T2 counter
c733 : 68               [ 4] 	pla						; What was previous counter?
                             ;	beq tp_io_error			; If down to zero, then some 
c734 : c9fe             [ 2] 	cmp #0xfe				; C=1 if T2 >= 0xfe else C=0
c736 : 68               [ 4] 	pla
c737 : 60               [ 6] 	rts						; Carry contains the bit received
AS65 Assembler for R6502 [1.42].                                     Page   76
-------------------------------- bank\bank0.s --------------------------------

c738 :                       tp_io_error
                             	SWBRK DFERR_BREAK		; DEFINE A NEW ERROR!
                             
                             
                             
                             
                             	include "keyboard/keyboard.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  KEYBOARD.S
                             ;*	Keyboard driver code. It is very slow to scan 
                             ;*	routines here do a basic scan for any key befo
                             ;*	the specific key. Still, it has a noticeable i
                             ;*	CPU especially in dflat which checks the key a
                             ;*	keyword is executed.
                             ;*	Rather than working off interrupts these routi
                             ;*	need to be called as needed. The T1 interrupt 
                             ;*	track of keyboard timers for repeat delay and 
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code
                             
                             ;****************************************
                             ;* init_keyboard
                             ;* Initialise the keyboard settings
                             ;****************************************
c73a :                       init_keyboard
c73a : a914             [ 2] 	lda #KB_REP_DEL
c73c : 8531             [ 3] 	sta kb_rdel_tim
c73e : a903             [ 2] 	lda #KB_REP_TIM
c740 : 8530             [ 3] 	sta kb_rep_tim
c742 : a901             [ 2] 	lda #KB_DEBOUNCE
c744 : 852e             [ 3] 	sta kb_deb_tim
                             
                             	; ** check if IJK stick connected **
c746 : 08               [ 3] 	php
c747 : 78               [ 2] 	sei
                             	; Save port A
c748 : ad0303           [ 4] 	lda IO_0+DDRA
c74b : 48               [ 3] 	pha
c74c : ad0103           [ 4] 	lda IO_0+PRA
c74f : 48               [ 3] 	pha
                             
c750 : 206ec7           [ 6] 	jsr ijk_prepare
c753 : a9c0             [ 2] 	lda #0b11000000
c755 : 8d0f03           [ 4] 	sta IO_0+PRAH
c758 : ad0f03           [ 4] 	lda IO_0+PRAH
c75b : 2920             [ 2] 	and #KB_IJK
c75d : 4920             [ 2] 	eor #KB_IJK
c75f : 852c             [ 3] 	sta kb_stat
c761 : 2084c7           [ 6] 	jsr ijk_release
                             
                             	; Restore port A
c764 : 68               [ 4] 	pla
AS65 Assembler for R6502 [1.42].                                     Page   77
-------------------------------- bank\bank0.s --------------------------------

c765 : 8d0103           [ 4] 	sta IO_0+PRA
c768 : 68               [ 4] 	pla
c769 : 8d0303           [ 4] 	sta IO_0+DDRA
                             
c76c : 28               [ 4] 	plp
c76d : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* ijk_prepare
                             ;* get ready to read ijk joystick status
                             ;****************************************
c76e :                       ijk_prepare
                             	;ensure printer strobe is set to output
c76e : ad0203           [ 4] 	lda   IO_0+DDRB
c771 : 0910             [ 2] 	ora   #0b00010000
c773 : 8d0203           [ 4] 	sta   IO_0+DDRB
                             
                             	;set strobe low
c776 : ad0003           [ 4] 	lda   IO_0+PRB
c779 : 29ef             [ 2] 	and   #0b11101111
c77b : 8d0003           [ 4] 	sta   IO_0+PRB
                             
                             	;set top two bits of porta to output and rest as
c77e : a9c0             [ 2] 	lda   #0b11000000
c780 : 8d0303           [ 4] 	sta   IO_0+DDRA
c783 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* ijk_release
                             ;* stop reading ijk port
                             ;****************************************
c784 :                       ijk_release
                             	;set strobe high
c784 : ad0003           [ 4] 	lda   IO_0+PRB
c787 : 0910             [ 2] 	ora   #0b00010000
c789 : 8d0003           [ 4] 	sta   IO_0+PRB
c78c : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* kb_stick
                             ;* Check for fire | down | up | right | left
                             ;*        bit  4     3      2     1       0
                             ;* A = Returns bit mask of keys pressed
                             ;* Y corrupted
                             ;****************************************
c78d :                       kb_stick
                             	; if IJK connected then read joystick
c78d : a52c             [ 3] 	lda kb_stat
c78f : 2920             [ 2] 	and #KB_IJK
c791 : d028             [ 3] 	bne kb_stick_ijk
                             
                             	; Select Row 4 only, all keys on this row
c793 : a9b4             [ 2] 	lda #4+KB_PRB			; Maintain upper nibble of PRB
c795 : 8d0003           [ 4] 	sta IO_0+PRB
c798 : a90e             [ 2] 	lda #SND_REG_IOA		; Select AY Port A for columns
c79a : 204ec0           [ 6] 	jsr snd_sel_reg
c79d : a900             [ 2] 	lda #0					; Result will be in A
c79f : 48               [ 3] 	pha
c7a0 : a004             [ 2] 	ldy #4					; Go through the 5 cols on row 4
c7a2 :                       kb_stick_pos
c7a2 : b9a9c9           [ 4] 	lda kb_stick_mask,y		; Get the column mask
c7a5 : 205ec0           [ 6] 	jsr snd_set_reg			; Activate column
AS65 Assembler for R6502 [1.42].                                     Page   78
-------------------------------- bank\bank0.s --------------------------------

c7a8 : ea               [ 2] 	nop
c7a9 : ea               [ 2] 	nop
c7aa : ea               [ 2] 	nop
c7ab : ea               [ 2] 	nop
c7ac : a908             [ 2] 	lda #KB_SENSE			; Something pressed?
c7ae : 2d0003           [ 4] 	and IO_0+PRB			; Read Port B
c7b1 : c908             [ 2] 	cmp #KB_SENSE			; C=1 if set else 0
c7b3 : 68               [ 4] 	pla
c7b4 : 2a               [ 2] 	rol a					; Get C in to A
c7b5 : 48               [ 3] 	pha
c7b6 : 88               [ 2] 	dey
c7b7 : 10e9             [ 3] 	bpl kb_stick_pos		; Do all 5 positions
c7b9 : 68               [ 4] 	pla						; Result in A
c7ba : 60               [ 6] 	rts
c7bb :                       kb_stick_ijk
c7bb : 08               [ 3] 	php
c7bc : 78               [ 2] 	sei
                             
                             	; Save port A
c7bd : ad0303           [ 4] 	lda IO_0+DDRA
c7c0 : 48               [ 3] 	pha
c7c1 : ad0103           [ 4] 	lda IO_0+PRA
c7c4 : 48               [ 3] 	pha
                             
c7c5 : 206ec7           [ 6] 	jsr ijk_prepare
                             	;Set Top two bits of PortA to Output and rest as
c7c8 : a9c0             [ 2] 	lda #0b11000000
c7ca : 8d0303           [ 4] 	sta IO_0+DDRA
                             	;Select Left Joystick
c7cd : a97f             [ 2] 	lda #0b01111111
c7cf : 8d0103           [ 4] 	sta IO_0+PRA
                             	;Read back Left Joystick state into A
c7d2 : ad0103           [ 4] 	lda IO_0+PRA
                             	;Mask out unused bits and invert
c7d5 : 291f             [ 2] 	and #0b00011111
c7d7 : 491f             [ 2] 	eor #0b00011111
c7d9 : a8               [ 2] 	tay
                             	; use this as an index into the mapping
                             	; to get the same bit representation
                             	; as if using cursor and space keys
c7da : b9aec9           [ 4] 	lda kb_ijk_map,y
c7dd : a8               [ 2] 	tay
                             
                             	; Restore port A
c7de : 68               [ 4] 	pla
c7df : 8d0103           [ 4] 	sta IO_0+PRA
c7e2 : 68               [ 4] 	pla
c7e3 : 8d0303           [ 4] 	sta IO_0+DDRA
                             
c7e6 : 28               [ 4] 	plp
                             	; result in A
c7e7 : 98               [ 2] 	tya
c7e8 : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* kb_any_key
                             ;* Quick check for any key except shifts & ctrl
                             ;* Carry = 1 means key pressed
                             ;****************************************
c7e9 :                       kb_any_key
c7e9 : a90e             [ 2] 	lda #SND_REG_IOA		; Select Port A of AY
AS65 Assembler for R6502 [1.42].                                     Page   79
-------------------------------- bank\bank0.s --------------------------------

c7eb : 204ec0           [ 6] 	jsr snd_sel_reg
                             
c7ee : a0b7             [ 2] 	ldy #7+KB_PRB			; Start from row 7
c7f0 :                       kb_any_key_row
c7f0 : 8c0003           [ 4] 	sty IO_0+PRB			; Select row on port B
                             	; Select all columns except 4
c7f3 : a910             [ 2] 	lda #0b00010000			; Deselect only col 4
c7f5 : 205ec0           [ 6] 	jsr snd_set_reg
                             
c7f8 : ea               [ 2] 	nop
c7f9 : ea               [ 2] 	nop
c7fa : ea               [ 2] 	nop						; New NOP
c7fb : ea               [ 2] 	nop
c7fc : ea               [ 2] 	nop
                             ;	nop						; New NOP
                             
c7fd : a908             [ 2] 	lda #KB_SENSE			; Something pressed?
c7ff : 2d0003           [ 4] 	and IO_0+PRB			; Read Port B
c802 : d007             [ 3] 	bne kb_any_key_pressed
c804 : 88               [ 2] 	dey						; If not then next row
c805 : c0af             [ 2] 	cpy #KB_PRB-1			; Done rows 0..8?
c807 : d0e7             [ 4] 	bne kb_any_key_row		; Until all rows done
c809 :                       kb_any_key_none
c809 : 18               [ 2] 	clc						; C=0 means not pressed
c80a : 60               [ 6] 	rts
c80b :                       kb_any_key_pressed
c80b :                       kb_read_got
c80b : 38               [ 2] 	sec						; C=1 means pressed
c80c : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* kb_read_raw
                             ;* Read keyboard
                             ;* Y = Keyboard code
                             ;* Carry = 1 means key found, 0 = no keys found
                             ;****************************************
c80d :                       kb_read_raw
c80d : 20e9c7           [ 6] 	jsr kb_any_key			; Quick check is anything down?
c810 : 9046             [ 3] 	bcc kb_read_nothing		; Don't bother if not
c812 :                       kb_read_raw_force
c812 : a20e             [ 2] 	ldx #SND_REG_IOA		; Select Port A of AY
c814 : 8e0f03           [ 4] 	stx SND_ADBUS			; Put reg # on Port A (sound bus
c817 : a2ff             [ 2] 	ldx #SND_SELSETADDR		; Get ready to select the r
c819 : 8e0c03           [ 4] 	stx SND_MODE			; Latch the reg # on Port A
c81c : a2dd             [ 2] 	ldx #SND_DESELECT		; Deselect AY
c81e : 8e0c03           [ 4] 	stx SND_MODE
c821 : a200             [ 2] 	ldx #0					; Start at column 0
c823 : 86ab             [ 3] 	stx zp_tmp1
c825 :                       kb_check_matrix_col
c825 : a0b0             [ 2] 	ldy #0+KB_PRB			; Start at row 0 (maintain PRB u
c827 :                       kb_check_matrix_row
c827 : 8c0003           [ 4] 	sty IO_0+PRB			; Select row from Y
                             	; Get the col value for AY port A
c82a : a6ab             [ 3] 	ldx zp_tmp1
c82c : bda1c9           [ 4] 	lda kb_col_mask,x
                             	; Write it to AY port A
c82f : 8d0f03           [ 4] 	sta SND_ADBUS			; Put col value on AY bus
c832 : a2fd             [ 2] 	ldx #SND_SELWRITE		; Select mode for writing dat
c834 : 8e0c03           [ 4] 	stx SND_MODE			; Latch reg value on Port A
c837 : a2dd             [ 2] 	ldx #SND_DESELECT		; Deselect AY
c839 : 8e0c03           [ 4] 	stx SND_MODE
                             
AS65 Assembler for R6502 [1.42].                                     Page   80
-------------------------------- bank\bank0.s --------------------------------

c83c : ea               [ 2] 	nop						; Wait 10 cycles before reading sense p
c83d : ea               [ 2] 	nop
c83e : ea               [ 2] 	nop
                             
c83f : a908             [ 2] 	lda #KB_SENSE			; Bit 3 is the sense
c841 : 2d0003           [ 4] 	and IO_0+PRB			; And with Port B
                             
c844 : d016             [ 3] 	bne kb_read_raw_got
                             	; No key for this row/col, next
c846 : c8               [ 2] 	iny
c847 : c0b8             [ 2] 	cpy #8+KB_PRB			; Done 8 rows?
c849 : d0dc             [ 3] 	bne kb_check_matrix_row
                             	; ok check next row
c84b : a6ab             [ 3] 	ldx zp_tmp1
c84d :                       kb_check_skip4
c84d : e8               [ 2] 	inx
c84e : e004             [ 2] 	cpx #4					; Skip 4?
c850 : f0fb             [ 3] 	beq kb_check_skip4
c852 : 86ab             [ 3] 	stx zp_tmp1
c854 : e008             [ 2] 	cpx #8					; Done 8 cols?
c856 : d0cd             [ 3] 	bne kb_check_matrix_col
                             	; No key was sensed
c858 :                       kb_read_nothing
c858 : a000             [ 2] 	ldy #0					; Raw key codes
c85a : 18               [ 2] 	clc						; No key sensed flag
c85b : 60               [ 6] 	rts
c85c :                       kb_read_raw_got
                             	;Y=row, zp_temp1=col
c85c : a5ab             [ 3] 	lda zp_tmp1				; Get the column num
c85e : 0a               [ 2] 	asl a					; Shift in to bits 5,4,3
c85f : 0a               [ 2] 	asl a
c860 : 0a               [ 2] 	asl a
c861 : 85ab             [ 3] 	sta zp_tmp1
c863 : 98               [ 2] 	tya						; Now or with row number
c864 : 2907             [ 2] 	and #7					; Only bottom 3 bits!
c866 : 05ab             [ 3] 	ora zp_tmp1
c868 : a8               [ 2] 	tay						; Put in to Y
c869 : 38               [ 2] 	sec
c86a : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* kb_scan_key
                             ;* Scans for a key, returns zero for no key found
                             ;* Processes caps and shift lock but these don't 
                             ;* A = Key code
                             ;****************************************
c86b :                       kb_scan_key
c86b : a52d             [ 3] 	lda kb_deb				; Do not scan keyboard too often
c86d : d013             [ 3] 	bne kb_no_scan
c86f : a52e             [ 3] 	lda kb_deb_tim			; Else reset debounce timer
c871 : 852d             [ 3] 	sta kb_deb
c873 : 200dc8           [ 6] 	jsr kb_read_raw			; Check if a key is sensed
c876 : b00e             [ 3] 	bcs kb_scan_decode		; go ahead and decode
                             	; If pressed nothing then reset timers
c878 : a9ff             [ 2] 	lda #255
c87a : 8529             [ 3] 	sta kb_raw				; Reset raw key settings
c87c : 852a             [ 3] 	sta kb_last				; And last key
c87e : a531             [ 3] 	lda kb_rdel_tim			; Reset repeat timer to initia
c880 : 852f             [ 3] 	sta kb_rep
c882 :                       kb_no_scan
c882 : a900             [ 2] 	lda #0
c884 : 38               [ 2] 	sec						; Code not valid
AS65 Assembler for R6502 [1.42].                                     Page   81
-------------------------------- bank\bank0.s --------------------------------

c885 : 60               [ 6] 	rts						; And done (A=0)
c886 :                       kb_scan_decode
                             	; If got here then raw key is good
c886 : a52a             [ 3] 	lda kb_last				; Preload A with last decoded key
c888 : c429             [ 3] 	cpy kb_raw				; Same as last raw key?
c88a : 8429             [ 3] 	sty kb_raw				; Already save new raw key
c88c : d002             [ 3] 	bne kb_process_new		; If is new raw key, look at
c88e : f061             [ 3] 	beq kb_do_repeat		; Else go handle repeating wit
c890 :                       kb_process_new
c890 : a531             [ 3] 	lda kb_rdel_tim			; Reset repeat timer to initia
c892 : 852f             [ 3] 	sta kb_rep
                             	; Now to get a proper key code translated from r
                             	; Check for shift and ctrl (not debounced!)
c894 : a9ef             [ 2] 	lda #0b11101111			; Select column 4
c896 : a20e             [ 2] 	ldx #SND_REG_IOA		; On AY port A
c898 : 206ec0           [ 6] 	jsr snd_set
                             
                             	; check shifted keys
c89b : a2b4             [ 2] 	ldx #4+KB_PRB			; Row 4 (left shift)
c89d : 8e0003           [ 4] 	stx IO_0+PRB			; Select row on port B
c8a0 : ea               [ 2] 	nop
c8a1 : ea               [ 2] 	nop
c8a2 : ea               [ 2] 	nop
c8a3 : ea               [ 2] 	nop
                             
c8a4 : ad0003           [ 4] 	lda IO_0+PRB			; Read Port B
                             
c8a7 : a2b7             [ 2] 	ldx #7+KB_PRB			; Row 7 (right shift)
c8a9 : 8e0003           [ 4] 	stx IO_0+PRB			; Select row on port B
c8ac : ea               [ 2] 	nop
c8ad : ea               [ 2] 	nop
c8ae : ea               [ 2] 	nop
c8af : ea               [ 2] 	nop
                             
c8b0 : 0d0003           [ 4] 	ora IO_0+PRB			; Combine Port B
c8b3 : be21c9           [ 4] 	ldx kb_table_std,y		; Pre-load standard key code
c8b6 : 2908             [ 2] 	and #KB_SENSE			; Bit 3 is the sense
c8b8 : f003             [ 3] 	beq kb_read_noshift		; Skip over if no shift
c8ba : be61c9           [ 4] 	ldx kb_table_shift,y	; Load up standard key code
c8bd :                       kb_read_noshift
c8bd : 862b             [ 3] 	stx kb_code				; Save the mapped keycode
                             	; check ctrl key
c8bf : a2b2             [ 2] 	ldx #2+KB_PRB			; Row 2 (ctrl key)
c8c1 : 8e0003           [ 4] 	stx IO_0+PRB			; Select row on port B
c8c4 : ea               [ 2] 	nop
c8c5 : ea               [ 2] 	nop
c8c6 : ea               [ 2] 	nop
c8c7 : ea               [ 2] 	nop
                             
c8c8 : ad0003           [ 4] 	lda IO_0+PRB			; Read Port B
c8cb : 2908             [ 2] 	and #KB_SENSE
c8cd : f00a             [ 3] 	beq kb_skip_ctrl
c8cf : a52b             [ 3] 	lda kb_code
c8d1 : 291f             [ 2] 	and #0x1f				; Ctrl will result in codes 0 to 31
c8d3 : 852b             [ 3] 	sta kb_code				; Override the keycode
c8d5 : f02a             [ 4] 	beq kb_brk
c8d7 : 1020             [ 3] 	bpl	kb_store_last		; Check repeat (bpl is always
c8d9 :                       kb_skip_ctrl
c8d9 : a52c             [ 3] 	lda kb_stat				; Check caps lock
c8db : 2901             [ 2] 	and #KB_CAPSLK
c8dd : f01a             [ 3] 	beq kb_store_last
c8df : a52b             [ 3] 	lda kb_code
AS65 Assembler for R6502 [1.42].                                     Page   82
-------------------------------- bank\bank0.s --------------------------------

c8e1 : c961             [ 2] 	cmp #'a'				; If < 'a' then skip
c8e3 : 9014             [ 3] 	bcc kb_store_last
c8e5 : c97b             [ 2] 	cmp #'z'+1				; If > 'z' then skip
c8e7 : b010             [ 3] 	bcs kb_store_last
c8e9 : a52b             [ 3] 	lda kb_code				; Get the actual code
c8eb : 4920             [ 2] 	eor #0x20				; Switch off bit 0x20
c8ed : 852b             [ 3] 	sta kb_code				; Save the capitalised code
c8ef : d008             [ 3] 	bne kb_store_last		; always
c8f1 :                       kb_do_repeat
c8f1 : a62f             [ 3] 	ldx kb_rep				; Has repeat expired?
c8f3 : d008             [ 3] 	bne	kb_in_repeat		; If not then still in repeat
c8f5 : a630             [ 3] 	ldx kb_rep_tim			; Set repeat speed
c8f7 : 862f             [ 3] 	stx kb_rep
c8f9 :                       kb_store_last
c8f9 : 852a             [ 3] 	sta kb_last				; Make last code same as this
c8fb : 18               [ 2] 	clc						; Code valid
c8fc : 60               [ 6] 	rts
c8fd :                       kb_in_repeat
c8fd : a900             [ 2] 	lda #0					; Don't emit a keycode
c8ff : 38               [ 2] 	sec
c900 : 60               [ 6] 	rts
c901 :                       kb_brk
                             	SWBRK DFERR_OK
                             
                             
                             ;****************************************
                             ;* kb_get_key
                             ;* Waits for a key press, C=1 synchronous
                             ;* A = Key code, C=1 means valid
                             ;****************************************
c903 :                       kb_get_key
c903 : 8a               [ 2] 	txa
c904 : 48               [ 3] 	pha
c905 : 98               [ 2] 	tya
c906 : 48               [ 3] 	pha
                             
c907 :                       kb_get_try
c907 : 08               [ 3] 	php
c908 : 206bc8           [ 6] 	jsr kb_scan_key
c90b : 900b             [ 3] 	bcc kb_scan_got_key
c90d : 28               [ 4] 	plp						; No key, so check C
c90e : b0f7             [ 3] 	bcs kb_get_try			; Keep looking if C
c910 : 38               [ 2] 	sec						; Indicate key not valid
                             
c911 : 68               [ 4] 	pla
c912 : a8               [ 2] 	tay
c913 : 68               [ 4] 	pla
c914 : aa               [ 2] 	tax
c915 : a900             [ 2] 	lda #0
                             
c917 : 60               [ 6] 	rts
c918 :                       kb_scan_got_key
c918 : 28               [ 4] 	plp						; Pull stack
c919 : 18               [ 2] 	clc						; Indicate key valid
                             
c91a : 68               [ 4] 	pla
c91b : a8               [ 2] 	tay
c91c : 68               [ 4] 	pla
c91d : aa               [ 2] 	tax
                             
c91e : a52b             [ 3] 	lda kb_code
                             
AS65 Assembler for R6502 [1.42].                                     Page   83
-------------------------------- bank\bank0.s --------------------------------

c920 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* kb_table_std (no shift)
                             ;* Each line is one column
                             ;****************************************
c921 :                       kb_table_std
c921 : 376a6d6b20757938      	db '7' ,'j' ,'m' ,'k' ,' ' ,'u' ,'y' ,'8'
c929 : 6e7436392c69686c      	db 'n' ,'t' ,'6' ,'9' ,',' ,'i' ,'h' ,'l'
c931 : 3572623b2e6f6730      	db '5' ,'r' ,'b' ,';' ,'.' ,'o' ,'g' ,'0'
c939 : 7666342d0b70652f      	db 'v' ,'f' ,'4' ,'-' ,0x0b,'p' ,'e' ,'/'
c941 : 0000000000000000      	db 0,0,0,0,0,0,0,0 ; Column 4 is shift and ctrl 
c949 : 311b7a00087f610d      	db '1' ,0x1b,'z' ,0   ,0x08,0x7f,'a' ,0x0d
c951 : 7871325c0a5d7300      	db 'x' ,'q' ,'2' ,0x5c,0x0a,']' ,'s' ,0
c959 : 33646327095b773d      	db '3' ,'d' ,'c' ,0x27,0x09,'[' ,'w' ,'='
                             
                             ;* kb_table_shift (with shift)
c961 :                       kb_table_shift
c961 : 264a4d4b2055592a      	db '&' ,'J' ,'M' ,'K' ,' ' ,'U' ,'Y' ,'*'
c969 : 4e545e283c49484c      	db 'N' ,'T' ,'^' ,'(' ,'<' ,'I' ,'H' ,'L'
c971 : 2552423a3e4f4729      	db '%' ,'R' ,'B' ,':' ,'>' ,'O' ,'G' ,')'
c979 : 5646245f0b50453f      	db 'V' ,'F' ,'$' ,'_' ,0x0b,'P' ,'E' ,'?'
c981 : 0000000000000000      	db 0,0,0,0,0,0,0,0 ; Column 4 is shift and ctrl 
c989 : 211b5a00087f410d      	db '!' ,0x1b,'Z' ,0   ,0x08,0x7f,'A' ,0x0d
c991 : 5851407c0a7d5300      	db 'X' ,'Q' ,'@' ,'|' ,0x0a,'}' ,'S' ,0
c999 : 23444322097b572b      	db '#' ,'D' ,'C' ,0x22,0x09,'{' ,'W' ,'+'
                             
c9a1 :                       kb_col_mask
c9a1 : fe                    	db 0b11111110
c9a2 : fd                    	db 0b11111101
c9a3 : fb                    	db 0b11111011
c9a4 : f7                    	db 0b11110111
c9a5 : ef                    	db 0b11101111
c9a6 : df                    	db 0b11011111
c9a7 : bf                    	db 0b10111111
c9a8 : 7f                    	db 0b01111111
                             
c9a9 :                       kb_stick_mask
c9a9 : df                    	db 0b11011111		; Left 	= Bit 0
c9aa : 7f                    	db 0b01111111		; Right = Bit 1
c9ab : f7                    	db 0b11110111		; Up	= Bit 2
c9ac : bf                    	db 0b10111111		; Down	= Bit 3
c9ad : fe                    	db 0b11111110		; Space	= Bit 4
                             
c9ae :                       kb_ijk_map
c9ae : 00                    	db 0b00000000		; 00000 = nothing
c9af : 02                    	db 0b00000010		; 00001 = right
c9b0 : 01                    	db 0b00000001		; 00010 = left
c9b1 : 03                    	db 0b00000011		; 00011 = left+right
c9b2 : 10                    	db 0b00010000		; 00100 = fire
c9b3 : 12                    	db 0b00010010		; 00101 = fire+right
c9b4 : 11                    	db 0b00010001		; 00110 = fire+left
c9b5 : 13                    	db 0b00010011		; 00111 = fire+left+right
c9b6 : 08                    	db 0b00001000		; 01000 = down
c9b7 : 0a                    	db 0b00001010		; 01001 = down+right
c9b8 : 09                    	db 0b00001001		; 01010 = down+left
c9b9 : 0b                    	db 0b00001011		; 01011 = down+left+right
c9ba : 18                    	db 0b00011000		; 01100 = down+fire
c9bb : 1a                    	db 0b00011010		; 01101 = down+fire+right
c9bc : 19                    	db 0b00011001		; 01110 = down+fire+left
c9bd : 1b                    	db 0b00011011		; 01111 = down+fire+left+right
c9be : 04                    	db 0b00000100		; 10000 = up
AS65 Assembler for R6502 [1.42].                                     Page   84
-------------------------------- bank\bank0.s --------------------------------

c9bf : 06                    	db 0b00000110		; 10001 = up+right
c9c0 : 05                    	db 0b00000101		; 10010 = up+left
c9c1 : 07                    	db 0b00000111		; 10011 = up+left+right
c9c2 : 14                    	db 0b00010100		; 10100 = up+fire
c9c3 : 16                    	db 0b00010110		; 10101 = up+fire+right
c9c4 : 15                    	db 0b00010101		; 10110 = up+fire+left
c9c5 : 17                    	db 0b00010111		; 10111 = up+fire+left+right
c9c6 : 0c                    	db 0b00001100		; 11000 = up+down
c9c7 : 0e                    	db 0b00001110		; 11001 = up+down+right
c9c8 : 0d                    	db 0b00001101		; 11010 = up+down+left
c9c9 : 0f                    	db 0b00001111		; 11011 = up+down+left+right
c9ca : 1c                    	db 0b00011100		; 11100 = up+down+fire
c9cb : 1e                    	db 0b00011110		; 11101 = up+down+fire+right
c9cc : 1d                    	db 0b00011101		; 11110 = up+down+fire+left
c9cd : 1f                    	db 0b00011111		; 11111 = up+down+fire+left+right
                             	
                             	include "vdp/graph.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  GRAPH.S
                             ;*  This is the graphics module, to handle text a
                             ;*  graphics.
                             ;*  For text modes, this module keeps track of wh
                             ;*  next put a character, and also takes care of 
                             ;*  to the next line as well as scrolling the con
                             ;*  when the cursor has reached the bottom right.
                             ;*  module also enables text input which is echoe
                             ;*  screen, to allow interactive input and editin
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code
                             
c9ce :                       mod_sz_graph_s
                             
                             
                             	include "vdp/font.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  FONT.S
                             ;*  This is the font definition, used to initiali
                             ;*  character set.  This is the standard Oric-1 f
                             ;*	Still called vdp as this code was ported from 
                             ;*	machine using the TMS9918a.
                             ;*
                             ;************************************************
                             
c9ce :                       vdp_font
                             ; char 32
AS65 Assembler for R6502 [1.42].                                     Page   85
-------------------------------- bank\bank0.s --------------------------------

c9ce : 00                    	db %000000
c9cf : 00                    	db %000000
c9d0 : 00                    	db %000000
c9d1 : 00                    	db %000000
c9d2 : 00                    	db %000000
c9d3 : 00                    	db %000000
c9d4 : 00                    	db %000000
c9d5 : 00                    	db %000000
                             ; char 33
c9d6 : 0c                    	db %001100
c9d7 : 0c                    	db %001100
c9d8 : 0c                    	db %001100
c9d9 : 08                    	db %001000
c9da : 08                    	db %001000
c9db : 00                    	db %000000
c9dc : 08                    	db %001000
c9dd : 00                    	db %000000
                             ; char 34
c9de : 36                    	db %110110
c9df : 36                    	db %110110
c9e0 : 12                    	db %010010
c9e1 : 00                    	db %000000
c9e2 : 00                    	db %000000
c9e3 : 00                    	db %000000
c9e4 : 00                    	db %000000
c9e5 : 00                    	db %000000
                             ; char 35
c9e6 : 14                    	db %010100
c9e7 : 14                    	db %010100
c9e8 : 3e                    	db %111110
c9e9 : 14                    	db %010100
c9ea : 3e                    	db %111110
c9eb : 14                    	db %010100
c9ec : 14                    	db %010100
c9ed : 00                    	db %000000
                             ; char 36
c9ee : 08                    	db %001000
c9ef : 1e                    	db %011110
c9f0 : 28                    	db %101000
c9f1 : 1c                    	db %011100
c9f2 : 0a                    	db %001010
c9f3 : 3c                    	db %111100
c9f4 : 08                    	db %001000
c9f5 : 00                    	db %000000
                             ; char 37
c9f6 : 30                    	db %110000
c9f7 : 32                    	db %110010
c9f8 : 04                    	db %000100
c9f9 : 08                    	db %001000
c9fa : 10                    	db %010000
c9fb : 26                    	db %100110
c9fc : 06                    	db %000110
c9fd : 00                    	db %000000
                             ; char 38
c9fe : 10                    	db %010000
c9ff : 28                    	db %101000
ca00 : 28                    	db %101000
ca01 : 10                    	db %010000
ca02 : 2a                    	db %101010
ca03 : 24                    	db %100100
ca04 : 1a                    	db %011010
ca05 : 00                    	db %000000
AS65 Assembler for R6502 [1.42].                                     Page   86
-------------------------------- bank\bank0.s --------------------------------

                             ; char 39
ca06 : 0c                    	db %001100
ca07 : 0c                    	db %001100
ca08 : 04                    	db %000100
ca09 : 00                    	db %000000
ca0a : 00                    	db %000000
ca0b : 00                    	db %000000
ca0c : 00                    	db %000000
ca0d : 00                    	db %000000
                             ; char 40
ca0e : 04                    	db %000100
ca0f : 08                    	db %001000
ca10 : 10                    	db %010000
ca11 : 10                    	db %010000
ca12 : 10                    	db %010000
ca13 : 08                    	db %001000
ca14 : 04                    	db %000100
ca15 : 00                    	db %000000
                             ; char 41
ca16 : 10                    	db %010000
ca17 : 08                    	db %001000
ca18 : 04                    	db %000100
ca19 : 04                    	db %000100
ca1a : 04                    	db %000100
ca1b : 08                    	db %001000
ca1c : 10                    	db %010000
ca1d : 00                    	db %000000
                             ; char 42
ca1e : 08                    	db %001000
ca1f : 2a                    	db %101010
ca20 : 1c                    	db %011100
ca21 : 08                    	db %001000
ca22 : 1c                    	db %011100
ca23 : 2a                    	db %101010
ca24 : 08                    	db %001000
ca25 : 00                    	db %000000
                             ; char 43
ca26 : 00                    	db %000000
ca27 : 08                    	db %001000
ca28 : 08                    	db %001000
ca29 : 3e                    	db %111110
ca2a : 08                    	db %001000
ca2b : 08                    	db %001000
ca2c : 00                    	db %000000
ca2d : 00                    	db %000000
                             ; char 44
ca2e : 00                    	db %000000
ca2f : 00                    	db %000000
ca30 : 00                    	db %000000
ca31 : 00                    	db %000000
ca32 : 00                    	db %000000
ca33 : 08                    	db %001000
ca34 : 08                    	db %001000
ca35 : 10                    	db %010000
                             ; char 45
ca36 : 00                    	db %000000
ca37 : 00                    	db %000000
ca38 : 00                    	db %000000
ca39 : 3e                    	db %111110
ca3a : 00                    	db %000000
ca3b : 00                    	db %000000
ca3c : 00                    	db %000000
AS65 Assembler for R6502 [1.42].                                     Page   87
-------------------------------- bank\bank0.s --------------------------------

ca3d : 00                    	db %000000
                             ; char 46
ca3e : 00                    	db %000000
ca3f : 00                    	db %000000
ca40 : 00                    	db %000000
ca41 : 00                    	db %000000
ca42 : 00                    	db %000000
ca43 : 04                    	db %000100
ca44 : 00                    	db %000000
ca45 : 00                    	db %000000
                             ; char 47
ca46 : 00                    	db %000000
ca47 : 02                    	db %000010
ca48 : 04                    	db %000100
ca49 : 08                    	db %001000
ca4a : 10                    	db %010000
ca4b : 20                    	db %100000
ca4c : 00                    	db %000000
ca4d : 00                    	db %000000
                             ; char 48
ca4e : 1c                    	db %011100
ca4f : 22                    	db %100010
ca50 : 26                    	db %100110
ca51 : 2a                    	db %101010
ca52 : 32                    	db %110010
ca53 : 22                    	db %100010
ca54 : 1c                    	db %011100
ca55 : 00                    	db %000000
                             ; char 49
ca56 : 08                    	db %001000
ca57 : 18                    	db %011000
ca58 : 08                    	db %001000
ca59 : 08                    	db %001000
ca5a : 08                    	db %001000
ca5b : 08                    	db %001000
ca5c : 1c                    	db %011100
ca5d : 00                    	db %000000
                             ; char 50
ca5e : 1c                    	db %011100
ca5f : 22                    	db %100010
ca60 : 02                    	db %000010
ca61 : 04                    	db %000100
ca62 : 08                    	db %001000
ca63 : 10                    	db %010000
ca64 : 3e                    	db %111110
ca65 : 00                    	db %000000
                             ; char 51
ca66 : 3e                    	db %111110
ca67 : 02                    	db %000010
ca68 : 04                    	db %000100
ca69 : 0c                    	db %001100
ca6a : 02                    	db %000010
ca6b : 22                    	db %100010
ca6c : 1c                    	db %011100
ca6d : 00                    	db %000000
                             ; char 52
ca6e : 04                    	db %000100
ca6f : 0c                    	db %001100
ca70 : 14                    	db %010100
ca71 : 24                    	db %100100
ca72 : 3e                    	db %111110
ca73 : 04                    	db %000100
AS65 Assembler for R6502 [1.42].                                     Page   88
-------------------------------- bank\bank0.s --------------------------------

ca74 : 04                    	db %000100
ca75 : 00                    	db %000000
                             ; char 53
ca76 : 3e                    	db %111110
ca77 : 20                    	db %100000
ca78 : 3c                    	db %111100
ca79 : 02                    	db %000010
ca7a : 02                    	db %000010
ca7b : 22                    	db %100010
ca7c : 1c                    	db %011100
ca7d : 00                    	db %000000
                             ; char 54
ca7e : 0c                    	db %001100
ca7f : 10                    	db %010000
ca80 : 20                    	db %100000
ca81 : 3c                    	db %111100
ca82 : 22                    	db %100010
ca83 : 22                    	db %100010
ca84 : 1c                    	db %011100
ca85 : 00                    	db %000000
                             ; char 55
ca86 : 3e                    	db %111110
ca87 : 02                    	db %000010
ca88 : 04                    	db %000100
ca89 : 08                    	db %001000
ca8a : 10                    	db %010000
ca8b : 10                    	db %010000
ca8c : 10                    	db %010000
ca8d : 00                    	db %000000
                             ; char 56
ca8e : 1c                    	db %011100
ca8f : 22                    	db %100010
ca90 : 22                    	db %100010
ca91 : 1c                    	db %011100
ca92 : 22                    	db %100010
ca93 : 22                    	db %100010
ca94 : 1c                    	db %011100
ca95 : 00                    	db %000000
                             ; char 57
ca96 : 1c                    	db %011100
ca97 : 22                    	db %100010
ca98 : 22                    	db %100010
ca99 : 1e                    	db %011110
ca9a : 02                    	db %000010
ca9b : 04                    	db %000100
ca9c : 18                    	db %011000
ca9d : 00                    	db %000000
                             ; char 58
ca9e : 00                    	db %000000
ca9f : 00                    	db %000000
caa0 : 08                    	db %001000
caa1 : 00                    	db %000000
caa2 : 00                    	db %000000
caa3 : 08                    	db %001000
caa4 : 00                    	db %000000
caa5 : 00                    	db %000000
                             ; char 59
caa6 : 00                    	db %000000
caa7 : 00                    	db %000000
caa8 : 08                    	db %001000
caa9 : 00                    	db %000000
caaa : 00                    	db %000000
AS65 Assembler for R6502 [1.42].                                     Page   89
-------------------------------- bank\bank0.s --------------------------------

caab : 08                    	db %001000
caac : 08                    	db %001000
caad : 10                    	db %010000
                             ; char 60
caae : 04                    	db %000100
caaf : 08                    	db %001000
cab0 : 10                    	db %010000
cab1 : 20                    	db %100000
cab2 : 10                    	db %010000
cab3 : 08                    	db %001000
cab4 : 04                    	db %000100
cab5 : 00                    	db %000000
                             ; char 61
cab6 : 00                    	db %000000
cab7 : 00                    	db %000000
cab8 : 3e                    	db %111110
cab9 : 00                    	db %000000
caba : 3e                    	db %111110
cabb : 00                    	db %000000
cabc : 00                    	db %000000
cabd : 00                    	db %000000
                             ; char 62
cabe : 10                    	db %010000
cabf : 08                    	db %001000
cac0 : 04                    	db %000100
cac1 : 02                    	db %000010
cac2 : 04                    	db %000100
cac3 : 08                    	db %001000
cac4 : 10                    	db %010000
cac5 : 00                    	db %000000
                             ; char 63
cac6 : 1c                    	db %011100
cac7 : 22                    	db %100010
cac8 : 04                    	db %000100
cac9 : 08                    	db %001000
caca : 08                    	db %001000
cacb : 00                    	db %000000
cacc : 08                    	db %001000
cacd : 00                    	db %000000
                             ; char 64
cace : 1c                    	db %011100
cacf : 22                    	db %100010
cad0 : 2a                    	db %101010
cad1 : 2e                    	db %101110
cad2 : 2c                    	db %101100
cad3 : 20                    	db %100000
cad4 : 1e                    	db %011110
cad5 : 00                    	db %000000
cad6 :                       vdp_font_a
                             ; char 65
cad6 : 1c                    	db %011100
cad7 : 22                    	db %100010
cad8 : 22                    	db %100010
cad9 : 3e                    	db %111110
cada : 22                    	db %100010
cadb : 22                    	db %100010
cadc : 22                    	db %100010
cadd : 00                    	db %000000
                             ; char 66
cade : 3c                    	db %111100
cadf : 22                    	db %100010
cae0 : 22                    	db %100010
AS65 Assembler for R6502 [1.42].                                     Page   90
-------------------------------- bank\bank0.s --------------------------------

cae1 : 3c                    	db %111100
cae2 : 22                    	db %100010
cae3 : 22                    	db %100010
cae4 : 3c                    	db %111100
cae5 : 00                    	db %000000
                             ; char 67
cae6 : 1c                    	db %011100
cae7 : 22                    	db %100010
cae8 : 20                    	db %100000
cae9 : 20                    	db %100000
caea : 20                    	db %100000
caeb : 22                    	db %100010
caec : 1c                    	db %011100
caed : 00                    	db %000000
                             ; char 68
caee : 3c                    	db %111100
caef : 22                    	db %100010
caf0 : 22                    	db %100010
caf1 : 22                    	db %100010
caf2 : 22                    	db %100010
caf3 : 22                    	db %100010
caf4 : 3c                    	db %111100
caf5 : 00                    	db %000000
                             ; char 69
caf6 : 3e                    	db %111110
caf7 : 20                    	db %100000
caf8 : 20                    	db %100000
caf9 : 3c                    	db %111100
cafa : 20                    	db %100000
cafb : 20                    	db %100000
cafc : 3e                    	db %111110
cafd : 00                    	db %000000
                             ; char 70
cafe : 3e                    	db %111110
caff : 20                    	db %100000
cb00 : 20                    	db %100000
cb01 : 3c                    	db %111100
cb02 : 20                    	db %100000
cb03 : 20                    	db %100000
cb04 : 20                    	db %100000
cb05 : 00                    	db %000000
                             ; char 71
cb06 : 1e                    	db %011110
cb07 : 20                    	db %100000
cb08 : 20                    	db %100000
cb09 : 20                    	db %100000
cb0a : 26                    	db %100110
cb0b : 22                    	db %100010
cb0c : 1e                    	db %011110
cb0d : 00                    	db %000000
                             ; char 72
cb0e : 22                    	db %100010
cb0f : 22                    	db %100010
cb10 : 22                    	db %100010
cb11 : 3e                    	db %111110
cb12 : 22                    	db %100010
cb13 : 22                    	db %100010
cb14 : 22                    	db %100010
cb15 : 00                    	db %000000
                             ; char 73
cb16 : 1c                    	db %011100
cb17 : 08                    	db %001000
AS65 Assembler for R6502 [1.42].                                     Page   91
-------------------------------- bank\bank0.s --------------------------------

cb18 : 08                    	db %001000
cb19 : 08                    	db %001000
cb1a : 08                    	db %001000
cb1b : 08                    	db %001000
cb1c : 1c                    	db %011100
cb1d : 00                    	db %000000
                             ; char 74
cb1e : 02                    	db %000010
cb1f : 02                    	db %000010
cb20 : 02                    	db %000010
cb21 : 02                    	db %000010
cb22 : 02                    	db %000010
cb23 : 22                    	db %100010
cb24 : 1c                    	db %011100
cb25 : 00                    	db %000000
                             ; char 75
cb26 : 22                    	db %100010
cb27 : 24                    	db %100100
cb28 : 28                    	db %101000
cb29 : 30                    	db %110000
cb2a : 28                    	db %101000
cb2b : 24                    	db %100100
cb2c : 22                    	db %100010
cb2d : 00                    	db %000000
                             ; char 76
cb2e : 20                    	db %100000
cb2f : 20                    	db %100000
cb30 : 20                    	db %100000
cb31 : 20                    	db %100000
cb32 : 20                    	db %100000
cb33 : 20                    	db %100000
cb34 : 3e                    	db %111110
cb35 : 00                    	db %000000
                             ; char 77
cb36 : 22                    	db %100010
cb37 : 36                    	db %110110
cb38 : 2a                    	db %101010
cb39 : 2a                    	db %101010
cb3a : 22                    	db %100010
cb3b : 22                    	db %100010
cb3c : 22                    	db %100010
cb3d : 00                    	db %000000
                             ; char 78
cb3e : 22                    	db %100010
cb3f : 22                    	db %100010
cb40 : 32                    	db %110010
cb41 : 2a                    	db %101010
cb42 : 26                    	db %100110
cb43 : 22                    	db %100010
cb44 : 22                    	db %100010
cb45 : 00                    	db %000000
                             ; char 79
cb46 : 1c                    	db %011100
cb47 : 22                    	db %100010
cb48 : 22                    	db %100010
cb49 : 22                    	db %100010
cb4a : 22                    	db %100010
cb4b : 22                    	db %100010
cb4c : 1c                    	db %011100
cb4d : 00                    	db %000000
                             ; char 80
cb4e : 3c                    	db %111100
AS65 Assembler for R6502 [1.42].                                     Page   92
-------------------------------- bank\bank0.s --------------------------------

cb4f : 22                    	db %100010
cb50 : 22                    	db %100010
cb51 : 3c                    	db %111100
cb52 : 20                    	db %100000
cb53 : 20                    	db %100000
cb54 : 20                    	db %100000
cb55 : 00                    	db %000000
                             ; char 81
cb56 : 1c                    	db %011100
cb57 : 22                    	db %100010
cb58 : 22                    	db %100010
cb59 : 22                    	db %100010
cb5a : 2a                    	db %101010
cb5b : 24                    	db %100100
cb5c : 1a                    	db %011010
cb5d : 00                    	db %000000
                             ; char 82
cb5e : 3c                    	db %111100
cb5f : 22                    	db %100010
cb60 : 22                    	db %100010
cb61 : 3c                    	db %111100
cb62 : 28                    	db %101000
cb63 : 24                    	db %100100
cb64 : 22                    	db %100010
cb65 : 00                    	db %000000
                             ; char 83
cb66 : 1c                    	db %011100
cb67 : 22                    	db %100010
cb68 : 20                    	db %100000
cb69 : 1c                    	db %011100
cb6a : 02                    	db %000010
cb6b : 22                    	db %100010
cb6c : 1c                    	db %011100
cb6d : 00                    	db %000000
                             ; char 84
cb6e : 3e                    	db %111110
cb6f : 08                    	db %001000
cb70 : 08                    	db %001000
cb71 : 08                    	db %001000
cb72 : 08                    	db %001000
cb73 : 08                    	db %001000
cb74 : 08                    	db %001000
cb75 : 00                    	db %000000
                             ; char 85
cb76 : 22                    	db %100010
cb77 : 22                    	db %100010
cb78 : 22                    	db %100010
cb79 : 22                    	db %100010
cb7a : 22                    	db %100010
cb7b : 22                    	db %100010
cb7c : 1c                    	db %011100
cb7d : 00                    	db %000000
                             ; char 86
cb7e : 22                    	db %100010
cb7f : 22                    	db %100010
cb80 : 22                    	db %100010
cb81 : 22                    	db %100010
cb82 : 22                    	db %100010
cb83 : 14                    	db %010100
cb84 : 08                    	db %001000
cb85 : 00                    	db %000000
                             ; char 87
AS65 Assembler for R6502 [1.42].                                     Page   93
-------------------------------- bank\bank0.s --------------------------------

cb86 : 22                    	db %100010
cb87 : 22                    	db %100010
cb88 : 22                    	db %100010
cb89 : 2a                    	db %101010
cb8a : 2a                    	db %101010
cb8b : 36                    	db %110110
cb8c : 22                    	db %100010
cb8d : 00                    	db %000000
                             ; char 88
cb8e : 22                    	db %100010
cb8f : 22                    	db %100010
cb90 : 14                    	db %010100
cb91 : 08                    	db %001000
cb92 : 14                    	db %010100
cb93 : 22                    	db %100010
cb94 : 22                    	db %100010
cb95 : 00                    	db %000000
                             ; char 89
cb96 : 22                    	db %100010
cb97 : 22                    	db %100010
cb98 : 14                    	db %010100
cb99 : 08                    	db %001000
cb9a : 08                    	db %001000
cb9b : 08                    	db %001000
cb9c : 08                    	db %001000
cb9d : 00                    	db %000000
                             ; char 90
cb9e : 3e                    	db %111110
cb9f : 02                    	db %000010
cba0 : 04                    	db %000100
cba1 : 08                    	db %001000
cba2 : 10                    	db %010000
cba3 : 20                    	db %100000
cba4 : 3e                    	db %111110
cba5 : 00                    	db %000000
                             ; char 91
cba6 : 1c                    	db %011100
cba7 : 10                    	db %010000
cba8 : 10                    	db %010000
cba9 : 10                    	db %010000
cbaa : 10                    	db %010000
cbab : 10                    	db %010000
cbac : 1c                    	db %011100
cbad : 00                    	db %000000
                             ; char 92
cbae : 00                    	db %000000
cbaf : 20                    	db %100000
cbb0 : 10                    	db %010000
cbb1 : 08                    	db %001000
cbb2 : 04                    	db %000100
cbb3 : 02                    	db %000010
cbb4 : 00                    	db %000000
cbb5 : 00                    	db %000000
                             ; char 93
cbb6 : 1c                    	db %011100
cbb7 : 04                    	db %000100
cbb8 : 04                    	db %000100
cbb9 : 04                    	db %000100
cbba : 04                    	db %000100
cbbb : 04                    	db %000100
cbbc : 1c                    	db %011100
cbbd : 00                    	db %000000
AS65 Assembler for R6502 [1.42].                                     Page   94
-------------------------------- bank\bank0.s --------------------------------

                             ; char 94
cbbe : 08                    	db %001000
cbbf : 1c                    	db %011100
cbc0 : 3e                    	db %111110
cbc1 : 08                    	db %001000
cbc2 : 08                    	db %001000
cbc3 : 08                    	db %001000
cbc4 : 08                    	db %001000
cbc5 : 00                    	db %000000
                             ; char 95
cbc6 : 00                    	db %000000
cbc7 : 00                    	db %000000
cbc8 : 00                    	db %000000
cbc9 : 00                    	db %000000
cbca : 00                    	db %000000
cbcb : 00                    	db %000000
cbcc : 3e                    	db %111110
cbcd : 00                    	db %000000
                             ; char 96
cbce : 0e                    	db %001110
cbcf : 10                    	db %010000
cbd0 : 10                    	db %010000
cbd1 : 3c                    	db %111100
cbd2 : 10                    	db %010000
cbd3 : 10                    	db %010000
cbd4 : 3e                    	db %111110
cbd5 : 00                    	db %000000
                             ; char 97
cbd6 : 00                    	db %000000
cbd7 : 00                    	db %000000
cbd8 : 1c                    	db %011100
cbd9 : 02                    	db %000010
cbda : 1e                    	db %011110
cbdb : 22                    	db %100010
cbdc : 1e                    	db %011110
cbdd : 00                    	db %000000
                             ; char 98
cbde : 20                    	db %100000
cbdf : 20                    	db %100000
cbe0 : 3c                    	db %111100
cbe1 : 22                    	db %100010
cbe2 : 22                    	db %100010
cbe3 : 22                    	db %100010
cbe4 : 3c                    	db %111100
cbe5 : 00                    	db %000000
                             ; char 99
cbe6 : 00                    	db %000000
cbe7 : 00                    	db %000000
cbe8 : 1e                    	db %011110
cbe9 : 20                    	db %100000
cbea : 20                    	db %100000
cbeb : 20                    	db %100000
cbec : 1e                    	db %011110
cbed : 00                    	db %000000
                             ; char 100
cbee : 02                    	db %000010
cbef : 02                    	db %000010
cbf0 : 1e                    	db %011110
cbf1 : 22                    	db %100010
cbf2 : 22                    	db %100010
cbf3 : 22                    	db %100010
cbf4 : 1e                    	db %011110
AS65 Assembler for R6502 [1.42].                                     Page   95
-------------------------------- bank\bank0.s --------------------------------

cbf5 : 00                    	db %000000
                             ; char 101
cbf6 : 00                    	db %000000
cbf7 : 00                    	db %000000
cbf8 : 1c                    	db %011100
cbf9 : 22                    	db %100010
cbfa : 3e                    	db %111110
cbfb : 20                    	db %100000
cbfc : 1e                    	db %011110
cbfd : 00                    	db %000000
                             ; char 102
cbfe : 0c                    	db %001100
cbff : 12                    	db %010010
cc00 : 10                    	db %010000
cc01 : 3c                    	db %111100
cc02 : 10                    	db %010000
cc03 : 10                    	db %010000
cc04 : 10                    	db %010000
cc05 : 00                    	db %000000
                             ; char 103
cc06 : 00                    	db %000000
cc07 : 00                    	db %000000
cc08 : 1c                    	db %011100
cc09 : 22                    	db %100010
cc0a : 22                    	db %100010
cc0b : 1e                    	db %011110
cc0c : 02                    	db %000010
cc0d : 1c                    	db %011100
                             ; char 104
cc0e : 20                    	db %100000
cc0f : 20                    	db %100000
cc10 : 3c                    	db %111100
cc11 : 22                    	db %100010
cc12 : 22                    	db %100010
cc13 : 22                    	db %100010
cc14 : 22                    	db %100010
cc15 : 00                    	db %000000
                             ; char 105
cc16 : 08                    	db %001000
cc17 : 00                    	db %000000
cc18 : 18                    	db %011000
cc19 : 08                    	db %001000
cc1a : 08                    	db %001000
cc1b : 08                    	db %001000
cc1c : 1c                    	db %011100
cc1d : 00                    	db %000000
                             ; char 106
cc1e : 04                    	db %000100
cc1f : 00                    	db %000000
cc20 : 0c                    	db %001100
cc21 : 04                    	db %000100
cc22 : 04                    	db %000100
cc23 : 04                    	db %000100
cc24 : 24                    	db %100100
cc25 : 18                    	db %011000
                             ; char 107
cc26 : 20                    	db %100000
cc27 : 20                    	db %100000
cc28 : 22                    	db %100010
cc29 : 24                    	db %100100
cc2a : 38                    	db %111000
cc2b : 24                    	db %100100
AS65 Assembler for R6502 [1.42].                                     Page   96
-------------------------------- bank\bank0.s --------------------------------

cc2c : 22                    	db %100010
cc2d : 00                    	db %000000
                             ; char 108
cc2e : 18                    	db %011000
cc2f : 08                    	db %001000
cc30 : 08                    	db %001000
cc31 : 08                    	db %001000
cc32 : 08                    	db %001000
cc33 : 08                    	db %001000
cc34 : 1c                    	db %011100
cc35 : 00                    	db %000000
                             ; char 109
cc36 : 00                    	db %000000
cc37 : 00                    	db %000000
cc38 : 36                    	db %110110
cc39 : 2a                    	db %101010
cc3a : 2a                    	db %101010
cc3b : 2a                    	db %101010
cc3c : 22                    	db %100010
cc3d : 00                    	db %000000
                             ; char 110
cc3e : 00                    	db %000000
cc3f : 00                    	db %000000
cc40 : 3c                    	db %111100
cc41 : 22                    	db %100010
cc42 : 22                    	db %100010
cc43 : 22                    	db %100010
cc44 : 22                    	db %100010
cc45 : 00                    	db %000000
                             ; char 111
cc46 : 00                    	db %000000
cc47 : 00                    	db %000000
cc48 : 1c                    	db %011100
cc49 : 22                    	db %100010
cc4a : 22                    	db %100010
cc4b : 22                    	db %100010
cc4c : 1c                    	db %011100
cc4d : 00                    	db %000000
                             ; char 112
cc4e : 00                    	db %000000
cc4f : 00                    	db %000000
cc50 : 3c                    	db %111100
cc51 : 22                    	db %100010
cc52 : 22                    	db %100010
cc53 : 3c                    	db %111100
cc54 : 20                    	db %100000
cc55 : 20                    	db %100000
                             ; char 113
cc56 : 00                    	db %000000
cc57 : 00                    	db %000000
cc58 : 1e                    	db %011110
cc59 : 22                    	db %100010
cc5a : 22                    	db %100010
cc5b : 1e                    	db %011110
cc5c : 02                    	db %000010
cc5d : 02                    	db %000010
                             ; char 114
cc5e : 00                    	db %000000
cc5f : 00                    	db %000000
cc60 : 2e                    	db %101110
cc61 : 30                    	db %110000
cc62 : 20                    	db %100000
AS65 Assembler for R6502 [1.42].                                     Page   97
-------------------------------- bank\bank0.s --------------------------------

cc63 : 20                    	db %100000
cc64 : 20                    	db %100000
cc65 : 00                    	db %000000
                             ; char 115
cc66 : 00                    	db %000000
cc67 : 00                    	db %000000
cc68 : 1e                    	db %011110
cc69 : 20                    	db %100000
cc6a : 1c                    	db %011100
cc6b : 02                    	db %000010
cc6c : 3c                    	db %111100
cc6d : 00                    	db %000000
                             ; char 116
cc6e : 10                    	db %010000
cc6f : 10                    	db %010000
cc70 : 3c                    	db %111100
cc71 : 10                    	db %010000
cc72 : 10                    	db %010000
cc73 : 12                    	db %010010
cc74 : 0c                    	db %001100
cc75 : 00                    	db %000000
                             ; char 117
cc76 : 00                    	db %000000
cc77 : 00                    	db %000000
cc78 : 22                    	db %100010
cc79 : 22                    	db %100010
cc7a : 22                    	db %100010
cc7b : 26                    	db %100110
cc7c : 1a                    	db %011010
cc7d : 00                    	db %000000
                             ; char 118
cc7e : 00                    	db %000000
cc7f : 00                    	db %000000
cc80 : 22                    	db %100010
cc81 : 22                    	db %100010
cc82 : 22                    	db %100010
cc83 : 14                    	db %010100
cc84 : 08                    	db %001000
cc85 : 00                    	db %000000
                             ; char 119
cc86 : 00                    	db %000000
cc87 : 00                    	db %000000
cc88 : 22                    	db %100010
cc89 : 22                    	db %100010
cc8a : 2a                    	db %101010
cc8b : 2a                    	db %101010
cc8c : 36                    	db %110110
cc8d : 00                    	db %000000
                             ; char 120
cc8e : 00                    	db %000000
cc8f : 00                    	db %000000
cc90 : 22                    	db %100010
cc91 : 14                    	db %010100
cc92 : 08                    	db %001000
cc93 : 14                    	db %010100
cc94 : 22                    	db %100010
cc95 : 00                    	db %000000
                             ; char 121
cc96 : 00                    	db %000000
cc97 : 00                    	db %000000
cc98 : 22                    	db %100010
cc99 : 22                    	db %100010
AS65 Assembler for R6502 [1.42].                                     Page   98
-------------------------------- bank\bank0.s --------------------------------

cc9a : 22                    	db %100010
cc9b : 1e                    	db %011110
cc9c : 02                    	db %000010
cc9d : 1c                    	db %011100
                             ; char 122
cc9e : 00                    	db %000000
cc9f : 00                    	db %000000
cca0 : 3e                    	db %111110
cca1 : 04                    	db %000100
cca2 : 08                    	db %001000
cca3 : 10                    	db %010000
cca4 : 3e                    	db %111110
cca5 : 00                    	db %000000
                             ; char 123
cca6 : 0e                    	db %001110
cca7 : 18                    	db %011000
cca8 : 18                    	db %011000
cca9 : 30                    	db %110000
ccaa : 18                    	db %011000
ccab : 18                    	db %011000
ccac : 0e                    	db %001110
ccad : 00                    	db %000000
                             ; char 124
ccae : 08                    	db %001000
ccaf : 08                    	db %001000
ccb0 : 08                    	db %001000
ccb1 : 08                    	db %001000
ccb2 : 08                    	db %001000
ccb3 : 08                    	db %001000
ccb4 : 08                    	db %001000
ccb5 : 00                    	db %000000
                             ; char 125
ccb6 : 38                    	db %111000
ccb7 : 0c                    	db %001100
ccb8 : 0c                    	db %001100
ccb9 : 06                    	db %000110
ccba : 0c                    	db %001100
ccbb : 0c                    	db %001100
ccbc : 38                    	db %111000
ccbd : 00                    	db %000000
                             ; char 126
ccbe : 00                    	db %000000
ccbf : 00                    	db %000000
ccc0 : 10                    	db %010000
ccc1 : 2a                    	db %101010
ccc2 : 04                    	db %000100
ccc3 : 00                    	db %000000
ccc4 : 00                    	db %000000
ccc5 : 00                    	db %000000
                             ; char 127
ccc6 : 2a                    	db %101010
ccc7 : 15                    	db %010101
ccc8 : 2a                    	db %101010
ccc9 : 15                    	db %010101
ccca : 2a                    	db %101010
cccb : 15                    	db %010101
cccc : 2a                    	db %101010
cccd : 15                    	db %010101
                             	
                             	
                             
                             ;****************************************
AS65 Assembler for R6502 [1.42].                                     Page   99
-------------------------------- bank\bank0.s --------------------------------

                             ;* vdp_init_font
                             ;* Initialise fonts from ROM
                             ;* Input : None
                             ;* Output : None
                             ;* Regs affected : All
                             ;****************************************
ccce :                       gr_init_font
                             	; Get char base from vdp structure
ccce : a614             [ 3] 	ldx gr_scrngeom+gr_char
ccd0 : 8634             [ 3] 	stx tmp_blo
ccd2 : a615             [ 3] 	ldx gr_scrngeom+gr_char+1
ccd4 : e8               [ 2] 	inx						; ASCII patterns start 1 page later
ccd5 : 8635             [ 3] 	stx tmp_bhi
                             
ccd7 : a9ce             [ 2] 	lda #lo(vdp_font)		; Low byte of fonts source
ccd9 : 8536             [ 3] 	sta tmp_clo
ccdb : a9c9             [ 2] 	lda #hi(vdp_font)		; High byte of fonts source
ccdd : 8537             [ 3] 	sta tmp_chi
ccdf : a203             [ 2] 	ldx #3					; Copy 3 pages
cce1 : 4ce4cc           [ 3] 	jmp gr_copy_mem
                             
                             
                             ;****************************************
                             ;* vdp_copy_mem
                             ;* Copy memory pages at a time
                             ;* Input :	clo/hi	=	source
                             ;*			blo/hi	=	dest
                             ;*			X		=	pages to copy
                             ;* Output : None
                             ;* Regs affected : All
                             ;****************************************
cce4 :                       gr_copy_mem
cce4 : a000             [ 2] 	ldy #0					; byte within page
cce6 : a536             [ 3] 	lda tmp_clo				; Low byte of source
cce8 : 8532             [ 3] 	sta tmp_alo
ccea : a537             [ 3] 	lda tmp_chi				; High byte of source
ccec : 8533             [ 3] 	sta tmp_ahi
ccee :                       gr_copy_byte
ccee : 98               [ 2] 	tya
ccef : b132             [ 5] 	lda (tmp_alo),y			; Get byte from font table
ccf1 : 9134             [ 5] 	sta (tmp_blo),y			; Put it to the memory
ccf3 : c8               [ 2] 	iny
ccf4 : d0f8             [ 3] 	bne gr_copy_byte		; keep going for 1 page
ccf6 : e633             [ 5] 	inc tmp_ahi				; only need to increment high byt
ccf8 : e635             [ 5] 	inc tmp_bhi				; source and destination ptr
ccfa : ca               [ 2] 	dex						; page counter
ccfb : d0f1             [ 3] 	bne gr_copy_byte		; keep going for X pages
ccfd : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* gr_init
                             ;* First initialisation of screen
                             ;****************************************
ccfe :                       gr_init
ccfe : a210             [ 2] 	ldx #VDP_FLASH			; Default cursor flash rate
cd00 : 860b             [ 3] 	stx vdp_curtim
cd02 : 860c             [ 3] 	stx vdp_curcnt
cd04 : a200             [ 2] 	ldx #0
cd06 : 860e             [ 3] 	stx vdp_curstat
                             
                             	; Hard reset initial geom values (X=0)
AS65 Assembler for R6502 [1.42].                                     Page  100
-------------------------------- bank\bank0.s --------------------------------

cd08 : 202fcd           [ 6] 	jsr gr_init_geom
                             
                             	; Copy font from ROM to char base
cd0b : 20cecc           [ 6] 	jsr gr_init_font
                             
                             	; Go in to hires mode to generate tables
cd0e : 2085cd           [ 6] 	jsr gr_init_hires
cd11 : 20becd           [ 6] 	jsr gr_init_hires_tables
                             
                             	; But start in text mode
cd14 : 4c6ccd           [ 3] 	jmp gr_init_screen_txt
                             
                             
                             ;****************************************
                             ;* gr_check_font_copy
                             ;* check font needs to be copied from
                             ;* current location to another
                             ;* A=high byte of page aligned font addr
                             ;* that the font needs to be at
                             ;****************************************
cd17 :                       gr_check_font_copy
                             	; Compare with current high byte
cd17 : c515             [ 3] 	cmp gr_scrngeom+gr_char+1
cd19 : f013             [ 3] 	beq gr_check_font_copy_done
                             	; save A as high byte of destination
cd1b : 8535             [ 3] 	sta tmp_blo+1
                             	; destination low is 0
cd1d : a900             [ 2] 	lda #0
cd1f : 8534             [ 3] 	sta tmp_blo
                             
                             	; Get source from current vdp structure
cd21 : a515             [ 3] 	lda gr_scrngeom+gr_char+1
cd23 : 8537             [ 3] 	sta tmp_clo+1
cd25 : a514             [ 3] 	lda gr_scrngeom+gr_char
cd27 : 8536             [ 3] 	sta tmp_clo
                             
                             	; Copy all 8 pages of font (std + alt) data
cd29 : a208             [ 2] 	ldx #8
cd2b : 20e4cc           [ 6] 	jsr gr_copy_mem
cd2e :                       gr_check_font_copy_done
cd2e :                       gr_init_geom_done
cd2e : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* gr_init_geom
                             ;* initialise geometry entries from X
                             ;* position from base until -1
                             ;****************************************
cd2f :                       gr_init_geom
                             	; Which geom entry to init = Y
cd2f : bc3ecd           [ 4] 	ldy gr_scrngeom_base,x
cd32 : 30fa             [ 3] 	bmi gr_init_geom_done		; Just somewhere with an 
                             	; skip to data and put in A
cd34 : e8               [ 2] 	inx
cd35 : bd3ecd           [ 4] 	lda gr_scrngeom_base,x
                             	; save it in Y
cd38 : 991100           [ 5] 	sta gr_scrngeom,y
                             	; next entry
cd3b : e8               [ 2] 	inx
cd3c : d0f1             [ 3] 	bne gr_init_geom	; Always
                             	; Hope we don't get here - will crash!
AS65 Assembler for R6502 [1.42].                                     Page  101
-------------------------------- bank\bank0.s --------------------------------

                             
                             ; Geometry initialisation tables
cd3e :                       gr_scrngeom_base
cd3e : 1200                  	db gr_ink, 0
cd40 : 1316                  	db gr_paper, 16+6
cd42 : 1402                  	db gr_margin, 2
                             	; Not terminated by -1 : continues in to _txt va
                             ;* Geometry for text/lores
cd44 :                       gr_scrngeom_text
cd44 : 0000                  	db gr_mode, 0
                             
cd46 : 0300                  	db gr_char,   lo(TEXTCHAR)
cd48 : 04b4                  	db gr_char+1, hi(TEXTCHAR)
                             
cd4a : 0580                  	db gr_text_start,   lo(TEXTSCRN)
cd4c : 06bb                  	db gr_text_start+1, hi(TEXTSCRN)
                             
cd4e : 0828                  	db gr_text_w, 40
cd50 : 091c                  	db gr_text_h, 28
cd52 : ff                    	db -1
                             ;* Geometry for hires
cd53 :                       gr_scrngeom_hires
cd53 : 0001                  	db gr_mode, 1
                             
cd55 : 0100                  	db gr_hi_start,   lo(HISCRN)
cd57 : 02a0                  	db gr_hi_start+1, hi(HISCRN)
cd59 : 0300                  	db gr_char,   lo(HICHAR)
cd5b : 0498                  	db gr_char+1, hi(HICHAR)
                             
cd5d : 0568                  	db gr_text_start,   lo(HITEXT)
cd5f : 06bf                  	db gr_text_start+1, hi(HITEXT)
                             
cd61 : 1000                  	db gr_hires_x, 0
cd63 : 1100                  	db gr_hires_y, 0
                             
                             	; Only need to initialise text height, width is 
cd65 : 0903                  	db gr_text_h, 3
                             
cd67 : 0e01                  	db gr_pixmode, 1
cd69 : 0f06                  	db gr_pitch, 6
cd6b : ff                    	db -1
                             
                             
                             
                             ;****************************************
                             ;* gr_init_screen_txt
                             ;* initialise the screen in text mode
                             ;****************************************
cd6c :                       gr_init_screen_txt
cd6c : e60d             [ 5] 	inc vdp_curoff
                             
                             	; Check if font copy needed to 0xb400
cd6e : a9b4             [ 2] 	lda #hi(TEXTCHAR)
cd70 : 2017cd           [ 6] 	jsr gr_check_font_copy
                             
                             	; Initialise geom for text
cd73 : a206             [ 2] 	ldx #gr_scrngeom_text-gr_scrngeom_base
cd75 : 202fcd           [ 6] 	jsr gr_init_geom
                             
cd78 : 20cfd2           [ 6] 	jsr gr_spr_init					; SW Sprites are reset
                             
cd7b : a920             [ 2] 	lda #' '						; Blank is SPACE
AS65 Assembler for R6502 [1.42].                                     Page  102
-------------------------------- bank\bank0.s --------------------------------

cd7d : 8510             [ 3] 	sta vdp_blank
cd7f : 2002ce           [ 6] 	jsr gr_cls
                             
cd82 : c60d             [ 5] 	dec vdp_curoff
                             
cd84 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* gr_init_hires
                             ;* Input : X = Colour table fill value
                             ;* initialise the screen in hires mode
                             ;****************************************
cd85 :                       gr_init_hires
cd85 : e60d             [ 5] 	inc vdp_curoff
                             	; Check if font copy needed to 0x9800
cd87 : a998             [ 2] 	lda #hi(HICHAR)
cd89 : 2017cd           [ 6] 	jsr gr_check_font_copy
                             
                             	; Initialise geom for hires
cd8c : a215             [ 2] 	ldx #gr_scrngeom_hires-gr_scrngeom_base
cd8e : 202fcd           [ 6] 	jsr gr_init_geom
                             
cd91 : a920             [ 2] 	lda #' '						; Blank is SPACE
cd93 : 8510             [ 3] 	sta vdp_blank
cd95 : 2002ce           [ 6] 	jsr gr_cls
                             
                             	; Zero out hires area 0xa000 for 8000 (0x1f40) b
cd98 : a900             [ 2] 	lda #lo(HISCRN)
cd9a : 8532             [ 3] 	sta tmp_alo
cd9c : a9a0             [ 2] 	lda #hi(HISCRN)
cd9e : 8533             [ 3] 	sta tmp_ahi
cda0 : a940             [ 2] 	lda #0x40						; Set bit 6
cda2 : a000             [ 2] 	ldy #0
cda4 : a200             [ 2] 	ldx #0
cda6 :                       vdp_fill_vram_loop
cda6 : 9132             [ 5] 	sta (tmp_alo),y
cda8 : c8               [ 2] 	iny
cda9 : d003             [ 3] 	bne vdp_fill_vram_noinc
cdab : e633             [ 5] 	inc tmp_ahi
cdad : e8               [ 2] 	inx
cdae :                       vdp_fill_vram_noinc
cdae : e01f             [ 2] 	cpx #hi(0x1f40)			; Reached page count?
cdb0 : d0f4             [ 3] 	bne vdp_fill_vram_loop
cdb2 : c040             [ 2] 	cpy #lo(0x1f40)			; Reached byte in page?
cdb4 : d0f0             [ 3] 	bne vdp_fill_vram_loop
                             
                             	; Set hires attribute in the magic location
cdb6 : a91e             [ 2] 	lda #30			; Hires attribute
cdb8 : 8ddfbf           [ 4] 	sta 0xbfdf		; Last pos of screen memory
                             
cdbb : c60d             [ 5] 	dec vdp_curoff
cdbd : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* gr_init_hires_tables
                             ;* Generate the hires tables
                             ;* Do this whilst in hires mode
                             ;****************************************
cdbe :                       gr_init_hires_tables
                             	; Initialise address pointer to start of high re
cdbe : a900             [ 2] 	lda #lo(HISCRN)
cdc0 : 8532             [ 3] 	sta tmp_alo
AS65 Assembler for R6502 [1.42].                                     Page  103
-------------------------------- bank\bank0.s --------------------------------

cdc2 : a9a0             [ 2] 	lda #hi(HISCRN)
cdc4 : 8533             [ 3] 	sta tmp_ahi
                             	; Starting from row zero, do 200 rows
cdc6 : a000             [ 2] 	ldy #0
cdc8 :                       gr_init_tab_row
                             	; Save low and high bytes of screen address in t
cdc8 : a532             [ 3] 	lda tmp_alo
cdca : 99009c           [ 5] 	sta hires_row_low,y
cdcd : a533             [ 3] 	lda tmp_ahi
cdcf : 99c89c           [ 5] 	sta hires_row_hi,y
                             	; add 40 ready for next row
cdd2 : 18               [ 2] 	clc
cdd3 : a532             [ 3] 	lda tmp_alo
cdd5 : 6928             [ 2] 	adc #40
cdd7 : 8532             [ 3] 	sta tmp_alo
                             	_bcc 2
                             
cddb : e633             [ 5] 	inc tmp_ahi
                             	; Max 200 rows
cddd : c8               [ 2] 	iny
cdde : c0c8             [ 2] 	cpy #200
cde0 : d0e6             [ 3] 	bne gr_init_tab_row
                             	; From column 0, do 240 columns
                             	; Mask starts at 0x20, when shifts to 0 then
                             	; the column increments
cde2 : a920             [ 2] 	lda #0x20
cde4 : 8534             [ 3] 	sta tmp_blo			; Pixel mask
cde6 : a200             [ 2] 	ldx #0				; Pixel column
cde8 : a000             [ 2] 	ldy #0				; Byte column
cdea :                       gr_init_tab_col
                             	; Save current mask and column
cdea : a534             [ 3] 	lda tmp_blo
cdec : 9d809e           [ 5] 	sta hires_mask,x
cdef : 98               [ 2] 	tya
cdf0 : 9d909d           [ 5] 	sta hires_col,x
                             	; shift mask, if zero then increment col and res
cdf3 : 4634             [ 5] 	lsr tmp_blo
cdf5 : d005             [ 3] 	bne gr_init_tab_col_skip
cdf7 : a920             [ 2] 	lda #0x20
cdf9 : 8534             [ 3] 	sta tmp_blo
cdfb : c8               [ 2] 	iny
cdfc :                       gr_init_tab_col_skip
cdfc : e8               [ 2] 	inx
cdfd : e0f0             [ 2] 	cpx #240
cdff : d0e9             [ 3] 	bne gr_init_tab_col
ce01 : 60               [ 6] 	rts
                             
                             
                             
                             ;****************************************
                             ;* gr_cls
                             ;* Clear the text screen
                             ;****************************************
ce02 :                       gr_cls
ce02 : e60d             [ 5] 	inc vdp_curoff
                             	; Set screen address for text mode
ce04 : a516             [ 3] 	lda gr_scrngeom+gr_text_start
ce06 : 8526             [ 3] 	sta gr_scrngeom+gr_geom_tmp
ce08 : a517             [ 3] 	lda gr_scrngeom+gr_text_start+1
ce0a : 8527             [ 3] 	sta gr_scrngeom+gr_geom_tmp+1
                             
ce0c : a61a             [ 3] 	ldx gr_scrngeom+gr_text_h		; Count of rows to cl
AS65 Assembler for R6502 [1.42].                                     Page  104
-------------------------------- bank\bank0.s --------------------------------

                             
                             	; X and Y count bytes to fill
ce0e :                       gr_cls_row
ce0e : a000             [ 2] 	ldy #0							; Count of columns
ce10 : a525             [ 3] 	lda gr_scrngeom+gr_margin		; Is there a margin?
ce12 : f00a             [ 3] 	beq gr_cls_skip_marg
ce14 : a524             [ 3] 	lda gr_scrngeom+gr_paper		; Set Paper
ce16 : 9126             [ 5] 	sta (gr_scrngeom+gr_geom_tmp),y
ce18 : c8               [ 2] 	iny
ce19 : a523             [ 3] 	lda gr_scrngeom+gr_ink			; Set Ink
ce1b : 9126             [ 5] 	sta (gr_scrngeom+gr_geom_tmp),y
ce1d : c8               [ 2] 	iny
ce1e :                       gr_cls_skip_marg
ce1e : a510             [ 3] 	lda vdp_blank
ce20 : 850f             [ 3] 	sta vdp_curval					; Under cursor is also blank
ce22 :                       gr_cls_col
ce22 : 9126             [ 5] 	sta (gr_scrngeom+gr_geom_tmp),y
ce24 : c8               [ 2] 	iny
ce25 : c419             [ 3] 	cpy gr_scrngeom+gr_text_w		; Done all columns?
ce27 : d0f9             [ 3] 	bne gr_cls_col
                             	; Update pointer
ce29 : 18               [ 2] 	clc
ce2a : a526             [ 3] 	lda gr_scrngeom+gr_geom_tmp
ce2c : 6519             [ 3] 	adc gr_scrngeom+gr_text_w
ce2e : 8526             [ 3] 	sta gr_scrngeom+gr_geom_tmp
                             	_bcc 2
                             
ce32 : e627             [ 5] 	inc gr_scrngeom+gr_geom_tmp+1
ce34 : ca               [ 2] 	dex								; 1 row done
ce35 : d0d7             [ 3] 	bne gr_cls_row					; Done all rows?
                             
                             	; set cursror position to top left
ce37 : a510             [ 3] 	lda vdp_blank
ce39 : 850f             [ 3] 	sta vdp_curval
ce3b : a625             [ 3] 	ldx gr_scrngeom+gr_margin
ce3d : a000             [ 2] 	ldy #0
ce3f : 38               [ 2] 	sec								; Init mode
ce40 : 2070ce           [ 6] 	jsr gr_set_cur_init
                             
ce43 : c60d             [ 5] 	dec vdp_curoff
                             
ce45 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* gr_getXY_base
                             ;* Get base screen address using Y coord only
                             ;* Input : X = y coord
                             ;* Output :	gr_geom_tmp updated with base
                             ;* Regs affected : A
                             ;****************************************
ce46 :                       gr_getXY_base
                             	; Find y offset using **X register**
ce46 : 18               [ 2] 	clc
ce47 : bd97d2           [ 4] 	lda gr_offset_40lo,x
ce4a : 6516             [ 3] 	adc gr_scrngeom+gr_text_start
ce4c : 8526             [ 3] 	sta gr_scrngeom+gr_geom_tmp
ce4e : bdb3d2           [ 4] 	lda gr_offset_40hi,x
ce51 : 6517             [ 3] 	adc gr_scrngeom+gr_text_start+1
ce53 : 8527             [ 3] 	sta gr_scrngeom+gr_geom_tmp+1
                             
                             	; A = high byte of base address
ce55 : 60               [ 6] 	rts
AS65 Assembler for R6502 [1.42].                                     Page  105
-------------------------------- bank\bank0.s --------------------------------

                             
                             ;****************************************
                             ;* gr_plot
                             ;* Write a byte in the screen pos
                             ;* Input :	Y,X = coord, A = Byte to put
                             ;*			X = Y COORDINATE
                             ;*			Y = X COORDINATE!!
                             ;* Output : None
                             ;* Regs affected : All
                             ;****************************************
ce56 :                       gr_plot
ce56 : 48               [ 3] 	pha					; Save byte to put
ce57 : 2046ce           [ 6] 	jsr gr_getXY_base	; base addre
ce5a : 68               [ 4] 	pla					; Get byte to put
ce5b : 9126             [ 5] 	sta (gr_scrngeom+gr_geom_tmp),y
ce5d : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* gr_put
                             ;* Write a byte in the current cursor position
                             ;* Input : A = Byte to put
                             ;* Output : None
                             ;* Regs affected : All
                             ;****************************************
ce5e :                       gr_put
ce5e : e60d             [ 5] 	inc vdp_curoff		; Disable cusror
ce60 : 850f             [ 3] 	sta vdp_curval		; Update cursor value
                             	; Base address plus X offset
ce62 : a41b             [ 3] 	ldy gr_scrngeom+gr_cur_x
ce64 : 911d             [ 5] 	sta (gr_scrngeom+gr_cur_ptr),y
ce66 : c60d             [ 5] 	dec vdp_curoff		; Allow cursor flashing
ce68 : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* gr_get
                             ;* Get the byte in the screen pos
                             ;* Input : Y,X = coord (**Y = X coordinate!!)
                             ;* Output : X,Y = address, A = peeked byte
                             ;* Regs affected : All
                             ;****************************************
ce69 :                       gr_get
ce69 : 2046ce           [ 6] 	jsr gr_getXY_base	; Base address
ce6c : b126             [ 5] 	lda (gr_scrngeom+gr_geom_tmp),y
ce6e : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* gr_set_cur
                             ;* Set the cursor position
                             ;* Input : X, Y = position
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
ce6f :                       gr_set_cur
ce6f : 18               [ 2] 	clc
ce70 :                       gr_set_cur_init
ce70 : e60d             [ 5] 	inc vdp_curoff				; Disable cursor
                             
ce72 : b00e             [ 3] 	bcs gr_set_cur_skip			; Skip restore if C=1
ce74 : 8632             [ 3] 	stx tmp_alo
ce76 : 8433             [ 3] 	sty tmp_ahi
                             	; First restore what is under the cursor
AS65 Assembler for R6502 [1.42].                                     Page  106
-------------------------------- bank\bank0.s --------------------------------

                             	; in case cursor is ON
ce78 : 8426             [ 3] 	sty gr_scrngeom+gr_geom_tmp
ce7a : a50f             [ 3] 	lda vdp_curval
ce7c : a41b             [ 3] 	ldy gr_scrngeom+gr_cur_x
ce7e : 911d             [ 5] 	sta (gr_scrngeom+gr_cur_ptr),y
ce80 : a426             [ 3] 	ldy gr_scrngeom+gr_geom_tmp
ce82 :                       gr_set_cur_skip
                             	; Save new cursor position
ce82 : 861b             [ 3] 	stx gr_scrngeom+gr_cur_x
ce84 : 841c             [ 3] 	sty gr_scrngeom+gr_cur_y
                             
                             	; Now calculate the new cursor vram address
ce86 : a61c             [ 3] 	ldx gr_scrngeom+gr_cur_y
ce88 : 2046ce           [ 6] 	jsr gr_getXY_base
                             	; Update pointer in tmp, A already has high byte
ce8b : 851e             [ 3] 	sta gr_scrngeom+gr_cur_ptr+1
ce8d : a526             [ 3] 	lda gr_scrngeom+gr_geom_tmp
ce8f : 851d             [ 3] 	sta gr_scrngeom+gr_cur_ptr
                             	; Read screen at this position, offset with X co
ce91 : a41b             [ 3] 	ldy gr_scrngeom+gr_cur_x
ce93 : b11d             [ 5] 	lda (gr_scrngeom+gr_cur_ptr),y
ce95 : 850f             [ 3] 	sta vdp_curval
                             	; Reset cursor so it's visible
ce97 : a900             [ 2] 	lda #0
ce99 : 850e             [ 3] 	sta vdp_curstat
ce9b : a901             [ 2] 	lda #1
ce9d : 850c             [ 3] 	sta vdp_curcnt
                             
ce9f : c60d             [ 5] 	dec vdp_curoff
                             
cea1 : 60               [ 6] 	rts
                             
                             
                             
                             ;****************************************
                             ;* gr_scroll_up
                             ;* Scroll screen one line up
                             ;****************************************
cea2 :                       gr_scroll_up
cea2 : e60d             [ 5] 	inc vdp_curoff
                             
                             	; Set source in a and dest in b
                             	; b is first line, source is second
cea4 : 18               [ 2] 	clc
cea5 : a516             [ 3] 	lda gr_scrngeom+gr_text_start
cea7 : 8534             [ 3] 	sta tmp_blo
cea9 : 6519             [ 3] 	adc gr_scrngeom+gr_text_w
ceab : 8532             [ 3] 	sta tmp_alo
cead : a517             [ 3] 	lda gr_scrngeom+gr_text_start+1
ceaf : 8535             [ 3] 	sta tmp_bhi
ceb1 : 6900             [ 2] 	adc #0
ceb3 : 8533             [ 3] 	sta tmp_ahi
                             
                             	; Restore what was underneath cursor
ceb5 : a50f             [ 3] 	lda vdp_curval
ceb7 : a41b             [ 3] 	ldy gr_scrngeom+gr_cur_x
ceb9 : 911d             [ 5] 	sta (gr_scrngeom+gr_cur_ptr),y
                             
                             	; x = lines to scroll (1 less than screen height
cebb : a61a             [ 3] 	ldx gr_scrngeom+gr_text_h
cebd : ca               [ 2] 	dex
                             
AS65 Assembler for R6502 [1.42].                                     Page  107
-------------------------------- bank\bank0.s --------------------------------

cebe :                       gr_scroll_cpy_ln
                             	; Start from right hand edge (easier)
cebe : a419             [ 3] 	ldy gr_scrngeom+gr_text_w
cec0 : 88               [ 2] 	dey
cec1 :                       gr_scroll_char
                             	; get char from source and copy to dest
cec1 : b132             [ 5] 	lda (tmp_alo),y
cec3 : 9134             [ 5] 	sta (tmp_blo),y
cec5 : 88               [ 2] 	dey
cec6 : 10f9             [ 3] 	bpl gr_scroll_char
                             
                             	; Update source address
cec8 : 18               [ 2] 	clc
cec9 : a532             [ 3] 	lda tmp_alo
cecb : 6519             [ 3] 	adc gr_scrngeom+gr_text_w
cecd : 8532             [ 3] 	sta tmp_alo
                             	_bcc 2
                             
ced1 : e633             [ 5] 	inc tmp_ahi
                             	; Update destination address
ced3 : 18               [ 2] 	clc
ced4 : a534             [ 3] 	lda tmp_blo
ced6 : 6519             [ 3] 	adc gr_scrngeom+gr_text_w
ced8 : 8534             [ 3] 	sta tmp_blo
                             	_bcc 2
                             
cedc : e635             [ 5] 	inc tmp_bhi
                             
                             	; One line complete
cede : ca               [ 2] 	dex
cedf : d0dd             [ 3] 	bne gr_scroll_cpy_ln
                             
                             	; Source is pointing at last line
                             	; Last line needs filling
cee1 : a000             [ 2] 	ldy #0							; Start from left
cee3 : a525             [ 3] 	lda gr_scrngeom+gr_margin		; Margin?
cee5 : f00a             [ 3] 	beq gr_scroll_marg				; Skip if not
cee7 : a524             [ 3] 	lda gr_scrngeom+gr_paper		; Set Paper
cee9 : 9126             [ 5] 	sta (gr_scrngeom+gr_geom_tmp),y
ceeb : c8               [ 2] 	iny
ceec : a523             [ 3] 	lda gr_scrngeom+gr_ink			; Set Ink
ceee : 9126             [ 5] 	sta (gr_scrngeom+gr_geom_tmp),y
cef0 : c8               [ 2] 	iny
cef1 :                       gr_scroll_marg
                             	; Needs to be filled with blank
cef1 : a510             [ 3] 	lda vdp_blank
cef3 : 850f             [ 3] 	sta vdp_curval			; Also this is the cursor value
cef5 :                       gr_scroll_erase_ln
cef5 : 9134             [ 5] 	sta (tmp_blo),y
cef7 : c8               [ 2] 	iny
cef8 : c419             [ 3] 	cpy gr_scrngeom+gr_text_w
cefa : d0f9             [ 3] 	bne gr_scroll_erase_ln
                             
cefc : c60d             [ 5] 	dec vdp_curoff
                             
cefe : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* gr_new_ln
                             ;* Carry out a new line
                             ;* Input : None
                             ;* Output : None
AS65 Assembler for R6502 [1.42].                                     Page  108
-------------------------------- bank\bank0.s --------------------------------

                             ;* Regs affected : None
                             ;****************************************
ceff :                       gr_new_ln
                             	; X pos is zero, Y needs to increment
ceff : a625             [ 3] 	ldx gr_scrngeom+gr_margin
cf01 : a41c             [ 3] 	ldy gr_scrngeom+gr_cur_y
cf03 : c8               [ 2] 	iny
cf04 : c41a             [ 3] 	cpy gr_scrngeom+gr_text_h
cf06 : d00c             [ 3] 	bne gr_nl_skip_nl
                             	; If got here then screen needs to scroll
                             	; Common routine also used by cursor right
cf08 :                       gr_scroll_routine
cf08 : 88               [ 2] 	dey
cf09 : 8a               [ 2] 	txa
cf0a : 48               [ 3] 	pha
cf0b : 98               [ 2] 	tya
cf0c : 48               [ 3] 	pha
cf0d : 20a2ce           [ 6] 	jsr gr_scroll_up
cf10 : 68               [ 4] 	pla
cf11 : a8               [ 2] 	tay
cf12 : 68               [ 4] 	pla
cf13 : aa               [ 2] 	tax
cf14 :                       gr_nl_skip_nl
cf14 : 4c6fce           [ 3] 	jmp gr_set_cur
                             
                             
                             ;****************************************
                             ;* gr_cur_right
                             ;* Advance cursor position
                             ;* Input : None
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
cf17 :                       gr_cur_right
                             	; Load cursor x,y position
cf17 : a61b             [ 3] 	ldx gr_scrngeom+gr_cur_x
cf19 : a41c             [ 3] 	ldy gr_scrngeom+gr_cur_y
                             
                             	; Move cursor right
cf1b : e8               [ 2] 	inx
                             	; Check if reached past edge of line
cf1c : e419             [ 3] 	cpx gr_scrngeom+gr_text_w
cf1e : d0f4             [ 3] 	bne gr_nl_skip_nl
                             	; If got here then wrap to next line
cf20 : a625             [ 3] 	ldx gr_scrngeom+gr_margin
cf22 : c8               [ 2] 	iny
cf23 : c41a             [ 3] 	cpy gr_scrngeom+gr_text_h
cf25 : f0e1             [ 3] 	beq gr_scroll_routine		; Common scroll routine
cf27 : d0eb             [ 3] 	bne gr_nl_skip_nl			; Common set cursor
                             
                             ;****************************************
                             ;* gr_cur_left
                             ;* Advance cursor left
                             ;* Input : None
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
cf29 :                       gr_cur_left
                             	; Load cursor x,y position, load X last to check
cf29 : a41c             [ 3] 	ldy gr_scrngeom+gr_cur_y
cf2b : a61b             [ 3] 	ldx gr_scrngeom+gr_cur_x
                             
AS65 Assembler for R6502 [1.42].                                     Page  109
-------------------------------- bank\bank0.s --------------------------------

                             	; Decrement screen pointer
                             	; Move cursor left
cf2d : e425             [ 3] 	cpx gr_scrngeom+gr_margin	; Already at left marg
cf2f : d007             [ 3] 	bne gr_cur_skip_at_left		; No, then just go left
cf31 : c000             [ 2] 	cpy #0						; Else check if can wrap up
cf33 : f007             [ 3] 	beq gr_cur_skip_at_tl
cf35 : 88               [ 2] 	dey
cf36 : a619             [ 3] 	ldx gr_scrngeom+gr_text_w
cf38 :                       gr_cur_skip_at_left
cf38 : ca               [ 2] 	dex
cf39 : 4c6fce           [ 3] 	jmp gr_set_cur
                             
cf3c :                       gr_cur_skip_at_tl
cf3c : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* gr_cur_up
                             ;* Advance cursor up
                             ;* Input : None
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
cf3d :                       gr_cur_up
                             	; Load cursor x,y position, load Y last to check
cf3d : a61b             [ 3] 	ldx gr_scrngeom+gr_cur_x
cf3f : a41c             [ 3] 	ldy gr_scrngeom+gr_cur_y
                             	; if y==0 then don't do anything
cf41 : f0f9             [ 3] 	beq gr_cur_skip_at_tl	; Just somewhere with an r
cf43 : 88               [ 2] 	dey
cf44 : 4c6fce           [ 3] 	jmp gr_set_cur
                             
                             ;****************************************
                             ;* gr_cur_down
                             ;* Advance cursor down
                             ;* Input : None
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
cf47 :                       gr_cur_down
                             	; Load cursor x,y position
cf47 : a61b             [ 3] 	ldx gr_scrngeom+gr_cur_x
cf49 : a41c             [ 3] 	ldy gr_scrngeom+gr_cur_y
cf4b : c8               [ 2] 	iny
                             	; If already at  bottom then don't do anything
cf4c : c41a             [ 3] 	cpy gr_scrngeom+gr_text_h			
cf4e : f0ec             [ 3] 	beq gr_cur_skip_at_tl				; Just somewhere with a
cf50 : 206fce           [ 6] 	jsr gr_set_cur
                             
cf53 :                       gr_cur_skip_at_bot
cf53 : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* gr_del
                             ;* Action del
                             ;* Input : None
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
cf54 :                       gr_del
cf54 : 2029cf           [ 6] 	jsr gr_cur_left
cf57 : a920             [ 2] 	lda #' '							; Put a space
AS65 Assembler for R6502 [1.42].                                     Page  110
-------------------------------- bank\bank0.s --------------------------------

cf59 : 4c5ece           [ 3] 	jmp gr_put
                             
                             ;****************************************
                             ;* gr_get_key
                             ;* Waits for a key press, C=1 synchronous
                             ;* A = Key code, C=0 means valid code
                             ;****************************************
cf5c :                       gr_get_key
                             	; save X,Y but A is ok to trample
cf5c : 8a               [ 2] 	txa
cf5d : 48               [ 3] 	pha
cf5e : 98               [ 2] 	tya
cf5f : 48               [ 3] 	pha
cf60 :                       gr_get_key_2
cf60 : 08               [ 3] 	php
cf61 : 2003c9           [ 6] 	jsr kb_get_key
cf64 : 9006             [ 3] 	bcc gr_key_check_key
cf66 : 28               [ 4] 	plp									; Get async pref
cf67 : b0f7             [ 3] 	bcs	gr_get_key_2					; Keep checking if sync
cf69 : 38               [ 2] 	sec
cf6a : b019             [ 3] 	bcs gr_key_tidy_up					; Finish if not
cf6c :                       gr_key_check_key						; Check the key pressed
cf6c : c901             [ 2] 	cmp #UTF_ACK						; Copy key pressed?
cf6e : d004             [ 3] 	bne gr_key_skip_copy
cf70 : a50f             [ 3] 	lda vdp_curval						; If yes the get char under 
cf72 : b00f             [ 3] 	bcs gr_key_got_key					; Always branches (n=1, c
cf74 :                       gr_key_skip_copy
cf74 : c914             [ 2] 	cmp #CTRL_CAPS
cf76 : d00b             [ 3] 	bne gr_key_got_key
cf78 : a52c             [ 3] 	lda kb_stat							; Toggle caps bit
cf7a : 4901             [ 2] 	eor #KB_CAPSLK
cf7c : 852c             [ 3] 	sta kb_stat
cf7e : 28               [ 4] 	plp									; Get back synchronous pref
cf7f : b0df             [ 3] 	bcs gr_get_key_2					; And check again for sync
cf81 : 900b             [ 3] 	bcc gr_key_no_key					; Else no key
cf83 :                       gr_key_got_key
cf83 : 28               [ 4] 	plp
cf84 : 18               [ 2] 	clc									; Ensure C=0 for valid key
cf85 :                       gr_key_tidy_up
                             	; restore X,Y but don't lose A
cf85 : 8538             [ 3] 	sta tmp_d
cf87 : 68               [ 4] 	pla
cf88 : a8               [ 2] 	tay
cf89 : 68               [ 4] 	pla
cf8a : aa               [ 2] 	tax
cf8b : a538             [ 3] 	lda tmp_d
cf8d : 60               [ 6] 	rts
cf8e :                       gr_key_no_key
cf8e : 28               [ 4] 	plp
cf8f : 38               [ 2] 	sec									; Ensure C=1 for invalid key
cf90 : b0f3             [ 3] 	bcs gr_key_tidy_up					; Always branches
                             
                             ;****************************************
                             ;* gr_put_byte
                             ;* Put a byte out
                             ;* Input : A = Byte to put
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
cf92 :                       gr_put_byte
                             	_pushAXY
                             
AS65 Assembler for R6502 [1.42].                                     Page  111
-------------------------------- bank\bank0.s --------------------------------

cf9b : 20a4cf           [ 6] 	jsr gr_put_byte_low
                             	_pullAXY
                             
cfa3 :                       gr_no_special
cfa3 : 60               [ 6] 	rts
                             
cfa4 :                       gr_put_byte_low
cfa4 : c97f             [ 2] 	cmp #UTF_DEL			; Del key
cfa6 : f004             [ 3] 	beq gr_process_special
cfa8 : c920             [ 2] 	cmp #32					; Special char?
cfaa : b01b             [ 3] 	bcs gr_printable		; >=32 == carry clear
cfac :                       gr_process_special
                             	; Else find special behaviour to do
cfac : a2ff             [ 2] 	ldx #-1
cfae : 8532             [ 3] 	sta tmp_alo
cfb0 :                       gr_special_loop
cfb0 : e8               [ 2] 	inx
cfb1 : bdcdcf           [ 4] 	lda gr_special_ch,x
cfb4 : f0ed             [ 3] 	beq gr_no_special		; Somewhere with an rts!
cfb6 : c532             [ 3] 	cmp tmp_alo
cfb8 : d0f6             [ 3] 	bne gr_special_loop
cfba : bdd6cf           [ 4] 	lda gr_special_fn_lo,x
cfbd : 8532             [ 3] 	sta tmp_alo
cfbf : bddecf           [ 4] 	lda gr_special_fn_hi,x
cfc2 : 8533             [ 3] 	sta tmp_ahi
cfc4 : 6c3200           [ 6] 	jmp (tmp_alo)
                             
                             	;	Normal caracter processing here.
cfc7 :                       gr_printable
                             	; Place in current position and move right
cfc7 : 205ece           [ 6] 	jsr gr_put
cfca : 4c17cf           [ 3] 	jmp gr_cur_right
                             
cfcd :                       gr_special_ch
cfcd : 0d                    	db UTF_CR
cfce : 7f                    	db UTF_DEL
cfcf : 08                    	db CRSR_LEFT
cfd0 : 09                    	db CRSR_RIGHT
cfd1 : 0b                    	db CRSR_UP
cfd2 : 0a                    	db CRSR_DOWN
cfd3 : 0c                    	db UTF_FF
cfd4 : 07                    	db UTF_BEL
cfd5 : 00                    	db 0
                             
cfd6 :                       gr_special_fn_lo
cfd6 : ff                    	db lo(gr_new_ln)
cfd7 : 54                    	db lo(gr_del)
cfd8 : 29                    	db lo(gr_cur_left)
cfd9 : 17                    	db lo(gr_cur_right)
cfda : 3d                    	db lo(gr_cur_up)
cfdb : 47                    	db lo(gr_cur_down)
cfdc : 02                    	db lo(gr_cls)
cfdd : 99                    	db lo(init_snd)
                             
cfde :                       gr_special_fn_hi
cfde : ce                    	db hi(gr_new_ln)
cfdf : cf                    	db hi(gr_del)
cfe0 : cf                    	db hi(gr_cur_left)
cfe1 : cf                    	db hi(gr_cur_right)
cfe2 : cf                    	db hi(gr_cur_up)
cfe3 : cf                    	db hi(gr_cur_down)
cfe4 : ce                    	db hi(gr_cls)
AS65 Assembler for R6502 [1.42].                                     Page  112
-------------------------------- bank\bank0.s --------------------------------

cfe5 : d4                    	db hi(init_snd)
                             
                             ; Special command to print to the screen
                             ; Y,A=Message, zero terminated
cfe6 :                       gr_print_msg
cfe6 : 8449             [ 3] 	sty num_tmp
cfe8 : 854a             [ 3] 	sta num_tmp+1
cfea : a000             [ 2] 	ldy #0
cfec :                       gr_print_msg_loop
cfec : b149             [ 5] 	lda (num_tmp),y
cfee : f006             [ 3] 	beq gr_print_msg_done
cff0 : 2092cf           [ 6] 	jsr gr_put_byte
cff3 : c8               [ 2] 	iny
cff4 : d0f6             [ 3] 	bne gr_print_msg_loop
cff6 :                       gr_print_msg_done
cff6 : a54a             [ 3] 	lda num_tmp+1
cff8 : a449             [ 3] 	ldy num_tmp
cffa : 60               [ 6] 	rts
                             
                             ;******* HIRES STUFF *****
                             
                             
                             ;****************************************
                             ;* gr_hcode
                             ;* Plot bytecode at hires X,Y coordinates with co
                             ;* Input : X,Y = coord, A = Char code
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
cffb :                       gr_hcode
cffb : 48               [ 3] 	pha
                             	; Set up destination position tmpalo,hi and Y
cffc : 20b7d0           [ 6] 	jsr gr_point_setup
cfff : a208             [ 2] 	ldx #8				; Always do 8 rows like a character
d001 :                       gr_hcode_loop
d001 : 68               [ 4] 	pla 				; Get the code to place
d002 : 48               [ 3] 	pha					; Need to save it back
d003 : 9126             [ 5] 	sta (gr_scrngeom+gr_geom_tmp),y		; Store it in d
d005 : 18               [ 2] 	clc
d006 : a526             [ 3] 	lda gr_scrngeom+gr_geom_tmp			; Update base poin
d008 : 6519             [ 3] 	adc gr_scrngeom+gr_text_w
d00a : 8526             [ 3] 	sta gr_scrngeom+gr_geom_tmp
                             	_bcc 2
                             
d00e : e627             [ 5] 	inc gr_scrngeom+gr_geom_tmp+1
d010 : ca               [ 2] 	dex
d011 : d0ee             [ 3] 	bne gr_hcode_loop
d013 : 68               [ 4] 	pla
d014 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* gr_hchar
                             ;* Plot character to hires X,Y coordinates with c
                             ;* Input : X,Y = coord, A = Char code
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
d015 :                       gr_hchar
                             	; If char code < 32 then plot attribute
d015 : c91f             [ 2] 	cmp #31
d017 : 90e2             [ 4] 	bcc gr_hcode
                             	; Multiply char code by 8
AS65 Assembler for R6502 [1.42].                                     Page  113
-------------------------------- bank\bank0.s --------------------------------

                             	; and add to char font base
                             	; tmp_clo contains base address
d019 : 0a               [ 2] 	asl a
d01a : 2637             [ 5] 	rol tmp_chi
d01c : 0a               [ 2] 	asl a
d01d : 2637             [ 5] 	rol tmp_chi
d01f : 0a               [ 2] 	asl a
d020 : 2637             [ 5] 	rol tmp_chi
d022 : 18               [ 2] 	clc
d023 : 6514             [ 3] 	adc gr_scrngeom+gr_char
d025 : 8536             [ 3] 	sta tmp_clo
d027 : a537             [ 3] 	lda tmp_chi
d029 : 2907             [ 2] 	and #7
d02b : 6515             [ 3] 	adc gr_scrngeom+gr_char+1
d02d : 8537             [ 3] 	sta tmp_chi
                             
                             	; Set up destination position
d02f : 20b7d0           [ 6] 	jsr gr_point_setup
                             	; tmp needs to contains address including column
d032 : 18               [ 2] 	clc
d033 : 98               [ 2] 	tya
d034 : 6526             [ 3] 	adc gr_scrngeom+gr_geom_tmp
d036 : 8526             [ 3] 	sta gr_scrngeom+gr_geom_tmp
                             	_bcc 2
                             
d03a : e627             [ 5] 	inc gr_scrngeom+gr_geom_tmp+1
                             
d03c : a528             [ 3] 	lda gr_scrngeom+gr_geom_tmp2		; Get the mask
d03e : a207             [ 2] 	ldx #7
d040 :                       gr_hchar_mask							; Calculate how many shifts t
d040 : ca               [ 2] 	dex
d041 : 4a               [ 2] 	lsr a
d042 : d0fc             [ 3] 	bne gr_hchar_mask
d044 : 8628             [ 3] 	stx gr_scrngeom+gr_geom_tmp2		; number between 1
                             
                             	; copy font bytes and shift the required number 
                             	; go from bottom to top as data gets stored on t
d046 : a007             [ 2] 	ldy #7
d048 :                       gr_hchar_getfont
d048 : b136             [ 5] 	lda (tmp_clo),y
d04a : 853d             [ 3] 	sta ztmp_24
d04c : a900             [ 2] 	lda #0
d04e : 853e             [ 3] 	sta ztmp_24+1
                             
                             	; shift the right number of times
d050 : a628             [ 3] 	ldx gr_scrngeom+gr_geom_tmp2
d052 :                       gr_hchar_rot1bit
d052 : ca               [ 2] 	dex
d053 : f00d             [ 3] 	beq gr_hchar_rot1bit_nx
d055 : 463d             [ 5] 	lsr ztmp_24					; Rotate left hand side
d057 : a53e             [ 3] 	lda ztmp_24+1				; Rotate right hand side
d059 : 9002             [ 3] 	bcc gr_hchar_rot1bit_bcc
d05b : 0940             [ 2] 	ora #0x40					; account for 6 bits per byte
d05d :                       gr_hchar_rot1bit_bcc
d05d : 4a               [ 2] 	lsr a
d05e : 853e             [ 3] 	sta ztmp_24+1
d060 : 10f0             [ 3] 	bpl gr_hchar_rot1bit		; Always as lsr sets N=0
d062 :                       gr_hchar_rot1bit_nx
d062 : a53e             [ 3] 	lda ztmp_24+1				; Get RHS
d064 : 48               [ 3] 	pha							; Push RHS on to stack
d065 : a53d             [ 3] 	lda ztmp_24					; Get LHS
d067 : 48               [ 3] 	pha							; Push that too - LH gets pulled first
AS65 Assembler for R6502 [1.42].                                     Page  114
-------------------------------- bank\bank0.s --------------------------------

d068 : 88               [ 2] 	dey							; Bottom to to lines
d069 : 10dd             [ 3] 	bpl gr_hchar_getfont
                             
                             	; Now copy shift source to destination, accounti
d06b : a208             [ 2] 	ldx #8
d06d :                       gr_hchar_copyline
d06d : a41f             [ 3] 	ldy gr_scrngeom+gr_pixmode	; Mode determines how
d06f : f022             [ 3] 	beq gr_hchar_copyline_erase
d071 : 3010             [ 3] 	bmi gr_hchar_copyline_eor
                             
                             	; Mode = ~Z : OR
d073 : a000             [ 2] 	ldy #0						; Get lh side source
d075 : 68               [ 4] 	pla
d076 : 1126             [ 5] 	ora (gr_scrngeom+gr_geom_tmp),y
d078 : 9126             [ 5] 	sta (gr_scrngeom+gr_geom_tmp),y
d07a : c8               [ 2] 	iny							; Get rh side source
d07b : 68               [ 4] 	pla
d07c : 1126             [ 5] 	ora (gr_scrngeom+gr_geom_tmp),y
d07e : 9126             [ 5] 	sta (gr_scrngeom+gr_geom_tmp),y
d080 : 4ca8d0           [ 3] 	jmp gr_hchar_copyline_nx
d083 :                       gr_hchar_copyline_eor
                             	; Mode = N : EOR
d083 : a000             [ 2] 	ldy #0						; Get lh side source
d085 : 68               [ 4] 	pla
d086 : 5126             [ 5] 	eor (gr_scrngeom+gr_geom_tmp),y
d088 : 9126             [ 5] 	sta (gr_scrngeom+gr_geom_tmp),y
d08a : c8               [ 2] 	iny							; Get rh side source
d08b : 68               [ 4] 	pla
d08c : 5126             [ 5] 	eor (gr_scrngeom+gr_geom_tmp),y
d08e : 9126             [ 5] 	sta (gr_scrngeom+gr_geom_tmp),y
d090 : 4ca8d0           [ 3] 	jmp gr_hchar_copyline_nx
d093 :                       gr_hchar_copyline_erase
                             	; Mode = Z : erase
d093 : a000             [ 2] 	ldy #0						; Get lh side source
d095 : 68               [ 4] 	pla
d096 : 853d             [ 3] 	sta ztmp_24
d098 : 1126             [ 5] 	ora (gr_scrngeom+gr_geom_tmp),y
d09a : 453d             [ 3] 	eor ztmp_24
d09c : 9126             [ 5] 	sta (gr_scrngeom+gr_geom_tmp),y
d09e : c8               [ 2] 	iny							; Get rh side source
d09f : 68               [ 4] 	pla
d0a0 : 853d             [ 3] 	sta ztmp_24
d0a2 : 1126             [ 5] 	ora (gr_scrngeom+gr_geom_tmp),y
d0a4 : 453d             [ 3] 	eor ztmp_24
d0a6 : 9126             [ 5] 	sta (gr_scrngeom+gr_geom_tmp),y
d0a8 :                       gr_hchar_copyline_nx
d0a8 : 18               [ 2] 	clc							; Next address
d0a9 : a526             [ 3] 	lda gr_scrngeom+gr_geom_tmp
d0ab : 6928             [ 2] 	adc #40
d0ad : 8526             [ 3] 	sta gr_scrngeom+gr_geom_tmp
                             	_bcc 2
                             
d0b1 : e627             [ 5] 	inc gr_scrngeom+gr_geom_tmp+1
d0b3 : ca               [ 2] 	dex
d0b4 : d0b7             [ 3] 	bne gr_hchar_copyline
d0b6 : 60               [ 6] 	rts							; Done after 8 lines
                             
                             ;****************************************
                             ;* gr_point_setup
                             ;* Calculate information about a pixel location
                             ;* Input : X,Y = coord
                             ;* Output : None
AS65 Assembler for R6502 [1.42].                                     Page  115
-------------------------------- bank\bank0.s --------------------------------

                             ;* Regs affected :
                             ;* gr_geom_tmp contains the row base address
                             ;* gr_geom_tmp2 contains the mask
                             ;* A contains the mask
                             ;* X untouched
                             ;* Y contains column offet from base address
                             ;****************************************
d0b7 :                       gr_point_setup
                             	; Get row address
d0b7 : b9009c           [ 4] 	lda hires_row_low,y
d0ba : 8526             [ 3] 	sta gr_scrngeom+gr_geom_tmp
d0bc : b9c89c           [ 4] 	lda hires_row_hi,y
d0bf : 8527             [ 3] 	sta gr_scrngeom+gr_geom_tmp+1
                             	; Get the pixel mask
d0c1 : bd809e           [ 4] 	lda hires_mask,x
d0c4 : 8528             [ 3] 	sta gr_scrngeom+gr_geom_tmp2
                             	; Get the column offset to Y
d0c6 : bc909d           [ 4] 	ldy hires_col,x
d0c9 : 60               [ 6] 	rts
                             
d0ca :                       gr_set_hires_cur
d0ca : 8621             [ 3] 	stx gr_scrngeom+gr_hires_x
d0cc : 8422             [ 3] 	sty gr_scrngeom+gr_hires_y
d0ce : 60               [ 6] 	rts
                             
                             ;* Get pixel value at X,Y in to A
d0cf :                       gr_pixel
d0cf : 20b7d0           [ 6] 	jsr gr_point_setup				; Set up mask and addresse
d0d2 : 3126             [ 5] 	and (gr_scrngeom+gr_geom_tmp),y	; And with scree
d0d4 : 60               [ 6] 	rts
                             
                             ;* Plot a point based on X,Y coordinates
d0d5 :                       gr_point
d0d5 : e0f0             [ 2] 	cpx #240						; Check bounds
d0d7 : b02c             [ 4] 	bcs gr_point_done
d0d9 : c0c8             [ 2] 	cpy #200
d0db : b028             [ 4] 	bcs gr_point_done
                             
                             	;** FOR SPEED COPYING THE POINT SETUP ROUTINE **
                             	;** OBVS MAKE SURE THIS REFLECTS ANY POINT SETUP
                             	; Get row address
d0dd : b9009c           [ 4] 	lda hires_row_low,y
d0e0 : 8526             [ 3] 	sta gr_scrngeom+gr_geom_tmp
d0e2 : b9c89c           [ 4] 	lda hires_row_hi,y
d0e5 : 8527             [ 3] 	sta gr_scrngeom+gr_geom_tmp+1
                             	; Get the pixel mask
d0e7 : bd809e           [ 4] 	lda hires_mask,x
d0ea : 8528             [ 3] 	sta gr_scrngeom+gr_geom_tmp2
                             	; Get the column offset to Y
d0ec : bc909d           [ 4] 	ldy hires_col,x
                             
                             ;* Plot a point based on gr_geom_tmp base, Y offs
d0ef : b126             [ 5] 	lda (gr_scrngeom+gr_geom_tmp),y	; Get screen byt
d0f1 : c920             [ 2] 	cmp #32							; If less than 32 (i.e. an attribu
d0f3 : b002             [ 3] 	bcs gr_point_skip_attr
d0f5 : a940             [ 2] 	lda #64							; then make it a normal cell (else
d0f7 :                       gr_point_skip_attr
d0f7 : a61f             [ 3] 	ldx gr_scrngeom+gr_pixmode		; Look at the mode
d0f9 : 3006             [ 4] 	bmi gr_point_eor				; If eor mode then go and wr
d0fb : 0528             [ 3] 	ora gr_scrngeom+gr_geom_tmp2	; Or with MASK
d0fd : e000             [ 2] 	cpx #0							; But if zero mode then eor
d0ff : d002             [ 4] 	bne gr_point_write
AS65 Assembler for R6502 [1.42].                                     Page  116
-------------------------------- bank\bank0.s --------------------------------

d101 :                       gr_point_eor
d101 : 4528             [ 3] 	eor gr_scrngeom+gr_geom_tmp2	; EOR with MASK
d103 :                       gr_point_write
d103 : 9126             [ 5] 	sta (gr_scrngeom+gr_geom_tmp),y
d105 :                       gr_point_done
d105 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* gr_circle
                             ;* Draw a circle centre x0,y0, radius r
                             ;* Input :	num_a   = x0
                             ;*			num_a+1 = y0
                             ;*			num_a+2 = r
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
d106 :                       gr_circle
                             ; Local definitions of temp space to make
                             ; the rest of the code easier to read
003d =                       grc_x0 	= (num_a)
003e =                       grc_y0 	= (num_a+1)
003f =                       grc_r 	= (num_a+2)
0040 =                       grc_x 	= (num_a+3)
0042 =                       grc_y	= (num_b+1)
0043 =                       grc_d	= (num_b+2)
                             
                             	;x = radius
d106 : a53f             [ 3] 	lda grc_r
d108 : 8540             [ 3] 	sta grc_x
                             	;decision = 1 - x
d10a : a900             [ 2] 	lda #0
                             	;y = 0
d10c : 8542             [ 3] 	sta grc_y
d10e : 18               [ 2] 	clc			; A=0 so CLC subtracts 1 :-)
d10f : e540             [ 3] 	sbc grc_x
d111 : 8543             [ 3] 	sta grc_d
d113 :                       gr_circle_plot
                             	;while(x >= y)
d113 : a540             [ 3] 	lda grc_x
d115 : c542             [ 3] 	cmp grc_y
d117 : 902a             [ 3] 	bcc gr_circle_done
                             	;plot 8 points on current x,y
d119 : 2044d1           [ 6] 	jsr gr_circle_points
                             	;y++
d11c : e642             [ 5] 	inc grc_y
                             	;if d<=0
d11e : a543             [ 3] 	lda grc_d
d120 : f014             [ 3] 	beq gr_circle_d_lte0
d122 : 3012             [ 3] 	bmi gr_circle_d_lte0
                             	;else
                             	;x--
d124 : c640             [ 5] 	dec grc_x
                             	;decision += 2 * (y - x) + 1
d126 : a542             [ 3] 	lda grc_y
d128 : 38               [ 2] 	sec
d129 : e540             [ 3] 	sbc grc_x
d12b : 0a               [ 2] 	asl a
d12c : 18               [ 2] 	clc
d12d : 6901             [ 2] 	adc #1
d12f : 6543             [ 3] 	adc grc_d
d131 : 8543             [ 3] 	sta grc_d
d133 : 4c13d1           [ 3] 	jmp gr_circle_plot
AS65 Assembler for R6502 [1.42].                                     Page  117
-------------------------------- bank\bank0.s --------------------------------

d136 :                       gr_circle_d_lte0
                             	;decision += 2 * y + 1
d136 : a542             [ 3] 	lda grc_y
d138 : 0a               [ 2] 	asl a
d139 : 18               [ 2] 	clc
d13a : 6901             [ 2] 	adc #1
d13c : 6543             [ 3] 	adc grc_d
d13e : 8543             [ 3] 	sta grc_d
d140 : 4c13d1           [ 3] 	jmp gr_circle_plot
d143 :                       gr_circle_done
d143 : 60               [ 6] 	rts
d144 :                       gr_circle_points
                             ; Local names of temp storage
                             ; to make code easier to read
                             	;DrawPixel( x + x0,  yh + y0);
d144 : a540             [ 3] 	lda grc_x
d146 : 18               [ 2] 	clc
d147 : 653d             [ 3] 	adc grc_x0
d149 : aa               [ 2] 	tax
d14a : a542             [ 3] 	lda grc_y
d14c : 18               [ 2] 	clc
d14d : 653e             [ 3] 	adc grc_y0
d14f : a8               [ 2] 	tay
d150 : 20d5d0           [ 6] 	jsr gr_point
                             	;DrawPixel( y + x0,  xh + y0);
d153 : a542             [ 3] 	lda grc_y
d155 : 18               [ 2] 	clc
d156 : 653d             [ 3] 	adc grc_x0
d158 : aa               [ 2] 	tax
d159 : a540             [ 3] 	lda grc_x
d15b : 18               [ 2] 	clc
d15c : 653e             [ 3] 	adc grc_y0
d15e : a8               [ 2] 	tay
d15f : 20d5d0           [ 6] 	jsr gr_point
                             	;DrawPixel(-x + x0,  yh + y0);
d162 : a53d             [ 3] 	lda grc_x0
d164 : 38               [ 2] 	sec
d165 : e540             [ 3] 	sbc grc_x
d167 : aa               [ 2] 	tax
d168 : a542             [ 3] 	lda grc_y
d16a : 18               [ 2] 	clc
d16b : 653e             [ 3] 	adc grc_y0
d16d : a8               [ 2] 	tay
d16e : 20d5d0           [ 6] 	jsr gr_point
                             	;DrawPixel(-y + x0,  xh + y0);
d171 : a53d             [ 3] 	lda grc_x0
d173 : 38               [ 2] 	sec
d174 : e542             [ 3] 	sbc grc_y
d176 : aa               [ 2] 	tax
d177 : a540             [ 3] 	lda grc_x
d179 : 18               [ 2] 	clc
d17a : 653e             [ 3] 	adc grc_y0
d17c : a8               [ 2] 	tay
d17d : 20d5d0           [ 6] 	jsr gr_point
                             	;DrawPixel(-x + x0, -yh + y0);
d180 : a53d             [ 3] 	lda grc_x0
d182 : 38               [ 2] 	sec
d183 : e540             [ 3] 	sbc grc_x
d185 : aa               [ 2] 	tax
d186 : a53e             [ 3] 	lda grc_y0
d188 : 38               [ 2] 	sec
d189 : e542             [ 3] 	sbc grc_y
AS65 Assembler for R6502 [1.42].                                     Page  118
-------------------------------- bank\bank0.s --------------------------------

d18b : a8               [ 2] 	tay
d18c : 20d5d0           [ 6] 	jsr gr_point
                             	;DrawPixel(-y + x0, -xh + y0);
d18f : a53d             [ 3] 	lda grc_x0
d191 : 38               [ 2] 	sec
d192 : e542             [ 3] 	sbc grc_y
d194 : aa               [ 2] 	tax
d195 : a53e             [ 3] 	lda grc_y0
d197 : 38               [ 2] 	sec
d198 : e540             [ 3] 	sbc grc_x
d19a : a8               [ 2] 	tay
d19b : 20d5d0           [ 6] 	jsr gr_point
                             	;DrawPixel( x + x0, -yh + y0);
d19e : a540             [ 3] 	lda grc_x
d1a0 : 18               [ 2] 	clc
d1a1 : 653d             [ 3] 	adc grc_x0
d1a3 : aa               [ 2] 	tax
d1a4 : a53e             [ 3] 	lda grc_y0
d1a6 : 38               [ 2] 	sec
d1a7 : e542             [ 3] 	sbc grc_y
d1a9 : a8               [ 2] 	tay
d1aa : 20d5d0           [ 6] 	jsr gr_point
                             	;DrawPixel( y + x0, -xh + y0);
d1ad : a542             [ 3] 	lda grc_y
d1af : 18               [ 2] 	clc
d1b0 : 653d             [ 3] 	adc grc_x0
d1b2 : aa               [ 2] 	tax
d1b3 : a53e             [ 3] 	lda grc_y0
d1b5 : 38               [ 2] 	sec
d1b6 : e540             [ 3] 	sbc grc_x
d1b8 : a8               [ 2] 	tay
d1b9 : 4cd5d0           [ 3] 	jmp gr_point
                             
                             
                             
                             ;****************************************
                             ;* gr_line
                             ;* Draw a line from x0,y0 -> x1,y1
                             ;* Input :	num_a   = x0
                             ;*			num_a+1 = y0
                             ;*			num_a+2 = x1
                             ;*			num_a+3 = y1
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
d1bc :                       gr_line
                             
                             ; Local definitions of temp space to make
                             ; the rest of the code easier to read
003d =                       grl_x0 	= (num_a)
003e =                       grl_y0 	= (num_a+1)
003f =                       grl_x1 	= (num_a+2)
0040 =                       grl_y1 	= (num_a+3)
0041 =                       grl_dx	= (ztmp_24+4)
0042 =                       grl_dy	= (ztmp_24+5)
0043 =                       grl_xyyx= (ztmp_24+6)
0044 =                       grl_2dx	= (ztmp_24+7)			; Word
0046 =                       grl_2dy	= (ztmp_24+9)			; Word
0048 =                       grl_2dxy= (ztmp_24+11)			; Word
004a =                       grl_sinx= (ztmp_24+13)
004b =                       grl_p	= (ztmp_24+14)			; Word
004d =                       grl_siny= (ztmp_24+16)
AS65 Assembler for R6502 [1.42].                                     Page  119
-------------------------------- bank\bank0.s --------------------------------

                             
                             	; Start from hires cursor position
                             	; New cursor pos = end of line pos
d1bc : a521             [ 3] 	lda gr_scrngeom+gr_hires_x
d1be : 853d             [ 3] 	sta grl_x0
d1c0 : a522             [ 3] 	lda gr_scrngeom+gr_hires_y
d1c2 : 853e             [ 3] 	sta grl_y0
d1c4 : a63f             [ 3] 	ldx grl_x1
d1c6 : a440             [ 3] 	ldy grl_y1
d1c8 : 20cad0           [ 6] 	jsr gr_set_hires_cur
                             	
d1cb : a900             [ 2] 	lda #0
d1cd : 8543             [ 3] 	sta grl_xyyx				; Assume normal xy axis
                             
                             	; check if abs(dy)>abs(dx) if so need to swap xy
                             	; num_b = abs(x), num_b+1 = abs(dy)
d1cf : 38               [ 2] 	sec
d1d0 : a53f             [ 3] 	lda grl_x1
d1d2 : e53d             [ 3] 	sbc grl_x0
d1d4 : b004             [ 3] 	bcs gr_line_skip_dx_neg
d1d6 : 49ff             [ 2] 	eor #0xff
d1d8 : 6901             [ 2] 	adc #1
d1da :                       gr_line_skip_dx_neg
d1da : 8541             [ 3] 	sta grl_dx
d1dc : 38               [ 2] 	sec
d1dd : a540             [ 3] 	lda grl_y1
d1df : e53e             [ 3] 	sbc grl_y0
d1e1 : b004             [ 3] 	bcs gr_line_skip_dy_neg
d1e3 : 49ff             [ 2] 	eor #0xff
d1e5 : 6901             [ 2] 	adc #1
d1e7 :                       gr_line_skip_dy_neg
d1e7 : 8542             [ 3] 	sta grl_dy
d1e9 : c541             [ 3] 	cmp grl_dx
d1eb : 901a             [ 4] 	bcc gr_line_skip_xy_swap
                             	; swap xy axes and also dx and dy
d1ed : a53d             [ 3] 	lda grl_x0					; swap x0 and y0
d1ef : a63e             [ 3] 	ldx grl_y0
d1f1 : 853e             [ 3] 	sta grl_y0
d1f3 : 863d             [ 3] 	stx grl_x0
d1f5 : a53f             [ 3] 	lda grl_x1					; swap x1 and y1
d1f7 : a640             [ 3] 	ldx grl_y1
d1f9 : 8540             [ 3] 	sta grl_y1
d1fb : 863f             [ 3] 	stx grl_x1
d1fd : a541             [ 3] 	lda grl_dx					; swap dy and dx
d1ff : a642             [ 3] 	ldx grl_dy
d201 : 8542             [ 3] 	sta grl_dy
d203 : 8641             [ 3] 	stx grl_dx
d205 : e643             [ 5] 	inc grl_xyyx				; set flag to Not Z to know abou
                             
d207 :                       gr_line_skip_xy_swap
                             	; assume going from left to right and top to bot
d207 : a901             [ 2] 	lda #1
d209 : a0ff             [ 2] 	ldy #255					; -1
d20b : 854a             [ 3] 	sta grl_sinx
d20d : 854d             [ 3] 	sta grl_siny
                             
                             	; check going right to left
d20f : a53d             [ 3] 	lda grl_x0
d211 : c53f             [ 3] 	cmp grl_x1
d213 : 9002             [ 3] 	bcc gr_line_skip_left
d215 : 844a             [ 3] 	sty grl_sinx				; make -1
d217 :                       gr_line_skip_left
AS65 Assembler for R6502 [1.42].                                     Page  120
-------------------------------- bank\bank0.s --------------------------------

                             	; check going bottom to top
d217 : a53e             [ 3] 	lda grl_y0
d219 : c540             [ 3] 	cmp grl_y1
d21b : 9002             [ 3] 	bcc gr_line_skip_y_up
d21d : 844d             [ 3] 	sty grl_siny				; make -1
                             
d21f :                       gr_line_skip_y_up
d21f : a541             [ 3] 	lda grl_dx
d221 : 0a               [ 2] 	asl a
d222 : 8544             [ 3] 	sta grl_2dx					; 2*dx (word)
d224 : a900             [ 2] 	lda #0
d226 : 8545             [ 3] 	sta grl_2dx+1
d228 : 2645             [ 5] 	rol grl_2dx+1
                             
d22a : a542             [ 3] 	lda grl_dy
d22c : 0a               [ 2] 	asl a
d22d : 8546             [ 3] 	sta grl_2dy					; 2*dy (word)
d22f : a900             [ 2] 	lda #0
d231 : 8547             [ 3] 	sta grl_2dy+1
d233 : 2647             [ 5] 	rol grl_2dy+1
                             
                             ;    p=2*dy-dx;					; p (word)
d235 : 38               [ 2] 	sec
d236 : a546             [ 3] 	lda grl_2dy
d238 : e541             [ 3] 	sbc grl_dx
d23a : 854b             [ 3] 	sta grl_p
d23c : a547             [ 3] 	lda grl_2dy+1
d23e : e900             [ 2] 	sbc #0
d240 : 854c             [ 3] 	sta grl_p+1
                             
                             ;   2*(dy-dx)					; num_tmp+2 = 2*(dy-dx)
d242 : 38               [ 2] 	sec
d243 : a546             [ 3] 	lda grl_2dy
d245 : e544             [ 3] 	sbc grl_2dx
d247 : 8548             [ 3] 	sta grl_2dxy
d249 : a547             [ 3] 	lda grl_2dy+1
d24b : e545             [ 3] 	sbc grl_2dx+1
d24d : 8549             [ 3] 	sta grl_2dxy+1
                             
d24f :                       gr_line_pixel
d24f : a63d             [ 3] 	ldx grl_x0
d251 : a43e             [ 3] 	ldy grl_y0
d253 : a543             [ 3] 	lda grl_xyyx				; Swapped?
d255 : f004             [ 3] 	beq gr_line_yx_skip
d257 : a63e             [ 3] 	ldx grl_y0
d259 : a43d             [ 3] 	ldy grl_x0
d25b :                       gr_line_yx_skip
d25b : 20d5d0           [ 6] 	jsr gr_point				; Plot point x,y
                             
d25e : a53d             [ 3] 	lda grl_x0					; Check if done
d260 : c53f             [ 3] 	cmp grl_x1
d262 : f032             [ 3] 	beq gr_line_done
                             
                             	; Increment x always
d264 : 18               [ 2] 	clc
d265 : a53d             [ 3] 	lda grl_x0
d267 : 654a             [ 3] 	adc grl_sinx
d269 : 853d             [ 3] 	sta grl_x0
                             
                             	; check sign of p
d26b : a54c             [ 3] 	lda grl_p+1
d26d : 3017             [ 3] 	bmi gr_line_neg_p
AS65 Assembler for R6502 [1.42].                                     Page  121
-------------------------------- bank\bank0.s --------------------------------

                             
                             	; if p >=0
                             
                             	; y=y+increment
d26f : 18               [ 2] 	clc
d270 : a53e             [ 3] 	lda grl_y0
d272 : 654d             [ 3] 	adc grl_siny
d274 : 853e             [ 3] 	sta grl_y0
                             
                             	; p=p+2*dy-2*dx
                             	_addZPWord grl_p,grl_2dxy
                             
d283 : 4c4fd2           [ 3] 	jmp gr_line_pixel
                             
d286 :                       gr_line_neg_p
                             	; if p < 0
                             	; p=p+2*dy
                             	_addZPWord grl_p,grl_2dy
                             
                             
d293 : 4c4fd2           [ 3] 	jmp gr_line_pixel
d296 :                       gr_line_done
d296 : 60               [ 6] 	rts
                             
                             
                             ; Line drawing pseudo code
                             ;    while(x<x1)
                             ;    {
                             ;        putpixel(x,y);
                             ;        if(p>=0)
                             ;        {
                             ;            y=y+1;
                             ;            p=p+2*dy-2*dx;
                             ;        }
                             ;        else
                             ;        {
                             ;            p=p+2*dy;
                             ;        }
                             ;        x=x+1;
                             ;    }
                             
                             
                             ;* These tables are to speed up calculating the
                             ;* offset for plot commands
d297 :                       gr_offset_40lo
d297 : 00285078a0            	db lo(000*40), lo(001*40), lo(002*40), lo(003*40
d29c : c8f0184068            	db lo(005*40), lo(006*40), lo(007*40), lo(008*40
d2a1 : 90b8e00830            	db lo(010*40), lo(011*40), lo(012*40), lo(013*40
d2a6 : 5880a8d0f8            	db lo(015*40), lo(016*40), lo(017*40), lo(018*40
d2ab : 20487098c0            	db lo(020*40), lo(021*40), lo(022*40), lo(023*40
d2b0 : e81038                	db lo(025*40), lo(026*40), lo(027*40)
d2b3 :                       gr_offset_40hi
d2b3 : 0000000000            	db hi(000*40), hi(001*40), hi(002*40), hi(003*40
d2b8 : 0000010101            	db hi(005*40), hi(006*40), hi(007*40), hi(008*40
d2bd : 0101010202            	db hi(010*40), hi(011*40), hi(012*40), hi(013*40
d2c2 : 0202020202            	db hi(015*40), hi(016*40), hi(017*40), hi(018*40
d2c7 : 0303030303            	db hi(020*40), hi(021*40), hi(022*40), hi(023*40
d2cc : 030404                	db hi(025*40), hi(026*40), hi(027*40)
                             
                             
                             ;* Character based sprites for text mode only
d2cf :                       mod_sz_sprite_s
AS65 Assembler for R6502 [1.42].                                     Page  122
-------------------------------- bank\bank0.s --------------------------------

                             ;* Initialisation
d2cf :                       gr_spr_init
d2cf : a21f             [ 2] 	ldx #31							; Start at last sprite
d2d1 :                       gr_spr_init_loop
d2d1 : a9ff             [ 2] 	lda #-1							; Put -1 in the x coords
d2d3 : 9d00b4           [ 5] 	sta spr_curX,x
d2d6 : 9d20b4           [ 5] 	sta spr_newX,x
d2d9 : ca               [ 2] 	dex								; Next sprite
d2da : 10f5             [ 3] 	bpl gr_spr_init_loop			; Until all 32 sprites in
d2dc : 60               [ 6] 	rts
                             
                             
                             ;* Erase all active sprites
d2dd :                       gr_spr_erase
                             	; First restore background from sprites
                             	; that are active and new pos is different from 
d2dd : a21f             [ 2] 	ldx #31							; Start at last sprite
d2df :                       gr_spr_erase_loop
d2df : bd00b4           [ 4] 	lda spr_curX,x					; Is sprite active?
d2e2 : 3007             [ 3] 	bmi gr_spr_erase_next
d2e4 : a8               [ 2] 	tay								; x pos in to Y
d2e5 :                       gr_spr_erase_do
d2e5 : bda0b4           [ 4] 	lda spr_bgnd,x					; Get the background
d2e8 : 2033d3           [ 6] 	jsr gr_spr_put					; And restore it
d2eb :                       gr_spr_erase_next
d2eb : ca               [ 2] 	dex
d2ec : 10f1             [ 3] 	bpl gr_spr_erase_loop
d2ee : 60               [ 6] 	rts
                             
                             ;* Get ready for new position
d2ef :                       gr_spr_new
d2ef : a21f             [ 2] 	ldx #31							; Start at last sprite
d2f1 :                       gr_spr_new_loop
d2f1 : bd60b4           [ 4] 	lda spr_newY,x					; Get new Y
d2f4 : 9d40b4           [ 5] 	sta spr_curY,x					; Update new->cur Y
d2f7 : a8               [ 2] 	tay								; Used for address calc.
d2f8 : bd20b4           [ 4] 	lda spr_newX,x					; Get new X
d2fb : 9d00b4           [ 5] 	sta spr_curX,x					; Update new->cur X
d2fe : 301d             [ 4] 	bmi gr_spr_new_next				; Is the new position act
d300 : 48               [ 3] 	pha 							; x pos saved for later
                             	; Calculate screen address
                             	; save as part of sprite data and in zp area
d301 : 18               [ 2] 	clc
d302 : b997d2           [ 4] 	lda gr_offset_40lo,y
d305 : 6980             [ 2] 	adc #lo(TEXTSCRN)
d307 : 8526             [ 3] 	sta gr_scrngeom+gr_geom_tmp
d309 : 9dc0b4           [ 5] 	sta spr_baseadrl,x
d30c : b9b3d2           [ 4] 	lda gr_offset_40hi,y
d30f : 69bb             [ 2] 	adc #hi(TEXTSCRN)
d311 : 8527             [ 3] 	sta gr_scrngeom+gr_geom_tmp+1
d313 : 9de0b4           [ 5] 	sta spr_baseadrh,x
d316 : 68               [ 4] 	pla								; Get x pos back in to Y reg
d317 : a8               [ 2] 	tay
d318 : b126             [ 5] 	lda (gr_scrngeom+gr_geom_tmp),y	; Get background
d31a : 9da0b4           [ 5] 	sta spr_bgnd,x					; And save this
d31d :                       gr_spr_new_next
d31d : ca               [ 2] 	dex
d31e : 10d1             [ 4] 	bpl gr_spr_new_loop
d320 : 60               [ 6] 	rts
                             
                             
                             ; Draw all active sprites
AS65 Assembler for R6502 [1.42].                                     Page  123
-------------------------------- bank\bank0.s --------------------------------

                             ; Active sprites are always drawn - 0 = highest p
d321 :                       gr_spr_draw
d321 : a21f             [ 2] 	ldx #31							; Start at last sprite
d323 :                       gr_spr_draw_loop
d323 : bd20b4           [ 4] 	lda spr_newX,x					; Is sprite active?
d326 : 3007             [ 3] 	bmi gr_spr_draw_next
d328 : a8               [ 2] 	tay								; X pos in to Y
d329 : bd80b4           [ 4] 	lda spr_chr,x					; Get the sprite char
d32c : 2033d3           [ 6] 	jsr gr_spr_put
d32f :                       gr_spr_draw_next
d32f : ca               [ 2] 	dex
d330 : 10f1             [ 3] 	bpl gr_spr_draw_loop
d332 : 60               [ 6] 	rts
                             
                             
                             ;* Common routine to put A to screen address
                             ;* Used for erase and draw of sprites
                             ;* X=index in to sprite table
                             ;* Y=X offset from screen pointer
d333 :                       gr_spr_put
d333 : 48               [ 3] 	pha
d334 : bdc0b4           [ 4] 	lda spr_baseadrl,x		; Get the screen pointer
d337 : 8526             [ 3] 	sta gr_scrngeom+gr_geom_tmp
d339 : bde0b4           [ 4] 	lda spr_baseadrh,x
d33c : 8527             [ 3] 	sta gr_scrngeom+gr_geom_tmp+1
d33e : 68               [ 4] 	pla								; Get back the char to
d33f : 9126             [ 5] 	sta (gr_scrngeom+gr_geom_tmp),y	; put on to scre
d341 : 60               [ 6] 	rts
                             
                             
                             ;* Update spr A with char X
d342 :                       gr_spr_char
d342 : a8               [ 2] 	tay
d343 : 8a               [ 2] 	txa
d344 : 9980b4           [ 5] 	sta spr_chr,y
d347 : 60               [ 6] 	rts
                             
                             ;* Locate what is at the location of sprite A, re
                             ;* C=1 if sprite it not active
d348 :                       gr_spr_hit
d348 : aa               [ 2] 	tax
d349 : bd00b4           [ 4] 	lda spr_curX,x
d34c : c980             [ 2] 	cmp #0x80						; If A>=0x80 then C=1
d34e : bda0b4           [ 4] 	lda spr_bgnd,x
d351 : 60               [ 6] 	rts
                             
                             ;* Update spr A with coords X,Y
d352 :                       gr_spr_pos
d352 : 8432             [ 3] 	sty tmp_alo
d354 : a8               [ 2] 	tay
d355 : 8a               [ 2] 	txa								; X coord still in X reg
d356 : 9920b4           [ 5] 	sta spr_newX,y
d359 : a532             [ 3] 	lda tmp_alo						; Y coord from temp
d35b : 9960b4           [ 5] 	sta spr_newY,y
d35e : 60               [ 6] 	rts
                             
                             ;* Update all sprite positions from df_tmpptra, d
d35f :                       gr_spr_multi_pos
d35f : a03e             [ 2] 	ldy #62
d361 : a21f             [ 2] 	ldx #31
d363 :                       gr_spr_multi_loop
d363 : b1a1             [ 5] 	lda (df_tmpptra),y
AS65 Assembler for R6502 [1.42].                                     Page  124
-------------------------------- bank\bank0.s --------------------------------

d365 : 9d20b4           [ 5] 	sta spr_newX,x
d368 : b1a3             [ 5] 	lda (df_tmpptrb),y
d36a : 9d60b4           [ 5] 	sta spr_newY,x
d36d : 88               [ 2] 	dey
d36e : 88               [ 2] 	dey
d36f : ca               [ 2] 	dex
d370 : 10f1             [ 3] 	bpl gr_spr_multi_loop
d372 : 60               [ 6] 	rts
                             
d373 :                       mod_sz_sprite_e
d373 :                       mod_sz_graph_e
                             
                             ; Old version of point calculator - in case I nee
                             ;	; Calculate destination address
                             ;	lda #0
                             ;	sta tmp_ahi
                             ;
                             ;	tya				; Row number in A
                             ;	; Multiply 8
                             ;	asl a
                             ;	rol tmp_ahi
                             ;	asl a
                             ;	rol tmp_ahi
                             ;	asl a
                             ;	rol tmp_ahi
                             ;	sta tmp_alo
                             ;
                             ;	; Multiply 32
                             ;	; Use partial result from m8
                             ;	lda tmp_ahi
                             ;	sta tmp_bhi
                             ;	lda tmp_alo
                             ;	; Just two more rotates to get m32
                             ;	asl a
                             ;	rol tmp_bhi
                             ;	asl a
                             ;	rol tmp_bhi
                             ;	sta tmp_blo
                             ;	; Add m8 and m32 for m40
                             ;	clc
                             ;	lda tmp_alo
                             ;	adc tmp_blo
                             ;	sta tmp_alo
                             ;	lda tmp_ahi
                             ;	adc tmp_bhi
                             ;	; Add high byte of screen address
                             ;	adc gr_scrngeom+vdp_scrn+1
                             ;	sta tmp_ahi
                             ;	; Dest offset in tmp_alo
                             ;
                             ;	; pixel x coord in to A
                             ;	; We dvide by 48 doing trial subtracts
                             ;	; This leaves Y with a number 0..5
                             ;	; And A has the remainder 0..47
                             ;	; Use these to look up byte column and mask
                             ;	; We don't do more than 5 trial subtracts
                             ;	; plus the table size is much smaller
                             ;	; Comprimise of space vs speed
                             ;	txa
                             ;	ldy #0				; Start at segment 0
                             ;	sec
                             ;gr_point_d48
AS65 Assembler for R6502 [1.42].                                     Page  125
-------------------------------- bank\bank0.s --------------------------------

                             ;	sbc #48
                             ;	iny
                             ;	bcs gr_point_d48				; Keep going until underflo
                             ;
                             ;	dey								; Adjust segment count
                             ;	adc #48							; Get remainder in A
                             ;	tax								; Put remainder in to X (0..47)
                             ;	lda gr_col_seg,y				; Get the start column of s
                             ;	clc
                             ;	adc gr_col_offset,x				; Add segment offset usi
                             ;	tay								; We have the byte column in Y
                             ;	sty tmp_bhi						; Save in tmp, also still in Y
                             ;	stx tmp_blo						; Save remainder 0..47
                             ;	rts
                             
                             ;gr_point_mask
                             ;	db 0x20,0x10,0x08,0x04,0x02,0x01
                             ;	db 0x20,0x10,0x08,0x04,0x02,0x01
                             ;	db 0x20,0x10,0x08,0x04,0x02,0x01
                             ;	db 0x20,0x10,0x08,0x04,0x02,0x01
                             ;	db 0x20,0x10,0x08,0x04,0x02,0x01
                             ;	db 0x20,0x10,0x08,0x04,0x02,0x01
                             ;	db 0x20,0x10,0x08,0x04,0x02,0x01
                             ;	db 0x20,0x10,0x08,0x04,0x02,0x01
                             ;gr_col_offset
                             ;	db 0,0,0,0,0,0
                             ;	db 1,1,1,1,1,1
                             ;	db 2,2,2,2,2,2
                             ;	db 3,3,3,3,3,3
                             ;	db 4,4,4,4,4,4
                             ;	db 5,5,5,5,5,5
                             ;	db 6,6,6,6,6,6
                             ;	db 7,7,7,7,7,7
                             ;gr_col_seg
                             ;	db 0,8,16,24,32
                             
                             	include "monitor/cmd.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  CMD.S
                             ;*	A really simple monitor that needs to be impro
                             ;*	optimised.  Only has these commands;
                             ;*		dxxxx			Dump memory location xxxx
                             ;*						Press enter for more else stop
                             ;*		sxxxx [yy]		Set memory location xxxx with hex
                             ;*						bytes, respond with next location
                             ;*		q				Quit
                             ;*	Now you see why this needs optimising!
                             ;*
                             ;************************************************
                             
0094 =                       cmd_lo					= df_currdat
0095 =                       cmd_hi					= (df_currdat+1)
                             
                             	; ROM code
                             	code  
AS65 Assembler for R6502 [1.42].                                     Page  126
-------------------------------- bank\bank0.s --------------------------------

                             
d373 :                       _mod_sz_cmd_s
                             
d373 :                       command_line
                             
d373 :                       cmd_ready
                             	_println_low msg_ready
                             
                             
d37a : 38               [ 2] 	sec							; Set carry flag = echo characters
d37b : 203cc4           [ 6] 	jsr io_read_line			; Get a command line
d37e : a000             [ 2] 	ldy #0
d380 : b139             [ 5] 	lda (buf_lo),y
d382 : c971             [ 2] 	cmp #'q'
d384 : d001             [ 3] 	bne cmd_check_cmd
d386 : 60               [ 6] 	rts
d387 :                       cmd_check_cmd
d387 : 2099d3           [ 6] 	jsr cmd_parse				; Find command and execute
d38a : b003             [ 3] 	bcs cmd_error				; Carry set = error condition
d38c : 4c73d3           [ 3] 	jmp cmd_ready
                             
d38f :                       cmd_error
                             	_println_low msg_errmsg
                             
d396 : 4c73d3           [ 3] 	jmp cmd_ready
                             
                             
                             ;****************************************
                             ;* cmd_parse
                             ;* Parse the command line in the io buffer
                             ;* Regs affected : 
                             ;****************************************
d399 :                       cmd_parse
d399 : c8               [ 2] 	iny						; Ready for next char
                             	
d39a :                       cmd_check_d
d39a : c964             [ 2] 	cmp #'d'				; Check for d
d39c : f030             [ 3] 	beq cmd_dumpmem
d39e :                       cmd_check_s
d39e : c973             [ 2] 	cmp #'s'				; Check for s
d3a0 : f006             [ 3] 	beq cmd_setmem
                             
d3a2 :                       cmd_not_found
d3a2 : a901             [ 2] 	lda #CMD_ERR_NOTFOUND
d3a4 : 855d             [ 3] 	sta errno
d3a6 : 38               [ 2] 	sec
d3a7 : 60               [ 6] 	rts
                             	
                             ;****************************************
                             ;* cmd_setmem
                             ;* Set the memory at address AAAA to byte string
                             ;* Input : buflo, bufhi
                             ;* Output : y = start of first parm byte
                             ;*          x = index to routine pointer
                             ;* Regs affected : A
                             ;****************************************
d3a8 :                       cmd_setmem
d3a8 : 205fd4           [ 6] 	jsr cmd_parse_word
d3ab : b01f             [ 3] 	bcs cmd_setmem_err
d3ad :                       cmd_setmem_byte
d3ad : 2043d4           [ 6] 	jsr cmd_parse_byte
d3b0 : b01a             [ 3] 	bcs cmd_setmem_err
AS65 Assembler for R6502 [1.42].                                     Page  127
-------------------------------- bank\bank0.s --------------------------------

d3b2 : 203ad4           [ 6] 	jsr cmd_poke				; Poke A in to cmd_lo, hi
d3b5 : 202ed4           [ 6] 	jsr cmd_incmem
d3b8 : 2071d4           [ 6] 	jsr cmd_parse_next_parm		; Try and find another 
d3bb : 90f0             [ 3] 	bcc cmd_setmem_byte			; Process if found, else f
d3bd : a595             [ 3] 	lda cmd_hi
d3bf : 206dc1           [ 6] 	jsr utilPrintA
d3c2 : a594             [ 3] 	lda cmd_lo
d3c4 : 206dc1           [ 6] 	jsr utilPrintA
d3c7 : 2065c1           [ 6] 	jsr utilPrintCRLF
d3ca : 18               [ 2] 	clc
d3cb : 60               [ 6] 	rts
d3cc :                       cmd_setmem_err
d3cc : 38               [ 2] 	sec
d3cd : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* cmd_dumpmem
                             ;* Dump memory at address AAAA
                             ;* Input : buflo, bufhi
                             ;* Output : y = start of first parm byte
                             ;* Regs affected : A
                             ;****************************************
d3ce :                       cmd_dumpmem
d3ce : 205fd4           [ 6] 	jsr cmd_parse_word			; Get address to dump
d3d1 : 9001             [ 3] 	bcc cmd_dumpmem_block
d3d3 : 60               [ 6] 	rts							; C is set
d3d4 :                       cmd_dumpmem_block
d3d4 : a595             [ 3] 	lda cmd_hi					; Show the address
d3d6 : 206dc1           [ 6] 	jsr utilPrintA
d3d9 : a594             [ 3] 	lda cmd_lo
d3db : 206dc1           [ 6] 	jsr utilPrintA
d3de : 205dc1           [ 6] 	jsr utilPrintSPC
                             	
d3e1 : a008             [ 2] 	ldy #8						; 8 Bytes per line
d3e3 :                       cmd_dumpmem_byte
d3e3 : 2035d4           [ 6] 	jsr cmd_peek
d3e6 : 206dc1           [ 6] 	jsr utilPrintA
d3e9 : 205dc1           [ 6] 	jsr utilPrintSPC
d3ec : 202ed4           [ 6] 	jsr cmd_incmem
d3ef : 88               [ 2] 	dey
d3f0 : d0f1             [ 3] 	bne cmd_dumpmem_byte
d3f2 :                       cmd_dumpmemASCII
d3f2 : 38               [ 2] 	sec							; Move pointer back to start
d3f3 : a594             [ 3] 	lda cmd_lo
d3f5 : e908             [ 2] 	sbc #8
d3f7 : 8594             [ 3] 	sta cmd_lo
d3f9 : a595             [ 3] 	lda cmd_hi
d3fb : e900             [ 2] 	sbc #0
d3fd : 8595             [ 3] 	sta cmd_hi
                             	
d3ff : 205dc1           [ 6] 	jsr utilPrintSPC
d402 : a008             [ 2] 	ldy #8						; 8 Bytes per line
d404 :                       cmd_dumpmem_ascii
d404 : 2035d4           [ 6] 	jsr cmd_peek
d407 : a22e             [ 2] 	ldx #'.'					; Non-printable char
d409 : c920             [ 2] 	cmp #' '					; A<32 is unprintable
d40b : b001             [ 3] 	bcs cmd_dump_skip_ctrl
d40d : 8a               [ 2] 	txa							; Replace with dot
d40e :                       cmd_dump_skip_ctrl
d40e : c97f             [ 2] 	cmp #UTF_DEL				; >= DEL is unprintable
d410 : 9001             [ 3] 	bcc cmd_dump_skip_del
AS65 Assembler for R6502 [1.42].                                     Page  128
-------------------------------- bank\bank0.s --------------------------------

d412 : 8a               [ 2] 	txa							; Replace with dot
d413 :                       cmd_dump_skip_del	
d413 : 2027c4           [ 6] 	jsr io_put_ch
d416 : 202ed4           [ 6] 	jsr cmd_incmem
d419 : 88               [ 2] 	dey		
d41a : d0e8             [ 3] 	bne cmd_dumpmem_ascii		; Show 8 bytes
d41c : 38               [ 2] 	sec
d41d : 2024c4           [ 6] 	jsr io_get_ch				; Wait for key press
d420 : c90d             [ 2] 	cmp #UTF_CR		
d422 : d003             [ 3] 	bne cmd_dumpmemFin			; Any key but enter finishe
                             ;	jsr io_put_ch				; Do new line
d424 : 4cd4d3           [ 3] 	jmp cmd_dumpmem_block
d427 :                       cmd_dumpmemFin
d427 : a90d             [ 2] 	lda #UTF_CR
d429 : 2027c4           [ 6] 	jsr io_put_ch
d42c : 18               [ 2] 	clc
d42d : 60               [ 6] 	rts
                             	
                             	
                             ;****************************************
                             ;* cmd_incmem
                             ;* Increment pointer
                             ;* Input : cmd_lo, cmd_hi
                             ;* Output : cmd_lo, cmd_hi
                             ;* Regs affected : 
                             ;****************************************
d42e :                       cmd_incmem
                             	_incZPWord cmd_lo
                             
d434 : 60               [ 6] 	rts
                             	
                             ;****************************************
                             ;* cmd_peek
                             ;* Read byte
                             ;* Input : cmd_lo, cmd_hi
                             ;* Output : A
                             ;* Regs affected : 
                             ;****************************************
d435 :                       cmd_peek
d435 : a200             [ 2] 	ldx #0
d437 : a194             [ 6] 	lda (cmd_lo,x)
d439 : 60               [ 6] 	rts
                             	
                             ;****************************************
                             ;* cmd_poke
                             ;* Read byte
                             ;* Input : cmd_lo, cmd_hi, A
                             ;* Output : A
                             ;* Regs affected : 
                             ;****************************************
d43a :                       cmd_poke
d43a : 8638             [ 3] 	stx tmp_d
d43c : a200             [ 2] 	ldx #0
d43e : 8194             [ 6] 	sta (cmd_lo,x)
d440 : a638             [ 3] 	ldx tmp_d
d442 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* cmd_parse_byte
                             ;* Find 2 char hex byte
                             ;* Input : buflo, bufhi, y offset
                             ;* Output : y = char after hex byte, A = value
AS65 Assembler for R6502 [1.42].                                     Page  129
-------------------------------- bank\bank0.s --------------------------------

                             ;* Regs affected : A,Y
                             ;****************************************
d443 :                       cmd_parse_byte
d443 : 2071d4           [ 6] 	jsr cmd_parse_next_parm	; Find the next paramete
d446 : b015             [ 3] 	bcs cmd_parse_byte_err
d448 : b139             [ 5] 	lda (buf_lo),y			; Get hi nibble of high byte
d44a : f011             [ 3] 	beq cmd_parse_byte_err	; If no char then error w
d44c : 48               [ 3] 	pha						; Save on stack
d44d : c8               [ 2] 	iny
d44e : b139             [ 5] 	lda (buf_lo),y			; Get lo nibble of high byte
d450 : f00a             [ 3] 	beq cmd_parse_byte_errp	; If no char then error 
d452 : aa               [ 2] 	tax						; Lo nibble goes to X
d453 : 68               [ 4] 	pla						; Restore hi nibble
d454 : 209ec1           [ 6] 	jsr str_x_to_a			; Convert from hex to A
d457 : b004             [ 3] 	bcs cmd_parse_byte_err	; If error then stop
d459 : c8               [ 2] 	iny						; Point to next char
d45a : 18               [ 2] 	clc
d45b : 60               [ 6] 	rts						; A contains the byte
d45c :                       cmd_parse_byte_errp
d45c : 68               [ 4] 	pla
d45d :                       cmd_parse_byte_err
d45d : aa               [ 2] 	tax
d45e : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* cmd_parse_word
                             ;* Find 4 char hex word
                             ;* Input : buflo, bufhi, y offset
                             ;* Output : y = char after hex byte, A = hi, X = 
                             ;* Regs affected : A,X,Y
                             ;****************************************
d45f :                       cmd_parse_word
d45f : 2043d4           [ 6] 	jsr cmd_parse_byte			; Get hi byte of word
d462 : b00b             [ 3] 	bcs cmd_word_err
d464 : 8595             [ 3] 	sta cmd_hi					; Save hi byte of word
d466 : 2043d4           [ 6] 	jsr cmd_parse_byte			; Get lo byte of word
d469 : b004             [ 3] 	bcs cmd_word_err
d46b : 8594             [ 3] 	sta cmd_lo
d46d : 18               [ 2] 	clc
d46e : 60               [ 6] 	rts
d46f :                       cmd_word_err
d46f : 38               [ 2] 	sec
d470 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* cmd_parse_next_parm
                             ;* Find next non-white space
                             ;* Input : buflo, bufhi, y offset
                             ;* Output : y = start of first parm byte
                             ;* Regs affected : A
                             ;****************************************
d471 :                       cmd_parse_next_parm
d471 : 88               [ 2] 	dey
d472 :                       cmd_find_parm
d472 : c8               [ 2] 	iny
d473 : b139             [ 5] 	lda (buf_lo),y
d475 : f005             [ 3] 	beq cmd_next_parm_err	; If z then no parms, fin 
d477 : c921             [ 2] 	cmp #' '+1				; Ignore space or less
d479 : f0f7             [ 3] 	beq cmd_find_parm
d47b : 18               [ 2] 	clc						; else ok, C is cleared
d47c :                       cmd_next_parm_err
d47c : 60               [ 6] 	rts
AS65 Assembler for R6502 [1.42].                                     Page  130
-------------------------------- bank\bank0.s --------------------------------

                             
                             	
d47d : 3e00                  msg_ready				db ">\x0"
d47f : 3f0d00                msg_errmsg				db "?\xd\x0"
d482 :                       _mod_sz_cmd_e
                             
                             	include "sound/sound.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  SOUND.S
                             ;*  Sound driver module - routines to access the 
                             ;*  This sound chip was found in a number of popu
                             ;*  in the early to mid 80s, including my first c
                             ;*  the Oric-1, as well as the MSX range.
                             ;*
                             ;************************************************
                             
                             
                             	; ROM code
                             	code
                             
d482 :                       mod_sz_sound_s
                             
                             
                             ;****************************************
                             ;* snd_get_note
                             ;* Get a note from the music scale table
                             ;* Input : Octave in X, note in Y
                             ;*         Octave between 1 and 6
                             ;* Output : A,X = Value hi,lo
                             ;* Regs affected : X
                             ;****************************************
d482 :                       snd_get_note
d482 : 98               [ 2] 	tya
d483 : 0a               [ 2] 	asl a
d484 : a8               [ 2] 	tay
                             	; Get note for octave 1
d485 : b9b5d4           [ 4] 	lda snd_music_tab,y
d488 : 8532             [ 3] 	sta tmp_alo
d48a : b9b6d4           [ 4] 	lda snd_music_tab+1,y
                             	
d48d :                       snd_get_note_oct
d48d : ca               [ 2] 	dex
d48e : f006             [ 3] 	beq snd_note_done
                             	; Divide freq by 2 each octave
d490 : 4a               [ 2] 	lsr a
d491 : 6632             [ 5] 	ror tmp_alo
d493 : 4c8dd4           [ 3] 	jmp snd_get_note_oct
d496 :                       snd_note_done
d496 : a632             [ 3] 	ldx tmp_alo
d498 : 60               [ 6] 	rts
                             
                             	
                             ;****************************************
                             ;* init_snd
                             ;* Initialise sound - after cia 1 has been initia
AS65 Assembler for R6502 [1.42].                                     Page  131
-------------------------------- bank\bank0.s --------------------------------

                             ;* Input : None
                             ;* Output : None
                             ;* Regs affected : All
                             ;****************************************
d499 :                       init_snd
d499 : a20f             [ 2] 	ldx #15
d49b :                       init_snd_regs
d49b : bda5d4           [ 4] 	lda snd_init_tab,x
d49e : 206ec0           [ 6] 	jsr snd_set				; Set X to A
d4a1 : ca               [ 2] 	dex
d4a2 : 10f7             [ 3] 	bpl init_snd_regs		; 16 regs
                             	
d4a4 : 60               [ 6] 	rts						; return from sub
                             
                             	; Register array initialisation values
                             	; Assuming 1.34Mhz input clock
d4a5 :                       snd_init_tab
d4a5 : 40                    	db 0x40				; R0 = Channel A Tone Low
d4a6 : 00                    	db 0x00				; R1 = Channel A Tone High
d4a7 : 00                    	db 0x00				; R2 = Channel B Tone Low
d4a8 : 01                    	db 0x01				; R3 = Channel B Tone High
d4a9 : 00                    	db 0x00				; R4 = Channel C Tone Low
d4aa : 02                    	db 0x02				; R5 = Channel C Tone High
d4ab : 00                    	db 0x00				; R6 = Noise period
d4ac : 7e                    	db 0b01111110		; R7 = Control : IOB input, IOA o
d4ad : 1f                    	db 0x1f				; R8 = Channel A Vol
d4ae : 1f                    	db 0x1f				; R9 = Channel B Vol
d4af : 1f                    	db 0x1f				; R10 = Channel C Vol
d4b0 : 00                    	db 0x00				; R11 = Envelope Period Low
d4b1 : 03                    	db 0x03				; R12 = Envelope Period High
d4b2 : 00                    	db 0b00000000		; R13 = Envelope Shape : 0000
d4b3 : ff                    	db 0xff				; R14 = IO Port A - KB lines disabled
d4b4 : 00                    	db 0x00				; R15 = IO Port B ; Initialise to 0 (
                             
d4b5 :                       snd_music_tab
d4b5 : f20b                  	dw 3058				; C		0 (Octave 1 3058Hz)
d4b7 : 460b                  	dw 2886				; C#	1
d4b9 : a40a                  	dw 2724				; D		2
d4bb : 0b0a                  	dw 2571				; D#	3
d4bd : 7b09                  	dw 2427				; E		4
d4bf : f308                  	dw 2291				; F		5
d4c1 : 7208                  	dw 2162				; F#	6
d4c3 : f907                  	dw 2041				; G		7
d4c5 : 8607                  	dw 1926				; G#	8
d4c7 : 1a07                  	dw 1818				; A		9
d4c9 : b406                  	dw 1716				; A#	10
d4cb : 5406                  	dw 1620				; B		11
d4cd : 0000                  	dw 0				; Null  12
                             
d4cf :                       mod_sz_sound_e
                             
d4cf :                       mod_sz_bios_e
d4cf :                       mod_sz_language_s
                             	include "utils/intmath.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
AS65 Assembler for R6502 [1.42].                                     Page  132
-------------------------------- bank\bank0.s --------------------------------

                             ;*  INTMATH.S
                             ;*  Core module for integer maths supported by df
                             ;*  Now supports signed integers in 2s complement
                             ;*  Uses the intmath registers: num_a, num_b, num
                             ;*  Most inputs are through num_a and num_b, with
                             ;*  num_a
                             ;*  Operations: add, sub, swap, 8 bit mult, mult,
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code
                             
                             ;****************************************
                             ;* Add : A + B result in A
                             ;****************************************
                             ;int_add
                             ;	clc
                             ;	lda num_a
                             ;	adc num_b
                             ;	sta num_a
                             ;	lda num_a+1
                             ;	adc num_b+1
                             ;	sta num_a+1
                             ;	rts
                             	
                             ;****************************************
                             ;* Sub : A - B result in A
                             ;****************************************
                             ;int_sub
                             ;	sec
                             ;	lda num_a
                             ;	sbc num_b
                             ;	sta num_a
                             ;	lda num_a+1
                             ;	sbc num_b+1
                             ;	sta num_a+1
                             ;	rts
                             	
                             ;****************************************
                             ;* Swp : A <-> B 
                             ;****************************************
                             ;int_swp
                             ;	lda num_a
                             ;	ldx num_b
                             ;	sta num_b
                             ;	stx num_a
                             ;	lda num_a+1
                             ;	ldx num_b+1
                             ;	sta num_b+1
                             ;	stx num_a+1
                             ;	rts
                             	
                             ;****************************************
                             ;* Mult : A * B result in A
                             ;* B assumed to be an 8 bit quantity 
                             ;****************************************
d4cf :                       int_fast_mult
                             	_cpyZPWord num_a,num_tmp
                             
d4d7 : a900             [ 2] 	lda #0
d4d9 : 853d             [ 3] 	sta num_a
AS65 Assembler for R6502 [1.42].                                     Page  133
-------------------------------- bank\bank0.s --------------------------------

d4db : 853e             [ 3] 	sta num_a+1
d4dd : a008             [ 2] 	ldy #8
d4df :                       int_fast_mult_cycle
d4df : 4641             [ 5] 	lsr num_b
d4e1 : 900d             [ 3] 	bcc int_fast_mult_next
d4e3 : 18               [ 2] 	clc
d4e4 : a53d             [ 3] 	lda num_a
d4e6 : 6549             [ 3] 	adc num_tmp
d4e8 : 853d             [ 3] 	sta num_a
d4ea : a53e             [ 3] 	lda num_a+1
d4ec : 654a             [ 3] 	adc num_tmp+1
d4ee : 853e             [ 3] 	sta num_a+1
d4f0 :                       int_fast_mult_next
d4f0 : 0649             [ 5] 	asl num_tmp
d4f2 : 264a             [ 5] 	rol num_tmp+1
d4f4 : 88               [ 2] 	dey
d4f5 : d0e8             [ 3] 	bne int_fast_mult_cycle
d4f7 : 60               [ 6] 	rts
                             	
                             ;****************************************
                             ;* Mult : A * B result in A
                             ;****************************************
d4f8 :                       int_mult
                             	_cpyZPWord num_a,num_tmp
                             
d500 : a900             [ 2] 	lda #0
d502 : 853d             [ 3] 	sta num_a
d504 : 853e             [ 3] 	sta num_a+1
d506 : a010             [ 2] 	ldy #16
d508 :                       int_mult_cycle
d508 : 4642             [ 5] 	lsr num_b+1
d50a : 6641             [ 5] 	ror num_b
d50c : 900d             [ 3] 	bcc int_mult_next
d50e : 18               [ 2] 	clc
d50f : a53d             [ 3] 	lda num_a
d511 : 6549             [ 3] 	adc num_tmp
d513 : 853d             [ 3] 	sta num_a
d515 : a53e             [ 3] 	lda num_a+1
d517 : 654a             [ 3] 	adc num_tmp+1
d519 : 853e             [ 3] 	sta num_a+1
d51b :                       int_mult_next
d51b : 0649             [ 5] 	asl num_tmp
d51d : 264a             [ 5] 	rol num_tmp+1
d51f : 88               [ 2] 	dey
d520 : d0e6             [ 3] 	bne int_mult_cycle
d522 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Div : A / B result in A, remainder X
                             ;****************************************
d523 :                       int_div
                             	; adjust signs
d523 : a900             [ 2] 	lda #0
d525 : 8549             [ 3] 	sta num_tmp				; Assume all +ve
d527 : a53e             [ 3] 	lda num_a+1				; Check A hi
d529 : 100f             [ 3] 	bpl int_div_skip_negA
d52b : e649             [ 5] 	inc num_tmp				; Record sign flip
d52d : 38               [ 2] 	sec						; 2's complement A
d52e : a900             [ 2] 	lda #0					; by 0-A
d530 : e53d             [ 3] 	sbc num_a				; A is now +ve
d532 : 853d             [ 3] 	sta num_a
d534 : a900             [ 2] 	lda #0
AS65 Assembler for R6502 [1.42].                                     Page  134
-------------------------------- bank\bank0.s --------------------------------

d536 : e53e             [ 3] 	sbc num_a+1
d538 : 853e             [ 3] 	sta num_a+1	
d53a :                       int_div_skip_negA
d53a : a542             [ 3] 	lda num_b+1				; Check B hi
d53c : 100f             [ 3] 	bpl int_div_skip_negB
d53e : e649             [ 5] 	inc num_tmp				; Record sign flip
d540 : 38               [ 2] 	sec						; 2's complement B
d541 : a900             [ 2] 	lda #0					; by 0-B
d543 : e541             [ 3] 	sbc num_b				; B is now +ve
d545 : 8541             [ 3] 	sta num_b
d547 : a900             [ 2] 	lda #0
d549 : e542             [ 3] 	sbc num_b+1
d54b : 8542             [ 3] 	sta num_b+1
d54d :                       int_div_skip_negB			; num_tmp bit 0=1 for result 
                             	; x is the remainder
d54d : a900             [ 2] 	lda #0
d54f : 8545             [ 3] 	sta num_x
d551 : 8546             [ 3] 	sta num_x+1
                             	; 16 bit division
d553 : a010             [ 2] 	ldy #16
d555 :                       int_div_cycle
                             	; shift a left 1 bit
d555 : 063d             [ 5] 	asl num_a
d557 : 263e             [ 5] 	rol num_a+1
                             	; shift in to remainder
d559 : 2645             [ 5] 	rol num_x
d55b : 2646             [ 5] 	rol num_x+1
                             	; try and subtract b from remainder
d55d : 38               [ 2] 	sec
d55e : a545             [ 3] 	lda num_x
d560 : e541             [ 3] 	sbc num_b
d562 : aa               [ 2] 	tax
d563 : a546             [ 3] 	lda num_x+1
d565 : e542             [ 3] 	sbc num_b+1
d567 : 9006             [ 3] 	bcc int_div_skip
                             	; so b did fit in to remainder, save it
d569 : 8645             [ 3] 	stx num_x
d56b : 8546             [ 3] 	sta num_x+1
d56d : e63d             [ 5] 	inc num_a
d56f :                       int_div_skip
                             	; carry on for 16 bits
d56f : 88               [ 2] 	dey
d570 : d0e3             [ 3] 	bne int_div_cycle
                             	; result in a, remainder in x
                             	; check num_tmp bit 0
d572 : a549             [ 3] 	lda num_tmp
d574 : 2901             [ 2] 	and #1
d576 : f00d             [ 3] 	beq int_div_noflip
d578 : 38               [ 2] 	sec						; 2's complement A
d579 : a900             [ 2] 	lda #0					; by 0-A
d57b : e53d             [ 3] 	sbc num_a				; A is now +ve
d57d : 853d             [ 3] 	sta num_a
d57f : a900             [ 2] 	lda #0
d581 : e53e             [ 3] 	sbc num_a+1
d583 : 853e             [ 3] 	sta num_a+1	
d585 :                       int_div_noflip
d585 : 60               [ 6] 	rts
                             	
                             
                             	include "dflat/dflat.s"
                             ;************************************************
                             ;*
AS65 Assembler for R6502 [1.42].                                     Page  135
-------------------------------- bank\bank0.s --------------------------------

                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  DFLAT.S
                             ;*  This is the main controller code file for dfl
                             ;*  This file includes all the required dflat sou
                             ;*  needed:
                             ;*  - error.s is the error handling module
                             ;*  - var.s is the variable handling module
                             ;*  - tokenise.s is the tokenisation module
                             ;*  - progedit.s is the program editing module
                             ;*  - runtime.s is the runtime module
                             ;*  - stack.s is the stack handling module
                             ;*  The above modules include further source file
                             ;*  needed.
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code
                             
d586 :                       mod_sz_dflat_s
                             
                             ;	include "dflat/error.s"  ** included in the mai
                             	include "dflat/var.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  VAR.S
                             ;*  This module handles all the variable manageme
                             ;*  When a new variable is detected during tokeni
                             ;*  is added to the variable tables.  Any subsequ
                             ;*  that variable is tokenised as an index in to 
                             ;*  table.  There are two variable tables:
                             ;*  Variable name table (VNT) keeps track of vari
                             ;*  Variable value table (VVT) maintains variable
                             ;*  including type, dimension (if array) and of c
                             ;*  actual values.  For an array, the value is a 
                             ;*  memory grabbed using the 'malloc' function (s
                             ;*  This approach to variable managemet is direct
                             ;*  Atari 8 bit.  The disadvantage is that during
                             ;*  session you may end up having a much larger v
                             ;*  table than you need.  Why?  Well because say 
                             ;*  a as a new variable, but then later change it
                             ;*  In this case a remains in the variable tables
                             ;*  only ever adds to the table!  However it is e
                             ;*  solved - when you save and then reload from n
                             ;*  program, the variable table is built up as th
                             ;*  is loaded.
                             ;*  The VNT grows DOWN from the top of free memor
                             ;*  the VVT growing UP from just below the VNT.
                             ;*	This means that the VVT for a variable will al
                             ;*	found in a fixed place in the VVT table and me
                             ;*	For the VNT (names) it grows from vvstart at l
AS65 Assembler for R6502 [1.42].                                     Page  136
-------------------------------- bank\bank0.s --------------------------------

                             ;*
                             ;************************************************
                             
                             
                             	; ROM code
                             	code  
                             
d586 :                       mod_sz_var_s
                             
                             
                             ;****************************************
                             ;* Find a variable
                             ;* CC if found, A has index
                             ;****************************************
d586 :                       df_var_find
                             	; start at the beginning of the vnt table
                             	; vars are stored in reverse order
                             	_cpyZPWord df_vntstrt,df_tmpptrb
                             
                             	; start at end of VVT
                             	_cpyZPWord df_vvtend,df_tmpptra
                             
d596 :                       df_var_match_vnt
                             	; If reached top of VVT then not found
d596 : a5a1             [ 3] 	lda df_tmpptra
d598 : c56d             [ 3] 	cmp df_vvtstrt
d59a : d006             [ 3] 	bne df_var_match_vnt_do
d59c : a5a2             [ 3] 	lda df_tmpptra+1
d59e : c56e             [ 3] 	cmp df_vvtstrt+1
d5a0 : f042             [ 3] 	beq df_var_find_no_vnt
d5a2 :                       df_var_match_vnt_do
                             	; match each char in buffer with vnt
d5a2 : a47c             [ 3] 	ldy df_linoff
d5a4 : a200             [ 2] 	ldx #0
d5a6 :                       df_var_match_vnt_sym
d5a6 : b90004           [ 4] 	lda df_linbuff,y
d5a9 : c1a3             [ 6] 	cmp (df_tmpptrb,x)
d5ab : d017             [ 3] 	bne df_var_vnt_sym_nomatch
                             	; if single char match then increment
                             	; source and search
d5ad : c8               [ 2] 	iny
                             	_incZPWord df_tmpptrb
                             
                             	; if more chars in vnt entry then continue
d5b4 : a1a3             [ 6] 	lda (df_tmpptrb,x)
d5b6 : d0ee             [ 3] 	bne df_var_match_vnt_sym
                             	; if no more chars in vnt entry but
                             	; but chars in buffer then try next vnt
d5b8 : b90004           [ 4] 	lda df_linbuff,y
                             	; check for valid alpha-numeric
d5bb : 2067d7           [ 6] 	jsr df_tk_isalphanum
                             	; if there is a valid alpha-num then no match
d5be : b004             [ 3] 	bcs df_var_vnt_sym_nomatch
                             	; else check type
d5c0 :                       df_var_check_type
                             	; if not alpha-num then check for type
                             	; string or int postfix didn't match with VNT
                             ;	cmp #'%'
                             ;	beq df_var_vnt_sym_nomatch
d5c0 : c924             [ 2] 	cmp #'$'
                             	; ok, all good got a match
d5c2 : d025             [ 3] 	bne df_var_find_true
AS65 Assembler for R6502 [1.42].                                     Page  137
-------------------------------- bank\bank0.s --------------------------------

d5c4 :                       df_var_vnt_sym_nomatch
                             	; find the zero terminator
d5c4 : a1a3             [ 6] 	lda (df_tmpptrb,x)
d5c6 : f009             [ 3] 	beq	df_var_vnt_entry_end
                             	_incZPWord df_tmpptrb
                             
d5ce : 4cc4d5           [ 3] 	jmp df_var_vnt_sym_nomatch
d5d1 :                       df_var_vnt_entry_end
                             	; skip over zero terminator
                             	_incZPWord df_tmpptrb
                             
                             	; update vvt address pointer
d5d7 : 18               [ 2] 	clc
d5d8 : a5a1             [ 3] 	lda df_tmpptra
d5da : 6908             [ 2] 	adc #8
d5dc : 85a1             [ 3] 	sta df_tmpptra
                             	_bcc 2
                             
d5e0 : e6a2             [ 5] 	inc df_tmpptra+1
d5e2 : d0b2             [ 3] 	bne df_var_match_vnt		; Always - high byte is no
                             
                             	; if at end of vnt then no matches found
d5e4 :                       df_var_find_no_vnt
d5e4 : a900             [ 2] 	lda #0
d5e6 : aa               [ 2] 	tax
d5e7 : 38               [ 2] 	sec
d5e8 : 60               [ 6] 	rts
                             
d5e9 :                       df_var_find_true
                             	; Get slot address into x,a
d5e9 : a6a1             [ 3] 	ldx df_tmpptra
d5eb : a5a2             [ 3] 	lda df_tmpptra+1
                             	
                             	; Consume characters found in source
d5ed : 847c             [ 3] 	sty df_linoff
d5ef : 18               [ 2] 	clc
d5f0 : 60               [ 6] 	rts
                             
                             	
                             ;****************************************
                             ;* Insert a variable name in to vnt
                             ;* X = number of bytes to make room
                             ;* Space allocated is;
                             ;*	8 bytes for the new VVT entry
                             ;*  X bytes for the new VNT entry
                             ;* df_vntstrt is new var name entry
                             ;* df_vvtend is new vvt entry
                             ;****************************************
d5f1 :                       df_var_insert_space
                             	; *** REMEMBER TO DO A SPACE CHECK EVENTUALLY! *
                             
                             	; adjust down the VNT start by VVT size (for ext
                             	; put it in tmpptrb
d5f1 : 38               [ 2] 	sec
d5f2 : a569             [ 3] 	lda df_vntstrt
d5f4 : e908             [ 2] 	sbc #DFVVT_SZ
d5f6 : 8569             [ 3] 	sta df_vntstrt
d5f8 : a56a             [ 3] 	lda df_vntstrt+1
d5fa : e900             [ 2] 	sbc #0
d5fc : 856a             [ 3] 	sta df_vntstrt+1
                             	
                             	; adjust VNT end by VVT size (for extra VVT entr
AS65 Assembler for R6502 [1.42].                                     Page  138
-------------------------------- bank\bank0.s --------------------------------

                             	; and put it in tmpptrc
d5fe : 38               [ 2] 	sec
d5ff : a56b             [ 3] 	lda df_vntend
d601 : e908             [ 2] 	sbc #DFVVT_SZ
d603 : 856b             [ 3] 	sta df_vntend
d605 : a56c             [ 3] 	lda df_vntend+1
d607 : e900             [ 2] 	sbc #0
d609 : 856c             [ 3] 	sta df_vntend+1
                             
                             	; Set copy point to new start of VNT
                             	_cpyZPWord df_vntstrt,df_tmpptra
                             
                             
                             	; Now move all bytes from old VNT (higher up) to
d613 :                       df_var_move_byte
                             	; When pointer = vntend then done
d613 : a5a1             [ 3] 	lda df_tmpptra
d615 : c56b             [ 3] 	cmp df_vntend
d617 : d006             [ 3] 	bne df_var_move_byte_do
d619 : a5a2             [ 3] 	lda df_tmpptra+1
d61b : c56c             [ 3] 	cmp df_vntend+1
d61d : f011             [ 3] 	beq df_var_move_byte_fin
d61f :                       df_var_move_byte_do
                             	; First the source byte VVT size higher in memor
d61f : a008             [ 2] 	ldy #DFVVT_SZ
d621 : b1a1             [ 5] 	lda (df_tmpptra),y
                             	; And copy to new position lower in memory
d623 : a000             [ 2] 	ldy #0
d625 : 91a1             [ 5] 	sta (df_tmpptra),y
                             	; Increment memory pointer
                             	_incZPWord df_tmpptra
                             
d62d : 4c13d6           [ 3] 	jmp df_var_move_byte		; Always as C is not touch
d630 :                       df_var_move_byte_fin
                             	
                             	; Now subtract X bytes from VNT start to accommo
d630 : 8638             [ 3] 	stx tmp_d
d632 : 38               [ 2] 	sec
d633 : a569             [ 3] 	lda df_vntstrt
d635 : e538             [ 3] 	sbc tmp_d
d637 : 8569             [ 3] 	sta df_vntstrt
d639 : a56a             [ 3] 	lda df_vntstrt+1
d63b : e900             [ 2] 	sbc #0
d63d : 856a             [ 3] 	sta df_vntstrt+1
                             
                             	; VVT end is the same as VNT end
                             	_cpyZPWord df_vntend,df_vvtend
                             
                             
                             	; Copy done increment variable count
d647 : e671             [ 5] 	inc df_varcnt
d649 : 18               [ 2] 	clc
d64a : 60               [ 6] 	rts
                             	
                             	
                             ;****************************************
                             ;* Analyse variable name
                             ;* Return type in A
                             ;* NOT C = It is a variable
                             ;* C = It is not a variable
                             ;* X = Length including pre-fixes
                             ;* Y = Offset to next char after var name
AS65 Assembler for R6502 [1.42].                                     Page  139
-------------------------------- bank\bank0.s --------------------------------

                             ;****************************************
d64b :                       df_var_analyse
                             	; Default type is INT
d64b : a901             [ 2] 	lda #DFVVT_INT
d64d : 85a1             [ 3] 	sta df_tmpptra
                             	
                             	; start at the current buffer position
d64f : a47c             [ 3] 	ldy df_linoff
                             	
                             	; check for PROC prefix
d651 : b90004           [ 4] 	lda df_linbuff,y
d654 : c95f             [ 2] 	cmp #'_'
                             	; if it is not proc then get the name
d656 : d005             [ 3] 	bne df_var_not_proc
                             	; else set type to PROC
d658 : a940             [ 2] 	lda #DFVVT_PROC
d65a : 85a1             [ 3] 	sta df_tmpptra
                             	; skip over prefix
d65c : c8               [ 2] 	iny
d65d :                       df_var_not_proc
                             	; found the actual number of alpha nums
d65d : a2ff             [ 2] 	ldx #0xff
                             	; go back on pos on index as loop always does in
d65f : 88               [ 2] 	dey
d660 :                       df_var_type_countlen
                             	; count alpha nums
d660 : c8               [ 2] 	iny
d661 : e8               [ 2] 	inx
d662 : b90004           [ 4] 	lda df_linbuff,y
                             	; first char has to be alpha, rest can be alpha-
d665 : e000             [ 2] 	cpx #0
d667 : d007             [ 3] 	bne df_var_type_countlen_alphanum
d669 : 205ad7           [ 6] 	jsr df_tk_isalpha
d66c : b0f2             [ 3] 	bcs df_var_type_countlen
d66e : 9005             [ 3] 	bcc df_var_type_countlen_done
d670 :                       df_var_type_countlen_alphanum
d670 : 2067d7           [ 6] 	jsr df_tk_isalphanum
d673 : b0eb             [ 3] 	bcs df_var_type_countlen
d675 :                       df_var_type_countlen_done
d675 : e000             [ 2] 	cpx #0
d677 : d00a             [ 3] 	bne df_var_analyse_chk_post
                             	; if zero alphanums error but not fatal
d679 :                       df_var_analyse_err
                             	; If already prefix of PROC then fatal error
d679 : a5a1             [ 3] 	lda df_tmpptra
d67b : c940             [ 2] 	cmp #DFVVT_PROC
d67d : f002             [ 3] 	beq df_var_analyse_fatal_err
d67f : 38               [ 2] 	sec
d680 : 60               [ 6] 	rts
d681 :                       df_var_analyse_fatal_err
                             	SWBRK DFERR_SYNTAX
                             
d683 :                       df_var_analyse_chk_post
                             	; first see if the char is $
                             	; but cannot already have PROC prefix
                             ;	cmp #'%'
                             ;	bne df_var_analyse_chk_dollar
                             ;	ldx df_tmpptra
                             ;	cpx #DFVVT_PROC
                             ;	beq df_var_analyse_fatal_err
                             	; Set to INT type although it is the default alr
                             ;	lda #DFVVT_INT
AS65 Assembler for R6502 [1.42].                                     Page  140
-------------------------------- bank\bank0.s --------------------------------

                             ;	sta df_tmpptra
                             	; advance the buffer index
                             ;	iny
                             ;	bne df_var_analyse_chk_arry
d683 :                       df_var_analyse_chk_dollar
                             	; now see if the char is $
                             	; but cannot already have PROC prefix
d683 : c924             [ 2] 	cmp #'$'
d685 : d00b             [ 3] 	bne df_var_analyse_chk_arry
d687 : a6a1             [ 3] 	ldx df_tmpptra
d689 : e040             [ 2] 	cpx #DFVVT_PROC
d68b : f0f4             [ 3] 	beq df_var_analyse_fatal_err
                             	; Set to STRING type
d68d : a904             [ 2] 	lda #DFVVT_STR
d68f : 85a1             [ 3] 	sta df_tmpptra
                             	; advance the buffer index
d691 : c8               [ 2] 	iny
d692 :                       df_var_analyse_chk_arry
                             	; Check for array type vs PROC
d692 : b90004           [ 4] 	lda df_linbuff,y
d695 : c95b             [ 2] 	cmp #'['
d697 : d00a             [ 3] 	bne df_var_not_arry
                             	; array and proc type not compatible
d699 : a5a1             [ 3] 	lda df_tmpptra
d69b : c940             [ 2] 	cmp #DFVVT_PROC
d69d : f0e2             [ 3] 	beq df_var_analyse_fatal_err
d69f : 0980             [ 2] 	ora #DFVVT_ARRY
d6a1 : 85a1             [ 3] 	sta df_tmpptra
d6a3 :                       df_var_not_arry
                             	; Ok got everything
                             	; calculate length from y
                             	; y is next char after var name
d6a3 : 98               [ 2] 	tya
d6a4 : 38               [ 2] 	sec
d6a5 : e57c             [ 3] 	sbc df_linoff			; where we started
                             	; put len in X
d6a7 : aa               [ 2] 	tax
                             	; put type in A
d6a8 : a5a1             [ 3] 	lda df_tmpptra
d6aa : 18               [ 2] 	clc
d6ab : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Find or create a variable
                             ;* If found then type needs to match mask
                             ;* Not a fatal error because could be part
                             ;* of a trial of different parsing options
                             ;****************************************
d6ac :                       df_var_findcreate
                             	; save mask
d6ac : 48               [ 3] 	pha
d6ad : 2086d5           [ 6] 	jsr df_var_find
d6b0 : b013             [ 3] 	bcs df_var_findcreate_create
                             	; restore mask to check for 0 then push
d6b2 : 68               [ 4] 	pla
d6b3 : 48               [ 3] 	pha
                             	; don't check mask if zero
d6b4 : f008             [ 3] 	beq df_var_findcreate_found
                             	; restore mask
d6b6 : 68               [ 4] 	pla
d6b7 : a000             [ 2] 	ldy #DFVVT_TYPE
d6b9 : 31a1             [ 5] 	and (df_tmpptra),y
AS65 Assembler for R6502 [1.42].                                     Page  141
-------------------------------- bank\bank0.s --------------------------------

                             	; but if mask is non zero then this must be non 
d6bb : f019             [ 3] 	beq df_var_findcreate_err
d6bd : 48               [ 3] 	pha		; Dummy push to match the pla
d6be :                       df_var_findcreate_found
                             	; discard mask
d6be : 68               [ 4] 	pla	
                             	; put slot address in x,a
d6bf : a6a1             [ 3] 	ldx df_tmpptra
d6c1 : a5a2             [ 3] 	lda df_tmpptra+1
d6c3 : 18               [ 2] 	clc
d6c4 : 60               [ 6] 	rts
                             	
                             	;* If no existing variable found, add one to VNT
d6c5 :                       df_var_findcreate_create
                             	; find type (A) and length (X)
d6c5 : 204bd6           [ 6] 	jsr df_var_analyse
                             	; keep A temporarily
d6c8 : 85a1             [ 3] 	sta df_tmpptra
                             	; if not a variable then return with C=1
d6ca : b009             [ 3] 	bcs df_var_findcreate_errp
                             	; check if mask needs to be applied
d6cc : 68               [ 4] 	pla
d6cd : f009             [ 3] 	beq df_var_analyse_ok
                             	; else mask and check
d6cf : 25a1             [ 3] 	and df_tmpptra
                             	; mask match is ok
d6d1 : d005             [ 3] 	bne df_var_analyse_ok
                             	; else return not found
d6d3 : f001             [ 3] 	beq df_var_findcreate_err
d6d5 :                       df_var_findcreate_errp
d6d5 : 68               [ 4] 	pla
d6d6 :                       df_var_findcreate_err
d6d6 : 38               [ 2] 	sec
d6d7 : 60               [ 6] 	rts
                             
d6d8 :                       df_var_analyse_ok
                             	; extra space for zero terminator
d6d8 : e8               [ 2] 	inx
                             	; save data in reverse order to when needed
                             	; by the initialise section x,a (var name sz, ty
                             	; insert space of X bytes
d6d9 : a5a1             [ 3] 	lda df_tmpptra
d6db : 48               [ 3] 	pha
d6dc : 8a               [ 2] 	txa
d6dd : 48               [ 3] 	pha
                             	
d6de : 20f1d5           [ 6] 	jsr df_var_insert_space
d6e1 : 9002             [ 3] 	bcc df_var_initialise_var
                             	; error inserting space
                             	SWBRK DFERR_OK
                             
                             	
d6e5 :                       df_var_initialise_var
d6e5 : 68               [ 4] 	pla
d6e6 : 85a5             [ 3] 	sta df_tmpptrc				; var name size + 1
                             
d6e8 : 68               [ 4] 	pla							; type
d6e9 : a000             [ 2] 	ldy #DFVVT_TYPE
d6eb : 916f             [ 5] 	sta (df_vvtend),y			; put type in vvt slot
d6ed : a900             [ 2] 	lda #0						; zero the rest
d6ef : a007             [ 2] 	ldy #7
d6f1 :                       df_var_zero_vnt
AS65 Assembler for R6502 [1.42].                                     Page  142
-------------------------------- bank\bank0.s --------------------------------

d6f1 : 916f             [ 5] 	sta (df_vvtend),y
d6f3 : 88               [ 2] 	dey
d6f4 : d0fb             [ 3] 	bne df_var_zero_vnt			; Don't zero out the type
                             
d6f6 : c6a5             [ 5] 	dec df_tmpptrc				; 1 less to copy variable name
                             
d6f8 : a67c             [ 3] 	ldx df_linoff				; Start at var name beginning, 
                             	; copy variable name to vnt slot
d6fa :                       df_var_findcreate_copy
d6fa : bd0004           [ 4] 	lda df_linbuff,x
d6fd : 9169             [ 5] 	sta (df_vntstrt),y
d6ff : e8               [ 2] 	inx
d700 : c8               [ 2] 	iny
d701 : c6a5             [ 5] 	dec df_tmpptrc
d703 : d0f5             [ 4] 	bne df_var_findcreate_copy
                             	; put in zero terminator
d705 : a900             [ 2] 	lda #0
d707 : 9169             [ 5] 	sta (df_vntstrt),y
                             
d709 : 867c             [ 3] 	stx df_linoff				; Update line pointer
                             
                             	; Return address of slot in X,A
d70b : a66f             [ 3] 	ldx df_vvtend
d70d : a570             [ 3] 	lda df_vvtend+1
                             	
d70f : 18               [ 2] 	clc
d710 : 60               [ 6] 	rts
                             	
d711 :                       mod_sz_var_e
                             
                             	include "dflat/tokenise.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  TOKENISE.S
                             ;*  Controlling module for tokenisation.  Basical
                             ;*  module is given a raw input buffer, which it 
                             ;*  attempt to tokenise fully.  Any syntax errors
                             ;*  thrown at the first point of detection.  If a
                             ;*  well, the parsed input will be in a tokenised
                             ;*  which can be executed in immediate mode or sa
                             ;*  line number order to memory.
                             ;*  dflat syntax is very simple - every statement
                             ;*  with a keyword.  The only exception is assign
                             ;*  procedure invocation - but even these scenari
                             ;*  tokenised so during runtime we just execute t
                             ;*  The raw buffer is consumed one byte at a time
                             ;*  tokenised buffer is written one byte at a tim
                             ;*  syntax means there is no need to undo reads o
                             ;*  or tokenised buffer.  The only refinement is 
                             ;*  allowed to peek a character in the raw buffer
                             ;*  consuming it.
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code
AS65 Assembler for R6502 [1.42].                                     Page  143
-------------------------------- bank\bank0.s --------------------------------

                             
d711 :                       mod_sz_tokenise_s
                             
                             
                             ;****************************************
                             ;* df_tk_peek_buf
                             ;* Return next char in A but no change to pointer
                             ;****************************************
d711 :                       df_tk_peek_buf
d711 : a47c             [ 3] 	ldy df_linoff
d713 : b90004           [ 4] 	lda df_linbuff,y
d716 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* df_tk_get_buf
                             ;* Return next char in A and inc pointer
                             ;* Don't advance if null char found and Z=1
                             ;****************************************
d717 :                       df_tk_get_buf
d717 : a47c             [ 3] 	ldy df_linoff
d719 : b90004           [ 4] 	lda df_linbuff,y
d71c : f003             [ 3] 	beq df_tk_get_buf_null
d71e : c8               [ 2] 	iny
d71f : 847c             [ 3] 	sty df_linoff
d721 :                       df_tk_get_buf_null
d721 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* df_tk_put_tok
                             ;* Put A in token buffer and inc pointer
                             ;* C=Clear on exit
                             ;****************************************
d722 :                       df_tk_put_tok
d722 : a47d             [ 3] 	ldy df_tokoff
d724 : 998004           [ 5] 	sta df_tokbuff,y
d727 : c8               [ 2] 	iny
d728 : 3004             [ 3] 	bmi df_tk_put_overflow
d72a : 847d             [ 3] 	sty df_tokoff
d72c : 18               [ 2] 	clc
d72d : 60               [ 6] 	rts
d72e :                       df_tk_put_overflow
                             	SWBRK DFERR_STRLONG
                             
                             
                             ;****************************************
                             ;* df_tk_isdigit
                             ;* Check char in A for number 0-9
                             ;* Return: CC = False, CS = True
                             ;****************************************
d730 :                       df_tk_isdigit
d730 : c93a             [ 2] 	cmp #'9'+1
d732 : b005             [ 3] 	bcs df_tk_isdigit_false
d734 : c930             [ 2] 	cmp #'0'
d736 : 9001             [ 3] 	bcc df_tk_isdigit_false
d738 : 60               [ 6] 	rts						; C must be 1
d739 :                       df_tk_isdigit_false
d739 : 18               [ 2] 	clc
d73a : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* df_tk_isbin
                             ;* Check char in A for binary digit
AS65 Assembler for R6502 [1.42].                                     Page  144
-------------------------------- bank\bank0.s --------------------------------

                             ;* Return: CC = False, CS = True
                             ;****************************************
d73b :                       df_tk_isbin
d73b : c930             [ 2] 	cmp #'0'
d73d : f005             [ 3] 	beq df_tk_isbin_true	; C=1
d73f : c931             [ 2] 	cmp #'1'
d741 : f001             [ 3] 	beq df_tk_isbin_true	; C=1
d743 : 18               [ 2] 	clc
d744 :                       df_tk_isbin_true
d744 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* df_tk_ishex
                             ;* Check char in A for number 0-9, A-F, a-f
                             ;* Return: CC = False, CS = True
                             ;****************************************
d745 :                       df_tk_ishex
d745 : 48               [ 3] 	pha
d746 : 2030d7           [ 6] 	jsr df_tk_isdigit
d749 : b00a             [ 3] 	bcs df_tk_ishex_truep
d74b : 0920             [ 2] 	ora #0x20
d74d : c967             [ 2] 	cmp #'f'+1
d74f : b006             [ 3] 	bcs df_tk_ishex_false
d751 : c961             [ 2] 	cmp #'a'
d753 : 9002             [ 3] 	bcc df_tk_ishex_false
                             	; C must be 1 here
d755 :                       df_tk_ishex_truep
d755 : 68               [ 4] 	pla
d756 : 60               [ 6] 	rts
d757 :                       df_tk_ishex_false
d757 :                       df_tk_isalpha_false
d757 : 18               [ 2] 	clc
d758 : 68               [ 4] 	pla
d759 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* df_tk_isalpha
                             ;* Check next char in A alpha a-z, A-Z
                             ;* Return: CC = False, CS = True
                             ;****************************************
d75a :                       df_tk_isalpha
d75a : 48               [ 3] 	pha
d75b : 0920             [ 2] 	ora #0x20					; Convert to lower case for checki
d75d : c97b             [ 2] 	cmp #'z'+1
d75f : b0f6             [ 3] 	bcs df_tk_isalpha_false
d761 : c961             [ 2] 	cmp #'a'
d763 : 90f2             [ 3] 	bcc df_tk_isalpha_false
                             	; C must be 1 here
d765 : 68               [ 4] 	pla
d766 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* df_tk_isalphanum
                             ;* Check next char A for a-z,A-Z,0-9
                             ;* Return: CC = False, CS = True
                             ;****************************************
d767 :                       df_tk_isalphanum
d767 : 205ad7           [ 6] 	jsr df_tk_isalpha
d76a : 90c4             [ 3] 	bcc df_tk_isdigit
d76c :                       df_tk_rts1				; branch to this RTS where possible
d76c : 60               [ 6] 	rts
                             
AS65 Assembler for R6502 [1.42].                                     Page  145
-------------------------------- bank\bank0.s --------------------------------

                             ;****************************************
                             ;* df_tk_isproc
                             ;* Check next char A for _
                             ;* Return: CC = False, CS = True
                             ;****************************************
d76d :                       df_tk_isproc
d76d : c95f             [ 2] 	cmp #'_'
d76f : f001             [ 3] 	beq df_tk_isproc_true	; C=1
d771 : 18               [ 2] 	clc
d772 :                       df_tk_isproc_true
d772 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* df_tk_skip_ws
                             ;* Skip ws in linbuff
                             ;* Return: linoff updated to next non-ws, A = cha
                             ;****************************************
d773 :                       df_tk_skip_ws
d773 :                       df_tk_ws_loop1
d773 : 2011d7           [ 6] 	jsr df_tk_peek_buf
d776 : 2082d7           [ 6] 	jsr df_tk_isws
d779 : 90f1             [ 3] 	bcc df_tk_rts1
d77b : e67c             [ 5] 	inc df_linoff
d77d : 2022d7           [ 6] 	jsr df_tk_put_tok
d780 : 90f1             [ 3] 	bcc df_tk_ws_loop1		; Always as put_tok clears C
                             
                             ;****************************************
                             ;* df_tk_skip_ws
                             ;* Skip ws in linbuff
                             ;* Return: linoff updated to next non-ws, A = cha
                             ;****************************************
                             ;df_tk_strip_ws
                             ;df_tk_sws_loop1
                             ;	jsr df_tk_peek_buf
                             ;	jsr df_tk_isws
                             ;	bcc df_tk_rts1
                             ;	inc df_linoff
                             ;	bcs df_tk_sws_loop1		; Always as C is not touch
                             
                             ;****************************************
                             ;* df_tk_isws
                             ;* Check char is ws (only space is counted)
                             ;* Return: CC = False, CS = True
                             ;****************************************
d782 :                       df_tk_isws
d782 : c920             [ 2] 	cmp #' '
d784 : d001             [ 3] 	bne df_tk_isws_false
                             	; C must be 1 here
d786 : 60               [ 6] 	rts
d787 :                       df_tk_isws_false
d787 :                       df_tk_expectok
d787 : 18               [ 2] 	clc
d788 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Find a character expected ignoring ws
                             ;* Input A = expected char
                             ;* CC = found, CS = Error
                             ;****************************************
d789 :                       df_tk_expect
d789 : 48               [ 3] 	pha
                             	; skip ws
AS65 Assembler for R6502 [1.42].                                     Page  146
-------------------------------- bank\bank0.s --------------------------------

d78a : 2073d7           [ 6] 	jsr df_tk_skip_ws
                             	; peek the buffer
d78d : 68               [ 4] 	pla
d78e : a47c             [ 3] 	ldy df_linoff
d790 : d90004           [ 4] 	cmp df_linbuff,y
                             	; if expected char then ok
d793 : f0f2             [ 3] 	beq df_tk_expectok
                             	; else error
d795 :                       df_tk_num_err
d795 :                       df_tk_char_err
d795 : 38               [ 2] 	sec
d796 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Find a character expected ignoring ws
                             ;* Input A = expected char
                             ;* Tokenises the character as well
                             ;* CC = found, CS = Error
                             ;****************************************
d797 :                       df_tk_expect_tok
d797 : 2089d7           [ 6] 	jsr df_tk_expect
d79a : b0d0             [ 3] 	bcs df_tk_rts1
d79c : 2017d7           [ 6] 	jsr df_tk_get_buf
d79f : 4c22d7           [ 3] 	jmp df_tk_put_tok
                             
                             ;****************************************
                             ;* Find a character expected ignoring ws
                             ;* Input A = expected char
                             ;* Tokenises the character as well
                             ;* FATAL IF NOT FOUND
                             ;****************************************
d7a2 :                       df_tk_expect_tok_err
d7a2 : 2097d7           [ 6] 	jsr df_tk_expect_tok
d7a5 : 90c5             [ 3] 	bcc df_tk_rts1
d7a7 :                       df_tk_expect_tok_fatal
                             	SWBRK DFERR_SYNTAX
                             
                             
                             ;****************************************
                             ;* Tokenise a constant number
                             ;****************************************
d7a9 :                       df_tk_num
                             	; X,A = address, linbuff must be on page boundar
d7a9 : 18               [ 2] 	clc
d7aa : a900             [ 2] 	lda #lo(df_linbuff)
d7ac : 657c             [ 3] 	adc df_linoff
d7ae : aa               [ 2] 	tax
d7af : a904             [ 2] 	lda #hi(df_linbuff)
d7b1 : 6900             [ 2] 	adc #0
d7b3 : a000             [ 2] 	ldy #0				; any numeric format
d7b5 : 20cbc1           [ 6] 	jsr con_n_to_a
d7b8 : b0db             [ 3] 	bcs df_tk_num_err
                             	; A = format
                             	; X = how many digits processed
                             	; Jump over that many chars
d7ba : a8               [ 2] 	tay
d7bb : 18               [ 2] 	clc
d7bc : 8a               [ 2] 	txa
d7bd : 657c             [ 3] 	adc df_linoff
d7bf : 857c             [ 3] 	sta df_linoff
                             	; Now tokenise an integer (always 2 bytes, but t
d7c1 : 98               [ 2] 	tya
AS65 Assembler for R6502 [1.42].                                     Page  147
-------------------------------- bank\bank0.s --------------------------------

d7c2 : c901             [ 2] 	cmp #NUM_DEC
d7c4 : d004             [ 3] 	bne df_tk_num_hexbin
d7c6 : a909             [ 2] 	lda #DFTK_INTDEC	; decimal always an int
d7c8 : d016             [ 3] 	bne df_tk_num_put
d7ca :                       df_tk_num_hexbin
d7ca : c902             [ 2] 	cmp #NUM_HEX
d7cc : d00a             [ 3] 	bne df_tk_num_bin
d7ce : a906             [ 2] 	lda #DFTK_BYTHEX	; Assume BYT
d7d0 : e005             [ 2] 	cpx #5				; If >4 chars then INT
d7d2 : 900c             [ 3] 	bcc df_tk_num_put
d7d4 : a90a             [ 2] 	lda #DFTK_INTHEX
d7d6 : d008             [ 3] 	bne df_tk_num_put
d7d8 :                       df_tk_num_bin
d7d8 : a907             [ 2] 	lda #DFTK_BYTBIN	; Assume BYT
d7da : e00b             [ 2] 	cpx #11				; If >10 chars then INT
d7dc : 9002             [ 3] 	bcc df_tk_num_put
d7de : a90b             [ 2] 	lda #DFTK_INTBIN
d7e0 :                       df_tk_num_put
d7e0 : 2022d7           [ 6] 	jsr df_tk_put_tok	; Save number type (DEC,HEX,BI
d7e3 : a53d             [ 3] 	lda num_a
d7e5 : 2022d7           [ 6] 	jsr df_tk_put_tok
d7e8 : a53e             [ 3] 	lda num_a+1
d7ea : 4c22d7           [ 3] 	jmp df_tk_put_tok
                             
                             ;****************************************
                             ;* Tokenise a constant char
                             ;****************************************
d7ed :                       df_tk_char
                             	; skip the first quote
d7ed : 2017d7           [ 6] 	jsr df_tk_get_buf
                             	; put in the token
d7f0 : a900             [ 2] 	lda #DFTK_CHR
d7f2 : 2022d7           [ 6] 	jsr df_tk_put_tok
                             	; get the char value and save
d7f5 : 2017d7           [ 6] 	jsr df_tk_get_buf
d7f8 : 2022d7           [ 6] 	jsr df_tk_put_tok
                             	; always put two bytes in, even for a BYTE type
d7fb : a900             [ 2] 	lda #0
d7fd : 2022d7           [ 6] 	jsr df_tk_put_tok
                             	; next byte must be single quote
d800 : 2017d7           [ 6] 	jsr df_tk_get_buf
d803 : c927             [ 2] 	cmp #0x27
d805 : d08e             [ 4] 	bne df_tk_char_err
d807 : 18               [ 2] 	clc
d808 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Tokenise a constant string
                             ;****************************************
d809 :                       df_tk_str
                             	; skip the first quote
d809 : 2017d7           [ 6] 	jsr df_tk_get_buf
                             	; put in the token
d80c : a910             [ 2] 	lda #DFTK_STRLIT
d80e : 2022d7           [ 6] 	jsr df_tk_put_tok
d811 :                       df_tk_str_ch
                             	; copy string chars in to token buffer
                             	; until another quote or end of line
d811 : 2017d7           [ 6] 	jsr df_tk_get_buf
d814 : c900             [ 2] 	cmp #0
d816 : f011             [ 3] 	beq df_tk_str_err
d818 : c922             [ 2] 	cmp #0x22
AS65 Assembler for R6502 [1.42].                                     Page  148
-------------------------------- bank\bank0.s --------------------------------

d81a : f006             [ 3] 	beq df_tk_str_don
d81c : 2022d7           [ 6] 	jsr df_tk_put_tok
d81f : 4c11d8           [ 3] 	jmp df_tk_str_ch
d822 :                       df_tk_str_don
                             	; zero terminated strings
d822 : a900             [ 2] 	lda #0
d824 : 4c22d7           [ 3] 	jmp df_tk_put_tok
d827 :                       df_tk_var_noarry
d827 : 18               [ 2] 	clc
d828 : 60               [ 6] 	rts
d829 :                       df_tk_str_err
                             	SWBRK DFERR_SYNTAX
                             
                             
                             ;****************************************
                             ;* Tokenise a constant (num, string, char)
                             ;****************************************
d82b :                       df_tk_const
d82b : 2073d7           [ 6] 	jsr df_tk_skip_ws
                             	; Check what constant it is
d82e : 2011d7           [ 6] 	jsr df_tk_peek_buf
                             	; Minus symbol could be start of a number
d831 : c92d             [ 2] 	cmp #'-'
d833 : f005             [ 3] 	beq df_tk_const_try_num
d835 : 2030d7           [ 6] 	jsr df_tk_isdigit
d838 : 9003             [ 3] 	bcc df_tk_const_try_str
d83a :                       df_tk_const_try_num
d83a : 4ca9d7           [ 3] 	jmp df_tk_num
d83d :                       df_tk_const_try_str
                             	; check for double quote
d83d : c922             [ 2] 	cmp #0x22
d83f : d003             [ 3] 	bne df_tk_const_try_char
d841 : 4c09d8           [ 3] 	jmp df_tk_str
d844 :                       df_tk_const_try_char
                             	; check for single apostrophe
d844 : c927             [ 2] 	cmp #0x27
d846 : d003             [ 3] 	bne df_tk_const_err
d848 : 4cedd7           [ 3] 	jmp df_tk_char
d84b :                       df_tk_const_err
                             	SWBRK DFERR_SYNTAX
                             
                             
                             ;****************************************
                             ;* Tokenise a variable - A = mask
                             ;* Return : A = variable index
                             ;****************************************
d84d :                       df_tk_var
                             	; Find or create variable, address in X,A
d84d : 20acd6           [ 6] 	jsr df_var_findcreate
d850 : 9001             [ 3] 	bcc df_tk_var_cont
d852 : 60               [ 6] 	rts
d853 :                       df_tk_var_cont
                             	; Save X,A for later
d853 : 48               [ 3] 	pha
d854 : 8a               [ 2] 	txa
d855 : 48               [ 3] 	pha
                             	; Put VAR escape in token buffer
d856 : a911             [ 2] 	lda #DFTK_VAR
d858 : 2022d7           [ 6] 	jsr df_tk_put_tok
                             	; Get variable address and put in token buffer
d85b : 68               [ 4] 	pla
d85c : 2022d7           [ 6] 	jsr df_tk_put_tok
AS65 Assembler for R6502 [1.42].                                     Page  149
-------------------------------- bank\bank0.s --------------------------------

d85f : 68               [ 4] 	pla
d860 : 2022d7           [ 6] 	jsr df_tk_put_tok
                             	; count of any array indices
d863 :                       df_tk_var_ck
                             	; check if array procesing needed
d863 : a95b             [ 2] 	lda #'['
d865 : 2097d7           [ 6] 	jsr df_tk_expect_tok
d868 : b0bd             [ 3] 	bcs df_tk_var_noarry
                             	; process numeric expression in bracket
d86a : 4c14d9           [ 3] 	jmp df_tk_narry
                             
                             
                             ;****************************************
                             ;* Tokenise a parameter in proc definition
                             ;* Return : A = variable index
                             ;****************************************
d86d :                       df_tk_parm
                             	; if preceeding with non-local qualifier DFTK_VA
d86d : 2011d7           [ 6] 	jsr df_tk_peek_buf
d870 : c926             [ 2] 	cmp #DFTK_VARPARM
d872 : d006             [ 3] 	bne df_tk_parm_skip_var
                             	; get the qualifier and put in token buffer
d874 : 2017d7           [ 6] 	jsr df_tk_get_buf
d877 : 2022d7           [ 6] 	jsr df_tk_put_tok
d87a :                       df_tk_parm_skip_var
                             	; don't have a certain type of var
d87a : a900             [ 2] 	lda #0
d87c : 4c4dd8           [ 3] 	jmp df_tk_var
                             
                             
                             ;****************************************
                             ;* Tokenise a variable to localise
                             ;* Return : A,X = variable index
                             ;****************************************
d87f :                       df_tk_localvar
                             	; Find or create variable, index in A
d87f : 20acd6           [ 6] 	jsr df_var_findcreate
d882 : 9001             [ 3] 	bcc df_tk_localvar_cont
d884 : 60               [ 6] 	rts
d885 :                       df_tk_localvar_cont
                             	; Save variable address for later
d885 : 48               [ 3] 	pha
d886 : 8a               [ 2] 	txa
d887 : 48               [ 3] 	pha
                             	; Put VAR escape in token buffer
d888 : a911             [ 2] 	lda #DFTK_VAR
d88a : 2022d7           [ 6] 	jsr df_tk_put_tok
                             	; Get variable index and put in token buffer
d88d : 68               [ 4] 	pla
d88e : 2022d7           [ 6] 	jsr df_tk_put_tok
d891 : 68               [ 4] 	pla
d892 : 4c22d7           [ 3] 	jmp df_tk_put_tok
                             
                             ;****************************************
                             ;* Tokenise array variable
                             ;* Return : A = variable index
                             ;****************************************
d895 :                       df_tk_arrvar
                             	; Like a local var at first
d895 : 207fd8           [ 6] 	jsr df_tk_localvar
                             	; but must be array
d898 : a95b             [ 2] 	lda #'['
AS65 Assembler for R6502 [1.42].                                     Page  150
-------------------------------- bank\bank0.s --------------------------------

d89a : 20a2d7           [ 6] 	jsr df_tk_expect_tok_err
                             	; process numeric expression in bracket
d89d : 4c14d9           [ 3] 	jmp df_tk_narry
                             
                             ;****************************************
                             ;* Tokenise call or def of proc
                             ;* Mode : A = 0 means def, else call
                             ;****************************************
d8a0 :                       df_tk_proc
d8a0 : 858b             [ 3] 	sta df_procmode
d8a2 : 2073d7           [ 6] 	jsr df_tk_skip_ws
                             	; Find or create proc, index in A
d8a5 : a940             [ 2] 	lda #DFVVT_PROC
d8a7 : 20acd6           [ 6] 	jsr df_var_findcreate
d8aa : b066             [ 4] 	bcs df_tk_proc_err
                             
                             	; Save variable address for later
d8ac : 868e             [ 3] 	stx df_procptr
d8ae : 858f             [ 3] 	sta df_procptr+1
                             
                             	; Put PROC escape in token buffer
d8b0 : a912             [ 2] 	lda #DFTK_PROC
d8b2 : 2022d7           [ 6] 	jsr df_tk_put_tok
                             	; Get variable address and put in token buffer
d8b5 : a58e             [ 3] 	lda df_procptr
d8b7 : 2022d7           [ 6] 	jsr df_tk_put_tok
d8ba : a58f             [ 3] 	lda df_procptr+1
d8bc : 2022d7           [ 6] 	jsr df_tk_put_tok
                             
                             	; initially assume no args
d8bf : a900             [ 2] 	lda #0
d8c1 : 858c             [ 3] 	sta df_procargs
                             
                             	; Must have an open bracket
d8c3 : a928             [ 2] 	lda #'('
d8c5 : 20a2d7           [ 6] 	jsr df_tk_expect_tok_err
                             	; if immediately followed by close bracket then 
d8c8 : 2011d7           [ 6] 	jsr df_tk_peek_buf
d8cb : c929             [ 2] 	cmp #')'
d8cd : f030             [ 3] 	beq df_tk_proc_noparm
                             	; else tokenise parm variables
d8cf :                       df_tk_proc_parms
d8cf : 2073d7           [ 6] 	jsr df_tk_skip_ws
                             	; call appropriate routine for mode
d8d2 : a58b             [ 3] 	lda df_procmode
d8d4 : d006             [ 3] 	bne df_tk_proc_call
                             	; tokenise parameter variable in def mode
d8d6 : 206dd8           [ 6] 	jsr df_tk_parm
d8d9 : 4ce5d8           [ 3] 	jmp df_tk_proc_skip_call
d8dc :                       df_tk_proc_call
                             	; tokenise expression in call mode
                             	;**CHECK**
d8dc : a58c             [ 3] 	lda df_procargs	; procargs could be impacted ins
d8de : 48               [ 3] 	pha
d8df : 2094d9           [ 6] 	jsr df_tk_expression
d8e2 : 68               [ 4] 	pla
d8e3 : 858c             [ 3] 	sta df_procargs
d8e5 :                       df_tk_proc_skip_call
d8e5 : b02a             [ 4] 	bcs df_tk_proc_errp
                             	; increment number of args
d8e7 : e68c             [ 5] 	inc df_procargs
                             	; what is next non ws char
AS65 Assembler for R6502 [1.42].                                     Page  151
-------------------------------- bank\bank0.s --------------------------------

d8e9 : 2073d7           [ 6] 	jsr df_tk_skip_ws
d8ec : c92c             [ 2] 	cmp #','
d8ee : f006             [ 3] 	beq df_tk_proc_comma
d8f0 : c929             [ 2] 	cmp #')'
d8f2 : d01d             [ 4] 	bne df_tk_proc_errp
d8f4 : f009             [ 3] 	beq df_tk_proc_noparm
                             	; comma found, more parms to process
d8f6 :                       df_tk_proc_comma
d8f6 : 2017d7           [ 6] 	jsr df_tk_get_buf
d8f9 : 2022d7           [ 6] 	jsr df_tk_put_tok
d8fc : 4ccfd8           [ 3] 	jmp df_tk_proc_parms
d8ff :                       df_tk_proc_noparm
                             	; consume the close bracket
d8ff : 2017d7           [ 6] 	jsr df_tk_get_buf
d902 : 2022d7           [ 6] 	jsr df_tk_put_tok
                             
                             	; update arg count if def mode
d905 : a68b             [ 3] 	ldx df_procmode
d907 : d006             [ 3] 	bne df_tk_proc_skip_args
                             	; use address of proc
                             	; put arg count in dim2
d909 : a004             [ 2] 	ldy #DFVVT_DIM2
d90b : a58c             [ 3] 	lda df_procargs
d90d : 918e             [ 5] 	sta (df_procptr),y
d90f :                       df_tk_proc_skip_args
d90f : 18               [ 2] 	clc
d910 : 60               [ 6] 	rts
d911 :                       df_tk_proc_errp
d911 : 68               [ 4] 	pla
d912 :                       df_tk_proc_err
                             	SWBRK DFERR_SYNTAX
                             
                             
                             ;****************************************
                             ;* Parse array index
                             ;****************************************
d914 :                       df_tk_narry
                             	; if array open bracket encountered
                             	; then tokenise a numeric expression
d914 : 2094d9           [ 6] 	jsr df_tk_expression
                             	; If a comma is next, then another expression
d917 : a92c             [ 2] 	lda #','
d919 : 2097d7           [ 6] 	jsr df_tk_expect_tok
d91c : b003             [ 3] 	bcs df_tk_narry_end
d91e : 2094d9           [ 6] 	jsr df_tk_expression
d921 :                       df_tk_narry_end
                             	; after the second dimension, must be close sq b
d921 : a95d             [ 2] 	lda #']'
d923 : 4ca2d7           [ 3] 	jmp df_tk_expect_tok_err
                             
                             ;****************************************
                             ;* Parse bracket
                             ;****************************************
d926 :                       df_tk_nbrkt
                             	; if  open bracket encountered
                             	; then tokenise a numeric expression
d926 : 2094d9           [ 6] 	jsr df_tk_expression
d929 : a929             [ 2] 	lda #')'
d92b : 4ca2d7           [ 3] 	jmp df_tk_expect_tok_err
                             
                             ;****************************************
                             ;* Parse call to numeric proc
AS65 Assembler for R6502 [1.42].                                     Page  152
-------------------------------- bank\bank0.s --------------------------------

                             ;****************************************
d92e :                       df_tk_nterm_proc
                             	; call mode
d92e : a901             [ 2] 	lda #1
d930 : 4ca0d8           [ 3] 	jmp df_tk_proc
                             
                             ;****************************************
                             ;* Parse numeric term
                             ;****************************************
d933 :                       df_tk_nterm
                             	; skip any ws first, copying in to tokbuff
                             	; A containts the non-ws char
d933 : 2073d7           [ 6] 	jsr df_tk_skip_ws
d936 : c900             [ 2] 	cmp #0
d938 : f004             [ 3] 	beq df_tk_nterm_done
d93a : c93a             [ 2] 	cmp #':'
d93c : d002             [ 3] 	bne df_tk_nterm_cont
d93e :                       df_tk_nterm_done
d93e :                       df_tk_nop_false
d93e : 38               [ 2] 	sec
d93f : 60               [ 6] 	rts
d940 :                       df_tk_nterm_cont
                             	; if open bracket then process it
d940 : c928             [ 2] 	cmp #'('
d942 : d009             [ 3] 	bne df_tk_nterm_tryfn
                             	; get the bracket and put in token buffer
d944 : 2017d7           [ 6] 	jsr df_tk_get_buf
d947 : 2022d7           [ 6] 	jsr df_tk_put_tok
                             	; go process the open bracket
d94a : 4c26d9           [ 3] 	jmp df_tk_nbrkt
d94d :                       df_tk_nterm_tryfn
d94d : 48               [ 3] 	pha
                             	; try decoding a built-in function
d94e : a902             [ 2] 	lda #DFTK_FN
d950 : 2080da           [ 6] 	jsr df_tk_matchtok
d953 : b00e             [ 3] 	bcs df_tk_nterm_try_proc
                             	; pull old A in to Y but don't use
d955 : 68               [ 4] 	pla
d956 : a8               [ 2] 	tay
                             	; restore A and put the token with MSB set
d957 : 8a               [ 2] 	txa
d958 : 0980             [ 2] 	ora #0x80
d95a : 2022d7           [ 6] 	jsr df_tk_put_tok
d95d : 2052da           [ 6] 	jsr df_tk_exec_parser
d960 : b01b             [ 3] 	bcs df_tk_nterm_err
d962 : 60               [ 6] 	rts
d963 :                       df_tk_nterm_try_proc
d963 : 68               [ 4] 	pla
                             	; if it's not a func then try proc
d964 : 206dd7           [ 6] 	jsr df_tk_isproc
d967 : 9006             [ 3] 	bcc df_tk_nterm_try_var
d969 : 202ed9           [ 6] 	jsr df_tk_nterm_proc
d96c : b00f             [ 3] 	bcs df_tk_nterm_err
d96e : 60               [ 6] 	rts
d96f :                       df_tk_nterm_try_var
                             	; Non-zero mask means var must be this type
d96f : a900             [ 2] 	lda #0
d971 : 204dd8           [ 6] 	jsr df_tk_var
d974 : b001             [ 3] 	bcs df_tk_nterm_try_const
d976 : 60               [ 6] 	rts
d977 :                       df_tk_nterm_try_const
                             	; Try decoding a constant
AS65 Assembler for R6502 [1.42].                                     Page  153
-------------------------------- bank\bank0.s --------------------------------

d977 : 202bd8           [ 6] 	jsr df_tk_const
d97a : b001             [ 3] 	bcs df_tk_nterm_err
d97c : 60               [ 6] 	rts
d97d :                       df_tk_nterm_err
                             	SWBRK DFERR_SYNTAX
                             
                             
                             ;****************************************
                             ;* Parse numeric operator
                             ;****************************************
d97f :                       df_tk_nop
d97f : 2073d7           [ 6] 	jsr df_tk_skip_ws
d982 : c900             [ 2] 	cmp #0
d984 : f0b8             [ 3] 	beq df_tk_nop_false
                             	; must be an operator token for numeric
d986 : a90c             [ 2] 	lda #DFTK_OP | DFTK_STROP
d988 : 2080da           [ 6] 	jsr df_tk_matchtok
d98b : b0b1             [ 3] 	bcs df_tk_nop_false
                             	; got a token
d98d : 0980             [ 2] 	ora #DFTK_TOKEN
d98f : 2022d7           [ 6] 	jsr df_tk_put_tok
d992 : 18               [ 2] 	clc
d993 : 60               [ 6] 	rts
                             
                             	
                             ;****************************************
                             ;* Parse numeric expression
                             ;****************************************
d994 :                       df_tk_expression
                             	; Tokenise a numeric term
d994 : 2033d9           [ 6] 	jsr df_tk_nterm
d997 : b006             [ 3] 	bcs df_tk_expre_err
                             	; Try and tokenise a numeric operator
d999 : 207fd9           [ 6] 	jsr df_tk_nop
                             	; If an operator was tokenised
                             	; then loop back for another term
d99c : 90f6             [ 3] 	bcc df_tk_expression
                             	; If no operator was found then
                             	; expression is done
d99e :                       df_tk_not_eos
d99e : 18               [ 2] 	clc
d99f :                       df_tk_expre_err
d99f : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Find expected token and parse expression
                             ;****************************************
d9a0 :                       df_tk_tok_expression
d9a0 : 20a2d7           [ 6] 	jsr df_tk_expect_tok_err
d9a3 : 4c94d9           [ 3] 	jmp df_tk_expression
                             
                             
                             ;****************************************
                             ;* Check end of statement
                             ;****************************************
d9a6 :                       df_tk_isEOS
d9a6 : a93a             [ 2] 	lda #':'
d9a8 : 2097d7           [ 6] 	jsr df_tk_expect_tok
d9ab : b0f1             [ 3] 	bcs df_tk_not_eos
                             	; this is the position of the next statement
d9ad : a57d             [ 3] 	lda df_tokoff
                             	; put it in the last statement offset slot
AS65 Assembler for R6502 [1.42].                                     Page  154
-------------------------------- bank\bank0.s --------------------------------

d9af : a47f             [ 3] 	ldy df_nxtstidx
d9b1 : 998004           [ 5] 	sta df_tokbuff,y
d9b4 : 38               [ 2] 	sec
d9b5 : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* Parse user defined proc
                             ;****************************************
d9b6 :                       df_tk_parse_user_proc
                             	; put proc token in as a call
d9b6 : a981             [ 2] 	lda #0x81
d9b8 : 2022d7           [ 6] 	jsr df_tk_put_tok
d9bb : a901             [ 2] 	lda #1
d9bd : 4ca0d8           [ 3] 	jmp df_tk_proc
                             
                             
                             ;****************************************
                             ;* Parse a command
                             ;* Do not fatal error if this fails
                             ;****************************************
d9c0 :                       df_tk_parse_command
                             	; only looking for keywords
d9c0 : a901             [ 2] 	lda #DFTK_KW
d9c2 : 2080da           [ 6] 	jsr df_tk_matchtok
                             	; if didn't find regular keywords then try non f
d9c5 : b010             [ 3] 	bcs df_tk_parse_command_err
                             	; if match then store token in the line buffer
                             	; Set MSB
d9c7 : 0980             [ 2] 	ora #0x80
d9c9 : 2022d7           [ 6] 	jsr df_tk_put_tok
                             	; call the parser to do tokenise based on the st
d9cc : a583             [ 3] 	lda df_symoff
d9ce : 2052da           [ 6] 	jsr df_tk_exec_parser
d9d1 : b004             [ 3] 	bcs df_tk_parse_command_err
                             	; [1] ignore white space but keep it
d9d3 : 2073d7           [ 6] 	jsr df_tk_skip_ws
                             	; No error in parsing this command
d9d6 :                       df_tk_parse_command_done
d9d6 : 18               [ 2] 	clc
d9d7 :                       df_tk_parse_command_err
d9d7 : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* lexer
                             ;****************************************
d9d8 :                       df_lexer_line
d9d8 : a900             [ 2] 	lda #0
                             	; start at the beginning of the line buffer
d9da : 857c             [ 3] 	sta df_linoff
                             	; start at the beginning of the tokenised buffer
d9dc : 857d             [ 3] 	sta df_tokoff
                             	; set current line to the token buffer
d9de : a980             [ 2] 	lda #lo(df_tokbuff)
d9e0 : 8586             [ 3] 	sta df_currlin
d9e2 : a904             [ 2] 	lda #hi(df_tokbuff)
d9e4 : 8587             [ 3] 	sta df_currlin+1
                             	; Set the line length to 0
d9e6 : a900             [ 2] 	lda #0
d9e8 : 2022d7           [ 6] 	jsr df_tk_put_tok
                             
AS65 Assembler for R6502 [1.42].                                     Page  155
-------------------------------- bank\bank0.s --------------------------------

                             	; any leading white space, ignore and discard
                             ;	jsr df_tk_strip_ws
                             
                             	; if peek next character is a number then assume
                             	; else assume a statement
d9eb : 2011d7           [ 6] 	jsr df_tk_peek_buf
d9ee : 2030d7           [ 6] 	jsr df_tk_isdigit
d9f1 : 9006             [ 3] 	bcc df_lexer_skip_lnum
                             	; if line number then capture the line number an
d9f3 : 2061da           [ 6] 	jsr df_tk_linenum
d9f6 : 4c01da           [ 3] 	jmp df_tk_body
d9f9 :                       df_lexer_skip_lnum
                             	; if no line number then zero out the line numbe
                             	; line zero will indicate an immediate mode comm
d9f9 : a900             [ 2] 	lda #0
d9fb : 2022d7           [ 6] 	jsr df_tk_put_tok				; Line num low byte
d9fe : 2022d7           [ 6] 	jsr df_tk_put_tok				; Line num high byte
da01 :                       df_tk_body
                             	; Offset for next statement
da01 : a57d             [ 3] 	lda df_tokoff
da03 : 857f             [ 3] 	sta df_nxtstidx
da05 : a900             [ 2] 	lda #0
da07 : 2022d7           [ 6] 	jsr df_tk_put_tok				; Offset to next statement
da0a : 2011d7           [ 6] 	jsr df_tk_peek_buf				; Check for a single space
da0d : 2082d7           [ 6] 	jsr df_tk_isws					; and first character
da10 : 9002             [ 3] 	bcc df_tk_skip_1_spc
da12 : e67c             [ 5] 	inc df_linoff					; Don't tokenise this single s
da14 :                       df_tk_skip_1_spc
                             	; [1] capture white space from line buffer in to
da14 : 2073d7           [ 6] 	jsr df_tk_skip_ws
                             	; If next non ws is zero then this is an empty l
                             	; so return with length zero but line number fil
                             	; token buffer
da17 : c900             [ 2] 	cmp #0
da19 : f033             [ 3] 	beq df_tk_line_empty
                             	; if next char is _ then parse a user defined pr
da1b : 206dd7           [ 6] 	jsr df_tk_isproc
da1e : 9006             [ 3] 	bcc df_tk_try_command
da20 : 20b6d9           [ 6] 	jsr df_tk_parse_user_proc
da23 : 4c30da           [ 3] 	jmp df_tk_done
da26 :                       df_tk_try_command
                             	; try  a keyword
da26 : 20c0d9           [ 6] 	jsr df_tk_parse_command
                             ;	bcs	df_tk_try_assign
da29 : 9005             [ 3] 	bcc df_tk_done
da2b :                       df_tk_try_assign
                             	; nothing but to try an assignment operation
da2b : 20ecdd           [ 6] 	jsr df_tk_assign
da2e : b020             [ 3] 	bcs	df_tk_parseerror
da30 :                       df_tk_done
                             	; put statement index stuff here in case of mult
                             	; check for : and if present tokenise plus updat
                             	; then go back to try and process another statem
da30 : 20a6d9           [ 6] 	jsr df_tk_isEOS
da33 : b0cc             [ 3] 	bcs df_tk_body
                             	; if not at end of line, then must be error
da35 : 2011d7           [ 6] 	jsr df_tk_peek_buf
da38 : c900             [ 2] 	cmp #0
da3a : d014             [ 3] 	bne df_tk_parseerror
                             	; this is the position of the next line
da3c : a57d             [ 3] 	lda df_tokoff
                             	; put it in the last statement offset slot
AS65 Assembler for R6502 [1.42].                                     Page  156
-------------------------------- bank\bank0.s --------------------------------

da3e : a47f             [ 3] 	ldy df_nxtstidx
da40 : 998004           [ 5] 	sta df_tokbuff,y
                             	; Get line length
da43 : a47d             [ 3] 	ldy df_tokoff
                             	; ensure there is always a zero after the last t
                             	; A is already zero
da45 : a900             [ 2] 	lda #0
da47 : 998004           [ 5] 	sta df_tokbuff,y
                             	; save the line length
da4a : 98               [ 2] 	tya
da4b : 8d8004           [ 4] 	sta df_tokbuff
da4e :                       df_tk_line_empty
da4e : 18               [ 2] 	clc
da4f : 60               [ 6] 	rts
da50 :                       df_tk_parseerror
                             	SWBRK DFERR_SYNTAX
                             
                             
                             ;****************************************
                             ;* df_tk_parsestatement
                             ;* Execute parse routine for this statement
                             ;* Input: df_tokoff is the token found
                             ;* Return: CC = Parsed ok, CS = Error
                             ;****************************************
da52 :                       df_tk_exec_parser
da52 : 0a               [ 2] 	asl a
da53 : aa               [ 2] 	tax
da54 : bda0dc           [ 4] 	lda df_tk_tokenjmp,x
da57 : 85a1             [ 3] 	sta df_tmpptra
da59 : bda1dc           [ 4] 	lda df_tk_tokenjmp+1,x
da5c : 85a2             [ 3] 	sta df_tmpptra+1
da5e : 6ca100           [ 6] 	jmp (df_tmpptra)
                             
                             
                             ;****************************************
                             ;* df_tk_linenum
                             ;* Tokenise line number
                             ;****************************************
da61 :                       df_tk_linenum
                             	; Convert line number to 16 bit number
                             	; Save the line number
                             	; Increment the buffer pointer
da61 : 18               [ 2] 	clc
da62 : a900             [ 2] 	lda #lo(df_linbuff)
da64 : 657c             [ 3] 	adc df_linoff
da66 : aa               [ 2] 	tax
da67 : a904             [ 2] 	lda #hi(df_linbuff)
da69 : 6900             [ 2] 	adc #0
da6b : a001             [ 2] 	ldy #1			; Decimal format only
da6d : 20cbc1           [ 6] 	jsr con_n_to_a
da70 : 18               [ 2] 	clc
da71 : 8a               [ 2] 	txa
da72 : 657c             [ 3] 	adc df_linoff
da74 : 857c             [ 3] 	sta df_linoff
                             	; Now save line number
da76 : a53d             [ 3] 	lda num_a
da78 : 2022d7           [ 6] 	jsr df_tk_put_tok
da7b : a53e             [ 3] 	lda num_a+1
da7d : 4c22d7           [ 3] 	jmp df_tk_put_tok
                             
                             ;****************************************
                             ;* df_tk_matchtok
AS65 Assembler for R6502 [1.42].                                     Page  157
-------------------------------- bank\bank0.s --------------------------------

                             ;* Try and find a token match against the table d
                             ;* Input:
                             ;*			Current df_linbuff and df_linoff
                             ;* Return: 	CC = No Error, CS = Error
                             ;*			df_linoff points to next char if CC else unc
                             ;*			df_symoff is the symbol table index
                             ;****************************************
da80 :                       df_tk_matchtok
                             	; save the mask to check types against
da80 : 48               [ 3] 	pha
                             	; Start at token symbols beginning
da81 : a902             [ 2] 	lda #lo(df_tokensyms)
da83 : 8581             [ 3] 	sta df_symtab
da85 : a9db             [ 2] 	lda #hi(df_tokensyms)
da87 : 8582             [ 3] 	sta df_symtab+1
da89 : a900             [ 2] 	lda #0
da8b : 8583             [ 3] 	sta df_symoff
da8d :                       df_tk_checknexttok
                             	; check this token type first
da8d : 68               [ 4] 	pla
da8e : 48               [ 3] 	pha
da8f : a683             [ 3] 	ldx df_symoff
da91 : 3d68dd           [ 4] 	and df_tk_tokentype,x
da94 : f032             [ 3] 	beq df_tk_symnomatch
                             	; Special check for operator token
                             	; because of order of precedence fudge
                             	; ******FIX THIS ONE DAY!!!!!!******
                             	; if parm and token type = DFTK_OP then ok
                             	; if parm and token type <> DFTK_OP then not ok
da96 : bd68dd           [ 4] 	lda df_tk_tokentype,x
da99 : 2908             [ 2] 	and #DFTK_OP
da9b : f009             [ 3] 	beq df_tk_matchtok_skip_op
da9d : 68               [ 4] 	pla
da9e : 48               [ 3] 	pha
da9f : 2908             [ 2] 	and #DFTK_OP
daa1 : 3d68dd           [ 4] 	and df_tk_tokentype,x
daa4 : f022             [ 3] 	beq df_tk_symnomatch
daa6 :                       df_tk_matchtok_skip_op
                             	; From the line buffer current pointer
                             	; Check for a token match
daa6 : a47c             [ 3] 	ldy df_linoff
daa8 : a200             [ 2] 	ldx #0
daaa :                       df_tk_checktokch
                             	; Get symtable char
                             	; and mask off MSB
daaa : a181             [ 6] 	lda (df_symtab,x)
                             	; Save the value and mask off MSB
daac : 48               [ 3] 	pha
daad : 297f             [ 2] 	and #0x7f
                             	; Compare with current line buffer char
daaf : d90004           [ 4] 	cmp df_linbuff,y
                             	; If chars not match then this symbol fails
dab2 : d013             [ 3] 	bne df_tk_symnomatchp
                             	; If match and symbol has MSB then
                             	; all of the symbol matched
dab4 : 68               [ 4] 	pla
dab5 : 3033             [ 3] 	bmi df_tk_symfound
                             	; else more chars to match
                             	; so increment line buffer pointers
                             	_incZPWord df_symtab
                             
dabd : c8               [ 2] 	iny
AS65 Assembler for R6502 [1.42].                                     Page  158
-------------------------------- bank\bank0.s --------------------------------

                             	; If buffer is '.' then let this be a match
dabe : b90004           [ 4] 	lda df_linbuff,y
dac1 : c92e             [ 2] 	cmp #'.'
dac3 : f025             [ 3] 	beq df_tk_symfound
dac5 : d0e3             [ 3] 	bne df_tk_checktokch	; branch always
dac7 :                       df_tk_symnomatchp
dac7 : 68               [ 4] 	pla
dac8 :                       df_tk_symnomatch
                             	; Increment symbol counter to next symbol
dac8 : e683             [ 5] 	inc df_symoff
daca :                       df_tk_symnextentry
daca : a200             [ 2] 	ldx #0
dacc : a181             [ 6] 	lda (df_symtab,x)
                             	; End of symbol is MSB
dace : 3009             [ 3] 	bmi  df_tk_foundsymend
                             	_incZPWord df_symtab
                             
dad6 : 4ccada           [ 3] 	jmp df_tk_symnextentry
dad9 :                       df_tk_foundsymend
                             	; Increment char to point to new symbol
                             	; for matching with line buffer
                             	_incZPWord df_symtab
                             
                             	; If next char is not zero then
                             	; try and match with line buffer
dadf : a181             [ 6] 	lda (df_symtab,x)
dae1 : d0aa             [ 3] 	bne df_tk_checknexttok
                             	; else symbol table exhausted
                             	; so no match found
                             	; pop mask off stack
dae3 : 68               [ 4] 	pla
                             	; Zero symbol counter
dae4 : a900             [ 2] 	lda #0
dae6 : 8583             [ 3] 	sta df_symoff
                             	; Set C to indicate error (no match)
dae8 : 38               [ 2] 	sec
dae9 : 60               [ 6] 	rts
daea :                       df_tk_symfound
                             	; Full match with keyword in symtable but
                             	; if matching with something that ended in alpha
                             	; then check the next buffer char is not alphanu
                             	; as this could be part of a variable name
                             	; Point to next buffer char in any case
daea : c8               [ 2] 	iny
                             	; First mask off MSB
daeb : 297f             [ 2] 	and #0x7f
                             	; Then check if alpha
daed : 205ad7           [ 6] 	jsr df_tk_isalpha
                             	; if not alpha then we're definitely done
daf0 : 9008             [ 3] 	bcc df_tk_symfound_final
                             	; else check buffer
daf2 : b90004           [ 4] 	lda df_linbuff,y
                             	; if it is an alphanum then
daf5 : 2067d7           [ 6] 	jsr df_tk_isalphanum
                             	; do not count as a match
daf8 : b0ce             [ 3] 	bcs df_tk_symnomatch
dafa :                       df_tk_symfound_final
                             	; pop mask off stack
dafa : 68               [ 4] 	pla
                             	; Save line buffer pointer (points to next char)
                             	; Clear C to indicate success (match)
dafb : 847c             [ 3] 	sty df_linoff
AS65 Assembler for R6502 [1.42].                                     Page  159
-------------------------------- bank\bank0.s --------------------------------

dafd : a583             [ 3] 	lda df_symoff
daff : aa               [ 2] 	tax
db00 : 18               [ 2] 	clc
db01 : 60               [ 6] 	rts
                             
                             	include "dflat/tksymtab.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  TKSYMTAB.S
                             ;*  Runtime token jump table.
                             ;*  dflat uses four key tables to tokenise and ru
                             ;*  - df_tokensyms    - table of token symbols
                             ;*  - df_tk_tokentype - table of token types
                             ;*  - df_tk_tokenjmp  - table of tokenising routi
                             ;*  - df_rt_tokenjmp  - table of runtime routines
                             ;*  The key is the token symbols.  When a line is
                             ;*  in to the raw (untokenised) buffer, df_tokens
                             ;*  used to identify tokens.  The position of the
                             ;*  token is used to then look up type and jump v
                             ;*  in the other tables.
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code  
                             
                             ; Statement Token table
                             ; keywords
db02 :                       df_tokensyms
db02 : 80                    	db	0x80						; Implicit numeric assign
db03 : 80                    	db	0x80						; Implicit call procedure
db04 : bb                    	db	";"+0x80					; Comment
db05 : 7072696e746cee        	db	"printl",'n'+0x80			; println exprlist
db0c : 7072696e7461f4        	db	"printa",'t'+0x80			; printat x,y,exprlist
db13 : 7072696ef4            	db	"prin",'t'+0x80				; print exprlist
db18 : 6465e6                	db	"de",'f'+0x80				; def_subname
db1b : 656e646465e6          	db	"endde",'f'+0x80			; enddef
db21 : 7265747572ee          	db	"retur",'n'+0x80			; return
db27 : 61626f72f4            	db	"abor",'t'+0x80				; abort
db2c : 6c6f6361ec            	db	"loca",'l'+0x80				; local varlist
db31 : 6469ed                	db	"di",'m'+0x80				; dim varlist
db34 : 7265706561f4          	db	"repea",'t'+0x80			; repeat
db3a : 756e7469ec            	db	"unti", 'l'+0x80			; until condition
db3f : 666ff2                	db	"fo",'r'+0x80				; for var=start,end,incremen
db42 : 6e6578f4              	db	"nex",'t'+0x80				; next
db46 : 7768696ce5            	db	"whil",'e'+0x80				; while condition
db4b : 77656ee4              	db	"wen",'d'+0x80				; wend
db4f : 69e6                  	db	"i",'f'+0x80				; if condition
db51 : 656c73e5              	db	"els",'e'+0x80				; else
db55 : 656e6469e6            	db	"endi",'f'+0x80				; endif
db5a : 656c69e6              	db	"eli",'f'+0x80				; elif condition
db5e : 646174e1              	db	"dat",'a'+0x80				; data
db62 : ae                    	db	'.'+0x80					; assembler command
db63 : 7275ee                	db	"ru",'n'+0x80				; run
db66 : 6c6973f4              	db	"lis",'t'+0x80				; list _proc-|*|line,line
db6a : 696e7075f4            	db	"inpu",'t'+0x80				; input var
AS65 Assembler for R6502 [1.42].                                     Page  160
-------------------------------- bank\bank0.s --------------------------------

db6f : 746578f4              	db	"tex",'t'+0x80				; text
db73 : 706c6ff4              	db	"plo",'t'+0x80				; plot x,y,char|string
db77 : 637572736ff2          	db	"curso",'r'+0x80			; cursor n
db7d : 636cf3                	db	"cl",'s'+0x80				; cls
db80 : 706f6be5              	db	"pok",'e'+0x80				; poke a,v
db84 : 646f6be5              	db	"dok",'e'+0x80				; doke a,v
db88 : 736f756ee4            	db	"soun",'d'+0x80				; sound
db8d : 6d757369e3            	db	"musi",'c'+0x80				; music
db92 : 706c61f9              	db	"pla",'y'+0x80				; play
db96 : 736176e5              	db	"sav",'e'+0x80				; save "fname"
db9a : 6c6f61e4              	db	"loa",'d'+0x80				; load "fname"
db9e : 726561e4              	db	"rea",'d'+0x80				; read
dba2 : 6e65f7                	db	"ne",'w'+0x80				; new
dba5 : 72656e75ed            	db	"renu",'m'+0x80				; renum start,offset,incre
dbaa : 776169f4              	db	"wai",'t'+0x80				; wait delay
dbae : 72657365f4            	db	"rese",'t'+0x80				; reset var
dbb3 : 68697265f3            	db	"hire",'s'+0x80				; hires col
dbb8 : 706f696ef4            	db	"poin",'t'+0x80				; point x,y
dbbd : 6c696ee5              	db	"lin",'e'+0x80				; line x0,y0,x1,y1
dbc1 : 6c696e6574ef          	db	"linet",'o'+0x80			; lineto x1,y1
dbc7 : 7069786d6f64e5        	db	"pixmod",'e'+0x80			; pixmode n
dbce : 696eeb                	db	"in",'k'+0x80				; ink n
dbd1 : 70617065f2            	db	"pape",'r'+0x80				; paper n
dbd6 : 636972636ce5          	db	"circl",'e'+0x80			; circle x,y,r
                             ;	db	"fil",'l'+0x80				; fill x,y,w,h,v
dbdc : 68696d65ed            	db	"hime",'m'+0x80				; himem addr
dbe1 : 6d6f6e69746ff2        	db	"monito",'r'+0x80			; monitor
dbe8 : 737072636861f2        	db	"sprcha",'r'+0x80			; sprchar sp,ch
dbef : 737072706ff3          	db	"sprpo",'s'+0x80			; sprpos sp,x,y
dbf5 : 7370727570e4          	db	"sprup",'d'+0x80			; sprupd
dbfb : 737072696e69f4        	db	"sprini",'t'+0x80			; sprinit
dc02 : 7370726d756c74e9      	db	"sprmult",'i'+0x80			; sprmulti x[],y[]
dc0a : 62736176e5            	db	"bsav",'e'+0x80				; bsave addr,len,"fname"
dc0f : 626c6f61e4            	db	"bloa",'d'+0x80				; bload addr,"fname"
dc14 : 74736176e5            	db	"tsav",'e'+0x80				; tsave "fname"
dc19 : 746c6f61e4            	db	"tloa",'d'+0x80				; tload "fname"
                             ; Functions
dc1e : 7065656ba8            	db	"peek",'('+0x80				; peek(x)
dc23 : 6465656ba8            	db	"deek",'('+0x80				; peek(x)
dc28 : 737469636ba8          	db	"stick",'('+0x80			; stick(x)
dc2e : 676574a8              	db	"get",'('+0x80				; get(x)
dc32 : 636872a8              	db	"chr",'('+0x80				; chr(x)
dc36 : 6c656674a8            	db	"left",'('+0x80				; left(x$,y)
dc3b : 7269676874a8          	db	"right",'('+0x80			; right(x$,y)
dc41 : 6d6964a8              	db	"mid",'('+0x80				; mid(x$,y)
dc45 : 6c656ea8              	db	"len",'('+0x80				; len(x$)
dc49 : 6d656da8              	db	"mem",'('+0x80				; mem(x)
dc4d : 7363726ea8            	db	"scrn",'('+0x80				; scrn(x,y)
dc52 : 726e64a8              	db	"rnd",'('+0x80				; rnd(x)
dc56 : 656c6170736564a8      	db	"elapsed",'('+0x80			; elapsed(var)
dc5e : 63616c6ca8            	db	"call",'('+0x80				; call(addr,A,X,Y)
dc63 : 686578a8              	db	"hex",'('+0x80				; hex(x)
dc67 : 646563a8              	db	"dec",'('+0x80				; dec(x)
dc6b : 617363a8              	db	"asc",'('+0x80				; asc(x$)
dc6f : 76616ca8              	db	"val",'('+0x80				; val(x$)
dc73 : 706978656ca8          	db	"pixel",'('+0x80			; pixel(x,y)
dc79 : 737072686974a8        	db	"sprhit",'('+0x80			; sprhit(sp)
dc80 : 73676ea8              	db	"sgn",'('+0x80				; sgn(x)
dc84 : 61646472a8            	db	"addr",'('+0x80				; addr(var)
                             ; Numeric operators, in priority
dc89 : aa                    	db	'*'+0x80					; Multiply
dc8a : af                    	db 	'/'+0x80					; Divide
AS65 Assembler for R6502 [1.42].                                     Page  161
-------------------------------- bank\bank0.s --------------------------------

dc8b : dc                    	db 	'\\'+0x80					; Modulus
dc8c : 3cbc                  	db	'<','<'+0x80				; Shift left
dc8e : 3ebe                  	db	'>','>'+0x80				; Shift right
dc90 : ab                    	db 	'+'+0x80					; Add
dc91 : ad                    	db	'-'+0x80					; Subtract
                             ; Bool and conditional operators, in priority
dc92 : a6                    	db '&'+0x80						; AND
dc93 : fc                    	db '|'+0x80						; OR
dc94 : de                    	db '^'+0x80						; EOR
dc95 : 3cbd                  	db "<",'='+0x80					; Less than or equal
dc97 : 3ebd                  	db ">",'='+0x80					; Greater than or equal
dc99 : 3cbe                  	db "<",'>'+0x80					; Not equal
dc9b : bc                    	db '<'+0x80						; Less than
dc9c : be                    	db '>'+0x80						; Greater than
dc9d : 3dbd                  	db "=",'='+0x80					; Equality (always last)
                             
dc9f : 00                    	db  0
                             
                             
                             	
                             	
                             	include "dflat/tkjmptab.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  TKJUMPTAB.S
                             ;*  Runtime token jump table.
                             ;*  dflat uses four key tables to tokenise and ru
                             ;*  - df_tokensyms    - table of token symbols
                             ;*  - df_tk_tokentype - table of token types
                             ;*  - df_tk_tokenjmp  - table of tokenising routi
                             ;*  - df_rt_tokenjmp  - table of runtime routines
                             ;*  The key is the token symbols.  When a line is
                             ;*  in to the raw (untokenised) buffer, df_tokens
                             ;*  used to identify tokens.  The position of the
                             ;*  token is used to then look up type and jump v
                             ;*  in the other tables.
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code  
                             
                             ; Tokeniser jump table
                             ; In token order of df_tokensyms
dca0 :                       df_tk_tokenjmp
dca0 : ecdd                  	dw	df_tk_assign
dca2 : a3de                  	dw	df_tk_callproc
dca4 : f5dd                  	dw	df_tk_comment
dca6 : 3cde                  	dw	df_tk_println
dca8 : 36de                  	dw	df_tk_printat
dcaa : 3cde                  	dw	df_tk_print
dcac : 87de                  	dw	df_tk_def
dcae : dcde                  	dw	df_tk_enddef
dcb0 : dede                  	dw	df_tk_return
dcb2 : dcde                  	dw	df_tk_abort
dcb4 : 78de                  	dw	df_tk_local
AS65 Assembler for R6502 [1.42].                                     Page  162
-------------------------------- bank\bank0.s --------------------------------

dcb6 : 69de                  	dw	df_tk_dim
dcb8 : dcde                  	dw	df_tk_repeat
dcba : e1de                  	dw	df_tk_until
dcbc : 8cde                  	dw	df_tk_for
dcbe : dcde                  	dw	df_tk_next
dcc0 : e1de                  	dw	df_tk_while
dcc2 : dcde                  	dw	df_tk_wend
dcc4 : e1de                  	dw	df_tk_if
dcc6 : dcde                  	dw	df_tk_else
dcc8 : dcde                  	dw	df_tk_endif
dcca : e1de                  	dw	df_tk_elseif
dccc : 43de                  	dw	df_tk_data
dcce : fff8                  	dw	df_tk_asm_parse_command
dcd0 : dcde                  	dw	df_tk_run
dcd2 : 25de                  	dw	df_tk_list
dcd4 : 51de                  	dw	df_tk_input
dcd6 : dcde                  	dw	df_tk_text
dcd8 : f1de                  	dw	df_tk_plot
dcda : e1de                  	dw	df_tk_cursor
dcdc : dcde                  	dw	df_tk_cls
dcde : e7de                  	dw	df_tk_poke
dce0 : e7de                  	dw	df_tk_doke
dce2 : f1de                  	dw	df_tk_sound
dce4 : f9de                  	dw	df_tk_music
dce6 : f9de                  	dw	df_tk_play
dce8 : e1de                  	dw	df_tk_save
dcea : e1de                  	dw	df_tk_load
dcec : 5ade                  	dw	df_tk_read
dcee : dcde                  	dw	df_tk_new
dcf0 : f1de                  	dw	df_tk_renum
dcf2 : e1de                  	dw	df_tk_wait
dcf4 : a5de                  	dw	df_tk_reset
dcf6 : dcde                  	dw	df_tk_hires
dcf8 : e7de                  	dw	df_tk_point
dcfa : f9de                  	dw	df_tk_line
dcfc : e7de                  	dw	df_tk_lineto
dcfe : e1de                  	dw	df_tk_pixmode
dd00 : e1de                  	dw	df_tk_ink
dd02 : e1de                  	dw	df_tk_paper
dd04 : f1de                  	dw	df_tk_circle
                             ;	dw	df_tk_fill
dd06 : e1de                  	dw	df_tk_himem
dd08 : dcde                  	dw	df_tk_monitor
dd0a : e7de                  	dw	df_tk_sprchar
dd0c : f1de                  	dw	df_tk_sprpos
dd0e : dcde                  	dw	df_tk_sprupd
dd10 : dcde                  	dw	df_tk_sprinit
dd12 : e7de                  	dw	df_tk_sprmulti
dd14 : f1de                  	dw	df_tk_bsave
dd16 : e7de                  	dw	df_tk_bload
dd18 : e1de                  	dw	df_tk_tsave
dd1a : e1de                  	dw	df_tk_tload
                             	
dd1c : afde                  	dw	df_tk_peek
dd1e : afde                  	dw	df_tk_deek
dd20 : b4de                  	dw	df_tk_stick
dd22 : afde                  	dw	df_tk_get
dd24 : afde                  	dw	df_tk_chr
dd26 : c2de                  	dw	df_tk_left
dd28 : c2de                  	dw	df_tk_right
dd2a : c8de                  	dw	df_tk_mid
dd2c : afde                  	dw	df_tk_len
AS65 Assembler for R6502 [1.42].                                     Page  163
-------------------------------- bank\bank0.s --------------------------------

dd2e : afde                  	dw	df_tk_mem
dd30 : c2de                  	dw	df_tk_scrn
dd32 : afde                  	dw	df_tk_rnd
dd34 : b9de                  	dw	df_tk_elapsed
dd36 : cede                  	dw	df_tk_call
dd38 : afde                  	dw	df_tk_hex
dd3a : afde                  	dw	df_tk_dec
dd3c : afde                  	dw	df_tk_asc
dd3e : afde                  	dw	df_tk_val
dd40 : c2de                  	dw	df_tk_pixel
dd42 : afde                  	dw	df_tk_sprhit
dd44 : afde                  	dw	df_tk_sgn
dd46 : b9de                  	dw	df_tk_addr
                             	
dd48 : dcde                  	dw	df_tk_mult
dd4a : dcde                  	dw	df_tk_div
dd4c : dcde                  	dw	df_tk_mod
dd4e : dcde                  	dw	df_tk_asl
dd50 : dcde                  	dw	df_tk_lsr
dd52 : dcde                  	dw	df_tk_add
dd54 : dcde                  	dw	df_tk_sub
                             	
dd56 : dcde                  	dw	df_tk_and
dd58 : dcde                  	dw	df_tk_or
dd5a : dcde                  	dw	df_tk_eor
dd5c : dcde                  	dw	df_tk_lte
dd5e : dcde                  	dw	df_tk_gte
dd60 : dcde                  	dw	df_tk_ne
dd62 : dcde                  	dw	df_tk_lt
dd64 : dcde                  	dw	df_tk_gt
dd66 : dcde                  	dw	df_tk_eq
                             
                             
                             	
                             	
                             	
                             	
                             	
                             	include "dflat/tktyptab.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  RTJUMPTAB.S
                             ;*  Runtime token jump table.
                             ;*  dflat uses four key tables to tokenise and ru
                             ;*  - df_tokensyms    - table of token symbols
                             ;*  - df_tk_tokentype - table of token types
                             ;*  - df_tk_tokenjmp  - table of tokenising routi
                             ;*  - df_rt_tokenjmp  - table of runtime routines
                             ;*  The key is the token symbols.  When a line is
                             ;*  in to the raw (untokenised) buffer, df_tokens
                             ;*  used to identify tokens.  The position of the
                             ;*  token is used to then look up type and jump v
                             ;*  in the other tables.
                             ;*
                             ;************************************************
                             
AS65 Assembler for R6502 [1.42].                                     Page  164
-------------------------------- bank\bank0.s --------------------------------

                             	; ROM code
                             	code  
                             
                             ; Tokeniser type table (is it a keyword, function
                             ; In token order of df_tokensyms
dd68 :                       df_tk_tokentype
dd68 : 01                    	db	DFTK_KW
dd69 : 01                    	db	DFTK_KW
dd6a : 01                    	db	DFTK_KW
dd6b : 01                    	db	DFTK_KW
dd6c : 01                    	db	DFTK_KW
dd6d : 01                    	db	DFTK_KW
dd6e : 01                    	db	DFTK_KW
dd6f : 01                    	db	DFTK_KW
dd70 : 01                    	db	DFTK_KW
dd71 : 01                    	db	DFTK_KW
dd72 : 01                    	db	DFTK_KW
dd73 : 01                    	db	DFTK_KW
dd74 : 01                    	db	DFTK_KW
dd75 : 01                    	db	DFTK_KW
dd76 : 01                    	db	DFTK_KW
dd77 : 01                    	db	DFTK_KW
dd78 : 01                    	db	DFTK_KW
dd79 : 01                    	db	DFTK_KW
dd7a : 01                    	db	DFTK_KW
dd7b : 01                    	db	DFTK_KW
dd7c : 01                    	db	DFTK_KW
dd7d : 01                    	db	DFTK_KW
dd7e : 01                    	db	DFTK_KW
dd7f : 01                    	db	DFTK_KW
dd80 : 01                    	db	DFTK_KW
dd81 : 01                    	db	DFTK_KW
dd82 : 01                    	db	DFTK_KW
dd83 : 01                    	db	DFTK_KW
dd84 : 01                    	db	DFTK_KW
dd85 : 01                    	db	DFTK_KW
dd86 : 01                    	db	DFTK_KW
dd87 : 01                    	db	DFTK_KW
dd88 : 01                    	db	DFTK_KW
dd89 : 01                    	db	DFTK_KW
dd8a : 01                    	db	DFTK_KW
dd8b : 01                    	db	DFTK_KW
dd8c : 01                    	db	DFTK_KW
dd8d : 01                    	db	DFTK_KW
dd8e : 01                    	db	DFTK_KW
dd8f : 01                    	db	DFTK_KW
dd90 : 01                    	db	DFTK_KW
dd91 : 01                    	db	DFTK_KW
dd92 : 01                    	db	DFTK_KW
dd93 : 01                    	db	DFTK_KW
dd94 : 01                    	db	DFTK_KW
dd95 : 01                    	db	DFTK_KW
dd96 : 01                    	db	DFTK_KW
dd97 : 01                    	db	DFTK_KW
dd98 : 01                    	db	DFTK_KW
dd99 : 01                    	db	DFTK_KW
dd9a : 01                    	db	DFTK_KW
                             ;	db	DFTK_KW
dd9b : 01                    	db	DFTK_KW
dd9c : 01                    	db	DFTK_KW
dd9d : 01                    	db	DFTK_KW
dd9e : 01                    	db	DFTK_KW
AS65 Assembler for R6502 [1.42].                                     Page  165
-------------------------------- bank\bank0.s --------------------------------

dd9f : 01                    	db	DFTK_KW
dda0 : 01                    	db	DFTK_KW
dda1 : 01                    	db	DFTK_KW
dda2 : 01                    	db	DFTK_KW
dda3 : 01                    	db	DFTK_KW
dda4 : 01                    	db	DFTK_KW
dda5 : 01                    	db	DFTK_KW
                             
dda6 : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
dda7 : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
dda8 : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
dda9 : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
ddaa : 42                    	db 	DFTK_FN | DFTK_STR
ddab : 42                    	db 	DFTK_FN | DFTK_STR
ddac : 42                    	db 	DFTK_FN | DFTK_STR
ddad : 42                    	db 	DFTK_FN | DFTK_STR
ddae : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
ddaf : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
ddb0 : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
ddb1 : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
ddb2 : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
ddb3 : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
ddb4 : 42                    	db 	DFTK_FN | DFTK_STR
ddb5 : 42                    	db 	DFTK_FN | DFTK_STR
ddb6 : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
ddb7 : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
ddb8 : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
ddb9 : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
ddba : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
ddbb : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
                             	;* Operators add the order of precedence (0=high
ddbc : 38                    	db 	DFTK_OP | DFTK_INT | DFTK_BYT + 0
ddbd : 38                    	db 	DFTK_OP | DFTK_INT | DFTK_BYT + 0
ddbe : 38                    	db 	DFTK_OP | DFTK_INT | DFTK_BYT + 0
ddbf : 39                    	db 	DFTK_OP | DFTK_INT | DFTK_BYT + 1
ddc0 : 39                    	db 	DFTK_OP | DFTK_INT | DFTK_BYT + 1
ddc1 : 3e                    	db 	DFTK_OP | DFTK_STROP | DFTK_INT | DFTK_BYT +
ddc2 : 3a                    	db 	DFTK_OP | DFTK_INT | DFTK_BYT + 2
                             
ddc3 : 3d                    	db 	DFTK_OP | DFTK_INT | DFTK_BYT + 5
ddc4 : 3d                    	db 	DFTK_OP | DFTK_INT | DFTK_BYT + 5
ddc5 : 3d                    	db 	DFTK_OP | DFTK_INT | DFTK_BYT + 5
ddc6 : 3c                    	db 	DFTK_OP | DFTK_INT | DFTK_BYT + 4
ddc7 : 3c                    	db 	DFTK_OP | DFTK_INT | DFTK_BYT + 4
ddc8 : 3c                    	db 	DFTK_OP | DFTK_INT | DFTK_BYT + 4
ddc9 : 3c                    	db 	DFTK_OP | DFTK_INT | DFTK_BYT + 4
ddca : 3c                    	db 	DFTK_OP | DFTK_INT | DFTK_BYT + 4
ddcb : 3f                    	db 	DFTK_OP | DFTK_INT | DFTK_BYT + 7
                             
                             
                             	
                             	
                             	
                             	
                             
                             	include "dflat/toksubs.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
AS65 Assembler for R6502 [1.42].                                     Page  166
-------------------------------- bank\bank0.s --------------------------------

                             ;*  credit of original my authorship please!
                             ;*
                             ;*  TOKSUBS.S
                             ;*  Module that implements the tokenisation of ke
                             ;*  When a line is being parsed, the index of the
                             ;*  found in the symbol table is used to call a r
                             ;*  here.  The job of a routine here is then to f
                             ;*  parse the raw input e.g. a command that takes
                             ;*  parameters, need to do what it needs to ident
                             ;*  Despite the number of keywords in dflat, this
                             ;*  anywhere near the size of rtsubs.s (the runti
                             ;*  equivalent of this) because there is so much 
                             ;*  synactically.
                             ;*  The tokenised output is put in to its own buf
                             ;*  if the whole input was tokenised successfully
                             ;*  dflat will either try and execute (if in imme
                             ;*  mode), or save it to program memory in line n
                             ;*  order.
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code  
                             
ddcc :                       mod_sz_toksubs_s
                             
                             ;* General routine to tokenise a mandatory variab
ddcc :                       df_tk_variable
ddcc : 2073d7           [ 6] 	jsr df_tk_skip_ws
                             	; tokenise a variable
ddcf : 2011d7           [ 6] 	jsr df_tk_peek_buf
ddd2 : 205ad7           [ 6] 	jsr df_tk_isalpha
ddd5 : 9013             [ 3] 	bcc df_tk_error
ddd7 : a900             [ 2] 	lda #0
ddd9 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Parse assignment preamble
                             ;****************************************
ddda :                       df_tk_preassign
                             	; Put assignment token
                             	; assume its a numeric int for now
ddda : a980             [ 2] 	lda #0x80
dddc : 2022d7           [ 6] 	jsr df_tk_put_tok
                             	
                             	; first find or create a variable
dddf : 20ccdd           [ 6] 	jsr df_tk_variable
dde2 : 204dd8           [ 6] 	jsr df_tk_var
                             	; next char should be '='
dde5 : a93d             [ 2] 	lda #'='
dde7 : 4ca2d7           [ 3] 	jmp df_tk_expect_tok_err
                             
ddea :                       df_tk_error
                             	SWBRK DFERR_SYNTAX
                             
                             
                             ;****************************************
                             ;* Parse numeric assignment
                             ;****************************************
ddec :                       df_tk_assign
ddec : 20dadd           [ 6] 	jsr df_tk_preassign
                             	; tokenise an expression (int or byte)
AS65 Assembler for R6502 [1.42].                                     Page  167
-------------------------------- bank\bank0.s --------------------------------

ddef : 2094d9           [ 6] 	jsr df_tk_expression
ddf2 : b0f6             [ 3] 	bcs df_tk_error
ddf4 : 60               [ 6] 	rts
                             
ddf5 :                       df_tk_comment
                             	; copy all subsequent chars to token
ddf5 : 2017d7           [ 6] 	jsr df_tk_get_buf
ddf8 : f006             [ 4] 	beq df_tk_comment_done
ddfa : 2022d7           [ 6] 	jsr df_tk_put_tok
ddfd : 4cf5dd           [ 3] 	jmp df_tk_comment
de00 :                       df_tk_comment_done
de00 : 18               [ 2] 	clc
de01 : 60               [ 6] 	rts
                             
                             ; Utility to get procedure name with _
de02 :                       df_tk_listp_procname
                             	; try and find the first proc
de02 : a95f             [ 2] 	lda #'_'
de04 : 2097d7           [ 6] 	jsr df_tk_expect_tok
de07 : b01a             [ 3] 	bcs df_tk_listp_procname_err
                             	; now get first alpha then all alphanum
de09 : 2011d7           [ 6] 	jsr df_tk_peek_buf
de0c : 205ad7           [ 6] 	jsr df_tk_isalpha
de0f : 9012             [ 3] 	bcc df_tk_listp_procname_err
de11 :                       df_tk_listp_procname_ch
de11 : 2011d7           [ 6] 	jsr df_tk_peek_buf
de14 : 2067d7           [ 6] 	jsr df_tk_isalphanum
de17 : 9009             [ 3] 	bcc df_tk_listp_procname_ok
de19 : 2017d7           [ 6] 	jsr df_tk_get_buf
de1c : 2022d7           [ 6] 	jsr df_tk_put_tok
de1f : 4c11de           [ 3] 	jmp df_tk_listp_procname_ch
de22 :                       df_tk_listp_procname_ok
de22 : 60               [ 6] 	rts		; C=0
de23 :                       df_tk_listp_procname_err
de23 : 38               [ 2] 	sec
de24 : 60               [ 6] 	rts
                             
                             ; list		: list whole program
                             ; list n	: list line n to end
                             ; list *	: list all procedures
                             ; list _proc: list _proc lines
de25 :                       df_tk_list
de25 : 2002de           [ 6] 	jsr df_tk_listp_procname
de28 : 900b             [ 3] 	bcc df_tk_list_done
                             	; if not found try '*' or normal list
de2a :                       df_tk_list_procs
                             	; first try for list symbol
de2a : a92a             [ 2] 	lda #'*'
de2c : 2097d7           [ 6] 	jsr df_tk_expect_tok
de2f : 9004             [ 3] 	bcc df_tk_list_done
                             	; else normal line number or nothing
de31 :                       df_tk_list_line
                             	; tokenise an expression, nothing is ok
de31 : 2094d9           [ 6] 	jsr df_tk_expression
de34 : 18               [ 2] 	clc
de35 :                       df_tk_list_done
de35 : 60               [ 6] 	rts
                             
                             ; printat,print,println can have 0,1 or many expr
de36 :                       df_tk_printat
                             	; Must get 2 parms for x,y
de36 : 20e7de           [ 6] 	jsr df_tk_2parms
AS65 Assembler for R6502 [1.42].                                     Page  168
-------------------------------- bank\bank0.s --------------------------------

                             	; try getting more parms
de39 : 4c48de           [ 3] 	jmp df_tk_expr_more
de3c :                       df_tk_println
de3c :                       df_tk_print
                             	; tokenise an expression ok if null
de3c : 2094d9           [ 6] 	jsr df_tk_expression
de3f : 9007             [ 3] 	bcc df_tk_expr_more
de41 :                       df_tk_print_done
de41 :                       df_tk_data_done
de41 : 18               [ 2] 	clc
de42 : 60               [ 6] 	rts
                             
                             ; these must have 1 or more expressions
de43 :                       df_tk_data
de43 :                       df_tk_asm_db
de43 :                       df_tk_asm_dw
de43 :                       df_tk_next_expr
                             	; tokenise an expression
de43 : 2094d9           [ 6] 	jsr df_tk_expression
de46 : b065             [ 3] 	bcs df_tk_error2
                             ; this loop keeps processing comma seprated exore
de48 :                       df_tk_expr_more
                             	; is there more to come?
de48 : a92c             [ 2] 	lda #','
de4a : 2097d7           [ 6] 	jsr df_tk_expect_tok
de4d : b0f2             [ 3] 	bcs df_tk_data_done
de4f : 90f2             [ 3] 	bcc df_tk_next_expr
                             
de51 :                       df_tk_input
de51 : 2073d7           [ 6] 	jsr df_tk_skip_ws
                             	; tokenise a variable
de54 : 20ccdd           [ 6] 	jsr df_tk_variable
de57 : 4c4dd8           [ 3] 	jmp df_tk_var
                             	
de5a :                       df_tk_read
                             	; tokenise a variable
de5a : 20ccdd           [ 6] 	jsr df_tk_variable
de5d : 204dd8           [ 6] 	jsr df_tk_var
                             	; if not at the end then keep going
de60 : a92c             [ 2] 	lda #','
de62 : 2097d7           [ 6] 	jsr df_tk_expect_tok
de65 : 90f3             [ 3] 	bcc df_tk_read
de67 : 18               [ 2] 	clc
de68 : 60               [ 6] 	rts
                             
de69 :                       df_tk_dim
                             	; tokenise a variable
de69 : 20ccdd           [ 6] 	jsr df_tk_variable
de6c : 2095d8           [ 6] 	jsr df_tk_arrvar
                             	; if not at the end then keep going
de6f : a92c             [ 2] 	lda #','
de71 : 2097d7           [ 6] 	jsr df_tk_expect_tok
de74 : 90f3             [ 3] 	bcc df_tk_dim
de76 : 18               [ 2] 	clc
de77 : 60               [ 6] 	rts
                             
de78 :                       df_tk_local
                             	; tokenise a variable
de78 : 20ccdd           [ 6] 	jsr df_tk_variable
de7b : 207fd8           [ 6] 	jsr df_tk_localvar
                             	; if not at the end then keep going
de7e : a92c             [ 2] 	lda #','
AS65 Assembler for R6502 [1.42].                                     Page  169
-------------------------------- bank\bank0.s --------------------------------

de80 : 2097d7           [ 6] 	jsr df_tk_expect_tok
de83 : 90f3             [ 3] 	bcc df_tk_local
de85 : 18               [ 2] 	clc
de86 : 60               [ 6] 	rts
                             
                             ; A = 0 : Def
                             ; A = 1 : Call
de87 :                       df_tk_def
de87 : a900             [ 2] 	lda #0
de89 : 4ca0d8           [ 3] 	jmp df_tk_proc
                             
                             ; syntax : for a=1,10,1
de8c :                       df_tk_for
de8c : 2073d7           [ 6] 	jsr df_tk_skip_ws
                             
                             	; tokenise the for variable
de8f : a901             [ 2] 	lda #DFVVT_INT
de91 : 204dd8           [ 6] 	jsr df_tk_var
                             
                             	; always expect '='
                             	; then starting value
de94 : a93d             [ 2] 	lda #'='
de96 : 20a0d9           [ 6] 	jsr df_tk_tok_expression
                             	
                             	; always expect ',' separator
                             	; then ending value
de99 : a92c             [ 2] 	lda #','
de9b : 20a0d9           [ 6] 	jsr df_tk_tok_expression
                             
                             	; always expect ',' separator
                             	; then step value
de9e : a92c             [ 2] 	lda #','
dea0 : 4ca0d9           [ 3] 	jmp df_tk_tok_expression
                             
                             	
                             ; call to proc should not occur by itself
dea3 :                       df_tk_callproc
dea3 : 38               [ 2] 	sec
dea4 : 60               [ 6] 	rts
                             
                             ; timer reset expects an int variable only
dea5 :                       df_tk_reset
dea5 : 2073d7           [ 6] 	jsr df_tk_skip_ws
                             
                             	; tokenise a variable
dea8 : a901             [ 2] 	lda #DFVVT_INT
deaa : 4c4dd8           [ 3] 	jmp df_tk_var
                             
dead :                       df_tk_error2
                             	SWBRK DFERR_SYNTAX
                             
                             
                             ; These functions expect 1 parmeter
deaf :                       df_tk_len
deaf :                       df_tk_chr
deaf :                       df_tk_get
deaf :                       df_tk_deek
deaf :                       df_tk_vpeek
deaf :                       df_tk_peek
deaf :                       df_tk_mem
deaf :                       df_tk_rnd
deaf :                       df_tk_hex
AS65 Assembler for R6502 [1.42].                                     Page  170
-------------------------------- bank\bank0.s --------------------------------

deaf :                       df_tk_dec
deaf :                       df_tk_asc
deaf :                       df_tk_val
deaf :                       df_tk_sprhit
deaf :                       df_tk_sgn
deaf : 2094d9           [ 6] 	jsr df_tk_expression
deb2 : b0f9             [ 3] 	bcs df_tk_error2
deb4 :                       df_tk_closebrkt
deb4 :                       df_tk_stick				; This function needs no parms
deb4 : a929             [ 2] 	lda #')'
deb6 : 4ca2d7           [ 3] 	jmp df_tk_expect_tok_err
                             
                             ; These function expect a variable only
deb9 :                       df_tk_addr
deb9 :                       df_tk_elapsed
deb9 : 20ccdd           [ 6] 	jsr df_tk_variable
debc : 204dd8           [ 6] 	jsr df_tk_var
                             	; must have close braket
debf : 4cb4de           [ 3] 	jmp df_tk_closebrkt
                             
                             ; These functions expect 2 parameters
dec2 :                       df_tk_left
dec2 :                       df_tk_right
dec2 :                       df_tk_scrn
dec2 :                       df_tk_pixel
dec2 : 20e7de           [ 6] 	jsr df_tk_2parms
dec5 : 4cb4de           [ 3] 	jmp df_tk_closebrkt
                             
                             ; These functions expect 3 parameters
dec8 :                       df_tk_mid
dec8 : 20f1de           [ 6] 	jsr df_tk_3parms
decb : 4cb4de           [ 3] 	jmp df_tk_closebrkt
                             
                             ; These functions expect 4 parameters
dece :                       df_tk_call
dece : 20e7de           [ 6] 	jsr df_tk_2parms
ded1 : a92c             [ 2] 	lda #','
ded3 : 20a2d7           [ 6] 	jsr df_tk_expect_tok_err
ded6 : 20e7de           [ 6] 	jsr df_tk_2parms
ded9 : 4cb4de           [ 3] 	jmp df_tk_closebrkt
                             
                             ;all these commands require no parameters
dedc :                       df_tk_else
dedc :                       df_tk_endif
dedc :                       df_tk_enddef
dedc :                       df_tk_abort
dedc :                       df_tk_repeat
dedc :                       df_tk_next
dedc :                       df_tk_wend
dedc :                       df_tk_run
dedc :                       df_tk_dir
dedc :                       df_tk_cls
dedc :                       df_tk_new
dedc :                       df_tk_mult
dedc :                       df_tk_div
dedc :                       df_tk_mod
dedc :                       df_tk_asl
dedc :                       df_tk_lsr
dedc :                       df_tk_add
dedc :                       df_tk_sub
dedc :                       df_tk_and
dedc :                       df_tk_or
AS65 Assembler for R6502 [1.42].                                     Page  171
-------------------------------- bank\bank0.s --------------------------------

dedc :                       df_tk_eor
dedc :                       df_tk_lte
dedc :                       df_tk_lt
dedc :                       df_tk_gte
dedc :                       df_tk_gt
dedc :                       df_tk_ne
dedc :                       df_tk_eq
dedc :                       df_tk_monitor
dedc :                       df_tk_sprupd
dedc :                       df_tk_sprinit
dedc :                       df_tk_text
dedc :                       df_tk_hires
dedc : 18               [ 2] 	clc
dedd : 60               [ 6] 	rts
                             
                             ; 0 or 1 parameter special!
dede :                       df_tk_return
dede : 4c94d9           [ 3] 	jmp df_tk_expression
                             
                             
                             ; These commands expect 1 parameter	
dee1 :                       df_tk_while
dee1 :                       df_tk_until
dee1 :                       df_tk_if
dee1 :                       df_tk_elseif
dee1 :                       df_tk_wait
dee1 :                       df_tk_cursor
dee1 :                       df_tk_del
dee1 :                       df_tk_chdir
dee1 :                       df_tk_load
dee1 :                       df_tk_save
dee1 :                       df_tk_tload
dee1 :                       df_tk_tsave
dee1 :                       df_tk_pixmode
dee1 :                       df_tk_ink
dee1 :                       df_tk_paper
dee1 :                       df_tk_himem
                             
dee1 :                       df_tk_asm_org
dee1 :                       df_tk_asm_opt
dee1 :                       df_tk_asm_ds
                             
                             	; first parm
dee1 : 2094d9           [ 6] 	jsr df_tk_expression
dee4 : b0c7             [ 3] 	bcs df_tk_error2
dee6 : 60               [ 6] 	rts
                             
                             ; These commands expect 2 numeric parameters
dee7 :                       df_tk_poke
dee7 :                       df_tk_doke
dee7 :                       df_tk_point
dee7 :                       df_tk_sprchar
dee7 :                       df_tk_sprmulti
dee7 :                       df_tk_bload
dee7 :                       df_tk_lineto
dee7 :                       df_tk_2parms
                             	; first parm
dee7 : 2094d9           [ 6] 	jsr df_tk_expression
deea : b0c1             [ 3] 	bcs df_tk_error2
                             	; tokenise second parm
deec : a92c             [ 2] 	lda #','
deee : 4ca0d9           [ 3] 	jmp df_tk_tok_expression
AS65 Assembler for R6502 [1.42].                                     Page  172
-------------------------------- bank\bank0.s --------------------------------

                             
                             ; these commands expect 3 numeric parameters
def1 :                       df_tk_hchar
def1 :                       df_tk_plot
def1 :                       df_tk_circle
def1 :                       df_tk_sound
def1 :                       df_tk_colour
def1 :                       df_tk_spritepos
def1 :                       df_tk_renum
def1 :                       df_tk_sprpos
def1 :                       df_tk_bsave
def1 :                       df_tk_3parms
def1 : 20e7de           [ 6] 	jsr df_tk_2parms
                             	; tokenise third parm
def4 : a92c             [ 2] 	lda #','
def6 : 4ca0d9           [ 3] 	jmp df_tk_tok_expression
                             
                             ; these commands expect 4 numeric parameters
def9 :                       df_tk_play
def9 :                       df_tk_music
def9 :                       df_tk_line
def9 :                       df_tk_4parms
def9 : 20e7de           [ 6] 	jsr df_tk_2parms
defc : a92c             [ 2] 	lda #','
defe : 20a2d7           [ 6] 	jsr df_tk_expect_tok_err
df01 : 4ce7de           [ 3] 	jmp df_tk_2parms
                             
                             ;df_tk_fill
                             ;df_tk_5parms
                             ;	jsr df_tk_3parms
                             ;	lda #','
                             ;	jsr df_tk_expect_tok_err
                             ;	jmp df_tk_2parms
                             
df04 :                       mod_sz_toksubs_e
                             
                             
df04 :                       mod_sz_tokenise_e
                             
                             
                             
                             	include "dflat/progedit.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  PROGEDIT.S
                             ;*  dflat module to enable editing of a dflat pro
                             ;*  dflat bascially starts here - waiting for use
                             ;*  when a line is entered, if it is not preceede
                             ;*  line number it is tokenised and attempted to 
                             ;*  immediatly.  If it is preceeded by a line num
                             ;*  number is used to save the tokenised line in 
                             ;*  position in memory.
                             ;*  So this is just like a good old editing sessi
                             ;*  nearly any common flavour of 80s basic. Howev
                             ;*  tokenises everything except whitespace and st
                             ;*  constants - even when saving.  Unlike my trus
AS65 Assembler for R6502 [1.42].                                     Page  173
-------------------------------- bank\bank0.s --------------------------------

                             ;*  where I could type in any garbage and it woul
                             ;*  saved with the line number, dflat needs to be
                             ;*  tokenise the line.  So it's actually a bit mo
                             ;*  Atari 8 bit BASIC.
                             ;*
                             ;************************************************
                             
df04 :                       mod_sz_progedit_s
                             
                             ;****************************************
                             ;* df_pg_find_line
                             ;* Find a line number in X(L), A(H)
                             ;* Return X(L), A(H) of line, Y = Length
                             ;* C=1 Exact match not found, C=0 Exact Found
                             ;* If not exact match then next highest line addr
                             ;* Will be in X and A
                             ;****************************************
df04 :                       df_pg_find_line
df04 : 863d             [ 3] 	stx num_a
df06 : 853e             [ 3] 	sta num_a+1
df08 : a565             [ 3] 	lda df_prgstrt
df0a : 8549             [ 3] 	sta num_tmp
df0c : a566             [ 3] 	lda df_prgstrt+1
df0e : 854a             [ 3] 	sta num_tmp+1
df10 :                       df_pg_check_next_line
df10 : a549             [ 3] 	lda num_tmp
df12 : c567             [ 3] 	cmp df_prgend
df14 : d011             [ 3] 	bne df_pg_check_line
df16 : a54a             [ 3] 	lda num_tmp+1
df18 : c568             [ 3] 	cmp df_prgend+1
df1a : d00b             [ 3] 	bne df_pg_check_line
df1c :                       df_pr_line_gt_target	
                             	; End of program or line > target
                             	; X,A = address of finish
                             	; Load Y with the length
df1c : a200             [ 2] 	ldx #0
df1e : a149             [ 6] 	lda (num_tmp,x)
df20 : a8               [ 2] 	tay
df21 : a649             [ 3] 	ldx num_tmp
df23 : a54a             [ 3] 	lda num_tmp+1
df25 : 38               [ 2] 	sec
df26 : 60               [ 6] 	rts
df27 :                       df_pg_check_line
df27 : 38               [ 2] 	sec					; Do a trial subtract of
df28 : a001             [ 2] 	ldy #DFTK_LINNUM	; target - line
df2a : a53d             [ 3] 	lda num_a
df2c : f149             [ 5] 	sbc (num_tmp),y
df2e : 854b             [ 3] 	sta num_tmp+2		; Partial result of sbc
df30 : c8               [ 2] 	iny
df31 : a53e             [ 3] 	lda num_a+1
df33 : f149             [ 5] 	sbc (num_tmp),y
df35 : 054b             [ 3] 	ora num_tmp+2		; or with partial result for z ch
                             	; If C=0 then line > target (done)
df37 : 90e3             [ 3] 	bcc df_pr_line_gt_target
                             	; If partial result Z=0 then got an exact match
df39 : f00f             [ 3] 	beq df_pr_line_match
                             	; Else we go to next line
df3b : a200             [ 2] 	ldx #0
df3d : 18               [ 2] 	clc
df3e : a549             [ 3] 	lda num_tmp
df40 : 6149             [ 6] 	adc (num_tmp,x)
df42 : 8549             [ 3] 	sta num_tmp
AS65 Assembler for R6502 [1.42].                                     Page  174
-------------------------------- bank\bank0.s --------------------------------

df44 : 90ca             [ 3] 	bcc df_pg_check_next_line
df46 : e64a             [ 5] 	inc num_tmp+1
df48 : d0c6             [ 3] 	bne df_pg_check_next_line	; Always
df4a :                       df_pr_line_match
df4a : a200             [ 2] 	ldx #0
df4c : a149             [ 6] 	lda (num_tmp,x)
df4e : a8               [ 2] 	tay
df4f : a649             [ 3] 	ldx num_tmp
df51 : a54a             [ 3] 	lda num_tmp+1
df53 : 18               [ 2] 	clc
df54 : 60               [ 6] 	rts
                             	
                             ;****************************************
                             ;* df_pg_insert_block
                             ;* Insert a block at adr (X, A) of size Y
                             ;* df_prgend updated
                             ;* C=1 Error, C=0 Ok
                             ;****************************************
df55 :                       df_pg_insert_block
                             	; Inserting requires a block copy from
                             	; end of program space to the insert address
                             	
                             	; Save address as this is the lowest address
df55 : 863d             [ 3] 	stx num_a
df57 : 853e             [ 3] 	sta num_a+1
                             	; End of program space is the first byte to move
df59 : a567             [ 3] 	lda df_prgend
df5b : 8545             [ 3] 	sta num_x
df5d : a568             [ 3] 	lda df_prgend+1
df5f : 8546             [ 3] 	sta num_x+1	
df61 :                       df_pg_insert_byte
                             	; Move a byte from the current top
df61 : a200             [ 2] 	ldx #0
df63 : a145             [ 6] 	lda (num_x,x)
                             	; To the new top (+Y)
df65 : 9145             [ 5] 	sta (num_x),y
                             	; Compare current address with lowest
df67 : a545             [ 3] 	lda num_x
df69 : c53d             [ 3] 	cmp num_a
df6b : d012             [ 3] 	bne df_pg_insert_next_byte
df6d : a546             [ 3] 	lda num_x+1
df6f : c53e             [ 3] 	cmp num_a+1
df71 : d00c             [ 3] 	bne df_pg_insert_next_byte
                             	; Finished, update program end pointer
df73 : 18               [ 2] 	clc
df74 : 98               [ 2] 	tya
df75 : 6567             [ 3] 	adc df_prgend
df77 : 8567             [ 3] 	sta df_prgend
                             	_bcc 2
                             
df7b : e668             [ 5] 	inc df_prgend+1
df7d : 18               [ 2] 	clc
df7e : 60               [ 6] 	rts	; C=0
df7f :                       df_pg_insert_next_byte
                             	; Decrement current address (trashes A)
                             	_decZPWordA num_x
                             
df87 : 4c61df           [ 3] 	jmp df_pg_insert_byte
                             
                             ;****************************************
                             ;* df_pg_delete_block
                             ;* Delete a block at adr (X, A) of size Y
AS65 Assembler for R6502 [1.42].                                     Page  175
-------------------------------- bank\bank0.s --------------------------------

                             ;* df_prgend updated
                             ;* C=1 Error, C=0 Ok
                             ;****************************************
df8a :                       df_pg_delete_block
                             	; Deleting requires a block copy from
                             	; deletion address to end of program
                             	
                             	; Save address as this is the start address
df8a : 863d             [ 3] 	stx num_a
df8c : 853e             [ 3] 	sta num_a+1
df8e : a200             [ 2] 	ldx #0	; No indirect indexing
df90 :                       df_pg_delete_byte
                             	; Move a byte from current+Y
df90 : b13d             [ 5] 	lda (num_a),y
                             	; Down to current (x=0)
df92 : 813d             [ 6] 	sta (num_a,x)
                             	; Compare current address with lowest
df94 : a53d             [ 3] 	lda num_a
df96 : c567             [ 3] 	cmp df_prgend
df98 : d017             [ 3] 	bne df_pg_delete_next_byte
df9a : a53e             [ 3] 	lda num_a+1
df9c : c568             [ 3] 	cmp df_prgend+1
df9e : d011             [ 3] 	bne df_pg_delete_next_byte
                             	; Finished, update program end pointer
dfa0 : 843d             [ 3] 	sty num_a
dfa2 : 38               [ 2] 	sec
dfa3 : a567             [ 3] 	lda df_prgend
dfa5 : e53d             [ 3] 	sbc num_a
dfa7 : 8567             [ 3] 	sta df_prgend
dfa9 : a568             [ 3] 	lda df_prgend+1
dfab : e900             [ 2] 	sbc #0
dfad : 8568             [ 3] 	sta df_prgend+1
dfaf : 18               [ 2] 	clc
dfb0 : 60               [ 6] 	rts
dfb1 :                       df_pg_delete_next_byte
                             	; Increment current address
                             	_incZPWord num_a
                             
dfb7 : 4c90df           [ 3] 	jmp df_pg_delete_byte
                             
                             
                             ;****************************************
                             ;* Get a line of input
                             ;* Input: C=1 for echo, 0 for no echo
                             ;* Output: C=0 means linbuff is valid
                             ;****************************************
dfba :                       df_pg_inputline
                             	; C is set on input for echo or not
                             	; Read a line of input
dfba : 203cc4           [ 6] 	jsr io_read_line
                             	
                             	; If nothing entered then sec
dfbd : 98               [ 2] 	tya
dfbe : d002             [ 3] 	bne df_pg_inputline_ok
dfc0 : 38               [ 2] 	sec
dfc1 : 60               [ 6] 	rts
dfc2 :                       df_pg_inputline_ok
                             	; Copy input bytes to line buffer
                             	; for lexical analysis
dfc2 :                       df_pg_copyinputtolinbuff
dfc2 : b139             [ 5] 	lda (buf_lo),y
dfc4 : 990004           [ 5] 	sta df_linbuff,y
AS65 Assembler for R6502 [1.42].                                     Page  176
-------------------------------- bank\bank0.s --------------------------------

dfc7 : 88               [ 2] 	dey
dfc8 : 10f8             [ 3] 	bpl df_pg_copyinputtolinbuff
dfca : 18               [ 2] 	clc
dfcb : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* df_pg_dflat
                             ;* Start a dflat editing session
                             ;****************************************
dfcc :                       df_pg_dflat
                             	; reset stack pointer
dfcc : a2ff             [ 2] 	ldx #255
dfce : 9a               [ 2] 	txs
                             
                             	; error handler address
dfcf : a91d             [ 2] 	lda #lo(df_trap_error)
dfd1 : 8560             [ 3] 	sta df_pc
dfd3 : a9f8             [ 2] 	lda #hi(df_trap_error)
dfd5 : 8561             [ 3] 	sta df_pc+1
                             	
                             	; make sure normal I/O is resumed
                             	;jsr io_init_default
dfd7 :                       df_pg_prompt
dfd7 : a26e             [ 2] 	ldx #lo(df_pg_prompt_msg)
dfd9 : a9e0             [ 2] 	lda #hi(df_pg_prompt_msg)
dfdb : 2075c4           [ 6] 	jsr io_print_line
dfde : a900             [ 2] 	lda #0
dfe0 : 855e             [ 3] 	sta df_immed
dfe2 :                       df_pg_getcommand
                             	; current line is the token buffer when editing
dfe2 : a980             [ 2] 	lda #lo(df_tokbuff)
dfe4 : 8586             [ 3] 	sta df_currlin
dfe6 : a904             [ 2] 	lda #hi(df_tokbuff)
dfe8 : 8587             [ 3] 	sta df_currlin+1
dfea : 38               [ 2] 	sec
dfeb : 20badf           [ 6] 	jsr df_pg_inputline
dfee : b0e7             [ 3] 	bcs df_pg_prompt	; If no input then back to prom
dff0 : 200be0           [ 6] 	jsr df_pg_tokenise
dff3 : a55e             [ 3] 	lda df_immed
dff5 : f0eb             [ 3] 	beq df_pg_getcommand
                             	; clear variables ready to run the statement
dff7 : 2075e0           [ 6] 	jsr df_initrun
                             	; run from tokbuff
dffa : a280             [ 2] 	ldx #lo(df_tokbuff)
dffc : a904             [ 2] 	lda #hi(df_tokbuff)
                             	; always skip length and line number
dffe : a003             [ 2] 	ldy #3
e000 : 8488             [ 3] 	sty df_exeoff
                             	; init currlin
e002 : 20ebe3           [ 6] 	jsr df_rt_init_stat_ptr
                             	; start execution
e005 : 20fee3           [ 6] 	jsr df_rt_exec_stat
                             	; Go and get another line of input
e008 : 4cd7df           [ 3] 	jmp df_pg_prompt
                             
                             	; tokenise the line
e00b :                       df_pg_tokenise
e00b : a900             [ 2] 	lda #0
e00d : 855d             [ 3] 	sta errno
e00f : 20d8d9           [ 6] 	jsr df_lexer_line
                             	; check if line number == 0
AS65 Assembler for R6502 [1.42].                                     Page  177
-------------------------------- bank\bank0.s --------------------------------

e012 : ad8104           [ 4] 	lda df_tokbuff+DFTK_LINNUM
e015 : d00f             [ 3] 	bne df_pg_line_number
e017 : ad8204           [ 4] 	lda df_tokbuff+DFTK_LINNUM+1
e01a : d00a             [ 3] 	bne df_pg_line_number
                             	; check if line empty
e01c : ad8004           [ 4] 	lda df_tokbuff
e01f : f004             [ 3] 	beq df_pg_nothing
                             	
                             	; line number == 0 so in immediate mode from tok
                             	; don't zero out the line length as some routine
                             	; run the line in immediate mode
e021 : a901             [ 2] 	lda #1
e023 : 855e             [ 3] 	sta df_immed
e025 :                       df_pg_nothing
e025 : 60               [ 6] 	rts
                             
                             	; put the numbered line in to the right bit of m
e026 :                       df_pg_line_number
                             	; Check if this line exists
e026 : ad8104           [ 4] 	lda df_tokbuff+DFTK_LINNUM
e029 : aa               [ 2] 	tax
e02a : ad8204           [ 4] 	lda df_tokbuff+DFTK_LINNUM+1
e02d : 2004df           [ 6] 	jsr df_pg_find_line
                             	; Save line address for later X then A
e030 : 8538             [ 3] 	sta tmp_d
e032 : 8a               [ 2] 	txa
e033 : 48               [ 3] 	pha
e034 : a538             [ 3] 	lda tmp_d
e036 : 48               [ 3] 	pha
                             	; If line exists then it needs deleting
e037 : b003             [ 3] 	bcs df_pg_skip_del_line
                             
                             	; delete line from program
e039 : 208adf           [ 6] 	jsr df_pg_delete_block
e03c :                       df_pg_skip_del_line
                             	; If line length is zero
                             	; then nothing else to do (i.e. line was deleted
e03c : ad8004           [ 4] 	lda df_tokbuff+DFTK_LINLEN
                             	; save the tokenised line length
e03f : 48               [ 3] 	pha
e040 : d004             [ 3] 	bne df_pg_insertline
                             	; Length was zero, so get temp stuff off stack
e042 : 68               [ 4] 	pla
e043 : 68               [ 4] 	pla
e044 : 68               [ 4] 	pla
e045 : 60               [ 6] 	rts
                             
                             	; insert a program line unless it is immediate
e046 :                       df_pg_insertline
                             	; Restore previously saved length
e046 : 68               [ 4] 	pla
e047 : a8               [ 2] 	tay
                             	; Restore previously saved address to reinsert t
e048 : 68               [ 4] 	pla
e049 : 8538             [ 3] 	sta tmp_d
e04b : 68               [ 4] 	pla
e04c : aa               [ 2] 	tax
e04d : a538             [ 3] 	lda tmp_d
                             	; And save it all back to stack again A,X,Y
                             	_pushAXY
                             
                             	; We now have insert address and length
AS65 Assembler for R6502 [1.42].                                     Page  178
-------------------------------- bank\bank0.s --------------------------------

e058 : 2055df           [ 6] 	jsr df_pg_insert_block
                             	; Restore length and sub 1 to get index in to th
e05b : 68               [ 4] 	pla
e05c : a8               [ 2] 	tay
e05d : 88               [ 2] 	dey
                             	; Restore address to a pointer, X is pulled firs
e05e : 68               [ 4] 	pla
e05f : aa               [ 2] 	tax
e060 : 863d             [ 3] 	stx num_a
e062 : 68               [ 4] 	pla
e063 : 853e             [ 3] 	sta num_a+1
                             	; num_a is destination, tokbuff is source, Y is 
e065 :                       df_pg_insertlinbyte
e065 : b98004           [ 4] 	lda df_tokbuff,y
e068 : 913d             [ 5] 	sta (num_a),y
e06a : 88               [ 2] 	dey
e06b : 10f8             [ 3] 	bpl df_pg_insertlinbyte
e06d : 60               [ 6] 	rts
                             	
e06e :                       df_pg_prompt_msg
e06e : 52656164790d00        	db "Ready",UTF_CR,0
                             
e075 :                       mod_sz_progedit_e
                             
                             	include "dflat/runtime.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  RUNTIME.S
                             ;*  This module is the runtime coordinator.  When
                             ;*  wants to run a program, execution of statemen
                             ;*  required procedure starts and proceeds from t
                             ;*  according to normal program flow.
                             ;*  This module also contains critical routines f
                             ;*  evaluation of expressions (numeric and string
                             ;*  Whilst the code to implement a specific comma
                             ;*  rtsubs.s, this is the key module that control
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code
                             
e075 :                       mod_sz_runtime_s
                             
                             ;****************************************
                             ;* df_initrun
                             ;* Initialise program space for runtime
                             ;****************************************
e075 :                       df_initrun
                             	; Set the key mask to check every 16 instruction
e075 : a910             [ 2] 	lda #0x10
e077 : 855c             [ 3] 	sta df_checkmsk
e079 : 855b             [ 3] 	sta df_checkkey
                             
                             	; String and array heap initialisation
                             	; Grows up from end of prog space PLUS 1
AS65 Assembler for R6502 [1.42].                                     Page  179
-------------------------------- bank\bank0.s --------------------------------

                             	; Initially empty (dim will allocate)
                             	_cpyZPWord df_prgend,df_starstrt
                             
                             	_incZPWord df_starstrt
                             
                             	_cpyZPWord df_starstrt,df_starend
                             
                             
e091 : a2ff             [ 2] 	ldx #0xff
                             	; Reset runtime stack (grows down)
e093 : 8676             [ 3] 	stx df_rtstop
                             	; make X=0
e095 : e8               [ 2] 	inx
                             	; Reset parameter stack (grows up)
e096 : 8677             [ 3] 	stx df_parmtop
                             	; Reset data pointer high byte
e098 : 8695             [ 3] 	stx df_currdat+1
                             	; if nest counter zeroed
e09a : 8693             [ 3] 	stx df_ifnest
                             
                             	; clear proc addresses
e09c : 20a0e0           [ 6] 	jsr df_rt_init_vvt
                             
                             ;	clc
e09f : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Initialise vvt
                             ;****************************************
e0a0 :                       df_rt_init_vvt
                             	; starting at beginning of vvt
                             	_cpyZPWord df_vvtend,df_tmpptra
                             
e0a8 : a200             [ 2] 	ldx #0
e0aa :                       df_rt_init_vvt_slot
e0aa : a5a1             [ 3] 	lda df_tmpptra
e0ac : c56d             [ 3] 	cmp df_vvtstrt
e0ae : d006             [ 3] 	bne df_rt_init_vvt_slot_undim
e0b0 : a5a2             [ 3] 	lda df_tmpptra+1
e0b2 : c56e             [ 3] 	cmp df_vvtstrt+1
e0b4 : f02c             [ 3] 	beq df_rt_init_done
e0b6 :                       df_rt_init_vvt_slot_undim
                             	; Only zero out proc and array pointers
                             	; Scalar variables are not initialised
e0b6 : a000             [ 2] 	ldy #0
e0b8 : b1a1             [ 5] 	lda (df_tmpptra),y
e0ba : 29c0             [ 2] 	and #DFVVT_PROC|DFVVT_ARRY
e0bc : f016             [ 3] 	beq df_rt_init_vvt_skip
                             	; skip over the first byte which is variable typ
e0be : c8               [ 2] 	iny
                             	; zero out first 3 bytes for proc and arrays
e0bf : a900             [ 2] 	lda #0
e0c1 : 91a1             [ 5] 	sta (df_tmpptra),y
e0c3 : c8               [ 2] 	iny
e0c4 : 91a1             [ 5] 	sta (df_tmpptra),y
e0c6 : c8               [ 2] 	iny
e0c7 : 91a1             [ 5] 	sta (df_tmpptra),y
e0c9 : c8               [ 2] 	iny
                             	; before doing dim2 check if proc
                             	; as we don't want to erase the parm count
e0ca : a1a1             [ 6] 	lda (df_tmpptra,x)
e0cc : 2940             [ 2] 	and #DFVVT_PROC
AS65 Assembler for R6502 [1.42].                                     Page  180
-------------------------------- bank\bank0.s --------------------------------

e0ce : d004             [ 3] 	bne df_rt_init_vvt_skip
                             	; if not proc then zero dim2
e0d0 : a900             [ 2] 	lda #0
e0d2 : 91a1             [ 5] 	sta (df_tmpptra),y
e0d4 :                       df_rt_init_vvt_skip
                             	; increment pointer to next slot
                             	_adcZPByte df_tmpptra,#8
                             
e0df : 4caae0           [ 3] 	jmp df_rt_init_vvt_slot 	; Don't rely on bcc
e0e2 :                       df_rt_init_done
e0e2 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Evaluate a numeric expression
                             ;* pop  X,A result from operator stack
                             ;****************************************
e0e3 :                       df_rt_getnval
                             	; evaluate the expression
e0e3 : 20e9e0           [ 6] 	jsr df_rt_neval
                             	; get X,A off operator stack
e0e6 : 4c02f7           [ 3] 	jmp df_ost_popInt
                             
                             
                             ;****************************************
                             ;* Evaluate a numeric expression
                             ;* Push result to operator stack
                             ;****************************************
e0e9 :                       df_rt_neval
                             	; push terminator on cpu stack
                             	; so we know where we are
e0e9 : a900             [ 2] 	lda #0
e0eb : 48               [ 3] 	pha
                             
                             	; find escape token or keyword token
                             	; if escape token push on to operand stack
                             	; if keyword token push on to operator stack
e0ec :                       df_rt_neval_optk
e0ec : a488             [ 3] 	ldy df_exeoff
                             	; check end of line
                             
                             ;	cpy df_eolidx
                             ;	beq df_rt_neval_process
e0ee : c47f             [ 3] 	cpy df_nxtstidx
e0f0 : f03a             [ 4] 	beq df_rt_neval_process
e0f2 : b186             [ 5] 	lda (df_currlin),y		; Get the byte which could b
e0f4 : 3024             [ 4] 	bmi df_rt_neval_tk		; N=1 means it's a keyword t
e0f6 : c920             [ 2] 	cmp #DFTK_ESCVAL		; <=32 means it's an escape to
e0f8 : 9019             [ 4] 	bcc df_rt_neval_esc
                             	; check for evaluation terminators
                             	; specifically ',' and ']'
e0fa : c92c             [ 2] 	cmp #','
e0fc : f02e             [ 4] 	beq df_rt_neval_process
e0fe : c95d             [ 2] 	cmp #']'
e100 : f02a             [ 3] 	beq df_rt_neval_process
                             	; check for brackets
                             	; if close bracket then process
e102 : c929             [ 2] 	cmp #')'
e104 : f026             [ 3] 	beq df_rt_neval_process
                             	; Nothing of interest matched or it's open brack
                             	; so move to next byte either way
e106 : e688             [ 5] 	inc df_exeoff				; Next byte 
                             	; if bracket then evaluate expression recursivel
AS65 Assembler for R6502 [1.42].                                     Page  181
-------------------------------- bank\bank0.s --------------------------------

e108 : c928             [ 2] 	cmp #'('
e10a : d0e0             [ 4] 	bne df_rt_neval_optk
                             	; call evaluation function recursively
e10c : 20e9e0           [ 6] 	jsr df_rt_neval
                             	; move to next byte
e10f : e688             [ 5] 	inc df_exeoff
e111 : d0d9             [ 4] 	bne df_rt_neval_optk		; ALWAYS as exeoff != 0
e113 :                       df_rt_neval_esc
e113 : 206ee1           [ 6] 	jsr df_rt_eval_esc
                             	; move to next byte
e116 : e688             [ 5] 	inc df_exeoff
e118 : d0d2             [ 4] 	bne df_rt_neval_optk		; ALWAYS as exeoff != 0
                             	; if a token then push on operator stack
e11a :                       df_rt_neval_tk
e11a : 297f             [ 2] 	and #0x7f
                             	; check if op (look up type using X as index)
                             	; X contains the current operator index
                             
e11c : aa               [ 2] 	tax
e11d : bd68dd           [ 4] 	lda df_tk_tokentype,x
                             	; A contains token type
e120 : 48               [ 3] 	pha
e121 : 2908             [ 2] 	and #DFTK_OP
e123 : d01c             [ 3] 	bne df_rt_neval_tk_opp
                             	; check if fn
e125 : 68               [ 4] 	pla
e126 : 2902             [ 2] 	and #DFTK_FN
e128 : d00c             [ 3] 	bne df_rt_neval_tk_fn
                             
                             	; If got here then something wrong
                             	SWBRK DFERR_OK
                             
                             
e12c :                       df_rt_neval_process
                             	; pop operator off stack and execute
                             	; keep popping until reached the terminator
e12c : 68               [ 4] 	pla
e12d : f006             [ 3] 	beq df_rt_neval_done
                             	; run the token code
e12f : 2064e4           [ 6] 	jsr df_rt_run_token
                             	; top two bytes on ost stack is the result
e132 : 4c2ce1           [ 3] 	jmp df_rt_neval_process
e135 :                       df_rt_neval_done
e135 : 60               [ 6] 	rts
                             
e136 :                       df_rt_neval_tk_fn
e136 : 18               [ 2] 	clc
e137 : 8a               [ 2] 	txa
                             	; run a fn token - returns a value on stack
e138 : e688             [ 5] 	inc df_exeoff
e13a : 2064e4           [ 6] 	jsr df_rt_run_token
                             	; move to next byte
e13d :                       df_rt_neval_nextbyte
e13d : e688             [ 5] 	inc df_exeoff
e13f : d0ab             [ 4] 	bne df_rt_neval_optk		; ALWAYS as exeoff != 0
                             
e141 :                       df_rt_neval_tk_opp
e141 : 68               [ 4] 	pla				; Get A off stack which is the type
e142 :                       df_rt_neval_tk_op
                             	; X=Op, A=Type
                             	; if this op < current top of op stack
                             	; then do the op as it is higher priority so sho
AS65 Assembler for R6502 [1.42].                                     Page  182
-------------------------------- bank\bank0.s --------------------------------

                             	; not be pushed
                             	; what is top of the op stack?
                             	; save current op token value
                             	; C=0 means process the op now, else don't
                             	; save current operator index
e142 : 86a1             [ 3] 	stx df_tmpptra				; Index in to token table not 
                             	; mask off to keep priority
e144 : 2907             [ 2] 	and #DFTK_OPMSK
e146 : 85a3             [ 3] 	sta df_tmpptrb
                             	; peek top of op stack - pull and push X
e148 : 68               [ 4] 	pla
e149 : 48               [ 3] 	pha
e14a : aa               [ 2] 	tax
                             	; if 0 then nothing so push op
e14b : f01c             [ 3] 	beq df_rt_neval_pushOp
                             	; use it to index in to type table
e14d : bd68dd           [ 4] 	lda df_tk_tokentype,x
                             	; mask off to keep priority
e150 : 2907             [ 2] 	and #DFTK_OPMSK
                             	; compare with the saved token type which includ
e152 : c5a3             [ 3] 	cmp df_tmpptrb
                             	; if top of stack >= current then C=1
                             	; else C=0
                             	; what is the state of C?
                             	; if 1 then just pushOp
e154 : f002             [ 3] 	beq df_rt_neval_donow
e156 : b011             [ 3] 	bcs df_rt_neval_pushOp
e158 :                       df_rt_neval_donow
                             	; was C=0 so process now before pushing the new 
                             	; get operator off cpu stack
e158 : 68               [ 4] 	pla
e159 : a8               [ 2] 	tay		; Save whilst need to push other things
                             	; save the current op on cpu stack
e15a : a5a1             [ 3] 	lda df_tmpptra
e15c : 48               [ 3] 	pha
e15d : aa               [ 2] 	tax		; X = current op
e15e : 98               [ 2] 	tya		; Get A back from Y (new op)
                             	; now run the token in A that came off the stack
e15f : 2064e4           [ 6] 	jsr df_rt_run_token
                             	; get current op off cpu stack in to X
e162 : 68               [ 4] 	pla
e163 : aa               [ 2] 	tax
                             	; get the token type in to A
e164 : bd68dd           [ 4] 	lda df_tk_tokentype,x
                             	; now go back around again to check whether to p
e167 : d0d9             [ 3] 	bne df_rt_neval_tk_op		; ALWAYS as type never ze
e169 :                       df_rt_neval_pushOp
                             	; push the operator
e169 : a5a1             [ 3] 	lda df_tmpptra
e16b : 48               [ 3] 	pha
                             	; move to next byte
e16c : d0cf             [ 3] 	bne df_rt_neval_nextbyte	; ALWAYS as token index
                             
                             
                             
                             
                             ; jump to escape evaluation routine
e16e :                       df_rt_eval_esc
e16e : 0a               [ 2] 	asl a
e16f : aa               [ 2] 	tax
e170 : bd7de1           [ 4] 	lda df_rt_eval_esc_tab,x
e173 : 85a1             [ 3] 	sta df_tmpptra
AS65 Assembler for R6502 [1.42].                                     Page  183
-------------------------------- bank\bank0.s --------------------------------

e175 : bd7ee1           [ 4] 	lda df_rt_eval_esc_tab+1,x
e178 : 85a2             [ 3] 	sta df_tmpptra+1
e17a : 6ca100           [ 6] 	jmp (df_tmpptra)
                             
e17d :                       df_rt_eval_esc_tab
e17d : 3ae2                  	dw df_rt_eval_chr
e17f : 46e2                  	dw df_rt_eval_reserved
e181 : 46e2                  	dw df_rt_eval_reserved
e183 : 46e2                  	dw df_rt_eval_reserved
e185 : 46e2                  	dw df_rt_eval_reserved
e187 : 46e2                  	dw df_rt_eval_reserved	; no such thing as bytdec
e189 : 3ae2                  	dw df_rt_eval_bythex
e18b : 3ae2                  	dw df_rt_eval_bytbin
e18d : 46e2                  	dw df_rt_eval_reserved
e18f : 3ae2                  	dw df_rt_eval_intdec
e191 : 3ae2                  	dw df_rt_eval_inthex
e193 : 3ae2                  	dw df_rt_eval_intbin
e195 : 46e2                  	dw df_rt_eval_reserved
e197 : 46e2                  	dw df_rt_eval_reserved
e199 : 46e2                  	dw df_rt_eval_reserved
e19b : 46e2                  	dw df_rt_eval_reserved
e19d : 48e2                  	dw df_rt_eval_strlit
e19f : 8de2                  	dw df_rt_eval_var
e1a1 : 80e3                  	dw df_rt_eval_proc
                             
                             
                             ;****************************************
                             ;* Evaluate a string expression
                             ;* X, A = Destination is string accumulator
                             ;****************************************
e1a3 :                       df_rt_seval
e1a3 : a67a             [ 3] 	ldx df_sevalptr
e1a5 : a57b             [ 3] 	lda df_sevalptr+1
                             ;****************************************
                             ;* Evaluate a string expression
                             ;* X, A = Destination buffer / space
                             ;****************************************
e1a7 :                       df_rt_sval
                             	; keep X,A on the stack - will be modified
e1a7 : 8538             [ 3] 	sta tmp_d
e1a9 : 48               [ 3] 	pha
e1aa : 8a               [ 2] 	txa
e1ab : 48               [ 3] 	pha
e1ac : a538             [ 3] 	lda tmp_d
                             	; push original destination
e1ae : 20ddf6           [ 6] 	jsr df_ost_pushStr
                             	; Push the destination to the 6502 stack
                             	; hi byte first then lo
                             	; push string idx so we know our starting positi
                             	; in the string buffer
                             	; this limits all evaluations to 255 bytes
                             ;	lda df_stridx
                             ;	jsr df_st_pushOp
                             
                             	; find escape token or keyword token
                             	; if escape token push on to operand stack
                             	; if keyword operator token push on to operator 
                             	; if keyword function token run it
                             
e1b1 :                       df_rt_seval_optk
e1b1 : a488             [ 3] 	ldy df_exeoff
                             	; check end of line
AS65 Assembler for R6502 [1.42].                                     Page  184
-------------------------------- bank\bank0.s --------------------------------

                             ;	cpy df_eolidx
                             ;	beq df_rt_seval_done
e1b3 : c47f             [ 3] 	cpy df_nxtstidx
e1b5 : f069             [ 4] 	beq df_rt_seval_done
                             
e1b7 : b186             [ 5] 	lda (df_currlin),y
e1b9 : 301c             [ 3] 	bmi df_rt_seval_tk
                             
e1bb : c920             [ 2] 	cmp #DFTK_ESCVAL
e1bd : 900a             [ 3] 	bcc df_rt_seval_esc
                             	; check for evaluation terminators
                             	; specifically ',' and ')'
e1bf : c92c             [ 2] 	cmp #','
e1c1 : f05d             [ 4] 	beq df_rt_seval_done
e1c3 : c929             [ 2] 	cmp #')'
e1c5 : f059             [ 4] 	beq df_rt_seval_done
e1c7 : d04a             [ 4] 	bne df_rt_seval_nextbyte
e1c9 :                       df_rt_seval_esc
                             	; the only escape char is STRLIT, VAR or PROC
e1c9 : c910             [ 2] 	cmp #DFTK_STRLIT
e1cb : f04b             [ 4] 	beq	df_rt_seval_esc_strlit
e1cd : c911             [ 2] 	cmp #DFTK_VAR
e1cf : f028             [ 3] 	beq	df_rt_seval_esc_var
e1d1 : c912             [ 2] 	cmp #DFTK_PROC
e1d3 : f049             [ 4] 	beq	df_rt_seval_esc_proc
                             
                             	; error if got here
                             	SWBRK DFERR_SYNTAX
                             
                             
                             	; if a token then push on operator stack
e1d7 :                       df_rt_seval_tk
e1d7 : 8488             [ 3] 	sty df_exeoff
e1d9 : 297f             [ 2] 	and #0x7f
                             	; check if op
e1db : aa               [ 2] 	tax
e1dc : bd68dd           [ 4] 	lda df_tk_tokentype,x
e1df : 2904             [ 2] 	and #DFTK_STROP
e1e1 : d009             [ 3] 	bne df_rt_seval_tk_op
                             	; check if fn
e1e3 : bd68dd           [ 4] 	lda df_tk_tokentype,x
e1e6 : 2902             [ 2] 	and #DFTK_FN
e1e8 : d006             [ 3] 	bne df_rt_seval_tk_fn
                             
                             	; token type mismatch if got here
                             	SWBRK DFERR_TYPEMISM
                             
                             
e1ec :                       df_rt_seval_tk_op
                             	; the only op is $+
                             	; so just ignore!
e1ec : 8a               [ 2] 	txa
e1ed : 4c13e2           [ 3] 	jmp df_rt_seval_nextbyte
                             
e1f0 :                       df_rt_seval_tk_fn
e1f0 : 8a               [ 2] 	txa
e1f1 : e688             [ 5] 	inc df_exeoff
e1f3 : 2064e4           [ 6] 	jsr df_rt_run_token
e1f6 : 4cfde1           [ 3] 	jmp df_rt_seval_copy
                             
e1f9 :                       df_rt_seval_esc_var
                             	; go process the variable as a normal RVAL
AS65 Assembler for R6502 [1.42].                                     Page  185
-------------------------------- bank\bank0.s --------------------------------

e1f9 : 18               [ 2] 	clc
e1fa : 208de2           [ 6] 	jsr df_rt_eval_var
                             	; copy source off rt stack to destination
e1fd :                       df_rt_seval_copy
                             	; pull destination pointer
e1fd : 68               [ 4] 	pla
e1fe : 85a1             [ 3] 	sta df_tmpptra
e200 : 68               [ 4] 	pla
e201 : 85a2             [ 3] 	sta df_tmpptra+1
                             	; pop source string pointer off stack
e203 : 2006f7           [ 6] 	jsr df_ost_popStr
e206 : 86a3             [ 3] 	stx df_tmpptrb
e208 : 85a4             [ 3] 	sta df_tmpptrb+1
                             	; go and copy the string
e20a : 2024e2           [ 6] 	jsr df_rt_copyStr
                             	; now save the destination
e20d : a5a2             [ 3] 	lda df_tmpptra+1
e20f : 48               [ 3] 	pha
e210 : a5a1             [ 3] 	lda df_tmpptra
e212 : 48               [ 3] 	pha
                             
                             ;	jmp df_rt_seval_nextbyte
e213 :                       df_rt_seval_nextbyte
e213 : e688             [ 5] 	inc df_exeoff
e215 : 4cb1e1           [ 3] 	jmp df_rt_seval_optk
                             
e218 :                       df_rt_seval_esc_strlit
                             	; evaluate string literal
e218 : 2048e2           [ 6] 	jsr df_rt_eval_strlit
e21b : 4cfde1           [ 3] 	jmp df_rt_seval_copy
                             
e21e :                       df_rt_seval_esc_proc
                             	; not yet suported *******
                             	SWBRK DFERR_OK
                             
                             
                             	; keep going until non-ws char found or end of l
e220 :                       df_rt_seval_done
                             	;
e220 : 68               [ 4] 	pla
e221 : 68               [ 4] 	pla
                             
e222 : 18               [ 2] 	clc
e223 : 60               [ 6] 	rts
                             
                             
                             ; Copy string from ptrb to ptra
e224 :                       df_rt_copyStr
e224 : a000             [ 2] 	ldy #0
e226 :                       df_rt_copyStr_ch
e226 : b1a3             [ 5] 	lda (df_tmpptrb),y
e228 : 91a1             [ 5] 	sta (df_tmpptra),y
e22a : f003             [ 3] 	beq df_rt_copyStr_done
e22c : c8               [ 2] 	iny
e22d : d0f7             [ 3] 	bne df_rt_copyStr_ch	; Always relying in Y never
e22f :                       df_rt_copyStr_done
e22f : 98               [ 2] 	tya
e230 : 18               [ 2] 	clc
e231 : 65a1             [ 3] 	adc df_tmpptra
e233 : 85a1             [ 3] 	sta df_tmpptra
                             	_bcc 2
                             
AS65 Assembler for R6502 [1.42].                                     Page  186
-------------------------------- bank\bank0.s --------------------------------

e237 : e6a2             [ 5] 	inc df_tmpptra+1
e239 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Evaluate and push numeric value
                             ;****************************************
e23a :                       df_rt_eval_intdec
e23a :                       df_rt_eval_bytdec
e23a :                       df_rt_eval_inthex
e23a :                       df_rt_eval_bythex
e23a :                       df_rt_eval_intbin
e23a :                       df_rt_eval_bytbin
e23a :                       df_rt_eval_chr
                             	; numeric constant
e23a : c8               [ 2] 	iny
e23b : b186             [ 5] 	lda (df_currlin),y
e23d : aa               [ 2] 	tax
e23e : c8               [ 2] 	iny
e23f : b186             [ 5] 	lda (df_currlin),y
                             	; save offset before calling any routine
e241 : 8488             [ 3] 	sty df_exeoff
                             	; push number on to stack
e243 : 4cd2f6           [ 3] 	jmp df_ost_pushInt
                             
e246 :                       df_rt_eval_reserved
                             	; should not get here
                             	SWBRK DFERR_OK
                             
                             
                             ;****************************************
                             ;* Evaluate and push string constant
                             ;****************************************
e248 :                       df_rt_eval_strlit
e248 : 8488             [ 3] 	sty df_exeoff
                             	; calculate the effective address in to AX
                             	; y + currlin
e24a : 98               [ 2] 	tya
                             	; set carry to add one extra
e24b : 38               [ 2] 	sec
e24c : 6586             [ 3] 	adc df_currlin
e24e : aa               [ 2] 	tax
e24f : a587             [ 3] 	lda df_currlin+1
e251 : 6900             [ 2] 	adc #0
                             
                             	; push string on to stack
e253 : 20ddf6           [ 6] 	jsr df_ost_pushStr
                             	; now proceed until end of string found
e256 : a488             [ 3] 	ldy df_exeoff
e258 :                       df_rt_eval_strlit_ch
e258 : b186             [ 5] 	lda (df_currlin),y
e25a : f003             [ 3] 	beq df_rt_eval_strlit_done
e25c : c8               [ 2] 	iny
e25d : d0f9             [ 3] 	bne df_rt_eval_strlit_ch
e25f :                       df_rt_eval_strlit_done	; Always relying on Y neve
e25f : 8488             [ 3] 	sty df_exeoff
e261 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Return array parameter
                             ;* A has parm
                             ;****************************************
e262 :                       df_rt_arry_parm
AS65 Assembler for R6502 [1.42].                                     Page  187
-------------------------------- bank\bank0.s --------------------------------

                             	; move past open bracket or comma
e262 : e688             [ 5] 	inc df_exeoff
                             	; evaluate expression inside bracket
e264 : 20e3e0           [ 6] 	jsr df_rt_getnval
e267 : 8a               [ 2] 	txa
                             ;	clc
e268 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Return double array parameter
                             ;* X = dim1, Y = dim2
                             ;****************************************
e269 :                       df_rt_arry_parm2
                             	; go get array parm 1
e269 : 2062e2           [ 6] 	jsr df_rt_arry_parm
e26c : 48               [ 3] 	pha
e26d : a200             [ 2] 	ldx #0
e26f : a488             [ 3] 	ldy df_exeoff
e271 :                       df_rt_arry_parm2_term
e271 : b186             [ 5] 	lda (df_currlin),y
e273 : c95d             [ 2] 	cmp #']'
e275 : f011             [ 3] 	beq df_rt_arry_parm2_skiparry2
e277 : c92c             [ 2] 	cmp #','
e279 : f006             [ 3] 	beq df_rt_arry_parm2_arry2
e27b : 8488             [ 3] 	sty df_exeoff
e27d : c8               [ 2] 	iny
e27e : 4c71e2           [ 3] 	jmp df_rt_arry_parm2_term
e281 :                       df_rt_arry_parm2_arry2
                             	; get second dimension and put in Y
e281 : 2062e2           [ 6] 	jsr df_rt_arry_parm
e284 : a8               [ 2] 	tay
e285 : 68               [ 4] 	pla
e286 : aa               [ 2] 	tax
                             ;	clc
e287 : 60               [ 6] 	rts
e288 :                       df_rt_arry_parm2_skiparry2
e288 : a000             [ 2] 	ldy #0
e28a : 68               [ 4] 	pla
e28b : aa               [ 2] 	tax
                             ;	clc
e28c : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* Evaluate and push variable
                             ;* The actual value is pushed if numeric
                             ;* The pointer is pushed if string
                             ;* Carry Set = LVAR else normal RVAR
                             ;* LVAR : Y = line index, A=vvt type, tmpptra = v
                             ;****************************************
e28d :                       df_rt_eval_var
                             	; save carry bit
e28d : 08               [ 3] 	php
                             	; if lvar mode then already passed escape token
e28e : b010             [ 3] 	bcs df_rt_eval_lvskip
                             	; move past var escape token
e290 : c8               [ 2] 	iny
                             	; get var vvt address
e291 : b186             [ 5] 	lda (df_currlin),y
e293 : 85a1             [ 3] 	sta df_tmpptra
e295 : c8               [ 2] 	iny
e296 : 8488             [ 3] 	sty df_exeoff
AS65 Assembler for R6502 [1.42].                                     Page  188
-------------------------------- bank\bank0.s --------------------------------

e298 : b186             [ 5] 	lda (df_currlin),y
e29a : 85a2             [ 3] 	sta df_tmpptra+1
                             	; push vvt type first as this is the last thing 
e29c : a200             [ 2] 	ldx #0
e29e : a1a1             [ 6] 	lda (df_tmpptra,x)
e2a0 :                       df_rt_eval_lvskip
e2a0 : 48               [ 3] 	pha
                             	; Test A
e2a1 : aa               [ 2] 	tax
                             	; simple variable
e2a2 : 100e             [ 3] 	bpl df_rt_eval_var_notarry
                             	; even if an array if no dimensions then return 
                             	; if at end of statement or line then simple cop
                             ;	cpy df_eolidx
                             ;	beq df_rt_eval_var_simple
e2a4 : c47f             [ 3] 	cpy df_nxtstidx
e2a6 : f027             [ 3] 	beq df_rt_eval_var_simple
                             	; if next ch is not [ then simple copy
e2a8 : c8               [ 2] 	iny
e2a9 : b186             [ 5] 	lda (df_currlin),y
e2ab : 88               [ 2] 	dey
e2ac : c95b             [ 2] 	cmp #'['
e2ae : d01f             [ 3] 	bne df_rt_eval_var_simple
                             	; go do array handling
e2b0 : f02b             [ 3] 	beq df_rt_eval_var_do_arry
e2b2 :                       df_rt_eval_var_notarry
                             	; pull the type, not needed here
e2b2 : 68               [ 4] 	pla
                             	; pull C and check if lvar wanted rather than rv
e2b3 : 28               [ 4] 	plp
e2b4 : b00c             [ 3] 	bcs df_rt_eval_lvar
                             	; just push the vvt lo,hi value
e2b6 : a001             [ 2] 	ldy #DFVVT_LO
e2b8 : b1a1             [ 5] 	lda (df_tmpptra),y
e2ba : aa               [ 2] 	tax
e2bb : a002             [ 2] 	ldy #DFVVT_HI
e2bd : b1a1             [ 5] 	lda (df_tmpptra),y
                             
e2bf : 4cd2f6           [ 3] 	jmp df_ost_pushInt
                             
e2c2 :                       df_rt_eval_lvar
                             	; it's not an array, push the address of DFVVT_L
                             	; add DFVVT_LO offset to slot address in X,A
e2c2 : 18               [ 2] 	clc
e2c3 : a901             [ 2] 	lda #DFVVT_LO
e2c5 : 65a1             [ 3] 	adc df_tmpptra
e2c7 : aa               [ 2] 	tax
e2c8 : a5a2             [ 3] 	lda df_tmpptra+1
e2ca : 6900             [ 2] 	adc #0
                             
                             	; push pointer to lo,hi
e2cc : 4ce1f6           [ 3] 	jmp df_ost_pushPtr
                             
e2cf :                       df_rt_eval_var_simple
                             	; clean up stack
e2cf : 68               [ 4] 	pla
e2d0 : 68               [ 4] 	pla
                             	; simply get lo,hi and push ptr on stack
e2d1 : a001             [ 2] 	ldy #DFVVT_LO
e2d3 : b1a1             [ 5] 	lda (df_tmpptra),y
e2d5 : aa               [ 2] 	tax
e2d6 : a002             [ 2] 	ldy #DFVVT_HI
AS65 Assembler for R6502 [1.42].                                     Page  189
-------------------------------- bank\bank0.s --------------------------------

e2d8 : b1a1             [ 5] 	lda (df_tmpptra),y
e2da : 4ce1f6           [ 3] 	jmp df_ost_pushPtr
                             
e2dd :                       df_rt_eval_var_do_arry
                             	; move past var index
e2dd : e688             [ 5] 	inc df_exeoff
                             	; zero out x,y as they have dimension info
e2df : a200             [ 2] 	ldx #0
e2e1 : a000             [ 2] 	ldy #0
                             
                             	; ** Array handling routine **
                             	; A on stack = type
                             	; save vvt address
e2e3 : a5a2             [ 3] 	lda df_tmpptra+1
e2e5 : 48               [ 3] 	pha
e2e6 : a5a1             [ 3] 	lda df_tmpptra
e2e8 : 48               [ 3] 	pha
                             
                             	; get array parms in X,Y
e2e9 : 2069e2           [ 6] 	jsr df_rt_arry_parm2
                             	; restore vvt address
e2ec : 68               [ 4] 	pla
e2ed : 85a1             [ 3] 	sta df_tmpptra
e2ef : 68               [ 4] 	pla
e2f0 : 85a2             [ 3] 	sta df_tmpptra+1
                             	; save dimension indices for later
e2f2 : 86a3             [ 3] 	stx df_tmpptrb
e2f4 : 84a4             [ 3] 	sty df_tmpptrb+1
                             	; if y is zero then need to decide some stuff
e2f6 : c000             [ 2] 	cpy #0
e2f8 : d00e             [ 4] 	bne df_rt_eval_var_dim2adj
                             	; if dim2 > 0 then swap x,y
e2fa : a004             [ 2] 	ldy #DFVVT_DIM2
e2fc : b1a1             [ 5] 	lda (df_tmpptra),y
e2fe : f008             [ 4] 	beq df_rt_eval_var_dim2adj
                             	; swap x,y
e300 : a6a3             [ 3] 	ldx df_tmpptrb
e302 : a4a4             [ 3] 	ldy df_tmpptrb+1
e304 : 86a4             [ 3] 	stx df_tmpptrb+1
e306 : 84a3             [ 3] 	sty df_tmpptrb
                             
e308 :                       df_rt_eval_var_dim2adj
e308 : a6a3             [ 3] 	ldx df_tmpptrb
e30a : a4a4             [ 3] 	ldy df_tmpptrb+1
                             	; don't let y=0
e30c : d001             [ 3] 	bne df_rt_eval_var_dim2adjy
e30e : c8               [ 2] 	iny
e30f :                       df_rt_eval_var_dim2adjy
                             	; don't let x=0
e30f : e000             [ 2] 	cpx #0
e311 : d001             [ 3] 	bne df_rt_eval_var_dim2adjx
e313 : e8               [ 2] 	inx
e314 :                       df_rt_eval_var_dim2adjx
                             	;calculate offset
                             	;(y-1)*dim1 + (x-1)
e314 : ca               [ 2] 	dex
e315 : a900             [ 2] 	lda #0
e317 : 853e             [ 3] 	sta num_a+1
e319 : 88               [ 2] 	dey
                             	; (y-1)
e31a : 843d             [ 3] 	sty num_a
                             	; if y is 0 then no need to multiply
AS65 Assembler for R6502 [1.42].                                     Page  190
-------------------------------- bank\bank0.s --------------------------------

e31c : f00d             [ 3] 	beq df_rt_eval_var_nomult
                             	; (dim1)
e31e : a003             [ 2] 	ldy #DFVVT_DIM1
e320 : a900             [ 2] 	lda #0
e322 : 8542             [ 3] 	sta num_b+1
e324 : b1a1             [ 5] 	lda (df_tmpptra),y
e326 : 8541             [ 3] 	sta num_b
                             	; (y-1)*dim1 num_a has result
e328 : 20cfd4           [ 6] 	jsr int_fast_mult
e32b :                       df_rt_eval_var_nomult
                             	; move x to a
e32b : 8a               [ 2] 	txa
                             	; add x to num_a
e32c : 18               [ 2] 	clc
e32d : 653d             [ 3] 	adc num_a
e32f : 853d             [ 3] 	sta num_a
                             	_bcc 2
                             
e333 : e63e             [ 5] 	inc num_a+1
                             	; now have element offset in num_a
                             	; dimensions in x and y
e335 : a6a3             [ 3] 	ldx df_tmpptrb
e337 : a4a4             [ 3] 	ldy df_tmpptrb+1
                             	; get type of variable originally found
e339 : 68               [ 4] 	pla
e33a : 48               [ 3] 	pha
e33b : 2901             [ 2] 	and #DFVVT_INT
e33d : f004             [ 3] 	beq df_rt_eval_var_push
                             	; if it is int then multiply offset by 2
e33f : 063d             [ 5] 	asl num_a
e341 : 263e             [ 5] 	rol num_a+1
e343 :                       df_rt_eval_var_push
                             	; add pointer in lo,hi to num_a
e343 : 18               [ 2] 	clc
e344 : a001             [ 2] 	ldy #DFVVT_LO
e346 : b1a1             [ 5] 	lda (df_tmpptra),y
e348 : 653d             [ 3] 	adc num_a
e34a : 853d             [ 3] 	sta num_a
e34c : a002             [ 2] 	ldy #DFVVT_HI
e34e : b1a1             [ 5] 	lda (df_tmpptra),y
e350 : d002             [ 3] 	bne df_rt_array_exists
                             	; if vvt address hi is zero then array not dimen
                             	SWBRK DFERR_DIM
                             
e354 :                       df_rt_array_exists
e354 : 653e             [ 3] 	adc num_a+1
e356 : 853e             [ 3] 	sta num_a+1
                             	; get the type
e358 : 68               [ 4] 	pla
                             	; if not int or byte then push string
e359 : 2903             [ 2] 	and #DFVVT_INT|DFVVT_BYT
e35b : f01b             [ 3] 	beq df_rt_eval_var_str
                             	; get LVAR preference
e35d : 28               [ 4] 	plp
e35e : b019             [ 3] 	bcs df_rt_eval_ptr
                             	; need to load lo and hi for int
                             	; but only lo for byt
e360 : 2901             [ 2] 	and #DFVVT_INT
e362 : f00b             [ 3] 	beq df_rt_eval_byt
                             	; push the contents pointed to by num_a
e364 : a000             [ 2] 	ldy #0
e366 : b13d             [ 5] 	lda (num_a),y
AS65 Assembler for R6502 [1.42].                                     Page  191
-------------------------------- bank\bank0.s --------------------------------

e368 : aa               [ 2] 	tax
e369 : c8               [ 2] 	iny
e36a : b13d             [ 5] 	lda (num_a),y
e36c : 4cd2f6           [ 3] 	jmp df_ost_pushInt
e36f :                       df_rt_eval_byt
e36f : a000             [ 2] 	ldy #0
e371 : b13d             [ 5] 	lda (num_a),y
e373 : aa               [ 2] 	tax
e374 : 98               [ 2] 	tya			; Make A=0
e375 : 4cd2f6           [ 3] 	jmp df_ost_pushInt
e378 :                       df_rt_eval_var_str
e378 : 28               [ 4] 	plp
e379 :                       df_rt_eval_ptr
                             ;	clc
                             	; put num_a not contents
e379 : a63d             [ 3] 	ldx num_a
e37b : a53e             [ 3] 	lda num_a+1
e37d : 4ce1f6           [ 3] 	jmp df_ost_pushPtr
                             
e380 :                       df_rt_eval_proc
e380 : a577             [ 3] 	lda df_parmtop				; Save current position of par
e382 : 48               [ 3] 	pha
e383 : 2028f5           [ 6] 	jsr df_rt_proc				; Go and call the user functio
e386 : 68               [ 4] 	pla							; Get back the original parameter stac
e387 : c577             [ 3] 	cmp df_parmtop				; if it is the same, then no r
e389 : f002             [ 3] 	beq df_rt_eval_proc_err
e38b : 18               [ 2] 	clc
e38c : 60               [ 6] 	rts
e38d :                       df_rt_eval_proc_err
                             	; if no return value then report an errror
                             	SWBRK DFERR_RETURN
                             
                             
                             
                             
                             ;****************************************
                             ;* get two ints off the runtime stack
                             ;* first parm in ptrb, second in ptra
                             ;****************************************
e38f :                       df_rt_get2Ints
                             	; the first int popped is actually the second pa
e38f : 2002f7           [ 6] 	jsr df_ost_popInt
e392 : 86a3             [ 3] 	stx df_tmpptrb
e394 : 85a4             [ 3] 	sta df_tmpptrb+1
                             
e396 : 2002f7           [ 6] 	jsr df_ost_popInt
e399 : 86a1             [ 3] 	stx df_tmpptra
e39b : 85a2             [ 3] 	sta df_tmpptra+1
e39d : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* get two strings off the runtime stack
                             ;* first parm in ptrb, second in ptra
                             ;****************************************
e39e :                       df_rt_get2Strs
                             	; the first int popped is actually the second pa
e39e : 2006f7           [ 6] 	jsr df_ost_popStr
e3a1 : 86a3             [ 3] 	stx df_tmpptrb
e3a3 : 85a4             [ 3] 	sta df_tmpptrb+1
                             
e3a5 : 2006f7           [ 6] 	jsr df_ost_popStr
e3a8 : 86a1             [ 3] 	stx df_tmpptra
AS65 Assembler for R6502 [1.42].                                     Page  192
-------------------------------- bank\bank0.s --------------------------------

e3aa : 85a2             [ 3] 	sta df_tmpptra+1
e3ac : 60               [ 6] 	rts
                             
                             ;****************************************
                             ; common code for 2 ints runtime parsing
                             ;****************************************
e3ad :                       df_rt_parm_2ints
                             	; evaluate 1st parm
e3ad : 20e9e0           [ 6] 	jsr df_rt_neval
                             	; jump over comma
e3b0 : e688             [ 5] 	inc df_exeoff
                             	; evaluate the 2nd parm
e3b2 : 20e9e0           [ 6] 	jsr df_rt_neval
                             	
e3b5 : 4c8fe3           [ 3] 	jmp df_rt_get2Ints
                             	; pop 2nd parm
                             ;	jsr df_ost_popInt
                             ;	stx df_tmpptrb
                             ;	sta df_tmpptrb+1
                             	; pop 1st parm
                             ;	jsr df_ost_popInt
                             ;	stx df_tmpptra
                             ;	sta df_tmpptra+1
                             ;	rts
                             
                             ;****************************************
                             ; common code for 3 ints runtime parsing
                             ;****************************************
e3b8 :                       df_rt_parm_3ints
                             	; evaluate 1st parm
e3b8 : 20e9e0           [ 6] 	jsr df_rt_neval
e3bb : e688             [ 5] 	inc df_exeoff
                             	; evaluate the 2nd parm
e3bd : 20e9e0           [ 6] 	jsr df_rt_neval
e3c0 : e688             [ 5] 	inc df_exeoff
                             	; evaluate the 3rd parm
e3c2 : 20e9e0           [ 6] 	jsr df_rt_neval
                             
                             	; pop 3rd parm
e3c5 :                       df_rt_parm_pop3
e3c5 : 2002f7           [ 6] 	jsr df_ost_popInt
e3c8 : 86a5             [ 3] 	stx df_tmpptrc
e3ca : 85a6             [ 3] 	sta df_tmpptrc+1
                             	; pop 2nd and 1st
e3cc : 4c8fe3           [ 3] 	jmp df_rt_get2Ints
                             ;	jsr df_ost_popInt
                             ;	stx df_tmpptrb
                             ;	sta df_tmpptrb+1
                             	; pop 1st parm
                             ;	jsr df_ost_popInt
                             ;	stx df_tmpptra
                             ;	sta df_tmpptra+1
                             ;	rts
                             
                             ;****************************************
                             ; common code for 4 ints runtime parsing
                             ;****************************************
e3cf :                       df_rt_parm_4ints
                             	; evaluate 1st parm
e3cf : 20e9e0           [ 6] 	jsr df_rt_neval
e3d2 : e688             [ 5] 	inc df_exeoff
                             	; evaluate the 2nd parm
AS65 Assembler for R6502 [1.42].                                     Page  193
-------------------------------- bank\bank0.s --------------------------------

e3d4 : 20e9e0           [ 6] 	jsr df_rt_neval
e3d7 : e688             [ 5] 	inc df_exeoff
                             	; evaluate the 3rd parm
e3d9 : 20e9e0           [ 6] 	jsr df_rt_neval
e3dc : e688             [ 5] 	inc df_exeoff
                             	; evaluate the 4th parm
e3de : 20e9e0           [ 6] 	jsr df_rt_neval
                             
                             	; pop 4th parm
e3e1 : 2002f7           [ 6] 	jsr df_ost_popInt
e3e4 : 86a7             [ 3] 	stx df_tmpptrd
e3e6 : 85a8             [ 3] 	sta df_tmpptrd+1
                             
                             	; pop 3,2,1 parms
e3e8 : 4cc5e3           [ 3] 	jmp df_rt_parm_pop3
                             
                             	; pop 3rd parm
                             ;	jsr df_ost_popInt
                             ;	stx df_tmpptrc
                             ;	sta df_tmpptrc+1
                             	; pop 2nd parm
                             ;	jsr df_ost_popInt
                             ;	stx df_tmpptrb
                             ;	sta df_tmpptrb+1
                             	; pop 1st parm
                             ;	jsr df_ost_popInt
                             ;	stx df_tmpptra
                             ;	sta df_tmpptra+1
                             ;	rts
                             
                             ;****************************************
                             ; common code for 5 ints runtime parsing
                             ;****************************************
                             ;df_rt_parm_5ints
                             ;	; evaluate 1st parm
                             ;	jsr df_rt_neval
                             ;	inc df_exeoff
                             ;	; evaluate the 2nd parm
                             ;	jsr df_rt_neval
                             ;	inc df_exeoff
                             ;	; evaluate the 3rd parm
                             ;	jsr df_rt_neval
                             ;	inc df_exeoff
                             ;	; evaluate the 4th parm
                             ;	jsr df_rt_neval
                             ;	inc df_exeoff
                             ;	; evaluate the 5th parm
                             ;	jsr df_rt_neval
                             ;
                             ;	; pop 5th parm
                             ;	jsr df_ost_popInt
                             ;	stx df_tmpptre
                             ;	sta df_tmpptre+1
                             ;	; pop 4th parm
                             ;	jsr df_ost_popInt
                             ;	stx df_tmpptrd
                             ;	sta df_tmpptrd+1
                             ;	; pop 3rd parm
                             ;	jsr df_ost_popInt
                             ;	stx df_tmpptrc
                             ;	sta df_tmpptrc+1
                             ;	; pop 2nd parm
AS65 Assembler for R6502 [1.42].                                     Page  194
-------------------------------- bank\bank0.s --------------------------------

                             ;	jsr df_ost_popInt
                             ;	stx df_tmpptrb
                             ;	sta df_tmpptrb+1
                             ;	; pop 1st parm
                             ;	jsr df_ost_popInt
                             ;	stx df_tmpptra
                             ;	sta df_tmpptra+1
                             ;
                             ;	rts
                             
                             ;****************************************
                             ;* initialise statement to be executed
                             ;* X,A = line pointer, Y=statement offset
                             ;****************************************
e3eb :                       df_rt_init_stat_ptr
                             	; save current line
e3eb : 8686             [ 3] 	stx df_currlin
e3ed : 8587             [ 3] 	sta df_currlin+1
e3ef : 8480             [ 3] 	sty df_curstidx
e3f1 : 8488             [ 3] 	sty df_exeoff
e3f3 : b186             [ 5] 	lda (df_currlin),y
e3f5 : 857f             [ 3] 	sta df_nxtstidx
e3f7 : a200             [ 2] 	ldx #0
e3f9 : a186             [ 6] 	lda (df_currlin,x)
e3fb : 857e             [ 3] 	sta df_eolidx
                             ;	ldy df_curstidx
                             ;	lda (df_currlin),y
                             ;	sta df_nxtstidx
e3fd : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Execute from a statement pointed to
                             ;* by currlin and exeoff
                             ;****************************************
e3fe :                       df_rt_exec_stat
e3fe : a686             [ 3] 	ldx df_currlin
e400 : a587             [ 3] 	lda df_currlin+1
e402 : a488             [ 3] 	ldy df_exeoff
e404 :                       df_rt_exec_init_ptr
e404 : 20ebe3           [ 6] 	jsr df_rt_init_stat_ptr
                             	; assume normal flow of control if next line hi 
                             	; this means no line can execute below page 1, n
e407 : a900             [ 2] 	lda #0
e409 : 858a             [ 3] 	sta df_nextlin+1
                             
                             	; find first token in statement
e40b :                       df_rt_exec_find_tok
e40b : c8               [ 2] 	iny
e40c : b186             [ 5] 	lda (df_currlin),y
e40e : 10fb             [ 3] 	bpl df_rt_exec_find_tok
e410 :                       df_rt_exec_found_tok
                             	; skip past token to next byte in readiness
e410 : c8               [ 2] 	iny
e411 : 8488             [ 3] 	sty df_exeoff
                             	; Run that statement - if end of return will pul
                             	; and effectively do an rts from this routine.
e413 : 2064e4           [ 6] 	jsr df_rt_run_token
                             
                             	; check for break, asynch get
e416 : c65b             [ 5] 	dec df_checkkey
e418 : d00a             [ 3] 	bne df_rt_exec_no_key
e41a : a55c             [ 3] 	lda df_checkmsk
AS65 Assembler for R6502 [1.42].                                     Page  195
-------------------------------- bank\bank0.s --------------------------------

e41c : 855b             [ 3] 	sta df_checkkey
e41e : 18               [ 2] 	clc
e41f : 2024c4           [ 6] 	jsr io_get_ch
e422 : 9029             [ 3] 	bcc df_rt_exec_check_key
e424 :                       df_rt_exec_no_key
                             	; check if normal flow of control
e424 : a58a             [ 3] 	lda df_nextlin+1
e426 : d033             [ 3] 	bne df_rt_exec_jump
                             	; try and execute another statement until end of
e428 : a47f             [ 3] 	ldy df_nxtstidx
e42a : c47e             [ 3] 	cpy df_eolidx
e42c : 8488             [ 3] 	sty df_exeoff
e42e : d0ce             [ 4] 	bne df_rt_exec_stat
                             	
                             	; reached end of line, move to next
e430 : a200             [ 2] 	ldx #0
e432 : 18               [ 2] 	clc
e433 : a186             [ 6] 	lda (df_currlin,x)
e435 : 6586             [ 3] 	adc df_currlin
e437 : 8586             [ 3] 	sta df_currlin
                             	_bcc 2
                             
e43b : e687             [ 5] 	inc df_currlin+1
                             
                             	; start from first statement in new line
e43d : a003             [ 2] 	ldy #3
e43f : 8488             [ 3] 	sty df_exeoff
                             
                             	; check if this line has any content (length >0)
e441 : a186             [ 6] 	lda (df_currlin,x)
e443 : 857e             [ 3] 	sta df_eolidx
                             	; no more lines (len = 0), program done
e445 : d0b7             [ 4] 	bne df_rt_exec_stat
                             	; else done
                             	; normally wouldn't get here except immediate mo
                             	; if line number <> 0 then error
e447 : a55e             [ 3] 	lda df_immed
e449 : f00e             [ 3] 	beq df_rt_unexpected_end
e44b :                       df_rt_exec_end
e44b : 18               [ 2] 	clc
e44c : 60               [ 6] 	rts
e44d :                       df_rt_exec_check_key
e44d : c91a             [ 2] 	cmp #UTF_BRK					; CTRK-Z?
e44f : f006             [ 3] 	beq df_rt_exec_ctrl_z
e451 : c903             [ 2] 	cmp #UTF_ETX					; CTRL-C?
e453 : d0cf             [ 3] 	bne df_rt_exec_no_key			; None relevant keys, go
e455 :                       df_rt_exec_ctrl_c
                             	SWBRK DFERR_BREAK
                             
e457 :                       df_rt_exec_ctrl_z
                             	; Force a break with zero error number
                             	; this will drop in to the monitor
                             	SWBRK 0
                             
                             
e459 :                       df_rt_unexpected_end
                             	SWBRK DFERR_IMMEDIATE
                             
                             
                             	; if hi byte of nextline is not zero then
                             	; current line = next line
e45b :                       df_rt_exec_jump
AS65 Assembler for R6502 [1.42].                                     Page  196
-------------------------------- bank\bank0.s --------------------------------

                             	; initialise statement pointer from nextlin,toks
e45b : a689             [ 3] 	ldx df_nextlin
e45d : a58a             [ 3] 	lda df_nextlin+1
e45f : a47f             [ 3] 	ldy df_nxtstidx
e461 : 4c04e4           [ 3] 	jmp df_rt_exec_init_ptr
                             
                             
                             ;****************************************
                             ;* Run statement in A
                             ;****************************************
e464 :                       df_rt_run_token
                             	; mask off MSB
                             ;	and #0x7f
                             	; multiply by 2
e464 : 0a               [ 2] 	asl a
e465 : aa               [ 2] 	tax
e466 : bd4fe5           [ 4] 	lda df_rt_tokenjmp,x
e469 : 85a1             [ 3] 	sta df_tmpptra
e46b : bd50e5           [ 4] 	lda df_rt_tokenjmp+1,x
e46e : 85a2             [ 3] 	sta df_tmpptra+1
                             	; execution code finishes with rts
e470 : 6ca100           [ 6] 	jmp (df_tmpptra)
                             
                             
                             ;****************************************
                             ;* X,A : Line Address, Y = Index
                             ;* C=0 Found next statement
                             ;* C=1 No statement found
                             ;****************************************
e473 :                       df_rt_nextstat
                             	; save pointer
e473 : 8690             [ 3] 	stx df_lineptr
e475 : 8591             [ 3] 	sta df_lineptr+1
                             	; if end of program then err
e477 : a200             [ 2] 	ldx #0
e479 : a190             [ 6] 	lda (df_lineptr,x)
e47b : f022             [ 3] 	beq df_rt_nextstat_err
                             	; if next statement idx == line length
                             ;	lda (df_lineptr),y
                             ;	beq df_rt_nextstat_ln
e47d : b190             [ 5] 	lda (df_lineptr),y
e47f : c190             [ 6] 	cmp (df_lineptr,x)
e481 : f007             [ 3] 	beq df_rt_nextstat_ln
                             	; then go to next line
                             	; else make this Y
e483 : a8               [ 2] 	tay
                             	; X = line low
e484 : a690             [ 3] 	ldx df_lineptr
                             	; A = line high
e486 : a591             [ 3] 	lda df_lineptr+1
e488 : 18               [ 2] 	clc
e489 : 60               [ 6] 	rts
e48a :                       df_rt_nextstat_ln
                             	; for next line, add line length to ptr
e48a : 18               [ 2] 	clc
                             ;	lda (df_lineptr,x)
e48b : 6590             [ 3] 	adc df_lineptr
e48d : 8590             [ 3] 	sta df_lineptr
                             	_bcc 2
                             
e491 : e691             [ 5] 	inc df_lineptr+1
                             	; if end of program set C as error
AS65 Assembler for R6502 [1.42].                                     Page  197
-------------------------------- bank\bank0.s --------------------------------

e493 : a190             [ 6] 	lda (df_lineptr,x)
e495 : f008             [ 3] 	beq df_rt_nextstat_err
e497 : a690             [ 3] 	ldx df_lineptr
e499 : a591             [ 3] 	lda df_lineptr+1
                             	; always skip line number and length for start o
e49b : a003             [ 2] 	ldy #3
e49d : 18               [ 2] 	clc
e49e : 60               [ 6] 	rts
e49f :                       df_rt_nextstat_err
e49f : a000             [ 2] 	ldy #0
e4a1 : 38               [ 2] 	sec
e4a2 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Push current line and statement to runtime sta
                             ;****************************************
e4a3 :                       df_rt_push_stat
e4a3 : a580             [ 3] 	lda df_curstidx
e4a5 : 2089f6           [ 6] 	jsr df_rst_pushByte
e4a8 : a587             [ 3] 	lda df_currlin+1
e4aa : a686             [ 3] 	ldx df_currlin
e4ac : 4ca1f6           [ 3] 	jmp df_rst_pushWord
                             ;	clc
                             ;	rts
                             
                             ;****************************************
                             ;* Pop line and statement from runtime stack
                             ;* And transfer control to next statement
                             ;****************************************
e4af :                       df_rt_pop_stat
e4af : 20aff6           [ 6] 	jsr df_rst_popWord
e4b2 : 8689             [ 3] 	stx	df_nextlin
e4b4 : 858a             [ 3] 	sta df_nextlin+1
e4b6 : 2092f6           [ 6] 	jsr df_rst_popByte
e4b9 : a8               [ 2] 	tay
e4ba : a689             [ 3] 	ldx df_nextlin
e4bc : a58a             [ 3] 	lda df_nextlin+1
e4be : 2073e4           [ 6] 	jsr df_rt_nextstat
e4c1 : 8689             [ 3] 	stx df_nextlin
e4c3 : 858a             [ 3] 	sta df_nextlin+1
e4c5 : 847f             [ 3] 	sty df_nxtstidx
                             ;	clc
e4c7 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Find proc definition in procptr
                             ;* Only call if proc not found before
                             ;****************************************
e4c8 :                       df_rt_findproc
                             	; start at program beginning
                             	_cpyZPWord df_prgstrt,df_lineptr
                             
e4d0 : a003             [ 2] 	ldy #3
e4d2 : 8492             [ 3] 	sty df_lineidx
e4d4 : a200             [ 2] 	ldx #0
e4d6 : a190             [ 6] 	lda (df_lineptr,x)
e4d8 : f034             [ 4] 	beq df_rt_findproc_err
e4da :                       df_rt_findproc_cmd
e4da : c8               [ 2] 	iny
e4db : b190             [ 5] 	lda (df_lineptr),y
e4dd : 10fb             [ 3] 	bpl df_rt_findproc_cmd
e4df : c986             [ 2] 	cmp #DFRT_DEF
AS65 Assembler for R6502 [1.42].                                     Page  198
-------------------------------- bank\bank0.s --------------------------------

e4e1 : d017             [ 3] 	bne df_rt_findproc_nextstat
                             	; skip def token
e4e3 : c8               [ 2] 	iny
                             	; skip proc escape token
e4e4 : c8               [ 2] 	iny
                             	; now check the proc address against procptr
e4e5 : b190             [ 5] 	lda (df_lineptr),y
e4e7 : c58e             [ 3] 	cmp df_procptr
e4e9 : d00f             [ 3] 	bne df_rt_findproc_nextstat
e4eb : c8               [ 2] 	iny
e4ec : b190             [ 5] 	lda (df_lineptr),y
e4ee : c58f             [ 3] 	cmp df_procptr+1
e4f0 : d008             [ 3] 	bne df_rt_findproc_nextstat
                             
                             	; found it, return AXY with line details
e4f2 : a690             [ 3] 	ldx df_lineptr
e4f4 : a591             [ 3] 	lda df_lineptr+1
e4f6 : a492             [ 3] 	ldy df_lineidx
e4f8 : 18               [ 2] 	clc
e4f9 : 60               [ 6] 	rts
e4fa :                       df_rt_findproc_nextstat
                             	; restore AXY line details and find next stateme
e4fa : a690             [ 3] 	ldx df_lineptr
e4fc : a591             [ 3] 	lda df_lineptr+1
e4fe : a492             [ 3] 	ldy df_lineidx
e500 : 2073e4           [ 6] 	jsr df_rt_nextstat
e503 : b009             [ 3] 	bcs df_rt_findproc_err
e505 : 8690             [ 3] 	stx df_lineptr
e507 : 8591             [ 3] 	sta df_lineptr+1
e509 : 8492             [ 3] 	sty df_lineidx
e50b : 4cdae4           [ 3] 	jmp df_rt_findproc_cmd
                             	; error
e50e :                       df_rt_findproc_err
                             	SWBRK DFERR_NOPROC
                             
                             
                             ;****************************************
                             ;* Find an escape value
                             ;* Does not check for end of line or statement
                             ;****************************************
e510 :                       df_rt_findescval
e510 : a488             [ 3] 	ldy df_exeoff
e512 : 88               [ 2] 	dey
e513 :                       df_rt_findescval_loop
e513 : c8               [ 2] 	iny
e514 : b186             [ 5] 	lda (df_currlin),y
e516 : c920             [ 2] 	cmp #DFTK_ESCVAL
e518 : b0f9             [ 3] 	bcs df_rt_findescval_loop
e51a : 8488             [ 3] 	sty df_exeoff
e51c : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Skip white space
                             ;* Does not check for end of line or statement
                             ;* A contains non-ws char, df_exeoff updated
                             ;****************************************
e51d :                       df_rt_skip_ws
e51d : a488             [ 3] 	ldy df_exeoff
e51f : 88               [ 2] 	dey
e520 :                       df_rt_skip_ws_loop
e520 : c8               [ 2] 	iny
e521 : b186             [ 5] 	lda (df_currlin),y
AS65 Assembler for R6502 [1.42].                                     Page  199
-------------------------------- bank\bank0.s --------------------------------

e523 : c920             [ 2] 	cmp #' '
e525 : f0f9             [ 3] 	beq df_rt_skip_ws_loop
e527 : 8488             [ 3] 	sty df_exeoff
e529 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Get an lvar
                             ;* Assumes next token will be escape DFTK_VAR
                             ;* tmpptra contains vvt slot address
                             ;* X,A is the lvar pointer
                             ;****************************************
e52a :                       df_rt_getlvar
e52a : 2010e5           [ 6] 	jsr df_rt_findescval
                             	; move past the escape value
e52d : c8               [ 2] 	iny
                             
                             	; get variable address
e52e : b186             [ 5] 	lda (df_currlin),y
e530 : 85a1             [ 3] 	sta df_tmpptra
e532 : c8               [ 2] 	iny
e533 : b186             [ 5] 	lda (df_currlin),y
e535 : 85a2             [ 3] 	sta df_tmpptra+1
                             
e537 : 8488             [ 3] 	sty df_exeoff
                             	; get the type
e539 : a000             [ 2] 	ldy #0
e53b : b1a1             [ 5] 	lda (df_tmpptra),y
                             	; set carry flag to return pointer (lvar)
e53d : 38               [ 2] 	sec
e53e : a488             [ 3] 	ldy df_exeoff
e540 : 208de2           [ 6] 	jsr df_rt_eval_var
e543 : 4c0af7           [ 3] 	jmp df_ost_popPtr
                             ;	rts
                             
                             ;****************************************
                             ;* Pop stat from rt stack and continue
                             ;* Y MUST BE ON THE CPU STACK AS IT GETS PLYed HE
                             ;****************************************
e546 :                       df_rt_pop_stat_go
e546 : 20afe4           [ 6] 	jsr df_rt_pop_stat
                             	; restore stack pointer so we don't lose this en
e549 : 68               [ 4] 	pla
e54a : a8               [ 2] 	tay
e54b : 8476             [ 3] 	sty df_rtstop
e54d : 18               [ 2] 	clc
e54e : 60               [ 6] 	rts
                             
                             	include "dflat/rtjmptab.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  RTJUMPTAB.S
                             ;*  Runtime token jump table.
                             ;*  dflat uses four key tables to tokenise and ru
                             ;*  - df_tokensyms    - table of token symbols
                             ;*  - df_tk_tokentype - table of token types
                             ;*  - df_tk_tokenjmp  - table of tokenising routi
AS65 Assembler for R6502 [1.42].                                     Page  200
-------------------------------- bank\bank0.s --------------------------------

                             ;*  - df_rt_tokenjmp  - table of runtime token an
                             ;*  The key is the token symbols.  When a line is
                             ;*  in to the raw (untokenised) buffer, df_tokens
                             ;*  used to identify tokens.  The position of the
                             ;*  token is used to then look up type and jump v
                             ;*  in the other tables.
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code  
                             
                             ; Tokeniser jump table
                             ; In token order of df_tokensyms
e54f :                       df_rt_tokenjmp
e54f : 3bed                  	dw	df_rt_assign
e551 : 28f5                  	dw	df_rt_proc
e553 : 4ced                  	dw	df_rt_comment
e555 : f3ec                  	dw	df_rt_println
e557 : b0ec                  	dw	df_rt_printat
e559 : baec                  	dw	df_rt_print
e55b : c8f5                  	dw	df_rt_def			; 0x86
e55d : 4bf6                  	dw	df_rt_enddef		; 0x87
e55f : 48f6                  	dw	df_rt_return		; 0x88
e561 : eaf4                  	dw	df_rt_abort			; 0x89
e563 : 0ceb                  	dw	df_rt_local
e565 : 38eb                  	dw	df_rt_dim
e567 : dae9                  	dw	df_rt_repeat		; 0x8c
e569 : e2e9                  	dw	df_rt_until
e56b : 41e9                  	dw	df_rt_for			; 0x8e
e56d : 7fe9                  	dw	df_rt_next			; 0x8f
e56f : 1ae8                  	dw	df_rt_while			; 0x90
e571 : 7de8                  	dw	df_rt_wend			; 0x81
e573 : 00e9                  	dw	df_rt_if			; 0x92
e575 : eee8                  	dw	df_rt_else			; 0x93
e577 : e9e8                  	dw	df_rt_endif			; 0x94
e579 : eee8                  	dw	df_rt_elseif		; 0x95
e57b : 4ced                  	dw	df_rt_data			; 0x96
e57d : f2f9                  	dw	df_rt_asm_assemble	; 0x97 df_rt_asm_assemble
e57f : 4ded                  	dw	df_rt_run
e581 : 42ee                  	dw	df_rt_list
e583 : d0ea                  	dw	df_rt_input
e585 : 43ec                  	dw	df_rt_text
e587 : c0eb                  	dw	df_rt_plot
e589 : 31ec                  	dw	df_rt_cursor
e58b : bdeb                  	dw	df_rt_cls
e58d : aaf0                  	dw	df_rt_poke
e58f : 9bf0                  	dw	df_rt_doke
e591 : ddf0                  	dw	df_rt_sound
e593 : f0f0                  	dw	df_rt_music
e595 : 05f1                  	dw	df_rt_play
e597 : fdf1                  	dw	df_rt_save
e599 : 4ff2                  	dw	df_rt_load
e59b : b8ea                  	dw	df_rt_read
e59d : 17e8                  	dw	df_rt_new
e59f : 5eed                  	dw	df_rt_renum
e5a1 : 9aec                  	dw	df_rt_wait
e5a3 : b5f2                  	dw	df_rt_reset
e5a5 : 46ec                  	dw	df_rt_hires
e5a7 : 5fec                  	dw	df_rt_point
e5a9 : 89ec                  	dw	df_rt_line
e5ab : 7bec                  	dw	df_rt_lineto
AS65 Assembler for R6502 [1.42].                                     Page  201
-------------------------------- bank\bank0.s --------------------------------

e5ad : 49ec                  	dw	df_rt_pixmode
e5af : 4fec                  	dw	df_rt_ink
e5b1 : 55ec                  	dw	df_rt_paper
e5b3 : 69ec                  	dw	df_rt_circle
                             ;	dw	df_rt_fill
e5b5 : 37ec                  	dw	df_rt_himem
e5b7 : 14e8                  	dw	df_rt_monitor
e5b9 : ecf4                  	dw	df_rt_sprchar
e5bb : f6f4                  	dw	df_rt_sprpos
e5bd : 02f5                  	dw	df_rt_sprupd
e5bf : 0bf5                  	dw	df_rt_sprinit
e5c1 : 0ef5                  	dw	df_rt_sprmulti
e5c3 : dcf1                  	dw	df_rt_bsave
e5c5 : a9f1                  	dw	df_rt_bload
e5c7 : 54f1                  	dw	df_rt_tsave
e5c9 : 6ef1                  	dw	df_rt_tload
                             
e5cb : ccf2                  	dw	df_rt_peek
e5cd : caf2                  	dw	df_rt_deek
e5cf : 55f3                  	dw	df_rt_stick
e5d1 : 5bf3                  	dw	df_rt_get
e5d3 : 1bf4                  	dw	df_rt_chr
e5d5 : 6df4                  	dw	df_rt_left
e5d7 : 7ef4                  	dw	df_rt_right
e5d9 : 99f4                  	dw	df_rt_mid
e5db : b7f4                  	dw	df_rt_len
e5dd : 07f3                  	dw	df_rt_mem
e5df : 6ff3                  	dw	df_rt_scrn
e5e1 : e5f2                  	dw	df_rt_rnd
e5e3 : 89f3                  	dw	df_rt_elapsed
e5e5 : a4f3                  	dw	df_rt_call
e5e7 : 2ff4                  	dw	df_rt_hex
e5e9 : 60f4                  	dw	df_rt_dec
e5eb : c3f4                  	dw	df_rt_asc
e5ed : d4f4                  	dw	df_rt_val
e5ef : 7cf3                  	dw	df_rt_pixel
e5f1 : 14f5                  	dw	df_rt_sprhit
e5f3 : b6f3                  	dw	df_rt_sgn
e5f5 : d3f3                  	dw	df_rt_addr
                             	
e5f7 : 6ae6                  	dw	df_rt_mult
e5f9 : 8be6                  	dw	df_rt_div
e5fb : ace6                  	dw	df_rt_mod
e5fd : cde6                  	dw	df_rt_asl
e5ff : e0e6                  	dw	df_rt_lsr
e601 : 44e6                  	dw	df_rt_add
e603 : 57e6                  	dw	df_rt_sub
                             	
e605 : f3e6                  	dw	df_rt_and
e607 : 02e7                  	dw	df_rt_or
e609 : 11e7                  	dw	df_rt_eor
e60b : aae7                  	dw	df_rt_comlte
e60d : b3e7                  	dw	df_rt_comgte
e60f : bce7                  	dw	df_rt_comne
e611 : 8fe7                  	dw	df_rt_comlt
e613 : 98e7                  	dw	df_rt_comgt
e615 : a1e7                  	dw	df_rt_comeq
                             
                             
                             ; escape sequence handlers
                             ; to do the reverse of tokenising during the list
                             ; command which is also used to save to disk.
AS65 Assembler for R6502 [1.42].                                     Page  202
-------------------------------- bank\bank0.s --------------------------------

e617 :                       df_rt_escjmp
e617 : 15ef                  	dw df_rt_lst_chr
e619 : 14ef                  	dw df_rt_lst_reserved
e61b : 14ef                  	dw df_rt_lst_reserved
e61d : 14ef                  	dw df_rt_lst_reserved
e61f : 14ef                  	dw df_rt_lst_reserved	
e621 : 14ef                  	dw df_rt_lst_reserved	; no such thing as bytdec
e623 : 32ef                  	dw df_rt_lst_bythex
e625 : 57ef                  	dw df_rt_lst_bytbin
e627 : 14ef                  	dw df_rt_lst_reserved	
e629 : 7bef                  	dw df_rt_lst_intdec
e62b : 45ef                  	dw df_rt_lst_inthex
e62d : 5fef                  	dw df_rt_lst_intbin
e62f : 14ef                  	dw df_rt_lst_reserved
e631 : 14ef                  	dw df_rt_lst_reserved
e633 : 14ef                  	dw df_rt_lst_reserved
e635 : 14ef                  	dw df_rt_lst_reserved	
e637 : d8ef                  	dw df_rt_lst_strlit
e639 : 86ef                  	dw df_rt_lst_var
e63b : 86ef                  	dw df_rt_lst_proc
                             
                             	include "dflat/rtsubs.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  RTSUBS.S
                             ;*  Module that implements the runtime execution 
                             ;*  keywords and functions.
                             ;*  So this is where most of the action is for ru
                             ;*  a line is being executed, the dflat runtime c
                             ;*  jumps through the runtime table to routines h
                             ;*  Every dflat statement begins with a token (ig
                             ;*  whitespace), even the implicit assignment and
                             ;*  invocation.
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code
                             
e63d :                       mod_sz_rtsubs_s
                             
                             	include "dflat/numop.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  NUMOP.S
                             ;*	Dflat number AND string operators.
                             ;*  Uses the operator stack to get parameters, le
                             ;*  result on the operator stack.
                             ;*
                             ;************************************************
AS65 Assembler for R6502 [1.42].                                     Page  203
-------------------------------- bank\bank0.s --------------------------------

                             
                             	; ROM code
                             	code  
                             
                             ; common pushint code
e63d :                       df_rt_putintres
e63d : a6a1             [ 3] 	ldx df_tmpptra
e63f : a5a2             [ 3] 	lda df_tmpptra+1
e641 : 4cd2f6           [ 3] 	jmp df_ost_pushInt
                             
                             ; add two numbers
e644 :                       df_rt_add
e644 : 208fe3           [ 6] 	jsr df_rt_get2Ints
                             	_addZPWord df_tmpptra,df_tmpptrb
                             
e654 : 4c3de6           [ 3] 	jmp df_rt_putintres
                             	
                             ; subtract
e657 :                       df_rt_sub
e657 : 208fe3           [ 6] 	jsr df_rt_get2Ints
                             	_subZPWord df_tmpptra,df_tmpptrb
                             
e667 : 4c3de6           [ 3] 	jmp df_rt_putintres
                             
                             ; multiply
e66a :                       df_rt_mult
e66a : 208fe3           [ 6] 	jsr df_rt_get2Ints
                             	_cpyZPWord df_tmpptra,num_a
                             
                             	_cpyZPWord df_tmpptrb,num_b
                             
e67d : 20f8d4           [ 6] 	jsr int_mult
                             	_cpyZPWord num_a,df_tmpptra
                             
e688 : 4c3de6           [ 3] 	jmp df_rt_putintres
                             
                             ; divide
e68b :                       df_rt_div
e68b : 208fe3           [ 6] 	jsr df_rt_get2Ints
                             	_cpyZPWord df_tmpptra,num_a
                             
                             	_cpyZPWord df_tmpptrb,num_b
                             
e69e : 2023d5           [ 6] 	jsr int_div
                             	_cpyZPWord num_a,df_tmpptra
                             
e6a9 : 4c3de6           [ 3] 	jmp df_rt_putintres
                             
                             ; mod
e6ac :                       df_rt_mod
e6ac : 208fe3           [ 6] 	jsr df_rt_get2Ints
                             	_cpyZPWord df_tmpptra,num_a
                             
                             	_cpyZPWord df_tmpptrb,num_b
                             
e6bf : 2023d5           [ 6] 	jsr int_div
                             	_cpyZPWord num_x,df_tmpptra
                             
e6ca : 4c3de6           [ 3] 	jmp df_rt_putintres
                             
                             ; shift left
e6cd :                       df_rt_asl
AS65 Assembler for R6502 [1.42].                                     Page  204
-------------------------------- bank\bank0.s --------------------------------

e6cd : 208fe3           [ 6] 	jsr df_rt_get2Ints
                             	; use low byte only for # of shifts
e6d0 : a6a3             [ 3] 	ldx df_tmpptrb
e6d2 : e8               [ 2] 	inx
e6d3 :                       df_rt_aslbit
e6d3 : ca               [ 2] 	dex
e6d4 : f007             [ 3] 	beq df_rt_asldone
e6d6 : 06a1             [ 5] 	asl df_tmpptra
e6d8 : 26a2             [ 5] 	rol df_tmpptra+1
e6da : 4cd3e6           [ 3] 	jmp df_rt_aslbit
e6dd :                       df_rt_asldone
e6dd : 4c3de6           [ 3] 	jmp df_rt_putintres
                             
                             ; shift right
e6e0 :                       df_rt_lsr
e6e0 : 208fe3           [ 6] 	jsr df_rt_get2Ints
                             	; use low byte only for # of shifts
e6e3 : a6a3             [ 3] 	ldx df_tmpptrb
e6e5 : e8               [ 2] 	inx
e6e6 :                       df_rt_lsrbit
e6e6 : ca               [ 2] 	dex
e6e7 : f007             [ 3] 	beq df_rt_lsrdone
e6e9 : 46a2             [ 5] 	lsr df_tmpptra+1
e6eb : 66a1             [ 5] 	ror df_tmpptra
e6ed : 4ce6e6           [ 3] 	jmp df_rt_lsrbit
e6f0 :                       df_rt_lsrdone
e6f0 : 4c3de6           [ 3] 	jmp df_rt_putintres
                             
                             ; logical and
e6f3 :                       df_rt_and
e6f3 : 208fe3           [ 6] 	jsr df_rt_get2Ints
e6f6 : a5a1             [ 3] 	lda df_tmpptra
e6f8 : 25a3             [ 3] 	and df_tmpptrb
e6fa : aa               [ 2] 	tax
e6fb : a5a2             [ 3] 	lda df_tmpptra+1
e6fd : 25a4             [ 3] 	and df_tmpptrb+1
e6ff : 4cd2f6           [ 3] 	jmp df_ost_pushInt
                             	
                             ; logical or
e702 :                       df_rt_or
e702 : 208fe3           [ 6] 	jsr df_rt_get2Ints
e705 : a5a1             [ 3] 	lda df_tmpptra
e707 : 05a3             [ 3] 	ora df_tmpptrb
e709 : aa               [ 2] 	tax
e70a : a5a2             [ 3] 	lda df_tmpptra+1
e70c : 05a4             [ 3] 	ora df_tmpptrb+1
e70e : 4cd2f6           [ 3] 	jmp df_ost_pushInt
                             
                             ; logical eor
e711 :                       df_rt_eor
e711 : 208fe3           [ 6] 	jsr df_rt_get2Ints
e714 : a5a1             [ 3] 	lda df_tmpptra
e716 : 45a3             [ 3] 	eor df_tmpptrb
e718 : aa               [ 2] 	tax
e719 : a5a2             [ 3] 	lda df_tmpptra+1
e71b : 45a4             [ 3] 	eor df_tmpptrb+1
e71d : 4cd2f6           [ 3] 	jmp df_ost_pushInt
                             
                             ; a==b common function
e720 :                       df_rt_aequb
e720 : a5a1             [ 3] 	lda df_tmpptra
e722 : c5a3             [ 3] 	cmp df_tmpptrb
AS65 Assembler for R6502 [1.42].                                     Page  205
-------------------------------- bank\bank0.s --------------------------------

e724 : d004             [ 3] 	bne df_rt_aequbFin
e726 : a5a2             [ 3] 	lda df_tmpptra+1
e728 : c5a4             [ 3] 	cmp df_tmpptrb+1
e72a :                       df_rt_aequbFin
e72a : 60               [ 6] 	rts
                             
                             ; a-b common function
e72b :                       df_rt_asubb
e72b : 38               [ 2] 	sec
e72c : a5a1             [ 3] 	lda df_tmpptra
e72e : e5a3             [ 3] 	sbc df_tmpptrb
e730 : a5a2             [ 3] 	lda df_tmpptra+1
e732 : e5a4             [ 3] 	sbc df_tmpptrb+1
e734 : 5002             [ 3] 	bvc df_rt_asubbFin
e736 : 4980             [ 2] 	eor #0x80
e738 :                       df_rt_asubbFin
e738 : 60               [ 6] 	rts
                             
                             ; b-a common function
e739 :                       df_rt_bsuba
e739 : 38               [ 2] 	sec
e73a : a5a3             [ 3] 	lda df_tmpptrb
e73c : e5a1             [ 3] 	sbc df_tmpptra
e73e : a5a4             [ 3] 	lda df_tmpptrb+1
e740 : e5a2             [ 3] 	sbc df_tmpptra+1
e742 : 5002             [ 3] 	bvc df_rt_bsubaFin
e744 : 4980             [ 2] 	eor #0x80
e746 :                       df_rt_bsubaFin
e746 : 60               [ 6] 	rts
                             
                             ; common routine push true
e747 :                       df_rt_true
e747 : a2ff             [ 2] 	ldx #0xff
e749 : 8a               [ 2] 	txa
e74a : 4cd2f6           [ 3] 	jmp df_ost_pushInt
                             
                             ; common routine push false
e74d :                       df_rt_false
e74d : a200             [ 2] 	ldx #0x00
e74f : 8a               [ 2] 	txa
e750 : 4cd2f6           [ 3] 	jmp df_ost_pushInt
                             
                             ; a < b == (a-b) < 0
e753 :                       df_rt_lt
e753 : 208fe3           [ 6] 	jsr df_rt_get2Ints
e756 : 202be7           [ 6] 	jsr df_rt_asubb
e759 : 30ec             [ 3] 	bmi df_rt_true
e75b : 10f0             [ 3] 	bpl df_rt_false
                             
                             ; a <=b == !(b-a > 0)
e75d :                       df_rt_lte
e75d : 208fe3           [ 6] 	jsr df_rt_get2Ints
e760 :                       df_rt_lte_calc
e760 : 2039e7           [ 6] 	jsr df_rt_bsuba
e763 : 30e8             [ 3] 	bmi df_rt_false
e765 : 10e0             [ 3] 	bpl df_rt_true
                             
                             ; a > b == (b-a) < 0
e767 :                       df_rt_gt
e767 : 208fe3           [ 6] 	jsr df_rt_get2Ints
e76a : 2039e7           [ 6] 	jsr df_rt_bsuba
e76d : 30d8             [ 3] 	bmi df_rt_true
AS65 Assembler for R6502 [1.42].                                     Page  206
-------------------------------- bank\bank0.s --------------------------------

e76f : 10dc             [ 3] 	bpl df_rt_false
                             
                             ; a >= b == (a-b >=0)
e771 :                       df_rt_gte
e771 : 208fe3           [ 6] 	jsr df_rt_get2Ints
e774 :                       df_rt_gte_calc
e774 : 202be7           [ 6] 	jsr df_rt_asubb
e777 : 10ce             [ 3] 	bpl df_rt_true
e779 : 30d2             [ 3] 	bmi df_rt_false
                             
                             ; a == b
e77b :                       df_rt_eq
e77b : 208fe3           [ 6] 	jsr df_rt_get2Ints
e77e : 2020e7           [ 6] 	jsr df_rt_aequb
e781 : d0ca             [ 3] 	bne df_rt_false
e783 : f0c2             [ 3] 	beq df_rt_true
                             
                             ; a <> b
e785 :                       df_rt_ne
e785 : 208fe3           [ 6] 	jsr df_rt_get2Ints
e788 : 2020e7           [ 6] 	jsr df_rt_aequb
e78b : f0c0             [ 3] 	beq df_rt_false
e78d : d0b8             [ 3] 	bne df_rt_true
                             
                             ; Common usage of boolean operators for num and s
                             
e78f :                       df_rt_comlt
                             	; First find the data type on the stack
e78f : 20fcf6           [ 6] 	jsr df_ost_peekType
e792 : 2980             [ 2] 	and #DFST_STR
e794 : d04a             [ 3] 	bne df_rt_slt
                             	; If not string then assume number
e796 : f0bb             [ 3] 	beq df_rt_lt
                             
e798 :                       df_rt_comgt
                             	; First find the data type on the stack
e798 : 20fcf6           [ 6] 	jsr df_ost_peekType
e79b : 2980             [ 2] 	and #DFST_STR
e79d : d048             [ 3] 	bne df_rt_sgt
                             	; If not string then assume number
e79f : f0c6             [ 3] 	beq df_rt_gt
                             
e7a1 :                       df_rt_comeq
                             	; First find the data type on the stack
e7a1 : 20fcf6           [ 6] 	jsr df_ost_peekType
e7a4 : 2980             [ 2] 	and #DFST_STR
e7a6 : d048             [ 3] 	bne df_rt_seq
                             	; If not string then assume number
e7a8 : f0d1             [ 3] 	beq df_rt_eq
                             
e7aa :                       df_rt_comlte
                             	; First find the data type on the stack
e7aa : 20fcf6           [ 6] 	jsr df_ost_peekType
e7ad : 2980             [ 2] 	and #DFST_STR
e7af : d014             [ 3] 	bne df_rt_slte
                             	; If not string then assume number
e7b1 : f0aa             [ 3] 	beq df_rt_lte
                             	
e7b3 :                       df_rt_comgte
                             	; First find the data type on the stack
e7b3 : 20fcf6           [ 6] 	jsr df_ost_peekType
e7b6 : 2980             [ 2] 	and #DFST_STR
AS65 Assembler for R6502 [1.42].                                     Page  207
-------------------------------- bank\bank0.s --------------------------------

e7b8 : d018             [ 3] 	bne df_rt_sgte
                             	; If not string then assume number
e7ba : f0b5             [ 3] 	beq df_rt_gte
                             
e7bc :                       df_rt_comne
                             	; First find the data type on the stack
e7bc : 20fcf6           [ 6] 	jsr df_ost_peekType
e7bf : 2980             [ 2] 	and #DFST_STR
e7c1 : d016             [ 3] 	bne df_rt_sne
                             	; If not string then assume number
e7c3 : f0c0             [ 3] 	beq df_rt_ne
                             
                             
                             ;********** STRING OPS **********
                             
                             ; string less than or equal
e7c5 :                       df_rt_slte
e7c5 : 20f7e7           [ 6] 	jsr df_rt_str_comp
e7c8 : 3005             [ 3] 	bmi df_rt_str_comp_true
e7ca : f003             [ 3] 	beq df_rt_str_comp_true
e7cc :                       df_rt_str_comp_false
e7cc : 4c4de7           [ 3] 	jmp df_rt_false
e7cf :                       df_rt_str_comp_true
e7cf : 4c47e7           [ 3] 	jmp df_rt_true	
                             
                             ; string greater then or equal	
e7d2 :                       df_rt_sgte
e7d2 : 20f7e7           [ 6] 	jsr df_rt_str_comp
e7d5 : 10f8             [ 3] 	bpl df_rt_str_comp_true
e7d7 : 30f3             [ 3] 	bmi df_rt_str_comp_false
                             
                             ; string not equal
e7d9 :                       df_rt_sne
e7d9 : 20f7e7           [ 6] 	jsr df_rt_str_comp
e7dc : d0f1             [ 3] 	bne df_rt_str_comp_true
e7de : f0ec             [ 3] 	beq df_rt_str_comp_false
                             
                             ; string less than
e7e0 :                       df_rt_slt
e7e0 : 20f7e7           [ 6] 	jsr df_rt_str_comp
e7e3 : 30ea             [ 3] 	bmi df_rt_str_comp_true
e7e5 : 10e5             [ 3] 	bpl df_rt_str_comp_false
                             
                             ; string greater than
e7e7 :                       df_rt_sgt
e7e7 : 20f7e7           [ 6] 	jsr df_rt_str_comp
e7ea : 30e0             [ 3] 	bmi df_rt_str_comp_false
e7ec : f0de             [ 3] 	beq df_rt_str_comp_false
e7ee : d0df             [ 3] 	bne df_rt_str_comp_true
                             
                             ; string equal
e7f0 :                       df_rt_seq
e7f0 : 20f7e7           [ 6] 	jsr df_rt_str_comp
e7f3 : f0da             [ 3] 	beq df_rt_str_comp_true
e7f5 : d0d5             [ 3] 	bne df_rt_str_comp_false
                             
                             ; common string comparator
                             ; N=1 means <
                             ; Z=0 means >
                             ; Z=1 means ==
e7f7 :                       df_rt_str_comp
e7f7 : 209ee3           [ 6] 	jsr df_rt_get2Strs
AS65 Assembler for R6502 [1.42].                                     Page  208
-------------------------------- bank\bank0.s --------------------------------

e7fa : a000             [ 2] 	ldy #0
e7fc :                       df_rt_str_comp_byte
e7fc : b1a1             [ 5] 	lda (df_tmpptra),y
e7fe : aa               [ 2] 	tax							; Save op1 char in X
e7ff : d1a3             [ 5] 	cmp (df_tmpptrb),y
                             	; if c=0 then <
e801 : 9008             [ 3] 	bcc df_rt_str_comp_lt
                             	; if c=1 and nz then >
e803 : d009             [ 3] 	bne df_rt_str_comp_gt
                             	; if here then both strings still the same
e805 : 8a               [ 2] 	txa							; What was op1 char
                             	; if char is zero then end
e806 : f009             [ 3] 	beq df_rt_str_comp_eq
                             	; else do next char
e808 : c8               [ 2] 	iny
e809 : d0f1             [ 4] 	bne df_rt_str_comp_byte ; Always - relying on Y 
e80b :                       df_rt_str_comp_lt
e80b : a9ff             [ 2] 	lda #0xff
e80d : 60               [ 6] 	rts
e80e :                       df_rt_str_comp_gt
e80e : a901             [ 2] 	lda #0x01
e810 : 60               [ 6] 	rts
e811 :                       df_rt_str_comp_eq
e811 : a900             [ 2] 	lda #0x00
e813 : 60               [ 6] 	rts
                             
                             
                             
                             
e814 :                       df_rt_monitor
e814 : 4c73d3           [ 3] 	jmp command_line
                             
e817 :                       df_rt_new
e817 : 4c33f7           [ 3] 	jmp df_clear
                             
e81a :                       df_rt_while
                             	; push statement address
e81a : 20a3e4           [ 6] 	jsr df_rt_push_stat
                             	; DFRT_WHILE token
e81d : a990             [ 2] 	lda #DFRT_WHILE
e81f : 2089f6           [ 6] 	jsr df_rst_pushByte
                             
                             	; get value in A,X
e822 : 20e3e0           [ 6] 	jsr df_rt_getnval
                             
                             	; if value<>0 then continue
e825 : e000             [ 2] 	cpx #0
e827 : f001             [ 3] 	beq df_rt_while_done
e829 : 60               [ 6] 	rts
e82a :                       df_rt_while_done
                             	; pop while data off stack as not needed
e82a : 20aff6           [ 6] 	jsr df_rst_popWord
e82d : 20aff6           [ 6] 	jsr df_rst_popWord
                             	; while evaluated false so find wend
                             	; but check for any nested while/wends
                             	; nest = 1 to start
e830 : a593             [ 3] 	lda df_ifnest
e832 : 48               [ 3] 	pha
e833 : a901             [ 2] 	lda #1
e835 : 8593             [ 3] 	sta df_ifnest
                             	; find the matching else/elseif/endif
                             	; start from current statement
AS65 Assembler for R6502 [1.42].                                     Page  209
-------------------------------- bank\bank0.s --------------------------------

                             	_cpyZPWord df_currlin,df_nextlin
                             
e83f :                       df_rt_findwend
e83f : a689             [ 3] 	ldx df_nextlin
e841 : a58a             [ 3] 	lda df_nextlin+1
e843 : a480             [ 3] 	ldy df_curstidx
e845 : 2073e4           [ 6] 	jsr df_rt_nextstat
                             	; got to end of program, then a problem
e848 : b031             [ 3] 	bcs df_rt_wend_end
e84a : 8689             [ 3] 	stx df_nextlin
e84c : 858a             [ 3] 	sta df_nextlin+1
e84e : 8480             [ 3] 	sty df_curstidx
                             	; find the command token
e850 :                       df_rt_while_cmd
e850 : c8               [ 2] 	iny
e851 : b189             [ 5] 	lda (df_nextlin),y
e853 : 10fb             [ 3] 	bpl df_rt_while_cmd
                             	; check for wend
e855 : c991             [ 2] 	cmp #DFRT_WEND
e857 : d019             [ 3] 	bne df_rt_check_while
                             	; decrement nest
e859 : c693             [ 5] 	dec df_ifnest
                             	; if not zero then go find more commands
e85b : d0e2             [ 3] 	bne df_rt_findwend
                             	; else found it, restore if nest
                             	; and skip the wend statement
e85d : 68               [ 4] 	pla
e85e : 8593             [ 3] 	sta df_ifnest
e860 : a689             [ 3] 	ldx df_nextlin
e862 : a58a             [ 3] 	lda df_nextlin+1
e864 : a480             [ 3] 	ldy df_curstidx
e866 : 2073e4           [ 6] 	jsr df_rt_nextstat
                             	; got to end of program, then a problem
e869 : b010             [ 3] 	bcs df_rt_wend_end
                             	; need to update nxtstidx to transfer control
e86b : 8689             [ 3] 	stx df_nextlin
e86d : 858a             [ 3] 	sta df_nextlin+1
e86f : 847f             [ 3] 	sty df_nxtstidx
e871 : 60               [ 6] 	rts
e872 :                       df_rt_check_while
                             	; check for while
e872 : c990             [ 2] 	cmp #DFRT_WHILE
e874 : d0c9             [ 3] 	bne df_rt_findwend
                             	; if while found then increment nest
e876 : e693             [ 5] 	inc df_ifnest
e878 : 4c3fe8           [ 3] 	jmp df_rt_findwend
e87b :                       df_rt_wend_end
                             	SWBRK DFERR_IMMEDIATE
                             
                             
e87d :                       df_rt_wend
e87d : 2092f6           [ 6] 	jsr df_rst_popByte
e880 : c990             [ 2] 	cmp #DFRT_WHILE
e882 : d00d             [ 3] 	bne df_rt_wend_err
                             	; pop the stat and continue
e884 : 20aff6           [ 6] 	jsr df_rst_popWord
e887 : 8689             [ 3] 	stx	df_nextlin
e889 : 858a             [ 3] 	sta df_nextlin+1
e88b : 2092f6           [ 6] 	jsr df_rst_popByte
e88e : 857f             [ 3] 	sta df_nxtstidx
e890 : 60               [ 6] 	rts
e891 :                       df_rt_wend_err
AS65 Assembler for R6502 [1.42].                                     Page  210
-------------------------------- bank\bank0.s --------------------------------

                             	SWBRK DFERR_WEND
                             
                             
                             ;move to next statement during if/else matching
                             ;end of program is an error
e893 :                       df_rt_if_stat
e893 : a689             [ 3] 	ldx df_nextlin
e895 : a58a             [ 3] 	lda df_nextlin+1
e897 : a480             [ 3] 	ldy df_curstidx
e899 : 2073e4           [ 6] 	jsr df_rt_nextstat
                             	; got to end of program, then a problem
e89c : b009             [ 3] 	bcs df_rt_if_stat_err
e89e : 8689             [ 3] 	stx df_nextlin
e8a0 : 858a             [ 3] 	sta df_nextlin+1
e8a2 : 8480             [ 3] 	sty df_curstidx
e8a4 : 847f             [ 3] 	sty df_nxtstidx
e8a6 : 60               [ 6] 	rts
                             ; program ended with no match
e8a7 :                       df_rt_if_stat_err
                             	SWBRK DFERR_UNCLOSEDIF
                             
                             
                             ; find matching else/elseif/endif
                             ; C = 0 match else/elseif/endif
                             ; C = 1 match endif only
                             ; endif is always matched
                             ; ** MAKE SURE NEXTLIN IS POPULATED! **
e8a9 :                       df_rt_if_match
                             	; save the current if nest level
e8a9 : a593             [ 3] 	lda df_ifnest
e8ab : 48               [ 3] 	pha
                             	; local if nest level is zero to start with
e8ac : a900             [ 2] 	lda #0
e8ae : 8593             [ 3] 	sta df_ifnest
                             	; save match pref
e8b0 : 08               [ 3] 	php
                             	; find the matching else/elseif/endif
                             	; start from df_nextlin, df_curstidx
e8b1 :                       df_rt_findelseendif
e8b1 : 2093e8           [ 6] 	jsr df_rt_if_stat
                             	; find command
e8b4 :                       df_rt_ifcmd
e8b4 : c8               [ 2] 	iny
e8b5 : b189             [ 5] 	lda (df_nextlin),y
e8b7 : 10fb             [ 3] 	bpl df_rt_ifcmd
                             	; check for endif
e8b9 : c994             [ 2] 	cmp #DFRT_ENDIF
e8bb : f015             [ 3] 	beq df_rt_ifelse
                             
e8bd : 28               [ 4] 	plp
e8be : 08               [ 3] 	php
                             
e8bf : b008             [ 3] 	bcs df_rt_ifskipelseif
e8c1 : c993             [ 2] 	cmp #DFRT_ELSE
e8c3 : f00d             [ 3] 	beq df_rt_ifelse
e8c5 : c995             [ 2] 	cmp #DFRT_ELSEIF
e8c7 : f009             [ 3] 	beq df_rt_ifelse
e8c9 :                       df_rt_ifskipelseif
                             	; another if token found - increment lcoal if ne
e8c9 : c992             [ 2] 	cmp #DFRT_IF
e8cb : d002             [ 3] 	bne df_rt_skipnestif
e8cd : e693             [ 5] 	inc df_ifnest
AS65 Assembler for R6502 [1.42].                                     Page  211
-------------------------------- bank\bank0.s --------------------------------

e8cf :                       df_rt_skipnestif
                             	; no tokens of interest found, so next statement
e8cf : 4cb1e8           [ 3] 	jmp df_rt_findelseendif
                             
                             	; found else/elseif/endif
                             	; but check if this is nested
e8d2 :                       df_rt_ifelse
                             	; nest counter zero then found matching else/els
e8d2 : a693             [ 3] 	ldx df_ifnest
e8d4 : f009             [ 3] 	beq df_rt_if_found
                             	; endif token found so decrement local nest
e8d6 : c994             [ 2] 	cmp #DFRT_ENDIF
e8d8 : d002             [ 3] 	bne df_rt_skipnestendif
e8da : c693             [ 5] 	dec df_ifnest
e8dc :                       df_rt_skipnestendif
                             	; continue to search for else/endif
e8dc : 4cb1e8           [ 3] 	jmp df_rt_findelseendif
                             	; ok got a match
e8df :                       df_rt_if_found
                             	; remove pref
e8df : 28               [ 4] 	plp
                             	; restore global if nest
e8e0 : 8538             [ 3] 	sta tmp_d			; Using as a temp place!
e8e2 : 68               [ 4] 	pla					; Get nest from stack
e8e3 : aa               [ 2] 	tax					; And put in X
e8e4 : a538             [ 3] 	lda tmp_d			; Get a back from temp!
e8e6 : 8693             [ 3] 	stx df_ifnest		; Now restore the nest counter
                             
                             	;A contains the token found, Y is index in to df
                             ;	clc
e8e8 : 60               [ 6] 	rts
                             
e8e9 :                       df_rt_endif
                             	; decrement if next level
e8e9 : c693             [ 5] 	dec df_ifnest
e8eb : 3011             [ 3] 	bmi df_rt_noif_err
e8ed :                       df_rt_if_done
e8ed : 60               [ 6] 	rts
                             
                             	; else and ifelse encountered in a normal sequen
                             	; only happens when the clause has been executed
                             	; so we only now need to find the endif
e8ee :                       df_rt_elseif
e8ee :                       df_rt_else
                             	; not in if mode then error
e8ee : a593             [ 3] 	lda df_ifnest
e8f0 : f00c             [ 3] 	beq df_rt_noif_err
                             	; find endif only
                             	; starting from current line and curstidx
                             	_cpyZPWord df_currlin,df_nextlin
                             
e8fa : 38               [ 2] 	sec
e8fb : 4ca9e8           [ 3] 	jmp df_rt_if_match
                             
                             ; endif/else/elseif encountered outside of an if
e8fe :                       df_rt_noif_err
                             	SWBRK DFERR_NOIF
                             
                             
                             	; when if is encountered, the job of this routin
                             	; to determine which clause to execute, then tra
                             	; program control to that point.  in normal prog
AS65 Assembler for R6502 [1.42].                                     Page  212
-------------------------------- bank\bank0.s --------------------------------

                             	; sequence else/elseif statements will signify t
                             	; of an if construct.
e900 :                       df_rt_if
                             	; increment global if nest counter
e900 : e693             [ 5] 	inc df_ifnest
e902 :                       df_rt_ifeval
                             	; get value
e902 : 20e3e0           [ 6] 	jsr df_rt_getnval
                             	; if X,A<>0 if is successful then continue norma
e905 : a8               [ 2] 	tay
e906 : d0e5             [ 4] 	bne df_rt_if_done
e908 : 8a               [ 2] 	txa
e909 : d0e2             [ 4] 	bne df_rt_if_done
                             	; got here then if clause evaluated to false
                             	; match with else/elseif/endif
                             	; df_nextlin is used to find the clause to execu
                             	_cpyZPWord df_currlin,df_nextlin
                             
e913 : 18               [ 2] 	clc
e914 : 20a9e8           [ 6] 	jsr df_rt_if_match
                             	; A contains the token found, Y is index of this
                             
e917 : c993             [ 2] 	cmp #DFRT_ELSE
                             	; else: df_nextlin and df_nxtstidx points to the
e919 : f023             [ 3] 	beq df_rt_do_else
                             
e91b : c994             [ 2] 	cmp #DFRT_ENDIF
                             	; else: df_nextlin and df_nxtstidx points to the
e91d : f0ce             [ 4] 	beq df_rt_if_done
                             
                             	; elif detected - increment past the token and e
                             	; make this the current line and token index
                             	_cpyZPWord df_nextlin,df_currlin
                             
                             	; move past the token and save position
e927 : c8               [ 2] 	iny
e928 : 98               [ 2] 	tya
e929 : 48               [ 3] 	pha
                             	; initialise statement pointer
e92a : a480             [ 3] 	ldy df_curstidx
e92c : a686             [ 3] 	ldx df_currlin
e92e : a587             [ 3] 	lda df_currlin+1
e930 : 20ebe3           [ 6] 	jsr df_rt_init_stat_ptr
                             	; restore Y (one byte past the token) and save i
e933 : 68               [ 4] 	pla
e934 : a8               [ 2] 	tay
e935 : 8488             [ 3] 	sty df_exeoff
                             	; don't force a jump as we've initalised all var
e937 : a900             [ 2] 	lda #0
e939 : 858a             [ 3] 	sta df_nextlin+1
                             	; now everyting is set up to evaluate the elif c
e93b : 4c02e9           [ 3] 	jmp df_rt_ifeval
                             
e93e :                       df_rt_do_else
                             	; we need to point to the next statement not thi
e93e : 4c93e8           [ 3] 	jmp df_rt_if_stat
                             
e941 :                       df_rt_for
                             	; push statement address to rt stack
e941 : 20a3e4           [ 6] 	jsr df_rt_push_stat
                             	; get lvar
e944 : 202ae5           [ 6] 	jsr df_rt_getlvar
AS65 Assembler for R6502 [1.42].                                     Page  213
-------------------------------- bank\bank0.s --------------------------------

                             	; Save lvar pointer, A is fine to trample
e947 : 48               [ 3] 	pha
e948 : 8a               [ 2] 	txa
e949 : 48               [ 3] 	pha
                             
                             	; find starting value
                             	; evaluate the starting value
                             	; can't use df_rt_getnval as need to use A,X fir
e94a : e688             [ 5] 	inc df_exeoff
e94c : 20e9e0           [ 6] 	jsr df_rt_neval
                             	; get ready to update the counter using pointer
e94f : 68               [ 4] 	pla
e950 : aa               [ 2] 	tax
e951 : 86a1             [ 3] 	stx df_tmpptra
e953 : 68               [ 4] 	pla
e954 : 85a2             [ 3] 	sta df_tmpptra+1
                             	; But remember lvar pointer for later A is ok to
e956 : 48               [ 3] 	pha
e957 : 8a               [ 2] 	txa
e958 : 48               [ 3] 	pha
                             
                             	; get the starting value from op stack
e959 : 2002f7           [ 6] 	jsr df_ost_popInt
                             	; save it to counter slot
e95c : a001             [ 2] 	ldy #1
e95e : 91a1             [ 5] 	sta (df_tmpptra),y
e960 : 8a               [ 2] 	txa
e961 : 88               [ 2] 	dey
e962 : 91a1             [ 5] 	sta (df_tmpptra),y
                             
                             	; find end value
                             	; evaluate the end value
e964 : e688             [ 5] 	inc df_exeoff
e966 : 20e3e0           [ 6] 	jsr df_rt_getnval
                             	; and put on rt stack
e969 : 20a1f6           [ 6] 	jsr df_rst_pushWord
                             
                             	; find step value
                             	; evaluate the end value
e96c : e688             [ 5] 	inc df_exeoff
e96e : 20e3e0           [ 6] 	jsr df_rt_getnval
                             	; and push on rt stack
e971 : 20a1f6           [ 6] 	jsr df_rst_pushWord
                             	; save the counter lvar pointer
e974 : 68               [ 4] 	pla
e975 : aa               [ 2] 	tax
e976 : 68               [ 4] 	pla
e977 : 20a1f6           [ 6] 	jsr df_rst_pushWord
                             	; all done - counter set to start
                             	; stack contains counter slot, step val, end val
                             	; now push for token
e97a : a98e             [ 2] 	lda #DFRT_FOR
e97c : 4c89f6           [ 3] 	jmp df_rst_pushByte
                             
e97f :                       df_rt_next
                             	; remember stack position
e97f : a476             [ 3] 	ldy df_rtstop
e981 : 98               [ 2] 	tya
e982 : 48               [ 3] 	pha
e983 : 2092f6           [ 6] 	jsr df_rst_popByte
e986 : c98e             [ 2] 	cmp #DFRT_FOR
e988 : d04e             [ 3] 	bne df_rt_next_err
AS65 Assembler for R6502 [1.42].                                     Page  214
-------------------------------- bank\bank0.s --------------------------------

                             	; get the slot address
e98a : 20aff6           [ 6] 	jsr df_rst_popWord
                             	; save address to ptrd, contents to ptra
e98d : 86a7             [ 3] 	stx df_tmpptrd
e98f : 85a8             [ 3] 	sta df_tmpptrd+1
e991 : a000             [ 2] 	ldy #0
e993 : b1a7             [ 5] 	lda (df_tmpptrd),y
e995 : 85a1             [ 3] 	sta df_tmpptra
e997 : c8               [ 2] 	iny
e998 : b1a7             [ 5] 	lda (df_tmpptrd),y
e99a : 85a2             [ 3] 	sta df_tmpptra+1
                             
                             	; get step value, save in ptrb
e99c : 20aff6           [ 6] 	jsr df_rst_popWord
e99f : 86a3             [ 3] 	stx df_tmpptrb
e9a1 : 85a4             [ 3] 	sta df_tmpptrb+1
e9a3 : 48               [ 3] 	pha					; Push A to check for -ve step
                             
                             	; add step to counter and save back to counter
                             	_addZPWord df_tmpptra,df_tmpptrb
                             
e9b1 : a5a1             [ 3] 	lda df_tmpptra
e9b3 : a000             [ 2] 	ldy #0
e9b5 : 91a7             [ 5] 	sta (df_tmpptrd),y
e9b7 : a5a2             [ 3] 	lda df_tmpptra+1
e9b9 : c8               [ 2] 	iny
e9ba : 91a7             [ 5] 	sta (df_tmpptrd),y
                             
                             	; get end value, save in ptrb
e9bc : 20aff6           [ 6] 	jsr df_rst_popWord
e9bf : 86a3             [ 3] 	stx df_tmpptrb
e9c1 : 85a4             [ 3] 	sta df_tmpptrb+1
e9c3 : 68               [ 4] 	pla					; check if if +ve or -ve step
e9c4 : 1006             [ 3] 	bpl df_rt_check_pos
                             	; call gte operation but no need to get ints
                             	; as already in ptra and ptrb
e9c6 : 2074e7           [ 6] 	jsr df_rt_gte_calc
e9c9 : 4ccfe9           [ 3] 	jmp df_rt_next_check
e9cc :                       df_rt_check_pos
                             	; call lte operation but no need to get ints
                             	; as already in ptra and ptrb
e9cc : 2060e7           [ 6] 	jsr df_rt_lte_calc
e9cf :                       df_rt_next_check
                             	; check if true or false
e9cf : 2002f7           [ 6] 	jsr df_ost_popInt
e9d2 : 8a               [ 2] 	txa
                             	; if false then next is done
e9d3 : f020             [ 3] 	beq df_rt_untilnext_done
                             	; else we continue
e9d5 : 4c46e5           [ 3] 	jmp df_rt_pop_stat_go
                             
e9d8 :                       df_rt_next_err
                             	SWBRK DFERR_NEXTFOR
                             
                             
                             
e9da :                       df_rt_repeat
                             	; push statement address
e9da : 20a3e4           [ 6] 	jsr df_rt_push_stat
                             	; DFRT_REPEAT token
e9dd : a98c             [ 2] 	lda #DFRT_REPEAT
e9df : 4c89f6           [ 3] 	jmp df_rst_pushByte
AS65 Assembler for R6502 [1.42].                                     Page  215
-------------------------------- bank\bank0.s --------------------------------

                             
e9e2 :                       df_rt_until
                             	; remember stack position
e9e2 : a576             [ 3] 	lda df_rtstop
e9e4 : 48               [ 3] 	pha
e9e5 : 2092f6           [ 6] 	jsr df_rst_popByte
e9e8 : c98c             [ 2] 	cmp #DFRT_REPEAT
e9ea : d011             [ 3] 	bne df_rt_until_err
                             	; evaluate expression in to A,X
e9ec : 20e3e0           [ 6] 	jsr df_rt_getnval
                             	; if value<>0 then continue
e9ef : 8a               [ 2] 	txa
e9f0 : d003             [ 3] 	bne df_rt_untilnext_done
                             
                             	; pop the stat and continue
e9f2 : 4c46e5           [ 3] 	jmp df_rt_pop_stat_go
                             
e9f5 :                       df_rt_untilnext_done
e9f5 : 68               [ 4] 	pla
e9f6 : a8               [ 2] 	tay
                             	; pop 2 items off stack (line address, index)
                             	; and continue
e9f7 : 20aff6           [ 6] 	jsr df_rst_popWord
e9fa : 4c92f6           [ 3] 	jmp df_rst_popByte
                             
e9fd :                       df_rt_until_err
                             	SWBRK DFERR_UNTIL
                             
                             
e9ff :                       df_rt_sadd
e9ff : 60               [ 6] 	rts
                             
ea00 :                       df_rt_print_num
ea00 : 2002f7           [ 6] 	jsr df_ost_popInt
ea03 : 18               [ 2] 	clc
ea04 : 4ce2c3           [ 3] 	jmp print_a_to_d
                             
ea07 :                       df_rt_print_str
ea07 : 2006f7           [ 6] 	jsr df_ost_popStr
ea0a : 86a1             [ 3] 	stx df_tmpptra
ea0c : 85a2             [ 3] 	sta df_tmpptra+1
ea0e : a000             [ 2] 	ldy #0
ea10 :                       df_rt_print_str_ch
ea10 : b1a1             [ 5] 	lda (df_tmpptra),y
ea12 : f006             [ 3] 	beq df_rt_print_str_done
ea14 : 2027c4           [ 6] 	jsr io_put_ch
ea17 : c8               [ 2] 	iny
ea18 : d0f6             [ 3] 	bne df_rt_print_str_ch		; Rely on y not wrapping
ea1a :                       df_rt_print_str_done
ea1a : 60               [ 6] 	rts
                             
                             ; * Find the position of the next data item to re
ea1b :                       df_rt_nextdatum
ea1b : a200             [ 2] 	ldx #0
                             	; load data line offset
ea1d : a496             [ 3] 	ldy df_datoff
                             	; if data pointer unitialised (because high byte
ea1f : a595             [ 3] 	lda df_currdat+1
ea21 : d02e             [ 3] 	bne df_rt_skipinitdataptr
                             	; then start at program beginning
                             	_cpyZPWord df_prgstrt,df_currdat
                             
AS65 Assembler for R6502 [1.42].                                     Page  216
-------------------------------- bank\bank0.s --------------------------------

ea2b :                       df_rt_datlinstart
                             	; if end of program then error
ea2b : a194             [ 6] 	lda (df_currdat,x)
ea2d : f032             [ 3] 	beq df_rt_datumerr
                             	; index in to first line byte
ea2f : a003             [ 2] 	ldy #3
ea31 : 8496             [ 3] 	sty df_datoff
                             	; find first 'data' statement
ea33 :                       df_rt_datastatement
ea33 : c8               [ 2] 	iny
ea34 : 98               [ 2] 	tya
                             	; end of line reached?
ea35 : c194             [ 6] 	cmp (df_currdat,x)
                             	; if not find data token
ea37 : d00e             [ 3] 	bne df_rt_getdatatk
ea39 :                       df_rt_datnextlin
                             	; if so then go to next line
ea39 : 18               [ 2] 	clc
ea3a : a594             [ 3] 	lda df_currdat
ea3c : 6194             [ 6] 	adc (df_currdat,x)
ea3e : 8594             [ 3] 	sta df_currdat
                             	_bcc 2
                             
ea42 : e695             [ 5] 	inc df_currdat+1
ea44 : 4c2bea           [ 3] 	jmp df_rt_datlinstart
ea47 :                       df_rt_getdatatk
ea47 : b194             [ 5] 	lda (df_currdat),y
ea49 : 10e8             [ 3] 	bpl df_rt_datastatement
                             	; found data statement?
ea4b : c996             [ 2] 	cmp #DFRT_DATA
                             	; if not then go to next line
ea4d : d0ea             [ 3] 	bne df_rt_datnextlin
ea4f : 8496             [ 3] 	sty df_datoff
ea51 :                       df_rt_skipinitdataptr
ea51 : 98               [ 2] 	tya
                             	; end of line reached?
ea52 : c194             [ 6] 	cmp (df_currdat,x)
                             	; if so go to next line
ea54 : f0e3             [ 3] 	beq df_rt_datnextlin
                             	; else see if escape value
ea56 : b194             [ 5] 	lda (df_currdat),y
ea58 : c920             [ 2] 	cmp #DFTK_ESCVAL
ea5a : c8               [ 2] 	iny
ea5b : b0f4             [ 3] 	bcs df_rt_skipinitdataptr
                             	; ok found an escape value
                             	; save position and return
ea5d : 88               [ 2] 	dey
ea5e : 8496             [ 3] 	sty df_datoff
ea60 : 60               [ 6] 	rts
ea61 :                       df_rt_datumerr
                             	SWBRK DFERR_NODATA
                             
                             
                             ; read a datum
ea63 :                       df_rt_readdatum
                             	; update data pointer to next data item
ea63 : 201bea           [ 6] 	jsr df_rt_nextdatum
                             	; now get lvar X,A from current statement
ea66 : 202ae5           [ 6] 	jsr df_rt_getlvar
                             	; save lvar in tmpb, vvt ptr in tmpa
ea69 : 86a3             [ 3] 	stx df_tmpptrb
ea6b : 85a4             [ 3] 	sta df_tmpptrb+1
AS65 Assembler for R6502 [1.42].                                     Page  217
-------------------------------- bank\bank0.s --------------------------------

                             
                             	; first save save current prgoram line and offse
ea6d : a586             [ 3] 	lda df_currlin
ea6f : 48               [ 3] 	pha
ea70 : a587             [ 3] 	lda df_currlin+1
ea72 : 48               [ 3] 	pha
ea73 : a588             [ 3] 	lda df_exeoff
ea75 : 48               [ 3] 	pha
ea76 : a57e             [ 3] 	lda df_eolidx
ea78 : 48               [ 3] 	pha
ea79 : a57f             [ 3] 	lda df_nxtstidx
ea7b : 48               [ 3] 	pha
ea7c : a580             [ 3] 	lda df_curstidx
ea7e : 48               [ 3] 	pha
                             
                             	; use data pointer as current position for evalu
                             	_cpyZPWord df_currdat,df_currlin
                             
ea87 : a596             [ 3] 	lda df_datoff
ea89 : 8588             [ 3] 	sta df_exeoff
ea8b : a200             [ 2] 	ldx #0
ea8d : a194             [ 6] 	lda (df_currdat,x)
ea8f : 857e             [ 3] 	sta df_eolidx
ea91 : 857f             [ 3] 	sta df_nxtstidx
ea93 : a903             [ 2] 	lda #3
ea95 : 8580             [ 3] 	sta df_curstidx
                             
                             	; get type from vvt ptr in tmpa
ea97 : a1a1             [ 6] 	lda (df_tmpptra,x)
ea99 : a8               [ 2] 	tay
                             	; get lvar point from tmpb
ea9a : a6a3             [ 3] 	ldx df_tmpptrb
ea9c : a5a4             [ 3] 	lda df_tmpptrb+1
                             
                             	; X,A and Y set up, now evaluate and perform ass
ea9e : 203eed           [ 6] 	jsr df_rt_doassign
                             
                             	; update data offset as data has been consumed
eaa1 : a588             [ 3] 	lda df_exeoff
eaa3 : 8596             [ 3] 	sta df_datoff
                             	; restore line settings
eaa5 : 68               [ 4] 	pla
eaa6 : 8580             [ 3] 	sta df_curstidx
eaa8 : 68               [ 4] 	pla
eaa9 : 857f             [ 3] 	sta df_nxtstidx
eaab : 68               [ 4] 	pla
eaac : 857e             [ 3] 	sta df_eolidx
eaae : 68               [ 4] 	pla
eaaf : 8588             [ 3] 	sta df_exeoff
eab1 : 68               [ 4] 	pla
eab2 : 8587             [ 3] 	sta df_currlin+1
eab4 : 68               [ 4] 	pla
eab5 : 8586             [ 3] 	sta df_currlin
eab7 : 60               [ 6] 	rts
                             
                             
eab8 :                       df_rt_read
                             	; find variable to read in to from current posit
eab8 : a488             [ 3] 	ldy df_exeoff
eaba :                       df_rt_read_find_var
eaba : c8               [ 2] 	iny
                             	; if end of line or statement then done
AS65 Assembler for R6502 [1.42].                                     Page  218
-------------------------------- bank\bank0.s --------------------------------

                             ;	cpy df_eolidx
                             ;	beq df_rt_read_done
eabb : c47f             [ 3] 	cpy df_nxtstidx
eabd : f00e             [ 3] 	beq df_rt_read_done
                             	; if not found escape then next byte
eabf : b186             [ 5] 	lda (df_currlin),y
eac1 : c920             [ 2] 	cmp #DFTK_ESCVAL
eac3 : b0f5             [ 3] 	bcs df_rt_read_find_var
                             	; ok found escape, save position
eac5 : 8488             [ 3] 	sty df_exeoff
                             	; go and read in the value
eac7 : 2063ea           [ 6] 	jsr df_rt_readdatum
                             	; try find another variable
eaca : 4cb8ea           [ 3] 	jmp df_rt_read
                             
eacd :                       df_rt_read_done
                             	; save position
eacd : 8488             [ 3] 	sty df_exeoff
eacf : 60               [ 6] 	rts
                             
ead0 :                       df_rt_input
                             	; df_tmpptra has the vvt address, X,A is the lva
ead0 : 202ae5           [ 6] 	jsr df_rt_getlvar
                             	; Save lvar pointer
ead3 : 86a3             [ 3] 	stx df_tmpptrb
ead5 : 85a4             [ 3] 	sta df_tmpptrb+1
                             	; go read a line of input
                             	; buf_lo ptr has the input, Y is size
ead7 : 38               [ 2] 	sec
ead8 : 203cc4           [ 6] 	jsr io_read_line
                             	; check the type
eadb : a200             [ 2] 	ldx #0
eadd : a1a1             [ 6] 	lda (df_tmpptra,x)
eadf : 2904             [ 2] 	and #DFVVT_STR
eae1 : d008             [ 3] 	bne df_rt_input_str
eae3 : a1a1             [ 6] 	lda (df_tmpptra,x)
eae5 : 2903             [ 2] 	and #DFVVT_INT|DFVVT_BYT
eae7 : d00a             [ 3] 	bne df_rt_input_num
                             	; if not int or byte then error
eae9 : f01f             [ 4] 	beq df_rt_input_err
eaeb :                       df_rt_input_str
eaeb : b139             [ 5] 	lda (buf_lo),y
eaed : 91a3             [ 5] 	sta (df_tmpptrb),y
eaef : 88               [ 2] 	dey
eaf0 : 10f9             [ 3] 	bpl df_rt_input_str
eaf2 : 60               [ 6] 	rts
                             
eaf3 :                       df_rt_input_num
                             	; X,A = address, linbuff must be on page boundar
eaf3 : a53a             [ 3] 	lda buf_lo+1
eaf5 : a639             [ 3] 	ldx buf_lo
eaf7 : a000             [ 2] 	ldy #0				; any numeric format
eaf9 : 20cbc1           [ 6] 	jsr con_n_to_a
eafc : b00c             [ 4] 	bcs df_rt_input_err
eafe : a000             [ 2] 	ldy #0
eb00 : a53d             [ 3] 	lda num_a
eb02 : 91a3             [ 5] 	sta (df_tmpptrb),y
eb04 : c8               [ 2] 	iny
eb05 : a53e             [ 3] 	lda num_a+1
eb07 : 91a3             [ 5] 	sta (df_tmpptrb),y
eb09 : 60               [ 6] 	rts
eb0a :                       df_rt_input_err
AS65 Assembler for R6502 [1.42].                                     Page  219
-------------------------------- bank\bank0.s --------------------------------

                             	SWBRK DFERR_TYPEMISM
                             
                             
eb0c :                       df_rt_local
                             	; get current local count off rt stack
eb0c : 2092f6           [ 6] 	jsr df_rst_popByte
                             	; save on pc stack for incrmenting
eb0f : 48               [ 3] 	pha
eb10 : a488             [ 3] 	ldy df_exeoff
eb12 : 88               [ 2] 	dey
eb13 :                       df_rt_local_findesc
eb13 : c8               [ 2] 	iny
                             	; check end of line
                             ;	cpy df_eolidx
                             ;	beq df_rt_local_done
eb14 : c47f             [ 3] 	cpy df_nxtstidx
eb16 : f01c             [ 3] 	beq df_rt_local_done
                             	; find a var
eb18 : b186             [ 5] 	lda (df_currlin),y
eb1a : c911             [ 2] 	cmp #DFTK_VAR
eb1c : d0f5             [ 3] 	bne df_rt_local_findesc
                             	; jump over escape value
eb1e : c8               [ 2] 	iny
                             	; get var slot in A,X
eb1f : b186             [ 5] 	lda (df_currlin),y
eb21 : aa               [ 2] 	tax
eb22 : c8               [ 2] 	iny
eb23 : b186             [ 5] 	lda (df_currlin),y
eb25 : 8488             [ 3] 	sty df_exeoff
                             	; localise this variable
eb27 : 2075f6           [ 6] 	jsr df_rt_proc_local
                             	; increment local counter
eb2a : 68               [ 4] 	pla
eb2b : 18               [ 2] 	clc
eb2c : 6901             [ 2] 	adc #1
eb2e : 48               [ 3] 	pha
eb2f : a488             [ 3] 	ldy df_exeoff
eb31 : 4c13eb           [ 3] 	jmp df_rt_local_findesc
eb34 :                       df_rt_local_done
                             	; get the local counter
                             	; put on to rt stack
eb34 : 68               [ 4] 	pla
eb35 : 4c89f6           [ 3] 	jmp df_rst_pushByte
                             
                             
eb38 :                       df_rt_dim
eb38 : a488             [ 3] 	ldy df_exeoff
eb3a : 88               [ 2] 	dey
eb3b :                       df_rt_dim_findesc
                             	; check end of line
eb3b : c8               [ 2] 	iny
                             ;	cpy df_eolidx
                             ;	beq df_rt_dim_done
eb3c : c47f             [ 3] 	cpy df_nxtstidx
eb3e : f07a             [ 3] 	beq df_rt_dim_done
                             	; find a var
eb40 : b186             [ 5] 	lda (df_currlin),y
eb42 : c911             [ 2] 	cmp #DFTK_VAR
eb44 : d0f5             [ 3] 	bne df_rt_dim_findesc
                             	; jump over escape value
eb46 : c8               [ 2] 	iny
                             	; get var address
AS65 Assembler for R6502 [1.42].                                     Page  220
-------------------------------- bank\bank0.s --------------------------------

eb47 : b186             [ 5] 	lda (df_currlin),y
eb49 : 85a1             [ 3] 	sta df_tmpptra
eb4b : c8               [ 2] 	iny
eb4c : b186             [ 5] 	lda (df_currlin),y
eb4e : 85a2             [ 3] 	sta df_tmpptra+1
                             	; move to open bracket
eb50 : c8               [ 2] 	iny
eb51 : 8488             [ 3] 	sty df_exeoff
                             	; check if already dim'd
eb53 : a003             [ 2] 	ldy #DFVVT_DIM1
eb55 : b1a1             [ 5] 	lda (df_tmpptra),y
eb57 : d062             [ 3] 	bne df_rt_dim_err
                             	; Save slot address found earlier
eb59 : a5a1             [ 3] 	lda df_tmpptra
eb5b : 48               [ 3] 	pha
eb5c : a5a2             [ 3] 	lda df_tmpptra+1
eb5e : 48               [ 3] 	pha
eb5f : 2069e2           [ 6] 	jsr df_rt_arry_parm2
                             	; Restore slot address
eb62 : 68               [ 4] 	pla
eb63 : 85a2             [ 3] 	sta df_tmpptra+1
eb65 : 68               [ 4] 	pla
eb66 : 85a1             [ 3] 	sta df_tmpptra
                             ;	bcs df_rt_dim_err
                             	; save x,y to dim1,2
eb68 : 98               [ 2] 	tya
eb69 : 48               [ 3] 	pha
eb6a : 8a               [ 2] 	txa
eb6b : 48               [ 3] 	pha
eb6c : a003             [ 2] 	ldy #DFVVT_DIM1
eb6e : 68               [ 4] 	pla
eb6f : 91a1             [ 5] 	sta (df_tmpptra),y
eb71 : c8               [ 2] 	iny
eb72 : 68               [ 4] 	pla
eb73 : 91a1             [ 5] 	sta (df_tmpptra),y
eb75 :                       df_rt_dim_alloc
                             	; ok we have up to 2 dimensions
                             	; mult dim 1 and 2 if dim 2 <> 0
eb75 : a003             [ 2] 	ldy #DFVVT_DIM1
eb77 : b1a1             [ 5] 	lda (df_tmpptra),y
eb79 : 853d             [ 3] 	sta num_a
eb7b : a900             [ 2] 	lda #0
eb7d : 853e             [ 3] 	sta num_a+1
eb7f : c8               [ 2] 	iny
eb80 : b1a1             [ 5] 	lda (df_tmpptra),y
eb82 : d002             [ 3] 	bne df_rt_dim2_nz
eb84 : a901             [ 2] 	lda #1
eb86 :                       df_rt_dim2_nz
eb86 : 8541             [ 3] 	sta num_b
eb88 : a900             [ 2] 	lda #0
eb8a : 8542             [ 3] 	sta num_b+1
eb8c : 20cfd4           [ 6] 	jsr int_fast_mult
                             	; check the type if int then mult2
eb8f : a200             [ 2] 	ldx #0
eb91 : a1a1             [ 6] 	lda (df_tmpptra,x)
eb93 : 2901             [ 2] 	and #DFVVT_INT
eb95 : f004             [ 3] 	beq df_rt_dim2_mul2
eb97 : 063d             [ 5] 	asl num_a
eb99 : 263e             [ 5] 	rol num_a+1
eb9b :                       df_rt_dim2_mul2
                             	; finally, we have a size of array
eb9b : a63d             [ 3] 	ldx num_a
AS65 Assembler for R6502 [1.42].                                     Page  221
-------------------------------- bank\bank0.s --------------------------------

eb9d : a53e             [ 3] 	lda num_a+1
                             
                             	; get a block of that size from heap
eb9f : 200ef7           [ 6] 	jsr df_st_malloc
                             	; save pointer to block in var
eba2 : a002             [ 2] 	ldy #DFVVT_HI
eba4 : 91a1             [ 5] 	sta (df_tmpptra),y
eba6 : 8a               [ 2] 	txa
eba7 : 88               [ 2] 	dey
eba8 : 91a1             [ 5] 	sta (df_tmpptra),y
                             	; finally, update the type to indicate array
ebaa : a200             [ 2] 	ldx #0
ebac : a1a1             [ 6] 	lda (df_tmpptra,x)
ebae : 0980             [ 2] 	ora #DFVVT_ARRY
ebb0 : 81a1             [ 6] 	sta (df_tmpptra,x)
                             	; don't increment byte again - go check for more
ebb2 : 4c38eb           [ 3] 	jmp df_rt_dim
ebb5 :                       df_rt_dim_next_byte
ebb5 : e688             [ 5] 	inc df_exeoff
ebb7 : 4c38eb           [ 3] 	jmp df_rt_dim
ebba :                       df_rt_dim_done
ebba : 60               [ 6] 	rts
ebbb :                       df_rt_dim_err
                             	SWBRK DFERR_DIM
                             
                             
                             
ebbd :                       df_rt_cls
ebbd : 4c02ce           [ 3] 	jmp gr_cls
                             
                             
ebc0 :                       df_rt_plot
                             	; evaluate the expression
ebc0 : 20e3e0           [ 6] 	jsr df_rt_getnval
                             	; save lo byte
ebc3 : 8a               [ 2] 	txa
ebc4 : 48               [ 3] 	pha
                             	; jump over comma
ebc5 : e688             [ 5] 	inc df_exeoff
                             	; evaluate the expression
ebc7 : 20e3e0           [ 6] 	jsr df_rt_getnval
                             	; save lo byte
ebca : 8a               [ 2] 	txa
ebcb : 48               [ 3] 	pha
                             	; jump over comma
ebcc : e688             [ 5] 	inc df_exeoff
                             	; evaluate the expression
ebce : 20e9e0           [ 6] 	jsr df_rt_neval
                             	; check the type on the stack
ebd1 : 20fcf6           [ 6] 	jsr df_ost_peekType
                             	; if >=0x80 then a pointer / string
ebd4 : aa               [ 2] 	tax
ebd5 : 301b             [ 3] 	bmi df_rt_plotstr
                             	; else it is int
ebd7 : 2002f7           [ 6] 	jsr df_ost_popInt
                             	; save  low byte of pop result in a temp
ebda : 86a1             [ 3] 	stx df_tmpptra
ebdc : a511             [ 3] 	lda gr_scrngeom+gr_mode			; Check screen mode
ebde : d009             [ 3] 	bne df_rt_plot_h_int
                             	; get X and Y coord in that order
                             	; but Y coord goes in X register!!!
ebe0 : 68               [ 4] 	pla
AS65 Assembler for R6502 [1.42].                                     Page  222
-------------------------------- bank\bank0.s --------------------------------

ebe1 : aa               [ 2] 	tax
ebe2 : 68               [ 4] 	pla
ebe3 : a8               [ 2] 	tay
ebe4 : a5a1             [ 3] 	lda df_tmpptra	; Get pop result in to A
ebe6 : 4c56ce           [ 3] 	jmp gr_plot
ebe9 :                       df_rt_plot_h_int
ebe9 : 68               [ 4] 	pla
ebea : a8               [ 2] 	tay
ebeb : 68               [ 4] 	pla
ebec : aa               [ 2] 	tax
ebed : a5a1             [ 3] 	lda df_tmpptra	; Get pop result in to A
ebef : 4c15d0           [ 3] 	jmp gr_hchar
                             
                             
ebf2 :                       df_rt_plotstr
                             	; pop string pointer
ebf2 : 200af7           [ 6] 	jsr df_ost_popPtr
                             	; save pointer to tmpa
ebf5 : 86a1             [ 3] 	stx df_tmpptra
ebf7 : 85a2             [ 3] 	sta df_tmpptra+1
                             	; get y and x in that order
                             	; but X register is Y coord!!
ebf9 : 68               [ 4] 	pla
ebfa : 85a5             [ 3] 	sta df_tmpptrc			; Y coord in C
ebfc : 68               [ 4] 	pla
ebfd : 85a3             [ 3] 	sta df_tmpptrb			; X coord in B
                             	; set cursror position
ebff : a000             [ 2] 	ldy #0
ec01 : 84a9             [ 3] 	sty df_tmpptre
ec03 :                       df_rt_plotstrch
ec03 : a4a9             [ 3] 	ldy df_tmpptre
ec05 : b1a1             [ 5] 	lda (df_tmpptra),y
ec07 : 85a7             [ 3] 	sta df_tmpptrd			; char in D
ec09 : f025             [ 3] 	beq df_rt_plotstrdone
ec0b : e6a9             [ 5] 	inc df_tmpptre
ec0d : a511             [ 3] 	lda gr_scrngeom+gr_mode; Check screen mode
ec0f : d00d             [ 3] 	bne df_rt_plot_h_str
ec11 : a5a7             [ 3] 	lda df_tmpptrd			; Get char to plot
ec13 : a6a5             [ 3] 	ldx df_tmpptrc			; Get Y coord
ec15 : a4a3             [ 3] 	ldy df_tmpptrb			; Get X coord
ec17 : 2056ce           [ 6] 	jsr gr_plot
ec1a : e6a3             [ 5] 	inc df_tmpptrb			; Increment X coord
ec1c : d0e5             [ 3] 	bne df_rt_plotstrch		; Always - assume x is neve
ec1e :                       df_rt_plot_h_str
ec1e : a5a7             [ 3] 	lda df_tmpptrd			; Get char to plot
ec20 : a6a3             [ 3] 	ldx df_tmpptrb			; Get X coord
ec22 : a4a5             [ 3] 	ldy df_tmpptrc			; Get Y coord
ec24 : 2015d0           [ 6] 	jsr gr_hchar
ec27 : 18               [ 2] 	clc
ec28 : a5a3             [ 3] 	lda df_tmpptrb
ec2a : 6520             [ 3] 	adc gr_scrngeom+gr_pitch
ec2c : 85a3             [ 3] 	sta df_tmpptrb
ec2e : d0d3             [ 3] 	bne df_rt_plotstrch		; Always - assume adding pi
ec30 :                       df_rt_plotstrdone
ec30 : 60               [ 6] 	rts
                             
ec31 :                       df_rt_cursor
                             	; evaluate the expression
ec31 : 20e3e0           [ 6] 	jsr df_rt_getnval
                             	; write low byte of vdp_curoff
                             	; by writing a zero then cursor on else not
ec34 : 860d             [ 3] 	stx vdp_curoff
AS65 Assembler for R6502 [1.42].                                     Page  223
-------------------------------- bank\bank0.s --------------------------------

ec36 : 60               [ 6] 	rts
                             
ec37 :                       df_rt_himem
                             	; evaluate the expression
ec37 : 20e3e0           [ 6] 	jsr df_rt_getnval
                             	; write X,A to df_memtop
ec3a : 8e1106           [ 4] 	stx df_memtop
ec3d : 8d1206           [ 4] 	sta df_memtop+1
                             	; now clear everything down
ec40 : 4c33f7           [ 3] 	jmp df_clear
                             
ec43 :                       df_rt_text
ec43 : 4c6ccd           [ 3] 	jmp gr_init_screen_txt
                             
ec46 :                       df_rt_hires
ec46 : 4c85cd           [ 3] 	jmp gr_init_hires
                             
ec49 :                       df_rt_pixmode
                             	; evaluate the expression X = mode
ec49 : 20e3e0           [ 6] 	jsr df_rt_getnval
ec4c : 861f             [ 3] 	stx gr_scrngeom+gr_pixmode
ec4e : 60               [ 6] 	rts
                             
ec4f :                       df_rt_ink
                             	; evaluate the expression X = col
ec4f : 20e3e0           [ 6] 	jsr df_rt_getnval
ec52 : 8623             [ 3] 	stx gr_scrngeom+gr_ink
ec54 : 60               [ 6] 	rts
                             
ec55 :                       df_rt_paper
                             	; evaluate the expression X = col
ec55 : 20e3e0           [ 6] 	jsr df_rt_getnval
                             	; Add 16 to get paper colour
ec58 : 8a               [ 2] 	txa
ec59 : 18               [ 2] 	clc
ec5a : 6910             [ 2] 	adc #16
ec5c : 8524             [ 3] 	sta gr_scrngeom+gr_paper
ec5e : 60               [ 6] 	rts
                             
ec5f :                       df_rt_point
ec5f : 20ade3           [ 6] 	jsr df_rt_parm_2ints
ec62 : a6a1             [ 3] 	ldx df_tmpptra
ec64 : a4a3             [ 3] 	ldy df_tmpptrb
ec66 : 4cd5d0           [ 3] 	jmp gr_point
                             
ec69 :                       df_rt_circle
ec69 : 20b8e3           [ 6] 	jsr df_rt_parm_3ints
ec6c : a5a1             [ 3] 	lda df_tmpptra				; load x0
ec6e : 853d             [ 3] 	sta num_a
ec70 : a5a3             [ 3] 	lda	df_tmpptrb				; load y0
ec72 : 853e             [ 3] 	sta num_a+1
ec74 : a5a5             [ 3] 	lda df_tmpptrc				; load r
ec76 : 853f             [ 3] 	sta num_a+2
ec78 : 4c06d1           [ 3] 	jmp gr_circle
                             
ec7b :                       df_rt_lineto
ec7b : 20ade3           [ 6] 	jsr df_rt_parm_2ints
ec7e : a6a1             [ 3] 	ldx df_tmpptra				; load x1
ec80 : a4a3             [ 3] 	ldy df_tmpptrb				; load y1
ec82 :                       df_rt_doline
ec82 : 863f             [ 3] 	stx num_a+2
ec84 : 8440             [ 3] 	sty num_a+3
AS65 Assembler for R6502 [1.42].                                     Page  224
-------------------------------- bank\bank0.s --------------------------------

ec86 : 4cbcd1           [ 3] 	jmp gr_line
ec89 :                       df_rt_line
ec89 : 20cfe3           [ 6] 	jsr df_rt_parm_4ints
ec8c : a6a1             [ 3] 	ldx df_tmpptra				; load x0
ec8e : a4a3             [ 3] 	ldy	df_tmpptrb				; load y0
ec90 : 20cad0           [ 6] 	jsr gr_set_hires_cur		; Start from x,y
ec93 : a6a5             [ 3] 	ldx df_tmpptrc				; load x1
ec95 : a4a7             [ 3] 	ldy df_tmpptrd				; load y1
ec97 : 4c82ec           [ 3] 	jmp df_rt_doline
                             
ec9a :                       df_rt_wait
                             	; evaluate the expression
ec9a : 20e3e0           [ 6] 	jsr df_rt_getnval
                             	; put high byte in to Y (X,Y)=16 bits
ec9d : a8               [ 2] 	tay
                             ;	bne df_rt_wait_counter
                             	; If A=X=0 then don't try to wait
                             ;	txa
                             ;	beq df_rt_wait_done
ec9e :                       df_rt_wait_counter
                             	; get vdp low byte timer val in A
ec9e : a508             [ 3] 	lda vdp_cnt
eca0 :                       df_rt_wait_tick
                             	; check if a tick has occurred (i.e. val <> A)
eca0 : c508             [ 3] 	cmp vdp_cnt
eca2 : f0fc             [ 3] 	beq df_rt_wait_tick
                             	; countdown tick
eca4 : 8a               [ 2] 	txa
eca5 : d001             [ 3] 	bne df_rt_wait_skiphi
eca7 : 88               [ 2] 	dey
eca8 :                       df_rt_wait_skiphi	
eca8 : ca               [ 2] 	dex
eca9 : 8a               [ 2] 	txa
ecaa : d0f2             [ 3] 	bne df_rt_wait_counter
ecac : 98               [ 2] 	tya
ecad : d0ef             [ 3] 	bne df_rt_wait_counter
ecaf :                       df_rt_wait_done
ecaf : 60               [ 6] 	rts
                             
ecb0 :                       df_rt_printat
                             	; Get x,y
ecb0 : 20ade3           [ 6] 	jsr df_rt_parm_2ints
ecb3 : a6a1             [ 3] 	ldx df_tmpptra
ecb5 : a4a3             [ 3] 	ldy df_tmpptrb
                             	; Set the cursror here
ecb7 : 206fce           [ 6] 	jsr gr_set_cur
                             	; and continue to normal print command
ecba :                       df_rt_print
ecba : a488             [ 3] 	ldy df_exeoff
ecbc : 88               [ 2] 	dey
ecbd :                       df_rt_print_ws
ecbd : c8               [ 2] 	iny
                             
                             	; evaluate an expression
                             ;	cpy df_eolidx
                             ;	beq df_rt_print_done
ecbe : c47f             [ 3] 	cpy df_nxtstidx
ecc0 : f02e             [ 3] 	beq df_rt_print_done
ecc2 : b186             [ 5] 	lda (df_currlin),y
ecc4 : c93a             [ 2] 	cmp #':'
ecc6 : f028             [ 3] 	beq df_rt_print_done
ecc8 : c920             [ 2] 	cmp #' '
AS65 Assembler for R6502 [1.42].                                     Page  225
-------------------------------- bank\bank0.s --------------------------------

ecca : f0f1             [ 3] 	beq df_rt_print_ws
eccc : c92c             [ 2] 	cmp #','
ecce : f0ed             [ 3] 	beq df_rt_print_ws
                             	; save index
ecd0 : 8488             [ 3] 	sty df_exeoff
                             
                             	; if starts with string literal then process sev
ecd2 : c910             [ 2] 	cmp #DFTK_STRLIT
ecd4 : f014             [ 3] 	beq df_rt_print_string
                             	; else evaluate a numeric
ecd6 : 20e9e0           [ 6] 	jsr df_rt_neval
                             	; check what is on the argument stack
ecd9 : 20fcf6           [ 6] 	jsr df_ost_peekType
ecdc : 3006             [ 3] 	bmi df_rt_print_gotstr
ecde : 2000ea           [ 6] 	jsr df_rt_print_num
ece1 : 4cbaec           [ 3] 	jmp df_rt_print
ece4 :                       df_rt_print_gotstr
ece4 : 2007ea           [ 6] 	jsr df_rt_print_str
ece7 : 4cbaec           [ 3] 	jmp df_rt_print
ecea :                       df_rt_print_string
ecea : 20a3e1           [ 6] 	jsr df_rt_seval
eced : 4ce4ec           [ 3] 	jmp df_rt_print_gotstr
ecf0 :                       df_rt_print_done
ecf0 : 8488             [ 3] 	sty df_exeoff
ecf2 : 60               [ 6] 	rts
                             
ecf3 :                       df_rt_println
ecf3 : 20baec           [ 6] 	jsr df_rt_print
ecf6 : a90d             [ 2] 	lda #UTF_CR
ecf8 : 4c27c4           [ 3] 	jmp io_put_ch
                             
                             
                             ; assign to a number variable
                             ; X,A must have lvar
ecfb :                       df_rt_nassign
                             	; push var address, A ok to trample
ecfb : 48               [ 3] 	pha
ecfc : 8a               [ 2] 	txa
ecfd : 48               [ 3] 	pha
                             
                             	; now go evaluate expression in to A,X
ecfe : 20e3e0           [ 6] 	jsr df_rt_getnval
                             	; restore variable address to write to to df_tmp
                             	; but don't lose current A
ed01 : a8               [ 2] 	tay					; Save A in Y
ed02 : 68               [ 4] 	pla
ed03 : 85a1             [ 3] 	sta df_tmpptra
ed05 : 68               [ 4] 	pla
ed06 : 85a2             [ 3] 	sta df_tmpptra+1
ed08 : 98               [ 2] 	tya					; Get A back from Y
                             
                             	; save X,A int in contents section
ed09 : a001             [ 2] 	ldy #1
ed0b : 91a1             [ 5] 	sta (df_tmpptra),y
ed0d : 8a               [ 2] 	txa
ed0e : 88               [ 2] 	dey
ed0f : 91a1             [ 5] 	sta (df_tmpptra),y
                             
ed11 : 60               [ 6] 	rts
                             
                             ; assign to a string variable
                             ; X,A must have lvar
AS65 Assembler for R6502 [1.42].                                     Page  226
-------------------------------- bank\bank0.s --------------------------------

ed12 :                       df_rt_sassign
                             	; now go evaluate expression
                             	; with the destination being already in X,A
ed12 : 20a7e1           [ 6] 	jsr df_rt_sval
                             
                             	; get string pointer from top of runtime stack
ed15 : 4c06f7           [ 3] 	jmp df_ost_popStr
                             
                             
                             ; generate lvar from a var token ready for assign
ed18 :                       df_rt_generate_lvar
                             	; move past escape val
ed18 : a488             [ 3] 	ldy df_exeoff
ed1a : c8               [ 2] 	iny
                             	; pointing to variable index
ed1b : b186             [ 5] 	lda (df_currlin),y
ed1d : 85a1             [ 3] 	sta df_tmpptra
ed1f : c8               [ 2] 	iny
ed20 : b186             [ 5] 	lda (df_currlin),y
ed22 : 8488             [ 3] 	sty df_exeoff
ed24 : 85a2             [ 3] 	sta df_tmpptra+1
                             
                             	; get the type and save
ed26 : a200             [ 2] 	ldx #0
ed28 : a1a1             [ 6] 	lda (df_tmpptra,x)
ed2a : 48               [ 3] 	pha
                             
                             	; set carry flag to return pointer (lvar)
ed2b : 38               [ 2] 	sec
ed2c : 208de2           [ 6] 	jsr df_rt_eval_var
ed2f : 200af7           [ 6] 	jsr df_ost_popPtr
                             
                             	; pull the type previously saved into Y
ed32 : 8538             [ 3] 	sta tmp_d		; Save A
ed34 : 68               [ 4] 	pla
ed35 : a8               [ 2] 	tay
ed36 : a538             [ 3] 	lda tmp_d
                             	; move past the lvar variable index
ed38 : e688             [ 5] 	inc df_exeoff
ed3a : 60               [ 6] 	rts
                             
                             ; general assignment execution
                             ; generate lvar first
ed3b :                       df_rt_assign
ed3b : 2018ed           [ 6] 	jsr df_rt_generate_lvar
                             ; X,A,Y contain lvar pointer and type
ed3e :                       df_rt_doassign
                             	; save A and put type Y in to A to check for str
ed3e : 48               [ 3] 	pha
ed3f : 98               [ 2] 	tya
ed40 : 2904             [ 2] 	and #DFVVT_STR
                             	; if a string then string expression
ed42 : d004             [ 3] 	bne df_rt_assign_str
                             	;  jump to numeric expression evaluator
                             	; remember to restore A
ed44 : 68               [ 4] 	pla
ed45 : 4cfbec           [ 3] 	jmp df_rt_nassign
ed48 :                       df_rt_assign_str
                             	; else jump to string expression evaluator
                             	; remember to restore A
ed48 : 68               [ 4] 	pla
ed49 : 4c12ed           [ 3] 	jmp df_rt_sassign
AS65 Assembler for R6502 [1.42].                                     Page  227
-------------------------------- bank\bank0.s --------------------------------

                             
                             ; comment or data token is ignored by runtime
ed4c :                       df_rt_comment
ed4c :                       df_rt_data
ed4c : 60               [ 6] 	rts
                             
                             
                             ; run token - future expansion
ed4d :                       df_rt_run
ed4d : 60               [ 6] 	rts
                             
                             ; end of line / statement indicator
                             ; CS = End, CC = not end
ed4e :                       df_rt_eos
ed4e : a488             [ 3] 	ldy df_exeoff
                             ;	cpy df_eolidx
                             ;	beq df_rt_eos_true
ed50 : c47f             [ 3] 	cpy df_nxtstidx
ed52 : f008             [ 3] 	beq df_rt_eos_true
ed54 : b186             [ 5] 	lda (df_currlin),y
ed56 : c93a             [ 2] 	cmp #':'
ed58 : f002             [ 3] 	beq df_rt_eos_true
ed5a : 18               [ 2] 	clc
ed5b : 60               [ 6] 	rts
ed5c :                       df_rt_eos_true
ed5c : 38               [ 2] 	sec
ed5d : 60               [ 6] 	rts
                             
                             ; renum startLine,newStart,increment
                             ; renumbers from the first matching line to end o
ed5e :                       df_rt_renum
ed5e : e688             [ 5] 	inc df_exeoff
ed60 : 20b8e3           [ 6] 	jsr df_rt_parm_3ints
                             	; starting line number
ed63 : a6a1             [ 3] 	ldx df_tmpptra
ed65 : a5a2             [ 3] 	lda df_tmpptra+1
ed67 : 2004df           [ 6] 	jsr df_pg_find_line
ed6a : 9002             [ 3] 	bcc df_rt_renum_ok
                             	SWBRK DFERR_NOLINE
                             
ed6e :                       df_rt_renum_ok
                             	; save starting position pointer in ptrd
ed6e : 86a7             [ 3] 	stx df_tmpptrd
ed70 : 85a8             [ 3] 	sta df_tmpptrd+1
ed72 :                       df_rt_renum_do
                             	; if not end of program
ed72 : a000             [ 2] 	ldy #0
ed74 : b1a7             [ 5] 	lda (df_tmpptrd),y
                             	; then renumber this line
ed76 : d001             [ 3] 	bne df_rt_renum_update
                             	; else done
ed78 : 60               [ 6] 	rts
ed79 :                       df_rt_renum_update
                             	; so set this line number to new line number
ed79 : a001             [ 2] 	ldy #DFTK_LINNUM
ed7b : a5a3             [ 3] 	lda df_tmpptrb
ed7d : 91a7             [ 5] 	sta (df_tmpptrd),y
ed7f : c8               [ 2] 	iny
ed80 : a5a4             [ 3] 	lda df_tmpptrb+1
ed82 : 91a7             [ 5] 	sta (df_tmpptrd),y
                             	; add increment to new line
                             	_addZPWord df_tmpptrb,df_tmpptrc
AS65 Assembler for R6502 [1.42].                                     Page  228
-------------------------------- bank\bank0.s --------------------------------

                             
ed91 :                       df_rt_renum_next
                             	; point ptrd to the next line
ed91 : 18               [ 2] 	clc
ed92 : a5a7             [ 3] 	lda df_tmpptrd
ed94 : a200             [ 2] 	ldx #0
ed96 : 61a7             [ 6] 	adc (df_tmpptrd,x)
ed98 : 85a7             [ 3] 	sta df_tmpptrd
                             	_bcc 2
                             
ed9c : e6a8             [ 5] 	inc df_tmpptrd+1
ed9e : 4c72ed           [ 3] 	jmp df_rt_renum_do
                             
                             
                             ; * List all procs in VNT
eda1 :                       df_rt_listprocnames
                             	; start at the beginning of the vnt table
                             	_cpyZPWord df_vntstrt,df_tmpptra
                             
                             	; start at varcnt
eda9 : a571             [ 3] 	lda df_varcnt
edab : 85a3             [ 3] 	sta df_tmpptrb
edad :                       df_rt_listcheckvnt
                             	; If reached 0 then not found
edad : a5a3             [ 3] 	lda df_tmpptrb
edaf : f03a             [ 3] 	beq df_rt_listpn_done
edb1 : a000             [ 2] 	ldy #0
edb3 : b1a1             [ 5] 	lda (df_tmpptra),y
edb5 : c95f             [ 2] 	cmp #'_'
edb7 : d01b             [ 3] 	bne df_rt_listnextvnt
edb9 :                       df_rt_listprocch
edb9 : b1a1             [ 5] 	lda (df_tmpptra),y
edbb : 2027c4           [ 6] 	jsr io_put_ch
edbe : aa               [ 2] 	tax
edbf : f003             [ 3] 	beq df_rt_listproccr
edc1 : c8               [ 2] 	iny
edc2 : d0f5             [ 3] 	bne df_rt_listprocch		; Always
edc4 :                       df_rt_listproccr
edc4 : a90d             [ 2] 	lda #UTF_CR
edc6 : 2027c4           [ 6] 	jsr io_put_ch
edc9 : 18               [ 2] 	clc
edca :                       df_rt_listprocpause
edca : 2024c4           [ 6] 	jsr io_get_ch
edcd : c920             [ 2] 	cmp #' '
edcf : d003             [ 3] 	bne df_rt_listnextvnt
edd1 :                       df_rt_listwait
edd1 : 38               [ 2] 	sec
edd2 : b0f6             [ 3] 	bcs df_rt_listprocpause
edd4 :                       df_rt_listnextvnt
edd4 : b1a1             [ 5] 	lda (df_tmpptra),y
edd6 : f003             [ 3] 	beq df_rt_listgotnext
edd8 : c8               [ 2] 	iny
edd9 : d0f9             [ 3] 	bne df_rt_listnextvnt		; Always
eddb :                       df_rt_listgotnext
                             	; dec vnt #
eddb : c6a3             [ 5] 	dec df_tmpptrb
                             	; skip past zero terminator
eddd : c8               [ 2] 	iny
                             	; add this to vnt pointer
edde : 18               [ 2] 	clc
eddf : 98               [ 2] 	tya
ede0 : 65a1             [ 3] 	adc df_tmpptra
AS65 Assembler for R6502 [1.42].                                     Page  229
-------------------------------- bank\bank0.s --------------------------------

ede2 : 85a1             [ 3] 	sta df_tmpptra
                             	_bcc 2
                             
ede6 : e6a2             [ 5] 	inc df_tmpptra+1
ede8 : 4caded           [ 3] 	jmp df_rt_listcheckvnt
edeb :                       df_rt_listpn_done
edeb : 60               [ 6] 	rts
                             
edec :                       df_rt_listproc
                             	; A already contains '_'
edec : 8d0004           [ 4] 	sta df_linbuff
edef : a200             [ 2] 	ldx #0
edf1 : a488             [ 3] 	ldy df_exeoff
edf3 :                       df_rt_listp_copy
edf3 : c8               [ 2] 	iny
edf4 : e8               [ 2] 	inx
edf5 : b186             [ 5] 	lda (df_currlin),y
edf7 : 9d0004           [ 5] 	sta df_linbuff,x
edfa : 2067d7           [ 6] 	jsr df_tk_isalphanum
edfd : b0f4             [ 3] 	bcs df_rt_listp_copy
                             	; zero the line index
edff : a200             [ 2] 	ldx #0
ee01 : 867c             [ 3] 	stx df_linoff
                             	; save runtime pos
ee03 : 8488             [ 3] 	sty df_exeoff
                             	; Now try and find in VNT
ee05 : 2086d5           [ 6] 	jsr df_var_find
ee08 : b036             [ 3] 	bcs df_rt_listp_notfound
                             	; Ok we have got a match in X,A find the proc
ee0a : 868e             [ 3] 	stx df_procptr
ee0c : 858f             [ 3] 	sta df_procptr+1
ee0e : 20c8e4           [ 6] 	jsr df_rt_findproc
                             	; Save the line pointer
ee11 : 86a1             [ 3] 	stx df_tmpptra
ee13 : 85a2             [ 3] 	sta df_tmpptra+1
                             	; save statement index in to line
                             ;	sty df_lineidx
                             ;	; Check if '-' option used
                             ;	ldy df_exeoff
                             ;	lda (df_currlin),y
                             ;	cmp #'-'
                             ;	; if so, list to end of program
                             ;	beq df_rt_listprgend
                             	; Now try and find the end of this procedure
                             	; enddef or another def
                             	; A,X=Line ptr, Y=line idx
                             ;	ldx df_tmpptra
                             ;	lda df_tmpptra+1
                             ;	ldy df_lineidx
ee15 :                       df_rt_listp_findend
                             	; Go to next stat
ee15 : 2073e4           [ 6] 	jsr df_rt_nextstat
ee18 : b057             [ 3] 	bcs df_rt_listprgend
                             	; save y (a,x in lineptr), A is ok to trample
ee1a : 98               [ 2] 	tya
ee1b : 48               [ 3] 	pha
                             	; find the command
ee1c :                       df_rt_listp_findcmd
ee1c : c8               [ 2] 	iny
ee1d : b190             [ 5] 	lda (df_lineptr),y
ee1f : 10fb             [ 3] 	bpl df_rt_listp_findcmd
                             	; restore y to stat beginning
AS65 Assembler for R6502 [1.42].                                     Page  230
-------------------------------- bank\bank0.s --------------------------------

ee21 : 8538             [ 3] 	sta tmp_d
ee23 : 68               [ 4] 	pla
ee24 : a8               [ 2] 	tay
ee25 : a538             [ 3] 	lda tmp_d
                             	; check A - looking for enddef or def
ee27 : c987             [ 2] 	cmp #DFRT_ENDDEF
ee29 : f00b             [ 3] 	beq df_rt_listp_done
ee2b : c986             [ 2] 	cmp #DFRT_DEF
ee2d : f007             [ 3] 	beq df_rt_listp_done
                             	; if neither then next stat from current
ee2f : a690             [ 3] 	ldx df_lineptr
ee31 : a591             [ 3] 	lda df_lineptr+1
ee33 : 4c15ee           [ 3] 	jmp df_rt_listp_findend
ee36 :                       df_rt_listp_done
                             	; Push end line on to stack
ee36 : a591             [ 3] 	lda df_lineptr+1
ee38 : 48               [ 3] 	pha
ee39 : 8a               [ 2] 	txa
ee3a : 48               [ 3] 	pha
ee3b : a591             [ 3] 	lda df_lineptr+1
ee3d : 4c77ee           [ 3] 	jmp df_rt_list_line
ee40 :                       df_rt_listp_notfound
                             	; Fatal error if proc not found
                             	SWBRK DFERR_NOPROC
                             
                             
                             ; list token
ee42 :                       df_rt_list
ee42 : a900             [ 2] 	lda #0
ee44 : 85a9             [ 3] 	sta df_tmpptre		; Zero means in normal list mode
                             	; find non-ws
ee46 : 201de5           [ 6] 	jsr df_rt_skip_ws
                             	; if end of statement then no line specifiers
ee49 : 204eed           [ 6] 	jsr df_rt_eos
                             	; so list whole program
ee4c : b01b             [ 3] 	bcs df_rt_listprg
                             
                             	;if '_' then use procnames
ee4e : c95f             [ 2] 	cmp #'_'
ee50 : d003             [ 3] 	bne df_rt_list_all
ee52 : 4ceced           [ 3] 	jmp df_rt_listproc
ee55 :                       df_rt_list_all
                             	;if '*' then display all procnames
ee55 : c92a             [ 2] 	cmp #'*'
ee57 : d003             [ 3] 	bne df_rt_list_linno
ee59 : 4ca1ed           [ 3] 	jmp df_rt_listprocnames
ee5c :                       df_rt_list_linno
                             	; else get 1st parameter
ee5c : 20e3e0           [ 6] 	jsr df_rt_getnval
                             	; find the starting line number in X,A
ee5f : 2004df           [ 6] 	jsr df_pg_find_line
                             	; save start in ptra
ee62 : 86a1             [ 3] 	stx df_tmpptra
ee64 : 85a2             [ 3] 	sta df_tmpptra+1
ee66 : 4c71ee           [ 3] 	jmp df_rt_listprgend
                             	; NO ability to choose and ending line number!
                             
                             ; Common listing routine used by LIST and SAVE
                             ; tmpe = 0 means in LIST mode else SAVE mode
                             ; can stop the listing in LIST mode with CTRL-C
ee69 :                       df_rt_listprg
                             	; program start and end as for pointer value
AS65 Assembler for R6502 [1.42].                                     Page  231
-------------------------------- bank\bank0.s --------------------------------

                             	_cpyZPWord df_prgstrt, df_tmpptra
                             
ee71 :                       df_rt_listprgend
ee71 : a568             [ 3] 	lda df_prgend+1
ee73 : 48               [ 3] 	pha
ee74 : a567             [ 3] 	lda df_prgend
ee76 : 48               [ 3] 	pha
ee77 :                       df_rt_list_line
                             	; if line length = 0 then end of program
ee77 : a000             [ 2] 	ldy #0
ee79 : b1a1             [ 5] 	lda (df_tmpptra),y
ee7b : f038             [ 3] 	beq df_rt_list_line_fin
                             	; if in list mode and CTRL-C then also stop
ee7d : a5a9             [ 3] 	lda df_tmpptre
ee7f : d010             [ 3] 	bne df_rt_list_line_cont
                             	; check for break, asynch get
ee81 : 18               [ 2] 	clc
ee82 :                       df_rt_list_synckey
ee82 : a5a9             [ 3] 	lda df_tmpptre					; Ignore keys on save mode
ee84 : d00b             [ 3] 	bne df_rt_list_line_cont
ee86 :                       df_rt_list_pause
ee86 : 2024c4           [ 6] 	jsr io_get_ch
ee89 : c920             [ 2] 	cmp #' '						; Space = PAUSE
ee8b : f0f9             [ 3] 	beq df_rt_list_pause			; C=1 for synchronouse ke
ee8d : c903             [ 2] 	cmp #UTF_ETX					; CTRL-C?
ee8f : f024             [ 3] 	beq df_rt_list_line_fin
ee91 :                       df_rt_list_line_cont
ee91 : a000             [ 2] 	ldy #0
ee93 : 847c             [ 3] 	sty df_linoff
ee95 : 20b8ee           [ 6] 	jsr df_rt_list_all_line
ee98 :                       df_rt_list_next_line
                             	; new line
ee98 : 2065c1           [ 6] 	jsr utilPrintCRLF
                             	; increment pointer to next line
ee9b : 18               [ 2] 	clc
ee9c : a5a1             [ 3] 	lda df_tmpptra
ee9e : a000             [ 2] 	ldy #0
eea0 : 71a1             [ 5] 	adc (df_tmpptra),y
eea2 : 85a1             [ 3] 	sta df_tmpptra
                             	_bcc 2
                             
eea6 : e6a2             [ 5] 	inc df_tmpptra+1
                             	; if pointer > end then listing is done
eea8 : 38               [ 2] 	sec
eea9 : 68               [ 4] 	pla
eeaa : aa               [ 2] 	tax
eeab : e5a1             [ 3] 	sbc df_tmpptra
eead : 68               [ 4] 	pla
eeae : 48               [ 3] 	pha
eeaf : e5a2             [ 3] 	sbc df_tmpptra+1
eeb1 : 8a               [ 2] 	txa
eeb2 : 48               [ 3] 	pha
eeb3 : b0c2             [ 3] 	bcs df_rt_list_line
eeb5 :                       df_rt_list_line_fin
                             	; if got here then reached tmpb
eeb5 : 68               [ 4] 	pla
eeb6 : 68               [ 4] 	pla
eeb7 :                       df_rt_list_line_only_fin
eeb7 : 60               [ 6] 	rts
                             
                             ;Using df_tmpptra as line pointer
                             ;Print decode an entire line
AS65 Assembler for R6502 [1.42].                                     Page  232
-------------------------------- bank\bank0.s --------------------------------

eeb8 :                       df_rt_list_all_line				; Start here to include nu
eeb8 : 20f2ef           [ 6] 	jsr df_rt_list_linnum
eebb :                       df_rt_list_line_only			; Start here for just the 
eebb : a003             [ 2] 	ldy #3
eebd : b1a1             [ 5] 	lda (df_tmpptra),y
eebf : 8592             [ 3] 	sta df_lineidx
eec1 : c8               [ 2] 	iny
eec2 : 847c             [ 3] 	sty df_linoff
eec4 :                       df_rt_list_decode
eec4 : a47c             [ 3] 	ldy df_linoff
eec6 : b1a1             [ 5] 	lda (df_tmpptra),y
eec8 : 3010             [ 3] 	bmi df_rt_list_token
eeca : c920             [ 2] 	cmp #DFTK_ESCVAL
eecc : 9006             [ 3] 	bcc df_rt_list_escval
                             	; normal char just print it
eece : 2027c4           [ 6] 	jsr io_put_ch
eed1 : 4cddee           [ 3] 	jmp df_rt_list_nexttok
eed4 :                       df_rt_list_escval
                             	; A and Y need to be valid on entry
eed4 : 20f6ee           [ 6] 	jsr df_rt_list_decode_esc
eed7 : 4cddee           [ 3] 	jmp df_rt_list_nexttok
eeda :                       df_rt_list_token
eeda : 2003f0           [ 6] 	jsr df_rt_list_decode_token
eedd :                       df_rt_list_nexttok
                             	; advance the line offset
eedd : e67c             [ 5] 	inc df_linoff
eedf : a57c             [ 3] 	lda df_linoff
                             	; check if at end of line
eee1 : a200             [ 2] 	ldx #0
eee3 : c1a1             [ 6] 	cmp (df_tmpptra,x)
eee5 : f0d0             [ 3] 	beq df_rt_list_line_only_fin
                             	; check if at end of statement
eee7 : c592             [ 3] 	cmp df_lineidx
eee9 : d0d9             [ 3] 	bne df_rt_list_decode
eeeb : a8               [ 2] 	tay
                             	; save the next statement offset
eeec : b1a1             [ 5] 	lda (df_tmpptra),y
eeee : 8592             [ 3] 	sta df_lineidx
eef0 : c8               [ 2] 	iny
eef1 : 847c             [ 3] 	sty df_linoff
eef3 : 4cc4ee           [ 3] 	jmp df_rt_list_decode
                             
                             
                             ; decode escape sequences
                             ; Input: A contains the esc val and Y is char lin
eef6 :                       df_rt_list_decode_esc
                             	; jump over esc byte
eef6 : c8               [ 2] 	iny
eef7 : 847c             [ 3] 	sty df_linoff
eef9 : 48               [ 3] 	pha
                             	; get the next two bytes in case needed
eefa : b1a1             [ 5] 	lda (df_tmpptra),y
eefc : 85a3             [ 3] 	sta df_tmpptrb
eefe : c8               [ 2] 	iny
eeff : b1a1             [ 5] 	lda (df_tmpptra),y
ef01 : 85a4             [ 3] 	sta df_tmpptrb+1
ef03 : 88               [ 2] 	dey				; Y is on byte after esc byte
ef04 : 68               [ 4] 	pla
                             	; x2 to get jmp offset
ef05 : 0a               [ 2] 	asl a
ef06 : aa               [ 2] 	tax
ef07 : bd17e6           [ 4] 	lda df_rt_escjmp,x
AS65 Assembler for R6502 [1.42].                                     Page  233
-------------------------------- bank\bank0.s --------------------------------

ef0a : 85a5             [ 3] 	sta df_tmpptrc
ef0c : bd18e6           [ 4] 	lda df_rt_escjmp+1,x
ef0f : 85a6             [ 3] 	sta df_tmpptrc+1
                             	; now jump to decoder
ef11 : 6ca500           [ 6] 	jmp (df_tmpptrc)
                             
                             ; reserved
ef14 :                       df_rt_lst_reserved
ef14 : 60               [ 6] 	rts
                             
                             ; decode a byte char
ef15 :                       df_rt_lst_chr
ef15 : a927             [ 2] 	lda #0x27			; Single quote
ef17 : 2027c4           [ 6] 	jsr io_put_ch
ef1a : a5a3             [ 3] 	lda df_tmpptrb
ef1c : 2027c4           [ 6] 	jsr io_put_ch
ef1f : a927             [ 2] 	lda #0x27			; Single quote
ef21 : 2027c4           [ 6] 	jsr io_put_ch
ef24 : c8               [ 2] 	iny
ef25 : 847c             [ 3] 	sty df_linoff
ef27 : 60               [ 6] 	rts
                             
                             ; Output 0x for hex chars
ef28 :                       df_rt_lst_hex_pre
ef28 : a930             [ 2] 	lda #'0'
ef2a : 2027c4           [ 6] 	jsr io_put_ch
ef2d : a978             [ 2] 	lda #'x'
ef2f : 4c27c4           [ 3] 	jmp io_put_ch
                             
                             
                             ; Decode a byte hex
ef32 :                       df_rt_lst_bythex
ef32 : 2028ef           [ 6] 	jsr df_rt_lst_hex_pre
ef35 :                       df_rt_lst_lo_hex
ef35 : a5a3             [ 3] 	lda df_tmpptrb
ef37 : 2082c1           [ 6] 	jsr str_a_to_x
ef3a : 2027c4           [ 6] 	jsr io_put_ch
ef3d : 8a               [ 2] 	txa
ef3e : 2027c4           [ 6] 	jsr io_put_ch
ef41 :                       df_rt_lst_const_done
ef41 : c8               [ 2] 	iny
ef42 : 847c             [ 3] 	sty df_linoff
ef44 : 60               [ 6] 	rts
                             
                             ; Decode an int hex
ef45 :                       df_rt_lst_inthex
ef45 : 2028ef           [ 6] 	jsr df_rt_lst_hex_pre
ef48 : a5a4             [ 3] 	lda df_tmpptrb+1
ef4a : 2082c1           [ 6] 	jsr str_a_to_x
ef4d : 2027c4           [ 6] 	jsr io_put_ch
ef50 : 8a               [ 2] 	txa
ef51 : 2027c4           [ 6] 	jsr io_put_ch
ef54 : 4c35ef           [ 3] 	jmp df_rt_lst_lo_hex
                             
                             ; Decode a byte binary
ef57 :                       df_rt_lst_bytbin
ef57 : a5a3             [ 3] 	lda df_tmpptrb
ef59 : 85a4             [ 3] 	sta df_tmpptrb+1
ef5b : a208             [ 2] 	ldx #8
ef5d : d002             [ 3] 	bne df_rt_lst_bin
                             
                             ; Decode a int binary
AS65 Assembler for R6502 [1.42].                                     Page  234
-------------------------------- bank\bank0.s --------------------------------

ef5f :                       df_rt_lst_intbin
ef5f : a210             [ 2] 	ldx #16
                             	; FALL THROUGH
                             ; Main 01 decoding of binary
ef61 :                       df_rt_lst_bin
ef61 : a930             [ 2] 	lda #'0'
ef63 : 2027c4           [ 6] 	jsr io_put_ch
ef66 : a962             [ 2] 	lda #'b'
ef68 : 2027c4           [ 6] 	jsr io_put_ch
ef6b :                       df_rt_lst_bit
ef6b : a930             [ 2] 	lda #'0'
ef6d : 06a3             [ 5] 	asl df_tmpptrb
ef6f : 26a4             [ 5] 	rol df_tmpptrb+1
ef71 : 6900             [ 2] 	adc #0				; If C=1 then '0' becomes '1'
ef73 :                       df_rt_lst_bit_skip0
ef73 : 2027c4           [ 6] 	jsr io_put_ch
ef76 : ca               [ 2] 	dex
ef77 : d0f2             [ 3] 	bne df_rt_lst_bit
ef79 : f0c6             [ 3] 	beq df_rt_lst_const_done
                             
                             ; Decode a decimal integer
ef7b :                       df_rt_lst_intdec
ef7b : a6a3             [ 3] 	ldx df_tmpptrb
ef7d : a5a4             [ 3] 	lda df_tmpptrb+1
ef7f : c8               [ 2] 	iny
ef80 : 847c             [ 3] 	sty df_linoff
ef82 : 18               [ 2] 	clc
ef83 : 4ce2c3           [ 3] 	jmp print_a_to_d
                             
                             
                             ; decode a variable or procedure
                             ; Slot address to decode in ptrb
ef86 :                       df_rt_lst_var
ef86 :                       df_rt_lst_proc
                             	; jump over the address bytes
ef86 : c8               [ 2] 	iny
ef87 : 847c             [ 3] 	sty df_linoff
                             
                             	; ptrc starts at VNT start
                             	_cpyZPWord df_vntstrt,df_tmpptrc
                             
                             
                             	; ptrd starts at end of VVT
                             	_cpyZPWord df_vvtend,df_tmpptrd
                             
ef99 : a000             [ 2] 	ldy #0
ef9b :                       df_rt_list_findvvt
                             	; Check have we reached target addr in vvt?
ef9b : a5a7             [ 3] 	lda df_tmpptrd
ef9d : c5a3             [ 3] 	cmp df_tmpptrb
ef9f : d006             [ 3] 	bne df_rt_list_vvtend
efa1 : a5a8             [ 3] 	lda df_tmpptrd+1
efa3 : c5a4             [ 3] 	cmp df_tmpptrb+1
efa5 : f021             [ 3] 	beq df_rt_list_gotvvt
efa7 :                       df_rt_list_vvtend
efa7 : b1a5             [ 5] 	lda (df_tmpptrc),y
efa9 : f009             [ 3] 	beq df_rt_list_gotvvtend
                             	_incZPWord df_tmpptrc
                             
efb1 : 4ca7ef           [ 3] 	jmp df_rt_list_vvtend
efb4 :                       df_rt_list_gotvvtend
                             	_incZPWord df_tmpptrc
AS65 Assembler for R6502 [1.42].                                     Page  235
-------------------------------- bank\bank0.s --------------------------------

                             
                             	; move target slot address towards top of mem
efba : 18               [ 2] 	clc
efbb : a5a7             [ 3] 	lda df_tmpptrd
efbd : 6908             [ 2] 	adc #DFVVT_SZ
efbf : 85a7             [ 3] 	sta df_tmpptrd
                             	_bcc 2
                             
efc3 : e6a8             [ 5] 	inc df_tmpptrd+1
                             	; go back and check again
efc5 : 4c9bef           [ 3] 	jmp df_rt_list_findvvt
efc8 :                       df_rt_list_gotvvt
efc8 : b1a5             [ 5] 	lda (df_tmpptrc),y
efca : f025             [ 3] 	beq df_rt_list_donvvt
efcc : 2027c4           [ 6] 	jsr io_put_ch
                             	_incZPWord df_tmpptrc
                             
efd5 : 4cc8ef           [ 3] 	jmp df_rt_list_gotvvt
                             
efd8 :                       df_rt_lst_strlit
efd8 : a922             [ 2] 	lda #0x22
efda : 2027c4           [ 6] 	jsr io_put_ch
efdd : a47c             [ 3] 	ldy df_linoff
efdf :                       df_rt_lst_strlitch
efdf : b1a1             [ 5] 	lda (df_tmpptra),y
efe1 : f007             [ 3] 	beq df_rt_lst_strlitdon
efe3 : 2027c4           [ 6] 	jsr io_put_ch
efe6 : c8               [ 2] 	iny
efe7 : 4cdfef           [ 3] 	jmp df_rt_lst_strlitch
efea :                       df_rt_lst_strlitdon
efea : a922             [ 2] 	lda #0x22
efec : 2027c4           [ 6] 	jsr io_put_ch
efef : 847c             [ 3] 	sty df_linoff
eff1 :                       df_rt_list_donvvt
eff1 : 60               [ 6] 	rts
                             
eff2 :                       df_rt_list_linnum
eff2 : a001             [ 2] 	ldy #1
eff4 : b1a1             [ 5] 	lda (df_tmpptra),y
eff6 : aa               [ 2] 	tax
eff7 : c8               [ 2] 	iny
eff8 : b1a1             [ 5] 	lda (df_tmpptra),y
effa : 18               [ 2] 	clc
effb : 20e2c3           [ 6] 	jsr print_a_to_d
effe : a920             [ 2] 	lda #0x20			; Always add a space after line num
f000 : 4c27c4           [ 3] 	jmp io_put_ch
                             
                             ; decode a token value with MSB set
f003 :                       df_rt_list_decode_token
                             	; if not assembler then normal listing
f003 : c997             [ 2] 	cmp #DFRT_ASM
f005 : d003             [ 3] 	bne df_rt_list_decode_token_normal
f007 : 4c41f0           [ 3] 	jmp df_rt_asm_decode_token
f00a :                       df_rt_list_decode_token_normal
f00a : 297f             [ 2] 	and #0x7f
                             	; token 0 and 1 don't get decoded they are impli
f00c : c902             [ 2] 	cmp #2
f00e : b001             [ 3] 	bcs df_rt_list_do_decode_tkn
f010 : 60               [ 6] 	rts
f011 :                       df_rt_list_do_decode_tkn
f011 : aa               [ 2] 	tax
f012 : a902             [ 2] 	lda #lo(df_tokensyms)
AS65 Assembler for R6502 [1.42].                                     Page  236
-------------------------------- bank\bank0.s --------------------------------

f014 : 85a3             [ 3] 	sta df_tmpptrb
f016 : a9db             [ 2] 	lda #hi(df_tokensyms)
f018 : 85a4             [ 3] 	sta df_tmpptrb+1
f01a :                       df_rt_list_find_sym
f01a : 8a               [ 2] 	txa
f01b : f012             [ 3] 	beq df_rt_list_got_sym
f01d : a000             [ 2] 	ldy #0
f01f :                       df_rt_list_next_ch
f01f : b1a3             [ 5] 	lda (df_tmpptrb),y
f021 : 48               [ 3] 	pha
                             	_incZPWord df_tmpptrb
                             
f028 : 68               [ 4] 	pla
f029 : 10f4             [ 3] 	bpl df_rt_list_next_ch
f02b :                       df_rt_list_got_last_sym
                             	; ok got to the last ch
                             	; advance to next sym
f02b : ca               [ 2] 	dex
f02c : 4c1af0           [ 3] 	jmp df_rt_list_find_sym
f02f :                       df_rt_list_got_sym
f02f : a1a3             [ 6] 	lda (df_tmpptrb,x)		; Relies on X=0 from branch
f031 : 08               [ 3] 	php
f032 : 297f             [ 2] 	and #0x7f
f034 : 2027c4           [ 6] 	jsr io_put_ch
                             	_incZPWord df_tmpptrb
                             
f03d : 28               [ 4] 	plp
f03e : 10ef             [ 3] 	bpl df_rt_list_got_sym
f040 : 60               [ 6] 	rts
                             
                             ;** Decode assembler token in A **
f041 :                       df_rt_asm_decode_token
f041 : a92e             [ 2] 	lda #'.'			;Always put out the . symbol
f043 : 2027c4           [ 6] 	jsr io_put_ch
f046 : a47c             [ 3] 	ldy df_linoff		;Print out any whitespace
f048 :                       df_rt_asm_decode_token_ws
f048 : c8               [ 2] 	iny					;Point to char after the asm token
f049 : 847c             [ 3] 	sty df_linoff
f04b : b1a1             [ 5] 	lda (df_tmpptra),y	;What is the char?
f04d : 2082d7           [ 6] 	jsr df_tk_isws		;If not then found the keyword
f050 : 9006             [ 3] 	bcc df_rt_asm_decode_token_found
f052 : 2027c4           [ 6] 	jsr io_put_ch		;Print the space
f055 : 4c48f0           [ 3] 	jmp df_rt_asm_decode_token_ws
f058 :                       df_rt_asm_decode_token_found
f058 : c911             [ 2] 	cmp #DFTK_VAR		; If is a label variable?
f05a : d003             [ 3] 	bne df_rt_asm_decode_token_keyword
                             	; if so then process as normal escape handling
f05c : 4cf6ee           [ 3] 	jmp df_rt_list_decode_esc
f05f :                       df_rt_asm_decode_token_keyword
f05f : 297f             [ 2] 	and #0x7f			; Mask off MSB
f061 : aa               [ 2] 	tax					;Put it in to X as the counter
                             	; Point to asm symbol table
f062 : a916             [ 2] 	lda #lo(df_asm_tokensyms)
f064 : 85a3             [ 3] 	sta df_tmpptrb
f066 : a9fd             [ 2] 	lda #hi(df_asm_tokensyms)
f068 : 85a4             [ 3] 	sta df_tmpptrb+1
f06a :                       df_rt_list_find_asm_sym
f06a : 8a               [ 2] 	txa
f06b : f01b             [ 3] 	beq df_rt_list_got_asm_sym
f06d : a000             [ 2] 	ldy #0
f06f :                       df_rt_list_next_asm_ch
                             	_incZPWord df_tmpptrb
AS65 Assembler for R6502 [1.42].                                     Page  237
-------------------------------- bank\bank0.s --------------------------------

                             
f075 : b1a3             [ 5] 	lda (df_tmpptrb),y
f077 : c920             [ 2] 	cmp #' '			; Skip all chars >=' '
f079 : b0f4             [ 3] 	bcs df_rt_list_next_asm_ch
f07b : 38               [ 2] 	sec					; Skip offset and mode bytes
f07c : 65a3             [ 3] 	adc df_tmpptrb
f07e : 85a3             [ 3] 	sta df_tmpptrb
                             	_bcc 2
                             
f082 : e6a4             [ 5] 	inc df_tmpptrb+1
f084 : ca               [ 2] 	dex					; One less symbol to skip over
f085 : 4c6af0           [ 3] 	jmp df_rt_list_find_asm_sym
f088 :                       df_rt_list_got_asm_sym
f088 : a1a3             [ 6] 	lda (df_tmpptrb,x)	; Relies on X=0 from branch
f08a : c920             [ 2] 	cmp #' '
f08c : 900c             [ 3] 	bcc df_rt_asm_decode_token_done
f08e : 2027c4           [ 6] 	jsr io_put_ch
                             	_incZPWord df_tmpptrb
                             
f097 : 4c88f0           [ 3] 	jmp df_rt_list_got_asm_sym
f09a :                       df_rt_asm_decode_token_done
f09a : 60               [ 6] 	rts
                             
                             
f09b :                       df_rt_doke
f09b : 20ade3           [ 6] 	jsr df_rt_parm_2ints
f09e : a5a3             [ 3] 	lda df_tmpptrb
f0a0 : a000             [ 2] 	ldy #0
f0a2 : 91a1             [ 5] 	sta (df_tmpptra),y
                             	; get high byte to doke
f0a4 : a5a4             [ 3] 	lda df_tmpptrb+1
f0a6 : c8               [ 2] 	iny
                             	; poke hi byte
f0a7 : 91a1             [ 5] 	sta (df_tmpptra),y
f0a9 : 60               [ 6] 	rts
                             
f0aa :                       df_rt_poke
f0aa : 20ade3           [ 6] 	jsr df_rt_parm_2ints
f0ad : a5a3             [ 3] 	lda df_tmpptrb
f0af : a000             [ 2] 	ldy #0
f0b1 : 91a1             [ 5] 	sta (df_tmpptra),y
f0b3 : 60               [ 6] 	rts
                             
f0b4 :                       df_rt_snd_common
                             	; 3 inputs
                             	; tmpa = channel (1,2,3), tmpb = period, tmpc = 
f0b4 : a5a1             [ 3] 	lda df_tmpptra
                             	; tone channel addressing is 0 to 2
f0b6 : 38               [ 2] 	sec
f0b7 : e901             [ 2] 	sbc #1
f0b9 : 2903             [ 2] 	and #3
                             	; ok doing a tone channel, get reg index for per
f0bb : 0a               [ 2] 	asl a
f0bc : aa               [ 2] 	tax
                             	; get low byte of period
f0bd : a5a3             [ 3] 	lda df_tmpptrb
f0bf : 206ec0           [ 6] 	jsr snd_set
                             	; increment reg number to high byte
f0c2 : e8               [ 2] 	inx
                             	; get high byte of period
f0c3 : a5a4             [ 3] 	lda df_tmpptrb+1
f0c5 : 290f             [ 2] 	and #0x0f
AS65 Assembler for R6502 [1.42].                                     Page  238
-------------------------------- bank\bank0.s --------------------------------

                             	; set period
f0c7 : 206ec0           [ 6] 	jsr snd_set
                             	; get volume register index (8 = channel 1)
f0ca : 18               [ 2] 	clc
f0cb : a5a1             [ 3] 	lda df_tmpptra
f0cd : 2903             [ 2] 	and #3
f0cf : 6907             [ 2] 	adc #7
f0d1 : aa               [ 2] 	tax
                             	; get volume
f0d2 : a5a5             [ 3] 	lda df_tmpptrc
f0d4 : 290f             [ 2] 	and #0x0f
f0d6 : d002             [ 3] 	bne df_rt_sound_env_skip
                             	; envelope mode
f0d8 : 0910             [ 2] 	ora #0x10
f0da :                       df_rt_sound_env_skip
f0da : 4c6ec0           [ 3] 	jmp snd_set
                             
                             ; sound chan,period,volume
f0dd :                       df_rt_sound
f0dd : 20b8e3           [ 6] 	jsr df_rt_parm_3ints
f0e0 :                       df_rt_dosound
                             	; check which channel (0 = noise)
f0e0 : a5a1             [ 3] 	lda df_tmpptra
f0e2 : f003             [ 3] 	beq df_rt_sound_noise
f0e4 : 4cb4f0           [ 3] 	jmp df_rt_snd_common
f0e7 :                       df_rt_sound_noise
                             	; ok update the noise channel, volume is irrelev
f0e7 : a206             [ 2] 	ldx #6
f0e9 : a5a3             [ 3] 	lda df_tmpptrb
f0eb : 291f             [ 2] 	and #0x1f
f0ed : 4c6ec0           [ 3] 	jmp snd_set
                             
                             ; music chan,octave,note,volume
f0f0 :                       df_rt_music
f0f0 : 20cfe3           [ 6] 	jsr df_rt_parm_4ints
                             	; parm 2 = octave, need to x 12word = 24
                             	; get period A,X (hi/lo)
                             	; pass in octave # in X and note # in Y
f0f3 : a6a3             [ 3] 	ldx df_tmpptrb
f0f5 : a4a5             [ 3] 	ldy df_tmpptrc
f0f7 : 2082d4           [ 6] 	jsr snd_get_note
                             	; store note period in b
f0fa : 86a3             [ 3] 	stx df_tmpptrb
f0fc : 85a4             [ 3] 	sta df_tmpptrb+1
                             	; put vol in tmpc
f0fe : a5a7             [ 3] 	lda df_tmpptrd
f100 : 85a5             [ 3] 	sta df_tmpptrc
                             	; tmpa,b,c contain chan,per,vol
f102 : 4ce0f0           [ 3] 	jmp df_rt_dosound
                             
                             
                             ; play tonemask,noisemask,envelope,period
f105 :                       df_rt_play
f105 : 20cfe3           [ 6] 	jsr df_rt_parm_4ints
                             	; parm 1 = tone enable
f108 : a5a1             [ 3] 	lda df_tmpptra
f10a : 2907             [ 2] 	and #7
f10c : 85a1             [ 3] 	sta df_tmpptra
                             	; parm 2 = noise enable
f10e : a5a3             [ 3] 	lda df_tmpptrb
f110 : 2907             [ 2] 	and #7
f112 : 0a               [ 2] 	asl a
AS65 Assembler for R6502 [1.42].                                     Page  239
-------------------------------- bank\bank0.s --------------------------------

f113 : 0a               [ 2] 	asl a
f114 : 0a               [ 2] 	asl a
f115 : 05a1             [ 3] 	ora df_tmpptra
                             	; we now have bits set for channels to enable
                             	; but need to invert for the 8910
                             	; top 2 bits are 0 and 1 as these are port b (in
f117 : 497f             [ 2] 	eor #0x7f
                             	; reg 7 is control register
f119 : a207             [ 2] 	ldx #7
f11b : 206ec0           [ 6] 	jsr snd_set
                             	; parm 3 = envelope mode
f11e : a5a5             [ 3] 	lda df_tmpptrc
f120 : 290f             [ 2] 	and #0xf
                             	; 13 is envelope shape register
f122 : a20d             [ 2] 	ldx #13
f124 : 206ec0           [ 6] 	jsr snd_set
                             	; parm 4 = envelope period
                             	; 11 is envelope period register
f127 : a20b             [ 2] 	ldx #11
                             	; get low
f129 : a5a7             [ 3] 	lda df_tmpptrd
f12b : 206ec0           [ 6] 	jsr snd_set
                             	; get high
f12e : e8               [ 2] 	inx
f12f : a5a8             [ 3] 	lda df_tmpptrd+1
f131 : 4c6ec0           [ 3] 	jmp snd_set
                             
                             ;df_rt_fill
                             ;	jsr df_rt_parm_5ints
                             ;	rts
                             	
                             ;* common filename procesing routine
                             ;*
f134 :                       df_rt_init_filename
                             	; evaluate string
f134 : 20e9e0           [ 6] 	jsr df_rt_neval
f137 : 2006f7           [ 6] 	jsr df_ost_popStr
                             
                             	; save string address
f13a : 86a5             [ 3] 	stx df_tmpptrc
f13c : 85a6             [ 3] 	sta df_tmpptrc+1
                             
                             	; copy string to fhandle
f13e : a000             [ 2] 	ldy #0
f140 :                       df_rt_copy_fn
f140 : b1a5             [ 5] 	lda (df_tmpptrc),y
f142 :                       df_rt_fname_case
f142 : 990004           [ 5] 	sta df_linbuff,y				; Put filename in line buffe
f145 : c8               [ 2] 	iny
f146 : aa               [ 2] 	tax
f147 : d0f7             [ 3] 	bne df_rt_copy_fn
f149 : 60               [ 6] 	rts
                             
                             ;* common file parsing routine
f14a :                       df_rt_parse_file
                             	; now process filename
f14a : 2034f1           [ 6] 	jsr df_rt_init_filename
f14d : a900             [ 2] 	lda #0						; Initialise tape system
f14f : 4cfec3           [ 3] 	jmp io_active_device
f152 :                       df_rt_file_errc
                             	SWBRK DFERR_FNAME
                             
AS65 Assembler for R6502 [1.42].                                     Page  240
-------------------------------- bank\bank0.s --------------------------------

                             
                             ; save "file" as text
f154 :                       df_rt_tsave
f154 : 204af1           [ 6] 	jsr df_rt_parse_file
f157 : 202dc4           [ 6] 	jsr io_open_write
f15a : b0f6             [ 3] 	bcs df_rt_file_errc
                             	; ok now have redirected output to device
                             	; go and list the program in save mode
f15c : a901             [ 2] 	lda #1
f15e : 85a9             [ 3] 	sta df_tmpptre
f160 : 2069ee           [ 6] 	jsr df_rt_listprg
                             	; final CR to end the save
f163 : a90d             [ 2] 	lda #UTF_CR
f165 : 2027c4           [ 6] 	jsr io_put_ch
f168 :                       df_rt_file_cleanup
                             	; close the file
f168 : 2030c4           [ 6] 	jsr io_close
                             	; restore to default device io
f16b : 4cfbc3           [ 3] 	jmp io_set_default
                             
                             
                             ; load "file" from text
f16e :                       df_rt_tload
f16e : 204af1           [ 6] 	jsr df_rt_parse_file
f171 : 202ac4           [ 6] 	jsr io_open_read
f174 : b0dc             [ 3] 	bcs df_rt_file_errc
                             	; no echo - very important
                             	; else might try and write to a device
                             	; only open for reading (i.e. SD CARD)
f176 :                       df_rt_loadline
f176 : 18               [ 2] 	clc					; NO ECHO!
f177 : 20badf           [ 6] 	jsr df_pg_inputline
                             	; if C clear then tokenise line
f17a : 9015             [ 3] 	bcc df_rt_ldtokenise
                             	; else done
                             	; clear dflat runtime else will try to execute
                             	; the last tokenised line!
f17c : a200             [ 2] 	ldx #0
f17e : 8e8004           [ 4] 	stx df_tokbuff			; Offset to next line
f181 : 8e8104           [ 4] 	stx df_tokbuff+1		; Clear line low
f184 : 8e8204           [ 4] 	stx df_tokbuff+2		; Clear line high
f187 : 867f             [ 3] 	stx df_nxtstidx			; Clear next statement
f189 : 867e             [ 3] 	stx df_eolidx			; Clear end of line too
f18b : e8               [ 2] 	inx						; Set immediate mode
f18c : 865e             [ 3] 	stx df_immed
f18e : 4c68f1           [ 3] 	jmp df_rt_file_cleanup	; Ok now can close and do
f191 :                       df_rt_ldtokenise
f191 : 200be0           [ 6] 	jsr df_pg_tokenise		; Tokenise loaded string
f194 : 4c76f1           [ 3] 	jmp df_rt_loadline		; Continue with next until b
                             
                             
                             ; Utility to open in binary mode save
f197 :                       df_rt_openforbinsave
f197 : 204af1           [ 6] 	jsr df_rt_parse_file
f19a : 2039c4           [ 6] 	jsr io_open_ext2		; Ext2 is binary file save
f19d : b0b3             [ 3] 	bcs df_rt_file_errc
f19f : 60               [ 6] 	rts
                             
                             ; Utility to open in binary mode load
f1a0 :                       df_rt_openforbinload
                             	; Get filename and open file for binary read
f1a0 : 204af1           [ 6] 	jsr df_rt_parse_file
AS65 Assembler for R6502 [1.42].                                     Page  241
-------------------------------- bank\bank0.s --------------------------------

f1a3 : 2036c4           [ 6] 	jsr io_open_ext1		; Ext1 is binary file read
f1a6 : b0aa             [ 3] 	bcs df_rt_file_errc
f1a8 : 60               [ 6] 	rts
                             
                             ; bload addr,"file"
f1a9 :                       df_rt_bload
                             	; Get address but keep on stack
f1a9 : e688             [ 5] 	inc df_exeoff
f1ab : 20e9e0           [ 6] 	jsr df_rt_neval
                             
                             	; Get filename and open file for binary read
f1ae : e688             [ 5] 	inc df_exeoff
f1b0 : 20a0f1           [ 6] 	jsr df_rt_openforbinload
                             
                             	; Get address from stack in to ptra
f1b3 : 2002f7           [ 6] 	jsr df_ost_popInt
f1b6 : 86a1             [ 3] 	stx df_tmpptra
f1b8 : 85a2             [ 3] 	sta df_tmpptra+1
                             
                             	; Get file address to X,Y
f1ba : 2024c4           [ 6] 	jsr io_get_ch
f1bd : aa               [ 2] 	tax
f1be : 2024c4           [ 6] 	jsr io_get_ch
f1c1 : a8               [ 2] 	tay
                             
                             	; Check if user address is zero
f1c2 : a5a1             [ 3] 	lda df_tmpptra
f1c4 : 05a2             [ 3] 	ora df_tmpptra+1
f1c6 : d004             [ 3] 	bne df_rt_bload_addr
                             	; If it is zero then use address from file
f1c8 : 86a1             [ 3] 	stx df_tmpptra
f1ca : 84a2             [ 3] 	sty df_tmpptra+1
f1cc :                       df_rt_bload_addr
                             	; Get file length
f1cc : 2024c4           [ 6] 	jsr io_get_ch
f1cf : 85a3             [ 3] 	sta df_tmpptrb
f1d1 : 2024c4           [ 6] 	jsr io_get_ch
f1d4 : 85a4             [ 3] 	sta df_tmpptrb+1
                             
                             	; Go and load the bytes
f1d6 : 2078f2           [ 6] 	jsr df_rt_loadbin
                             	; Close the file
f1d9 : 4c68f1           [ 3] 	jmp df_rt_file_cleanup
                             
                             ; Save a binary file
                             ; addr,length,fname
f1dc :                       df_rt_bsave
                             	; Get source address and length but leave on sta
                             	; evaluate 1st parm
f1dc : 20e9e0           [ 6] 	jsr df_rt_neval
                             	; jump over comma
f1df : e688             [ 5] 	inc df_exeoff
                             	; evaluate the 2nd parm
f1e1 : 20e9e0           [ 6] 	jsr df_rt_neval
                             
                             	; Process file and open for binary save
f1e4 : e688             [ 5] 	inc df_exeoff
f1e6 : 2097f1           [ 6] 	jsr df_rt_openforbinsave
                             
                             	; Get length in to ptrb
f1e9 : 2002f7           [ 6] 	jsr df_ost_popInt
f1ec : 86a3             [ 3] 	stx df_tmpptrb
AS65 Assembler for R6502 [1.42].                                     Page  242
-------------------------------- bank\bank0.s --------------------------------

f1ee : 85a4             [ 3] 	sta df_tmpptrb+1
                             
                             	; Get address in to ptra
f1f0 : 2002f7           [ 6] 	jsr df_ost_popInt
f1f3 : 86a1             [ 3] 	stx df_tmpptra
f1f5 : 85a2             [ 3] 	sta df_tmpptra+1
                             
                             	; now save bytes
f1f7 : 208af2           [ 6] 	jsr df_rt_savebin
                             	; Close the file
f1fa : 4c68f1           [ 3] 	jmp df_rt_file_cleanup
                             
                             
                             ; save dflat tokenised program as binary
f1fd :                       df_rt_save
                             	; Process file and open for binary save
f1fd : 2097f1           [ 6] 	jsr df_rt_openforbinsave
                             
                             	; first save zero page stuff
                             	; ok this saves a bit more than needed
                             	; but it's no biggie and doesn't
                             	; clobber temp space
f200 : a95b             [ 2] 	lda #lo(dflat_zp_save_s)
f202 : 85a1             [ 3] 	sta df_tmpptra
f204 : a900             [ 2] 	lda #hi(dflat_zp_save_s)
f206 : 85a2             [ 3] 	sta df_tmpptra+1
                             	; save length
f208 : 38               [ 2] 	sec
f209 : a9a1             [ 2] 	lda #lo(dflat_zp_save_e)
f20b : e95b             [ 2] 	sbc #lo(dflat_zp_save_s)
f20d : 85a3             [ 3] 	sta df_tmpptrb
f20f : a900             [ 2] 	lda #hi(dflat_zp_save_e)
f211 : e900             [ 2] 	sbc #hi(dflat_zp_save_s)
f213 : 85a4             [ 3] 	sta df_tmpptrb+1
                             	; now save bytes
f215 : 208af2           [ 6] 	jsr df_rt_savebin
                             
                             	; now save the dflat program
f218 : a565             [ 3] 	lda df_prgstrt
f21a : 85a1             [ 3] 	sta df_tmpptra
f21c : a566             [ 3] 	lda df_prgstrt+1
f21e : 85a2             [ 3] 	sta df_tmpptra+1
                             	; save length
f220 : 38               [ 2] 	sec
f221 : a567             [ 3] 	lda df_prgend
f223 : e565             [ 3] 	sbc df_prgstrt
f225 : 85a3             [ 3] 	sta df_tmpptrb
f227 : a568             [ 3] 	lda df_prgend+1
f229 : e566             [ 3] 	sbc df_prgstrt+1
f22b : 85a4             [ 3] 	sta df_tmpptrb+1
                             	; now save bytes
f22d : 208af2           [ 6] 	jsr df_rt_savebin
                             
                             	; now save the variables VVT and VNT
f230 : a569             [ 3] 	lda df_vntstrt
f232 : 85a1             [ 3] 	sta df_tmpptra
f234 : a56a             [ 3] 	lda df_vntstrt+1
f236 : 85a2             [ 3] 	sta df_tmpptra+1
                             	; save length
f238 : 38               [ 2] 	sec
f239 : a56d             [ 3] 	lda df_vvtstrt
f23b : e569             [ 3] 	sbc df_vntstrt
AS65 Assembler for R6502 [1.42].                                     Page  243
-------------------------------- bank\bank0.s --------------------------------

f23d : 85a3             [ 3] 	sta df_tmpptrb
f23f : a56e             [ 3] 	lda df_vvtstrt+1
f241 : e56a             [ 3] 	sbc df_vntstrt+1
f243 : 85a4             [ 3] 	sta df_tmpptrb+1
                             	; now save bytes
f245 : 208af2           [ 6] 	jsr df_rt_savebin
                             
                             	; close the file
f248 : 2030c4           [ 6] 	jsr io_close
f24b : 18               [ 2] 	clc
                             	; Close the file
f24c : 4c68f1           [ 3] 	jmp df_rt_file_cleanup
                             
                             
                             ; load dflat tokenised program as binary
f24f :                       df_rt_load
f24f : 20a0f1           [ 6] 	jsr df_rt_openforbinload
                             
                             	; Get zero page header
f252 : 206bf2           [ 6] 	jsr df_rt_getbin_parms
                             	; and get bytes
f255 : 2078f2           [ 6] 	jsr df_rt_loadbin
                             
                             	; Get program header
f258 : 206bf2           [ 6] 	jsr df_rt_getbin_parms
                             	; and get bytes
f25b : 2078f2           [ 6] 	jsr df_rt_loadbin
                             
                             	; Get variables header
f25e : 206bf2           [ 6] 	jsr df_rt_getbin_parms
                             	; and get bytes
f261 : 2078f2           [ 6] 	jsr df_rt_loadbin
                             
                             	; close the file
f264 : 2030c4           [ 6] 	jsr io_close
f267 : 18               [ 2] 	clc
                             	; Close the file
f268 : 4c68f1           [ 3] 	jmp df_rt_file_cleanup
                             
                             
                             ; Utility to get 4 parms from binary header
f26b :                       df_rt_getbin_parms
f26b : a200             [ 2] 	ldx #0
f26d :                       df_rt_getbin_parms_loop
f26d : 2024c4           [ 6] 	jsr io_get_ch
f270 : 95a1             [ 4] 	sta df_tmpptra,x
f272 : e8               [ 2] 	inx
f273 : e004             [ 2] 	cpx #4
f275 : d0f6             [ 3] 	bne df_rt_getbin_parms_loop
f277 : 60               [ 6] 	rts
                             
                             ; Utility to load a bin file in address ptra
                             ; Length in ptr b
f278 :                       df_rt_loadbin
                             	; Now load all bytes
f278 : a000             [ 2] 	ldy #0
f27a :                       df_rt_loadbin_byte
                             	; Get a byte from tape
f27a : 2024c4           [ 6] 	jsr io_get_ch
                             	; Save it to destination
f27d : 91a1             [ 5] 	sta (df_tmpptra),y
                             	; Increment destination
AS65 Assembler for R6502 [1.42].                                     Page  244
-------------------------------- bank\bank0.s --------------------------------

f27f : c8               [ 2] 	iny
f280 : d002             [ 3] 	bne df_rt_loadbin_inc
f282 : e6a2             [ 5] 	inc df_tmpptra+1
f284 :                       df_rt_loadbin_inc
                             	; Decrement length remaining
f284 : 20a8f2           [ 6] 	jsr df_rt_dec_binlen
                             	; Not done, do another byte
f287 : d0f1             [ 3] 	bne df_rt_loadbin_byte
                             	; Yes the close the file
f289 : 60               [ 6] 	rts
                             
                             ; Utility to save a bin file from address ptra
                             ; Length in ptr b
f28a :                       df_rt_savebin
                             	; Save dest and length to tape
f28a : a200             [ 2] 	ldx #0
f28c :                       df_rt_bsave_parms
f28c : b5a1             [ 4] 	lda df_tmpptra,x
f28e : 2027c4           [ 6] 	jsr io_put_ch
f291 : e8               [ 2] 	inx
f292 : e004             [ 2] 	cpx #4
f294 : d0f6             [ 3] 	bne df_rt_bsave_parms
                             
                             	; Now save all bytes
f296 : a000             [ 2] 	ldy #0
f298 :                       df_rt_savebin_byte
                             	; Get byte from memory
f298 : b1a1             [ 5] 	lda (df_tmpptra),y
                             	; Put byte to tape
f29a : 2027c4           [ 6] 	jsr io_put_ch
                             	; Increment destination
f29d : c8               [ 2] 	iny
f29e : d002             [ 3] 	bne df_rt_savebin_inc
f2a0 : e6a2             [ 5] 	inc df_tmpptra+1
f2a2 :                       df_rt_savebin_inc
                             	; Decrement length remaining
f2a2 : 20a8f2           [ 6] 	jsr df_rt_dec_binlen
                             	; Not done, do another byte
f2a5 : d0f1             [ 3] 	bne df_rt_savebin_byte
f2a7 : 60               [ 6] 	rts
                             
                             ; Decrement length in ptrb
f2a8 :                       df_rt_dec_binlen
                             	; Decrement length remaining
f2a8 : a5a3             [ 3] 	lda df_tmpptrb
f2aa : d002             [ 3] 	bne df_rt_binlen_skip
f2ac : c6a4             [ 5] 	dec df_tmpptrb+1
f2ae :                       df_rt_binlen_skip
f2ae : c6a3             [ 5] 	dec df_tmpptrb
                             	; Reached zero?
f2b0 : a5a3             [ 3] 	lda df_tmpptrb
f2b2 : 05a4             [ 3] 	ora df_tmpptrb+1
f2b4 : 60               [ 6] 	rts
                             
                             
                             ; reset var
f2b5 :                       df_rt_reset
                             	; now get lvar X,A from current statement
f2b5 : 202ae5           [ 6] 	jsr df_rt_getlvar
                             	; save lvar in tmpb, vvt ptr in tmpa
f2b8 : 86a3             [ 3] 	stx df_tmpptrb
f2ba : 85a4             [ 3] 	sta df_tmpptrb+1
AS65 Assembler for R6502 [1.42].                                     Page  245
-------------------------------- bank\bank0.s --------------------------------

                             	; load the vdp count as the reset value of timer
                             	; turn off interrupts while reading vdp lo,hi
f2bc : a000             [ 2] 	ldy #0	; This is in readiness to read high byte 
                             	; clear interrupts to access 3 byte vdp counter 
f2be : 78               [ 2] 	sei
f2bf : a508             [ 3] 	lda vdp_cnt
f2c1 : 91a3             [ 5] 	sta (df_tmpptrb),y
f2c3 : a509             [ 3] 	lda vdp_cnt+1
f2c5 : c8               [ 2] 	iny
f2c6 : 91a3             [ 5] 	sta (df_tmpptrb),y
                             	; restore interrupts asap
f2c8 : 58               [ 2] 	cli
f2c9 : 60               [ 6] 	rts
                             
                             ;***** FUNCTIONS *****
                             
f2ca :                       df_rt_deek
f2ca : 38               [ 2] 	sec
f2cb : 24                    	db 0x24	; BIT skip the clc
f2cc :                       df_rt_peek
f2cc : 18               [ 2] 	clc
f2cd :                       df_rt_readbyte
f2cd : 08               [ 3] 	php
                             ;	inc df_exeoff
f2ce : 20e3e0           [ 6] 	jsr df_rt_getnval
f2d1 : 86a1             [ 3] 	stx df_tmpptra
f2d3 : 85a2             [ 3] 	sta df_tmpptra+1
f2d5 : a000             [ 2] 	ldy #0
f2d7 : b1a1             [ 5] 	lda (df_tmpptra),y
f2d9 : aa               [ 2] 	tax
f2da : a900             [ 2] 	lda #0
f2dc : 28               [ 4] 	plp
f2dd : 9003             [ 3] 	bcc df_rt_readbyte_skip
f2df : c8               [ 2] 	iny
f2e0 : b1a1             [ 5] 	lda (df_tmpptra),y
f2e2 :                       df_rt_readbyte_skip
f2e2 : 4cd2f6           [ 3] 	jmp df_ost_pushInt
                             
                             ; Random number generator
                             ; rnd(0) = get next number
                             ; rnd(>0) = set seed
f2e5 :                       df_rt_rnd
                             ;	inc df_exeoff
f2e5 : 20e3e0           [ 6] 	jsr df_rt_getnval
                             	; if input is 0 then generate next random number
f2e8 : e000             [ 2] 	cpx #0
f2ea : d014             [ 4] 	bne df_rt_rnd_set
f2ec : c900             [ 2] 	cmp #0
f2ee : d010             [ 4] 	bne df_rt_rnd_set
                             	; generate next number
f2f0 : a598             [ 3] 	lda df_rnd+1
f2f2 : 4a               [ 2] 	lsr a
f2f3 : 2697             [ 5] 	rol df_rnd
f2f5 : 9002             [ 3] 	bcc df_rt_rnd_noeor
f2f7 : 49b4             [ 2] 	eor #0xb4
f2f9 :                       df_rt_rnd_noeor
f2f9 : 8598             [ 3] 	sta df_rnd+1
f2fb : 4597             [ 3] 	eor df_rnd
f2fd : 4cd6f6           [ 3] 	jmp df_ost_pushIntA
                             	; else set the seed to that number and done
f300 :                       df_rt_rnd_set
f300 : 8697             [ 3] 	stx df_rnd
AS65 Assembler for R6502 [1.42].                                     Page  246
-------------------------------- bank\bank0.s --------------------------------

f302 : 8598             [ 3] 	sta df_rnd+1
f304 : 4cd2f6           [ 3] 	jmp df_ost_pushInt
                             
                             
                             ;* Return memory footprint as follows:
                             ;* 0	Return free memory (start of vvt - end of he
                             ;* 1	Return program size (end of prg - start of p
                             ;* 2	Return size of vars (end of vnt - start of v
f307 :                       df_rt_mem
                             ;	inc df_exeoff
f307 : 20e3e0           [ 6] 	jsr df_rt_getnval
                             	; only low byte is used
f30a : e001             [ 2] 	cpx #1
f30c : f017             [ 3] 	beq df_rt_mem_prg
f30e : e002             [ 2] 	cpx #2
f310 : f026             [ 3] 	beq df_rt_mem_var
                             	; default is free memory
f312 :                       df_rt_mem_free
                             	_cpyZPWord df_vvtstrt,df_tmpptra
                             
                             	_cpyZPWord df_starend,df_tmpptrb
                             
f322 : 4c48f3           [ 3] 	jmp df_rt_mem_calc
f325 :                       df_rt_mem_prg
                             	_cpyZPWord df_prgend,df_tmpptra
                             
                             	_cpyZPWord df_prgstrt,df_tmpptrb
                             
f335 : 4c48f3           [ 3] 	jmp df_rt_mem_calc
f338 :                       df_rt_mem_var
                             	_cpyZPWord df_vvtstrt,df_tmpptra
                             
                             	_cpyZPWord df_vntstrt,df_tmpptrb
                             
f348 :                       df_rt_mem_calc
                             	; tmpa-tmpb result in X,A
f348 : 38               [ 2] 	sec
f349 : a5a1             [ 3] 	lda df_tmpptra
f34b : e5a3             [ 3] 	sbc df_tmpptrb
f34d : aa               [ 2] 	tax
f34e : a5a2             [ 3] 	lda df_tmpptra+1
f350 : e5a4             [ 3] 	sbc df_tmpptrb+1
f352 : 4cd2f6           [ 3] 	jmp df_ost_pushInt
                             
                             ;* a=stick()
                             ;* returns bit condition of joystick positions
                             ;* no actual joystick support so this is
                             ;* Check for fire | down | up | right | left
                             ;*        bit  4     3      2     1       0
f355 :                       df_rt_stick
                             ;	inc df_exeoff
f355 : 208dc7           [ 6] 	jsr kb_stick				; Get pos in to A
f358 : 4cd6f6           [ 3] 	jmp df_ost_pushIntA
                             
                             ; k=get(sync) sync>=1 means sync
f35b :                       df_rt_get
                             ;	inc df_exeoff
f35b : 20e3e0           [ 6] 	jsr df_rt_getnval
                             	; only low byte is used, check for sync or async
                             	; c=0 if x<1 else x>=1 makes c=1
f35e : e001             [ 2] 	cpx #1
f360 :                       df_rt_get_sync
AS65 Assembler for R6502 [1.42].                                     Page  247
-------------------------------- bank\bank0.s --------------------------------

f360 : 08               [ 3] 	php
f361 : 2024c4           [ 6] 	jsr io_get_ch				; Return in A, C=0 is good
f364 : 9005             [ 3] 	bcc df_rt_get_pushp			; Push A (and do plp)
f366 : 28               [ 4] 	plp
f367 : b0f7             [ 3] 	bcs df_rt_get_sync			; If sync then check again
f369 : 9001             [ 3] 	bcc df_rt_get_push			; Else push zero (no plp)
f36b :                       df_rt_get_pushp
f36b : 28               [ 4] 	plp
f36c :                       df_rt_get_push
f36c : 4cd6f6           [ 3] 	jmp df_ost_pushIntA
                             
                             ; s = scrn(x,y)
f36f :                       df_rt_scrn
                             ;	inc df_exeoff
f36f : 20ade3           [ 6] 	jsr df_rt_parm_2ints
f372 : a4a1             [ 3] 	ldy df_tmpptra			; Y is the x coord!
f374 : a6a3             [ 3] 	ldx df_tmpptrb			; X is the y coord!
f376 : 2069ce           [ 6] 	jsr gr_get
f379 : 4cd6f6           [ 3] 	jmp df_ost_pushIntA
                             
                             ; p = pixel(x,y)
f37c :                       df_rt_pixel
                             ;	inc df_exeoff
f37c : 20ade3           [ 6] 	jsr df_rt_parm_2ints
f37f : a6a1             [ 3] 	ldx df_tmpptra
f381 : a4a3             [ 3] 	ldy df_tmpptrb
f383 : 20cfd0           [ 6] 	jsr gr_pixel
f386 : 4cd6f6           [ 3] 	jmp df_ost_pushIntA
                             
                             
                             ; e=elapsed(var)
f389 :                       df_rt_elapsed
                             	; now get lvar X,A from current statement
f389 : 202ae5           [ 6] 	jsr df_rt_getlvar
f38c : e688             [ 5] 	inc df_exeoff
                             	; save lvar in tmpb, vvt ptr in tmpa
f38e : 86a3             [ 3] 	stx df_tmpptrb
f390 : 85a4             [ 3] 	sta df_tmpptrb+1
                             	; subtract vdp counter from value
                             	; turn off interrupts while reading vdp lo,hi
f392 : a000             [ 2] 	ldy #0	; This is in readiness to read high byte 
f394 : 38               [ 2] 	sec
                             	; disable interrupts to access vdp counter
f395 : 78               [ 2] 	sei
f396 : a508             [ 3] 	lda vdp_cnt
f398 : f1a3             [ 5] 	sbc (df_tmpptrb),y
f39a : aa               [ 2] 	tax
f39b : a509             [ 3] 	lda vdp_cnt+1
                             	; restore interrupts asap
f39d : 58               [ 2] 	cli
f39e : c8               [ 2] 	iny
f39f : f1a3             [ 5] 	sbc (df_tmpptrb),y
f3a1 : 4cd2f6           [ 3] 	jmp df_ost_pushInt
                             
f3a4 :                       df_rt_call
                             ;	inc df_exeoff
f3a4 : 20cfe3           [ 6] 	jsr df_rt_parm_4ints
f3a7 : a5a3             [ 3] 	lda df_tmpptrb				; load A
f3a9 : a6a5             [ 3] 	ldx	df_tmpptrc				; load X
f3ab : a4a7             [ 3] 	ldy df_tmpptrd				; load Y
f3ad : 20b3f3           [ 6] 	jsr df_rt_calljsr
f3b0 :                       df_rt_push_int1
AS65 Assembler for R6502 [1.42].                                     Page  248
-------------------------------- bank\bank0.s --------------------------------

f3b0 : 4cd2f6           [ 3] 	jmp df_ost_pushInt			; A,X pair is return value
f3b3 :                       df_rt_calljsr
f3b3 : 6ca100           [ 6] 	jmp (df_tmpptra)			; tmpptra is address, return 
                             
f3b6 :                       df_rt_sgn
                             ;	inc df_exeoff
f3b6 : 20e3e0           [ 6] 	jsr df_rt_getnval
f3b9 : 86a1             [ 3] 	stx df_tmpptra
f3bb : 05a1             [ 3] 	ora df_tmpptra
f3bd : f00f             [ 3] 	beq df_rt_sgn_z
f3bf : 2980             [ 2] 	and #0x80
f3c1 : d006             [ 3] 	bne df_rt_sgn_n
f3c3 : a201             [ 2] 	ldx #1
f3c5 : a900             [ 2] 	lda #0
f3c7 : f0e7             [ 3] 	beq df_rt_push_int1			; Always
f3c9 :                       df_rt_sgn_n
f3c9 : a2ff             [ 2] 	ldx #0xff
f3cb : 8a               [ 2] 	txa
f3cc : d0e2             [ 3] 	bne df_rt_push_int1			; Always
f3ce :                       df_rt_sgn_z
f3ce : a200             [ 2] 	ldx #0
f3d0 : 8a               [ 2] 	txa
f3d1 : f0dd             [ 3] 	beq df_rt_push_int1			; Always
                             
                             ; addr(X)
f3d3 :                       df_rt_addr
                             	; get lvar X,A from current statement
f3d3 : 202ae5           [ 6] 	jsr df_rt_getlvar
f3d6 : e688             [ 5] 	inc df_exeoff
f3d8 : 4cd2f6           [ 3] 	jmp df_ost_pushInt
                             
                             ; string length calculator
                             ; X,A = source
                             ; A = length not including zero
f3db :                       df_rt_strlen_common
f3db : 86a1             [ 3] 	stx df_tmpptra
f3dd : 85a2             [ 3] 	sta df_tmpptra+1
f3df : a0ff             [ 2] 	ldy #0xff
f3e1 :                       df_rt_strlen_count
f3e1 : c8               [ 2] 	iny
f3e2 : b1a1             [ 5] 	lda (df_tmpptra),y
f3e4 : d0fb             [ 3] 	bne df_rt_strlen_count
f3e6 : 98               [ 2] 	tya
f3e7 : 60               [ 6] 	rts
                             
                             
                             ; common routine to extract a string
                             ; tmpa = source string
                             ; tmpb = dest string
                             ; tmpc = start pos
                             ; tmpd = endpos
f3e8 :                       df_rt_str_extract
                             	; source string
f3e8 : 2006f7           [ 6] 	jsr df_ost_popStr
f3eb : 86a1             [ 3] 	stx df_tmpptra
f3ed : 85a2             [ 3] 	sta df_tmpptra+1
                             	; destination is string accumulator
f3ef : a57a             [ 3] 	lda df_sevalptr
f3f1 : 85a3             [ 3] 	sta df_tmpptrb
f3f3 : a57b             [ 3] 	lda df_sevalptr+1
f3f5 : 85a4             [ 3] 	sta df_tmpptrb+1
                             	; start pos
AS65 Assembler for R6502 [1.42].                                     Page  249
-------------------------------- bank\bank0.s --------------------------------

f3f7 : a4a5             [ 3] 	ldy df_tmpptrc
f3f9 : a200             [ 2] 	ldx #0
f3fb :                       df_rt_str_cpy_ch
f3fb : c4a7             [ 3] 	cpy df_tmpptrd
f3fd : f011             [ 4] 	beq df_str_src_end
f3ff : b1a1             [ 5] 	lda (df_tmpptra),y
f401 : f00d             [ 3] 	beq df_str_src_end
f403 : 81a3             [ 6] 	sta (df_tmpptrb,x)
                             	_incZPWord df_tmpptrb
                             
f40b : c8               [ 2] 	iny
f40c : d0ed             [ 4] 	bne df_rt_str_cpy_ch
                             	SWBRK DFERR_STRLONG
                             
f410 :                       df_str_src_end
f410 : a900             [ 2] 	lda #0
f412 : 81a3             [ 6] 	sta (df_tmpptrb,x)
f414 : a67a             [ 3] 	ldx df_sevalptr
f416 : a57b             [ 3] 	lda df_sevalptr+1
f418 : 4cddf6           [ 3] 	jmp df_ost_pushStr
                             
                             ; $c = chr(x)
f41b :                       df_rt_chr
                             ;	inc df_exeoff
                             	; get char in X
f41b : 20e3e0           [ 6] 	jsr df_rt_getnval
f41e : a000             [ 2] 	ldy #0
                             	; transfer lo byte to A
f420 : 8a               [ 2] 	txa
f421 : 917a             [ 5] 	sta (df_sevalptr),y
f423 : c8               [ 2] 	iny
                             	; zero terminator
f424 : a900             [ 2] 	lda #0
f426 : 917a             [ 5] 	sta (df_sevalptr),y
                             	; point to seval scratch area
f428 : a67a             [ 3] 	ldx df_sevalptr
f42a : a57b             [ 3] 	lda df_sevalptr+1
f42c : 4cddf6           [ 3] 	jmp df_ost_pushStr
                             
                             ; $c = hex(x)
f42f :                       df_rt_hex
                             ;	inc df_exeoff
                             	; create hex digits
f42f : 20e3e0           [ 6] 	jsr df_rt_getnval
f432 : 85a1             [ 3] 	sta df_tmpptra	; Save the high byte
f434 : 8a               [ 2] 	txa				; Convert low byte first
f435 : 2082c1           [ 6] 	jsr str_a_to_x	; Hex digits in A,X
f438 : 85a3             [ 3] 	sta df_tmpptrb
f43a : 8a               [ 2] 	txa				; Push low digit of low byte from X
f43b : 48               [ 3] 	pha
f43c : a5a3             [ 3] 	lda df_tmpptrb	; Get A back from temp
f43e : 48               [ 3] 	pha				; Push high digit of low byte
f43f : a5a1             [ 3] 	lda df_tmpptra	; Get the high byte
f441 : 2082c1           [ 6] 	jsr str_a_to_x	; Hex digits in A,X
                             	; create string
f444 : a000             [ 2] 	ldy #0			; Index in to string temp area
                             	; hi/hi
f446 : 917a             [ 5] 	sta (df_sevalptr),y
f448 : c8               [ 2] 	iny
                             	; hi/lo
f449 : 8a               [ 2] 	txa
f44a : 917a             [ 5] 	sta (df_sevalptr),y
AS65 Assembler for R6502 [1.42].                                     Page  250
-------------------------------- bank\bank0.s --------------------------------

f44c : c8               [ 2] 	iny
                             	; lo/hi
f44d : 68               [ 4] 	pla
f44e : 917a             [ 5] 	sta (df_sevalptr),y
f450 : c8               [ 2] 	iny
                             	; lo/lo
f451 : 68               [ 4] 	pla
f452 : 917a             [ 5] 	sta (df_sevalptr),y
f454 : c8               [ 2] 	iny
                             	; zero terminator
f455 : a900             [ 2] 	lda #0
f457 : 917a             [ 5] 	sta (df_sevalptr),y
                             	; point to seval scratch area
f459 : a67a             [ 3] 	ldx df_sevalptr
f45b : a57b             [ 3] 	lda df_sevalptr+1
f45d : 4cddf6           [ 3] 	jmp df_ost_pushStr
                             
                             ; $c = dec(x)
f460 :                       df_rt_dec
                             ;	inc df_exeoff
                             	; create dec digits
f460 : 20e3e0           [ 6] 	jsr df_rt_getnval
f463 : 2098c3           [ 6] 	jsr int_to_str
                             	; point to num_buf scratch area
f466 : a24d             [ 2] 	ldx #lo(num_buf)
f468 : a900             [ 2] 	lda #hi(num_buf)
f46a : 4cddf6           [ 3] 	jmp df_ost_pushStr
                             
                             
                             ; $l = left($s, x)
f46d :                       df_rt_left
                             ;	inc df_exeoff
                             
                             	; first get the string to act on
                             	; point to string accumulator
f46d : 20a3e1           [ 6] 	jsr df_rt_seval
                             	; now get the num of chars
f470 : e688             [ 5] 	inc df_exeoff
f472 : 20e3e0           [ 6] 	jsr df_rt_getnval
                             	; number of chars to extract
f475 : 86a7             [ 3] 	stx df_tmpptrd
                             	; start position
f477 : a000             [ 2] 	ldy #0
f479 : 84a5             [ 3] 	sty df_tmpptrc
f47b : 4ce8f3           [ 3] 	jmp df_rt_str_extract
                             
                             ; $r = right($s, x)
f47e :                       df_rt_right
                             ;	inc df_exeoff
                             	; first get the string to act on
                             	; point to string accumulator
f47e : 20a3e1           [ 6] 	jsr df_rt_seval
                             	; now get the num of chars from the right
f481 : e688             [ 5] 	inc df_exeoff
f483 : 20e3e0           [ 6] 	jsr df_rt_getnval
                             	; number of chars to extract from the right
f486 : 86a5             [ 3] 	stx df_tmpptrc
                             	; end pos = len
f488 : a67a             [ 3] 	ldx df_sevalptr
f48a : a57b             [ 3] 	lda df_sevalptr+1
f48c : 20dbf3           [ 6] 	jsr df_rt_strlen_common
f48f : 85a7             [ 3] 	sta df_tmpptrd
AS65 Assembler for R6502 [1.42].                                     Page  251
-------------------------------- bank\bank0.s --------------------------------

                             	; subtract num chars to extract to get start pos
f491 : 38               [ 2] 	sec
f492 : e5a5             [ 3] 	sbc df_tmpptrc
f494 : 85a5             [ 3] 	sta df_tmpptrc
f496 : 4ce8f3           [ 3] 	jmp df_rt_str_extract
                             
                             ; $m = mid($s, x, y)
f499 :                       df_rt_mid
                             ;	inc df_exeoff
                             	; first get the string to act on
                             	; point to string accumulator
f499 : 20a3e1           [ 6] 	jsr df_rt_seval
                             	; now get start of string segment
f49c : e688             [ 5] 	inc df_exeoff
f49e : 20e9e0           [ 6] 	jsr df_rt_neval
                             	; number of chars to extract
f4a1 : e688             [ 5] 	inc df_exeoff
f4a3 : 20e3e0           [ 6] 	jsr df_rt_getnval
f4a6 : 86a7             [ 3] 	stx df_tmpptrd
                             	; start position
f4a8 : 2002f7           [ 6] 	jsr df_ost_popInt
f4ab : ca               [ 2] 	dex					; zero offset rather than 1
f4ac : 86a5             [ 3] 	stx df_tmpptrc
                             	; update end pos by adding start pos
f4ae : 8a               [ 2] 	txa
f4af : 18               [ 2] 	clc
f4b0 : 65a7             [ 3] 	adc df_tmpptrd
f4b2 : 85a7             [ 3] 	sta df_tmpptrd
f4b4 : 4ce8f3           [ 3] 	jmp df_rt_str_extract
                             
                             ; %l = len($s)
f4b7 :                       df_rt_len
                             ;	inc df_exeoff
                             	; evaluate the string in the string accumulator
f4b7 : 20a3e1           [ 6] 	jsr df_rt_seval
f4ba : 2006f7           [ 6] 	jsr df_ost_popStr
                             	; now calculate the length of this string
f4bd : 20dbf3           [ 6] 	jsr df_rt_strlen_common
f4c0 : 4cd6f6           [ 3] 	jmp df_ost_pushIntA
                             
                             ; %l = asc($s)
f4c3 :                       df_rt_asc
                             ;	inc df_exeoff
                             	; Evaluate string in the string accumulator
f4c3 : 20a3e1           [ 6] 	jsr df_rt_seval
f4c6 : 2006f7           [ 6] 	jsr df_ost_popStr
                             	; Store point in ZP
f4c9 : 86a1             [ 3] 	stx df_tmpptra
f4cb : 85a2             [ 3] 	sta df_tmpptra+1
                             	; Find the character at beginning
f4cd : a200             [ 2] 	ldx #0
f4cf : a1a1             [ 6] 	lda (df_tmpptra,x)
f4d1 : 4cd6f6           [ 3] 	jmp df_ost_pushIntA
                             
                             ; %l = val($s)
f4d4 :                       df_rt_val
                             ;	inc df_exeoff
                             	; evaluate the string
f4d4 : 20a3e1           [ 6] 	jsr df_rt_seval
f4d7 : 2006f7           [ 6] 	jsr df_ost_popStr
f4da : a000             [ 2] 	ldy #0				; any numeric format
f4dc : 20cbc1           [ 6] 	jsr con_n_to_a		; result in num_a
AS65 Assembler for R6502 [1.42].                                     Page  252
-------------------------------- bank\bank0.s --------------------------------

f4df : b007             [ 3] 	bcs df_rt_val_err
f4e1 : a63d             [ 3] 	ldx num_a
f4e3 : a53e             [ 3] 	lda num_a+1
                             	; Save as an int
f4e5 : 4cd2f6           [ 3] 	jmp df_ost_pushInt
f4e8 :                       df_rt_val_err
                             	SWBRK DFERR_TYPEMISM
                             
                             
                             ; stop execution
f4ea :                       df_rt_abort
                             	SWBRK DFERR_ABORT
                             
                             
f4ec :                       df_rt_sprchar
f4ec : 20ade3           [ 6] 	jsr df_rt_parm_2ints
f4ef : a5a1             [ 3] 	lda df_tmpptra
f4f1 : a6a3             [ 3] 	ldx df_tmpptrb
f4f3 : 4c42d3           [ 3] 	jmp gr_spr_char
                             
f4f6 :                       df_rt_sprpos
f4f6 : 20b8e3           [ 6] 	jsr df_rt_parm_3ints
f4f9 : a5a1             [ 3] 	lda df_tmpptra
f4fb : a6a3             [ 3] 	ldx df_tmpptrb
f4fd : a4a5             [ 3] 	ldy df_tmpptrc
f4ff : 4c52d3           [ 3] 	jmp gr_spr_pos
                             
f502 :                       df_rt_sprupd
f502 : 20ddd2           [ 6] 	jsr gr_spr_erase
f505 : 20efd2           [ 6] 	jsr gr_spr_new
f508 : 4c21d3           [ 3] 	jmp gr_spr_draw
                             
f50b :                       df_rt_sprinit
f50b : 4ccfd2           [ 3] 	jmp gr_spr_init
                             
f50e :                       df_rt_sprmulti
f50e : 20ade3           [ 6] 	jsr df_rt_parm_2ints
f511 : 4c5fd3           [ 3] 	jmp gr_spr_multi_pos
                             
f514 :                       df_rt_sprhit
                             ;	inc df_exeoff
f514 : 20e3e0           [ 6] 	jsr df_rt_getnval
f517 : 8a               [ 2] 	txa
f518 : 2048d3           [ 6] 	jsr gr_spr_hit
f51b : b003             [ 3] 	bcs df_rt_sprhit_inactive
                             	; Active sprite hit = background
f51d : 4cd6f6           [ 3] 	jmp df_ost_pushIntA
f520 :                       df_rt_sprhit_inactive
                             	; Inactive sprite hit = -1
f520 : a2ff             [ 2] 	ldx #0xff
f522 : 8a               [ 2] 	txa
f523 : 4cd2f6           [ 3] 	jmp df_ost_pushInt
                             
                             
f526 :                       mod_sz_rtsubs_e
                             
                             
                             	include "dflat/proc.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
AS65 Assembler for R6502 [1.42].                                     Page  253
-------------------------------- bank\bank0.s --------------------------------

                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  PROC.S
                             ;*  dflat module to handle procedures:
                             ;*  - executing a procedure
                             ;*  - find a proc, pass local and non-local param
                             ;*  - return from a proc, unload locals
                             ;*  - save the definition of a proc in the VNT an
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code  
                             
f526 :                       mod_sz_proc_s
                             
f526 :                       df_rt_proc_parmerr
f526 :                       df_rt_deferr
                             	SWBRK DFERR_PROCPARM
                             
                             
                             
                             ; call procedure
f528 :                       df_rt_proc
                             	; move past escape token
f528 : a488             [ 3] 	ldy df_exeoff
f52a : c8               [ 2] 	iny
                             	; Get VVT address X,A and procptr
f52b : b186             [ 5] 	lda (df_currlin),y
f52d : aa               [ 2] 	tax
f52e : c8               [ 2] 	iny
f52f : b186             [ 5] 	lda (df_currlin),y
f531 : c8               [ 2] 	iny
f532 : 8488             [ 3] 	sty df_exeoff
f534 : 868e             [ 3] 	stx df_procptr
f536 : 858f             [ 3] 	sta df_procptr+1
                             	
                             	; is index 0 (held in dim1)
                             	; then need to find the procedure
f538 : a003             [ 2] 	ldy #DFVVT_DIM1
f53a : b18e             [ 5] 	lda (df_procptr),y
f53c : d014             [ 3] 	bne df_rt_proc_addr
                             	; find proc
f53e : 20c8e4           [ 6] 	jsr df_rt_findproc
                             	; save y (line index)
f541 : 8438             [ 3] 	sty tmp_d
                             	; now go and update the proc vvt address
f543 : a002             [ 2] 	ldy #DFVVT_HI
f545 : 918e             [ 5] 	sta (df_procptr),y
f547 : a001             [ 2] 	ldy #DFVVT_LO
f549 : 8a               [ 2] 	txa
f54a : 918e             [ 5] 	sta (df_procptr),y
f54c : a003             [ 2] 	ldy #DFVVT_DIM1
                             	; get back line index in to A
f54e : a538             [ 3] 	lda tmp_d
f550 : 918e             [ 5] 	sta (df_procptr),y
f552 :                       df_rt_proc_addr
                             	; move past first open bracket
f552 : e688             [ 5] 	inc df_exeoff
                             	
AS65 Assembler for R6502 [1.42].                                     Page  254
-------------------------------- bank\bank0.s --------------------------------

                             	; get parm count
f554 : a004             [ 2] 	ldy #DFVVT_DIM2
f556 : b18e             [ 5] 	lda (df_procptr),y	
f558 : f018             [ 3] 	beq df_rt_proc_parm_none
                             	; push the right number of parms on
f55a : 48               [ 3] 	pha
                             
f55b : c688             [ 5] 	dec df_exeoff		; Pre-adjust
f55d :                       df_rt_proc_push_parm
                             	; move past comma or opening bracket
f55d : e688             [ 5] 	inc df_exeoff
                             	; if at end then error!
f55f : a488             [ 3] 	ldy df_exeoff
f561 : b186             [ 5] 	lda (df_currlin),y
f563 : c929             [ 2] 	cmp #')'
f565 : f0bf             [ 3] 	beq df_rt_proc_parmerr
                             	; else try and evaluate
f567 : 20e9e0           [ 6] 	jsr df_rt_neval
                             	; get parm count off stack
f56a : 68               [ 4] 	pla
                             	; decrement
f56b : 38               [ 2] 	sec
f56c : e901             [ 2] 	sbc #1
                             	; and put back on stack
f56e : 48               [ 3] 	pha
                             	; go back and do all required parms
f56f : d0ec             [ 3] 	bne df_rt_proc_push_parm
                             	; remove parm counter from stack
f571 :                       df_rt_proc_parm_done
f571 : 68               [ 4] 	pla
f572 :                       df_rt_proc_parm_none
                             	; should be at close bracket
f572 : a488             [ 3] 	ldy df_exeoff
f574 : b186             [ 5] 	lda (df_currlin),y
f576 : c929             [ 2] 	cmp #')'
f578 : d0ac             [ 3] 	bne df_rt_proc_parmerr
                             	; should be no more parms
                             	; ok, finally we have all parms on rt stack
                             	; now execute the procedure
                             	; get back the proc address
f57a : a68e             [ 3] 	ldx df_procptr
f57c : a58f             [ 3] 	lda df_procptr+1
                             ;	bne df_rt_exec_proc		; ALWAYS as procptr+1 !=0
                             	
                             ; executing a procedure in VVT slot A,X
f57e :                       df_rt_exec_proc
                             	; save slot address
f57e : 86a1             [ 3] 	stx df_tmpptra
f580 : 85a2             [ 3] 	sta df_tmpptra+1
                             	
                             	; need to save all important vars
f582 : a586             [ 3] 	lda df_currlin
f584 : 48               [ 3] 	pha
f585 : a587             [ 3] 	lda df_currlin+1
f587 : 48               [ 3] 	pha
f588 : a588             [ 3] 	lda df_exeoff
f58a : 48               [ 3] 	pha
f58b : a57f             [ 3] 	lda df_nxtstidx
f58d : 48               [ 3] 	pha
f58e : a580             [ 3] 	lda df_curstidx
f590 : 48               [ 3] 	pha
f591 : a57e             [ 3] 	lda df_eolidx
AS65 Assembler for R6502 [1.42].                                     Page  255
-------------------------------- bank\bank0.s --------------------------------

f593 : 48               [ 3] 	pha
f594 : a593             [ 3] 	lda df_ifnest
f596 : 48               [ 3] 	pha
                             
                             	; now initialise the data
f597 : a001             [ 2] 	ldy #DFVVT_LO
f599 : b1a1             [ 5] 	lda (df_tmpptra),y
f59b : 8586             [ 3] 	sta df_currlin
f59d : c8               [ 2] 	iny
f59e : b1a1             [ 5] 	lda (df_tmpptra),y
f5a0 : 8587             [ 3] 	sta df_currlin+1
f5a2 : c8               [ 2] 	iny
f5a3 : b1a1             [ 5] 	lda (df_tmpptra),y
f5a5 : 8588             [ 3] 	sta df_exeoff
f5a7 : 8580             [ 3] 	sta df_curstidx
f5a9 : a000             [ 2] 	ldy #0		; hmm XXXXX might need to be tay to get 
f5ab : b186             [ 5] 	lda (df_currlin),y
f5ad : 857f             [ 3] 	sta df_nxtstidx
                             	; now execute statements
f5af : 20fee3           [ 6] 	jsr df_rt_exec_stat
                             ;	bcs df_rt_exec_proc_err
                             	; now restore the position
f5b2 : 68               [ 4] 	pla
f5b3 : 8593             [ 3] 	sta df_ifnest
f5b5 : 68               [ 4] 	pla
f5b6 : 857e             [ 3] 	sta df_eolidx
f5b8 : 68               [ 4] 	pla
f5b9 : 8580             [ 3] 	sta df_curstidx
f5bb : 68               [ 4] 	pla
f5bc : 857f             [ 3] 	sta df_nxtstidx
f5be : 68               [ 4] 	pla
f5bf : 8588             [ 3] 	sta df_exeoff
f5c1 : 68               [ 4] 	pla
f5c2 : 8587             [ 3] 	sta df_currlin+1
f5c4 : 68               [ 4] 	pla
f5c5 : 8586             [ 3] 	sta df_currlin
                             	; should be all restored, so return
f5c7 : 60               [ 6] 	rts
                             
                             
f5c8 :                       df_rt_def
                             	; line offset pointing at DFTK_PROC
                             	; skip over PROC address and open bracket
f5c8 : a688             [ 3] 	ldx df_exeoff
f5ca : e8               [ 2] 	inx
f5cb : e8               [ 2] 	inx
f5cc : e8               [ 2] 	inx
f5cd : 8688             [ 3] 	stx df_exeoff
                             	; parms on stack in reverse order to parm list
                             	; so get each parm and type and save to scratch
f5cf : a201             [ 2] 	ldx #1									; index in to scratch
f5d1 : 868c             [ 3] 	stx df_procargs							; Proc args is the #args-1
f5d3 : a488             [ 3] 	ldy df_exeoff
f5d5 :                       df_rt_def_find_var
f5d5 : c8               [ 2] 	iny
f5d6 : b186             [ 5] 	lda (df_currlin),y
                             	; check if end of parm list
f5d8 : c929             [ 2] 	cmp #')'
f5da : f021             [ 3] 	beq df_rt_def_parm_done
                             	; else check if found a variable escape token (<
f5dc : c911             [ 2] 	cmp #DFTK_VAR
f5de : f007             [ 3] 	beq df_rt_def_got_var
AS65 Assembler for R6502 [1.42].                                     Page  256
-------------------------------- bank\bank0.s --------------------------------

                             	; else check if non-local specifier
f5e0 : c926             [ 2] 	cmp #DFTK_VARPARM						; This is a regular ASCII
f5e2 : d0f1             [ 3] 	bne df_rt_def_find_var
f5e4 :                       df_rt_def_got_varparm
                             	; set high bit
f5e4 : 0980             [ 2] 	ora #0x80
                             	; advance over non-local specifier
f5e6 : c8               [ 2] 	iny
f5e7 :                       df_rt_def_got_var
f5e7 : 4980             [ 2] 	eor #0x80			; If was set by '&' qualifier then w
f5e9 : 9d1306           [ 5] 	sta scratch,x		; Save parm type (by value or ref
                             	; get address and save in scratch
f5ec : c8               [ 2] 	iny
f5ed : b186             [ 5] 	lda (df_currlin),y
f5ef : 9d3306           [ 5] 	sta scratch+32,x	; Hope 32 params is enough! :-)
f5f2 : c8               [ 2] 	iny
f5f3 : b186             [ 5] 	lda (df_currlin),y
f5f5 : 9d5306           [ 5] 	sta scratch+64,x
f5f8 : e8               [ 2] 	inx
f5f9 : e68c             [ 5] 	inc df_procargs
f5fb : d0d8             [ 3] 	bne df_rt_def_find_var  ; always - relies not ze
f5fd :                       df_rt_def_parm_done
                             	; save index that we got to
f5fd : 8488             [ 3] 	sty df_exeoff
                             	; save def param list position in temp
f5ff : 868b             [ 3] 	stx df_procmode
                             	; all var indices on the operator stack
                             	; now load up variables with parameters
                             	; initially assume no locals
f601 : a900             [ 2] 	lda #0
f603 : 858d             [ 3] 	sta df_procloc
f605 :                       df_rt_def_load_var
f605 : c68c             [ 5] 	dec df_procargs
f607 : f038             [ 3] 	beq df_rt_def_load_var_done
                             	; get var address
f609 : c68b             [ 5] 	dec df_procmode
f60b : a68b             [ 3] 	ldx df_procmode
f60d : bd3306           [ 4] 	lda scratch+32,x
f610 : 85a1             [ 3] 	sta df_tmpptra
f612 : bd5306           [ 4] 	lda scratch+64,x
f615 : 85a2             [ 3] 	sta df_tmpptra+1
                             	
f617 : bd1306           [ 4] 	lda scratch,x
                             	; if MSB is clear then this is not a local varia
                             	; so just go an initialise with stacking
f61a : 1009             [ 3] 	bpl df_rt_def_initialise_parm
                             	; else call the local handling code to 
                             	; push the var address on to the runtime stack
f61c : a6a1             [ 3] 	ldx df_tmpptra
f61e : a5a2             [ 3] 	lda df_tmpptra+1
f620 : 2075f6           [ 6] 	jsr df_rt_proc_local
                             	; increment number of locals
f623 : e68d             [ 5] 	inc df_procloc
f625 :                       df_rt_def_initialise_parm
                             	; load type
f625 : a000             [ 2] 	ldy #DFVVT_TYPE
f627 : b1a1             [ 5] 	lda (df_tmpptra),y
                             	; if array or string type then pop pointer from 
f629 : 2984             [ 2] 	and #DFVVT_STR|DFVVT_ARRY
f62b : f006             [ 3] 	beq df_rt_def_load_var_int
f62d : 200af7           [ 6] 	jsr df_ost_popPtr
f630 : 4c36f6           [ 3] 	jmp df_rt_def_load_var_int_skip
AS65 Assembler for R6502 [1.42].                                     Page  257
-------------------------------- bank\bank0.s --------------------------------

f633 :                       df_rt_def_load_var_int
                             	; must be int pop it from operator stack
f633 : 2002f7           [ 6] 	jsr df_ost_popInt
f636 :                       df_rt_def_load_var_int_skip
                             	; update the variable
f636 : a002             [ 2] 	ldy #DFVVT_HI
f638 : 91a1             [ 5] 	sta (df_tmpptra),y
f63a : 88               [ 2] 	dey
f63b : 8a               [ 2] 	txa
f63c : 91a1             [ 5] 	sta (df_tmpptra),y
                             	
f63e : 4c05f6           [ 3] 	jmp df_rt_def_load_var
f641 :                       df_rt_def_load_var_done
                             	; save the number of local parameters found so t
                             	; be unloaded when the proc ends
f641 : a58d             [ 3] 	lda df_procloc
f643 : 2089f6           [ 6] 	jsr df_rst_pushByte
                             	; continue with next statement
f646 : 18               [ 2] 	clc
f647 : 60               [ 6] 	rts
                             
                             	
                             ; return a value
f648 :                       df_rt_return
                             	; evaluate the return and put on the parameter s
                             	; then process this like an end of procedure
f648 : 20e9e0           [ 6] 	jsr df_rt_neval
                             ; end def for a proc
f64b :                       df_rt_enddef
                             	; unload any locals
                             ;	jsr df_rt_proc_unlocal
                             	; nothing to do - main loop will terminate
                             ;	clc
                             ;	rts
                             ; enddef falls through to the unlocal code	
                             	
                             ; unload any local variables from runtime stack
                             ;df_rt_proc_unlocal
f64b : 2092f6           [ 6] 	jsr df_rst_popByte
f64e : aa               [ 2] 	tax
f64f : f020             [ 3] 	beq df_rt_proc_unload_done
f651 :                       df_rt_proc_unloadvar
f651 : 8a               [ 2] 	txa
f652 : 48               [ 3] 	pha
                             	; var value is popped first then index
                             	; get a word and put in tmpb
f653 : 20aff6           [ 6] 	jsr df_rst_popWord
f656 : 86a3             [ 3] 	stx df_tmpptrb
f658 : 85a4             [ 3] 	sta df_tmpptrb+1
                             	; get the var address
f65a : 20aff6           [ 6] 	jsr df_rst_popWord
f65d : 86a1             [ 3] 	stx df_tmpptra
f65f : 85a2             [ 3] 	sta df_tmpptra+1
                             	; store lo byte first
f661 : a001             [ 2] 	ldy #DFVVT_LO
f663 : a5a3             [ 3] 	lda df_tmpptrb
f665 : 91a1             [ 5] 	sta (df_tmpptra),y
                             	; then hi
f667 : c8               [ 2] 	iny
f668 : a5a4             [ 3] 	lda df_tmpptrb+1
f66a : 91a1             [ 5] 	sta (df_tmpptra),y
                             	; restore counter
AS65 Assembler for R6502 [1.42].                                     Page  258
-------------------------------- bank\bank0.s --------------------------------

f66c : 68               [ 4] 	pla
f66d : aa               [ 2] 	tax
f66e : ca               [ 2] 	dex
f66f : d0e0             [ 3] 	bne df_rt_proc_unloadvar
f671 :                       df_rt_proc_unload_done
f671 : 68               [ 4] 	pla				; Pull old return address from stack
f672 : 68               [ 4] 	pla
f673 : 18               [ 2] 	clc
f674 : 60               [ 6] 	rts
                             	
                             ; push a local variable to the runtime stack
                             ; X,A = var slot
f675 :                       df_rt_proc_local
                             	; save address
f675 : 86a1             [ 3] 	stx df_tmpptra
f677 : 85a2             [ 3] 	sta df_tmpptra+1
                             	; push var slot on rt stack
f679 : 20a1f6           [ 6] 	jsr df_rst_pushWord
f67c :                       df_rt_proc_local_load	
                             	; load x,a with var value lo,hi
f67c : a001             [ 2] 	ldy #DFVVT_LO
f67e : b1a1             [ 5] 	lda (df_tmpptra),y
f680 : aa               [ 2] 	tax
f681 : c8               [ 2] 	iny
f682 : b1a1             [ 5] 	lda (df_tmpptra),y
                             	; push word on to rt stack
f684 : 20a1f6           [ 6] 	jsr df_rst_pushWord
f687 : 18               [ 2] 	clc
f688 : 60               [ 6] 	rts
                             		
f689 :                       mod_sz_proc_e
                             
                             
f689 :                       mod_sz_runtime_e
                             
                             
                             
                             	include "dflat/stack.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  STACK.S
                             ;*  This module implements the dflat software sta
                             ;*  needs a few stacks:
                             ;*  - 6502 stack for expression parsing and reent
                             ;*  - dflat runtime stack for things like for/nex
                             ;*  - dflat parameter stack for passing parameter
                             ;*  The two software stacks are implemented in th
                             ;*  with the operator stack growing up from 0 and
                             ;*  runtime stack growing down from 255.  Hopeful
                             ;*  don't meet as there are no checks for this at
                             ;*  purely because I want speed over friendliness
                             ;*  I may come to regret this!
                             ;*  I have also added the only runtime memory all
                             ;*  needed by dflat here.  Humourously I have cal
                             ;*  which is taken from the C language, but it's 
                             ;*  grab some memory after end the of dflat progr
AS65 Assembler for R6502 [1.42].                                     Page  259
-------------------------------- bank\bank0.s --------------------------------

                             ;*  arrays - which of course cannot have storage 
                             ;*  tokenisation time (e.g. because I dimension a
                             ;*  a size from a variable).
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code  
                             
                             
                             ;****************************************
                             ;* Push a byte on to runtime stack
                             ;* A = byte
                             ;****************************************
f689 :                       df_rst_pushByte
f689 : a476             [ 3] 	ldy df_rtstop
f68b : 990005           [ 5] 	sta df_rtstck,y
f68e : 88               [ 2] 	dey
f68f : 8476             [ 3] 	sty df_rtstop
f691 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Pop a byte off runtime stack
                             ;* A = byte
                             ;****************************************
f692 :                       df_rst_popByte
f692 : a476             [ 3] 	ldy df_rtstop
f694 : c8               [ 2] 	iny
f695 : b90005           [ 4] 	lda df_rtstck,y
f698 : 8476             [ 3] 	sty df_rtstop
f69a : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Peek a byte off runtime stack
                             ;* A = byte
                             ;****************************************
f69b :                       df_rst_peekByte
f69b : a476             [ 3] 	ldy df_rtstop
                             	; Look at what is below top of stack
                             	; below means the next address up as
                             	; this stack grows downwards like 6502
f69d : b90105           [ 4] 	lda df_rtstck+1,y
f6a0 : 60               [ 6] 	rts
                             	
                             ;****************************************
                             ;* Push a word on to runtime stack
                             ;* X,A = word lo,hi
                             ;****************************************
f6a1 :                       df_rst_pushWord
f6a1 : a476             [ 3] 	ldy df_rtstop
f6a3 : 990005           [ 5] 	sta df_rtstck,y
f6a6 : 88               [ 2] 	dey
f6a7 : 8a               [ 2] 	txa
f6a8 : 990005           [ 5] 	sta df_rtstck,y
f6ab : 88               [ 2] 	dey
f6ac : 8476             [ 3] 	sty df_rtstop
f6ae : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Pop a word off runtime stack
                             ;* X,A = word lo,hi
                             ;****************************************
AS65 Assembler for R6502 [1.42].                                     Page  260
-------------------------------- bank\bank0.s --------------------------------

f6af :                       df_rst_popWord
f6af : a476             [ 3] 	ldy df_rtstop
f6b1 : c8               [ 2] 	iny
f6b2 : be0005           [ 4] 	ldx df_rtstck,y
f6b5 : c8               [ 2] 	iny
f6b6 : b90005           [ 4] 	lda df_rtstck,y
f6b9 : 8476             [ 3] 	sty df_rtstop
f6bb : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Push a parameter on to parm stack
                             ;* X,A - int
                             ;* Y - type
                             ;****************************************
f6bc :                       df_ost_pushParmX
f6bc : 8438             [ 3] 	sty tmp_d		; Save Type
f6be : a477             [ 3] 	ldy df_parmtop	; Get stack index
                             	; push high byte first (A)
f6c0 : 990005           [ 5] 	sta df_rtstck,y
f6c3 : c8               [ 2] 	iny
                             	; push low byte next (X)
f6c4 : 8a               [ 2] 	txa
f6c5 : 990005           [ 5] 	sta df_rtstck,y
f6c8 : c8               [ 2] 	iny
f6c9 : a538             [ 3] 	lda tmp_d		; get Type
f6cb : 990005           [ 5] 	sta df_rtstck,y
f6ce : c8               [ 2] 	iny
                             	; save new top of stack
f6cf : 8477             [ 3] 	sty df_parmtop
f6d1 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Push an int on to parm stack
                             ;* X,A - int
                             ;****************************************
f6d2 :                       df_ost_pushInt
f6d2 : a001             [ 2] 	ldy #DFST_INT
f6d4 : d0e6             [ 3] 	bne df_ost_pushParmX		; ALWAYS!
                             
                             ;****************************************
                             ;* Push A on to parm stack
                             ;* X,A - int
                             ;****************************************
f6d6 :                       df_ost_pushIntA
f6d6 : a001             [ 2] 	ldy #DFST_INT
f6d8 : aa               [ 2] 	tax
f6d9 : a900             [ 2] 	lda #0
f6db : f0df             [ 3] 	beq df_ost_pushParmX		; ALWAYS!
                             
                             ;****************************************
                             ;* Push a string pointer on to parm stack
                             ;* X,A - int
                             ;****************************************
f6dd :                       df_ost_pushStr
f6dd : a080             [ 2] 	ldy #DFST_STR
f6df : d0db             [ 3] 	bne df_ost_pushParmX		; ALWAYS!
                             
                             ;****************************************
                             ;* Push a general pointer on to parm stack
                             ;* X,A - int
                             ;****************************************
f6e1 :                       df_ost_pushPtr
AS65 Assembler for R6502 [1.42].                                     Page  261
-------------------------------- bank\bank0.s --------------------------------

f6e1 : a0ff             [ 2] 	ldy #0xff
f6e3 : d0d7             [ 3] 	bne df_ost_pushParmX		; ALWAYS!
                             	
                             ;****************************************
                             ;* Pop parameter from the stack
                             ;* X,A - int
                             ;* Y - type expected
                             ;****************************************
f6e5 :                       df_ost_popParmX
f6e5 : 98               [ 2] 	tya
f6e6 : a477             [ 3] 	ldy df_parmtop
                             	; pull type first
f6e8 : 88               [ 2] 	dey
f6e9 : 390005           [ 4] 	and df_rtstck,y
f6ec : f00c             [ 3] 	beq df_st_typemismatcherr
                             	; pull low byte first
f6ee : 88               [ 2] 	dey
f6ef : be0005           [ 4] 	ldx df_rtstck,y
                             	; pull high byte next
f6f2 : 88               [ 2] 	dey
f6f3 : b90005           [ 4] 	lda df_rtstck,y
                             	; save new top of stack
f6f6 : 8477             [ 3] 	sty df_parmtop
f6f8 : 18               [ 2] 	clc
f6f9 : 60               [ 6] 	rts
f6fa :                       df_st_typemismatcherr
                             	SWBRK DFERR_TYPEMISM
                             
                             
                             ;****************************************
                             ;* Return type on top of stack
                             ;* A - type
                             ;****************************************
f6fc :                       df_ost_peekType
f6fc : a477             [ 3] 	ldy df_parmtop
f6fe : b9ff04           [ 4] 	lda df_rtstck-1,y
f701 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Pop an int off parm stack
                             ;* X,A - int
                             ;****************************************
f702 :                       df_ost_popInt
f702 : a001             [ 2] 	ldy #DFST_INT
f704 : d0df             [ 4] 	bne df_ost_popParmX			; ALWAYS!
                             
                             ;****************************************
                             ;* Pop a string pointer off parm stack
                             ;* X,A - int
                             ;****************************************
f706 :                       df_ost_popStr
f706 : a080             [ 2] 	ldy #DFST_STR
f708 : d0db             [ 4] 	bne df_ost_popParmX			; ALWAYS!
                             	
                             ;****************************************
                             ;* Pop a general pointer off parm stack
                             ;* X,A - int
                             ;****************************************
f70a :                       df_ost_popPtr
f70a : a0ff             [ 2] 	ldy #0xff
f70c : d0d7             [ 4] 	bne df_ost_popParmX			; ALWAYS!
                             	
AS65 Assembler for R6502 [1.42].                                     Page  262
-------------------------------- bank\bank0.s --------------------------------

                             	
                             ;****************************************
                             ;* Allocate space on the heap
                             ;* X, A = Number of bytes to allocate
                             ;* X, A return address of allocated space
                             ;****************************************
f70e :                       df_st_malloc
                             	; save A in Y
f70e : a8               [ 2] 	tay
                             	; save old starend
f70f : a575             [ 3] 	lda df_starend+1
f711 : 48               [ 3] 	pha
f712 : a574             [ 3] 	lda df_starend
f714 : 48               [ 3] 	pha
                             	; restore A from Y
f715 : 98               [ 2] 	tya
                             	; add X,A to starend
f716 : 48               [ 3] 	pha
f717 : 8a               [ 2] 	txa
f718 : 18               [ 2] 	clc
f719 : 6574             [ 3] 	adc df_starend
f71b : 8574             [ 3] 	sta df_starend
f71d : 68               [ 4] 	pla
f71e : 6575             [ 3] 	adc df_starend+1
f720 : 8575             [ 3] 	sta df_starend+1
                             	; return old starend as start of space
f722 : 68               [ 4] 	pla
f723 : aa               [ 2] 	tax
f724 : 68               [ 4] 	pla
f725 : 60               [ 6] 	rts
                             	
                             
                             ;****************************************
                             ;* df_init
                             ;* Initialise dflat language settings
                             ;****************************************
f726 :                       df_init
                             	; Initialise top of memory to default
                             	; This can be overridden by himem command
f726 : a900             [ 2] 	lda #lo(DF_MEMTOP)
f728 : 8d1106           [ 4] 	sta df_memtop
f72b : a998             [ 2] 	lda #hi(DF_MEMTOP)
f72d : 8d1206           [ 4] 	sta df_memtop+1
                             
                             	; Init program space
f730 : 4c33f7           [ 3] 	jmp df_clear
                             
                             	; Initialise assembler
                             ;	jsr asm_init
                             
                             ;	rts
                             
                             
                             ;****************************************
                             ;* df_clear
                             ;* Initialise program space
                             ;****************************************
f733 :                       df_clear
                             	; Start of program space
f733 : a913             [ 2] 	lda #lo(DF_PROGSTART)
f735 : 8565             [ 3] 	sta df_prgstrt
f737 : 8567             [ 3] 	sta df_prgend
AS65 Assembler for R6502 [1.42].                                     Page  263
-------------------------------- bank\bank0.s --------------------------------

f739 : a907             [ 2] 	lda #hi(DF_PROGSTART)
f73b : 8566             [ 3] 	sta df_prgstrt+1
f73d : 8568             [ 3] 	sta df_prgend+1
                             	; Terminal value in prog space
f73f : a900             [ 2] 	lda #0
f741 : a8               [ 2] 	tay
f742 : 9165             [ 5] 	sta (df_prgstrt),y
                             	; No variables - zero the count
f744 : 8571             [ 3] 	sta df_varcnt
                             
                             	; Variable value table
                             	; Grows down from mem top
f746 : ad1106           [ 4] 	lda df_memtop
f749 : 856d             [ 3] 	sta df_vvtstrt
f74b : 856f             [ 3] 	sta df_vvtend
f74d : ad1206           [ 4] 	lda df_memtop+1
f750 : 856e             [ 3] 	sta df_vvtstrt+1
f752 : 8570             [ 3] 	sta df_vvtend+1
                             
                             	; Variable name table
                             	; Grows down from mem top
f754 : a56d             [ 3] 	lda df_vvtstrt
f756 : 8569             [ 3] 	sta df_vntstrt
f758 : 856b             [ 3] 	sta df_vntend
f75a : a56e             [ 3] 	lda df_vvtstrt+1
f75c : 856a             [ 3] 	sta df_vntstrt+1
f75e : 856c             [ 3] 	sta df_vntend+1
                             
                             	; String accumulator
f760 : a913             [ 2] 	lda #lo(scratch)
f762 : 857a             [ 3] 	sta df_sevalptr
f764 : a906             [ 2] 	lda #hi(scratch)
f766 : 857b             [ 3] 	sta df_sevalptr+1
                             
f768 : 60               [ 6] 	rts
                             
f769 :                       mod_sz_dflat_e
                             
                             	include "dflat/error.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  ERROR.S
                             ;*  Error handling module.
                             ;*  Whan an error is thrown using BRK, this modul
                             ;*  displaying the error plus any associated line
                             ;*  if it was running a program.  It then resets 
                             ;*  settings and takes the system back to program
                             ;*  mode.  The message uses the general IO handle
                             ;*  output must be set to the right place else fo
                             ;*	the error message will be written to tape!
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code
                             	include "dflat/error.i"
AS65 Assembler for R6502 [1.42].                                     Page  264
-------------------------------- bank\bank0.s --------------------------------

                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  ERROR.I
                             ;*  Error definitions file.
                             ;*  The macro to throw an error is elswhere, but 
                             ;*  It issues a 6502 BRK commmand with the next b
                             ;*  the error code.  The BRK handler then picks u
                             ;*  code and shows the appropriate message plus a
                             ;*  number if a program was running.
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code  
                             
                             ; Error message numbers
0000 =                       DFERR_OK		=	0
0001 =                       DFERR_SYNTAX	=	1
0002 =                       DFERR_TYPEMISM	=	2
0003 =                       DFERR_DIM		=	3
0004 =                       DFERR_UNTIL		=	4
0005 =                       DFERR_NOPROC	=	5
0006 =                       DFERR_PROCPARM	=	6
0007 =                       DFERR_IMMEDIATE	=	7
0008 =                       DFERR_UNCLOSEDIF=	8
0009 =                       DFERR_NOIF		=	9
000a =                       DFERR_NEXTFOR	=	10
000b =                       DFERR_FNAME		=	11
000c =                       DFERR_STRLONG	=	12
000d =                       DFERR_BREAK		=	13
000e =                       DFERR_NODATA	=	14
000f =                       DFERR_WEND		=	15
0010 =                       DFERR_NOLINE	=	16
0011 =                       DFERR_RETURN	=	17
0012 =                       DFERR_ABORT		=	18
0013 =                       DFERR_QUANTITY	=	19
0014 =                       DFERR_NOORG		=	20
                             
                             
                             
                             
                             
                             ; Error message table, each msg null terminated
f769 :                       df_tk_errortab
f769 : 4f6b00                	db	"Ok", 0
f76c : 53796e74617800        	db	"Syntax", 0
f773 : 5479706500            	db	"Type", 0
f778 : 52652d64696d00        	db	"Re-dim", 0
f77f : 4e6f2072657065..      	db	"No repeat", 0
f789 : 4e6f206465666e00      	db	"No defn", 0
f791 : 5061726d00            	db	"Parm", 0
f796 : 456e64656400          	db	"Ended", 0
f79c : 4e6f20656e6469..      	db	"No endif", 0
f7a5 : 4e6f20696600          	db	"No if", 0
f7ab : 4e6f20666f7200        	db	"No for", 0
f7b2 : 4e6f7420666f75..      	db	"Not found", 0
AS65 Assembler for R6502 [1.42].                                     Page  265
-------------------------------- bank\bank0.s --------------------------------

f7bc : 546f6f206c6f6e..      	db	"Too long", 0
f7c5 : 427265616b00          	db	"Break", 0
f7cb : 4e6f206461746100      	db	"No data", 0
f7d3 : 4e6f207768696c..      	db	"No while", 0
f7dc : 4e6f206c696e6500      	db	"No line", 0
f7e4 : 4e6f2072657475..      	db	"No return ", 0
f7ef : 41626f7274656400      	db	"Aborted", 0
f7f7 : 426f756e647300        	db	"Bounds", 0
f7fe : 4e6f206f726700        	db	"No org", 0
f805 : 00                    	db	0
                             
f806 :                       df_tk_error_inline
f806 : 20696e206c696e..      	db	" in line ", 0
f810 :                       df_tk_error_atpos
f810 : 20706f732000          	db	" pos ", 0
f816 :                       df_tk_error_error
f816 : 206572726f7200        	db	" error", 0
                             
                             ;****************************************
                             ;* df_trap_error
                             ;* Show an error message
                             ;* errno is error number
                             ;* currlin = Line number
                             ;* exeoff = offset
                             ;* at the end jump to program editor
                             ;****************************************
f81d :                       df_trap_error
                             	; set IO back to normal
f81d : 20f8c4           [ 6] 	jsr init_via0
f820 : 20fbc3           [ 6] 	jsr io_set_default
f823 : 58               [ 2] 	cli
                             
f824 : a969             [ 2] 	lda #lo(df_tk_errortab)
f826 : 85a1             [ 3] 	sta df_tmpptra
f828 : a9f7             [ 2] 	lda #hi(df_tk_errortab)
f82a : 85a2             [ 3] 	sta df_tmpptra+1
f82c : a65d             [ 3] 	ldx errno				; 0 or >=128 goes to monitor
f82e : f002             [ 3] 	beq df_trap_go_monitor
f830 : 1003             [ 3] 	bpl df_trap_normal
f832 :                       df_trap_go_monitor
f832 : 4cabf8           [ 3] 	jmp df_trap_monitor
f835 :                       df_trap_normal
f835 : a000             [ 2] 	ldy #0
f837 :                       df_show_err_find
                             	; If on a zero, then error table exhausted
                             	; so drop in to the monitor
f837 : b1a1             [ 5] 	lda (df_tmpptra),y
f839 : f070             [ 3] 	beq df_trap_monitor
                             	; Skip over this error text including zero termi
f83b :                       df_show_err_skip
                             	_incZPWord df_tmpptra
                             
f841 : b1a1             [ 5] 	lda (df_tmpptra),y
f843 : d0f6             [ 3] 	bne df_show_err_skip
                             	_incZPWord df_tmpptra
                             
f84b : ca               [ 2] 	dex
f84c : d0e9             [ 3] 	bne df_show_err_find
                             	; Error message found
f84e : a6a1             [ 3] 	ldx df_tmpptra
f850 : a5a2             [ 3] 	lda df_tmpptra+1
f852 : 2075c4           [ 6] 	jsr io_print_line
AS65 Assembler for R6502 [1.42].                                     Page  266
-------------------------------- bank\bank0.s --------------------------------

f855 : a216             [ 2] 	ldx #lo(df_tk_error_error)
f857 : a9f8             [ 2] 	lda #hi(df_tk_error_error)
f859 : 2075c4           [ 6] 	jsr io_print_line
                             	; if line number <> 0 then print it
f85c : a001             [ 2] 	ldy #DFTK_LINNUM
f85e : b186             [ 5] 	lda (df_currlin),y
f860 : aa               [ 2] 	tax
f861 : c8               [ 2] 	iny
f862 : b186             [ 5] 	lda (df_currlin),y
f864 : d004             [ 3] 	bne df_show_err_linnum
f866 : e000             [ 2] 	cpx #0x00
f868 : f019             [ 3] 	beq df_show_err_fin
f86a :                       df_show_err_linnum
                             	_println df_tk_error_inline
                             
f87f : 18               [ 2] 	clc
f880 : 20e2c3           [ 6] 	jsr print_a_to_d
f883 :                       df_show_err_fin
f883 : a488             [ 3] 	ldy df_exeoff
f885 : f01d             [ 3] 	beq df_show_err_done
                             	_println df_tk_error_atpos
                             
f89c : 98               [ 2] 	tya
f89d : aa               [ 2] 	tax
f89e : a900             [ 2] 	lda #0
f8a0 : 18               [ 2] 	clc
f8a1 : 20e2c3           [ 6] 	jsr print_a_to_d
f8a4 :                       df_show_err_done
f8a4 : 2065c1           [ 6] 	jsr utilPrintCRLF
f8a7 : 18               [ 2] 	clc
                             	; back to editor
f8a8 : 4cccdf           [ 3] 	jmp df_pg_dflat
                             
                             
                             ; For unknown errors, jump to monitor
f8ab :                       df_trap_monitor
                             	; Print PC
                             	_println_low df_msg_pc
                             
f8b2 : a563             [ 3] 	lda df_brkpc+1
f8b4 : 206dc1           [ 6] 	jsr utilPrintA
f8b7 : a562             [ 3] 	lda df_brkpc
f8b9 : 206dc1           [ 6] 	jsr utilPrintA
f8bc : 205dc1           [ 6] 	jsr utilPrintSPC
                             
                             	; Print A
                             	_println_low df_msg_acc
                             
f8c6 : a53d             [ 3] 	lda num_a
f8c8 : 206dc1           [ 6] 	jsr utilPrintA
f8cb : 205dc1           [ 6] 	jsr utilPrintSPC
                             
                             	; Print X
                             	_println_low df_msg_xreg
                             
f8d5 : a53e             [ 3] 	lda num_a+1
f8d7 : 206dc1           [ 6] 	jsr utilPrintA
f8da : 205dc1           [ 6] 	jsr utilPrintSPC
                             
                             	; Print Y
                             	_println_low df_msg_yreg
                             
AS65 Assembler for R6502 [1.42].                                     Page  267
-------------------------------- bank\bank0.s --------------------------------

f8e4 : a53f             [ 3] 	lda num_a+2
f8e6 : 206dc1           [ 6] 	jsr utilPrintA
f8e9 : 2065c1           [ 6] 	jsr utilPrintCRLF
                             
f8ec : 2014e8           [ 6] 	jsr df_rt_monitor
                             	; back to editor
f8ef : 4cccdf           [ 3] 	jmp df_pg_dflat
                             
f8f2 :                       df_msg_pc
f8f2 : 50433a00              	db "PC:\x0"
f8f6 :                       df_msg_acc
f8f6 : 413a00                	db "A:\x0"
f8f9 :                       df_msg_xreg
f8f9 : 583a00                	db "X:\x0"
f8fc :                       df_msg_yreg
f8fc : 593a00                	db "Y:\x0"
                             
                             	include	"dflat/asm.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  ASM.S
                             ;*  This is the main controller code file for the
                             ;*  This file includes all the required source fi
                             ;*	in addition to dflat.s
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code
                             
f8ff :                       mod_sz_asm_s
                             
                             	;	dflat.s is already included, so just the addit
                             	include "dflat/asm.i"
                             ;* Addressing modes - 15 in total, 16 with direct
                             ;*  0   Nothing
                             ;*	1 	Absolute			XXX <word>
                             ;*	2 	Absolute,X			XXX <word>,x
                             ;*	3 	Absolute,Y			XXX <word>,y
                             ;*	4	Zeropage			XXX	<byte>
                             ;*	5	Zeropage,X			XXX	<byte>,x
                             ;*	6	Zeropage,Y			XXX	<byte>,y
                             ;*	7	Indirect			XXX	(<byte>)
                             ;*	8	Indirect,X			XXX	(<byte>,x)
                             ;*	9	Indirect,Y			XXX	(<byte>),y
                             ;*	A	Absolute indirect	XXX	(<word>)
                             ;*	B	Absolute indirect,x	XXX	(<word>,x)
                             ;*	C	Immediate			XXX #<byte>
                             ;*	D	Accumulator			XXX (same as implied)
                             ;*	E	Implied				XXX
                             ;*	F	Relative			XXX	<byte>
                             ;*	10	Assembler directive	XXX .......
                             
0000 =                       AM_NONE		= 0
0001 =                       AM_ABS	 	= 1
0002 =                       AM_ABSX		= 2
AS65 Assembler for R6502 [1.42].                                     Page  268
-------------------------------- bank\bank0.s --------------------------------

0003 =                       AM_ABSY		= 3
0004 =                       AM_ZP		= 4
0005 =                       AM_ZPX		= 5
0006 =                       AM_ZPY		= 6
0007 =                       AM_ZPIND	= 7
0008 =                       AM_ZPINDX	= 8
0009 =                       AM_ZPINDY	= 9
000a =                       AM_ABSIND	= 10
000b =                       AM_ABSINDX	= 11
000c =                       AM_IMM		= 12
000d =                       AM_ACC		= 13
000d =                       AM_IMP		= AM_ACC
000f =                       AM_REL		= 15
0010 =                       AM_DIR		= 16
                             
                             
                             
                             	include "dflat/tkasm.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  ASM.S
                             ;*	Module that implements tokenisation of the ass
                             ;* 	The assembler is an extension to dflat, almos
                             ;*	almost a language within a language, as it has
                             ;*	own symbol tables to allow adding new keywords
                             ;*	running out of space in the main symtol table 
                             ;*	for normal 6502 asembler syntax which is at od
                             ;*	regular dflat.
                             ;*	Hence, this module has to do its own additiona
                             ;*	to tokenise the assembly.
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code  
                             
f8ff :                       mod_sz_tkasm_s
                             
                             	; if didn't find regular keywords then try assen
f8ff :                       df_tk_asm_parse_command
                             	; skip the white space after the dot
f8ff : 2073d7           [ 6] 	jsr df_tk_skip_ws
                             	; find the assembler symbol
f902 : 202df9           [ 6] 	jsr df_tk_asm_matchtok
                             	; if not found then must be a label assignment
f905 : b021             [ 3] 	bcs df_tk_asm_parse_command_symbol
                             	; Get the assembler symbol and put the token
f907 : a583             [ 3] 	lda df_symoff
                             	; Set the MSB
f909 : 0980             [ 2] 	ora #0x80
f90b : 2022d7           [ 6] 	jsr df_tk_put_tok
                             	; check the first addressing mode code
                             	; remember to jump over the offset byte
f90e : a001             [ 2] 	ldy #1
f910 : b181             [ 5] 	lda (df_symtab),y
                             	; Directive?
AS65 Assembler for R6502 [1.42].                                     Page  269
-------------------------------- bank\bank0.s --------------------------------

f912 : c910             [ 2] 	cmp #AM_DIR
f914 : d00c             [ 3] 	bne df_tk_asm_mnemonic
                             	; if directive then process it
f916 : a583             [ 3] 	lda df_symoff
f918 : 2084f9           [ 6] 	jsr df_tk_asm_exec_parser
f91b : b004             [ 3] 	bcs df_tk_asm_parse_command_err
                             	; [1] ignore white space but keep it
f91d : 2073d7           [ 6] 	jsr df_tk_skip_ws
                             	; No error in parsing this command
f920 : 18               [ 2] 	clc
f921 :                       df_tk_asm_parse_command_err
f921 : 60               [ 6] 	rts
f922 :                       df_tk_asm_mnemonic
                             	; for all nmemonics, work out the addressing mod
f922 : 2093f9           [ 6] 	jsr df_tk_asm_addr_mode
f925 : b0fa             [ 3] 	bcs df_tk_asm_parse_command_err
f927 : 60               [ 6] 	rts
f928 :                       df_tk_asm_parse_command_symbol
                             	; No mask
f928 : a900             [ 2] 	lda #0
f92a : 4c4dd8           [ 3] 	jmp df_tk_var
                             
                             
                             ;****************************************
                             ;* df_tk_asm_matchtok
                             ;* Try and find a token match against the table d
                             ;* Input:
                             ;*			Current df_linbuff and df_linoff
                             ;* Return: 	CC = No Error, CS = Error
                             ;*			df_linoff points to next char if CC else unc
                             ;****************************************
f92d :                       df_tk_asm_matchtok
                             	; Start at token symbols beginning
f92d : a916             [ 2] 	lda #lo(df_asm_tokensyms)
f92f : 8581             [ 3] 	sta df_symtab
f931 : a9fd             [ 2] 	lda #hi(df_asm_tokensyms)
f933 : 8582             [ 3] 	sta df_symtab+1
f935 : a900             [ 2] 	lda #0
f937 : 8583             [ 3] 	sta df_symoff
f939 : a200             [ 2] 	ldx #0
f93b :                       df_tk_asm_checknexttok
                             	; From the line buffer current pointer
                             	; Check for a token match
f93b : a47c             [ 3] 	ldy df_linoff
f93d :                       df_tk_asm_checktokch
                             	; Get symtable char
f93d : a181             [ 6] 	lda (df_symtab,x)
                             	; if less than ascii ' ' then reached end of
                             	; this symbol and everything matched so found!
f93f : c920             [ 2] 	cmp #' '
f941 : 9033             [ 3] 	bcc df_tk_asm_symfound
                             	; Else compare with current line buffer char
f943 : d90004           [ 4] 	cmp df_linbuff,y
                             	; If chars not match then this symbol fails
f946 : d00a             [ 3] 	bne df_tk_asm_symnomatch
                             	; else more chars to match
                             	; so increment line buffer pointers
                             	_incZPWord df_symtab
                             
f94e : c8               [ 2] 	iny
f94f : 4c3df9           [ 3] 	jmp df_tk_asm_checktokch
f952 :                       df_tk_asm_symnomatch
AS65 Assembler for R6502 [1.42].                                     Page  270
-------------------------------- bank\bank0.s --------------------------------

                             	; Increment symbol counter to next symbol
f952 : e683             [ 5] 	inc df_symoff
f954 :                       df_tk_asm_symnextentry
f954 : a181             [ 6] 	lda (df_symtab,x)
                             	; End of symbol is < ' '
f956 : c920             [ 2] 	cmp #' '
f958 : 9009             [ 3] 	bcc  df_tk_asm_foundsymend
                             	_incZPWord df_symtab
                             
f960 : 4c54f9           [ 3] 	jmp df_tk_asm_symnextentry
f963 :                       df_tk_asm_foundsymend
                             	; Now at the offset to jump over addressing
                             	; mode and opcode values. Add offset to ptr
                             	; remember than C is clear and A has offset
                             	; set C so always jump over the offset
f963 : 38               [ 2] 	sec
f964 : 6581             [ 3] 	adc df_symtab
f966 : 8581             [ 3] 	sta df_symtab
f968 : a582             [ 3] 	lda df_symtab+1
f96a : 6900             [ 2] 	adc #0
f96c : 8582             [ 3] 	sta df_symtab+1
                             	; If next char is not zero then
                             	; try and match with line buffer
f96e : a181             [ 6] 	lda (df_symtab,x)
f970 : d0c9             [ 3] 	bne df_tk_asm_checknexttok
                             	; else symbol table exhausted
                             	; so no match found
                             	; Zero symbol counter
f972 : 8583             [ 3] 	sta df_symoff		; Relies on A=0
                             	; Set C to indicate error (no match)
f974 : 38               [ 2] 	sec
f975 : 60               [ 6] 	rts
f976 :                       df_tk_asm_symfound
                             	; Full match with keyword in symtable but
                             	; check the next buffer char is not alphanum
                             	; as this could be part of a symbol
                             	; Point to next buffer char in any case
                             	; y already points to char after keyword
f976 : b90004           [ 4] 	lda df_linbuff,y
                             	; if it is an alphanum then
f979 : 2067d7           [ 6] 	jsr df_tk_isalphanum
                             	; do not count as a match
f97c : b0d4             [ 3] 	bcs df_tk_asm_symnomatch
                             	; Save line buffer pointer (points to next char)
                             	; Clear C to indicate success (match)
f97e : 847c             [ 3] 	sty df_linoff
f980 : a583             [ 3] 	lda df_symoff
                             	; df_symtab points to the offset
f982 :                       df_tk_asm_addr_mode_ok
f982 : 18               [ 2] 	clc
f983 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* df_tk_asm_exec_parser
                             ;* Execute parse routine for this statement
                             ;* Input: a is the token found
                             ;* Return: CC = Parsed ok, CS = Error
                             ;****************************************
f984 :                       df_tk_asm_exec_parser
f984 : 0a               [ 2] 	asl a
f985 : aa               [ 2] 	tax
f986 : bd42ff           [ 4] 	lda df_tk_asm_tokenjmp,x
AS65 Assembler for R6502 [1.42].                                     Page  271
-------------------------------- bank\bank0.s --------------------------------

f989 : 85a1             [ 3] 	sta df_tmpptra
f98b : bd43ff           [ 4] 	lda df_tk_asm_tokenjmp+1,x
f98e : 85a2             [ 3] 	sta df_tmpptra+1
f990 : 6ca100           [ 6] 	jmp (df_tmpptra)
                             
                             
                             ;****************************************
                             ;* df_tk_asm_addr_mode
                             ;* Tokenise the addressing mode
                             ;* Input: a is the token found
                             ;* Return: CC = Parsed ok, CS = Error
                             ;****************************************
f993 :                       df_tk_asm_addr_mode
f993 : 2073d7           [ 6] 	jsr df_tk_skip_ws		;Skip whitespace
f996 : c900             [ 2] 	cmp #0					;End of line?
f998 : f0e8             [ 3] 	beq df_tk_asm_addr_mode_ok
f99a : c93a             [ 2] 	cmp #':'				;End of statement?
f99c : f0e4             [ 3] 	beq df_tk_asm_addr_mode_ok
f99e : a923             [ 2] 	lda #'#'				; Check for immediate
f9a0 : 2097d7           [ 6] 	jsr df_tk_expect_tok
f9a3 : b003             [ 3] 	bcs df_tk_asm_addr_mode_1
f9a5 : 4cc8f9           [ 3] 	jmp df_tk_imm		; Process immediate
f9a8 :                       df_tk_asm_addr_mode_1
f9a8 : a928             [ 2] 	lda #'('				; One of indirect modes?
f9aa : 2097d7           [ 6] 	jsr df_tk_expect_tok
f9ad : b003             [ 3] 	bcs df_tk_asm_addr_mode_2
f9af : 4ccbf9           [ 3] 	jmp df_tk_indirect
f9b2 :                       df_tk_asm_addr_mode_2
                             	; here just a regular address
                             	; Just one expression expected
f9b2 : 2094d9           [ 6] 	jsr df_tk_expression
                             	; Is there a comma after the expression
f9b5 : a92c             [ 2] 	lda #','
f9b7 : 2097d7           [ 6] 	jsr df_tk_expect_tok
f9ba : b0c6             [ 3] 	bcs df_tk_asm_addr_mode_ok
                             	; must be x or y
f9bc : a978             [ 2] 	lda #'x'
f9be : 2097d7           [ 6] 	jsr df_tk_expect_tok
f9c1 : 90bf             [ 3] 	bcc df_tk_asm_addr_mode_ok
                             	; got to here, must be y
f9c3 : a979             [ 2] 	lda #'y'
f9c5 : 4ca2d7           [ 3] 	jmp df_tk_expect_tok_err
                             	
                             	
                             ;* Tokenise immediate addressing mode	
f9c8 :                       df_tk_imm
                             	; Just one expression expected
f9c8 : 4c94d9           [ 3] 	jmp df_tk_expression
                             	
                             ;* Tokenise indirect
f9cb :                       df_tk_indirect
                             	; Just one expression expected
f9cb : 2094d9           [ 6] 	jsr df_tk_expression
                             	; Is there a comma after the expression
f9ce : a92c             [ 2] 	lda #','
f9d0 : 2097d7           [ 6] 	jsr df_tk_expect_tok
                             	; if not then might be indirect Y
f9d3 : b00a             [ 3] 	bcs df_tk_indirect_y
                             	; Else must have be indirect "x)"
f9d5 : a978             [ 2] 	lda #'x'
f9d7 : 20a2d7           [ 6] 	jsr df_tk_expect_tok_err
f9da : a929             [ 2] 	lda #')'
AS65 Assembler for R6502 [1.42].                                     Page  272
-------------------------------- bank\bank0.s --------------------------------

f9dc : 4ca2d7           [ 3] 	jmp df_tk_expect_tok_err
                             	
f9df :                       df_tk_indirect_y
                             	; Definitely has a close bracket
f9df : a929             [ 2] 	lda #')'
f9e1 : 20a2d7           [ 6] 	jsr df_tk_expect_tok_err
                             	; Is there a comma after the expression
f9e4 : a92c             [ 2] 	lda #','
f9e6 : 2097d7           [ 6] 	jsr df_tk_expect_tok
f9e9 : b005             [ 3] 	bcs df_tk_indirect_done
                             	; if comma then must be indirect y
f9eb : a979             [ 2] 	lda #'y'
f9ed : 4ca2d7           [ 3] 	jmp df_tk_expect_tok_err
                             
f9f0 :                       df_tk_indirect_done
f9f0 : 18               [ 2] 	clc
f9f1 : 60               [ 6] 	rts
                             	
                             
                             	
                             
                             
                             ;************************************************
                             ;*           TOKENISATION SUBROUTINES
                             ;************************************************
                             
                             
                             ;* HANDLE DIRECTIVES
                             
                             ;* All tokenisation is part of regular toksub rou
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
f9f2 :                       mod_sz_tkasm_e
                             
                             
                             	include "dflat/rtasm.s"
AS65 Assembler for R6502 [1.42].                                     Page  273
-------------------------------- bank\bank0.s --------------------------------

                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  RTASM.S
                             ;*  Module that implements the runtime execution 
                             ;*  assembler.
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code  
                             
f9f2 :                       mod_sz_rtasm_s
                             
f9f2 :                       df_rt_asm_assemble
                             	; check if >=0x80 (directive or mnemonic)
f9f2 : a488             [ 3] 	ldy df_exeoff
f9f4 : b186             [ 5] 	lda (df_currlin),y
f9f6 : 1009             [ 4] 	bpl df_rt_asm_do_label
f9f8 : 2005fa           [ 6] 	jsr df_rt_asm_command
f9fb : 20fafb           [ 6] 	jsr df_rt_asm_printCR
f9fe : 4c04fa           [ 3] 	jmp df_rt_asm_assemble_done
fa01 :                       df_rt_asm_do_label
fa01 : 2029fa           [ 6] 	jsr df_rt_asm_label
fa04 :                       df_rt_asm_assemble_done
                             	; any clean up here
fa04 : 60               [ 6] 	rts
                             
                             ; Jump to mnemonic or 
                             ; directive with index in A ignoring MSB
fa05 :                       df_rt_asm_command
fa05 : 297f             [ 2] 	and #0x7f
fa07 : 48               [ 3] 	pha
fa08 : aa               [ 2] 	tax
                             	; Point to Xth symtable entry of addr modes and 
fa09 : 20c8fc           [ 6] 	jsr df_rt_asm_skip_to_sym
                             
                             	; Get first addressing mode (ignoring offset byt
fa0c : a001             [ 2] 	ldy #1
fa0e : b181             [ 5] 	lda (df_symtab),y
                             	; is it a directive?
fa10 : c910             [ 2] 	cmp #AM_DIR
                             	; if directive
fa12 : f003             [ 3] 	beq df_rt_asm_dir
                             	; Else must be a normal mnemonic
fa14 : 4ceefa           [ 3] 	jmp df_rt_asm_mnem
                             
                             ; Jump to the appropriate directive
fa17 :                       df_rt_asm_dir
                             	; Get the index and *2
                             	; to get jump vector
fa17 : 68               [ 4] 	pla
fa18 : 0a               [ 2] 	asl a
fa19 : aa               [ 2] 	tax
                             	; jump over directive code
fa1a : e688             [ 5] 	inc df_exeoff
                             	; jump to directive handler
AS65 Assembler for R6502 [1.42].                                     Page  274
-------------------------------- bank\bank0.s --------------------------------

fa1c : bd4cff           [ 4] 	lda df_rt_asm_tokenjmp,x
fa1f : 85a1             [ 3] 	sta df_tmpptra
fa21 : bd4dff           [ 4] 	lda df_rt_asm_tokenjmp+1,x
fa24 : 85a2             [ 3] 	sta df_tmpptra+1
fa26 : 6ca100           [ 6] 	jmp (df_tmpptra)
                             
                             ; Process label
                             ; Set the label to the PC
fa29 :                       df_rt_asm_label
                             	; Get the address of the variable in A,X
fa29 : 2018ed           [ 6] 	jsr df_rt_generate_lvar
fa2c : 869e             [ 3] 	stx df_asmoprnd
fa2e : 859f             [ 3] 	sta df_asmoprnd+1
                             	; Assign to value of PC
fa30 : a000             [ 2] 	ldy #0
fa32 : a599             [ 3] 	lda df_asmpc
fa34 : 919e             [ 5] 	sta (df_asmoprnd),y
fa36 : a59a             [ 3] 	lda df_asmpc+1
fa38 : c8               [ 2] 	iny
fa39 : 919e             [ 5] 	sta (df_asmoprnd),y
fa3b : 60               [ 6] 	rts	
                             
                             ;* Set the code origin
fa3c :                       df_rt_asm_org
                             	; Get the address from expression
fa3c : 20a5fc           [ 6] 	jsr df_rt_asm_get_operand
                             	; Put this in to PC
fa3f : a59e             [ 3] 	lda df_asmoprnd
fa41 : 8599             [ 3] 	sta df_asmpc
fa43 : a59f             [ 3] 	lda df_asmoprnd+1
fa45 : 859a             [ 3] 	sta df_asmpc+1
fa47 : a903             [ 2] 	lda #3
fa49 : 85a0             [ 3] 	sta df_asmlen
fa4b : 4cbcfb           [ 3] 	jmp df_rt_asm_printPC
                             
                             ; Set the assembly option
                             ; Bit 0 set = Print code to console
                             ; But 1 set = Write code to memory
                             ; Be sure to run 2 non-write passes
                             ; before a write pass
                             ; First pass may result in ZP used a lot
                             ; Second pass resolves forward refs to ABS
                             ; Final write pass then stores the code
fa4e :                       df_rt_asm_opt
                             	; Get the value from expression
fa4e : 20a5fc           [ 6] 	jsr df_rt_asm_get_operand
                             	; Put this in to OPT
fa51 : a59e             [ 3] 	lda df_asmoprnd
fa53 : 859b             [ 3] 	sta df_asmopt
fa55 : 60               [ 6] 	rts
                             
                             ; dw and db handled here
                             ; keep going through comma separated
                             ; list and write bytes or words
                             ; string expansion also handled
fa56 :                       df_rt_asm_db
fa56 : a902             [ 2] 	lda #2
fa58 : 2c                    	db	0x2c			; BIT abs to ignore next 2 bytes
fa59 :                       df_rt_asm_dw
fa59 : a903             [ 2] 	lda #3
fa5b :                       df_rt_asm_db_start
fa5b : 85a0             [ 3] 	sta df_asmlen
AS65 Assembler for R6502 [1.42].                                     Page  275
-------------------------------- bank\bank0.s --------------------------------

fa5d : 20bcfb           [ 6] 	jsr df_rt_asm_printPC
fa60 : 20d7fb           [ 6] 	jsr df_rt_asm_printSPC
fa63 :                       df_rt_asm_data
fa63 : 20e9e0           [ 6] 	jsr df_rt_neval		; Evaluate expression
fa66 : 20fcf6           [ 6] 	jsr df_ost_peekType	; What is the type
fa69 : a8               [ 2] 	tay
fa6a : 300d             [ 3] 	bmi df_rt_asm_string; If string
fa6c : 2002f7           [ 6] 	jsr df_ost_popInt	; else get number in A,X
fa6f : 869e             [ 3] 	stx df_asmoprnd		; store low value
fa71 : 859f             [ 3] 	sta df_asmoprnd+1	; store high value
fa73 : 20a1fa           [ 6] 	jsr df_rt_asm_data_write
fa76 : 4c96fa           [ 3] 	jmp df_rt_asm_data_next
fa79 :                       df_rt_asm_string
fa79 : 200af7           [ 6] 	jsr df_ost_popPtr	; pop string pointer
fa7c : 86a1             [ 3] 	stx df_tmpptra		; save pointer to tmpa
fa7e : 85a2             [ 3] 	sta df_tmpptra+1
fa80 :                       df_rt_asm_string_ch
fa80 : a000             [ 2] 	ldy #0
fa82 : b1a1             [ 5] 	lda (df_tmpptra),y	; Get string char, 0=done
fa84 : f010             [ 3] 	beq df_rt_asm_data_next
fa86 : 859e             [ 3] 	sta df_asmoprnd		; Save as operand
fa88 : 849f             [ 3] 	sty df_asmoprnd+1	; High is always zero
fa8a : 20a1fa           [ 6] 	jsr df_rt_asm_data_write
                             	_incZPWord df_tmpptra
                             
fa93 : 4c80fa           [ 3] 	jmp df_rt_asm_string_ch
fa96 :                       df_rt_asm_data_next
fa96 : 204eed           [ 6] 	jsr df_rt_eos		; End?
fa99 : b005             [ 3] 	bcs df_rt_asm_data_done
fa9b : e688             [ 5] 	inc df_exeoff		; Jump over ','
fa9d : 4c63fa           [ 3] 	jmp df_rt_asm_data
faa0 :                       df_rt_asm_data_done
faa0 : 60               [ 6] 	rts	
                             
                             ; Write one db or dw value
                             ; Check for value too big for db
                             ; Advance PC by df_asmlen
faa1 :                       df_rt_asm_data_write
faa1 : 20e0fb           [ 6] 	jsr df_rt_asm_printOPR
faa4 :                       df_rt_asm_data_write_skip1
faa4 : a902             [ 2] 	lda #2
faa6 : 259b             [ 3] 	and df_asmopt
faa8 : f017             [ 3] 	beq df_rt_asm_data_write_skip2
faaa : a59e             [ 3] 	lda df_asmoprnd
faac : a000             [ 2] 	ldy #0
faae : 9199             [ 5] 	sta (df_asmpc),y
fab0 : c8               [ 2] 	iny
fab1 : a902             [ 2] 	lda #2
fab3 : c5a0             [ 3] 	cmp df_asmlen
fab5 : d006             [ 3] 	bne df_rt_asm_data_write_hi
fab7 : a59f             [ 3] 	lda df_asmoprnd+1
fab9 : d014             [ 3] 	bne df_rt_asm_data_write_err
fabb : f004             [ 3] 	beq df_rt_asm_data_write_skip2
fabd :                       df_rt_asm_data_write_hi
fabd : a59f             [ 3] 	lda df_asmoprnd+1
fabf : 9199             [ 5] 	sta (df_asmpc),y
fac1 :                       df_rt_asm_data_write_skip2
fac1 : a4a0             [ 3] 	ldy df_asmlen
fac3 : 88               [ 2] 	dey					; Add 1 less!
fac4 : 98               [ 2] 	tya
fac5 : 18               [ 2] 	clc
fac6 : 6599             [ 3] 	adc df_asmpc
AS65 Assembler for R6502 [1.42].                                     Page  276
-------------------------------- bank\bank0.s --------------------------------

fac8 : 8599             [ 3] 	sta df_asmpc
                             	_bcc 2
                             
facc : e69a             [ 5] 	inc df_asmpc+1
face : 60               [ 6] 	rts
facf :                       df_rt_asm_data_write_err	
                             	SWBRK DFERR_QUANTITY
                             
                             	
                             	
fad1 :                       df_rt_asm_ds
fad1 : 20bcfb           [ 6] 	jsr df_rt_asm_printPC
fad4 : 20d7fb           [ 6] 	jsr df_rt_asm_printSPC
                             	; Get the address from expression
fad7 : 20a5fc           [ 6] 	jsr df_rt_asm_get_operand
                             	; ADD this in to PC
fada : 18               [ 2] 	clc
fadb : a59e             [ 3] 	lda df_asmoprnd
fadd : 6599             [ 3] 	adc df_asmpc
fadf : 8599             [ 3] 	sta df_asmpc
fae1 : a59f             [ 3] 	lda df_asmoprnd+1
fae3 : 659a             [ 3] 	adc df_asmpc+1
fae5 : 859a             [ 3] 	sta df_asmpc+1
                             	; len=1 for printing
fae7 : a903             [ 2] 	lda #3
fae9 : 85a0             [ 3] 	sta df_asmlen
faeb : 4ce0fb           [ 3] 	jmp df_rt_asm_printOPR
                             
                             
                             ; Process a normal assembler mnemonic
faee :                       df_rt_asm_mnem
faee : 68               [ 4] 	pla				; Throw away previous temp variable
                             	; jump over mnemonic code
faef : e688             [ 5] 	inc df_exeoff
                             	; work out the addressing mode and get operand
faf1 : 2028fc           [ 6] 	jsr df_rt_asm_addrmode
                             
faf4 :                       df_rt_asm_mnem_try
faf4 : a59c             [ 3] 	lda df_asmadmd					; With the addressing mode
faf6 : 20b0fc           [ 6] 	jsr df_rt_asm_find_addr_mode	; Find it for this 
faf9 : c900             [ 2] 	cmp #AM_NONE					; Exists?
fafb : d014             [ 4] 	bne	df_rt_asm_mnem_chk			; If does then check it
fafd :                       df_rt_asm_check_alt
fafd : a69c             [ 3] 	ldx df_asmadmd					; Use ad mode as an index
faff : bd05fd           [ 4] 	lda df_asm_altaddrmode,x		; Else get alternate
fb02 : c900             [ 2] 	cmp #AM_NONE					; Is there an alternate?
fb04 : f02d             [ 3] 	beq df_rt_asm_mnem_err			; If no then error
fb06 : 20b0fc           [ 6] 	jsr df_rt_asm_find_addr_mode	; Check does mode e
fb09 : c900             [ 2] 	cmp #AM_NONE					; this instruction
fb0b : f026             [ 3] 	beq df_rt_asm_mnem_err			; if no then error
fb0d : c59c             [ 3] 	cmp df_asmadmd					; Same as the original?
fb0f : f00e             [ 3] 	beq df_rt_asm_mnem_done			; if so then done
fb11 :                       df_rt_asm_mnem_chk
fb11 : 859c             [ 3] 	sta df_asmadmd					; This is the final mode
fb13 : aa               [ 2] 	tax								; Get the length
fb14 : bdf4fc           [ 4] 	lda df_asm_length,x
fb17 : a69f             [ 3] 	ldx df_asmoprnd+1				; Is operand hi non-zero?
fb19 : f004             [ 3] 	beq df_rt_asm_mnem_done			; If zero then done
fb1b : c903             [ 2] 	cmp #3							; Else must be len 3?
fb1d : d0de             [ 4] 	bne df_rt_asm_check_alt			; Try an alternate
fb1f :                       df_rt_asm_mnem_done
fb1f : a69c             [ 3] 	ldx df_asmadmd					; Get the final mode index
AS65 Assembler for R6502 [1.42].                                     Page  277
-------------------------------- bank\bank0.s --------------------------------

fb21 : bdf4fc           [ 4] 	lda df_asm_length,x				; Get the length
fb24 : 85a0             [ 3] 	sta df_asmlen
fb26 : a59c             [ 3] 	lda df_asmadmd					; Get the final mode
fb28 : 20b0fc           [ 6] 	jsr df_rt_asm_find_addr_mode	; Get the Y index o
                             	; Ok now get the opcode
fb2b : c8               [ 2] 	iny
fb2c : b181             [ 5] 	lda (df_symtab),y
fb2e : 859d             [ 3] 	sta df_asmopcde
                             	; Now have all information to assemble
fb30 : 4c35fb           [ 3] 	jmp df_rt_asm_encode
                             	
fb33 :                       df_rt_asm_mnem_err
                             	SWBRK DFERR_SYNTAX
                             
                             	
                             ; Take assembler data and encode it
                             ; depending on the current option
                             ; Option 0 = No write
                             ; Option 1 = No write, Print
                             ; Option 2 = Write
                             ; Option 3 = Write, Print
fb35 :                       df_rt_asm_encode
                             	; If relative then need to calculate offset
fb35 : a59c             [ 3] 	lda df_asmadmd
fb37 : c90f             [ 2] 	cmp #AM_REL
fb39 : d033             [ 3] 	bne df_rt_asm_encode_skiprel
                             	; If high byte is 0 then do nothing
fb3b : a59f             [ 3] 	lda df_asmoprnd+1
fb3d : f02f             [ 3] 	beq df_rt_asm_encode_skiprel
                             	; else calculate distance from PC
                             	; first take 2 off operand
fb3f : 38               [ 2] 	sec
fb40 : a59e             [ 3] 	lda df_asmoprnd
fb42 : e902             [ 2] 	sbc #2
fb44 : 859e             [ 3] 	sta df_asmoprnd
fb46 : a59f             [ 3] 	lda df_asmoprnd+1
fb48 : e900             [ 2] 	sbc #0
fb4a : 859f             [ 3] 	sta df_asmoprnd+1
                             	; now calculate current operand-PC
fb4c : 38               [ 2] 	sec
fb4d : a59e             [ 3] 	lda df_asmoprnd
fb4f : e599             [ 3] 	sbc df_asmpc
fb51 : 859e             [ 3] 	sta df_asmoprnd
fb53 : a59f             [ 3] 	lda df_asmoprnd+1
fb55 : e59a             [ 3] 	sbc df_asmpc+1
                             	; put 0 in high operand storage
                             	; but A contains result of subtraction
                             	; so check that for out of range
fb57 : a000             [ 2] 	ldy #0
fb59 : 849f             [ 3] 	sty df_asmoprnd+1
                             	; detect too far; high byte is either 0 or 255
                             	; else it's an error
fb5b : a8               [ 2] 	tay
fb5c : f00a             [ 3] 	beq df_rt_asm_encode_relpos
fb5e : c9ff             [ 2] 	cmp #0xff
fb60 : d00a             [ 3] 	bne df_rt_asm_encode_relfar
                             	; if high is ff then low must be same -ve
fb62 : a59e             [ 3] 	lda df_asmoprnd
fb64 : 3008             [ 3] 	bmi df_rt_asm_encode_skiprel
                             	; else error
fb66 : 1004             [ 3] 	bpl df_rt_asm_encode_relfar
fb68 :                       df_rt_asm_encode_relpos
AS65 Assembler for R6502 [1.42].                                     Page  278
-------------------------------- bank\bank0.s --------------------------------

                             	; if high is 00 then low must be same +ve
fb68 : a59e             [ 3] 	lda df_asmoprnd
fb6a : 1002             [ 3] 	bpl df_rt_asm_encode_skiprel
                             	; else error
fb6c :                       df_rt_asm_encode_relfar
                             	; set to non-zero value, dec because it is zero 
fb6c : c69f             [ 5] 	dec df_asmoprnd+1
fb6e :                       df_rt_asm_encode_skiprel
                             	; Only write the code if bit 1=1
fb6e : a902             [ 2] 	lda #0x02
fb70 : 259b             [ 3] 	and df_asmopt
fb72 : f028             [ 3] 	beq df_rt_asm_encode_print
fb74 : a000             [ 2] 	ldy #0
fb76 : a59d             [ 3] 	lda df_asmopcde
fb78 : 9199             [ 5] 	sta (df_asmpc),y
fb7a : a5a0             [ 3] 	lda df_asmlen
fb7c : c901             [ 2] 	cmp #1						; No operand
fb7e : f01c             [ 3] 	beq df_rt_asm_encode_print
fb80 : c903             [ 2] 	cmp #3						; Word operand
fb82 : f00e             [ 3] 	beq df_rt_asm_encode_writeword
                             	; byte operand, high byte must be zero
fb84 : a59f             [ 3] 	lda df_asmoprnd+1
fb86 : f002             [ 3] 	beq df_rt_asm_encode_writebyte
                             	SWBRK DFERR_QUANTITY
                             
fb8a :                       df_rt_asm_encode_writebyte
fb8a : c8               [ 2] 	iny 
fb8b : a59e             [ 3] 	lda df_asmoprnd
fb8d : 9199             [ 5] 	sta (df_asmpc),y
fb8f : 4c9cfb           [ 3] 	jmp df_rt_asm_encode_print
fb92 :                       df_rt_asm_encode_writeword
fb92 : c8               [ 2] 	iny 
fb93 : a59e             [ 3] 	lda df_asmoprnd
fb95 : 9199             [ 5] 	sta (df_asmpc),y
fb97 : c8               [ 2] 	iny 
fb98 : a59f             [ 3] 	lda df_asmoprnd+1
fb9a : 9199             [ 5] 	sta (df_asmpc),y	
fb9c :                       df_rt_asm_encode_print
fb9c : 20acfb           [ 6] 	jsr df_rt_asm_print_mmen
                             	; advance pc
fb9f : 18               [ 2] 	clc
fba0 : a599             [ 3] 	lda df_asmpc
fba2 : 65a0             [ 3] 	adc df_asmlen
fba4 : 8599             [ 3] 	sta df_asmpc
                             	_bcc 2
                             
fba8 : e69a             [ 5] 	inc df_asmpc+1
fbaa : 18               [ 2] 	clc
fbab : 60               [ 6] 	rts
                             
                             
                             ; Print the full 1,2,3 byte instruction
                             ; depends on df_asmopt
fbac :                       df_rt_asm_print_mmen
fbac : 20bcfb           [ 6] 	jsr df_rt_asm_printPC
fbaf : 20d7fb           [ 6] 	jsr df_rt_asm_printSPC
fbb2 : 20ccfb           [ 6] 	jsr df_rt_asm_printOPC
fbb5 : 20d7fb           [ 6] 	jsr df_rt_asm_printSPC
fbb8 : 20e0fb           [ 6] 	jsr df_rt_asm_printOPR
fbbb :                       df_rt_asm_print_rts			; Hopefully subs can get he
fbbb : 60               [ 6] 	rts
                             
AS65 Assembler for R6502 [1.42].                                     Page  279
-------------------------------- bank\bank0.s --------------------------------

fbbc :                       df_rt_asm_printPC
                             	; Check the option bit 0 (Print)
fbbc : a901             [ 2] 	lda #0x01
fbbe : 259b             [ 3] 	and df_asmopt
fbc0 : f0f9             [ 3] 	beq df_rt_asm_print_rts
                             	; Print current PC
fbc2 : a59a             [ 3] 	lda df_asmpc+1
fbc4 : 206dc1           [ 6] 	jsr utilPrintA
fbc7 : a599             [ 3] 	lda df_asmpc
fbc9 : 4c6dc1           [ 3] 	jmp utilPrintA
                             
fbcc :                       df_rt_asm_printOPC
                             	; Check the option bit 0 (Print)
fbcc : a901             [ 2] 	lda #0x01
fbce : 259b             [ 3] 	and df_asmopt
fbd0 : f0e9             [ 3] 	beq df_rt_asm_print_rts
fbd2 : a59d             [ 3] 	lda df_asmopcde
fbd4 : 4c6dc1           [ 3] 	jmp utilPrintA
                             
fbd7 :                       df_rt_asm_printSPC
                             	; Check the option bit 0 (Print)
fbd7 : a901             [ 2] 	lda #0x01
fbd9 : 259b             [ 3] 	and df_asmopt
fbdb : f0de             [ 3] 	beq df_rt_asm_print_rts
fbdd : 4c5dc1           [ 3] 	jmp utilPrintSPC
                             	
fbe0 :                       df_rt_asm_printOPR
                             	; Check the option bit 0 (Print)
fbe0 : a901             [ 2] 	lda #0x01
fbe2 : 259b             [ 3] 	and df_asmopt
fbe4 : f0d5             [ 3] 	beq df_rt_asm_print_rts	
fbe6 : a5a0             [ 3] 	lda df_asmlen				; check how may operand bytes
fbe8 : c901             [ 2] 	cmp #1						; if only opcode, done
fbea : f0cf             [ 3] 	beq df_rt_asm_print_rts	
fbec : c902             [ 2] 	cmp #2
fbee : f005             [ 3] 	beq df_rt_asm_printOPR_1	; if only 2 do low byte
fbf0 : a59f             [ 3] 	lda df_asmoprnd+1
fbf2 : 206dc1           [ 6] 	jsr utilPrintA
fbf5 :                       df_rt_asm_printOPR_1
fbf5 : a59e             [ 3] 	lda df_asmoprnd
fbf7 : 4c6dc1           [ 3] 	jmp utilPrintA
                             
fbfa :                       df_rt_asm_printCR
                             	; Check the option bit 0 (Print)
fbfa : a901             [ 2] 	lda #0x01
fbfc : 259b             [ 3] 	and df_asmopt
fbfe : f0bb             [ 3] 	beq df_rt_asm_print_rts
fc00 : 4c65c1           [ 3] 	jmp utilPrintCRLF
                             
fc03 :                       df_rt_asm_printCH
fc03 : 8538             [ 3] 	sta tmp_d
                             	; Check the option bit 0 (Print)
fc05 : a901             [ 2] 	lda #0x01
fc07 : 259b             [ 3] 	and df_asmopt
fc09 : f0b0             [ 4] 	beq df_rt_asm_print_rts
fc0b : a538             [ 3] 	lda tmp_d
fc0d : 4c27c4           [ 3] 	jmp io_put_ch
                             
                             ; Print an entire line, but save df_exeoff
fc10 :                       df_rt_asm_printline
                             	; Check the option bit 0 (Print)
fc10 : a901             [ 2] 	lda #0x01
AS65 Assembler for R6502 [1.42].                                     Page  280
-------------------------------- bank\bank0.s --------------------------------

fc12 : 259b             [ 3] 	and df_asmopt
fc14 : f0a5             [ 4] 	beq df_rt_asm_print_rts
fc16 : a588             [ 3] 	lda df_exeoff
fc18 : 48               [ 3] 	pha
                             	; use df_tmpptra
                             	_cpyZPWord df_currlin, df_tmpptra
                             
fc21 : 20bbee           [ 6] 	jsr df_rt_list_line_only
fc24 : 68               [ 4] 	pla
fc25 : 8588             [ 3] 	sta df_exeoff
fc27 : 60               [ 6] 	rts
                             
                             
                             ; Calculate the addressing mode
                             ; Populate the operand as needed
                             ; A and df_asmadmd contain Addressing Mode
fc28 :                       df_rt_asm_addrmode	
                             	; Store nothing in address mode
fc28 : a900             [ 2] 	lda #AM_NONE
fc2a : 859c             [ 3] 	sta df_asmadmd
                             	; zero out the operand
fc2c : a900             [ 2] 	lda #0
fc2e : 859e             [ 3] 	sta df_asmoprnd
fc30 : 859f             [ 3] 	sta df_asmoprnd+1
fc32 : 204eed           [ 6] 	jsr df_rt_eos			; End of statement?
fc35 : b00d             [ 3] 	bcs df_rt_asm_AM_IMP
                             	; jump over whitespace
fc37 : 201de5           [ 6] 	jsr df_rt_skip_ws
                             	; Check what it is
fc3a : c923             [ 2] 	cmp #'#'				; Immediate?
fc3c : f034             [ 3] 	beq df_rt_asm_AM_IMM
fc3e : c928             [ 2] 	cmp #'('				; Indirect something?
fc40 : f03a             [ 3] 	beq df_rt_asm_AM_INDIRECT
                             	; Must be ABS,ZP or REL
fc42 : d005             [ 3] 	bne df_rt_asm_ABSREL
                             ; Process IMP/ACC
fc44 :                       df_rt_asm_AM_IMP
fc44 : a90d             [ 2] 	lda #AM_IMP
fc46 : 859c             [ 3] 	sta df_asmadmd
fc48 : 60               [ 6] 	rts
                             ; Process ABS or REL
fc49 :                       df_rt_asm_ABSREL	
                             	; Evaluate operand
fc49 : 20a5fc           [ 6] 	jsr df_rt_asm_get_operand
                             
fc4c : 204eed           [ 6] 	jsr df_rt_eos			; End of statement?
fc4f : b00f             [ 3] 	bcs df_rt_asm_AM_ABS
fc51 : c8               [ 2] 	iny						; Jump over ","
fc52 : b186             [ 5] 	lda (df_currlin),y		; Load X or Y
fc54 : c8               [ 2] 	iny						; Jump over index reg
fc55 : 8588             [ 3] 	sta df_exeoff			; Save exe offset
fc57 : c978             [ 2] 	cmp #'x'				; Indirect X?
fc59 : f012             [ 3] 	beq df_rt_asm_AM_ABSX
                             ; Process ABSY
fc5b :                       df_rt_asm_AM_ABSY
fc5b : a906             [ 2] 	lda #AM_ZPY				; Go for smallest modes
fc5d : 859c             [ 3] 	sta df_asmadmd
fc5f : 60               [ 6] 	rts
                             ; Process what looks like pure ABS, could be REL
fc60 :                       df_rt_asm_AM_ABS
fc60 : a001             [ 2] 	ldy #1					; Check first addressing mode
fc62 : b181             [ 5] 	lda (df_symtab),y
AS65 Assembler for R6502 [1.42].                                     Page  281
-------------------------------- bank\bank0.s --------------------------------

fc64 : c90f             [ 2] 	cmp #AM_REL
fc66 : f002             [ 3] 	beq df_rt_asm_AM_REL
fc68 : a904             [ 2] 	lda #AM_ZP				; Go for smallest modes
fc6a :                       df_rt_asm_AM_REL
fc6a : 859c             [ 3] 	sta df_asmadmd
fc6c : 60               [ 6] 	rts
                             ; Process ABSX
fc6d :                       df_rt_asm_AM_ABSX
fc6d : a905             [ 2] 	lda #AM_ZPX				; Go for smallest modes
fc6f : 859c             [ 3] 	sta df_asmadmd
fc71 : 60               [ 6] 	rts
                             ; Process Immediate
fc72 :                       df_rt_asm_AM_IMM
                             	; skip over #
fc72 : e688             [ 5] 	inc df_exeoff
                             	; Get operand
fc74 : 20a5fc           [ 6] 	jsr df_rt_asm_get_operand
                             	; Mark as immediate
fc77 : a90c             [ 2] 	lda #AM_IMM
fc79 : 859c             [ 3] 	sta df_asmadmd
fc7b : 60               [ 6] 	rts
                             ; Process indirect
fc7c :                       df_rt_asm_AM_INDIRECT
                             	; skip over (
fc7c : e688             [ 5] 	inc df_exeoff
                             	; Calculate the operand
fc7e : 20a5fc           [ 6] 	jsr df_rt_asm_get_operand
                             	; what is next char?
fc81 : a488             [ 3] 	ldy df_exeoff
fc83 : b186             [ 5] 	lda (df_currlin),y
fc85 : c929             [ 2] 	cmp #')'			; Could be IND or INDY
fc87 : f009             [ 3] 	beq df_rt_asm_AM_ZPINDORY
                             	; else must be INDX
                             	; skip 'x)'
fc89 : c8               [ 2] 	iny
fc8a : c8               [ 2] 	iny
fc8b : 8488             [ 3] 	sty df_exeoff
fc8d : a908             [ 2] 	lda #AM_ZPINDX
fc8f : 859c             [ 3] 	sta df_asmadmd
fc91 : 60               [ 6] 	rts
                             ; Pure indirect mode found
fc92 :                       df_rt_asm_AM_ZPINDORY
fc92 : a907             [ 2] 	lda #AM_ZPIND			; Assume ZPIND
fc94 : c8               [ 2] 	iny
fc95 : 8488             [ 3] 	sty df_exeoff
                             	; if at end of line/statement then pure indirect
fc97 : 204eed           [ 6] 	jsr df_rt_eos			; End of statement?
fc9a : b006             [ 3] 	bcs df_rt_asm_AM_ZPIND
                             	; else must be INDY
fc9c : a909             [ 2] 	lda #AM_ZPINDY
                             	; skip ',Y'
fc9e : c8               [ 2] 	iny
fc9f : c8               [ 2] 	iny
fca0 : 8488             [ 3] 	sty df_exeoff
fca2 :                       df_rt_asm_AM_ZPIND
fca2 : 859c             [ 3] 	sta df_asmadmd
fca4 : 60               [ 6] 	rts
                             
                             ; Get and save the operand
                             ; df_asmoprnd contains the result
fca5 :                       df_rt_asm_get_operand
                             	; evaluate
AS65 Assembler for R6502 [1.42].                                     Page  282
-------------------------------- bank\bank0.s --------------------------------

fca5 : 20e9e0           [ 6] 	jsr df_rt_neval
                             	; Get the parameter from stack
fca8 : 2002f7           [ 6] 	jsr df_ost_popInt
                             	; put in the operand
fcab : 869e             [ 3] 	stx df_asmoprnd
fcad : 859f             [ 3] 	sta df_asmoprnd+1
fcaf : 60               [ 6] 	rts
                             	
                             ; From current symtab entry, find addressing
                             ; mode in A.  AM_NONE=Not found, Y=index
fcb0 :                       df_rt_asm_find_addr_mode
                             	; save A in tmp
fcb0 : 8538             [ 3] 	sta tmp_d
                             	; Start first entry (1) - 2 = 0xff
fcb2 : a0ff             [ 2] 	ldy #0xff
fcb4 : a200             [ 2] 	ldx #0
fcb6 :                       df_rt_asm_find_addr_mode_loop
                             	; next entry
fcb6 : c8               [ 2] 	iny
fcb7 : c8               [ 2] 	iny
                             	; if current index > num entries then error
fcb8 : 98               [ 2] 	tya
fcb9 : 38               [ 2] 	sec
fcba : e181             [ 6] 	sbc (df_symtab,x)
fcbc : b007             [ 3] 	bcs df_rt_asm_find_addr_mode_err
                             	; is symtab addressing mode what we want?
fcbe : b181             [ 5] 	lda (df_symtab),y
fcc0 : c538             [ 3] 	cmp tmp_d
fcc2 : d0f2             [ 3] 	bne df_rt_asm_find_addr_mode_loop
                             	; done A=mode, y=index in to df_symtab
fcc4 : 60               [ 6] 	rts
fcc5 :                       df_rt_asm_find_addr_mode_err
fcc5 : a900             [ 2] 	lda #AM_NONE
fcc7 :                       df_rt_asm_skip_to_sym_done; Used by function belo
fcc7 : 60               [ 6] 	rts
                             
                             
                             ; Skip X amount of symbols in table
                             ; A contains how many addr mode and op code bytes
                             ; df_symtab points to offset byte
fcc8 :                       df_rt_asm_skip_to_sym
fcc8 : e8               [ 2] 	inx				; so done when X=0
                             	; Start at token symbols beginning
fcc9 : a916             [ 2] 	lda #lo(df_asm_tokensyms)
fccb : 8581             [ 3] 	sta df_symtab
fccd : a9fd             [ 2] 	lda #hi(df_asm_tokensyms)
fccf : 8582             [ 3] 	sta df_symtab+1
fcd1 : a900             [ 2] 	lda #0
fcd3 : 8583             [ 3] 	sta df_symoff
fcd5 : a8               [ 2] 	tay
fcd6 :                       df_rt_asm_skip_to_sym_next
                             	; Get symtable char
fcd6 : b181             [ 5] 	lda (df_symtab),y
                             	; if < ' ' then jumped over symbol chars
fcd8 : c920             [ 2] 	cmp #' '
fcda : 9009             [ 3] 	bcc df_rt_asm_skip_to_sym_end
                             	;else next smy tab char
                             	_incZPWord df_symtab
                             
fce2 : 4cd6fc           [ 3] 	jmp df_rt_asm_skip_to_sym_next
                             	; Found end of symbol
fce5 :                       df_rt_asm_skip_to_sym_end
AS65 Assembler for R6502 [1.42].                                     Page  283
-------------------------------- bank\bank0.s --------------------------------

                             	;if done then return
fce5 : ca               [ 2] 	dex
fce6 : f0df             [ 3] 	beq df_rt_asm_skip_to_sym_done
                             	;jump over addr and op code by A bytes
fce8 : 38               [ 2] 	sec
fce9 : 6581             [ 3] 	adc df_symtab
fceb : 8581             [ 3] 	sta df_symtab
                             	_bcc 2
                             
fcef : e682             [ 5] 	inc df_symtab+1
fcf1 : 4cd6fc           [ 3] 	jmp df_rt_asm_skip_to_sym_next
                             
fcf4 :                       mod_sz_rtasm_e
                             
                             
                             	include "dflat/asmsymtab.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  ASMSYMTAB.S
                             ;*	Mainly this contains the symbol table for asse
                             ;*	mnemonics but also meta data like what address
                             ;*	and the length of opcodes.
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code  
                             
                             	;* Length of each addressing mode
                             	;* ORDER significant!
fcf4 :                       df_asm_length
fcf4 : 00030303020202..      	db	0,3,3,3,2,2,2,2,2,2,3,3,2,1,1,2,0
                             
                             	; Always try for lowest addressing mode, but
                             	; this table maps to alternative
fd05 :                       df_asm_altaddrmode
fd05 : 00                    	db AM_NONE		;AM_NONE	= 0
fd06 : 00                    	db AM_NONE		;AM_ABS	 	= 1
fd07 : 00                    	db AM_NONE		;AM_ABSX	= 2
fd08 : 00                    	db AM_NONE		;AM_ABSY	= 3
fd09 : 01                    	db AM_ABS		;AM_ZP		= 4
fd0a : 02                    	db AM_ABSX		;AM_ZPX		= 5
fd0b : 03                    	db AM_ABSY		;AM_ZPY		= 6
fd0c : 0a                    	db AM_ABSIND	;AM_ZPIND	= 7
fd0d : 0b                    	db AM_ABSINDX	;AM_ZPINDX	= 8
fd0e : 09                    	db AM_ZPINDY	;AM_ZPINDY	= 9
fd0f : 00                    	db AM_NONE		;AM_ABSIND	= 10
fd10 : 00                    	db AM_NONE		;AM_ABSINDX	= 11
fd11 : 00                    	db AM_NONE		;AM_IMM		= 12
fd12 : 00                    	db AM_NONE		;AM_ACC		= 13
fd13 : 00                    	db AM_NONE		;AM_IMP		= AM_ACC
fd14 : 0f                    	db AM_REL		;AM_REL		= 15
fd15 : 00                    	db AM_NONE		;AM_DIR		= 16
                             
                             
                             	;*	Mnemonic/	How many addressing modes /
AS65 Assembler for R6502 [1.42].                                     Page  284
-------------------------------- bank\bank0.s --------------------------------

                             	;* 	Mode		Opcode for mode
fd16 :                       df_asm_tokensyms
                             	;* Start with directives
fd16 : 6f726702              	db	"org",		1*2
fd1a : 1000                  	db	AM_DIR,		0x00
fd1c : 6f707402              	db	"opt",		1*2
fd20 : 1000                  	db	AM_DIR,		0x00
fd22 : 646202                	db	"db",		1*2
fd25 : 1000                  	db	AM_DIR,		0x00
fd27 : 647702                	db	"dw",		1*2
fd2a : 1000                  	db	AM_DIR,		0x00
fd2c : 647302                	db	"ds",		1*2
fd2f : 1000                  	db	AM_DIR,		0x00	
                             
fd31 : 61646310              	db	"adc",		8*2
fd35 : 0c69                  	db	AM_IMM,		0x69
fd37 : 0465                  	db	AM_ZP,		0x65
fd39 : 0575                  	db	AM_ZPX,		0x75
fd3b : 016d                  	db	AM_ABS,		0x6d
fd3d : 027d                  	db	AM_ABSX,	0x7d
fd3f : 0379                  	db	AM_ABSY,	0x79
fd41 : 0861                  	db	AM_ZPINDX,	0x61
fd43 : 0971                  	db	AM_ZPINDY,	0x71
                             	
fd45 : 616e6410              	db	"and",		8*2
fd49 : 0c29                  	db	AM_IMM,		0x29
fd4b : 0425                  	db	AM_ZP,		0x25
fd4d : 0535                  	db	AM_ZPX,		0x35
fd4f : 012d                  	db	AM_ABS,		0x2d
fd51 : 023d                  	db	AM_ABSX,	0x3d
fd53 : 0339                  	db	AM_ABSY,	0x39
fd55 : 0821                  	db	AM_ZPINDX,	0x21
fd57 : 0931                  	db	AM_ZPINDY,	0x31
                             
fd59 : 636d7010              	db	"cmp",		8*2
fd5d : 0cc9                  	db	AM_IMM,		0xc9
fd5f : 04c5                  	db	AM_ZP,		0xc5
fd61 : 05d5                  	db	AM_ZPX,		0xd5
fd63 : 01cd                  	db	AM_ABS,		0xcd
fd65 : 02dd                  	db	AM_ABSX,	0xdd
fd67 : 03d9                  	db	AM_ABSY,	0xd9
fd69 : 08c1                  	db	AM_ZPINDX,	0xc1
fd6b : 09d1                  	db	AM_ZPINDY,	0xd1
                             
fd6d : 656f7210              	db	"eor",		8*2
fd71 : 0c49                  	db	AM_IMM,		0x49
fd73 : 0445                  	db	AM_ZP,		0x45
fd75 : 0555                  	db	AM_ZPX,		0x55
fd77 : 014d                  	db	AM_ABS,		0x4d
fd79 : 025d                  	db	AM_ABSX,	0x5d
fd7b : 0359                  	db	AM_ABSY,	0x59
fd7d : 0841                  	db	AM_ZPINDX,	0x41
fd7f : 0951                  	db	AM_ZPINDY,	0x51
                             
fd81 : 6c646110              	db	"lda",		8*2
fd85 : 0ca9                  	db	AM_IMM,		0xa9
fd87 : 04a5                  	db	AM_ZP,		0xa5
fd89 : 05b5                  	db	AM_ZPX,		0xb5
fd8b : 01ad                  	db	AM_ABS,		0xad
fd8d : 02bd                  	db	AM_ABSX,	0xbd
fd8f : 03b9                  	db	AM_ABSY,	0xb9
fd91 : 08a1                  	db	AM_ZPINDX,	0xa1
AS65 Assembler for R6502 [1.42].                                     Page  285
-------------------------------- bank\bank0.s --------------------------------

fd93 : 09b1                  	db	AM_ZPINDY,	0xb1
                             
fd95 : 6f726110              	db	"ora",		8*2
fd99 : 0c09                  	db	AM_IMM,		0x09
fd9b : 0405                  	db	AM_ZP,		0x05
fd9d : 0515                  	db	AM_ZPX,		0x15
fd9f : 010d                  	db	AM_ABS,		0x0d
fda1 : 021d                  	db	AM_ABSX,	0x1d
fda3 : 0319                  	db	AM_ABSY,	0x19
fda5 : 0801                  	db	AM_ZPINDX,	0x01
fda7 : 0911                  	db	AM_ZPINDY,	0x11
                             
fda9 : 73626310              	db	"sbc",		8*2
fdad : 0ce9                  	db	AM_IMM,		0xe9
fdaf : 04e5                  	db	AM_ZP,		0xe5
fdb1 : 05f5                  	db	AM_ZPX,		0xf5
fdb3 : 01ed                  	db	AM_ABS,		0xed
fdb5 : 02fd                  	db	AM_ABSX,	0xfd
fdb7 : 03f9                  	db	AM_ABSY,	0xf9
fdb9 : 08e1                  	db	AM_ZPINDX,	0xe1
fdbb : 09f1                  	db	AM_ZPINDY,	0xf1
                             
fdbd : 73746110              	db	"sta",		8*2
fdc1 : 0485                  	db	AM_ZP,		0x85
fdc3 : 0595                  	db	AM_ZPX,		0x95
fdc5 : 018d                  	db	AM_ABS,		0x8d
fdc7 : 029d                  	db	AM_ABSX,	0x9d
fdc9 : 0399                  	db	AM_ABSY,	0x99
fdcb : 0881                  	db	AM_ZPINDX,	0x81
fdcd : 0991                  	db	AM_ZPINDY,	0x91
fdcf : 0792                  	db	AM_ZPIND,	0x92
                             
fdd1 : 61736c0a              	db	"asl",		5*2
fdd5 : 0d0a                  	db	AM_IMP,		0x0a
fdd7 : 0406                  	db	AM_ZP,		0x06
fdd9 : 0516                  	db	AM_ZPX,		0x16
fddb : 010e                  	db	AM_ABS,		0x0e
fddd : 021e                  	db	AM_ABSX,	0x1e
fddf : 64656308              	db	"dec",		4*2
fde3 : 04c6                  	db	AM_ZP,		0xc6
fde5 : 05d6                  	db	AM_ZPX,		0xd6
fde7 : 01ce                  	db	AM_ABS,		0xce
fde9 : 02de                  	db	AM_ABSX,	0xde
fdeb : 696e6308              	db	"inc",		4*2
fdef : 04e6                  	db	AM_ZP,		0xe6
fdf1 : 05f6                  	db	AM_ZPX,		0xf6
fdf3 : 01ee                  	db	AM_ABS,		0xee
fdf5 : 02fe                  	db	AM_ABSX,	0xfe
fdf7 : 6c73720a              	db	"lsr",		5*2
fdfb : 0d4a                  	db	AM_IMP,		0x4a
fdfd : 0446                  	db	AM_ZP,		0x46
fdff : 0556                  	db	AM_ZPX,		0x56
fe01 : 014e                  	db	AM_ABS,		0x4e
fe03 : 025e                  	db	AM_ABSX,	0x5e
fe05 : 726f6c0a              	db	"rol",		5*2
fe09 : 0d2a                  	db	AM_IMP,		0x2a
fe0b : 0426                  	db	AM_ZP,		0x26
fe0d : 0536                  	db	AM_ZPX,		0x36
fe0f : 012e                  	db	AM_ABS,		0x2e
fe11 : 023e                  	db	AM_ABSX,	0x3e
fe13 : 726f720a              	db	"ror",		5*2
fe17 : 0d6a                  	db	AM_IMP,		0x6a
AS65 Assembler for R6502 [1.42].                                     Page  286
-------------------------------- bank\bank0.s --------------------------------

fe19 : 0466                  	db	AM_ZP,		0x66
fe1b : 0576                  	db	AM_ZPX,		0x76
fe1d : 016e                  	db	AM_ABS,		0x6e
fe1f : 027e                  	db	AM_ABSX,	0x7e
                             
fe21 : 62697404              	db	"bit",		2*2
fe25 : 0424                  	db	AM_ZP,		0x24
fe27 : 012c                  	db	AM_ABS,		0x2c
                             	
fe29 : 62726b02              	db	"brk",		1*2
fe2d : 0d00                  	db	AM_IMP,		0x00
                             	
fe2f : 636c6302              	db	"clc",		1*2
fe33 : 0d18                  	db	AM_IMP,		0x18
fe35 : 636c6402              	db	"cld",		1*2
fe39 : 0dd8                  	db	AM_IMP,		0xd8
fe3b : 636c6902              	db	"cli",		1*2
fe3f : 0d58                  	db	AM_IMP,		0x58
fe41 : 636c7602              	db	"clv",		1*2
fe45 : 0db8                  	db	AM_IMP,		0xb8
fe47 : 73656302              	db	"sec",		1*2
fe4b : 0d38                  	db	AM_IMP,		0x38
fe4d : 73656402              	db	"sed",		1*2
fe51 : 0df8                  	db	AM_IMP,		0xf8
fe53 : 73656902              	db	"sei",		1*2
fe57 : 0d78                  	db	AM_IMP,		0x78
                             	
fe59 : 63707806              	db	"cpx",		3*2
fe5d : 0ce0                  	db	AM_IMM,		0xe0
fe5f : 04e4                  	db	AM_ZP,		0xe4
fe61 : 01ec                  	db	AM_ABS,		0xec
fe63 : 63707906              	db	"cpy",		3*2
fe67 : 0cc0                  	db	AM_IMM,		0xc0
fe69 : 04c4                  	db	AM_ZP,		0xc4
fe6b : 01cc                  	db	AM_ABS,		0xcc
fe6d : 64657802              	db	"dex",		1*2
fe71 : 0dca                  	db	AM_IMP,		0xca
fe73 : 64657902              	db	"dey",		1*2
fe77 : 0d88                  	db	AM_IMP,		0x88
fe79 : 696e7802              	db	"inx",		1*2
fe7d : 0de8                  	db	AM_IMP,		0xe8
fe7f : 696e7902              	db	"iny",		1*2
fe83 : 0dc8                  	db	AM_IMP,		0xc8
fe85 : 6c64780a              	db	"ldx",		5*2
fe89 : 0ca2                  	db	AM_IMM,		0xa2
fe8b : 04a6                  	db	AM_ZP,		0xa6
fe8d : 06b6                  	db	AM_ZPY,		0xb6
fe8f : 01ae                  	db	AM_ABS,		0xae
fe91 : 03be                  	db	AM_ABSY,	0xbe
fe93 : 6c64790a              	db	"ldy",		5*2
fe97 : 0ca0                  	db	AM_IMM,		0xa0
fe99 : 04a4                  	db	AM_ZP,		0xa4
fe9b : 05b4                  	db	AM_ZPX,		0xb4
fe9d : 01ac                  	db	AM_ABS,		0xac
fe9f : 02bc                  	db	AM_ABSX,	0xbc
fea1 : 73747806              	db	"stx",		3*2
fea5 : 0486                  	db	AM_ZP,		0x86
fea7 : 0696                  	db	AM_ZPY,		0x96
fea9 : 018e                  	db	AM_ABS,		0x8e
feab : 73747906              	db	"sty",		3*2
feaf : 0484                  	db	AM_ZP,		0x84
feb1 : 0594                  	db	AM_ZPX,		0x94
AS65 Assembler for R6502 [1.42].                                     Page  287
-------------------------------- bank\bank0.s --------------------------------

feb3 : 018c                  	db	AM_ABS,		0x8c
                             
feb5 : 62636302              	db	"bcc",		1*2
feb9 : 0f90                  	db	AM_REL,		0x90
febb : 62637302              	db	"bcs",		1*2
febf : 0fb0                  	db	AM_REL,		0xb0
fec1 : 62657102              	db	"beq",		1*2
fec5 : 0ff0                  	db	AM_REL,		0xf0
fec7 : 626d6902              	db	"bmi",		1*2
fecb : 0f30                  	db	AM_REL,		0x30
fecd : 626e6502              	db	"bne",		1*2
fed1 : 0fd0                  	db	AM_REL,		0xd0
fed3 : 62706c02              	db	"bpl",		1*2
fed7 : 0f10                  	db	AM_REL,		0x10
fed9 : 62766302              	db	"bvc",		1*2
fedd : 0f50                  	db	AM_REL,		0x50
fedf : 62767302              	db	"bvs",		1*2
fee3 : 0f70                  	db	AM_REL,		0x70
fee5 : 6a6d7004              	db	"jmp",		2*2
fee9 : 014c                  	db	AM_ABS,		0x4c
feeb : 0a6c                  	db	AM_ABSIND,	0x6c
feed : 6a737202              	db	"jsr",		1*2
fef1 : 0120                  	db	AM_ABS,		0x20
                             	
fef3 : 6e6f7002              	db	"nop",		1*2
fef7 : 0dea                  	db	AM_IMP,		0xea
fef9 : 70686102              	db	"pha",		1*2
fefd : 0d48                  	db	AM_IMP,		0x48
feff : 70687002              	db	"php",		1*2
ff03 : 0d08                  	db	AM_IMP,		0x08
ff05 : 706c6102              	db	"pla",		1*2
ff09 : 0d68                  	db	AM_IMP,		0x68
ff0b : 706c7002              	db	"plp",		1*2
ff0f : 0d28                  	db	AM_IMP,		0x28
ff11 : 72746902              	db	"rti",		1*2
ff15 : 0d40                  	db	AM_IMP,		0x40
ff17 : 72747302              	db	"rts",		1*2
ff1b : 0d60                  	db	AM_IMP,		0x60
ff1d : 74617802              	db	"tax",		1*2
ff21 : 0daa                  	db	AM_IMP,		0xaa
ff23 : 74617902              	db	"tay",		1*2
ff27 : 0da8                  	db	AM_IMP,		0xa8
ff29 : 74737802              	db	"tsx",		1*2
ff2d : 0dba                  	db	AM_IMP,		0xba
ff2f : 74786102              	db	"txa",		1*2
ff33 : 0d8a                  	db	AM_IMP,		0x8a
ff35 : 74787302              	db	"txs",		1*2
ff39 : 0d9a                  	db	AM_IMP,		0x9a
ff3b : 74796102              	db	"tya",		1*2
ff3f : 0d98                  	db	AM_IMP,		0x98	
                             	
                             	;* Terminates with a zero
ff41 : 00                    	db	0
                             
                             	include	"dflat/asmjmptab.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
AS65 Assembler for R6502 [1.42].                                     Page  288
-------------------------------- bank\bank0.s --------------------------------

                             ;*
                             ;*  ASMJUMPTAB.S
                             ;*  Runtime token jump table for assembler.
                             ;*  dflat uses four key tables to tokenise and ru
                             ;*  - df_tokensyms    - table of token symbols
                             ;*  - df_tk_tokentype - table of token types
                             ;*  - df_tk_tokenjmp  - table of tokenising routi
                             ;*  - df_rt_tokenjmp  - table of runtime routines
                             ;*  The key is the token symbols.  When a line is
                             ;*  in to the raw (untokenised) buffer, df_tokens
                             ;*  used to identify tokens.  The position of the
                             ;*  token is used to then look up type and jump v
                             ;*  in the other tables.
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code  
                             
                             ; Tokeniser jump table
                             ; Only directives needed as all opcodes are handl
                             ; through a single routine
ff42 :                       df_tk_asm_tokenjmp
ff42 : e1de                  	dw	df_tk_asm_org
ff44 : e1de                  	dw	df_tk_asm_opt
ff46 : 43de                  	dw	df_tk_asm_db
ff48 : 43de                  	dw	df_tk_asm_dw
ff4a : e1de                  	dw	df_tk_asm_ds
                             
ff4c :                       df_rt_asm_tokenjmp
ff4c : 3cfa                  	dw	df_rt_asm_org
ff4e : 4efa                  	dw	df_rt_asm_opt
ff50 : 56fa                  	dw	df_rt_asm_db
ff52 : 59fa                  	dw	df_rt_asm_dw
ff54 : d1fa                  	dw	df_rt_asm_ds
                             
                             
                             ;****************************************
                             ;* as_init
                             ;* Initialise assembler settings
                             ;****************************************
ff56 :                       asm_init
                             	; Zero the PC
ff56 : a900             [ 2] 	lda #0
ff58 : 8599             [ 3] 	sta df_asmpc
ff5a : 859a             [ 3] 	sta df_asmpc+1
                             	; Zero the option
ff5c : 859b             [ 3] 	sta df_asmopt
ff5e : 60               [ 6] 	rts
                             
ff5f :                       mod_sz_asm_e
                             
ff5f :                       mod_sz_language_e
                             	; End of Code
ff5f :                       _code_end
                             
No errors in pass 2.
Wrote binary from address $c000 through $ffff.
Total size 16384 bytes.
