AS65 Assembler for R6502 [1.42].                                     Page    1
-------------------------------- bank\bank0.s --------------------------------

-------------------------------- Symbol Table --------------------------------

              Symbol   Value        Decimal

                 ACR : $000b             11   *
              AM_ABS : $0001              1   *
           AM_ABSIND : $000a             10   *
          AM_ABSINDX : $000b             11   *
             AM_ABSX : $0002              2   *
             AM_ABSY : $0003              3   *
              AM_ACC : $000d             13   *
              AM_DIR : $0010             16   *
              AM_IMM : $000c             12   *
              AM_IMP : $000d             13   *
             AM_NONE : $0000              0   *
              AM_REL : $000f             15   *
               AM_ZP : $0004              4   *
            AM_ZPIND : $0007              7   *
           AM_ZPINDX : $0008              8   *
           AM_ZPINDY : $0009              9   *
              AM_ZPX : $0005              5   *
              AM_ZPY : $0006              6   *
            asm_init : $fed1          65233
               BANK0 : $0001              1
             bcd_str : $c3ad          50093
          bcd_to_str : $c3a0          50080
      bin_to_bcd_bit : $c382          50050
              buf_ef : $003c             60
              buf_hi : $003a             58
              buf_lo : $0039             57
              buf_sz : $003b             59
     CMD_ERR_NOERROR : $0000              0   *
    CMD_ERR_NOTFOUND : $0001              1   *
        CMD_ERR_PARM : $0002              2   *
         CMD_ERR_VAL : $0003              3   *
           CRSR_DOWN : $000a             10   *
           CRSR_LEFT : $0008              8   *
          CRSR_RIGHT : $0009              9   *
             CRSR_UP : $000b             11   *
           CTRL_CAPS : $0014             20   *
        call_irq_brk : $c0e9          49385
     call_irq_master : $c0e6          49382
   call_irq_usercia0 : $c0ec          49388
       cmd_check_cmd : $d318          54040
         cmd_check_d : $d32b          54059
         cmd_check_s : $d32f          54063
         cmd_dumpmem : $d35f          54111
    cmd_dumpmemASCII : $d383          54147
      cmd_dumpmemFin : $d3b8          54200
   cmd_dumpmem_ascii : $d395          54165
   cmd_dumpmem_block : $d365          54117
    cmd_dumpmem_byte : $d374          54132
  cmd_dump_skip_ctrl : $d39f          54175
   cmd_dump_skip_del : $d3a4          54180
           cmd_error : $d320          54048
       cmd_find_parm : $d403          54275
              cmd_hi : $0095            149   *
          cmd_incmem : $d3bf          54207
              cmd_lo : $0094            148   *
   cmd_next_parm_err : $d40d          54285
       cmd_not_found : $d333          54067
           cmd_parse : $d32a          54058
AS65 Assembler for R6502 [1.42].                                     Page    2
-------------------------------- bank\bank0.s --------------------------------

      cmd_parse_byte : $d3d4          54228
  cmd_parse_byte_err : $d3ee          54254
 cmd_parse_byte_errp : $d3ed          54253
 cmd_parse_next_parm : $d402          54274
      cmd_parse_word : $d3f0          54256
            cmd_peek : $d3c6          54214
            cmd_poke : $d3cb          54219
           cmd_ready : $d304          54020
          cmd_setmem : $d339          54073
     cmd_setmem_byte : $d33e          54078
      cmd_setmem_err : $d35d          54109
        cmd_word_err : $d400          54272
        command_line : $d304          54020
       con_bin_digit : $c260          49760
        con_bin_done : $c276          49782
         con_bin_err : $c280          49792
         con_bin_jmp : $c1fe          49662
        con_bin_to_a : $c258          49752
    con_bin_to_a_int : $c25c          49756
         con_dec_jmp : $c1f2          49650
        con_dec_to_a : $c282          49794
    con_dec_to_a_int : $c286          49798
       con_hex_digit : $c221          49697
        con_hex_done : $c24e          49742
         con_hex_err : $c24c          49740
         con_hex_jmp : $c1f8          49656
  con_hex_skip_x_f_1 : $c22e          49710
        con_hex_to_a : $c219          49689
    con_hex_to_a_int : $c21d          49693
           con_n_err : $c201          49665
       con_n_not_dec : $c1f5          49653
       con_n_not_hex : $c1fb          49659
          con_n_to_a : $c1e1          49633
   con_n_to_a_detect : $c203          49667
                DDRA : $0003              3   *
                DDRB : $0002              2   *
         DFERR_ABORT : $0012             18   *
         DFERR_BREAK : $000d             13   *
           DFERR_DIM : $0003              3   *
         DFERR_FNAME : $000b             11   *
     DFERR_IMMEDIATE : $0007              7   *
       DFERR_NEXTFOR : $000a             10   *
        DFERR_NODATA : $000e             14   *
          DFERR_NOIF : $0009              9   *
        DFERR_NOLINE : $0010             16   *
         DFERR_NOORG : $0014             20   *
        DFERR_NOPROC : $0005              5   *
            DFERR_OK : $0000              0   *
      DFERR_PROCPARM : $0006              6   *
      DFERR_QUANTITY : $0013             19   *
        DFERR_RETURN : $0011             17   *
       DFERR_STRLONG : $000c             12   *
        DFERR_SYNTAX : $0001              1   *
      DFERR_TYPEMISM : $0002              2   *
    DFERR_UNCLOSEDIF : $0008              8   *
         DFERR_UNTIL : $0004              4   *
          DFERR_WEND : $000f             15   *
          DFRT_ABORT : $0089            137   *
            DFRT_ASM : $0097            151   *
           DFRT_DATA : $0096            150   *
            DFRT_DEF : $0086            134   *
           DFRT_ELSE : $0093            147   *
AS65 Assembler for R6502 [1.42].                                     Page    3
-------------------------------- bank\bank0.s --------------------------------

         DFRT_ELSEIF : $0095            149   *
         DFRT_ENDDEF : $0087            135   *
          DFRT_ENDIF : $0094            148   *
            DFRT_FOR : $008e            142   *
             DFRT_IF : $0092            146   *
           DFRT_NEXT : $008f            143   *
         DFRT_REPEAT : $008c            140   *
         DFRT_RETURN : $0088            136   *
           DFRT_WEND : $0091            145   *
          DFRT_WHILE : $0090            144   *
            DFST_INT : $0001              1   *
            DFST_STR : $0080            128   *
            DFTK_BYT : $0020             32   *
         DFTK_BYTBIN : $0007              7   *
         DFTK_BYTDEC : $0005              5   *
         DFTK_BYTHEX : $0006              6   *
            DFTK_CHR : $0000              0   *
            DFTK_EOL : $0000              0   *
         DFTK_ESCVAL : $0020             32   *
            DFTK_FLT : $0080            128   *
             DFTK_FN : $0002              2   *
            DFTK_INT : $0010             16   *
         DFTK_INTBIN : $000b             11   *
         DFTK_INTDEC : $0009              9   *
         DFTK_INTHEX : $000a             10   *
             DFTK_KW : $0001              1   *
         DFTK_LINLEN : $0000              0   *
         DFTK_LINNUM : $0001              1   *
             DFTK_OP : $0008              8   *
          DFTK_OPMSK : $0007              7   *
           DFTK_PROC : $0012             18   *
          DFTK_RESVC : $000c             12   *
          DFTK_RESVD : $000d             13   *
          DFTK_RESVE : $000e             14   *
          DFTK_RESVF : $000f             15   *
          DFTK_RESV1 : $0001              1   *
          DFTK_RESV2 : $0002              2   *
          DFTK_RESV3 : $0003              3   *
          DFTK_RESV4 : $0004              4   *
          DFTK_RESV8 : $0008              8   *
          DFTK_RTMSK : $00f8            248   *
          DFTK_STEND : $001f             31   *
            DFTK_STR : $0040             64   *
         DFTK_STRLIT : $0010             16   *
          DFTK_STROP : $0004              4   *
          DFTK_TOKEN : $0080            128   *
            DFTK_VAR : $0011             17   *
        DFTK_VARPARM : $0026             38   *
          DFVVT_ARRY : $0080            128   *
           DFVVT_BYT : $0002              2   *
          DFVVT_DIM1 : $0003              3   *
          DFVVT_DIM2 : $0004              4   *
           DFVVT_FLT : $0008              8   *
            DFVVT_HI : $0002              2   *
           DFVVT_INT : $0001              1   *
            DFVVT_LO : $0001              1   *
          DFVVT_PROC : $0040             64   *
           DFVVT_STR : $0004              4   *
            DFVVT_SZ : $0008              8   *
          DFVVT_TYPE : $0000              0   *
           DF_MEMTOP : $9800          38912   *
        DF_PROGSTART : $0713           1811   *
AS65 Assembler for R6502 [1.42].                                     Page    4
-------------------------------- bank\bank0.s --------------------------------

          dflat_zp_e : $00ab            171
          dflat_zp_s : $005b             91
     dflat_zp_save_e : $00a1            161
     dflat_zp_save_s : $005b             91
          df_asmadmd : $009c            156
           df_asmlen : $00a0            160
         df_asmopcde : $009d            157
         df_asmoprnd : $009e            158
           df_asmopt : $009b            155
            df_asmpc : $0099            153
  df_asm_altaddrmode : $fc80          64640
       df_asm_length : $fc6f          64623
    df_asm_tokensyms : $fc91          64657
            df_brkpc : $0062             98
           df_brkval : $0064            100
         df_checkkey : $005b             91
         df_checkmsk : $005c             92
            df_clear : $f6ae          63150
          df_currdat : $0094            148
          df_currlin : $0086            134
         df_curstidx : $0080            128
           df_datoff : $0096            150
           df_eolidx : $007e            126
           df_exeoff : $0088            136
           df_ifnest : $0093            147
            df_immed : $005e             94
             df_init : $f6a1          63137
          df_initrun : $dfff          57343
       df_lexer_line : $d969          55657
  df_lexer_skip_lnum : $d98a          55690
          df_linbuff : $0400           1024
          df_lineidx : $0092            146
          df_lineptr : $0090            144
           df_linoff : $007c            124
           df_memtop : $0611           1553
          df_msg_acc : $f871          63601
           df_msg_pc : $f86d          63597
         df_msg_xreg : $f874          63604
         df_msg_yreg : $f877          63607
          df_nextlin : $0089            137
         df_nxtstidx : $007f            127
     df_ost_peekType : $f677          63095
       df_ost_popInt : $f67d          63101
     df_ost_popParmX : $f660          63072
       df_ost_popPtr : $f685          63109
       df_ost_popStr : $f681          63105
      df_ost_pushInt : $f64d          63053
     df_ost_pushIntA : $f651          63057
    df_ost_pushParmX : $f637          63031
      df_ost_pushPtr : $f65c          63068
      df_ost_pushStr : $f658          63064
          df_parmtop : $0077            119
               df_pc : $0060             96
    df_pg_check_line : $deb1          57009
df_pg_check_next_line : $de9a          56986
df_pg_copyinputtolinbuff : $df4c          57164
  df_pg_delete_block : $df14          57108
   df_pg_delete_byte : $df1a          57114
df_pg_delete_next_byte : $df3b          57147
         df_pg_dflat : $df56          57174
     df_pg_find_line : $de8e          56974
    df_pg_getcommand : $df6c          57196
AS65 Assembler for R6502 [1.42].                                     Page    5
-------------------------------- bank\bank0.s --------------------------------

     df_pg_inputline : $df44          57156
  df_pg_inputline_ok : $df4c          57164
 df_pg_insertlinbyte : $dfef          57327
    df_pg_insertline : $dfd0          57296
  df_pg_insert_block : $dedf          57055
   df_pg_insert_byte : $deeb          57067
df_pg_insert_next_byte : $df09          57097
   df_pg_line_number : $dfb0          57264
       df_pg_nothing : $dfaf          57263
        df_pg_prompt : $df61          57185
    df_pg_prompt_msg : $dff8          57336
 df_pg_skip_del_line : $dfc6          57286
      df_pg_tokenise : $df95          57237
           df_prgend : $0067            103
          df_prgstrt : $0065            101
         df_procargs : $008c            140
          df_procloc : $008d            141
         df_procmode : $008b            139
          df_procptr : $008e            142
df_pr_line_gt_target : $dea6          56998
    df_pr_line_match : $ded4          57044
              df_raw : $0400           1024
              df_rnd : $0097            151
     df_rst_peekByte : $f616          62998
      df_rst_popByte : $f60d          62989
      df_rst_popWord : $f62a          63018
     df_rst_pushByte : $f604          62980
     df_rst_pushWord : $f61c          63004
          df_rtspace : $0500           1280
           df_rtstck : $0500           1280
           df_rtstop : $0076            118
         df_rt_abort : $f465          62565
           df_rt_add : $e5cc          58828
          df_rt_addr : $f35b          62299
         df_rt_aequb : $e6a8          59048
      df_rt_aequbFin : $e6b2          59058
           df_rt_and : $e67b          59003
  df_rt_array_exists : $e2de          58078
     df_rt_arry_parm : $e1ec          57836
    df_rt_arry_parm2 : $e1f3          57843
df_rt_arry_parm2_arry2 : $e20b          57867
df_rt_arry_parm2_skiparry2 : $e212          57874
df_rt_arry_parm2_term : $e1fb          57851
           df_rt_asc : $f43e          62526
           df_rt_asl : $e655          58965
        df_rt_aslbit : $e65b          58971
       df_rt_asldone : $e665          58981
    df_rt_asm_ABSREL : $fbc4          64452
    df_rt_asm_AM_ABS : $fbdb          64475
   df_rt_asm_AM_ABSX : $fbe8          64488
   df_rt_asm_AM_ABSY : $fbd6          64470
    df_rt_asm_AM_IMM : $fbed          64493
    df_rt_asm_AM_IMP : $fbbf          64447
df_rt_asm_AM_INDIRECT : $fbf7          64503
    df_rt_asm_AM_REL : $fbe5          64485
  df_rt_asm_AM_ZPIND : $fc1d          64541
df_rt_asm_AM_ZPINDORY : $fc0d          64525
  df_rt_asm_addrmode : $fba3          64419
  df_rt_asm_assemble : $f96d          63853
df_rt_asm_assemble_done : $f97f          63871
 df_rt_asm_check_alt : $fa78          64120
   df_rt_asm_command : $f980          63872
AS65 Assembler for R6502 [1.42].                                     Page    6
-------------------------------- bank\bank0.s --------------------------------

      df_rt_asm_data : $f9de          63966
 df_rt_asm_data_done : $fa1b          64027
 df_rt_asm_data_next : $fa11          64017
df_rt_asm_data_write : $fa1c          64028
df_rt_asm_data_write_err : $fa4a          64074
df_rt_asm_data_write_hi : $fa38          64056
df_rt_asm_data_write_skip1 : $fa1f          64031
df_rt_asm_data_write_skip2 : $fa3c          64060
        df_rt_asm_db : $f9d1          63953
  df_rt_asm_db_start : $f9d6          63958
df_rt_asm_decode_token : $efc9          61385
df_rt_asm_decode_token_done : $f022          61474
df_rt_asm_decode_token_found : $efe0          61408
df_rt_asm_decode_token_keyword : $efe7          61415
df_rt_asm_decode_token_ws : $efd0          61392
       df_rt_asm_dir : $f992          63890
  df_rt_asm_do_label : $f97c          63868
        df_rt_asm_ds : $fa4c          64076
        df_rt_asm_dw : $f9d4          63956
    df_rt_asm_encode : $fab0          64176
df_rt_asm_encode_print : $fb17          64279
df_rt_asm_encode_relfar : $fae7          64231
df_rt_asm_encode_relpos : $fae3          64227
df_rt_asm_encode_skiprel : $fae9          64233
df_rt_asm_encode_writebyte : $fb05          64261
df_rt_asm_encode_writeword : $fb0d          64269
df_rt_asm_find_addr_mode : $fc2b          64555
df_rt_asm_find_addr_mode_err : $fc40          64576
df_rt_asm_find_addr_mode_loop : $fc31          64561
df_rt_asm_get_operand : $fc20          64544
     df_rt_asm_label : $f9a4          63908
      df_rt_asm_mnem : $fa69          64105
  df_rt_asm_mnem_chk : $fa8c          64140
 df_rt_asm_mnem_done : $fa9a          64154
  df_rt_asm_mnem_err : $faae          64174
  df_rt_asm_mnem_try : $fa6f          64111
       df_rt_asm_opt : $f9c9          63945
       df_rt_asm_org : $f9b7          63927
   df_rt_asm_printCH : $fb7e          64382
   df_rt_asm_printCR : $fb75          64373
 df_rt_asm_printline : $fb8b          64395
  df_rt_asm_printOPC : $fb47          64327
  df_rt_asm_printOPR : $fb5b          64347
df_rt_asm_printOPR_1 : $fb70          64368
   df_rt_asm_printPC : $fb37          64311
  df_rt_asm_printSPC : $fb52          64338
df_rt_asm_print_mmen : $fb27          64295
 df_rt_asm_print_rts : $fb36          64310
df_rt_asm_skip_to_sym : $fc43          64579
df_rt_asm_skip_to_sym_done : $fc42          64578
df_rt_asm_skip_to_sym_end : $fc60          64608
df_rt_asm_skip_to_sym_next : $fc51          64593
    df_rt_asm_string : $f9f4          63988
 df_rt_asm_string_ch : $f9fb          63995
  df_rt_asm_tokenjmp : $fec7          65223
        df_rt_assign : $ecc3          60611
    df_rt_assign_str : $ecd0          60624
         df_rt_asubb : $e6b3          59059
      df_rt_asubbFin : $e6c0          59072
   df_rt_binlen_skip : $f236          62006
         df_rt_bload : $f131          61745
    df_rt_bload_addr : $f154          61780
AS65 Assembler for R6502 [1.42].                                     Page    7
-------------------------------- bank\bank0.s --------------------------------

         df_rt_bsave : $f164          61796
   df_rt_bsave_parms : $f214          61972
         df_rt_bsuba : $e6c1          59073
      df_rt_bsubaFin : $e6ce          59086
          df_rt_call : $f32c          62252
       df_rt_calljsr : $f33b          62267
     df_rt_check_pos : $e954          59732
   df_rt_check_while : $e7fa          59386
           df_rt_chr : $f3a3          62371
        df_rt_circle : $ebf1          60401
           df_rt_cls : $eb45          60229
         df_rt_comeq : $e729          59177
         df_rt_comgt : $e720          59168
        df_rt_comgte : $e73b          59195
         df_rt_comlt : $e717          59159
        df_rt_comlte : $e732          59186
       df_rt_comment : $ecd4          60628
         df_rt_comne : $e744          59204
       df_rt_copyStr : $e1ae          57774
    df_rt_copyStr_ch : $e1b0          57776
  df_rt_copyStr_done : $e1b9          57785
       df_rt_copy_fn : $f0c8          61640
        df_rt_cursor : $ebb9          60345
          df_rt_data : $ecd4          60628
 df_rt_datastatement : $e9bb          59835
   df_rt_datlinstart : $e9b3          59827
    df_rt_datnextlin : $e9c1          59841
      df_rt_datumerr : $e9e9          59881
    df_rt_dec_binlen : $f230          62000
          df_rt_deek : $f252          62034
           df_rt_def : $f543          62787
        df_rt_deferr : $f4a1          62625
  df_rt_def_find_var : $f550          62800
   df_rt_def_got_var : $f562          62818
df_rt_def_got_varparm : $f55f          62815
df_rt_def_initialise_parm : $f5a0          62880
  df_rt_def_load_var : $f580          62848
df_rt_def_load_var_done : $f5bc          62908
df_rt_def_load_var_int : $f5ae          62894
df_rt_def_load_var_int_skip : $f5b1          62897
 df_rt_def_parm_done : $f578          62840
           df_rt_dim : $eac0          60096
     df_rt_dim2_mul2 : $eb23          60195
       df_rt_dim2_nz : $eb0e          60174
     df_rt_dim_alloc : $eafd          60157
      df_rt_dim_done : $eb42          60226
       df_rt_dim_err : $eb43          60227
   df_rt_dim_findesc : $eac3          60099
 df_rt_dim_next_byte : $eb3d          60221
           df_rt_div : $e613          58899
      df_rt_doassign : $ecc6          60614
          df_rt_doke : $f023          61475
        df_rt_doline : $ec0a          60426
       df_rt_dosound : $f068          61544
       df_rt_do_else : $e8c6          59590
       df_rt_elapsed : $f311          62225
          df_rt_else : $e876          59510
        df_rt_elseif : $e876          59510
        df_rt_enddef : $f5c6          62918
         df_rt_endif : $e871          59505
           df_rt_eor : $e699          59033
           df_rt_eos : $ecd6          60630
AS65 Assembler for R6502 [1.42].                                     Page    8
-------------------------------- bank\bank0.s --------------------------------

      df_rt_eos_true : $ece4          60644
            df_rt_eq : $e703          59139
        df_rt_escjmp : $e59f          58783
      df_rt_eval_byt : $e2f9          58105
   df_rt_eval_bytbin : $e1c4          57796
   df_rt_eval_bytdec : $e1c4          57796
   df_rt_eval_bythex : $e1c4          57796
      df_rt_eval_chr : $e1c4          57796
      df_rt_eval_esc : $e0f8          57592
  df_rt_eval_esc_tab : $e107          57607
   df_rt_eval_intbin : $e1c4          57796
   df_rt_eval_intdec : $e1c4          57796
   df_rt_eval_inthex : $e1c4          57796
     df_rt_eval_lvar : $e24c          57932
   df_rt_eval_lvskip : $e22a          57898
     df_rt_eval_proc : $e30a          58122
 df_rt_eval_proc_err : $e317          58135
      df_rt_eval_ptr : $e303          58115
 df_rt_eval_reserved : $e1d0          57808
   df_rt_eval_strlit : $e1d2          57810
df_rt_eval_strlit_ch : $e1e2          57826
df_rt_eval_strlit_done : $e1e9          57833
      df_rt_eval_var : $e217          57879
df_rt_eval_var_dim2adj : $e292          58002
df_rt_eval_var_dim2adjx : $e29e          58014
df_rt_eval_var_dim2adjy : $e299          58009
df_rt_eval_var_do_arry : $e267          57959
df_rt_eval_var_nomult : $e2b5          58037
df_rt_eval_var_notarry : $e23c          57916
 df_rt_eval_var_push : $e2cd          58061
df_rt_eval_var_simple : $e259          57945
  df_rt_eval_var_str : $e302          58114
df_rt_exec_check_key : $e3d7          58327
   df_rt_exec_ctrl_c : $e3df          58335
   df_rt_exec_ctrl_z : $e3e1          58337
      df_rt_exec_end : $e3d5          58325
 df_rt_exec_find_tok : $e395          58261
df_rt_exec_found_tok : $e39a          58266
 df_rt_exec_init_ptr : $e38e          58254
     df_rt_exec_jump : $e3e5          58341
   df_rt_exec_no_key : $e3ae          58286
     df_rt_exec_proc : $f4f9          62713
     df_rt_exec_stat : $e388          58248
         df_rt_false : $e6d5          59093
  df_rt_file_cleanup : $f0f0          61680
     df_rt_file_errc : $f0da          61658
 df_rt_findelseendif : $e839          59449
    df_rt_findescval : $e49a          58522
df_rt_findescval_loop : $e49d          58525
      df_rt_findproc : $e452          58450
  df_rt_findproc_cmd : $e464          58468
  df_rt_findproc_err : $e498          58520
df_rt_findproc_nextstat : $e484          58500
      df_rt_findwend : $e7c7          59335
    df_rt_fname_case : $f0ca          61642
           df_rt_for : $e8c9          59593
 df_rt_generate_lvar : $eca0          60576
           df_rt_get : $f2e3          62179
  df_rt_getbin_parms : $f1f3          61939
df_rt_getbin_parms_loop : $f1f5          61941
     df_rt_getdatatk : $e9cf          59855
       df_rt_getlvar : $e4b4          58548
AS65 Assembler for R6502 [1.42].                                     Page    9
-------------------------------- bank\bank0.s --------------------------------

       df_rt_getnval : $e06d          57453
      df_rt_get2Ints : $e319          58137
      df_rt_get2Strs : $e328          58152
      df_rt_get_push : $f2f4          62196
     df_rt_get_pushp : $f2f3          62195
      df_rt_get_sync : $f2e8          62184
            df_rt_gt : $e6ef          59119
           df_rt_gte : $e6f9          59129
      df_rt_gte_calc : $e6fc          59132
           df_rt_hex : $f3b7          62391
         df_rt_himem : $ebbf          60351
         df_rt_hires : $ebce          60366
            df_rt_if : $e888          59528
         df_rt_ifcmd : $e83c          59452
        df_rt_ifelse : $e85a          59482
        df_rt_ifeval : $e88a          59530
  df_rt_ifskipelseif : $e851          59473
       df_rt_if_done : $e875          59509
      df_rt_if_found : $e867          59495
      df_rt_if_match : $e831          59441
       df_rt_if_stat : $e81b          59419
   df_rt_if_stat_err : $e82f          59439
     df_rt_init_done : $e06c          57452
 df_rt_init_filename : $f0bc          61628
 df_rt_init_stat_ptr : $e375          58229
      df_rt_init_vvt : $e02a          57386
 df_rt_init_vvt_skip : $e05e          57438
 df_rt_init_vvt_slot : $e034          57396
df_rt_init_vvt_slot_undim : $e040          57408
           df_rt_ink : $ebd7          60375
         df_rt_input : $ea58          59992
     df_rt_input_err : $ea92          60050
     df_rt_input_num : $ea7b          60027
     df_rt_input_str : $ea73          60019
    df_rt_ldtokenise : $f119          61721
          df_rt_left : $f3e8          62440
           df_rt_len : $f432          62514
          df_rt_line : $ec11          60433
        df_rt_lineto : $ec03          60419
          df_rt_list : $edca          60874
  df_rt_listcheckvnt : $ed35          60725
   df_rt_listgotnext : $ed63          60771
   df_rt_listnextvnt : $ed5c          60764
   df_rt_listpn_done : $ed73          60787
       df_rt_listprg : $edf1          60913
    df_rt_listprgend : $edf9          60921
      df_rt_listproc : $ed74          60788
    df_rt_listprocch : $ed41          60737
    df_rt_listproccr : $ed4c          60748
 df_rt_listprocnames : $ed29          60713
 df_rt_listprocpause : $ed52          60754
    df_rt_listp_copy : $ed7b          60795
    df_rt_listp_done : $edbe          60862
 df_rt_listp_findcmd : $eda4          60836
 df_rt_listp_findend : $ed9d          60829
df_rt_listp_notfound : $edc8          60872
      df_rt_listwait : $ed59          60761
      df_rt_list_all : $eddd          60893
 df_rt_list_all_line : $ee40          60992
   df_rt_list_decode : $ee4c          61004
df_rt_list_decode_esc : $ee7e          61054
df_rt_list_decode_token : $ef8b          61323
AS65 Assembler for R6502 [1.42].                                     Page   10
-------------------------------- bank\bank0.s --------------------------------

df_rt_list_decode_token_normal : $ef92          61330
   df_rt_list_donvvt : $ef79          61305
df_rt_list_do_decode_tkn : $ef99          61337
   df_rt_list_escval : $ee5c          61020
  df_rt_list_findvvt : $ef23          61219
df_rt_list_find_asm_sym : $eff2          61426
 df_rt_list_find_sym : $efa2          61346
   df_rt_list_gotvvt : $ef50          61264
df_rt_list_gotvvtend : $ef3c          61244
df_rt_list_got_asm_sym : $f010          61456
df_rt_list_got_last_sym : $efb3          61363
  df_rt_list_got_sym : $efb7          61367
     df_rt_list_line : $edff          60927
df_rt_list_line_cont : $ee19          60953
 df_rt_list_line_fin : $ee3d          60989
df_rt_list_line_only : $ee43          60995
df_rt_list_line_only_fin : $ee3f          60991
    df_rt_list_linno : $ede4          60900
   df_rt_list_linnum : $ef7a          61306
  df_rt_list_nexttok : $ee65          61029
df_rt_list_next_asm_ch : $eff7          61431
  df_rt_list_next_ch : $efa7          61351
df_rt_list_next_line : $ee20          60960
    df_rt_list_pause : $ee0e          60942
  df_rt_list_synckey : $ee0a          60938
    df_rt_list_token : $ee62          61026
   df_rt_list_vvtend : $ef2f          61231
          df_rt_load : $f1d7          61911
       df_rt_loadbin : $f200          61952
  df_rt_loadbin_byte : $f202          61954
   df_rt_loadbin_inc : $f20c          61964
      df_rt_loadline : $f0fe          61694
         df_rt_local : $ea94          60052
    df_rt_local_done : $eabc          60092
 df_rt_local_findesc : $ea9b          60059
           df_rt_lsr : $e668          58984
        df_rt_lsrbit : $e66e          58990
       df_rt_lsrdone : $e678          59000
       df_rt_lst_bin : $eee9          61161
       df_rt_lst_bit : $eef3          61171
 df_rt_lst_bit_skip0 : $eefb          61179
    df_rt_lst_bytbin : $eedf          61151
    df_rt_lst_bythex : $eeba          61114
       df_rt_lst_chr : $ee9d          61085
df_rt_lst_const_done : $eec9          61129
   df_rt_lst_hex_pre : $eeb0          61104
    df_rt_lst_intbin : $eee7          61159
    df_rt_lst_intdec : $ef03          61187
    df_rt_lst_inthex : $eecd          61133
    df_rt_lst_lo_hex : $eebd          61117
      df_rt_lst_proc : $ef0e          61198
  df_rt_lst_reserved : $ee9c          61084
    df_rt_lst_strlit : $ef60          61280
  df_rt_lst_strlitch : $ef67          61287
 df_rt_lst_strlitdon : $ef72          61298
       df_rt_lst_var : $ef0e          61198
            df_rt_lt : $e6db          59099
           df_rt_lte : $e6e5          59109
      df_rt_lte_calc : $e6e8          59112
           df_rt_mem : $f28f          62095
      df_rt_mem_calc : $f2d0          62160
      df_rt_mem_free : $f29a          62106
AS65 Assembler for R6502 [1.42].                                     Page   11
-------------------------------- bank\bank0.s --------------------------------

       df_rt_mem_prg : $f2ad          62125
       df_rt_mem_var : $f2c0          62144
           df_rt_mid : $f414          62484
           df_rt_mod : $e634          58932
       df_rt_monitor : $e79c          59292
          df_rt_mult : $e5f2          58866
         df_rt_music : $f078          61560
       df_rt_nassign : $ec83          60547
            df_rt_ne : $e70d          59149
         df_rt_neval : $e073          57459
    df_rt_neval_done : $e0bf          57535
   df_rt_neval_donow : $e0e2          57570
     df_rt_neval_esc : $e09d          57501
df_rt_neval_nextbyte : $e0c7          57543
    df_rt_neval_optk : $e076          57462
 df_rt_neval_process : $e0b6          57526
  df_rt_neval_pushOp : $e0f3          57587
      df_rt_neval_tk : $e0a4          57508
   df_rt_neval_tk_fn : $e0c0          57536
   df_rt_neval_tk_op : $e0cc          57548
  df_rt_neval_tk_opp : $e0cb          57547
           df_rt_new : $e79f          59295
          df_rt_next : $e907          59655
     df_rt_nextdatum : $e9a3          59811
      df_rt_nextstat : $e3fd          58365
  df_rt_nextstat_err : $e429          58409
   df_rt_nextstat_ln : $e414          58388
    df_rt_next_check : $e957          59735
      df_rt_next_err : $e960          59744
      df_rt_noif_err : $e886          59526
df_rt_openforbinload : $f128          61736
df_rt_openforbinsave : $f11f          61727
            df_rt_or : $e68a          59018
         df_rt_paper : $ebdd          60381
     df_rt_parm_pop3 : $e34f          58191
    df_rt_parm_2ints : $e337          58167
    df_rt_parm_3ints : $e342          58178
    df_rt_parm_4ints : $e359          58201
    df_rt_parse_file : $f0d2          61650
          df_rt_peek : $f254          62036
         df_rt_pixel : $f304          62212
       df_rt_pixmode : $ebd1          60369
          df_rt_play : $f08d          61581
          df_rt_plot : $eb48          60232
       df_rt_plotstr : $eb7a          60282
     df_rt_plotstrch : $eb8b          60299
   df_rt_plotstrdone : $ebb8          60344
    df_rt_plot_h_int : $eb71          60273
    df_rt_plot_h_str : $eba6          60326
         df_rt_point : $ebe7          60391
          df_rt_poke : $f032          61490
      df_rt_pop_stat : $e439          58425
   df_rt_pop_stat_go : $e4d0          58576
         df_rt_print : $ec42          60482
       df_rt_printat : $ec38          60472
       df_rt_println : $ec7b          60539
    df_rt_print_done : $ec78          60536
  df_rt_print_gotstr : $ec6c          60524
     df_rt_print_num : $e988          59784
     df_rt_print_str : $e98f          59791
  df_rt_print_string : $ec72          60530
  df_rt_print_str_ch : $e998          59800
AS65 Assembler for R6502 [1.42].                                     Page   12
-------------------------------- bank\bank0.s --------------------------------

df_rt_print_str_done : $e9a2          59810
      df_rt_print_ws : $ec45          60485
          df_rt_proc : $f4a3          62627
     df_rt_proc_addr : $f4cd          62669
    df_rt_proc_local : $f5f0          62960
df_rt_proc_local_load : $f5f7          62967
  df_rt_proc_parmerr : $f4a1          62625
df_rt_proc_parm_done : $f4ec          62700
df_rt_proc_parm_none : $f4ed          62701
df_rt_proc_push_parm : $f4d8          62680
df_rt_proc_unloadvar : $f5cc          62924
df_rt_proc_unload_done : $f5ec          62956
     df_rt_push_int1 : $f338          62264
     df_rt_push_stat : $e42d          58413
     df_rt_putintres : $e5c5          58821
          df_rt_read : $ea40          59968
      df_rt_readbyte : $f255          62037
 df_rt_readbyte_skip : $f26a          62058
     df_rt_readdatum : $e9eb          59883
     df_rt_read_done : $ea55          59989
 df_rt_read_find_var : $ea42          59970
         df_rt_renum : $ece6          60646
      df_rt_renum_do : $ecfa          60666
    df_rt_renum_next : $ed19          60697
      df_rt_renum_ok : $ecf6          60662
  df_rt_renum_update : $ed01          60673
        df_rt_repeat : $e962          59746
         df_rt_reset : $f23d          62013
        df_rt_return : $f5c3          62915
         df_rt_right : $f3f9          62457
           df_rt_rnd : $f26d          62061
     df_rt_rnd_noeor : $f281          62081
       df_rt_rnd_set : $f288          62088
           df_rt_run : $ecd5          60629
     df_rt_run_token : $e3ee          58350
          df_rt_sadd : $e987          59783
       df_rt_sassign : $ec9a          60570
          df_rt_save : $f185          61829
       df_rt_savebin : $f212          61970
  df_rt_savebin_byte : $f220          61984
   df_rt_savebin_inc : $f22a          61994
          df_rt_scrn : $f2f7          62199
           df_rt_seq : $e778          59256
         df_rt_seval : $e12d          57645
    df_rt_seval_copy : $e187          57735
    df_rt_seval_done : $e1aa          57770
     df_rt_seval_esc : $e153          57683
df_rt_seval_esc_proc : $e1a8          57768
df_rt_seval_esc_strlit : $e1a2          57762
 df_rt_seval_esc_var : $e183          57731
df_rt_seval_nextbyte : $e19d          57757
    df_rt_seval_optk : $e13b          57659
      df_rt_seval_tk : $e161          57697
   df_rt_seval_tk_fn : $e17a          57722
   df_rt_seval_tk_op : $e176          57718
           df_rt_sgn : $f33e          62270
         df_rt_sgn_n : $f351          62289
         df_rt_sgn_z : $f356          62294
           df_rt_sgt : $e76f          59247
          df_rt_sgte : $e75a          59226
df_rt_skipinitdataptr : $e9d9          59865
 df_rt_skipnestendif : $e864          59492
AS65 Assembler for R6502 [1.42].                                     Page   13
-------------------------------- bank\bank0.s --------------------------------

    df_rt_skipnestif : $e857          59479
       df_rt_skip_ws : $e4a7          58535
  df_rt_skip_ws_loop : $e4aa          58538
           df_rt_slt : $e768          59240
          df_rt_slte : $e74d          59213
    df_rt_snd_common : $f03c          61500
           df_rt_sne : $e761          59233
         df_rt_sound : $f065          61541
df_rt_sound_env_skip : $f062          61538
   df_rt_sound_noise : $f06f          61551
       df_rt_sprchar : $f467          62567
        df_rt_sprhit : $f48f          62607
df_rt_sprhit_inactive : $f49b          62619
       df_rt_sprinit : $f486          62598
      df_rt_sprmulti : $f489          62601
        df_rt_sprpos : $f471          62577
        df_rt_sprupd : $f47d          62589
         df_rt_stick : $f2dd          62173
 df_rt_strlen_common : $f363          62307
  df_rt_strlen_count : $f369          62313
      df_rt_str_comp : $e77f          59263
 df_rt_str_comp_byte : $e784          59268
   df_rt_str_comp_eq : $e799          59289
df_rt_str_comp_false : $e754          59220
   df_rt_str_comp_gt : $e796          59286
   df_rt_str_comp_lt : $e793          59283
 df_rt_str_comp_true : $e757          59223
    df_rt_str_cpy_ch : $f383          62339
   df_rt_str_extract : $f370          62320
           df_rt_sub : $e5df          58847
          df_rt_sval : $e131          57649
          df_rt_text : $ebcb          60363
         df_rt_tload : $f0f6          61686
      df_rt_tokenjmp : $e4d9          58585
          df_rt_true : $e6cf          59087
         df_rt_tsave : $f0dc          61660
df_rt_unexpected_end : $e3e3          58339
         df_rt_until : $e96a          59754
df_rt_untilnext_done : $e97d          59773
     df_rt_until_err : $e985          59781
           df_rt_val : $f44f          62543
       df_rt_val_err : $f463          62563
          df_rt_wait : $ec22          60450
  df_rt_wait_counter : $ec26          60454
     df_rt_wait_done : $ec37          60471
   df_rt_wait_skiphi : $ec30          60464
     df_rt_wait_tick : $ec28          60456
          df_rt_wend : $e805          59397
      df_rt_wend_end : $e803          59395
      df_rt_wend_err : $e819          59417
         df_rt_while : $e7a2          59298
     df_rt_while_cmd : $e7d8          59352
    df_rt_while_done : $e7b2          59314
         df_sevalptr : $007a            122
    df_show_err_done : $f81f          63519
     df_show_err_fin : $f7fe          63486
    df_show_err_find : $f7b2          63410
  df_show_err_linnum : $f7e5          63461
    df_show_err_skip : $f7b6          63414
               df_sp : $005f             95
          df_starend : $0074            116
         df_starstrt : $0072            114
AS65 Assembler for R6502 [1.42].                                     Page   14
-------------------------------- bank\bank0.s --------------------------------

         df_strbuffz : $0078            120
          df_stridxz : $0079            121
      df_str_src_end : $f398          62360
        df_st_malloc : $f689          63113
df_st_typemismatcherr : $f675          63093
          df_syminiz : $0084            132
           df_symoff : $0083            131
           df_symtab : $0081            129
         df_tk_abort : $de66          56934
           df_tk_add : $de66          56934
          df_tk_addr : $de43          56899
           df_tk_and : $de66          56934
        df_tk_arrvar : $d826          55334
           df_tk_asc : $de39          56889
           df_tk_asl : $de66          56934
 df_tk_asm_addr_mode : $f90e          63758
df_tk_asm_addr_mode_ok : $f8fd          63741
df_tk_asm_addr_mode_1 : $f923          63779
df_tk_asm_addr_mode_2 : $f92d          63789
df_tk_asm_checknexttok : $f8b6          63670
df_tk_asm_checktokch : $f8b8          63672
        df_tk_asm_db : $ddcd          56781
        df_tk_asm_ds : $de6b          56939
        df_tk_asm_dw : $ddcd          56781
df_tk_asm_exec_parser : $f8ff          63743
df_tk_asm_foundsymend : $f8de          63710
  df_tk_asm_matchtok : $f8a8          63656
  df_tk_asm_mnemonic : $f89d          63645
       df_tk_asm_opt : $de6b          56939
       df_tk_asm_org : $de6b          56939
df_tk_asm_parse_command : $f87a          63610
df_tk_asm_parse_command_err : $f89c          63644
df_tk_asm_parse_command_symbol : $f8a3          63651
  df_tk_asm_symfound : $f8f1          63729
df_tk_asm_symnextentry : $f8cf          63695
df_tk_asm_symnomatch : $f8cd          63693
  df_tk_asm_tokenjmp : $febd          65213
        df_tk_assign : $dd76          56694
         df_tk_bload : $de71          56945
          df_tk_body : $d992          55698
         df_tk_bsave : $de7b          56955
          df_tk_call : $de58          56920
      df_tk_callproc : $de2d          56877
          df_tk_char : $d77e          55166
      df_tk_char_err : $d726          55078
         df_tk_chdir : $de6b          56939
  df_tk_checknexttok : $da1e          55838
    df_tk_checktokch : $da3b          55867
           df_tk_chr : $de39          56889
        df_tk_circle : $de7b          56955
     df_tk_closebrkt : $de3e          56894
           df_tk_cls : $de66          56934
        df_tk_colour : $de7b          56955
       df_tk_comment : $dd7f          56703
  df_tk_comment_done : $dd8a          56714
         df_tk_const : $d7bc          55228
     df_tk_const_err : $d7dc          55260
df_tk_const_try_char : $d7d5          55253
 df_tk_const_try_num : $d7cb          55243
 df_tk_const_try_str : $d7ce          55246
        df_tk_cursor : $de6b          56939
          df_tk_data : $ddcd          56781
AS65 Assembler for R6502 [1.42].                                     Page   15
-------------------------------- bank\bank0.s --------------------------------

     df_tk_data_done : $ddcb          56779
          df_tk_deek : $de39          56889
           df_tk_def : $de11          56849
           df_tk_del : $de6b          56939
           df_tk_dim : $ddf3          56819
           df_tk_dir : $de66          56934
           df_tk_div : $de66          56934
          df_tk_doke : $de71          56945
          df_tk_done : $d9c1          55745
       df_tk_elapsed : $de43          56899
          df_tk_else : $de66          56934
        df_tk_elseif : $de6b          56939
        df_tk_enddef : $de66          56934
         df_tk_endif : $de66          56934
           df_tk_eor : $de66          56934
            df_tk_eq : $de66          56934
         df_tk_error : $dd74          56692
      df_tk_errortab : $f6e4          63204
        df_tk_error2 : $de37          56887
   df_tk_error_atpos : $f78b          63371
   df_tk_error_error : $f791          63377
  df_tk_error_inline : $f781          63361
   df_tk_exec_parser : $d9e3          55779
        df_tk_expect : $d71a          55066
      df_tk_expectok : $d718          55064
    df_tk_expect_tok : $d728          55080
df_tk_expect_tok_err : $d733          55091
df_tk_expect_tok_fatal : $d738          55096
    df_tk_expression : $d925          55589
     df_tk_expre_err : $d930          55600
     df_tk_expr_more : $ddd2          56786
           df_tk_for : $de16          56854
   df_tk_foundsymend : $da6a          55914
           df_tk_get : $de39          56889
       df_tk_get_buf : $d6a8          54952
  df_tk_get_buf_null : $d6b2          54962
            df_tk_gt : $de66          56934
           df_tk_gte : $de66          56934
         df_tk_hchar : $de7b          56955
           df_tk_hex : $de39          56889
         df_tk_himem : $de6b          56939
         df_tk_hires : $de66          56934
            df_tk_if : $de6b          56939
           df_tk_imm : $f943          63811
      df_tk_indirect : $f946          63814
 df_tk_indirect_done : $f96b          63851
    df_tk_indirect_y : $f95a          63834
           df_tk_ink : $de6b          56939
         df_tk_input : $dddb          56795
       df_tk_isalpha : $d6eb          55019
    df_tk_isalphanum : $d6f8          55032
 df_tk_isalpha_false : $d6e8          55016
         df_tk_isbin : $d6cc          54988
    df_tk_isbin_true : $d6d5          54997
       df_tk_isdigit : $d6c1          54977
 df_tk_isdigit_false : $d6ca          54986
         df_tk_isEOS : $d937          55607
         df_tk_ishex : $d6d6          54998
   df_tk_ishex_false : $d6e8          55016
   df_tk_ishex_truep : $d6e6          55014
        df_tk_isproc : $d6fe          55038
   df_tk_isproc_true : $d703          55043
AS65 Assembler for R6502 [1.42].                                     Page   16
-------------------------------- bank\bank0.s --------------------------------

          df_tk_isws : $d713          55059
    df_tk_isws_false : $d718          55064
          df_tk_left : $de4c          56908
           df_tk_len : $de39          56889
          df_tk_line : $de83          56963
       df_tk_linenum : $d9f2          55794
        df_tk_lineto : $de71          56945
    df_tk_line_empty : $d9df          55775
          df_tk_list : $ddaf          56751
df_tk_listp_procname : $dd8c          56716
df_tk_listp_procname_ch : $dd9b          56731
df_tk_listp_procname_err : $ddad          56749
df_tk_listp_procname_ok : $ddac          56748
     df_tk_list_done : $ddbf          56767
     df_tk_list_line : $ddbb          56763
    df_tk_list_procs : $ddb4          56756
          df_tk_load : $de6b          56939
         df_tk_local : $de02          56834
      df_tk_localvar : $d810          55312
 df_tk_localvar_cont : $d816          55318
           df_tk_lsr : $de66          56934
            df_tk_lt : $de66          56934
           df_tk_lte : $de66          56934
      df_tk_matchtok : $da11          55825
df_tk_matchtok_skip_op : $da37          55863
           df_tk_mem : $de39          56889
           df_tk_mid : $de52          56914
           df_tk_mod : $de66          56934
       df_tk_monitor : $de66          56934
          df_tk_mult : $de66          56934
         df_tk_music : $de83          56963
         df_tk_narry : $d8a5          55461
     df_tk_narry_end : $d8b2          55474
         df_tk_nbrkt : $d8b7          55479
            df_tk_ne : $de66          56934
           df_tk_new : $de66          56934
          df_tk_next : $de66          56934
     df_tk_next_expr : $ddcd          56781
           df_tk_nop : $d910          55568
     df_tk_nop_false : $d8cf          55503
       df_tk_not_eos : $d92f          55599
         df_tk_nterm : $d8c4          55492
    df_tk_nterm_cont : $d8d1          55505
    df_tk_nterm_done : $d8cf          55503
     df_tk_nterm_err : $d90e          55566
    df_tk_nterm_proc : $d8bf          55487
   df_tk_nterm_tryfn : $d8de          55518
df_tk_nterm_try_const : $d908          55560
df_tk_nterm_try_proc : $d8f4          55540
 df_tk_nterm_try_var : $d900          55552
           df_tk_num : $d73a          55098
       df_tk_num_bin : $d769          55145
       df_tk_num_err : $d726          55078
    df_tk_num_hexbin : $d75b          55131
       df_tk_num_put : $d771          55153
            df_tk_or : $de66          56934
         df_tk_paper : $de6b          56939
          df_tk_parm : $d7fe          55294
 df_tk_parm_skip_var : $d80b          55307
    df_tk_parseerror : $d9e1          55777
 df_tk_parse_command : $d951          55633
df_tk_parse_command_done : $d967          55655
AS65 Assembler for R6502 [1.42].                                     Page   17
-------------------------------- bank\bank0.s --------------------------------

df_tk_parse_command_err : $d968          55656
df_tk_parse_user_proc : $d947          55623
          df_tk_peek : $de39          56889
      df_tk_peek_buf : $d6a2          54946
         df_tk_pixel : $de4c          56908
       df_tk_pixmode : $de6b          56939
          df_tk_play : $de83          56963
          df_tk_plot : $de7b          56955
         df_tk_point : $de71          56945
          df_tk_poke : $de71          56945
     df_tk_preassign : $dd64          56676
         df_tk_print : $ddc6          56774
       df_tk_printat : $ddc0          56768
       df_tk_println : $ddc6          56774
    df_tk_print_done : $ddcb          56779
          df_tk_proc : $d831          55345
     df_tk_proc_call : $d86d          55405
    df_tk_proc_comma : $d887          55431
      df_tk_proc_err : $d8a3          55459
     df_tk_proc_errp : $d8a2          55458
   df_tk_proc_noparm : $d890          55440
    df_tk_proc_parms : $d860          55392
df_tk_proc_skip_args : $d8a0          55456
df_tk_proc_skip_call : $d876          55414
  df_tk_put_overflow : $d6bf          54975
       df_tk_put_tok : $d6b3          54963
          df_tk_read : $dde4          56804
         df_tk_renum : $de7b          56955
        df_tk_repeat : $de66          56934
         df_tk_reset : $de2f          56879
        df_tk_return : $de68          56936
         df_tk_right : $de4c          56908
           df_tk_rnd : $de39          56889
          df_tk_rts1 : $d6fd          55037
           df_tk_run : $de66          56934
          df_tk_save : $de6b          56939
          df_tk_scrn : $de4c          56908
           df_tk_sgn : $de39          56889
       df_tk_skip_ws : $d704          55044
    df_tk_skip_1_spc : $d9a5          55717
         df_tk_sound : $de7b          56955
       df_tk_sprchar : $de71          56945
        df_tk_sprhit : $de39          56889
       df_tk_sprinit : $de66          56934
     df_tk_spritepos : $de7b          56955
      df_tk_sprmulti : $de71          56945
        df_tk_sprpos : $de7b          56955
        df_tk_sprupd : $de66          56934
         df_tk_stick : $de3e          56894
           df_tk_str : $d79a          55194
        df_tk_str_ch : $d7a2          55202
       df_tk_str_don : $d7b3          55219
       df_tk_str_err : $d7ba          55226
           df_tk_sub : $de66          56934
      df_tk_symfound : $da7b          55931
df_tk_symfound_final : $da8b          55947
  df_tk_symnextentry : $da5b          55899
    df_tk_symnomatch : $da59          55897
   df_tk_symnomatchp : $da58          55896
          df_tk_text : $de66          56934
         df_tk_tload : $de6b          56939
      df_tk_tokenjmp : $dc2d          56365
AS65 Assembler for R6502 [1.42].                                     Page   18
-------------------------------- bank\bank0.s --------------------------------

     df_tk_tokentype : $dcf3          56563
df_tk_tok_expression : $d931          55601
    df_tk_try_assign : $d9bc          55740
   df_tk_try_command : $d9b7          55735
         df_tk_tsave : $de6b          56939
         df_tk_until : $de6b          56939
           df_tk_val : $de39          56889
           df_tk_var : $d7de          55262
      df_tk_variable : $dd56          56662
        df_tk_var_ck : $d7f4          55284
      df_tk_var_cont : $d7e4          55268
    df_tk_var_noarry : $d7b8          55224
         df_tk_vpeek : $de39          56889
          df_tk_wait : $de6b          56939
          df_tk_wend : $de66          56934
         df_tk_while : $de6b          56939
      df_tk_ws_loop1 : $d704          55044
        df_tk_2parms : $de71          56945
        df_tk_3parms : $de7b          56955
        df_tk_4parms : $de83          56963
          df_tmpptra : $00a1            161
          df_tmpptrb : $00a3            163
          df_tmpptrc : $00a5            165
          df_tmpptrd : $00a7            167
          df_tmpptre : $00a9            169
              df_tok : $0480           1152
          df_tokbuff : $0480           1152
        df_tokensyms : $da93          55955
           df_tokoff : $007d            125
       df_trap_error : $f798          63384
  df_trap_go_monitor : $f7ad          63405
     df_trap_monitor : $f826          63526
      df_trap_normal : $f7b0          63408
           df_varcnt : $0071            113
      df_var_analyse : $d5dc          54748
df_var_analyse_chk_arry : $d623          54819
df_var_analyse_chk_dollar : $d614          54804
df_var_analyse_chk_post : $d614          54804
  df_var_analyse_err : $d60a          54794
df_var_analyse_fatal_err : $d612          54802
   df_var_analyse_ok : $d669          54889
   df_var_check_type : $d551          54609
         df_var_find : $d517          54551
   df_var_findcreate : $d63d          54845
df_var_findcreate_copy : $d68b          54923
df_var_findcreate_create : $d656          54870
df_var_findcreate_err : $d667          54887
df_var_findcreate_errp : $d666          54886
df_var_findcreate_found : $d64f          54863
  df_var_find_no_vnt : $d575          54645
    df_var_find_true : $d57a          54650
df_var_initialise_var : $d676          54902
 df_var_insert_space : $d582          54658
    df_var_match_vnt : $d527          54567
 df_var_match_vnt_do : $d533          54579
df_var_match_vnt_sym : $d537          54583
    df_var_move_byte : $d5a4          54692
 df_var_move_byte_do : $d5b0          54704
df_var_move_byte_fin : $d5c1          54721
     df_var_not_arry : $d634          54836
     df_var_not_proc : $d5ee          54766
df_var_type_countlen : $d5f1          54769
AS65 Assembler for R6502 [1.42].                                     Page   19
-------------------------------- bank\bank0.s --------------------------------

df_var_type_countlen_alphanum : $d601          54785
df_var_type_countlen_done : $d606          54790
df_var_vnt_entry_end : $d562          54626
df_var_vnt_sym_nomatch : $d555          54613
     df_var_zero_vnt : $d682          54914
           df_vntend : $006b            107
          df_vntstrt : $0069            105
           df_vvtend : $006f            111
          df_vvtstrt : $006d            109
               errno : $005d             93
 fd_cload_getname_pc : $c58c          50572
 fd_csave_getname_pc : $c5e1          50657
     fd_getname_addr : $0400           1024
               grc_d : $0043             67   *
               grc_r : $003f             63   *
               grc_x : $0040             64   *
              grc_x0 : $003d             61   *
               grc_y : $0042             66   *
              grc_y0 : $003e             62   *
              grl_dx : $0041             65   *
              grl_dy : $0042             66   *
               grl_p : $004b             75   *
            grl_sinx : $004a             74   *
            grl_siny : $004d             77   *
            grl_xyyx : $0043             67   *
              grl_x0 : $003d             61   *
              grl_x1 : $003f             63   *
              grl_y0 : $003e             62   *
              grl_y1 : $0040             64   *
             grl_2dx : $0044             68   *
            grl_2dxy : $0048             72   *
             grl_2dy : $0046             70   *
             gr_char : $0003              3
  gr_check_font_copy : $cca8          52392
gr_check_font_copy_done : $ccbf          52415
           gr_circle : $d097          53399
      gr_circle_done : $d0d4          53460
    gr_circle_d_lte0 : $d0c7          53447
      gr_circle_plot : $d0a4          53412
    gr_circle_points : $d0d5          53461
              gr_cls : $cd93          52627
          gr_cls_col : $cdb3          52659
          gr_cls_row : $cd9f          52639
    gr_cls_skip_marg : $cdaf          52655
        gr_copy_byte : $cc7f          52351
         gr_copy_mem : $cc75          52341
         gr_cur_down : $ced8          52952
         gr_cur_left : $ceba          52922
          gr_cur_ptr : $000c             12
        gr_cur_right : $cea8          52904
  gr_cur_skip_at_bot : $cee4          52964
 gr_cur_skip_at_left : $cec9          52937
   gr_cur_skip_at_tl : $cecd          52941
           gr_cur_up : $cece          52942
            gr_cur_x : $000a             10
            gr_cur_y : $000b             11
              gr_del : $cee5          52965
       gr_geom_fill1 : $0007              7
         gr_geom_tmp : $0015             21
        gr_geom_tmp2 : $0017             23
              gr_get : $cdfa          52730
       gr_getXY_base : $cdd7          52695
AS65 Assembler for R6502 [1.42].                                     Page   20
-------------------------------- bank\bank0.s --------------------------------

          gr_get_key : $ceed          52973
        gr_get_key_2 : $cef1          52977
            gr_hchar : $cfa6          53158
   gr_hchar_copyline : $cffe          53246
gr_hchar_copyline_eor : $d014          53268
gr_hchar_copyline_erase : $d024          53284
gr_hchar_copyline_nx : $d039          53305
    gr_hchar_getfont : $cfd9          53209
       gr_hchar_mask : $cfd1          53201
    gr_hchar_rot1bit : $cfe3          53219
gr_hchar_rot1bit_bcc : $cfee          53230
 gr_hchar_rot1bit_nx : $cff3          53235
            gr_hcode : $cf8c          53132
       gr_hcode_loop : $cf92          53138
          gr_hires_x : $0010             16
          gr_hires_y : $0011             17
         gr_hi_start : $0001              1
             gr_init : $cc8f          52367
        gr_init_font : $cc5f          52319
        gr_init_geom : $ccc0          52416
   gr_init_geom_done : $ccbf          52415
       gr_init_hires : $cd16          52502
gr_init_hires_tables : $cd4f          52559
  gr_init_screen_txt : $ccfd          52477
     gr_init_tab_col : $cd7b          52603
gr_init_tab_col_skip : $cd8d          52621
     gr_init_tab_row : $cd59          52569
              gr_ink : $0012             18
    gr_key_check_key : $cefd          52989
      gr_key_got_key : $cf14          53012
       gr_key_no_key : $cf1f          53023
    gr_key_skip_copy : $cf05          52997
      gr_key_tidy_up : $cf16          53014
             gr_line : $d14d          53581
        gr_line_done : $d227          53799
       gr_line_neg_p : $d217          53783
       gr_line_pixel : $d1e0          53728
 gr_line_skip_dx_neg : $d16b          53611
 gr_line_skip_dy_neg : $d178          53624
   gr_line_skip_left : $d1a8          53672
gr_line_skip_xy_swap : $d198          53656
   gr_line_skip_y_up : $d1b0          53680
     gr_line_yx_skip : $d1ec          53740
           gr_margin : $0014             20
             gr_mode : $0000              0
           gr_new_ln : $ce90          52880
       gr_nl_skip_nl : $cea5          52901
       gr_no_special : $cf34          53044
      gr_offset_40hi : $d244          53828
      gr_offset_40lo : $d228          53800
            gr_paper : $0013             19
            gr_pitch : $000f             15
            gr_pixel : $d060          53344
          gr_pixmode : $000e             14
             gr_plot : $cde7          52711
            gr_point : $d066          53350
       gr_point_done : $d096          53398
        gr_point_eor : $d092          53394
      gr_point_setup : $d048          53320
  gr_point_skip_attr : $d088          53384
      gr_point_write : $d094          53396
        gr_printable : $cf58          53080
AS65 Assembler for R6502 [1.42].                                     Page   21
-------------------------------- bank\bank0.s --------------------------------

        gr_print_msg : $cf77          53111
   gr_print_msg_done : $cf87          53127
   gr_print_msg_loop : $cf7d          53117
  gr_process_special : $cf3d          53053
              gr_put : $cdef          52719
         gr_put_byte : $cf23          53027
     gr_put_byte_low : $cf35          53045
           gr_screen : $0018             24
         gr_scrngeom : $0011             17
    gr_scrngeom_base : $cccf          52431
   gr_scrngeom_hires : $cce4          52452
    gr_scrngeom_text : $ccd5          52437
      gr_scroll_char : $ce52          52818
    gr_scroll_cpy_ln : $ce4f          52815
  gr_scroll_erase_ln : $ce86          52870
      gr_scroll_marg : $ce82          52866
   gr_scroll_routine : $ce99          52889
        gr_scroll_up : $ce33          52787
          gr_set_cur : $ce00          52736
     gr_set_cur_init : $ce01          52737
     gr_set_cur_skip : $ce13          52755
    gr_set_hires_cur : $d05b          53339
       gr_special_ch : $cf5e          53086
    gr_special_fn_hi : $cf6f          53103
    gr_special_fn_lo : $cf67          53095
     gr_special_loop : $cf41          53057
         gr_spr_char : $d2d3          53971
         gr_spr_draw : $d2b2          53938
    gr_spr_draw_loop : $d2b4          53940
    gr_spr_draw_next : $d2c0          53952
        gr_spr_erase : $d26e          53870
     gr_spr_erase_do : $d276          53878
   gr_spr_erase_loop : $d270          53872
   gr_spr_erase_next : $d27c          53884
          gr_spr_hit : $d2d9          53977
         gr_spr_init : $d260          53856
    gr_spr_init_loop : $d262          53858
   gr_spr_multi_loop : $d2f4          54004
    gr_spr_multi_pos : $d2f0          54000
          gr_spr_new : $d280          53888
     gr_spr_new_loop : $d282          53890
     gr_spr_new_next : $d2ae          53934
          gr_spr_pos : $d2e3          53987
          gr_spr_put : $d2c4          53956
           gr_text_h : $0009              9
       gr_text_start : $0005              5
           gr_text_w : $0008              8
              HICHAR : $9800          38912   *
              HISCRN : $a000          40960   *
              HITEXT : $bf68          49000   *
          hex_to_bcd : $c364          50020
 hex_to_bcd_skip_neg : $c375          50037
           hires_col : $9d90          40336   *
          hires_mask : $9e80          40576   *
        hires_row_hi : $9cc8          40136   *
       hires_row_low : $9c00          39936   *
                 IER : $000e             14   *
                 IFR : $000d             13   *
             IFR_CA1 : $0002              2   *
             IFR_CA2 : $0001              1   *
             IFR_CB1 : $0010             16   *
                IO_0 : $0300            768   *
AS65 Assembler for R6502 [1.42].                                     Page   22
-------------------------------- bank\bank0.s --------------------------------

       inc_kb_timers : $c166          49510
            infinity : $c07e          49278
                init : $c4d9          50393
            init_irq : $c0cd          49357
       init_keyboard : $c767          51047
            init_ram : $c505          50437
       init_ram_fill : $c512          50450
       init_ram_skip : $c517          50455
          init_ram_1 : $c50e          50446
            init_snd : $d42a          54314
       init_snd_regs : $d42c          54316
       init_tape_tab : $c54f          50511
           init_via0 : $c525          50469
      init_via0_done : $c537          50487
      init_via0_loop : $c527          50471
       init_via0_tab : $c538          50488
      init_via0_tape : $c522          50466
              init_2 : $c4de          50398
             int_div : $d4b4          54452
       int_div_cycle : $d4e6          54502
      int_div_noflip : $d516          54550
        int_div_skip : $d500          54528
   int_div_skip_negA : $d4cb          54475
   int_div_skip_negB : $d4de          54494
       int_fast_mult : $d460          54368
 int_fast_mult_cycle : $d470          54384
  int_fast_mult_next : $d481          54401
            int_mult : $d489          54409
      int_mult_cycle : $d499          54425
       int_mult_next : $d4ac          54444
         int_vdp_fin : $c15b          49499
     int_vdp_handler : $c140          49472
    io_active_device : $c42b          50219
          io_address : $0300            768
            io_block : $0601           1537
           io_buf_sz : $c4b7          50359
            io_close : $c45d          50269
          io_close_f : $0008              8
        io_copy_data : $c438          50232
          io_default : $0600           1536
           io_delete : $c460          50272
            io_del_f : $000a             10
          io_devices : $c4b9          50361
          io_device0 : $c4b9          50361
          io_device1 : $c4c9          50377
          io_do_echo : $c480          50304
             io_ext1 : $000c             12
             io_ext2 : $000e             14
         io_get_byte : $0000              0
           io_get_ch : $c451          50257
    io_get_line_byte : $c46d          50285
    io_get_line_done : $c49a          50330
             io_init : $c420          50208
          io_null_op : $c4b5          50357
        io_open_ext1 : $c463          50275
        io_open_ext2 : $c466          50278
           io_open_r : $0004              4
        io_open_read : $c457          50263
           io_open_w : $0006              6
       io_open_write : $c45a          50266
       io_print_done : $c4b3          50355
       io_print_line : $c4a2          50338
AS65 Assembler for R6502 [1.42].                                     Page   23
-------------------------------- bank\bank0.s --------------------------------

  io_print_line_byte : $c4a9          50345
         io_put_byte : $0002              2
           io_put_ch : $c454          50260
        io_read_line : $c469          50281
      io_set_default : $c428          50216
        io_skip_echo : $c483          50307
     io_skip_special : $c48e          50318
           io_struct : $0010             16
                 irq : $c0f1          49393
             irq_brk : $c113          49427
             irq_fin : $c10d          49421
           KB_CAPSLK : $0001              1   *
         KB_DEBOUNCE : $0001              1   *
          KB_REP_DEL : $0014             20   *
          KB_REP_TIM : $0003              3   *
            KB_SENSE : $0008              8   *
          kb_any_key : $c7a0          51104
     kb_any_key_none : $c7be          51134
  kb_any_key_pressed : $c7c0          51136
      kb_any_key_row : $c7a7          51111
              kb_brk : $c8b2          51378
 kb_check_matrix_col : $c7da          51162
 kb_check_matrix_row : $c7dc          51164
      kb_check_skip4 : $c802          51202
             kb_code : $002b             43
         kb_col_mask : $c952          51538
              kb_deb : $002d             45
          kb_deb_tim : $002e             46
        kb_do_repeat : $c8a2          51362
          kb_get_key : $c8b4          51380
          kb_get_try : $c8b8          51384
        kb_in_repeat : $c8ae          51374
             kb_last : $002a             42
          kb_no_scan : $c835          51253
      kb_process_new : $c843          51267
              kb_raw : $0029             41
         kb_rdel_tim : $0031             49
         kb_read_got : $c7c0          51136
     kb_read_noshift : $c870          51312
     kb_read_nothing : $c80d          51213
         kb_read_raw : $c7c2          51138
   kb_read_raw_force : $c7c7          51143
     kb_read_raw_got : $c811          51217
              kb_rep : $002f             47
          kb_rep_tim : $0030             48
      kb_scan_decode : $c839          51257
     kb_scan_got_key : $c8c9          51401
         kb_scan_key : $c81e          51230
        kb_skip_ctrl : $c88c          51340
             kb_stat : $002c             44
            kb_stick : $c778          51064
       kb_stick_mask : $c95a          51546
        kb_stick_pos : $c787          51079
       kb_store_last : $c8aa          51370
      kb_table_shift : $c912          51474
        kb_table_std : $c8d2          51410
         kernel_init : $c4e7          50407
         kernel_test : $c504          50436
                main : $c077          49271
           mem_start : $0713           1811
        mod_sz_asm_e : $feda          65242
        mod_sz_asm_s : $f87a          63610
AS65 Assembler for R6502 [1.42].                                     Page   24
-------------------------------- bank\bank0.s --------------------------------

       mod_sz_bios_e : $d460          54368
       mod_sz_bios_s : $c000          49152
        mod_sz_cia_e : $c55e          50526
        mod_sz_cia_s : $c522          50466
      mod_sz_dflat_e : $f6e4          63204
      mod_sz_dflat_s : $d517          54551
      mod_sz_graph_e : $d304          54020
      mod_sz_graph_s : $c95f          51551
         mod_sz_io_e : $c4d9          50393
         mod_sz_io_s : $c420          50208
     mod_sz_kernel_e : $c522          50466
     mod_sz_kernel_s : $c000          49152
   mod_sz_language_e : $feda          65242
   mod_sz_language_s : $d460          54368
       mod_sz_proc_e : $f604          62980
       mod_sz_proc_s : $f4a1          62625
   mod_sz_progedit_e : $dfff          57343
   mod_sz_progedit_s : $de8e          56974
      mod_sz_rtasm_e : $fc6f          64623
      mod_sz_rtasm_s : $f96d          63853
     mod_sz_rtsubs_e : $f4a1          62625
     mod_sz_rtsubs_s : $e5c5          58821
    mod_sz_runtime_e : $f604          62980
    mod_sz_runtime_s : $dfff          57343
      mod_sz_sound_e : $d460          54368
      mod_sz_sound_s : $d413          54291
     mod_sz_sprite_e : $d304          54020
     mod_sz_sprite_s : $d260          53856
      mod_sz_tkasm_e : $f96d          63853
      mod_sz_tkasm_s : $f87a          63610
   mod_sz_tokenise_e : $de8e          56974
   mod_sz_tokenise_s : $d6a2          54946
    mod_sz_toksubs_e : $de8e          56974
    mod_sz_toksubs_s : $dd56          56662
        mod_sz_var_e : $d6a2          54946
        mod_sz_var_s : $d517          54551
          msg_errmsg : $d410          54288
     msg_hello_world : $c081          49281
           msg_ready : $d40e          54286
             NUM_ANY : $0000              0   *
             NUM_BIN : $0003              3   *
             NUM_DEC : $0001              1   *
             NUM_HEX : $0002              2   *
                 nmi : $c521          50465
        null_handler : $c0f0          49392
            null_irq : $c0ef          49391
               num_a : $003d             61
               num_b : $0041             65
             num_buf : $004d             77
             num_tmp : $0049             73
               num_x : $0045             69
             out_bcd : $c3cf          50127
       out_bcd_digit : $c3d7          50135
         out_bcd_fin : $c3f7          50167
        out_bcd_next : $c3e9          50153
       out_bcd_print : $c3e5          50149
                 PCR : $000c             12   *
                 PRA : $0001              1   *
                PRAH : $000f             15   *
                 PRB : $0000              0   *
        print_a_to_d : $c3fd          50173
print_a_to_d_skip_neg : $c416          50198
AS65 Assembler for R6502 [1.42].                                     Page   25
-------------------------------- bank\bank0.s --------------------------------

           SND_ADBUS : $030f            783   *
        SND_DESELECT : $00dd            221   *
            SND_MODE : $030c            780   *
       SND_REG_CHAPH : $0001              1   *
       SND_REG_CHAPL : $0000              0   *
      SND_REG_CHAVOL : $0008              8   *
       SND_REG_CHBPH : $0003              3   *
       SND_REG_CHBPL : $0002              2   *
      SND_REG_CHBVOL : $000a             10   *
       SND_REG_CHCPH : $0005              5   *
       SND_REG_CHCPL : $0004              4   *
        SND_REG_CHNP : $0006              6   *
         SND_REG_CTL : $0007              7   *
      SND_REG_ENVCYC : $000d             13   *
       SND_REG_ENVPH : $000c             12   *
       SND_REG_ENVPL : $000b             11   *
         SND_REG_IOA : $000e             14   *
         SND_REG_IOB : $000f             15   *
         SND_SELREAD : $00df            223   *
      SND_SELSETADDR : $00ff            255   *
        SND_SELWRITE : $00fd            253   *
                  SR : $000a             10   *
               SWBRK : <macro>
             scratch : $0613           1555
          skip_a_f_1 : $c1a4          49572
          skip_a_f_2 : $c1b3          49587
         skip_kb_deb : $c16c          49516
         skip_kb_rep : $c172          49522
          skip_x_f_1 : $c1bf          49599
          skip_x_f_2 : $c1d4          49620
        snd_get_note : $d413          54291
    snd_get_note_oct : $d41e          54302
        snd_init_tab : $d436          54326
       snd_music_tab : $d446          54342
       snd_note_done : $d427          54311
         snd_sel_reg : $c04e          49230
             snd_set : $c06e          49262
         snd_set_reg : $c05e          49246
        spr_baseadrh : $b4e0          46304   *
        spr_baseadrl : $b4c0          46272   *
            spr_bgnd : $b4a0          46240   *
             spr_chr : $b480          46208   *
            spr_curX : $b400          46080   *
            spr_curY : $b440          46144   *
            spr_newX : $b420          46112   *
            spr_newY : $b460          46176   *
          str_a_to_x : $c198          49560
   str_d_digits_done : $c2d4          49876
         str_d_error : $c280          49792
      str_d_find_end : $c28f          49807
     str_d_found_end : $c29c          49820
        str_d_powers : $c2f1          49905
 str_d_process_digit : $c2aa          49834
      str_d_skip_neg : $c2eb          49899
          str_x_to_a : $c1b4          49588
      str_x_to_a_err : $c1df          49631
     str_x_to_a_errl : $c1de          49630
           TAPE_RATE : $00d0            208   *
            TEXTCHAR : $b400          46080   *
            TEXTSCRN : $bb80          48000   *
         TIMER1_RATE : $4e20          20000   *
                T1CH : $0005              5   *
AS65 Assembler for R6502 [1.42].                                     Page   26
-------------------------------- bank\bank0.s --------------------------------

                T1CL : $0004              4   *
                T1LH : $0007              7   *
                T1LL : $0006              6   *
                T2CH : $0009              9   *
                T2CL : $0008              8   *
             tmp_ahi : $0033             51
             tmp_alo : $0032             50
           tmp_bank1 : $0000              0
           tmp_bank2 : $0001              1
             tmp_bhi : $0035             53
             tmp_blo : $0034             52
             tmp_chi : $0037             55
             tmp_clo : $0036             54
               tmp_d : $0038             56
            tp_back4 : $c56f          50543
            tp_block : $0055             85
        tp_block_gap : $c699          50841
      tp_block_gap_1 : $c69d          50845
              tp_buf : $0200            512
            tp_close : $c5bf          50623
   tp_close_no_flush : $c5c8          50632
            tp_delay : $0059             89
             tp_flag : $0058             88
        tp_get_block : $c719          50969
  tp_get_block_bytes : $c72a          50986
         tp_get_byte : $c6fc          50940
     tp_get_byte_buf : $c709          50953
        tp_get_fname : $c5a5          50597
  tp_get_fname_start : $c596          50582
       tp_get_header : $c59f          50591
              tp_idx : $0057             87
             tp_init : $c574          50548
         tp_io_error : $c765          51045
       tp_open_bread : $c58c          50572
      tp_open_bwrite : $c5d7          50647
      tp_open_common : $c57c          50556
         tp_open_msg : $c55e          50526
        tp_open_read : $c58c          50572
       tp_open_write : $c5dd          50653
 tp_open_write_start : $c5e1          50657
      tp_print_block : $c679          50809
        tp_put_block : $c655          50773
  tp_put_block_bytes : $c66b          50795
         tp_put_byte : $c623          50723
    tp_put_byte_done : $c646          50758
        tp_put_delay : $c64d          50765
         tp_read_bit : $c74c          51020
     tp_read_bit_cb1 : $c750          51024
        tp_read_byte : $c738          51000
   tp_read_byte_bits : $c744          51012
     tp_read_byte_st : $c738          51000
         tp_save_msg : $c567          50535
        tp_write_bit : $c6c7          50887
   tp_write_bit_chk1 : $c6d8          50904
   tp_write_bit_chk2 : $c6f0          50928
     tp_write_bit_t1 : $c6e7          50919
       tp_write_byte : $c6a4          50852
   tp_write_byte_bit : $c6b0          50864
tp_write_byte_nodelay : $c6c5          50885
      tp_write_fname : $c615          50709
     tp_write_header : $c60c          50700
     tt_csave_end_pc : $c5d5          50645
AS65 Assembler for R6502 [1.42].                                     Page   27
-------------------------------- bank\bank0.s --------------------------------

   tt_getsync_end_pc : $c5be          50622
  tt_getsync_loop_pc : $c750          51024
       tt_getsync_pc : $c5be          50622
   tt_putbyte_end_pc : $c6c6          50886
       tt_putbyte_pc : $c6a4          50852
  tt_readbyte_end_pc : $c74b          51019
      tt_readbyte_pc : $c738          51000
tt_writeleader_end_pc : $c5fd          50685
   tt_writeleader_pc : $c5fd          50685
     twos_complement : $c355          50005
twos_complement_skip_X : $c363          50019
             UTF_ACK : $0001              1   *
             UTF_BEL : $0007              7   *
             UTF_BRK : $001a             26   *
              UTF_CR : $000d             13   *
             UTF_DEL : $007f            127   *
             UTF_ETX : $0003              3   *
              UTF_FF : $000c             12   *
         UTF_SPECIAL : $0020             32   *
       update_timers : $c15c          49500
          utilPrintA : $c183          49539
       utilPrintCRLF : $c17b          49531
        utilPrintSPC : $c173          49523
           VDP_FLASH : $0010             16   *
           vdp_blank : $0010             16
             vdp_cnt : $0008              8
          vdp_cnt_hi : $0009              9
         vdp_cnt_hi2 : $000a             10
          vdp_curcnt : $000c             12
          vdp_curoff : $000d             13
         vdp_curstat : $000e             14
          vdp_curtim : $000b             11
          vdp_curval : $000f             15
  vdp_fill_vram_loop : $cd37          52535
 vdp_fill_vram_noinc : $cd3f          52543
            vdp_font : $c95f          51551
          vdp_font_a : $ca67          51815
             vec_brk : $0004              4
             vec_irq : $0002              2
        vec_usercia0 : $0006              6
             zp_tmp1 : $00ab            171
             zp_tmp2 : $00ac            172
             zp_tmp3 : $00ad            173
             zp_tmp4 : $00ae            174
             ztmp_24 : $003d             61
          _adcZPByte : <macro>
          _addZPWord : <macro>
                _bcc : <macro>
                _bcs : <macro>
           _code_end : $feda          65242
         _code_start : $c000          49152
          _cpu_stack : $0100            256
          _cpyZPWord : <macro>
              _debug : <macro>
          _decZPWord : <macro>
         _decZPWordA : <macro>
      _end_zero_page : $00af            175
          _incZPWord : <macro>
       _mod_sz_cmd_e : $d413          54291
       _mod_sz_cmd_s : $d304          54020
       _PushFalseJmp : <macro>
        _PushTrueJmp : <macro>
AS65 Assembler for R6502 [1.42].                                     Page   28
-------------------------------- bank\bank0.s --------------------------------

             _printA : <macro>
             _printC : <macro>
            _printCA : <macro>
          _printCRLF : <macro>
            _println : <macro>
        _println_low : <macro>
          _printmsgA : <macro>
            _pullAXY : <macro>
            _pushAXY : <macro>
         _rom_vec_0a : $c01e          49182
         _rom_vec_0b : $c021          49185
         _rom_vec_0c : $c024          49188
         _rom_vec_0d : $c027          49191
         _rom_vec_0e : $c02a          49194
         _rom_vec_0f : $c02d          49197
         _rom_vec_00 : $c000          49152
         _rom_vec_01 : $c003          49155
         _rom_vec_02 : $c006          49158
         _rom_vec_03 : $c009          49161
         _rom_vec_04 : $c00c          49164
         _rom_vec_05 : $c00f          49167
         _rom_vec_06 : $c012          49170
         _rom_vec_07 : $c015          49173
         _rom_vec_08 : $c018          49176
         _rom_vec_09 : $c01b          49179
         _rom_vec_10 : $c030          49200
         _rom_vec_11 : $c033          49203
         _rom_vec_12 : $c036          49206
         _rom_vec_13 : $c039          49209
         _rom_vec_14 : $c03c          49212
         _rom_vec_15 : $c03f          49215
         _rom_vec_16 : $c042          49218
         _rom_vec_17 : $c045          49221
         _rom_vec_18 : $c048          49224
         _rom_vec_19 : $c04b          49227
          _sbcZPByte : <macro>
            _sendcmd : <macro>
          _subZPWord : <macro>
            __6502__ : $0001              1

1685 labels used

15677 lines read, no errors in pass 1.
AS65 Assembler for R6502 [1.42].                                     Page   29
-------------------------------- bank\bank0.s --------------------------------

c000 =                       	org 0xc000
c000 :                       mod_sz_bios_s
                             	include "kernel/kernel.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  KERNEL.S
                             ;*	Lol, I thought this would become more sophisti
                             ;*	hence the name 'kernel'. But no, it just initi
                             ;*	memory, VIA, sound and screen, before passing 
                             ;*	to main.
                             ;*	References to banks etc. are from ported code 
                             ;*	did do more stuff, namely helping with ROM ban
                             ;*
                             ;************************************************
                             
                             ;* Include all definition and code files in the r
                             	include "inc/includes.i"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  INCLUDES.S
                             ;*  Main include file for key definitions and mac
                             ;*  Many of the settings here are exremely machin
                             ;*  Defines : IO block addresses, VIA port usage,
                             ;*  settings, useful macros, sound chip registers
                             ;*  and ACIA registers.
                             ;*	Of course the Oric doesn't have a VDP or an AC
                             ;*	so this file could be optimised.
                             ;*
                             ;************************************************
                             
                             ;* The IO block is at 0x0300
0300 =                       IO_0		= 0x0300
                             
0010 =                       VDP_FLASH	= 16				;* 32/50 second flash
                             
4e20 =                       TIMER1_RATE	= 1000000 / 50		;* 50 times per secon
00d0 =                       TAPE_RATE	= 0xd0				;* Assumed required FM freque
                             
                             ;* Standard definitions of 6522 registers
                             ;* As found in the datasheets
0000 =                       PRB			= 0x00
0001 =                       PRA			= 0x01
0002 =                       DDRB		= 0x02
0003 =                       DDRA		= 0x03
0004 =                       T1CL		= 0x04
0005 =                       T1CH		= 0x05
0006 =                       T1LL		= 0x06
0007 =                       T1LH		= 0x07
0008 =                       T2CL		= 0x08
0009 =                       T2CH		= 0x09
AS65 Assembler for R6502 [1.42].                                     Page   30
-------------------------------- bank\bank0.s --------------------------------

000a =                       SR			= 0x0a
000b =                       ACR			= 0x0b
000c =                       PCR			= 0x0c
000d =                       IFR			= 0x0d
000e =                       IER			= 0x0e
000f =                       PRAH		= 0x0f
                             
0001 =                       IFR_CA2		= 0x01
0002 =                       IFR_CA1		= 0x02
0010 =                       IFR_CB1		= 0x10
                             
                             ;* AY-3-8912 definitions
                             ;* The sound chip is accessed through VIA Port A
030f =                       SND_ADBUS	= IO_0+PRAH
030c =                       SND_MODE	= IO_0+PCR
                             
                             ; Values for the PCR register - always enable CB1
00df =                       SND_SELREAD			= 0b11011111
00fd =                       SND_SELWRITE		= 0b11111101
00ff =                       SND_SELSETADDR		= 0b11111111
00dd =                       SND_DESELECT		= 0b11011101
                             
0000 =                       SND_REG_CHAPL	= 0x00
0001 =                       SND_REG_CHAPH	= 0x01
0002 =                       SND_REG_CHBPL	= 0x02
0003 =                       SND_REG_CHBPH	= 0x03
0004 =                       SND_REG_CHCPL	= 0x04
0005 =                       SND_REG_CHCPH	= 0x05
0006 =                       SND_REG_CHNP	= 0x06
0007 =                       SND_REG_CTL		= 0x07
0008 =                       SND_REG_CHAVOL	= 0x08
0009 =                       SND_REG_CHBVOL	= 0x09
000a =                       SND_REG_CHBVOL	= 0x0a
000b =                       SND_REG_ENVPL	= 0x0b
000c =                       SND_REG_ENVPH	= 0x0c
000d =                       SND_REG_ENVCYC	= 0x0d
                             
000e =                       SND_REG_IOA	= 0x0e
000f =                       SND_REG_IOB	= 0x0f
                             
                             
                             ;* Port B
0008 =                       KB_SENSE	= 0x08			; Input - Bit 3 port A
0001 =                       KB_CAPSLK	= 0x01			; Id of Caps Lock - maps to Le
                             
0003 =                       KB_REP_TIM	= 3 			; Number of VB periods for the 
0014 =                       KB_REP_DEL	= 20			; Number of VB periods before r
0001 =                       KB_DEBOUNCE	= 1				; Number of VB periods before 
                             
0003 =                       UTF_ETX		= 0x03			; Break character
0007 =                       UTF_BEL		= 0x07
0008 =                       CRSR_LEFT	= 0x08
0009 =                       CRSR_RIGHT	= 0x09
000a =                       CRSR_DOWN	= 0x0a
000b =                       CRSR_UP		= 0x0b
0014 =                       CTRL_CAPS	= 0x14			; CTRL-T to toggle caps
0001 =                       UTF_ACK		= 0x01			; Used for the CTRL-A copy in t
000c =                       UTF_FF		= 0x0c
000d =                       UTF_CR		= 0x0d
001a =                       UTF_BRK		= 0x1a			; Debug - drop in to monitor
007f =                       UTF_DEL		= 0x7f
0020 =                       UTF_SPECIAL = 0x20
AS65 Assembler for R6502 [1.42].                                     Page   31
-------------------------------- bank\bank0.s --------------------------------

                             
0000 =                       CMD_ERR_NOERROR			= 0x00
0001 =                       CMD_ERR_NOTFOUND		= 0x01
0002 =                       CMD_ERR_PARM			= 0x02
0003 =                       CMD_ERR_VAL				= 0x03
                             
                             ;* Number formats for conversion routines
0000 =                       NUM_ANY		= 0x00
0001 =                       NUM_DEC		= 0x01
0002 =                       NUM_HEX		= 0x02
0003 =                       NUM_BIN		= 0x03
                             
                             	
                             
                             ;* USEFUL MACROS HERE
                             
                             ;* Software break to throw errors
                             ;* use like this : SWBRK XX
                             ;* Where XX is the error code
                             SWBRK macro sig
                             	brk
                             	db sig
                             	endm
                             
                             _pushAXY macro
                             	pha
                             	sta tmp_d
                             	txa
                             	pha
                             	tya
                             	pha
                             	lda tmp_d
                             	endm
                             
                             _pullAXY macro
                             	pla
                             	tay
                             	pla
                             	tax
                             	pla
                             	endm
                             
                             _println macro msg
                             	_pushAXY
                             	ldx #lo(msg)
                             	lda #hi(msg)
                             	jsr io_print_line
                             	_pullAXY
                             	endm
                             
                             _println_low macro msg
                             	ldx #lo(msg)
                             	lda #hi(msg)
                             	jsr io_print_line
                             	endm
                             
                             _printmsgA macro msg
                             	_pushAXY
                             	ldx #lo(msg)
                             	lda #hi(msg)
                             	jsr io_print_line
                             	pla
AS65 Assembler for R6502 [1.42].                                     Page   32
-------------------------------- bank\bank0.s --------------------------------

                             	pha
                             	jsr str_a_to_x
                             	jsr _put_byte
                             	txa
                             	jsr _put_byte
                             	lda #UTF_CR
                             	jsr _put_byte
                             	_pullAXY
                             	endm
                             
                             _printA macro
                             	_pushAXY
                             	jsr str_a_to_x
                             	jsr io_put_ch
                             	txa
                             	jsr io_put_ch
                             	_pullAXY
                             	endm
                             
                             _printCRLF macro
                             	pha
                             	lda #UTF_CR
                             	jsr _put_byte
                             	pla
                             	endm
                             
                             _printC macro ch
                             	pha
                             	lda #ch
                             	jsr io_put_ch
                             	pla
                             	endm
                             
                             _printCA macro
                             	pha
                             	jsr _put_byte
                             	pla
                             	endm
                             
                             _sendcmd macro cmd
                             	_pushAXY
                             	ldx #lo(cmd)
                             	lda #hi(cmd)
                             	jsr sd_sendcmd
                             	_pullAXY
                             	endm
                             
                             _incZPWord macro wordp
                             	inc wordp
                             	db	0xd0, 0x02
                             	inc wordp+1
                             	endm
                             
                             _decZPWordA macro wordp
                             	lda wordp
                             	db	0xd0, 0x02
                             	dec wordp+1
                             	dec wordp
                             	endm
                             	
                             _decZPWord macro wordp
                             	pha
AS65 Assembler for R6502 [1.42].                                     Page   33
-------------------------------- bank\bank0.s --------------------------------

                             	sec
                             	lda wordp
                             	sbc #1
                             	sta wordp
                             	lda wordp+1
                             	sbc #0
                             	sta wordp+1
                             	pla
                             	endm
                             
                             _cpyZPWord macro worda,wordb
                             	lda worda
                             	sta wordb
                             	lda worda+1
                             	sta wordb+1
                             	endm
                             	
                             _addZPWord macro worda, wordb
                             	clc
                             	lda worda
                             	adc wordb
                             	sta worda
                             	lda worda+1
                             	adc wordb+1
                             	sta worda+1
                             	endm
                             
                             _subZPWord macro worda, wordb
                             	sec
                             	lda worda
                             	sbc wordb
                             	sta worda
                             	lda worda+1
                             	sbc wordb+1
                             	sta worda+1
                             	endm
                             	
                             _adcZPByte macro worda, byte
                             	clc
                             	lda worda
                             	adc byte
                             	sta worda
                             	db 0x90, 0x02		; bcc 2
                             	inc worda+1
                             	endm
                             
                             _sbcZPByte macro worda, byte
                             	sec
                             	lda worda
                             	sbc byte
                             	sta worda
                             	db 0xb0, 0x02		; bcs 2
                             	inc worda+1
                             	endm
                             
                             _bcc macro skip
                             	db 0x90, skip
                             	endm
                             
                             _bcs macro skip
                             	db 0xb0, skip
                             	endm
AS65 Assembler for R6502 [1.42].                                     Page   34
-------------------------------- bank\bank0.s --------------------------------

                             
                             _debug macro ch
                             	pha
                             	lda #ch
                             	sta 48000
                             	pla
                             	endm
                             	
                             
                             
                             	include "inc/graph.i"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  GRAPH.I
                             ;*  This is the definition file for graphics, spe
                             ;*  The graphics screen handling module.  It is j
                             ;*  structure definition - but this structure is 
                             ;*  record the important attributes of a text scr
                             ;*	This was needed in the previous code due to 32
                             ;*	byte width screens, but Oric only  has 40, so 
                             ;*	could be optimised a little.
                             ;*
                             ;************************************************
                             
                             ; Important screen addresses for the Oric ULA
bb80 =                       TEXTSCRN	=	0xbb80
b400 =                       TEXTCHAR	=	0xb400
a000 =                       HISCRN		=	0xa000
9800 =                       HICHAR		=	0x9800
bf68 =                       HITEXT		=	0xbf68
                             
0000 =                       	struct gr_screen
0000 =                       	db gr_mode					; Text or Hires mode
0001 =                       	dw gr_hi_start				; Address fo hires screen
0003 =                       	dw gr_char					; Start address of charset
0005 =                       	dw gr_text_start			; Start of text memory
0007 =                       	db gr_geom_fill1			; (Not used, maintained for a
0008 =                       	db gr_text_w				; Number of columns
0009 =                       	db gr_text_h				; Number of rows
000a =                       	db gr_cur_x					; Current X position of cursor
000b =                       	db gr_cur_y					; Current Y position of cursor
000c =                       	dw gr_cur_ptr				; VDP address of cursor
000e =                       	db gr_pixmode				; Pixel plot mode (0=Erase, 1=P
000f =                       	db gr_pitch					; Pixel pitch for char plotting
0010 =                       	db gr_hires_x				; X pos of hires cursor
0011 =                       	db gr_hires_y				; Y pos of hires cursor
0012 =                       	db gr_ink					; Ink colour
0013 =                       	db gr_paper					; Paper colour
0014 =                       	db gr_margin				; Left margin
0015 =                       	dw gr_geom_tmp				; One word of temp storage for
0017 =                       	db gr_geom_tmp2				; One byte of temp storage fo
                             	end struct
                             	
                             ; Sprite data stored in free 256 in font space
b400 =                       spr_curX	= TEXTCHAR			; Sprite current X pos
b420 =                       spr_newX	= TEXTCHAR+32		; Sprite new X pos
AS65 Assembler for R6502 [1.42].                                     Page   35
-------------------------------- bank\bank0.s --------------------------------

b440 =                       spr_curY	= TEXTCHAR+64		; Sprite current Y pos
b460 =                       spr_newY	= TEXTCHAR+96		; Sprite new Y pos
b480 =                       spr_chr		= TEXTCHAR+128		; Sprite character
b4a0 =                       spr_bgnd	= TEXTCHAR+160		; Background character u
b4c0 =                       spr_baseadrl= TEXTCHAR+192		; Y low address of sp
b4e0 =                       spr_baseadrh= TEXTCHAR+224		; Y high address of s
                             
                             ; Tables stored in alternate character set area
                             ; only used for high-resolution screen handling
9c00 =                       hires_row_low	=	HICHAR+0x400		; Low byte of row p
9cc8 =                       hires_row_hi	=	hires_row_low+200	; High byte of r
9d90 =                       hires_col		=	hires_row_hi+200	; Pixel to byte col
9e80 =                       hires_mask		=	hires_col+240		; Pixel column to pi
                             
                             
                             	include "io/io.i"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  IO.I
                             ;*  Definitions file for the IO module.  The key 
                             ;*  used by the IO system is defined here.
                             ;*	Some over-engineering here for future possibil
                             ;*
                             ;************************************************
                             
                             ;* General IO structure allows the system to swap
                             ;* different IO devices by using indirect calls t
                             ;* the appropriate routines.
0000 =                       	struct io_struct
0000 =                       	ds	io_get_byte,	2			;* Address of get byte
0002 =                       	ds	io_put_byte,	2			;* Address of put byte
0004 =                       	ds	io_open_r,		2			;* Address of open file for r
0006 =                       	ds	io_open_w,		2			;* Address of open file for w
0008 =                       	ds	io_close_f,		2			;* Address of close file
000a =                       	ds	io_del_f,		2			;* Address of delete file
000c =                       	ds	io_ext1,		2			;* Address of extended function
000e =                       	ds	io_ext2,		2			;* Address of extended function
                             	end struct
                             	include "dflat/dflat.i"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  DFLAT.I
                             ;*  This is the main definitions file for dflat. 
                             ;*  definitions are in here to access the data st
                             ;*  used by dflat.
                             ;*
                             ;************************************************
                             
                             ;* Start dflat program memory
0713 =                       DF_PROGSTART=	mem_start
AS65 Assembler for R6502 [1.42].                                     Page   36
-------------------------------- bank\bank0.s --------------------------------

                             ;* This is the top of usable dflat memory plus 1
9800 =                       DF_MEMTOP	=	0x9800
                             
                             ;* Offset in to tokenised line of length and line
0000 =                       DFTK_LINLEN	=	0x00
0001 =                       DFTK_LINNUM	=	0x01
                             
                             ;* Flags for token, escape value for data types a
0080 =                       DFTK_TOKEN	=	0x80
0020 =                       DFTK_ESCVAL	=	0x20
0000 =                       DFTK_EOL	=	0x00
                             
                             ;* Numeric constants are encoded based on size an
                             ;* user representation.
                             ;* For example the decimal value 16 will be encod
                             ;* DFTK_INTDEC followed by the bytes 0 and 16 to 
                             ;* The same value in binary will be encoded as DF
                             ;* followed by the same 0 and 16 bytes.  This is 
                             ;* tokenised value to be displayed in original re
                             ;* So in the two examples, they will be shown as 
                             ;* '0x0010' respectively.
0000 =                       DFTK_CHR	=	0x00
0001 =                       DFTK_RESV1	=	0x01
0002 =                       DFTK_RESV2	=	0x02
0003 =                       DFTK_RESV3	=	0x03
0004 =                       DFTK_RESV4	=	0x04
0005 =                       DFTK_BYTDEC	=	0x05
0006 =                       DFTK_BYTHEX = 	0x06
0007 =                       DFTK_BYTBIN =	0x07
0008 =                       DFTK_RESV8	=	0x08
0009 =                       DFTK_INTDEC	=	0x09
000a =                       DFTK_INTHEX =	0x0a
000b =                       DFTK_INTBIN	=	0x0b
000c =                       DFTK_RESVC	=	0x0c
000d =                       DFTK_RESVD	=	0x0d
000e =                       DFTK_RESVE	=	0x0e
000f =                       DFTK_RESVF	=	0x0f
                             
                             ;* String constant, variable and procedure tokens
0010 =                       DFTK_STRLIT	=	0x10
0011 =                       DFTK_VAR	=	0x11
0012 =                       DFTK_PROC	=	0x12
001f =                       DFTK_STEND	=	0x1f
                             
                             ;* Qualifier for non-local parameters passed to a
0026 =                       DFTK_VARPARM=	'&'
                             
                             ;* Variable Value Table (VVT) definitions
                             ;* The VVT records the values of variables define
                             ;* the Variable Name Table (VNT).  When a variabl
                             ;* used, it is added to the VNT, and the position
                             ;* VNT is used as an index in to the VVT.
                             ;* Every VVT entry is 8 bytes - so the VNT index 
                             ;* shifted left 3 bits to get the VVT offset.
                             ;* The VNT grows from top of memory down, the VVT
                             ;* grows from start of VNT down.
                             
                             ;* Index in to each entry of the VVT
0000 =                       DFVVT_TYPE	=	0x00
0001 =                       DFVVT_LO	=	0x01
0002 =                       DFVVT_HI	=	0x02
0003 =                       DFVVT_DIM1	=	0x03
AS65 Assembler for R6502 [1.42].                                     Page   37
-------------------------------- bank\bank0.s --------------------------------

0004 =                       DFVVT_DIM2	=	0x04
0008 =                       DFVVT_SZ	=	0x08	;VVT is aligned to 8 byte blocks
                             
                             ;* The meaning of the DFVVT_TYPE entry
0001 =                       DFVVT_INT	=	0x01
0002 =                       DFVVT_BYT	=	0x02
0004 =                       DFVVT_STR	=	0x04
0008 =                       DFVVT_FLT	=	0x08
0040 =                       DFVVT_PROC	=	0x40
0080 =                       DFVVT_ARRY	=	0x80
                             
                             ;* Flags indicating the meaning of a token
                             ;* A token has the top bit set (0x80), then the
                             ;* remaining bits indicate what it represents.
0001 =                       DFTK_KW		=	0x01
0002 =                       DFTK_FN		=	0x02
0004 =                       DFTK_STROP	=	0x04
0008 =                       DFTK_OP		=	0x08
0010 =                       DFTK_INT	=	0x10
0020 =                       DFTK_BYT	=	0x20
0040 =                       DFTK_STR	=	0x40
0080 =                       DFTK_FLT	=	0x80
0007 =                       DFTK_OPMSK	=	0x07
00f8 =                       DFTK_RTMSK	= 	0xf8
                             
                             ;* Defines what type of value is on the parameter
                             ;* All numerics are stored as INT, all STR
                             ;* are pointers to the actual string, thus
                             ;* all entries in the parmeter stack are 3 bytes
0001 =                       DFST_INT	=	0x01
0080 =                       DFST_STR	=	0x80
                             
                             ;* Token values of specific commands, used during
                             ;* command processing.
                             ;* ANY CHANGE TO THE ORDER OF KEYWORDS NEEDS TO R
0086 =                       DFRT_DEF	=	0x86
0087 =                       DFRT_ENDDEF	=	0x87
0088 =                       DFRT_RETURN	=	0x88
0089 =                       DFRT_ABORT	=	0x89
008c =                       DFRT_REPEAT	=	0x8c
008e =                       DFRT_FOR	=	0x8e
008f =                       DFRT_NEXT	=	0x8f
0090 =                       DFRT_WHILE	=	0x90
0091 =                       DFRT_WEND	=	0x91
0092 =                       DFRT_IF		=	0x92
0093 =                       DFRT_ELSE	=	0x93
0094 =                       DFRT_ENDIF	=	0x94
0095 =                       DFRT_ELSEIF	=	0x95
0096 =                       DFRT_DATA	=	0x96
0097 =                       DFRT_ASM	=	0x97
                             
                             _PushTrueJmp macro
                             	ldx #0xff
                             	txa
                             	jmp df_st_pushInt
                             	endm
                             
                             _PushFalseJmp macro
                             	ldx #0x00
                             	txa
                             	jmp df_st_pushInt
                             	endm
AS65 Assembler for R6502 [1.42].                                     Page   38
-------------------------------- bank\bank0.s --------------------------------

                             
                             	include "kernel/zeropage.i"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  ZEROPAGE.I
                             ;*  This module name is misleading it is not only
                             ;*  allocations, but also page 2, 3, 4, 5, 6, 7 a
                             ;*  memstart is a handy label that indicates the 
                             ;*  location that we can store dflat programs fro
                             ;*  Zero page is a valuable asset as the 6502 can
                             ;*  this page one cycle quicker than the rest of 
                             ;*  and infact some addressing modes can only use
                             ;*  Due to the value of zero page, a lot of syste
                             ;*  dflat variables are put here.  But we don't h
                             ;*  luxury for single use variables - so you will
                             ;*  see a lot of temporary sounding names which a
                             ;*  have multiple uses across the code base.
                             ;*
                             ;************************************************
                             
                             	; Zero page declarations
                             	bss
0000 =                       	org 0x0000
                             
0000 =                       tmp_bank1	ds	1		; Temp storage ONLY FOR USE BY BA
0001 =                       tmp_bank2	ds	1		; Temp storage ONLY FOR USE BY BA
                             
                             ; Interrupt routine addresses
0002 =                       vec_irq		 ds	2		; Master IRQ handler
0004 =                       vec_brk		 ds	2		; Master BRK handler
0006 =                       vec_usercia0 ds	2		; Where to jump for CIA0 inter
                             
                             ; VDP parameters
0008 =                       vdp_cnt		ds	1		; VDP interrupt counter
0009 =                       vdp_cnt_hi 	ds	1		; VDP counter high
000a =                       vdp_cnt_hi2	ds	1		; VDP counter high 2
000b =                       vdp_curtim	ds	1		; Cursor blink speed
000c =                       vdp_curcnt	ds	1		; Cursor blink countdown
000d =                       vdp_curoff	ds	1		; Cursor off (0 = On)
000e =                       vdp_curstat	ds	1		; Cursor status
000f =                       vdp_curval	ds	1		; Cursor value on screen
0010 =                       vdp_blank	ds	1		; Screen blank value normally 32
                             
                             ; Screen geometry
0011 =                       gr_scrngeom	ds	gr_screen
                             
                             ;Keyboard parameters
0029 =                       kb_raw  	ds	1		; Raw keyboard code
002a =                       kb_last		ds	1		; Code of last key
002b =                       kb_code 	ds	1		; Converted keyboard code
002c =                       kb_stat		ds	1		; Keyboard status for caps and shi
002d =                       kb_deb		ds	1		; Debounce timer
002e =                       kb_deb_tim  ds	1		; Default debounce delay
002f =                       kb_rep		ds	1		; Keyboard repeat speed timer
0030 =                       kb_rep_tim 	ds	1		; Default repeat speed
0031 =                       kb_rdel_tim	ds	1		; Default repeat delay (until s
AS65 Assembler for R6502 [1.42].                                     Page   39
-------------------------------- bank\bank0.s --------------------------------

                             
0032 =                       tmp_alo 	ds	1		; VDP addresses lo
0033 =                       tmp_ahi 	ds	1		; VDP addresses hi
0034 =                       tmp_blo 	ds	1		; Temp address lo
0035 =                       tmp_bhi		ds	1		; Temp address hi
0036 =                       tmp_clo		ds	1		; Temp address lo
0037 =                       tmp_chi		ds	1		; Temp address hi
0038 =                       tmp_d		ds	1		; Temp storage d
                             
                             ; Raw input/output parameters
0039 =                       buf_lo		ds	1		; Line buffer address low
003a =                       buf_hi		ds	1		; Line buffer address high
003b =                       buf_sz		ds	1		; Buffer size
003c =                       buf_ef		ds	1		; End file / line marker
                             
                             
                             ; ** Integer function storage **
003d =                       ztmp_24					; Start of 24 byte scratch area (all 
003d =                       num_a		ds	4		; 4 byte primary accumulator
0041 =                       num_b		ds	4		; 4 byte secondary accumulator
0045 =                       num_x		ds	4		; 4 byte x register
0049 =                       num_tmp		ds	4		; 4 byte temp space
004d =                       num_buf		ds	8		; 8 byte string buffer
                             
                             ; ** Tape function storage **
0055 =                       tp_block	ds	2		; Block number (int)
0057 =                       tp_idx		ds	1		; Current buffer index
0058 =                       tp_flag		ds	1		; zero = closed, 1=read, 2=write
0059 =                       tp_delay	ds	2		; Interblock delay
                             
                             ;
                             ; **** INTERPRETER ZERO PAGE ****
                             ;
005b =                       dflat_zp_s
005b =                       dflat_zp_save_s			; ZP save dflat from here
005b =                       df_checkkey	ds	1		; Key check interval counter
005c =                       df_checkmsk	ds	1		; Mask for check key
005d =                       errno		ds	1		; General error condition status
005e =                       df_immed	ds	1		; Immediate mode (0 = not immediat
005f =                       df_sp		ds	1		; Stack pointer after error to resto
0060 =                       df_pc		ds	2		; PC after error to return to
0062 =                       df_brkpc	ds	2		; PC pushed on the stack for BRK
0064 =                       df_brkval	ds	1		; Byte after BRK instruction
0065 =                       df_prgstrt	ds	2		; Start of program code
0067 =                       df_prgend	ds	2		; End of program code
0069 =                       df_vntstrt	ds	2		; Variable name table start
006b =                       df_vntend	ds	2		; Variable name table end
006d =                       df_vvtstrt	ds	2		; Variable value table start
006f =                       df_vvtend	ds	2		; Variable value table end
0071 =                       df_varcnt	ds	1		; Variable counter
0072 =                       df_starstrt	ds	2		; String and array table start
0074 =                       df_starend	ds	2		; String and array table end
0076 =                       df_rtstop	ds	1		; Runtime stack pointer
0077 =                       df_parmtop	ds	1		; Top of parameter stack (grows 
0078 =                       df_strbuffz	ds	1		; String expression buffer (*un
0079 =                       df_stridxz	ds	1		; Top of string buffer (grows do
007a =                       df_sevalptr	ds	2		; Pointer to next free char in 
                             
007c =                       df_linoff	ds	1		; Offset in to line buffer
007d =                       df_tokoff	ds	1		; Offset in to tokenised buffer
007e =                       df_eolidx	ds	1		; End of line index (i.e length)
007f =                       df_nxtstidx	ds	1		; Offset to the next statement 
AS65 Assembler for R6502 [1.42].                                     Page   40
-------------------------------- bank\bank0.s --------------------------------

0080 =                       df_curstidx	ds	1		; Offset to the start of curren
0081 =                       df_symtab	ds	2		; Pointer to next free symtab ent
0083 =                       df_symoff	ds	1		; Offset in to token table
0084 =                       df_syminiz	ds	2		; Start of symtab (*unused*)
0086 =                       df_currlin	ds	2		; Execution current line pointer
0088 =                       df_exeoff	ds	1		; Execution line buffer offset
0089 =                       df_nextlin	ds	2		; Next line to execute
008b =                       df_procmode	ds	1		; Only used during tokenisation
008c =                       df_procargs	ds	1		; Only used during tokenisation
008d =                       df_procloc	ds	1		; Counts the number of local par
008e =                       df_procptr	ds	2		; Pointer to proc vvt slot
0090 =                       df_lineptr	ds	2		; Pointer to line during searche
0092 =                       df_lineidx	ds	1		; Pointer to line index during s
0093 =                       df_ifnest	ds	1		; Global nested if counter
0094 =                       df_currdat	ds	2		; Data current line pointer
0096 =                       df_datoff	ds	1		; Data line buffer offset
0097 =                       df_rnd		ds	2		; Random number seed
                             
0099 =                       df_asmpc	ds	2		; Assembler program counter
009b =                       df_asmopt	ds	1		; Assembler current option
009c =                       df_asmadmd	ds	1		; Addressing mode
009d =                       df_asmopcde	ds	1		; Current opcode
009e =                       df_asmoprnd	ds	2		; Current operand
00a0 =                       df_asmlen	ds	1		; Instruction length
                             
00a1 =                       dflat_zp_save_e			; Save up to this place
                             
                             ; Temp space for dflat
00a1 =                       df_tmpptra	ds	2		; Temp pointer a
00a3 =                       df_tmpptrb	ds	2		; Temp pointer b
00a5 =                       df_tmpptrc	ds	2		; Temp pointer c
00a7 =                       df_tmpptrd	ds	2		; Temp pointer d
00a9 =                       df_tmpptre	ds	2		; Temp pointer e
                             
00ab =                       dflat_zp_e
                             
00ab =                       zp_tmp1		ds	1		; General zero page temporary
00ac =                       zp_tmp2		ds	1		; General zero page temporary
00ad =                       zp_tmp3		ds	1		; General zero page temporary
00ae =                       zp_tmp4		ds	1		; General zero page temporary
                             
                             ;***** END OF ZERO PAGE *****
00af =                       _end_zero_page
                             
                             ;***** Page 1 is CPU stack ****
0100 =                       	org 0x0100
0100 =                       _cpu_stack
0100 =                       			ds	256		; All of page 1
                             
                             ;***** Page 2 is tape buffer *****
0200 =                       	org 0x0200
0200 =                       tp_buf		ds	256		; Serial input / output line buff
                             
                             ;***** 3 is IO *****
0300 =                       	org 0x0300			; IO mapped to Page 3 on Oric
0300 =                       io_address	ds	256
                             
0400 =                       	org 0x0400			; Page 4 = dflat space
0400 =                       fd_getname_addr			; ** FOR ORICUTRON EMULATOR **
0400 =                       df_linbuff
0400 =                       df_raw		ds	128		; untokenised input line
0480 =                       df_tokbuff
AS65 Assembler for R6502 [1.42].                                     Page   41
-------------------------------- bank\bank0.s --------------------------------

0480 =                       df_tok		ds 	128		; tokenised output line
                             
0500 =                       	org 0x0500			; Page 5 = fixed space for interpre
0500 =                       df_rtstck				; operator stack grow up, runtime gr
0500 =                       df_rtspace	ds	256
                             
                             
                             ;***** NON-ZERO PAGE VARIABLES *****
                             
                             ; Acticve IO device settings
0600 =                       io_default	ds	1		; The default device number
0601 =                       io_block	ds	io_struct
                             
                             
                             ; Dflat top of memory+1 - initialised at boot tim
0611 =                       df_memtop	ds	2
                             
                             ; Scratch area e.g. string and numeric expression
0613 =                       scratch		ds	256
                             
                             ;***** THIS IS THE START OF FREE SPACE for DFLAT 
0713 =                       mem_start
                             
                             
                             	include "dflat/dflat.i"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  DFLAT.I
                             ;*  This is the main definitions file for dflat. 
                             ;*  definitions are in here to access the data st
                             ;*  used by dflat.
                             ;*
                             ;************************************************
                             
                             ;* Start dflat program memory
0713 =                       DF_PROGSTART=	mem_start
                             ;* This is the top of usable dflat memory plus 1
9800 =                       DF_MEMTOP	=	0x9800
                             
                             ;* Offset in to tokenised line of length and line
0000 =                       DFTK_LINLEN	=	0x00
0001 =                       DFTK_LINNUM	=	0x01
                             
                             ;* Flags for token, escape value for data types a
0080 =                       DFTK_TOKEN	=	0x80
0020 =                       DFTK_ESCVAL	=	0x20
0000 =                       DFTK_EOL	=	0x00
                             
                             ;* Numeric constants are encoded based on size an
                             ;* user representation.
                             ;* For example the decimal value 16 will be encod
                             ;* DFTK_INTDEC followed by the bytes 0 and 16 to 
                             ;* The same value in binary will be encoded as DF
                             ;* followed by the same 0 and 16 bytes.  This is 
                             ;* tokenised value to be displayed in original re
                             ;* So in the two examples, they will be shown as 
AS65 Assembler for R6502 [1.42].                                     Page   42
-------------------------------- bank\bank0.s --------------------------------

                             ;* '0x0010' respectively.
0000 =                       DFTK_CHR	=	0x00
0001 =                       DFTK_RESV1	=	0x01
0002 =                       DFTK_RESV2	=	0x02
0003 =                       DFTK_RESV3	=	0x03
0004 =                       DFTK_RESV4	=	0x04
0005 =                       DFTK_BYTDEC	=	0x05
0006 =                       DFTK_BYTHEX = 	0x06
0007 =                       DFTK_BYTBIN =	0x07
0008 =                       DFTK_RESV8	=	0x08
0009 =                       DFTK_INTDEC	=	0x09
000a =                       DFTK_INTHEX =	0x0a
000b =                       DFTK_INTBIN	=	0x0b
000c =                       DFTK_RESVC	=	0x0c
000d =                       DFTK_RESVD	=	0x0d
000e =                       DFTK_RESVE	=	0x0e
000f =                       DFTK_RESVF	=	0x0f
                             
                             ;* String constant, variable and procedure tokens
0010 =                       DFTK_STRLIT	=	0x10
0011 =                       DFTK_VAR	=	0x11
0012 =                       DFTK_PROC	=	0x12
001f =                       DFTK_STEND	=	0x1f
                             
                             ;* Qualifier for non-local parameters passed to a
0026 =                       DFTK_VARPARM=	'&'
                             
                             ;* Variable Value Table (VVT) definitions
                             ;* The VVT records the values of variables define
                             ;* the Variable Name Table (VNT).  When a variabl
                             ;* used, it is added to the VNT, and the position
                             ;* VNT is used as an index in to the VVT.
                             ;* Every VVT entry is 8 bytes - so the VNT index 
                             ;* shifted left 3 bits to get the VVT offset.
                             ;* The VNT grows from top of memory down, the VVT
                             ;* grows from start of VNT down.
                             
                             ;* Index in to each entry of the VVT
0000 =                       DFVVT_TYPE	=	0x00
0001 =                       DFVVT_LO	=	0x01
0002 =                       DFVVT_HI	=	0x02
0003 =                       DFVVT_DIM1	=	0x03
0004 =                       DFVVT_DIM2	=	0x04
0008 =                       DFVVT_SZ	=	0x08	;VVT is aligned to 8 byte blocks
                             
                             ;* The meaning of the DFVVT_TYPE entry
0001 =                       DFVVT_INT	=	0x01
0002 =                       DFVVT_BYT	=	0x02
0004 =                       DFVVT_STR	=	0x04
0008 =                       DFVVT_FLT	=	0x08
0040 =                       DFVVT_PROC	=	0x40
0080 =                       DFVVT_ARRY	=	0x80
                             
                             ;* Flags indicating the meaning of a token
                             ;* A token has the top bit set (0x80), then the
                             ;* remaining bits indicate what it represents.
0001 =                       DFTK_KW		=	0x01
0002 =                       DFTK_FN		=	0x02
0004 =                       DFTK_STROP	=	0x04
0008 =                       DFTK_OP		=	0x08
0010 =                       DFTK_INT	=	0x10
0020 =                       DFTK_BYT	=	0x20
AS65 Assembler for R6502 [1.42].                                     Page   43
-------------------------------- bank\bank0.s --------------------------------

0040 =                       DFTK_STR	=	0x40
0080 =                       DFTK_FLT	=	0x80
0007 =                       DFTK_OPMSK	=	0x07
00f8 =                       DFTK_RTMSK	= 	0xf8
                             
                             ;* Defines what type of value is on the parameter
                             ;* All numerics are stored as INT, all STR
                             ;* are pointers to the actual string, thus
                             ;* all entries in the parmeter stack are 3 bytes
0001 =                       DFST_INT	=	0x01
0080 =                       DFST_STR	=	0x80
                             
                             ;* Token values of specific commands, used during
                             ;* command processing.
                             ;* ANY CHANGE TO THE ORDER OF KEYWORDS NEEDS TO R
0086 =                       DFRT_DEF	=	0x86
0087 =                       DFRT_ENDDEF	=	0x87
0088 =                       DFRT_RETURN	=	0x88
0089 =                       DFRT_ABORT	=	0x89
008c =                       DFRT_REPEAT	=	0x8c
008e =                       DFRT_FOR	=	0x8e
008f =                       DFRT_NEXT	=	0x8f
0090 =                       DFRT_WHILE	=	0x90
0091 =                       DFRT_WEND	=	0x91
0092 =                       DFRT_IF		=	0x92
0093 =                       DFRT_ELSE	=	0x93
0094 =                       DFRT_ENDIF	=	0x94
0095 =                       DFRT_ELSEIF	=	0x95
0096 =                       DFRT_DATA	=	0x96
0097 =                       DFRT_ASM	=	0x97
                             
                             _PushTrueJmp macro
                             	ldx #0xff
                             	txa
                             	jmp df_st_pushInt
                             	endm
                             
                             _PushFalseJmp macro
                             	ldx #0x00
                             	txa
                             	jmp df_st_pushInt
                             	endm
                             
                             	include "dflat/error.i"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  ERROR.I
                             ;*  Error definitions file.
                             ;*  The macro to throw an error is elswhere, but 
                             ;*  It issues a 6502 BRK commmand with the next b
                             ;*  the error code.  The BRK handler then picks u
                             ;*  code and shows the appropriate message plus a
                             ;*  number if a program was running.
                             ;*
                             ;************************************************
                             
AS65 Assembler for R6502 [1.42].                                     Page   44
-------------------------------- bank\bank0.s --------------------------------

                             	; ROM code
                             	code  
                             
                             ; Error message numbers
0000 =                       DFERR_OK		=	0
0001 =                       DFERR_SYNTAX	=	1
0002 =                       DFERR_TYPEMISM	=	2
0003 =                       DFERR_DIM		=	3
0004 =                       DFERR_UNTIL		=	4
0005 =                       DFERR_NOPROC	=	5
0006 =                       DFERR_PROCPARM	=	6
0007 =                       DFERR_IMMEDIATE	=	7
0008 =                       DFERR_UNCLOSEDIF=	8
0009 =                       DFERR_NOIF		=	9
000a =                       DFERR_NEXTFOR	=	10
000b =                       DFERR_FNAME		=	11
000c =                       DFERR_STRLONG	=	12
000d =                       DFERR_BREAK		=	13
000e =                       DFERR_NODATA	=	14
000f =                       DFERR_WEND		=	15
0010 =                       DFERR_NOLINE	=	16
0011 =                       DFERR_RETURN	=	17
0012 =                       DFERR_ABORT		=	18
0013 =                       DFERR_QUANTITY	=	19
0014 =                       DFERR_NOORG		=	20
                             
                             
                             
                             
                             
                             ;****************************************
                             ;*	Set 6502 default vectors	*
                             ;****************************************
                             	data				; Set vectors
fffa =                       	org 0xfffa			; Vectors are at these addresses
fffa : 21c5                  	fcw nmi				; 0xfffa : NMI Vector
fffc : d9c4                  	fcw init			; 0xfffc : Reset Vector
fffe : e6c0                  	fcw call_irq_master	; 0xfffe : IRQ Vector
                             
                             	; ROM code
                             	code				;
c000 =                       	org 0xc000			; Start of ROM
                             
c000 :                       _code_start
                             	; Restore current bank always at address c001 * 
c000 :                       mod_sz_kernel_s
                             	; include OS ROM calls - must be from 0xc000
                             	include "kernel/osromvec.i"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2021
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  OSROMVEC.I
                             ;*	This include file sets up the OS ROM vectors w
                             ;*	be invoked by user programs to access ROM func
                             ;*	will be maintained across versions of dflat to
                             ;*	backward and forward compatibility.
                             ;*	Make sure these vectors are set up from 0xc000
AS65 Assembler for R6502 [1.42].                                     Page   45
-------------------------------- bank\bank0.s --------------------------------

                             ;*	what user programs will rely on!
                             ;*
                             ;************************************************
                             	
                             	; Common OS ROM calls - user programs should JMP
                             	; through these routines where possible to maint
                             	; compatibility with ROM changes as these calls 
                             	; always be in the same position
c000 : 4cfdcc           [ 3] _rom_vec_00	jmp	gr_init_screen_txt			; Go in to t
c003 : 4c93cd           [ 3] _rom_vec_01	jmp gr_cls						; Clear text screen
c006 : 4c00ce           [ 3] _rom_vec_02	jmp	gr_set_cur					; Set text cursor 
c009 : 4c16cd           [ 3] _rom_vec_03	jmp	gr_init_hires				; Go in to hires
c00c : 6c0106           [ 6] _rom_vec_04	jmp (io_block+io_get_byte)		; Get byt
c00f : 6c0306           [ 6] _rom_vec_05	jmp (io_block+io_put_byte)		; Put byt
c012 : 4c69c4           [ 3] _rom_vec_06 jmp io_read_line				; Read a line
c015 : 4ca2c4           [ 3] _rom_vec_07	jmp io_print_line				; Print a line
c018 : 4c6ec0           [ 3] _rom_vec_08	jmp snd_set						; Set sound register
c01b : 4c78c7           [ 3] _rom_vec_09	jmp kb_stick					; Get joystick statu
c01e : 4ce7cd           [ 3] _rom_vec_0a	jmp gr_plot						; Plot a lores chara
c021 : 4ca6cf           [ 3] _rom_vec_0b	jmp	gr_hchar					; Plot a hires chara
c024 : 4c48d0           [ 3] _rom_vec_0c	jmp gr_point_setup				; Get address, 
c027 : 4c66d0           [ 3] _rom_vec_0d	jmp gr_point					; Plot a hires pixel
c02a : 4c7df4           [ 3] _rom_vec_0e	jmp df_rt_sprupd				; Refresh sprites
c02d : 4cd7cd           [ 3] _rom_vec_0f	jmp	gr_getXY_base				; Get row addres
c030 : 4c60d0           [ 3] _rom_vec_10	jmp gr_pixel					; Get a pixel value 
c033 : 4cfacd           [ 3] _rom_vec_11 jmp gr_get						; Get screen at coord
c036 : 4c2bc4           [ 3] _rom_vec_12 jmp io_active_device			; Set the acti
c039 : 6c0506           [ 6] _rom_vec_13	jmp (io_block+io_open_r)		; Open file
c03c : 6c0706           [ 6] _rom_vec_14	jmp (io_block+io_open_w)		; Open file
c03f : 6c0906           [ 6] _rom_vec_15	jmp (io_block+io_close_f)		; Close fi
c042 : 6c0b06           [ 6] _rom_vec_16	jmp (io_block+io_del_f)			; Delete fi
c045 : 6c0d06           [ 6] _rom_vec_17	jmp (io_block+io_ext1)			; Extended o
c048 : 6c0f06           [ 6] _rom_vec_18	jmp (io_block+io_ext2)			; Extended o
c04b : 4c13d4           [ 3] _rom_vec_19 jmp snd_get_note				; Get for an octa
                             
                             
                             ;* Include all core code in the right order
                             	include "kernel/snd-low.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  SND-LOW.S
                             ;*	Routines to access the AY-3-8912, which is don
                             ;*	lines of the VIA - CB2 and CA2 for chip select
                             ;*	Port A for data interface. This makes accessin
                             ;*	8912 a bit slow..
                             ;*
                             ;* 	CB2		CA2		Function		CB2=BDIR, CA2=BC1
                             ;*	0		0		Not selected
                             ;*	0		1		Read register in to Port A
                             ;*	1		0		Write register from Port A
                             ;*	1		1		Select register # from Port A
                             ;************************************************
                             
                             ;****************************************
                             ;* snd_sel_reg
                             ;* Select AY register from A
AS65 Assembler for R6502 [1.42].                                     Page   46
-------------------------------- bank\bank0.s --------------------------------

                             ;* Input : A = Value
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
c04e :                       snd_sel_reg
c04e : 48               [ 3] 	pha
c04f : 8d0f03           [ 4] 	sta SND_ADBUS			; Put reg # on Port A (sound bus
                             
c052 : a9ff             [ 2] 	lda #SND_SELSETADDR		; Get ready to select the r
c054 : 8d0c03           [ 4] 	sta SND_MODE			; Latch the reg # on Port A
                             
c057 : a9dd             [ 2] 	lda #SND_DESELECT		; Deselect AY
c059 : 8d0c03           [ 4] 	sta SND_MODE
                             
c05c : 68               [ 4] 	pla
c05d : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* snd_set_reg
                             ;* Set previosuly selected AY register
                             ;* Input : A = Value to set
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
c05e :                       snd_set_reg
c05e : 48               [ 3] 	pha
                             
c05f : 8d0f03           [ 4] 	sta SND_ADBUS			; Put reg value on Port A (sound
c062 : a9fd             [ 2] 	lda #SND_SELWRITE		; Select mode for writing dat
c064 : 8d0c03           [ 4] 	sta SND_MODE			; Latch reg value on Port A	
c067 : a9dd             [ 2] 	lda #SND_DESELECT		; Deselect AY
c069 : 8d0c03           [ 4] 	sta SND_MODE
                             
c06c : 68               [ 4] 	pla
c06d : 60               [ 6] 	rts
                             	
                             ;****************************************
                             ;* snd_set
                             ;* Set reg X to value A
                             ;* Input : X=Reg, A = Value to set
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
c06e :                       snd_set
c06e : 48               [ 3] 	pha
c06f : 8a               [ 2] 	txa
c070 : 204ec0           [ 6] 	jsr snd_sel_reg
c073 : 68               [ 4] 	pla
c074 : 4c5ec0           [ 3] 	jmp snd_set_reg
                             
                             
                             ;****************************************
                             ;* snd_get
                             ;* Get AY register X value
                             ;* Input : X = Reg no
                             ;* Output : A = Value
                             ;* Regs affected : None
                             ;****************************************
                             ;snd_get
                             ;
                             ;	lda #0xff				; Set Port A to output
                             ;	sta IO_0+DDRA
AS65 Assembler for R6502 [1.42].                                     Page   47
-------------------------------- bank\bank0.s --------------------------------

                             ;
                             ;	stx SND_ADBUS			; Put X on the sound bus (X = r
                             ;
                             ;	lda #SND_SELSETADDR		; Get ready to select the 
                             ;	sta SND_MODE			; Latch the reg # on Port A
                             ;
                             ;	lda #SND_DESELECT		; Deselect AY
                             ;	sta SND_MODE
                             ;
                             ;	lda #0x00				; Set Port A to input
                             ;	sta IO_0+DDRA
                             ;
                             ;	lda #SND_SELREAD		; Select mode for reading dat
                             ;	sta SND_MODE			; Set read mode on AY
                             ;
                             ;	lda SND_ADBUS			; Get value in to Y from Port A
                             ;	pha						; Save it to stack
                             ;	
                             ;	lda #SND_DESELECT		; Deselect AY
                             ;	sta SND_MODE
                             ;
                             ;	lda #0xff				; Set Port A back to output
                             ;	sta IO_0+DDRA
                             ;
                             ;	pla						; Get the value off stack
                             ;	
                             ;	rts
                             
                             
                             	include "kernel/main.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  MAIN.S
                             ;*  This is where the main user program is execut
                             ;*  the 'kernel' once the system is initialised a
                             ;*  Today, main does very little - first shows th
                             ;*  boot up message, and then passes control to d
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code
                             
c077 :                       main
c077 : a281             [ 2] 	ldx #lo(msg_hello_world)
c079 : a9c0             [ 2] 	lda #hi(msg_hello_world)
c07b : 20a2c4           [ 6] 	jsr io_print_line
                             
c07e :                       infinity
c07e : 4c56df           [ 3] 	jmp df_pg_dflat
                             
c081 :                       msg_hello_world
                             	;* build.s is generate by the assemble.bat file
                             	;* all it does is echo an assembler line to
                             	;* including the build date in the message.
                             	include "kernel/build.s"
AS65 Assembler for R6502 [1.42].                                     Page   48
-------------------------------- bank\bank0.s --------------------------------

c081 : 4f726963206466..       db "Oric dflat custom ROM\r" 
c097 : 42792040363530..       db "By @6502Nerd\r" 
c0a4 : 4275696c64203a..       db "Build : 0.16 [BETA]\r" 
c0b8 : 436f7079726967..       db "Copyright (c) 2023\r\r",0 
                             
                             
                             	include "kernel/irq.s"
                             	
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  IRQ.S
                             ;*	This is the IRQ handler
                             ;*	There is only one regular interrupt source whi
                             ;*	T1 timeout on a 50Hz cycle, whose main job is 
                             ;*	flash the cursor and decrement some timers.
                             ;*	But there are handlers for BRK, user and VIA s
                             ;*	By default the user and VIA do nothing, but ca
                             ;*	redirected to user routines.
                             ;*
                             ;************************************************
                             
                             ;* Obviously this can only be done with
                             ;* interrupts disabled!
c0cd :                       init_irq
                             	; Core IRQ handler
c0cd : a9f1             [ 2] 	lda #lo(irq)
c0cf : 8502             [ 3] 	sta vec_irq
c0d1 : a9c0             [ 2] 	lda #hi(irq)
c0d3 : 8503             [ 3] 	sta vec_irq+1
                             	
                             	; Core BRK handler
c0d5 : a913             [ 2] 	lda #lo(irq_brk)
c0d7 : 8504             [ 3] 	sta vec_brk
c0d9 : a9c1             [ 2] 	lda #hi(irq_brk)
c0db : 8505             [ 3] 	sta vec_brk+1
                             
                             	; User handlers VIA0 interrupts
c0dd : a9f0             [ 2] 	lda #lo(null_handler)
c0df : 8506             [ 3] 	sta vec_usercia0
c0e1 : a9c0             [ 2] 	lda #hi(null_handler)
c0e3 : 8507             [ 3] 	sta vec_usercia0+1
                             
c0e5 : 60               [ 6] 	rts
                             
                             
                             ;* Calls the master IRQ handler - from the ROM
c0e6 :                       call_irq_master
c0e6 : 6c0200           [ 6] 	jmp (vec_irq)
                             	
                             ;* Calls the BRK handler
c0e9 :                       call_irq_brk
c0e9 : 6c0400           [ 6] 	jmp (vec_brk)
                             
                             ;* Call the user CIA0 handler
c0ec :                       call_irq_usercia0
c0ec : 6c0600           [ 6] 	jmp (vec_usercia0)
AS65 Assembler for R6502 [1.42].                                     Page   49
-------------------------------- bank\bank0.s --------------------------------

                             
                             ;* null interrupt
c0ef :                       null_irq
c0ef : 40               [ 6] 	rti
                             
                             ;* null handler
c0f0 :                       null_handler
c0f0 : 60               [ 6] 	rts
                             	
                             
                             ;* Master IRQ handler
c0f1 :                       irq
                             	; Don't use _pushAXY as it uses a temp location!
c0f1 : 48               [ 3] 	pha
c0f2 : 8a               [ 2] 	txa
c0f3 : 48               [ 3] 	pha
c0f4 : 98               [ 2] 	tya
c0f5 : 48               [ 3] 	pha
                             
c0f6 : d8               [ 2] 	cld						; Just in case!
c0f7 : 18               [ 2] 	clc						; Standard behaviour
                             
                             	; Check if IRQ or BRK
                             	; load P from stack in to A
c0f8 : ba               [ 2] 	tsx
c0f9 : bd0401           [ 4] 	lda 0x104,x
                             	; BRK bit set?
c0fc : 2910             [ 2] 	and #0x10
c0fe : d0e9             [ 3] 	bne call_irq_brk
                             	
                             	;* Primary interrupt is timer 1
c100 : ad0d03           [ 4] 	lda IO_0 + IFR
c103 : 2940             [ 2] 	and #0x40				; Bit 6 = Timer 1 interrupt
c105 : f006             [ 3] 	beq irq_fin				; If nothing then end
                             
                             	; Service the timer 1 interrupt
c107 : 8d0d03           [ 4] 	sta IO_0 + IFR			; Clear the interrupt
c10a : 2040c1           [ 6] 	jsr int_vdp_handler
                             
c10d :                       irq_fin
                             	_pullAXY
                             
c112 : 40               [ 6] 	rti
                             	
                             ;* Handle BRK
c113 :                       irq_brk
                             	; Handle BRK
                             	; Get PCL,H minus 2 gives the BRK instruction ad
c113 : 38               [ 2] 	sec
c114 : bd0501           [ 4] 	lda 0x0105,x
c117 : e902             [ 2] 	sbc #2
c119 : 8562             [ 3] 	sta df_brkpc
c11b : bd0601           [ 4] 	lda 0x0106,x
c11e : e900             [ 2] 	sbc #0
c120 : 8563             [ 3] 	sta df_brkpc+1
                             	; Get the byte pointed to by old PC
                             	; which is 1 on from the BRK
c122 : a001             [ 2] 	ldy #1
c124 : b162             [ 5] 	lda (df_brkpc),y
c126 : 8564             [ 3] 	sta df_brkval
c128 : 855d             [ 3] 	sta errno
                             	; now update the return address
AS65 Assembler for R6502 [1.42].                                     Page   50
-------------------------------- bank\bank0.s --------------------------------

c12a : a560             [ 3] 	lda df_pc
c12c : 9d0501           [ 5] 	sta 0x105,x
c12f : a561             [ 3] 	lda df_pc+1
c131 : 9d0601           [ 5] 	sta 0x106,x
                             	
                             	_pullAXY
                             
                             	; Save the registers in temp area
c139 : 853d             [ 3] 	sta num_a
c13b : 863e             [ 3] 	stx num_a+1
c13d : 843f             [ 3] 	sty num_a+2
                             	; when RTI occurs:
                             	;  will return to error handler
                             	;  df_brkval will contain signature
c13f : 40               [ 6] 	rti
                             	
                             	
                             ;****************************************
                             ;* int_vdp_handler
                             ;* VDP interrupt handler
                             ;****************************************
c140 :                       int_vdp_handler
c140 : 205cc1           [ 6] 	jsr update_timers	; If it is then update system 
c143 : a50d             [ 3] 	lda vdp_curoff		; Is cursor enabled?
c145 : d014             [ 3] 	bne int_vdp_fin		; Skip if disabled
                             
c147 : c60c             [ 5] 	dec vdp_curcnt		; Decrement countdown
c149 : d010             [ 3] 	bne int_vdp_fin		; If not expired, do nothing
c14b : a50b             [ 3] 	lda vdp_curtim		; Reset cursor countdown
c14d : 850c             [ 3] 	sta vdp_curcnt
c14f : a50e             [ 3] 	lda vdp_curstat		; Get the flash status
c151 : 4980             [ 2] 	eor #0x80			; Invert top bit
c153 : 850e             [ 3] 	sta vdp_curstat
c155 : 450f             [ 3] 	eor vdp_curval		; EOR with whats under cursor
                             	; Use cursor address, write to screen
                             	; ptr is base, offset with X coord in Y register
c157 : a41b             [ 3] 	ldy gr_scrngeom+gr_cur_x
c159 : 911d             [ 5] 	sta (gr_scrngeom+gr_cur_ptr),y
                             
c15b :                       int_vdp_fin	
c15b : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* update_timers
                             ;* Update 24 bit timer and debounce counters
                             ;****************************************
c15c :                       update_timers
c15c : e608             [ 5] 	inc vdp_cnt
c15e : d006             [ 3] 	bne inc_kb_timers
c160 : e609             [ 5] 	inc vdp_cnt_hi
c162 : d002             [ 3] 	bne inc_kb_timers
c164 : e60a             [ 5] 	inc vdp_cnt_hi2
c166 :                       inc_kb_timers
c166 : a62d             [ 3] 	ldx kb_deb			; Is debounce 0?
c168 : f002             [ 3] 	beq skip_kb_deb
c16a : c62d             [ 5] 	dec kb_deb
c16c :                       skip_kb_deb
c16c : a62f             [ 3] 	ldx kb_rep			; Is repeat timer 0?
c16e : f002             [ 3] 	beq skip_kb_rep
c170 : c62f             [ 5] 	dec kb_rep
c172 :                       skip_kb_rep
AS65 Assembler for R6502 [1.42].                                     Page   51
-------------------------------- bank\bank0.s --------------------------------

c172 : 60               [ 6] 	rts
                             	
                             
                             	include "utils/utils.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  UTILS.S
                             ;*  This module implements various utility functi
                             ;*  converting from ASCII to binary form for numb
                             ;*  vice-versa to allow humans to actually be abl
                             ;*  and read numbers in their prefered form!
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code
                             
c173 :                       utilPrintSPC
c173 : 48               [ 3] 	pha
c174 : a920             [ 2] 	lda #' '
c176 : 2054c4           [ 6] 	jsr io_put_ch
c179 : 68               [ 4] 	pla
c17a : 60               [ 6] 	rts
                             
c17b :                       utilPrintCRLF
c17b : 48               [ 3] 	pha
c17c : a90d             [ 2] 	lda #UTF_CR
c17e : 2054c4           [ 6] 	jsr io_put_ch
c181 : 68               [ 4] 	pla
c182 : 60               [ 6] 	rts
                             
c183 :                       utilPrintA
c183 : 8538             [ 3] 	sta tmp_d
c185 : 48               [ 3] 	pha
c186 : 8a               [ 2] 	txa
c187 : 48               [ 3] 	pha
c188 : a538             [ 3] 	lda tmp_d
c18a : 2098c1           [ 6] 	jsr str_a_to_x
c18d : 2054c4           [ 6] 	jsr io_put_ch
c190 : 8a               [ 2] 	txa
c191 : 2054c4           [ 6] 	jsr io_put_ch
c194 : 68               [ 4] 	pla
c195 : aa               [ 2] 	tax
c196 : 68               [ 4] 	pla
c197 : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* str_a_to_x
                             ;* Convert accumulator to hex string
                             ;* Input : A = Byte to convert
                             ;* Output : A = High Char, X = Low Char
                             ;* Regs affected : P
                             ;****************************************
c198 :                       str_a_to_x
c198 : 48               [ 3] 	pha					; Save the byte using later on
AS65 Assembler for R6502 [1.42].                                     Page   52
-------------------------------- bank\bank0.s --------------------------------

c199 : 290f             [ 2] 	and #0x0f			; Mask low nibble
c19b : 18               [ 2] 	clc
c19c : 6930             [ 2] 	adc #'0'			; Convert to UTF
c19e : c93a             [ 2] 	cmp #('9'+1)		; If A greater than '9' then
c1a0 : 9002             [ 3] 	bcc skip_a_f_1		; skip a-f adjustment
c1a2 : 6926             [ 2] 	adc #0x26			; Add 27 (6+C) to get in to A-F rang
c1a4 :                       skip_a_f_1
c1a4 : aa               [ 2] 	tax					; Low char is in X
c1a5 : 68               [ 4] 	pla					; Get byte back
c1a6 : 4a               [ 2] 	lsr a				; Make high nibble low
c1a7 : 4a               [ 2] 	lsr a
c1a8 : 4a               [ 2] 	lsr a
c1a9 : 4a               [ 2] 	lsr a
c1aa : 18               [ 2] 	clc
c1ab : 6930             [ 2] 	adc #'0'			; Convert to UTF
c1ad : c93a             [ 2] 	cmp #('9'+1)		; If A greater than '9' then
c1af : 9002             [ 3] 	bcc skip_a_f_2		; skip a-f adjustment
c1b1 : 6926             [ 2] 	adc #0x26			; Add 27 (6+C) to get in to A-F rang
c1b3 :                       skip_a_f_2
c1b3 : 60               [ 6] 	rts					; A high nibble, C=0
                             
                             ;****************************************
                             ;* str_x_to_a
                             ;* Convert hex string to accumulator
                             ;* Input : A = High Char, X = Low Char
                             ;* Output : A = Value
                             ;* Regs affected : P
                             ;****************************************
c1b4 :                       str_x_to_a
c1b4 : 0920             [ 2] 	ora #0x20			; Make alpha in to lower case
c1b6 : 38               [ 2] 	sec					; Process high char in A
c1b7 : e930             [ 2] 	sbc #'0'			; Convert to hex nibble
c1b9 : c90a             [ 2] 	cmp #10				; If A < 10 then
c1bb : 9002             [ 3] 	bcc skip_x_f_1		; skip a-f adjustment
c1bd : e927             [ 2] 	sbc #0x27			; Sub 7 to get in to A-F range
c1bf :                       skip_x_f_1
c1bf : c910             [ 2] 	cmp #0x10			; Nibble should be <= 0x0f
c1c1 : b01c             [ 3] 	bcs	str_x_to_a_err	; Error if not
                             
c1c3 : 0a               [ 2] 	asl a				; This is the high nibble
c1c4 : 0a               [ 2] 	asl a
c1c5 : 0a               [ 2] 	asl a
c1c6 : 0a               [ 2] 	asl a
c1c7 : 48               [ 3] 	pha					; Save the high nibble
c1c8 : 8a               [ 2] 	txa					; Now process the low char in X
c1c9 : 0920             [ 2] 	ora #0x20			; Make alpha in to lower case
c1cb : 38               [ 2] 	sec
c1cc : e930             [ 2] 	sbc #'0'			; Convert to hex nibble
c1ce : c90a             [ 2] 	cmp #10				; If A < 10 then
c1d0 : 9002             [ 3] 	bcc skip_x_f_2		; skip a-f adjustment
c1d2 : e927             [ 2] 	sbc #0x27			; Sub 7 to get in to A-F range
c1d4 :                       skip_x_f_2
c1d4 : c910             [ 2] 	cmp #0x10			; Nibble should be <= 0x0f
c1d6 : b006             [ 3] 	bcs	str_x_to_a_errl	; Error if not
                             
c1d8 : 853d             [ 3] 	sta num_a			; Store low nibble in temp
c1da : 68               [ 4] 	pla					; Get high nibble
c1db : 053d             [ 3] 	ora num_a			; OR with low nibble
                             
c1dd : 60               [ 6] 	rts					; A contains value, C=0
                             
c1de :                       str_x_to_a_errl
AS65 Assembler for R6502 [1.42].                                     Page   53
-------------------------------- bank\bank0.s --------------------------------

c1de : 68               [ 4] 	pla
c1df :                       str_x_to_a_err
                             	SWBRK CMD_ERR_VAL
                             
                             
                             ;****************************************
                             ;* con_n_to_a
                             ;* Convert numeric string to accumulator (unsigne
                             ;* Input : Pointer to string (X=L, A=H), Y = Sour
                             ;* Output : num_a, num_a+1 contains word, X=numbe
                             ;* A = Source type detected
                             ;* Regs affected : CS = Error
                             ;****************************************
c1e1 :                       con_n_to_a
c1e1 : 8649             [ 3] 	stx num_tmp
c1e3 : 854a             [ 3] 	sta num_tmp+1
c1e5 : a900             [ 2] 	lda #0
c1e7 : 853d             [ 3] 	sta num_a
c1e9 : 853e             [ 3] 	sta num_a+1
c1eb : c000             [ 2] 	cpy #NUM_ANY
c1ed : f014             [ 4] 	beq con_n_to_a_detect
c1ef : 88               [ 2] 	dey
c1f0 : d003             [ 3] 	bne con_n_not_dec
c1f2 :                       con_dec_jmp
c1f2 : 4c86c2           [ 3] 	jmp con_dec_to_a_int
c1f5 :                       con_n_not_dec
c1f5 : 88               [ 2] 	dey
c1f6 : d003             [ 3] 	bne con_n_not_hex
c1f8 :                       con_hex_jmp
c1f8 : 4c1dc2           [ 3] 	jmp con_hex_to_a_int
c1fb :                       con_n_not_hex
c1fb : 88               [ 2] 	dey
c1fc : d003             [ 4] 	bne con_n_err
c1fe :                       con_bin_jmp
c1fe : 4c5cc2           [ 3] 	jmp con_bin_to_a_int
c201 :                       con_n_err
c201 : 38               [ 2] 	sec
c202 : 60               [ 6] 	rts
c203 :                       con_n_to_a_detect		; Y is zero on entry
c203 : b149             [ 5] 	lda (num_tmp),y
c205 : c930             [ 2] 	cmp #'0'
c207 : d0e9             [ 4] 	bne con_dec_jmp
c209 : a001             [ 2] 	ldy #1
c20b : b149             [ 5] 	lda (num_tmp),y
c20d : 0920             [ 2] 	ora #0x20
c20f : c978             [ 2] 	cmp #'x'
c211 : f0e5             [ 4] 	beq con_hex_jmp
c213 : c962             [ 2] 	cmp #'b'
c215 : f0e7             [ 4] 	beq con_bin_jmp
c217 : d0d9             [ 4] 	bne con_dec_jmp		; Always branches
                             
                             ;****************************************
                             ;* con_hex_to_a
                             ;* Convert hex string to accumulator (unsigned)
                             ;* Input : Pointer to string (X=L, A=H)
                             ;* Output : num_a, num_a+1 contains word, X=numbe
                             ;* Regs affected : CS = Error
                             ;****************************************
c219 :                       con_hex_to_a
c219 : 8649             [ 3] 	stx num_tmp
c21b : 854a             [ 3] 	sta num_tmp+1
c21d :                       con_hex_to_a_int
AS65 Assembler for R6502 [1.42].                                     Page   54
-------------------------------- bank\bank0.s --------------------------------

c21d : a205             [ 2] 	ldx #5			; > 4 digits will cause error
c21f : a002             [ 2] 	ldy #2			; start at first digit
c221 :                       con_hex_digit
c221 : b149             [ 5] 	lda (num_tmp),y
c223 : 0920             [ 2] 	ora #0x20					; Make alpha in to lower case
c225 : 38               [ 2] 	sec							; Process high char in A
c226 : e930             [ 2] 	sbc #'0'					; Convert to hex nibble
c228 : c90a             [ 2] 	cmp #10						; If A < 10 then
c22a : 9002             [ 3] 	bcc con_hex_skip_x_f_1		; skip a-f adjustment
c22c : e927             [ 2] 	sbc #0x27					; Sub 7 to get in to A-F range
c22e :                       con_hex_skip_x_f_1
c22e : c910             [ 2] 	cmp #0x10					; Nibble should be <= 0x0f
c230 : b01c             [ 3] 	bcs	con_hex_done			; Potentially done if not
c232 : 48               [ 3] 	pha
c233 : a53d             [ 3] 	lda num_a
                             	; make room for lo nibble
c235 : 0a               [ 2] 	asl a
c236 : 263e             [ 5] 	rol num_a+1
c238 : 0a               [ 2] 	asl a
c239 : 263e             [ 5] 	rol num_a+1
c23b : 0a               [ 2] 	asl a
c23c : 263e             [ 5] 	rol num_a+1
c23e : 0a               [ 2] 	asl a
c23f : 263e             [ 5] 	rol num_a+1
c241 : 853d             [ 3] 	sta num_a
                             	; save in low nibble
c243 : 68               [ 4] 	pla
c244 : 053d             [ 3] 	ora num_a
c246 : 853d             [ 3] 	sta num_a
c248 : c8               [ 2] 	iny
c249 : ca               [ 2] 	dex
c24a : d0d5             [ 3] 	bne con_hex_digit
                             	; if got to a 5th digit then error
c24c :                       con_hex_err
c24c : 38               [ 2] 	sec
c24d : 60               [ 6] 	rts
                             	; found a non-hex digit
c24e :                       con_hex_done
                             	; if no digits processed then error
c24e : c002             [ 2] 	cpy #2
c250 : f0fa             [ 3] 	beq con_hex_err
                             	; move y to x for digits processed
c252 : 98               [ 2] 	tya
c253 : aa               [ 2] 	tax
c254 : a902             [ 2] 	lda #NUM_HEX
c256 : 18               [ 2] 	clc
c257 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* con_bin_to_a
                             ;* Convert bin string to accumulator (unsigned)
                             ;* Input : Pointer to string (X=L, A=H)
                             ;* Output : num_a, num_a+1 contains word, X=numbe
                             ;* Regs affected : CS = Error
                             ;****************************************
c258 :                       con_bin_to_a
c258 : 8649             [ 3] 	stx num_tmp
c25a : 854a             [ 3] 	sta num_tmp+1
c25c :                       con_bin_to_a_int
c25c : a002             [ 2] 	ldy #2
c25e : a211             [ 2] 	ldx #17						; Max 16 binary digits allowed
c260 :                       con_bin_digit
AS65 Assembler for R6502 [1.42].                                     Page   55
-------------------------------- bank\bank0.s --------------------------------

c260 : b149             [ 5] 	lda (num_tmp),y
c262 : c930             [ 2] 	cmp #'0'
c264 : 9010             [ 3] 	bcc con_bin_done
c266 : c932             [ 2] 	cmp #'1'+1
c268 : b00c             [ 3] 	bcs con_bin_done
                             	; sets C if '1' else resets C
c26a : 69cf             [ 2] 	adc #0xff-'0'
                             	; shift in digit
c26c : 263d             [ 5] 	rol num_a
c26e : 263e             [ 5] 	rol num_a+1
c270 : c8               [ 2] 	iny
c271 : ca               [ 2] 	dex
c272 : d0ec             [ 3] 	bne con_bin_digit
                             	; on the 17th digit is too much, error
c274 : f00a             [ 3] 	beq con_bin_err
c276 :                       con_bin_done
                             	; didn't process any digit = error
c276 : c002             [ 2] 	cpy #2
c278 : f006             [ 3] 	beq con_bin_err
                             	; put digits processed in to X
c27a : 98               [ 2] 	tya
c27b : aa               [ 2] 	tax
c27c : a903             [ 2] 	lda #NUM_BIN
c27e : 18               [ 2] 	clc
c27f : 60               [ 6] 	rts
c280 :                       con_bin_err
c280 :                       str_d_error
c280 : 38               [ 2] 	sec
c281 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* con_d_to_a
                             ;* Convert decimal string to accumulator (SIGNED)
                             ;* Input : Pointer to string (X=L, A=H)
                             ;* Output : num_a, num_a+1 contains word, X=numbe
                             ;* Regs affected : CS = Error
                             ;****************************************
c282 :                       con_dec_to_a
c282 : 8649             [ 3] 	stx num_tmp
c284 : 854a             [ 3] 	sta num_tmp+1
c286 :                       con_dec_to_a_int
c286 : a000             [ 2] 	ldy #0
                             	; Detect if leading minus sign
c288 : b149             [ 5] 	lda (num_tmp),y
c28a : c92d             [ 2] 	cmp #'-'
c28c : d001             [ 3] 	bne str_d_find_end
                             	; skip over minus if found
c28e : c8               [ 2] 	iny
c28f :                       str_d_find_end
c28f : b149             [ 5] 	lda (num_tmp),y
c291 : c930             [ 2] 	cmp #'0'
c293 : 9007             [ 3] 	bcc str_d_found_end
c295 : c93a             [ 2] 	cmp #'9'+1
c297 : b003             [ 3] 	bcs str_d_found_end
c299 : c8               [ 2] 	iny
c29a : d0f3             [ 3] 	bne str_d_find_end	; Possble wraparound but shou
c29c :                       str_d_found_end
c29c : c007             [ 2] 	cpy #7				; Biggest int is 6 chars
c29e : b0e0             [ 3] 	bcs str_d_error		; e.g. -32767
c2a0 : 844c             [ 3] 	sty num_tmp+3
c2a2 : a900             [ 2] 	lda #0
c2a4 : 854b             [ 3] 	sta num_tmp+2
AS65 Assembler for R6502 [1.42].                                     Page   56
-------------------------------- bank\bank0.s --------------------------------

c2a6 : 853d             [ 3] 	sta num_a
c2a8 : 853e             [ 3] 	sta num_a+1
c2aa :                       str_d_process_digit
c2aa : 88               [ 2] 	dey
c2ab : 3027             [ 3] 	bmi str_d_digits_done
                             
c2ad : b149             [ 5] 	lda (num_tmp),y
                             
c2af : c92d             [ 2] 	cmp #'-'			; Got to minus sign?
c2b1 : f021             [ 3] 	beq str_d_digits_done ; also done
                             
c2b3 : 38               [ 2] 	sec
c2b4 : e930             [ 2] 	sbc #'0'
                             	; Convert digit to number
                             	; and then offset in to
                             	; look up table of powers
c2b6 : 18               [ 2] 	clc
c2b7 : 0a               [ 2] 	asl a
c2b8 : 654b             [ 3] 	adc num_tmp+2
                             	; X contains index to powers
c2ba : aa               [ 2] 	tax
c2bb : a53d             [ 3] 	lda num_a
c2bd : 7df1c2           [ 4] 	adc str_d_powers,x
c2c0 : 853d             [ 3] 	sta num_a
c2c2 : a53e             [ 3] 	lda num_a+1
c2c4 : 7df2c2           [ 4] 	adc str_d_powers+1,x
c2c7 : 853e             [ 3] 	sta num_a+1
c2c9 : b0b5             [ 3] 	bcs str_d_error
                             	; Move to next power of 10 index
c2cb : a54b             [ 3] 	lda num_tmp+2
c2cd : 6914             [ 2] 	adc #20
c2cf : 854b             [ 3] 	sta num_tmp+2
c2d1 : 4caac2           [ 3] 	jmp str_d_process_digit
c2d4 :                       str_d_digits_done
                             	; check if minus
c2d4 : b149             [ 5] 	lda (num_tmp),y
c2d6 : c92d             [ 2] 	cmp #'-'
c2d8 : d011             [ 3] 	bne str_d_skip_neg
c2da : a64c             [ 3] 	ldx num_tmp+3		; Must have >= 2 chars
c2dc : e002             [ 2] 	cpx #2				; else it's an error
c2de : 90a0             [ 3] 	bcc str_d_error
c2e0 : a63d             [ 3] 	ldx num_a
c2e2 : a53e             [ 3] 	lda num_a+1
c2e4 : 2055c3           [ 6] 	jsr twos_complement
c2e7 : 863d             [ 3] 	stx num_a
c2e9 : 853e             [ 3] 	sta num_a+1
c2eb :                       str_d_skip_neg
c2eb : a64c             [ 3] 	ldx num_tmp+3
c2ed : a901             [ 2] 	lda #NUM_DEC
c2ef : 18               [ 2] 	clc
c2f0 : 60               [ 6] 	rts
                             
c2f1 :                       str_d_powers
c2f1 : 00000100020003..      	dw	0, 1, 2, 3, 4, 5, 6, 7, 8, 9
c305 : 00000a0014001e..      	dw	0, 10, 20, 30, 40, 50, 60, 70, 80, 90
c319 : 00006400c8002c..      	dw	0, 100, 200, 300, 400, 500, 600, 700, 800, 90
c32d : 0000e803d007b8..      	dw	0, 1000, 2000, 3000, 4000, 5000, 6000, 7000, 
c341 : 00001027204e30..      	dw	0, 10000, 20000, 30000, 40000, 50000, 60000, 
                             	
                             
                             ;****************************************
                             ;* twos_complement
AS65 Assembler for R6502 [1.42].                                     Page   57
-------------------------------- bank\bank0.s --------------------------------

                             ;* Twos complement of X,A (X=low)
                             ;* Input : X = Low byte, A = High Byte to convert
                             ;* Output : X,A in 2's complement
                             ;* Regs affected : P
                             ;****************************************
c355 :                       twos_complement
c355 : 49ff             [ 2] 	eor #0xff
c357 : 48               [ 3] 	pha
c358 : 8a               [ 2] 	txa
c359 : 49ff             [ 2] 	eor #0xff
c35b : aa               [ 2] 	tax
c35c : 68               [ 4] 	pla
c35d : e8               [ 2] 	inx
c35e : d003             [ 3] 	bne twos_complement_skip_X
c360 : 38               [ 2] 	sec			; Add 1 to A
c361 : 6900             [ 2] 	adc #0
c363 :                       twos_complement_skip_X
c363 : 60               [ 6] 	rts
                             	
                             
                             ;****************************************
                             ;* hex_to_bcd
                             ;* Convert accumulator,X to BCD
                             ;* Input : X = Low byte, A = High Byte to convert
                             ;* Output : 3 bytes of num_a is updated
                             ;* Regs affected : P
                             ;****************************************
c364 :                       hex_to_bcd
c364 : 08               [ 3] 	php
c365 : 48               [ 3] 	pha
c366 : 8538             [ 3] 	sta tmp_d
c368 : 8a               [ 2] 	txa
c369 : 48               [ 3] 	pha
c36a : a538             [ 3] 	lda tmp_d
                             
c36c : 8649             [ 3] 	stx num_tmp
c36e : 854a             [ 3] 	sta num_tmp+1
                             	
c370 : 3003             [ 3] 	bmi hex_to_bcd_skip_neg	; A is negative?
c372 : 2055c3           [ 6] 	jsr twos_complement
c375 :                       hex_to_bcd_skip_neg
c375 : a200             [ 2] 	ldx #0
c377 : 863d             [ 3] 	stx num_a
c379 : 863e             [ 3] 	stx num_a+1
c37b : 863f             [ 3] 	stx num_a+2
c37d : 8640             [ 3] 	stx num_a+3
c37f : a210             [ 2] 	ldx #16
c381 : f8               [ 2] 	sed
c382 :                       bin_to_bcd_bit
c382 : 0649             [ 5] 	asl num_tmp
c384 : 264a             [ 5] 	rol num_tmp+1
c386 : a53d             [ 3] 	lda num_a
c388 : 653d             [ 3] 	adc num_a
c38a : 853d             [ 3] 	sta num_a
c38c : a53e             [ 3] 	lda num_a+1
c38e : 653e             [ 3] 	adc num_a+1
c390 : 853e             [ 3] 	sta num_a+1
c392 : a53f             [ 3] 	lda num_a+2
c394 : 653f             [ 3] 	adc num_a+2
c396 : 853f             [ 3] 	sta num_a+2
c398 : ca               [ 2] 	dex
c399 : d0e7             [ 3] 	bne bin_to_bcd_bit
AS65 Assembler for R6502 [1.42].                                     Page   58
-------------------------------- bank\bank0.s --------------------------------

                             	
c39b : 68               [ 4] 	pla
c39c : aa               [ 2] 	tax
c39d : 68               [ 4] 	pla
c39e : 28               [ 4] 	plp
c39f : 60               [ 6] 	rts
                             	
                             ;****************************************
                             ;* bcd_to_str
                             ;* Convert num_buf to chars
                             ;* Input : num_a in BCD format
                             ;* Output : num_buf in ASCII 6 digits
                             ;* Output is big endian, input is not
                             ;* Regs affected : P
                             ;****************************************
c3a0 :                       bcd_to_str
                             	_pushAXY
                             
                             
c3a9 : a205             [ 2] 	ldx #5						; Index in to string
c3ab : a000             [ 2] 	ldy #0						; Current BCD digit
c3ad :                       bcd_str
c3ad : b93d00           [ 4] 	lda num_a,y
                             	; Convert 1s digit of byte
c3b0 : 48               [ 3] 	pha
c3b1 : 290f             [ 2] 	and #0xf
c3b3 : 18               [ 2] 	clc
c3b4 : 6930             [ 2] 	adc #0x30
c3b6 : 954d             [ 4] 	sta num_buf,x
                             	; Convert 10s digit of byte
c3b8 : 68               [ 4] 	pla
c3b9 : 4a               [ 2] 	lsr a
c3ba : 4a               [ 2] 	lsr a
c3bb : 4a               [ 2] 	lsr a
c3bc : 4a               [ 2] 	lsr a
c3bd : 18               [ 2] 	clc
c3be : 6930             [ 2] 	adc #0x30					; Convert to ASCII
c3c0 : 954c             [ 4] 	sta num_buf-1,x
c3c2 : ca               [ 2] 	dex
c3c3 : ca               [ 2] 	dex
c3c4 : c8               [ 2] 	iny
c3c5 : c003             [ 2] 	cpy #3						; 3 BCD digits max
c3c7 : d0e4             [ 3] 	bne bcd_str
                             
                             	_pullAXY
                             
c3ce : 60               [ 6] 	rts
                             	
                             ;****************************************
                             ;* out_bcd
                             ;* Output a bcd string in num_buf
                             ;* Input : num_buf has the ASCII
                             ;* Input : C=1 print leading zeros else not
                             ;* Output : num_buf in ASCII 6 digits
                             ;* Output is big endian, input is not, Y=digits p
                             ;* Regs affected : P
                             ;****************************************
c3cf :                       out_bcd
c3cf : 48               [ 3] 	pha
c3d0 : 8a               [ 2] 	txa
c3d1 : 48               [ 3] 	pha
c3d2 : 08               [ 3] 	php
AS65 Assembler for R6502 [1.42].                                     Page   59
-------------------------------- bank\bank0.s --------------------------------

c3d3 : a000             [ 2] 	ldy #0						; How many digits printed
c3d5 : a200             [ 2] 	ldx #0						; Index in to string
c3d7 :                       out_bcd_digit
c3d7 : b54d             [ 4] 	lda num_buf,x
c3d9 : c000             [ 2] 	cpy #0						; If not in leading zero mode
c3db : d008             [ 3] 	bne out_bcd_print			; No then go print
                             
c3dd : c930             [ 2] 	cmp #'0'					; else check if zero
c3df : d004             [ 3] 	bne out_bcd_print			; No then go print
                             
c3e1 : 28               [ 4] 	plp
c3e2 : 08               [ 3] 	php
c3e3 : 9004             [ 3] 	bcc out_bcd_next			; If C=0 go to next digit, el
c3e5 :                       out_bcd_print
c3e5 : c8               [ 2] 	iny
c3e6 : 2054c4           [ 6] 	jsr io_put_ch
c3e9 :                       out_bcd_next
c3e9 : e8               [ 2] 	inx
c3ea : e006             [ 2] 	cpx #6
c3ec : d0e9             [ 3] 	bne out_bcd_digit
c3ee : 98               [ 2] 	tya							; If nothing printed
c3ef : d006             [ 3] 	bne out_bcd_fin
c3f1 : a930             [ 2] 	lda #'0'					; Need to put out 1 zero
c3f3 : 2054c4           [ 6] 	jsr io_put_ch
c3f6 : c8               [ 2] 	iny
c3f7 :                       out_bcd_fin
c3f7 : 28               [ 4] 	plp
c3f8 : 68               [ 4] 	pla
c3f9 : aa               [ 2] 	tax
c3fa : 68               [ 4] 	pla
c3fb : 18               [ 2] 	clc
c3fc : 60               [ 6] 	rts
                             	
                             	
                             ;****************************************
                             ;* print_a_to_d
                             ;* Convert X,A to decimal string
                             ;* Input : X,A = number Low,High
                             ;* Input : C=1 print leading zeros else not
                             ;* Output : num_buf in ASCII max 6 digits
                             ;*          Y=digits printed including sign
                             ;* Output is big endian, input is not
                             ;* Regs affected : P
                             ;****************************************
c3fd :                       print_a_to_d
c3fd : 08               [ 3] 	php
c3fe : c980             [ 2] 	cmp #0x80					; Check if sign bit is set
c400 : 9014             [ 3] 	bcc print_a_to_d_skip_neg	; Skip if not (postive
c402 : 2055c3           [ 6] 	jsr twos_complement			; Flip from 2s complement
c405 : 2064c3           [ 6] 	jsr hex_to_bcd				; Convert to BCD
c408 : 20a0c3           [ 6] 	jsr bcd_to_str				; Convert BCD to string
c40b : a92d             [ 2] 	lda #'-'
c40d : 2054c4           [ 6] 	jsr io_put_ch
c410 : 28               [ 4] 	plp							; Leading zeros preference
c411 : 20cfc3           [ 6] 	jsr out_bcd
c414 : c8               [ 2] 	iny							; Account for sign
c415 : 60               [ 6] 	rts
c416 :                       print_a_to_d_skip_neg
c416 : 2064c3           [ 6] 	jsr hex_to_bcd				; Convert to BCD
c419 : 20a0c3           [ 6] 	jsr bcd_to_str				; Convert BCD to string
c41c : 28               [ 4] 	plp							; Leading zeros preference
c41d : 4ccfc3           [ 3] 	jmp out_bcd					; Print +ve string
AS65 Assembler for R6502 [1.42].                                     Page   60
-------------------------------- bank\bank0.s --------------------------------

                             	
                             	include "io/io.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  IO.S
                             ;*  General IO module.  Allows different IO devic
                             ;*  utilised transparently by the rest of the cod
                             ;*  Other code should use "io_" commands so that 
                             ;*  do not need to know what specific device is p
                             ;*  input and output capabilities.
                             ;*	On startup, the kernel defaults to keyboard an
                             ;*  examines the BBC DIP switch to decide whether
                             ;*	but when saving and loading points to tape rou
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code
                             
c420 :                       mod_sz_io_s
                             
                             ;****************************************
                             ;* io_init
                             ;* Initialise the default device and make active
                             ;* No keys pressed = serial (default)
                             ;* F0 pressed = KB/VDP
                             ;* F1 pressed = Serial
                             ;* Keyboard and screen or serial port
                             ;* Output : None
                             ;* Regs affected : P, A
                             ;****************************************
c420 :                       io_init
c420 : a901             [ 2] 	lda #1				; Default = KB/VDP
c422 : 8d0006           [ 4] 	sta io_default
c425 : 4c2bc4           [ 3] 	jmp io_active_device; Activate the device
                             
                             
                             ;****************************************
                             ;* io_set_default, io_active_device
                             ;* Activate device based on default or A
                             ;* Input : A = Device number
                             ;* Output : None
                             ;* Regs affected : P, A
                             ;****************************************
c428 :                       io_set_default			; Entry point for default
c428 : ad0006           [ 4] 	lda io_default
c42b :                       io_active_device		; Entry point for A set
c42b : aa               [ 2] 	tax					; X=buf size index
c42c : 0a               [ 2] 	asl	a				; x16 the Block number
c42d : 0a               [ 2] 	asl a
c42e : 0a               [ 2] 	asl a
c42f : 0a               [ 2] 	asl a
c430 : a8               [ 2] 	tay					; Y=index in to device table
c431 : bdb7c4           [ 4] 	lda io_buf_sz,x
c434 : 853b             [ 3] 	sta buf_sz
c436 : a200             [ 2] 	ldx #0
AS65 Assembler for R6502 [1.42].                                     Page   61
-------------------------------- bank\bank0.s --------------------------------

                             	; Copy device settings to io block
c438 :                       io_copy_data
c438 : b9b9c4           [ 4] 	lda io_devices,y
c43b : 9d0106           [ 5] 	sta io_block,x
c43e : c8               [ 2] 	iny
c43f : e8               [ 2] 	inx
c440 : e010             [ 2] 	cpx #16
c442 : d0f4             [ 3] 	bne io_copy_data
                             	
c444 : a913             [ 2] 	lda #lo(scratch)	; Initialise IO buffer and size
c446 : 8539             [ 3] 	sta buf_lo
c448 : a906             [ 2] 	lda #hi(scratch)
c44a : 853a             [ 3] 	sta buf_hi
c44c : a90d             [ 2] 	lda #UTF_CR			; Line terminator is CR
c44e : 853c             [ 3] 	sta buf_ef
c450 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* io_get_ch
                             ;* Get a char (wait forever or just check)
                             ;* Input : C = 1 for synchronous, 0 for async
                             ;* Output : A = Byte code, C = 1 means A is inval
                             ;* Regs affected : P, A
                             ;****************************************
c451 :                       io_get_ch
c451 : 6c0106           [ 6] 	jmp (io_block+io_get_byte)
                             	
                             
                             ;****************************************
                             ;* io_put_ch
                             ;* Put a char
                             ;* Input : A = char
                             ;* Regs affected : P, A
                             ;****************************************
c454 :                       io_put_ch
c454 : 6c0306           [ 6] 	jmp (io_block+io_put_byte)
                             	
                             ;****************************************
                             ;* io_open_read
                             ;* Open for reading
                             ;* Input : X,A = pointer to filename (zero termin
                             ;* Output : C=0 success
                             ;* Regs affected : All
                             ;****************************************
c457 :                       io_open_read
c457 : 6c0506           [ 6] 	jmp (io_block+io_open_r)
                             	
                             ;****************************************
                             ;* io_open_write
                             ;* Open for reading
                             ;* Input : X,A = pointer to filename (zero termin
                             ;* Output : C=0 success
                             ;* Regs affected : All
                             ;****************************************
c45a :                       io_open_write
c45a : 6c0706           [ 6] 	jmp (io_block+io_open_w)
                             
                             ;****************************************
                             ;* io_close
                             ;* Close a file
                             ;* Input : 
                             ;* Output : C=0 success
AS65 Assembler for R6502 [1.42].                                     Page   62
-------------------------------- bank\bank0.s --------------------------------

                             ;* Regs affected : All
                             ;****************************************
c45d :                       io_close
c45d : 6c0906           [ 6] 	jmp (io_block+io_close_f)
                             	
                             ;****************************************
                             ;* io_delete
                             ;* Delete a file
                             ;* Input : 
                             ;* Output : C=0 success
                             ;* Regs affected : All
                             ;****************************************
c460 :                       io_delete
c460 : 6c0b06           [ 6] 	jmp (io_block+io_del_f)
                             
                             ;****************************************
                             ;* io_open_ext1
                             ;* Extended function 1
                             ;* Input : 
                             ;* Output : C=0 success
                             ;* Regs affected : All
                             ;****************************************
c463 :                       io_open_ext1
c463 : 6c0d06           [ 6] 	jmp (io_block+io_ext1)
                             	
                             ;****************************************
                             ;* io_open_ext2
                             ;* Extended function 2
                             ;* Input : 
                             ;* Output : C=0 success
                             ;* Regs affected : All
                             ;****************************************
c466 :                       io_open_ext2
c466 : 6c0f06           [ 6] 	jmp (io_block+io_ext2)
                             	
                             ;****************************************
                             ;* io_read_line
                             ;* Read a line, terminated by terminating char or
                             ;* Input : buf_(lo/hi/sz/ef) : Address, Max size,
                             ;* Output : Y = Line length C = Buffer limit reac
                             ;* Regs affected : None
                             ;****************************************
c469 :                       io_read_line
c469 : 48               [ 3] 	pha
                             
c46a : 08               [ 3] 	php					; Save echo state
                             	
c46b : a000             [ 2] 	ldy #0x00			; Starting at first byte
c46d :                       io_get_line_byte
c46d : 38               [ 2] 	sec					; Getting bytes synchronously
c46e : 2051c4           [ 6] 	jsr io_get_ch		; Get a byte
c471 : b027             [ 3] 	bcs io_get_line_done; Got nothing then finish
c473 : 28               [ 4] 	plp					; Get echo state
c474 : 08               [ 3] 	php					; Instantly save it back
c475 : 900c             [ 3] 	bcc io_skip_echo	; Carry not set = don't echo
c477 : c97f             [ 2] 	cmp #UTF_DEL		; Delete?
c479 : d005             [ 3] 	bne io_do_echo
c47b : c000             [ 2] 	cpy #0				; Already at beginning?
c47d : f004             [ 3] 	beq io_skip_echo	; Don't echo delete
c47f : 88               [ 2] 	dey					; Else decrement length
c480 :                       io_do_echo
c480 : 2054c4           [ 6] 	jsr io_put_ch		; Echo it
AS65 Assembler for R6502 [1.42].                                     Page   63
-------------------------------- bank\bank0.s --------------------------------

c483 :                       io_skip_echo
c483 : c920             [ 2] 	cmp #UTF_SPECIAL	; Special character?
c485 : 9007             [ 3] 	bcc io_skip_special	; Skip if so (don't add to b
c487 : c97f             [ 2] 	cmp #UTF_DEL		; Don't proces DEL either
c489 : f003             [ 3] 	beq io_skip_special
c48b : 9139             [ 5] 	sta (buf_lo),y		; Save it
c48d : c8               [ 2] 	iny					; Increase length
c48e :                       io_skip_special
c48e : c53c             [ 3] 	cmp buf_ef			; Is it the terminating char?
c490 : f008             [ 3] 	beq io_get_line_done	; If yes then done
c492 : c43b             [ 3] 	cpy buf_sz			; Reached the buffer max size?
c494 : d0d7             [ 3] 	bne io_get_line_byte	; No, get another byte
c496 : 28               [ 4] 	plp					; Remember to pull echo state off stack
c497 : 38               [ 2] 	sec					; Yes, set carry flag
c498 : 68               [ 4] 	pla
c499 : 60               [ 6] 	rts					; And done
c49a :                       io_get_line_done
c49a : a900             [ 2] 	lda #0
c49c : 9139             [ 5] 	sta (buf_lo),y		; Terminate with 0
c49e : 28               [ 4] 	plp					; Remember to pull echo state off stack
c49f : 18               [ 2] 	clc					; Clear carry flag
c4a0 : 68               [ 4] 	pla
c4a1 : 60               [ 6] 	rts					; Fin
                             
                             ;****************************************
                             ;* io_print_line
                             ;* Print a line (when data is not already in seri
                             ;* Input : X = Address Lo, A = Address Hi
                             ;* Output : Y=number chars output
                             ;* Regs affected : All
                             ;****************************************
c4a2 :                       io_print_line
c4a2 : 48               [ 3] 	pha
                             
c4a3 : 8636             [ 3] 	stx tmp_clo					; Store the string pointer
c4a5 : 8537             [ 3] 	sta tmp_chi					; lo and hi
c4a7 : a000             [ 2] 	ldy #0						; Start at the beginning!
c4a9 :                       io_print_line_byte
c4a9 : b136             [ 5] 	lda (tmp_clo),y				; Copy byte to
c4ab : f006             [ 3] 	beq io_print_done			; If zero then done - print
c4ad : 2054c4           [ 6] 	jsr io_put_ch				; Transmit
c4b0 : c8               [ 2] 	iny
c4b1 : d0f6             [ 3] 	bne io_print_line_byte		; Carry on until zero fo
c4b3 :                       io_print_done
c4b3 : 68               [ 4] 	pla
c4b4 : 60               [ 6] 	rts
                             
                             
                             ;*** Null operation just clc and return ***
c4b5 :                       io_null_op
c4b5 : 18               [ 2] 	clc
c4b6 : 60               [ 6] 	rts
                             	
                             ;* IO buffer sizes
c4b7 :                       io_buf_sz
c4b7 : ff                    	db 255					; Device 0 = Tape
c4b8 : 7f                    	db 127					; Device 1 = keyboard/screen
                             
                             ;* IO devices defined here
c4b9 :                       io_devices
                             ;* Device zero is the tape system
                             ;* only offers get and put
AS65 Assembler for R6502 [1.42].                                     Page   64
-------------------------------- bank\bank0.s --------------------------------

                             ;* This is a block based device
c4b9 :                       io_device0					; Tape device, input = Tape, outpu
c4b9 : fcc6                  	dw	tp_get_byte			; io_get_ch
c4bb : 23c6                  	dw	tp_put_byte			; io_put_ch
c4bd : 8cc5                  	dw	tp_open_read		; io_open_r
c4bf : ddc5                  	dw	tp_open_write		; io_open_w
c4c1 : bfc5                  	dw	tp_close			; io_close_f
c4c3 : b5c4                  	dw	io_null_op			; io_del_f
c4c5 : 8cc5                  	dw	tp_open_bread		; io_ext1 - open for binary re
c4c7 : d7c5                  	dw	tp_open_bwrite		; io_ext2 - open for binary w
                             ;* Device one is keyboard / screen
                             ;* only offers get and put
                             ;* This is a char based device
c4c9 :                       io_device1					; Default device, input = screen e
c4c9 : edce                  	dw	gr_get_key			; io_get_ch
c4cb : 23cf                  	dw	gr_put_byte			; io_put_ch
c4cd : b5c4                  	dw	io_null_op			; io_open_r
c4cf : b5c4                  	dw	io_null_op			; io_open_w
c4d1 : b5c4                  	dw	io_null_op			; io_close_f
c4d3 : b5c4                  	dw	io_null_op			; io_del_f
c4d5 : b5c4                  	dw	io_null_op			; io_ext1
c4d7 : b5c4                  	dw	io_null_op			; io_ext2
                             ;* Serial device using printer port ACK (input) a
                             ;* This is a char based device
                             ;io_device2					; Serial device, input = Ser, out
                             ;	dw	ser_get_byte		; io_get_ch
                             ;	dw	ser_put_byte		; io_put_ch
                             ;	dw	ser_open			; io_open_r
                             ;	dw	ser_open			; io_open_w
                             ;	dw	ser_close			; io_close_f
                             ;	dw	io_null_op			; io_del_f
                             ;	dw	io_null_op			; io_ext1
                             ;	dw	io_null_op			; io_ext2
                             
c4d9 :                       mod_sz_io_e
                             
                             
                             
                             ;* Reset vector points here - 6502 starts here
c4d9 :                       init
                             ;	jmp init_test
                             	; First clear ram
c4d9 : 78               [ 2] 	sei					; Need this for MOS 6502
c4da : d8               [ 2] 	cld					; Need this for MOS 6502
c4db : 4c05c5           [ 3] 	jmp init_ram		; jmp not jsr to ram initialiser
c4de :                       init_2					; init_ram will jump back to here
c4de : a2ff             [ 2] 	ldx #0xff			; Initialise stack pointer
c4e0 : 9a               [ 2] 	txs
                             
c4e1 : 20e7c4           [ 6] 	jsr kernel_init
                             
c4e4 : 4c77c0           [ 3] 	jmp main
                             
c4e7 :                       kernel_init
c4e7 : 20cdc0           [ 6] 	jsr init_irq		; Initialise IRQ handling
                             
c4ea : 2025c5           [ 6] 	jsr init_via0		; initialise cia 0 - tape inactiv
c4ed : 2074c5           [ 6] 	jsr tp_init			; Initialise tape handling
                             
c4f0 : 202ad4           [ 6] 	jsr init_snd		; initialise the sound chip
                             
c4f3 : 208fcc           [ 6] 	jsr gr_init			; Initialise graphics, default is 
AS65 Assembler for R6502 [1.42].                                     Page   65
-------------------------------- bank\bank0.s --------------------------------

                             
c4f6 : 2067c7           [ 6] 	jsr init_keyboard	; initialise keyboard timer se
c4f9 : 2020c4           [ 6] 	jsr io_init			; Set default input/output device
                             
c4fc : a900             [ 2] 	lda #0
c4fe : 8508             [ 3] 	sta vdp_cnt
                             
c500 : 20a1f6           [ 6] 	jsr df_init			; Initialise interpreter
                             
c503 : 58               [ 2] 	cli					; irq interrupts enable
                             
c504 :                       kernel_test
                             ;	jsr kb_read_raw
                             ;	jsr utilPrintA
                             ;	jsr utilPrintCRLF
                             ;	jmp kernel_test
                             	
c504 : 60               [ 6] 	rts
                             
                             
                             ;* Initialises RAM, skipping page 3 which is for 
                             ;* Zeroes all addressable RAM in the default bank
c505 :                       init_ram
c505 : a900             [ 2] 	lda #0				; Normal RAM filled with zero
c507 : a002             [ 2] 	ldy #0x02			; But Y initially at 2 to not overwr
c509 : aa               [ 2] 	tax 				; Page counter starts at zero
c50a : 8600             [ 3] 	stx 0x00			; Start at page 0
c50c : 8601             [ 3] 	stx 0x01
c50e :                       init_ram_1
c50e : e003             [ 2] 	cpx	#3				; Ignore page 3 (IO page)
c510 : f005             [ 3] 	beq init_ram_skip
c512 :                       init_ram_fill
c512 : 9100             [ 5] 	sta (0x00),y		; Write byte to RAM (zero or copy 
c514 : c8               [ 2] 	iny
c515 : d0f7             [ 3] 	bne init_ram_1		; Do a whole page
c517 :                       init_ram_skip
c517 : e601             [ 5] 	inc 0x01			; Increase page pointer
c519 : e8               [ 2] 	inx					; Reduce page count
c51a : e0c0             [ 2] 	cpx #0xc0			; Do all pages until page until we g
c51c : d0f0             [ 3] 	bne init_ram_1
                             
c51e : 4cdec4           [ 3] 	jmp init_2			; Carry on initialisation
                             
                             ; 6502 Non-maskable interrupt come here
c521 :                       nmi
c521 : 40               [ 6] 	rti
                             
c522 :                       mod_sz_kernel_e
                             
                             
                             
                             ; Bank specific code goes here
                             	include "cia/cia.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  CIA.S
AS65 Assembler for R6502 [1.42].                                     Page   66
-------------------------------- bank\bank0.s --------------------------------

                             ;*  Code to initialise and utilise the 6522, whic
                             ;*	for various functions on the Oric including;
                             ;*		Port A:
                             ;*			[7..0] 	Printer data bits
                             ;*			[7..0] 	Interface to AY-3-8912
                             ;*		Port B:
                             ;*			[2..0] 	Keyboard matrix row selector
                             ;*			[7]	   	Tape output
                             ;*			[6]    	Tape player motor signal
                             ;*			[4]		Printer strobe
                             ;*		CA1:		Printer ACK
                             ;*		CB1: 		Tape input
                             ;*		CA2,CB2: 	Selecting the AY-3-8912
                             ;*
                             ;*  This file is called cia.s because code was or
                             ;*  for a MOS 6526 from a CMB64, but didn't get a
                             ;*	renaming this file ;-)
                             ;*
                             ;************************************************
                             
                             
                             	; ROM code
                             	code
                             
c522 :                       mod_sz_cia_s
                             	
                             
                             ;****************************************
                             ;* init_via0
                             ;* Initialise cia 0
                             ;* Input : None
                             ;* Output : None
                             ;* Regs affected : A
                             ;****************************************
c522 :                       init_via0_tape					; initialisation bytes for tap
c522 : a017             [ 2] 	ldy #init_tape_tab-init_via0_tab
c524 : 2c                    	db 0x2c						; Ignore next two bytes
c525 :                       init_via0
c525 : a000             [ 2] 	ldy #0						; Standard initialisation of VIA
c527 :                       init_via0_loop
c527 : b938c5           [ 4] 	lda init_via0_tab,y
c52a : 300b             [ 3] 	bmi init_via0_done
c52c : aa               [ 2] 	tax
c52d : c8               [ 2] 	iny
c52e : b938c5           [ 4] 	lda init_via0_tab,y
c531 : 9d0003           [ 5] 	sta IO_0,x
c534 : c8               [ 2] 	iny
c535 : d0f0             [ 3] 	bne init_via0_loop
                             	
c537 :                       init_via0_done	
c537 : 60               [ 6] 	rts							; return from sub
                             	
c538 :                       init_via0_tab
c538 : 0e7f                  	db IER, 	0x7f
c53a : 03ff                  	db DDRA,	0xff			; Port A output by default
c53c : 02f7                  	db DDRB,	0xf7			; Tape motor + KB select
c53e : 00bf                  	db PRB,		0xbf			; Port B default = cassette moto
c540 : 0cdd                  	db PCR,		0xdd			; Ensure AY is not selected (CB1
c542 : 0420                  	db T1CL,	lo(TIMER1_RATE)	; 50Hz
c544 : 0620                  	db T1LL,	lo(TIMER1_RATE)	; 50Hz
c546 : 054e                  	db T1CH,	hi(TIMER1_RATE)	; 50Hz
c548 : 074e                  	db T1LH,	hi(TIMER1_RATE)	; 50Hz
AS65 Assembler for R6502 [1.42].                                     Page   67
-------------------------------- bank\bank0.s --------------------------------

c54a : 0b40                  	db ACR,		0x40			; Timer 1 continuous
c54c : 0ec0                  	db IER,		0xc0			; Timer 1 interrupt enabled
c54e : ff                    	db -1
c54f :                       init_tape_tab
c54f : 0e7f                  	db IER,		0x7f			; Disable all interrupts
c551 : 08f4                  	db T2CL,	0xf4			; Timer 2 used for measuring CB1
c553 : 0c10                  	db PCR,		0x10			; Interrupt on CB1 positive edge
                             ;	db DDRB,	0xff			; Set port B output
c555 : 0bc0                  	db ACR,		0xc0			; T1 continuous and toggle PB7
c557 : 04a0                  	db T1CL,	lo(TAPE_RATE*2)	; Tape rate /2 = 0
c559 : 0501                  	db T1CH,	hi(TAPE_RATE*2)	; Tape rate /2 = 0
c55b : 00bf                  	db PRB,		0xbf			; Tape motor ON
c55d : ff                    	db -1
                             ;init_ser_tab
                             ;	db IER,		0x7f			; Disable all interrupts
                             ;	db T2CL,	0xf4			; Timer 2 used for measuring bi
                             ;	db PCR,		0xdd			; Ensure AY is not selected (CB
                             ;	db DDRB,	0xff			; Set port B output
                             ;	db -1
                             	
c55e :                       mod_sz_cia_e
                             
                             	include "tape/tape.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  TAPE.S
                             ;*	These routines allow for tape input/output
                             ;*	The tape format is not compatible with a regul
                             ;*	but is a block format as follows;
                             ;*	Some zero bits (64) start a block.
                             ;*	Then two bytes of data representing the block 
                             ;*	Then 256 bytes of block data.
                             ;*	Each byte above consists of two '1' start bits
                             ;*	one '0' stop bit.
                             ;*	After each block, 1 second of 4800Hz (seen as 
                             ;*	is transmitted to allow the CPU to deal with t
                             ;*	when subsequently loading.
                             ;*	A bit is 4800Hz half cycle then 4800Hz half cy
                             ;*	'1' or 2400Hz half cycle for a '0', except for
                             ;*	block which is one second of 2400Hz.
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code
                             
c55e :                       tp_open_msg
c55e : 4c6f6164696e67..      	db	"Loading:",0
c567 :                       tp_save_msg
c567 : 536176696e673a00      	db	"Saving:",0
c56f :                       tp_back4
c56f : 0808080800            	db	8,8,8,8,0
                             	
                             ;* tp_init
                             ;* Basic initialisation for tape handling
c574 :                       tp_init
AS65 Assembler for R6502 [1.42].                                     Page   68
-------------------------------- bank\bank0.s --------------------------------

c574 : a900             [ 2] 	lda #0
c576 : 8558             [ 3] 	sta tp_flag
c578 : 8557             [ 3] 	sta tp_idx
c57a : 18               [ 2] 	clc
c57b : 60               [ 6] 	rts
                             
                             ;* Common function to open tape
c57c :                       tp_open_common				; Used by open write too
c57c : 78               [ 2] 	sei						; Interrupts disabled from here..
c57d : 2022c5           [ 6] 	jsr init_via0_tape		; Get ready to output (tape 
                             
                             
c580 : a200             [ 2] 	ldx #0
c582 : 8657             [ 3] 	stx tp_idx				; Initialise block
c584 : 8655             [ 3] 	stx tp_block
c586 : 8656             [ 3] 	stx tp_block+1
c588 : e8               [ 2] 	inx
c589 : 8658             [ 3] 	stx tp_flag				; assume 1 = Read mode
c58b : 60               [ 6] 	rts
                             
                             ;* tp_open_read
                             ;* Open tape settings
                             
c58c :                       fd_cload_getname_pc			; ** FOR ORICUTRON EMULATOR
                             
c58c :                       tp_open_bread
c58c :                       tp_open_read
c58c : a05e             [ 2] 	ldy #lo(tp_open_msg)
c58e : a9c5             [ 2] 	lda #hi(tp_open_msg)
c590 : 2077cf           [ 6] 	jsr gr_print_msg
                             	
c593 : 207cc5           [ 6] 	jsr tp_open_common
                             
c596 :                       tp_get_fname_start
c596 : 2038c7           [ 6] 	jsr tp_read_byte
c599 : c924             [ 2] 	cmp #'$'				; Find the $ symbol
c59b : d0f9             [ 3] 	bne tp_get_fname_start
                             	
c59d : a209             [ 2] 	ldx #9					; 9 byte header - skip
c59f :                       tp_get_header
c59f : 2038c7           [ 6] 	jsr tp_read_byte
c5a2 : ca               [ 2] 	dex
c5a3 : d0fa             [ 3] 	bne tp_get_header
                             	
                             	; X= zero here, now get null terminated filename
c5a5 :                       tp_get_fname
c5a5 : 2038c7           [ 6] 	jsr tp_read_byte
c5a8 : 9d0004           [ 5] 	sta df_linbuff,x
c5ab : e8               [ 2] 	inx
c5ac : c900             [ 2] 	cmp #0
c5ae : d0f5             [ 3] 	bne tp_get_fname
                             
c5b0 : a000             [ 2] 	ldy #lo(df_linbuff)
c5b2 : a904             [ 2] 	lda #hi(df_linbuff)
c5b4 : 2077cf           [ 6] 	jsr gr_print_msg
c5b7 : a920             [ 2] 	lda #' '
c5b9 : 2023cf           [ 6] 	jsr gr_put_byte
                             
c5bc : 18               [ 2] 	clc
c5bd : 60               [ 6] 	rts
                             
c5be :                       tt_getsync_pc				; ** FOR ORICUTRON EMULATOR **
AS65 Assembler for R6502 [1.42].                                     Page   69
-------------------------------- bank\bank0.s --------------------------------

c5be :                       tt_getsync_end_pc			; ** FOR ORICUTRON EMULATOR *
                             
c5be : ea               [ 2] 	nop
                             	
                             
                             ;* tp_close
                             ;* Close tape settings
c5bf :                       tp_close
c5bf : a558             [ 3] 	lda tp_flag
c5c1 : c902             [ 2] 	cmp #2					; Write mode?
c5c3 : d003             [ 3] 	bne tp_close_no_flush	; If not no need to flush
c5c5 : 2055c6           [ 6] 	jsr tp_put_block		; Flush the current block
c5c8 :                       tp_close_no_flush
c5c8 : a90d             [ 2] 	lda #0x0d				; Line feed
c5ca : 2023cf           [ 6] 	jsr gr_put_byte
                             	
c5cd : 2025c5           [ 6] 	jsr init_via0			; Back to normal
c5d0 : 58               [ 2] 	cli
c5d1 : a900             [ 2] 	lda #0					; Zero tape flag
c5d3 : 8558             [ 3] 	sta tp_flag
                             
c5d5 :                       tt_csave_end_pc				; ** FOR ORICUTRON EMULATOR **
                             
c5d5 : 18               [ 2] 	clc
c5d6 : 60               [ 6] 	rts
                             
                             ;* tp_open_write
                             ;* Open tape settings
c5d7 :                       tp_open_bwrite
c5d7 : a001             [ 2] 	ldy #hi(0x101)
c5d9 : a201             [ 2] 	ldx #lo(0x101)
c5db : d004             [ 3] 	bne tp_open_write_start
c5dd :                       tp_open_write
c5dd : a018             [ 2] 	ldy #hi(6000+0x101)
c5df : a271             [ 2] 	ldx #lo(6000+0x101)
                             
c5e1 :                       fd_csave_getname_pc			; ** FOR ORICUTRON EMULATOR
                             
c5e1 :                       tp_open_write_start
c5e1 : 845a             [ 3] 	sty tp_delay+1
c5e3 : 8659             [ 3] 	stx tp_delay
c5e5 : a067             [ 2] 	ldy #lo(tp_save_msg)
c5e7 : a9c5             [ 2] 	lda #hi(tp_save_msg)
c5e9 : 2077cf           [ 6] 	jsr gr_print_msg
c5ec : a000             [ 2] 	ldy #lo(df_linbuff)
c5ee : a904             [ 2] 	lda #hi(df_linbuff)
c5f0 : 2077cf           [ 6] 	jsr gr_print_msg
c5f3 : a920             [ 2] 	lda #' '
c5f5 : 2023cf           [ 6] 	jsr gr_put_byte
                             	
c5f8 : 207cc5           [ 6] 	jsr tp_open_common		; Same as reading but
c5fb : e658             [ 5] 	inc tp_flag				; Make flag = 2 for write mode
                             
c5fd :                       tt_writeleader_pc			; ** FOR ORICUTRON EMULATOR *
c5fd :                       tt_writeleader_end_pc		; ** FOR ORICUTRON EMULATO
c5fd : a280             [ 2] 	ldx #128				; 128 low bits
c5ff : 204dc6           [ 6] 	jsr tp_put_delay
                             
c602 : a924             [ 2] 	lda #'$'				; Start of header symbol
c604 : 38               [ 2] 	sec
c605 : 20a4c6           [ 6] 	jsr tp_write_byte
                             	
AS65 Assembler for R6502 [1.42].                                     Page   70
-------------------------------- bank\bank0.s --------------------------------

c608 : a209             [ 2] 	ldx #9					; Header, for future expansion
c60a : a9ff             [ 2] 	lda #0xff
c60c :                       tp_write_header	
c60c : 38               [ 2] 	sec
c60d : 20a4c6           [ 6] 	jsr tp_write_byte
c610 : ca               [ 2] 	dex
c611 : d0f9             [ 3] 	bne tp_write_header
                             	
c613 : a200             [ 2] 	ldx #0
c615 :                       tp_write_fname
c615 : bd0004           [ 4] 	lda df_linbuff,x		; Put the filename
c618 : 38               [ 2] 	sec
c619 : 20a4c6           [ 6] 	jsr tp_write_byte
c61c : e8               [ 2] 	inx
c61d : c900             [ 2] 	cmp #0
c61f : d0f4             [ 3] 	bne tp_write_fname
                             	
c621 : 18               [ 2] 	clc
c622 : 60               [ 6] 	rts
                             
                             
                             ;* tp_put_byte
                             ;* Put to byte to tape - if got a block then save
                             
c623 :                       tp_put_byte
c623 : 48               [ 3] 	pha
c624 : 8538             [ 3] 	sta tmp_d
c626 : 8a               [ 2] 	txa
c627 : 48               [ 3] 	pha
c628 : 98               [ 2] 	tya
c629 : 48               [ 3] 	pha
c62a : a538             [ 3] 	lda tmp_d
                             	
c62c : a457             [ 3] 	ldy tp_idx				; Save byte to buffer
c62e : 990002           [ 5] 	sta tp_buf,y
c631 : c8               [ 2] 	iny
c632 : 8457             [ 3] 	sty tp_idx
c634 : d010             [ 3] 	bne tp_put_byte_done
c636 : 2055c6           [ 6] 	jsr tp_put_block		; Flush block to tape
c639 : 18               [ 2] 	clc						; Increment block #
c63a : a555             [ 3] 	lda tp_block
c63c : 6901             [ 2] 	adc #1
c63e : 8555             [ 3] 	sta tp_block
c640 : a556             [ 3] 	lda tp_block+1
c642 : 6900             [ 2] 	adc #0
c644 : 8556             [ 3] 	sta tp_block+1
c646 :                       tp_put_byte_done
c646 : 68               [ 4] 	pla
c647 : a8               [ 2] 	tay
c648 : 68               [ 4] 	pla
c649 : aa               [ 2] 	tax
c64a : 68               [ 4] 	pla
c64b : 18               [ 2] 	clc
c64c : 60               [ 6] 	rts
                             
                             ; tp_put_delay
                             ;* X = number of zero bits to insert
c64d :                       tp_put_delay
c64d : 18               [ 2] 	clc
c64e : 20c7c6           [ 6] 	jsr tp_write_bit
c651 : ca               [ 2] 	dex
c652 : d0f9             [ 3] 	bne tp_put_delay
AS65 Assembler for R6502 [1.42].                                     Page   71
-------------------------------- bank\bank0.s --------------------------------

c654 : 60               [ 6] 	rts
                             
                             ;* tp_put_block
                             ;* flush a block to tape
c655 :                       tp_put_block
c655 : 2079c6           [ 6] 	jsr tp_print_block
                             		
c658 : a280             [ 2] 	ldx #128				; 128 low bits
c65a : 204dc6           [ 6] 	jsr tp_put_delay
                             
c65d : a555             [ 3] 	lda tp_block			; Save block number low then high
c65f : 18               [ 2] 	clc
c660 : 20a4c6           [ 6] 	jsr tp_write_byte
c663 : a556             [ 3] 	lda tp_block+1
c665 : 38               [ 2] 	sec
c666 : 20a4c6           [ 6] 	jsr tp_write_byte
                             
c669 : a200             [ 2] 	ldx #0
c66b :                       tp_put_block_bytes
c66b : bd0002           [ 4] 	lda tp_buf,x			; Then write out all bytes in blo
c66e : 18               [ 2] 	clc
c66f : 20a4c6           [ 6] 	jsr tp_write_byte
c672 : e8               [ 2] 	inx
c673 : d0f6             [ 3] 	bne tp_put_block_bytes	; Always 256 bytes
                             	
c675 : 2099c6           [ 6] 	jsr tp_block_gap		; Wait a while, still outputti
                             
c678 : 60               [ 6] 	rts
                             
                             ; tp_print_block
c679 :                       tp_print_block
c679 : a556             [ 3] 	lda tp_block+1			; Print block number hi byte
c67b : 2098c1           [ 6] 	jsr str_a_to_x
c67e : 2023cf           [ 6] 	jsr gr_put_byte
c681 : 8a               [ 2] 	txa
c682 : 2023cf           [ 6] 	jsr gr_put_byte
c685 : a555             [ 3] 	lda tp_block			; Print block number lo byte
c687 : 2098c1           [ 6] 	jsr str_a_to_x
c68a : 2023cf           [ 6] 	jsr gr_put_byte
c68d : 8a               [ 2] 	txa
c68e : 2023cf           [ 6] 	jsr gr_put_byte
c691 : a9c5             [ 2] 	lda #hi(tp_back4)		; Go back 4 characters to pri
c693 : a06f             [ 2] 	ldy #lo(tp_back4)
c695 : 2077cf           [ 6] 	jsr gr_print_msg
c698 : 60               [ 6] 	rts
                             
                             ; tp_block_gap
                             ; Send 2400 bits of zero ~ 1.5 seconds
                             ; add 0x101 due to how counters decrement
                             ; For binary mode it is just 1 bit gap
c699 :                       tp_block_gap
c699 : a45a             [ 3] 	ldy tp_delay+1
c69b : a659             [ 3] 	ldx tp_delay
c69d :                       tp_block_gap_1
c69d : 204dc6           [ 6] 	jsr tp_put_delay
c6a0 : 88               [ 2] 	dey
c6a1 : d0fa             [ 3] 	bne tp_block_gap_1
c6a3 : 60               [ 6] 	rts	
                             
                             ;* tp_write_byte
                             ;* Write a byte to tape which looks like this
                             ;* 11xxxxxxxx0
AS65 Assembler for R6502 [1.42].                                     Page   72
-------------------------------- bank\bank0.s --------------------------------

c6a4 :                       tt_putbyte_pc				; ** FOR ORICUTRON EMULATOR **
c6a4 :                       tp_write_byte
c6a4 : 48               [ 3] 	pha
c6a5 : 08               [ 3] 	php
c6a6 : 38               [ 2] 	sec					; 1 for start bit
c6a7 : 20c7c6           [ 6] 	jsr tp_write_bit
c6aa : 38               [ 2] 	sec					; 1 for start bit
c6ab : 20c7c6           [ 6] 	jsr tp_write_bit
c6ae : a008             [ 2] 	ldy #8				; 8 bits of data
c6b0 :                       tp_write_byte_bit
c6b0 : 6a               [ 2] 	ror a
c6b1 : 20c7c6           [ 6] 	jsr tp_write_bit
c6b4 : 88               [ 2] 	dey
c6b5 : d0f9             [ 3] 	bne tp_write_byte_bit
c6b7 : 18               [ 2] 	clc					; 0 for stop bit
c6b8 : 20c7c6           [ 6] 	jsr tp_write_bit
c6bb : 28               [ 4] 	plp
c6bc : 9007             [ 3] 	bcc tp_write_byte_nodelay
c6be : 8a               [ 2] 	txa
c6bf : a220             [ 2] 	ldx #32					; Delays needed
c6c1 : 204dc6           [ 6] 	jsr tp_put_delay
c6c4 : aa               [ 2] 	tax
c6c5 :                       tp_write_byte_nodelay
c6c5 : 68               [ 4] 	pla
c6c6 :                       tt_putbyte_end_pc			; ** FOR ORICUTRON EMULATOR *
c6c6 : 60               [ 6] 	rts
                             	
                             
                             ;* tp_write_bit
                             ;* Write a bit in C to tape which looks like this
                             ;* Half cycle of 4800Hz, then
                             ;*		half cycle of 4800Hz for a 1
                             ;*		half cycle of 2400Hz for a 0
c6c7 :                       tp_write_bit
c6c7 : 48               [ 3] 	pha
c6c8 : 8a               [ 2] 	txa
c6c9 : 48               [ 3] 	pha
c6ca : 08               [ 3] 	php						; Save the bit to be stored
                             
c6cb : a9d0             [ 2] 	lda #TAPE_RATE			; Half cycle first of 4800Hz
c6cd : a200             [ 2] 	ldx #0
c6cf : 8d0603           [ 4] 	sta IO_0+T1LL
c6d2 : 8e0703           [ 4] 	stx IO_0+T1LH			; This starts the timer
c6d5 : ad0403           [ 4] 	lda IO_0+T1CL			; Clear any interrupt flag
c6d8 :                       tp_write_bit_chk1
c6d8 : 2c0d03           [ 4] 	bit IO_0+IFR			; Check IRF for bit 6
c6db : 50fb             [ 3] 	bvc tp_write_bit_chk1	; V=0? Keep checking
c6dd : ad0403           [ 4] 	lda IO_0+T1CL			; Clear interrupt flag
                             	
c6e0 : 28               [ 4] 	plp						; Get the bit to be stored
c6e1 : a9d0             [ 2] 	lda #TAPE_RATE			; Assume putting out a 1 in 2nd
c6e3 : b002             [ 3] 	bcs tp_write_bit_t1		; A zero is half the rate (
c6e5 : 0a               [ 2] 	asl	a					; TAPE_RATE * 2 need to inc X
c6e6 : e8               [ 2] 	inx
c6e7 :                       tp_write_bit_t1
c6e7 : 8d0603           [ 4] 	sta IO_0+T1LL
c6ea : 8e0703           [ 4] 	stx IO_0+T1LH			; This starts the timer
c6ed : ad0403           [ 4] 	lda IO_0+T1CL			; Clear any interrupt flag
c6f0 :                       tp_write_bit_chk2
c6f0 : 2c0d03           [ 4] 	bit IO_0+IFR			; Check IRF for bit 6
c6f3 : 50fb             [ 3] 	bvc tp_write_bit_chk2	; V=0? Keep checking
c6f5 : ad0403           [ 4] 	lda IO_0+T1CL			; Clear interrupt flag
AS65 Assembler for R6502 [1.42].                                     Page   73
-------------------------------- bank\bank0.s --------------------------------

c6f8 : 68               [ 4] 	pla
c6f9 : aa               [ 2] 	tax
c6fa : 68               [ 4] 	pla
c6fb : 60               [ 6] 	rts
                             
                             
                             
                             ;* tp_get_byte
                             ;* Get a byte from buffer - load blocks as needed
c6fc :                       tp_get_byte
c6fc : 8a               [ 2] 	txa
c6fd : 48               [ 3] 	pha
c6fe : 98               [ 2] 	tya
c6ff : 48               [ 3] 	pha
                             	
c700 : a457             [ 3] 	ldy tp_idx				; Index in to buffer
c702 : d005             [ 3] 	bne tp_get_byte_buf		; No need to load from tape
c704 : 2019c7           [ 6] 	jsr tp_get_block		; Else load a block from tape
c707 : a000             [ 2] 	ldy #0					; 0 index is now valid
c709 :                       tp_get_byte_buf
c709 : b90002           [ 4] 	lda tp_buf,y			; Get from memory buffer
c70c : c8               [ 2] 	iny
c70d : 8457             [ 3] 	sty tp_idx				; Never zero on leaving
c70f : 8538             [ 3] 	sta tmp_d
c711 : 68               [ 4] 	pla
c712 : a8               [ 2] 	tay
c713 : 68               [ 4] 	pla
c714 : aa               [ 2] 	tax
c715 : a538             [ 3] 	lda tmp_d
c717 : 18               [ 2] 	clc
c718 : 60               [ 6] 	rts						; Except when buffer done
                             
                             ;* tp_get_block
                             ;* Load a block in to memory
c719 :                       tp_get_block
                             
c719 : 2038c7           [ 6] 	jsr tp_read_byte		; Get block number
c71c : 8555             [ 3] 	sta tp_block
c71e : 2038c7           [ 6] 	jsr tp_read_byte
c721 : 8556             [ 3] 	sta tp_block+1
                             	
c723 : 2079c6           [ 6] 	jsr tp_print_block
                             	
c726 : a000             [ 2] 	ldy #0
c728 : 8457             [ 3] 	sty tp_idx
c72a :                       tp_get_block_bytes
c72a : 2038c7           [ 6] 	jsr tp_read_byte		; Fill buffer
c72d : a457             [ 3] 	ldy tp_idx
c72f : 990002           [ 5] 	sta tp_buf,y
c732 : c8               [ 2] 	iny
c733 : 8457             [ 3] 	sty tp_idx
c735 : d0f3             [ 3] 	bne tp_get_block_bytes	; Always 256 bytes
                             
c737 : 60               [ 6] 	rts
                             	
                             
                             ;* tp_read_byte
                             ;* Read a byte from tape, always expects one '1' 
c738 :                       tt_readbyte_pc				; ** FOR ORICUTRON EMULATOR **
c738 :                       tp_read_byte
c738 :                       tp_read_byte_st
c738 : 204cc7           [ 6] 	jsr tp_read_bit			; Expecting a 1
AS65 Assembler for R6502 [1.42].                                     Page   74
-------------------------------- bank\bank0.s --------------------------------

c73b : 90fb             [ 3] 	bcc tp_read_byte_st
c73d : 204cc7           [ 6] 	jsr tp_read_bit			; Should be another 1
c740 : 90f6             [ 3] 	bcc tp_read_byte_st
                             	; Ok got 2 start
                             	
c742 : a008             [ 2] 	ldy #8				; Get 8 bits
c744 :                       tp_read_byte_bits
c744 : 204cc7           [ 6] 	jsr tp_read_bit
c747 : 6a               [ 2] 	ror a
c748 : 88               [ 2] 	dey
c749 : d0f9             [ 3] 	bne tp_read_byte_bits
                             	; Byte is in A, stop bit is not waited for..
c74b :                       tt_readbyte_end_pc			; ** FOR ORICUTRON EMULATOR 
c74b : 60               [ 6] 	rts
                             
                             ;* tp_read_bit
                             ;* Get a CB1 transition and measure the time
                             ;* The measurement indicates a 1 or 0 received
c74c :                       tp_read_bit
c74c : 48               [ 3] 	pha
c74d : ad0003           [ 4] 	lda IO_0+PRB			; Clear CB1 interrupt flag by rea
c750 :                       tp_read_bit_cb1
c750 :                       tt_getsync_loop_pc			; ** FOR ORICUTRON EMULATOR 
c750 : ad0d03           [ 4] 	lda IO_0+IFR
c753 : 2910             [ 2] 	and #IFR_CB1
c755 : f0f9             [ 3] 	beq tp_read_bit_cb1		; Keep checking until CB1 a
                             
c757 : ad0903           [ 4] 	lda IO_0+T2CH			; Get the high byte of T2 counte
c75a : 48               [ 3] 	pha
c75b : a9ff             [ 2] 	lda #0xff				; Reset T2 counter high byte
c75d : 8d0903           [ 4] 	sta IO_0+T2CH			; Reset high byte of T2 counter
c760 : 68               [ 4] 	pla						; What was previous counter?
                             ;	beq tp_io_error			; If down to zero, then some 
c761 : c9fe             [ 2] 	cmp #0xfe				; C=1 if T2 >= 0xfe else C=0
c763 : 68               [ 4] 	pla
c764 : 60               [ 6] 	rts						; Carry contains the bit received
c765 :                       tp_io_error
                             	SWBRK DFERR_BREAK		; DEFINE A NEW ERROR!
                             
                             
                             
                             
                             	include "keyboard/keyboard.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  KEYBOARD.S
                             ;*	Keyboard driver code. It is very slow to scan 
                             ;*	routines here do a basic scan for any key befo
                             ;*	the specific key. Still, it has a noticeable i
                             ;*	CPU especially in dflat which checks the key a
                             ;*	keyword is executed.
                             ;*	Rather than working off interrupts these routi
                             ;*	need to be called as needed. The T1 interrupt 
                             ;*	track of keyboard timers for repeat delay and 
                             ;*
                             ;************************************************
AS65 Assembler for R6502 [1.42].                                     Page   75
-------------------------------- bank\bank0.s --------------------------------

                             
                             	; ROM code
                             	code
                             
                             ;****************************************
                             ;* init_keyboard
                             ;* Initialise the keyboard settings
                             ;****************************************
c767 :                       init_keyboard
c767 : a914             [ 2] 	lda #KB_REP_DEL
c769 : 8531             [ 3] 	sta kb_rdel_tim
c76b : a903             [ 2] 	lda #KB_REP_TIM
c76d : 8530             [ 3] 	sta kb_rep_tim
c76f : a901             [ 2] 	lda #KB_DEBOUNCE
c771 : 852e             [ 3] 	sta kb_deb_tim
c773 : a900             [ 2] 	lda #0
c775 : 852c             [ 3] 	sta kb_stat
                             
c777 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* kb_stick
                             ;* Check for fire | down | up | right | left
                             ;*        bit  4     3      2     1       0
                             ;* Returns bit mask of keys pressed
                             ;****************************************
c778 :                       kb_stick
                             	; Select Row 4 only, all keys on this row
c778 : a904             [ 2] 	lda #4
c77a : 8d0003           [ 4] 	sta IO_0+PRB
c77d : a90e             [ 2] 	lda #SND_REG_IOA		; Select AY Port A for columns
c77f : 204ec0           [ 6] 	jsr snd_sel_reg
c782 : a900             [ 2] 	lda #0					; Result will be in A
c784 : 48               [ 3] 	pha	
c785 : a004             [ 2] 	ldy #4					; Go through the 5 cols on row 4
c787 :                       kb_stick_pos
c787 : b95ac9           [ 4] 	lda kb_stick_mask,y		; Get the column mask
c78a : 205ec0           [ 6] 	jsr snd_set_reg			; Activate column
c78d : ea               [ 2] 	nop
c78e : ea               [ 2] 	nop
c78f : ea               [ 2] 	nop
c790 : ea               [ 2] 	nop
c791 : a908             [ 2] 	lda #KB_SENSE			; Something pressed?
c793 : 2d0003           [ 4] 	and IO_0+PRB			; Read Port B
c796 : c908             [ 2] 	cmp #KB_SENSE			; C=1 if set else 0
c798 : 68               [ 4] 	pla
c799 : 2a               [ 2] 	rol a					; Get C in to A
c79a : 48               [ 3] 	pha
c79b : 88               [ 2] 	dey
c79c : 10e9             [ 3] 	bpl kb_stick_pos		; Do all 5 positions
c79e : 68               [ 4] 	pla						; Result in A
c79f : 60               [ 6] 	rts
                             
                             	
                             ;****************************************
                             ;* kb_any_key
                             ;* Quick check for any key except shifts & ctrl
                             ;* Carry = 1 means key pressed
                             ;****************************************
c7a0 :                       kb_any_key
c7a0 : a90e             [ 2] 	lda #SND_REG_IOA		; Select Port A of AY
c7a2 : 204ec0           [ 6] 	jsr snd_sel_reg
AS65 Assembler for R6502 [1.42].                                     Page   76
-------------------------------- bank\bank0.s --------------------------------

                             
c7a5 : a007             [ 2] 	ldy #7					; Start from row 7
c7a7 :                       kb_any_key_row
c7a7 : 8c0003           [ 4] 	sty IO_0+PRB			; Select row on port B
                             	; Select all columns except 4
c7aa : a910             [ 2] 	lda #0b00010000			; Deselect only col 4
c7ac : 205ec0           [ 6] 	jsr snd_set_reg
                             
c7af : ea               [ 2] 	nop
c7b0 : ea               [ 2] 	nop
c7b1 : ea               [ 2] 	nop						; New NOP
c7b2 : ea               [ 2] 	nop
c7b3 : ea               [ 2] 	nop
                             ;	nop						; New NOP
                             	
c7b4 : a908             [ 2] 	lda #KB_SENSE			; Something pressed?
c7b6 : 2d0003           [ 4] 	and IO_0+PRB			; Read Port B
c7b9 : d005             [ 3] 	bne kb_any_key_pressed
c7bb : 88               [ 2] 	dey						; If not then next row
c7bc : 10e9             [ 3] 	bpl kb_any_key_row		; Until all rows done
c7be :                       kb_any_key_none
c7be : 18               [ 2] 	clc						; C=0 means not pressed
c7bf : 60               [ 6] 	rts
c7c0 :                       kb_any_key_pressed
c7c0 :                       kb_read_got
c7c0 : 38               [ 2] 	sec						; C=1 means pressed
c7c1 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* kb_read_raw
                             ;* Read keyboard
                             ;* Y = Keyboard code
                             ;* Carry = 1 means key found, 0 = no keys found
                             ;****************************************
c7c2 :                       kb_read_raw
c7c2 : 20a0c7           [ 6] 	jsr kb_any_key			; Quick check is anything down?
c7c5 : 9046             [ 4] 	bcc kb_read_nothing		; Don't bother if not
c7c7 :                       kb_read_raw_force
c7c7 : a20e             [ 2] 	ldx #SND_REG_IOA		; Select Port A of AY
c7c9 : 8e0f03           [ 4] 	stx SND_ADBUS			; Put reg # on Port A (sound bus
c7cc : a2ff             [ 2] 	ldx #SND_SELSETADDR		; Get ready to select the r
c7ce : 8e0c03           [ 4] 	stx SND_MODE			; Latch the reg # on Port A
c7d1 : a2dd             [ 2] 	ldx #SND_DESELECT		; Deselect AY
c7d3 : 8e0c03           [ 4] 	stx SND_MODE
c7d6 : a200             [ 2] 	ldx #0					; Start at column 0	
c7d8 : 86ab             [ 3] 	stx zp_tmp1
c7da :                       kb_check_matrix_col
c7da : a000             [ 2] 	ldy #0					; Start at row 0
c7dc :                       kb_check_matrix_row
c7dc : 8c0003           [ 4] 	sty IO_0+PRB			; Select row from Y
                             	; Get the col value for AY port A
c7df : a6ab             [ 3] 	ldx zp_tmp1
c7e1 : bd52c9           [ 4] 	lda kb_col_mask,x
                             	; Write it to AY port A
c7e4 : 8d0f03           [ 4] 	sta SND_ADBUS			; Put col value on AY bus
c7e7 : a2fd             [ 2] 	ldx #SND_SELWRITE		; Select mode for writing dat
c7e9 : 8e0c03           [ 4] 	stx SND_MODE			; Latch reg value on Port A
c7ec : a2dd             [ 2] 	ldx #SND_DESELECT		; Deselect AY
c7ee : 8e0c03           [ 4] 	stx SND_MODE
                             
c7f1 : ea               [ 2] 	nop						; Wait 10 cycles before reading sense p
c7f2 : ea               [ 2] 	nop
AS65 Assembler for R6502 [1.42].                                     Page   77
-------------------------------- bank\bank0.s --------------------------------

c7f3 : ea               [ 2] 	nop
                             
c7f4 : a908             [ 2] 	lda #KB_SENSE			; Bit 3 is the sense
c7f6 : 2d0003           [ 4] 	and IO_0+PRB			; And with Port B
                             
c7f9 : d016             [ 4] 	bne kb_read_raw_got
                             	; No key for this row/col, next
c7fb : c8               [ 2] 	iny
c7fc : c008             [ 2] 	cpy #8					; Done 8 rows?
c7fe : d0dc             [ 3] 	bne kb_check_matrix_row
                             	; ok check next row
c800 : a6ab             [ 3] 	ldx zp_tmp1
c802 :                       kb_check_skip4
c802 : e8               [ 2] 	inx
c803 : e004             [ 2] 	cpx #4					; Skip 4?
c805 : f0fb             [ 3] 	beq kb_check_skip4
c807 : 86ab             [ 3] 	stx zp_tmp1
c809 : e008             [ 2] 	cpx #8					; Done 8 cols?
c80b : d0cd             [ 4] 	bne kb_check_matrix_col
                             	; No key was sensed
c80d :                       kb_read_nothing
c80d : a000             [ 2] 	ldy #0					; Raw key codes
c80f : 18               [ 2] 	clc						; No key sensed flag
c810 : 60               [ 6] 	rts
c811 :                       kb_read_raw_got
                             	;Y=row, zp_temp1=col
c811 : a5ab             [ 3] 	lda zp_tmp1				; Get the column num
c813 : 0a               [ 2] 	asl a					; Shift in to bits 5,4,3
c814 : 0a               [ 2] 	asl a
c815 : 0a               [ 2] 	asl a
c816 : 85ab             [ 3] 	sta zp_tmp1
c818 : 98               [ 2] 	tya						; Now or with row number
c819 : 05ab             [ 3] 	ora zp_tmp1
c81b : a8               [ 2] 	tay						; Put in to Y
c81c : 38               [ 2] 	sec
c81d : 60               [ 6] 	rts
                             	
                             ;****************************************
                             ;* kb_scan_key
                             ;* Scans for a key, returns zero for no key found
                             ;* Processes caps and shift lock but these don't 
                             ;* A = Key code
                             ;****************************************
c81e :                       kb_scan_key
c81e : a52d             [ 3] 	lda kb_deb				; Do not scan keyboard too often
c820 : d013             [ 3] 	bne kb_no_scan
c822 : a52e             [ 3] 	lda kb_deb_tim			; Else reset debounce timer
c824 : 852d             [ 3] 	sta kb_deb
c826 : 20c2c7           [ 6] 	jsr kb_read_raw			; Check if a key is sensed
c829 : b00e             [ 3] 	bcs kb_scan_decode		; go ahead and decode
                             	; If pressed nothing then reset timers
c82b : a9ff             [ 2] 	lda #255
c82d : 8529             [ 3] 	sta kb_raw				; Reset raw key settings
c82f : 852a             [ 3] 	sta kb_last				; And last key
c831 : a531             [ 3] 	lda kb_rdel_tim			; Reset repeat timer to initia
c833 : 852f             [ 3] 	sta kb_rep
c835 :                       kb_no_scan
c835 : a900             [ 2] 	lda #0
c837 : 38               [ 2] 	sec						; Code not valid
c838 : 60               [ 6] 	rts						; And done (A=0)	
c839 :                       kb_scan_decode
                             	; If got here then raw key is good
AS65 Assembler for R6502 [1.42].                                     Page   78
-------------------------------- bank\bank0.s --------------------------------

c839 : a52a             [ 3] 	lda kb_last				; Preload A with last decoded key
c83b : c429             [ 3] 	cpy kb_raw				; Same as last raw key?
c83d : 8429             [ 3] 	sty kb_raw				; Already save new raw key
c83f : d002             [ 3] 	bne kb_process_new		; If is new raw key, look at
c841 : f05f             [ 3] 	beq kb_do_repeat		; Else go handle repeating wit
c843 :                       kb_process_new
c843 : a531             [ 3] 	lda kb_rdel_tim			; Reset repeat timer to initia
c845 : 852f             [ 3] 	sta kb_rep
                             	; Now to get a proper key code translated from r
                             	; Check for shift and ctrl (not debounced!)
c847 : a9ef             [ 2] 	lda #0b11101111			; Select column 4
c849 : a20e             [ 2] 	ldx #SND_REG_IOA		; On AY port A
c84b : 206ec0           [ 6] 	jsr snd_set
                             
                             	; check shifted keys
c84e : a204             [ 2] 	ldx #4					; Row 4 (left shift)
c850 : 8e0003           [ 4] 	stx IO_0+PRB			; Select row on port B
c853 : ea               [ 2] 	nop
c854 : ea               [ 2] 	nop
c855 : ea               [ 2] 	nop
c856 : ea               [ 2] 	nop
                             
c857 : ad0003           [ 4] 	lda IO_0+PRB			; Read Port B
                             
c85a : a207             [ 2] 	ldx #7					; Row 7 (right shift)
c85c : 8e0003           [ 4] 	stx IO_0+PRB			; Select row on port B
c85f : ea               [ 2] 	nop
c860 : ea               [ 2] 	nop
c861 : ea               [ 2] 	nop
c862 : ea               [ 2] 	nop
                             
c863 : 0d0003           [ 4] 	ora IO_0+PRB			; Combine Port B
c866 : bed2c8           [ 4] 	ldx kb_table_std,y		; Pre-load standard key code
c869 : 2908             [ 2] 	and #KB_SENSE			; Bit 3 is the sense
c86b : f003             [ 3] 	beq kb_read_noshift		; Skip over if no shift
c86d : be12c9           [ 4] 	ldx kb_table_shift,y	; Load up standard key code
c870 :                       kb_read_noshift
c870 : 862b             [ 3] 	stx kb_code				; Save the mapped keycode
                             	; check ctrl key
c872 : a202             [ 2] 	ldx #2					; Row 2 (ctrl key)
c874 : 8e0003           [ 4] 	stx IO_0+PRB			; Select row on port B
c877 : ea               [ 2] 	nop
c878 : ea               [ 2] 	nop
c879 : ea               [ 2] 	nop
c87a : ea               [ 2] 	nop
                             
c87b : ad0003           [ 4] 	lda IO_0+PRB			; Read Port B
c87e : 2908             [ 2] 	and #KB_SENSE
c880 : f00a             [ 3] 	beq kb_skip_ctrl
c882 : a52b             [ 3] 	lda kb_code
c884 : 291f             [ 2] 	and #0x1f				; Ctrl will result in codes 0 to 31
c886 : 852b             [ 3] 	sta kb_code				; Override the keycode
c888 : f028             [ 3] 	beq kb_brk
c88a : 101e             [ 3] 	bpl	kb_store_last		; Check repeat (bpl is always
c88c :                       kb_skip_ctrl
c88c : a52c             [ 3] 	lda kb_stat				; Check caps lock
c88e : 2901             [ 2] 	and #KB_CAPSLK
c890 : f018             [ 3] 	beq kb_store_last
c892 : a52b             [ 3] 	lda kb_code
c894 : c961             [ 2] 	cmp #'a'				; If < 'a' then skip
c896 : 9012             [ 3] 	bcc kb_store_last
c898 : c97b             [ 2] 	cmp #'z'+1				; If > 'z' then skip
AS65 Assembler for R6502 [1.42].                                     Page   79
-------------------------------- bank\bank0.s --------------------------------

c89a : b00e             [ 3] 	bcs kb_store_last
c89c : a52b             [ 3] 	lda kb_code				; Get the actual code	
c89e : 4920             [ 2] 	eor #0x20				; Switch off bit 0x20
c8a0 : d008             [ 3] 	bne kb_store_last
c8a2 :                       kb_do_repeat
c8a2 : a62f             [ 3] 	ldx kb_rep				; Has repeat expired?
c8a4 : d008             [ 3] 	bne	kb_in_repeat		; If not then still in repeat
c8a6 : a630             [ 3] 	ldx kb_rep_tim			; Set repeat speed
c8a8 : 862f             [ 3] 	stx kb_rep
c8aa :                       kb_store_last
c8aa : 852a             [ 3] 	sta kb_last				; Make last code same as this
c8ac : 18               [ 2] 	clc						; Code valid
c8ad : 60               [ 6] 	rts	
c8ae :                       kb_in_repeat
c8ae : a900             [ 2] 	lda #0					; Don't emit a keycode
c8b0 : 38               [ 2] 	sec
c8b1 : 60               [ 6] 	rts
c8b2 :                       kb_brk
                             	SWBRK DFERR_OK
                             
                             
                             ;****************************************
                             ;* kb_get_key
                             ;* Waits for a key press, C=1 synchronous
                             ;* A = Key code, C=1 means valid
                             ;****************************************
c8b4 :                       kb_get_key
c8b4 : 8a               [ 2] 	txa
c8b5 : 48               [ 3] 	pha
c8b6 : 98               [ 2] 	tya
c8b7 : 48               [ 3] 	pha
                             
c8b8 :                       kb_get_try	
c8b8 : 08               [ 3] 	php
c8b9 : 201ec8           [ 6] 	jsr kb_scan_key
c8bc : 900b             [ 3] 	bcc kb_scan_got_key
c8be : 28               [ 4] 	plp						; No key, so check C
c8bf : b0f7             [ 3] 	bcs kb_get_try			; Keep looking if C
c8c1 : 38               [ 2] 	sec						; Indicate key not valid
                             	
c8c2 : 68               [ 4] 	pla
c8c3 : a8               [ 2] 	tay
c8c4 : 68               [ 4] 	pla
c8c5 : aa               [ 2] 	tax
c8c6 : a900             [ 2] 	lda #0
                             	
c8c8 : 60               [ 6] 	rts
c8c9 :                       kb_scan_got_key
c8c9 : 28               [ 4] 	plp						; Pull stack
c8ca : 18               [ 2] 	clc						; Indicate key valid
                             
c8cb : 68               [ 4] 	pla
c8cc : a8               [ 2] 	tay
c8cd : 68               [ 4] 	pla
c8ce : aa               [ 2] 	tax
                             	
c8cf : a52b             [ 3] 	lda kb_code
                             	
c8d1 : 60               [ 6] 	rts
                             	
                             ;****************************************
                             ;* kb_table_std (no shift)
AS65 Assembler for R6502 [1.42].                                     Page   80
-------------------------------- bank\bank0.s --------------------------------

                             ;* Each line is one column
                             ;****************************************
c8d2 :                       kb_table_std
c8d2 : 376a6d6b20757938      	db '7' ,'j' ,'m' ,'k' ,' ' ,'u' ,'y' ,'8'
c8da : 6e7436392c69686c      	db 'n' ,'t' ,'6' ,'9' ,',' ,'i' ,'h' ,'l'
c8e2 : 3572623b2e6f6730      	db '5' ,'r' ,'b' ,';' ,'.' ,'o' ,'g' ,'0'
c8ea : 7666342d0b70652f      	db 'v' ,'f' ,'4' ,'-' ,0x0b,'p' ,'e' ,'/'
c8f2 : 0000000000000000      	db 0,0,0,0,0,0,0,0 ; Column 4 is shift and ctrl 
c8fa : 311b7a00087f610d      	db '1' ,0x1b,'z' ,0   ,0x08,0x7f,'a' ,0x0d
c902 : 7871325c0a5d7300      	db 'x' ,'q' ,'2' ,0x5c,0x0a,']' ,'s' ,0
c90a : 33646327095b773d      	db '3' ,'d' ,'c' ,0x27,0x09,'[' ,'w' ,'='
                             
                             ;* kb_table_shift (with shift)
c912 :                       kb_table_shift
c912 : 264a4d4b2055592a      	db '&' ,'J' ,'M' ,'K' ,' ' ,'U' ,'Y' ,'*'
c91a : 4e545e283c49484c      	db 'N' ,'T' ,'^' ,'(' ,'<' ,'I' ,'H' ,'L'
c922 : 2552423a3e4f4729      	db '%' ,'R' ,'B' ,':' ,'>' ,'O' ,'G' ,')'
c92a : 5646245f0b50453f      	db 'V' ,'F' ,'$' ,'_' ,0x0b,'P' ,'E' ,'?'
c932 : 0000000000000000      	db 0,0,0,0,0,0,0,0 ; Column 4 is shift and ctrl 
c93a : 211b5a00087f410d      	db '!' ,0x1b,'Z' ,0   ,0x08,0x7f,'A' ,0x0d
c942 : 5851407c0a7d5300      	db 'X' ,'Q' ,'@' ,'|' ,0x0a,'}' ,'S' ,0
c94a : 23444322097b572b      	db '#' ,'D' ,'C' ,0x22,0x09,'{' ,'W' ,'+'
                             
c952 :                       kb_col_mask
c952 : fe                    	db 0b11111110
c953 : fd                    	db 0b11111101
c954 : fb                    	db 0b11111011
c955 : f7                    	db 0b11110111
c956 : ef                    	db 0b11101111
c957 : df                    	db 0b11011111
c958 : bf                    	db 0b10111111
c959 : 7f                    	db 0b01111111
                             
c95a :                       kb_stick_mask
c95a : df                    	db 0b11011111		; Left 	= Bit 0
c95b : 7f                    	db 0b01111111		; Right = Bit 1
c95c : f7                    	db 0b11110111		; Up	= Bit 2
c95d : bf                    	db 0b10111111		; Down	= Bit 3
c95e : fe                    	db 0b11111110		; Space	= Bit 4
                             
                             	include "vdp/graph.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  GRAPH.S
                             ;*  This is the graphics module, to handle text a
                             ;*  graphics.
                             ;*  For text modes, this module keeps track of wh
                             ;*  next put a character, and also takes care of 
                             ;*  to the next line as well as scrolling the con
                             ;*  when the cursor has reached the bottom right.
                             ;*  module also enables text input which is echoe
                             ;*  screen, to allow interactive input and editin
                             ;*
                             ;************************************************
                             
                             	; ROM code
AS65 Assembler for R6502 [1.42].                                     Page   81
-------------------------------- bank\bank0.s --------------------------------

                             	code
                             
c95f :                       mod_sz_graph_s
                             
                             
                             	include "vdp/font.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  FONT.S
                             ;*  This is the font definition, used to initiali
                             ;*  character set.  This is the standard Oric-1 f
                             ;*	Still called vdp as this code was ported from 
                             ;*	machine using the TMS9918a.
                             ;*
                             ;************************************************
                             
c95f :                       vdp_font
                             ; char 32
c95f : 00                    	db %000000
c960 : 00                    	db %000000
c961 : 00                    	db %000000
c962 : 00                    	db %000000
c963 : 00                    	db %000000
c964 : 00                    	db %000000
c965 : 00                    	db %000000
c966 : 00                    	db %000000
                             ; char 33
c967 : 0c                    	db %001100
c968 : 0c                    	db %001100
c969 : 0c                    	db %001100
c96a : 08                    	db %001000
c96b : 08                    	db %001000
c96c : 00                    	db %000000
c96d : 08                    	db %001000
c96e : 00                    	db %000000
                             ; char 34
c96f : 36                    	db %110110
c970 : 36                    	db %110110
c971 : 12                    	db %010010
c972 : 00                    	db %000000
c973 : 00                    	db %000000
c974 : 00                    	db %000000
c975 : 00                    	db %000000
c976 : 00                    	db %000000
                             ; char 35
c977 : 14                    	db %010100
c978 : 14                    	db %010100
c979 : 3e                    	db %111110
c97a : 14                    	db %010100
c97b : 3e                    	db %111110
c97c : 14                    	db %010100
c97d : 14                    	db %010100
c97e : 00                    	db %000000
                             ; char 36
c97f : 08                    	db %001000
c980 : 1e                    	db %011110
AS65 Assembler for R6502 [1.42].                                     Page   82
-------------------------------- bank\bank0.s --------------------------------

c981 : 28                    	db %101000
c982 : 1c                    	db %011100
c983 : 0a                    	db %001010
c984 : 3c                    	db %111100
c985 : 08                    	db %001000
c986 : 00                    	db %000000
                             ; char 37
c987 : 30                    	db %110000
c988 : 32                    	db %110010
c989 : 04                    	db %000100
c98a : 08                    	db %001000
c98b : 10                    	db %010000
c98c : 26                    	db %100110
c98d : 06                    	db %000110
c98e : 00                    	db %000000
                             ; char 38
c98f : 10                    	db %010000
c990 : 28                    	db %101000
c991 : 28                    	db %101000
c992 : 10                    	db %010000
c993 : 2a                    	db %101010
c994 : 24                    	db %100100
c995 : 1a                    	db %011010
c996 : 00                    	db %000000
                             ; char 39
c997 : 0c                    	db %001100
c998 : 0c                    	db %001100
c999 : 04                    	db %000100
c99a : 00                    	db %000000
c99b : 00                    	db %000000
c99c : 00                    	db %000000
c99d : 00                    	db %000000
c99e : 00                    	db %000000
                             ; char 40
c99f : 04                    	db %000100
c9a0 : 08                    	db %001000
c9a1 : 10                    	db %010000
c9a2 : 10                    	db %010000
c9a3 : 10                    	db %010000
c9a4 : 08                    	db %001000
c9a5 : 04                    	db %000100
c9a6 : 00                    	db %000000
                             ; char 41
c9a7 : 10                    	db %010000
c9a8 : 08                    	db %001000
c9a9 : 04                    	db %000100
c9aa : 04                    	db %000100
c9ab : 04                    	db %000100
c9ac : 08                    	db %001000
c9ad : 10                    	db %010000
c9ae : 00                    	db %000000
                             ; char 42
c9af : 08                    	db %001000
c9b0 : 2a                    	db %101010
c9b1 : 1c                    	db %011100
c9b2 : 08                    	db %001000
c9b3 : 1c                    	db %011100
c9b4 : 2a                    	db %101010
c9b5 : 08                    	db %001000
c9b6 : 00                    	db %000000
                             ; char 43
c9b7 : 00                    	db %000000
AS65 Assembler for R6502 [1.42].                                     Page   83
-------------------------------- bank\bank0.s --------------------------------

c9b8 : 08                    	db %001000
c9b9 : 08                    	db %001000
c9ba : 3e                    	db %111110
c9bb : 08                    	db %001000
c9bc : 08                    	db %001000
c9bd : 00                    	db %000000
c9be : 00                    	db %000000
                             ; char 44
c9bf : 00                    	db %000000
c9c0 : 00                    	db %000000
c9c1 : 00                    	db %000000
c9c2 : 00                    	db %000000
c9c3 : 00                    	db %000000
c9c4 : 08                    	db %001000
c9c5 : 08                    	db %001000
c9c6 : 10                    	db %010000
                             ; char 45
c9c7 : 00                    	db %000000
c9c8 : 00                    	db %000000
c9c9 : 00                    	db %000000
c9ca : 3e                    	db %111110
c9cb : 00                    	db %000000
c9cc : 00                    	db %000000
c9cd : 00                    	db %000000
c9ce : 00                    	db %000000
                             ; char 46
c9cf : 00                    	db %000000
c9d0 : 00                    	db %000000
c9d1 : 00                    	db %000000
c9d2 : 00                    	db %000000
c9d3 : 00                    	db %000000
c9d4 : 04                    	db %000100
c9d5 : 00                    	db %000000
c9d6 : 00                    	db %000000
                             ; char 47
c9d7 : 00                    	db %000000
c9d8 : 02                    	db %000010
c9d9 : 04                    	db %000100
c9da : 08                    	db %001000
c9db : 10                    	db %010000
c9dc : 20                    	db %100000
c9dd : 00                    	db %000000
c9de : 00                    	db %000000
                             ; char 48
c9df : 1c                    	db %011100
c9e0 : 22                    	db %100010
c9e1 : 26                    	db %100110
c9e2 : 2a                    	db %101010
c9e3 : 32                    	db %110010
c9e4 : 22                    	db %100010
c9e5 : 1c                    	db %011100
c9e6 : 00                    	db %000000
                             ; char 49
c9e7 : 08                    	db %001000
c9e8 : 18                    	db %011000
c9e9 : 08                    	db %001000
c9ea : 08                    	db %001000
c9eb : 08                    	db %001000
c9ec : 08                    	db %001000
c9ed : 1c                    	db %011100
c9ee : 00                    	db %000000
                             ; char 50
AS65 Assembler for R6502 [1.42].                                     Page   84
-------------------------------- bank\bank0.s --------------------------------

c9ef : 1c                    	db %011100
c9f0 : 22                    	db %100010
c9f1 : 02                    	db %000010
c9f2 : 04                    	db %000100
c9f3 : 08                    	db %001000
c9f4 : 10                    	db %010000
c9f5 : 3e                    	db %111110
c9f6 : 00                    	db %000000
                             ; char 51
c9f7 : 3e                    	db %111110
c9f8 : 02                    	db %000010
c9f9 : 04                    	db %000100
c9fa : 0c                    	db %001100
c9fb : 02                    	db %000010
c9fc : 22                    	db %100010
c9fd : 1c                    	db %011100
c9fe : 00                    	db %000000
                             ; char 52
c9ff : 04                    	db %000100
ca00 : 0c                    	db %001100
ca01 : 14                    	db %010100
ca02 : 24                    	db %100100
ca03 : 3e                    	db %111110
ca04 : 04                    	db %000100
ca05 : 04                    	db %000100
ca06 : 00                    	db %000000
                             ; char 53
ca07 : 3e                    	db %111110
ca08 : 20                    	db %100000
ca09 : 3c                    	db %111100
ca0a : 02                    	db %000010
ca0b : 02                    	db %000010
ca0c : 22                    	db %100010
ca0d : 1c                    	db %011100
ca0e : 00                    	db %000000
                             ; char 54
ca0f : 0c                    	db %001100
ca10 : 10                    	db %010000
ca11 : 20                    	db %100000
ca12 : 3c                    	db %111100
ca13 : 22                    	db %100010
ca14 : 22                    	db %100010
ca15 : 1c                    	db %011100
ca16 : 00                    	db %000000
                             ; char 55
ca17 : 3e                    	db %111110
ca18 : 02                    	db %000010
ca19 : 04                    	db %000100
ca1a : 08                    	db %001000
ca1b : 10                    	db %010000
ca1c : 10                    	db %010000
ca1d : 10                    	db %010000
ca1e : 00                    	db %000000
                             ; char 56
ca1f : 1c                    	db %011100
ca20 : 22                    	db %100010
ca21 : 22                    	db %100010
ca22 : 1c                    	db %011100
ca23 : 22                    	db %100010
ca24 : 22                    	db %100010
ca25 : 1c                    	db %011100
ca26 : 00                    	db %000000
AS65 Assembler for R6502 [1.42].                                     Page   85
-------------------------------- bank\bank0.s --------------------------------

                             ; char 57
ca27 : 1c                    	db %011100
ca28 : 22                    	db %100010
ca29 : 22                    	db %100010
ca2a : 1e                    	db %011110
ca2b : 02                    	db %000010
ca2c : 04                    	db %000100
ca2d : 18                    	db %011000
ca2e : 00                    	db %000000
                             ; char 58
ca2f : 00                    	db %000000
ca30 : 00                    	db %000000
ca31 : 08                    	db %001000
ca32 : 00                    	db %000000
ca33 : 00                    	db %000000
ca34 : 08                    	db %001000
ca35 : 00                    	db %000000
ca36 : 00                    	db %000000
                             ; char 59
ca37 : 00                    	db %000000
ca38 : 00                    	db %000000
ca39 : 08                    	db %001000
ca3a : 00                    	db %000000
ca3b : 00                    	db %000000
ca3c : 08                    	db %001000
ca3d : 08                    	db %001000
ca3e : 10                    	db %010000
                             ; char 60
ca3f : 04                    	db %000100
ca40 : 08                    	db %001000
ca41 : 10                    	db %010000
ca42 : 20                    	db %100000
ca43 : 10                    	db %010000
ca44 : 08                    	db %001000
ca45 : 04                    	db %000100
ca46 : 00                    	db %000000
                             ; char 61
ca47 : 00                    	db %000000
ca48 : 00                    	db %000000
ca49 : 3e                    	db %111110
ca4a : 00                    	db %000000
ca4b : 3e                    	db %111110
ca4c : 00                    	db %000000
ca4d : 00                    	db %000000
ca4e : 00                    	db %000000
                             ; char 62
ca4f : 10                    	db %010000
ca50 : 08                    	db %001000
ca51 : 04                    	db %000100
ca52 : 02                    	db %000010
ca53 : 04                    	db %000100
ca54 : 08                    	db %001000
ca55 : 10                    	db %010000
ca56 : 00                    	db %000000
                             ; char 63
ca57 : 1c                    	db %011100
ca58 : 22                    	db %100010
ca59 : 04                    	db %000100
ca5a : 08                    	db %001000
ca5b : 08                    	db %001000
ca5c : 00                    	db %000000
ca5d : 08                    	db %001000
AS65 Assembler for R6502 [1.42].                                     Page   86
-------------------------------- bank\bank0.s --------------------------------

ca5e : 00                    	db %000000
                             ; char 64
ca5f : 1c                    	db %011100
ca60 : 22                    	db %100010
ca61 : 2a                    	db %101010
ca62 : 2e                    	db %101110
ca63 : 2c                    	db %101100
ca64 : 20                    	db %100000
ca65 : 1e                    	db %011110
ca66 : 00                    	db %000000
ca67 :                       vdp_font_a
                             ; char 65
ca67 : 1c                    	db %011100
ca68 : 22                    	db %100010
ca69 : 22                    	db %100010
ca6a : 3e                    	db %111110
ca6b : 22                    	db %100010
ca6c : 22                    	db %100010
ca6d : 22                    	db %100010
ca6e : 00                    	db %000000
                             ; char 66
ca6f : 3c                    	db %111100
ca70 : 22                    	db %100010
ca71 : 22                    	db %100010
ca72 : 3c                    	db %111100
ca73 : 22                    	db %100010
ca74 : 22                    	db %100010
ca75 : 3c                    	db %111100
ca76 : 00                    	db %000000
                             ; char 67
ca77 : 1c                    	db %011100
ca78 : 22                    	db %100010
ca79 : 20                    	db %100000
ca7a : 20                    	db %100000
ca7b : 20                    	db %100000
ca7c : 22                    	db %100010
ca7d : 1c                    	db %011100
ca7e : 00                    	db %000000
                             ; char 68
ca7f : 3c                    	db %111100
ca80 : 22                    	db %100010
ca81 : 22                    	db %100010
ca82 : 22                    	db %100010
ca83 : 22                    	db %100010
ca84 : 22                    	db %100010
ca85 : 3c                    	db %111100
ca86 : 00                    	db %000000
                             ; char 69
ca87 : 3e                    	db %111110
ca88 : 20                    	db %100000
ca89 : 20                    	db %100000
ca8a : 3c                    	db %111100
ca8b : 20                    	db %100000
ca8c : 20                    	db %100000
ca8d : 3e                    	db %111110
ca8e : 00                    	db %000000
                             ; char 70
ca8f : 3e                    	db %111110
ca90 : 20                    	db %100000
ca91 : 20                    	db %100000
ca92 : 3c                    	db %111100
ca93 : 20                    	db %100000
AS65 Assembler for R6502 [1.42].                                     Page   87
-------------------------------- bank\bank0.s --------------------------------

ca94 : 20                    	db %100000
ca95 : 20                    	db %100000
ca96 : 00                    	db %000000
                             ; char 71
ca97 : 1e                    	db %011110
ca98 : 20                    	db %100000
ca99 : 20                    	db %100000
ca9a : 20                    	db %100000
ca9b : 26                    	db %100110
ca9c : 22                    	db %100010
ca9d : 1e                    	db %011110
ca9e : 00                    	db %000000
                             ; char 72
ca9f : 22                    	db %100010
caa0 : 22                    	db %100010
caa1 : 22                    	db %100010
caa2 : 3e                    	db %111110
caa3 : 22                    	db %100010
caa4 : 22                    	db %100010
caa5 : 22                    	db %100010
caa6 : 00                    	db %000000
                             ; char 73
caa7 : 1c                    	db %011100
caa8 : 08                    	db %001000
caa9 : 08                    	db %001000
caaa : 08                    	db %001000
caab : 08                    	db %001000
caac : 08                    	db %001000
caad : 1c                    	db %011100
caae : 00                    	db %000000
                             ; char 74
caaf : 02                    	db %000010
cab0 : 02                    	db %000010
cab1 : 02                    	db %000010
cab2 : 02                    	db %000010
cab3 : 02                    	db %000010
cab4 : 22                    	db %100010
cab5 : 1c                    	db %011100
cab6 : 00                    	db %000000
                             ; char 75
cab7 : 22                    	db %100010
cab8 : 24                    	db %100100
cab9 : 28                    	db %101000
caba : 30                    	db %110000
cabb : 28                    	db %101000
cabc : 24                    	db %100100
cabd : 22                    	db %100010
cabe : 00                    	db %000000
                             ; char 76
cabf : 20                    	db %100000
cac0 : 20                    	db %100000
cac1 : 20                    	db %100000
cac2 : 20                    	db %100000
cac3 : 20                    	db %100000
cac4 : 20                    	db %100000
cac5 : 3e                    	db %111110
cac6 : 00                    	db %000000
                             ; char 77
cac7 : 22                    	db %100010
cac8 : 36                    	db %110110
cac9 : 2a                    	db %101010
caca : 2a                    	db %101010
AS65 Assembler for R6502 [1.42].                                     Page   88
-------------------------------- bank\bank0.s --------------------------------

cacb : 22                    	db %100010
cacc : 22                    	db %100010
cacd : 22                    	db %100010
cace : 00                    	db %000000
                             ; char 78
cacf : 22                    	db %100010
cad0 : 22                    	db %100010
cad1 : 32                    	db %110010
cad2 : 2a                    	db %101010
cad3 : 26                    	db %100110
cad4 : 22                    	db %100010
cad5 : 22                    	db %100010
cad6 : 00                    	db %000000
                             ; char 79
cad7 : 1c                    	db %011100
cad8 : 22                    	db %100010
cad9 : 22                    	db %100010
cada : 22                    	db %100010
cadb : 22                    	db %100010
cadc : 22                    	db %100010
cadd : 1c                    	db %011100
cade : 00                    	db %000000
                             ; char 80
cadf : 3c                    	db %111100
cae0 : 22                    	db %100010
cae1 : 22                    	db %100010
cae2 : 3c                    	db %111100
cae3 : 20                    	db %100000
cae4 : 20                    	db %100000
cae5 : 20                    	db %100000
cae6 : 00                    	db %000000
                             ; char 81
cae7 : 1c                    	db %011100
cae8 : 22                    	db %100010
cae9 : 22                    	db %100010
caea : 22                    	db %100010
caeb : 2a                    	db %101010
caec : 24                    	db %100100
caed : 1a                    	db %011010
caee : 00                    	db %000000
                             ; char 82
caef : 3c                    	db %111100
caf0 : 22                    	db %100010
caf1 : 22                    	db %100010
caf2 : 3c                    	db %111100
caf3 : 28                    	db %101000
caf4 : 24                    	db %100100
caf5 : 22                    	db %100010
caf6 : 00                    	db %000000
                             ; char 83
caf7 : 1c                    	db %011100
caf8 : 22                    	db %100010
caf9 : 20                    	db %100000
cafa : 1c                    	db %011100
cafb : 02                    	db %000010
cafc : 22                    	db %100010
cafd : 1c                    	db %011100
cafe : 00                    	db %000000
                             ; char 84
caff : 3e                    	db %111110
cb00 : 08                    	db %001000
cb01 : 08                    	db %001000
AS65 Assembler for R6502 [1.42].                                     Page   89
-------------------------------- bank\bank0.s --------------------------------

cb02 : 08                    	db %001000
cb03 : 08                    	db %001000
cb04 : 08                    	db %001000
cb05 : 08                    	db %001000
cb06 : 00                    	db %000000
                             ; char 85
cb07 : 22                    	db %100010
cb08 : 22                    	db %100010
cb09 : 22                    	db %100010
cb0a : 22                    	db %100010
cb0b : 22                    	db %100010
cb0c : 22                    	db %100010
cb0d : 1c                    	db %011100
cb0e : 00                    	db %000000
                             ; char 86
cb0f : 22                    	db %100010
cb10 : 22                    	db %100010
cb11 : 22                    	db %100010
cb12 : 22                    	db %100010
cb13 : 22                    	db %100010
cb14 : 14                    	db %010100
cb15 : 08                    	db %001000
cb16 : 00                    	db %000000
                             ; char 87
cb17 : 22                    	db %100010
cb18 : 22                    	db %100010
cb19 : 22                    	db %100010
cb1a : 2a                    	db %101010
cb1b : 2a                    	db %101010
cb1c : 36                    	db %110110
cb1d : 22                    	db %100010
cb1e : 00                    	db %000000
                             ; char 88
cb1f : 22                    	db %100010
cb20 : 22                    	db %100010
cb21 : 14                    	db %010100
cb22 : 08                    	db %001000
cb23 : 14                    	db %010100
cb24 : 22                    	db %100010
cb25 : 22                    	db %100010
cb26 : 00                    	db %000000
                             ; char 89
cb27 : 22                    	db %100010
cb28 : 22                    	db %100010
cb29 : 14                    	db %010100
cb2a : 08                    	db %001000
cb2b : 08                    	db %001000
cb2c : 08                    	db %001000
cb2d : 08                    	db %001000
cb2e : 00                    	db %000000
                             ; char 90
cb2f : 3e                    	db %111110
cb30 : 02                    	db %000010
cb31 : 04                    	db %000100
cb32 : 08                    	db %001000
cb33 : 10                    	db %010000
cb34 : 20                    	db %100000
cb35 : 3e                    	db %111110
cb36 : 00                    	db %000000
                             ; char 91
cb37 : 1c                    	db %011100
cb38 : 10                    	db %010000
AS65 Assembler for R6502 [1.42].                                     Page   90
-------------------------------- bank\bank0.s --------------------------------

cb39 : 10                    	db %010000
cb3a : 10                    	db %010000
cb3b : 10                    	db %010000
cb3c : 10                    	db %010000
cb3d : 1c                    	db %011100
cb3e : 00                    	db %000000
                             ; char 92
cb3f : 00                    	db %000000
cb40 : 20                    	db %100000
cb41 : 10                    	db %010000
cb42 : 08                    	db %001000
cb43 : 04                    	db %000100
cb44 : 02                    	db %000010
cb45 : 00                    	db %000000
cb46 : 00                    	db %000000
                             ; char 93
cb47 : 1c                    	db %011100
cb48 : 04                    	db %000100
cb49 : 04                    	db %000100
cb4a : 04                    	db %000100
cb4b : 04                    	db %000100
cb4c : 04                    	db %000100
cb4d : 1c                    	db %011100
cb4e : 00                    	db %000000
                             ; char 94
cb4f : 08                    	db %001000
cb50 : 1c                    	db %011100
cb51 : 3e                    	db %111110
cb52 : 08                    	db %001000
cb53 : 08                    	db %001000
cb54 : 08                    	db %001000
cb55 : 08                    	db %001000
cb56 : 00                    	db %000000
                             ; char 95
cb57 : 00                    	db %000000
cb58 : 00                    	db %000000
cb59 : 00                    	db %000000
cb5a : 00                    	db %000000
cb5b : 00                    	db %000000
cb5c : 00                    	db %000000
cb5d : 3e                    	db %111110
cb5e : 00                    	db %000000
                             ; char 96
cb5f : 0e                    	db %001110
cb60 : 10                    	db %010000
cb61 : 10                    	db %010000
cb62 : 3c                    	db %111100
cb63 : 10                    	db %010000
cb64 : 10                    	db %010000
cb65 : 3e                    	db %111110
cb66 : 00                    	db %000000
                             ; char 97
cb67 : 00                    	db %000000
cb68 : 00                    	db %000000
cb69 : 1c                    	db %011100
cb6a : 02                    	db %000010
cb6b : 1e                    	db %011110
cb6c : 22                    	db %100010
cb6d : 1e                    	db %011110
cb6e : 00                    	db %000000
                             ; char 98
cb6f : 20                    	db %100000
AS65 Assembler for R6502 [1.42].                                     Page   91
-------------------------------- bank\bank0.s --------------------------------

cb70 : 20                    	db %100000
cb71 : 3c                    	db %111100
cb72 : 22                    	db %100010
cb73 : 22                    	db %100010
cb74 : 22                    	db %100010
cb75 : 3c                    	db %111100
cb76 : 00                    	db %000000
                             ; char 99
cb77 : 00                    	db %000000
cb78 : 00                    	db %000000
cb79 : 1e                    	db %011110
cb7a : 20                    	db %100000
cb7b : 20                    	db %100000
cb7c : 20                    	db %100000
cb7d : 1e                    	db %011110
cb7e : 00                    	db %000000
                             ; char 100
cb7f : 02                    	db %000010
cb80 : 02                    	db %000010
cb81 : 1e                    	db %011110
cb82 : 22                    	db %100010
cb83 : 22                    	db %100010
cb84 : 22                    	db %100010
cb85 : 1e                    	db %011110
cb86 : 00                    	db %000000
                             ; char 101
cb87 : 00                    	db %000000
cb88 : 00                    	db %000000
cb89 : 1c                    	db %011100
cb8a : 22                    	db %100010
cb8b : 3e                    	db %111110
cb8c : 20                    	db %100000
cb8d : 1e                    	db %011110
cb8e : 00                    	db %000000
                             ; char 102
cb8f : 0c                    	db %001100
cb90 : 12                    	db %010010
cb91 : 10                    	db %010000
cb92 : 3c                    	db %111100
cb93 : 10                    	db %010000
cb94 : 10                    	db %010000
cb95 : 10                    	db %010000
cb96 : 00                    	db %000000
                             ; char 103
cb97 : 00                    	db %000000
cb98 : 00                    	db %000000
cb99 : 1c                    	db %011100
cb9a : 22                    	db %100010
cb9b : 22                    	db %100010
cb9c : 1e                    	db %011110
cb9d : 02                    	db %000010
cb9e : 1c                    	db %011100
                             ; char 104
cb9f : 20                    	db %100000
cba0 : 20                    	db %100000
cba1 : 3c                    	db %111100
cba2 : 22                    	db %100010
cba3 : 22                    	db %100010
cba4 : 22                    	db %100010
cba5 : 22                    	db %100010
cba6 : 00                    	db %000000
                             ; char 105
AS65 Assembler for R6502 [1.42].                                     Page   92
-------------------------------- bank\bank0.s --------------------------------

cba7 : 08                    	db %001000
cba8 : 00                    	db %000000
cba9 : 18                    	db %011000
cbaa : 08                    	db %001000
cbab : 08                    	db %001000
cbac : 08                    	db %001000
cbad : 1c                    	db %011100
cbae : 00                    	db %000000
                             ; char 106
cbaf : 04                    	db %000100
cbb0 : 00                    	db %000000
cbb1 : 0c                    	db %001100
cbb2 : 04                    	db %000100
cbb3 : 04                    	db %000100
cbb4 : 04                    	db %000100
cbb5 : 24                    	db %100100
cbb6 : 18                    	db %011000
                             ; char 107
cbb7 : 20                    	db %100000
cbb8 : 20                    	db %100000
cbb9 : 22                    	db %100010
cbba : 24                    	db %100100
cbbb : 38                    	db %111000
cbbc : 24                    	db %100100
cbbd : 22                    	db %100010
cbbe : 00                    	db %000000
                             ; char 108
cbbf : 18                    	db %011000
cbc0 : 08                    	db %001000
cbc1 : 08                    	db %001000
cbc2 : 08                    	db %001000
cbc3 : 08                    	db %001000
cbc4 : 08                    	db %001000
cbc5 : 1c                    	db %011100
cbc6 : 00                    	db %000000
                             ; char 109
cbc7 : 00                    	db %000000
cbc8 : 00                    	db %000000
cbc9 : 36                    	db %110110
cbca : 2a                    	db %101010
cbcb : 2a                    	db %101010
cbcc : 2a                    	db %101010
cbcd : 22                    	db %100010
cbce : 00                    	db %000000
                             ; char 110
cbcf : 00                    	db %000000
cbd0 : 00                    	db %000000
cbd1 : 3c                    	db %111100
cbd2 : 22                    	db %100010
cbd3 : 22                    	db %100010
cbd4 : 22                    	db %100010
cbd5 : 22                    	db %100010
cbd6 : 00                    	db %000000
                             ; char 111
cbd7 : 00                    	db %000000
cbd8 : 00                    	db %000000
cbd9 : 1c                    	db %011100
cbda : 22                    	db %100010
cbdb : 22                    	db %100010
cbdc : 22                    	db %100010
cbdd : 1c                    	db %011100
cbde : 00                    	db %000000
AS65 Assembler for R6502 [1.42].                                     Page   93
-------------------------------- bank\bank0.s --------------------------------

                             ; char 112
cbdf : 00                    	db %000000
cbe0 : 00                    	db %000000
cbe1 : 3c                    	db %111100
cbe2 : 22                    	db %100010
cbe3 : 22                    	db %100010
cbe4 : 3c                    	db %111100
cbe5 : 20                    	db %100000
cbe6 : 20                    	db %100000
                             ; char 113
cbe7 : 00                    	db %000000
cbe8 : 00                    	db %000000
cbe9 : 1e                    	db %011110
cbea : 22                    	db %100010
cbeb : 22                    	db %100010
cbec : 1e                    	db %011110
cbed : 02                    	db %000010
cbee : 02                    	db %000010
                             ; char 114
cbef : 00                    	db %000000
cbf0 : 00                    	db %000000
cbf1 : 2e                    	db %101110
cbf2 : 30                    	db %110000
cbf3 : 20                    	db %100000
cbf4 : 20                    	db %100000
cbf5 : 20                    	db %100000
cbf6 : 00                    	db %000000
                             ; char 115
cbf7 : 00                    	db %000000
cbf8 : 00                    	db %000000
cbf9 : 1e                    	db %011110
cbfa : 20                    	db %100000
cbfb : 1c                    	db %011100
cbfc : 02                    	db %000010
cbfd : 3c                    	db %111100
cbfe : 00                    	db %000000
                             ; char 116
cbff : 10                    	db %010000
cc00 : 10                    	db %010000
cc01 : 3c                    	db %111100
cc02 : 10                    	db %010000
cc03 : 10                    	db %010000
cc04 : 12                    	db %010010
cc05 : 0c                    	db %001100
cc06 : 00                    	db %000000
                             ; char 117
cc07 : 00                    	db %000000
cc08 : 00                    	db %000000
cc09 : 22                    	db %100010
cc0a : 22                    	db %100010
cc0b : 22                    	db %100010
cc0c : 26                    	db %100110
cc0d : 1a                    	db %011010
cc0e : 00                    	db %000000
                             ; char 118
cc0f : 00                    	db %000000
cc10 : 00                    	db %000000
cc11 : 22                    	db %100010
cc12 : 22                    	db %100010
cc13 : 22                    	db %100010
cc14 : 14                    	db %010100
cc15 : 08                    	db %001000
AS65 Assembler for R6502 [1.42].                                     Page   94
-------------------------------- bank\bank0.s --------------------------------

cc16 : 00                    	db %000000
                             ; char 119
cc17 : 00                    	db %000000
cc18 : 00                    	db %000000
cc19 : 22                    	db %100010
cc1a : 22                    	db %100010
cc1b : 2a                    	db %101010
cc1c : 2a                    	db %101010
cc1d : 36                    	db %110110
cc1e : 00                    	db %000000
                             ; char 120
cc1f : 00                    	db %000000
cc20 : 00                    	db %000000
cc21 : 22                    	db %100010
cc22 : 14                    	db %010100
cc23 : 08                    	db %001000
cc24 : 14                    	db %010100
cc25 : 22                    	db %100010
cc26 : 00                    	db %000000
                             ; char 121
cc27 : 00                    	db %000000
cc28 : 00                    	db %000000
cc29 : 22                    	db %100010
cc2a : 22                    	db %100010
cc2b : 22                    	db %100010
cc2c : 1e                    	db %011110
cc2d : 02                    	db %000010
cc2e : 1c                    	db %011100
                             ; char 122
cc2f : 00                    	db %000000
cc30 : 00                    	db %000000
cc31 : 3e                    	db %111110
cc32 : 04                    	db %000100
cc33 : 08                    	db %001000
cc34 : 10                    	db %010000
cc35 : 3e                    	db %111110
cc36 : 00                    	db %000000
                             ; char 123
cc37 : 0e                    	db %001110
cc38 : 18                    	db %011000
cc39 : 18                    	db %011000
cc3a : 30                    	db %110000
cc3b : 18                    	db %011000
cc3c : 18                    	db %011000
cc3d : 0e                    	db %001110
cc3e : 00                    	db %000000
                             ; char 124
cc3f : 08                    	db %001000
cc40 : 08                    	db %001000
cc41 : 08                    	db %001000
cc42 : 08                    	db %001000
cc43 : 08                    	db %001000
cc44 : 08                    	db %001000
cc45 : 08                    	db %001000
cc46 : 00                    	db %000000
                             ; char 125
cc47 : 38                    	db %111000
cc48 : 0c                    	db %001100
cc49 : 0c                    	db %001100
cc4a : 06                    	db %000110
cc4b : 0c                    	db %001100
cc4c : 0c                    	db %001100
AS65 Assembler for R6502 [1.42].                                     Page   95
-------------------------------- bank\bank0.s --------------------------------

cc4d : 38                    	db %111000
cc4e : 00                    	db %000000
                             ; char 126
cc4f : 00                    	db %000000
cc50 : 00                    	db %000000
cc51 : 10                    	db %010000
cc52 : 2a                    	db %101010
cc53 : 04                    	db %000100
cc54 : 00                    	db %000000
cc55 : 00                    	db %000000
cc56 : 00                    	db %000000
                             ; char 127
cc57 : 2a                    	db %101010
cc58 : 15                    	db %010101
cc59 : 2a                    	db %101010
cc5a : 15                    	db %010101
cc5b : 2a                    	db %101010
cc5c : 15                    	db %010101
cc5d : 2a                    	db %101010
cc5e : 15                    	db %010101
                             	
                             	
                             
                             ;****************************************
                             ;* vdp_init_font
                             ;* Initialise fonts from ROM
                             ;* Input : None
                             ;* Output : None
                             ;* Regs affected : All
                             ;****************************************
cc5f :                       gr_init_font
                             	; Get char base from vdp structure
cc5f : a614             [ 3] 	ldx gr_scrngeom+gr_char
cc61 : 8634             [ 3] 	stx tmp_blo
cc63 : a615             [ 3] 	ldx gr_scrngeom+gr_char+1
cc65 : e8               [ 2] 	inx						; ASCII patterns start 1 page later
cc66 : 8635             [ 3] 	stx tmp_bhi
                             
cc68 : a95f             [ 2] 	lda #lo(vdp_font)		; Low byte of fonts source
cc6a : 8536             [ 3] 	sta tmp_clo
cc6c : a9c9             [ 2] 	lda #hi(vdp_font)		; High byte of fonts source
cc6e : 8537             [ 3] 	sta tmp_chi
cc70 : a203             [ 2] 	ldx #3					; Copy 3 pages
cc72 : 4c75cc           [ 3] 	jmp gr_copy_mem
                             
                             
                             ;****************************************
                             ;* vdp_copy_mem
                             ;* Copy memory pages at a time
                             ;* Input :	clo/hi	=	source
                             ;*			blo/hi	=	dest
                             ;*			X		=	pages to copy
                             ;* Output : None
                             ;* Regs affected : All
                             ;****************************************
cc75 :                       gr_copy_mem
cc75 : a000             [ 2] 	ldy #0					; byte within page
cc77 : a536             [ 3] 	lda tmp_clo				; Low byte of source
cc79 : 8532             [ 3] 	sta tmp_alo
cc7b : a537             [ 3] 	lda tmp_chi				; High byte of source
cc7d : 8533             [ 3] 	sta tmp_ahi
cc7f :                       gr_copy_byte
AS65 Assembler for R6502 [1.42].                                     Page   96
-------------------------------- bank\bank0.s --------------------------------

cc7f : 98               [ 2] 	tya
cc80 : b132             [ 5] 	lda (tmp_alo),y			; Get byte from font table
cc82 : 9134             [ 5] 	sta (tmp_blo),y			; Put it to the memory
cc84 : c8               [ 2] 	iny
cc85 : d0f8             [ 3] 	bne gr_copy_byte		; keep going for 1 page
cc87 : e633             [ 5] 	inc tmp_ahi				; only need to increment high byt
cc89 : e635             [ 5] 	inc tmp_bhi				; source and destination ptr
cc8b : ca               [ 2] 	dex						; page counter
cc8c : d0f1             [ 3] 	bne gr_copy_byte		; keep going for X pages
cc8e : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* gr_init
                             ;* First initialisation of screen
                             ;****************************************
cc8f :                       gr_init
cc8f : a210             [ 2] 	ldx #VDP_FLASH			; Default cursor flash rate
cc91 : 860b             [ 3] 	stx vdp_curtim
cc93 : 860c             [ 3] 	stx vdp_curcnt
cc95 : a200             [ 2] 	ldx #0
cc97 : 860e             [ 3] 	stx vdp_curstat
                             
                             	; Hard reset initial geom values (X=0)
cc99 : 20c0cc           [ 6] 	jsr gr_init_geom
                             
                             	; Copy font from ROM to char base
cc9c : 205fcc           [ 6] 	jsr gr_init_font
                             
                             	; Go in to hires mode to generate tables
cc9f : 2016cd           [ 6] 	jsr gr_init_hires
cca2 : 204fcd           [ 6] 	jsr gr_init_hires_tables
                             
                             	; But start in text mode
cca5 : 4cfdcc           [ 3] 	jmp gr_init_screen_txt
                             
                             
                             ;****************************************
                             ;* gr_check_font_copy
                             ;* check font needs to be copied from
                             ;* current location to another
                             ;* A=high byte of page aligned font addr
                             ;* that the font needs to be at
                             ;****************************************
cca8 :                       gr_check_font_copy
                             	; Compare with current high byte
cca8 : c515             [ 3] 	cmp gr_scrngeom+gr_char+1
ccaa : f013             [ 3] 	beq gr_check_font_copy_done
                             	; save A as high byte of destination
ccac : 8535             [ 3] 	sta tmp_blo+1
                             	; destination low is 0
ccae : a900             [ 2] 	lda #0
ccb0 : 8534             [ 3] 	sta tmp_blo
                             
                             	; Get source from current vdp structure
ccb2 : a515             [ 3] 	lda gr_scrngeom+gr_char+1
ccb4 : 8537             [ 3] 	sta tmp_clo+1
ccb6 : a514             [ 3] 	lda gr_scrngeom+gr_char
ccb8 : 8536             [ 3] 	sta tmp_clo
                             
                             	; Copy all 8 pages of font (std + alt) data
ccba : a208             [ 2] 	ldx #8
AS65 Assembler for R6502 [1.42].                                     Page   97
-------------------------------- bank\bank0.s --------------------------------

ccbc : 2075cc           [ 6] 	jsr gr_copy_mem
ccbf :                       gr_check_font_copy_done
ccbf :                       gr_init_geom_done
ccbf : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* gr_init_geom
                             ;* initialise geometry entries from X
                             ;* position from base until -1
                             ;****************************************
ccc0 :                       gr_init_geom
                             	; Which geom entry to init = Y
ccc0 : bccfcc           [ 4] 	ldy gr_scrngeom_base,x
ccc3 : 30fa             [ 3] 	bmi gr_init_geom_done		; Just somewhere with an 
                             	; skip to data and put in A
ccc5 : e8               [ 2] 	inx
ccc6 : bdcfcc           [ 4] 	lda gr_scrngeom_base,x
                             	; save it in Y
ccc9 : 991100           [ 5] 	sta gr_scrngeom,y
                             	; next entry
cccc : e8               [ 2] 	inx
cccd : d0f1             [ 3] 	bne gr_init_geom	; Always
                             	; Hope we don't get here - will crash!
                             
                             ; Geometry initialisation tables
cccf :                       gr_scrngeom_base
cccf : 1200                  	db gr_ink, 0
ccd1 : 1316                  	db gr_paper, 16+6
ccd3 : 1402                  	db gr_margin, 2
                             	; Not terminated by -1 : continues in to _txt va
                             ;* Geometry for text/lores
ccd5 :                       gr_scrngeom_text
ccd5 : 0000                  	db gr_mode, 0
                             
ccd7 : 0300                  	db gr_char,   lo(TEXTCHAR)
ccd9 : 04b4                  	db gr_char+1, hi(TEXTCHAR)
                             
ccdb : 0580                  	db gr_text_start,   lo(TEXTSCRN)
ccdd : 06bb                  	db gr_text_start+1, hi(TEXTSCRN)
                             
ccdf : 0828                  	db gr_text_w, 40
cce1 : 091c                  	db gr_text_h, 28
cce3 : ff                    	db -1
                             ;* Geometry for hires
cce4 :                       gr_scrngeom_hires
cce4 : 0001                  	db gr_mode, 1
                             
cce6 : 0100                  	db gr_hi_start,   lo(HISCRN)
cce8 : 02a0                  	db gr_hi_start+1, hi(HISCRN)
ccea : 0300                  	db gr_char,   lo(HICHAR)
ccec : 0498                  	db gr_char+1, hi(HICHAR)
                             
ccee : 0568                  	db gr_text_start,   lo(HITEXT)
ccf0 : 06bf                  	db gr_text_start+1, hi(HITEXT)
                             
ccf2 : 1000                  	db gr_hires_x, 0
ccf4 : 1100                  	db gr_hires_y, 0
                             
                             	; Only need to initialise text height, width is 
ccf6 : 0903                  	db gr_text_h, 3
                             
AS65 Assembler for R6502 [1.42].                                     Page   98
-------------------------------- bank\bank0.s --------------------------------

ccf8 : 0e01                  	db gr_pixmode, 1
ccfa : 0f06                  	db gr_pitch, 6
ccfc : ff                    	db -1
                             
                             
                             
                             ;****************************************
                             ;* gr_init_screen_txt
                             ;* initialise the screen in text mode
                             ;****************************************
ccfd :                       gr_init_screen_txt
ccfd : e60d             [ 5] 	inc vdp_curoff
                             
                             	; Check if font copy needed to 0xb400
ccff : a9b4             [ 2] 	lda #hi(TEXTCHAR)
cd01 : 20a8cc           [ 6] 	jsr gr_check_font_copy
                             
                             	; Initialise geom for text
cd04 : a206             [ 2] 	ldx #gr_scrngeom_text-gr_scrngeom_base
cd06 : 20c0cc           [ 6] 	jsr gr_init_geom
                             
cd09 : 2060d2           [ 6] 	jsr gr_spr_init					; SW Sprites are reset
                             
cd0c : a920             [ 2] 	lda #' '						; Blank is SPACE
cd0e : 8510             [ 3] 	sta vdp_blank
cd10 : 2093cd           [ 6] 	jsr gr_cls
                             
cd13 : c60d             [ 5] 	dec vdp_curoff
                             
cd15 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* gr_init_hires
                             ;* Input : X = Colour table fill value
                             ;* initialise the screen in hires mode
                             ;****************************************
cd16 :                       gr_init_hires
cd16 : e60d             [ 5] 	inc vdp_curoff
                             	; Check if font copy needed to 0x9800
cd18 : a998             [ 2] 	lda #hi(HICHAR)
cd1a : 20a8cc           [ 6] 	jsr gr_check_font_copy
                             
                             	; Initialise geom for hires
cd1d : a215             [ 2] 	ldx #gr_scrngeom_hires-gr_scrngeom_base
cd1f : 20c0cc           [ 6] 	jsr gr_init_geom
                             
cd22 : a920             [ 2] 	lda #' '						; Blank is SPACE
cd24 : 8510             [ 3] 	sta vdp_blank
cd26 : 2093cd           [ 6] 	jsr gr_cls
                             
                             	; Zero out hires area 0xa000 for 8000 (0x1f40) b
cd29 : a900             [ 2] 	lda #lo(HISCRN)
cd2b : 8532             [ 3] 	sta tmp_alo
cd2d : a9a0             [ 2] 	lda #hi(HISCRN)
cd2f : 8533             [ 3] 	sta tmp_ahi
cd31 : a940             [ 2] 	lda #0x40						; Set bit 6
cd33 : a000             [ 2] 	ldy #0
cd35 : a200             [ 2] 	ldx #0
cd37 :                       vdp_fill_vram_loop
cd37 : 9132             [ 5] 	sta (tmp_alo),y
cd39 : c8               [ 2] 	iny
cd3a : d003             [ 3] 	bne vdp_fill_vram_noinc
AS65 Assembler for R6502 [1.42].                                     Page   99
-------------------------------- bank\bank0.s --------------------------------

cd3c : e633             [ 5] 	inc tmp_ahi
cd3e : e8               [ 2] 	inx
cd3f :                       vdp_fill_vram_noinc
cd3f : e01f             [ 2] 	cpx #hi(0x1f40)			; Reached page count?
cd41 : d0f4             [ 3] 	bne vdp_fill_vram_loop
cd43 : c040             [ 2] 	cpy #lo(0x1f40)			; Reached byte in page?
cd45 : d0f0             [ 3] 	bne vdp_fill_vram_loop
                             
                             	; Set hires attribute in the magic location
cd47 : a91e             [ 2] 	lda #30			; Hires attribute
cd49 : 8ddfbf           [ 4] 	sta 0xbfdf		; Last pos of screen memory
                             
cd4c : c60d             [ 5] 	dec vdp_curoff
cd4e : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* gr_init_hires_tables
                             ;* Generate the hires tables
                             ;* Do this whilst in hires mode
                             ;****************************************
cd4f :                       gr_init_hires_tables
                             	; Initialise address pointer to start of high re
cd4f : a900             [ 2] 	lda #lo(HISCRN)
cd51 : 8532             [ 3] 	sta tmp_alo
cd53 : a9a0             [ 2] 	lda #hi(HISCRN)
cd55 : 8533             [ 3] 	sta tmp_ahi
                             	; Starting from row zero, do 200 rows
cd57 : a000             [ 2] 	ldy #0
cd59 :                       gr_init_tab_row
                             	; Save low and high bytes of screen address in t
cd59 : a532             [ 3] 	lda tmp_alo
cd5b : 99009c           [ 5] 	sta hires_row_low,y
cd5e : a533             [ 3] 	lda tmp_ahi
cd60 : 99c89c           [ 5] 	sta hires_row_hi,y
                             	; add 40 ready for next row
cd63 : 18               [ 2] 	clc
cd64 : a532             [ 3] 	lda tmp_alo
cd66 : 6928             [ 2] 	adc #40
cd68 : 8532             [ 3] 	sta tmp_alo
                             	_bcc 2
                             
cd6c : e633             [ 5] 	inc tmp_ahi
                             	; Max 200 rows
cd6e : c8               [ 2] 	iny
cd6f : c0c8             [ 2] 	cpy #200
cd71 : d0e6             [ 3] 	bne gr_init_tab_row
                             	; From column 0, do 240 columns
                             	; Mask starts at 0x20, when shifts to 0 then
                             	; the column increments
cd73 : a920             [ 2] 	lda #0x20
cd75 : 8534             [ 3] 	sta tmp_blo			; Pixel mask
cd77 : a200             [ 2] 	ldx #0				; Pixel column
cd79 : a000             [ 2] 	ldy #0				; Byte column
cd7b :                       gr_init_tab_col
                             	; Save current mask and column
cd7b : a534             [ 3] 	lda tmp_blo
cd7d : 9d809e           [ 5] 	sta hires_mask,x
cd80 : 98               [ 2] 	tya
cd81 : 9d909d           [ 5] 	sta hires_col,x
                             	; shift mask, if zero then increment col and res
cd84 : 4634             [ 5] 	lsr tmp_blo
cd86 : d005             [ 3] 	bne gr_init_tab_col_skip
AS65 Assembler for R6502 [1.42].                                     Page  100
-------------------------------- bank\bank0.s --------------------------------

cd88 : a920             [ 2] 	lda #0x20
cd8a : 8534             [ 3] 	sta tmp_blo
cd8c : c8               [ 2] 	iny
cd8d :                       gr_init_tab_col_skip
cd8d : e8               [ 2] 	inx
cd8e : e0f0             [ 2] 	cpx #240
cd90 : d0e9             [ 3] 	bne gr_init_tab_col
cd92 : 60               [ 6] 	rts
                             
                             
                             
                             ;****************************************
                             ;* gr_cls
                             ;* Clear the text screen
                             ;****************************************
cd93 :                       gr_cls
cd93 : e60d             [ 5] 	inc vdp_curoff
                             	; Set screen address for text mode
cd95 : a516             [ 3] 	lda gr_scrngeom+gr_text_start
cd97 : 8526             [ 3] 	sta gr_scrngeom+gr_geom_tmp
cd99 : a517             [ 3] 	lda gr_scrngeom+gr_text_start+1
cd9b : 8527             [ 3] 	sta gr_scrngeom+gr_geom_tmp+1
                             
cd9d : a61a             [ 3] 	ldx gr_scrngeom+gr_text_h		; Count of rows to cl
                             
                             	; X and Y count bytes to fill
cd9f :                       gr_cls_row
cd9f : a000             [ 2] 	ldy #0							; Count of columns
cda1 : a525             [ 3] 	lda gr_scrngeom+gr_margin		; Is there a margin?
cda3 : f00a             [ 3] 	beq gr_cls_skip_marg
cda5 : a524             [ 3] 	lda gr_scrngeom+gr_paper		; Set Paper
cda7 : 9126             [ 5] 	sta (gr_scrngeom+gr_geom_tmp),y
cda9 : c8               [ 2] 	iny
cdaa : a523             [ 3] 	lda gr_scrngeom+gr_ink			; Set Ink
cdac : 9126             [ 5] 	sta (gr_scrngeom+gr_geom_tmp),y
cdae : c8               [ 2] 	iny
cdaf :                       gr_cls_skip_marg
cdaf : a510             [ 3] 	lda vdp_blank
cdb1 : 850f             [ 3] 	sta vdp_curval					; Under cursor is also blank
cdb3 :                       gr_cls_col
cdb3 : 9126             [ 5] 	sta (gr_scrngeom+gr_geom_tmp),y
cdb5 : c8               [ 2] 	iny
cdb6 : c419             [ 3] 	cpy gr_scrngeom+gr_text_w		; Done all columns?
cdb8 : d0f9             [ 3] 	bne gr_cls_col
                             	; Update pointer
cdba : 18               [ 2] 	clc
cdbb : a526             [ 3] 	lda gr_scrngeom+gr_geom_tmp
cdbd : 6519             [ 3] 	adc gr_scrngeom+gr_text_w
cdbf : 8526             [ 3] 	sta gr_scrngeom+gr_geom_tmp
                             	_bcc 2
                             
cdc3 : e627             [ 5] 	inc gr_scrngeom+gr_geom_tmp+1
cdc5 : ca               [ 2] 	dex								; 1 row done
cdc6 : d0d7             [ 3] 	bne gr_cls_row					; Done all rows?
                             
                             	; set cursror position to top left
cdc8 : a510             [ 3] 	lda vdp_blank
cdca : 850f             [ 3] 	sta vdp_curval
cdcc : a625             [ 3] 	ldx gr_scrngeom+gr_margin
cdce : a000             [ 2] 	ldy #0
cdd0 : 38               [ 2] 	sec								; Init mode
cdd1 : 2001ce           [ 6] 	jsr gr_set_cur_init
AS65 Assembler for R6502 [1.42].                                     Page  101
-------------------------------- bank\bank0.s --------------------------------

                             
cdd4 : c60d             [ 5] 	dec vdp_curoff
                             
cdd6 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* gr_getXY_base
                             ;* Get base screen address using Y coord only
                             ;* Input : X = y coord
                             ;* Output :	gr_geom_tmp updated with base
                             ;* Regs affected : A
                             ;****************************************
cdd7 :                       gr_getXY_base
                             	; Find y offset using **X register**
cdd7 : 18               [ 2] 	clc
cdd8 : bd28d2           [ 4] 	lda gr_offset_40lo,x
cddb : 6516             [ 3] 	adc gr_scrngeom+gr_text_start
cddd : 8526             [ 3] 	sta gr_scrngeom+gr_geom_tmp
cddf : bd44d2           [ 4] 	lda gr_offset_40hi,x
cde2 : 6517             [ 3] 	adc gr_scrngeom+gr_text_start+1
cde4 : 8527             [ 3] 	sta gr_scrngeom+gr_geom_tmp+1
                             
                             	; A = high byte of base address
cde6 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* gr_plot
                             ;* Write a byte in the screen pos
                             ;* Input :	Y,X = coord, A = Byte to put
                             ;*			X = Y COORDINATE
                             ;*			Y = X COORDINATE!!
                             ;* Output : None
                             ;* Regs affected : All
                             ;****************************************
cde7 :                       gr_plot
cde7 : 48               [ 3] 	pha					; Save byte to put
cde8 : 20d7cd           [ 6] 	jsr gr_getXY_base	; base addre
cdeb : 68               [ 4] 	pla					; Get byte to put
cdec : 9126             [ 5] 	sta (gr_scrngeom+gr_geom_tmp),y
cdee : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* gr_put
                             ;* Write a byte in the current cursor position
                             ;* Input : A = Byte to put
                             ;* Output : None
                             ;* Regs affected : All
                             ;****************************************
cdef :                       gr_put
cdef : e60d             [ 5] 	inc vdp_curoff		; Disable cusror
cdf1 : 850f             [ 3] 	sta vdp_curval		; Update cursor value
                             	; Base address plus X offset
cdf3 : a41b             [ 3] 	ldy gr_scrngeom+gr_cur_x
cdf5 : 911d             [ 5] 	sta (gr_scrngeom+gr_cur_ptr),y
cdf7 : c60d             [ 5] 	dec vdp_curoff		; Allow cursor flashing
cdf9 : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* gr_get
                             ;* Get the byte in the screen pos
                             ;* Input : Y,X = coord (**Y = X coordinate!!)
AS65 Assembler for R6502 [1.42].                                     Page  102
-------------------------------- bank\bank0.s --------------------------------

                             ;* Output : X,Y = address, A = peeked byte
                             ;* Regs affected : All
                             ;****************************************
cdfa :                       gr_get
cdfa : 20d7cd           [ 6] 	jsr gr_getXY_base	; Base address
cdfd : b126             [ 5] 	lda (gr_scrngeom+gr_geom_tmp),y
cdff : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* gr_set_cur
                             ;* Set the cursor position
                             ;* Input : X, Y = position
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
ce00 :                       gr_set_cur
ce00 : 18               [ 2] 	clc
ce01 :                       gr_set_cur_init
ce01 : e60d             [ 5] 	inc vdp_curoff				; Disable cursor
                             
ce03 : b00e             [ 3] 	bcs gr_set_cur_skip			; Skip restore if C=1
ce05 : 8632             [ 3] 	stx tmp_alo
ce07 : 8433             [ 3] 	sty tmp_ahi
                             	; First restore what is under the cursor
                             	; in case cursor is ON
ce09 : 8426             [ 3] 	sty gr_scrngeom+gr_geom_tmp
ce0b : a50f             [ 3] 	lda vdp_curval
ce0d : a41b             [ 3] 	ldy gr_scrngeom+gr_cur_x
ce0f : 911d             [ 5] 	sta (gr_scrngeom+gr_cur_ptr),y
ce11 : a426             [ 3] 	ldy gr_scrngeom+gr_geom_tmp
ce13 :                       gr_set_cur_skip
                             	; Save new cursor position
ce13 : 861b             [ 3] 	stx gr_scrngeom+gr_cur_x
ce15 : 841c             [ 3] 	sty gr_scrngeom+gr_cur_y
                             
                             	; Now calculate the new cursor vram address
ce17 : a61c             [ 3] 	ldx gr_scrngeom+gr_cur_y
ce19 : 20d7cd           [ 6] 	jsr gr_getXY_base
                             	; Update pointer in tmp, A already has high byte
ce1c : 851e             [ 3] 	sta gr_scrngeom+gr_cur_ptr+1
ce1e : a526             [ 3] 	lda gr_scrngeom+gr_geom_tmp
ce20 : 851d             [ 3] 	sta gr_scrngeom+gr_cur_ptr
                             	; Read screen at this position, offset with X co
ce22 : a41b             [ 3] 	ldy gr_scrngeom+gr_cur_x
ce24 : b11d             [ 5] 	lda (gr_scrngeom+gr_cur_ptr),y
ce26 : 850f             [ 3] 	sta vdp_curval
                             	; Reset cursor so it's visible
ce28 : a900             [ 2] 	lda #0
ce2a : 850e             [ 3] 	sta vdp_curstat
ce2c : a901             [ 2] 	lda #1
ce2e : 850c             [ 3] 	sta vdp_curcnt
                             
ce30 : c60d             [ 5] 	dec vdp_curoff
                             
ce32 : 60               [ 6] 	rts
                             
                             
                             
                             ;****************************************
                             ;* gr_scroll_up
                             ;* Scroll screen one line up
                             ;****************************************
AS65 Assembler for R6502 [1.42].                                     Page  103
-------------------------------- bank\bank0.s --------------------------------

ce33 :                       gr_scroll_up
ce33 : e60d             [ 5] 	inc vdp_curoff
                             
                             	; Set source in a and dest in b
                             	; b is first line, source is second
ce35 : 18               [ 2] 	clc
ce36 : a516             [ 3] 	lda gr_scrngeom+gr_text_start
ce38 : 8534             [ 3] 	sta tmp_blo
ce3a : 6519             [ 3] 	adc gr_scrngeom+gr_text_w
ce3c : 8532             [ 3] 	sta tmp_alo
ce3e : a517             [ 3] 	lda gr_scrngeom+gr_text_start+1
ce40 : 8535             [ 3] 	sta tmp_bhi
ce42 : 6900             [ 2] 	adc #0
ce44 : 8533             [ 3] 	sta tmp_ahi
                             
                             	; Restore what was underneath cursor
ce46 : a50f             [ 3] 	lda vdp_curval
ce48 : a41b             [ 3] 	ldy gr_scrngeom+gr_cur_x
ce4a : 911d             [ 5] 	sta (gr_scrngeom+gr_cur_ptr),y
                             
                             	; x = lines to scroll (1 less than screen height
ce4c : a61a             [ 3] 	ldx gr_scrngeom+gr_text_h
ce4e : ca               [ 2] 	dex
                             
ce4f :                       gr_scroll_cpy_ln
                             	; Start from right hand edge (easier)
ce4f : a419             [ 3] 	ldy gr_scrngeom+gr_text_w
ce51 : 88               [ 2] 	dey
ce52 :                       gr_scroll_char
                             	; get char from source and copy to dest
ce52 : b132             [ 5] 	lda (tmp_alo),y
ce54 : 9134             [ 5] 	sta (tmp_blo),y
ce56 : 88               [ 2] 	dey
ce57 : 10f9             [ 3] 	bpl gr_scroll_char
                             
                             	; Update source address
ce59 : 18               [ 2] 	clc
ce5a : a532             [ 3] 	lda tmp_alo
ce5c : 6519             [ 3] 	adc gr_scrngeom+gr_text_w
ce5e : 8532             [ 3] 	sta tmp_alo
                             	_bcc 2
                             
ce62 : e633             [ 5] 	inc tmp_ahi
                             	; Update destination address
ce64 : 18               [ 2] 	clc
ce65 : a534             [ 3] 	lda tmp_blo
ce67 : 6519             [ 3] 	adc gr_scrngeom+gr_text_w
ce69 : 8534             [ 3] 	sta tmp_blo
                             	_bcc 2
                             
ce6d : e635             [ 5] 	inc tmp_bhi
                             
                             	; One line complete
ce6f : ca               [ 2] 	dex
ce70 : d0dd             [ 3] 	bne gr_scroll_cpy_ln
                             
                             	; Source is pointing at last line
                             	; Last line needs filling
ce72 : a000             [ 2] 	ldy #0							; Start from left
ce74 : a525             [ 3] 	lda gr_scrngeom+gr_margin		; Margin?
ce76 : f00a             [ 3] 	beq gr_scroll_marg				; Skip if not
ce78 : a524             [ 3] 	lda gr_scrngeom+gr_paper		; Set Paper
AS65 Assembler for R6502 [1.42].                                     Page  104
-------------------------------- bank\bank0.s --------------------------------

ce7a : 9126             [ 5] 	sta (gr_scrngeom+gr_geom_tmp),y
ce7c : c8               [ 2] 	iny
ce7d : a523             [ 3] 	lda gr_scrngeom+gr_ink			; Set Ink
ce7f : 9126             [ 5] 	sta (gr_scrngeom+gr_geom_tmp),y
ce81 : c8               [ 2] 	iny
ce82 :                       gr_scroll_marg
                             	; Needs to be filled with blank
ce82 : a510             [ 3] 	lda vdp_blank
ce84 : 850f             [ 3] 	sta vdp_curval			; Also this is the cursor value
ce86 :                       gr_scroll_erase_ln
ce86 : 9134             [ 5] 	sta (tmp_blo),y
ce88 : c8               [ 2] 	iny
ce89 : c419             [ 3] 	cpy gr_scrngeom+gr_text_w
ce8b : d0f9             [ 3] 	bne gr_scroll_erase_ln
                             
ce8d : c60d             [ 5] 	dec vdp_curoff
                             
ce8f : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* gr_new_ln
                             ;* Carry out a new line
                             ;* Input : None
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
ce90 :                       gr_new_ln
                             	; X pos is zero, Y needs to increment
ce90 : a625             [ 3] 	ldx gr_scrngeom+gr_margin
ce92 : a41c             [ 3] 	ldy gr_scrngeom+gr_cur_y
ce94 : c8               [ 2] 	iny
ce95 : c41a             [ 3] 	cpy gr_scrngeom+gr_text_h
ce97 : d00c             [ 3] 	bne gr_nl_skip_nl
                             	; If got here then screen needs to scroll
                             	; Common routine also used by cursor right
ce99 :                       gr_scroll_routine
ce99 : 88               [ 2] 	dey
ce9a : 8a               [ 2] 	txa
ce9b : 48               [ 3] 	pha
ce9c : 98               [ 2] 	tya
ce9d : 48               [ 3] 	pha
ce9e : 2033ce           [ 6] 	jsr gr_scroll_up
cea1 : 68               [ 4] 	pla
cea2 : a8               [ 2] 	tay
cea3 : 68               [ 4] 	pla
cea4 : aa               [ 2] 	tax
cea5 :                       gr_nl_skip_nl
cea5 : 4c00ce           [ 3] 	jmp gr_set_cur
                             
                             
                             ;****************************************
                             ;* gr_cur_right
                             ;* Advance cursor position
                             ;* Input : None
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
cea8 :                       gr_cur_right
                             	; Load cursor x,y position
cea8 : a61b             [ 3] 	ldx gr_scrngeom+gr_cur_x
ceaa : a41c             [ 3] 	ldy gr_scrngeom+gr_cur_y
                             
AS65 Assembler for R6502 [1.42].                                     Page  105
-------------------------------- bank\bank0.s --------------------------------

                             	; Move cursor right
ceac : e8               [ 2] 	inx
                             	; Check if reached past edge of line
cead : e419             [ 3] 	cpx gr_scrngeom+gr_text_w
ceaf : d0f4             [ 3] 	bne gr_nl_skip_nl
                             	; If got here then wrap to next line
ceb1 : a625             [ 3] 	ldx gr_scrngeom+gr_margin
ceb3 : c8               [ 2] 	iny
ceb4 : c41a             [ 3] 	cpy gr_scrngeom+gr_text_h
ceb6 : f0e1             [ 3] 	beq gr_scroll_routine		; Common scroll routine
ceb8 : d0eb             [ 3] 	bne gr_nl_skip_nl			; Common set cursor
                             
                             ;****************************************
                             ;* gr_cur_left
                             ;* Advance cursor left
                             ;* Input : None
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
ceba :                       gr_cur_left
                             	; Load cursor x,y position, load X last to check
ceba : a41c             [ 3] 	ldy gr_scrngeom+gr_cur_y
cebc : a61b             [ 3] 	ldx gr_scrngeom+gr_cur_x
                             
                             	; Decrement screen pointer
                             	; Move cursor left
cebe : e425             [ 3] 	cpx gr_scrngeom+gr_margin	; Already at left marg
cec0 : d007             [ 3] 	bne gr_cur_skip_at_left		; No, then just go left
cec2 : c000             [ 2] 	cpy #0						; Else check if can wrap up
cec4 : f007             [ 3] 	beq gr_cur_skip_at_tl
cec6 : 88               [ 2] 	dey
cec7 : a619             [ 3] 	ldx gr_scrngeom+gr_text_w
cec9 :                       gr_cur_skip_at_left
cec9 : ca               [ 2] 	dex
ceca : 4c00ce           [ 3] 	jmp gr_set_cur
                             
cecd :                       gr_cur_skip_at_tl
cecd : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* gr_cur_up
                             ;* Advance cursor up
                             ;* Input : None
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
cece :                       gr_cur_up
                             	; Load cursor x,y position, load Y last to check
cece : a61b             [ 3] 	ldx gr_scrngeom+gr_cur_x
ced0 : a41c             [ 3] 	ldy gr_scrngeom+gr_cur_y
                             	; if y==0 then don't do anything
ced2 : f0f9             [ 3] 	beq gr_cur_skip_at_tl	; Just somewhere with an r
ced4 : 88               [ 2] 	dey
ced5 : 4c00ce           [ 3] 	jmp gr_set_cur
                             
                             ;****************************************
                             ;* gr_cur_down
                             ;* Advance cursor down
                             ;* Input : None
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
AS65 Assembler for R6502 [1.42].                                     Page  106
-------------------------------- bank\bank0.s --------------------------------

ced8 :                       gr_cur_down
                             	; Load cursor x,y position
ced8 : a61b             [ 3] 	ldx gr_scrngeom+gr_cur_x
ceda : a41c             [ 3] 	ldy gr_scrngeom+gr_cur_y
cedc : c8               [ 2] 	iny
                             	; If already at  bottom then don't do anything
cedd : c41a             [ 3] 	cpy gr_scrngeom+gr_text_h			
cedf : f0ec             [ 3] 	beq gr_cur_skip_at_tl				; Just somewhere with a
cee1 : 2000ce           [ 6] 	jsr gr_set_cur
                             
cee4 :                       gr_cur_skip_at_bot
cee4 : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* gr_del
                             ;* Action del
                             ;* Input : None
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
cee5 :                       gr_del
cee5 : 20bace           [ 6] 	jsr gr_cur_left
cee8 : a920             [ 2] 	lda #' '							; Put a space
ceea : 4cefcd           [ 3] 	jmp gr_put
                             
                             ;****************************************
                             ;* gr_get_key
                             ;* Waits for a key press, C=1 synchronous
                             ;* A = Key code, C=0 means valid code
                             ;****************************************
ceed :                       gr_get_key
                             	; save X,Y but A is ok to trample
ceed : 8a               [ 2] 	txa
ceee : 48               [ 3] 	pha
ceef : 98               [ 2] 	tya
cef0 : 48               [ 3] 	pha
cef1 :                       gr_get_key_2
cef1 : 08               [ 3] 	php
cef2 : 20b4c8           [ 6] 	jsr kb_get_key
cef5 : 9006             [ 3] 	bcc gr_key_check_key
cef7 : 28               [ 4] 	plp									; Get async pref
cef8 : b0f7             [ 3] 	bcs	gr_get_key_2					; Keep checking if sync
cefa : 38               [ 2] 	sec
cefb : b019             [ 4] 	bcs gr_key_tidy_up					; Finish if not
cefd :                       gr_key_check_key						; Check the key pressed
cefd : c901             [ 2] 	cmp #UTF_ACK						; Copy key pressed?
ceff : d004             [ 4] 	bne gr_key_skip_copy
cf01 : a50f             [ 3] 	lda vdp_curval						; If yes the get char under 
cf03 : b00f             [ 3] 	bcs gr_key_got_key					; Always branches (n=1, c
cf05 :                       gr_key_skip_copy
cf05 : c914             [ 2] 	cmp #CTRL_CAPS
cf07 : d00b             [ 3] 	bne gr_key_got_key
cf09 : a52c             [ 3] 	lda kb_stat							; Toggle caps bit
cf0b : 4901             [ 2] 	eor #KB_CAPSLK
cf0d : 852c             [ 3] 	sta kb_stat
cf0f : 28               [ 4] 	plp									; Get back synchronous pref
cf10 : b0df             [ 4] 	bcs gr_get_key_2					; And check again for sync
cf12 : 900b             [ 3] 	bcc gr_key_no_key					; Else no key
cf14 :                       gr_key_got_key
cf14 : 28               [ 4] 	plp
cf15 : 18               [ 2] 	clc									; Ensure C=0 for valid key
AS65 Assembler for R6502 [1.42].                                     Page  107
-------------------------------- bank\bank0.s --------------------------------

cf16 :                       gr_key_tidy_up
                             	; restore X,Y but don't lose A
cf16 : 8538             [ 3] 	sta tmp_d
cf18 : 68               [ 4] 	pla
cf19 : a8               [ 2] 	tay
cf1a : 68               [ 4] 	pla
cf1b : aa               [ 2] 	tax
cf1c : a538             [ 3] 	lda tmp_d
cf1e : 60               [ 6] 	rts
cf1f :                       gr_key_no_key
cf1f : 28               [ 4] 	plp
cf20 : 38               [ 2] 	sec									; Ensure C=1 for invalid key
cf21 : b0f3             [ 3] 	bcs gr_key_tidy_up					; Always branches
                             
                             ;****************************************
                             ;* gr_put_byte
                             ;* Put a byte out
                             ;* Input : A = Byte to put
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
cf23 :                       gr_put_byte
                             	_pushAXY
                             
cf2c : 2035cf           [ 6] 	jsr gr_put_byte_low
                             	_pullAXY
                             
cf34 :                       gr_no_special
cf34 : 60               [ 6] 	rts
                             
cf35 :                       gr_put_byte_low
cf35 : c97f             [ 2] 	cmp #UTF_DEL			; Del key
cf37 : f004             [ 3] 	beq gr_process_special
cf39 : c920             [ 2] 	cmp #32					; Special char?
cf3b : b01b             [ 3] 	bcs gr_printable		; >=32 == carry clear
cf3d :                       gr_process_special
                             	; Else find special behaviour to do
cf3d : a2ff             [ 2] 	ldx #-1
cf3f : 8532             [ 3] 	sta tmp_alo
cf41 :                       gr_special_loop
cf41 : e8               [ 2] 	inx
cf42 : bd5ecf           [ 4] 	lda gr_special_ch,x
cf45 : f0ed             [ 3] 	beq gr_no_special		; Somewhere with an rts!
cf47 : c532             [ 3] 	cmp tmp_alo
cf49 : d0f6             [ 3] 	bne gr_special_loop
cf4b : bd67cf           [ 4] 	lda gr_special_fn_lo,x
cf4e : 8532             [ 3] 	sta tmp_alo
cf50 : bd6fcf           [ 4] 	lda gr_special_fn_hi,x
cf53 : 8533             [ 3] 	sta tmp_ahi
cf55 : 6c3200           [ 6] 	jmp (tmp_alo)
                             
                             	;	Normal caracter processing here.
cf58 :                       gr_printable
                             	; Place in current position and move right
cf58 : 20efcd           [ 6] 	jsr gr_put
cf5b : 4ca8ce           [ 3] 	jmp gr_cur_right
                             
cf5e :                       gr_special_ch
cf5e : 0d                    	db UTF_CR
cf5f : 7f                    	db UTF_DEL
cf60 : 08                    	db CRSR_LEFT
cf61 : 09                    	db CRSR_RIGHT
AS65 Assembler for R6502 [1.42].                                     Page  108
-------------------------------- bank\bank0.s --------------------------------

cf62 : 0b                    	db CRSR_UP
cf63 : 0a                    	db CRSR_DOWN
cf64 : 0c                    	db UTF_FF
cf65 : 07                    	db UTF_BEL
cf66 : 00                    	db 0
                             
cf67 :                       gr_special_fn_lo
cf67 : 90                    	db lo(gr_new_ln)
cf68 : e5                    	db lo(gr_del)
cf69 : ba                    	db lo(gr_cur_left)
cf6a : a8                    	db lo(gr_cur_right)
cf6b : ce                    	db lo(gr_cur_up)
cf6c : d8                    	db lo(gr_cur_down)
cf6d : 93                    	db lo(gr_cls)
cf6e : 2a                    	db lo(init_snd)
                             
cf6f :                       gr_special_fn_hi
cf6f : ce                    	db hi(gr_new_ln)
cf70 : ce                    	db hi(gr_del)
cf71 : ce                    	db hi(gr_cur_left)
cf72 : ce                    	db hi(gr_cur_right)
cf73 : ce                    	db hi(gr_cur_up)
cf74 : ce                    	db hi(gr_cur_down)
cf75 : cd                    	db hi(gr_cls)
cf76 : d4                    	db hi(init_snd)
                             
                             ; Special command to print to the screen
                             ; Y,A=Message, zero terminated
cf77 :                       gr_print_msg
cf77 : 8449             [ 3] 	sty num_tmp
cf79 : 854a             [ 3] 	sta num_tmp+1
cf7b : a000             [ 2] 	ldy #0
cf7d :                       gr_print_msg_loop
cf7d : b149             [ 5] 	lda (num_tmp),y
cf7f : f006             [ 3] 	beq gr_print_msg_done
cf81 : 2023cf           [ 6] 	jsr gr_put_byte
cf84 : c8               [ 2] 	iny
cf85 : d0f6             [ 3] 	bne gr_print_msg_loop
cf87 :                       gr_print_msg_done
cf87 : a54a             [ 3] 	lda num_tmp+1
cf89 : a449             [ 3] 	ldy num_tmp
cf8b : 60               [ 6] 	rts
                             
                             ;******* HIRES STUFF *****
                             
                             
                             ;****************************************
                             ;* gr_hcode
                             ;* Plot bytecode at hires X,Y coordinates with co
                             ;* Input : X,Y = coord, A = Char code
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
cf8c :                       gr_hcode
cf8c : 48               [ 3] 	pha
                             	; Set up destination position tmpalo,hi and Y
cf8d : 2048d0           [ 6] 	jsr gr_point_setup
cf90 : a208             [ 2] 	ldx #8				; Always do 8 rows like a character
cf92 :                       gr_hcode_loop
cf92 : 68               [ 4] 	pla 				; Get the code to place
cf93 : 48               [ 3] 	pha					; Need to save it back
cf94 : 9126             [ 5] 	sta (gr_scrngeom+gr_geom_tmp),y		; Store it in d
AS65 Assembler for R6502 [1.42].                                     Page  109
-------------------------------- bank\bank0.s --------------------------------

cf96 : 18               [ 2] 	clc
cf97 : a526             [ 3] 	lda gr_scrngeom+gr_geom_tmp			; Update base poin
cf99 : 6519             [ 3] 	adc gr_scrngeom+gr_text_w
cf9b : 8526             [ 3] 	sta gr_scrngeom+gr_geom_tmp
                             	_bcc 2
                             
cf9f : e627             [ 5] 	inc gr_scrngeom+gr_geom_tmp+1
cfa1 : ca               [ 2] 	dex
cfa2 : d0ee             [ 3] 	bne gr_hcode_loop
cfa4 : 68               [ 4] 	pla
cfa5 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* gr_hchar
                             ;* Plot character to hires X,Y coordinates with c
                             ;* Input : X,Y = coord, A = Char code
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
cfa6 :                       gr_hchar
                             	; If char code < 32 then plot attribute
cfa6 : c91f             [ 2] 	cmp #31
cfa8 : 90e2             [ 3] 	bcc gr_hcode
                             	; Multiply char code by 8
                             	; and add to char font base
                             	; tmp_clo contains base address
cfaa : 0a               [ 2] 	asl a
cfab : 2637             [ 5] 	rol tmp_chi
cfad : 0a               [ 2] 	asl a
cfae : 2637             [ 5] 	rol tmp_chi
cfb0 : 0a               [ 2] 	asl a
cfb1 : 2637             [ 5] 	rol tmp_chi
cfb3 : 18               [ 2] 	clc
cfb4 : 6514             [ 3] 	adc gr_scrngeom+gr_char
cfb6 : 8536             [ 3] 	sta tmp_clo
cfb8 : a537             [ 3] 	lda tmp_chi
cfba : 2907             [ 2] 	and #7
cfbc : 6515             [ 3] 	adc gr_scrngeom+gr_char+1
cfbe : 8537             [ 3] 	sta tmp_chi
                             
                             	; Set up destination position
cfc0 : 2048d0           [ 6] 	jsr gr_point_setup
                             	; tmp needs to contains address including column
cfc3 : 18               [ 2] 	clc
cfc4 : 98               [ 2] 	tya
cfc5 : 6526             [ 3] 	adc gr_scrngeom+gr_geom_tmp
cfc7 : 8526             [ 3] 	sta gr_scrngeom+gr_geom_tmp
                             	_bcc 2
                             
cfcb : e627             [ 5] 	inc gr_scrngeom+gr_geom_tmp+1
                             
cfcd : a528             [ 3] 	lda gr_scrngeom+gr_geom_tmp2		; Get the mask
cfcf : a207             [ 2] 	ldx #7
cfd1 :                       gr_hchar_mask							; Calculate how many shifts t
cfd1 : ca               [ 2] 	dex
cfd2 : 4a               [ 2] 	lsr a
cfd3 : d0fc             [ 3] 	bne gr_hchar_mask
cfd5 : 8628             [ 3] 	stx gr_scrngeom+gr_geom_tmp2		; number between 1
                             
                             	; copy font bytes and shift the required number 
                             	; go from bottom to top as data gets stored on t
cfd7 : a007             [ 2] 	ldy #7
AS65 Assembler for R6502 [1.42].                                     Page  110
-------------------------------- bank\bank0.s --------------------------------

cfd9 :                       gr_hchar_getfont
cfd9 : b136             [ 5] 	lda (tmp_clo),y
cfdb : 853d             [ 3] 	sta ztmp_24
cfdd : a900             [ 2] 	lda #0
cfdf : 853e             [ 3] 	sta ztmp_24+1
                             
                             	; shift the right number of times
cfe1 : a628             [ 3] 	ldx gr_scrngeom+gr_geom_tmp2
cfe3 :                       gr_hchar_rot1bit
cfe3 : ca               [ 2] 	dex
cfe4 : f00d             [ 3] 	beq gr_hchar_rot1bit_nx
cfe6 : 463d             [ 5] 	lsr ztmp_24					; Rotate left hand side
cfe8 : a53e             [ 3] 	lda ztmp_24+1				; Rotate right hand side
cfea : 9002             [ 3] 	bcc gr_hchar_rot1bit_bcc
cfec : 0940             [ 2] 	ora #0x40					; account for 6 bits per byte
cfee :                       gr_hchar_rot1bit_bcc
cfee : 4a               [ 2] 	lsr a
cfef : 853e             [ 3] 	sta ztmp_24+1
cff1 : 10f0             [ 3] 	bpl gr_hchar_rot1bit		; Always as lsr sets N=0
cff3 :                       gr_hchar_rot1bit_nx
cff3 : a53e             [ 3] 	lda ztmp_24+1				; Get RHS
cff5 : 48               [ 3] 	pha							; Push RHS on to stack
cff6 : a53d             [ 3] 	lda ztmp_24					; Get LHS
cff8 : 48               [ 3] 	pha							; Push that too - LH gets pulled first
cff9 : 88               [ 2] 	dey							; Bottom to to lines
cffa : 10dd             [ 3] 	bpl gr_hchar_getfont
                             
                             	; Now copy shift source to destination, accounti
cffc : a208             [ 2] 	ldx #8
cffe :                       gr_hchar_copyline
cffe : a41f             [ 3] 	ldy gr_scrngeom+gr_pixmode	; Mode determines how
d000 : f022             [ 3] 	beq gr_hchar_copyline_erase
d002 : 3010             [ 3] 	bmi gr_hchar_copyline_eor
                             
                             	; Mode = ~Z : OR
d004 : a000             [ 2] 	ldy #0						; Get lh side source
d006 : 68               [ 4] 	pla
d007 : 1126             [ 5] 	ora (gr_scrngeom+gr_geom_tmp),y
d009 : 9126             [ 5] 	sta (gr_scrngeom+gr_geom_tmp),y
d00b : c8               [ 2] 	iny							; Get rh side source
d00c : 68               [ 4] 	pla
d00d : 1126             [ 5] 	ora (gr_scrngeom+gr_geom_tmp),y
d00f : 9126             [ 5] 	sta (gr_scrngeom+gr_geom_tmp),y
d011 : 4c39d0           [ 3] 	jmp gr_hchar_copyline_nx
d014 :                       gr_hchar_copyline_eor
                             	; Mode = N : EOR
d014 : a000             [ 2] 	ldy #0						; Get lh side source
d016 : 68               [ 4] 	pla
d017 : 5126             [ 5] 	eor (gr_scrngeom+gr_geom_tmp),y
d019 : 9126             [ 5] 	sta (gr_scrngeom+gr_geom_tmp),y
d01b : c8               [ 2] 	iny							; Get rh side source
d01c : 68               [ 4] 	pla
d01d : 5126             [ 5] 	eor (gr_scrngeom+gr_geom_tmp),y
d01f : 9126             [ 5] 	sta (gr_scrngeom+gr_geom_tmp),y
d021 : 4c39d0           [ 3] 	jmp gr_hchar_copyline_nx
d024 :                       gr_hchar_copyline_erase
                             	; Mode = Z : erase
d024 : a000             [ 2] 	ldy #0						; Get lh side source
d026 : 68               [ 4] 	pla
d027 : 853d             [ 3] 	sta ztmp_24
d029 : 1126             [ 5] 	ora (gr_scrngeom+gr_geom_tmp),y
d02b : 453d             [ 3] 	eor ztmp_24
AS65 Assembler for R6502 [1.42].                                     Page  111
-------------------------------- bank\bank0.s --------------------------------

d02d : 9126             [ 5] 	sta (gr_scrngeom+gr_geom_tmp),y
d02f : c8               [ 2] 	iny							; Get rh side source
d030 : 68               [ 4] 	pla
d031 : 853d             [ 3] 	sta ztmp_24
d033 : 1126             [ 5] 	ora (gr_scrngeom+gr_geom_tmp),y
d035 : 453d             [ 3] 	eor ztmp_24
d037 : 9126             [ 5] 	sta (gr_scrngeom+gr_geom_tmp),y
d039 :                       gr_hchar_copyline_nx
d039 : 18               [ 2] 	clc							; Next address
d03a : a526             [ 3] 	lda gr_scrngeom+gr_geom_tmp
d03c : 6928             [ 2] 	adc #40
d03e : 8526             [ 3] 	sta gr_scrngeom+gr_geom_tmp
                             	_bcc 2
                             
d042 : e627             [ 5] 	inc gr_scrngeom+gr_geom_tmp+1
d044 : ca               [ 2] 	dex
d045 : d0b7             [ 4] 	bne gr_hchar_copyline
d047 : 60               [ 6] 	rts							; Done after 8 lines
                             
                             ;****************************************
                             ;* gr_point_setup
                             ;* Calculate information about a pixel location
                             ;* Input : X,Y = coord
                             ;* Output : None
                             ;* Regs affected :
                             ;* gr_geom_tmp contains the row base address
                             ;* gr_geom_tmp2 contains the mask
                             ;* A contains the mask
                             ;* X untouched
                             ;* Y contains column offet from base address
                             ;****************************************
d048 :                       gr_point_setup
                             	; Get row address
d048 : b9009c           [ 4] 	lda hires_row_low,y
d04b : 8526             [ 3] 	sta gr_scrngeom+gr_geom_tmp
d04d : b9c89c           [ 4] 	lda hires_row_hi,y
d050 : 8527             [ 3] 	sta gr_scrngeom+gr_geom_tmp+1
                             	; Get the pixel mask
d052 : bd809e           [ 4] 	lda hires_mask,x
d055 : 8528             [ 3] 	sta gr_scrngeom+gr_geom_tmp2
                             	; Get the column offset to Y
d057 : bc909d           [ 4] 	ldy hires_col,x
d05a : 60               [ 6] 	rts
                             
d05b :                       gr_set_hires_cur
d05b : 8621             [ 3] 	stx gr_scrngeom+gr_hires_x
d05d : 8422             [ 3] 	sty gr_scrngeom+gr_hires_y
d05f : 60               [ 6] 	rts
                             
                             ;* Get pixel value at X,Y in to A
d060 :                       gr_pixel
d060 : 2048d0           [ 6] 	jsr gr_point_setup				; Set up mask and addresse
d063 : 3126             [ 5] 	and (gr_scrngeom+gr_geom_tmp),y	; And with scree
d065 : 60               [ 6] 	rts
                             
                             ;* Plot a point based on X,Y coordinates
d066 :                       gr_point
d066 : e0f0             [ 2] 	cpx #240						; Check bounds
d068 : b02c             [ 3] 	bcs gr_point_done
d06a : c0c8             [ 2] 	cpy #200
d06c : b028             [ 3] 	bcs gr_point_done
                             
AS65 Assembler for R6502 [1.42].                                     Page  112
-------------------------------- bank\bank0.s --------------------------------

                             	;** FOR SPEED COPYING THE POINT SETUP ROUTINE **
                             	;** OBVS MAKE SURE THIS REFLECTS ANY POINT SETUP
                             	; Get row address
d06e : b9009c           [ 4] 	lda hires_row_low,y
d071 : 8526             [ 3] 	sta gr_scrngeom+gr_geom_tmp
d073 : b9c89c           [ 4] 	lda hires_row_hi,y
d076 : 8527             [ 3] 	sta gr_scrngeom+gr_geom_tmp+1
                             	; Get the pixel mask
d078 : bd809e           [ 4] 	lda hires_mask,x
d07b : 8528             [ 3] 	sta gr_scrngeom+gr_geom_tmp2
                             	; Get the column offset to Y
d07d : bc909d           [ 4] 	ldy hires_col,x
                             
                             ;* Plot a point based on gr_geom_tmp base, Y offs
d080 : b126             [ 5] 	lda (gr_scrngeom+gr_geom_tmp),y	; Get screen byt
d082 : c920             [ 2] 	cmp #32							; If less than 32 (i.e. an attribu
d084 : b002             [ 3] 	bcs gr_point_skip_attr
d086 : a940             [ 2] 	lda #64							; then make it a normal cell (else
d088 :                       gr_point_skip_attr
d088 : a61f             [ 3] 	ldx gr_scrngeom+gr_pixmode		; Look at the mode
d08a : 3006             [ 3] 	bmi gr_point_eor				; If eor mode then go and wr
d08c : 0528             [ 3] 	ora gr_scrngeom+gr_geom_tmp2	; Or with MASK
d08e : e000             [ 2] 	cpx #0							; But if zero mode then eor
d090 : d002             [ 3] 	bne gr_point_write
d092 :                       gr_point_eor
d092 : 4528             [ 3] 	eor gr_scrngeom+gr_geom_tmp2	; EOR with MASK
d094 :                       gr_point_write
d094 : 9126             [ 5] 	sta (gr_scrngeom+gr_geom_tmp),y
d096 :                       gr_point_done
d096 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* gr_circle
                             ;* Draw a circle centre x0,y0, radius r
                             ;* Input :	num_a   = x0
                             ;*			num_a+1 = y0
                             ;*			num_a+2 = r
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
d097 :                       gr_circle
                             ; Local definitions of temp space to make
                             ; the rest of the code easier to read
003d =                       grc_x0 	= (num_a)
003e =                       grc_y0 	= (num_a+1)
003f =                       grc_r 	= (num_a+2)
0040 =                       grc_x 	= (num_a+3)
0042 =                       grc_y	= (num_b+1)
0043 =                       grc_d	= (num_b+2)
                             
                             	;x = radius
d097 : a53f             [ 3] 	lda grc_r
d099 : 8540             [ 3] 	sta grc_x
                             	;decision = 1 - x
d09b : a900             [ 2] 	lda #0
                             	;y = 0
d09d : 8542             [ 3] 	sta grc_y
d09f : 18               [ 2] 	clc			; A=0 so CLC subtracts 1 :-)
d0a0 : e540             [ 3] 	sbc grc_x
d0a2 : 8543             [ 3] 	sta grc_d
d0a4 :                       gr_circle_plot
                             	;while(x >= y)
AS65 Assembler for R6502 [1.42].                                     Page  113
-------------------------------- bank\bank0.s --------------------------------

d0a4 : a540             [ 3] 	lda grc_x
d0a6 : c542             [ 3] 	cmp grc_y
d0a8 : 902a             [ 3] 	bcc gr_circle_done
                             	;plot 8 points on current x,y
d0aa : 20d5d0           [ 6] 	jsr gr_circle_points
                             	;y++
d0ad : e642             [ 5] 	inc grc_y
                             	;if d<=0
d0af : a543             [ 3] 	lda grc_d
d0b1 : f014             [ 3] 	beq gr_circle_d_lte0
d0b3 : 3012             [ 3] 	bmi gr_circle_d_lte0
                             	;else
                             	;x--
d0b5 : c640             [ 5] 	dec grc_x
                             	;decision += 2 * (y - x) + 1
d0b7 : a542             [ 3] 	lda grc_y
d0b9 : 38               [ 2] 	sec
d0ba : e540             [ 3] 	sbc grc_x
d0bc : 0a               [ 2] 	asl a
d0bd : 18               [ 2] 	clc
d0be : 6901             [ 2] 	adc #1
d0c0 : 6543             [ 3] 	adc grc_d
d0c2 : 8543             [ 3] 	sta grc_d
d0c4 : 4ca4d0           [ 3] 	jmp gr_circle_plot
d0c7 :                       gr_circle_d_lte0
                             	;decision += 2 * y + 1
d0c7 : a542             [ 3] 	lda grc_y
d0c9 : 0a               [ 2] 	asl a
d0ca : 18               [ 2] 	clc
d0cb : 6901             [ 2] 	adc #1
d0cd : 6543             [ 3] 	adc grc_d
d0cf : 8543             [ 3] 	sta grc_d
d0d1 : 4ca4d0           [ 3] 	jmp gr_circle_plot
d0d4 :                       gr_circle_done
d0d4 : 60               [ 6] 	rts
d0d5 :                       gr_circle_points
                             ; Local names of temp storage
                             ; to make code easier to read
                             	;DrawPixel( x + x0,  yh + y0);
d0d5 : a540             [ 3] 	lda grc_x
d0d7 : 18               [ 2] 	clc
d0d8 : 653d             [ 3] 	adc grc_x0
d0da : aa               [ 2] 	tax
d0db : a542             [ 3] 	lda grc_y
d0dd : 18               [ 2] 	clc
d0de : 653e             [ 3] 	adc grc_y0
d0e0 : a8               [ 2] 	tay
d0e1 : 2066d0           [ 6] 	jsr gr_point
                             	;DrawPixel( y + x0,  xh + y0);
d0e4 : a542             [ 3] 	lda grc_y
d0e6 : 18               [ 2] 	clc
d0e7 : 653d             [ 3] 	adc grc_x0
d0e9 : aa               [ 2] 	tax
d0ea : a540             [ 3] 	lda grc_x
d0ec : 18               [ 2] 	clc
d0ed : 653e             [ 3] 	adc grc_y0
d0ef : a8               [ 2] 	tay
d0f0 : 2066d0           [ 6] 	jsr gr_point
                             	;DrawPixel(-x + x0,  yh + y0);
d0f3 : a53d             [ 3] 	lda grc_x0
d0f5 : 38               [ 2] 	sec
d0f6 : e540             [ 3] 	sbc grc_x
AS65 Assembler for R6502 [1.42].                                     Page  114
-------------------------------- bank\bank0.s --------------------------------

d0f8 : aa               [ 2] 	tax
d0f9 : a542             [ 3] 	lda grc_y
d0fb : 18               [ 2] 	clc
d0fc : 653e             [ 3] 	adc grc_y0
d0fe : a8               [ 2] 	tay
d0ff : 2066d0           [ 6] 	jsr gr_point
                             	;DrawPixel(-y + x0,  xh + y0);
d102 : a53d             [ 3] 	lda grc_x0
d104 : 38               [ 2] 	sec
d105 : e542             [ 3] 	sbc grc_y
d107 : aa               [ 2] 	tax
d108 : a540             [ 3] 	lda grc_x
d10a : 18               [ 2] 	clc
d10b : 653e             [ 3] 	adc grc_y0
d10d : a8               [ 2] 	tay
d10e : 2066d0           [ 6] 	jsr gr_point
                             	;DrawPixel(-x + x0, -yh + y0);
d111 : a53d             [ 3] 	lda grc_x0
d113 : 38               [ 2] 	sec
d114 : e540             [ 3] 	sbc grc_x
d116 : aa               [ 2] 	tax
d117 : a53e             [ 3] 	lda grc_y0
d119 : 38               [ 2] 	sec
d11a : e542             [ 3] 	sbc grc_y
d11c : a8               [ 2] 	tay
d11d : 2066d0           [ 6] 	jsr gr_point
                             	;DrawPixel(-y + x0, -xh + y0);
d120 : a53d             [ 3] 	lda grc_x0
d122 : 38               [ 2] 	sec
d123 : e542             [ 3] 	sbc grc_y
d125 : aa               [ 2] 	tax
d126 : a53e             [ 3] 	lda grc_y0
d128 : 38               [ 2] 	sec
d129 : e540             [ 3] 	sbc grc_x
d12b : a8               [ 2] 	tay
d12c : 2066d0           [ 6] 	jsr gr_point
                             	;DrawPixel( x + x0, -yh + y0);
d12f : a540             [ 3] 	lda grc_x
d131 : 18               [ 2] 	clc
d132 : 653d             [ 3] 	adc grc_x0
d134 : aa               [ 2] 	tax
d135 : a53e             [ 3] 	lda grc_y0
d137 : 38               [ 2] 	sec
d138 : e542             [ 3] 	sbc grc_y
d13a : a8               [ 2] 	tay
d13b : 2066d0           [ 6] 	jsr gr_point
                             	;DrawPixel( y + x0, -xh + y0);
d13e : a542             [ 3] 	lda grc_y
d140 : 18               [ 2] 	clc
d141 : 653d             [ 3] 	adc grc_x0
d143 : aa               [ 2] 	tax
d144 : a53e             [ 3] 	lda grc_y0
d146 : 38               [ 2] 	sec
d147 : e540             [ 3] 	sbc grc_x
d149 : a8               [ 2] 	tay
d14a : 4c66d0           [ 3] 	jmp gr_point
                             
                             
                             
                             ;****************************************
                             ;* gr_line
                             ;* Draw a line from x0,y0 -> x1,y1
AS65 Assembler for R6502 [1.42].                                     Page  115
-------------------------------- bank\bank0.s --------------------------------

                             ;* Input :	num_a   = x0
                             ;*			num_a+1 = y0
                             ;*			num_a+2 = x1
                             ;*			num_a+3 = y1
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
d14d :                       gr_line
                             
                             ; Local definitions of temp space to make
                             ; the rest of the code easier to read
003d =                       grl_x0 	= (num_a)
003e =                       grl_y0 	= (num_a+1)
003f =                       grl_x1 	= (num_a+2)
0040 =                       grl_y1 	= (num_a+3)
0041 =                       grl_dx	= (ztmp_24+4)
0042 =                       grl_dy	= (ztmp_24+5)
0043 =                       grl_xyyx= (ztmp_24+6)
0044 =                       grl_2dx	= (ztmp_24+7)			; Word
0046 =                       grl_2dy	= (ztmp_24+9)			; Word
0048 =                       grl_2dxy= (ztmp_24+11)			; Word
004a =                       grl_sinx= (ztmp_24+13)
004b =                       grl_p	= (ztmp_24+14)			; Word
004d =                       grl_siny= (ztmp_24+16)
                             
                             	; Start from hires cursor position
                             	; New cursor pos = end of line pos
d14d : a521             [ 3] 	lda gr_scrngeom+gr_hires_x
d14f : 853d             [ 3] 	sta grl_x0
d151 : a522             [ 3] 	lda gr_scrngeom+gr_hires_y
d153 : 853e             [ 3] 	sta grl_y0
d155 : a63f             [ 3] 	ldx grl_x1
d157 : a440             [ 3] 	ldy grl_y1
d159 : 205bd0           [ 6] 	jsr gr_set_hires_cur
                             	
d15c : a900             [ 2] 	lda #0
d15e : 8543             [ 3] 	sta grl_xyyx				; Assume normal xy axis
                             
                             	; check if abs(dy)>abs(dx) if so need to swap xy
                             	; num_b = abs(x), num_b+1 = abs(dy)
d160 : 38               [ 2] 	sec
d161 : a53f             [ 3] 	lda grl_x1
d163 : e53d             [ 3] 	sbc grl_x0
d165 : b004             [ 3] 	bcs gr_line_skip_dx_neg
d167 : 49ff             [ 2] 	eor #0xff
d169 : 6901             [ 2] 	adc #1
d16b :                       gr_line_skip_dx_neg
d16b : 8541             [ 3] 	sta grl_dx
d16d : 38               [ 2] 	sec
d16e : a540             [ 3] 	lda grl_y1
d170 : e53e             [ 3] 	sbc grl_y0
d172 : b004             [ 3] 	bcs gr_line_skip_dy_neg
d174 : 49ff             [ 2] 	eor #0xff
d176 : 6901             [ 2] 	adc #1
d178 :                       gr_line_skip_dy_neg
d178 : 8542             [ 3] 	sta grl_dy
d17a : c541             [ 3] 	cmp grl_dx
d17c : 901a             [ 3] 	bcc gr_line_skip_xy_swap
                             	; swap xy axes and also dx and dy
d17e : a53d             [ 3] 	lda grl_x0					; swap x0 and y0
d180 : a63e             [ 3] 	ldx grl_y0
d182 : 853e             [ 3] 	sta grl_y0
AS65 Assembler for R6502 [1.42].                                     Page  116
-------------------------------- bank\bank0.s --------------------------------

d184 : 863d             [ 3] 	stx grl_x0
d186 : a53f             [ 3] 	lda grl_x1					; swap x1 and y1
d188 : a640             [ 3] 	ldx grl_y1
d18a : 8540             [ 3] 	sta grl_y1
d18c : 863f             [ 3] 	stx grl_x1
d18e : a541             [ 3] 	lda grl_dx					; swap dy and dx
d190 : a642             [ 3] 	ldx grl_dy
d192 : 8542             [ 3] 	sta grl_dy
d194 : 8641             [ 3] 	stx grl_dx
d196 : e643             [ 5] 	inc grl_xyyx				; set flag to Not Z to know abou
                             
d198 :                       gr_line_skip_xy_swap
                             	; assume going from left to right and top to bot
d198 : a901             [ 2] 	lda #1
d19a : a0ff             [ 2] 	ldy #255					; -1
d19c : 854a             [ 3] 	sta grl_sinx
d19e : 854d             [ 3] 	sta grl_siny
                             
                             	; check going right to left
d1a0 : a53d             [ 3] 	lda grl_x0
d1a2 : c53f             [ 3] 	cmp grl_x1
d1a4 : 9002             [ 3] 	bcc gr_line_skip_left
d1a6 : 844a             [ 3] 	sty grl_sinx				; make -1
d1a8 :                       gr_line_skip_left
                             	; check going bottom to top
d1a8 : a53e             [ 3] 	lda grl_y0
d1aa : c540             [ 3] 	cmp grl_y1
d1ac : 9002             [ 3] 	bcc gr_line_skip_y_up
d1ae : 844d             [ 3] 	sty grl_siny				; make -1
                             
d1b0 :                       gr_line_skip_y_up
d1b0 : a541             [ 3] 	lda grl_dx
d1b2 : 0a               [ 2] 	asl a
d1b3 : 8544             [ 3] 	sta grl_2dx					; 2*dx (word)
d1b5 : a900             [ 2] 	lda #0
d1b7 : 8545             [ 3] 	sta grl_2dx+1
d1b9 : 2645             [ 5] 	rol grl_2dx+1
                             
d1bb : a542             [ 3] 	lda grl_dy
d1bd : 0a               [ 2] 	asl a
d1be : 8546             [ 3] 	sta grl_2dy					; 2*dy (word)
d1c0 : a900             [ 2] 	lda #0
d1c2 : 8547             [ 3] 	sta grl_2dy+1
d1c4 : 2647             [ 5] 	rol grl_2dy+1
                             
                             ;    p=2*dy-dx;					; p (word)
d1c6 : 38               [ 2] 	sec
d1c7 : a546             [ 3] 	lda grl_2dy
d1c9 : e541             [ 3] 	sbc grl_dx
d1cb : 854b             [ 3] 	sta grl_p
d1cd : a547             [ 3] 	lda grl_2dy+1
d1cf : e900             [ 2] 	sbc #0
d1d1 : 854c             [ 3] 	sta grl_p+1
                             
                             ;   2*(dy-dx)					; num_tmp+2 = 2*(dy-dx)
d1d3 : 38               [ 2] 	sec
d1d4 : a546             [ 3] 	lda grl_2dy
d1d6 : e544             [ 3] 	sbc grl_2dx
d1d8 : 8548             [ 3] 	sta grl_2dxy
d1da : a547             [ 3] 	lda grl_2dy+1
d1dc : e545             [ 3] 	sbc grl_2dx+1
d1de : 8549             [ 3] 	sta grl_2dxy+1
AS65 Assembler for R6502 [1.42].                                     Page  117
-------------------------------- bank\bank0.s --------------------------------

                             
d1e0 :                       gr_line_pixel
d1e0 : a63d             [ 3] 	ldx grl_x0
d1e2 : a43e             [ 3] 	ldy grl_y0
d1e4 : a543             [ 3] 	lda grl_xyyx				; Swapped?
d1e6 : f004             [ 3] 	beq gr_line_yx_skip
d1e8 : a63e             [ 3] 	ldx grl_y0
d1ea : a43d             [ 3] 	ldy grl_x0
d1ec :                       gr_line_yx_skip
d1ec : 2066d0           [ 6] 	jsr gr_point				; Plot point x,y
                             
d1ef : a53d             [ 3] 	lda grl_x0					; Check if done
d1f1 : c53f             [ 3] 	cmp grl_x1
d1f3 : f032             [ 4] 	beq gr_line_done
                             
                             	; Increment x always
d1f5 : 18               [ 2] 	clc
d1f6 : a53d             [ 3] 	lda grl_x0
d1f8 : 654a             [ 3] 	adc grl_sinx
d1fa : 853d             [ 3] 	sta grl_x0
                             
                             	; check sign of p
d1fc : a54c             [ 3] 	lda grl_p+1
d1fe : 3017             [ 4] 	bmi gr_line_neg_p
                             
                             	; if p >=0
                             
                             	; y=y+increment
d200 : 18               [ 2] 	clc
d201 : a53e             [ 3] 	lda grl_y0
d203 : 654d             [ 3] 	adc grl_siny
d205 : 853e             [ 3] 	sta grl_y0
                             
                             	; p=p+2*dy-2*dx
                             	_addZPWord grl_p,grl_2dxy
                             
d214 : 4ce0d1           [ 3] 	jmp gr_line_pixel
                             
d217 :                       gr_line_neg_p
                             	; if p < 0
                             	; p=p+2*dy
                             	_addZPWord grl_p,grl_2dy
                             
                             
d224 : 4ce0d1           [ 3] 	jmp gr_line_pixel
d227 :                       gr_line_done
d227 : 60               [ 6] 	rts
                             
                             
                             ; Line drawing pseudo code
                             ;    while(x<x1)
                             ;    {
                             ;        putpixel(x,y);
                             ;        if(p>=0)
                             ;        {
                             ;            y=y+1;
                             ;            p=p+2*dy-2*dx;
                             ;        }
                             ;        else
                             ;        {
                             ;            p=p+2*dy;
                             ;        }
AS65 Assembler for R6502 [1.42].                                     Page  118
-------------------------------- bank\bank0.s --------------------------------

                             ;        x=x+1;
                             ;    }
                             
                             
                             ;* These tables are to speed up calculating the
                             ;* offset for plot commands
d228 :                       gr_offset_40lo
d228 : 00285078a0            	db lo(000*40), lo(001*40), lo(002*40), lo(003*40
d22d : c8f0184068            	db lo(005*40), lo(006*40), lo(007*40), lo(008*40
d232 : 90b8e00830            	db lo(010*40), lo(011*40), lo(012*40), lo(013*40
d237 : 5880a8d0f8            	db lo(015*40), lo(016*40), lo(017*40), lo(018*40
d23c : 20487098c0            	db lo(020*40), lo(021*40), lo(022*40), lo(023*40
d241 : e81038                	db lo(025*40), lo(026*40), lo(027*40)
d244 :                       gr_offset_40hi
d244 : 0000000000            	db hi(000*40), hi(001*40), hi(002*40), hi(003*40
d249 : 0000010101            	db hi(005*40), hi(006*40), hi(007*40), hi(008*40
d24e : 0101010202            	db hi(010*40), hi(011*40), hi(012*40), hi(013*40
d253 : 0202020202            	db hi(015*40), hi(016*40), hi(017*40), hi(018*40
d258 : 0303030303            	db hi(020*40), hi(021*40), hi(022*40), hi(023*40
d25d : 030404                	db hi(025*40), hi(026*40), hi(027*40)
                             
                             
                             ;* Character based sprites for text mode only
d260 :                       mod_sz_sprite_s
                             ;* Initialisation
d260 :                       gr_spr_init
d260 : a21f             [ 2] 	ldx #31							; Start at last sprite
d262 :                       gr_spr_init_loop
d262 : a9ff             [ 2] 	lda #-1							; Put -1 in the x coords
d264 : 9d00b4           [ 5] 	sta spr_curX,x
d267 : 9d20b4           [ 5] 	sta spr_newX,x
d26a : ca               [ 2] 	dex								; Next sprite
d26b : 10f5             [ 3] 	bpl gr_spr_init_loop			; Until all 32 sprites in
d26d : 60               [ 6] 	rts
                             
                             
                             ;* Erase all active sprites
d26e :                       gr_spr_erase
                             	; First restore background from sprites
                             	; that are active and new pos is different from 
d26e : a21f             [ 2] 	ldx #31							; Start at last sprite
d270 :                       gr_spr_erase_loop
d270 : bd00b4           [ 4] 	lda spr_curX,x					; Is sprite active?
d273 : 3007             [ 3] 	bmi gr_spr_erase_next
d275 : a8               [ 2] 	tay								; x pos in to Y
d276 :                       gr_spr_erase_do
d276 : bda0b4           [ 4] 	lda spr_bgnd,x					; Get the background
d279 : 20c4d2           [ 6] 	jsr gr_spr_put					; And restore it
d27c :                       gr_spr_erase_next
d27c : ca               [ 2] 	dex
d27d : 10f1             [ 3] 	bpl gr_spr_erase_loop
d27f : 60               [ 6] 	rts
                             
                             ;* Get ready for new position
d280 :                       gr_spr_new
d280 : a21f             [ 2] 	ldx #31							; Start at last sprite
d282 :                       gr_spr_new_loop
d282 : bd60b4           [ 4] 	lda spr_newY,x					; Get new Y
d285 : 9d40b4           [ 5] 	sta spr_curY,x					; Update new->cur Y
d288 : a8               [ 2] 	tay								; Used for address calc.
d289 : bd20b4           [ 4] 	lda spr_newX,x					; Get new X
d28c : 9d00b4           [ 5] 	sta spr_curX,x					; Update new->cur X
AS65 Assembler for R6502 [1.42].                                     Page  119
-------------------------------- bank\bank0.s --------------------------------

d28f : 301d             [ 3] 	bmi gr_spr_new_next				; Is the new position act
d291 : 48               [ 3] 	pha 							; x pos saved for later
                             	; Calculate screen address
                             	; save as part of sprite data and in zp area
d292 : 18               [ 2] 	clc
d293 : b928d2           [ 4] 	lda gr_offset_40lo,y
d296 : 6980             [ 2] 	adc #lo(TEXTSCRN)
d298 : 8526             [ 3] 	sta gr_scrngeom+gr_geom_tmp
d29a : 9dc0b4           [ 5] 	sta spr_baseadrl,x
d29d : b944d2           [ 4] 	lda gr_offset_40hi,y
d2a0 : 69bb             [ 2] 	adc #hi(TEXTSCRN)
d2a2 : 8527             [ 3] 	sta gr_scrngeom+gr_geom_tmp+1
d2a4 : 9de0b4           [ 5] 	sta spr_baseadrh,x
d2a7 : 68               [ 4] 	pla								; Get x pos back in to Y reg
d2a8 : a8               [ 2] 	tay
d2a9 : b126             [ 5] 	lda (gr_scrngeom+gr_geom_tmp),y	; Get background
d2ab : 9da0b4           [ 5] 	sta spr_bgnd,x					; And save this
d2ae :                       gr_spr_new_next
d2ae : ca               [ 2] 	dex
d2af : 10d1             [ 3] 	bpl gr_spr_new_loop
d2b1 : 60               [ 6] 	rts
                             
                             
                             ; Draw all active sprites
                             ; Active sprites are always drawn - 0 = highest p
d2b2 :                       gr_spr_draw
d2b2 : a21f             [ 2] 	ldx #31							; Start at last sprite
d2b4 :                       gr_spr_draw_loop
d2b4 : bd20b4           [ 4] 	lda spr_newX,x					; Is sprite active?
d2b7 : 3007             [ 3] 	bmi gr_spr_draw_next
d2b9 : a8               [ 2] 	tay								; X pos in to Y
d2ba : bd80b4           [ 4] 	lda spr_chr,x					; Get the sprite char
d2bd : 20c4d2           [ 6] 	jsr gr_spr_put
d2c0 :                       gr_spr_draw_next
d2c0 : ca               [ 2] 	dex
d2c1 : 10f1             [ 3] 	bpl gr_spr_draw_loop
d2c3 : 60               [ 6] 	rts
                             
                             
                             ;* Common routine to put A to screen address
                             ;* Used for erase and draw of sprites
                             ;* X=index in to sprite table
                             ;* Y=X offset from screen pointer
d2c4 :                       gr_spr_put
d2c4 : 48               [ 3] 	pha
d2c5 : bdc0b4           [ 4] 	lda spr_baseadrl,x		; Get the screen pointer
d2c8 : 8526             [ 3] 	sta gr_scrngeom+gr_geom_tmp
d2ca : bde0b4           [ 4] 	lda spr_baseadrh,x
d2cd : 8527             [ 3] 	sta gr_scrngeom+gr_geom_tmp+1
d2cf : 68               [ 4] 	pla								; Get back the char to
d2d0 : 9126             [ 5] 	sta (gr_scrngeom+gr_geom_tmp),y	; put on to scre
d2d2 : 60               [ 6] 	rts
                             
                             
                             ;* Update spr A with char X
d2d3 :                       gr_spr_char
d2d3 : a8               [ 2] 	tay
d2d4 : 8a               [ 2] 	txa
d2d5 : 9980b4           [ 5] 	sta spr_chr,y
d2d8 : 60               [ 6] 	rts
                             
                             ;* Locate what is at the location of sprite A, re
AS65 Assembler for R6502 [1.42].                                     Page  120
-------------------------------- bank\bank0.s --------------------------------

                             ;* C=1 if sprite it not active
d2d9 :                       gr_spr_hit
d2d9 : aa               [ 2] 	tax
d2da : bd00b4           [ 4] 	lda spr_curX,x
d2dd : c980             [ 2] 	cmp #0x80						; If A>=0x80 then C=1
d2df : bda0b4           [ 4] 	lda spr_bgnd,x
d2e2 : 60               [ 6] 	rts
                             
                             ;* Update spr A with coords X,Y
d2e3 :                       gr_spr_pos
d2e3 : 8432             [ 3] 	sty tmp_alo
d2e5 : a8               [ 2] 	tay
d2e6 : 8a               [ 2] 	txa								; X coord still in X reg
d2e7 : 9920b4           [ 5] 	sta spr_newX,y
d2ea : a532             [ 3] 	lda tmp_alo						; Y coord from temp
d2ec : 9960b4           [ 5] 	sta spr_newY,y
d2ef : 60               [ 6] 	rts
                             
                             ;* Update all sprite positions from df_tmpptra, d
d2f0 :                       gr_spr_multi_pos
d2f0 : a03e             [ 2] 	ldy #62
d2f2 : a21f             [ 2] 	ldx #31
d2f4 :                       gr_spr_multi_loop
d2f4 : b1a1             [ 5] 	lda (df_tmpptra),y
d2f6 : 9d20b4           [ 5] 	sta spr_newX,x
d2f9 : b1a3             [ 5] 	lda (df_tmpptrb),y
d2fb : 9d60b4           [ 5] 	sta spr_newY,x
d2fe : 88               [ 2] 	dey
d2ff : 88               [ 2] 	dey
d300 : ca               [ 2] 	dex
d301 : 10f1             [ 4] 	bpl gr_spr_multi_loop
d303 : 60               [ 6] 	rts
                             
d304 :                       mod_sz_sprite_e
d304 :                       mod_sz_graph_e
                             
                             ; Old version of point calculator - in case I nee
                             ;	; Calculate destination address
                             ;	lda #0
                             ;	sta tmp_ahi
                             ;
                             ;	tya				; Row number in A
                             ;	; Multiply 8
                             ;	asl a
                             ;	rol tmp_ahi
                             ;	asl a
                             ;	rol tmp_ahi
                             ;	asl a
                             ;	rol tmp_ahi
                             ;	sta tmp_alo
                             ;
                             ;	; Multiply 32
                             ;	; Use partial result from m8
                             ;	lda tmp_ahi
                             ;	sta tmp_bhi
                             ;	lda tmp_alo
                             ;	; Just two more rotates to get m32
                             ;	asl a
                             ;	rol tmp_bhi
                             ;	asl a
                             ;	rol tmp_bhi
                             ;	sta tmp_blo
AS65 Assembler for R6502 [1.42].                                     Page  121
-------------------------------- bank\bank0.s --------------------------------

                             ;	; Add m8 and m32 for m40
                             ;	clc
                             ;	lda tmp_alo
                             ;	adc tmp_blo
                             ;	sta tmp_alo
                             ;	lda tmp_ahi
                             ;	adc tmp_bhi
                             ;	; Add high byte of screen address
                             ;	adc gr_scrngeom+vdp_scrn+1
                             ;	sta tmp_ahi
                             ;	; Dest offset in tmp_alo
                             ;
                             ;	; pixel x coord in to A
                             ;	; We dvide by 48 doing trial subtracts
                             ;	; This leaves Y with a number 0..5
                             ;	; And A has the remainder 0..47
                             ;	; Use these to look up byte column and mask
                             ;	; We don't do more than 5 trial subtracts
                             ;	; plus the table size is much smaller
                             ;	; Comprimise of space vs speed
                             ;	txa
                             ;	ldy #0				; Start at segment 0
                             ;	sec
                             ;gr_point_d48
                             ;	sbc #48
                             ;	iny
                             ;	bcs gr_point_d48				; Keep going until underflo
                             ;
                             ;	dey								; Adjust segment count
                             ;	adc #48							; Get remainder in A
                             ;	tax								; Put remainder in to X (0..47)
                             ;	lda gr_col_seg,y				; Get the start column of s
                             ;	clc
                             ;	adc gr_col_offset,x				; Add segment offset usi
                             ;	tay								; We have the byte column in Y
                             ;	sty tmp_bhi						; Save in tmp, also still in Y
                             ;	stx tmp_blo						; Save remainder 0..47
                             ;	rts
                             
                             ;gr_point_mask
                             ;	db 0x20,0x10,0x08,0x04,0x02,0x01
                             ;	db 0x20,0x10,0x08,0x04,0x02,0x01
                             ;	db 0x20,0x10,0x08,0x04,0x02,0x01
                             ;	db 0x20,0x10,0x08,0x04,0x02,0x01
                             ;	db 0x20,0x10,0x08,0x04,0x02,0x01
                             ;	db 0x20,0x10,0x08,0x04,0x02,0x01
                             ;	db 0x20,0x10,0x08,0x04,0x02,0x01
                             ;	db 0x20,0x10,0x08,0x04,0x02,0x01
                             ;gr_col_offset
                             ;	db 0,0,0,0,0,0
                             ;	db 1,1,1,1,1,1
                             ;	db 2,2,2,2,2,2
                             ;	db 3,3,3,3,3,3
                             ;	db 4,4,4,4,4,4
                             ;	db 5,5,5,5,5,5
                             ;	db 6,6,6,6,6,6
                             ;	db 7,7,7,7,7,7
                             ;gr_col_seg
                             ;	db 0,8,16,24,32
                             
                             	include "monitor/cmd.s"
                             ;************************************************
AS65 Assembler for R6502 [1.42].                                     Page  122
-------------------------------- bank\bank0.s --------------------------------

                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  CMD.S
                             ;*	A really simple monitor that needs to be impro
                             ;*	optimised.  Only has these commands;
                             ;*		dxxxx			Dump memory location xxxx
                             ;*						Press enter for more else stop
                             ;*		sxxxx [yy]		Set memory location xxxx with hex
                             ;*						bytes, respond with next location
                             ;*		q				Quit
                             ;*	Now you see why this needs optimising!
                             ;*
                             ;************************************************
                             
0094 =                       cmd_lo					= df_currdat
0095 =                       cmd_hi					= (df_currdat+1)
                             
                             	; ROM code
                             	code  
                             
d304 :                       _mod_sz_cmd_s
                             
d304 :                       command_line
                             
d304 :                       cmd_ready
                             	_println_low msg_ready
                             
                             
d30b : 38               [ 2] 	sec							; Set carry flag = echo characters
d30c : 2069c4           [ 6] 	jsr io_read_line			; Get a command line
d30f : a000             [ 2] 	ldy #0
d311 : b139             [ 5] 	lda (buf_lo),y
d313 : c971             [ 2] 	cmp #'q'
d315 : d001             [ 3] 	bne cmd_check_cmd
d317 : 60               [ 6] 	rts
d318 :                       cmd_check_cmd
d318 : 202ad3           [ 6] 	jsr cmd_parse				; Find command and execute
d31b : b003             [ 3] 	bcs cmd_error				; Carry set = error condition
d31d : 4c04d3           [ 3] 	jmp cmd_ready
                             
d320 :                       cmd_error
                             	_println_low msg_errmsg
                             
d327 : 4c04d3           [ 3] 	jmp cmd_ready
                             
                             
                             ;****************************************
                             ;* cmd_parse
                             ;* Parse the command line in the io buffer
                             ;* Regs affected : 
                             ;****************************************
d32a :                       cmd_parse
d32a : c8               [ 2] 	iny						; Ready for next char
                             	
d32b :                       cmd_check_d
d32b : c964             [ 2] 	cmp #'d'				; Check for d
d32d : f030             [ 3] 	beq cmd_dumpmem
AS65 Assembler for R6502 [1.42].                                     Page  123
-------------------------------- bank\bank0.s --------------------------------

d32f :                       cmd_check_s
d32f : c973             [ 2] 	cmp #'s'				; Check for s
d331 : f006             [ 3] 	beq cmd_setmem
                             
d333 :                       cmd_not_found
d333 : a901             [ 2] 	lda #CMD_ERR_NOTFOUND
d335 : 855d             [ 3] 	sta errno
d337 : 38               [ 2] 	sec
d338 : 60               [ 6] 	rts
                             	
                             ;****************************************
                             ;* cmd_setmem
                             ;* Set the memory at address AAAA to byte string
                             ;* Input : buflo, bufhi
                             ;* Output : y = start of first parm byte
                             ;*          x = index to routine pointer
                             ;* Regs affected : A
                             ;****************************************
d339 :                       cmd_setmem
d339 : 20f0d3           [ 6] 	jsr cmd_parse_word
d33c : b01f             [ 3] 	bcs cmd_setmem_err
d33e :                       cmd_setmem_byte
d33e : 20d4d3           [ 6] 	jsr cmd_parse_byte
d341 : b01a             [ 3] 	bcs cmd_setmem_err
d343 : 20cbd3           [ 6] 	jsr cmd_poke				; Poke A in to cmd_lo, hi
d346 : 20bfd3           [ 6] 	jsr cmd_incmem
d349 : 2002d4           [ 6] 	jsr cmd_parse_next_parm		; Try and find another 
d34c : 90f0             [ 3] 	bcc cmd_setmem_byte			; Process if found, else f
d34e : a595             [ 3] 	lda cmd_hi
d350 : 2083c1           [ 6] 	jsr utilPrintA
d353 : a594             [ 3] 	lda cmd_lo
d355 : 2083c1           [ 6] 	jsr utilPrintA
d358 : 207bc1           [ 6] 	jsr utilPrintCRLF
d35b : 18               [ 2] 	clc
d35c : 60               [ 6] 	rts
d35d :                       cmd_setmem_err
d35d : 38               [ 2] 	sec
d35e : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* cmd_dumpmem
                             ;* Dump memory at address AAAA
                             ;* Input : buflo, bufhi
                             ;* Output : y = start of first parm byte
                             ;* Regs affected : A
                             ;****************************************
d35f :                       cmd_dumpmem
d35f : 20f0d3           [ 6] 	jsr cmd_parse_word			; Get address to dump
d362 : 9001             [ 3] 	bcc cmd_dumpmem_block
d364 : 60               [ 6] 	rts							; C is set
d365 :                       cmd_dumpmem_block
d365 : a595             [ 3] 	lda cmd_hi					; Show the address
d367 : 2083c1           [ 6] 	jsr utilPrintA
d36a : a594             [ 3] 	lda cmd_lo
d36c : 2083c1           [ 6] 	jsr utilPrintA
d36f : 2073c1           [ 6] 	jsr utilPrintSPC
                             	
d372 : a008             [ 2] 	ldy #8						; 8 Bytes per line
d374 :                       cmd_dumpmem_byte
d374 : 20c6d3           [ 6] 	jsr cmd_peek
d377 : 2083c1           [ 6] 	jsr utilPrintA
AS65 Assembler for R6502 [1.42].                                     Page  124
-------------------------------- bank\bank0.s --------------------------------

d37a : 2073c1           [ 6] 	jsr utilPrintSPC
d37d : 20bfd3           [ 6] 	jsr cmd_incmem
d380 : 88               [ 2] 	dey
d381 : d0f1             [ 3] 	bne cmd_dumpmem_byte
d383 :                       cmd_dumpmemASCII
d383 : 38               [ 2] 	sec							; Move pointer back to start
d384 : a594             [ 3] 	lda cmd_lo
d386 : e908             [ 2] 	sbc #8
d388 : 8594             [ 3] 	sta cmd_lo
d38a : a595             [ 3] 	lda cmd_hi
d38c : e900             [ 2] 	sbc #0
d38e : 8595             [ 3] 	sta cmd_hi
                             	
d390 : 2073c1           [ 6] 	jsr utilPrintSPC
d393 : a008             [ 2] 	ldy #8						; 8 Bytes per line
d395 :                       cmd_dumpmem_ascii
d395 : 20c6d3           [ 6] 	jsr cmd_peek
d398 : a22e             [ 2] 	ldx #'.'					; Non-printable char
d39a : c920             [ 2] 	cmp #' '					; A<32 is unprintable
d39c : b001             [ 3] 	bcs cmd_dump_skip_ctrl
d39e : 8a               [ 2] 	txa							; Replace with dot
d39f :                       cmd_dump_skip_ctrl
d39f : c97f             [ 2] 	cmp #UTF_DEL				; >= DEL is unprintable
d3a1 : 9001             [ 3] 	bcc cmd_dump_skip_del
d3a3 : 8a               [ 2] 	txa							; Replace with dot
d3a4 :                       cmd_dump_skip_del	
d3a4 : 2054c4           [ 6] 	jsr io_put_ch
d3a7 : 20bfd3           [ 6] 	jsr cmd_incmem
d3aa : 88               [ 2] 	dey		
d3ab : d0e8             [ 3] 	bne cmd_dumpmem_ascii		; Show 8 bytes
d3ad : 38               [ 2] 	sec
d3ae : 2051c4           [ 6] 	jsr io_get_ch				; Wait for key press
d3b1 : c90d             [ 2] 	cmp #UTF_CR		
d3b3 : d003             [ 3] 	bne cmd_dumpmemFin			; Any key but enter finishe
                             ;	jsr io_put_ch				; Do new line
d3b5 : 4c65d3           [ 3] 	jmp cmd_dumpmem_block
d3b8 :                       cmd_dumpmemFin
d3b8 : a90d             [ 2] 	lda #UTF_CR
d3ba : 2054c4           [ 6] 	jsr io_put_ch
d3bd : 18               [ 2] 	clc
d3be : 60               [ 6] 	rts
                             	
                             	
                             ;****************************************
                             ;* cmd_incmem
                             ;* Increment pointer
                             ;* Input : cmd_lo, cmd_hi
                             ;* Output : cmd_lo, cmd_hi
                             ;* Regs affected : 
                             ;****************************************
d3bf :                       cmd_incmem
                             	_incZPWord cmd_lo
                             
d3c5 : 60               [ 6] 	rts
                             	
                             ;****************************************
                             ;* cmd_peek
                             ;* Read byte
                             ;* Input : cmd_lo, cmd_hi
                             ;* Output : A
                             ;* Regs affected : 
                             ;****************************************
AS65 Assembler for R6502 [1.42].                                     Page  125
-------------------------------- bank\bank0.s --------------------------------

d3c6 :                       cmd_peek
d3c6 : a200             [ 2] 	ldx #0
d3c8 : a194             [ 6] 	lda (cmd_lo,x)
d3ca : 60               [ 6] 	rts
                             	
                             ;****************************************
                             ;* cmd_poke
                             ;* Read byte
                             ;* Input : cmd_lo, cmd_hi, A
                             ;* Output : A
                             ;* Regs affected : 
                             ;****************************************
d3cb :                       cmd_poke
d3cb : 8638             [ 3] 	stx tmp_d
d3cd : a200             [ 2] 	ldx #0
d3cf : 8194             [ 6] 	sta (cmd_lo,x)
d3d1 : a638             [ 3] 	ldx tmp_d
d3d3 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* cmd_parse_byte
                             ;* Find 2 char hex byte
                             ;* Input : buflo, bufhi, y offset
                             ;* Output : y = char after hex byte, A = value
                             ;* Regs affected : A,Y
                             ;****************************************
d3d4 :                       cmd_parse_byte
d3d4 : 2002d4           [ 6] 	jsr cmd_parse_next_parm	; Find the next paramete
d3d7 : b015             [ 3] 	bcs cmd_parse_byte_err
d3d9 : b139             [ 5] 	lda (buf_lo),y			; Get hi nibble of high byte
d3db : f011             [ 3] 	beq cmd_parse_byte_err	; If no char then error w
d3dd : 48               [ 3] 	pha						; Save on stack
d3de : c8               [ 2] 	iny
d3df : b139             [ 5] 	lda (buf_lo),y			; Get lo nibble of high byte
d3e1 : f00a             [ 3] 	beq cmd_parse_byte_errp	; If no char then error 
d3e3 : aa               [ 2] 	tax						; Lo nibble goes to X
d3e4 : 68               [ 4] 	pla						; Restore hi nibble
d3e5 : 20b4c1           [ 6] 	jsr str_x_to_a			; Convert from hex to A
d3e8 : b004             [ 3] 	bcs cmd_parse_byte_err	; If error then stop
d3ea : c8               [ 2] 	iny						; Point to next char
d3eb : 18               [ 2] 	clc
d3ec : 60               [ 6] 	rts						; A contains the byte
d3ed :                       cmd_parse_byte_errp
d3ed : 68               [ 4] 	pla
d3ee :                       cmd_parse_byte_err
d3ee : aa               [ 2] 	tax
d3ef : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* cmd_parse_word
                             ;* Find 4 char hex word
                             ;* Input : buflo, bufhi, y offset
                             ;* Output : y = char after hex byte, A = hi, X = 
                             ;* Regs affected : A,X,Y
                             ;****************************************
d3f0 :                       cmd_parse_word
d3f0 : 20d4d3           [ 6] 	jsr cmd_parse_byte			; Get hi byte of word
d3f3 : b00b             [ 4] 	bcs cmd_word_err
d3f5 : 8595             [ 3] 	sta cmd_hi					; Save hi byte of word
d3f7 : 20d4d3           [ 6] 	jsr cmd_parse_byte			; Get lo byte of word
d3fa : b004             [ 4] 	bcs cmd_word_err
d3fc : 8594             [ 3] 	sta cmd_lo
AS65 Assembler for R6502 [1.42].                                     Page  126
-------------------------------- bank\bank0.s --------------------------------

d3fe : 18               [ 2] 	clc
d3ff : 60               [ 6] 	rts
d400 :                       cmd_word_err
d400 : 38               [ 2] 	sec
d401 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* cmd_parse_next_parm
                             ;* Find next non-white space
                             ;* Input : buflo, bufhi, y offset
                             ;* Output : y = start of first parm byte
                             ;* Regs affected : A
                             ;****************************************
d402 :                       cmd_parse_next_parm
d402 : 88               [ 2] 	dey
d403 :                       cmd_find_parm
d403 : c8               [ 2] 	iny
d404 : b139             [ 5] 	lda (buf_lo),y
d406 : f005             [ 3] 	beq cmd_next_parm_err	; If z then no parms, fin 
d408 : c921             [ 2] 	cmp #' '+1				; Ignore space or less
d40a : f0f7             [ 3] 	beq cmd_find_parm
d40c : 18               [ 2] 	clc						; else ok, C is cleared
d40d :                       cmd_next_parm_err
d40d : 60               [ 6] 	rts
                             
                             	
d40e : 3e00                  msg_ready				db ">\x0"
d410 : 3f0d00                msg_errmsg				db "?\xd\x0"
d413 :                       _mod_sz_cmd_e
                             
                             	include "sound/sound.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  SOUND.S
                             ;*  Sound driver module - routines to access the 
                             ;*  This sound chip was found in a number of popu
                             ;*  in the early to mid 80s, including my first c
                             ;*  the Oric-1, as well as the MSX range.
                             ;*
                             ;************************************************
                             
                             
                             	; ROM code
                             	code
                             
d413 :                       mod_sz_sound_s
                             
                             
                             ;****************************************
                             ;* snd_get_note
                             ;* Get a note from the music scale table
                             ;* Input : Octave in X, note in Y
                             ;*         Octave between 1 and 6
                             ;* Output : A,X = Value hi,lo
                             ;* Regs affected : X
                             ;****************************************
AS65 Assembler for R6502 [1.42].                                     Page  127
-------------------------------- bank\bank0.s --------------------------------

d413 :                       snd_get_note
d413 : 98               [ 2] 	tya
d414 : 0a               [ 2] 	asl a
d415 : a8               [ 2] 	tay
                             	; Get note for octave 1
d416 : b946d4           [ 4] 	lda snd_music_tab,y
d419 : 8532             [ 3] 	sta tmp_alo
d41b : b947d4           [ 4] 	lda snd_music_tab+1,y
                             	
d41e :                       snd_get_note_oct
d41e : ca               [ 2] 	dex
d41f : f006             [ 3] 	beq snd_note_done
                             	; Divide freq by 2 each octave
d421 : 4a               [ 2] 	lsr a
d422 : 6632             [ 5] 	ror tmp_alo
d424 : 4c1ed4           [ 3] 	jmp snd_get_note_oct
d427 :                       snd_note_done
d427 : a632             [ 3] 	ldx tmp_alo
d429 : 60               [ 6] 	rts
                             
                             	
                             ;****************************************
                             ;* init_snd
                             ;* Initialise sound - after cia 1 has been initia
                             ;* Input : None
                             ;* Output : None
                             ;* Regs affected : All
                             ;****************************************
d42a :                       init_snd
d42a : a20f             [ 2] 	ldx #15
d42c :                       init_snd_regs
d42c : bd36d4           [ 4] 	lda snd_init_tab,x
d42f : 206ec0           [ 6] 	jsr snd_set				; Set X to A
d432 : ca               [ 2] 	dex
d433 : 10f7             [ 3] 	bpl init_snd_regs		; 16 regs
                             	
d435 : 60               [ 6] 	rts						; return from sub
                             
                             	; Register array initialisation values
                             	; Assuming 1.34Mhz input clock
d436 :                       snd_init_tab
d436 : 40                    	db 0x40				; R0 = Channel A Tone Low
d437 : 00                    	db 0x00				; R1 = Channel A Tone High
d438 : 00                    	db 0x00				; R2 = Channel B Tone Low
d439 : 01                    	db 0x01				; R3 = Channel B Tone High
d43a : 00                    	db 0x00				; R4 = Channel C Tone Low
d43b : 02                    	db 0x02				; R5 = Channel C Tone High
d43c : 00                    	db 0x00				; R6 = Noise period
d43d : 7e                    	db 0b01111110		; R7 = Control : IOB input, IOA o
d43e : 1f                    	db 0x1f				; R8 = Channel A Vol
d43f : 1f                    	db 0x1f				; R9 = Channel B Vol
d440 : 1f                    	db 0x1f				; R10 = Channel C Vol
d441 : 00                    	db 0x00				; R11 = Envelope Period Low
d442 : 03                    	db 0x03				; R12 = Envelope Period High
d443 : 00                    	db 0b00000000		; R13 = Envelope Shape : 0000
d444 : ff                    	db 0xff				; R14 = IO Port A - KB lines disabled
d445 : 00                    	db 0x00				; R15 = IO Port B ; Initialise to 0 (
                             
d446 :                       snd_music_tab
d446 : f20b                  	dw 3058				; C		0 (Octave 1 3058Hz)
d448 : 460b                  	dw 2886				; C#	1
d44a : a40a                  	dw 2724				; D		2
AS65 Assembler for R6502 [1.42].                                     Page  128
-------------------------------- bank\bank0.s --------------------------------

d44c : 0b0a                  	dw 2571				; D#	3
d44e : 7b09                  	dw 2427				; E		4
d450 : f308                  	dw 2291				; F		5
d452 : 7208                  	dw 2162				; F#	6
d454 : f907                  	dw 2041				; G		7
d456 : 8607                  	dw 1926				; G#	8
d458 : 1a07                  	dw 1818				; A		9
d45a : b406                  	dw 1716				; A#	10
d45c : 5406                  	dw 1620				; B		11
d45e : 0000                  	dw 0				; Null  12
                             
d460 :                       mod_sz_sound_e
                             
d460 :                       mod_sz_bios_e
d460 :                       mod_sz_language_s
                             	include "utils/intmath.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  INTMATH.S
                             ;*  Core module for integer maths supported by df
                             ;*  Now supports signed integers in 2s complement
                             ;*  Uses the intmath registers: num_a, num_b, num
                             ;*  Most inputs are through num_a and num_b, with
                             ;*  num_a
                             ;*  Operations: add, sub, swap, 8 bit mult, mult,
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code
                             
                             ;****************************************
                             ;* Add : A + B result in A
                             ;****************************************
                             ;int_add
                             ;	clc
                             ;	lda num_a
                             ;	adc num_b
                             ;	sta num_a
                             ;	lda num_a+1
                             ;	adc num_b+1
                             ;	sta num_a+1
                             ;	rts
                             	
                             ;****************************************
                             ;* Sub : A - B result in A
                             ;****************************************
                             ;int_sub
                             ;	sec
                             ;	lda num_a
                             ;	sbc num_b
                             ;	sta num_a
                             ;	lda num_a+1
                             ;	sbc num_b+1
                             ;	sta num_a+1
                             ;	rts
AS65 Assembler for R6502 [1.42].                                     Page  129
-------------------------------- bank\bank0.s --------------------------------

                             	
                             ;****************************************
                             ;* Swp : A <-> B 
                             ;****************************************
                             ;int_swp
                             ;	lda num_a
                             ;	ldx num_b
                             ;	sta num_b
                             ;	stx num_a
                             ;	lda num_a+1
                             ;	ldx num_b+1
                             ;	sta num_b+1
                             ;	stx num_a+1
                             ;	rts
                             	
                             ;****************************************
                             ;* Mult : A * B result in A
                             ;* B assumed to be an 8 bit quantity 
                             ;****************************************
d460 :                       int_fast_mult
                             	_cpyZPWord num_a,num_tmp
                             
d468 : a900             [ 2] 	lda #0
d46a : 853d             [ 3] 	sta num_a
d46c : 853e             [ 3] 	sta num_a+1
d46e : a008             [ 2] 	ldy #8
d470 :                       int_fast_mult_cycle
d470 : 4641             [ 5] 	lsr num_b
d472 : 900d             [ 3] 	bcc int_fast_mult_next
d474 : 18               [ 2] 	clc
d475 : a53d             [ 3] 	lda num_a
d477 : 6549             [ 3] 	adc num_tmp
d479 : 853d             [ 3] 	sta num_a
d47b : a53e             [ 3] 	lda num_a+1
d47d : 654a             [ 3] 	adc num_tmp+1
d47f : 853e             [ 3] 	sta num_a+1
d481 :                       int_fast_mult_next
d481 : 0649             [ 5] 	asl num_tmp
d483 : 264a             [ 5] 	rol num_tmp+1
d485 : 88               [ 2] 	dey
d486 : d0e8             [ 3] 	bne int_fast_mult_cycle
d488 : 60               [ 6] 	rts
                             	
                             ;****************************************
                             ;* Mult : A * B result in A
                             ;****************************************
d489 :                       int_mult
                             	_cpyZPWord num_a,num_tmp
                             
d491 : a900             [ 2] 	lda #0
d493 : 853d             [ 3] 	sta num_a
d495 : 853e             [ 3] 	sta num_a+1
d497 : a010             [ 2] 	ldy #16
d499 :                       int_mult_cycle
d499 : 4642             [ 5] 	lsr num_b+1
d49b : 6641             [ 5] 	ror num_b
d49d : 900d             [ 3] 	bcc int_mult_next
d49f : 18               [ 2] 	clc
d4a0 : a53d             [ 3] 	lda num_a
d4a2 : 6549             [ 3] 	adc num_tmp
d4a4 : 853d             [ 3] 	sta num_a
d4a6 : a53e             [ 3] 	lda num_a+1
AS65 Assembler for R6502 [1.42].                                     Page  130
-------------------------------- bank\bank0.s --------------------------------

d4a8 : 654a             [ 3] 	adc num_tmp+1
d4aa : 853e             [ 3] 	sta num_a+1
d4ac :                       int_mult_next
d4ac : 0649             [ 5] 	asl num_tmp
d4ae : 264a             [ 5] 	rol num_tmp+1
d4b0 : 88               [ 2] 	dey
d4b1 : d0e6             [ 3] 	bne int_mult_cycle
d4b3 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Div : A / B result in A, remainder X
                             ;****************************************
d4b4 :                       int_div
                             	; adjust signs
d4b4 : a900             [ 2] 	lda #0
d4b6 : 8549             [ 3] 	sta num_tmp				; Assume all +ve
d4b8 : a53e             [ 3] 	lda num_a+1				; Check A hi
d4ba : 100f             [ 3] 	bpl int_div_skip_negA
d4bc : e649             [ 5] 	inc num_tmp				; Record sign flip
d4be : 38               [ 2] 	sec						; 2's complement A
d4bf : a900             [ 2] 	lda #0					; by 0-A
d4c1 : e53d             [ 3] 	sbc num_a				; A is now +ve
d4c3 : 853d             [ 3] 	sta num_a
d4c5 : a900             [ 2] 	lda #0
d4c7 : e53e             [ 3] 	sbc num_a+1
d4c9 : 853e             [ 3] 	sta num_a+1	
d4cb :                       int_div_skip_negA
d4cb : a542             [ 3] 	lda num_b+1				; Check B hi
d4cd : 100f             [ 3] 	bpl int_div_skip_negB
d4cf : e649             [ 5] 	inc num_tmp				; Record sign flip
d4d1 : 38               [ 2] 	sec						; 2's complement B
d4d2 : a900             [ 2] 	lda #0					; by 0-B
d4d4 : e541             [ 3] 	sbc num_b				; B is now +ve
d4d6 : 8541             [ 3] 	sta num_b
d4d8 : a900             [ 2] 	lda #0
d4da : e542             [ 3] 	sbc num_b+1
d4dc : 8542             [ 3] 	sta num_b+1
d4de :                       int_div_skip_negB			; num_tmp bit 0=1 for result 
                             	; x is the remainder
d4de : a900             [ 2] 	lda #0
d4e0 : 8545             [ 3] 	sta num_x
d4e2 : 8546             [ 3] 	sta num_x+1
                             	; 16 bit division
d4e4 : a010             [ 2] 	ldy #16
d4e6 :                       int_div_cycle
                             	; shift a left 1 bit
d4e6 : 063d             [ 5] 	asl num_a
d4e8 : 263e             [ 5] 	rol num_a+1
                             	; shift in to remainder
d4ea : 2645             [ 5] 	rol num_x
d4ec : 2646             [ 5] 	rol num_x+1
                             	; try and subtract b from remainder
d4ee : 38               [ 2] 	sec
d4ef : a545             [ 3] 	lda num_x
d4f1 : e541             [ 3] 	sbc num_b
d4f3 : aa               [ 2] 	tax
d4f4 : a546             [ 3] 	lda num_x+1
d4f6 : e542             [ 3] 	sbc num_b+1
d4f8 : 9006             [ 4] 	bcc int_div_skip
                             	; so b did fit in to remainder, save it
d4fa : 8645             [ 3] 	stx num_x
d4fc : 8546             [ 3] 	sta num_x+1
AS65 Assembler for R6502 [1.42].                                     Page  131
-------------------------------- bank\bank0.s --------------------------------

d4fe : e63d             [ 5] 	inc num_a
d500 :                       int_div_skip
                             	; carry on for 16 bits
d500 : 88               [ 2] 	dey
d501 : d0e3             [ 4] 	bne int_div_cycle
                             	; result in a, remainder in x
                             	; check num_tmp bit 0
d503 : a549             [ 3] 	lda num_tmp
d505 : 2901             [ 2] 	and #1
d507 : f00d             [ 3] 	beq int_div_noflip
d509 : 38               [ 2] 	sec						; 2's complement A
d50a : a900             [ 2] 	lda #0					; by 0-A
d50c : e53d             [ 3] 	sbc num_a				; A is now +ve
d50e : 853d             [ 3] 	sta num_a
d510 : a900             [ 2] 	lda #0
d512 : e53e             [ 3] 	sbc num_a+1
d514 : 853e             [ 3] 	sta num_a+1	
d516 :                       int_div_noflip
d516 : 60               [ 6] 	rts
                             	
                             
                             	include "dflat/dflat.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  DFLAT.S
                             ;*  This is the main controller code file for dfl
                             ;*  This file includes all the required dflat sou
                             ;*  needed:
                             ;*  - error.s is the error handling module
                             ;*  - var.s is the variable handling module
                             ;*  - tokenise.s is the tokenisation module
                             ;*  - progedit.s is the program editing module
                             ;*  - runtime.s is the runtime module
                             ;*  - stack.s is the stack handling module
                             ;*  The above modules include further source file
                             ;*  needed.
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code
                             
d517 :                       mod_sz_dflat_s
                             
                             ;	include "dflat/error.s"  ** included in the mai
                             	include "dflat/var.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  VAR.S
                             ;*  This module handles all the variable manageme
AS65 Assembler for R6502 [1.42].                                     Page  132
-------------------------------- bank\bank0.s --------------------------------

                             ;*  When a new variable is detected during tokeni
                             ;*  is added to the variable tables.  Any subsequ
                             ;*  that variable is tokenised as an index in to 
                             ;*  table.  There are two variable tables:
                             ;*  Variable name table (VNT) keeps track of vari
                             ;*  Variable value table (VVT) maintains variable
                             ;*  including type, dimension (if array) and of c
                             ;*  actual values.  For an array, the value is a 
                             ;*  memory grabbed using the 'malloc' function (s
                             ;*  This approach to variable managemet is direct
                             ;*  Atari 8 bit.  The disadvantage is that during
                             ;*  session you may end up having a much larger v
                             ;*  table than you need.  Why?  Well because say 
                             ;*  a as a new variable, but then later change it
                             ;*  In this case a remains in the variable tables
                             ;*  only ever adds to the table!  However it is e
                             ;*  solved - when you save and then reload from n
                             ;*  program, the variable table is built up as th
                             ;*  is loaded.
                             ;*  The VNT grows DOWN from the top of free memor
                             ;*  the VVT growing UP from just below the VNT.
                             ;*	This means that the VVT for a variable will al
                             ;*	found in a fixed place in the VVT table and me
                             ;*	For the VNT (names) it grows from vvstart at l
                             ;*
                             ;************************************************
                             
                             
                             	; ROM code
                             	code  
                             
d517 :                       mod_sz_var_s
                             
                             
                             ;****************************************
                             ;* Find a variable
                             ;* CC if found, A has index
                             ;****************************************
d517 :                       df_var_find
                             	; start at the beginning of the vnt table
                             	; vars are stored in reverse order
                             	_cpyZPWord df_vntstrt,df_tmpptrb
                             
                             	; start at end of VVT
                             	_cpyZPWord df_vvtend,df_tmpptra
                             
d527 :                       df_var_match_vnt
                             	; If reached top of VVT then not found
d527 : a5a1             [ 3] 	lda df_tmpptra
d529 : c56d             [ 3] 	cmp df_vvtstrt
d52b : d006             [ 3] 	bne df_var_match_vnt_do
d52d : a5a2             [ 3] 	lda df_tmpptra+1
d52f : c56e             [ 3] 	cmp df_vvtstrt+1
d531 : f042             [ 3] 	beq df_var_find_no_vnt
d533 :                       df_var_match_vnt_do
                             	; match each char in buffer with vnt
d533 : a47c             [ 3] 	ldy df_linoff
d535 : a200             [ 2] 	ldx #0
d537 :                       df_var_match_vnt_sym
d537 : b90004           [ 4] 	lda df_linbuff,y
d53a : c1a3             [ 6] 	cmp (df_tmpptrb,x)
d53c : d017             [ 3] 	bne df_var_vnt_sym_nomatch
AS65 Assembler for R6502 [1.42].                                     Page  133
-------------------------------- bank\bank0.s --------------------------------

                             	; if single char match then increment
                             	; source and search
d53e : c8               [ 2] 	iny
                             	_incZPWord df_tmpptrb
                             
                             	; if more chars in vnt entry then continue
d545 : a1a3             [ 6] 	lda (df_tmpptrb,x)
d547 : d0ee             [ 3] 	bne df_var_match_vnt_sym
                             	; if no more chars in vnt entry but
                             	; but chars in buffer then try next vnt
d549 : b90004           [ 4] 	lda df_linbuff,y
                             	; check for valid alpha-numeric
d54c : 20f8d6           [ 6] 	jsr df_tk_isalphanum
                             	; if there is a valid alpha-num then no match
d54f : b004             [ 3] 	bcs df_var_vnt_sym_nomatch
                             	; else check type
d551 :                       df_var_check_type
                             	; if not alpha-num then check for type
                             	; string or int postfix didn't match with VNT
                             ;	cmp #'%'
                             ;	beq df_var_vnt_sym_nomatch
d551 : c924             [ 2] 	cmp #'$'
                             	; ok, all good got a match
d553 : d025             [ 3] 	bne df_var_find_true
d555 :                       df_var_vnt_sym_nomatch
                             	; find the zero terminator
d555 : a1a3             [ 6] 	lda (df_tmpptrb,x)
d557 : f009             [ 3] 	beq	df_var_vnt_entry_end
                             	_incZPWord df_tmpptrb
                             
d55f : 4c55d5           [ 3] 	jmp df_var_vnt_sym_nomatch
d562 :                       df_var_vnt_entry_end
                             	; skip over zero terminator
                             	_incZPWord df_tmpptrb
                             
                             	; update vvt address pointer
d568 : 18               [ 2] 	clc
d569 : a5a1             [ 3] 	lda df_tmpptra
d56b : 6908             [ 2] 	adc #8
d56d : 85a1             [ 3] 	sta df_tmpptra
                             	_bcc 2
                             
d571 : e6a2             [ 5] 	inc df_tmpptra+1
d573 : d0b2             [ 3] 	bne df_var_match_vnt		; Always - high byte is no
                             
                             	; if at end of vnt then no matches found
d575 :                       df_var_find_no_vnt
d575 : a900             [ 2] 	lda #0
d577 : aa               [ 2] 	tax
d578 : 38               [ 2] 	sec
d579 : 60               [ 6] 	rts
                             
d57a :                       df_var_find_true
                             	; Get slot address into x,a
d57a : a6a1             [ 3] 	ldx df_tmpptra
d57c : a5a2             [ 3] 	lda df_tmpptra+1
                             	
                             	; Consume characters found in source
d57e : 847c             [ 3] 	sty df_linoff
d580 : 18               [ 2] 	clc
d581 : 60               [ 6] 	rts
                             
AS65 Assembler for R6502 [1.42].                                     Page  134
-------------------------------- bank\bank0.s --------------------------------

                             	
                             ;****************************************
                             ;* Insert a variable name in to vnt
                             ;* X = number of bytes to make room
                             ;* Space allocated is;
                             ;*	8 bytes for the new VVT entry
                             ;*  X bytes for the new VNT entry
                             ;* df_vntstrt is new var name entry
                             ;* df_vvtend is new vvt entry
                             ;****************************************
d582 :                       df_var_insert_space
                             	; *** REMEMBER TO DO A SPACE CHECK EVENTUALLY! *
                             
                             	; adjust down the VNT start by VVT size (for ext
                             	; put it in tmpptrb
d582 : 38               [ 2] 	sec
d583 : a569             [ 3] 	lda df_vntstrt
d585 : e908             [ 2] 	sbc #DFVVT_SZ
d587 : 8569             [ 3] 	sta df_vntstrt
d589 : a56a             [ 3] 	lda df_vntstrt+1
d58b : e900             [ 2] 	sbc #0
d58d : 856a             [ 3] 	sta df_vntstrt+1
                             	
                             	; adjust VNT end by VVT size (for extra VVT entr
                             	; and put it in tmpptrc
d58f : 38               [ 2] 	sec
d590 : a56b             [ 3] 	lda df_vntend
d592 : e908             [ 2] 	sbc #DFVVT_SZ
d594 : 856b             [ 3] 	sta df_vntend
d596 : a56c             [ 3] 	lda df_vntend+1
d598 : e900             [ 2] 	sbc #0
d59a : 856c             [ 3] 	sta df_vntend+1
                             
                             	; Set copy point to new start of VNT
                             	_cpyZPWord df_vntstrt,df_tmpptra
                             
                             
                             	; Now move all bytes from old VNT (higher up) to
d5a4 :                       df_var_move_byte
                             	; When pointer = vntend then done
d5a4 : a5a1             [ 3] 	lda df_tmpptra
d5a6 : c56b             [ 3] 	cmp df_vntend
d5a8 : d006             [ 3] 	bne df_var_move_byte_do
d5aa : a5a2             [ 3] 	lda df_tmpptra+1
d5ac : c56c             [ 3] 	cmp df_vntend+1
d5ae : f011             [ 3] 	beq df_var_move_byte_fin
d5b0 :                       df_var_move_byte_do
                             	; First the source byte VVT size higher in memor
d5b0 : a008             [ 2] 	ldy #DFVVT_SZ
d5b2 : b1a1             [ 5] 	lda (df_tmpptra),y
                             	; And copy to new position lower in memory
d5b4 : a000             [ 2] 	ldy #0
d5b6 : 91a1             [ 5] 	sta (df_tmpptra),y
                             	; Increment memory pointer
                             	_incZPWord df_tmpptra
                             
d5be : 4ca4d5           [ 3] 	jmp df_var_move_byte		; Always as C is not touch
d5c1 :                       df_var_move_byte_fin
                             	
                             	; Now subtract X bytes from VNT start to accommo
d5c1 : 8638             [ 3] 	stx tmp_d
d5c3 : 38               [ 2] 	sec
AS65 Assembler for R6502 [1.42].                                     Page  135
-------------------------------- bank\bank0.s --------------------------------

d5c4 : a569             [ 3] 	lda df_vntstrt
d5c6 : e538             [ 3] 	sbc tmp_d
d5c8 : 8569             [ 3] 	sta df_vntstrt
d5ca : a56a             [ 3] 	lda df_vntstrt+1
d5cc : e900             [ 2] 	sbc #0
d5ce : 856a             [ 3] 	sta df_vntstrt+1
                             
                             	; VVT end is the same as VNT end
                             	_cpyZPWord df_vntend,df_vvtend
                             
                             
                             	; Copy done increment variable count
d5d8 : e671             [ 5] 	inc df_varcnt
d5da : 18               [ 2] 	clc
d5db : 60               [ 6] 	rts
                             	
                             	
                             ;****************************************
                             ;* Analyse variable name
                             ;* Return type in A
                             ;* NOT C = It is a variable
                             ;* C = It is not a variable
                             ;* X = Length including pre-fixes
                             ;* Y = Offset to next char after var name
                             ;****************************************
d5dc :                       df_var_analyse
                             	; Default type is INT
d5dc : a901             [ 2] 	lda #DFVVT_INT
d5de : 85a1             [ 3] 	sta df_tmpptra
                             	
                             	; start at the current buffer position
d5e0 : a47c             [ 3] 	ldy df_linoff
                             	
                             	; check for PROC prefix
d5e2 : b90004           [ 4] 	lda df_linbuff,y
d5e5 : c95f             [ 2] 	cmp #'_'
                             	; if it is not proc then get the name
d5e7 : d005             [ 3] 	bne df_var_not_proc
                             	; else set type to PROC
d5e9 : a940             [ 2] 	lda #DFVVT_PROC
d5eb : 85a1             [ 3] 	sta df_tmpptra
                             	; skip over prefix
d5ed : c8               [ 2] 	iny
d5ee :                       df_var_not_proc
                             	; found the actual number of alpha nums
d5ee : a2ff             [ 2] 	ldx #0xff
                             	; go back on pos on index as loop always does in
d5f0 : 88               [ 2] 	dey
d5f1 :                       df_var_type_countlen
                             	; count alpha nums
d5f1 : c8               [ 2] 	iny
d5f2 : e8               [ 2] 	inx
d5f3 : b90004           [ 4] 	lda df_linbuff,y
                             	; first char has to be alpha, rest can be alpha-
d5f6 : e000             [ 2] 	cpx #0
d5f8 : d007             [ 4] 	bne df_var_type_countlen_alphanum
d5fa : 20ebd6           [ 6] 	jsr df_tk_isalpha
d5fd : b0f2             [ 3] 	bcs df_var_type_countlen
d5ff : 9005             [ 4] 	bcc df_var_type_countlen_done
d601 :                       df_var_type_countlen_alphanum
d601 : 20f8d6           [ 6] 	jsr df_tk_isalphanum
d604 : b0eb             [ 4] 	bcs df_var_type_countlen
AS65 Assembler for R6502 [1.42].                                     Page  136
-------------------------------- bank\bank0.s --------------------------------

d606 :                       df_var_type_countlen_done
d606 : e000             [ 2] 	cpx #0
d608 : d00a             [ 3] 	bne df_var_analyse_chk_post
                             	; if zero alphanums error but not fatal
d60a :                       df_var_analyse_err
                             	; If already prefix of PROC then fatal error
d60a : a5a1             [ 3] 	lda df_tmpptra
d60c : c940             [ 2] 	cmp #DFVVT_PROC
d60e : f002             [ 3] 	beq df_var_analyse_fatal_err
d610 : 38               [ 2] 	sec
d611 : 60               [ 6] 	rts
d612 :                       df_var_analyse_fatal_err
                             	SWBRK DFERR_SYNTAX
                             
d614 :                       df_var_analyse_chk_post
                             	; first see if the char is $
                             	; but cannot already have PROC prefix
                             ;	cmp #'%'
                             ;	bne df_var_analyse_chk_dollar
                             ;	ldx df_tmpptra
                             ;	cpx #DFVVT_PROC
                             ;	beq df_var_analyse_fatal_err
                             	; Set to INT type although it is the default alr
                             ;	lda #DFVVT_INT
                             ;	sta df_tmpptra
                             	; advance the buffer index
                             ;	iny
                             ;	bne df_var_analyse_chk_arry
d614 :                       df_var_analyse_chk_dollar
                             	; now see if the char is $
                             	; but cannot already have PROC prefix
d614 : c924             [ 2] 	cmp #'$'
d616 : d00b             [ 3] 	bne df_var_analyse_chk_arry
d618 : a6a1             [ 3] 	ldx df_tmpptra
d61a : e040             [ 2] 	cpx #DFVVT_PROC
d61c : f0f4             [ 3] 	beq df_var_analyse_fatal_err
                             	; Set to STRING type
d61e : a904             [ 2] 	lda #DFVVT_STR
d620 : 85a1             [ 3] 	sta df_tmpptra
                             	; advance the buffer index
d622 : c8               [ 2] 	iny
d623 :                       df_var_analyse_chk_arry
                             	; Check for array type vs PROC
d623 : b90004           [ 4] 	lda df_linbuff,y
d626 : c95b             [ 2] 	cmp #'['
d628 : d00a             [ 3] 	bne df_var_not_arry
                             	; array and proc type not compatible
d62a : a5a1             [ 3] 	lda df_tmpptra
d62c : c940             [ 2] 	cmp #DFVVT_PROC
d62e : f0e2             [ 3] 	beq df_var_analyse_fatal_err
d630 : 0980             [ 2] 	ora #DFVVT_ARRY
d632 : 85a1             [ 3] 	sta df_tmpptra
d634 :                       df_var_not_arry
                             	; Ok got everything
                             	; calculate length from y
                             	; y is next char after var name
d634 : 98               [ 2] 	tya
d635 : 38               [ 2] 	sec
d636 : e57c             [ 3] 	sbc df_linoff			; where we started
                             	; put len in X
d638 : aa               [ 2] 	tax
                             	; put type in A
AS65 Assembler for R6502 [1.42].                                     Page  137
-------------------------------- bank\bank0.s --------------------------------

d639 : a5a1             [ 3] 	lda df_tmpptra
d63b : 18               [ 2] 	clc
d63c : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Find or create a variable
                             ;* If found then type needs to match mask
                             ;* Not a fatal error because could be part
                             ;* of a trial of different parsing options
                             ;****************************************
d63d :                       df_var_findcreate
                             	; save mask
d63d : 48               [ 3] 	pha
d63e : 2017d5           [ 6] 	jsr df_var_find
d641 : b013             [ 3] 	bcs df_var_findcreate_create
                             	; restore mask to check for 0 then push
d643 : 68               [ 4] 	pla
d644 : 48               [ 3] 	pha
                             	; don't check mask if zero
d645 : f008             [ 3] 	beq df_var_findcreate_found
                             	; restore mask
d647 : 68               [ 4] 	pla
d648 : a000             [ 2] 	ldy #DFVVT_TYPE
d64a : 31a1             [ 5] 	and (df_tmpptra),y
                             	; but if mask is non zero then this must be non 
d64c : f019             [ 3] 	beq df_var_findcreate_err
d64e : 48               [ 3] 	pha		; Dummy push to match the pla
d64f :                       df_var_findcreate_found
                             	; discard mask
d64f : 68               [ 4] 	pla	
                             	; put slot address in x,a
d650 : a6a1             [ 3] 	ldx df_tmpptra
d652 : a5a2             [ 3] 	lda df_tmpptra+1
d654 : 18               [ 2] 	clc
d655 : 60               [ 6] 	rts
                             	
                             	;* If no existing variable found, add one to VNT
d656 :                       df_var_findcreate_create
                             	; find type (A) and length (X)
d656 : 20dcd5           [ 6] 	jsr df_var_analyse
                             	; keep A temporarily
d659 : 85a1             [ 3] 	sta df_tmpptra
                             	; if not a variable then return with C=1
d65b : b009             [ 3] 	bcs df_var_findcreate_errp
                             	; check if mask needs to be applied
d65d : 68               [ 4] 	pla
d65e : f009             [ 3] 	beq df_var_analyse_ok
                             	; else mask and check
d660 : 25a1             [ 3] 	and df_tmpptra
                             	; mask match is ok
d662 : d005             [ 3] 	bne df_var_analyse_ok
                             	; else return not found
d664 : f001             [ 3] 	beq df_var_findcreate_err
d666 :                       df_var_findcreate_errp
d666 : 68               [ 4] 	pla
d667 :                       df_var_findcreate_err
d667 : 38               [ 2] 	sec
d668 : 60               [ 6] 	rts
                             
d669 :                       df_var_analyse_ok
                             	; extra space for zero terminator
d669 : e8               [ 2] 	inx
AS65 Assembler for R6502 [1.42].                                     Page  138
-------------------------------- bank\bank0.s --------------------------------

                             	; save data in reverse order to when needed
                             	; by the initialise section x,a (var name sz, ty
                             	; insert space of X bytes
d66a : a5a1             [ 3] 	lda df_tmpptra
d66c : 48               [ 3] 	pha
d66d : 8a               [ 2] 	txa
d66e : 48               [ 3] 	pha
                             	
d66f : 2082d5           [ 6] 	jsr df_var_insert_space
d672 : 9002             [ 3] 	bcc df_var_initialise_var
                             	; error inserting space
                             	SWBRK DFERR_OK
                             
                             	
d676 :                       df_var_initialise_var
d676 : 68               [ 4] 	pla
d677 : 85a5             [ 3] 	sta df_tmpptrc				; var name size + 1
                             
d679 : 68               [ 4] 	pla							; type
d67a : a000             [ 2] 	ldy #DFVVT_TYPE
d67c : 916f             [ 5] 	sta (df_vvtend),y			; put type in vvt slot
d67e : a900             [ 2] 	lda #0						; zero the rest
d680 : a007             [ 2] 	ldy #7
d682 :                       df_var_zero_vnt
d682 : 916f             [ 5] 	sta (df_vvtend),y
d684 : 88               [ 2] 	dey
d685 : d0fb             [ 3] 	bne df_var_zero_vnt			; Don't zero out the type
                             
d687 : c6a5             [ 5] 	dec df_tmpptrc				; 1 less to copy variable name
                             
d689 : a67c             [ 3] 	ldx df_linoff				; Start at var name beginning, 
                             	; copy variable name to vnt slot
d68b :                       df_var_findcreate_copy
d68b : bd0004           [ 4] 	lda df_linbuff,x
d68e : 9169             [ 5] 	sta (df_vntstrt),y
d690 : e8               [ 2] 	inx
d691 : c8               [ 2] 	iny
d692 : c6a5             [ 5] 	dec df_tmpptrc
d694 : d0f5             [ 3] 	bne df_var_findcreate_copy
                             	; put in zero terminator
d696 : a900             [ 2] 	lda #0
d698 : 9169             [ 5] 	sta (df_vntstrt),y
                             
d69a : 867c             [ 3] 	stx df_linoff				; Update line pointer
                             
                             	; Return address of slot in X,A
d69c : a66f             [ 3] 	ldx df_vvtend
d69e : a570             [ 3] 	lda df_vvtend+1
                             	
d6a0 : 18               [ 2] 	clc
d6a1 : 60               [ 6] 	rts
                             	
d6a2 :                       mod_sz_var_e
                             
                             	include "dflat/tokenise.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
AS65 Assembler for R6502 [1.42].                                     Page  139
-------------------------------- bank\bank0.s --------------------------------

                             ;*
                             ;*  TOKENISE.S
                             ;*  Controlling module for tokenisation.  Basical
                             ;*  module is given a raw input buffer, which it 
                             ;*  attempt to tokenise fully.  Any syntax errors
                             ;*  thrown at the first point of detection.  If a
                             ;*  well, the parsed input will be in a tokenised
                             ;*  which can be executed in immediate mode or sa
                             ;*  line number order to memory.
                             ;*  dflat syntax is very simple - every statement
                             ;*  with a keyword.  The only exception is assign
                             ;*  procedure invocation - but even these scenari
                             ;*  tokenised so during runtime we just execute t
                             ;*  The raw buffer is consumed one byte at a time
                             ;*  tokenised buffer is written one byte at a tim
                             ;*  syntax means there is no need to undo reads o
                             ;*  or tokenised buffer.  The only refinement is 
                             ;*  allowed to peek a character in the raw buffer
                             ;*  consuming it.
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code
                             
d6a2 :                       mod_sz_tokenise_s
                             
                             
                             ;****************************************
                             ;* df_tk_peek_buf
                             ;* Return next char in A but no change to pointer
                             ;****************************************
d6a2 :                       df_tk_peek_buf
d6a2 : a47c             [ 3] 	ldy df_linoff
d6a4 : b90004           [ 4] 	lda df_linbuff,y
d6a7 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* df_tk_get_buf
                             ;* Return next char in A and inc pointer
                             ;* Don't advance if null char found and Z=1
                             ;****************************************
d6a8 :                       df_tk_get_buf
d6a8 : a47c             [ 3] 	ldy df_linoff
d6aa : b90004           [ 4] 	lda df_linbuff,y
d6ad : f003             [ 3] 	beq df_tk_get_buf_null
d6af : c8               [ 2] 	iny
d6b0 : 847c             [ 3] 	sty df_linoff
d6b2 :                       df_tk_get_buf_null
d6b2 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* df_tk_put_tok
                             ;* Put A in token buffer and inc pointer
                             ;* C=Clear on exit
                             ;****************************************
d6b3 :                       df_tk_put_tok
d6b3 : a47d             [ 3] 	ldy df_tokoff
d6b5 : 998004           [ 5] 	sta df_tokbuff,y
d6b8 : c8               [ 2] 	iny
d6b9 : 3004             [ 3] 	bmi df_tk_put_overflow
d6bb : 847d             [ 3] 	sty df_tokoff
AS65 Assembler for R6502 [1.42].                                     Page  140
-------------------------------- bank\bank0.s --------------------------------

d6bd : 18               [ 2] 	clc
d6be : 60               [ 6] 	rts
d6bf :                       df_tk_put_overflow
                             	SWBRK DFERR_STRLONG
                             
                             
                             ;****************************************
                             ;* df_tk_isdigit
                             ;* Check char in A for number 0-9
                             ;* Return: CC = False, CS = True
                             ;****************************************
d6c1 :                       df_tk_isdigit
d6c1 : c93a             [ 2] 	cmp #'9'+1
d6c3 : b005             [ 3] 	bcs df_tk_isdigit_false
d6c5 : c930             [ 2] 	cmp #'0'
d6c7 : 9001             [ 3] 	bcc df_tk_isdigit_false
d6c9 : 60               [ 6] 	rts						; C must be 1
d6ca :                       df_tk_isdigit_false
d6ca : 18               [ 2] 	clc
d6cb : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* df_tk_isbin
                             ;* Check char in A for binary digit
                             ;* Return: CC = False, CS = True
                             ;****************************************
d6cc :                       df_tk_isbin
d6cc : c930             [ 2] 	cmp #'0'
d6ce : f005             [ 3] 	beq df_tk_isbin_true	; C=1
d6d0 : c931             [ 2] 	cmp #'1'
d6d2 : f001             [ 3] 	beq df_tk_isbin_true	; C=1
d6d4 : 18               [ 2] 	clc
d6d5 :                       df_tk_isbin_true
d6d5 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* df_tk_ishex
                             ;* Check char in A for number 0-9, A-F, a-f
                             ;* Return: CC = False, CS = True
                             ;****************************************
d6d6 :                       df_tk_ishex
d6d6 : 48               [ 3] 	pha
d6d7 : 20c1d6           [ 6] 	jsr df_tk_isdigit
d6da : b00a             [ 3] 	bcs df_tk_ishex_truep
d6dc : 0920             [ 2] 	ora #0x20
d6de : c967             [ 2] 	cmp #'f'+1
d6e0 : b006             [ 3] 	bcs df_tk_ishex_false
d6e2 : c961             [ 2] 	cmp #'a'
d6e4 : 9002             [ 3] 	bcc df_tk_ishex_false
                             	; C must be 1 here
d6e6 :                       df_tk_ishex_truep
d6e6 : 68               [ 4] 	pla
d6e7 : 60               [ 6] 	rts
d6e8 :                       df_tk_ishex_false
d6e8 :                       df_tk_isalpha_false
d6e8 : 18               [ 2] 	clc
d6e9 : 68               [ 4] 	pla
d6ea : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* df_tk_isalpha
                             ;* Check next char in A alpha a-z, A-Z
AS65 Assembler for R6502 [1.42].                                     Page  141
-------------------------------- bank\bank0.s --------------------------------

                             ;* Return: CC = False, CS = True
                             ;****************************************
d6eb :                       df_tk_isalpha
d6eb : 48               [ 3] 	pha
d6ec : 0920             [ 2] 	ora #0x20					; Convert to lower case for checki
d6ee : c97b             [ 2] 	cmp #'z'+1
d6f0 : b0f6             [ 3] 	bcs df_tk_isalpha_false
d6f2 : c961             [ 2] 	cmp #'a'
d6f4 : 90f2             [ 3] 	bcc df_tk_isalpha_false
                             	; C must be 1 here
d6f6 : 68               [ 4] 	pla
d6f7 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* df_tk_isalphanum
                             ;* Check next char A for a-z,A-Z,0-9
                             ;* Return: CC = False, CS = True
                             ;****************************************
d6f8 :                       df_tk_isalphanum
d6f8 : 20ebd6           [ 6] 	jsr df_tk_isalpha
d6fb : 90c4             [ 3] 	bcc df_tk_isdigit
d6fd :                       df_tk_rts1				; branch to this RTS where possible
d6fd : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* df_tk_isproc
                             ;* Check next char A for _
                             ;* Return: CC = False, CS = True
                             ;****************************************
d6fe :                       df_tk_isproc
d6fe : c95f             [ 2] 	cmp #'_'
d700 : f001             [ 3] 	beq df_tk_isproc_true	; C=1
d702 : 18               [ 2] 	clc
d703 :                       df_tk_isproc_true
d703 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* df_tk_skip_ws
                             ;* Skip ws in linbuff
                             ;* Return: linoff updated to next non-ws, A = cha
                             ;****************************************
d704 :                       df_tk_skip_ws
d704 :                       df_tk_ws_loop1
d704 : 20a2d6           [ 6] 	jsr df_tk_peek_buf
d707 : 2013d7           [ 6] 	jsr df_tk_isws
d70a : 90f1             [ 4] 	bcc df_tk_rts1
d70c : e67c             [ 5] 	inc df_linoff
d70e : 20b3d6           [ 6] 	jsr df_tk_put_tok
d711 : 90f1             [ 3] 	bcc df_tk_ws_loop1		; Always as put_tok clears C
                             
                             ;****************************************
                             ;* df_tk_skip_ws
                             ;* Skip ws in linbuff
                             ;* Return: linoff updated to next non-ws, A = cha
                             ;****************************************
                             ;df_tk_strip_ws
                             ;df_tk_sws_loop1
                             ;	jsr df_tk_peek_buf
                             ;	jsr df_tk_isws
                             ;	bcc df_tk_rts1
                             ;	inc df_linoff
                             ;	bcs df_tk_sws_loop1		; Always as C is not touch
AS65 Assembler for R6502 [1.42].                                     Page  142
-------------------------------- bank\bank0.s --------------------------------

                             
                             ;****************************************
                             ;* df_tk_isws
                             ;* Check char is ws (only space is counted)
                             ;* Return: CC = False, CS = True
                             ;****************************************
d713 :                       df_tk_isws
d713 : c920             [ 2] 	cmp #' '
d715 : d001             [ 3] 	bne df_tk_isws_false
                             	; C must be 1 here
d717 : 60               [ 6] 	rts
d718 :                       df_tk_isws_false
d718 :                       df_tk_expectok
d718 : 18               [ 2] 	clc
d719 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Find a character expected ignoring ws
                             ;* Input A = expected char
                             ;* CC = found, CS = Error
                             ;****************************************
d71a :                       df_tk_expect
d71a : 48               [ 3] 	pha
                             	; skip ws
d71b : 2004d7           [ 6] 	jsr df_tk_skip_ws
                             	; peek the buffer
d71e : 68               [ 4] 	pla
d71f : a47c             [ 3] 	ldy df_linoff
d721 : d90004           [ 4] 	cmp df_linbuff,y
                             	; if expected char then ok
d724 : f0f2             [ 3] 	beq df_tk_expectok
                             	; else error
d726 :                       df_tk_num_err
d726 :                       df_tk_char_err
d726 : 38               [ 2] 	sec
d727 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Find a character expected ignoring ws
                             ;* Input A = expected char
                             ;* Tokenises the character as well
                             ;* CC = found, CS = Error
                             ;****************************************
d728 :                       df_tk_expect_tok
d728 : 201ad7           [ 6] 	jsr df_tk_expect
d72b : b0d0             [ 4] 	bcs df_tk_rts1
d72d : 20a8d6           [ 6] 	jsr df_tk_get_buf
d730 : 4cb3d6           [ 3] 	jmp df_tk_put_tok
                             
                             ;****************************************
                             ;* Find a character expected ignoring ws
                             ;* Input A = expected char
                             ;* Tokenises the character as well
                             ;* FATAL IF NOT FOUND
                             ;****************************************
d733 :                       df_tk_expect_tok_err
d733 : 2028d7           [ 6] 	jsr df_tk_expect_tok
d736 : 90c5             [ 4] 	bcc df_tk_rts1
d738 :                       df_tk_expect_tok_fatal
                             	SWBRK DFERR_SYNTAX
                             
                             
AS65 Assembler for R6502 [1.42].                                     Page  143
-------------------------------- bank\bank0.s --------------------------------

                             ;****************************************
                             ;* Tokenise a constant number
                             ;****************************************
d73a :                       df_tk_num
                             	; X,A = address, linbuff must be on page boundar
d73a : 18               [ 2] 	clc
d73b : a900             [ 2] 	lda #lo(df_linbuff)
d73d : 657c             [ 3] 	adc df_linoff
d73f : aa               [ 2] 	tax
d740 : a904             [ 2] 	lda #hi(df_linbuff)
d742 : 6900             [ 2] 	adc #0
d744 : a000             [ 2] 	ldy #0				; any numeric format
d746 : 20e1c1           [ 6] 	jsr con_n_to_a
d749 : b0db             [ 3] 	bcs df_tk_num_err
                             	; A = format
                             	; X = how many digits processed
                             	; Jump over that many chars
d74b : a8               [ 2] 	tay
d74c : 18               [ 2] 	clc
d74d : 8a               [ 2] 	txa
d74e : 657c             [ 3] 	adc df_linoff
d750 : 857c             [ 3] 	sta df_linoff
                             	; Now tokenise an integer (always 2 bytes, but t
d752 : 98               [ 2] 	tya
d753 : c901             [ 2] 	cmp #NUM_DEC
d755 : d004             [ 3] 	bne df_tk_num_hexbin
d757 : a909             [ 2] 	lda #DFTK_INTDEC	; decimal always an int
d759 : d016             [ 3] 	bne df_tk_num_put
d75b :                       df_tk_num_hexbin
d75b : c902             [ 2] 	cmp #NUM_HEX
d75d : d00a             [ 3] 	bne df_tk_num_bin
d75f : a906             [ 2] 	lda #DFTK_BYTHEX	; Assume BYT
d761 : e005             [ 2] 	cpx #5				; If >4 chars then INT
d763 : 900c             [ 3] 	bcc df_tk_num_put
d765 : a90a             [ 2] 	lda #DFTK_INTHEX
d767 : d008             [ 3] 	bne df_tk_num_put
d769 :                       df_tk_num_bin
d769 : a907             [ 2] 	lda #DFTK_BYTBIN	; Assume BYT
d76b : e00b             [ 2] 	cpx #11				; If >10 chars then INT
d76d : 9002             [ 3] 	bcc df_tk_num_put
d76f : a90b             [ 2] 	lda #DFTK_INTBIN
d771 :                       df_tk_num_put
d771 : 20b3d6           [ 6] 	jsr df_tk_put_tok	; Save number type (DEC,HEX,BI
d774 : a53d             [ 3] 	lda num_a
d776 : 20b3d6           [ 6] 	jsr df_tk_put_tok
d779 : a53e             [ 3] 	lda num_a+1
d77b : 4cb3d6           [ 3] 	jmp df_tk_put_tok
                             
                             ;****************************************
                             ;* Tokenise a constant char
                             ;****************************************
d77e :                       df_tk_char
                             	; skip the first quote
d77e : 20a8d6           [ 6] 	jsr df_tk_get_buf
                             	; put in the token
d781 : a900             [ 2] 	lda #DFTK_CHR
d783 : 20b3d6           [ 6] 	jsr df_tk_put_tok
                             	; get the char value and save
d786 : 20a8d6           [ 6] 	jsr df_tk_get_buf
d789 : 20b3d6           [ 6] 	jsr df_tk_put_tok
                             	; always put two bytes in, even for a BYTE type
d78c : a900             [ 2] 	lda #0
AS65 Assembler for R6502 [1.42].                                     Page  144
-------------------------------- bank\bank0.s --------------------------------

d78e : 20b3d6           [ 6] 	jsr df_tk_put_tok
                             	; next byte must be single quote
d791 : 20a8d6           [ 6] 	jsr df_tk_get_buf
d794 : c927             [ 2] 	cmp #0x27
d796 : d08e             [ 3] 	bne df_tk_char_err
d798 : 18               [ 2] 	clc
d799 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Tokenise a constant string
                             ;****************************************
d79a :                       df_tk_str
                             	; skip the first quote
d79a : 20a8d6           [ 6] 	jsr df_tk_get_buf
                             	; put in the token
d79d : a910             [ 2] 	lda #DFTK_STRLIT
d79f : 20b3d6           [ 6] 	jsr df_tk_put_tok
d7a2 :                       df_tk_str_ch
                             	; copy string chars in to token buffer
                             	; until another quote or end of line
d7a2 : 20a8d6           [ 6] 	jsr df_tk_get_buf
d7a5 : c900             [ 2] 	cmp #0
d7a7 : f011             [ 3] 	beq df_tk_str_err
d7a9 : c922             [ 2] 	cmp #0x22
d7ab : f006             [ 3] 	beq df_tk_str_don
d7ad : 20b3d6           [ 6] 	jsr df_tk_put_tok
d7b0 : 4ca2d7           [ 3] 	jmp df_tk_str_ch
d7b3 :                       df_tk_str_don
                             	; zero terminated strings
d7b3 : a900             [ 2] 	lda #0
d7b5 : 4cb3d6           [ 3] 	jmp df_tk_put_tok
d7b8 :                       df_tk_var_noarry
d7b8 : 18               [ 2] 	clc
d7b9 : 60               [ 6] 	rts
d7ba :                       df_tk_str_err
                             	SWBRK DFERR_SYNTAX
                             
                             
                             ;****************************************
                             ;* Tokenise a constant (num, string, char)
                             ;****************************************
d7bc :                       df_tk_const
d7bc : 2004d7           [ 6] 	jsr df_tk_skip_ws
                             	; Check what constant it is
d7bf : 20a2d6           [ 6] 	jsr df_tk_peek_buf
                             	; Minus symbol could be start of a number
d7c2 : c92d             [ 2] 	cmp #'-'
d7c4 : f005             [ 3] 	beq df_tk_const_try_num
d7c6 : 20c1d6           [ 6] 	jsr df_tk_isdigit
d7c9 : 9003             [ 3] 	bcc df_tk_const_try_str
d7cb :                       df_tk_const_try_num
d7cb : 4c3ad7           [ 3] 	jmp df_tk_num
d7ce :                       df_tk_const_try_str
                             	; check for double quote
d7ce : c922             [ 2] 	cmp #0x22
d7d0 : d003             [ 3] 	bne df_tk_const_try_char
d7d2 : 4c9ad7           [ 3] 	jmp df_tk_str
d7d5 :                       df_tk_const_try_char
                             	; check for single apostrophe
d7d5 : c927             [ 2] 	cmp #0x27
d7d7 : d003             [ 3] 	bne df_tk_const_err
d7d9 : 4c7ed7           [ 3] 	jmp df_tk_char
AS65 Assembler for R6502 [1.42].                                     Page  145
-------------------------------- bank\bank0.s --------------------------------

d7dc :                       df_tk_const_err
                             	SWBRK DFERR_SYNTAX
                             
                             
                             ;****************************************
                             ;* Tokenise a variable - A = mask
                             ;* Return : A = variable index
                             ;****************************************
d7de :                       df_tk_var
                             	; Find or create variable, address in X,A
d7de : 203dd6           [ 6] 	jsr df_var_findcreate
d7e1 : 9001             [ 3] 	bcc df_tk_var_cont
d7e3 : 60               [ 6] 	rts
d7e4 :                       df_tk_var_cont
                             	; Save X,A for later
d7e4 : 48               [ 3] 	pha
d7e5 : 8a               [ 2] 	txa
d7e6 : 48               [ 3] 	pha
                             	; Put VAR escape in token buffer
d7e7 : a911             [ 2] 	lda #DFTK_VAR
d7e9 : 20b3d6           [ 6] 	jsr df_tk_put_tok
                             	; Get variable address and put in token buffer
d7ec : 68               [ 4] 	pla
d7ed : 20b3d6           [ 6] 	jsr df_tk_put_tok
d7f0 : 68               [ 4] 	pla
d7f1 : 20b3d6           [ 6] 	jsr df_tk_put_tok
                             	; count of any array indices
d7f4 :                       df_tk_var_ck
                             	; check if array procesing needed
d7f4 : a95b             [ 2] 	lda #'['
d7f6 : 2028d7           [ 6] 	jsr df_tk_expect_tok
d7f9 : b0bd             [ 3] 	bcs df_tk_var_noarry
                             	; process numeric expression in bracket
d7fb : 4ca5d8           [ 3] 	jmp df_tk_narry
                             
                             
                             ;****************************************
                             ;* Tokenise a parameter in proc definition
                             ;* Return : A = variable index
                             ;****************************************
d7fe :                       df_tk_parm
                             	; if preceeding with non-local qualifier DFTK_VA
d7fe : 20a2d6           [ 6] 	jsr df_tk_peek_buf
d801 : c926             [ 2] 	cmp #DFTK_VARPARM
d803 : d006             [ 3] 	bne df_tk_parm_skip_var
                             	; get the qualifier and put in token buffer
d805 : 20a8d6           [ 6] 	jsr df_tk_get_buf
d808 : 20b3d6           [ 6] 	jsr df_tk_put_tok
d80b :                       df_tk_parm_skip_var
                             	; don't have a certain type of var
d80b : a900             [ 2] 	lda #0
d80d : 4cded7           [ 3] 	jmp df_tk_var
                             
                             
                             ;****************************************
                             ;* Tokenise a variable to localise
                             ;* Return : A,X = variable index
                             ;****************************************
d810 :                       df_tk_localvar
                             	; Find or create variable, index in A
d810 : 203dd6           [ 6] 	jsr df_var_findcreate
d813 : 9001             [ 3] 	bcc df_tk_localvar_cont
AS65 Assembler for R6502 [1.42].                                     Page  146
-------------------------------- bank\bank0.s --------------------------------

d815 : 60               [ 6] 	rts
d816 :                       df_tk_localvar_cont
                             	; Save variable address for later
d816 : 48               [ 3] 	pha
d817 : 8a               [ 2] 	txa
d818 : 48               [ 3] 	pha
                             	; Put VAR escape in token buffer
d819 : a911             [ 2] 	lda #DFTK_VAR
d81b : 20b3d6           [ 6] 	jsr df_tk_put_tok
                             	; Get variable index and put in token buffer
d81e : 68               [ 4] 	pla
d81f : 20b3d6           [ 6] 	jsr df_tk_put_tok
d822 : 68               [ 4] 	pla
d823 : 4cb3d6           [ 3] 	jmp df_tk_put_tok
                             
                             ;****************************************
                             ;* Tokenise array variable
                             ;* Return : A = variable index
                             ;****************************************
d826 :                       df_tk_arrvar
                             	; Like a local var at first
d826 : 2010d8           [ 6] 	jsr df_tk_localvar
                             	; but must be array
d829 : a95b             [ 2] 	lda #'['
d82b : 2033d7           [ 6] 	jsr df_tk_expect_tok_err
                             	; process numeric expression in bracket
d82e : 4ca5d8           [ 3] 	jmp df_tk_narry
                             
                             ;****************************************
                             ;* Tokenise call or def of proc
                             ;* Mode : A = 0 means def, else call
                             ;****************************************
d831 :                       df_tk_proc
d831 : 858b             [ 3] 	sta df_procmode
d833 : 2004d7           [ 6] 	jsr df_tk_skip_ws
                             	; Find or create proc, index in A
d836 : a940             [ 2] 	lda #DFVVT_PROC
d838 : 203dd6           [ 6] 	jsr df_var_findcreate
d83b : b066             [ 3] 	bcs df_tk_proc_err
                             
                             	; Save variable address for later
d83d : 868e             [ 3] 	stx df_procptr
d83f : 858f             [ 3] 	sta df_procptr+1
                             
                             	; Put PROC escape in token buffer
d841 : a912             [ 2] 	lda #DFTK_PROC
d843 : 20b3d6           [ 6] 	jsr df_tk_put_tok
                             	; Get variable address and put in token buffer
d846 : a58e             [ 3] 	lda df_procptr
d848 : 20b3d6           [ 6] 	jsr df_tk_put_tok
d84b : a58f             [ 3] 	lda df_procptr+1
d84d : 20b3d6           [ 6] 	jsr df_tk_put_tok
                             
                             	; initially assume no args
d850 : a900             [ 2] 	lda #0
d852 : 858c             [ 3] 	sta df_procargs
                             
                             	; Must have an open bracket
d854 : a928             [ 2] 	lda #'('
d856 : 2033d7           [ 6] 	jsr df_tk_expect_tok_err
                             	; if immediately followed by close bracket then 
d859 : 20a2d6           [ 6] 	jsr df_tk_peek_buf
AS65 Assembler for R6502 [1.42].                                     Page  147
-------------------------------- bank\bank0.s --------------------------------

d85c : c929             [ 2] 	cmp #')'
d85e : f030             [ 3] 	beq df_tk_proc_noparm
                             	; else tokenise parm variables
d860 :                       df_tk_proc_parms
d860 : 2004d7           [ 6] 	jsr df_tk_skip_ws
                             	; call appropriate routine for mode
d863 : a58b             [ 3] 	lda df_procmode
d865 : d006             [ 3] 	bne df_tk_proc_call
                             	; tokenise parameter variable in def mode
d867 : 20fed7           [ 6] 	jsr df_tk_parm
d86a : 4c76d8           [ 3] 	jmp df_tk_proc_skip_call
d86d :                       df_tk_proc_call
                             	; tokenise expression in call mode
                             	;**CHECK**
d86d : a58c             [ 3] 	lda df_procargs	; procargs could be impacted ins
d86f : 48               [ 3] 	pha
d870 : 2025d9           [ 6] 	jsr df_tk_expression
d873 : 68               [ 4] 	pla
d874 : 858c             [ 3] 	sta df_procargs
d876 :                       df_tk_proc_skip_call
d876 : b02a             [ 3] 	bcs df_tk_proc_errp
                             	; increment number of args
d878 : e68c             [ 5] 	inc df_procargs
                             	; what is next non ws char
d87a : 2004d7           [ 6] 	jsr df_tk_skip_ws
d87d : c92c             [ 2] 	cmp #','
d87f : f006             [ 3] 	beq df_tk_proc_comma
d881 : c929             [ 2] 	cmp #')'
d883 : d01d             [ 3] 	bne df_tk_proc_errp
d885 : f009             [ 3] 	beq df_tk_proc_noparm
                             	; comma found, more parms to process
d887 :                       df_tk_proc_comma
d887 : 20a8d6           [ 6] 	jsr df_tk_get_buf
d88a : 20b3d6           [ 6] 	jsr df_tk_put_tok
d88d : 4c60d8           [ 3] 	jmp df_tk_proc_parms
d890 :                       df_tk_proc_noparm
                             	; consume the close bracket
d890 : 20a8d6           [ 6] 	jsr df_tk_get_buf
d893 : 20b3d6           [ 6] 	jsr df_tk_put_tok
                             
                             	; update arg count if def mode
d896 : a68b             [ 3] 	ldx df_procmode
d898 : d006             [ 3] 	bne df_tk_proc_skip_args
                             	; use address of proc
                             	; put arg count in dim2
d89a : a004             [ 2] 	ldy #DFVVT_DIM2
d89c : a58c             [ 3] 	lda df_procargs
d89e : 918e             [ 5] 	sta (df_procptr),y
d8a0 :                       df_tk_proc_skip_args
d8a0 : 18               [ 2] 	clc
d8a1 : 60               [ 6] 	rts
d8a2 :                       df_tk_proc_errp
d8a2 : 68               [ 4] 	pla
d8a3 :                       df_tk_proc_err
                             	SWBRK DFERR_SYNTAX
                             
                             
                             ;****************************************
                             ;* Parse array index
                             ;****************************************
d8a5 :                       df_tk_narry
                             	; if array open bracket encountered
AS65 Assembler for R6502 [1.42].                                     Page  148
-------------------------------- bank\bank0.s --------------------------------

                             	; then tokenise a numeric expression
d8a5 : 2025d9           [ 6] 	jsr df_tk_expression
                             	; If a comma is next, then another expression
d8a8 : a92c             [ 2] 	lda #','
d8aa : 2028d7           [ 6] 	jsr df_tk_expect_tok
d8ad : b003             [ 3] 	bcs df_tk_narry_end
d8af : 2025d9           [ 6] 	jsr df_tk_expression
d8b2 :                       df_tk_narry_end
                             	; after the second dimension, must be close sq b
d8b2 : a95d             [ 2] 	lda #']'
d8b4 : 4c33d7           [ 3] 	jmp df_tk_expect_tok_err
                             
                             ;****************************************
                             ;* Parse bracket
                             ;****************************************
d8b7 :                       df_tk_nbrkt
                             	; if  open bracket encountered
                             	; then tokenise a numeric expression
d8b7 : 2025d9           [ 6] 	jsr df_tk_expression
d8ba : a929             [ 2] 	lda #')'
d8bc : 4c33d7           [ 3] 	jmp df_tk_expect_tok_err
                             
                             ;****************************************
                             ;* Parse call to numeric proc
                             ;****************************************
d8bf :                       df_tk_nterm_proc
                             	; call mode
d8bf : a901             [ 2] 	lda #1
d8c1 : 4c31d8           [ 3] 	jmp df_tk_proc
                             
                             ;****************************************
                             ;* Parse numeric term
                             ;****************************************
d8c4 :                       df_tk_nterm
                             	; skip any ws first, copying in to tokbuff
                             	; A containts the non-ws char
d8c4 : 2004d7           [ 6] 	jsr df_tk_skip_ws
d8c7 : c900             [ 2] 	cmp #0
d8c9 : f004             [ 3] 	beq df_tk_nterm_done
d8cb : c93a             [ 2] 	cmp #':'
d8cd : d002             [ 3] 	bne df_tk_nterm_cont
d8cf :                       df_tk_nterm_done
d8cf :                       df_tk_nop_false
d8cf : 38               [ 2] 	sec
d8d0 : 60               [ 6] 	rts
d8d1 :                       df_tk_nterm_cont
                             	; if open bracket then process it
d8d1 : c928             [ 2] 	cmp #'('
d8d3 : d009             [ 3] 	bne df_tk_nterm_tryfn
                             	; get the bracket and put in token buffer
d8d5 : 20a8d6           [ 6] 	jsr df_tk_get_buf
d8d8 : 20b3d6           [ 6] 	jsr df_tk_put_tok
                             	; go process the open bracket
d8db : 4cb7d8           [ 3] 	jmp df_tk_nbrkt
d8de :                       df_tk_nterm_tryfn
d8de : 48               [ 3] 	pha
                             	; try decoding a built-in function
d8df : a902             [ 2] 	lda #DFTK_FN
d8e1 : 2011da           [ 6] 	jsr df_tk_matchtok
d8e4 : b00e             [ 3] 	bcs df_tk_nterm_try_proc
                             	; pull old A in to Y but don't use
d8e6 : 68               [ 4] 	pla
AS65 Assembler for R6502 [1.42].                                     Page  149
-------------------------------- bank\bank0.s --------------------------------

d8e7 : a8               [ 2] 	tay
                             	; restore A and put the token with MSB set
d8e8 : 8a               [ 2] 	txa
d8e9 : 0980             [ 2] 	ora #0x80
d8eb : 20b3d6           [ 6] 	jsr df_tk_put_tok
d8ee : 20e3d9           [ 6] 	jsr df_tk_exec_parser
d8f1 : b01b             [ 4] 	bcs df_tk_nterm_err
d8f3 : 60               [ 6] 	rts
d8f4 :                       df_tk_nterm_try_proc
d8f4 : 68               [ 4] 	pla
                             	; if it's not a func then try proc
d8f5 : 20fed6           [ 6] 	jsr df_tk_isproc
d8f8 : 9006             [ 4] 	bcc df_tk_nterm_try_var
d8fa : 20bfd8           [ 6] 	jsr df_tk_nterm_proc
d8fd : b00f             [ 4] 	bcs df_tk_nterm_err
d8ff : 60               [ 6] 	rts
d900 :                       df_tk_nterm_try_var
                             	; Non-zero mask means var must be this type
d900 : a900             [ 2] 	lda #0
d902 : 20ded7           [ 6] 	jsr df_tk_var
d905 : b001             [ 3] 	bcs df_tk_nterm_try_const
d907 : 60               [ 6] 	rts
d908 :                       df_tk_nterm_try_const
                             	; Try decoding a constant
d908 : 20bcd7           [ 6] 	jsr df_tk_const
d90b : b001             [ 3] 	bcs df_tk_nterm_err
d90d : 60               [ 6] 	rts
d90e :                       df_tk_nterm_err
                             	SWBRK DFERR_SYNTAX
                             
                             
                             ;****************************************
                             ;* Parse numeric operator
                             ;****************************************
d910 :                       df_tk_nop
d910 : 2004d7           [ 6] 	jsr df_tk_skip_ws
d913 : c900             [ 2] 	cmp #0
d915 : f0b8             [ 4] 	beq df_tk_nop_false
                             	; must be an operator token for numeric
d917 : a90c             [ 2] 	lda #DFTK_OP | DFTK_STROP
d919 : 2011da           [ 6] 	jsr df_tk_matchtok
d91c : b0b1             [ 4] 	bcs df_tk_nop_false
                             	; got a token
d91e : 0980             [ 2] 	ora #DFTK_TOKEN
d920 : 20b3d6           [ 6] 	jsr df_tk_put_tok
d923 : 18               [ 2] 	clc
d924 : 60               [ 6] 	rts
                             
                             	
                             ;****************************************
                             ;* Parse numeric expression
                             ;****************************************
d925 :                       df_tk_expression
                             	; Tokenise a numeric term
d925 : 20c4d8           [ 6] 	jsr df_tk_nterm
d928 : b006             [ 3] 	bcs df_tk_expre_err
                             	; Try and tokenise a numeric operator
d92a : 2010d9           [ 6] 	jsr df_tk_nop
                             	; If an operator was tokenised
                             	; then loop back for another term
d92d : 90f6             [ 3] 	bcc df_tk_expression
                             	; If no operator was found then
AS65 Assembler for R6502 [1.42].                                     Page  150
-------------------------------- bank\bank0.s --------------------------------

                             	; expression is done
d92f :                       df_tk_not_eos
d92f : 18               [ 2] 	clc
d930 :                       df_tk_expre_err
d930 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Find expected token and parse expression
                             ;****************************************
d931 :                       df_tk_tok_expression
d931 : 2033d7           [ 6] 	jsr df_tk_expect_tok_err
d934 : 4c25d9           [ 3] 	jmp df_tk_expression
                             
                             
                             ;****************************************
                             ;* Check end of statement
                             ;****************************************
d937 :                       df_tk_isEOS
d937 : a93a             [ 2] 	lda #':'
d939 : 2028d7           [ 6] 	jsr df_tk_expect_tok
d93c : b0f1             [ 3] 	bcs df_tk_not_eos
                             	; this is the position of the next statement
d93e : a57d             [ 3] 	lda df_tokoff
                             	; put it in the last statement offset slot
d940 : a47f             [ 3] 	ldy df_nxtstidx
d942 : 998004           [ 5] 	sta df_tokbuff,y
d945 : 38               [ 2] 	sec
d946 : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* Parse user defined proc
                             ;****************************************
d947 :                       df_tk_parse_user_proc
                             	; put proc token in as a call
d947 : a981             [ 2] 	lda #0x81
d949 : 20b3d6           [ 6] 	jsr df_tk_put_tok
d94c : a901             [ 2] 	lda #1
d94e : 4c31d8           [ 3] 	jmp df_tk_proc
                             
                             
                             ;****************************************
                             ;* Parse a command
                             ;* Do not fatal error if this fails
                             ;****************************************
d951 :                       df_tk_parse_command
                             	; only looking for keywords
d951 : a901             [ 2] 	lda #DFTK_KW
d953 : 2011da           [ 6] 	jsr df_tk_matchtok
                             	; if didn't find regular keywords then try non f
d956 : b010             [ 3] 	bcs df_tk_parse_command_err
                             	; if match then store token in the line buffer
                             	; Set MSB
d958 : 0980             [ 2] 	ora #0x80
d95a : 20b3d6           [ 6] 	jsr df_tk_put_tok
                             	; call the parser to do tokenise based on the st
d95d : a583             [ 3] 	lda df_symoff
d95f : 20e3d9           [ 6] 	jsr df_tk_exec_parser
d962 : b004             [ 3] 	bcs df_tk_parse_command_err
                             	; [1] ignore white space but keep it
d964 : 2004d7           [ 6] 	jsr df_tk_skip_ws
                             	; No error in parsing this command
AS65 Assembler for R6502 [1.42].                                     Page  151
-------------------------------- bank\bank0.s --------------------------------

d967 :                       df_tk_parse_command_done
d967 : 18               [ 2] 	clc
d968 :                       df_tk_parse_command_err
d968 : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* lexer
                             ;****************************************
d969 :                       df_lexer_line
d969 : a900             [ 2] 	lda #0
                             	; start at the beginning of the line buffer
d96b : 857c             [ 3] 	sta df_linoff
                             	; start at the beginning of the tokenised buffer
d96d : 857d             [ 3] 	sta df_tokoff
                             	; set current line to the token buffer
d96f : a980             [ 2] 	lda #lo(df_tokbuff)
d971 : 8586             [ 3] 	sta df_currlin
d973 : a904             [ 2] 	lda #hi(df_tokbuff)
d975 : 8587             [ 3] 	sta df_currlin+1
                             	; Set the line length to 0
d977 : a900             [ 2] 	lda #0
d979 : 20b3d6           [ 6] 	jsr df_tk_put_tok
                             
                             	; any leading white space, ignore and discard
                             ;	jsr df_tk_strip_ws
                             
                             	; if peek next character is a number then assume
                             	; else assume a statement
d97c : 20a2d6           [ 6] 	jsr df_tk_peek_buf
d97f : 20c1d6           [ 6] 	jsr df_tk_isdigit
d982 : 9006             [ 3] 	bcc df_lexer_skip_lnum
                             	; if line number then capture the line number an
d984 : 20f2d9           [ 6] 	jsr df_tk_linenum
d987 : 4c92d9           [ 3] 	jmp df_tk_body
d98a :                       df_lexer_skip_lnum
                             	; if no line number then zero out the line numbe
                             	; line zero will indicate an immediate mode comm
d98a : a900             [ 2] 	lda #0
d98c : 20b3d6           [ 6] 	jsr df_tk_put_tok				; Line num low byte
d98f : 20b3d6           [ 6] 	jsr df_tk_put_tok				; Line num high byte
d992 :                       df_tk_body
                             	; Offset for next statement
d992 : a57d             [ 3] 	lda df_tokoff
d994 : 857f             [ 3] 	sta df_nxtstidx
d996 : a900             [ 2] 	lda #0
d998 : 20b3d6           [ 6] 	jsr df_tk_put_tok				; Offset to next statement
d99b : 20a2d6           [ 6] 	jsr df_tk_peek_buf				; Check for a single space
d99e : 2013d7           [ 6] 	jsr df_tk_isws					; and first character
d9a1 : 9002             [ 3] 	bcc df_tk_skip_1_spc
d9a3 : e67c             [ 5] 	inc df_linoff					; Don't tokenise this single s
d9a5 :                       df_tk_skip_1_spc
                             	; [1] capture white space from line buffer in to
d9a5 : 2004d7           [ 6] 	jsr df_tk_skip_ws
                             	; If next non ws is zero then this is an empty l
                             	; so return with length zero but line number fil
                             	; token buffer
d9a8 : c900             [ 2] 	cmp #0
d9aa : f033             [ 3] 	beq df_tk_line_empty
                             	; if next char is _ then parse a user defined pr
d9ac : 20fed6           [ 6] 	jsr df_tk_isproc
d9af : 9006             [ 3] 	bcc df_tk_try_command
AS65 Assembler for R6502 [1.42].                                     Page  152
-------------------------------- bank\bank0.s --------------------------------

d9b1 : 2047d9           [ 6] 	jsr df_tk_parse_user_proc
d9b4 : 4cc1d9           [ 3] 	jmp df_tk_done
d9b7 :                       df_tk_try_command
                             	; try  a keyword
d9b7 : 2051d9           [ 6] 	jsr df_tk_parse_command
                             ;	bcs	df_tk_try_assign
d9ba : 9005             [ 3] 	bcc df_tk_done
d9bc :                       df_tk_try_assign
                             	; nothing but to try an assignment operation
d9bc : 2076dd           [ 6] 	jsr df_tk_assign
d9bf : b020             [ 3] 	bcs	df_tk_parseerror
d9c1 :                       df_tk_done
                             	; put statement index stuff here in case of mult
                             	; check for : and if present tokenise plus updat
                             	; then go back to try and process another statem
d9c1 : 2037d9           [ 6] 	jsr df_tk_isEOS
d9c4 : b0cc             [ 3] 	bcs df_tk_body
                             	; if not at end of line, then must be error
d9c6 : 20a2d6           [ 6] 	jsr df_tk_peek_buf
d9c9 : c900             [ 2] 	cmp #0
d9cb : d014             [ 3] 	bne df_tk_parseerror
                             	; this is the position of the next line
d9cd : a57d             [ 3] 	lda df_tokoff
                             	; put it in the last statement offset slot
d9cf : a47f             [ 3] 	ldy df_nxtstidx
d9d1 : 998004           [ 5] 	sta df_tokbuff,y
                             	; Get line length
d9d4 : a47d             [ 3] 	ldy df_tokoff
                             	; ensure there is always a zero after the last t
                             	; A is already zero
d9d6 : a900             [ 2] 	lda #0
d9d8 : 998004           [ 5] 	sta df_tokbuff,y
                             	; save the line length
d9db : 98               [ 2] 	tya
d9dc : 8d8004           [ 4] 	sta df_tokbuff
d9df :                       df_tk_line_empty
d9df : 18               [ 2] 	clc
d9e0 : 60               [ 6] 	rts
d9e1 :                       df_tk_parseerror
                             	SWBRK DFERR_SYNTAX
                             
                             
                             ;****************************************
                             ;* df_tk_parsestatement
                             ;* Execute parse routine for this statement
                             ;* Input: df_tokoff is the token found
                             ;* Return: CC = Parsed ok, CS = Error
                             ;****************************************
d9e3 :                       df_tk_exec_parser
d9e3 : 0a               [ 2] 	asl a
d9e4 : aa               [ 2] 	tax
d9e5 : bd2ddc           [ 4] 	lda df_tk_tokenjmp,x
d9e8 : 85a1             [ 3] 	sta df_tmpptra
d9ea : bd2edc           [ 4] 	lda df_tk_tokenjmp+1,x
d9ed : 85a2             [ 3] 	sta df_tmpptra+1
d9ef : 6ca100           [ 6] 	jmp (df_tmpptra)
                             
                             
                             ;****************************************
                             ;* df_tk_linenum
                             ;* Tokenise line number
                             ;****************************************
AS65 Assembler for R6502 [1.42].                                     Page  153
-------------------------------- bank\bank0.s --------------------------------

d9f2 :                       df_tk_linenum
                             	; Convert line number to 16 bit number
                             	; Save the line number
                             	; Increment the buffer pointer
d9f2 : 18               [ 2] 	clc
d9f3 : a900             [ 2] 	lda #lo(df_linbuff)
d9f5 : 657c             [ 3] 	adc df_linoff
d9f7 : aa               [ 2] 	tax
d9f8 : a904             [ 2] 	lda #hi(df_linbuff)
d9fa : 6900             [ 2] 	adc #0
d9fc : a001             [ 2] 	ldy #1			; Decimal format only
d9fe : 20e1c1           [ 6] 	jsr con_n_to_a
da01 : 18               [ 2] 	clc
da02 : 8a               [ 2] 	txa
da03 : 657c             [ 3] 	adc df_linoff
da05 : 857c             [ 3] 	sta df_linoff
                             	; Now save line number
da07 : a53d             [ 3] 	lda num_a
da09 : 20b3d6           [ 6] 	jsr df_tk_put_tok
da0c : a53e             [ 3] 	lda num_a+1
da0e : 4cb3d6           [ 3] 	jmp df_tk_put_tok
                             
                             ;****************************************
                             ;* df_tk_matchtok
                             ;* Try and find a token match against the table d
                             ;* Input:
                             ;*			Current df_linbuff and df_linoff
                             ;* Return: 	CC = No Error, CS = Error
                             ;*			df_linoff points to next char if CC else unc
                             ;*			df_symoff is the symbol table index
                             ;****************************************
da11 :                       df_tk_matchtok
                             	; save the mask to check types against
da11 : 48               [ 3] 	pha
                             	; Start at token symbols beginning
da12 : a993             [ 2] 	lda #lo(df_tokensyms)
da14 : 8581             [ 3] 	sta df_symtab
da16 : a9da             [ 2] 	lda #hi(df_tokensyms)
da18 : 8582             [ 3] 	sta df_symtab+1
da1a : a900             [ 2] 	lda #0
da1c : 8583             [ 3] 	sta df_symoff
da1e :                       df_tk_checknexttok
                             	; check this token type first
da1e : 68               [ 4] 	pla
da1f : 48               [ 3] 	pha
da20 : a683             [ 3] 	ldx df_symoff
da22 : 3df3dc           [ 4] 	and df_tk_tokentype,x
da25 : f032             [ 3] 	beq df_tk_symnomatch
                             	; Special check for operator token
                             	; because of order of precedence fudge
                             	; ******FIX THIS ONE DAY!!!!!!******
                             	; if parm and token type = DFTK_OP then ok
                             	; if parm and token type <> DFTK_OP then not ok
da27 : bdf3dc           [ 4] 	lda df_tk_tokentype,x
da2a : 2908             [ 2] 	and #DFTK_OP
da2c : f009             [ 3] 	beq df_tk_matchtok_skip_op
da2e : 68               [ 4] 	pla
da2f : 48               [ 3] 	pha
da30 : 2908             [ 2] 	and #DFTK_OP
da32 : 3df3dc           [ 4] 	and df_tk_tokentype,x
da35 : f022             [ 3] 	beq df_tk_symnomatch
da37 :                       df_tk_matchtok_skip_op
AS65 Assembler for R6502 [1.42].                                     Page  154
-------------------------------- bank\bank0.s --------------------------------

                             	; From the line buffer current pointer
                             	; Check for a token match
da37 : a47c             [ 3] 	ldy df_linoff
da39 : a200             [ 2] 	ldx #0
da3b :                       df_tk_checktokch
                             	; Get symtable char
                             	; and mask off MSB
da3b : a181             [ 6] 	lda (df_symtab,x)
                             	; Save the value and mask off MSB
da3d : 48               [ 3] 	pha
da3e : 297f             [ 2] 	and #0x7f
                             	; Compare with current line buffer char
da40 : d90004           [ 4] 	cmp df_linbuff,y
                             	; If chars not match then this symbol fails
da43 : d013             [ 3] 	bne df_tk_symnomatchp
                             	; If match and symbol has MSB then
                             	; all of the symbol matched
da45 : 68               [ 4] 	pla
da46 : 3033             [ 3] 	bmi df_tk_symfound
                             	; else more chars to match
                             	; so increment line buffer pointers
                             	_incZPWord df_symtab
                             
da4e : c8               [ 2] 	iny
                             	; If buffer is '.' then let this be a match
da4f : b90004           [ 4] 	lda df_linbuff,y
da52 : c92e             [ 2] 	cmp #'.'
da54 : f025             [ 3] 	beq df_tk_symfound
da56 : d0e3             [ 3] 	bne df_tk_checktokch	; branch always
da58 :                       df_tk_symnomatchp
da58 : 68               [ 4] 	pla
da59 :                       df_tk_symnomatch
                             	; Increment symbol counter to next symbol
da59 : e683             [ 5] 	inc df_symoff
da5b :                       df_tk_symnextentry
da5b : a200             [ 2] 	ldx #0
da5d : a181             [ 6] 	lda (df_symtab,x)
                             	; End of symbol is MSB
da5f : 3009             [ 3] 	bmi  df_tk_foundsymend
                             	_incZPWord df_symtab
                             
da67 : 4c5bda           [ 3] 	jmp df_tk_symnextentry
da6a :                       df_tk_foundsymend
                             	; Increment char to point to new symbol
                             	; for matching with line buffer
                             	_incZPWord df_symtab
                             
                             	; If next char is not zero then
                             	; try and match with line buffer
da70 : a181             [ 6] 	lda (df_symtab,x)
da72 : d0aa             [ 3] 	bne df_tk_checknexttok
                             	; else symbol table exhausted
                             	; so no match found
                             	; pop mask off stack
da74 : 68               [ 4] 	pla
                             	; Zero symbol counter
da75 : a900             [ 2] 	lda #0
da77 : 8583             [ 3] 	sta df_symoff
                             	; Set C to indicate error (no match)
da79 : 38               [ 2] 	sec
da7a : 60               [ 6] 	rts
da7b :                       df_tk_symfound
AS65 Assembler for R6502 [1.42].                                     Page  155
-------------------------------- bank\bank0.s --------------------------------

                             	; Full match with keyword in symtable but
                             	; if matching with something that ended in alpha
                             	; then check the next buffer char is not alphanu
                             	; as this could be part of a variable name
                             	; Point to next buffer char in any case
da7b : c8               [ 2] 	iny
                             	; First mask off MSB
da7c : 297f             [ 2] 	and #0x7f
                             	; Then check if alpha
da7e : 20ebd6           [ 6] 	jsr df_tk_isalpha
                             	; if not alpha then we're definitely done
da81 : 9008             [ 3] 	bcc df_tk_symfound_final
                             	; else check buffer
da83 : b90004           [ 4] 	lda df_linbuff,y
                             	; if it is an alphanum then
da86 : 20f8d6           [ 6] 	jsr df_tk_isalphanum
                             	; do not count as a match
da89 : b0ce             [ 3] 	bcs df_tk_symnomatch
da8b :                       df_tk_symfound_final
                             	; pop mask off stack
da8b : 68               [ 4] 	pla
                             	; Save line buffer pointer (points to next char)
                             	; Clear C to indicate success (match)
da8c : 847c             [ 3] 	sty df_linoff
da8e : a583             [ 3] 	lda df_symoff
da90 : aa               [ 2] 	tax
da91 : 18               [ 2] 	clc
da92 : 60               [ 6] 	rts
                             
                             	include "dflat/tksymtab.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  TKSYMTAB.S
                             ;*  Runtime token jump table.
                             ;*  dflat uses four key tables to tokenise and ru
                             ;*  - df_tokensyms    - table of token symbols
                             ;*  - df_tk_tokentype - table of token types
                             ;*  - df_tk_tokenjmp  - table of tokenising routi
                             ;*  - df_rt_tokenjmp  - table of runtime routines
                             ;*  The key is the token symbols.  When a line is
                             ;*  in to the raw (untokenised) buffer, df_tokens
                             ;*  used to identify tokens.  The position of the
                             ;*  token is used to then look up type and jump v
                             ;*  in the other tables.
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code  
                             
                             ; Statement Token table
                             ; keywords
da93 :                       df_tokensyms
da93 : 80                    	db	0x80						; Implicit numeric assign
da94 : 80                    	db	0x80						; Implicit call procedure
da95 : bb                    	db	";"+0x80					; Comment
AS65 Assembler for R6502 [1.42].                                     Page  156
-------------------------------- bank\bank0.s --------------------------------

da96 : 7072696e746cee        	db	"printl",'n'+0x80			; println exprlist
da9d : 7072696e7461f4        	db	"printa",'t'+0x80			; printat x,y,exprlist
daa4 : 7072696ef4            	db	"prin",'t'+0x80				; print exprlist
daa9 : 6465e6                	db	"de",'f'+0x80				; def_subname
daac : 656e646465e6          	db	"endde",'f'+0x80			; enddef
dab2 : 7265747572ee          	db	"retur",'n'+0x80			; return
dab8 : 61626f72f4            	db	"abor",'t'+0x80				; abort
dabd : 6c6f6361ec            	db	"loca",'l'+0x80				; local varlist
dac2 : 6469ed                	db	"di",'m'+0x80				; dim varlist
dac5 : 7265706561f4          	db	"repea",'t'+0x80			; repeat
dacb : 756e7469ec            	db	"unti", 'l'+0x80			; until condition
dad0 : 666ff2                	db	"fo",'r'+0x80				; for var=start,end,incremen
dad3 : 6e6578f4              	db	"nex",'t'+0x80				; next
dad7 : 7768696ce5            	db	"whil",'e'+0x80				; while condition
dadc : 77656ee4              	db	"wen",'d'+0x80				; wend
dae0 : 69e6                  	db	"i",'f'+0x80				; if condition
dae2 : 656c73e5              	db	"els",'e'+0x80				; else
dae6 : 656e6469e6            	db	"endi",'f'+0x80				; endif
daeb : 656c69e6              	db	"eli",'f'+0x80				; elif condition
daef : 646174e1              	db	"dat",'a'+0x80				; data
daf3 : ae                    	db	'.'+0x80					; assembler command
daf4 : 7275ee                	db	"ru",'n'+0x80				; run
daf7 : 6c6973f4              	db	"lis",'t'+0x80				; list _proc-|*|line,line
dafb : 696e7075f4            	db	"inpu",'t'+0x80				; input var
db00 : 746578f4              	db	"tex",'t'+0x80				; text
db04 : 706c6ff4              	db	"plo",'t'+0x80				; plot x,y,char|string
db08 : 637572736ff2          	db	"curso",'r'+0x80			; cursor n
db0e : 636cf3                	db	"cl",'s'+0x80				; cls
db11 : 706f6be5              	db	"pok",'e'+0x80				; poke a,v
db15 : 646f6be5              	db	"dok",'e'+0x80				; doke a,v
db19 : 736f756ee4            	db	"soun",'d'+0x80				; sound
db1e : 6d757369e3            	db	"musi",'c'+0x80				; music
db23 : 706c61f9              	db	"pla",'y'+0x80				; play
db27 : 736176e5              	db	"sav",'e'+0x80				; save "fname"
db2b : 6c6f61e4              	db	"loa",'d'+0x80				; load "fname"
db2f : 726561e4              	db	"rea",'d'+0x80				; read
db33 : 6e65f7                	db	"ne",'w'+0x80				; new
db36 : 72656e75ed            	db	"renu",'m'+0x80				; renum start,offset,incre
db3b : 776169f4              	db	"wai",'t'+0x80				; wait delay
db3f : 72657365f4            	db	"rese",'t'+0x80				; reset var
db44 : 68697265f3            	db	"hire",'s'+0x80				; hires col
db49 : 706f696ef4            	db	"poin",'t'+0x80				; point x,y
db4e : 6c696ee5              	db	"lin",'e'+0x80				; line x0,y0,x1,y1
db52 : 6c696e6574ef          	db	"linet",'o'+0x80			; lineto x1,y1
db58 : 7069786d6f64e5        	db	"pixmod",'e'+0x80			; pixmode n
db5f : 696eeb                	db	"in",'k'+0x80				; ink n
db62 : 70617065f2            	db	"pape",'r'+0x80				; paper n
db67 : 636972636ce5          	db	"circl",'e'+0x80			; circle x,y,r
                             ;	db	"fil",'l'+0x80				; fill x,y,w,h,v
db6d : 68696d65ed            	db	"hime",'m'+0x80				; himem addr
db72 : 6d6f6e69746ff2        	db	"monito",'r'+0x80			; monitor
db79 : 737072636861f2        	db	"sprcha",'r'+0x80			; sprchar sp,ch
db80 : 737072706ff3          	db	"sprpo",'s'+0x80			; sprpos sp,x,y
db86 : 7370727570e4          	db	"sprup",'d'+0x80			; sprupd
db8c : 737072696e69f4        	db	"sprini",'t'+0x80			; sprinit
db93 : 7370726d756c74e9      	db	"sprmult",'i'+0x80			; sprmulti x[],y[]
db9b : 62736176e5            	db	"bsav",'e'+0x80				; bsave addr,len,"fname"
dba0 : 626c6f61e4            	db	"bloa",'d'+0x80				; bload addr,"fname"
dba5 : 74736176e5            	db	"tsav",'e'+0x80				; tsave "fname"
dbaa : 746c6f61e4            	db	"tloa",'d'+0x80				; tload "fname"
                             ; Functions
dbaf : 7065656ba8            	db	"peek",'('+0x80				; peek(x)
AS65 Assembler for R6502 [1.42].                                     Page  157
-------------------------------- bank\bank0.s --------------------------------

dbb4 : 6465656ba8            	db	"deek",'('+0x80				; peek(x)
dbb9 : 737469636ba8          	db	"stick",'('+0x80			; stick(x)
dbbf : 676574a8              	db	"get",'('+0x80				; get(x)
dbc3 : 636872a8              	db	"chr",'('+0x80				; chr(x)
dbc7 : 6c656674a8            	db	"left",'('+0x80				; left(x$,y)
dbcc : 7269676874a8          	db	"right",'('+0x80			; right(x$,y)
dbd2 : 6d6964a8              	db	"mid",'('+0x80				; mid(x$,y)
dbd6 : 6c656ea8              	db	"len",'('+0x80				; len(x$)
dbda : 6d656da8              	db	"mem",'('+0x80				; mem(x)
dbde : 7363726ea8            	db	"scrn",'('+0x80				; scrn(x,y)
dbe3 : 726e64a8              	db	"rnd",'('+0x80				; rnd(x)
dbe7 : 656c6170736564a8      	db	"elapsed",'('+0x80			; elapsed(var)
dbef : 63616c6ca8            	db	"call",'('+0x80				; call(addr,A,X,Y)
dbf4 : 686578a8              	db	"hex",'('+0x80				; hex(x)
dbf8 : 617363a8              	db	"asc",'('+0x80				; asc(x$)
dbfc : 76616ca8              	db	"val",'('+0x80				; val(x$)
dc00 : 706978656ca8          	db	"pixel",'('+0x80			; pixel(x,y)
dc06 : 737072686974a8        	db	"sprhit",'('+0x80			; sprhit(sp)
dc0d : 73676ea8              	db	"sgn",'('+0x80				; sgn(x)
dc11 : 61646472a8            	db	"addr",'('+0x80				; addr(var)
                             ; Numeric operators, in priority
dc16 : aa                    	db	'*'+0x80					; Multiply
dc17 : af                    	db 	'/'+0x80					; Divide
dc18 : dc                    	db 	'\\'+0x80					; Modulus
dc19 : 3cbc                  	db	'<','<'+0x80				; Shift left
dc1b : 3ebe                  	db	'>','>'+0x80				; Shift right
dc1d : ab                    	db 	'+'+0x80					; Add
dc1e : ad                    	db	'-'+0x80					; Subtract
                             ; Bool and conditional operators, in priority
dc1f : a6                    	db '&'+0x80						; AND
dc20 : fc                    	db '|'+0x80						; OR
dc21 : de                    	db '^'+0x80						; EOR
dc22 : 3cbd                  	db "<",'='+0x80					; Less than or equal
dc24 : 3ebd                  	db ">",'='+0x80					; Greater than or equal
dc26 : 3cbe                  	db "<",'>'+0x80					; Not equal
dc28 : bc                    	db '<'+0x80						; Less than
dc29 : be                    	db '>'+0x80						; Greater than
dc2a : 3dbd                  	db "=",'='+0x80					; Equality (always last)
                             
dc2c : 00                    	db  0
                             
                             
                             	
                             	
                             	include "dflat/tkjmptab.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  TKJUMPTAB.S
                             ;*  Runtime token jump table.
                             ;*  dflat uses four key tables to tokenise and ru
                             ;*  - df_tokensyms    - table of token symbols
                             ;*  - df_tk_tokentype - table of token types
                             ;*  - df_tk_tokenjmp  - table of tokenising routi
                             ;*  - df_rt_tokenjmp  - table of runtime routines
                             ;*  The key is the token symbols.  When a line is
                             ;*  in to the raw (untokenised) buffer, df_tokens
AS65 Assembler for R6502 [1.42].                                     Page  158
-------------------------------- bank\bank0.s --------------------------------

                             ;*  used to identify tokens.  The position of the
                             ;*  token is used to then look up type and jump v
                             ;*  in the other tables.
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code  
                             
                             ; Tokeniser jump table
                             ; In token order of df_tokensyms
dc2d :                       df_tk_tokenjmp
dc2d : 76dd                  	dw	df_tk_assign
dc2f : 2dde                  	dw	df_tk_callproc
dc31 : 7fdd                  	dw	df_tk_comment
dc33 : c6dd                  	dw	df_tk_println
dc35 : c0dd                  	dw	df_tk_printat
dc37 : c6dd                  	dw	df_tk_print
dc39 : 11de                  	dw	df_tk_def
dc3b : 66de                  	dw	df_tk_enddef
dc3d : 68de                  	dw	df_tk_return
dc3f : 66de                  	dw	df_tk_abort
dc41 : 02de                  	dw	df_tk_local
dc43 : f3dd                  	dw	df_tk_dim
dc45 : 66de                  	dw	df_tk_repeat
dc47 : 6bde                  	dw	df_tk_until
dc49 : 16de                  	dw	df_tk_for
dc4b : 66de                  	dw	df_tk_next
dc4d : 6bde                  	dw	df_tk_while
dc4f : 66de                  	dw	df_tk_wend
dc51 : 6bde                  	dw	df_tk_if
dc53 : 66de                  	dw	df_tk_else
dc55 : 66de                  	dw	df_tk_endif
dc57 : 6bde                  	dw	df_tk_elseif
dc59 : cddd                  	dw	df_tk_data
dc5b : 7af8                  	dw	df_tk_asm_parse_command
dc5d : 66de                  	dw	df_tk_run
dc5f : afdd                  	dw	df_tk_list
dc61 : dbdd                  	dw	df_tk_input
dc63 : 66de                  	dw	df_tk_text
dc65 : 7bde                  	dw	df_tk_plot
dc67 : 6bde                  	dw	df_tk_cursor
dc69 : 66de                  	dw	df_tk_cls
dc6b : 71de                  	dw	df_tk_poke
dc6d : 71de                  	dw	df_tk_doke
dc6f : 7bde                  	dw	df_tk_sound
dc71 : 83de                  	dw	df_tk_music
dc73 : 83de                  	dw	df_tk_play
dc75 : 6bde                  	dw	df_tk_save
dc77 : 6bde                  	dw	df_tk_load
dc79 : e4dd                  	dw	df_tk_read
dc7b : 66de                  	dw	df_tk_new
dc7d : 7bde                  	dw	df_tk_renum
dc7f : 6bde                  	dw	df_tk_wait
dc81 : 2fde                  	dw	df_tk_reset
dc83 : 66de                  	dw	df_tk_hires
dc85 : 71de                  	dw	df_tk_point
dc87 : 83de                  	dw	df_tk_line
dc89 : 71de                  	dw	df_tk_lineto
dc8b : 6bde                  	dw	df_tk_pixmode
dc8d : 6bde                  	dw	df_tk_ink
dc8f : 6bde                  	dw	df_tk_paper
AS65 Assembler for R6502 [1.42].                                     Page  159
-------------------------------- bank\bank0.s --------------------------------

dc91 : 7bde                  	dw	df_tk_circle
                             ;	dw	df_tk_fill
dc93 : 6bde                  	dw	df_tk_himem
dc95 : 66de                  	dw	df_tk_monitor
dc97 : 71de                  	dw	df_tk_sprchar
dc99 : 7bde                  	dw	df_tk_sprpos
dc9b : 66de                  	dw	df_tk_sprupd
dc9d : 66de                  	dw	df_tk_sprinit
dc9f : 71de                  	dw	df_tk_sprmulti
dca1 : 7bde                  	dw	df_tk_bsave
dca3 : 71de                  	dw	df_tk_bload
dca5 : 6bde                  	dw	df_tk_tsave
dca7 : 6bde                  	dw	df_tk_tload
                             	
dca9 : 39de                  	dw	df_tk_peek
dcab : 39de                  	dw	df_tk_deek
dcad : 3ede                  	dw	df_tk_stick
dcaf : 39de                  	dw	df_tk_get
dcb1 : 39de                  	dw	df_tk_chr
dcb3 : 4cde                  	dw	df_tk_left
dcb5 : 4cde                  	dw	df_tk_right
dcb7 : 52de                  	dw	df_tk_mid
dcb9 : 39de                  	dw	df_tk_len
dcbb : 39de                  	dw	df_tk_mem
dcbd : 4cde                  	dw	df_tk_scrn
dcbf : 39de                  	dw	df_tk_rnd
dcc1 : 43de                  	dw	df_tk_elapsed
dcc3 : 58de                  	dw	df_tk_call
dcc5 : 39de                  	dw	df_tk_hex
dcc7 : 39de                  	dw	df_tk_asc
dcc9 : 39de                  	dw	df_tk_val
dccb : 4cde                  	dw	df_tk_pixel
dccd : 39de                  	dw	df_tk_sprhit
dccf : 39de                  	dw	df_tk_sgn
dcd1 : 43de                  	dw	df_tk_addr
                             	
dcd3 : 66de                  	dw	df_tk_mult
dcd5 : 66de                  	dw	df_tk_div
dcd7 : 66de                  	dw	df_tk_mod
dcd9 : 66de                  	dw	df_tk_asl
dcdb : 66de                  	dw	df_tk_lsr
dcdd : 66de                  	dw	df_tk_add
dcdf : 66de                  	dw	df_tk_sub
                             	
dce1 : 66de                  	dw	df_tk_and
dce3 : 66de                  	dw	df_tk_or
dce5 : 66de                  	dw	df_tk_eor
dce7 : 66de                  	dw	df_tk_lte
dce9 : 66de                  	dw	df_tk_gte
dceb : 66de                  	dw	df_tk_ne
dced : 66de                  	dw	df_tk_lt
dcef : 66de                  	dw	df_tk_gt
dcf1 : 66de                  	dw	df_tk_eq
                             
                             
                             	
                             	
                             	
                             	
                             	
                             	include "dflat/tktyptab.s"
                             ;************************************************
AS65 Assembler for R6502 [1.42].                                     Page  160
-------------------------------- bank\bank0.s --------------------------------

                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  RTJUMPTAB.S
                             ;*  Runtime token jump table.
                             ;*  dflat uses four key tables to tokenise and ru
                             ;*  - df_tokensyms    - table of token symbols
                             ;*  - df_tk_tokentype - table of token types
                             ;*  - df_tk_tokenjmp  - table of tokenising routi
                             ;*  - df_rt_tokenjmp  - table of runtime routines
                             ;*  The key is the token symbols.  When a line is
                             ;*  in to the raw (untokenised) buffer, df_tokens
                             ;*  used to identify tokens.  The position of the
                             ;*  token is used to then look up type and jump v
                             ;*  in the other tables.
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code  
                             
                             ; Tokeniser type table (is it a keyword, function
                             ; In token order of df_tokensyms
dcf3 :                       df_tk_tokentype
dcf3 : 01                    	db	DFTK_KW
dcf4 : 01                    	db	DFTK_KW
dcf5 : 01                    	db	DFTK_KW
dcf6 : 01                    	db	DFTK_KW
dcf7 : 01                    	db	DFTK_KW
dcf8 : 01                    	db	DFTK_KW
dcf9 : 01                    	db	DFTK_KW
dcfa : 01                    	db	DFTK_KW
dcfb : 01                    	db	DFTK_KW
dcfc : 01                    	db	DFTK_KW
dcfd : 01                    	db	DFTK_KW
dcfe : 01                    	db	DFTK_KW
dcff : 01                    	db	DFTK_KW
dd00 : 01                    	db	DFTK_KW
dd01 : 01                    	db	DFTK_KW
dd02 : 01                    	db	DFTK_KW
dd03 : 01                    	db	DFTK_KW
dd04 : 01                    	db	DFTK_KW
dd05 : 01                    	db	DFTK_KW
dd06 : 01                    	db	DFTK_KW
dd07 : 01                    	db	DFTK_KW
dd08 : 01                    	db	DFTK_KW
dd09 : 01                    	db	DFTK_KW
dd0a : 01                    	db	DFTK_KW
dd0b : 01                    	db	DFTK_KW
dd0c : 01                    	db	DFTK_KW
dd0d : 01                    	db	DFTK_KW
dd0e : 01                    	db	DFTK_KW
dd0f : 01                    	db	DFTK_KW
dd10 : 01                    	db	DFTK_KW
dd11 : 01                    	db	DFTK_KW
dd12 : 01                    	db	DFTK_KW
dd13 : 01                    	db	DFTK_KW
dd14 : 01                    	db	DFTK_KW
AS65 Assembler for R6502 [1.42].                                     Page  161
-------------------------------- bank\bank0.s --------------------------------

dd15 : 01                    	db	DFTK_KW
dd16 : 01                    	db	DFTK_KW
dd17 : 01                    	db	DFTK_KW
dd18 : 01                    	db	DFTK_KW
dd19 : 01                    	db	DFTK_KW
dd1a : 01                    	db	DFTK_KW
dd1b : 01                    	db	DFTK_KW
dd1c : 01                    	db	DFTK_KW
dd1d : 01                    	db	DFTK_KW
dd1e : 01                    	db	DFTK_KW
dd1f : 01                    	db	DFTK_KW
dd20 : 01                    	db	DFTK_KW
dd21 : 01                    	db	DFTK_KW
dd22 : 01                    	db	DFTK_KW
dd23 : 01                    	db	DFTK_KW
dd24 : 01                    	db	DFTK_KW
dd25 : 01                    	db	DFTK_KW
                             ;	db	DFTK_KW
dd26 : 01                    	db	DFTK_KW
dd27 : 01                    	db	DFTK_KW
dd28 : 01                    	db	DFTK_KW
dd29 : 01                    	db	DFTK_KW
dd2a : 01                    	db	DFTK_KW
dd2b : 01                    	db	DFTK_KW
dd2c : 01                    	db	DFTK_KW
dd2d : 01                    	db	DFTK_KW
dd2e : 01                    	db	DFTK_KW
dd2f : 01                    	db	DFTK_KW
dd30 : 01                    	db	DFTK_KW
                             
dd31 : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
dd32 : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
dd33 : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
dd34 : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
dd35 : 42                    	db 	DFTK_FN | DFTK_STR
dd36 : 42                    	db 	DFTK_FN | DFTK_STR
dd37 : 42                    	db 	DFTK_FN | DFTK_STR
dd38 : 42                    	db 	DFTK_FN | DFTK_STR
dd39 : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
dd3a : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
dd3b : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
dd3c : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
dd3d : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
dd3e : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
dd3f : 42                    	db 	DFTK_FN | DFTK_STR
dd40 : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
dd41 : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
dd42 : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
dd43 : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
dd44 : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
dd45 : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
                             	;* Operators add the order of precedence (0=high
dd46 : 38                    	db 	DFTK_OP | DFTK_INT | DFTK_BYT + 0
dd47 : 38                    	db 	DFTK_OP | DFTK_INT | DFTK_BYT + 0
dd48 : 38                    	db 	DFTK_OP | DFTK_INT | DFTK_BYT + 0
dd49 : 39                    	db 	DFTK_OP | DFTK_INT | DFTK_BYT + 1
dd4a : 39                    	db 	DFTK_OP | DFTK_INT | DFTK_BYT + 1
dd4b : 3e                    	db 	DFTK_OP | DFTK_STROP | DFTK_INT | DFTK_BYT +
dd4c : 3a                    	db 	DFTK_OP | DFTK_INT | DFTK_BYT + 2
                             
dd4d : 3d                    	db 	DFTK_OP | DFTK_INT | DFTK_BYT + 5
dd4e : 3d                    	db 	DFTK_OP | DFTK_INT | DFTK_BYT + 5
AS65 Assembler for R6502 [1.42].                                     Page  162
-------------------------------- bank\bank0.s --------------------------------

dd4f : 3d                    	db 	DFTK_OP | DFTK_INT | DFTK_BYT + 5
dd50 : 3c                    	db 	DFTK_OP | DFTK_INT | DFTK_BYT + 4
dd51 : 3c                    	db 	DFTK_OP | DFTK_INT | DFTK_BYT + 4
dd52 : 3c                    	db 	DFTK_OP | DFTK_INT | DFTK_BYT + 4
dd53 : 3c                    	db 	DFTK_OP | DFTK_INT | DFTK_BYT + 4
dd54 : 3c                    	db 	DFTK_OP | DFTK_INT | DFTK_BYT + 4
dd55 : 3f                    	db 	DFTK_OP | DFTK_INT | DFTK_BYT + 7
                             
                             
                             	
                             	
                             	
                             	
                             
                             	include "dflat/toksubs.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  TOKSUBS.S
                             ;*  Module that implements the tokenisation of ke
                             ;*  When a line is being parsed, the index of the
                             ;*  found in the symbol table is used to call a r
                             ;*  here.  The job of a routine here is then to f
                             ;*  parse the raw input e.g. a command that takes
                             ;*  parameters, need to do what it needs to ident
                             ;*  Despite the number of keywords in dflat, this
                             ;*  anywhere near the size of rtsubs.s (the runti
                             ;*  equivalent of this) because there is so much 
                             ;*  synactically.
                             ;*  The tokenised output is put in to its own buf
                             ;*  if the whole input was tokenised successfully
                             ;*  dflat will either try and execute (if in imme
                             ;*  mode), or save it to program memory in line n
                             ;*  order.
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code  
                             
dd56 :                       mod_sz_toksubs_s
                             
                             ;* General routine to tokenise a mandatory variab
dd56 :                       df_tk_variable
dd56 : 2004d7           [ 6] 	jsr df_tk_skip_ws
                             	; tokenise a variable
dd59 : 20a2d6           [ 6] 	jsr df_tk_peek_buf
dd5c : 20ebd6           [ 6] 	jsr df_tk_isalpha
dd5f : 9013             [ 3] 	bcc df_tk_error
dd61 : a900             [ 2] 	lda #0
dd63 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Parse assignment preamble
                             ;****************************************
dd64 :                       df_tk_preassign
                             	; Put assignment token
AS65 Assembler for R6502 [1.42].                                     Page  163
-------------------------------- bank\bank0.s --------------------------------

                             	; assume its a numeric int for now
dd64 : a980             [ 2] 	lda #0x80
dd66 : 20b3d6           [ 6] 	jsr df_tk_put_tok
                             	
                             	; first find or create a variable
dd69 : 2056dd           [ 6] 	jsr df_tk_variable
dd6c : 20ded7           [ 6] 	jsr df_tk_var
                             	; next char should be '='
dd6f : a93d             [ 2] 	lda #'='
dd71 : 4c33d7           [ 3] 	jmp df_tk_expect_tok_err
                             
dd74 :                       df_tk_error
                             	SWBRK DFERR_SYNTAX
                             
                             
                             ;****************************************
                             ;* Parse numeric assignment
                             ;****************************************
dd76 :                       df_tk_assign
dd76 : 2064dd           [ 6] 	jsr df_tk_preassign
                             	; tokenise an expression (int or byte)
dd79 : 2025d9           [ 6] 	jsr df_tk_expression
dd7c : b0f6             [ 3] 	bcs df_tk_error
dd7e : 60               [ 6] 	rts
                             
dd7f :                       df_tk_comment
                             	; copy all subsequent chars to token
dd7f : 20a8d6           [ 6] 	jsr df_tk_get_buf
dd82 : f006             [ 3] 	beq df_tk_comment_done
dd84 : 20b3d6           [ 6] 	jsr df_tk_put_tok
dd87 : 4c7fdd           [ 3] 	jmp df_tk_comment
dd8a :                       df_tk_comment_done
dd8a : 18               [ 2] 	clc
dd8b : 60               [ 6] 	rts
                             
                             ; Utility to get procedure name with _
dd8c :                       df_tk_listp_procname
                             	; try and find the first proc
dd8c : a95f             [ 2] 	lda #'_'
dd8e : 2028d7           [ 6] 	jsr df_tk_expect_tok
dd91 : b01a             [ 3] 	bcs df_tk_listp_procname_err
                             	; now get first alpha then all alphanum
dd93 : 20a2d6           [ 6] 	jsr df_tk_peek_buf
dd96 : 20ebd6           [ 6] 	jsr df_tk_isalpha
dd99 : 9012             [ 3] 	bcc df_tk_listp_procname_err
dd9b :                       df_tk_listp_procname_ch
dd9b : 20a2d6           [ 6] 	jsr df_tk_peek_buf
dd9e : 20f8d6           [ 6] 	jsr df_tk_isalphanum
dda1 : 9009             [ 3] 	bcc df_tk_listp_procname_ok
dda3 : 20a8d6           [ 6] 	jsr df_tk_get_buf
dda6 : 20b3d6           [ 6] 	jsr df_tk_put_tok
dda9 : 4c9bdd           [ 3] 	jmp df_tk_listp_procname_ch
ddac :                       df_tk_listp_procname_ok
ddac : 60               [ 6] 	rts		; C=0
ddad :                       df_tk_listp_procname_err
ddad : 38               [ 2] 	sec
ddae : 60               [ 6] 	rts
                             
                             ; list		: list whole program
                             ; list n	: list line n to end
                             ; list *	: list all procedures
                             ; list _proc: list _proc lines
AS65 Assembler for R6502 [1.42].                                     Page  164
-------------------------------- bank\bank0.s --------------------------------

ddaf :                       df_tk_list
ddaf : 208cdd           [ 6] 	jsr df_tk_listp_procname
ddb2 : 900b             [ 3] 	bcc df_tk_list_done
                             	; if not found try '*' or normal list
ddb4 :                       df_tk_list_procs
                             	; first try for list symbol
ddb4 : a92a             [ 2] 	lda #'*'
ddb6 : 2028d7           [ 6] 	jsr df_tk_expect_tok
ddb9 : 9004             [ 3] 	bcc df_tk_list_done
                             	; else normal line number or nothing
ddbb :                       df_tk_list_line
                             	; tokenise an expression, nothing is ok
ddbb : 2025d9           [ 6] 	jsr df_tk_expression
ddbe : 18               [ 2] 	clc
ddbf :                       df_tk_list_done
ddbf : 60               [ 6] 	rts
                             
                             ; printat,print,println can have 0,1 or many expr
ddc0 :                       df_tk_printat
                             	; Must get 2 parms for x,y
ddc0 : 2071de           [ 6] 	jsr df_tk_2parms
                             	; try getting more parms
ddc3 : 4cd2dd           [ 3] 	jmp df_tk_expr_more
ddc6 :                       df_tk_println
ddc6 :                       df_tk_print
                             	; tokenise an expression ok if null
ddc6 : 2025d9           [ 6] 	jsr df_tk_expression
ddc9 : 9007             [ 3] 	bcc df_tk_expr_more
ddcb :                       df_tk_print_done
ddcb :                       df_tk_data_done
ddcb : 18               [ 2] 	clc
ddcc : 60               [ 6] 	rts
                             
                             ; these must have 1 or more expressions
ddcd :                       df_tk_data
ddcd :                       df_tk_asm_db
ddcd :                       df_tk_asm_dw
ddcd :                       df_tk_next_expr
                             	; tokenise an expression
ddcd : 2025d9           [ 6] 	jsr df_tk_expression
ddd0 : b065             [ 4] 	bcs df_tk_error2
                             ; this loop keeps processing comma seprated exore
ddd2 :                       df_tk_expr_more
                             	; is there more to come?
ddd2 : a92c             [ 2] 	lda #','
ddd4 : 2028d7           [ 6] 	jsr df_tk_expect_tok
ddd7 : b0f2             [ 3] 	bcs df_tk_data_done
ddd9 : 90f2             [ 3] 	bcc df_tk_next_expr
                             
dddb :                       df_tk_input
dddb : 2004d7           [ 6] 	jsr df_tk_skip_ws
                             	; tokenise a variable
ddde : 2056dd           [ 6] 	jsr df_tk_variable
dde1 : 4cded7           [ 3] 	jmp df_tk_var
                             	
dde4 :                       df_tk_read
                             	; tokenise a variable
dde4 : 2056dd           [ 6] 	jsr df_tk_variable
dde7 : 20ded7           [ 6] 	jsr df_tk_var
                             	; if not at the end then keep going
ddea : a92c             [ 2] 	lda #','
ddec : 2028d7           [ 6] 	jsr df_tk_expect_tok
AS65 Assembler for R6502 [1.42].                                     Page  165
-------------------------------- bank\bank0.s --------------------------------

ddef : 90f3             [ 3] 	bcc df_tk_read
ddf1 : 18               [ 2] 	clc
ddf2 : 60               [ 6] 	rts
                             
ddf3 :                       df_tk_dim
                             	; tokenise a variable
ddf3 : 2056dd           [ 6] 	jsr df_tk_variable
ddf6 : 2026d8           [ 6] 	jsr df_tk_arrvar
                             	; if not at the end then keep going
ddf9 : a92c             [ 2] 	lda #','
ddfb : 2028d7           [ 6] 	jsr df_tk_expect_tok
ddfe : 90f3             [ 3] 	bcc df_tk_dim
de00 : 18               [ 2] 	clc
de01 : 60               [ 6] 	rts
                             
de02 :                       df_tk_local
                             	; tokenise a variable
de02 : 2056dd           [ 6] 	jsr df_tk_variable
de05 : 2010d8           [ 6] 	jsr df_tk_localvar
                             	; if not at the end then keep going
de08 : a92c             [ 2] 	lda #','
de0a : 2028d7           [ 6] 	jsr df_tk_expect_tok
de0d : 90f3             [ 3] 	bcc df_tk_local
de0f : 18               [ 2] 	clc
de10 : 60               [ 6] 	rts
                             
                             ; A = 0 : Def
                             ; A = 1 : Call
de11 :                       df_tk_def
de11 : a900             [ 2] 	lda #0
de13 : 4c31d8           [ 3] 	jmp df_tk_proc
                             
                             ; syntax : for a=1,10,1
de16 :                       df_tk_for
de16 : 2004d7           [ 6] 	jsr df_tk_skip_ws
                             
                             	; tokenise the for variable
de19 : a901             [ 2] 	lda #DFVVT_INT
de1b : 20ded7           [ 6] 	jsr df_tk_var
                             
                             	; always expect '='
                             	; then starting value
de1e : a93d             [ 2] 	lda #'='
de20 : 2031d9           [ 6] 	jsr df_tk_tok_expression
                             	
                             	; always expect ',' separator
                             	; then ending value
de23 : a92c             [ 2] 	lda #','
de25 : 2031d9           [ 6] 	jsr df_tk_tok_expression
                             
                             	; always expect ',' separator
                             	; then step value
de28 : a92c             [ 2] 	lda #','
de2a : 4c31d9           [ 3] 	jmp df_tk_tok_expression
                             
                             	
                             ; call to proc should not occur by itself
de2d :                       df_tk_callproc
de2d : 38               [ 2] 	sec
de2e : 60               [ 6] 	rts
                             
                             ; timer reset expects an int variable only
AS65 Assembler for R6502 [1.42].                                     Page  166
-------------------------------- bank\bank0.s --------------------------------

de2f :                       df_tk_reset
de2f : 2004d7           [ 6] 	jsr df_tk_skip_ws
                             
                             	; tokenise a variable
de32 : a901             [ 2] 	lda #DFVVT_INT
de34 : 4cded7           [ 3] 	jmp df_tk_var
                             
de37 :                       df_tk_error2
                             	SWBRK DFERR_SYNTAX
                             
                             
                             ; These functions expect 1 parmeter
de39 :                       df_tk_len
de39 :                       df_tk_chr
de39 :                       df_tk_get
de39 :                       df_tk_deek
de39 :                       df_tk_vpeek
de39 :                       df_tk_peek
de39 :                       df_tk_mem
de39 :                       df_tk_rnd
de39 :                       df_tk_hex
de39 :                       df_tk_asc
de39 :                       df_tk_val
de39 :                       df_tk_sprhit
de39 :                       df_tk_sgn
de39 : 2025d9           [ 6] 	jsr df_tk_expression
de3c : b0f9             [ 3] 	bcs df_tk_error2
de3e :                       df_tk_closebrkt
de3e :                       df_tk_stick				; This function needs no parms
de3e : a929             [ 2] 	lda #')'
de40 : 4c33d7           [ 3] 	jmp df_tk_expect_tok_err
                             
                             ; These function expect a variable only
de43 :                       df_tk_addr
de43 :                       df_tk_elapsed
de43 : 2056dd           [ 6] 	jsr df_tk_variable
de46 : 20ded7           [ 6] 	jsr df_tk_var
                             	; must have close braket
de49 : 4c3ede           [ 3] 	jmp df_tk_closebrkt
                             
                             ; These functions expect 2 parameters
de4c :                       df_tk_left
de4c :                       df_tk_right
de4c :                       df_tk_scrn
de4c :                       df_tk_pixel
de4c : 2071de           [ 6] 	jsr df_tk_2parms
de4f : 4c3ede           [ 3] 	jmp df_tk_closebrkt
                             
                             ; These functions expect 3 parameters
de52 :                       df_tk_mid
de52 : 207bde           [ 6] 	jsr df_tk_3parms
de55 : 4c3ede           [ 3] 	jmp df_tk_closebrkt
                             
                             ; These functions expect 4 parameters
de58 :                       df_tk_call
de58 : 2071de           [ 6] 	jsr df_tk_2parms
de5b : a92c             [ 2] 	lda #','
de5d : 2033d7           [ 6] 	jsr df_tk_expect_tok_err
de60 : 2071de           [ 6] 	jsr df_tk_2parms
de63 : 4c3ede           [ 3] 	jmp df_tk_closebrkt
                             
                             ;all these commands require no parameters
AS65 Assembler for R6502 [1.42].                                     Page  167
-------------------------------- bank\bank0.s --------------------------------

de66 :                       df_tk_else
de66 :                       df_tk_endif
de66 :                       df_tk_enddef
de66 :                       df_tk_abort
de66 :                       df_tk_repeat
de66 :                       df_tk_next
de66 :                       df_tk_wend
de66 :                       df_tk_run
de66 :                       df_tk_dir
de66 :                       df_tk_cls
de66 :                       df_tk_new
de66 :                       df_tk_mult
de66 :                       df_tk_div
de66 :                       df_tk_mod
de66 :                       df_tk_asl
de66 :                       df_tk_lsr
de66 :                       df_tk_add
de66 :                       df_tk_sub
de66 :                       df_tk_and
de66 :                       df_tk_or
de66 :                       df_tk_eor
de66 :                       df_tk_lte
de66 :                       df_tk_lt
de66 :                       df_tk_gte
de66 :                       df_tk_gt
de66 :                       df_tk_ne
de66 :                       df_tk_eq
de66 :                       df_tk_monitor
de66 :                       df_tk_sprupd
de66 :                       df_tk_sprinit
de66 :                       df_tk_text
de66 :                       df_tk_hires
de66 : 18               [ 2] 	clc
de67 : 60               [ 6] 	rts
                             
                             ; 0 or 1 parameter special!
de68 :                       df_tk_return
de68 : 4c25d9           [ 3] 	jmp df_tk_expression
                             
                             
                             ; These commands expect 1 parameter	
de6b :                       df_tk_while
de6b :                       df_tk_until
de6b :                       df_tk_if
de6b :                       df_tk_elseif
de6b :                       df_tk_wait
de6b :                       df_tk_cursor
de6b :                       df_tk_del
de6b :                       df_tk_chdir
de6b :                       df_tk_load
de6b :                       df_tk_save
de6b :                       df_tk_tload
de6b :                       df_tk_tsave
de6b :                       df_tk_pixmode
de6b :                       df_tk_ink
de6b :                       df_tk_paper
de6b :                       df_tk_himem
                             
de6b :                       df_tk_asm_org
de6b :                       df_tk_asm_opt
de6b :                       df_tk_asm_ds
                             
AS65 Assembler for R6502 [1.42].                                     Page  168
-------------------------------- bank\bank0.s --------------------------------

                             	; first parm
de6b : 2025d9           [ 6] 	jsr df_tk_expression
de6e : b0c7             [ 3] 	bcs df_tk_error2
de70 : 60               [ 6] 	rts
                             
                             ; These commands expect 2 numeric parameters
de71 :                       df_tk_poke
de71 :                       df_tk_doke
de71 :                       df_tk_point
de71 :                       df_tk_sprchar
de71 :                       df_tk_sprmulti
de71 :                       df_tk_bload
de71 :                       df_tk_lineto
de71 :                       df_tk_2parms
                             	; first parm
de71 : 2025d9           [ 6] 	jsr df_tk_expression
de74 : b0c1             [ 3] 	bcs df_tk_error2
                             	; tokenise second parm
de76 : a92c             [ 2] 	lda #','
de78 : 4c31d9           [ 3] 	jmp df_tk_tok_expression
                             
                             ; these commands expect 3 numeric parameters
de7b :                       df_tk_hchar
de7b :                       df_tk_plot
de7b :                       df_tk_circle
de7b :                       df_tk_sound
de7b :                       df_tk_colour
de7b :                       df_tk_spritepos
de7b :                       df_tk_renum
de7b :                       df_tk_sprpos
de7b :                       df_tk_bsave
de7b :                       df_tk_3parms
de7b : 2071de           [ 6] 	jsr df_tk_2parms
                             	; tokenise third parm
de7e : a92c             [ 2] 	lda #','
de80 : 4c31d9           [ 3] 	jmp df_tk_tok_expression
                             
                             ; these commands expect 4 numeric parameters
de83 :                       df_tk_play
de83 :                       df_tk_music
de83 :                       df_tk_line
de83 :                       df_tk_4parms
de83 : 2071de           [ 6] 	jsr df_tk_2parms
de86 : a92c             [ 2] 	lda #','
de88 : 2033d7           [ 6] 	jsr df_tk_expect_tok_err
de8b : 4c71de           [ 3] 	jmp df_tk_2parms
                             
                             ;df_tk_fill
                             ;df_tk_5parms
                             ;	jsr df_tk_3parms
                             ;	lda #','
                             ;	jsr df_tk_expect_tok_err
                             ;	jmp df_tk_2parms
                             
de8e :                       mod_sz_toksubs_e
                             
                             
de8e :                       mod_sz_tokenise_e
                             
                             
                             
                             	include "dflat/progedit.s"
AS65 Assembler for R6502 [1.42].                                     Page  169
-------------------------------- bank\bank0.s --------------------------------

                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  PROGEDIT.S
                             ;*  dflat module to enable editing of a dflat pro
                             ;*  dflat bascially starts here - waiting for use
                             ;*  when a line is entered, if it is not preceede
                             ;*  line number it is tokenised and attempted to 
                             ;*  immediatly.  If it is preceeded by a line num
                             ;*  number is used to save the tokenised line in 
                             ;*  position in memory.
                             ;*  So this is just like a good old editing sessi
                             ;*  nearly any common flavour of 80s basic. Howev
                             ;*  tokenises everything except whitespace and st
                             ;*  constants - even when saving.  Unlike my trus
                             ;*  where I could type in any garbage and it woul
                             ;*  saved with the line number, dflat needs to be
                             ;*  tokenise the line.  So it's actually a bit mo
                             ;*  Atari 8 bit BASIC.
                             ;*
                             ;************************************************
                             
de8e :                       mod_sz_progedit_s
                             
                             ;****************************************
                             ;* df_pg_find_line
                             ;* Find a line number in X(L), A(H)
                             ;* Return X(L), A(H) of line, Y = Length
                             ;* C=1 Exact match not found, C=0 Exact Found
                             ;* If not exact match then next highest line addr
                             ;* Will be in X and A
                             ;****************************************
de8e :                       df_pg_find_line
de8e : 863d             [ 3] 	stx num_a
de90 : 853e             [ 3] 	sta num_a+1
de92 : a565             [ 3] 	lda df_prgstrt
de94 : 8549             [ 3] 	sta num_tmp
de96 : a566             [ 3] 	lda df_prgstrt+1
de98 : 854a             [ 3] 	sta num_tmp+1
de9a :                       df_pg_check_next_line
de9a : a549             [ 3] 	lda num_tmp
de9c : c567             [ 3] 	cmp df_prgend
de9e : d011             [ 3] 	bne df_pg_check_line
dea0 : a54a             [ 3] 	lda num_tmp+1
dea2 : c568             [ 3] 	cmp df_prgend+1
dea4 : d00b             [ 3] 	bne df_pg_check_line
dea6 :                       df_pr_line_gt_target	
                             	; End of program or line > target
                             	; X,A = address of finish
                             	; Load Y with the length
dea6 : a200             [ 2] 	ldx #0
dea8 : a149             [ 6] 	lda (num_tmp,x)
deaa : a8               [ 2] 	tay
deab : a649             [ 3] 	ldx num_tmp
dead : a54a             [ 3] 	lda num_tmp+1
deaf : 38               [ 2] 	sec
deb0 : 60               [ 6] 	rts
AS65 Assembler for R6502 [1.42].                                     Page  170
-------------------------------- bank\bank0.s --------------------------------

deb1 :                       df_pg_check_line
deb1 : 38               [ 2] 	sec					; Do a trial subtract of
deb2 : a001             [ 2] 	ldy #DFTK_LINNUM	; target - line
deb4 : a53d             [ 3] 	lda num_a
deb6 : f149             [ 5] 	sbc (num_tmp),y
deb8 : 854b             [ 3] 	sta num_tmp+2		; Partial result of sbc
deba : c8               [ 2] 	iny
debb : a53e             [ 3] 	lda num_a+1
debd : f149             [ 5] 	sbc (num_tmp),y
debf : 054b             [ 3] 	ora num_tmp+2		; or with partial result for z ch
                             	; If C=0 then line > target (done)
dec1 : 90e3             [ 3] 	bcc df_pr_line_gt_target
                             	; If partial result Z=0 then got an exact match
dec3 : f00f             [ 3] 	beq df_pr_line_match
                             	; Else we go to next line
dec5 : a200             [ 2] 	ldx #0
dec7 : 18               [ 2] 	clc
dec8 : a549             [ 3] 	lda num_tmp
deca : 6149             [ 6] 	adc (num_tmp,x)
decc : 8549             [ 3] 	sta num_tmp
dece : 90ca             [ 3] 	bcc df_pg_check_next_line
ded0 : e64a             [ 5] 	inc num_tmp+1
ded2 : d0c6             [ 3] 	bne df_pg_check_next_line	; Always
ded4 :                       df_pr_line_match
ded4 : a200             [ 2] 	ldx #0
ded6 : a149             [ 6] 	lda (num_tmp,x)
ded8 : a8               [ 2] 	tay
ded9 : a649             [ 3] 	ldx num_tmp
dedb : a54a             [ 3] 	lda num_tmp+1
dedd : 18               [ 2] 	clc
dede : 60               [ 6] 	rts
                             	
                             ;****************************************
                             ;* df_pg_insert_block
                             ;* Insert a block at adr (X, A) of size Y
                             ;* df_prgend updated
                             ;* C=1 Error, C=0 Ok
                             ;****************************************
dedf :                       df_pg_insert_block
                             	; Inserting requires a block copy from
                             	; end of program space to the insert address
                             	
                             	; Save address as this is the lowest address
dedf : 863d             [ 3] 	stx num_a
dee1 : 853e             [ 3] 	sta num_a+1
                             	; End of program space is the first byte to move
dee3 : a567             [ 3] 	lda df_prgend
dee5 : 8545             [ 3] 	sta num_x
dee7 : a568             [ 3] 	lda df_prgend+1
dee9 : 8546             [ 3] 	sta num_x+1	
deeb :                       df_pg_insert_byte
                             	; Move a byte from the current top
deeb : a200             [ 2] 	ldx #0
deed : a145             [ 6] 	lda (num_x,x)
                             	; To the new top (+Y)
deef : 9145             [ 5] 	sta (num_x),y
                             	; Compare current address with lowest
def1 : a545             [ 3] 	lda num_x
def3 : c53d             [ 3] 	cmp num_a
def5 : d012             [ 4] 	bne df_pg_insert_next_byte
def7 : a546             [ 3] 	lda num_x+1
def9 : c53e             [ 3] 	cmp num_a+1
AS65 Assembler for R6502 [1.42].                                     Page  171
-------------------------------- bank\bank0.s --------------------------------

defb : d00c             [ 4] 	bne df_pg_insert_next_byte
                             	; Finished, update program end pointer
defd : 18               [ 2] 	clc
defe : 98               [ 2] 	tya
deff : 6567             [ 3] 	adc df_prgend
df01 : 8567             [ 3] 	sta df_prgend
                             	_bcc 2
                             
df05 : e668             [ 5] 	inc df_prgend+1
df07 : 18               [ 2] 	clc
df08 : 60               [ 6] 	rts	; C=0
df09 :                       df_pg_insert_next_byte
                             	; Decrement current address (trashes A)
                             	_decZPWordA num_x
                             
df11 : 4cebde           [ 3] 	jmp df_pg_insert_byte
                             
                             ;****************************************
                             ;* df_pg_delete_block
                             ;* Delete a block at adr (X, A) of size Y
                             ;* df_prgend updated
                             ;* C=1 Error, C=0 Ok
                             ;****************************************
df14 :                       df_pg_delete_block
                             	; Deleting requires a block copy from
                             	; deletion address to end of program
                             	
                             	; Save address as this is the start address
df14 : 863d             [ 3] 	stx num_a
df16 : 853e             [ 3] 	sta num_a+1
df18 : a200             [ 2] 	ldx #0	; No indirect indexing
df1a :                       df_pg_delete_byte
                             	; Move a byte from current+Y
df1a : b13d             [ 5] 	lda (num_a),y
                             	; Down to current (x=0)
df1c : 813d             [ 6] 	sta (num_a,x)
                             	; Compare current address with lowest
df1e : a53d             [ 3] 	lda num_a
df20 : c567             [ 3] 	cmp df_prgend
df22 : d017             [ 3] 	bne df_pg_delete_next_byte
df24 : a53e             [ 3] 	lda num_a+1
df26 : c568             [ 3] 	cmp df_prgend+1
df28 : d011             [ 3] 	bne df_pg_delete_next_byte
                             	; Finished, update program end pointer
df2a : 843d             [ 3] 	sty num_a
df2c : 38               [ 2] 	sec
df2d : a567             [ 3] 	lda df_prgend
df2f : e53d             [ 3] 	sbc num_a
df31 : 8567             [ 3] 	sta df_prgend
df33 : a568             [ 3] 	lda df_prgend+1
df35 : e900             [ 2] 	sbc #0
df37 : 8568             [ 3] 	sta df_prgend+1
df39 : 18               [ 2] 	clc
df3a : 60               [ 6] 	rts
df3b :                       df_pg_delete_next_byte
                             	; Increment current address
                             	_incZPWord num_a
                             
df41 : 4c1adf           [ 3] 	jmp df_pg_delete_byte
                             
                             
                             ;****************************************
AS65 Assembler for R6502 [1.42].                                     Page  172
-------------------------------- bank\bank0.s --------------------------------

                             ;* Get a line of input
                             ;* Input: C=1 for echo, 0 for no echo
                             ;* Output: C=0 means linbuff is valid
                             ;****************************************
df44 :                       df_pg_inputline
                             	; C is set on input for echo or not
                             	; Read a line of input
df44 : 2069c4           [ 6] 	jsr io_read_line
                             	
                             	; If nothing entered then sec
df47 : 98               [ 2] 	tya
df48 : d002             [ 3] 	bne df_pg_inputline_ok
df4a : 38               [ 2] 	sec
df4b : 60               [ 6] 	rts
df4c :                       df_pg_inputline_ok
                             	; Copy input bytes to line buffer
                             	; for lexical analysis
df4c :                       df_pg_copyinputtolinbuff
df4c : b139             [ 5] 	lda (buf_lo),y
df4e : 990004           [ 5] 	sta df_linbuff,y
df51 : 88               [ 2] 	dey
df52 : 10f8             [ 3] 	bpl df_pg_copyinputtolinbuff
df54 : 18               [ 2] 	clc
df55 : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* df_pg_dflat
                             ;* Start a dflat editing session
                             ;****************************************
df56 :                       df_pg_dflat
                             	; reset stack pointer
df56 : a2ff             [ 2] 	ldx #255
df58 : 9a               [ 2] 	txs
                             
                             	; error handler address
df59 : a998             [ 2] 	lda #lo(df_trap_error)
df5b : 8560             [ 3] 	sta df_pc
df5d : a9f7             [ 2] 	lda #hi(df_trap_error)
df5f : 8561             [ 3] 	sta df_pc+1
                             	
                             	; make sure normal I/O is resumed
                             	;jsr io_init_default
df61 :                       df_pg_prompt
df61 : a2f8             [ 2] 	ldx #lo(df_pg_prompt_msg)
df63 : a9df             [ 2] 	lda #hi(df_pg_prompt_msg)
df65 : 20a2c4           [ 6] 	jsr io_print_line
df68 : a900             [ 2] 	lda #0
df6a : 855e             [ 3] 	sta df_immed
df6c :                       df_pg_getcommand
                             	; current line is the token buffer when editing
df6c : a980             [ 2] 	lda #lo(df_tokbuff)
df6e : 8586             [ 3] 	sta df_currlin
df70 : a904             [ 2] 	lda #hi(df_tokbuff)
df72 : 8587             [ 3] 	sta df_currlin+1
df74 : 38               [ 2] 	sec
df75 : 2044df           [ 6] 	jsr df_pg_inputline
df78 : b0e7             [ 3] 	bcs df_pg_prompt	; If no input then back to prom
df7a : 2095df           [ 6] 	jsr df_pg_tokenise
df7d : a55e             [ 3] 	lda df_immed
df7f : f0eb             [ 3] 	beq df_pg_getcommand
                             	; clear variables ready to run the statement
AS65 Assembler for R6502 [1.42].                                     Page  173
-------------------------------- bank\bank0.s --------------------------------

df81 : 20ffdf           [ 6] 	jsr df_initrun
                             	; run from tokbuff
df84 : a280             [ 2] 	ldx #lo(df_tokbuff)
df86 : a904             [ 2] 	lda #hi(df_tokbuff)
                             	; always skip length and line number
df88 : a003             [ 2] 	ldy #3
df8a : 8488             [ 3] 	sty df_exeoff
                             	; init currlin
df8c : 2075e3           [ 6] 	jsr df_rt_init_stat_ptr
                             	; start execution
df8f : 2088e3           [ 6] 	jsr df_rt_exec_stat
                             	; Go and get another line of input
df92 : 4c61df           [ 3] 	jmp df_pg_prompt
                             
                             	; tokenise the line
df95 :                       df_pg_tokenise
df95 : a900             [ 2] 	lda #0
df97 : 855d             [ 3] 	sta errno
df99 : 2069d9           [ 6] 	jsr df_lexer_line
                             	; check if line number == 0
df9c : ad8104           [ 4] 	lda df_tokbuff+DFTK_LINNUM
df9f : d00f             [ 3] 	bne df_pg_line_number
dfa1 : ad8204           [ 4] 	lda df_tokbuff+DFTK_LINNUM+1
dfa4 : d00a             [ 3] 	bne df_pg_line_number
                             	; check if line empty
dfa6 : ad8004           [ 4] 	lda df_tokbuff
dfa9 : f004             [ 3] 	beq df_pg_nothing
                             	
                             	; line number == 0 so in immediate mode from tok
                             	; don't zero out the line length as some routine
                             	; run the line in immediate mode
dfab : a901             [ 2] 	lda #1
dfad : 855e             [ 3] 	sta df_immed
dfaf :                       df_pg_nothing
dfaf : 60               [ 6] 	rts
                             
                             	; put the numbered line in to the right bit of m
dfb0 :                       df_pg_line_number
                             	; Check if this line exists
dfb0 : ad8104           [ 4] 	lda df_tokbuff+DFTK_LINNUM
dfb3 : aa               [ 2] 	tax
dfb4 : ad8204           [ 4] 	lda df_tokbuff+DFTK_LINNUM+1
dfb7 : 208ede           [ 6] 	jsr df_pg_find_line
                             	; Save line address for later X then A
dfba : 8538             [ 3] 	sta tmp_d
dfbc : 8a               [ 2] 	txa
dfbd : 48               [ 3] 	pha
dfbe : a538             [ 3] 	lda tmp_d
dfc0 : 48               [ 3] 	pha
                             	; If line exists then it needs deleting
dfc1 : b003             [ 3] 	bcs df_pg_skip_del_line
                             
                             	; delete line from program
dfc3 : 2014df           [ 6] 	jsr df_pg_delete_block
dfc6 :                       df_pg_skip_del_line
                             	; If line length is zero
                             	; then nothing else to do (i.e. line was deleted
dfc6 : ad8004           [ 4] 	lda df_tokbuff+DFTK_LINLEN
                             	; save the tokenised line length
dfc9 : 48               [ 3] 	pha
dfca : d004             [ 3] 	bne df_pg_insertline
                             	; Length was zero, so get temp stuff off stack
AS65 Assembler for R6502 [1.42].                                     Page  174
-------------------------------- bank\bank0.s --------------------------------

dfcc : 68               [ 4] 	pla
dfcd : 68               [ 4] 	pla
dfce : 68               [ 4] 	pla
dfcf : 60               [ 6] 	rts
                             
                             	; insert a program line unless it is immediate
dfd0 :                       df_pg_insertline
                             	; Restore previously saved length
dfd0 : 68               [ 4] 	pla
dfd1 : a8               [ 2] 	tay
                             	; Restore previously saved address to reinsert t
dfd2 : 68               [ 4] 	pla
dfd3 : 8538             [ 3] 	sta tmp_d
dfd5 : 68               [ 4] 	pla
dfd6 : aa               [ 2] 	tax
dfd7 : a538             [ 3] 	lda tmp_d
                             	; And save it all back to stack again A,X,Y
                             	_pushAXY
                             
                             	; We now have insert address and length
dfe2 : 20dfde           [ 6] 	jsr df_pg_insert_block
                             	; Restore length and sub 1 to get index in to th
dfe5 : 68               [ 4] 	pla
dfe6 : a8               [ 2] 	tay
dfe7 : 88               [ 2] 	dey
                             	; Restore address to a pointer, X is pulled firs
dfe8 : 68               [ 4] 	pla
dfe9 : aa               [ 2] 	tax
dfea : 863d             [ 3] 	stx num_a
dfec : 68               [ 4] 	pla
dfed : 853e             [ 3] 	sta num_a+1
                             	; num_a is destination, tokbuff is source, Y is 
dfef :                       df_pg_insertlinbyte
dfef : b98004           [ 4] 	lda df_tokbuff,y
dff2 : 913d             [ 5] 	sta (num_a),y
dff4 : 88               [ 2] 	dey
dff5 : 10f8             [ 3] 	bpl df_pg_insertlinbyte
dff7 : 60               [ 6] 	rts
                             	
dff8 :                       df_pg_prompt_msg
dff8 : 52656164790d00        	db "Ready",UTF_CR,0
                             
dfff :                       mod_sz_progedit_e
                             
                             	include "dflat/runtime.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  RUNTIME.S
                             ;*  This module is the runtime coordinator.  When
                             ;*  wants to run a program, execution of statemen
                             ;*  required procedure starts and proceeds from t
                             ;*  according to normal program flow.
                             ;*  This module also contains critical routines f
                             ;*  evaluation of expressions (numeric and string
                             ;*  Whilst the code to implement a specific comma
                             ;*  rtsubs.s, this is the key module that control
AS65 Assembler for R6502 [1.42].                                     Page  175
-------------------------------- bank\bank0.s --------------------------------

                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code
                             
dfff :                       mod_sz_runtime_s
                             
                             ;****************************************
                             ;* df_initrun
                             ;* Initialise program space for runtime
                             ;****************************************
dfff :                       df_initrun
                             	; Set the key mask to check every 16 instruction
dfff : a910             [ 2] 	lda #0x10
e001 : 855c             [ 3] 	sta df_checkmsk
e003 : 855b             [ 3] 	sta df_checkkey
                             
                             	; String and array heap initialisation
                             	; Grows up from end of prog space PLUS 1
                             	; Initially empty (dim will allocate)
                             	_cpyZPWord df_prgend,df_starstrt
                             
                             	_incZPWord df_starstrt
                             
                             	_cpyZPWord df_starstrt,df_starend
                             
                             
e01b : a2ff             [ 2] 	ldx #0xff
                             	; Reset runtime stack (grows down)
e01d : 8676             [ 3] 	stx df_rtstop
                             	; make X=0
e01f : e8               [ 2] 	inx
                             	; Reset parameter stack (grows up)
e020 : 8677             [ 3] 	stx df_parmtop
                             	; Reset data pointer high byte
e022 : 8695             [ 3] 	stx df_currdat+1
                             	; if nest counter zeroed
e024 : 8693             [ 3] 	stx df_ifnest
                             
                             	; clear proc addresses
e026 : 202ae0           [ 6] 	jsr df_rt_init_vvt
                             
                             ;	clc
e029 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Initialise vvt
                             ;****************************************
e02a :                       df_rt_init_vvt
                             	; starting at beginning of vvt
                             	_cpyZPWord df_vvtend,df_tmpptra
                             
e032 : a200             [ 2] 	ldx #0
e034 :                       df_rt_init_vvt_slot
e034 : a5a1             [ 3] 	lda df_tmpptra
e036 : c56d             [ 3] 	cmp df_vvtstrt
e038 : d006             [ 3] 	bne df_rt_init_vvt_slot_undim
e03a : a5a2             [ 3] 	lda df_tmpptra+1
e03c : c56e             [ 3] 	cmp df_vvtstrt+1
e03e : f02c             [ 3] 	beq df_rt_init_done
e040 :                       df_rt_init_vvt_slot_undim
AS65 Assembler for R6502 [1.42].                                     Page  176
-------------------------------- bank\bank0.s --------------------------------

                             	; Only zero out proc and array pointers
                             	; Scalar variables are not initialised
e040 : a000             [ 2] 	ldy #0
e042 : b1a1             [ 5] 	lda (df_tmpptra),y
e044 : 29c0             [ 2] 	and #DFVVT_PROC|DFVVT_ARRY
e046 : f016             [ 3] 	beq df_rt_init_vvt_skip
                             	; skip over the first byte which is variable typ
e048 : c8               [ 2] 	iny
                             	; zero out first 3 bytes for proc and arrays
e049 : a900             [ 2] 	lda #0
e04b : 91a1             [ 5] 	sta (df_tmpptra),y
e04d : c8               [ 2] 	iny
e04e : 91a1             [ 5] 	sta (df_tmpptra),y
e050 : c8               [ 2] 	iny
e051 : 91a1             [ 5] 	sta (df_tmpptra),y
e053 : c8               [ 2] 	iny
                             	; before doing dim2 check if proc
                             	; as we don't want to erase the parm count
e054 : a1a1             [ 6] 	lda (df_tmpptra,x)
e056 : 2940             [ 2] 	and #DFVVT_PROC
e058 : d004             [ 3] 	bne df_rt_init_vvt_skip
                             	; if not proc then zero dim2
e05a : a900             [ 2] 	lda #0
e05c : 91a1             [ 5] 	sta (df_tmpptra),y
e05e :                       df_rt_init_vvt_skip
                             	; increment pointer to next slot
                             	_adcZPByte df_tmpptra,#8
                             
e069 : 4c34e0           [ 3] 	jmp df_rt_init_vvt_slot 	; Don't rely on bcc
e06c :                       df_rt_init_done
e06c : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Evaluate a numeric expression
                             ;* pop  X,A result from operator stack
                             ;****************************************
e06d :                       df_rt_getnval
                             	; evaluate the expression
e06d : 2073e0           [ 6] 	jsr df_rt_neval
                             	; get X,A off operator stack
e070 : 4c7df6           [ 3] 	jmp df_ost_popInt
                             
                             
                             ;****************************************
                             ;* Evaluate a numeric expression
                             ;* Push result to operator stack
                             ;****************************************
e073 :                       df_rt_neval
                             	; push terminator on cpu stack
                             	; so we know where we are
e073 : a900             [ 2] 	lda #0
e075 : 48               [ 3] 	pha
                             
                             	; find escape token or keyword token
                             	; if escape token push on to operand stack
                             	; if keyword token push on to operator stack
e076 :                       df_rt_neval_optk
e076 : a488             [ 3] 	ldy df_exeoff
                             	; check end of line
                             
                             ;	cpy df_eolidx
                             ;	beq df_rt_neval_process
AS65 Assembler for R6502 [1.42].                                     Page  177
-------------------------------- bank\bank0.s --------------------------------

e078 : c47f             [ 3] 	cpy df_nxtstidx
e07a : f03a             [ 3] 	beq df_rt_neval_process
e07c : b186             [ 5] 	lda (df_currlin),y		; Get the byte which could b
e07e : 3024             [ 3] 	bmi df_rt_neval_tk		; N=1 means it's a keyword t
e080 : c920             [ 2] 	cmp #DFTK_ESCVAL		; <=32 means it's an escape to
e082 : 9019             [ 3] 	bcc df_rt_neval_esc
                             	; check for evaluation terminators
                             	; specifically ',' and ']'
e084 : c92c             [ 2] 	cmp #','
e086 : f02e             [ 3] 	beq df_rt_neval_process
e088 : c95d             [ 2] 	cmp #']'
e08a : f02a             [ 3] 	beq df_rt_neval_process
                             	; check for brackets
                             	; if close bracket then process
e08c : c929             [ 2] 	cmp #')'
e08e : f026             [ 3] 	beq df_rt_neval_process
                             	; Nothing of interest matched or it's open brack
                             	; so move to next byte either way
e090 : e688             [ 5] 	inc df_exeoff				; Next byte 
                             	; if bracket then evaluate expression recursivel
e092 : c928             [ 2] 	cmp #'('
e094 : d0e0             [ 3] 	bne df_rt_neval_optk
                             	; call evaluation function recursively
e096 : 2073e0           [ 6] 	jsr df_rt_neval
                             	; move to next byte
e099 : e688             [ 5] 	inc df_exeoff
e09b : d0d9             [ 3] 	bne df_rt_neval_optk		; ALWAYS as exeoff != 0
e09d :                       df_rt_neval_esc
e09d : 20f8e0           [ 6] 	jsr df_rt_eval_esc
                             	; move to next byte
e0a0 : e688             [ 5] 	inc df_exeoff
e0a2 : d0d2             [ 3] 	bne df_rt_neval_optk		; ALWAYS as exeoff != 0
                             	; if a token then push on operator stack
e0a4 :                       df_rt_neval_tk
e0a4 : 297f             [ 2] 	and #0x7f
                             	; check if op (look up type using X as index)
                             	; X contains the current operator index
                             
e0a6 : aa               [ 2] 	tax
e0a7 : bdf3dc           [ 4] 	lda df_tk_tokentype,x
                             	; A contains token type
e0aa : 48               [ 3] 	pha
e0ab : 2908             [ 2] 	and #DFTK_OP
e0ad : d01c             [ 3] 	bne df_rt_neval_tk_opp
                             	; check if fn
e0af : 68               [ 4] 	pla
e0b0 : 2902             [ 2] 	and #DFTK_FN
e0b2 : d00c             [ 3] 	bne df_rt_neval_tk_fn
                             
                             	; If got here then something wrong
                             	SWBRK DFERR_OK
                             
                             
e0b6 :                       df_rt_neval_process
                             	; pop operator off stack and execute
                             	; keep popping until reached the terminator
e0b6 : 68               [ 4] 	pla
e0b7 : f006             [ 3] 	beq df_rt_neval_done
                             	; run the token code
e0b9 : 20eee3           [ 6] 	jsr df_rt_run_token
                             	; top two bytes on ost stack is the result
e0bc : 4cb6e0           [ 3] 	jmp df_rt_neval_process
AS65 Assembler for R6502 [1.42].                                     Page  178
-------------------------------- bank\bank0.s --------------------------------

e0bf :                       df_rt_neval_done
e0bf : 60               [ 6] 	rts
                             
e0c0 :                       df_rt_neval_tk_fn
e0c0 : 18               [ 2] 	clc
e0c1 : 8a               [ 2] 	txa
                             	; run a fn token - returns a value on stack
e0c2 : e688             [ 5] 	inc df_exeoff
e0c4 : 20eee3           [ 6] 	jsr df_rt_run_token
                             	; move to next byte
e0c7 :                       df_rt_neval_nextbyte
e0c7 : e688             [ 5] 	inc df_exeoff
e0c9 : d0ab             [ 3] 	bne df_rt_neval_optk		; ALWAYS as exeoff != 0
                             
e0cb :                       df_rt_neval_tk_opp
e0cb : 68               [ 4] 	pla				; Get A off stack which is the type
e0cc :                       df_rt_neval_tk_op
                             	; X=Op, A=Type
                             	; if this op < current top of op stack
                             	; then do the op as it is higher priority so sho
                             	; not be pushed
                             	; what is top of the op stack?
                             	; save current op token value
                             	; C=0 means process the op now, else don't
                             	; save current operator index
e0cc : 86a1             [ 3] 	stx df_tmpptra				; Index in to token table not 
                             	; mask off to keep priority
e0ce : 2907             [ 2] 	and #DFTK_OPMSK
e0d0 : 85a3             [ 3] 	sta df_tmpptrb
                             	; peek top of op stack - pull and push X
e0d2 : 68               [ 4] 	pla
e0d3 : 48               [ 3] 	pha
e0d4 : aa               [ 2] 	tax
                             	; if 0 then nothing so push op
e0d5 : f01c             [ 3] 	beq df_rt_neval_pushOp
                             	; use it to index in to type table
e0d7 : bdf3dc           [ 4] 	lda df_tk_tokentype,x
                             	; mask off to keep priority
e0da : 2907             [ 2] 	and #DFTK_OPMSK
                             	; compare with the saved token type which includ
e0dc : c5a3             [ 3] 	cmp df_tmpptrb
                             	; if top of stack >= current then C=1
                             	; else C=0
                             	; what is the state of C?
                             	; if 1 then just pushOp
e0de : f002             [ 3] 	beq df_rt_neval_donow
e0e0 : b011             [ 3] 	bcs df_rt_neval_pushOp
e0e2 :                       df_rt_neval_donow
                             	; was C=0 so process now before pushing the new 
                             	; get operator off cpu stack
e0e2 : 68               [ 4] 	pla
e0e3 : a8               [ 2] 	tay		; Save whilst need to push other things
                             	; save the current op on cpu stack
e0e4 : a5a1             [ 3] 	lda df_tmpptra
e0e6 : 48               [ 3] 	pha
e0e7 : aa               [ 2] 	tax		; X = current op
e0e8 : 98               [ 2] 	tya		; Get A back from Y (new op)
                             	; now run the token in A that came off the stack
e0e9 : 20eee3           [ 6] 	jsr df_rt_run_token
                             	; get current op off cpu stack in to X
e0ec : 68               [ 4] 	pla
e0ed : aa               [ 2] 	tax
AS65 Assembler for R6502 [1.42].                                     Page  179
-------------------------------- bank\bank0.s --------------------------------

                             	; get the token type in to A
e0ee : bdf3dc           [ 4] 	lda df_tk_tokentype,x
                             	; now go back around again to check whether to p
e0f1 : d0d9             [ 3] 	bne df_rt_neval_tk_op		; ALWAYS as type never ze
e0f3 :                       df_rt_neval_pushOp
                             	; push the operator
e0f3 : a5a1             [ 3] 	lda df_tmpptra
e0f5 : 48               [ 3] 	pha
                             	; move to next byte
e0f6 : d0cf             [ 3] 	bne df_rt_neval_nextbyte	; ALWAYS as token index
                             
                             
                             
                             
                             ; jump to escape evaluation routine
e0f8 :                       df_rt_eval_esc
e0f8 : 0a               [ 2] 	asl a
e0f9 : aa               [ 2] 	tax
e0fa : bd07e1           [ 4] 	lda df_rt_eval_esc_tab,x
e0fd : 85a1             [ 3] 	sta df_tmpptra
e0ff : bd08e1           [ 4] 	lda df_rt_eval_esc_tab+1,x
e102 : 85a2             [ 3] 	sta df_tmpptra+1
e104 : 6ca100           [ 6] 	jmp (df_tmpptra)
                             
e107 :                       df_rt_eval_esc_tab
e107 : c4e1                  	dw df_rt_eval_chr
e109 : d0e1                  	dw df_rt_eval_reserved
e10b : d0e1                  	dw df_rt_eval_reserved
e10d : d0e1                  	dw df_rt_eval_reserved
e10f : d0e1                  	dw df_rt_eval_reserved
e111 : d0e1                  	dw df_rt_eval_reserved	; no such thing as bytdec
e113 : c4e1                  	dw df_rt_eval_bythex
e115 : c4e1                  	dw df_rt_eval_bytbin
e117 : d0e1                  	dw df_rt_eval_reserved
e119 : c4e1                  	dw df_rt_eval_intdec
e11b : c4e1                  	dw df_rt_eval_inthex
e11d : c4e1                  	dw df_rt_eval_intbin
e11f : d0e1                  	dw df_rt_eval_reserved
e121 : d0e1                  	dw df_rt_eval_reserved
e123 : d0e1                  	dw df_rt_eval_reserved
e125 : d0e1                  	dw df_rt_eval_reserved
e127 : d2e1                  	dw df_rt_eval_strlit
e129 : 17e2                  	dw df_rt_eval_var
e12b : 0ae3                  	dw df_rt_eval_proc
                             
                             
                             ;****************************************
                             ;* Evaluate a string expression
                             ;* X, A = Destination is string accumulator
                             ;****************************************
e12d :                       df_rt_seval
e12d : a67a             [ 3] 	ldx df_sevalptr
e12f : a57b             [ 3] 	lda df_sevalptr+1
                             ;****************************************
                             ;* Evaluate a string expression
                             ;* X, A = Destination buffer / space
                             ;****************************************
e131 :                       df_rt_sval
                             	; keep X,A on the stack - will be modified
e131 : 8538             [ 3] 	sta tmp_d
e133 : 48               [ 3] 	pha
e134 : 8a               [ 2] 	txa
AS65 Assembler for R6502 [1.42].                                     Page  180
-------------------------------- bank\bank0.s --------------------------------

e135 : 48               [ 3] 	pha
e136 : a538             [ 3] 	lda tmp_d
                             	; push original destination
e138 : 2058f6           [ 6] 	jsr df_ost_pushStr
                             	; Push the destination to the 6502 stack
                             	; hi byte first then lo
                             	; push string idx so we know our starting positi
                             	; in the string buffer
                             	; this limits all evaluations to 255 bytes
                             ;	lda df_stridx
                             ;	jsr df_st_pushOp
                             
                             	; find escape token or keyword token
                             	; if escape token push on to operand stack
                             	; if keyword operator token push on to operator 
                             	; if keyword function token run it
                             
e13b :                       df_rt_seval_optk
e13b : a488             [ 3] 	ldy df_exeoff
                             	; check end of line
                             ;	cpy df_eolidx
                             ;	beq df_rt_seval_done
e13d : c47f             [ 3] 	cpy df_nxtstidx
e13f : f069             [ 3] 	beq df_rt_seval_done
                             
e141 : b186             [ 5] 	lda (df_currlin),y
e143 : 301c             [ 3] 	bmi df_rt_seval_tk
                             
e145 : c920             [ 2] 	cmp #DFTK_ESCVAL
e147 : 900a             [ 3] 	bcc df_rt_seval_esc
                             	; check for evaluation terminators
                             	; specifically ',' and ')'
e149 : c92c             [ 2] 	cmp #','
e14b : f05d             [ 3] 	beq df_rt_seval_done
e14d : c929             [ 2] 	cmp #')'
e14f : f059             [ 3] 	beq df_rt_seval_done
e151 : d04a             [ 3] 	bne df_rt_seval_nextbyte
e153 :                       df_rt_seval_esc
                             	; the only escape char is STRLIT, VAR or PROC
e153 : c910             [ 2] 	cmp #DFTK_STRLIT
e155 : f04b             [ 3] 	beq	df_rt_seval_esc_strlit
e157 : c911             [ 2] 	cmp #DFTK_VAR
e159 : f028             [ 3] 	beq	df_rt_seval_esc_var
e15b : c912             [ 2] 	cmp #DFTK_PROC
e15d : f049             [ 3] 	beq	df_rt_seval_esc_proc
                             
                             	; error if got here
                             	SWBRK DFERR_SYNTAX
                             
                             
                             	; if a token then push on operator stack
e161 :                       df_rt_seval_tk
e161 : 8488             [ 3] 	sty df_exeoff
e163 : 297f             [ 2] 	and #0x7f
                             	; check if op
e165 : aa               [ 2] 	tax
e166 : bdf3dc           [ 4] 	lda df_tk_tokentype,x
e169 : 2904             [ 2] 	and #DFTK_STROP
e16b : d009             [ 3] 	bne df_rt_seval_tk_op
                             	; check if fn
e16d : bdf3dc           [ 4] 	lda df_tk_tokentype,x
e170 : 2902             [ 2] 	and #DFTK_FN
AS65 Assembler for R6502 [1.42].                                     Page  181
-------------------------------- bank\bank0.s --------------------------------

e172 : d006             [ 3] 	bne df_rt_seval_tk_fn
                             
                             	; token type mismatch if got here
                             	SWBRK DFERR_TYPEMISM
                             
                             
e176 :                       df_rt_seval_tk_op
                             	; the only op is $+
                             	; so just ignore!
e176 : 8a               [ 2] 	txa
e177 : 4c9de1           [ 3] 	jmp df_rt_seval_nextbyte
                             
e17a :                       df_rt_seval_tk_fn
e17a : 8a               [ 2] 	txa
e17b : e688             [ 5] 	inc df_exeoff
e17d : 20eee3           [ 6] 	jsr df_rt_run_token
e180 : 4c87e1           [ 3] 	jmp df_rt_seval_copy
                             
e183 :                       df_rt_seval_esc_var
                             	; go process the variable as a normal RVAL
e183 : 18               [ 2] 	clc
e184 : 2017e2           [ 6] 	jsr df_rt_eval_var
                             	; copy source off rt stack to destination
e187 :                       df_rt_seval_copy
                             	; pull destination pointer
e187 : 68               [ 4] 	pla
e188 : 85a1             [ 3] 	sta df_tmpptra
e18a : 68               [ 4] 	pla
e18b : 85a2             [ 3] 	sta df_tmpptra+1
                             	; pop source string pointer off stack
e18d : 2081f6           [ 6] 	jsr df_ost_popStr
e190 : 86a3             [ 3] 	stx df_tmpptrb
e192 : 85a4             [ 3] 	sta df_tmpptrb+1
                             	; go and copy the string
e194 : 20aee1           [ 6] 	jsr df_rt_copyStr
                             	; now save the destination
e197 : a5a2             [ 3] 	lda df_tmpptra+1
e199 : 48               [ 3] 	pha
e19a : a5a1             [ 3] 	lda df_tmpptra
e19c : 48               [ 3] 	pha
                             
                             ;	jmp df_rt_seval_nextbyte
e19d :                       df_rt_seval_nextbyte
e19d : e688             [ 5] 	inc df_exeoff
e19f : 4c3be1           [ 3] 	jmp df_rt_seval_optk
                             
e1a2 :                       df_rt_seval_esc_strlit
                             	; evaluate string literal
e1a2 : 20d2e1           [ 6] 	jsr df_rt_eval_strlit
e1a5 : 4c87e1           [ 3] 	jmp df_rt_seval_copy
                             
e1a8 :                       df_rt_seval_esc_proc
                             	; not yet suported *******
                             	SWBRK DFERR_OK
                             
                             
                             	; keep going until non-ws char found or end of l
e1aa :                       df_rt_seval_done
                             	;
e1aa : 68               [ 4] 	pla
e1ab : 68               [ 4] 	pla
                             
AS65 Assembler for R6502 [1.42].                                     Page  182
-------------------------------- bank\bank0.s --------------------------------

e1ac : 18               [ 2] 	clc
e1ad : 60               [ 6] 	rts
                             
                             
                             ; Copy string from ptrb to ptra
e1ae :                       df_rt_copyStr
e1ae : a000             [ 2] 	ldy #0
e1b0 :                       df_rt_copyStr_ch
e1b0 : b1a3             [ 5] 	lda (df_tmpptrb),y
e1b2 : 91a1             [ 5] 	sta (df_tmpptra),y
e1b4 : f003             [ 3] 	beq df_rt_copyStr_done
e1b6 : c8               [ 2] 	iny
e1b7 : d0f7             [ 3] 	bne df_rt_copyStr_ch	; Always relying in Y never
e1b9 :                       df_rt_copyStr_done
e1b9 : 98               [ 2] 	tya
e1ba : 18               [ 2] 	clc
e1bb : 65a1             [ 3] 	adc df_tmpptra
e1bd : 85a1             [ 3] 	sta df_tmpptra
                             	_bcc 2
                             
e1c1 : e6a2             [ 5] 	inc df_tmpptra+1
e1c3 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Evaluate and push numeric value
                             ;****************************************
e1c4 :                       df_rt_eval_intdec
e1c4 :                       df_rt_eval_bytdec
e1c4 :                       df_rt_eval_inthex
e1c4 :                       df_rt_eval_bythex
e1c4 :                       df_rt_eval_intbin
e1c4 :                       df_rt_eval_bytbin
e1c4 :                       df_rt_eval_chr
                             	; numeric constant
e1c4 : c8               [ 2] 	iny
e1c5 : b186             [ 5] 	lda (df_currlin),y
e1c7 : aa               [ 2] 	tax
e1c8 : c8               [ 2] 	iny
e1c9 : b186             [ 5] 	lda (df_currlin),y
                             	; save offset before calling any routine
e1cb : 8488             [ 3] 	sty df_exeoff
                             	; push number on to stack
e1cd : 4c4df6           [ 3] 	jmp df_ost_pushInt
                             
e1d0 :                       df_rt_eval_reserved
                             	; should not get here
                             	SWBRK DFERR_OK
                             
                             
                             ;****************************************
                             ;* Evaluate and push string constant
                             ;****************************************
e1d2 :                       df_rt_eval_strlit
e1d2 : 8488             [ 3] 	sty df_exeoff
                             	; calculate the effective address in to AX
                             	; y + currlin
e1d4 : 98               [ 2] 	tya
                             	; set carry to add one extra
e1d5 : 38               [ 2] 	sec
e1d6 : 6586             [ 3] 	adc df_currlin
e1d8 : aa               [ 2] 	tax
e1d9 : a587             [ 3] 	lda df_currlin+1
AS65 Assembler for R6502 [1.42].                                     Page  183
-------------------------------- bank\bank0.s --------------------------------

e1db : 6900             [ 2] 	adc #0
                             
                             	; push string on to stack
e1dd : 2058f6           [ 6] 	jsr df_ost_pushStr
                             	; now proceed until end of string found
e1e0 : a488             [ 3] 	ldy df_exeoff
e1e2 :                       df_rt_eval_strlit_ch
e1e2 : b186             [ 5] 	lda (df_currlin),y
e1e4 : f003             [ 3] 	beq df_rt_eval_strlit_done
e1e6 : c8               [ 2] 	iny
e1e7 : d0f9             [ 3] 	bne df_rt_eval_strlit_ch
e1e9 :                       df_rt_eval_strlit_done	; Always relying on Y neve
e1e9 : 8488             [ 3] 	sty df_exeoff
e1eb : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Return array parameter
                             ;* A has parm
                             ;****************************************
e1ec :                       df_rt_arry_parm
                             	; move past open bracket or comma
e1ec : e688             [ 5] 	inc df_exeoff
                             	; evaluate expression inside bracket
e1ee : 206de0           [ 6] 	jsr df_rt_getnval
e1f1 : 8a               [ 2] 	txa
                             ;	clc
e1f2 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Return double array parameter
                             ;* X = dim1, Y = dim2
                             ;****************************************
e1f3 :                       df_rt_arry_parm2
                             	; go get array parm 1
e1f3 : 20ece1           [ 6] 	jsr df_rt_arry_parm
e1f6 : 48               [ 3] 	pha
e1f7 : a200             [ 2] 	ldx #0
e1f9 : a488             [ 3] 	ldy df_exeoff
e1fb :                       df_rt_arry_parm2_term
e1fb : b186             [ 5] 	lda (df_currlin),y
e1fd : c95d             [ 2] 	cmp #']'
e1ff : f011             [ 4] 	beq df_rt_arry_parm2_skiparry2
e201 : c92c             [ 2] 	cmp #','
e203 : f006             [ 3] 	beq df_rt_arry_parm2_arry2
e205 : 8488             [ 3] 	sty df_exeoff
e207 : c8               [ 2] 	iny
e208 : 4cfbe1           [ 3] 	jmp df_rt_arry_parm2_term
e20b :                       df_rt_arry_parm2_arry2
                             	; get second dimension and put in Y
e20b : 20ece1           [ 6] 	jsr df_rt_arry_parm
e20e : a8               [ 2] 	tay
e20f : 68               [ 4] 	pla
e210 : aa               [ 2] 	tax
                             ;	clc
e211 : 60               [ 6] 	rts
e212 :                       df_rt_arry_parm2_skiparry2
e212 : a000             [ 2] 	ldy #0
e214 : 68               [ 4] 	pla
e215 : aa               [ 2] 	tax
                             ;	clc
e216 : 60               [ 6] 	rts
                             
AS65 Assembler for R6502 [1.42].                                     Page  184
-------------------------------- bank\bank0.s --------------------------------

                             
                             ;****************************************
                             ;* Evaluate and push variable
                             ;* The actual value is pushed if numeric
                             ;* The pointer is pushed if string
                             ;* Carry Set = LVAR else normal RVAR
                             ;* LVAR : Y = line index, A=vvt type, tmpptra = v
                             ;****************************************
e217 :                       df_rt_eval_var
                             	; save carry bit
e217 : 08               [ 3] 	php
                             	; if lvar mode then already passed escape token
e218 : b010             [ 3] 	bcs df_rt_eval_lvskip
                             	; move past var escape token
e21a : c8               [ 2] 	iny
                             	; get var vvt address
e21b : b186             [ 5] 	lda (df_currlin),y
e21d : 85a1             [ 3] 	sta df_tmpptra
e21f : c8               [ 2] 	iny
e220 : 8488             [ 3] 	sty df_exeoff
e222 : b186             [ 5] 	lda (df_currlin),y
e224 : 85a2             [ 3] 	sta df_tmpptra+1
                             	; push vvt type first as this is the last thing 
e226 : a200             [ 2] 	ldx #0
e228 : a1a1             [ 6] 	lda (df_tmpptra,x)
e22a :                       df_rt_eval_lvskip
e22a : 48               [ 3] 	pha
                             	; Test A
e22b : aa               [ 2] 	tax
                             	; simple variable
e22c : 100e             [ 3] 	bpl df_rt_eval_var_notarry
                             	; even if an array if no dimensions then return 
                             	; if at end of statement or line then simple cop
                             ;	cpy df_eolidx
                             ;	beq df_rt_eval_var_simple
e22e : c47f             [ 3] 	cpy df_nxtstidx
e230 : f027             [ 3] 	beq df_rt_eval_var_simple
                             	; if next ch is not [ then simple copy
e232 : c8               [ 2] 	iny
e233 : b186             [ 5] 	lda (df_currlin),y
e235 : 88               [ 2] 	dey
e236 : c95b             [ 2] 	cmp #'['
e238 : d01f             [ 3] 	bne df_rt_eval_var_simple
                             	; go do array handling
e23a : f02b             [ 3] 	beq df_rt_eval_var_do_arry
e23c :                       df_rt_eval_var_notarry
                             	; pull the type, not needed here
e23c : 68               [ 4] 	pla
                             	; pull C and check if lvar wanted rather than rv
e23d : 28               [ 4] 	plp
e23e : b00c             [ 3] 	bcs df_rt_eval_lvar
                             	; just push the vvt lo,hi value
e240 : a001             [ 2] 	ldy #DFVVT_LO
e242 : b1a1             [ 5] 	lda (df_tmpptra),y
e244 : aa               [ 2] 	tax
e245 : a002             [ 2] 	ldy #DFVVT_HI
e247 : b1a1             [ 5] 	lda (df_tmpptra),y
                             
e249 : 4c4df6           [ 3] 	jmp df_ost_pushInt
                             
e24c :                       df_rt_eval_lvar
                             	; it's not an array, push the address of DFVVT_L
AS65 Assembler for R6502 [1.42].                                     Page  185
-------------------------------- bank\bank0.s --------------------------------

                             	; add DFVVT_LO offset to slot address in X,A
e24c : 18               [ 2] 	clc
e24d : a901             [ 2] 	lda #DFVVT_LO
e24f : 65a1             [ 3] 	adc df_tmpptra
e251 : aa               [ 2] 	tax
e252 : a5a2             [ 3] 	lda df_tmpptra+1
e254 : 6900             [ 2] 	adc #0
                             
                             	; push pointer to lo,hi
e256 : 4c5cf6           [ 3] 	jmp df_ost_pushPtr
                             
e259 :                       df_rt_eval_var_simple
                             	; clean up stack
e259 : 68               [ 4] 	pla
e25a : 68               [ 4] 	pla
                             	; simply get lo,hi and push ptr on stack
e25b : a001             [ 2] 	ldy #DFVVT_LO
e25d : b1a1             [ 5] 	lda (df_tmpptra),y
e25f : aa               [ 2] 	tax
e260 : a002             [ 2] 	ldy #DFVVT_HI
e262 : b1a1             [ 5] 	lda (df_tmpptra),y
e264 : 4c5cf6           [ 3] 	jmp df_ost_pushPtr
                             
e267 :                       df_rt_eval_var_do_arry
                             	; move past var index
e267 : e688             [ 5] 	inc df_exeoff
                             	; zero out x,y as they have dimension info
e269 : a200             [ 2] 	ldx #0
e26b : a000             [ 2] 	ldy #0
                             
                             	; ** Array handling routine **
                             	; A on stack = type
                             	; save vvt address
e26d : a5a2             [ 3] 	lda df_tmpptra+1
e26f : 48               [ 3] 	pha
e270 : a5a1             [ 3] 	lda df_tmpptra
e272 : 48               [ 3] 	pha
                             
                             	; get array parms in X,Y
e273 : 20f3e1           [ 6] 	jsr df_rt_arry_parm2
                             	; restore vvt address
e276 : 68               [ 4] 	pla
e277 : 85a1             [ 3] 	sta df_tmpptra
e279 : 68               [ 4] 	pla
e27a : 85a2             [ 3] 	sta df_tmpptra+1
                             	; save dimension indices for later
e27c : 86a3             [ 3] 	stx df_tmpptrb
e27e : 84a4             [ 3] 	sty df_tmpptrb+1
                             	; if y is zero then need to decide some stuff
e280 : c000             [ 2] 	cpy #0
e282 : d00e             [ 3] 	bne df_rt_eval_var_dim2adj
                             	; if dim2 > 0 then swap x,y
e284 : a004             [ 2] 	ldy #DFVVT_DIM2
e286 : b1a1             [ 5] 	lda (df_tmpptra),y
e288 : f008             [ 3] 	beq df_rt_eval_var_dim2adj
                             	; swap x,y
e28a : a6a3             [ 3] 	ldx df_tmpptrb
e28c : a4a4             [ 3] 	ldy df_tmpptrb+1
e28e : 86a4             [ 3] 	stx df_tmpptrb+1
e290 : 84a3             [ 3] 	sty df_tmpptrb
                             
e292 :                       df_rt_eval_var_dim2adj
AS65 Assembler for R6502 [1.42].                                     Page  186
-------------------------------- bank\bank0.s --------------------------------

e292 : a6a3             [ 3] 	ldx df_tmpptrb
e294 : a4a4             [ 3] 	ldy df_tmpptrb+1
                             	; don't let y=0
e296 : d001             [ 3] 	bne df_rt_eval_var_dim2adjy
e298 : c8               [ 2] 	iny
e299 :                       df_rt_eval_var_dim2adjy
                             	; don't let x=0
e299 : e000             [ 2] 	cpx #0
e29b : d001             [ 3] 	bne df_rt_eval_var_dim2adjx
e29d : e8               [ 2] 	inx
e29e :                       df_rt_eval_var_dim2adjx
                             	;calculate offset
                             	;(y-1)*dim1 + (x-1)
e29e : ca               [ 2] 	dex
e29f : a900             [ 2] 	lda #0
e2a1 : 853e             [ 3] 	sta num_a+1
e2a3 : 88               [ 2] 	dey
                             	; (y-1)
e2a4 : 843d             [ 3] 	sty num_a
                             	; if y is 0 then no need to multiply
e2a6 : f00d             [ 3] 	beq df_rt_eval_var_nomult
                             	; (dim1)
e2a8 : a003             [ 2] 	ldy #DFVVT_DIM1
e2aa : a900             [ 2] 	lda #0
e2ac : 8542             [ 3] 	sta num_b+1
e2ae : b1a1             [ 5] 	lda (df_tmpptra),y
e2b0 : 8541             [ 3] 	sta num_b
                             	; (y-1)*dim1 num_a has result
e2b2 : 2060d4           [ 6] 	jsr int_fast_mult
e2b5 :                       df_rt_eval_var_nomult
                             	; move x to a
e2b5 : 8a               [ 2] 	txa
                             	; add x to num_a
e2b6 : 18               [ 2] 	clc
e2b7 : 653d             [ 3] 	adc num_a
e2b9 : 853d             [ 3] 	sta num_a
                             	_bcc 2
                             
e2bd : e63e             [ 5] 	inc num_a+1
                             	; now have element offset in num_a
                             	; dimensions in x and y
e2bf : a6a3             [ 3] 	ldx df_tmpptrb
e2c1 : a4a4             [ 3] 	ldy df_tmpptrb+1
                             	; get type of variable originally found
e2c3 : 68               [ 4] 	pla
e2c4 : 48               [ 3] 	pha
e2c5 : 2901             [ 2] 	and #DFVVT_INT
e2c7 : f004             [ 3] 	beq df_rt_eval_var_push
                             	; if it is int then multiply offset by 2
e2c9 : 063d             [ 5] 	asl num_a
e2cb : 263e             [ 5] 	rol num_a+1
e2cd :                       df_rt_eval_var_push
                             	; add pointer in lo,hi to num_a
e2cd : 18               [ 2] 	clc
e2ce : a001             [ 2] 	ldy #DFVVT_LO
e2d0 : b1a1             [ 5] 	lda (df_tmpptra),y
e2d2 : 653d             [ 3] 	adc num_a
e2d4 : 853d             [ 3] 	sta num_a
e2d6 : a002             [ 2] 	ldy #DFVVT_HI
e2d8 : b1a1             [ 5] 	lda (df_tmpptra),y
e2da : d002             [ 3] 	bne df_rt_array_exists
                             	; if vvt address hi is zero then array not dimen
AS65 Assembler for R6502 [1.42].                                     Page  187
-------------------------------- bank\bank0.s --------------------------------

                             	SWBRK DFERR_DIM
                             
e2de :                       df_rt_array_exists
e2de : 653e             [ 3] 	adc num_a+1
e2e0 : 853e             [ 3] 	sta num_a+1
                             	; get the type
e2e2 : 68               [ 4] 	pla
                             	; if not int or byte then push string
e2e3 : 2903             [ 2] 	and #DFVVT_INT|DFVVT_BYT
e2e5 : f01b             [ 4] 	beq df_rt_eval_var_str
                             	; get LVAR preference
e2e7 : 28               [ 4] 	plp
e2e8 : b019             [ 4] 	bcs df_rt_eval_ptr
                             	; need to load lo and hi for int
                             	; but only lo for byt
e2ea : 2901             [ 2] 	and #DFVVT_INT
e2ec : f00b             [ 3] 	beq df_rt_eval_byt
                             	; push the contents pointed to by num_a
e2ee : a000             [ 2] 	ldy #0
e2f0 : b13d             [ 5] 	lda (num_a),y
e2f2 : aa               [ 2] 	tax
e2f3 : c8               [ 2] 	iny
e2f4 : b13d             [ 5] 	lda (num_a),y
e2f6 : 4c4df6           [ 3] 	jmp df_ost_pushInt
e2f9 :                       df_rt_eval_byt
e2f9 : a000             [ 2] 	ldy #0
e2fb : b13d             [ 5] 	lda (num_a),y
e2fd : aa               [ 2] 	tax
e2fe : 98               [ 2] 	tya			; Make A=0
e2ff : 4c4df6           [ 3] 	jmp df_ost_pushInt
e302 :                       df_rt_eval_var_str
e302 : 28               [ 4] 	plp
e303 :                       df_rt_eval_ptr
                             ;	clc
                             	; put num_a not contents
e303 : a63d             [ 3] 	ldx num_a
e305 : a53e             [ 3] 	lda num_a+1
e307 : 4c5cf6           [ 3] 	jmp df_ost_pushPtr
                             
e30a :                       df_rt_eval_proc
e30a : a577             [ 3] 	lda df_parmtop				; Save current position of par
e30c : 48               [ 3] 	pha
e30d : 20a3f4           [ 6] 	jsr df_rt_proc				; Go and call the user functio
e310 : 68               [ 4] 	pla							; Get back the original parameter stac
e311 : c577             [ 3] 	cmp df_parmtop				; if it is the same, then no r
e313 : f002             [ 3] 	beq df_rt_eval_proc_err
e315 : 18               [ 2] 	clc
e316 : 60               [ 6] 	rts
e317 :                       df_rt_eval_proc_err
                             	; if no return value then report an errror
                             	SWBRK DFERR_RETURN
                             
                             
                             
                             
                             ;****************************************
                             ;* get two ints off the runtime stack
                             ;* first parm in ptrb, second in ptra
                             ;****************************************
e319 :                       df_rt_get2Ints
                             	; the first int popped is actually the second pa
e319 : 207df6           [ 6] 	jsr df_ost_popInt
AS65 Assembler for R6502 [1.42].                                     Page  188
-------------------------------- bank\bank0.s --------------------------------

e31c : 86a3             [ 3] 	stx df_tmpptrb
e31e : 85a4             [ 3] 	sta df_tmpptrb+1
                             
e320 : 207df6           [ 6] 	jsr df_ost_popInt
e323 : 86a1             [ 3] 	stx df_tmpptra
e325 : 85a2             [ 3] 	sta df_tmpptra+1
e327 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* get two strings off the runtime stack
                             ;* first parm in ptrb, second in ptra
                             ;****************************************
e328 :                       df_rt_get2Strs
                             	; the first int popped is actually the second pa
e328 : 2081f6           [ 6] 	jsr df_ost_popStr
e32b : 86a3             [ 3] 	stx df_tmpptrb
e32d : 85a4             [ 3] 	sta df_tmpptrb+1
                             
e32f : 2081f6           [ 6] 	jsr df_ost_popStr
e332 : 86a1             [ 3] 	stx df_tmpptra
e334 : 85a2             [ 3] 	sta df_tmpptra+1
e336 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ; common code for 2 ints runtime parsing
                             ;****************************************
e337 :                       df_rt_parm_2ints
                             	; evaluate 1st parm
e337 : 2073e0           [ 6] 	jsr df_rt_neval
                             	; jump over comma
e33a : e688             [ 5] 	inc df_exeoff
                             	; evaluate the 2nd parm
e33c : 2073e0           [ 6] 	jsr df_rt_neval
                             	
e33f : 4c19e3           [ 3] 	jmp df_rt_get2Ints
                             	; pop 2nd parm
                             ;	jsr df_ost_popInt
                             ;	stx df_tmpptrb
                             ;	sta df_tmpptrb+1
                             	; pop 1st parm
                             ;	jsr df_ost_popInt
                             ;	stx df_tmpptra
                             ;	sta df_tmpptra+1
                             ;	rts
                             
                             ;****************************************
                             ; common code for 3 ints runtime parsing
                             ;****************************************
e342 :                       df_rt_parm_3ints
                             	; evaluate 1st parm
e342 : 2073e0           [ 6] 	jsr df_rt_neval
e345 : e688             [ 5] 	inc df_exeoff
                             	; evaluate the 2nd parm
e347 : 2073e0           [ 6] 	jsr df_rt_neval
e34a : e688             [ 5] 	inc df_exeoff
                             	; evaluate the 3rd parm
e34c : 2073e0           [ 6] 	jsr df_rt_neval
                             
                             	; pop 3rd parm
e34f :                       df_rt_parm_pop3
e34f : 207df6           [ 6] 	jsr df_ost_popInt
e352 : 86a5             [ 3] 	stx df_tmpptrc
AS65 Assembler for R6502 [1.42].                                     Page  189
-------------------------------- bank\bank0.s --------------------------------

e354 : 85a6             [ 3] 	sta df_tmpptrc+1
                             	; pop 2nd and 1st
e356 : 4c19e3           [ 3] 	jmp df_rt_get2Ints
                             ;	jsr df_ost_popInt
                             ;	stx df_tmpptrb
                             ;	sta df_tmpptrb+1
                             	; pop 1st parm
                             ;	jsr df_ost_popInt
                             ;	stx df_tmpptra
                             ;	sta df_tmpptra+1
                             ;	rts
                             
                             ;****************************************
                             ; common code for 4 ints runtime parsing
                             ;****************************************
e359 :                       df_rt_parm_4ints
                             	; evaluate 1st parm
e359 : 2073e0           [ 6] 	jsr df_rt_neval
e35c : e688             [ 5] 	inc df_exeoff
                             	; evaluate the 2nd parm
e35e : 2073e0           [ 6] 	jsr df_rt_neval
e361 : e688             [ 5] 	inc df_exeoff
                             	; evaluate the 3rd parm
e363 : 2073e0           [ 6] 	jsr df_rt_neval
e366 : e688             [ 5] 	inc df_exeoff
                             	; evaluate the 4th parm
e368 : 2073e0           [ 6] 	jsr df_rt_neval
                             
                             	; pop 4th parm
e36b : 207df6           [ 6] 	jsr df_ost_popInt
e36e : 86a7             [ 3] 	stx df_tmpptrd
e370 : 85a8             [ 3] 	sta df_tmpptrd+1
                             
                             	; pop 3,2,1 parms
e372 : 4c4fe3           [ 3] 	jmp df_rt_parm_pop3
                             
                             	; pop 3rd parm
                             ;	jsr df_ost_popInt
                             ;	stx df_tmpptrc
                             ;	sta df_tmpptrc+1
                             	; pop 2nd parm
                             ;	jsr df_ost_popInt
                             ;	stx df_tmpptrb
                             ;	sta df_tmpptrb+1
                             	; pop 1st parm
                             ;	jsr df_ost_popInt
                             ;	stx df_tmpptra
                             ;	sta df_tmpptra+1
                             ;	rts
                             
                             ;****************************************
                             ; common code for 5 ints runtime parsing
                             ;****************************************
                             ;df_rt_parm_5ints
                             ;	; evaluate 1st parm
                             ;	jsr df_rt_neval
                             ;	inc df_exeoff
                             ;	; evaluate the 2nd parm
                             ;	jsr df_rt_neval
                             ;	inc df_exeoff
                             ;	; evaluate the 3rd parm
                             ;	jsr df_rt_neval
AS65 Assembler for R6502 [1.42].                                     Page  190
-------------------------------- bank\bank0.s --------------------------------

                             ;	inc df_exeoff
                             ;	; evaluate the 4th parm
                             ;	jsr df_rt_neval
                             ;	inc df_exeoff
                             ;	; evaluate the 5th parm
                             ;	jsr df_rt_neval
                             ;
                             ;	; pop 5th parm
                             ;	jsr df_ost_popInt
                             ;	stx df_tmpptre
                             ;	sta df_tmpptre+1
                             ;	; pop 4th parm
                             ;	jsr df_ost_popInt
                             ;	stx df_tmpptrd
                             ;	sta df_tmpptrd+1
                             ;	; pop 3rd parm
                             ;	jsr df_ost_popInt
                             ;	stx df_tmpptrc
                             ;	sta df_tmpptrc+1
                             ;	; pop 2nd parm
                             ;	jsr df_ost_popInt
                             ;	stx df_tmpptrb
                             ;	sta df_tmpptrb+1
                             ;	; pop 1st parm
                             ;	jsr df_ost_popInt
                             ;	stx df_tmpptra
                             ;	sta df_tmpptra+1
                             ;
                             ;	rts
                             
                             ;****************************************
                             ;* initialise statement to be executed
                             ;* X,A = line pointer, Y=statement offset
                             ;****************************************
e375 :                       df_rt_init_stat_ptr
                             	; save current line
e375 : 8686             [ 3] 	stx df_currlin
e377 : 8587             [ 3] 	sta df_currlin+1
e379 : 8480             [ 3] 	sty df_curstidx
e37b : 8488             [ 3] 	sty df_exeoff
e37d : b186             [ 5] 	lda (df_currlin),y
e37f : 857f             [ 3] 	sta df_nxtstidx
e381 : a200             [ 2] 	ldx #0
e383 : a186             [ 6] 	lda (df_currlin,x)
e385 : 857e             [ 3] 	sta df_eolidx
                             ;	ldy df_curstidx
                             ;	lda (df_currlin),y
                             ;	sta df_nxtstidx
e387 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Execute from a statement pointed to
                             ;* by currlin and exeoff
                             ;****************************************
e388 :                       df_rt_exec_stat
e388 : a686             [ 3] 	ldx df_currlin
e38a : a587             [ 3] 	lda df_currlin+1
e38c : a488             [ 3] 	ldy df_exeoff
e38e :                       df_rt_exec_init_ptr
e38e : 2075e3           [ 6] 	jsr df_rt_init_stat_ptr
                             	; assume normal flow of control if next line hi 
                             	; this means no line can execute below page 1, n
AS65 Assembler for R6502 [1.42].                                     Page  191
-------------------------------- bank\bank0.s --------------------------------

e391 : a900             [ 2] 	lda #0
e393 : 858a             [ 3] 	sta df_nextlin+1
                             
                             	; find first token in statement
e395 :                       df_rt_exec_find_tok
e395 : c8               [ 2] 	iny
e396 : b186             [ 5] 	lda (df_currlin),y
e398 : 10fb             [ 3] 	bpl df_rt_exec_find_tok
e39a :                       df_rt_exec_found_tok
                             	; skip past token to next byte in readiness
e39a : c8               [ 2] 	iny
e39b : 8488             [ 3] 	sty df_exeoff
                             	; Run that statement - if end of return will pul
                             	; and effectively do an rts from this routine.
e39d : 20eee3           [ 6] 	jsr df_rt_run_token
                             
                             	; check for break, asynch get
e3a0 : c65b             [ 5] 	dec df_checkkey
e3a2 : d00a             [ 3] 	bne df_rt_exec_no_key
e3a4 : a55c             [ 3] 	lda df_checkmsk
e3a6 : 855b             [ 3] 	sta df_checkkey
e3a8 : 18               [ 2] 	clc
e3a9 : 2051c4           [ 6] 	jsr io_get_ch
e3ac : 9029             [ 3] 	bcc df_rt_exec_check_key
e3ae :                       df_rt_exec_no_key
                             	; check if normal flow of control
e3ae : a58a             [ 3] 	lda df_nextlin+1
e3b0 : d033             [ 3] 	bne df_rt_exec_jump
                             	; try and execute another statement until end of
e3b2 : a47f             [ 3] 	ldy df_nxtstidx
e3b4 : c47e             [ 3] 	cpy df_eolidx
e3b6 : 8488             [ 3] 	sty df_exeoff
e3b8 : d0ce             [ 3] 	bne df_rt_exec_stat
                             	
                             	; reached end of line, move to next
e3ba : a200             [ 2] 	ldx #0
e3bc : 18               [ 2] 	clc
e3bd : a186             [ 6] 	lda (df_currlin,x)
e3bf : 6586             [ 3] 	adc df_currlin
e3c1 : 8586             [ 3] 	sta df_currlin
                             	_bcc 2
                             
e3c5 : e687             [ 5] 	inc df_currlin+1
                             
                             	; start from first statement in new line
e3c7 : a003             [ 2] 	ldy #3
e3c9 : 8488             [ 3] 	sty df_exeoff
                             
                             	; check if this line has any content (length >0)
e3cb : a186             [ 6] 	lda (df_currlin,x)
e3cd : 857e             [ 3] 	sta df_eolidx
                             	; no more lines (len = 0), program done
e3cf : d0b7             [ 3] 	bne df_rt_exec_stat
                             	; else done
                             	; normally wouldn't get here except immediate mo
                             	; if line number <> 0 then error
e3d1 : a55e             [ 3] 	lda df_immed
e3d3 : f00e             [ 3] 	beq df_rt_unexpected_end
e3d5 :                       df_rt_exec_end
e3d5 : 18               [ 2] 	clc
e3d6 : 60               [ 6] 	rts
e3d7 :                       df_rt_exec_check_key
AS65 Assembler for R6502 [1.42].                                     Page  192
-------------------------------- bank\bank0.s --------------------------------

e3d7 : c91a             [ 2] 	cmp #UTF_BRK					; CTRK-Z?
e3d9 : f006             [ 3] 	beq df_rt_exec_ctrl_z
e3db : c903             [ 2] 	cmp #UTF_ETX					; CTRL-C?
e3dd : d0cf             [ 3] 	bne df_rt_exec_no_key			; None relevant keys, go
e3df :                       df_rt_exec_ctrl_c
                             	SWBRK DFERR_BREAK
                             
e3e1 :                       df_rt_exec_ctrl_z
                             	; Force a break with zero error number
                             	; this will drop in to the monitor
                             	SWBRK 0
                             
                             
e3e3 :                       df_rt_unexpected_end
                             	SWBRK DFERR_IMMEDIATE
                             
                             
                             	; if hi byte of nextline is not zero then
                             	; current line = next line
e3e5 :                       df_rt_exec_jump
                             	; initialise statement pointer from nextlin,toks
e3e5 : a689             [ 3] 	ldx df_nextlin
e3e7 : a58a             [ 3] 	lda df_nextlin+1
e3e9 : a47f             [ 3] 	ldy df_nxtstidx
e3eb : 4c8ee3           [ 3] 	jmp df_rt_exec_init_ptr
                             
                             
                             ;****************************************
                             ;* Run statement in A
                             ;****************************************
e3ee :                       df_rt_run_token
                             	; mask off MSB
                             ;	and #0x7f
                             	; multiply by 2
e3ee : 0a               [ 2] 	asl a
e3ef : aa               [ 2] 	tax
e3f0 : bdd9e4           [ 4] 	lda df_rt_tokenjmp,x
e3f3 : 85a1             [ 3] 	sta df_tmpptra
e3f5 : bddae4           [ 4] 	lda df_rt_tokenjmp+1,x
e3f8 : 85a2             [ 3] 	sta df_tmpptra+1
                             	; execution code finishes with rts
e3fa : 6ca100           [ 6] 	jmp (df_tmpptra)
                             
                             
                             ;****************************************
                             ;* X,A : Line Address, Y = Index
                             ;* C=0 Found next statement
                             ;* C=1 No statement found
                             ;****************************************
e3fd :                       df_rt_nextstat
                             	; save pointer
e3fd : 8690             [ 3] 	stx df_lineptr
e3ff : 8591             [ 3] 	sta df_lineptr+1
                             	; if end of program then err
e401 : a200             [ 2] 	ldx #0
e403 : a190             [ 6] 	lda (df_lineptr,x)
e405 : f022             [ 3] 	beq df_rt_nextstat_err
                             	; if next statement idx == line length
                             ;	lda (df_lineptr),y
                             ;	beq df_rt_nextstat_ln
e407 : b190             [ 5] 	lda (df_lineptr),y
e409 : c190             [ 6] 	cmp (df_lineptr,x)
AS65 Assembler for R6502 [1.42].                                     Page  193
-------------------------------- bank\bank0.s --------------------------------

e40b : f007             [ 3] 	beq df_rt_nextstat_ln
                             	; then go to next line
                             	; else make this Y
e40d : a8               [ 2] 	tay
                             	; X = line low
e40e : a690             [ 3] 	ldx df_lineptr
                             	; A = line high
e410 : a591             [ 3] 	lda df_lineptr+1
e412 : 18               [ 2] 	clc
e413 : 60               [ 6] 	rts
e414 :                       df_rt_nextstat_ln
                             	; for next line, add line length to ptr
e414 : 18               [ 2] 	clc
                             ;	lda (df_lineptr,x)
e415 : 6590             [ 3] 	adc df_lineptr
e417 : 8590             [ 3] 	sta df_lineptr
                             	_bcc 2
                             
e41b : e691             [ 5] 	inc df_lineptr+1
                             	; if end of program set C as error
e41d : a190             [ 6] 	lda (df_lineptr,x)
e41f : f008             [ 3] 	beq df_rt_nextstat_err
e421 : a690             [ 3] 	ldx df_lineptr
e423 : a591             [ 3] 	lda df_lineptr+1
                             	; always skip line number and length for start o
e425 : a003             [ 2] 	ldy #3
e427 : 18               [ 2] 	clc
e428 : 60               [ 6] 	rts
e429 :                       df_rt_nextstat_err
e429 : a000             [ 2] 	ldy #0
e42b : 38               [ 2] 	sec
e42c : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Push current line and statement to runtime sta
                             ;****************************************
e42d :                       df_rt_push_stat
e42d : a580             [ 3] 	lda df_curstidx
e42f : 2004f6           [ 6] 	jsr df_rst_pushByte
e432 : a587             [ 3] 	lda df_currlin+1
e434 : a686             [ 3] 	ldx df_currlin
e436 : 4c1cf6           [ 3] 	jmp df_rst_pushWord
                             ;	clc
                             ;	rts
                             
                             ;****************************************
                             ;* Pop line and statement from runtime stack
                             ;* And transfer control to next statement
                             ;****************************************
e439 :                       df_rt_pop_stat
e439 : 202af6           [ 6] 	jsr df_rst_popWord
e43c : 8689             [ 3] 	stx	df_nextlin
e43e : 858a             [ 3] 	sta df_nextlin+1
e440 : 200df6           [ 6] 	jsr df_rst_popByte
e443 : a8               [ 2] 	tay
e444 : a689             [ 3] 	ldx df_nextlin
e446 : a58a             [ 3] 	lda df_nextlin+1
e448 : 20fde3           [ 6] 	jsr df_rt_nextstat
e44b : 8689             [ 3] 	stx df_nextlin
e44d : 858a             [ 3] 	sta df_nextlin+1
e44f : 847f             [ 3] 	sty df_nxtstidx
                             ;	clc
AS65 Assembler for R6502 [1.42].                                     Page  194
-------------------------------- bank\bank0.s --------------------------------

e451 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Find proc definition in procptr
                             ;* Only call if proc not found before
                             ;****************************************
e452 :                       df_rt_findproc
                             	; start at program beginning
                             	_cpyZPWord df_prgstrt,df_lineptr
                             
e45a : a003             [ 2] 	ldy #3
e45c : 8492             [ 3] 	sty df_lineidx
e45e : a200             [ 2] 	ldx #0
e460 : a190             [ 6] 	lda (df_lineptr,x)
e462 : f034             [ 3] 	beq df_rt_findproc_err
e464 :                       df_rt_findproc_cmd
e464 : c8               [ 2] 	iny
e465 : b190             [ 5] 	lda (df_lineptr),y
e467 : 10fb             [ 3] 	bpl df_rt_findproc_cmd
e469 : c986             [ 2] 	cmp #DFRT_DEF
e46b : d017             [ 3] 	bne df_rt_findproc_nextstat
                             	; skip def token
e46d : c8               [ 2] 	iny
                             	; skip proc escape token
e46e : c8               [ 2] 	iny
                             	; now check the proc address against procptr
e46f : b190             [ 5] 	lda (df_lineptr),y
e471 : c58e             [ 3] 	cmp df_procptr
e473 : d00f             [ 3] 	bne df_rt_findproc_nextstat
e475 : c8               [ 2] 	iny
e476 : b190             [ 5] 	lda (df_lineptr),y
e478 : c58f             [ 3] 	cmp df_procptr+1
e47a : d008             [ 3] 	bne df_rt_findproc_nextstat
                             
                             	; found it, return AXY with line details
e47c : a690             [ 3] 	ldx df_lineptr
e47e : a591             [ 3] 	lda df_lineptr+1
e480 : a492             [ 3] 	ldy df_lineidx
e482 : 18               [ 2] 	clc
e483 : 60               [ 6] 	rts
e484 :                       df_rt_findproc_nextstat
                             	; restore AXY line details and find next stateme
e484 : a690             [ 3] 	ldx df_lineptr
e486 : a591             [ 3] 	lda df_lineptr+1
e488 : a492             [ 3] 	ldy df_lineidx
e48a : 20fde3           [ 6] 	jsr df_rt_nextstat
e48d : b009             [ 3] 	bcs df_rt_findproc_err
e48f : 8690             [ 3] 	stx df_lineptr
e491 : 8591             [ 3] 	sta df_lineptr+1
e493 : 8492             [ 3] 	sty df_lineidx
e495 : 4c64e4           [ 3] 	jmp df_rt_findproc_cmd
                             	; error
e498 :                       df_rt_findproc_err
                             	SWBRK DFERR_NOPROC
                             
                             
                             ;****************************************
                             ;* Find an escape value
                             ;* Does not check for end of line or statement
                             ;****************************************
e49a :                       df_rt_findescval
e49a : a488             [ 3] 	ldy df_exeoff
AS65 Assembler for R6502 [1.42].                                     Page  195
-------------------------------- bank\bank0.s --------------------------------

e49c : 88               [ 2] 	dey
e49d :                       df_rt_findescval_loop
e49d : c8               [ 2] 	iny
e49e : b186             [ 5] 	lda (df_currlin),y
e4a0 : c920             [ 2] 	cmp #DFTK_ESCVAL
e4a2 : b0f9             [ 3] 	bcs df_rt_findescval_loop
e4a4 : 8488             [ 3] 	sty df_exeoff
e4a6 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Skip white space
                             ;* Does not check for end of line or statement
                             ;* A contains non-ws char, df_exeoff updated
                             ;****************************************
e4a7 :                       df_rt_skip_ws
e4a7 : a488             [ 3] 	ldy df_exeoff
e4a9 : 88               [ 2] 	dey
e4aa :                       df_rt_skip_ws_loop
e4aa : c8               [ 2] 	iny
e4ab : b186             [ 5] 	lda (df_currlin),y
e4ad : c920             [ 2] 	cmp #' '
e4af : f0f9             [ 3] 	beq df_rt_skip_ws_loop
e4b1 : 8488             [ 3] 	sty df_exeoff
e4b3 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Get an lvar
                             ;* Assumes next token will be escape DFTK_VAR
                             ;* tmpptra contains vvt slot address
                             ;* X,A is the lvar pointer
                             ;****************************************
e4b4 :                       df_rt_getlvar
e4b4 : 209ae4           [ 6] 	jsr df_rt_findescval
                             	; move past the escape value
e4b7 : c8               [ 2] 	iny
                             
                             	; get variable address
e4b8 : b186             [ 5] 	lda (df_currlin),y
e4ba : 85a1             [ 3] 	sta df_tmpptra
e4bc : c8               [ 2] 	iny
e4bd : b186             [ 5] 	lda (df_currlin),y
e4bf : 85a2             [ 3] 	sta df_tmpptra+1
                             
e4c1 : 8488             [ 3] 	sty df_exeoff
                             	; get the type
e4c3 : a000             [ 2] 	ldy #0
e4c5 : b1a1             [ 5] 	lda (df_tmpptra),y
                             	; set carry flag to return pointer (lvar)
e4c7 : 38               [ 2] 	sec
e4c8 : a488             [ 3] 	ldy df_exeoff
e4ca : 2017e2           [ 6] 	jsr df_rt_eval_var
e4cd : 4c85f6           [ 3] 	jmp df_ost_popPtr
                             ;	rts
                             
                             ;****************************************
                             ;* Pop stat from rt stack and continue
                             ;* Y MUST BE ON THE CPU STACK AS IT GETS PLYed HE
                             ;****************************************
e4d0 :                       df_rt_pop_stat_go
e4d0 : 2039e4           [ 6] 	jsr df_rt_pop_stat
                             	; restore stack pointer so we don't lose this en
e4d3 : 68               [ 4] 	pla
AS65 Assembler for R6502 [1.42].                                     Page  196
-------------------------------- bank\bank0.s --------------------------------

e4d4 : a8               [ 2] 	tay
e4d5 : 8476             [ 3] 	sty df_rtstop
e4d7 : 18               [ 2] 	clc
e4d8 : 60               [ 6] 	rts
                             
                             	include "dflat/rtjmptab.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  RTJUMPTAB.S
                             ;*  Runtime token jump table.
                             ;*  dflat uses four key tables to tokenise and ru
                             ;*  - df_tokensyms    - table of token symbols
                             ;*  - df_tk_tokentype - table of token types
                             ;*  - df_tk_tokenjmp  - table of tokenising routi
                             ;*  - df_rt_tokenjmp  - table of runtime token an
                             ;*  The key is the token symbols.  When a line is
                             ;*  in to the raw (untokenised) buffer, df_tokens
                             ;*  used to identify tokens.  The position of the
                             ;*  token is used to then look up type and jump v
                             ;*  in the other tables.
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code  
                             
                             ; Tokeniser jump table
                             ; In token order of df_tokensyms
e4d9 :                       df_rt_tokenjmp
e4d9 : c3ec                  	dw	df_rt_assign
e4db : a3f4                  	dw	df_rt_proc
e4dd : d4ec                  	dw	df_rt_comment
e4df : 7bec                  	dw	df_rt_println
e4e1 : 38ec                  	dw	df_rt_printat
e4e3 : 42ec                  	dw	df_rt_print
e4e5 : 43f5                  	dw	df_rt_def			; 0x86
e4e7 : c6f5                  	dw	df_rt_enddef		; 0x87
e4e9 : c3f5                  	dw	df_rt_return		; 0x88
e4eb : 65f4                  	dw	df_rt_abort			; 0x89
e4ed : 94ea                  	dw	df_rt_local
e4ef : c0ea                  	dw	df_rt_dim
e4f1 : 62e9                  	dw	df_rt_repeat		; 0x8c
e4f3 : 6ae9                  	dw	df_rt_until
e4f5 : c9e8                  	dw	df_rt_for			; 0x8e
e4f7 : 07e9                  	dw	df_rt_next			; 0x8f
e4f9 : a2e7                  	dw	df_rt_while			; 0x90
e4fb : 05e8                  	dw	df_rt_wend			; 0x81
e4fd : 88e8                  	dw	df_rt_if			; 0x92
e4ff : 76e8                  	dw	df_rt_else			; 0x93
e501 : 71e8                  	dw	df_rt_endif			; 0x94
e503 : 76e8                  	dw	df_rt_elseif		; 0x95
e505 : d4ec                  	dw	df_rt_data			; 0x96
e507 : 6df9                  	dw	df_rt_asm_assemble	; 0x97 df_rt_asm_assemble
e509 : d5ec                  	dw	df_rt_run
e50b : caed                  	dw	df_rt_list
e50d : 58ea                  	dw	df_rt_input
AS65 Assembler for R6502 [1.42].                                     Page  197
-------------------------------- bank\bank0.s --------------------------------

e50f : cbeb                  	dw	df_rt_text
e511 : 48eb                  	dw	df_rt_plot
e513 : b9eb                  	dw	df_rt_cursor
e515 : 45eb                  	dw	df_rt_cls
e517 : 32f0                  	dw	df_rt_poke
e519 : 23f0                  	dw	df_rt_doke
e51b : 65f0                  	dw	df_rt_sound
e51d : 78f0                  	dw	df_rt_music
e51f : 8df0                  	dw	df_rt_play
e521 : 85f1                  	dw	df_rt_save
e523 : d7f1                  	dw	df_rt_load
e525 : 40ea                  	dw	df_rt_read
e527 : 9fe7                  	dw	df_rt_new
e529 : e6ec                  	dw	df_rt_renum
e52b : 22ec                  	dw	df_rt_wait
e52d : 3df2                  	dw	df_rt_reset
e52f : ceeb                  	dw	df_rt_hires
e531 : e7eb                  	dw	df_rt_point
e533 : 11ec                  	dw	df_rt_line
e535 : 03ec                  	dw	df_rt_lineto
e537 : d1eb                  	dw	df_rt_pixmode
e539 : d7eb                  	dw	df_rt_ink
e53b : ddeb                  	dw	df_rt_paper
e53d : f1eb                  	dw	df_rt_circle
                             ;	dw	df_rt_fill
e53f : bfeb                  	dw	df_rt_himem
e541 : 9ce7                  	dw	df_rt_monitor
e543 : 67f4                  	dw	df_rt_sprchar
e545 : 71f4                  	dw	df_rt_sprpos
e547 : 7df4                  	dw	df_rt_sprupd
e549 : 86f4                  	dw	df_rt_sprinit
e54b : 89f4                  	dw	df_rt_sprmulti
e54d : 64f1                  	dw	df_rt_bsave
e54f : 31f1                  	dw	df_rt_bload
e551 : dcf0                  	dw	df_rt_tsave
e553 : f6f0                  	dw	df_rt_tload
                             
e555 : 54f2                  	dw	df_rt_peek
e557 : 52f2                  	dw	df_rt_deek
e559 : ddf2                  	dw	df_rt_stick
e55b : e3f2                  	dw	df_rt_get
e55d : a3f3                  	dw	df_rt_chr
e55f : e8f3                  	dw	df_rt_left
e561 : f9f3                  	dw	df_rt_right
e563 : 14f4                  	dw	df_rt_mid
e565 : 32f4                  	dw	df_rt_len
e567 : 8ff2                  	dw	df_rt_mem
e569 : f7f2                  	dw	df_rt_scrn
e56b : 6df2                  	dw	df_rt_rnd
e56d : 11f3                  	dw	df_rt_elapsed
e56f : 2cf3                  	dw	df_rt_call
e571 : b7f3                  	dw	df_rt_hex
e573 : 3ef4                  	dw	df_rt_asc
e575 : 4ff4                  	dw	df_rt_val
e577 : 04f3                  	dw	df_rt_pixel
e579 : 8ff4                  	dw	df_rt_sprhit
e57b : 3ef3                  	dw	df_rt_sgn
e57d : 5bf3                  	dw	df_rt_addr
                             	
e57f : f2e5                  	dw	df_rt_mult
e581 : 13e6                  	dw	df_rt_div
e583 : 34e6                  	dw	df_rt_mod
AS65 Assembler for R6502 [1.42].                                     Page  198
-------------------------------- bank\bank0.s --------------------------------

e585 : 55e6                  	dw	df_rt_asl
e587 : 68e6                  	dw	df_rt_lsr
e589 : cce5                  	dw	df_rt_add
e58b : dfe5                  	dw	df_rt_sub
                             	
e58d : 7be6                  	dw	df_rt_and
e58f : 8ae6                  	dw	df_rt_or
e591 : 99e6                  	dw	df_rt_eor
e593 : 32e7                  	dw	df_rt_comlte
e595 : 3be7                  	dw	df_rt_comgte
e597 : 44e7                  	dw	df_rt_comne
e599 : 17e7                  	dw	df_rt_comlt
e59b : 20e7                  	dw	df_rt_comgt
e59d : 29e7                  	dw	df_rt_comeq
                             
                             
                             ; escape sequence handlers
                             ; to do the reverse of tokenising during the list
                             ; command which is also used to save to disk.
e59f :                       df_rt_escjmp
e59f : 9dee                  	dw df_rt_lst_chr
e5a1 : 9cee                  	dw df_rt_lst_reserved
e5a3 : 9cee                  	dw df_rt_lst_reserved
e5a5 : 9cee                  	dw df_rt_lst_reserved
e5a7 : 9cee                  	dw df_rt_lst_reserved	
e5a9 : 9cee                  	dw df_rt_lst_reserved	; no such thing as bytdec
e5ab : baee                  	dw df_rt_lst_bythex
e5ad : dfee                  	dw df_rt_lst_bytbin
e5af : 9cee                  	dw df_rt_lst_reserved	
e5b1 : 03ef                  	dw df_rt_lst_intdec
e5b3 : cdee                  	dw df_rt_lst_inthex
e5b5 : e7ee                  	dw df_rt_lst_intbin
e5b7 : 9cee                  	dw df_rt_lst_reserved
e5b9 : 9cee                  	dw df_rt_lst_reserved
e5bb : 9cee                  	dw df_rt_lst_reserved
e5bd : 9cee                  	dw df_rt_lst_reserved	
e5bf : 60ef                  	dw df_rt_lst_strlit
e5c1 : 0eef                  	dw df_rt_lst_var
e5c3 : 0eef                  	dw df_rt_lst_proc
                             
                             	include "dflat/rtsubs.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  RTSUBS.S
                             ;*  Module that implements the runtime execution 
                             ;*  keywords and functions.
                             ;*  So this is where most of the action is for ru
                             ;*  a line is being executed, the dflat runtime c
                             ;*  jumps through the runtime table to routines h
                             ;*  Every dflat statement begins with a token (ig
                             ;*  whitespace), even the implicit assignment and
                             ;*  invocation.
                             ;*
                             ;************************************************
                             
                             	; ROM code
AS65 Assembler for R6502 [1.42].                                     Page  199
-------------------------------- bank\bank0.s --------------------------------

                             	code
                             
e5c5 :                       mod_sz_rtsubs_s
                             
                             	include "dflat/numop.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  NUMOP.S
                             ;*	Dflat number AND string operators.
                             ;*  Uses the operator stack to get parameters, le
                             ;*  result on the operator stack.
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code  
                             
                             ; common pushint code
e5c5 :                       df_rt_putintres
e5c5 : a6a1             [ 3] 	ldx df_tmpptra
e5c7 : a5a2             [ 3] 	lda df_tmpptra+1
e5c9 : 4c4df6           [ 3] 	jmp df_ost_pushInt
                             
                             ; add two numbers
e5cc :                       df_rt_add
e5cc : 2019e3           [ 6] 	jsr df_rt_get2Ints
                             	_addZPWord df_tmpptra,df_tmpptrb
                             
e5dc : 4cc5e5           [ 3] 	jmp df_rt_putintres
                             	
                             ; subtract
e5df :                       df_rt_sub
e5df : 2019e3           [ 6] 	jsr df_rt_get2Ints
                             	_subZPWord df_tmpptra,df_tmpptrb
                             
e5ef : 4cc5e5           [ 3] 	jmp df_rt_putintres
                             
                             ; multiply
e5f2 :                       df_rt_mult
e5f2 : 2019e3           [ 6] 	jsr df_rt_get2Ints
                             	_cpyZPWord df_tmpptra,num_a
                             
                             	_cpyZPWord df_tmpptrb,num_b
                             
e605 : 2089d4           [ 6] 	jsr int_mult
                             	_cpyZPWord num_a,df_tmpptra
                             
e610 : 4cc5e5           [ 3] 	jmp df_rt_putintres
                             
                             ; divide
e613 :                       df_rt_div
e613 : 2019e3           [ 6] 	jsr df_rt_get2Ints
                             	_cpyZPWord df_tmpptra,num_a
                             
                             	_cpyZPWord df_tmpptrb,num_b
                             
AS65 Assembler for R6502 [1.42].                                     Page  200
-------------------------------- bank\bank0.s --------------------------------

e626 : 20b4d4           [ 6] 	jsr int_div
                             	_cpyZPWord num_a,df_tmpptra
                             
e631 : 4cc5e5           [ 3] 	jmp df_rt_putintres
                             
                             ; mod
e634 :                       df_rt_mod
e634 : 2019e3           [ 6] 	jsr df_rt_get2Ints
                             	_cpyZPWord df_tmpptra,num_a
                             
                             	_cpyZPWord df_tmpptrb,num_b
                             
e647 : 20b4d4           [ 6] 	jsr int_div
                             	_cpyZPWord num_x,df_tmpptra
                             
e652 : 4cc5e5           [ 3] 	jmp df_rt_putintres
                             
                             ; shift left
e655 :                       df_rt_asl
e655 : 2019e3           [ 6] 	jsr df_rt_get2Ints
                             	; use low byte only for # of shifts
e658 : a6a3             [ 3] 	ldx df_tmpptrb
e65a : e8               [ 2] 	inx
e65b :                       df_rt_aslbit
e65b : ca               [ 2] 	dex
e65c : f007             [ 3] 	beq df_rt_asldone
e65e : 06a1             [ 5] 	asl df_tmpptra
e660 : 26a2             [ 5] 	rol df_tmpptra+1
e662 : 4c5be6           [ 3] 	jmp df_rt_aslbit
e665 :                       df_rt_asldone
e665 : 4cc5e5           [ 3] 	jmp df_rt_putintres
                             
                             ; shift right
e668 :                       df_rt_lsr
e668 : 2019e3           [ 6] 	jsr df_rt_get2Ints
                             	; use low byte only for # of shifts
e66b : a6a3             [ 3] 	ldx df_tmpptrb
e66d : e8               [ 2] 	inx
e66e :                       df_rt_lsrbit
e66e : ca               [ 2] 	dex
e66f : f007             [ 3] 	beq df_rt_lsrdone
e671 : 46a2             [ 5] 	lsr df_tmpptra+1
e673 : 66a1             [ 5] 	ror df_tmpptra
e675 : 4c6ee6           [ 3] 	jmp df_rt_lsrbit
e678 :                       df_rt_lsrdone
e678 : 4cc5e5           [ 3] 	jmp df_rt_putintres
                             
                             ; logical and
e67b :                       df_rt_and
e67b : 2019e3           [ 6] 	jsr df_rt_get2Ints
e67e : a5a1             [ 3] 	lda df_tmpptra
e680 : 25a3             [ 3] 	and df_tmpptrb
e682 : aa               [ 2] 	tax
e683 : a5a2             [ 3] 	lda df_tmpptra+1
e685 : 25a4             [ 3] 	and df_tmpptrb+1
e687 : 4c4df6           [ 3] 	jmp df_ost_pushInt
                             	
                             ; logical or
e68a :                       df_rt_or
e68a : 2019e3           [ 6] 	jsr df_rt_get2Ints
e68d : a5a1             [ 3] 	lda df_tmpptra
e68f : 05a3             [ 3] 	ora df_tmpptrb
AS65 Assembler for R6502 [1.42].                                     Page  201
-------------------------------- bank\bank0.s --------------------------------

e691 : aa               [ 2] 	tax
e692 : a5a2             [ 3] 	lda df_tmpptra+1
e694 : 05a4             [ 3] 	ora df_tmpptrb+1
e696 : 4c4df6           [ 3] 	jmp df_ost_pushInt
                             
                             ; logical eor
e699 :                       df_rt_eor
e699 : 2019e3           [ 6] 	jsr df_rt_get2Ints
e69c : a5a1             [ 3] 	lda df_tmpptra
e69e : 45a3             [ 3] 	eor df_tmpptrb
e6a0 : aa               [ 2] 	tax
e6a1 : a5a2             [ 3] 	lda df_tmpptra+1
e6a3 : 45a4             [ 3] 	eor df_tmpptrb+1
e6a5 : 4c4df6           [ 3] 	jmp df_ost_pushInt
                             
                             ; a==b common function
e6a8 :                       df_rt_aequb
e6a8 : a5a1             [ 3] 	lda df_tmpptra
e6aa : c5a3             [ 3] 	cmp df_tmpptrb
e6ac : d004             [ 3] 	bne df_rt_aequbFin
e6ae : a5a2             [ 3] 	lda df_tmpptra+1
e6b0 : c5a4             [ 3] 	cmp df_tmpptrb+1
e6b2 :                       df_rt_aequbFin
e6b2 : 60               [ 6] 	rts
                             
                             ; a-b common function
e6b3 :                       df_rt_asubb
e6b3 : 38               [ 2] 	sec
e6b4 : a5a1             [ 3] 	lda df_tmpptra
e6b6 : e5a3             [ 3] 	sbc df_tmpptrb
e6b8 : a5a2             [ 3] 	lda df_tmpptra+1
e6ba : e5a4             [ 3] 	sbc df_tmpptrb+1
e6bc : 5002             [ 3] 	bvc df_rt_asubbFin
e6be : 4980             [ 2] 	eor #0x80
e6c0 :                       df_rt_asubbFin
e6c0 : 60               [ 6] 	rts
                             
                             ; b-a common function
e6c1 :                       df_rt_bsuba
e6c1 : 38               [ 2] 	sec
e6c2 : a5a3             [ 3] 	lda df_tmpptrb
e6c4 : e5a1             [ 3] 	sbc df_tmpptra
e6c6 : a5a4             [ 3] 	lda df_tmpptrb+1
e6c8 : e5a2             [ 3] 	sbc df_tmpptra+1
e6ca : 5002             [ 3] 	bvc df_rt_bsubaFin
e6cc : 4980             [ 2] 	eor #0x80
e6ce :                       df_rt_bsubaFin
e6ce : 60               [ 6] 	rts
                             
                             ; common routine push true
e6cf :                       df_rt_true
e6cf : a2ff             [ 2] 	ldx #0xff
e6d1 : 8a               [ 2] 	txa
e6d2 : 4c4df6           [ 3] 	jmp df_ost_pushInt
                             
                             ; common routine push false
e6d5 :                       df_rt_false
e6d5 : a200             [ 2] 	ldx #0x00
e6d7 : 8a               [ 2] 	txa
e6d8 : 4c4df6           [ 3] 	jmp df_ost_pushInt
                             
                             ; a < b == (a-b) < 0
AS65 Assembler for R6502 [1.42].                                     Page  202
-------------------------------- bank\bank0.s --------------------------------

e6db :                       df_rt_lt
e6db : 2019e3           [ 6] 	jsr df_rt_get2Ints
e6de : 20b3e6           [ 6] 	jsr df_rt_asubb
e6e1 : 30ec             [ 3] 	bmi df_rt_true
e6e3 : 10f0             [ 3] 	bpl df_rt_false
                             
                             ; a <=b == !(b-a > 0)
e6e5 :                       df_rt_lte
e6e5 : 2019e3           [ 6] 	jsr df_rt_get2Ints
e6e8 :                       df_rt_lte_calc
e6e8 : 20c1e6           [ 6] 	jsr df_rt_bsuba
e6eb : 30e8             [ 3] 	bmi df_rt_false
e6ed : 10e0             [ 3] 	bpl df_rt_true
                             
                             ; a > b == (b-a) < 0
e6ef :                       df_rt_gt
e6ef : 2019e3           [ 6] 	jsr df_rt_get2Ints
e6f2 : 20c1e6           [ 6] 	jsr df_rt_bsuba
e6f5 : 30d8             [ 3] 	bmi df_rt_true
e6f7 : 10dc             [ 3] 	bpl df_rt_false
                             
                             ; a >= b == (a-b >=0)
e6f9 :                       df_rt_gte
e6f9 : 2019e3           [ 6] 	jsr df_rt_get2Ints
e6fc :                       df_rt_gte_calc
e6fc : 20b3e6           [ 6] 	jsr df_rt_asubb
e6ff : 10ce             [ 3] 	bpl df_rt_true
e701 : 30d2             [ 4] 	bmi df_rt_false
                             
                             ; a == b
e703 :                       df_rt_eq
e703 : 2019e3           [ 6] 	jsr df_rt_get2Ints
e706 : 20a8e6           [ 6] 	jsr df_rt_aequb
e709 : d0ca             [ 4] 	bne df_rt_false
e70b : f0c2             [ 4] 	beq df_rt_true
                             
                             ; a <> b
e70d :                       df_rt_ne
e70d : 2019e3           [ 6] 	jsr df_rt_get2Ints
e710 : 20a8e6           [ 6] 	jsr df_rt_aequb
e713 : f0c0             [ 4] 	beq df_rt_false
e715 : d0b8             [ 4] 	bne df_rt_true
                             
                             ; Common usage of boolean operators for num and s
                             
e717 :                       df_rt_comlt
                             	; First find the data type on the stack
e717 : 2077f6           [ 6] 	jsr df_ost_peekType
e71a : 2980             [ 2] 	and #DFST_STR
e71c : d04a             [ 3] 	bne df_rt_slt
                             	; If not string then assume number
e71e : f0bb             [ 4] 	beq df_rt_lt
                             
e720 :                       df_rt_comgt
                             	; First find the data type on the stack
e720 : 2077f6           [ 6] 	jsr df_ost_peekType
e723 : 2980             [ 2] 	and #DFST_STR
e725 : d048             [ 3] 	bne df_rt_sgt
                             	; If not string then assume number
e727 : f0c6             [ 4] 	beq df_rt_gt
                             
e729 :                       df_rt_comeq
AS65 Assembler for R6502 [1.42].                                     Page  203
-------------------------------- bank\bank0.s --------------------------------

                             	; First find the data type on the stack
e729 : 2077f6           [ 6] 	jsr df_ost_peekType
e72c : 2980             [ 2] 	and #DFST_STR
e72e : d048             [ 3] 	bne df_rt_seq
                             	; If not string then assume number
e730 : f0d1             [ 3] 	beq df_rt_eq
                             
e732 :                       df_rt_comlte
                             	; First find the data type on the stack
e732 : 2077f6           [ 6] 	jsr df_ost_peekType
e735 : 2980             [ 2] 	and #DFST_STR
e737 : d014             [ 3] 	bne df_rt_slte
                             	; If not string then assume number
e739 : f0aa             [ 4] 	beq df_rt_lte
                             	
e73b :                       df_rt_comgte
                             	; First find the data type on the stack
e73b : 2077f6           [ 6] 	jsr df_ost_peekType
e73e : 2980             [ 2] 	and #DFST_STR
e740 : d018             [ 3] 	bne df_rt_sgte
                             	; If not string then assume number
e742 : f0b5             [ 4] 	beq df_rt_gte
                             
e744 :                       df_rt_comne
                             	; First find the data type on the stack
e744 : 2077f6           [ 6] 	jsr df_ost_peekType
e747 : 2980             [ 2] 	and #DFST_STR
e749 : d016             [ 3] 	bne df_rt_sne
                             	; If not string then assume number
e74b : f0c0             [ 3] 	beq df_rt_ne
                             
                             
                             ;********** STRING OPS **********
                             
                             ; string less than or equal
e74d :                       df_rt_slte
e74d : 207fe7           [ 6] 	jsr df_rt_str_comp
e750 : 3005             [ 3] 	bmi df_rt_str_comp_true
e752 : f003             [ 3] 	beq df_rt_str_comp_true
e754 :                       df_rt_str_comp_false
e754 : 4cd5e6           [ 3] 	jmp df_rt_false
e757 :                       df_rt_str_comp_true
e757 : 4ccfe6           [ 3] 	jmp df_rt_true	
                             
                             ; string greater then or equal	
e75a :                       df_rt_sgte
e75a : 207fe7           [ 6] 	jsr df_rt_str_comp
e75d : 10f8             [ 3] 	bpl df_rt_str_comp_true
e75f : 30f3             [ 3] 	bmi df_rt_str_comp_false
                             
                             ; string not equal
e761 :                       df_rt_sne
e761 : 207fe7           [ 6] 	jsr df_rt_str_comp
e764 : d0f1             [ 3] 	bne df_rt_str_comp_true
e766 : f0ec             [ 3] 	beq df_rt_str_comp_false
                             
                             ; string less than
e768 :                       df_rt_slt
e768 : 207fe7           [ 6] 	jsr df_rt_str_comp
e76b : 30ea             [ 3] 	bmi df_rt_str_comp_true
e76d : 10e5             [ 3] 	bpl df_rt_str_comp_false
                             
AS65 Assembler for R6502 [1.42].                                     Page  204
-------------------------------- bank\bank0.s --------------------------------

                             ; string greater than
e76f :                       df_rt_sgt
e76f : 207fe7           [ 6] 	jsr df_rt_str_comp
e772 : 30e0             [ 3] 	bmi df_rt_str_comp_false
e774 : f0de             [ 3] 	beq df_rt_str_comp_false
e776 : d0df             [ 3] 	bne df_rt_str_comp_true
                             
                             ; string equal
e778 :                       df_rt_seq
e778 : 207fe7           [ 6] 	jsr df_rt_str_comp
e77b : f0da             [ 3] 	beq df_rt_str_comp_true
e77d : d0d5             [ 3] 	bne df_rt_str_comp_false
                             
                             ; common string comparator
                             ; N=1 means <
                             ; Z=0 means >
                             ; Z=1 means ==
e77f :                       df_rt_str_comp
e77f : 2028e3           [ 6] 	jsr df_rt_get2Strs
e782 : a000             [ 2] 	ldy #0
e784 :                       df_rt_str_comp_byte
e784 : b1a1             [ 5] 	lda (df_tmpptra),y
e786 : aa               [ 2] 	tax							; Save op1 char in X
e787 : d1a3             [ 5] 	cmp (df_tmpptrb),y
                             	; if c=0 then <
e789 : 9008             [ 3] 	bcc df_rt_str_comp_lt
                             	; if c=1 and nz then >
e78b : d009             [ 3] 	bne df_rt_str_comp_gt
                             	; if here then both strings still the same
e78d : 8a               [ 2] 	txa							; What was op1 char
                             	; if char is zero then end
e78e : f009             [ 3] 	beq df_rt_str_comp_eq
                             	; else do next char
e790 : c8               [ 2] 	iny
e791 : d0f1             [ 3] 	bne df_rt_str_comp_byte ; Always - relying on Y 
e793 :                       df_rt_str_comp_lt
e793 : a9ff             [ 2] 	lda #0xff
e795 : 60               [ 6] 	rts
e796 :                       df_rt_str_comp_gt
e796 : a901             [ 2] 	lda #0x01
e798 : 60               [ 6] 	rts
e799 :                       df_rt_str_comp_eq
e799 : a900             [ 2] 	lda #0x00
e79b : 60               [ 6] 	rts
                             
                             
                             
                             
e79c :                       df_rt_monitor
e79c : 4c04d3           [ 3] 	jmp command_line
                             
e79f :                       df_rt_new
e79f : 4caef6           [ 3] 	jmp df_clear
                             
e7a2 :                       df_rt_while
                             	; push statement address
e7a2 : 202de4           [ 6] 	jsr df_rt_push_stat
                             	; DFRT_WHILE token
e7a5 : a990             [ 2] 	lda #DFRT_WHILE
e7a7 : 2004f6           [ 6] 	jsr df_rst_pushByte
                             
                             	; get value in A,X
AS65 Assembler for R6502 [1.42].                                     Page  205
-------------------------------- bank\bank0.s --------------------------------

e7aa : 206de0           [ 6] 	jsr df_rt_getnval
                             
                             	; if value<>0 then continue
e7ad : e000             [ 2] 	cpx #0
e7af : f001             [ 3] 	beq df_rt_while_done
e7b1 : 60               [ 6] 	rts
e7b2 :                       df_rt_while_done
                             	; pop while data off stack as not needed
e7b2 : 202af6           [ 6] 	jsr df_rst_popWord
e7b5 : 202af6           [ 6] 	jsr df_rst_popWord
                             	; while evaluated false so find wend
                             	; but check for any nested while/wends
                             	; nest = 1 to start
e7b8 : a593             [ 3] 	lda df_ifnest
e7ba : 48               [ 3] 	pha
e7bb : a901             [ 2] 	lda #1
e7bd : 8593             [ 3] 	sta df_ifnest
                             	; find the matching else/elseif/endif
                             	; start from current statement
                             	_cpyZPWord df_currlin,df_nextlin
                             
e7c7 :                       df_rt_findwend
e7c7 : a689             [ 3] 	ldx df_nextlin
e7c9 : a58a             [ 3] 	lda df_nextlin+1
e7cb : a480             [ 3] 	ldy df_curstidx
e7cd : 20fde3           [ 6] 	jsr df_rt_nextstat
                             	; got to end of program, then a problem
e7d0 : b031             [ 4] 	bcs df_rt_wend_end
e7d2 : 8689             [ 3] 	stx df_nextlin
e7d4 : 858a             [ 3] 	sta df_nextlin+1
e7d6 : 8480             [ 3] 	sty df_curstidx
                             	; find the command token
e7d8 :                       df_rt_while_cmd
e7d8 : c8               [ 2] 	iny
e7d9 : b189             [ 5] 	lda (df_nextlin),y
e7db : 10fb             [ 3] 	bpl df_rt_while_cmd
                             	; check for wend
e7dd : c991             [ 2] 	cmp #DFRT_WEND
e7df : d019             [ 3] 	bne df_rt_check_while
                             	; decrement nest
e7e1 : c693             [ 5] 	dec df_ifnest
                             	; if not zero then go find more commands
e7e3 : d0e2             [ 3] 	bne df_rt_findwend
                             	; else found it, restore if nest
                             	; and skip the wend statement
e7e5 : 68               [ 4] 	pla
e7e6 : 8593             [ 3] 	sta df_ifnest
e7e8 : a689             [ 3] 	ldx df_nextlin
e7ea : a58a             [ 3] 	lda df_nextlin+1
e7ec : a480             [ 3] 	ldy df_curstidx
e7ee : 20fde3           [ 6] 	jsr df_rt_nextstat
                             	; got to end of program, then a problem
e7f1 : b010             [ 4] 	bcs df_rt_wend_end
                             	; need to update nxtstidx to transfer control
e7f3 : 8689             [ 3] 	stx df_nextlin
e7f5 : 858a             [ 3] 	sta df_nextlin+1
e7f7 : 847f             [ 3] 	sty df_nxtstidx
e7f9 : 60               [ 6] 	rts
e7fa :                       df_rt_check_while
                             	; check for while
e7fa : c990             [ 2] 	cmp #DFRT_WHILE
e7fc : d0c9             [ 3] 	bne df_rt_findwend
AS65 Assembler for R6502 [1.42].                                     Page  206
-------------------------------- bank\bank0.s --------------------------------

                             	; if while found then increment nest
e7fe : e693             [ 5] 	inc df_ifnest
e800 : 4cc7e7           [ 3] 	jmp df_rt_findwend
e803 :                       df_rt_wend_end
                             	SWBRK DFERR_IMMEDIATE
                             
                             
e805 :                       df_rt_wend
e805 : 200df6           [ 6] 	jsr df_rst_popByte
e808 : c990             [ 2] 	cmp #DFRT_WHILE
e80a : d00d             [ 3] 	bne df_rt_wend_err
                             	; pop the stat and continue
e80c : 202af6           [ 6] 	jsr df_rst_popWord
e80f : 8689             [ 3] 	stx	df_nextlin
e811 : 858a             [ 3] 	sta df_nextlin+1
e813 : 200df6           [ 6] 	jsr df_rst_popByte
e816 : 857f             [ 3] 	sta df_nxtstidx
e818 : 60               [ 6] 	rts
e819 :                       df_rt_wend_err
                             	SWBRK DFERR_WEND
                             
                             
                             ;move to next statement during if/else matching
                             ;end of program is an error
e81b :                       df_rt_if_stat
e81b : a689             [ 3] 	ldx df_nextlin
e81d : a58a             [ 3] 	lda df_nextlin+1
e81f : a480             [ 3] 	ldy df_curstidx
e821 : 20fde3           [ 6] 	jsr df_rt_nextstat
                             	; got to end of program, then a problem
e824 : b009             [ 3] 	bcs df_rt_if_stat_err
e826 : 8689             [ 3] 	stx df_nextlin
e828 : 858a             [ 3] 	sta df_nextlin+1
e82a : 8480             [ 3] 	sty df_curstidx
e82c : 847f             [ 3] 	sty df_nxtstidx
e82e : 60               [ 6] 	rts
                             ; program ended with no match
e82f :                       df_rt_if_stat_err
                             	SWBRK DFERR_UNCLOSEDIF
                             
                             
                             ; find matching else/elseif/endif
                             ; C = 0 match else/elseif/endif
                             ; C = 1 match endif only
                             ; endif is always matched
                             ; ** MAKE SURE NEXTLIN IS POPULATED! **
e831 :                       df_rt_if_match
                             	; save the current if nest level
e831 : a593             [ 3] 	lda df_ifnest
e833 : 48               [ 3] 	pha
                             	; local if nest level is zero to start with
e834 : a900             [ 2] 	lda #0
e836 : 8593             [ 3] 	sta df_ifnest
                             	; save match pref
e838 : 08               [ 3] 	php
                             	; find the matching else/elseif/endif
                             	; start from df_nextlin, df_curstidx
e839 :                       df_rt_findelseendif
e839 : 201be8           [ 6] 	jsr df_rt_if_stat
                             	; find command
e83c :                       df_rt_ifcmd
e83c : c8               [ 2] 	iny
AS65 Assembler for R6502 [1.42].                                     Page  207
-------------------------------- bank\bank0.s --------------------------------

e83d : b189             [ 5] 	lda (df_nextlin),y
e83f : 10fb             [ 3] 	bpl df_rt_ifcmd
                             	; check for endif
e841 : c994             [ 2] 	cmp #DFRT_ENDIF
e843 : f015             [ 3] 	beq df_rt_ifelse
                             
e845 : 28               [ 4] 	plp
e846 : 08               [ 3] 	php
                             
e847 : b008             [ 3] 	bcs df_rt_ifskipelseif
e849 : c993             [ 2] 	cmp #DFRT_ELSE
e84b : f00d             [ 3] 	beq df_rt_ifelse
e84d : c995             [ 2] 	cmp #DFRT_ELSEIF
e84f : f009             [ 3] 	beq df_rt_ifelse
e851 :                       df_rt_ifskipelseif
                             	; another if token found - increment lcoal if ne
e851 : c992             [ 2] 	cmp #DFRT_IF
e853 : d002             [ 3] 	bne df_rt_skipnestif
e855 : e693             [ 5] 	inc df_ifnest
e857 :                       df_rt_skipnestif
                             	; no tokens of interest found, so next statement
e857 : 4c39e8           [ 3] 	jmp df_rt_findelseendif
                             
                             	; found else/elseif/endif
                             	; but check if this is nested
e85a :                       df_rt_ifelse
                             	; nest counter zero then found matching else/els
e85a : a693             [ 3] 	ldx df_ifnest
e85c : f009             [ 3] 	beq df_rt_if_found
                             	; endif token found so decrement local nest
e85e : c994             [ 2] 	cmp #DFRT_ENDIF
e860 : d002             [ 3] 	bne df_rt_skipnestendif
e862 : c693             [ 5] 	dec df_ifnest
e864 :                       df_rt_skipnestendif
                             	; continue to search for else/endif
e864 : 4c39e8           [ 3] 	jmp df_rt_findelseendif
                             	; ok got a match
e867 :                       df_rt_if_found
                             	; remove pref
e867 : 28               [ 4] 	plp
                             	; restore global if nest
e868 : 8538             [ 3] 	sta tmp_d			; Using as a temp place!
e86a : 68               [ 4] 	pla					; Get nest from stack
e86b : aa               [ 2] 	tax					; And put in X
e86c : a538             [ 3] 	lda tmp_d			; Get a back from temp!
e86e : 8693             [ 3] 	stx df_ifnest		; Now restore the nest counter
                             
                             	;A contains the token found, Y is index in to df
                             ;	clc
e870 : 60               [ 6] 	rts
                             
e871 :                       df_rt_endif
                             	; decrement if next level
e871 : c693             [ 5] 	dec df_ifnest
e873 : 3011             [ 3] 	bmi df_rt_noif_err
e875 :                       df_rt_if_done
e875 : 60               [ 6] 	rts
                             
                             	; else and ifelse encountered in a normal sequen
                             	; only happens when the clause has been executed
                             	; so we only now need to find the endif
e876 :                       df_rt_elseif
AS65 Assembler for R6502 [1.42].                                     Page  208
-------------------------------- bank\bank0.s --------------------------------

e876 :                       df_rt_else
                             	; not in if mode then error
e876 : a593             [ 3] 	lda df_ifnest
e878 : f00c             [ 3] 	beq df_rt_noif_err
                             	; find endif only
                             	; starting from current line and curstidx
                             	_cpyZPWord df_currlin,df_nextlin
                             
e882 : 38               [ 2] 	sec
e883 : 4c31e8           [ 3] 	jmp df_rt_if_match
                             
                             ; endif/else/elseif encountered outside of an if
e886 :                       df_rt_noif_err
                             	SWBRK DFERR_NOIF
                             
                             
                             	; when if is encountered, the job of this routin
                             	; to determine which clause to execute, then tra
                             	; program control to that point.  in normal prog
                             	; sequence else/elseif statements will signify t
                             	; of an if construct.
e888 :                       df_rt_if
                             	; increment global if nest counter
e888 : e693             [ 5] 	inc df_ifnest
e88a :                       df_rt_ifeval
                             	; get value
e88a : 206de0           [ 6] 	jsr df_rt_getnval
                             	; if X,A<>0 if is successful then continue norma
e88d : a8               [ 2] 	tay
e88e : d0e5             [ 3] 	bne df_rt_if_done
e890 : 8a               [ 2] 	txa
e891 : d0e2             [ 3] 	bne df_rt_if_done
                             	; got here then if clause evaluated to false
                             	; match with else/elseif/endif
                             	; df_nextlin is used to find the clause to execu
                             	_cpyZPWord df_currlin,df_nextlin
                             
e89b : 18               [ 2] 	clc
e89c : 2031e8           [ 6] 	jsr df_rt_if_match
                             	; A contains the token found, Y is index of this
                             
e89f : c993             [ 2] 	cmp #DFRT_ELSE
                             	; else: df_nextlin and df_nxtstidx points to the
e8a1 : f023             [ 3] 	beq df_rt_do_else
                             
e8a3 : c994             [ 2] 	cmp #DFRT_ENDIF
                             	; else: df_nextlin and df_nxtstidx points to the
e8a5 : f0ce             [ 3] 	beq df_rt_if_done
                             
                             	; elif detected - increment past the token and e
                             	; make this the current line and token index
                             	_cpyZPWord df_nextlin,df_currlin
                             
                             	; move past the token and save position
e8af : c8               [ 2] 	iny
e8b0 : 98               [ 2] 	tya
e8b1 : 48               [ 3] 	pha
                             	; initialise statement pointer
e8b2 : a480             [ 3] 	ldy df_curstidx
e8b4 : a686             [ 3] 	ldx df_currlin
e8b6 : a587             [ 3] 	lda df_currlin+1
e8b8 : 2075e3           [ 6] 	jsr df_rt_init_stat_ptr
AS65 Assembler for R6502 [1.42].                                     Page  209
-------------------------------- bank\bank0.s --------------------------------

                             	; restore Y (one byte past the token) and save i
e8bb : 68               [ 4] 	pla
e8bc : a8               [ 2] 	tay
e8bd : 8488             [ 3] 	sty df_exeoff
                             	; don't force a jump as we've initalised all var
e8bf : a900             [ 2] 	lda #0
e8c1 : 858a             [ 3] 	sta df_nextlin+1
                             	; now everyting is set up to evaluate the elif c
e8c3 : 4c8ae8           [ 3] 	jmp df_rt_ifeval
                             
e8c6 :                       df_rt_do_else
                             	; we need to point to the next statement not thi
e8c6 : 4c1be8           [ 3] 	jmp df_rt_if_stat
                             
e8c9 :                       df_rt_for
                             	; push statement address to rt stack
e8c9 : 202de4           [ 6] 	jsr df_rt_push_stat
                             	; get lvar
e8cc : 20b4e4           [ 6] 	jsr df_rt_getlvar
                             	; Save lvar pointer, A is fine to trample
e8cf : 48               [ 3] 	pha
e8d0 : 8a               [ 2] 	txa
e8d1 : 48               [ 3] 	pha
                             
                             	; find starting value
                             	; evaluate the starting value
                             	; can't use df_rt_getnval as need to use A,X fir
e8d2 : e688             [ 5] 	inc df_exeoff
e8d4 : 2073e0           [ 6] 	jsr df_rt_neval
                             	; get ready to update the counter using pointer
e8d7 : 68               [ 4] 	pla
e8d8 : aa               [ 2] 	tax
e8d9 : 86a1             [ 3] 	stx df_tmpptra
e8db : 68               [ 4] 	pla
e8dc : 85a2             [ 3] 	sta df_tmpptra+1
                             	; But remember lvar pointer for later A is ok to
e8de : 48               [ 3] 	pha
e8df : 8a               [ 2] 	txa
e8e0 : 48               [ 3] 	pha
                             
                             	; get the starting value from op stack
e8e1 : 207df6           [ 6] 	jsr df_ost_popInt
                             	; save it to counter slot
e8e4 : a001             [ 2] 	ldy #1
e8e6 : 91a1             [ 5] 	sta (df_tmpptra),y
e8e8 : 8a               [ 2] 	txa
e8e9 : 88               [ 2] 	dey
e8ea : 91a1             [ 5] 	sta (df_tmpptra),y
                             
                             	; find end value
                             	; evaluate the end value
e8ec : e688             [ 5] 	inc df_exeoff
e8ee : 206de0           [ 6] 	jsr df_rt_getnval
                             	; and put on rt stack
e8f1 : 201cf6           [ 6] 	jsr df_rst_pushWord
                             
                             	; find step value
                             	; evaluate the end value
e8f4 : e688             [ 5] 	inc df_exeoff
e8f6 : 206de0           [ 6] 	jsr df_rt_getnval
                             	; and push on rt stack
e8f9 : 201cf6           [ 6] 	jsr df_rst_pushWord
AS65 Assembler for R6502 [1.42].                                     Page  210
-------------------------------- bank\bank0.s --------------------------------

                             	; save the counter lvar pointer
e8fc : 68               [ 4] 	pla
e8fd : aa               [ 2] 	tax
e8fe : 68               [ 4] 	pla
e8ff : 201cf6           [ 6] 	jsr df_rst_pushWord
                             	; all done - counter set to start
                             	; stack contains counter slot, step val, end val
                             	; now push for token
e902 : a98e             [ 2] 	lda #DFRT_FOR
e904 : 4c04f6           [ 3] 	jmp df_rst_pushByte
                             
e907 :                       df_rt_next
                             	; remember stack position
e907 : a476             [ 3] 	ldy df_rtstop
e909 : 98               [ 2] 	tya
e90a : 48               [ 3] 	pha
e90b : 200df6           [ 6] 	jsr df_rst_popByte
e90e : c98e             [ 2] 	cmp #DFRT_FOR
e910 : d04e             [ 3] 	bne df_rt_next_err
                             	; get the slot address
e912 : 202af6           [ 6] 	jsr df_rst_popWord
                             	; save address to ptrd, contents to ptra
e915 : 86a7             [ 3] 	stx df_tmpptrd
e917 : 85a8             [ 3] 	sta df_tmpptrd+1
e919 : a000             [ 2] 	ldy #0
e91b : b1a7             [ 5] 	lda (df_tmpptrd),y
e91d : 85a1             [ 3] 	sta df_tmpptra
e91f : c8               [ 2] 	iny
e920 : b1a7             [ 5] 	lda (df_tmpptrd),y
e922 : 85a2             [ 3] 	sta df_tmpptra+1
                             
                             	; get step value, save in ptrb
e924 : 202af6           [ 6] 	jsr df_rst_popWord
e927 : 86a3             [ 3] 	stx df_tmpptrb
e929 : 85a4             [ 3] 	sta df_tmpptrb+1
e92b : 48               [ 3] 	pha					; Push A to check for -ve step
                             
                             	; add step to counter and save back to counter
                             	_addZPWord df_tmpptra,df_tmpptrb
                             
e939 : a5a1             [ 3] 	lda df_tmpptra
e93b : a000             [ 2] 	ldy #0
e93d : 91a7             [ 5] 	sta (df_tmpptrd),y
e93f : a5a2             [ 3] 	lda df_tmpptra+1
e941 : c8               [ 2] 	iny
e942 : 91a7             [ 5] 	sta (df_tmpptrd),y
                             
                             	; get end value, save in ptrb
e944 : 202af6           [ 6] 	jsr df_rst_popWord
e947 : 86a3             [ 3] 	stx df_tmpptrb
e949 : 85a4             [ 3] 	sta df_tmpptrb+1
e94b : 68               [ 4] 	pla					; check if if +ve or -ve step
e94c : 1006             [ 3] 	bpl df_rt_check_pos
                             	; call gte operation but no need to get ints
                             	; as already in ptra and ptrb
e94e : 20fce6           [ 6] 	jsr df_rt_gte_calc
e951 : 4c57e9           [ 3] 	jmp df_rt_next_check
e954 :                       df_rt_check_pos
                             	; call lte operation but no need to get ints
                             	; as already in ptra and ptrb
e954 : 20e8e6           [ 6] 	jsr df_rt_lte_calc
e957 :                       df_rt_next_check
AS65 Assembler for R6502 [1.42].                                     Page  211
-------------------------------- bank\bank0.s --------------------------------

                             	; check if true or false
e957 : 207df6           [ 6] 	jsr df_ost_popInt
e95a : 8a               [ 2] 	txa
                             	; if false then next is done
e95b : f020             [ 3] 	beq df_rt_untilnext_done
                             	; else we continue
e95d : 4cd0e4           [ 3] 	jmp df_rt_pop_stat_go
                             
e960 :                       df_rt_next_err
                             	SWBRK DFERR_NEXTFOR
                             
                             
                             
e962 :                       df_rt_repeat
                             	; push statement address
e962 : 202de4           [ 6] 	jsr df_rt_push_stat
                             	; DFRT_REPEAT token
e965 : a98c             [ 2] 	lda #DFRT_REPEAT
e967 : 4c04f6           [ 3] 	jmp df_rst_pushByte
                             
e96a :                       df_rt_until
                             	; remember stack position
e96a : a576             [ 3] 	lda df_rtstop
e96c : 48               [ 3] 	pha
e96d : 200df6           [ 6] 	jsr df_rst_popByte
e970 : c98c             [ 2] 	cmp #DFRT_REPEAT
e972 : d011             [ 3] 	bne df_rt_until_err
                             	; evaluate expression in to A,X
e974 : 206de0           [ 6] 	jsr df_rt_getnval
                             	; if value<>0 then continue
e977 : 8a               [ 2] 	txa
e978 : d003             [ 3] 	bne df_rt_untilnext_done
                             
                             	; pop the stat and continue
e97a : 4cd0e4           [ 3] 	jmp df_rt_pop_stat_go
                             
e97d :                       df_rt_untilnext_done
e97d : 68               [ 4] 	pla
e97e : a8               [ 2] 	tay
                             	; pop 2 items off stack (line address, index)
                             	; and continue
e97f : 202af6           [ 6] 	jsr df_rst_popWord
e982 : 4c0df6           [ 3] 	jmp df_rst_popByte
                             
e985 :                       df_rt_until_err
                             	SWBRK DFERR_UNTIL
                             
                             
e987 :                       df_rt_sadd
e987 : 60               [ 6] 	rts
                             
e988 :                       df_rt_print_num
e988 : 207df6           [ 6] 	jsr df_ost_popInt
e98b : 18               [ 2] 	clc
e98c : 4cfdc3           [ 3] 	jmp print_a_to_d
                             
e98f :                       df_rt_print_str
e98f : 2081f6           [ 6] 	jsr df_ost_popStr
e992 : 86a1             [ 3] 	stx df_tmpptra
e994 : 85a2             [ 3] 	sta df_tmpptra+1
e996 : a000             [ 2] 	ldy #0
e998 :                       df_rt_print_str_ch
AS65 Assembler for R6502 [1.42].                                     Page  212
-------------------------------- bank\bank0.s --------------------------------

e998 : b1a1             [ 5] 	lda (df_tmpptra),y
e99a : f006             [ 3] 	beq df_rt_print_str_done
e99c : 2054c4           [ 6] 	jsr io_put_ch
e99f : c8               [ 2] 	iny
e9a0 : d0f6             [ 3] 	bne df_rt_print_str_ch		; Rely on y not wrapping
e9a2 :                       df_rt_print_str_done
e9a2 : 60               [ 6] 	rts
                             
                             ; * Find the position of the next data item to re
e9a3 :                       df_rt_nextdatum
e9a3 : a200             [ 2] 	ldx #0
                             	; load data line offset
e9a5 : a496             [ 3] 	ldy df_datoff
                             	; if data pointer unitialised (because high byte
e9a7 : a595             [ 3] 	lda df_currdat+1
e9a9 : d02e             [ 3] 	bne df_rt_skipinitdataptr
                             	; then start at program beginning
                             	_cpyZPWord df_prgstrt,df_currdat
                             
e9b3 :                       df_rt_datlinstart
                             	; if end of program then error
e9b3 : a194             [ 6] 	lda (df_currdat,x)
e9b5 : f032             [ 3] 	beq df_rt_datumerr
                             	; index in to first line byte
e9b7 : a003             [ 2] 	ldy #3
e9b9 : 8496             [ 3] 	sty df_datoff
                             	; find first 'data' statement
e9bb :                       df_rt_datastatement
e9bb : c8               [ 2] 	iny
e9bc : 98               [ 2] 	tya
                             	; end of line reached?
e9bd : c194             [ 6] 	cmp (df_currdat,x)
                             	; if not find data token
e9bf : d00e             [ 3] 	bne df_rt_getdatatk
e9c1 :                       df_rt_datnextlin
                             	; if so then go to next line
e9c1 : 18               [ 2] 	clc
e9c2 : a594             [ 3] 	lda df_currdat
e9c4 : 6194             [ 6] 	adc (df_currdat,x)
e9c6 : 8594             [ 3] 	sta df_currdat
                             	_bcc 2
                             
e9ca : e695             [ 5] 	inc df_currdat+1
e9cc : 4cb3e9           [ 3] 	jmp df_rt_datlinstart
e9cf :                       df_rt_getdatatk
e9cf : b194             [ 5] 	lda (df_currdat),y
e9d1 : 10e8             [ 3] 	bpl df_rt_datastatement
                             	; found data statement?
e9d3 : c996             [ 2] 	cmp #DFRT_DATA
                             	; if not then go to next line
e9d5 : d0ea             [ 3] 	bne df_rt_datnextlin
e9d7 : 8496             [ 3] 	sty df_datoff
e9d9 :                       df_rt_skipinitdataptr
e9d9 : 98               [ 2] 	tya
                             	; end of line reached?
e9da : c194             [ 6] 	cmp (df_currdat,x)
                             	; if so go to next line
e9dc : f0e3             [ 3] 	beq df_rt_datnextlin
                             	; else see if escape value
e9de : b194             [ 5] 	lda (df_currdat),y
e9e0 : c920             [ 2] 	cmp #DFTK_ESCVAL
e9e2 : c8               [ 2] 	iny
AS65 Assembler for R6502 [1.42].                                     Page  213
-------------------------------- bank\bank0.s --------------------------------

e9e3 : b0f4             [ 3] 	bcs df_rt_skipinitdataptr
                             	; ok found an escape value
                             	; save position and return
e9e5 : 88               [ 2] 	dey
e9e6 : 8496             [ 3] 	sty df_datoff
e9e8 : 60               [ 6] 	rts
e9e9 :                       df_rt_datumerr
                             	SWBRK DFERR_NODATA
                             
                             
                             ; read a datum
e9eb :                       df_rt_readdatum
                             	; update data pointer to next data item
e9eb : 20a3e9           [ 6] 	jsr df_rt_nextdatum
                             	; now get lvar X,A from current statement
e9ee : 20b4e4           [ 6] 	jsr df_rt_getlvar
                             	; save lvar in tmpb, vvt ptr in tmpa
e9f1 : 86a3             [ 3] 	stx df_tmpptrb
e9f3 : 85a4             [ 3] 	sta df_tmpptrb+1
                             
                             	; first save save current prgoram line and offse
e9f5 : a586             [ 3] 	lda df_currlin
e9f7 : 48               [ 3] 	pha
e9f8 : a587             [ 3] 	lda df_currlin+1
e9fa : 48               [ 3] 	pha
e9fb : a588             [ 3] 	lda df_exeoff
e9fd : 48               [ 3] 	pha
e9fe : a57e             [ 3] 	lda df_eolidx
ea00 : 48               [ 3] 	pha
ea01 : a57f             [ 3] 	lda df_nxtstidx
ea03 : 48               [ 3] 	pha
ea04 : a580             [ 3] 	lda df_curstidx
ea06 : 48               [ 3] 	pha
                             
                             	; use data pointer as current position for evalu
                             	_cpyZPWord df_currdat,df_currlin
                             
ea0f : a596             [ 3] 	lda df_datoff
ea11 : 8588             [ 3] 	sta df_exeoff
ea13 : a200             [ 2] 	ldx #0
ea15 : a194             [ 6] 	lda (df_currdat,x)
ea17 : 857e             [ 3] 	sta df_eolidx
ea19 : 857f             [ 3] 	sta df_nxtstidx
ea1b : a903             [ 2] 	lda #3
ea1d : 8580             [ 3] 	sta df_curstidx
                             
                             	; get type from vvt ptr in tmpa
ea1f : a1a1             [ 6] 	lda (df_tmpptra,x)
ea21 : a8               [ 2] 	tay
                             	; get lvar point from tmpb
ea22 : a6a3             [ 3] 	ldx df_tmpptrb
ea24 : a5a4             [ 3] 	lda df_tmpptrb+1
                             
                             	; X,A and Y set up, now evaluate and perform ass
ea26 : 20c6ec           [ 6] 	jsr df_rt_doassign
                             
                             	; update data offset as data has been consumed
ea29 : a588             [ 3] 	lda df_exeoff
ea2b : 8596             [ 3] 	sta df_datoff
                             	; restore line settings
ea2d : 68               [ 4] 	pla
ea2e : 8580             [ 3] 	sta df_curstidx
AS65 Assembler for R6502 [1.42].                                     Page  214
-------------------------------- bank\bank0.s --------------------------------

ea30 : 68               [ 4] 	pla
ea31 : 857f             [ 3] 	sta df_nxtstidx
ea33 : 68               [ 4] 	pla
ea34 : 857e             [ 3] 	sta df_eolidx
ea36 : 68               [ 4] 	pla
ea37 : 8588             [ 3] 	sta df_exeoff
ea39 : 68               [ 4] 	pla
ea3a : 8587             [ 3] 	sta df_currlin+1
ea3c : 68               [ 4] 	pla
ea3d : 8586             [ 3] 	sta df_currlin
ea3f : 60               [ 6] 	rts
                             
                             
ea40 :                       df_rt_read
                             	; find variable to read in to from current posit
ea40 : a488             [ 3] 	ldy df_exeoff
ea42 :                       df_rt_read_find_var
ea42 : c8               [ 2] 	iny
                             	; if end of line or statement then done
                             ;	cpy df_eolidx
                             ;	beq df_rt_read_done
ea43 : c47f             [ 3] 	cpy df_nxtstidx
ea45 : f00e             [ 3] 	beq df_rt_read_done
                             	; if not found escape then next byte
ea47 : b186             [ 5] 	lda (df_currlin),y
ea49 : c920             [ 2] 	cmp #DFTK_ESCVAL
ea4b : b0f5             [ 3] 	bcs df_rt_read_find_var
                             	; ok found escape, save position
ea4d : 8488             [ 3] 	sty df_exeoff
                             	; go and read in the value
ea4f : 20ebe9           [ 6] 	jsr df_rt_readdatum
                             	; try find another variable
ea52 : 4c40ea           [ 3] 	jmp df_rt_read
                             
ea55 :                       df_rt_read_done
                             	; save position
ea55 : 8488             [ 3] 	sty df_exeoff
ea57 : 60               [ 6] 	rts
                             
ea58 :                       df_rt_input
                             	; df_tmpptra has the vvt address, X,A is the lva
ea58 : 20b4e4           [ 6] 	jsr df_rt_getlvar
                             	; Save lvar pointer
ea5b : 86a3             [ 3] 	stx df_tmpptrb
ea5d : 85a4             [ 3] 	sta df_tmpptrb+1
                             	; go read a line of input
                             	; buf_lo ptr has the input, Y is size
ea5f : 38               [ 2] 	sec
ea60 : 2069c4           [ 6] 	jsr io_read_line
                             	; check the type
ea63 : a200             [ 2] 	ldx #0
ea65 : a1a1             [ 6] 	lda (df_tmpptra,x)
ea67 : 2904             [ 2] 	and #DFVVT_STR
ea69 : d008             [ 3] 	bne df_rt_input_str
ea6b : a1a1             [ 6] 	lda (df_tmpptra,x)
ea6d : 2903             [ 2] 	and #DFVVT_INT|DFVVT_BYT
ea6f : d00a             [ 3] 	bne df_rt_input_num
                             	; if not int or byte then error
ea71 : f01f             [ 3] 	beq df_rt_input_err
ea73 :                       df_rt_input_str
ea73 : b139             [ 5] 	lda (buf_lo),y
ea75 : 91a3             [ 5] 	sta (df_tmpptrb),y
AS65 Assembler for R6502 [1.42].                                     Page  215
-------------------------------- bank\bank0.s --------------------------------

ea77 : 88               [ 2] 	dey
ea78 : 10f9             [ 3] 	bpl df_rt_input_str
ea7a : 60               [ 6] 	rts
                             
ea7b :                       df_rt_input_num
                             	; X,A = address, linbuff must be on page boundar
ea7b : a53a             [ 3] 	lda buf_lo+1
ea7d : a639             [ 3] 	ldx buf_lo
ea7f : a000             [ 2] 	ldy #0				; any numeric format
ea81 : 20e1c1           [ 6] 	jsr con_n_to_a
ea84 : b00c             [ 3] 	bcs df_rt_input_err
ea86 : a000             [ 2] 	ldy #0
ea88 : a53d             [ 3] 	lda num_a
ea8a : 91a3             [ 5] 	sta (df_tmpptrb),y
ea8c : c8               [ 2] 	iny
ea8d : a53e             [ 3] 	lda num_a+1
ea8f : 91a3             [ 5] 	sta (df_tmpptrb),y
ea91 : 60               [ 6] 	rts
ea92 :                       df_rt_input_err
                             	SWBRK DFERR_TYPEMISM
                             
                             
ea94 :                       df_rt_local
                             	; get current local count off rt stack
ea94 : 200df6           [ 6] 	jsr df_rst_popByte
                             	; save on pc stack for incrmenting
ea97 : 48               [ 3] 	pha
ea98 : a488             [ 3] 	ldy df_exeoff
ea9a : 88               [ 2] 	dey
ea9b :                       df_rt_local_findesc
ea9b : c8               [ 2] 	iny
                             	; check end of line
                             ;	cpy df_eolidx
                             ;	beq df_rt_local_done
ea9c : c47f             [ 3] 	cpy df_nxtstidx
ea9e : f01c             [ 3] 	beq df_rt_local_done
                             	; find a var
eaa0 : b186             [ 5] 	lda (df_currlin),y
eaa2 : c911             [ 2] 	cmp #DFTK_VAR
eaa4 : d0f5             [ 3] 	bne df_rt_local_findesc
                             	; jump over escape value
eaa6 : c8               [ 2] 	iny
                             	; get var slot in A,X
eaa7 : b186             [ 5] 	lda (df_currlin),y
eaa9 : aa               [ 2] 	tax
eaaa : c8               [ 2] 	iny
eaab : b186             [ 5] 	lda (df_currlin),y
eaad : 8488             [ 3] 	sty df_exeoff
                             	; localise this variable
eaaf : 20f0f5           [ 6] 	jsr df_rt_proc_local
                             	; increment local counter
eab2 : 68               [ 4] 	pla
eab3 : 18               [ 2] 	clc
eab4 : 6901             [ 2] 	adc #1
eab6 : 48               [ 3] 	pha
eab7 : a488             [ 3] 	ldy df_exeoff
eab9 : 4c9bea           [ 3] 	jmp df_rt_local_findesc
eabc :                       df_rt_local_done
                             	; get the local counter
                             	; put on to rt stack
eabc : 68               [ 4] 	pla
eabd : 4c04f6           [ 3] 	jmp df_rst_pushByte
AS65 Assembler for R6502 [1.42].                                     Page  216
-------------------------------- bank\bank0.s --------------------------------

                             
                             
eac0 :                       df_rt_dim
eac0 : a488             [ 3] 	ldy df_exeoff
eac2 : 88               [ 2] 	dey
eac3 :                       df_rt_dim_findesc
                             	; check end of line
eac3 : c8               [ 2] 	iny
                             ;	cpy df_eolidx
                             ;	beq df_rt_dim_done
eac4 : c47f             [ 3] 	cpy df_nxtstidx
eac6 : f07a             [ 4] 	beq df_rt_dim_done
                             	; find a var
eac8 : b186             [ 5] 	lda (df_currlin),y
eaca : c911             [ 2] 	cmp #DFTK_VAR
eacc : d0f5             [ 3] 	bne df_rt_dim_findesc
                             	; jump over escape value
eace : c8               [ 2] 	iny
                             	; get var address
eacf : b186             [ 5] 	lda (df_currlin),y
ead1 : 85a1             [ 3] 	sta df_tmpptra
ead3 : c8               [ 2] 	iny
ead4 : b186             [ 5] 	lda (df_currlin),y
ead6 : 85a2             [ 3] 	sta df_tmpptra+1
                             	; move to open bracket
ead8 : c8               [ 2] 	iny
ead9 : 8488             [ 3] 	sty df_exeoff
                             	; check if already dim'd
eadb : a003             [ 2] 	ldy #DFVVT_DIM1
eadd : b1a1             [ 5] 	lda (df_tmpptra),y
eadf : d062             [ 4] 	bne df_rt_dim_err
                             	; Save slot address found earlier
eae1 : a5a1             [ 3] 	lda df_tmpptra
eae3 : 48               [ 3] 	pha
eae4 : a5a2             [ 3] 	lda df_tmpptra+1
eae6 : 48               [ 3] 	pha
eae7 : 20f3e1           [ 6] 	jsr df_rt_arry_parm2
                             	; Restore slot address
eaea : 68               [ 4] 	pla
eaeb : 85a2             [ 3] 	sta df_tmpptra+1
eaed : 68               [ 4] 	pla
eaee : 85a1             [ 3] 	sta df_tmpptra
                             ;	bcs df_rt_dim_err
                             	; save x,y to dim1,2
eaf0 : 98               [ 2] 	tya
eaf1 : 48               [ 3] 	pha
eaf2 : 8a               [ 2] 	txa
eaf3 : 48               [ 3] 	pha
eaf4 : a003             [ 2] 	ldy #DFVVT_DIM1
eaf6 : 68               [ 4] 	pla
eaf7 : 91a1             [ 5] 	sta (df_tmpptra),y
eaf9 : c8               [ 2] 	iny
eafa : 68               [ 4] 	pla
eafb : 91a1             [ 5] 	sta (df_tmpptra),y
eafd :                       df_rt_dim_alloc
                             	; ok we have up to 2 dimensions
                             	; mult dim 1 and 2 if dim 2 <> 0
eafd : a003             [ 2] 	ldy #DFVVT_DIM1
eaff : b1a1             [ 5] 	lda (df_tmpptra),y
eb01 : 853d             [ 3] 	sta num_a
eb03 : a900             [ 2] 	lda #0
eb05 : 853e             [ 3] 	sta num_a+1
AS65 Assembler for R6502 [1.42].                                     Page  217
-------------------------------- bank\bank0.s --------------------------------

eb07 : c8               [ 2] 	iny
eb08 : b1a1             [ 5] 	lda (df_tmpptra),y
eb0a : d002             [ 3] 	bne df_rt_dim2_nz
eb0c : a901             [ 2] 	lda #1
eb0e :                       df_rt_dim2_nz
eb0e : 8541             [ 3] 	sta num_b
eb10 : a900             [ 2] 	lda #0
eb12 : 8542             [ 3] 	sta num_b+1
eb14 : 2060d4           [ 6] 	jsr int_fast_mult
                             	; check the type if int then mult2
eb17 : a200             [ 2] 	ldx #0
eb19 : a1a1             [ 6] 	lda (df_tmpptra,x)
eb1b : 2901             [ 2] 	and #DFVVT_INT
eb1d : f004             [ 3] 	beq df_rt_dim2_mul2
eb1f : 063d             [ 5] 	asl num_a
eb21 : 263e             [ 5] 	rol num_a+1
eb23 :                       df_rt_dim2_mul2
                             	; finally, we have a size of array
eb23 : a63d             [ 3] 	ldx num_a
eb25 : a53e             [ 3] 	lda num_a+1
                             
                             	; get a block of that size from heap
eb27 : 2089f6           [ 6] 	jsr df_st_malloc
                             	; save pointer to block in var
eb2a : a002             [ 2] 	ldy #DFVVT_HI
eb2c : 91a1             [ 5] 	sta (df_tmpptra),y
eb2e : 8a               [ 2] 	txa
eb2f : 88               [ 2] 	dey
eb30 : 91a1             [ 5] 	sta (df_tmpptra),y
                             	; finally, update the type to indicate array
eb32 : a200             [ 2] 	ldx #0
eb34 : a1a1             [ 6] 	lda (df_tmpptra,x)
eb36 : 0980             [ 2] 	ora #DFVVT_ARRY
eb38 : 81a1             [ 6] 	sta (df_tmpptra,x)
                             	; don't increment byte again - go check for more
eb3a : 4cc0ea           [ 3] 	jmp df_rt_dim
eb3d :                       df_rt_dim_next_byte
eb3d : e688             [ 5] 	inc df_exeoff
eb3f : 4cc0ea           [ 3] 	jmp df_rt_dim
eb42 :                       df_rt_dim_done
eb42 : 60               [ 6] 	rts
eb43 :                       df_rt_dim_err
                             	SWBRK DFERR_DIM
                             
                             
                             
eb45 :                       df_rt_cls
eb45 : 4c93cd           [ 3] 	jmp gr_cls
                             
                             
eb48 :                       df_rt_plot
                             	; evaluate the expression
eb48 : 206de0           [ 6] 	jsr df_rt_getnval
                             	; save lo byte
eb4b : 8a               [ 2] 	txa
eb4c : 48               [ 3] 	pha
                             	; jump over comma
eb4d : e688             [ 5] 	inc df_exeoff
                             	; evaluate the expression
eb4f : 206de0           [ 6] 	jsr df_rt_getnval
                             	; save lo byte
eb52 : 8a               [ 2] 	txa
AS65 Assembler for R6502 [1.42].                                     Page  218
-------------------------------- bank\bank0.s --------------------------------

eb53 : 48               [ 3] 	pha
                             	; jump over comma
eb54 : e688             [ 5] 	inc df_exeoff
                             	; evaluate the expression
eb56 : 2073e0           [ 6] 	jsr df_rt_neval
                             	; check the type on the stack
eb59 : 2077f6           [ 6] 	jsr df_ost_peekType
                             	; if >=0x80 then a pointer / string
eb5c : aa               [ 2] 	tax
eb5d : 301b             [ 3] 	bmi df_rt_plotstr
                             	; else it is int
eb5f : 207df6           [ 6] 	jsr df_ost_popInt
                             	; save  low byte of pop result in a temp
eb62 : 86a1             [ 3] 	stx df_tmpptra
eb64 : a511             [ 3] 	lda gr_scrngeom+gr_mode			; Check screen mode
eb66 : d009             [ 3] 	bne df_rt_plot_h_int
                             	; get X and Y coord in that order
                             	; but Y coord goes in X register!!!
eb68 : 68               [ 4] 	pla
eb69 : aa               [ 2] 	tax
eb6a : 68               [ 4] 	pla
eb6b : a8               [ 2] 	tay
eb6c : a5a1             [ 3] 	lda df_tmpptra	; Get pop result in to A
eb6e : 4ce7cd           [ 3] 	jmp gr_plot
eb71 :                       df_rt_plot_h_int
eb71 : 68               [ 4] 	pla
eb72 : a8               [ 2] 	tay
eb73 : 68               [ 4] 	pla
eb74 : aa               [ 2] 	tax
eb75 : a5a1             [ 3] 	lda df_tmpptra	; Get pop result in to A
eb77 : 4ca6cf           [ 3] 	jmp gr_hchar
                             
                             
eb7a :                       df_rt_plotstr
                             	; pop string pointer
eb7a : 2085f6           [ 6] 	jsr df_ost_popPtr
                             	; save pointer to tmpa
eb7d : 86a1             [ 3] 	stx df_tmpptra
eb7f : 85a2             [ 3] 	sta df_tmpptra+1
                             	; get y and x in that order
                             	; but X register is Y coord!!
eb81 : 68               [ 4] 	pla
eb82 : 85a5             [ 3] 	sta df_tmpptrc			; Y coord in C
eb84 : 68               [ 4] 	pla
eb85 : 85a3             [ 3] 	sta df_tmpptrb			; X coord in B
                             	; set cursror position
eb87 : a000             [ 2] 	ldy #0
eb89 : 84a9             [ 3] 	sty df_tmpptre
eb8b :                       df_rt_plotstrch
eb8b : a4a9             [ 3] 	ldy df_tmpptre
eb8d : b1a1             [ 5] 	lda (df_tmpptra),y
eb8f : 85a7             [ 3] 	sta df_tmpptrd			; char in D
eb91 : f025             [ 3] 	beq df_rt_plotstrdone
eb93 : e6a9             [ 5] 	inc df_tmpptre
eb95 : a511             [ 3] 	lda gr_scrngeom+gr_mode; Check screen mode
eb97 : d00d             [ 3] 	bne df_rt_plot_h_str
eb99 : a5a7             [ 3] 	lda df_tmpptrd			; Get char to plot
eb9b : a6a5             [ 3] 	ldx df_tmpptrc			; Get Y coord
eb9d : a4a3             [ 3] 	ldy df_tmpptrb			; Get X coord
eb9f : 20e7cd           [ 6] 	jsr gr_plot
eba2 : e6a3             [ 5] 	inc df_tmpptrb			; Increment X coord
eba4 : d0e5             [ 3] 	bne df_rt_plotstrch		; Always - assume x is neve
AS65 Assembler for R6502 [1.42].                                     Page  219
-------------------------------- bank\bank0.s --------------------------------

eba6 :                       df_rt_plot_h_str
eba6 : a5a7             [ 3] 	lda df_tmpptrd			; Get char to plot
eba8 : a6a3             [ 3] 	ldx df_tmpptrb			; Get X coord
ebaa : a4a5             [ 3] 	ldy df_tmpptrc			; Get Y coord
ebac : 20a6cf           [ 6] 	jsr gr_hchar
ebaf : 18               [ 2] 	clc
ebb0 : a5a3             [ 3] 	lda df_tmpptrb
ebb2 : 6520             [ 3] 	adc gr_scrngeom+gr_pitch
ebb4 : 85a3             [ 3] 	sta df_tmpptrb
ebb6 : d0d3             [ 3] 	bne df_rt_plotstrch		; Always - assume adding pi
ebb8 :                       df_rt_plotstrdone
ebb8 : 60               [ 6] 	rts
                             
ebb9 :                       df_rt_cursor
                             	; evaluate the expression
ebb9 : 206de0           [ 6] 	jsr df_rt_getnval
                             	; write low byte of vdp_curoff
                             	; by writing a zero then cursor on else not
ebbc : 860d             [ 3] 	stx vdp_curoff
ebbe : 60               [ 6] 	rts
                             
ebbf :                       df_rt_himem
                             	; evaluate the expression
ebbf : 206de0           [ 6] 	jsr df_rt_getnval
                             	; write X,A to df_memtop
ebc2 : 8e1106           [ 4] 	stx df_memtop
ebc5 : 8d1206           [ 4] 	sta df_memtop+1
                             	; now clear everything down
ebc8 : 4caef6           [ 3] 	jmp df_clear
                             
ebcb :                       df_rt_text
ebcb : 4cfdcc           [ 3] 	jmp gr_init_screen_txt
                             
ebce :                       df_rt_hires
ebce : 4c16cd           [ 3] 	jmp gr_init_hires
                             
ebd1 :                       df_rt_pixmode
                             	; evaluate the expression X = mode
ebd1 : 206de0           [ 6] 	jsr df_rt_getnval
ebd4 : 861f             [ 3] 	stx gr_scrngeom+gr_pixmode
ebd6 : 60               [ 6] 	rts
                             
ebd7 :                       df_rt_ink
                             	; evaluate the expression X = col
ebd7 : 206de0           [ 6] 	jsr df_rt_getnval
ebda : 8623             [ 3] 	stx gr_scrngeom+gr_ink
ebdc : 60               [ 6] 	rts
                             
ebdd :                       df_rt_paper
                             	; evaluate the expression X = col
ebdd : 206de0           [ 6] 	jsr df_rt_getnval
                             	; Add 16 to get paper colour
ebe0 : 8a               [ 2] 	txa
ebe1 : 18               [ 2] 	clc
ebe2 : 6910             [ 2] 	adc #16
ebe4 : 8524             [ 3] 	sta gr_scrngeom+gr_paper
ebe6 : 60               [ 6] 	rts
                             
ebe7 :                       df_rt_point
ebe7 : 2037e3           [ 6] 	jsr df_rt_parm_2ints
ebea : a6a1             [ 3] 	ldx df_tmpptra
ebec : a4a3             [ 3] 	ldy df_tmpptrb
AS65 Assembler for R6502 [1.42].                                     Page  220
-------------------------------- bank\bank0.s --------------------------------

ebee : 4c66d0           [ 3] 	jmp gr_point
                             
ebf1 :                       df_rt_circle
ebf1 : 2042e3           [ 6] 	jsr df_rt_parm_3ints
ebf4 : a5a1             [ 3] 	lda df_tmpptra				; load x0
ebf6 : 853d             [ 3] 	sta num_a
ebf8 : a5a3             [ 3] 	lda	df_tmpptrb				; load y0
ebfa : 853e             [ 3] 	sta num_a+1
ebfc : a5a5             [ 3] 	lda df_tmpptrc				; load r
ebfe : 853f             [ 3] 	sta num_a+2
ec00 : 4c97d0           [ 3] 	jmp gr_circle
                             
ec03 :                       df_rt_lineto
ec03 : 2037e3           [ 6] 	jsr df_rt_parm_2ints
ec06 : a6a1             [ 3] 	ldx df_tmpptra				; load x1
ec08 : a4a3             [ 3] 	ldy df_tmpptrb				; load y1
ec0a :                       df_rt_doline
ec0a : 863f             [ 3] 	stx num_a+2
ec0c : 8440             [ 3] 	sty num_a+3
ec0e : 4c4dd1           [ 3] 	jmp gr_line
ec11 :                       df_rt_line
ec11 : 2059e3           [ 6] 	jsr df_rt_parm_4ints
ec14 : a6a1             [ 3] 	ldx df_tmpptra				; load x0
ec16 : a4a3             [ 3] 	ldy	df_tmpptrb				; load y0
ec18 : 205bd0           [ 6] 	jsr gr_set_hires_cur		; Start from x,y
ec1b : a6a5             [ 3] 	ldx df_tmpptrc				; load x1
ec1d : a4a7             [ 3] 	ldy df_tmpptrd				; load y1
ec1f : 4c0aec           [ 3] 	jmp df_rt_doline
                             
ec22 :                       df_rt_wait
                             	; evaluate the expression
ec22 : 206de0           [ 6] 	jsr df_rt_getnval
                             	; put high byte in to Y (X,Y)=16 bits
ec25 : a8               [ 2] 	tay
                             ;	bne df_rt_wait_counter
                             	; If A=X=0 then don't try to wait
                             ;	txa
                             ;	beq df_rt_wait_done
ec26 :                       df_rt_wait_counter
                             	; get vdp low byte timer val in A
ec26 : a508             [ 3] 	lda vdp_cnt
ec28 :                       df_rt_wait_tick
                             	; check if a tick has occurred (i.e. val <> A)
ec28 : c508             [ 3] 	cmp vdp_cnt
ec2a : f0fc             [ 3] 	beq df_rt_wait_tick
                             	; countdown tick
ec2c : 8a               [ 2] 	txa
ec2d : d001             [ 3] 	bne df_rt_wait_skiphi
ec2f : 88               [ 2] 	dey
ec30 :                       df_rt_wait_skiphi	
ec30 : ca               [ 2] 	dex
ec31 : 8a               [ 2] 	txa
ec32 : d0f2             [ 3] 	bne df_rt_wait_counter
ec34 : 98               [ 2] 	tya
ec35 : d0ef             [ 3] 	bne df_rt_wait_counter
ec37 :                       df_rt_wait_done
ec37 : 60               [ 6] 	rts
                             
ec38 :                       df_rt_printat
                             	; Get x,y
ec38 : 2037e3           [ 6] 	jsr df_rt_parm_2ints
ec3b : a6a1             [ 3] 	ldx df_tmpptra
AS65 Assembler for R6502 [1.42].                                     Page  221
-------------------------------- bank\bank0.s --------------------------------

ec3d : a4a3             [ 3] 	ldy df_tmpptrb
                             	; Set the cursror here
ec3f : 2000ce           [ 6] 	jsr gr_set_cur
                             	; and continue to normal print command
ec42 :                       df_rt_print
ec42 : a488             [ 3] 	ldy df_exeoff
ec44 : 88               [ 2] 	dey
ec45 :                       df_rt_print_ws
ec45 : c8               [ 2] 	iny
                             
                             	; evaluate an expression
                             ;	cpy df_eolidx
                             ;	beq df_rt_print_done
ec46 : c47f             [ 3] 	cpy df_nxtstidx
ec48 : f02e             [ 3] 	beq df_rt_print_done
ec4a : b186             [ 5] 	lda (df_currlin),y
ec4c : c93a             [ 2] 	cmp #':'
ec4e : f028             [ 3] 	beq df_rt_print_done
ec50 : c920             [ 2] 	cmp #' '
ec52 : f0f1             [ 3] 	beq df_rt_print_ws
ec54 : c92c             [ 2] 	cmp #','
ec56 : f0ed             [ 3] 	beq df_rt_print_ws
                             	; save index
ec58 : 8488             [ 3] 	sty df_exeoff
                             
                             	; if starts with string literal then process sev
ec5a : c910             [ 2] 	cmp #DFTK_STRLIT
ec5c : f014             [ 3] 	beq df_rt_print_string
                             	; else evaluate a numeric
ec5e : 2073e0           [ 6] 	jsr df_rt_neval
                             	; check what is on the argument stack
ec61 : 2077f6           [ 6] 	jsr df_ost_peekType
ec64 : 3006             [ 3] 	bmi df_rt_print_gotstr
ec66 : 2088e9           [ 6] 	jsr df_rt_print_num
ec69 : 4c42ec           [ 3] 	jmp df_rt_print
ec6c :                       df_rt_print_gotstr
ec6c : 208fe9           [ 6] 	jsr df_rt_print_str
ec6f : 4c42ec           [ 3] 	jmp df_rt_print
ec72 :                       df_rt_print_string
ec72 : 202de1           [ 6] 	jsr df_rt_seval
ec75 : 4c6cec           [ 3] 	jmp df_rt_print_gotstr
ec78 :                       df_rt_print_done
ec78 : 8488             [ 3] 	sty df_exeoff
ec7a : 60               [ 6] 	rts
                             
ec7b :                       df_rt_println
ec7b : 2042ec           [ 6] 	jsr df_rt_print
ec7e : a90d             [ 2] 	lda #UTF_CR
ec80 : 4c54c4           [ 3] 	jmp io_put_ch
                             
                             
                             ; assign to a number variable
                             ; X,A must have lvar
ec83 :                       df_rt_nassign
                             	; push var address, A ok to trample
ec83 : 48               [ 3] 	pha
ec84 : 8a               [ 2] 	txa
ec85 : 48               [ 3] 	pha
                             
                             	; now go evaluate expression in to A,X
ec86 : 206de0           [ 6] 	jsr df_rt_getnval
                             	; restore variable address to write to to df_tmp
AS65 Assembler for R6502 [1.42].                                     Page  222
-------------------------------- bank\bank0.s --------------------------------

                             	; but don't lose current A
ec89 : a8               [ 2] 	tay					; Save A in Y
ec8a : 68               [ 4] 	pla
ec8b : 85a1             [ 3] 	sta df_tmpptra
ec8d : 68               [ 4] 	pla
ec8e : 85a2             [ 3] 	sta df_tmpptra+1
ec90 : 98               [ 2] 	tya					; Get A back from Y
                             
                             	; save X,A int in contents section
ec91 : a001             [ 2] 	ldy #1
ec93 : 91a1             [ 5] 	sta (df_tmpptra),y
ec95 : 8a               [ 2] 	txa
ec96 : 88               [ 2] 	dey
ec97 : 91a1             [ 5] 	sta (df_tmpptra),y
                             
ec99 : 60               [ 6] 	rts
                             
                             ; assign to a string variable
                             ; X,A must have lvar
ec9a :                       df_rt_sassign
                             	; now go evaluate expression
                             	; with the destination being already in X,A
ec9a : 2031e1           [ 6] 	jsr df_rt_sval
                             
                             	; get string pointer from top of runtime stack
ec9d : 4c81f6           [ 3] 	jmp df_ost_popStr
                             
                             
                             ; generate lvar from a var token ready for assign
eca0 :                       df_rt_generate_lvar
                             	; move past escape val
eca0 : a488             [ 3] 	ldy df_exeoff
eca2 : c8               [ 2] 	iny
                             	; pointing to variable index
eca3 : b186             [ 5] 	lda (df_currlin),y
eca5 : 85a1             [ 3] 	sta df_tmpptra
eca7 : c8               [ 2] 	iny
eca8 : b186             [ 5] 	lda (df_currlin),y
ecaa : 8488             [ 3] 	sty df_exeoff
ecac : 85a2             [ 3] 	sta df_tmpptra+1
                             
                             	; get the type and save
ecae : a200             [ 2] 	ldx #0
ecb0 : a1a1             [ 6] 	lda (df_tmpptra,x)
ecb2 : 48               [ 3] 	pha
                             
                             	; set carry flag to return pointer (lvar)
ecb3 : 38               [ 2] 	sec
ecb4 : 2017e2           [ 6] 	jsr df_rt_eval_var
ecb7 : 2085f6           [ 6] 	jsr df_ost_popPtr
                             
                             	; pull the type previously saved into Y
ecba : 8538             [ 3] 	sta tmp_d		; Save A
ecbc : 68               [ 4] 	pla
ecbd : a8               [ 2] 	tay
ecbe : a538             [ 3] 	lda tmp_d
                             	; move past the lvar variable index
ecc0 : e688             [ 5] 	inc df_exeoff
ecc2 : 60               [ 6] 	rts
                             
                             ; general assignment execution
                             ; generate lvar first
AS65 Assembler for R6502 [1.42].                                     Page  223
-------------------------------- bank\bank0.s --------------------------------

ecc3 :                       df_rt_assign
ecc3 : 20a0ec           [ 6] 	jsr df_rt_generate_lvar
                             ; X,A,Y contain lvar pointer and type
ecc6 :                       df_rt_doassign
                             	; save A and put type Y in to A to check for str
ecc6 : 48               [ 3] 	pha
ecc7 : 98               [ 2] 	tya
ecc8 : 2904             [ 2] 	and #DFVVT_STR
                             	; if a string then string expression
ecca : d004             [ 3] 	bne df_rt_assign_str
                             	;  jump to numeric expression evaluator
                             	; remember to restore A
eccc : 68               [ 4] 	pla
eccd : 4c83ec           [ 3] 	jmp df_rt_nassign
ecd0 :                       df_rt_assign_str
                             	; else jump to string expression evaluator
                             	; remember to restore A
ecd0 : 68               [ 4] 	pla
ecd1 : 4c9aec           [ 3] 	jmp df_rt_sassign
                             
                             ; comment or data token is ignored by runtime
ecd4 :                       df_rt_comment
ecd4 :                       df_rt_data
ecd4 : 60               [ 6] 	rts
                             
                             
                             ; run token - future expansion
ecd5 :                       df_rt_run
ecd5 : 60               [ 6] 	rts
                             
                             ; end of line / statement indicator
                             ; CS = End, CC = not end
ecd6 :                       df_rt_eos
ecd6 : a488             [ 3] 	ldy df_exeoff
                             ;	cpy df_eolidx
                             ;	beq df_rt_eos_true
ecd8 : c47f             [ 3] 	cpy df_nxtstidx
ecda : f008             [ 3] 	beq df_rt_eos_true
ecdc : b186             [ 5] 	lda (df_currlin),y
ecde : c93a             [ 2] 	cmp #':'
ece0 : f002             [ 3] 	beq df_rt_eos_true
ece2 : 18               [ 2] 	clc
ece3 : 60               [ 6] 	rts
ece4 :                       df_rt_eos_true
ece4 : 38               [ 2] 	sec
ece5 : 60               [ 6] 	rts
                             
                             ; renum startLine,newStart,increment
                             ; renumbers from the first matching line to end o
ece6 :                       df_rt_renum
ece6 : e688             [ 5] 	inc df_exeoff
ece8 : 2042e3           [ 6] 	jsr df_rt_parm_3ints
                             	; starting line number
eceb : a6a1             [ 3] 	ldx df_tmpptra
eced : a5a2             [ 3] 	lda df_tmpptra+1
ecef : 208ede           [ 6] 	jsr df_pg_find_line
ecf2 : 9002             [ 3] 	bcc df_rt_renum_ok
                             	SWBRK DFERR_NOLINE
                             
ecf6 :                       df_rt_renum_ok
                             	; save starting position pointer in ptrd
ecf6 : 86a7             [ 3] 	stx df_tmpptrd
AS65 Assembler for R6502 [1.42].                                     Page  224
-------------------------------- bank\bank0.s --------------------------------

ecf8 : 85a8             [ 3] 	sta df_tmpptrd+1
ecfa :                       df_rt_renum_do
                             	; if not end of program
ecfa : a000             [ 2] 	ldy #0
ecfc : b1a7             [ 5] 	lda (df_tmpptrd),y
                             	; then renumber this line
ecfe : d001             [ 4] 	bne df_rt_renum_update
                             	; else done
ed00 : 60               [ 6] 	rts
ed01 :                       df_rt_renum_update
                             	; so set this line number to new line number
ed01 : a001             [ 2] 	ldy #DFTK_LINNUM
ed03 : a5a3             [ 3] 	lda df_tmpptrb
ed05 : 91a7             [ 5] 	sta (df_tmpptrd),y
ed07 : c8               [ 2] 	iny
ed08 : a5a4             [ 3] 	lda df_tmpptrb+1
ed0a : 91a7             [ 5] 	sta (df_tmpptrd),y
                             	; add increment to new line
                             	_addZPWord df_tmpptrb,df_tmpptrc
                             
ed19 :                       df_rt_renum_next
                             	; point ptrd to the next line
ed19 : 18               [ 2] 	clc
ed1a : a5a7             [ 3] 	lda df_tmpptrd
ed1c : a200             [ 2] 	ldx #0
ed1e : 61a7             [ 6] 	adc (df_tmpptrd,x)
ed20 : 85a7             [ 3] 	sta df_tmpptrd
                             	_bcc 2
                             
ed24 : e6a8             [ 5] 	inc df_tmpptrd+1
ed26 : 4cfaec           [ 3] 	jmp df_rt_renum_do
                             
                             
                             ; * List all procs in VNT
ed29 :                       df_rt_listprocnames
                             	; start at the beginning of the vnt table
                             	_cpyZPWord df_vntstrt,df_tmpptra
                             
                             	; start at varcnt
ed31 : a571             [ 3] 	lda df_varcnt
ed33 : 85a3             [ 3] 	sta df_tmpptrb
ed35 :                       df_rt_listcheckvnt
                             	; If reached 0 then not found
ed35 : a5a3             [ 3] 	lda df_tmpptrb
ed37 : f03a             [ 3] 	beq df_rt_listpn_done
ed39 : a000             [ 2] 	ldy #0
ed3b : b1a1             [ 5] 	lda (df_tmpptra),y
ed3d : c95f             [ 2] 	cmp #'_'
ed3f : d01b             [ 3] 	bne df_rt_listnextvnt
ed41 :                       df_rt_listprocch
ed41 : b1a1             [ 5] 	lda (df_tmpptra),y
ed43 : 2054c4           [ 6] 	jsr io_put_ch
ed46 : aa               [ 2] 	tax
ed47 : f003             [ 3] 	beq df_rt_listproccr
ed49 : c8               [ 2] 	iny
ed4a : d0f5             [ 3] 	bne df_rt_listprocch		; Always
ed4c :                       df_rt_listproccr
ed4c : a90d             [ 2] 	lda #UTF_CR
ed4e : 2054c4           [ 6] 	jsr io_put_ch
ed51 : 18               [ 2] 	clc
ed52 :                       df_rt_listprocpause
ed52 : 2051c4           [ 6] 	jsr io_get_ch
AS65 Assembler for R6502 [1.42].                                     Page  225
-------------------------------- bank\bank0.s --------------------------------

ed55 : c920             [ 2] 	cmp #' '
ed57 : d003             [ 3] 	bne df_rt_listnextvnt
ed59 :                       df_rt_listwait
ed59 : 38               [ 2] 	sec
ed5a : b0f6             [ 3] 	bcs df_rt_listprocpause
ed5c :                       df_rt_listnextvnt
ed5c : b1a1             [ 5] 	lda (df_tmpptra),y
ed5e : f003             [ 3] 	beq df_rt_listgotnext
ed60 : c8               [ 2] 	iny
ed61 : d0f9             [ 3] 	bne df_rt_listnextvnt		; Always
ed63 :                       df_rt_listgotnext
                             	; dec vnt #
ed63 : c6a3             [ 5] 	dec df_tmpptrb
                             	; skip past zero terminator
ed65 : c8               [ 2] 	iny
                             	; add this to vnt pointer
ed66 : 18               [ 2] 	clc
ed67 : 98               [ 2] 	tya
ed68 : 65a1             [ 3] 	adc df_tmpptra
ed6a : 85a1             [ 3] 	sta df_tmpptra
                             	_bcc 2
                             
ed6e : e6a2             [ 5] 	inc df_tmpptra+1
ed70 : 4c35ed           [ 3] 	jmp df_rt_listcheckvnt
ed73 :                       df_rt_listpn_done
ed73 : 60               [ 6] 	rts
                             
ed74 :                       df_rt_listproc
                             	; A already contains '_'
ed74 : 8d0004           [ 4] 	sta df_linbuff
ed77 : a200             [ 2] 	ldx #0
ed79 : a488             [ 3] 	ldy df_exeoff
ed7b :                       df_rt_listp_copy
ed7b : c8               [ 2] 	iny
ed7c : e8               [ 2] 	inx
ed7d : b186             [ 5] 	lda (df_currlin),y
ed7f : 9d0004           [ 5] 	sta df_linbuff,x
ed82 : 20f8d6           [ 6] 	jsr df_tk_isalphanum
ed85 : b0f4             [ 3] 	bcs df_rt_listp_copy
                             	; zero the line index
ed87 : a200             [ 2] 	ldx #0
ed89 : 867c             [ 3] 	stx df_linoff
                             	; save runtime pos
ed8b : 8488             [ 3] 	sty df_exeoff
                             	; Now try and find in VNT
ed8d : 2017d5           [ 6] 	jsr df_var_find
ed90 : b036             [ 3] 	bcs df_rt_listp_notfound
                             	; Ok we have got a match in X,A find the proc
ed92 : 868e             [ 3] 	stx df_procptr
ed94 : 858f             [ 3] 	sta df_procptr+1
ed96 : 2052e4           [ 6] 	jsr df_rt_findproc
                             	; Save the line pointer
ed99 : 86a1             [ 3] 	stx df_tmpptra
ed9b : 85a2             [ 3] 	sta df_tmpptra+1
                             	; save statement index in to line
                             ;	sty df_lineidx
                             ;	; Check if '-' option used
                             ;	ldy df_exeoff
                             ;	lda (df_currlin),y
                             ;	cmp #'-'
                             ;	; if so, list to end of program
                             ;	beq df_rt_listprgend
AS65 Assembler for R6502 [1.42].                                     Page  226
-------------------------------- bank\bank0.s --------------------------------

                             	; Now try and find the end of this procedure
                             	; enddef or another def
                             	; A,X=Line ptr, Y=line idx
                             ;	ldx df_tmpptra
                             ;	lda df_tmpptra+1
                             ;	ldy df_lineidx
ed9d :                       df_rt_listp_findend
                             	; Go to next stat
ed9d : 20fde3           [ 6] 	jsr df_rt_nextstat
eda0 : b057             [ 3] 	bcs df_rt_listprgend
                             	; save y (a,x in lineptr), A is ok to trample
eda2 : 98               [ 2] 	tya
eda3 : 48               [ 3] 	pha
                             	; find the command
eda4 :                       df_rt_listp_findcmd
eda4 : c8               [ 2] 	iny
eda5 : b190             [ 5] 	lda (df_lineptr),y
eda7 : 10fb             [ 3] 	bpl df_rt_listp_findcmd
                             	; restore y to stat beginning
eda9 : 8538             [ 3] 	sta tmp_d
edab : 68               [ 4] 	pla
edac : a8               [ 2] 	tay
edad : a538             [ 3] 	lda tmp_d
                             	; check A - looking for enddef or def
edaf : c987             [ 2] 	cmp #DFRT_ENDDEF
edb1 : f00b             [ 3] 	beq df_rt_listp_done
edb3 : c986             [ 2] 	cmp #DFRT_DEF
edb5 : f007             [ 3] 	beq df_rt_listp_done
                             	; if neither then next stat from current
edb7 : a690             [ 3] 	ldx df_lineptr
edb9 : a591             [ 3] 	lda df_lineptr+1
edbb : 4c9ded           [ 3] 	jmp df_rt_listp_findend
edbe :                       df_rt_listp_done
                             	; Push end line on to stack
edbe : a591             [ 3] 	lda df_lineptr+1
edc0 : 48               [ 3] 	pha
edc1 : 8a               [ 2] 	txa
edc2 : 48               [ 3] 	pha
edc3 : a591             [ 3] 	lda df_lineptr+1
edc5 : 4cffed           [ 3] 	jmp df_rt_list_line
edc8 :                       df_rt_listp_notfound
                             	; Fatal error if proc not found
                             	SWBRK DFERR_NOPROC
                             
                             
                             ; list token
edca :                       df_rt_list
edca : a900             [ 2] 	lda #0
edcc : 85a9             [ 3] 	sta df_tmpptre		; Zero means in normal list mode
                             	; find non-ws
edce : 20a7e4           [ 6] 	jsr df_rt_skip_ws
                             	; if end of statement then no line specifiers
edd1 : 20d6ec           [ 6] 	jsr df_rt_eos
                             	; so list whole program
edd4 : b01b             [ 3] 	bcs df_rt_listprg
                             
                             	;if '_' then use procnames
edd6 : c95f             [ 2] 	cmp #'_'
edd8 : d003             [ 3] 	bne df_rt_list_all
edda : 4c74ed           [ 3] 	jmp df_rt_listproc
eddd :                       df_rt_list_all
                             	;if '*' then display all procnames
AS65 Assembler for R6502 [1.42].                                     Page  227
-------------------------------- bank\bank0.s --------------------------------

eddd : c92a             [ 2] 	cmp #'*'
eddf : d003             [ 3] 	bne df_rt_list_linno
ede1 : 4c29ed           [ 3] 	jmp df_rt_listprocnames
ede4 :                       df_rt_list_linno
                             	; else get 1st parameter
ede4 : 206de0           [ 6] 	jsr df_rt_getnval
                             	; find the starting line number in X,A
ede7 : 208ede           [ 6] 	jsr df_pg_find_line
                             	; save start in ptra
edea : 86a1             [ 3] 	stx df_tmpptra
edec : 85a2             [ 3] 	sta df_tmpptra+1
edee : 4cf9ed           [ 3] 	jmp df_rt_listprgend
                             	; NO ability to choose and ending line number!
                             
                             ; Common listing routine used by LIST and SAVE
                             ; tmpe = 0 means in LIST mode else SAVE mode
                             ; can stop the listing in LIST mode with CTRL-C
edf1 :                       df_rt_listprg
                             	; program start and end as for pointer value
                             	_cpyZPWord df_prgstrt, df_tmpptra
                             
edf9 :                       df_rt_listprgend
edf9 : a568             [ 3] 	lda df_prgend+1
edfb : 48               [ 3] 	pha
edfc : a567             [ 3] 	lda df_prgend
edfe : 48               [ 3] 	pha
edff :                       df_rt_list_line
                             	; if line length = 0 then end of program
edff : a000             [ 2] 	ldy #0
ee01 : b1a1             [ 5] 	lda (df_tmpptra),y
ee03 : f038             [ 3] 	beq df_rt_list_line_fin
                             	; if in list mode and CTRL-C then also stop
ee05 : a5a9             [ 3] 	lda df_tmpptre
ee07 : d010             [ 3] 	bne df_rt_list_line_cont
                             	; check for break, asynch get
ee09 : 18               [ 2] 	clc
ee0a :                       df_rt_list_synckey
ee0a : a5a9             [ 3] 	lda df_tmpptre					; Ignore keys on save mode
ee0c : d00b             [ 3] 	bne df_rt_list_line_cont
ee0e :                       df_rt_list_pause
ee0e : 2051c4           [ 6] 	jsr io_get_ch
ee11 : c920             [ 2] 	cmp #' '						; Space = PAUSE
ee13 : f0f9             [ 3] 	beq df_rt_list_pause			; C=1 for synchronouse ke
ee15 : c903             [ 2] 	cmp #UTF_ETX					; CTRL-C?
ee17 : f024             [ 3] 	beq df_rt_list_line_fin
ee19 :                       df_rt_list_line_cont
ee19 : a000             [ 2] 	ldy #0
ee1b : 847c             [ 3] 	sty df_linoff
ee1d : 2040ee           [ 6] 	jsr df_rt_list_all_line
ee20 :                       df_rt_list_next_line
                             	; new line
ee20 : 207bc1           [ 6] 	jsr utilPrintCRLF
                             	; increment pointer to next line
ee23 : 18               [ 2] 	clc
ee24 : a5a1             [ 3] 	lda df_tmpptra
ee26 : a000             [ 2] 	ldy #0
ee28 : 71a1             [ 5] 	adc (df_tmpptra),y
ee2a : 85a1             [ 3] 	sta df_tmpptra
                             	_bcc 2
                             
ee2e : e6a2             [ 5] 	inc df_tmpptra+1
                             	; if pointer > end then listing is done
AS65 Assembler for R6502 [1.42].                                     Page  228
-------------------------------- bank\bank0.s --------------------------------

ee30 : 38               [ 2] 	sec
ee31 : 68               [ 4] 	pla
ee32 : aa               [ 2] 	tax
ee33 : e5a1             [ 3] 	sbc df_tmpptra
ee35 : 68               [ 4] 	pla
ee36 : 48               [ 3] 	pha
ee37 : e5a2             [ 3] 	sbc df_tmpptra+1
ee39 : 8a               [ 2] 	txa
ee3a : 48               [ 3] 	pha
ee3b : b0c2             [ 4] 	bcs df_rt_list_line
ee3d :                       df_rt_list_line_fin
                             	; if got here then reached tmpb
ee3d : 68               [ 4] 	pla
ee3e : 68               [ 4] 	pla
ee3f :                       df_rt_list_line_only_fin
ee3f : 60               [ 6] 	rts
                             
                             ;Using df_tmpptra as line pointer
                             ;Print decode an entire line
ee40 :                       df_rt_list_all_line				; Start here to include nu
ee40 : 207aef           [ 6] 	jsr df_rt_list_linnum
ee43 :                       df_rt_list_line_only			; Start here for just the 
ee43 : a003             [ 2] 	ldy #3
ee45 : b1a1             [ 5] 	lda (df_tmpptra),y
ee47 : 8592             [ 3] 	sta df_lineidx
ee49 : c8               [ 2] 	iny
ee4a : 847c             [ 3] 	sty df_linoff
ee4c :                       df_rt_list_decode
ee4c : a47c             [ 3] 	ldy df_linoff
ee4e : b1a1             [ 5] 	lda (df_tmpptra),y
ee50 : 3010             [ 3] 	bmi df_rt_list_token
ee52 : c920             [ 2] 	cmp #DFTK_ESCVAL
ee54 : 9006             [ 3] 	bcc df_rt_list_escval
                             	; normal char just print it
ee56 : 2054c4           [ 6] 	jsr io_put_ch
ee59 : 4c65ee           [ 3] 	jmp df_rt_list_nexttok
ee5c :                       df_rt_list_escval
                             	; A and Y need to be valid on entry
ee5c : 207eee           [ 6] 	jsr df_rt_list_decode_esc
ee5f : 4c65ee           [ 3] 	jmp df_rt_list_nexttok
ee62 :                       df_rt_list_token
ee62 : 208bef           [ 6] 	jsr df_rt_list_decode_token
ee65 :                       df_rt_list_nexttok
                             	; advance the line offset
ee65 : e67c             [ 5] 	inc df_linoff
ee67 : a57c             [ 3] 	lda df_linoff
                             	; check if at end of line
ee69 : a200             [ 2] 	ldx #0
ee6b : c1a1             [ 6] 	cmp (df_tmpptra,x)
ee6d : f0d0             [ 3] 	beq df_rt_list_line_only_fin
                             	; check if at end of statement
ee6f : c592             [ 3] 	cmp df_lineidx
ee71 : d0d9             [ 3] 	bne df_rt_list_decode
ee73 : a8               [ 2] 	tay
                             	; save the next statement offset
ee74 : b1a1             [ 5] 	lda (df_tmpptra),y
ee76 : 8592             [ 3] 	sta df_lineidx
ee78 : c8               [ 2] 	iny
ee79 : 847c             [ 3] 	sty df_linoff
ee7b : 4c4cee           [ 3] 	jmp df_rt_list_decode
                             
                             
AS65 Assembler for R6502 [1.42].                                     Page  229
-------------------------------- bank\bank0.s --------------------------------

                             ; decode escape sequences
                             ; Input: A contains the esc val and Y is char lin
ee7e :                       df_rt_list_decode_esc
                             	; jump over esc byte
ee7e : c8               [ 2] 	iny
ee7f : 847c             [ 3] 	sty df_linoff
ee81 : 48               [ 3] 	pha
                             	; get the next two bytes in case needed
ee82 : b1a1             [ 5] 	lda (df_tmpptra),y
ee84 : 85a3             [ 3] 	sta df_tmpptrb
ee86 : c8               [ 2] 	iny
ee87 : b1a1             [ 5] 	lda (df_tmpptra),y
ee89 : 85a4             [ 3] 	sta df_tmpptrb+1
ee8b : 88               [ 2] 	dey				; Y is on byte after esc byte
ee8c : 68               [ 4] 	pla
                             	; x2 to get jmp offset
ee8d : 0a               [ 2] 	asl a
ee8e : aa               [ 2] 	tax
ee8f : bd9fe5           [ 4] 	lda df_rt_escjmp,x
ee92 : 85a5             [ 3] 	sta df_tmpptrc
ee94 : bda0e5           [ 4] 	lda df_rt_escjmp+1,x
ee97 : 85a6             [ 3] 	sta df_tmpptrc+1
                             	; now jump to decoder
ee99 : 6ca500           [ 6] 	jmp (df_tmpptrc)
                             
                             ; reserved
ee9c :                       df_rt_lst_reserved
ee9c : 60               [ 6] 	rts
                             
                             ; decode a byte char
ee9d :                       df_rt_lst_chr
ee9d : a927             [ 2] 	lda #0x27			; Single quote
ee9f : 2054c4           [ 6] 	jsr io_put_ch
eea2 : a5a3             [ 3] 	lda df_tmpptrb
eea4 : 2054c4           [ 6] 	jsr io_put_ch
eea7 : a927             [ 2] 	lda #0x27			; Single quote
eea9 : 2054c4           [ 6] 	jsr io_put_ch
eeac : c8               [ 2] 	iny
eead : 847c             [ 3] 	sty df_linoff
eeaf : 60               [ 6] 	rts
                             
                             ; Output 0x for hex chars
eeb0 :                       df_rt_lst_hex_pre
eeb0 : a930             [ 2] 	lda #'0'
eeb2 : 2054c4           [ 6] 	jsr io_put_ch
eeb5 : a978             [ 2] 	lda #'x'
eeb7 : 4c54c4           [ 3] 	jmp io_put_ch
                             
                             
                             ; Decode a byte hex
eeba :                       df_rt_lst_bythex
eeba : 20b0ee           [ 6] 	jsr df_rt_lst_hex_pre
eebd :                       df_rt_lst_lo_hex
eebd : a5a3             [ 3] 	lda df_tmpptrb
eebf : 2098c1           [ 6] 	jsr str_a_to_x
eec2 : 2054c4           [ 6] 	jsr io_put_ch
eec5 : 8a               [ 2] 	txa
eec6 : 2054c4           [ 6] 	jsr io_put_ch
eec9 :                       df_rt_lst_const_done
eec9 : c8               [ 2] 	iny
eeca : 847c             [ 3] 	sty df_linoff
eecc : 60               [ 6] 	rts
AS65 Assembler for R6502 [1.42].                                     Page  230
-------------------------------- bank\bank0.s --------------------------------

                             
                             ; Decode an int hex
eecd :                       df_rt_lst_inthex
eecd : 20b0ee           [ 6] 	jsr df_rt_lst_hex_pre
eed0 : a5a4             [ 3] 	lda df_tmpptrb+1
eed2 : 2098c1           [ 6] 	jsr str_a_to_x
eed5 : 2054c4           [ 6] 	jsr io_put_ch
eed8 : 8a               [ 2] 	txa
eed9 : 2054c4           [ 6] 	jsr io_put_ch
eedc : 4cbdee           [ 3] 	jmp df_rt_lst_lo_hex
                             
                             ; Decode a byte binary
eedf :                       df_rt_lst_bytbin
eedf : a5a3             [ 3] 	lda df_tmpptrb
eee1 : 85a4             [ 3] 	sta df_tmpptrb+1
eee3 : a208             [ 2] 	ldx #8
eee5 : d002             [ 3] 	bne df_rt_lst_bin
                             
                             ; Decode a int binary
eee7 :                       df_rt_lst_intbin
eee7 : a210             [ 2] 	ldx #16
                             	; FALL THROUGH
                             ; Main 01 decoding of binary
eee9 :                       df_rt_lst_bin
eee9 : a930             [ 2] 	lda #'0'
eeeb : 2054c4           [ 6] 	jsr io_put_ch
eeee : a962             [ 2] 	lda #'b'
eef0 : 2054c4           [ 6] 	jsr io_put_ch
eef3 :                       df_rt_lst_bit
eef3 : a930             [ 2] 	lda #'0'
eef5 : 06a3             [ 5] 	asl df_tmpptrb
eef7 : 26a4             [ 5] 	rol df_tmpptrb+1
eef9 : 6900             [ 2] 	adc #0				; If C=1 then '0' becomes '1'
eefb :                       df_rt_lst_bit_skip0
eefb : 2054c4           [ 6] 	jsr io_put_ch
eefe : ca               [ 2] 	dex
eeff : d0f2             [ 3] 	bne df_rt_lst_bit
ef01 : f0c6             [ 4] 	beq df_rt_lst_const_done
                             
                             ; Decode a decimal integer
ef03 :                       df_rt_lst_intdec
ef03 : a6a3             [ 3] 	ldx df_tmpptrb
ef05 : a5a4             [ 3] 	lda df_tmpptrb+1
ef07 : c8               [ 2] 	iny
ef08 : 847c             [ 3] 	sty df_linoff
ef0a : 18               [ 2] 	clc
ef0b : 4cfdc3           [ 3] 	jmp print_a_to_d
                             
                             
                             ; decode a variable or procedure
                             ; Slot address to decode in ptrb
ef0e :                       df_rt_lst_var
ef0e :                       df_rt_lst_proc
                             	; jump over the address bytes
ef0e : c8               [ 2] 	iny
ef0f : 847c             [ 3] 	sty df_linoff
                             
                             	; ptrc starts at VNT start
                             	_cpyZPWord df_vntstrt,df_tmpptrc
                             
                             
                             	; ptrd starts at end of VVT
AS65 Assembler for R6502 [1.42].                                     Page  231
-------------------------------- bank\bank0.s --------------------------------

                             	_cpyZPWord df_vvtend,df_tmpptrd
                             
ef21 : a000             [ 2] 	ldy #0
ef23 :                       df_rt_list_findvvt
                             	; Check have we reached target addr in vvt?
ef23 : a5a7             [ 3] 	lda df_tmpptrd
ef25 : c5a3             [ 3] 	cmp df_tmpptrb
ef27 : d006             [ 3] 	bne df_rt_list_vvtend
ef29 : a5a8             [ 3] 	lda df_tmpptrd+1
ef2b : c5a4             [ 3] 	cmp df_tmpptrb+1
ef2d : f021             [ 3] 	beq df_rt_list_gotvvt
ef2f :                       df_rt_list_vvtend
ef2f : b1a5             [ 5] 	lda (df_tmpptrc),y
ef31 : f009             [ 3] 	beq df_rt_list_gotvvtend
                             	_incZPWord df_tmpptrc
                             
ef39 : 4c2fef           [ 3] 	jmp df_rt_list_vvtend
ef3c :                       df_rt_list_gotvvtend
                             	_incZPWord df_tmpptrc
                             
                             	; move target slot address towards top of mem
ef42 : 18               [ 2] 	clc
ef43 : a5a7             [ 3] 	lda df_tmpptrd
ef45 : 6908             [ 2] 	adc #DFVVT_SZ
ef47 : 85a7             [ 3] 	sta df_tmpptrd
                             	_bcc 2
                             
ef4b : e6a8             [ 5] 	inc df_tmpptrd+1
                             	; go back and check again
ef4d : 4c23ef           [ 3] 	jmp df_rt_list_findvvt
ef50 :                       df_rt_list_gotvvt
ef50 : b1a5             [ 5] 	lda (df_tmpptrc),y
ef52 : f025             [ 3] 	beq df_rt_list_donvvt
ef54 : 2054c4           [ 6] 	jsr io_put_ch
                             	_incZPWord df_tmpptrc
                             
ef5d : 4c50ef           [ 3] 	jmp df_rt_list_gotvvt
                             
ef60 :                       df_rt_lst_strlit
ef60 : a922             [ 2] 	lda #0x22
ef62 : 2054c4           [ 6] 	jsr io_put_ch
ef65 : a47c             [ 3] 	ldy df_linoff
ef67 :                       df_rt_lst_strlitch
ef67 : b1a1             [ 5] 	lda (df_tmpptra),y
ef69 : f007             [ 3] 	beq df_rt_lst_strlitdon
ef6b : 2054c4           [ 6] 	jsr io_put_ch
ef6e : c8               [ 2] 	iny
ef6f : 4c67ef           [ 3] 	jmp df_rt_lst_strlitch
ef72 :                       df_rt_lst_strlitdon
ef72 : a922             [ 2] 	lda #0x22
ef74 : 2054c4           [ 6] 	jsr io_put_ch
ef77 : 847c             [ 3] 	sty df_linoff
ef79 :                       df_rt_list_donvvt
ef79 : 60               [ 6] 	rts
                             
ef7a :                       df_rt_list_linnum
ef7a : a001             [ 2] 	ldy #1
ef7c : b1a1             [ 5] 	lda (df_tmpptra),y
ef7e : aa               [ 2] 	tax
ef7f : c8               [ 2] 	iny
ef80 : b1a1             [ 5] 	lda (df_tmpptra),y
ef82 : 18               [ 2] 	clc
AS65 Assembler for R6502 [1.42].                                     Page  232
-------------------------------- bank\bank0.s --------------------------------

ef83 : 20fdc3           [ 6] 	jsr print_a_to_d
ef86 : a920             [ 2] 	lda #0x20			; Always add a space after line num
ef88 : 4c54c4           [ 3] 	jmp io_put_ch
                             
                             ; decode a token value with MSB set
ef8b :                       df_rt_list_decode_token
                             	; if not assembler then normal listing
ef8b : c997             [ 2] 	cmp #DFRT_ASM
ef8d : d003             [ 3] 	bne df_rt_list_decode_token_normal
ef8f : 4cc9ef           [ 3] 	jmp df_rt_asm_decode_token
ef92 :                       df_rt_list_decode_token_normal
ef92 : 297f             [ 2] 	and #0x7f
                             	; token 0 and 1 don't get decoded they are impli
ef94 : c902             [ 2] 	cmp #2
ef96 : b001             [ 3] 	bcs df_rt_list_do_decode_tkn
ef98 : 60               [ 6] 	rts
ef99 :                       df_rt_list_do_decode_tkn
ef99 : aa               [ 2] 	tax
ef9a : a993             [ 2] 	lda #lo(df_tokensyms)
ef9c : 85a3             [ 3] 	sta df_tmpptrb
ef9e : a9da             [ 2] 	lda #hi(df_tokensyms)
efa0 : 85a4             [ 3] 	sta df_tmpptrb+1
efa2 :                       df_rt_list_find_sym
efa2 : 8a               [ 2] 	txa
efa3 : f012             [ 3] 	beq df_rt_list_got_sym
efa5 : a000             [ 2] 	ldy #0
efa7 :                       df_rt_list_next_ch
efa7 : b1a3             [ 5] 	lda (df_tmpptrb),y
efa9 : 48               [ 3] 	pha
                             	_incZPWord df_tmpptrb
                             
efb0 : 68               [ 4] 	pla
efb1 : 10f4             [ 3] 	bpl df_rt_list_next_ch
efb3 :                       df_rt_list_got_last_sym
                             	; ok got to the last ch
                             	; advance to next sym
efb3 : ca               [ 2] 	dex
efb4 : 4ca2ef           [ 3] 	jmp df_rt_list_find_sym
efb7 :                       df_rt_list_got_sym
efb7 : a1a3             [ 6] 	lda (df_tmpptrb,x)		; Relies on X=0 from branch
efb9 : 08               [ 3] 	php
efba : 297f             [ 2] 	and #0x7f
efbc : 2054c4           [ 6] 	jsr io_put_ch
                             	_incZPWord df_tmpptrb
                             
efc5 : 28               [ 4] 	plp
efc6 : 10ef             [ 3] 	bpl df_rt_list_got_sym
efc8 : 60               [ 6] 	rts
                             
                             ;** Decode assembler token in A **
efc9 :                       df_rt_asm_decode_token
efc9 : a92e             [ 2] 	lda #'.'			;Always put out the . symbol
efcb : 2054c4           [ 6] 	jsr io_put_ch
efce : a47c             [ 3] 	ldy df_linoff		;Print out any whitespace
efd0 :                       df_rt_asm_decode_token_ws
efd0 : c8               [ 2] 	iny					;Point to char after the asm token
efd1 : 847c             [ 3] 	sty df_linoff
efd3 : b1a1             [ 5] 	lda (df_tmpptra),y	;What is the char?
efd5 : 2013d7           [ 6] 	jsr df_tk_isws		;If not then found the keyword
efd8 : 9006             [ 3] 	bcc df_rt_asm_decode_token_found
efda : 2054c4           [ 6] 	jsr io_put_ch		;Print the space
efdd : 4cd0ef           [ 3] 	jmp df_rt_asm_decode_token_ws
AS65 Assembler for R6502 [1.42].                                     Page  233
-------------------------------- bank\bank0.s --------------------------------

efe0 :                       df_rt_asm_decode_token_found
efe0 : c911             [ 2] 	cmp #DFTK_VAR		; If is a label variable?
efe2 : d003             [ 3] 	bne df_rt_asm_decode_token_keyword
                             	; if so then process as normal escape handling
efe4 : 4c7eee           [ 3] 	jmp df_rt_list_decode_esc
efe7 :                       df_rt_asm_decode_token_keyword
efe7 : 297f             [ 2] 	and #0x7f			; Mask off MSB
efe9 : aa               [ 2] 	tax					;Put it in to X as the counter
                             	; Point to asm symbol table
efea : a991             [ 2] 	lda #lo(df_asm_tokensyms)
efec : 85a3             [ 3] 	sta df_tmpptrb
efee : a9fc             [ 2] 	lda #hi(df_asm_tokensyms)
eff0 : 85a4             [ 3] 	sta df_tmpptrb+1
eff2 :                       df_rt_list_find_asm_sym
eff2 : 8a               [ 2] 	txa
eff3 : f01b             [ 4] 	beq df_rt_list_got_asm_sym
eff5 : a000             [ 2] 	ldy #0
eff7 :                       df_rt_list_next_asm_ch
                             	_incZPWord df_tmpptrb
                             
effd : b1a3             [ 5] 	lda (df_tmpptrb),y
efff : c920             [ 2] 	cmp #' '			; Skip all chars >=' '
f001 : b0f4             [ 4] 	bcs df_rt_list_next_asm_ch
f003 : 38               [ 2] 	sec					; Skip offset and mode bytes
f004 : 65a3             [ 3] 	adc df_tmpptrb
f006 : 85a3             [ 3] 	sta df_tmpptrb
                             	_bcc 2
                             
f00a : e6a4             [ 5] 	inc df_tmpptrb+1
f00c : ca               [ 2] 	dex					; One less symbol to skip over
f00d : 4cf2ef           [ 3] 	jmp df_rt_list_find_asm_sym
f010 :                       df_rt_list_got_asm_sym
f010 : a1a3             [ 6] 	lda (df_tmpptrb,x)	; Relies on X=0 from branch
f012 : c920             [ 2] 	cmp #' '
f014 : 900c             [ 3] 	bcc df_rt_asm_decode_token_done
f016 : 2054c4           [ 6] 	jsr io_put_ch
                             	_incZPWord df_tmpptrb
                             
f01f : 4c10f0           [ 3] 	jmp df_rt_list_got_asm_sym
f022 :                       df_rt_asm_decode_token_done
f022 : 60               [ 6] 	rts
                             
                             
f023 :                       df_rt_doke
f023 : 2037e3           [ 6] 	jsr df_rt_parm_2ints
f026 : a5a3             [ 3] 	lda df_tmpptrb
f028 : a000             [ 2] 	ldy #0
f02a : 91a1             [ 5] 	sta (df_tmpptra),y
                             	; get high byte to doke
f02c : a5a4             [ 3] 	lda df_tmpptrb+1
f02e : c8               [ 2] 	iny
                             	; poke hi byte
f02f : 91a1             [ 5] 	sta (df_tmpptra),y
f031 : 60               [ 6] 	rts
                             
f032 :                       df_rt_poke
f032 : 2037e3           [ 6] 	jsr df_rt_parm_2ints
f035 : a5a3             [ 3] 	lda df_tmpptrb
f037 : a000             [ 2] 	ldy #0
f039 : 91a1             [ 5] 	sta (df_tmpptra),y
f03b : 60               [ 6] 	rts
                             
AS65 Assembler for R6502 [1.42].                                     Page  234
-------------------------------- bank\bank0.s --------------------------------

f03c :                       df_rt_snd_common
                             	; 3 inputs
                             	; tmpa = channel (1,2,3), tmpb = period, tmpc = 
f03c : a5a1             [ 3] 	lda df_tmpptra
                             	; tone channel addressing is 0 to 2
f03e : 38               [ 2] 	sec
f03f : e901             [ 2] 	sbc #1
f041 : 2903             [ 2] 	and #3
                             	; ok doing a tone channel, get reg index for per
f043 : 0a               [ 2] 	asl a
f044 : aa               [ 2] 	tax
                             	; get low byte of period
f045 : a5a3             [ 3] 	lda df_tmpptrb
f047 : 206ec0           [ 6] 	jsr snd_set
                             	; increment reg number to high byte
f04a : e8               [ 2] 	inx
                             	; get high byte of period
f04b : a5a4             [ 3] 	lda df_tmpptrb+1
f04d : 290f             [ 2] 	and #0x0f
                             	; set period
f04f : 206ec0           [ 6] 	jsr snd_set
                             	; get volume register index (8 = channel 1)
f052 : 18               [ 2] 	clc
f053 : a5a1             [ 3] 	lda df_tmpptra
f055 : 2903             [ 2] 	and #3
f057 : 6907             [ 2] 	adc #7
f059 : aa               [ 2] 	tax
                             	; get volume
f05a : a5a5             [ 3] 	lda df_tmpptrc
f05c : 290f             [ 2] 	and #0x0f
f05e : d002             [ 3] 	bne df_rt_sound_env_skip
                             	; envelope mode
f060 : 0910             [ 2] 	ora #0x10
f062 :                       df_rt_sound_env_skip
f062 : 4c6ec0           [ 3] 	jmp snd_set
                             
                             ; sound chan,period,volume
f065 :                       df_rt_sound
f065 : 2042e3           [ 6] 	jsr df_rt_parm_3ints
f068 :                       df_rt_dosound
                             	; check which channel (0 = noise)
f068 : a5a1             [ 3] 	lda df_tmpptra
f06a : f003             [ 3] 	beq df_rt_sound_noise
f06c : 4c3cf0           [ 3] 	jmp df_rt_snd_common
f06f :                       df_rt_sound_noise
                             	; ok update the noise channel, volume is irrelev
f06f : a206             [ 2] 	ldx #6
f071 : a5a3             [ 3] 	lda df_tmpptrb
f073 : 291f             [ 2] 	and #0x1f
f075 : 4c6ec0           [ 3] 	jmp snd_set
                             
                             ; music chan,octave,note,volume
f078 :                       df_rt_music
f078 : 2059e3           [ 6] 	jsr df_rt_parm_4ints
                             	; parm 2 = octave, need to x 12word = 24
                             	; get period A,X (hi/lo)
                             	; pass in octave # in X and note # in Y
f07b : a6a3             [ 3] 	ldx df_tmpptrb
f07d : a4a5             [ 3] 	ldy df_tmpptrc
f07f : 2013d4           [ 6] 	jsr snd_get_note
                             	; store note period in b
f082 : 86a3             [ 3] 	stx df_tmpptrb
AS65 Assembler for R6502 [1.42].                                     Page  235
-------------------------------- bank\bank0.s --------------------------------

f084 : 85a4             [ 3] 	sta df_tmpptrb+1
                             	; put vol in tmpc
f086 : a5a7             [ 3] 	lda df_tmpptrd
f088 : 85a5             [ 3] 	sta df_tmpptrc
                             	; tmpa,b,c contain chan,per,vol
f08a : 4c68f0           [ 3] 	jmp df_rt_dosound
                             
                             
                             ; play tonemask,noisemask,envelope,period
f08d :                       df_rt_play
f08d : 2059e3           [ 6] 	jsr df_rt_parm_4ints
                             	; parm 1 = tone enable
f090 : a5a1             [ 3] 	lda df_tmpptra
f092 : 2907             [ 2] 	and #7
f094 : 85a1             [ 3] 	sta df_tmpptra
                             	; parm 2 = noise enable
f096 : a5a3             [ 3] 	lda df_tmpptrb
f098 : 2907             [ 2] 	and #7
f09a : 0a               [ 2] 	asl a
f09b : 0a               [ 2] 	asl a
f09c : 0a               [ 2] 	asl a
f09d : 05a1             [ 3] 	ora df_tmpptra
                             	; we now have bits set for channels to enable
                             	; but need to invert for the 8910
                             	; top 2 bits are 0 and 1 as these are port b (in
f09f : 497f             [ 2] 	eor #0x7f
                             	; reg 7 is control register
f0a1 : a207             [ 2] 	ldx #7
f0a3 : 206ec0           [ 6] 	jsr snd_set
                             	; parm 3 = envelope mode
f0a6 : a5a5             [ 3] 	lda df_tmpptrc
f0a8 : 290f             [ 2] 	and #0xf
                             	; 13 is envelope shape register
f0aa : a20d             [ 2] 	ldx #13
f0ac : 206ec0           [ 6] 	jsr snd_set
                             	; parm 4 = envelope period
                             	; 11 is envelope period register
f0af : a20b             [ 2] 	ldx #11
                             	; get low
f0b1 : a5a7             [ 3] 	lda df_tmpptrd
f0b3 : 206ec0           [ 6] 	jsr snd_set
                             	; get high
f0b6 : e8               [ 2] 	inx
f0b7 : a5a8             [ 3] 	lda df_tmpptrd+1
f0b9 : 4c6ec0           [ 3] 	jmp snd_set
                             
                             ;df_rt_fill
                             ;	jsr df_rt_parm_5ints
                             ;	rts
                             	
                             ;* common filename procesing routine
                             ;*
f0bc :                       df_rt_init_filename
                             	; evaluate string
f0bc : 2073e0           [ 6] 	jsr df_rt_neval
f0bf : 2081f6           [ 6] 	jsr df_ost_popStr
                             
                             	; save string address
f0c2 : 86a5             [ 3] 	stx df_tmpptrc
f0c4 : 85a6             [ 3] 	sta df_tmpptrc+1
                             
                             	; copy string to fhandle
AS65 Assembler for R6502 [1.42].                                     Page  236
-------------------------------- bank\bank0.s --------------------------------

f0c6 : a000             [ 2] 	ldy #0
f0c8 :                       df_rt_copy_fn
f0c8 : b1a5             [ 5] 	lda (df_tmpptrc),y
f0ca :                       df_rt_fname_case
f0ca : 990004           [ 5] 	sta df_linbuff,y				; Put filename in line buffe
f0cd : c8               [ 2] 	iny
f0ce : aa               [ 2] 	tax
f0cf : d0f7             [ 3] 	bne df_rt_copy_fn
f0d1 : 60               [ 6] 	rts
                             
                             ;* common file parsing routine
f0d2 :                       df_rt_parse_file
                             	; now process filename
f0d2 : 20bcf0           [ 6] 	jsr df_rt_init_filename
f0d5 : a900             [ 2] 	lda #0						; Initialise tape system
f0d7 : 4c2bc4           [ 3] 	jmp io_active_device
f0da :                       df_rt_file_errc
                             	SWBRK DFERR_FNAME
                             
                             
                             ; save "file" as text
f0dc :                       df_rt_tsave
f0dc : 20d2f0           [ 6] 	jsr df_rt_parse_file
f0df : 205ac4           [ 6] 	jsr io_open_write
f0e2 : b0f6             [ 3] 	bcs df_rt_file_errc
                             	; ok now have redirected output to device
                             	; go and list the program in save mode
f0e4 : a901             [ 2] 	lda #1
f0e6 : 85a9             [ 3] 	sta df_tmpptre
f0e8 : 20f1ed           [ 6] 	jsr df_rt_listprg
                             	; final CR to end the save
f0eb : a90d             [ 2] 	lda #UTF_CR
f0ed : 2054c4           [ 6] 	jsr io_put_ch
f0f0 :                       df_rt_file_cleanup
                             	; close the file
f0f0 : 205dc4           [ 6] 	jsr io_close
                             	; restore to default device io
f0f3 : 4c28c4           [ 3] 	jmp io_set_default
                             
                             
                             ; load "file" from text
f0f6 :                       df_rt_tload
f0f6 : 20d2f0           [ 6] 	jsr df_rt_parse_file
f0f9 : 2057c4           [ 6] 	jsr io_open_read
f0fc : b0dc             [ 3] 	bcs df_rt_file_errc
                             	; no echo - very important
                             	; else might try and write to a device
                             	; only open for reading (i.e. SD CARD)
f0fe :                       df_rt_loadline
f0fe : 18               [ 2] 	clc					; NO ECHO!
f0ff : 2044df           [ 6] 	jsr df_pg_inputline
                             	; if C clear then tokenise line
f102 : 9015             [ 3] 	bcc df_rt_ldtokenise
                             	; else done
                             	; clear dflat runtime else will try to execute
                             	; the last tokenised line!
f104 : a200             [ 2] 	ldx #0
f106 : 8e8004           [ 4] 	stx df_tokbuff			; Offset to next line
f109 : 8e8104           [ 4] 	stx df_tokbuff+1		; Clear line low
f10c : 8e8204           [ 4] 	stx df_tokbuff+2		; Clear line high
f10f : 867f             [ 3] 	stx df_nxtstidx			; Clear next statement
f111 : 867e             [ 3] 	stx df_eolidx			; Clear end of line too
AS65 Assembler for R6502 [1.42].                                     Page  237
-------------------------------- bank\bank0.s --------------------------------

f113 : e8               [ 2] 	inx						; Set immediate mode
f114 : 865e             [ 3] 	stx df_immed
f116 : 4cf0f0           [ 3] 	jmp df_rt_file_cleanup	; Ok now can close and do
f119 :                       df_rt_ldtokenise
f119 : 2095df           [ 6] 	jsr df_pg_tokenise		; Tokenise loaded string
f11c : 4cfef0           [ 3] 	jmp df_rt_loadline		; Continue with next until b
                             
                             
                             ; Utility to open in binary mode save
f11f :                       df_rt_openforbinsave
f11f : 20d2f0           [ 6] 	jsr df_rt_parse_file
f122 : 2066c4           [ 6] 	jsr io_open_ext2		; Ext2 is binary file save
f125 : b0b3             [ 4] 	bcs df_rt_file_errc
f127 : 60               [ 6] 	rts
                             
                             ; Utility to open in binary mode load
f128 :                       df_rt_openforbinload
                             	; Get filename and open file for binary read
f128 : 20d2f0           [ 6] 	jsr df_rt_parse_file
f12b : 2063c4           [ 6] 	jsr io_open_ext1		; Ext1 is binary file read
f12e : b0aa             [ 4] 	bcs df_rt_file_errc
f130 : 60               [ 6] 	rts
                             
                             ; bload addr,"file"
f131 :                       df_rt_bload
                             	; Get address but keep on stack
f131 : e688             [ 5] 	inc df_exeoff
f133 : 2073e0           [ 6] 	jsr df_rt_neval
                             
                             	; Get filename and open file for binary read
f136 : e688             [ 5] 	inc df_exeoff
f138 : 2028f1           [ 6] 	jsr df_rt_openforbinload
                             
                             	; Get address from stack in to ptra
f13b : 207df6           [ 6] 	jsr df_ost_popInt
f13e : 86a1             [ 3] 	stx df_tmpptra
f140 : 85a2             [ 3] 	sta df_tmpptra+1
                             
                             	; Get file address to X,Y
f142 : 2051c4           [ 6] 	jsr io_get_ch
f145 : aa               [ 2] 	tax
f146 : 2051c4           [ 6] 	jsr io_get_ch
f149 : a8               [ 2] 	tay
                             
                             	; Check if user address is zero
f14a : a5a1             [ 3] 	lda df_tmpptra
f14c : 05a2             [ 3] 	ora df_tmpptra+1
f14e : d004             [ 3] 	bne df_rt_bload_addr
                             	; If it is zero then use address from file
f150 : 86a1             [ 3] 	stx df_tmpptra
f152 : 84a2             [ 3] 	sty df_tmpptra+1
f154 :                       df_rt_bload_addr
                             	; Get file length
f154 : 2051c4           [ 6] 	jsr io_get_ch
f157 : 85a3             [ 3] 	sta df_tmpptrb
f159 : 2051c4           [ 6] 	jsr io_get_ch
f15c : 85a4             [ 3] 	sta df_tmpptrb+1
                             
                             	; Go and load the bytes
f15e : 2000f2           [ 6] 	jsr df_rt_loadbin
                             	; Close the file
f161 : 4cf0f0           [ 3] 	jmp df_rt_file_cleanup
AS65 Assembler for R6502 [1.42].                                     Page  238
-------------------------------- bank\bank0.s --------------------------------

                             
                             ; Save a binary file
                             ; addr,length,fname
f164 :                       df_rt_bsave
                             	; Get source address and length but leave on sta
                             	; evaluate 1st parm
f164 : 2073e0           [ 6] 	jsr df_rt_neval
                             	; jump over comma
f167 : e688             [ 5] 	inc df_exeoff
                             	; evaluate the 2nd parm
f169 : 2073e0           [ 6] 	jsr df_rt_neval
                             
                             	; Process file and open for binary save
f16c : e688             [ 5] 	inc df_exeoff
f16e : 201ff1           [ 6] 	jsr df_rt_openforbinsave
                             
                             	; Get length in to ptrb
f171 : 207df6           [ 6] 	jsr df_ost_popInt
f174 : 86a3             [ 3] 	stx df_tmpptrb
f176 : 85a4             [ 3] 	sta df_tmpptrb+1
                             
                             	; Get address in to ptra
f178 : 207df6           [ 6] 	jsr df_ost_popInt
f17b : 86a1             [ 3] 	stx df_tmpptra
f17d : 85a2             [ 3] 	sta df_tmpptra+1
                             
                             	; now save bytes
f17f : 2012f2           [ 6] 	jsr df_rt_savebin
                             	; Close the file
f182 : 4cf0f0           [ 3] 	jmp df_rt_file_cleanup
                             
                             
                             ; save dflat tokenised program as binary
f185 :                       df_rt_save
                             	; Process file and open for binary save
f185 : 201ff1           [ 6] 	jsr df_rt_openforbinsave
                             
                             	; first save zero page stuff
                             	; ok this saves a bit more than needed
                             	; but it's no biggie and doesn't
                             	; clobber temp space
f188 : a95b             [ 2] 	lda #lo(dflat_zp_save_s)
f18a : 85a1             [ 3] 	sta df_tmpptra
f18c : a900             [ 2] 	lda #hi(dflat_zp_save_s)
f18e : 85a2             [ 3] 	sta df_tmpptra+1
                             	; save length
f190 : 38               [ 2] 	sec
f191 : a9a1             [ 2] 	lda #lo(dflat_zp_save_e)
f193 : e95b             [ 2] 	sbc #lo(dflat_zp_save_s)
f195 : 85a3             [ 3] 	sta df_tmpptrb
f197 : a900             [ 2] 	lda #hi(dflat_zp_save_e)
f199 : e900             [ 2] 	sbc #hi(dflat_zp_save_s)
f19b : 85a4             [ 3] 	sta df_tmpptrb+1
                             	; now save bytes
f19d : 2012f2           [ 6] 	jsr df_rt_savebin
                             
                             	; now save the dflat program
f1a0 : a565             [ 3] 	lda df_prgstrt
f1a2 : 85a1             [ 3] 	sta df_tmpptra
f1a4 : a566             [ 3] 	lda df_prgstrt+1
f1a6 : 85a2             [ 3] 	sta df_tmpptra+1
                             	; save length
AS65 Assembler for R6502 [1.42].                                     Page  239
-------------------------------- bank\bank0.s --------------------------------

f1a8 : 38               [ 2] 	sec
f1a9 : a567             [ 3] 	lda df_prgend
f1ab : e565             [ 3] 	sbc df_prgstrt
f1ad : 85a3             [ 3] 	sta df_tmpptrb
f1af : a568             [ 3] 	lda df_prgend+1
f1b1 : e566             [ 3] 	sbc df_prgstrt+1
f1b3 : 85a4             [ 3] 	sta df_tmpptrb+1
                             	; now save bytes
f1b5 : 2012f2           [ 6] 	jsr df_rt_savebin
                             
                             	; now save the variables VVT and VNT
f1b8 : a569             [ 3] 	lda df_vntstrt
f1ba : 85a1             [ 3] 	sta df_tmpptra
f1bc : a56a             [ 3] 	lda df_vntstrt+1
f1be : 85a2             [ 3] 	sta df_tmpptra+1
                             	; save length
f1c0 : 38               [ 2] 	sec
f1c1 : a56d             [ 3] 	lda df_vvtstrt
f1c3 : e569             [ 3] 	sbc df_vntstrt
f1c5 : 85a3             [ 3] 	sta df_tmpptrb
f1c7 : a56e             [ 3] 	lda df_vvtstrt+1
f1c9 : e56a             [ 3] 	sbc df_vntstrt+1
f1cb : 85a4             [ 3] 	sta df_tmpptrb+1
                             	; now save bytes
f1cd : 2012f2           [ 6] 	jsr df_rt_savebin
                             
                             	; close the file
f1d0 : 205dc4           [ 6] 	jsr io_close
f1d3 : 18               [ 2] 	clc
                             	; Close the file
f1d4 : 4cf0f0           [ 3] 	jmp df_rt_file_cleanup
                             
                             
                             ; load dflat tokenised program as binary
f1d7 :                       df_rt_load
f1d7 : 2028f1           [ 6] 	jsr df_rt_openforbinload
                             
                             	; Get zero page header
f1da : 20f3f1           [ 6] 	jsr df_rt_getbin_parms
                             	; and get bytes
f1dd : 2000f2           [ 6] 	jsr df_rt_loadbin
                             
                             	; Get program header
f1e0 : 20f3f1           [ 6] 	jsr df_rt_getbin_parms
                             	; and get bytes
f1e3 : 2000f2           [ 6] 	jsr df_rt_loadbin
                             
                             	; Get variables header
f1e6 : 20f3f1           [ 6] 	jsr df_rt_getbin_parms
                             	; and get bytes
f1e9 : 2000f2           [ 6] 	jsr df_rt_loadbin
                             
                             	; close the file
f1ec : 205dc4           [ 6] 	jsr io_close
f1ef : 18               [ 2] 	clc
                             	; Close the file
f1f0 : 4cf0f0           [ 3] 	jmp df_rt_file_cleanup
                             
                             
                             ; Utility to get 4 parms from binary header
f1f3 :                       df_rt_getbin_parms
f1f3 : a200             [ 2] 	ldx #0
AS65 Assembler for R6502 [1.42].                                     Page  240
-------------------------------- bank\bank0.s --------------------------------

f1f5 :                       df_rt_getbin_parms_loop
f1f5 : 2051c4           [ 6] 	jsr io_get_ch
f1f8 : 95a1             [ 4] 	sta df_tmpptra,x
f1fa : e8               [ 2] 	inx
f1fb : e004             [ 2] 	cpx #4
f1fd : d0f6             [ 3] 	bne df_rt_getbin_parms_loop
f1ff : 60               [ 6] 	rts
                             
                             ; Utility to load a bin file in address ptra
                             ; Length in ptr b
f200 :                       df_rt_loadbin
                             	; Now load all bytes
f200 : a000             [ 2] 	ldy #0
f202 :                       df_rt_loadbin_byte
                             	; Get a byte from tape
f202 : 2051c4           [ 6] 	jsr io_get_ch
                             	; Save it to destination
f205 : 91a1             [ 5] 	sta (df_tmpptra),y
                             	; Increment destination
f207 : c8               [ 2] 	iny
f208 : d002             [ 3] 	bne df_rt_loadbin_inc
f20a : e6a2             [ 5] 	inc df_tmpptra+1
f20c :                       df_rt_loadbin_inc
                             	; Decrement length remaining
f20c : 2030f2           [ 6] 	jsr df_rt_dec_binlen
                             	; Not done, do another byte
f20f : d0f1             [ 3] 	bne df_rt_loadbin_byte
                             	; Yes the close the file
f211 : 60               [ 6] 	rts
                             
                             ; Utility to save a bin file from address ptra
                             ; Length in ptr b
f212 :                       df_rt_savebin
                             	; Save dest and length to tape
f212 : a200             [ 2] 	ldx #0
f214 :                       df_rt_bsave_parms
f214 : b5a1             [ 4] 	lda df_tmpptra,x
f216 : 2054c4           [ 6] 	jsr io_put_ch
f219 : e8               [ 2] 	inx
f21a : e004             [ 2] 	cpx #4
f21c : d0f6             [ 3] 	bne df_rt_bsave_parms
                             
                             	; Now save all bytes
f21e : a000             [ 2] 	ldy #0
f220 :                       df_rt_savebin_byte
                             	; Get byte from memory
f220 : b1a1             [ 5] 	lda (df_tmpptra),y
                             	; Put byte to tape
f222 : 2054c4           [ 6] 	jsr io_put_ch
                             	; Increment destination
f225 : c8               [ 2] 	iny
f226 : d002             [ 3] 	bne df_rt_savebin_inc
f228 : e6a2             [ 5] 	inc df_tmpptra+1
f22a :                       df_rt_savebin_inc
                             	; Decrement length remaining
f22a : 2030f2           [ 6] 	jsr df_rt_dec_binlen
                             	; Not done, do another byte
f22d : d0f1             [ 3] 	bne df_rt_savebin_byte
f22f : 60               [ 6] 	rts
                             
                             ; Decrement length in ptrb
f230 :                       df_rt_dec_binlen
AS65 Assembler for R6502 [1.42].                                     Page  241
-------------------------------- bank\bank0.s --------------------------------

                             	; Decrement length remaining
f230 : a5a3             [ 3] 	lda df_tmpptrb
f232 : d002             [ 3] 	bne df_rt_binlen_skip
f234 : c6a4             [ 5] 	dec df_tmpptrb+1
f236 :                       df_rt_binlen_skip
f236 : c6a3             [ 5] 	dec df_tmpptrb
                             	; Reached zero?
f238 : a5a3             [ 3] 	lda df_tmpptrb
f23a : 05a4             [ 3] 	ora df_tmpptrb+1
f23c : 60               [ 6] 	rts
                             
                             
                             ; reset var
f23d :                       df_rt_reset
                             	; now get lvar X,A from current statement
f23d : 20b4e4           [ 6] 	jsr df_rt_getlvar
                             	; save lvar in tmpb, vvt ptr in tmpa
f240 : 86a3             [ 3] 	stx df_tmpptrb
f242 : 85a4             [ 3] 	sta df_tmpptrb+1
                             	; load the vdp count as the reset value of timer
                             	; turn off interrupts while reading vdp lo,hi
f244 : a000             [ 2] 	ldy #0	; This is in readiness to read high byte 
                             	; clear interrupts to access 3 byte vdp counter 
f246 : 78               [ 2] 	sei
f247 : a508             [ 3] 	lda vdp_cnt
f249 : 91a3             [ 5] 	sta (df_tmpptrb),y
f24b : a509             [ 3] 	lda vdp_cnt+1
f24d : c8               [ 2] 	iny
f24e : 91a3             [ 5] 	sta (df_tmpptrb),y
                             	; restore interrupts asap
f250 : 58               [ 2] 	cli
f251 : 60               [ 6] 	rts
                             
                             ;***** FUNCTIONS *****
                             
f252 :                       df_rt_deek
f252 : 38               [ 2] 	sec
f253 : 24                    	db 0x24	; BIT skip the clc
f254 :                       df_rt_peek
f254 : 18               [ 2] 	clc
f255 :                       df_rt_readbyte
f255 : 08               [ 3] 	php
                             ;	inc df_exeoff
f256 : 206de0           [ 6] 	jsr df_rt_getnval
f259 : 86a1             [ 3] 	stx df_tmpptra
f25b : 85a2             [ 3] 	sta df_tmpptra+1
f25d : a000             [ 2] 	ldy #0
f25f : b1a1             [ 5] 	lda (df_tmpptra),y
f261 : aa               [ 2] 	tax
f262 : a900             [ 2] 	lda #0
f264 : 28               [ 4] 	plp
f265 : 9003             [ 3] 	bcc df_rt_readbyte_skip
f267 : c8               [ 2] 	iny
f268 : b1a1             [ 5] 	lda (df_tmpptra),y
f26a :                       df_rt_readbyte_skip
f26a : 4c4df6           [ 3] 	jmp df_ost_pushInt
                             
                             ; Random number generator
                             ; rnd(0) = get next number
                             ; rnd(>0) = set seed
f26d :                       df_rt_rnd
                             ;	inc df_exeoff
AS65 Assembler for R6502 [1.42].                                     Page  242
-------------------------------- bank\bank0.s --------------------------------

f26d : 206de0           [ 6] 	jsr df_rt_getnval
                             	; if input is 0 then generate next random number
f270 : e000             [ 2] 	cpx #0
f272 : d014             [ 3] 	bne df_rt_rnd_set
f274 : c900             [ 2] 	cmp #0
f276 : d010             [ 3] 	bne df_rt_rnd_set
                             	; generate next number
f278 : a598             [ 3] 	lda df_rnd+1
f27a : 4a               [ 2] 	lsr a
f27b : 2697             [ 5] 	rol df_rnd
f27d : 9002             [ 3] 	bcc df_rt_rnd_noeor
f27f : 49b4             [ 2] 	eor #0xb4
f281 :                       df_rt_rnd_noeor
f281 : 8598             [ 3] 	sta df_rnd+1
f283 : 4597             [ 3] 	eor df_rnd
f285 : 4c51f6           [ 3] 	jmp df_ost_pushIntA
                             	; else set the seed to that number and done
f288 :                       df_rt_rnd_set
f288 : 8697             [ 3] 	stx df_rnd
f28a : 8598             [ 3] 	sta df_rnd+1
f28c : 4c4df6           [ 3] 	jmp df_ost_pushInt
                             
                             
                             ;* Return memory footprint as follows:
                             ;* 0	Return free memory (start of vvt - end of he
                             ;* 1	Return program size (end of prg - start of p
                             ;* 2	Return size of vars (end of vnt - start of v
f28f :                       df_rt_mem
                             ;	inc df_exeoff
f28f : 206de0           [ 6] 	jsr df_rt_getnval
                             	; only low byte is used
f292 : e001             [ 2] 	cpx #1
f294 : f017             [ 3] 	beq df_rt_mem_prg
f296 : e002             [ 2] 	cpx #2
f298 : f026             [ 3] 	beq df_rt_mem_var
                             	; default is free memory
f29a :                       df_rt_mem_free
                             	_cpyZPWord df_vvtstrt,df_tmpptra
                             
                             	_cpyZPWord df_starend,df_tmpptrb
                             
f2aa : 4cd0f2           [ 3] 	jmp df_rt_mem_calc
f2ad :                       df_rt_mem_prg
                             	_cpyZPWord df_prgend,df_tmpptra
                             
                             	_cpyZPWord df_prgstrt,df_tmpptrb
                             
f2bd : 4cd0f2           [ 3] 	jmp df_rt_mem_calc
f2c0 :                       df_rt_mem_var
                             	_cpyZPWord df_vvtstrt,df_tmpptra
                             
                             	_cpyZPWord df_vntstrt,df_tmpptrb
                             
f2d0 :                       df_rt_mem_calc
                             	; tmpa-tmpb result in X,A
f2d0 : 38               [ 2] 	sec
f2d1 : a5a1             [ 3] 	lda df_tmpptra
f2d3 : e5a3             [ 3] 	sbc df_tmpptrb
f2d5 : aa               [ 2] 	tax
f2d6 : a5a2             [ 3] 	lda df_tmpptra+1
f2d8 : e5a4             [ 3] 	sbc df_tmpptrb+1
f2da : 4c4df6           [ 3] 	jmp df_ost_pushInt
AS65 Assembler for R6502 [1.42].                                     Page  243
-------------------------------- bank\bank0.s --------------------------------

                             
                             ;* a=stick()
                             ;* returns bit condition of joystick positions
                             ;* no actual joystick support so this is
                             ;* Check for fire | down | up | right | left
                             ;*        bit  4     3      2     1       0
f2dd :                       df_rt_stick
                             ;	inc df_exeoff
f2dd : 2078c7           [ 6] 	jsr kb_stick				; Get pos in to A
f2e0 : 4c51f6           [ 3] 	jmp df_ost_pushIntA
                             
                             ; k=get(sync) sync>=1 means sync
f2e3 :                       df_rt_get
                             ;	inc df_exeoff
f2e3 : 206de0           [ 6] 	jsr df_rt_getnval
                             	; only low byte is used, check for sync or async
                             	; c=0 if x<1 else x>=1 makes c=1
f2e6 : e001             [ 2] 	cpx #1
f2e8 :                       df_rt_get_sync
f2e8 : 08               [ 3] 	php
f2e9 : 2051c4           [ 6] 	jsr io_get_ch				; Return in A, C=0 is good
f2ec : 9005             [ 3] 	bcc df_rt_get_pushp			; Push A (and do plp)
f2ee : 28               [ 4] 	plp
f2ef : b0f7             [ 3] 	bcs df_rt_get_sync			; If sync then check again
f2f1 : 9001             [ 3] 	bcc df_rt_get_push			; Else push zero (no plp)
f2f3 :                       df_rt_get_pushp
f2f3 : 28               [ 4] 	plp
f2f4 :                       df_rt_get_push
f2f4 : 4c51f6           [ 3] 	jmp df_ost_pushIntA
                             
                             ; s = scrn(x,y)
f2f7 :                       df_rt_scrn
                             ;	inc df_exeoff
f2f7 : 2037e3           [ 6] 	jsr df_rt_parm_2ints
f2fa : a4a1             [ 3] 	ldy df_tmpptra			; Y is the x coord!
f2fc : a6a3             [ 3] 	ldx df_tmpptrb			; X is the y coord!
f2fe : 20facd           [ 6] 	jsr gr_get
f301 : 4c51f6           [ 3] 	jmp df_ost_pushIntA
                             
                             ; p = pixel(x,y)
f304 :                       df_rt_pixel
                             ;	inc df_exeoff
f304 : 2037e3           [ 6] 	jsr df_rt_parm_2ints
f307 : a6a1             [ 3] 	ldx df_tmpptra
f309 : a4a3             [ 3] 	ldy df_tmpptrb
f30b : 2060d0           [ 6] 	jsr gr_pixel
f30e : 4c51f6           [ 3] 	jmp df_ost_pushIntA
                             
                             
                             ; e=elapsed(var)
f311 :                       df_rt_elapsed
                             	; now get lvar X,A from current statement
f311 : 20b4e4           [ 6] 	jsr df_rt_getlvar
f314 : e688             [ 5] 	inc df_exeoff
                             	; save lvar in tmpb, vvt ptr in tmpa
f316 : 86a3             [ 3] 	stx df_tmpptrb
f318 : 85a4             [ 3] 	sta df_tmpptrb+1
                             	; subtract vdp counter from value
                             	; turn off interrupts while reading vdp lo,hi
f31a : a000             [ 2] 	ldy #0	; This is in readiness to read high byte 
f31c : 38               [ 2] 	sec
                             	; disable interrupts to access vdp counter
AS65 Assembler for R6502 [1.42].                                     Page  244
-------------------------------- bank\bank0.s --------------------------------

f31d : 78               [ 2] 	sei
f31e : a508             [ 3] 	lda vdp_cnt
f320 : f1a3             [ 5] 	sbc (df_tmpptrb),y
f322 : aa               [ 2] 	tax
f323 : a509             [ 3] 	lda vdp_cnt+1
                             	; restore interrupts asap
f325 : 58               [ 2] 	cli
f326 : c8               [ 2] 	iny
f327 : f1a3             [ 5] 	sbc (df_tmpptrb),y
f329 : 4c4df6           [ 3] 	jmp df_ost_pushInt
                             
f32c :                       df_rt_call
                             ;	inc df_exeoff
f32c : 2059e3           [ 6] 	jsr df_rt_parm_4ints
f32f : a5a3             [ 3] 	lda df_tmpptrb				; load A
f331 : a6a5             [ 3] 	ldx	df_tmpptrc				; load X
f333 : a4a7             [ 3] 	ldy df_tmpptrd				; load Y
f335 : 203bf3           [ 6] 	jsr df_rt_calljsr
f338 :                       df_rt_push_int1
f338 : 4c4df6           [ 3] 	jmp df_ost_pushInt			; A,X pair is return value
f33b :                       df_rt_calljsr
f33b : 6ca100           [ 6] 	jmp (df_tmpptra)			; tmpptra is address, return 
                             
f33e :                       df_rt_sgn
                             ;	inc df_exeoff
f33e : 206de0           [ 6] 	jsr df_rt_getnval
f341 : 86a1             [ 3] 	stx df_tmpptra
f343 : 05a1             [ 3] 	ora df_tmpptra
f345 : f00f             [ 3] 	beq df_rt_sgn_z
f347 : 2980             [ 2] 	and #0x80
f349 : d006             [ 3] 	bne df_rt_sgn_n
f34b : a201             [ 2] 	ldx #1
f34d : a900             [ 2] 	lda #0
f34f : f0e7             [ 3] 	beq df_rt_push_int1			; Always
f351 :                       df_rt_sgn_n
f351 : a2ff             [ 2] 	ldx #0xff
f353 : 8a               [ 2] 	txa
f354 : d0e2             [ 3] 	bne df_rt_push_int1			; Always
f356 :                       df_rt_sgn_z
f356 : a200             [ 2] 	ldx #0
f358 : 8a               [ 2] 	txa
f359 : f0dd             [ 3] 	beq df_rt_push_int1			; Always
                             
                             ; addr(X)
f35b :                       df_rt_addr
                             	; get lvar X,A from current statement
f35b : 20b4e4           [ 6] 	jsr df_rt_getlvar
f35e : e688             [ 5] 	inc df_exeoff
f360 : 4c4df6           [ 3] 	jmp df_ost_pushInt
                             
                             ; string length calculator
                             ; X,A = source
                             ; A = length not including zero
f363 :                       df_rt_strlen_common
f363 : 86a1             [ 3] 	stx df_tmpptra
f365 : 85a2             [ 3] 	sta df_tmpptra+1
f367 : a0ff             [ 2] 	ldy #0xff
f369 :                       df_rt_strlen_count
f369 : c8               [ 2] 	iny
f36a : b1a1             [ 5] 	lda (df_tmpptra),y
f36c : d0fb             [ 3] 	bne df_rt_strlen_count
f36e : 98               [ 2] 	tya
AS65 Assembler for R6502 [1.42].                                     Page  245
-------------------------------- bank\bank0.s --------------------------------

f36f : 60               [ 6] 	rts
                             
                             
                             ; common routine to extract a string
                             ; tmpa = source string
                             ; tmpb = dest string
                             ; tmpc = start pos
                             ; tmpd = endpos
f370 :                       df_rt_str_extract
                             	; source string
f370 : 2081f6           [ 6] 	jsr df_ost_popStr
f373 : 86a1             [ 3] 	stx df_tmpptra
f375 : 85a2             [ 3] 	sta df_tmpptra+1
                             	; destination is string accumulator
f377 : a57a             [ 3] 	lda df_sevalptr
f379 : 85a3             [ 3] 	sta df_tmpptrb
f37b : a57b             [ 3] 	lda df_sevalptr+1
f37d : 85a4             [ 3] 	sta df_tmpptrb+1
                             	; start pos
f37f : a4a5             [ 3] 	ldy df_tmpptrc
f381 : a200             [ 2] 	ldx #0
f383 :                       df_rt_str_cpy_ch
f383 : c4a7             [ 3] 	cpy df_tmpptrd
f385 : f011             [ 3] 	beq df_str_src_end
f387 : b1a1             [ 5] 	lda (df_tmpptra),y
f389 : f00d             [ 3] 	beq df_str_src_end
f38b : 81a3             [ 6] 	sta (df_tmpptrb,x)
                             	_incZPWord df_tmpptrb
                             
f393 : c8               [ 2] 	iny
f394 : d0ed             [ 3] 	bne df_rt_str_cpy_ch
                             	SWBRK DFERR_STRLONG
                             
f398 :                       df_str_src_end
f398 : a900             [ 2] 	lda #0
f39a : 81a3             [ 6] 	sta (df_tmpptrb,x)
f39c : a67a             [ 3] 	ldx df_sevalptr
f39e : a57b             [ 3] 	lda df_sevalptr+1
f3a0 : 4c58f6           [ 3] 	jmp df_ost_pushStr
                             
                             ; $c = chr(x)
f3a3 :                       df_rt_chr
                             ;	inc df_exeoff
                             	; get char in X
f3a3 : 206de0           [ 6] 	jsr df_rt_getnval
f3a6 : a000             [ 2] 	ldy #0
                             	; transfer lo byte to A
f3a8 : 8a               [ 2] 	txa
f3a9 : 917a             [ 5] 	sta (df_sevalptr),y
f3ab : c8               [ 2] 	iny
                             	; zero terminator
f3ac : a900             [ 2] 	lda #0
f3ae : 917a             [ 5] 	sta (df_sevalptr),y
                             	; point to seval scratch area
f3b0 : a67a             [ 3] 	ldx df_sevalptr
f3b2 : a57b             [ 3] 	lda df_sevalptr+1
f3b4 : 4c58f6           [ 3] 	jmp df_ost_pushStr
                             
                             ; $c = hex(x)
f3b7 :                       df_rt_hex
                             ;	inc df_exeoff
                             	; create hex digits
AS65 Assembler for R6502 [1.42].                                     Page  246
-------------------------------- bank\bank0.s --------------------------------

f3b7 : 206de0           [ 6] 	jsr df_rt_getnval
f3ba : 85a1             [ 3] 	sta df_tmpptra	; Save the high byte
f3bc : 8a               [ 2] 	txa				; Convert low byte first
f3bd : 2098c1           [ 6] 	jsr str_a_to_x	; Hex digits in A,X
f3c0 : 85a3             [ 3] 	sta df_tmpptrb
f3c2 : 8a               [ 2] 	txa				; Push low digit of low byte from X
f3c3 : 48               [ 3] 	pha
f3c4 : a5a3             [ 3] 	lda df_tmpptrb	; Get A back from temp
f3c6 : 48               [ 3] 	pha				; Push high digit of low byte
f3c7 : a5a1             [ 3] 	lda df_tmpptra	; Get the high byte
f3c9 : 2098c1           [ 6] 	jsr str_a_to_x	; Hex digits in A,X
                             	; create string
f3cc : a000             [ 2] 	ldy #0			; Index in to string temp area
                             	; hi/hi
f3ce : 917a             [ 5] 	sta (df_sevalptr),y
f3d0 : c8               [ 2] 	iny
                             	; hi/lo
f3d1 : 8a               [ 2] 	txa
f3d2 : 917a             [ 5] 	sta (df_sevalptr),y
f3d4 : c8               [ 2] 	iny
                             	; lo/hi
f3d5 : 68               [ 4] 	pla
f3d6 : 917a             [ 5] 	sta (df_sevalptr),y
f3d8 : c8               [ 2] 	iny
                             	; lo/lo
f3d9 : 68               [ 4] 	pla
f3da : 917a             [ 5] 	sta (df_sevalptr),y
f3dc : c8               [ 2] 	iny
                             	; zero terminator
f3dd : a900             [ 2] 	lda #0
f3df : 917a             [ 5] 	sta (df_sevalptr),y
                             	; point to seval scratch area
f3e1 : a67a             [ 3] 	ldx df_sevalptr
f3e3 : a57b             [ 3] 	lda df_sevalptr+1
f3e5 : 4c58f6           [ 3] 	jmp df_ost_pushStr
                             
                             ; $l = left($s, x)
f3e8 :                       df_rt_left
                             ;	inc df_exeoff
                             
                             	; first get the string to act on
                             	; point to string accumulator
f3e8 : 202de1           [ 6] 	jsr df_rt_seval
                             	; now get the num of chars
f3eb : e688             [ 5] 	inc df_exeoff
f3ed : 206de0           [ 6] 	jsr df_rt_getnval
                             	; number of chars to extract
f3f0 : 86a7             [ 3] 	stx df_tmpptrd
                             	; start position
f3f2 : a000             [ 2] 	ldy #0
f3f4 : 84a5             [ 3] 	sty df_tmpptrc
f3f6 : 4c70f3           [ 3] 	jmp df_rt_str_extract
                             
                             ; $r = right($s, x)
f3f9 :                       df_rt_right
                             ;	inc df_exeoff
                             	; first get the string to act on
                             	; point to string accumulator
f3f9 : 202de1           [ 6] 	jsr df_rt_seval
                             	; now get the num of chars from the right
f3fc : e688             [ 5] 	inc df_exeoff
f3fe : 206de0           [ 6] 	jsr df_rt_getnval
AS65 Assembler for R6502 [1.42].                                     Page  247
-------------------------------- bank\bank0.s --------------------------------

                             	; number of chars to extract from the right
f401 : 86a5             [ 3] 	stx df_tmpptrc
                             	; end pos = len
f403 : a67a             [ 3] 	ldx df_sevalptr
f405 : a57b             [ 3] 	lda df_sevalptr+1
f407 : 2063f3           [ 6] 	jsr df_rt_strlen_common
f40a : 85a7             [ 3] 	sta df_tmpptrd
                             	; subtract num chars to extract to get start pos
f40c : 38               [ 2] 	sec
f40d : e5a5             [ 3] 	sbc df_tmpptrc
f40f : 85a5             [ 3] 	sta df_tmpptrc
f411 : 4c70f3           [ 3] 	jmp df_rt_str_extract
                             
                             ; $m = mid($s, x, y)
f414 :                       df_rt_mid
                             ;	inc df_exeoff
                             	; first get the string to act on
                             	; point to string accumulator
f414 : 202de1           [ 6] 	jsr df_rt_seval
                             	; now get start of string segment
f417 : e688             [ 5] 	inc df_exeoff
f419 : 2073e0           [ 6] 	jsr df_rt_neval
                             	; number of chars to extract
f41c : e688             [ 5] 	inc df_exeoff
f41e : 206de0           [ 6] 	jsr df_rt_getnval
f421 : 86a7             [ 3] 	stx df_tmpptrd
                             	; start position
f423 : 207df6           [ 6] 	jsr df_ost_popInt
f426 : ca               [ 2] 	dex					; zero offset rather than 1
f427 : 86a5             [ 3] 	stx df_tmpptrc
                             	; update end pos by adding start pos
f429 : 8a               [ 2] 	txa
f42a : 18               [ 2] 	clc
f42b : 65a7             [ 3] 	adc df_tmpptrd
f42d : 85a7             [ 3] 	sta df_tmpptrd
f42f : 4c70f3           [ 3] 	jmp df_rt_str_extract
                             
                             ; %l = len($s)
f432 :                       df_rt_len
                             ;	inc df_exeoff
                             	; evaluate the string in the string accumulator
f432 : 202de1           [ 6] 	jsr df_rt_seval
f435 : 2081f6           [ 6] 	jsr df_ost_popStr
                             	; now calculate the length of this string
f438 : 2063f3           [ 6] 	jsr df_rt_strlen_common
f43b : 4c51f6           [ 3] 	jmp df_ost_pushIntA
                             
                             ; %l = asc($s)
f43e :                       df_rt_asc
                             ;	inc df_exeoff
                             	; Evaluate string in the string accumulator
f43e : 202de1           [ 6] 	jsr df_rt_seval
f441 : 2081f6           [ 6] 	jsr df_ost_popStr
                             	; Store point in ZP
f444 : 86a1             [ 3] 	stx df_tmpptra
f446 : 85a2             [ 3] 	sta df_tmpptra+1
                             	; Find the character at beginning
f448 : a200             [ 2] 	ldx #0
f44a : a1a1             [ 6] 	lda (df_tmpptra,x)
f44c : 4c51f6           [ 3] 	jmp df_ost_pushIntA
                             
                             ; %l = val($s)
AS65 Assembler for R6502 [1.42].                                     Page  248
-------------------------------- bank\bank0.s --------------------------------

f44f :                       df_rt_val
                             ;	inc df_exeoff
                             	; evaluate the string
f44f : 202de1           [ 6] 	jsr df_rt_seval
f452 : 2081f6           [ 6] 	jsr df_ost_popStr
f455 : a000             [ 2] 	ldy #0				; any numeric format
f457 : 20e1c1           [ 6] 	jsr con_n_to_a		; result in num_a
f45a : b007             [ 3] 	bcs df_rt_val_err
f45c : a63d             [ 3] 	ldx num_a
f45e : a53e             [ 3] 	lda num_a+1
                             	; Save as an int
f460 : 4c4df6           [ 3] 	jmp df_ost_pushInt
f463 :                       df_rt_val_err
                             	SWBRK DFERR_TYPEMISM
                             
                             
                             ; stop execution
f465 :                       df_rt_abort
                             	SWBRK DFERR_ABORT
                             
                             
f467 :                       df_rt_sprchar
f467 : 2037e3           [ 6] 	jsr df_rt_parm_2ints
f46a : a5a1             [ 3] 	lda df_tmpptra
f46c : a6a3             [ 3] 	ldx df_tmpptrb
f46e : 4cd3d2           [ 3] 	jmp gr_spr_char
                             
f471 :                       df_rt_sprpos
f471 : 2042e3           [ 6] 	jsr df_rt_parm_3ints
f474 : a5a1             [ 3] 	lda df_tmpptra
f476 : a6a3             [ 3] 	ldx df_tmpptrb
f478 : a4a5             [ 3] 	ldy df_tmpptrc
f47a : 4ce3d2           [ 3] 	jmp gr_spr_pos
                             
f47d :                       df_rt_sprupd
f47d : 206ed2           [ 6] 	jsr gr_spr_erase
f480 : 2080d2           [ 6] 	jsr gr_spr_new
f483 : 4cb2d2           [ 3] 	jmp gr_spr_draw
                             
f486 :                       df_rt_sprinit
f486 : 4c60d2           [ 3] 	jmp gr_spr_init
                             
f489 :                       df_rt_sprmulti
f489 : 2037e3           [ 6] 	jsr df_rt_parm_2ints
f48c : 4cf0d2           [ 3] 	jmp gr_spr_multi_pos
                             
f48f :                       df_rt_sprhit
                             ;	inc df_exeoff
f48f : 206de0           [ 6] 	jsr df_rt_getnval
f492 : 8a               [ 2] 	txa
f493 : 20d9d2           [ 6] 	jsr gr_spr_hit
f496 : b003             [ 3] 	bcs df_rt_sprhit_inactive
                             	; Active sprite hit = background
f498 : 4c51f6           [ 3] 	jmp df_ost_pushIntA
f49b :                       df_rt_sprhit_inactive
                             	; Inactive sprite hit = -1
f49b : a2ff             [ 2] 	ldx #0xff
f49d : 8a               [ 2] 	txa
f49e : 4c4df6           [ 3] 	jmp df_ost_pushInt
                             
                             
f4a1 :                       mod_sz_rtsubs_e
AS65 Assembler for R6502 [1.42].                                     Page  249
-------------------------------- bank\bank0.s --------------------------------

                             
                             
                             	include "dflat/proc.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  PROC.S
                             ;*  dflat module to handle procedures:
                             ;*  - executing a procedure
                             ;*  - find a proc, pass local and non-local param
                             ;*  - return from a proc, unload locals
                             ;*  - save the definition of a proc in the VNT an
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code  
                             
f4a1 :                       mod_sz_proc_s
                             
f4a1 :                       df_rt_proc_parmerr
f4a1 :                       df_rt_deferr
                             	SWBRK DFERR_PROCPARM
                             
                             
                             
                             ; call procedure
f4a3 :                       df_rt_proc
                             	; move past escape token
f4a3 : a488             [ 3] 	ldy df_exeoff
f4a5 : c8               [ 2] 	iny
                             	; Get VVT address X,A and procptr
f4a6 : b186             [ 5] 	lda (df_currlin),y
f4a8 : aa               [ 2] 	tax
f4a9 : c8               [ 2] 	iny
f4aa : b186             [ 5] 	lda (df_currlin),y
f4ac : c8               [ 2] 	iny
f4ad : 8488             [ 3] 	sty df_exeoff
f4af : 868e             [ 3] 	stx df_procptr
f4b1 : 858f             [ 3] 	sta df_procptr+1
                             	
                             	; is index 0 (held in dim1)
                             	; then need to find the procedure
f4b3 : a003             [ 2] 	ldy #DFVVT_DIM1
f4b5 : b18e             [ 5] 	lda (df_procptr),y
f4b7 : d014             [ 3] 	bne df_rt_proc_addr
                             	; find proc
f4b9 : 2052e4           [ 6] 	jsr df_rt_findproc
                             	; save y (line index)
f4bc : 8438             [ 3] 	sty tmp_d
                             	; now go and update the proc vvt address
f4be : a002             [ 2] 	ldy #DFVVT_HI
f4c0 : 918e             [ 5] 	sta (df_procptr),y
f4c2 : a001             [ 2] 	ldy #DFVVT_LO
f4c4 : 8a               [ 2] 	txa
f4c5 : 918e             [ 5] 	sta (df_procptr),y
f4c7 : a003             [ 2] 	ldy #DFVVT_DIM1
AS65 Assembler for R6502 [1.42].                                     Page  250
-------------------------------- bank\bank0.s --------------------------------

                             	; get back line index in to A
f4c9 : a538             [ 3] 	lda tmp_d
f4cb : 918e             [ 5] 	sta (df_procptr),y
f4cd :                       df_rt_proc_addr
                             	; move past first open bracket
f4cd : e688             [ 5] 	inc df_exeoff
                             	
                             	; get parm count
f4cf : a004             [ 2] 	ldy #DFVVT_DIM2
f4d1 : b18e             [ 5] 	lda (df_procptr),y	
f4d3 : f018             [ 3] 	beq df_rt_proc_parm_none
                             	; push the right number of parms on
f4d5 : 48               [ 3] 	pha
                             
f4d6 : c688             [ 5] 	dec df_exeoff		; Pre-adjust
f4d8 :                       df_rt_proc_push_parm
                             	; move past comma or opening bracket
f4d8 : e688             [ 5] 	inc df_exeoff
                             	; if at end then error!
f4da : a488             [ 3] 	ldy df_exeoff
f4dc : b186             [ 5] 	lda (df_currlin),y
f4de : c929             [ 2] 	cmp #')'
f4e0 : f0bf             [ 3] 	beq df_rt_proc_parmerr
                             	; else try and evaluate
f4e2 : 2073e0           [ 6] 	jsr df_rt_neval
                             	; get parm count off stack
f4e5 : 68               [ 4] 	pla
                             	; decrement
f4e6 : 38               [ 2] 	sec
f4e7 : e901             [ 2] 	sbc #1
                             	; and put back on stack
f4e9 : 48               [ 3] 	pha
                             	; go back and do all required parms
f4ea : d0ec             [ 3] 	bne df_rt_proc_push_parm
                             	; remove parm counter from stack
f4ec :                       df_rt_proc_parm_done
f4ec : 68               [ 4] 	pla
f4ed :                       df_rt_proc_parm_none
                             	; should be at close bracket
f4ed : a488             [ 3] 	ldy df_exeoff
f4ef : b186             [ 5] 	lda (df_currlin),y
f4f1 : c929             [ 2] 	cmp #')'
f4f3 : d0ac             [ 3] 	bne df_rt_proc_parmerr
                             	; should be no more parms
                             	; ok, finally we have all parms on rt stack
                             	; now execute the procedure
                             	; get back the proc address
f4f5 : a68e             [ 3] 	ldx df_procptr
f4f7 : a58f             [ 3] 	lda df_procptr+1
                             ;	bne df_rt_exec_proc		; ALWAYS as procptr+1 !=0
                             	
                             ; executing a procedure in VVT slot A,X
f4f9 :                       df_rt_exec_proc
                             	; save slot address
f4f9 : 86a1             [ 3] 	stx df_tmpptra
f4fb : 85a2             [ 3] 	sta df_tmpptra+1
                             	
                             	; need to save all important vars
f4fd : a586             [ 3] 	lda df_currlin
f4ff : 48               [ 3] 	pha
f500 : a587             [ 3] 	lda df_currlin+1
f502 : 48               [ 3] 	pha
AS65 Assembler for R6502 [1.42].                                     Page  251
-------------------------------- bank\bank0.s --------------------------------

f503 : a588             [ 3] 	lda df_exeoff
f505 : 48               [ 3] 	pha
f506 : a57f             [ 3] 	lda df_nxtstidx
f508 : 48               [ 3] 	pha
f509 : a580             [ 3] 	lda df_curstidx
f50b : 48               [ 3] 	pha
f50c : a57e             [ 3] 	lda df_eolidx
f50e : 48               [ 3] 	pha
f50f : a593             [ 3] 	lda df_ifnest
f511 : 48               [ 3] 	pha
                             
                             	; now initialise the data
f512 : a001             [ 2] 	ldy #DFVVT_LO
f514 : b1a1             [ 5] 	lda (df_tmpptra),y
f516 : 8586             [ 3] 	sta df_currlin
f518 : c8               [ 2] 	iny
f519 : b1a1             [ 5] 	lda (df_tmpptra),y
f51b : 8587             [ 3] 	sta df_currlin+1
f51d : c8               [ 2] 	iny
f51e : b1a1             [ 5] 	lda (df_tmpptra),y
f520 : 8588             [ 3] 	sta df_exeoff
f522 : 8580             [ 3] 	sta df_curstidx
f524 : a000             [ 2] 	ldy #0		; hmm XXXXX might need to be tay to get 
f526 : b186             [ 5] 	lda (df_currlin),y
f528 : 857f             [ 3] 	sta df_nxtstidx
                             	; now execute statements
f52a : 2088e3           [ 6] 	jsr df_rt_exec_stat
                             ;	bcs df_rt_exec_proc_err
                             	; now restore the position
f52d : 68               [ 4] 	pla
f52e : 8593             [ 3] 	sta df_ifnest
f530 : 68               [ 4] 	pla
f531 : 857e             [ 3] 	sta df_eolidx
f533 : 68               [ 4] 	pla
f534 : 8580             [ 3] 	sta df_curstidx
f536 : 68               [ 4] 	pla
f537 : 857f             [ 3] 	sta df_nxtstidx
f539 : 68               [ 4] 	pla
f53a : 8588             [ 3] 	sta df_exeoff
f53c : 68               [ 4] 	pla
f53d : 8587             [ 3] 	sta df_currlin+1
f53f : 68               [ 4] 	pla
f540 : 8586             [ 3] 	sta df_currlin
                             	; should be all restored, so return
f542 : 60               [ 6] 	rts
                             
                             
f543 :                       df_rt_def
                             	; line offset pointing at DFTK_PROC
                             	; skip over PROC address and open bracket
f543 : a688             [ 3] 	ldx df_exeoff
f545 : e8               [ 2] 	inx
f546 : e8               [ 2] 	inx
f547 : e8               [ 2] 	inx
f548 : 8688             [ 3] 	stx df_exeoff
                             	; parms on stack in reverse order to parm list
                             	; so get each parm and type and save to scratch
f54a : a201             [ 2] 	ldx #1									; index in to scratch
f54c : 868c             [ 3] 	stx df_procargs							; Proc args is the #args-1
f54e : a488             [ 3] 	ldy df_exeoff
f550 :                       df_rt_def_find_var
f550 : c8               [ 2] 	iny
AS65 Assembler for R6502 [1.42].                                     Page  252
-------------------------------- bank\bank0.s --------------------------------

f551 : b186             [ 5] 	lda (df_currlin),y
                             	; check if end of parm list
f553 : c929             [ 2] 	cmp #')'
f555 : f021             [ 3] 	beq df_rt_def_parm_done
                             	; else check if found a variable escape token (<
f557 : c911             [ 2] 	cmp #DFTK_VAR
f559 : f007             [ 3] 	beq df_rt_def_got_var
                             	; else check if non-local specifier
f55b : c926             [ 2] 	cmp #DFTK_VARPARM						; This is a regular ASCII
f55d : d0f1             [ 3] 	bne df_rt_def_find_var
f55f :                       df_rt_def_got_varparm
                             	; set high bit
f55f : 0980             [ 2] 	ora #0x80
                             	; advance over non-local specifier
f561 : c8               [ 2] 	iny
f562 :                       df_rt_def_got_var
f562 : 4980             [ 2] 	eor #0x80			; If was set by '&' qualifier then w
f564 : 9d1306           [ 5] 	sta scratch,x		; Save parm type (by value or ref
                             	; get address and save in scratch
f567 : c8               [ 2] 	iny
f568 : b186             [ 5] 	lda (df_currlin),y
f56a : 9d3306           [ 5] 	sta scratch+32,x	; Hope 32 params is enough! :-)
f56d : c8               [ 2] 	iny
f56e : b186             [ 5] 	lda (df_currlin),y
f570 : 9d5306           [ 5] 	sta scratch+64,x
f573 : e8               [ 2] 	inx
f574 : e68c             [ 5] 	inc df_procargs
f576 : d0d8             [ 3] 	bne df_rt_def_find_var  ; always - relies not ze
f578 :                       df_rt_def_parm_done
                             	; save index that we got to
f578 : 8488             [ 3] 	sty df_exeoff
                             	; save def param list position in temp
f57a : 868b             [ 3] 	stx df_procmode
                             	; all var indices on the operator stack
                             	; now load up variables with parameters
                             	; initially assume no locals
f57c : a900             [ 2] 	lda #0
f57e : 858d             [ 3] 	sta df_procloc
f580 :                       df_rt_def_load_var
f580 : c68c             [ 5] 	dec df_procargs
f582 : f038             [ 3] 	beq df_rt_def_load_var_done
                             	; get var address
f584 : c68b             [ 5] 	dec df_procmode
f586 : a68b             [ 3] 	ldx df_procmode
f588 : bd3306           [ 4] 	lda scratch+32,x
f58b : 85a1             [ 3] 	sta df_tmpptra
f58d : bd5306           [ 4] 	lda scratch+64,x
f590 : 85a2             [ 3] 	sta df_tmpptra+1
                             	
f592 : bd1306           [ 4] 	lda scratch,x
                             	; if MSB is clear then this is not a local varia
                             	; so just go an initialise with stacking
f595 : 1009             [ 3] 	bpl df_rt_def_initialise_parm
                             	; else call the local handling code to 
                             	; push the var address on to the runtime stack
f597 : a6a1             [ 3] 	ldx df_tmpptra
f599 : a5a2             [ 3] 	lda df_tmpptra+1
f59b : 20f0f5           [ 6] 	jsr df_rt_proc_local
                             	; increment number of locals
f59e : e68d             [ 5] 	inc df_procloc
f5a0 :                       df_rt_def_initialise_parm
                             	; load type
AS65 Assembler for R6502 [1.42].                                     Page  253
-------------------------------- bank\bank0.s --------------------------------

f5a0 : a000             [ 2] 	ldy #DFVVT_TYPE
f5a2 : b1a1             [ 5] 	lda (df_tmpptra),y
                             	; if array or string type then pop pointer from 
f5a4 : 2984             [ 2] 	and #DFVVT_STR|DFVVT_ARRY
f5a6 : f006             [ 3] 	beq df_rt_def_load_var_int
f5a8 : 2085f6           [ 6] 	jsr df_ost_popPtr
f5ab : 4cb1f5           [ 3] 	jmp df_rt_def_load_var_int_skip
f5ae :                       df_rt_def_load_var_int
                             	; must be int pop it from operator stack
f5ae : 207df6           [ 6] 	jsr df_ost_popInt
f5b1 :                       df_rt_def_load_var_int_skip
                             	; update the variable
f5b1 : a002             [ 2] 	ldy #DFVVT_HI
f5b3 : 91a1             [ 5] 	sta (df_tmpptra),y
f5b5 : 88               [ 2] 	dey
f5b6 : 8a               [ 2] 	txa
f5b7 : 91a1             [ 5] 	sta (df_tmpptra),y
                             	
f5b9 : 4c80f5           [ 3] 	jmp df_rt_def_load_var
f5bc :                       df_rt_def_load_var_done
                             	; save the number of local parameters found so t
                             	; be unloaded when the proc ends
f5bc : a58d             [ 3] 	lda df_procloc
f5be : 2004f6           [ 6] 	jsr df_rst_pushByte
                             	; continue with next statement
f5c1 : 18               [ 2] 	clc
f5c2 : 60               [ 6] 	rts
                             
                             	
                             ; return a value
f5c3 :                       df_rt_return
                             	; evaluate the return and put on the parameter s
                             	; then process this like an end of procedure
f5c3 : 2073e0           [ 6] 	jsr df_rt_neval
                             ; end def for a proc
f5c6 :                       df_rt_enddef
                             	; unload any locals
                             ;	jsr df_rt_proc_unlocal
                             	; nothing to do - main loop will terminate
                             ;	clc
                             ;	rts
                             ; enddef falls through to the unlocal code	
                             	
                             ; unload any local variables from runtime stack
                             ;df_rt_proc_unlocal
f5c6 : 200df6           [ 6] 	jsr df_rst_popByte
f5c9 : aa               [ 2] 	tax
f5ca : f020             [ 3] 	beq df_rt_proc_unload_done
f5cc :                       df_rt_proc_unloadvar
f5cc : 8a               [ 2] 	txa
f5cd : 48               [ 3] 	pha
                             	; var value is popped first then index
                             	; get a word and put in tmpb
f5ce : 202af6           [ 6] 	jsr df_rst_popWord
f5d1 : 86a3             [ 3] 	stx df_tmpptrb
f5d3 : 85a4             [ 3] 	sta df_tmpptrb+1
                             	; get the var address
f5d5 : 202af6           [ 6] 	jsr df_rst_popWord
f5d8 : 86a1             [ 3] 	stx df_tmpptra
f5da : 85a2             [ 3] 	sta df_tmpptra+1
                             	; store lo byte first
f5dc : a001             [ 2] 	ldy #DFVVT_LO
AS65 Assembler for R6502 [1.42].                                     Page  254
-------------------------------- bank\bank0.s --------------------------------

f5de : a5a3             [ 3] 	lda df_tmpptrb
f5e0 : 91a1             [ 5] 	sta (df_tmpptra),y
                             	; then hi
f5e2 : c8               [ 2] 	iny
f5e3 : a5a4             [ 3] 	lda df_tmpptrb+1
f5e5 : 91a1             [ 5] 	sta (df_tmpptra),y
                             	; restore counter
f5e7 : 68               [ 4] 	pla
f5e8 : aa               [ 2] 	tax
f5e9 : ca               [ 2] 	dex
f5ea : d0e0             [ 3] 	bne df_rt_proc_unloadvar
f5ec :                       df_rt_proc_unload_done
f5ec : 68               [ 4] 	pla				; Pull old return address from stack
f5ed : 68               [ 4] 	pla
f5ee : 18               [ 2] 	clc
f5ef : 60               [ 6] 	rts
                             	
                             ; push a local variable to the runtime stack
                             ; X,A = var slot
f5f0 :                       df_rt_proc_local
                             	; save address
f5f0 : 86a1             [ 3] 	stx df_tmpptra
f5f2 : 85a2             [ 3] 	sta df_tmpptra+1
                             	; push var slot on rt stack
f5f4 : 201cf6           [ 6] 	jsr df_rst_pushWord
f5f7 :                       df_rt_proc_local_load	
                             	; load x,a with var value lo,hi
f5f7 : a001             [ 2] 	ldy #DFVVT_LO
f5f9 : b1a1             [ 5] 	lda (df_tmpptra),y
f5fb : aa               [ 2] 	tax
f5fc : c8               [ 2] 	iny
f5fd : b1a1             [ 5] 	lda (df_tmpptra),y
                             	; push word on to rt stack
f5ff : 201cf6           [ 6] 	jsr df_rst_pushWord
f602 : 18               [ 2] 	clc
f603 : 60               [ 6] 	rts
                             		
f604 :                       mod_sz_proc_e
                             
                             
f604 :                       mod_sz_runtime_e
                             
                             
                             
                             	include "dflat/stack.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  STACK.S
                             ;*  This module implements the dflat software sta
                             ;*  needs a few stacks:
                             ;*  - 6502 stack for expression parsing and reent
                             ;*  - dflat runtime stack for things like for/nex
                             ;*  - dflat parameter stack for passing parameter
                             ;*  The two software stacks are implemented in th
                             ;*  with the operator stack growing up from 0 and
                             ;*  runtime stack growing down from 255.  Hopeful
AS65 Assembler for R6502 [1.42].                                     Page  255
-------------------------------- bank\bank0.s --------------------------------

                             ;*  don't meet as there are no checks for this at
                             ;*  purely because I want speed over friendliness
                             ;*  I may come to regret this!
                             ;*  I have also added the only runtime memory all
                             ;*  needed by dflat here.  Humourously I have cal
                             ;*  which is taken from the C language, but it's 
                             ;*  grab some memory after end the of dflat progr
                             ;*  arrays - which of course cannot have storage 
                             ;*  tokenisation time (e.g. because I dimension a
                             ;*  a size from a variable).
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code  
                             
                             
                             ;****************************************
                             ;* Push a byte on to runtime stack
                             ;* A = byte
                             ;****************************************
f604 :                       df_rst_pushByte
f604 : a476             [ 3] 	ldy df_rtstop
f606 : 990005           [ 5] 	sta df_rtstck,y
f609 : 88               [ 2] 	dey
f60a : 8476             [ 3] 	sty df_rtstop
f60c : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Pop a byte off runtime stack
                             ;* A = byte
                             ;****************************************
f60d :                       df_rst_popByte
f60d : a476             [ 3] 	ldy df_rtstop
f60f : c8               [ 2] 	iny
f610 : b90005           [ 4] 	lda df_rtstck,y
f613 : 8476             [ 3] 	sty df_rtstop
f615 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Peek a byte off runtime stack
                             ;* A = byte
                             ;****************************************
f616 :                       df_rst_peekByte
f616 : a476             [ 3] 	ldy df_rtstop
                             	; Look at what is below top of stack
                             	; below means the next address up as
                             	; this stack grows downwards like 6502
f618 : b90105           [ 4] 	lda df_rtstck+1,y
f61b : 60               [ 6] 	rts
                             	
                             ;****************************************
                             ;* Push a word on to runtime stack
                             ;* X,A = word lo,hi
                             ;****************************************
f61c :                       df_rst_pushWord
f61c : a476             [ 3] 	ldy df_rtstop
f61e : 990005           [ 5] 	sta df_rtstck,y
f621 : 88               [ 2] 	dey
f622 : 8a               [ 2] 	txa
f623 : 990005           [ 5] 	sta df_rtstck,y
f626 : 88               [ 2] 	dey
AS65 Assembler for R6502 [1.42].                                     Page  256
-------------------------------- bank\bank0.s --------------------------------

f627 : 8476             [ 3] 	sty df_rtstop
f629 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Pop a word off runtime stack
                             ;* X,A = word lo,hi
                             ;****************************************
f62a :                       df_rst_popWord
f62a : a476             [ 3] 	ldy df_rtstop
f62c : c8               [ 2] 	iny
f62d : be0005           [ 4] 	ldx df_rtstck,y
f630 : c8               [ 2] 	iny
f631 : b90005           [ 4] 	lda df_rtstck,y
f634 : 8476             [ 3] 	sty df_rtstop
f636 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Push a parameter on to parm stack
                             ;* X,A - int
                             ;* Y - type
                             ;****************************************
f637 :                       df_ost_pushParmX
f637 : 8438             [ 3] 	sty tmp_d		; Save Type
f639 : a477             [ 3] 	ldy df_parmtop	; Get stack index
                             	; push high byte first (A)
f63b : 990005           [ 5] 	sta df_rtstck,y
f63e : c8               [ 2] 	iny
                             	; push low byte next (X)
f63f : 8a               [ 2] 	txa
f640 : 990005           [ 5] 	sta df_rtstck,y
f643 : c8               [ 2] 	iny
f644 : a538             [ 3] 	lda tmp_d		; get Type
f646 : 990005           [ 5] 	sta df_rtstck,y
f649 : c8               [ 2] 	iny
                             	; save new top of stack
f64a : 8477             [ 3] 	sty df_parmtop
f64c : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Push an int on to parm stack
                             ;* X,A - int
                             ;****************************************
f64d :                       df_ost_pushInt
f64d : a001             [ 2] 	ldy #DFST_INT
f64f : d0e6             [ 3] 	bne df_ost_pushParmX		; ALWAYS!
                             
                             ;****************************************
                             ;* Push A on to parm stack
                             ;* X,A - int
                             ;****************************************
f651 :                       df_ost_pushIntA
f651 : a001             [ 2] 	ldy #DFST_INT
f653 : aa               [ 2] 	tax
f654 : a900             [ 2] 	lda #0
f656 : f0df             [ 3] 	beq df_ost_pushParmX		; ALWAYS!
                             
                             ;****************************************
                             ;* Push a string pointer on to parm stack
                             ;* X,A - int
                             ;****************************************
f658 :                       df_ost_pushStr
f658 : a080             [ 2] 	ldy #DFST_STR
AS65 Assembler for R6502 [1.42].                                     Page  257
-------------------------------- bank\bank0.s --------------------------------

f65a : d0db             [ 3] 	bne df_ost_pushParmX		; ALWAYS!
                             
                             ;****************************************
                             ;* Push a general pointer on to parm stack
                             ;* X,A - int
                             ;****************************************
f65c :                       df_ost_pushPtr
f65c : a0ff             [ 2] 	ldy #0xff
f65e : d0d7             [ 3] 	bne df_ost_pushParmX		; ALWAYS!
                             	
                             ;****************************************
                             ;* Pop parameter from the stack
                             ;* X,A - int
                             ;* Y - type expected
                             ;****************************************
f660 :                       df_ost_popParmX
f660 : 98               [ 2] 	tya
f661 : a477             [ 3] 	ldy df_parmtop
                             	; pull type first
f663 : 88               [ 2] 	dey
f664 : 390005           [ 4] 	and df_rtstck,y
f667 : f00c             [ 3] 	beq df_st_typemismatcherr
                             	; pull low byte first
f669 : 88               [ 2] 	dey
f66a : be0005           [ 4] 	ldx df_rtstck,y
                             	; pull high byte next
f66d : 88               [ 2] 	dey
f66e : b90005           [ 4] 	lda df_rtstck,y
                             	; save new top of stack
f671 : 8477             [ 3] 	sty df_parmtop
f673 : 18               [ 2] 	clc
f674 : 60               [ 6] 	rts
f675 :                       df_st_typemismatcherr
                             	SWBRK DFERR_TYPEMISM
                             
                             
                             ;****************************************
                             ;* Return type on top of stack
                             ;* A - type
                             ;****************************************
f677 :                       df_ost_peekType
f677 : a477             [ 3] 	ldy df_parmtop
f679 : b9ff04           [ 4] 	lda df_rtstck-1,y
f67c : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Pop an int off parm stack
                             ;* X,A - int
                             ;****************************************
f67d :                       df_ost_popInt
f67d : a001             [ 2] 	ldy #DFST_INT
f67f : d0df             [ 3] 	bne df_ost_popParmX			; ALWAYS!
                             
                             ;****************************************
                             ;* Pop a string pointer off parm stack
                             ;* X,A - int
                             ;****************************************
f681 :                       df_ost_popStr
f681 : a080             [ 2] 	ldy #DFST_STR
f683 : d0db             [ 3] 	bne df_ost_popParmX			; ALWAYS!
                             	
                             ;****************************************
AS65 Assembler for R6502 [1.42].                                     Page  258
-------------------------------- bank\bank0.s --------------------------------

                             ;* Pop a general pointer off parm stack
                             ;* X,A - int
                             ;****************************************
f685 :                       df_ost_popPtr
f685 : a0ff             [ 2] 	ldy #0xff
f687 : d0d7             [ 3] 	bne df_ost_popParmX			; ALWAYS!
                             	
                             	
                             ;****************************************
                             ;* Allocate space on the heap
                             ;* X, A = Number of bytes to allocate
                             ;* X, A return address of allocated space
                             ;****************************************
f689 :                       df_st_malloc
                             	; save A in Y
f689 : a8               [ 2] 	tay
                             	; save old starend
f68a : a575             [ 3] 	lda df_starend+1
f68c : 48               [ 3] 	pha
f68d : a574             [ 3] 	lda df_starend
f68f : 48               [ 3] 	pha
                             	; restore A from Y
f690 : 98               [ 2] 	tya
                             	; add X,A to starend
f691 : 48               [ 3] 	pha
f692 : 8a               [ 2] 	txa
f693 : 18               [ 2] 	clc
f694 : 6574             [ 3] 	adc df_starend
f696 : 8574             [ 3] 	sta df_starend
f698 : 68               [ 4] 	pla
f699 : 6575             [ 3] 	adc df_starend+1
f69b : 8575             [ 3] 	sta df_starend+1
                             	; return old starend as start of space
f69d : 68               [ 4] 	pla
f69e : aa               [ 2] 	tax
f69f : 68               [ 4] 	pla
f6a0 : 60               [ 6] 	rts
                             	
                             
                             ;****************************************
                             ;* df_init
                             ;* Initialise dflat language settings
                             ;****************************************
f6a1 :                       df_init
                             	; Initialise top of memory to default
                             	; This can be overridden by himem command
f6a1 : a900             [ 2] 	lda #lo(DF_MEMTOP)
f6a3 : 8d1106           [ 4] 	sta df_memtop
f6a6 : a998             [ 2] 	lda #hi(DF_MEMTOP)
f6a8 : 8d1206           [ 4] 	sta df_memtop+1
                             
                             	; Init program space
f6ab : 4caef6           [ 3] 	jmp df_clear
                             
                             	; Initialise assembler
                             ;	jsr asm_init
                             
                             ;	rts
                             
                             
                             ;****************************************
                             ;* df_clear
AS65 Assembler for R6502 [1.42].                                     Page  259
-------------------------------- bank\bank0.s --------------------------------

                             ;* Initialise program space
                             ;****************************************
f6ae :                       df_clear
                             	; Start of program space
f6ae : a913             [ 2] 	lda #lo(DF_PROGSTART)
f6b0 : 8565             [ 3] 	sta df_prgstrt
f6b2 : 8567             [ 3] 	sta df_prgend
f6b4 : a907             [ 2] 	lda #hi(DF_PROGSTART)
f6b6 : 8566             [ 3] 	sta df_prgstrt+1
f6b8 : 8568             [ 3] 	sta df_prgend+1
                             	; Terminal value in prog space
f6ba : a900             [ 2] 	lda #0
f6bc : a8               [ 2] 	tay
f6bd : 9165             [ 5] 	sta (df_prgstrt),y
                             	; No variables - zero the count
f6bf : 8571             [ 3] 	sta df_varcnt
                             
                             	; Variable value table
                             	; Grows down from mem top
f6c1 : ad1106           [ 4] 	lda df_memtop
f6c4 : 856d             [ 3] 	sta df_vvtstrt
f6c6 : 856f             [ 3] 	sta df_vvtend
f6c8 : ad1206           [ 4] 	lda df_memtop+1
f6cb : 856e             [ 3] 	sta df_vvtstrt+1
f6cd : 8570             [ 3] 	sta df_vvtend+1
                             
                             	; Variable name table
                             	; Grows down from mem top
f6cf : a56d             [ 3] 	lda df_vvtstrt
f6d1 : 8569             [ 3] 	sta df_vntstrt
f6d3 : 856b             [ 3] 	sta df_vntend
f6d5 : a56e             [ 3] 	lda df_vvtstrt+1
f6d7 : 856a             [ 3] 	sta df_vntstrt+1
f6d9 : 856c             [ 3] 	sta df_vntend+1
                             
                             	; String accumulator
f6db : a913             [ 2] 	lda #lo(scratch)
f6dd : 857a             [ 3] 	sta df_sevalptr
f6df : a906             [ 2] 	lda #hi(scratch)
f6e1 : 857b             [ 3] 	sta df_sevalptr+1
                             
f6e3 : 60               [ 6] 	rts
                             
f6e4 :                       mod_sz_dflat_e
                             
                             	include "dflat/error.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  ERROR.S
                             ;*  Error handling module.
                             ;*  Whan an error is thrown using BRK, this modul
                             ;*  displaying the error plus any associated line
                             ;*  if it was running a program.  It then resets 
                             ;*  settings and takes the system back to program
                             ;*  mode.  The message uses the general IO handle
                             ;*  output must be set to the right place else fo
AS65 Assembler for R6502 [1.42].                                     Page  260
-------------------------------- bank\bank0.s --------------------------------

                             ;*	the error message will be written to tape!
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code
                             	include "dflat/error.i"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  ERROR.I
                             ;*  Error definitions file.
                             ;*  The macro to throw an error is elswhere, but 
                             ;*  It issues a 6502 BRK commmand with the next b
                             ;*  the error code.  The BRK handler then picks u
                             ;*  code and shows the appropriate message plus a
                             ;*  number if a program was running.
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code  
                             
                             ; Error message numbers
0000 =                       DFERR_OK		=	0
0001 =                       DFERR_SYNTAX	=	1
0002 =                       DFERR_TYPEMISM	=	2
0003 =                       DFERR_DIM		=	3
0004 =                       DFERR_UNTIL		=	4
0005 =                       DFERR_NOPROC	=	5
0006 =                       DFERR_PROCPARM	=	6
0007 =                       DFERR_IMMEDIATE	=	7
0008 =                       DFERR_UNCLOSEDIF=	8
0009 =                       DFERR_NOIF		=	9
000a =                       DFERR_NEXTFOR	=	10
000b =                       DFERR_FNAME		=	11
000c =                       DFERR_STRLONG	=	12
000d =                       DFERR_BREAK		=	13
000e =                       DFERR_NODATA	=	14
000f =                       DFERR_WEND		=	15
0010 =                       DFERR_NOLINE	=	16
0011 =                       DFERR_RETURN	=	17
0012 =                       DFERR_ABORT		=	18
0013 =                       DFERR_QUANTITY	=	19
0014 =                       DFERR_NOORG		=	20
                             
                             
                             
                             
                             
                             ; Error message table, each msg null terminated
f6e4 :                       df_tk_errortab
f6e4 : 4f6b00                	db	"Ok", 0
f6e7 : 53796e74617800        	db	"Syntax", 0
f6ee : 5479706500            	db	"Type", 0
f6f3 : 52652d64696d00        	db	"Re-dim", 0
f6fa : 4e6f2072657065..      	db	"No repeat", 0
AS65 Assembler for R6502 [1.42].                                     Page  261
-------------------------------- bank\bank0.s --------------------------------

f704 : 4e6f206465666e00      	db	"No defn", 0
f70c : 5061726d00            	db	"Parm", 0
f711 : 456e64656400          	db	"Ended", 0
f717 : 4e6f20656e6469..      	db	"No endif", 0
f720 : 4e6f20696600          	db	"No if", 0
f726 : 4e6f20666f7200        	db	"No for", 0
f72d : 4e6f7420666f75..      	db	"Not found", 0
f737 : 546f6f206c6f6e..      	db	"Too long", 0
f740 : 427265616b00          	db	"Break", 0
f746 : 4e6f206461746100      	db	"No data", 0
f74e : 4e6f207768696c..      	db	"No while", 0
f757 : 4e6f206c696e6500      	db	"No line", 0
f75f : 4e6f2072657475..      	db	"No return ", 0
f76a : 41626f7274656400      	db	"Aborted", 0
f772 : 426f756e647300        	db	"Bounds", 0
f779 : 4e6f206f726700        	db	"No org", 0
f780 : 00                    	db	0
                             
f781 :                       df_tk_error_inline
f781 : 20696e206c696e..      	db	" in line ", 0
f78b :                       df_tk_error_atpos
f78b : 20706f732000          	db	" pos ", 0
f791 :                       df_tk_error_error
f791 : 206572726f7200        	db	" error", 0
                             
                             ;****************************************
                             ;* df_trap_error
                             ;* Show an error message
                             ;* errno is error number
                             ;* currlin = Line number
                             ;* exeoff = offset
                             ;* at the end jump to program editor
                             ;****************************************
f798 :                       df_trap_error
                             	; set IO back to normal
f798 : 2025c5           [ 6] 	jsr init_via0
f79b : 2028c4           [ 6] 	jsr io_set_default
f79e : 58               [ 2] 	cli
                             
f79f : a9e4             [ 2] 	lda #lo(df_tk_errortab)
f7a1 : 85a1             [ 3] 	sta df_tmpptra
f7a3 : a9f6             [ 2] 	lda #hi(df_tk_errortab)
f7a5 : 85a2             [ 3] 	sta df_tmpptra+1
f7a7 : a65d             [ 3] 	ldx errno				; 0 or >=128 goes to monitor
f7a9 : f002             [ 3] 	beq df_trap_go_monitor
f7ab : 1003             [ 3] 	bpl df_trap_normal
f7ad :                       df_trap_go_monitor
f7ad : 4c26f8           [ 3] 	jmp df_trap_monitor
f7b0 :                       df_trap_normal
f7b0 : a000             [ 2] 	ldy #0
f7b2 :                       df_show_err_find
                             	; If on a zero, then error table exhausted
                             	; so drop in to the monitor
f7b2 : b1a1             [ 5] 	lda (df_tmpptra),y
f7b4 : f070             [ 4] 	beq df_trap_monitor
                             	; Skip over this error text including zero termi
f7b6 :                       df_show_err_skip
                             	_incZPWord df_tmpptra
                             
f7bc : b1a1             [ 5] 	lda (df_tmpptra),y
f7be : d0f6             [ 3] 	bne df_show_err_skip
                             	_incZPWord df_tmpptra
AS65 Assembler for R6502 [1.42].                                     Page  262
-------------------------------- bank\bank0.s --------------------------------

                             
f7c6 : ca               [ 2] 	dex
f7c7 : d0e9             [ 3] 	bne df_show_err_find
                             	; Error message found
f7c9 : a6a1             [ 3] 	ldx df_tmpptra
f7cb : a5a2             [ 3] 	lda df_tmpptra+1
f7cd : 20a2c4           [ 6] 	jsr io_print_line
f7d0 : a291             [ 2] 	ldx #lo(df_tk_error_error)
f7d2 : a9f7             [ 2] 	lda #hi(df_tk_error_error)
f7d4 : 20a2c4           [ 6] 	jsr io_print_line
                             	; if line number <> 0 then print it
f7d7 : a001             [ 2] 	ldy #DFTK_LINNUM
f7d9 : b186             [ 5] 	lda (df_currlin),y
f7db : aa               [ 2] 	tax
f7dc : c8               [ 2] 	iny
f7dd : b186             [ 5] 	lda (df_currlin),y
f7df : d004             [ 3] 	bne df_show_err_linnum
f7e1 : e000             [ 2] 	cpx #0x00
f7e3 : f019             [ 3] 	beq df_show_err_fin
f7e5 :                       df_show_err_linnum
                             	_println df_tk_error_inline
                             
f7fa : 18               [ 2] 	clc
f7fb : 20fdc3           [ 6] 	jsr print_a_to_d
f7fe :                       df_show_err_fin
f7fe : a488             [ 3] 	ldy df_exeoff
f800 : f01d             [ 3] 	beq df_show_err_done
                             	_println df_tk_error_atpos
                             
f817 : 98               [ 2] 	tya
f818 : aa               [ 2] 	tax
f819 : a900             [ 2] 	lda #0
f81b : 18               [ 2] 	clc
f81c : 20fdc3           [ 6] 	jsr print_a_to_d
f81f :                       df_show_err_done
f81f : 207bc1           [ 6] 	jsr utilPrintCRLF
f822 : 18               [ 2] 	clc
                             	; back to editor
f823 : 4c56df           [ 3] 	jmp df_pg_dflat
                             
                             
                             ; For unknown errors, jump to monitor
f826 :                       df_trap_monitor
                             	; Print PC
                             	_println_low df_msg_pc
                             
f82d : a563             [ 3] 	lda df_brkpc+1
f82f : 2083c1           [ 6] 	jsr utilPrintA
f832 : a562             [ 3] 	lda df_brkpc
f834 : 2083c1           [ 6] 	jsr utilPrintA
f837 : 2073c1           [ 6] 	jsr utilPrintSPC
                             
                             	; Print A
                             	_println_low df_msg_acc
                             
f841 : a53d             [ 3] 	lda num_a
f843 : 2083c1           [ 6] 	jsr utilPrintA
f846 : 2073c1           [ 6] 	jsr utilPrintSPC
                             
                             	; Print X
                             	_println_low df_msg_xreg
                             
AS65 Assembler for R6502 [1.42].                                     Page  263
-------------------------------- bank\bank0.s --------------------------------

f850 : a53e             [ 3] 	lda num_a+1
f852 : 2083c1           [ 6] 	jsr utilPrintA
f855 : 2073c1           [ 6] 	jsr utilPrintSPC
                             
                             	; Print Y
                             	_println_low df_msg_yreg
                             
f85f : a53f             [ 3] 	lda num_a+2
f861 : 2083c1           [ 6] 	jsr utilPrintA
f864 : 207bc1           [ 6] 	jsr utilPrintCRLF
                             
f867 : 209ce7           [ 6] 	jsr df_rt_monitor
                             	; back to editor
f86a : 4c56df           [ 3] 	jmp df_pg_dflat
                             
f86d :                       df_msg_pc
f86d : 50433a00              	db "PC:\x0"
f871 :                       df_msg_acc
f871 : 413a00                	db "A:\x0"
f874 :                       df_msg_xreg
f874 : 583a00                	db "X:\x0"
f877 :                       df_msg_yreg
f877 : 593a00                	db "Y:\x0"
                             
                             	include	"dflat/asm.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  ASM.S
                             ;*  This is the main controller code file for the
                             ;*  This file includes all the required source fi
                             ;*	in addition to dflat.s
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code
                             
f87a :                       mod_sz_asm_s
                             
                             	;	dflat.s is already included, so just the addit
                             	include "dflat/asm.i"
                             ;* Addressing modes - 15 in total, 16 with direct
                             ;*  0   Nothing
                             ;*	1 	Absolute			XXX <word>
                             ;*	2 	Absolute,X			XXX <word>,x
                             ;*	3 	Absolute,Y			XXX <word>,y
                             ;*	4	Zeropage			XXX	<byte>
                             ;*	5	Zeropage,X			XXX	<byte>,x
                             ;*	6	Zeropage,Y			XXX	<byte>,y
                             ;*	7	Indirect			XXX	(<byte>)
                             ;*	8	Indirect,X			XXX	(<byte>,x)
                             ;*	9	Indirect,Y			XXX	(<byte>),y
                             ;*	A	Absolute indirect	XXX	(<word>)
                             ;*	B	Absolute indirect,x	XXX	(<word>,x)
                             ;*	C	Immediate			XXX #<byte>
                             ;*	D	Accumulator			XXX (same as implied)
AS65 Assembler for R6502 [1.42].                                     Page  264
-------------------------------- bank\bank0.s --------------------------------

                             ;*	E	Implied				XXX
                             ;*	F	Relative			XXX	<byte>
                             ;*	10	Assembler directive	XXX .......
                             
0000 =                       AM_NONE		= 0
0001 =                       AM_ABS	 	= 1
0002 =                       AM_ABSX		= 2
0003 =                       AM_ABSY		= 3
0004 =                       AM_ZP		= 4
0005 =                       AM_ZPX		= 5
0006 =                       AM_ZPY		= 6
0007 =                       AM_ZPIND	= 7
0008 =                       AM_ZPINDX	= 8
0009 =                       AM_ZPINDY	= 9
000a =                       AM_ABSIND	= 10
000b =                       AM_ABSINDX	= 11
000c =                       AM_IMM		= 12
000d =                       AM_ACC		= 13
000d =                       AM_IMP		= AM_ACC
000f =                       AM_REL		= 15
0010 =                       AM_DIR		= 16
                             
                             
                             
                             	include "dflat/tkasm.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  ASM.S
                             ;*	Module that implements tokenisation of the ass
                             ;* 	The assembler is an extension to dflat, almos
                             ;*	almost a language within a language, as it has
                             ;*	own symbol tables to allow adding new keywords
                             ;*	running out of space in the main symtol table 
                             ;*	for normal 6502 asembler syntax which is at od
                             ;*	regular dflat.
                             ;*	Hence, this module has to do its own additiona
                             ;*	to tokenise the assembly.
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code  
                             
f87a :                       mod_sz_tkasm_s
                             
                             	; if didn't find regular keywords then try assen
f87a :                       df_tk_asm_parse_command
                             	; skip the white space after the dot
f87a : 2004d7           [ 6] 	jsr df_tk_skip_ws
                             	; find the assembler symbol
f87d : 20a8f8           [ 6] 	jsr df_tk_asm_matchtok
                             	; if not found then must be a label assignment
f880 : b021             [ 3] 	bcs df_tk_asm_parse_command_symbol
                             	; Get the assembler symbol and put the token
f882 : a583             [ 3] 	lda df_symoff
                             	; Set the MSB
AS65 Assembler for R6502 [1.42].                                     Page  265
-------------------------------- bank\bank0.s --------------------------------

f884 : 0980             [ 2] 	ora #0x80
f886 : 20b3d6           [ 6] 	jsr df_tk_put_tok
                             	; check the first addressing mode code
                             	; remember to jump over the offset byte
f889 : a001             [ 2] 	ldy #1
f88b : b181             [ 5] 	lda (df_symtab),y
                             	; Directive?
f88d : c910             [ 2] 	cmp #AM_DIR
f88f : d00c             [ 3] 	bne df_tk_asm_mnemonic
                             	; if directive then process it
f891 : a583             [ 3] 	lda df_symoff
f893 : 20fff8           [ 6] 	jsr df_tk_asm_exec_parser
f896 : b004             [ 3] 	bcs df_tk_asm_parse_command_err
                             	; [1] ignore white space but keep it
f898 : 2004d7           [ 6] 	jsr df_tk_skip_ws
                             	; No error in parsing this command
f89b : 18               [ 2] 	clc
f89c :                       df_tk_asm_parse_command_err
f89c : 60               [ 6] 	rts
f89d :                       df_tk_asm_mnemonic
                             	; for all nmemonics, work out the addressing mod
f89d : 200ef9           [ 6] 	jsr df_tk_asm_addr_mode
f8a0 : b0fa             [ 3] 	bcs df_tk_asm_parse_command_err
f8a2 : 60               [ 6] 	rts
f8a3 :                       df_tk_asm_parse_command_symbol
                             	; No mask
f8a3 : a900             [ 2] 	lda #0
f8a5 : 4cded7           [ 3] 	jmp df_tk_var
                             
                             
                             ;****************************************
                             ;* df_tk_asm_matchtok
                             ;* Try and find a token match against the table d
                             ;* Input:
                             ;*			Current df_linbuff and df_linoff
                             ;* Return: 	CC = No Error, CS = Error
                             ;*			df_linoff points to next char if CC else unc
                             ;****************************************
f8a8 :                       df_tk_asm_matchtok
                             	; Start at token symbols beginning
f8a8 : a991             [ 2] 	lda #lo(df_asm_tokensyms)
f8aa : 8581             [ 3] 	sta df_symtab
f8ac : a9fc             [ 2] 	lda #hi(df_asm_tokensyms)
f8ae : 8582             [ 3] 	sta df_symtab+1
f8b0 : a900             [ 2] 	lda #0
f8b2 : 8583             [ 3] 	sta df_symoff
f8b4 : a200             [ 2] 	ldx #0
f8b6 :                       df_tk_asm_checknexttok
                             	; From the line buffer current pointer
                             	; Check for a token match
f8b6 : a47c             [ 3] 	ldy df_linoff
f8b8 :                       df_tk_asm_checktokch
                             	; Get symtable char
f8b8 : a181             [ 6] 	lda (df_symtab,x)
                             	; if less than ascii ' ' then reached end of
                             	; this symbol and everything matched so found!
f8ba : c920             [ 2] 	cmp #' '
f8bc : 9033             [ 3] 	bcc df_tk_asm_symfound
                             	; Else compare with current line buffer char
f8be : d90004           [ 4] 	cmp df_linbuff,y
                             	; If chars not match then this symbol fails
f8c1 : d00a             [ 3] 	bne df_tk_asm_symnomatch
AS65 Assembler for R6502 [1.42].                                     Page  266
-------------------------------- bank\bank0.s --------------------------------

                             	; else more chars to match
                             	; so increment line buffer pointers
                             	_incZPWord df_symtab
                             
f8c9 : c8               [ 2] 	iny
f8ca : 4cb8f8           [ 3] 	jmp df_tk_asm_checktokch
f8cd :                       df_tk_asm_symnomatch
                             	; Increment symbol counter to next symbol
f8cd : e683             [ 5] 	inc df_symoff
f8cf :                       df_tk_asm_symnextentry
f8cf : a181             [ 6] 	lda (df_symtab,x)
                             	; End of symbol is < ' '
f8d1 : c920             [ 2] 	cmp #' '
f8d3 : 9009             [ 3] 	bcc  df_tk_asm_foundsymend
                             	_incZPWord df_symtab
                             
f8db : 4ccff8           [ 3] 	jmp df_tk_asm_symnextentry
f8de :                       df_tk_asm_foundsymend
                             	; Now at the offset to jump over addressing
                             	; mode and opcode values. Add offset to ptr
                             	; remember than C is clear and A has offset
                             	; set C so always jump over the offset
f8de : 38               [ 2] 	sec
f8df : 6581             [ 3] 	adc df_symtab
f8e1 : 8581             [ 3] 	sta df_symtab
f8e3 : a582             [ 3] 	lda df_symtab+1
f8e5 : 6900             [ 2] 	adc #0
f8e7 : 8582             [ 3] 	sta df_symtab+1
                             	; If next char is not zero then
                             	; try and match with line buffer
f8e9 : a181             [ 6] 	lda (df_symtab,x)
f8eb : d0c9             [ 3] 	bne df_tk_asm_checknexttok
                             	; else symbol table exhausted
                             	; so no match found
                             	; Zero symbol counter
f8ed : 8583             [ 3] 	sta df_symoff		; Relies on A=0
                             	; Set C to indicate error (no match)
f8ef : 38               [ 2] 	sec
f8f0 : 60               [ 6] 	rts
f8f1 :                       df_tk_asm_symfound
                             	; Full match with keyword in symtable but
                             	; check the next buffer char is not alphanum
                             	; as this could be part of a symbol
                             	; Point to next buffer char in any case
                             	; y already points to char after keyword
f8f1 : b90004           [ 4] 	lda df_linbuff,y
                             	; if it is an alphanum then
f8f4 : 20f8d6           [ 6] 	jsr df_tk_isalphanum
                             	; do not count as a match
f8f7 : b0d4             [ 3] 	bcs df_tk_asm_symnomatch
                             	; Save line buffer pointer (points to next char)
                             	; Clear C to indicate success (match)
f8f9 : 847c             [ 3] 	sty df_linoff
f8fb : a583             [ 3] 	lda df_symoff
                             	; df_symtab points to the offset
f8fd :                       df_tk_asm_addr_mode_ok
f8fd : 18               [ 2] 	clc
f8fe : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* df_tk_asm_exec_parser
                             ;* Execute parse routine for this statement
AS65 Assembler for R6502 [1.42].                                     Page  267
-------------------------------- bank\bank0.s --------------------------------

                             ;* Input: a is the token found
                             ;* Return: CC = Parsed ok, CS = Error
                             ;****************************************
f8ff :                       df_tk_asm_exec_parser
f8ff : 0a               [ 2] 	asl a
f900 : aa               [ 2] 	tax
f901 : bdbdfe           [ 4] 	lda df_tk_asm_tokenjmp,x
f904 : 85a1             [ 3] 	sta df_tmpptra
f906 : bdbefe           [ 4] 	lda df_tk_asm_tokenjmp+1,x
f909 : 85a2             [ 3] 	sta df_tmpptra+1
f90b : 6ca100           [ 6] 	jmp (df_tmpptra)
                             
                             
                             ;****************************************
                             ;* df_tk_asm_addr_mode
                             ;* Tokenise the addressing mode
                             ;* Input: a is the token found
                             ;* Return: CC = Parsed ok, CS = Error
                             ;****************************************
f90e :                       df_tk_asm_addr_mode
f90e : 2004d7           [ 6] 	jsr df_tk_skip_ws		;Skip whitespace
f911 : c900             [ 2] 	cmp #0					;End of line?
f913 : f0e8             [ 4] 	beq df_tk_asm_addr_mode_ok
f915 : c93a             [ 2] 	cmp #':'				;End of statement?
f917 : f0e4             [ 4] 	beq df_tk_asm_addr_mode_ok
f919 : a923             [ 2] 	lda #'#'				; Check for immediate
f91b : 2028d7           [ 6] 	jsr df_tk_expect_tok
f91e : b003             [ 3] 	bcs df_tk_asm_addr_mode_1
f920 : 4c43f9           [ 3] 	jmp df_tk_imm		; Process immediate
f923 :                       df_tk_asm_addr_mode_1
f923 : a928             [ 2] 	lda #'('				; One of indirect modes?
f925 : 2028d7           [ 6] 	jsr df_tk_expect_tok
f928 : b003             [ 3] 	bcs df_tk_asm_addr_mode_2
f92a : 4c46f9           [ 3] 	jmp df_tk_indirect
f92d :                       df_tk_asm_addr_mode_2
                             	; here just a regular address
                             	; Just one expression expected
f92d : 2025d9           [ 6] 	jsr df_tk_expression
                             	; Is there a comma after the expression
f930 : a92c             [ 2] 	lda #','
f932 : 2028d7           [ 6] 	jsr df_tk_expect_tok
f935 : b0c6             [ 4] 	bcs df_tk_asm_addr_mode_ok
                             	; must be x or y
f937 : a978             [ 2] 	lda #'x'
f939 : 2028d7           [ 6] 	jsr df_tk_expect_tok
f93c : 90bf             [ 4] 	bcc df_tk_asm_addr_mode_ok
                             	; got to here, must be y
f93e : a979             [ 2] 	lda #'y'
f940 : 4c33d7           [ 3] 	jmp df_tk_expect_tok_err
                             	
                             	
                             ;* Tokenise immediate addressing mode	
f943 :                       df_tk_imm
                             	; Just one expression expected
f943 : 4c25d9           [ 3] 	jmp df_tk_expression
                             	
                             ;* Tokenise indirect
f946 :                       df_tk_indirect
                             	; Just one expression expected
f946 : 2025d9           [ 6] 	jsr df_tk_expression
                             	; Is there a comma after the expression
f949 : a92c             [ 2] 	lda #','
AS65 Assembler for R6502 [1.42].                                     Page  268
-------------------------------- bank\bank0.s --------------------------------

f94b : 2028d7           [ 6] 	jsr df_tk_expect_tok
                             	; if not then might be indirect Y
f94e : b00a             [ 3] 	bcs df_tk_indirect_y
                             	; Else must have be indirect "x)"
f950 : a978             [ 2] 	lda #'x'
f952 : 2033d7           [ 6] 	jsr df_tk_expect_tok_err
f955 : a929             [ 2] 	lda #')'
f957 : 4c33d7           [ 3] 	jmp df_tk_expect_tok_err
                             	
f95a :                       df_tk_indirect_y
                             	; Definitely has a close bracket
f95a : a929             [ 2] 	lda #')'
f95c : 2033d7           [ 6] 	jsr df_tk_expect_tok_err
                             	; Is there a comma after the expression
f95f : a92c             [ 2] 	lda #','
f961 : 2028d7           [ 6] 	jsr df_tk_expect_tok
f964 : b005             [ 3] 	bcs df_tk_indirect_done
                             	; if comma then must be indirect y
f966 : a979             [ 2] 	lda #'y'
f968 : 4c33d7           [ 3] 	jmp df_tk_expect_tok_err
                             
f96b :                       df_tk_indirect_done
f96b : 18               [ 2] 	clc
f96c : 60               [ 6] 	rts
                             	
                             
                             	
                             
                             
                             ;************************************************
                             ;*           TOKENISATION SUBROUTINES
                             ;************************************************
                             
                             
                             ;* HANDLE DIRECTIVES
                             
                             ;* All tokenisation is part of regular toksub rou
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
AS65 Assembler for R6502 [1.42].                                     Page  269
-------------------------------- bank\bank0.s --------------------------------

                             
                             
                             
f96d :                       mod_sz_tkasm_e
                             
                             
                             	include "dflat/rtasm.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  RTASM.S
                             ;*  Module that implements the runtime execution 
                             ;*  assembler.
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code  
                             
f96d :                       mod_sz_rtasm_s
                             
f96d :                       df_rt_asm_assemble
                             	; check if >=0x80 (directive or mnemonic)
f96d : a488             [ 3] 	ldy df_exeoff
f96f : b186             [ 5] 	lda (df_currlin),y
f971 : 1009             [ 3] 	bpl df_rt_asm_do_label
f973 : 2080f9           [ 6] 	jsr df_rt_asm_command
f976 : 2075fb           [ 6] 	jsr df_rt_asm_printCR
f979 : 4c7ff9           [ 3] 	jmp df_rt_asm_assemble_done
f97c :                       df_rt_asm_do_label
f97c : 20a4f9           [ 6] 	jsr df_rt_asm_label
f97f :                       df_rt_asm_assemble_done
                             	; any clean up here
f97f : 60               [ 6] 	rts
                             
                             ; Jump to mnemonic or 
                             ; directive with index in A ignoring MSB
f980 :                       df_rt_asm_command
f980 : 297f             [ 2] 	and #0x7f
f982 : 48               [ 3] 	pha
f983 : aa               [ 2] 	tax
                             	; Point to Xth symtable entry of addr modes and 
f984 : 2043fc           [ 6] 	jsr df_rt_asm_skip_to_sym
                             
                             	; Get first addressing mode (ignoring offset byt
f987 : a001             [ 2] 	ldy #1
f989 : b181             [ 5] 	lda (df_symtab),y
                             	; is it a directive?
f98b : c910             [ 2] 	cmp #AM_DIR
                             	; if directive
f98d : f003             [ 3] 	beq df_rt_asm_dir
                             	; Else must be a normal mnemonic
f98f : 4c69fa           [ 3] 	jmp df_rt_asm_mnem
                             
                             ; Jump to the appropriate directive
f992 :                       df_rt_asm_dir
                             	; Get the index and *2
AS65 Assembler for R6502 [1.42].                                     Page  270
-------------------------------- bank\bank0.s --------------------------------

                             	; to get jump vector
f992 : 68               [ 4] 	pla
f993 : 0a               [ 2] 	asl a
f994 : aa               [ 2] 	tax
                             	; jump over directive code
f995 : e688             [ 5] 	inc df_exeoff
                             	; jump to directive handler
f997 : bdc7fe           [ 4] 	lda df_rt_asm_tokenjmp,x
f99a : 85a1             [ 3] 	sta df_tmpptra
f99c : bdc8fe           [ 4] 	lda df_rt_asm_tokenjmp+1,x
f99f : 85a2             [ 3] 	sta df_tmpptra+1
f9a1 : 6ca100           [ 6] 	jmp (df_tmpptra)
                             
                             ; Process label
                             ; Set the label to the PC
f9a4 :                       df_rt_asm_label
                             	; Get the address of the variable in A,X
f9a4 : 20a0ec           [ 6] 	jsr df_rt_generate_lvar
f9a7 : 869e             [ 3] 	stx df_asmoprnd
f9a9 : 859f             [ 3] 	sta df_asmoprnd+1
                             	; Assign to value of PC
f9ab : a000             [ 2] 	ldy #0
f9ad : a599             [ 3] 	lda df_asmpc
f9af : 919e             [ 5] 	sta (df_asmoprnd),y
f9b1 : a59a             [ 3] 	lda df_asmpc+1
f9b3 : c8               [ 2] 	iny
f9b4 : 919e             [ 5] 	sta (df_asmoprnd),y
f9b6 : 60               [ 6] 	rts	
                             
                             ;* Set the code origin
f9b7 :                       df_rt_asm_org
                             	; Get the address from expression
f9b7 : 2020fc           [ 6] 	jsr df_rt_asm_get_operand
                             	; Put this in to PC
f9ba : a59e             [ 3] 	lda df_asmoprnd
f9bc : 8599             [ 3] 	sta df_asmpc
f9be : a59f             [ 3] 	lda df_asmoprnd+1
f9c0 : 859a             [ 3] 	sta df_asmpc+1
f9c2 : a903             [ 2] 	lda #3
f9c4 : 85a0             [ 3] 	sta df_asmlen
f9c6 : 4c37fb           [ 3] 	jmp df_rt_asm_printPC
                             
                             ; Set the assembly option
                             ; Bit 0 set = Print code to console
                             ; But 1 set = Write code to memory
                             ; Be sure to run 2 non-write passes
                             ; before a write pass
                             ; First pass may result in ZP used a lot
                             ; Second pass resolves forward refs to ABS
                             ; Final write pass then stores the code
f9c9 :                       df_rt_asm_opt
                             	; Get the value from expression
f9c9 : 2020fc           [ 6] 	jsr df_rt_asm_get_operand
                             	; Put this in to OPT
f9cc : a59e             [ 3] 	lda df_asmoprnd
f9ce : 859b             [ 3] 	sta df_asmopt
f9d0 : 60               [ 6] 	rts
                             
                             ; dw and db handled here
                             ; keep going through comma separated
                             ; list and write bytes or words
                             ; string expansion also handled
AS65 Assembler for R6502 [1.42].                                     Page  271
-------------------------------- bank\bank0.s --------------------------------

f9d1 :                       df_rt_asm_db
f9d1 : a902             [ 2] 	lda #2
f9d3 : 2c                    	db	0x2c			; BIT abs to ignore next 2 bytes
f9d4 :                       df_rt_asm_dw
f9d4 : a903             [ 2] 	lda #3
f9d6 :                       df_rt_asm_db_start
f9d6 : 85a0             [ 3] 	sta df_asmlen
f9d8 : 2037fb           [ 6] 	jsr df_rt_asm_printPC
f9db : 2052fb           [ 6] 	jsr df_rt_asm_printSPC
f9de :                       df_rt_asm_data
f9de : 2073e0           [ 6] 	jsr df_rt_neval		; Evaluate expression
f9e1 : 2077f6           [ 6] 	jsr df_ost_peekType	; What is the type
f9e4 : a8               [ 2] 	tay
f9e5 : 300d             [ 3] 	bmi df_rt_asm_string; If string
f9e7 : 207df6           [ 6] 	jsr df_ost_popInt	; else get number in A,X
f9ea : 869e             [ 3] 	stx df_asmoprnd		; store low value
f9ec : 859f             [ 3] 	sta df_asmoprnd+1	; store high value
f9ee : 201cfa           [ 6] 	jsr df_rt_asm_data_write
f9f1 : 4c11fa           [ 3] 	jmp df_rt_asm_data_next
f9f4 :                       df_rt_asm_string
f9f4 : 2085f6           [ 6] 	jsr df_ost_popPtr	; pop string pointer
f9f7 : 86a1             [ 3] 	stx df_tmpptra		; save pointer to tmpa
f9f9 : 85a2             [ 3] 	sta df_tmpptra+1
f9fb :                       df_rt_asm_string_ch
f9fb : a000             [ 2] 	ldy #0
f9fd : b1a1             [ 5] 	lda (df_tmpptra),y	; Get string char, 0=done
f9ff : f010             [ 4] 	beq df_rt_asm_data_next
fa01 : 859e             [ 3] 	sta df_asmoprnd		; Save as operand
fa03 : 849f             [ 3] 	sty df_asmoprnd+1	; High is always zero
fa05 : 201cfa           [ 6] 	jsr df_rt_asm_data_write
                             	_incZPWord df_tmpptra
                             
fa0e : 4cfbf9           [ 3] 	jmp df_rt_asm_string_ch
fa11 :                       df_rt_asm_data_next
fa11 : 20d6ec           [ 6] 	jsr df_rt_eos		; End?
fa14 : b005             [ 3] 	bcs df_rt_asm_data_done
fa16 : e688             [ 5] 	inc df_exeoff		; Jump over ','
fa18 : 4cdef9           [ 3] 	jmp df_rt_asm_data
fa1b :                       df_rt_asm_data_done
fa1b : 60               [ 6] 	rts	
                             
                             ; Write one db or dw value
                             ; Check for value too big for db
                             ; Advance PC by df_asmlen
fa1c :                       df_rt_asm_data_write
fa1c : 205bfb           [ 6] 	jsr df_rt_asm_printOPR
fa1f :                       df_rt_asm_data_write_skip1
fa1f : a902             [ 2] 	lda #2
fa21 : 259b             [ 3] 	and df_asmopt
fa23 : f017             [ 3] 	beq df_rt_asm_data_write_skip2
fa25 : a59e             [ 3] 	lda df_asmoprnd
fa27 : a000             [ 2] 	ldy #0
fa29 : 9199             [ 5] 	sta (df_asmpc),y
fa2b : c8               [ 2] 	iny
fa2c : a902             [ 2] 	lda #2
fa2e : c5a0             [ 3] 	cmp df_asmlen
fa30 : d006             [ 3] 	bne df_rt_asm_data_write_hi
fa32 : a59f             [ 3] 	lda df_asmoprnd+1
fa34 : d014             [ 3] 	bne df_rt_asm_data_write_err
fa36 : f004             [ 3] 	beq df_rt_asm_data_write_skip2
fa38 :                       df_rt_asm_data_write_hi
fa38 : a59f             [ 3] 	lda df_asmoprnd+1
AS65 Assembler for R6502 [1.42].                                     Page  272
-------------------------------- bank\bank0.s --------------------------------

fa3a : 9199             [ 5] 	sta (df_asmpc),y
fa3c :                       df_rt_asm_data_write_skip2
fa3c : a4a0             [ 3] 	ldy df_asmlen
fa3e : 88               [ 2] 	dey					; Add 1 less!
fa3f : 98               [ 2] 	tya
fa40 : 18               [ 2] 	clc
fa41 : 6599             [ 3] 	adc df_asmpc
fa43 : 8599             [ 3] 	sta df_asmpc
                             	_bcc 2
                             
fa47 : e69a             [ 5] 	inc df_asmpc+1
fa49 : 60               [ 6] 	rts
fa4a :                       df_rt_asm_data_write_err	
                             	SWBRK DFERR_QUANTITY
                             
                             	
                             	
fa4c :                       df_rt_asm_ds
fa4c : 2037fb           [ 6] 	jsr df_rt_asm_printPC
fa4f : 2052fb           [ 6] 	jsr df_rt_asm_printSPC
                             	; Get the address from expression
fa52 : 2020fc           [ 6] 	jsr df_rt_asm_get_operand
                             	; ADD this in to PC
fa55 : 18               [ 2] 	clc
fa56 : a59e             [ 3] 	lda df_asmoprnd
fa58 : 6599             [ 3] 	adc df_asmpc
fa5a : 8599             [ 3] 	sta df_asmpc
fa5c : a59f             [ 3] 	lda df_asmoprnd+1
fa5e : 659a             [ 3] 	adc df_asmpc+1
fa60 : 859a             [ 3] 	sta df_asmpc+1
                             	; len=1 for printing
fa62 : a903             [ 2] 	lda #3
fa64 : 85a0             [ 3] 	sta df_asmlen
fa66 : 4c5bfb           [ 3] 	jmp df_rt_asm_printOPR
                             
                             
                             ; Process a normal assembler mnemonic
fa69 :                       df_rt_asm_mnem
fa69 : 68               [ 4] 	pla				; Throw away previous temp variable
                             	; jump over mnemonic code
fa6a : e688             [ 5] 	inc df_exeoff
                             	; work out the addressing mode and get operand
fa6c : 20a3fb           [ 6] 	jsr df_rt_asm_addrmode
                             
fa6f :                       df_rt_asm_mnem_try
fa6f : a59c             [ 3] 	lda df_asmadmd					; With the addressing mode
fa71 : 202bfc           [ 6] 	jsr df_rt_asm_find_addr_mode	; Find it for this 
fa74 : c900             [ 2] 	cmp #AM_NONE					; Exists?
fa76 : d014             [ 3] 	bne	df_rt_asm_mnem_chk			; If does then check it
fa78 :                       df_rt_asm_check_alt
fa78 : a69c             [ 3] 	ldx df_asmadmd					; Use ad mode as an index
fa7a : bd80fc           [ 4] 	lda df_asm_altaddrmode,x		; Else get alternate
fa7d : c900             [ 2] 	cmp #AM_NONE					; Is there an alternate?
fa7f : f02d             [ 3] 	beq df_rt_asm_mnem_err			; If no then error
fa81 : 202bfc           [ 6] 	jsr df_rt_asm_find_addr_mode	; Check does mode e
fa84 : c900             [ 2] 	cmp #AM_NONE					; this instruction
fa86 : f026             [ 3] 	beq df_rt_asm_mnem_err			; if no then error
fa88 : c59c             [ 3] 	cmp df_asmadmd					; Same as the original?
fa8a : f00e             [ 3] 	beq df_rt_asm_mnem_done			; if so then done
fa8c :                       df_rt_asm_mnem_chk
fa8c : 859c             [ 3] 	sta df_asmadmd					; This is the final mode
fa8e : aa               [ 2] 	tax								; Get the length
AS65 Assembler for R6502 [1.42].                                     Page  273
-------------------------------- bank\bank0.s --------------------------------

fa8f : bd6ffc           [ 4] 	lda df_asm_length,x
fa92 : a69f             [ 3] 	ldx df_asmoprnd+1				; Is operand hi non-zero?
fa94 : f004             [ 3] 	beq df_rt_asm_mnem_done			; If zero then done
fa96 : c903             [ 2] 	cmp #3							; Else must be len 3?
fa98 : d0de             [ 3] 	bne df_rt_asm_check_alt			; Try an alternate
fa9a :                       df_rt_asm_mnem_done
fa9a : a69c             [ 3] 	ldx df_asmadmd					; Get the final mode index
fa9c : bd6ffc           [ 4] 	lda df_asm_length,x				; Get the length
fa9f : 85a0             [ 3] 	sta df_asmlen
faa1 : a59c             [ 3] 	lda df_asmadmd					; Get the final mode
faa3 : 202bfc           [ 6] 	jsr df_rt_asm_find_addr_mode	; Get the Y index o
                             	; Ok now get the opcode
faa6 : c8               [ 2] 	iny
faa7 : b181             [ 5] 	lda (df_symtab),y
faa9 : 859d             [ 3] 	sta df_asmopcde
                             	; Now have all information to assemble
faab : 4cb0fa           [ 3] 	jmp df_rt_asm_encode
                             	
faae :                       df_rt_asm_mnem_err
                             	SWBRK DFERR_SYNTAX
                             
                             	
                             ; Take assembler data and encode it
                             ; depending on the current option
                             ; Option 0 = No write
                             ; Option 1 = No write, Print
                             ; Option 2 = Write
                             ; Option 3 = Write, Print
fab0 :                       df_rt_asm_encode
                             	; If relative then need to calculate offset
fab0 : a59c             [ 3] 	lda df_asmadmd
fab2 : c90f             [ 2] 	cmp #AM_REL
fab4 : d033             [ 3] 	bne df_rt_asm_encode_skiprel
                             	; If high byte is 0 then do nothing
fab6 : a59f             [ 3] 	lda df_asmoprnd+1
fab8 : f02f             [ 3] 	beq df_rt_asm_encode_skiprel
                             	; else calculate distance from PC
                             	; first take 2 off operand
faba : 38               [ 2] 	sec
fabb : a59e             [ 3] 	lda df_asmoprnd
fabd : e902             [ 2] 	sbc #2
fabf : 859e             [ 3] 	sta df_asmoprnd
fac1 : a59f             [ 3] 	lda df_asmoprnd+1
fac3 : e900             [ 2] 	sbc #0
fac5 : 859f             [ 3] 	sta df_asmoprnd+1
                             	; now calculate current operand-PC
fac7 : 38               [ 2] 	sec
fac8 : a59e             [ 3] 	lda df_asmoprnd
faca : e599             [ 3] 	sbc df_asmpc
facc : 859e             [ 3] 	sta df_asmoprnd
face : a59f             [ 3] 	lda df_asmoprnd+1
fad0 : e59a             [ 3] 	sbc df_asmpc+1
                             	; put 0 in high operand storage
                             	; but A contains result of subtraction
                             	; so check that for out of range
fad2 : a000             [ 2] 	ldy #0
fad4 : 849f             [ 3] 	sty df_asmoprnd+1
                             	; detect too far; high byte is either 0 or 255
                             	; else it's an error
fad6 : a8               [ 2] 	tay
fad7 : f00a             [ 3] 	beq df_rt_asm_encode_relpos
fad9 : c9ff             [ 2] 	cmp #0xff
AS65 Assembler for R6502 [1.42].                                     Page  274
-------------------------------- bank\bank0.s --------------------------------

fadb : d00a             [ 3] 	bne df_rt_asm_encode_relfar
                             	; if high is ff then low must be same -ve
fadd : a59e             [ 3] 	lda df_asmoprnd
fadf : 3008             [ 3] 	bmi df_rt_asm_encode_skiprel
                             	; else error
fae1 : 1004             [ 3] 	bpl df_rt_asm_encode_relfar
fae3 :                       df_rt_asm_encode_relpos
                             	; if high is 00 then low must be same +ve
fae3 : a59e             [ 3] 	lda df_asmoprnd
fae5 : 1002             [ 3] 	bpl df_rt_asm_encode_skiprel
                             	; else error
fae7 :                       df_rt_asm_encode_relfar
                             	; set to non-zero value, dec because it is zero 
fae7 : c69f             [ 5] 	dec df_asmoprnd+1
fae9 :                       df_rt_asm_encode_skiprel
                             	; Only write the code if bit 1=1
fae9 : a902             [ 2] 	lda #0x02
faeb : 259b             [ 3] 	and df_asmopt
faed : f028             [ 4] 	beq df_rt_asm_encode_print
faef : a000             [ 2] 	ldy #0
faf1 : a59d             [ 3] 	lda df_asmopcde
faf3 : 9199             [ 5] 	sta (df_asmpc),y
faf5 : a5a0             [ 3] 	lda df_asmlen
faf7 : c901             [ 2] 	cmp #1						; No operand
faf9 : f01c             [ 4] 	beq df_rt_asm_encode_print
fafb : c903             [ 2] 	cmp #3						; Word operand
fafd : f00e             [ 4] 	beq df_rt_asm_encode_writeword
                             	; byte operand, high byte must be zero
faff : a59f             [ 3] 	lda df_asmoprnd+1
fb01 : f002             [ 3] 	beq df_rt_asm_encode_writebyte
                             	SWBRK DFERR_QUANTITY
                             
fb05 :                       df_rt_asm_encode_writebyte
fb05 : c8               [ 2] 	iny 
fb06 : a59e             [ 3] 	lda df_asmoprnd
fb08 : 9199             [ 5] 	sta (df_asmpc),y
fb0a : 4c17fb           [ 3] 	jmp df_rt_asm_encode_print
fb0d :                       df_rt_asm_encode_writeword
fb0d : c8               [ 2] 	iny 
fb0e : a59e             [ 3] 	lda df_asmoprnd
fb10 : 9199             [ 5] 	sta (df_asmpc),y
fb12 : c8               [ 2] 	iny 
fb13 : a59f             [ 3] 	lda df_asmoprnd+1
fb15 : 9199             [ 5] 	sta (df_asmpc),y	
fb17 :                       df_rt_asm_encode_print
fb17 : 2027fb           [ 6] 	jsr df_rt_asm_print_mmen
                             	; advance pc
fb1a : 18               [ 2] 	clc
fb1b : a599             [ 3] 	lda df_asmpc
fb1d : 65a0             [ 3] 	adc df_asmlen
fb1f : 8599             [ 3] 	sta df_asmpc
                             	_bcc 2
                             
fb23 : e69a             [ 5] 	inc df_asmpc+1
fb25 : 18               [ 2] 	clc
fb26 : 60               [ 6] 	rts
                             
                             
                             ; Print the full 1,2,3 byte instruction
                             ; depends on df_asmopt
fb27 :                       df_rt_asm_print_mmen
fb27 : 2037fb           [ 6] 	jsr df_rt_asm_printPC
AS65 Assembler for R6502 [1.42].                                     Page  275
-------------------------------- bank\bank0.s --------------------------------

fb2a : 2052fb           [ 6] 	jsr df_rt_asm_printSPC
fb2d : 2047fb           [ 6] 	jsr df_rt_asm_printOPC
fb30 : 2052fb           [ 6] 	jsr df_rt_asm_printSPC
fb33 : 205bfb           [ 6] 	jsr df_rt_asm_printOPR
fb36 :                       df_rt_asm_print_rts			; Hopefully subs can get he
fb36 : 60               [ 6] 	rts
                             
fb37 :                       df_rt_asm_printPC
                             	; Check the option bit 0 (Print)
fb37 : a901             [ 2] 	lda #0x01
fb39 : 259b             [ 3] 	and df_asmopt
fb3b : f0f9             [ 3] 	beq df_rt_asm_print_rts
                             	; Print current PC
fb3d : a59a             [ 3] 	lda df_asmpc+1
fb3f : 2083c1           [ 6] 	jsr utilPrintA
fb42 : a599             [ 3] 	lda df_asmpc
fb44 : 4c83c1           [ 3] 	jmp utilPrintA
                             
fb47 :                       df_rt_asm_printOPC
                             	; Check the option bit 0 (Print)
fb47 : a901             [ 2] 	lda #0x01
fb49 : 259b             [ 3] 	and df_asmopt
fb4b : f0e9             [ 3] 	beq df_rt_asm_print_rts
fb4d : a59d             [ 3] 	lda df_asmopcde
fb4f : 4c83c1           [ 3] 	jmp utilPrintA
                             
fb52 :                       df_rt_asm_printSPC
                             	; Check the option bit 0 (Print)
fb52 : a901             [ 2] 	lda #0x01
fb54 : 259b             [ 3] 	and df_asmopt
fb56 : f0de             [ 3] 	beq df_rt_asm_print_rts
fb58 : 4c73c1           [ 3] 	jmp utilPrintSPC
                             	
fb5b :                       df_rt_asm_printOPR
                             	; Check the option bit 0 (Print)
fb5b : a901             [ 2] 	lda #0x01
fb5d : 259b             [ 3] 	and df_asmopt
fb5f : f0d5             [ 3] 	beq df_rt_asm_print_rts	
fb61 : a5a0             [ 3] 	lda df_asmlen				; check how may operand bytes
fb63 : c901             [ 2] 	cmp #1						; if only opcode, done
fb65 : f0cf             [ 3] 	beq df_rt_asm_print_rts	
fb67 : c902             [ 2] 	cmp #2
fb69 : f005             [ 3] 	beq df_rt_asm_printOPR_1	; if only 2 do low byte
fb6b : a59f             [ 3] 	lda df_asmoprnd+1
fb6d : 2083c1           [ 6] 	jsr utilPrintA
fb70 :                       df_rt_asm_printOPR_1
fb70 : a59e             [ 3] 	lda df_asmoprnd
fb72 : 4c83c1           [ 3] 	jmp utilPrintA
                             
fb75 :                       df_rt_asm_printCR
                             	; Check the option bit 0 (Print)
fb75 : a901             [ 2] 	lda #0x01
fb77 : 259b             [ 3] 	and df_asmopt
fb79 : f0bb             [ 3] 	beq df_rt_asm_print_rts
fb7b : 4c7bc1           [ 3] 	jmp utilPrintCRLF
                             
fb7e :                       df_rt_asm_printCH
fb7e : 8538             [ 3] 	sta tmp_d
                             	; Check the option bit 0 (Print)
fb80 : a901             [ 2] 	lda #0x01
fb82 : 259b             [ 3] 	and df_asmopt
fb84 : f0b0             [ 3] 	beq df_rt_asm_print_rts
AS65 Assembler for R6502 [1.42].                                     Page  276
-------------------------------- bank\bank0.s --------------------------------

fb86 : a538             [ 3] 	lda tmp_d
fb88 : 4c54c4           [ 3] 	jmp io_put_ch
                             
                             ; Print an entire line, but save df_exeoff
fb8b :                       df_rt_asm_printline
                             	; Check the option bit 0 (Print)
fb8b : a901             [ 2] 	lda #0x01
fb8d : 259b             [ 3] 	and df_asmopt
fb8f : f0a5             [ 3] 	beq df_rt_asm_print_rts
fb91 : a588             [ 3] 	lda df_exeoff
fb93 : 48               [ 3] 	pha
                             	; use df_tmpptra
                             	_cpyZPWord df_currlin, df_tmpptra
                             
fb9c : 2043ee           [ 6] 	jsr df_rt_list_line_only
fb9f : 68               [ 4] 	pla
fba0 : 8588             [ 3] 	sta df_exeoff
fba2 : 60               [ 6] 	rts
                             
                             
                             ; Calculate the addressing mode
                             ; Populate the operand as needed
                             ; A and df_asmadmd contain Addressing Mode
fba3 :                       df_rt_asm_addrmode	
                             	; Store nothing in address mode
fba3 : a900             [ 2] 	lda #AM_NONE
fba5 : 859c             [ 3] 	sta df_asmadmd
                             	; zero out the operand
fba7 : a900             [ 2] 	lda #0
fba9 : 859e             [ 3] 	sta df_asmoprnd
fbab : 859f             [ 3] 	sta df_asmoprnd+1
fbad : 20d6ec           [ 6] 	jsr df_rt_eos			; End of statement?
fbb0 : b00d             [ 3] 	bcs df_rt_asm_AM_IMP
                             	; jump over whitespace
fbb2 : 20a7e4           [ 6] 	jsr df_rt_skip_ws
                             	; Check what it is
fbb5 : c923             [ 2] 	cmp #'#'				; Immediate?
fbb7 : f034             [ 3] 	beq df_rt_asm_AM_IMM
fbb9 : c928             [ 2] 	cmp #'('				; Indirect something?
fbbb : f03a             [ 3] 	beq df_rt_asm_AM_INDIRECT
                             	; Must be ABS,ZP or REL
fbbd : d005             [ 3] 	bne df_rt_asm_ABSREL
                             ; Process IMP/ACC
fbbf :                       df_rt_asm_AM_IMP
fbbf : a90d             [ 2] 	lda #AM_IMP
fbc1 : 859c             [ 3] 	sta df_asmadmd
fbc3 : 60               [ 6] 	rts
                             ; Process ABS or REL
fbc4 :                       df_rt_asm_ABSREL	
                             	; Evaluate operand
fbc4 : 2020fc           [ 6] 	jsr df_rt_asm_get_operand
                             
fbc7 : 20d6ec           [ 6] 	jsr df_rt_eos			; End of statement?
fbca : b00f             [ 3] 	bcs df_rt_asm_AM_ABS
fbcc : c8               [ 2] 	iny						; Jump over ","
fbcd : b186             [ 5] 	lda (df_currlin),y		; Load X or Y
fbcf : c8               [ 2] 	iny						; Jump over index reg
fbd0 : 8588             [ 3] 	sta df_exeoff			; Save exe offset
fbd2 : c978             [ 2] 	cmp #'x'				; Indirect X?
fbd4 : f012             [ 3] 	beq df_rt_asm_AM_ABSX
                             ; Process ABSY
fbd6 :                       df_rt_asm_AM_ABSY
AS65 Assembler for R6502 [1.42].                                     Page  277
-------------------------------- bank\bank0.s --------------------------------

fbd6 : a906             [ 2] 	lda #AM_ZPY				; Go for smallest modes
fbd8 : 859c             [ 3] 	sta df_asmadmd
fbda : 60               [ 6] 	rts
                             ; Process what looks like pure ABS, could be REL
fbdb :                       df_rt_asm_AM_ABS
fbdb : a001             [ 2] 	ldy #1					; Check first addressing mode
fbdd : b181             [ 5] 	lda (df_symtab),y
fbdf : c90f             [ 2] 	cmp #AM_REL
fbe1 : f002             [ 3] 	beq df_rt_asm_AM_REL
fbe3 : a904             [ 2] 	lda #AM_ZP				; Go for smallest modes
fbe5 :                       df_rt_asm_AM_REL
fbe5 : 859c             [ 3] 	sta df_asmadmd
fbe7 : 60               [ 6] 	rts
                             ; Process ABSX
fbe8 :                       df_rt_asm_AM_ABSX
fbe8 : a905             [ 2] 	lda #AM_ZPX				; Go for smallest modes
fbea : 859c             [ 3] 	sta df_asmadmd
fbec : 60               [ 6] 	rts
                             ; Process Immediate
fbed :                       df_rt_asm_AM_IMM
                             	; skip over #
fbed : e688             [ 5] 	inc df_exeoff
                             	; Get operand
fbef : 2020fc           [ 6] 	jsr df_rt_asm_get_operand
                             	; Mark as immediate
fbf2 : a90c             [ 2] 	lda #AM_IMM
fbf4 : 859c             [ 3] 	sta df_asmadmd
fbf6 : 60               [ 6] 	rts
                             ; Process indirect
fbf7 :                       df_rt_asm_AM_INDIRECT
                             	; skip over (
fbf7 : e688             [ 5] 	inc df_exeoff
                             	; Calculate the operand
fbf9 : 2020fc           [ 6] 	jsr df_rt_asm_get_operand
                             	; what is next char?
fbfc : a488             [ 3] 	ldy df_exeoff
fbfe : b186             [ 5] 	lda (df_currlin),y
fc00 : c929             [ 2] 	cmp #')'			; Could be IND or INDY
fc02 : f009             [ 3] 	beq df_rt_asm_AM_ZPINDORY
                             	; else must be INDX
                             	; skip 'x)'
fc04 : c8               [ 2] 	iny
fc05 : c8               [ 2] 	iny
fc06 : 8488             [ 3] 	sty df_exeoff
fc08 : a908             [ 2] 	lda #AM_ZPINDX
fc0a : 859c             [ 3] 	sta df_asmadmd
fc0c : 60               [ 6] 	rts
                             ; Pure indirect mode found
fc0d :                       df_rt_asm_AM_ZPINDORY
fc0d : a907             [ 2] 	lda #AM_ZPIND			; Assume ZPIND
fc0f : c8               [ 2] 	iny
fc10 : 8488             [ 3] 	sty df_exeoff
                             	; if at end of line/statement then pure indirect
fc12 : 20d6ec           [ 6] 	jsr df_rt_eos			; End of statement?
fc15 : b006             [ 3] 	bcs df_rt_asm_AM_ZPIND
                             	; else must be INDY
fc17 : a909             [ 2] 	lda #AM_ZPINDY
                             	; skip ',Y'
fc19 : c8               [ 2] 	iny
fc1a : c8               [ 2] 	iny
fc1b : 8488             [ 3] 	sty df_exeoff
fc1d :                       df_rt_asm_AM_ZPIND
AS65 Assembler for R6502 [1.42].                                     Page  278
-------------------------------- bank\bank0.s --------------------------------

fc1d : 859c             [ 3] 	sta df_asmadmd
fc1f : 60               [ 6] 	rts
                             
                             ; Get and save the operand
                             ; df_asmoprnd contains the result
fc20 :                       df_rt_asm_get_operand
                             	; evaluate
fc20 : 2073e0           [ 6] 	jsr df_rt_neval
                             	; Get the parameter from stack
fc23 : 207df6           [ 6] 	jsr df_ost_popInt
                             	; put in the operand
fc26 : 869e             [ 3] 	stx df_asmoprnd
fc28 : 859f             [ 3] 	sta df_asmoprnd+1
fc2a : 60               [ 6] 	rts
                             	
                             ; From current symtab entry, find addressing
                             ; mode in A.  AM_NONE=Not found, Y=index
fc2b :                       df_rt_asm_find_addr_mode
                             	; save A in tmp
fc2b : 8538             [ 3] 	sta tmp_d
                             	; Start first entry (1) - 2 = 0xff
fc2d : a0ff             [ 2] 	ldy #0xff
fc2f : a200             [ 2] 	ldx #0
fc31 :                       df_rt_asm_find_addr_mode_loop
                             	; next entry
fc31 : c8               [ 2] 	iny
fc32 : c8               [ 2] 	iny
                             	; if current index > num entries then error
fc33 : 98               [ 2] 	tya
fc34 : 38               [ 2] 	sec
fc35 : e181             [ 6] 	sbc (df_symtab,x)
fc37 : b007             [ 3] 	bcs df_rt_asm_find_addr_mode_err
                             	; is symtab addressing mode what we want?
fc39 : b181             [ 5] 	lda (df_symtab),y
fc3b : c538             [ 3] 	cmp tmp_d
fc3d : d0f2             [ 3] 	bne df_rt_asm_find_addr_mode_loop
                             	; done A=mode, y=index in to df_symtab
fc3f : 60               [ 6] 	rts
fc40 :                       df_rt_asm_find_addr_mode_err
fc40 : a900             [ 2] 	lda #AM_NONE
fc42 :                       df_rt_asm_skip_to_sym_done; Used by function belo
fc42 : 60               [ 6] 	rts
                             
                             
                             ; Skip X amount of symbols in table
                             ; A contains how many addr mode and op code bytes
                             ; df_symtab points to offset byte
fc43 :                       df_rt_asm_skip_to_sym
fc43 : e8               [ 2] 	inx				; so done when X=0
                             	; Start at token symbols beginning
fc44 : a991             [ 2] 	lda #lo(df_asm_tokensyms)
fc46 : 8581             [ 3] 	sta df_symtab
fc48 : a9fc             [ 2] 	lda #hi(df_asm_tokensyms)
fc4a : 8582             [ 3] 	sta df_symtab+1
fc4c : a900             [ 2] 	lda #0
fc4e : 8583             [ 3] 	sta df_symoff
fc50 : a8               [ 2] 	tay
fc51 :                       df_rt_asm_skip_to_sym_next
                             	; Get symtable char
fc51 : b181             [ 5] 	lda (df_symtab),y
                             	; if < ' ' then jumped over symbol chars
fc53 : c920             [ 2] 	cmp #' '
AS65 Assembler for R6502 [1.42].                                     Page  279
-------------------------------- bank\bank0.s --------------------------------

fc55 : 9009             [ 3] 	bcc df_rt_asm_skip_to_sym_end
                             	;else next smy tab char
                             	_incZPWord df_symtab
                             
fc5d : 4c51fc           [ 3] 	jmp df_rt_asm_skip_to_sym_next
                             	; Found end of symbol
fc60 :                       df_rt_asm_skip_to_sym_end
                             	;if done then return
fc60 : ca               [ 2] 	dex
fc61 : f0df             [ 3] 	beq df_rt_asm_skip_to_sym_done
                             	;jump over addr and op code by A bytes
fc63 : 38               [ 2] 	sec
fc64 : 6581             [ 3] 	adc df_symtab
fc66 : 8581             [ 3] 	sta df_symtab
                             	_bcc 2
                             
fc6a : e682             [ 5] 	inc df_symtab+1
fc6c : 4c51fc           [ 3] 	jmp df_rt_asm_skip_to_sym_next
                             
fc6f :                       mod_sz_rtasm_e
                             
                             
                             	include "dflat/asmsymtab.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  ASMSYMTAB.S
                             ;*	Mainly this contains the symbol table for asse
                             ;*	mnemonics but also meta data like what address
                             ;*	and the length of opcodes.
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code  
                             
                             	;* Length of each addressing mode
                             	;* ORDER significant!
fc6f :                       df_asm_length
fc6f : 00030303020202..      	db	0,3,3,3,2,2,2,2,2,2,3,3,2,1,1,2,0
                             
                             	; Always try for lowest addressing mode, but
                             	; this table maps to alternative
fc80 :                       df_asm_altaddrmode
fc80 : 00                    	db AM_NONE		;AM_NONE	= 0
fc81 : 00                    	db AM_NONE		;AM_ABS	 	= 1
fc82 : 00                    	db AM_NONE		;AM_ABSX	= 2
fc83 : 00                    	db AM_NONE		;AM_ABSY	= 3
fc84 : 01                    	db AM_ABS		;AM_ZP		= 4
fc85 : 02                    	db AM_ABSX		;AM_ZPX		= 5
fc86 : 03                    	db AM_ABSY		;AM_ZPY		= 6
fc87 : 0a                    	db AM_ABSIND	;AM_ZPIND	= 7
fc88 : 0b                    	db AM_ABSINDX	;AM_ZPINDX	= 8
fc89 : 09                    	db AM_ZPINDY	;AM_ZPINDY	= 9
fc8a : 00                    	db AM_NONE		;AM_ABSIND	= 10
fc8b : 00                    	db AM_NONE		;AM_ABSINDX	= 11
fc8c : 00                    	db AM_NONE		;AM_IMM		= 12
AS65 Assembler for R6502 [1.42].                                     Page  280
-------------------------------- bank\bank0.s --------------------------------

fc8d : 00                    	db AM_NONE		;AM_ACC		= 13
fc8e : 00                    	db AM_NONE		;AM_IMP		= AM_ACC
fc8f : 0f                    	db AM_REL		;AM_REL		= 15
fc90 : 00                    	db AM_NONE		;AM_DIR		= 16
                             
                             
                             	;*	Mnemonic/	How many addressing modes /
                             	;* 	Mode		Opcode for mode
fc91 :                       df_asm_tokensyms
                             	;* Start with directives
fc91 : 6f726702              	db	"org",		1*2
fc95 : 1000                  	db	AM_DIR,		0x00
fc97 : 6f707402              	db	"opt",		1*2
fc9b : 1000                  	db	AM_DIR,		0x00
fc9d : 646202                	db	"db",		1*2
fca0 : 1000                  	db	AM_DIR,		0x00
fca2 : 647702                	db	"dw",		1*2
fca5 : 1000                  	db	AM_DIR,		0x00
fca7 : 647302                	db	"ds",		1*2
fcaa : 1000                  	db	AM_DIR,		0x00	
                             
fcac : 61646310              	db	"adc",		8*2
fcb0 : 0c69                  	db	AM_IMM,		0x69
fcb2 : 0465                  	db	AM_ZP,		0x65
fcb4 : 0575                  	db	AM_ZPX,		0x75
fcb6 : 016d                  	db	AM_ABS,		0x6d
fcb8 : 027d                  	db	AM_ABSX,	0x7d
fcba : 0379                  	db	AM_ABSY,	0x79
fcbc : 0861                  	db	AM_ZPINDX,	0x61
fcbe : 0971                  	db	AM_ZPINDY,	0x71
                             	
fcc0 : 616e6410              	db	"and",		8*2
fcc4 : 0c29                  	db	AM_IMM,		0x29
fcc6 : 0425                  	db	AM_ZP,		0x25
fcc8 : 0535                  	db	AM_ZPX,		0x35
fcca : 012d                  	db	AM_ABS,		0x2d
fccc : 023d                  	db	AM_ABSX,	0x3d
fcce : 0339                  	db	AM_ABSY,	0x39
fcd0 : 0821                  	db	AM_ZPINDX,	0x21
fcd2 : 0931                  	db	AM_ZPINDY,	0x31
                             
fcd4 : 636d7010              	db	"cmp",		8*2
fcd8 : 0cc9                  	db	AM_IMM,		0xc9
fcda : 04c5                  	db	AM_ZP,		0xc5
fcdc : 05d5                  	db	AM_ZPX,		0xd5
fcde : 01cd                  	db	AM_ABS,		0xcd
fce0 : 02dd                  	db	AM_ABSX,	0xdd
fce2 : 03d9                  	db	AM_ABSY,	0xd9
fce4 : 08c1                  	db	AM_ZPINDX,	0xc1
fce6 : 09d1                  	db	AM_ZPINDY,	0xd1
                             
fce8 : 656f7210              	db	"eor",		8*2
fcec : 0c49                  	db	AM_IMM,		0x49
fcee : 0445                  	db	AM_ZP,		0x45
fcf0 : 0555                  	db	AM_ZPX,		0x55
fcf2 : 014d                  	db	AM_ABS,		0x4d
fcf4 : 025d                  	db	AM_ABSX,	0x5d
fcf6 : 0359                  	db	AM_ABSY,	0x59
fcf8 : 0841                  	db	AM_ZPINDX,	0x41
fcfa : 0951                  	db	AM_ZPINDY,	0x51
                             
fcfc : 6c646110              	db	"lda",		8*2
AS65 Assembler for R6502 [1.42].                                     Page  281
-------------------------------- bank\bank0.s --------------------------------

fd00 : 0ca9                  	db	AM_IMM,		0xa9
fd02 : 04a5                  	db	AM_ZP,		0xa5
fd04 : 05b5                  	db	AM_ZPX,		0xb5
fd06 : 01ad                  	db	AM_ABS,		0xad
fd08 : 02bd                  	db	AM_ABSX,	0xbd
fd0a : 03b9                  	db	AM_ABSY,	0xb9
fd0c : 08a1                  	db	AM_ZPINDX,	0xa1
fd0e : 09b1                  	db	AM_ZPINDY,	0xb1
                             
fd10 : 6f726110              	db	"ora",		8*2
fd14 : 0c09                  	db	AM_IMM,		0x09
fd16 : 0405                  	db	AM_ZP,		0x05
fd18 : 0515                  	db	AM_ZPX,		0x15
fd1a : 010d                  	db	AM_ABS,		0x0d
fd1c : 021d                  	db	AM_ABSX,	0x1d
fd1e : 0319                  	db	AM_ABSY,	0x19
fd20 : 0801                  	db	AM_ZPINDX,	0x01
fd22 : 0911                  	db	AM_ZPINDY,	0x11
                             
fd24 : 73626310              	db	"sbc",		8*2
fd28 : 0ce9                  	db	AM_IMM,		0xe9
fd2a : 04e5                  	db	AM_ZP,		0xe5
fd2c : 05f5                  	db	AM_ZPX,		0xf5
fd2e : 01ed                  	db	AM_ABS,		0xed
fd30 : 02fd                  	db	AM_ABSX,	0xfd
fd32 : 03f9                  	db	AM_ABSY,	0xf9
fd34 : 08e1                  	db	AM_ZPINDX,	0xe1
fd36 : 09f1                  	db	AM_ZPINDY,	0xf1
                             
fd38 : 73746110              	db	"sta",		8*2
fd3c : 0485                  	db	AM_ZP,		0x85
fd3e : 0595                  	db	AM_ZPX,		0x95
fd40 : 018d                  	db	AM_ABS,		0x8d
fd42 : 029d                  	db	AM_ABSX,	0x9d
fd44 : 0399                  	db	AM_ABSY,	0x99
fd46 : 0881                  	db	AM_ZPINDX,	0x81
fd48 : 0991                  	db	AM_ZPINDY,	0x91
fd4a : 0792                  	db	AM_ZPIND,	0x92
                             
fd4c : 61736c0a              	db	"asl",		5*2
fd50 : 0d0a                  	db	AM_IMP,		0x0a
fd52 : 0406                  	db	AM_ZP,		0x06
fd54 : 0516                  	db	AM_ZPX,		0x16
fd56 : 010e                  	db	AM_ABS,		0x0e
fd58 : 021e                  	db	AM_ABSX,	0x1e
fd5a : 64656308              	db	"dec",		4*2
fd5e : 04c6                  	db	AM_ZP,		0xc6
fd60 : 05d6                  	db	AM_ZPX,		0xd6
fd62 : 01ce                  	db	AM_ABS,		0xce
fd64 : 02de                  	db	AM_ABSX,	0xde
fd66 : 696e6308              	db	"inc",		4*2
fd6a : 04e6                  	db	AM_ZP,		0xe6
fd6c : 05f6                  	db	AM_ZPX,		0xf6
fd6e : 01ee                  	db	AM_ABS,		0xee
fd70 : 02fe                  	db	AM_ABSX,	0xfe
fd72 : 6c73720a              	db	"lsr",		5*2
fd76 : 0d4a                  	db	AM_IMP,		0x4a
fd78 : 0446                  	db	AM_ZP,		0x46
fd7a : 0556                  	db	AM_ZPX,		0x56
fd7c : 014e                  	db	AM_ABS,		0x4e
fd7e : 025e                  	db	AM_ABSX,	0x5e
fd80 : 726f6c0a              	db	"rol",		5*2
AS65 Assembler for R6502 [1.42].                                     Page  282
-------------------------------- bank\bank0.s --------------------------------

fd84 : 0d2a                  	db	AM_IMP,		0x2a
fd86 : 0426                  	db	AM_ZP,		0x26
fd88 : 0536                  	db	AM_ZPX,		0x36
fd8a : 012e                  	db	AM_ABS,		0x2e
fd8c : 023e                  	db	AM_ABSX,	0x3e
fd8e : 726f720a              	db	"ror",		5*2
fd92 : 0d6a                  	db	AM_IMP,		0x6a
fd94 : 0466                  	db	AM_ZP,		0x66
fd96 : 0576                  	db	AM_ZPX,		0x76
fd98 : 016e                  	db	AM_ABS,		0x6e
fd9a : 027e                  	db	AM_ABSX,	0x7e
                             
fd9c : 62697404              	db	"bit",		2*2
fda0 : 0424                  	db	AM_ZP,		0x24
fda2 : 012c                  	db	AM_ABS,		0x2c
                             	
fda4 : 62726b02              	db	"brk",		1*2
fda8 : 0d00                  	db	AM_IMP,		0x00
                             	
fdaa : 636c6302              	db	"clc",		1*2
fdae : 0d18                  	db	AM_IMP,		0x18
fdb0 : 636c6402              	db	"cld",		1*2
fdb4 : 0dd8                  	db	AM_IMP,		0xd8
fdb6 : 636c6902              	db	"cli",		1*2
fdba : 0d58                  	db	AM_IMP,		0x58
fdbc : 636c7602              	db	"clv",		1*2
fdc0 : 0db8                  	db	AM_IMP,		0xb8
fdc2 : 73656302              	db	"sec",		1*2
fdc6 : 0d38                  	db	AM_IMP,		0x38
fdc8 : 73656402              	db	"sed",		1*2
fdcc : 0df8                  	db	AM_IMP,		0xf8
fdce : 73656902              	db	"sei",		1*2
fdd2 : 0d78                  	db	AM_IMP,		0x78
                             	
fdd4 : 63707806              	db	"cpx",		3*2
fdd8 : 0ce0                  	db	AM_IMM,		0xe0
fdda : 04e4                  	db	AM_ZP,		0xe4
fddc : 01ec                  	db	AM_ABS,		0xec
fdde : 63707906              	db	"cpy",		3*2
fde2 : 0cc0                  	db	AM_IMM,		0xc0
fde4 : 04c4                  	db	AM_ZP,		0xc4
fde6 : 01cc                  	db	AM_ABS,		0xcc
fde8 : 64657802              	db	"dex",		1*2
fdec : 0dca                  	db	AM_IMP,		0xca
fdee : 64657902              	db	"dey",		1*2
fdf2 : 0d88                  	db	AM_IMP,		0x88
fdf4 : 696e7802              	db	"inx",		1*2
fdf8 : 0de8                  	db	AM_IMP,		0xe8
fdfa : 696e7902              	db	"iny",		1*2
fdfe : 0dc8                  	db	AM_IMP,		0xc8
fe00 : 6c64780a              	db	"ldx",		5*2
fe04 : 0ca2                  	db	AM_IMM,		0xa2
fe06 : 04a6                  	db	AM_ZP,		0xa6
fe08 : 06b6                  	db	AM_ZPY,		0xb6
fe0a : 01ae                  	db	AM_ABS,		0xae
fe0c : 03be                  	db	AM_ABSY,	0xbe
fe0e : 6c64790a              	db	"ldy",		5*2
fe12 : 0ca0                  	db	AM_IMM,		0xa0
fe14 : 04a4                  	db	AM_ZP,		0xa4
fe16 : 05b4                  	db	AM_ZPX,		0xb4
fe18 : 01ac                  	db	AM_ABS,		0xac
fe1a : 02bc                  	db	AM_ABSX,	0xbc
AS65 Assembler for R6502 [1.42].                                     Page  283
-------------------------------- bank\bank0.s --------------------------------

fe1c : 73747806              	db	"stx",		3*2
fe20 : 0486                  	db	AM_ZP,		0x86
fe22 : 0696                  	db	AM_ZPY,		0x96
fe24 : 018e                  	db	AM_ABS,		0x8e
fe26 : 73747906              	db	"sty",		3*2
fe2a : 0484                  	db	AM_ZP,		0x84
fe2c : 0594                  	db	AM_ZPX,		0x94
fe2e : 018c                  	db	AM_ABS,		0x8c
                             
fe30 : 62636302              	db	"bcc",		1*2
fe34 : 0f90                  	db	AM_REL,		0x90
fe36 : 62637302              	db	"bcs",		1*2
fe3a : 0fb0                  	db	AM_REL,		0xb0
fe3c : 62657102              	db	"beq",		1*2
fe40 : 0ff0                  	db	AM_REL,		0xf0
fe42 : 626d6902              	db	"bmi",		1*2
fe46 : 0f30                  	db	AM_REL,		0x30
fe48 : 626e6502              	db	"bne",		1*2
fe4c : 0fd0                  	db	AM_REL,		0xd0
fe4e : 62706c02              	db	"bpl",		1*2
fe52 : 0f10                  	db	AM_REL,		0x10
fe54 : 62766302              	db	"bvc",		1*2
fe58 : 0f50                  	db	AM_REL,		0x50
fe5a : 62767302              	db	"bvs",		1*2
fe5e : 0f70                  	db	AM_REL,		0x70
fe60 : 6a6d7004              	db	"jmp",		2*2
fe64 : 014c                  	db	AM_ABS,		0x4c
fe66 : 0a6c                  	db	AM_ABSIND,	0x6c
fe68 : 6a737202              	db	"jsr",		1*2
fe6c : 0120                  	db	AM_ABS,		0x20
                             	
fe6e : 6e6f7002              	db	"nop",		1*2
fe72 : 0dea                  	db	AM_IMP,		0xea
fe74 : 70686102              	db	"pha",		1*2
fe78 : 0d48                  	db	AM_IMP,		0x48
fe7a : 70687002              	db	"php",		1*2
fe7e : 0d08                  	db	AM_IMP,		0x08
fe80 : 706c6102              	db	"pla",		1*2
fe84 : 0d68                  	db	AM_IMP,		0x68
fe86 : 706c7002              	db	"plp",		1*2
fe8a : 0d28                  	db	AM_IMP,		0x28
fe8c : 72746902              	db	"rti",		1*2
fe90 : 0d40                  	db	AM_IMP,		0x40
fe92 : 72747302              	db	"rts",		1*2
fe96 : 0d60                  	db	AM_IMP,		0x60
fe98 : 74617802              	db	"tax",		1*2
fe9c : 0daa                  	db	AM_IMP,		0xaa
fe9e : 74617902              	db	"tay",		1*2
fea2 : 0da8                  	db	AM_IMP,		0xa8
fea4 : 74737802              	db	"tsx",		1*2
fea8 : 0dba                  	db	AM_IMP,		0xba
feaa : 74786102              	db	"txa",		1*2
feae : 0d8a                  	db	AM_IMP,		0x8a
feb0 : 74787302              	db	"txs",		1*2
feb4 : 0d9a                  	db	AM_IMP,		0x9a
feb6 : 74796102              	db	"tya",		1*2
feba : 0d98                  	db	AM_IMP,		0x98	
                             	
                             	;* Terminates with a zero
febc : 00                    	db	0
                             
                             	include	"dflat/asmjmptab.s"
AS65 Assembler for R6502 [1.42].                                     Page  284
-------------------------------- bank\bank0.s --------------------------------

                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  ASMJUMPTAB.S
                             ;*  Runtime token jump table for assembler.
                             ;*  dflat uses four key tables to tokenise and ru
                             ;*  - df_tokensyms    - table of token symbols
                             ;*  - df_tk_tokentype - table of token types
                             ;*  - df_tk_tokenjmp  - table of tokenising routi
                             ;*  - df_rt_tokenjmp  - table of runtime routines
                             ;*  The key is the token symbols.  When a line is
                             ;*  in to the raw (untokenised) buffer, df_tokens
                             ;*  used to identify tokens.  The position of the
                             ;*  token is used to then look up type and jump v
                             ;*  in the other tables.
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code  
                             
                             ; Tokeniser jump table
                             ; Only directives needed as all opcodes are handl
                             ; through a single routine
febd :                       df_tk_asm_tokenjmp
febd : 6bde                  	dw	df_tk_asm_org
febf : 6bde                  	dw	df_tk_asm_opt
fec1 : cddd                  	dw	df_tk_asm_db
fec3 : cddd                  	dw	df_tk_asm_dw
fec5 : 6bde                  	dw	df_tk_asm_ds
                             
fec7 :                       df_rt_asm_tokenjmp
fec7 : b7f9                  	dw	df_rt_asm_org
fec9 : c9f9                  	dw	df_rt_asm_opt
fecb : d1f9                  	dw	df_rt_asm_db
fecd : d4f9                  	dw	df_rt_asm_dw
fecf : 4cfa                  	dw	df_rt_asm_ds
                             
                             
                             ;****************************************
                             ;* as_init
                             ;* Initialise assembler settings
                             ;****************************************
fed1 :                       asm_init
                             	; Zero the PC
fed1 : a900             [ 2] 	lda #0
fed3 : 8599             [ 3] 	sta df_asmpc
fed5 : 859a             [ 3] 	sta df_asmpc+1
                             	; Zero the option
fed7 : 859b             [ 3] 	sta df_asmopt
fed9 : 60               [ 6] 	rts
                             
feda :                       mod_sz_asm_e
                             
feda :                       mod_sz_language_e
                             	; End of Code
feda :                       _code_end
AS65 Assembler for R6502 [1.42].                                     Page  285
-------------------------------- bank\bank0.s --------------------------------

                             
No errors in pass 2.
Wrote binary from address $c000 through $ffff.
Total size 16384 bytes.
